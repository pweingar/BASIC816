
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D SYSTEM=2 -D C256_SKU=2 -D UARTSUPPORT= -D UNITTEST=0 -D TRACE_LEVEL=0 --long-address --flat -b --m65816 --intel-hex -o basic816_1A0000.hex --list=basic816_1A0000.lst --labels=basic816_1A0000.lbl src\basic816.s
; Thu May 13 16:16:04 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					SYSTEM=2
=2					C256_SKU=2
=					UARTSUPPORT=
=0					UNITTEST=0
=0					TRACE_LEVEL=0

;******  Processing input file: src\basic816.s


;******  Processing file: src\constants.s

=2					SYSTEM_C256 = 2         ; C256 Foenix
=1					SYSTEM_C64 = 1          ; Commodore 64 with SuperCPU
=$03					CHAR_CTRL_C = $03       ; CTRL-C: used as a program interrupt key
=$07					CHAR_BELL = $07         ; Ring the console bell
=$08					CHAR_BS = $08           ; Backspace
=$09					CHAR_TAB = $09          ; TAB
=$0a					CHAR_LF = $0A           ; Linefeed
=$0d					CHAR_CR = $0D           ; Carriage Return
=$0f					CHAR_INS = $0F          ; Insert
=$1b					CHAR_ESC = $1B          ; Escape
=$22					CHAR_DQUOTE = $22       ; Double quote
=$20					CHAR_SP = $20           ; Space
=$7f					CHAR_DEL = $7F          ; Delete
=5					ARGUMENT_SIZE = 5       ; Number of bytes in an argument
=8					VAR_NAME_SIZE = 8       ; Maximum number of characters in a variable name
=0					TYPE_INTEGER = 0        ; 32-bit integer
=1					TYPE_FLOAT = 1          ; Single-precision floating point
=2					TYPE_STRING = 2         ; ASCII string
=$80					TYPE_ARR_INTEGER = $80  ; Array of 32-bit integers
=$81					TYPE_ARR_FLOAT = $81    ; Array of 32-bit floats
=$82					TYPE_ARR_STRING = $82   ; Array of strings
=$7f					TYPE_BINDING = $7F      ; A variable name binding
=$ff					TYPE_NAV = $FF          ; Not-A-Value
=0					ERR_OK = 0              ; No error
=1					ERR_BREAK = 1           ; The user pressed an interrupt key
=2					ERR_SYNTAX = 2          ; A syntax error was found on the current line
=3					ERR_MEMORY = 3          ; Out of memory
=4					ERR_TYPE = 4            ; Type mismatch error
=5					ERR_NOTFOUND = 5        ; Variable not found error
=6					ERR_NOLINE = 6          ; Line number not found
=7					ERR_STACKUNDER = 7      ; Stack underflow error
=8					ERR_STACKOVER = 8       ; Stack overflow error
=9					ERR_RANGE = 9           ; Out-of-range error
=10					ERR_ARGUMENT = 10       ; Bad argument error
=11					ERR_NOFILE = 11         ; File not found error
=12					ERR_NAN = 12            ; Floating point math resulted in something that is not a number
=13					ERR_OVERFLOW = 13       ; Math operation overflowed
=14					ERR_UNDERFLOW = 14      ; Math operation underflowed
=15					ERR_DIV0 = 15           ; Math operation involved a division by zero
=16					ERR_DIRECTORY = 16      ; Error reading the directory
=17					ERR_LOAD = 17           ; Could not load file
=18					ERR_SAVE = 18           ; Could not save a file
=19					ERR_DELETE = 19         ; Could not delete a file
=20					ERR_FILENOTFOUND = 20   ; Could not find the file
=21					ERR_DIRNOTWRITE = 21    ; Could not update the directory entry
=22					ERR_NOTCOPIED = 22      ; Could not copy the file
=23					ERR_DOMAIN = 23         ; Mathematical functions domain error

;******  Return to file: src\basic816.s


;******  Processing file: src\memorymap.s


;******  Processing file: src\C256/mmap_c256.s

=1					SYS_C256_FMX = 1        ; System SKU for C256 Foenix FMX
=2					SYS_C256_USER = 2       ; System SKU for C256 Foenix User

;******  Processing file: src\C256/page_00_inc.s

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Unsigned divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 0 Divisor ex B in A/B
=$000114				D0_RESULT        = $000114 ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Signed divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 1 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/int_math_defs.s

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B
=$af1400				SIGNED32_MULT_A     = $AF1400
=$af1404				SIGNED32_MULT_B     = $AF1404
=$af1408				SIGNED32_MULT_OUT   = $AF1408

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/vicky_def.s

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				GAMMA_CTRL_REG          = $AF0002
=$01					GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02					GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08					GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10					HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af0900				VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01					VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02					VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901				VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902				VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903				VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80					VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000

;******  Processing file: src\C256/VKYII_CFP9553_BITMAP_def.s

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_TILEMAP_def.s

=$01					TILE_Enable             = $01
=0					TILEMAP_CONTROL         = 0             ; Offset to a tile map's control register
=1					TILEMAP_START_ADDY      = 1             ; Offset to a tile map's address
=4					TILEMAP_TOTAL_X         = 4             ; Offset to a tile map's width
=6					TILEMAP_TOTAL_Y         = 6             ; Offset to a tile map's height
=8					TILEMAP_WINDOW_X        = 8             ; Offset to a tile map's X position
=10					TILEMAP_WINDOW_Y        = 10            ; Offset to a tile map's Y position
=1					TILEMAP_VISIBLE         = 1             ; Tile map is visible flag
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=2					TILESET_ADDY_H          = 2             ; Offset to high byte of tile set address
=3					TILESET_ADDY_CFG        = 3             ; Offset to the tile set address configuration
=$08					TILESET_SQUARE_256      = $08
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SDMA_def.s

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_VDMA_def.s

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$10					VDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					VDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SPRITE_def.s

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\C256/vicky_def.s


;******  Return to file: src\C256/mmap_c256.s

=$00					BASIC_BANK = $00            ; Memory bank for default purposes
=$004c00				IOBUF = $004C00             ; A buffer for I/O operations
=$004d00				ARRIDXBUF = $004D00         ; The array index buffer used for array references
=$004e00				TEMPBUF = $004E00           ; Temporary buffer for string processing, etc.
=$004f00				INPUTBUF = $004F00          ; Starting address of the line input buffer (one page)
=$005000				RETURN_BOT = $005000        ; Starting address of the return stack
=$005fff				RETURN_TOP = $005FFF        ; Ending address of the return stack
=$006000				ARGUMENT_BOT = $006000      ; Starting address of the argument stack
=$006fff				ARGUMENT_TOP = $006FFF      ; Ending address of the argument stack
=$007000				OPERATOR_BOT = $007000      ; Starting address of the operator stack
=$007fff				OPERATOR_TOP = $007FFF      ; Ending address of the operator stack
=$b00000				VRAM = $B00000              ; Start of video RAM
=$010000				LOADBLOCK = $010000         ; File loading will start here
=$360000				BASIC_BOT := $360000         ; Starting point for BASIC programs
=$37ffff				HEAP_TOP := $37FFFF          ; Starting point of the heap
=$160000				BASIC_BOT := $160000         ; Starting point for BASIC programs
=$17ffff				HEAP_TOP := $17FFFF          ; Starting point of the heap

;******  Return to file: src\memorymap.s

=$00ffe6				VBRK = $00FFE6          ; Vector for the native-mode BRK vector
=$1ad000				DATA_BLOCK = *
=$000800				GLOBAL_VARS = *
>0800					BIP         .dword ?    ; Pointer to the current byte in the current BASIC program
>0804					BIPPREV     .dword ?    ; Pointer to the previous bytein the current BASIC program
>0808					INDEX       .dword ?    ; A temporary pointer
>080c					SCRATCH     .dword ?    ; A temporary scratch variable
>0810					SCRATCH2    .dword ?    ; A temporary scratch variable
>0814					            .word  ?	; Need a few more bits for BCD conversion
>0816					STRPTR      .dword ?    ; A temporary pointer for strings
>081a					CURLINE     .dword ?    ; Pointer to the current input line needing tokenization
>081e					CURTOKLEN   .byte ?     ; Length of the text of the current token
>081f					ARGUMENTSP  .word ?     ; Pointer to the top of the argument stack
>0821					OPERATORSP  .word ?     ; Pointer to the top of the operator stack
>0823					ARGUMENT1   .dword ?    ; Argument 1 for expression calculations
>0827					ARGTYPE1    .byte ?     ; Type code for argument 1 (integer, float, string)
>0828					SIGN1       .byte ?     ; Temporary sign marker for argument 1
>0829					ARGUMENT2   .dword ?    ; Argument 2 for expression calculations
>082d					ARGTYPE2    .byte ?     ; Type code for argument 2 (integer, float, string)
>082e					SIGN2       .byte ?     ; Temporary sign marker for argument 1
>082f					JMP16PTR    .word ?     ; Pointer for 16-bit indirect jumps (within BASIC816's code base)
>0831					GOSUBDEPTH  .word ?     ; Number of GOSUBs on the stack
>0833					RETURNSP    .word ?     ; Pointer to the top of the return stack
>0835					SKIPNEST    .byte ?     ; Flag to indicate if token seeking should respect nesting (MSB set if so)
>0836					NESTING     .byte ?     ; Counter of the depth of lexical nesting for FOR/NEXT, DO/LOOP
>0837					TARGETTOK   .byte ?     ; When searching for a token, TARGETTOK is the token to find
>0838					DATABIP     .dword ?    ; Pointer to the next data element for READ statements
>083c					DATALINE    .dword ?    ; Pointer to the current line for a DATA statement
>0840					SAVEBIP     .dword ?    ; Spot to save BIP temporarily
>0844					SAVELINE    .dword ?    ; Spot to save CURLINE temporarily
=$000848				MONITOR_VARS = *
>0848					MCMDADDR    .long ?     ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
>084b					MCMP_TEXT   .long ?     ;3 Bytes Address of symbol being evaluated for COMPARE routine
>084e					MCMP_LEN    .word ?     ;2 Bytes Length of symbol being evaluated for COMPARE routine
>0850					MCMD        .long ?     ;3 Bytes Address of the current command/function string
>0853					MCMD_LEN    .word ?     ;2 Bytes Length of the current command/function string
>0855					MARG1       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command
>0859					MARG2       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>085d					MARG3       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0861					MARG4       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0865					MARG5       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0869					MARG6       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>086d					MARG7       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0871					MARG8       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0875					MARG9       .dword ?    ;4 Bytes First command argument.
>0879					MARG_LEN    .byte ?     ;1 Byte count of the number of arguments passed
>087a					MCURSOR     .dword ?    ;4 Bytes Pointer to the current memory location for disassembly, memory dump, etc.
>087e					MLINEBUF    .fill 17    ;17 Byte buffer for dumping memory (TODO: could be moved to a general string scratch area)
>088f					MCOUNT      .long ?     ;2 Byte counter
>0892					MTEMP       .dword ?    ;4 Bytes of temporary space
>0896					MCPUSTAT    .byte ?     ;1 Byte to represent what the disassembler thinks the processor MX bits are
>0897					MADDR_MODE  .byte ?     ;1 Byte address mode found by the assembler
>0898					MPARSEDNUM  .dword ?    ;4 Bytes to store a parsed number
>089c					MMNEMONIC   .word ?     ;2 Byte address of mnemonic found by the assembler
>089e					MTEMPPTR    .dword ?    ;4 Byte temporary pointer
>08a2					MJUMPINST   .byte ?     ;1 Byte JSL opcode
>08a3					MJUMPADDR   .long ?     ;3 Byte address for JSL
=$000823				MANTISSA1 = ARGUMENT1
=$000826				EXPONENT1 = ARGUMENT1+3

;******  Return to file: src\basic816.s


;******  Processing file: src\macros.s


;******  Return to file: src\basic816.s

.1a0000	5c 87 89 1a	jmp $1a8987	COLDBOOT        JML START               ; Entry point to boot up BASIC from scratch
.1a0004	5c 99 6f 1a	jmp $1a6f99	MONITOR         JML IMONITOR            ; Entry point to the machine language monitor
.1a0008	5c 33 27 1a	jmp $1a2733	READLINE        JML IREADLINE           ; Wait for the user to enter a line of text (for programming input)
.1a000c	5c ba 02 1a	jmp $1a02ba	SCRCOPYLINE     JML ISCRCPYLINE         ; Copy the line on the screen the user just input to INPUTBUF
.1a0010	5c 58 00 1a	jmp $1a0058	INPUTLINE       JML IINPUTLINE          ; Read a single line of text from the user, and copy it to TEMPBUF (for INPUT statement)
.1a0014	5c b8 00 1a	jmp $1a00b8	GETKEY          JML IGETKEY             ; Wait for a keypress by the user and return the ASCII code in A
.1a0018	5c d4 03 1a	jmp $1a03d4	PRINTC          JML IPRINTC             ; Print the character in A to the console
.1a001c	5c 5e 02 1a	jmp $1a025e	SHOWCURSOR      JML ISHOWCURSOR         ; Set cursor visibility: A=0, hide... A<>0, show.
.1a0020	5c 79 02 1a	jmp $1a0279	CURSORXY        JML ICURSORXY           ; Set the position of the cursor to (X, Y)
.1a0024	5c 80 02 1a	jmp $1a0280	CLSCREEN        JML ICLSCREEN           ; Clear the screen

;******  Processing file: src\bios.s


;******  Processing file: src\membuffers.s

>08a6					OBUFFER     .long ?     ; Pointer to the current text memory buffer for output
>08a9					OBUFFSIZE   .word ?     ; Maximum size of output text memory buffer
>08ab					OBUFFIDX    .word ?     ; Index into the current output buffer
>08ad					IBUFFER     .long ?     ; Pointer to the current text memory buffer for input
>08b0					IBUFFSIZE   .word ?     ; Number of bytes written to the buffer
>08b2					IBUFFIDX    .word ?     ; Index into the current input buffer (next available character)
.1a0028					OBUFF_PUTC
.1a0028	0b		phd		                PHD
.1a0029	08		php		                PHP
.1a002a	08		php		            PHP
.1a002b	c2 20		rep #$20	            REP #$20
.1a002d	48		pha		            PHA
.1a002e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0031	5b		tcd		            TCD
.1a0032	68		pla		            PLA
.1a0033	28		plp		            PLP
.1a0034	e2 20		sep #$20	            SEP #$20
.1a0036	85 b5		sta $08b5	                STA SAVE_A
.1a0038	c2 20		rep #$20	            REP #$20
.1a003a	a5 a6		lda $08a6	                LDA OBUFFER
.1a003c	d0 06		bne $1a0044	                BNE has_buffer
.1a003e	e2 20		sep #$20	            SEP #$20
.1a0040	a5 a8		lda $08a8	                LDA OBUFFER+2
.1a0042	f0 11		beq $1a0055	                BEQ done
.1a0044					has_buffer
.1a0044	c2 10		rep #$10	            REP #$10
.1a0046	a4 ab		ldy $08ab	                LDY OBUFFIDX        ; Check to make sure there is room
.1a0048	c4 a9		cpy $08a9	                CPY OBUFFSIZE
.1a004a	f0 09		beq $1a0055	                BEQ done            ; If not, exit silently
.1a004c	e2 20		sep #$20	            SEP #$20
.1a004e	a5 b5		lda $08b5	                LDA SAVE_A
.1a0050	97 a6		sta [$08a6],y	                STA [OBUFFER],Y     ; Write the character to the buffer
.1a0052	c8		iny		                INY                 ; Increment the index
.1a0053	84 ab		sty $08ab	                STY OBUFFIDX
.1a0055	28		plp		done            PLP
.1a0056	2b		pld		                PLD
.1a0057	60		rts		            RTS

;******  Return to file: src\bios.s


;******  Processing file: src\C256/io_c256.s


;******  Processing file: src\C256/kernel_c256.s

=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001080				FK_PRINTAH          = $001080 ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=$00113c				FK_TESTBREAK        = $00113C ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/RTC_inc.s

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/keyboard.s


;******  Processing file: src\C256/keyboard_def.s

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04
=2					ANSI_IN_INS = 2     ; ANSI input code for INSERT
=3					ANSI_IN_DEL = 3     ; ANSI input code for DELETE
=24					ANSI_IN_F12 = 24    ; ANSI input code for F12
=8					ANSI_IN_CTRL = 8    ; ANSI input modifier flag for CTRL

;******  Return to file: src\C256/keyboard.s

.1a0058					IINPUTLINE
.1a0058	08		php		                PHP
.1a0059	c2 10		rep #$10	            REP #$10
.1a005b	e2 20		sep #$20	            SEP #$20
.1a005d	a9 01		lda #$01	                LDA #1              ; Show the cursor
.1a005f	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a0062	a2 00 00	ldx #$0000	                LDX #0
.1a0065	a9 00		lda #$00	                LDA #0
.1a0067	9f 00 4c 00	sta $004c00,x	zero_loop       STA @lIOBUF,X
.1a006b	e8		inx		                INX
.1a006c	e0 00 01	cpx #$0100	                CPX #$100
.1a006f	d0 f6		bne $1a0067	                BNE zero_loop
.1a0071	a2 00 00	ldx #$0000	                LDX #0
.1a0074					getchar
.1a0074	20 14 00	jsr $1a0014	            JSR GETKEY
.1a0077	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; Got a CR?
.1a0079	d0 03		bne $1a007e	                BNE not_cr
.1a007b	4c b1 00	jmp $1a00b1	                JMP endofline       ; Yes: we're done
.1a007e					not_cr
.1a007e	c9 08		cmp #$08	not_right       CMP #CHAR_BS        ; Is it a backspace?
.1a0080	d0 1a		bne $1a009c	                BNE not_bs
.1a0082	e0 00 00	cpx #$0000	                CPX #0              ; Are we at the beginning of the line?
.1a0085	f0 ed		beq $1a0074	                BEQ getchar         ; yes: ignore the backspace
.1a0087	da		phx		                PHX                 ; Save the cursor position
.1a0088	bf 01 4c 00	lda $004c01,x	clr_loop        LDA @lIOBUF+1,X     ; Get the character above
.1a008c	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the current position
.1a0090	f0 06		beq $1a0098	                BEQ done_clr        ; If we copied a NUL, we're done copying
.1a0092	e8		inx		                INX                 ; Otherwise, keep copying down
.1a0093	e0 ff 00	cpx #$00ff	                CPX #$FF            ; Until we're at the end of the buffer
.1a0096	d0 f0		bne $1a0088	                BNE clr_loop
.1a0098	fa		plx		done_clr        PLX                 ; Restore the cursor position
.1a0099	ca		dex		                DEX                 ; No: move the cursor left
.1a009a	80 0e		bra $1a00aa	                BRA print_bs        ; And print the backspace
.1a009c	c9 20		cmp #$20	not_bs          CMP #$20            ; Is it in range 00 -- 1F?
.1a009e	90 d4		bcc $1a0074	                BLT getchar         ; Yes: ignore it
.1a00a0	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the input buffer
.1a00a4	e8		inx		                INX                 ; Move the cursor forward
.1a00a5					echo
.1a00a5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00a8	80 ca		bra $1a0074	                BRA getchar         ; And get another...
.1a00aa	a9 08		lda #$08	print_bs        LDA #CHAR_BS        ; Backspace character...
.1a00ac	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00af	80 c3		bra $1a0074	                BRA getchar         ; And get another...
.1a00b1	a9 00		lda #$00	endofline       LDA #0              ; Hide the cursor
.1a00b3	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a00b6	28		plp		                PLP
.1a00b7	60		rts		            RTS
.1a00b8					IGETKEY
.1a00b8	da		phx		                PHX
.1a00b9	5a		phy		                PHY
.1a00ba	8b		phb		                PHB
.1a00bb	0b		phd		                PHD
.1a00bc	08		php		                PHP
.1a00bd	22 4c 10 00	jsl $00104c	                JSL FK_GETCHW
.1a00c1	28		plp		                PLP
.1a00c2	2b		pld		                PLD
.1a00c3	ab		plb		                PLB
.1a00c4	7a		ply		                PLY
.1a00c5	fa		plx		                PLX
.1a00c6	60		rts		            RTS
=0					GK_ST_INIT = 0      ; GETKEYE state: initial
=1					GK_ST_ESC = 1       ; GETKEYE state: ESC seen
=2					GK_ST_CSI = 2       ; GETKEYE state: CSI "ESC[" seen
=3					GK_ST_CODE = 3      ; GETKEYE state: We're at the command code in the sequence
=4					GK_ST_MODS = 4      ; GETKEYE state: We're at the modifier code in the sequence
.1a00c7					SEND_ANSI
.1a00c7	08		php		                PHP
.1a00c8	e2 30		sep #$30	            SEP #$30
.1a00ca	48		pha		                PHA
.1a00cb	a9 1b		lda #$1b	                LDA #CHAR_ESC           ; Print ESC
.1a00cd	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00d0	a9 5b		lda #$5b	                LDA #'['                ; Print [
.1a00d2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00d5	68		pla		                PLA                     ; Print the command code
.1a00d6	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00d9	28		plp		                PLP
.1a00da	60		rts		            RTS
.1a00db					GETKEYE
.1a00db	0b		phd		                PHD
.1a00dc	8b		phb		                PHB
.1a00dd	08		php		                PHP
.1a00de	08		php		            PHP
.1a00df	e2 20		sep #$20	            SEP #$20
.1a00e1	48		pha		            PHA
.1a00e2	a9 00		lda #$00	            LDA #0
.1a00e4	48		pha		            PHA
.1a00e5	ab		plb		            PLB
.1a00e6	68		pla		            PLA
.1a00e7	28		plp		            PLP
.1a00e8	08		php		            PHP
.1a00e9	c2 20		rep #$20	            REP #$20
.1a00eb	48		pha		            PHA
.1a00ec	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a00ef	5b		tcd		            TCD
.1a00f0	68		pla		            PLA
.1a00f1	28		plp		            PLP
.1a00f2					locals
>0001					l_character     .byte ?                 ; The character returned by the input stream
>0002					l_state         .byte ?                 ; Current state of the input parser
>0003					l_code          .byte ?                 ; Code number for any escaped input sequence
>0004					l_modifiers     .byte ?                 ; Modifier bit field for any escaped input sequence
.1a00f2	c2 20		rep #$20	            REP #$20
.1a00f4	3b		tsc		            TSC
.1a00f5	38		sec		            SEC
.1a00f6	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a00f9	1b		tcs		            TCS
.1a00fa	e2 20		sep #$20	            SEP #$20
.1a00fc	a9 00		lda #$00	get_reset       LDA #0                  ; Initialize state, code, and modifiers
.1a00fe	83 02		sta $02,s	                STA l_state
.1a0100	83 03		sta $03,s	                STA l_code
.1a0102	83 04		sta $04,s	                STA l_modifiers
.1a0104					loop
.1a0104	20 14 00	jsr $1a0014	            JSR GETKEY
.1a0107	c9 00		cmp #$00	                CMP #0                  ; Is it 0?
.1a0109	f0 f9		beq $1a0104	                BEQ loop                ; Yes: keep waiting
.1a010b	83 01		sta $01,s	                STA l_character         ; Save the character
.1a010d	a3 02		lda $02,s	                LDA l_state             ; What is the current state?
.1a010f	d0 35		bne $1a0146	                BNE chk_st_esc
.1a0111	a3 01		lda $01,s	                LDA l_character         ; Get the character back
.1a0113	c9 08		cmp #$08	                CMP #CHAR_BS            ; Is it a backspace?
.1a0115	d0 0a		bne $1a0121	                BNE not_bs
.1a0117	20 18 00	jsr $1a0018	            JSR PRINTC
.1a011a	a9 50		lda #$50	                LDA #'P'
.1a011c	20 c7 00	jsr $1a00c7	            JSR SEND_ANSI
.1a011f	80 e3		bra $1a0104	                BRA loop                ; And keep waiting for a keypress
.1a0121	c9 0d		cmp #$0d	not_bs          CMP #CHAR_CR            ; Is it a carriage return?
.1a0123	f0 0a		beq $1a012f	                BEQ send                ; Yes: print and return it
.1a0125	c9 1b		cmp #$1b	                CMP #CHAR_ESC           ; Is it ESC?
.1a0127	d0 06		bne $1a012f	                BNE send                ; No: just print it out
.1a0129	a9 01		lda #$01	                LDA #GK_ST_ESC          ; Yes: move to the ESC state
.1a012b	83 02		sta $02,s	                STA l_state
.1a012d	80 d5		bra $1a0104	                BRA loop                ; And get the next character in the sequence
.1a012f					send
.1a012f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0132	a3 01		lda $01,s	done            LDA l_character         ; Save the character so we can return it
.1a0134	85 0c		sta $080c	                STA SCRATCH
.1a0136	c2 20		rep #$20	            REP #$20
.1a0138	3b		tsc		            TSC
.1a0139	18		clc		            CLC
.1a013a	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a013d	1b		tcs		            TCS
.1a013e	e2 20		sep #$20	            SEP #$20
.1a0140	a5 0c		lda $080c	                LDA SCRATCH             ; Restore the character we're returning
.1a0142	28		plp		                PLP
.1a0143	2b		pld		                PLD
.1a0144	ab		plb		                PLB
.1a0145	60		rts		            RTS
.1a0146	c9 01		cmp #$01	chk_st_esc      CMP #GK_ST_ESC          ; Are we in the ESC state?
.1a0148	d0 10		bne $1a015a	                BNE chk_st_csi          ; No: check to see if we're in CSI state
.1a014a	a3 01		lda $01,s	                LDA l_character         ; Get the character
.1a014c	c9 5b		cmp #$5b	                CMP #'['                ; Is it "["?
.1a014e	f0 03		beq $1a0153	                BEQ go_st_csi           ; Yes: go to the CSI state
.1a0150	82 a9 ff	brl $1a00fc	                BRL get_reset           ; Reset the state machine and keep reading characters
.1a0153	a9 02		lda #$02	go_st_csi       LDA #GK_ST_CSI          ; Yes: move to the CSI state
.1a0155	83 02		sta $02,s	                STA l_state
.1a0157	82 aa ff	brl $1a0104	                BRL loop
.1a015a	c9 02		cmp #$02	chk_st_csi      CMP #GK_ST_CSI          ; Are we in the CSI state?
.1a015c	d0 29		bne $1a0187	                BNE chk_st_code         ; No: check to see if we're in the code state
.1a015e	a3 01		lda $01,s	                LDA l_character         ; Check the character
.1a0160	c9 41		cmp #$41	                CMP #'A'                ; Is it in 'A'..'D'?
.1a0162	90 0c		bcc $1a0170	                BLT not_letter
.1a0164	c9 45		cmp #$45	                CMP #'D'+1
.1a0166	b0 08		bcs $1a0170	                BGE not_letter
.1a0168	a3 01		lda $01,s	                LDA l_character         ; Yes: it's a cursor key, send the sequence to the screen
.1a016a	20 c7 00	jsr $1a00c7	            JSR SEND_ANSI
.1a016d	82 8c ff	brl $1a00fc	                BRL get_reset           ; Reset the state machine and keep reading characters
.1a0170	c9 30		cmp #$30	not_letter      CMP #'0'                ; Is it in range '0'..'9'?
.1a0172	90 10		bcc $1a0184	                BLT not_csi_digit
.1a0174	c9 3a		cmp #$3a	                CMP #'9'+1
.1a0176	b0 0c		bcs $1a0184	                BGE not_csi_digit       ; No: handle it being invalid
.1a0178	38		sec		                SEC                     ; Yes: convert to a value
.1a0179	e9 30		sbc #$30	                SBC #'0'
.1a017b	83 03		sta $03,s	                STA l_code              ; And save it to the code variable
.1a017d	a9 03		lda #$03	                LDA #GK_ST_CODE         ; Move to the CODE state
.1a017f	83 02		sta $02,s	                STA l_state
.1a0181	82 80 ff	brl $1a0104	                BRL loop
.1a0184	82 75 ff	brl $1a00fc	not_csi_digit   BRL get_reset           ; Bad sequence: reset and keep reading characters
.1a0187	c9 03		cmp #$03	chk_st_code     CMP #GK_ST_CODE         ; Is it the CODE state?
.1a0189	d0 41		bne $1a01cc	                BNE chk_st_mods         ; No: check to see if it's MODIFIERS
.1a018b	a3 01		lda $01,s	                LDA l_character         ; Check the character
.1a018d	c9 30		cmp #$30	                CMP #'0'                ; Is it in the range '0'..'9'
.1a018f	90 29		bcc $1a01ba	                BLT not_digits_2
.1a0191	c9 3a		cmp #$3a	                CMP #'9'+1
.1a0193	b0 25		bcs $1a01ba	                BGE not_digits_2
.1a0195	a3 03		lda $03,s	                LDA l_code              ; Multiply l_code by 2
.1a0197	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.1a019b	a9 00		lda #$00	                LDA #0
.1a019d	8f 01 01 00	sta $000101	                STA @l UNSIGNED_MULT_A_HI
.1a01a1	8f 03 01 00	sta $000103	                STA @l UNSIGNED_MULT_B_HI
.1a01a5	a9 0a		lda #$0a	                LDA #10
.1a01a7	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.1a01ab	a3 01		lda $01,s	                LDA l_character         ; Convert the digit to a number
.1a01ad	38		sec		                SEC
.1a01ae	e9 30		sbc #$30	                SBC #'0'
.1a01b0	18		clc		                CLC                     ; And add to l_code
.1a01b1	6f 04 01 00	adc $000104	                ADC @l UNSIGNED_MULT_AL_LO
.1a01b5	83 03		sta $03,s	                STA l_code
.1a01b7	82 4a ff	brl $1a0104	                BRL loop                ; And keep processing the sequence
.1a01ba	c9 3b		cmp #$3b	not_digits_2    CMP #';'                ; Is it the semicolon?
.1a01bc	d0 07		bne $1a01c5	                BNE not_semi
.1a01be	a9 04		lda #$04	                LDA #GK_ST_MODS         ; Yes: Move to the MODIFIERS state
.1a01c0	83 02		sta $02,s	                STA l_state
.1a01c2	82 3f ff	brl $1a0104	                BRL loop
.1a01c5	c9 7e		cmp #$7e	not_semi        CMP #'~'                ; No: Is it the tilda?
.1a01c7	f0 40		beq $1a0209	                BEQ end_sequence        ; Yes: we've gotten the end of the sequence
.1a01c9	82 30 ff	brl $1a00fc	                BRL get_reset           ; No: we've got a bad sequence... for now just reset and keep looping
.1a01cc	c9 04		cmp #$04	chk_st_mods     CMP #GK_ST_MODS         ; Are we in the MODIFIERS state?
.1a01ce	f0 03		beq $1a01d3	                BEQ do_mods
.1a01d0	82 5f ff	brl $1a0132	                BRL done                ; No: we're done
.1a01d3	a3 01		lda $01,s	do_mods         LDA l_character         ; Check the character
.1a01d5	c9 30		cmp #$30	                CMP #'0'                ; Is it in the range '0'..'9'
.1a01d7	90 29		bcc $1a0202	                BLT not_digits_3
.1a01d9	c9 3a		cmp #$3a	                CMP #'9'+1
.1a01db	b0 25		bcs $1a0202	                BGE not_digits_3
.1a01dd	a3 04		lda $04,s	                LDA l_modifiers         ; Multiply l_modifiers by 2
.1a01df	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.1a01e3	a9 00		lda #$00	                LDA #0
.1a01e5	8f 01 01 00	sta $000101	                STA @l UNSIGNED_MULT_A_HI
.1a01e9	8f 03 01 00	sta $000103	                STA @l UNSIGNED_MULT_B_HI
.1a01ed	a9 0a		lda #$0a	                LDA #10
.1a01ef	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.1a01f3	a3 01		lda $01,s	                LDA l_character         ; Convert the digit to a number
.1a01f5	38		sec		                SEC
.1a01f6	e9 30		sbc #$30	                SBC #'0'
.1a01f8	18		clc		                CLC                     ; And add to l_modifiers
.1a01f9	6f 04 01 00	adc $000104	                ADC @l UNSIGNED_MULT_AL_LO
.1a01fd	83 04		sta $04,s	                STA l_modifiers
.1a01ff	82 02 ff	brl $1a0104	                BRL loop                ; And keep processing the sequence
.1a0202	c9 7e		cmp #$7e	not_digits_3    CMP #'~'                ; No: Is it the tilda?
.1a0204	f0 03		beq $1a0209	                BEQ end_sequence        ; Yes: we've gotten the end of the sequence
.1a0206	82 f3 fe	brl $1a00fc	                BRL get_reset           ; No: we've got a bad sequence... for now just reset and keep looping
.1a0209	a3 03		lda $03,s	end_sequence    LDA l_code              ; Get the code
.1a020b	c9 02		cmp #$02	                CMP #ANSI_IN_INS        ; Is it INSERT?
.1a020d	f0 0b		beq $1a021a	                BEQ do_ins              ; Yes: process the insert
.1a020f	c9 03		cmp #$03	                CMP #ANSI_IN_DEL        ; Is it DELETE?
.1a0211	f0 0b		beq $1a021e	                BEQ do_del              ; Yes: process the delete
.1a0213	c9 18		cmp #$18	                CMP #ANSI_IN_F12        ; Is it F12?
.1a0215	f0 0f		beq $1a0226	                BEQ do_f12              ; Yes: process the F12 key
.1a0217	82 e2 fe	brl $1a00fc	                BRL get_reset           ; Code is not one we handle, just return
.1a021a	a9 40		lda #$40	do_ins          LDA #'@'                ; Send the ANSI ICH command
.1a021c	80 02		bra $1a0220	                BRA snd_ansi
.1a021e	a9 50		lda #$50	do_del          LDA #'P'                ; Send the ANSI DCH command
.1a0220					snd_ansi
.1a0220	20 c7 00	jsr $1a00c7	            JSR SEND_ANSI
.1a0223	82 d6 fe	brl $1a00fc	                BRL get_reset           ; Reset and keep getting characters
.1a0226	a5 d2		lda $08d2	do_f12          LDA STATE               ; Check the state
.1a0228	d0 10		bne $1a023a	                BNE skip_f12            ; If we're running, ignore the F12
.1a022a	a3 04		lda $04,s	                LDA l_modifiers         ; Check to make sure it's CTRL-F12
.1a022c	c9 08		cmp #$08	                CMP #ANSI_IN_CTRL       ; Modifier flag for CTRL
.1a022e	d0 0a		bne $1a023a	                BNE skip_f12
.1a0230	a9 1b		lda #$1b	                LDA #CHAR_ESC           ; Send ESC_ (APC) to show the credits
.1a0232	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0235	a9 5f		lda #$5f	                LDA #'_'
.1a0237	20 18 00	jsr $1a0018	            JSR PRINTC
.1a023a	82 bf fe	brl $1a00fc	skip_f12        BRL get_reset           ; And reset the state machine

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/screen.s

.1a023d					ENSURETEXT
.1a023d	08		php		            PHP
.1a023e	e2 20		sep #$20	            SEP #$20
.1a0240	af 00 00 af	lda $af0000	            LDA @l MASTER_CTRL_REG_L            ; Get the current display mode
.1a0244	89 3c		bit #$3c	            BIT #Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_TileMap_En | Mstr_Ctrl_Sprite_En
.1a0246	f0 08		beq $1a0250	            BEQ textonly                        ; If not, make sure text is enabled
.1a0248					overlay
.1a0248	09 03		ora #$03	            ORA #Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay
.1a024a	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.1a024e	80 0c		bra $1a025c	            BRA done
.1a0250					textonly
.1a0250	09 01		ora #$01	            ORA #Mstr_Ctrl_Text_Mode_En
.1a0252	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.1a0256	a9 00		lda #$00	            LDA #CHAN_CONSOLE                   ; Make sure we're writing to the main screen
.1a0258	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a025c	28		plp		done        PLP
.1a025d	60		rts		            RTS
.1a025e					ISHOWCURSOR
.1a025e	08		php		            PHP
.1a025f	e2 20		sep #$20	            SEP #$20
.1a0261	c9 00		cmp #$00	            CMP #0
.1a0263	f0 08		beq $1a026d	            BEQ hide
.1a0265	af 10 00 af	lda $af0010	show        LDA @lVKY_TXT_CURSOR_CTRL_REG
.1a0269	09 01		ora #$01	            ORA #Vky_Cursor_Enable
.1a026b	80 06		bra $1a0273	            BRA setit
.1a026d	af 10 00 af	lda $af0010	hide        LDA @lVKY_TXT_CURSOR_CTRL_REG
.1a0271	29 fe		and #$fe	            AND #~Vky_Cursor_Enable
.1a0273	8f 10 00 af	sta $af0010	setit       STA @lVKY_TXT_CURSOR_CTRL_REG
.1a0277	28		plp		            PLP
.1a0278	60		rts		            RTS
.1a0279					ICURSORXY
.1a0279	08		php		            PHP
.1a027a	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.1a027e	28		plp		            PLP
.1a027f	60		rts		            RTS
.1a0280					ICLSCREEN
.1a0280	48		pha		            PHA
.1a0281	da		phx		            PHX
.1a0282	5a		phy		            PHY
.1a0283	0b		phd		            PHD
.1a0284	08		php		            PHP
.1a0285	e2 20		sep #$20	            SEP #$20
.1a0287	c2 10		rep #$10	            REP #$10
.1a0289	a2 00 00	ldx #$0000	            LDX #0
.1a028c	a9 20		lda #$20	loop        LDA #$20
.1a028e	9f 00 a0 af	sta $afa000,x	            STA @lCS_TEXT_MEM_PTR,X     ; Write a space in the text cell
.1a0292	af 1e 00 00	lda $00001e	            LDA @lCURCOLOR
.1a0296	9f 00 c0 af	sta $afc000,x	            STA @lCS_COLOR_MEM_PTR,X    ; Set the color to green on black
.1a029a	e8		inx		            INX                         ; Move to the next character cell
.1a029b	e0 00 20	cpx #$2000	            CPX #$2000
.1a029e	d0 ec		bne $1a028c	            BNE loop
.1a02a0	08		php		            PHP
.1a02a1	c2 20		rep #$20	            REP #$20
.1a02a3	48		pha		            PHA
.1a02a4	a9 00 00	lda #$0000	            LDA #0
.1a02a7	5b		tcd		            TCD
.1a02a8	68		pla		            PLA
.1a02a9	28		plp		            PLP
.1a02aa	a2 00 00	ldx #$0000	            LDX #0                      ; Set cursor to upper-left corner
.1a02ad	a0 00 00	ldy #$0000	            LDY #0
.1a02b0	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.1a02b4	28		plp		            PLP
.1a02b5	2b		pld		            PLD
.1a02b6	7a		ply		            PLY
.1a02b7	fa		plx		            PLX
.1a02b8	68		pla		            PLA
.1a02b9	60		rts		            RTS
.1a02ba					ISCRCPYLINE
.1a02ba	da		phx		            PHX
.1a02bb	5a		phy		            PHY
.1a02bc	0b		phd		            PHD
.1a02bd	08		php		            PHP
.1a02be	08		php		            PHP
.1a02bf	c2 20		rep #$20	            REP #$20
.1a02c1	48		pha		            PHA
.1a02c2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a02c5	5b		tcd		            TCD
.1a02c6	68		pla		            PLA
.1a02c7	28		plp		            PLP
.1a02c8	c2 30		rep #$30	            REP #$30
.1a02ca	af 0c 00 00	lda $00000c	            LDA @l SCREENBEGIN      ; Set INDEX to the first byte of the text screen
.1a02ce	85 08		sta $0808	            STA INDEX
.1a02d0	e2 20		sep #$20	            SEP #$20
.1a02d2	af 0e 00 00	lda $00000e	            LDA @l SCREENBEGIN+2
.1a02d6	c2 20		rep #$20	            REP #$20
.1a02d8	29 ff 00	and #$00ff	            AND #$00FF
.1a02db	85 0a		sta $080a	            STA INDEX+2
.1a02dd	af 11 00 00	lda $000011	            LDA @l COLS_PER_LINE    ; Calculate the offset to the current line
.1a02e1	8f 08 01 00	sta $000108	            STA @l M1_OPERAND_A
.1a02e5	af 1c 00 00	lda $00001c	            LDA @l CURSORY
.1a02e9	3a		dec a		            DEC A
.1a02ea	8f 0a 01 00	sta $00010a	            STA @l M1_OPERAND_B
.1a02ee	18		clc		            CLC                     ; And add it to INDEX
.1a02ef	a5 08		lda $0808	            LDA INDEX
.1a02f1	6f 0c 01 00	adc $00010c	            ADC @l M1_RESULT
.1a02f5	85 08		sta $0808	            STA INDEX
.1a02f7	a5 0a		lda $080a	            LDA INDEX+2
.1a02f9	69 00 00	adc #$0000	            ADC #0
.1a02fc	85 0a		sta $080a	            STA INDEX+2
.1a02fe	e2 20		sep #$20	            SEP #$20
.1a0300	af 0f 00 00	lda $00000f	            LDA @l COLS_VISIBLE
.1a0304	85 8f		sta $088f	            STA MCOUNT
.1a0306	a0 00 00	ldy #$0000	            LDY #0
.1a0309	a2 00 00	ldx #$0000	            LDX #0
.1a030c	b7 08		lda [$0808],y	copy_loop   LDA [INDEX],Y           ; Copy a byte from the screen to the input buffer
.1a030e	9f 00 4f 00	sta $004f00,x	            STA @l INPUTBUF,X
.1a0312	e8		inx		            INX
.1a0313	c8		iny		            INY
.1a0314	c4 8f		cpy $088f	            CPY MCOUNT
.1a0316	d0 f4		bne $1a030c	            BNE copy_loop
.1a0318	af 0f 00 00	lda $00000f	            LDA @l COLS_VISIBLE     ; Starting from the end of the line...
.1a031c	3a		dec a		            DEC A
.1a031d	aa		tax		            TAX
.1a031e	bf 00 4f 00	lda $004f00,x	trim_loop   LDA @l INPUTBUF,X       ; Replace spaces at the end with NULLs
.1a0322	c9 20		cmp #$20	            CMP #CHAR_SP
.1a0324	d0 09		bne $1a032f	            BNE done
.1a0326	a9 00		lda #$00	            LDA #0
.1a0328	9f 00 4f 00	sta $004f00,x	            STA @l INPUTBUF,X
.1a032c	ca		dex		            DEX
.1a032d	10 ef		bpl $1a031e	            BPL trim_loop
.1a032f	28		plp		done        PLP
.1a0330	2b		pld		            PLD
.1a0331	7a		ply		            PLY
.1a0332	fa		plx		            PLX
.1a0333	60		rts		            RTS

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/gabe_defs.s

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04					GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08					GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01					GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02					GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10					GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20					GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40					GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80					GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04					GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10					GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a				GABE_SUBVERSION_LO  = $AFE88A
=$afe88b				GABE_SUBVERSION_HI  = $AFE88B
=$afe88c				GABE_VERSION_LO     = $AFE88C
=$afe88d				GABE_VERSION_HI     = $AFE88D
=$afe88e				GABE_MODEL_LO       = $AFE88E
=$afe88f				GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\C256/io_c256.s

=32					BORDER_WIDTH = 32               ; The width of the border (when it is on)
=72					TEXT_COLS_WB = 72               ; Number of columns of text with the border enabled
=52					TEXT_ROWS_WB = 52               ; Number of rows of text with the border enabled
=80					TEXT_COLS_WOB = 80              ; Number of columns of text with no border enabled
=60					TEXT_ROWS_WOB = 60              ; Number of rows of text with no border enabled
.1a0334					INITIO
.1a0334	e2 20		sep #$20	            SEP #$20
.1a0336	a2 00 00	ldx #$0000	            LDX #0              ; Clear all the sprite control shadow registers
.1a0339	a9 00		lda #$00	            LDA #0
.1a033b	9f 18 f0 1a	sta $1af018,x	sp_loop     STA GS_SP_CONTROL,X
.1a033f	e8		inx		            INX
.1a0340	e0 40 00	cpx #$0040	            CPX #SP_MAX
.1a0343	d0 f6		bne $1a033b	            BNE sp_loop
.1a0345	a9 80		lda #$80	            LDA #DEV_SCREEN
.1a0347	8f b4 08 00	sta $0008b4	            STA @lBCONSOLE
.1a034b	e2 20		sep #$20	            SEP #$20
.1a034d	a9 00		lda #$00	            LDA #0                  ; Clear the lock key flags
.1a034f	8f 89 0f 00	sta $000f89	            STA @lKEYBOARD_LOCKS
.1a0353	a9 00		lda #$00	            LDA #0
.1a0355	8f 00 02 af	sta $af0200	            STA @l TL0_CONTROL_REG
.1a0359	8f 0c 02 af	sta $af020c	            STA @l TL1_CONTROL_REG
.1a035d	8f 18 02 af	sta $af0218	            STA @l TL2_CONTROL_REG
.1a0361	8f 24 02 af	sta $af0224	            STA @l TL3_CONTROL_REG
.1a0365					done
.1a0365	60		rts		            RTS
.1a0366					SCREEN_PUTC
.1a0366	08		php		            PHP
.1a0367	e2 20		sep #$20	            SEP #$20
.1a0369	48		pha		            PHA
.1a036a	48		pha		            PHA
.1a036b	a9 00		lda #$00	            LDA #CHAN_CONSOLE       ; Switch to the console device
.1a036d	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a0371	68		pla		            PLA
.1a0372	22 18 10 00	jsl $001018	            JSL FK_PUTC
.1a0376	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.1a037a	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.1a037c	d0 f8		bne $1a0376	            BNE loop                ; Yes: wait until it's released
.1a037e	68		pla		            PLA
.1a037f	28		plp		            PLP
.1a0380	60		rts		            RTS
.1a0381					UART_PUTC
.1a0381	08		php		            PHP
.1a0382	e2 20		sep #$20	            SEP #$20
.1a0384	48		pha		            PHA
.1a0385	48		pha		            PHA
.1a0386	a9 01		lda #$01	            LDA #CHAN_COM1          ; Switch to COM1
.1a0388	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a038c	68		pla		            PLA
.1a038d	22 18 10 00	jsl $001018	            JSL FK_PUTC
.1a0391	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.1a0395	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.1a0397	d0 f8		bne $1a0391	            BNE loop                ; Yes: wait until it's released
.1a0399	68		pla		            PLA
.1a039a	28		plp		            PLP
.1a039b	60		rts		            RTS
.1a039c					PRINTCR
.1a039c	08		php		            PHP
.1a039d	c2 20		rep #$20	            REP #$20
.1a039f	48		pha		            PHA
.1a03a0	e2 20		sep #$20	            SEP #$20
.1a03a2	a9 0d		lda #$0d	            LDA #CHAR_CR
.1a03a4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a03a7	c2 20		rep #$20	            REP #$20
.1a03a9	68		pla		            PLA
.1a03aa	28		plp		            PLP
.1a03ab	60		rts		            RTS
.1a03ac					PRINTH
.1a03ac	08		php		            PHP
.1a03ad	22 78 10 00	jsl $001078	            JSL FK_IPRINTH
.1a03b1	28		plp		            PLP
.1a03b2	60		rts		            RTS

;******  Return to file: src\bios.s

=10					LINES_PER_PAGE = 10     ; The number of lines to print on a page before pausing
=$80					DEV_SCREEN = $80        ; Use the screen and keyboard for the console device
=$40					DEV_UART = $40          ; Use UART for console device
=$20					DEV_BUFFER = $20        ; Use the current text memory buffer for output or input
>08b4					BCONSOLE    .byte ?     ; Device for BASIC console
>08b5					SAVE_A      .byte ?     ; Save spot for the A register
>08b6					LINECOUNT   .byte ?     ; Counter for new lines to support pagination
.1a03b3					PAGINATE
.1a03b3	08		php		            PHP
.1a03b4	0b		phd		            PHD
.1a03b5	08		php		            PHP
.1a03b6	c2 20		rep #$20	            REP #$20
.1a03b8	48		pha		            PHA
.1a03b9	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a03bc	5b		tcd		            TCD
.1a03bd	68		pla		            PLA
.1a03be	28		plp		            PLP
.1a03bf	e2 20		sep #$20	            SEP #$20
.1a03c1	a5 b6		lda $08b6	            LDA LINECOUNT           ; Check the line count
.1a03c3	1a		inc a		            INC A
.1a03c4	85 b6		sta $08b6	            STA LINECOUNT
.1a03c6	cf 13 00 00	cmp $000013	            CMP @l LINES_VISIBLE
.1a03ca	90 05		bcc $1a03d1	            BLT done                ; If < limit, just return
.1a03cc	20 14 00	jsr $1a0014	            JSR GETKEY
.1a03cf	64 b6		stz $08b6	            STZ LINECOUNT           ; And reset the line count
.1a03d1	2b		pld		done        PLD
.1a03d2	28		plp		            PLP
.1a03d3	60		rts		            RTS
.1a03d4					IPRINTC
.1a03d4	da		phx		            PHX
.1a03d5	5a		phy		            PHY
.1a03d6	0b		phd		            PHD
.1a03d7	08		php		            PHP
.1a03d8	08		php		            PHP
.1a03d9	c2 20		rep #$20	            REP #$20
.1a03db	48		pha		            PHA
.1a03dc	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a03df	5b		tcd		            TCD
.1a03e0	68		pla		            PLA
.1a03e1	28		plp		            PLP
.1a03e2	e2 20		sep #$20	            SEP #$20
.1a03e4	c2 10		rep #$10	            REP #$10
.1a03e6	8f b5 08 00	sta $0008b5	            STA @lSAVE_A
.1a03ea	af b4 08 00	lda $0008b4	chk_out     LDA @lBCONSOLE      ; Check to see if we should send to an output buffer
.1a03ee	29 20		and #$20	            AND #DEV_BUFFER
.1a03f0	f0 07		beq $1a03f9	            BEQ check_scrn      ; No... move on to the hardware screen
.1a03f2	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a03f6	20 28 00	jsr $1a0028	            JSR OBUFF_PUTC
.1a03f9	af b4 08 00	lda $0008b4	check_scrn  LDA @lBCONSOLE
.1a03fd	29 80		and #$80	            AND #DEV_SCREEN     ; Check to see if the screen is selected
.1a03ff	f0 07		beq $1a0408	            BEQ send_uart
.1a0401	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a0405	20 66 03	jsr $1a0366	            JSR SCREEN_PUTC
.1a0408	af b4 08 00	lda $0008b4	send_uart   LDA @lBCONSOLE
.1a040c	29 40		and #$40	            AND #DEV_UART       ; Check to see if the UART is active
.1a040e	f0 14		beq $1a0424	            BEQ done
.1a0410	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a0414	20 81 03	jsr $1a0381	            JSR UART_PUTC
.1a0417	af b5 08 00	lda $0008b5	            LDA @lSAVE_A        ; If sending a CR to the serial port
.1a041b	c9 0d		cmp #$0d	            CMP #CHAR_CR
.1a041d	d0 05		bne $1a0424	            BNE done
.1a041f	a9 0a		lda #$0a	            LDA #CHAR_LF        ; Send a linefeed after
.1a0421	20 81 03	jsr $1a0381	            JSR UART_PUTC
.1a0424	28		plp		done        PLP
.1a0425	2b		pld		            PLD
.1a0426	7a		ply		            PLY
.1a0427	fa		plx		            PLX
.1a0428	60		rts		            RTS
.1a0429					PRINTS
.1a0429	08		php		            PHP
.1a042a	e2 20		sep #$20	            SEP #$20
.1a042c	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.1a042f	f0 06		beq $1a0437	            BEQ done
.1a0431	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0434	e8		inx		            INX
.1a0435	80 f5		bra $1a042c	            BRA loop
.1a0437	28		plp		done        PLP
.1a0438	60		rts		            RTS
.1a0439					PRHEXW
.1a0439	08		php		            PHP
.1a043a	c2 20		rep #$20	            REP #$20
.1a043c	48		pha		            PHA
.1a043d	48		pha		            PHA
.1a043e	4a		lsr a		            LSR A
.1a043f	4a		lsr a		            LSR A
.1a0440	4a		lsr a		            LSR A
.1a0441	4a		lsr a		            LSR A
.1a0442	4a		lsr a		            LSR A
.1a0443	4a		lsr a		            LSR A
.1a0444	4a		lsr a		            LSR A
.1a0445	4a		lsr a		            LSR A
.1a0446	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a0449	68		pla		            PLA
.1a044a	29 ff 00	and #$00ff	            AND #$00FF
.1a044d	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a0450	68		pla		            PLA
.1a0451	28		plp		            PLP
.1a0452	60		rts		            RTS
.1a0453					PRHEXB
.1a0453	08		php		            PHP
.1a0454	c2 20		rep #$20	            REP #$20
.1a0456	48		pha		            PHA
.1a0457	e2 20		sep #$20	            SEP #$20
.1a0459	48		pha		            PHA
.1a045a	4a		lsr a		            LSR A
.1a045b	4a		lsr a		            LSR A
.1a045c	4a		lsr a		            LSR A
.1a045d	4a		lsr a		            LSR A
.1a045e	20 6a 04	jsr $1a046a	            JSR PRHEXN
.1a0461	68		pla		            PLA
.1a0462	20 6a 04	jsr $1a046a	            JSR PRHEXN
.1a0465	c2 20		rep #$20	            REP #$20
.1a0467	68		pla		            PLA
.1a0468	28		plp		            PLP
.1a0469	60		rts		            RTS
.1a046a					PRHEXN
.1a046a	08		php		            PHP
.1a046b	c2 30		rep #$30	            REP #$30
.1a046d	da		phx		            PHX
.1a046e	29 0f 00	and #$000f	            AND #$000F
.1a0471	aa		tax		            TAX
.1a0472	bf 00 d0 1a	lda $1ad000,x	            LDA @lHEXDIGITS,X
.1a0476	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0479	fa		plx		            PLX
.1a047a	28		plp		            PLP
.1a047b	60		rts		            RTS
>1ad000	30 31 32 33 34 35 36 37		HEXDIGITS   .text "0123456789ABCDEF"
>1ad008	38 39 41 42 43 44 45 46

;******  Return to file: src\basic816.s


;******  Processing file: src\utilities.s

.1a047c					PRTRACE
.1a047c	08		php		            PHP
.1a047d	c2 30		rep #$30	            REP #$30
.1a047f	48		pha		            PHA
.1a0480	da		phx		            PHX
.1a0481	5a		phy		            PHY
.1a0482	8b		phb		            PHB
.1a0483	0b		phd		            PHD
.1a0484	c2 30		rep #$30	            REP #$30
.1a0486	a3 0b		lda $0b,s	            LDA 11,S        ; Get the return address
.1a0488	18		clc		calc_addr   CLC
.1a0489	69 03 00	adc #$0003	            ADC #3          ; Add 3 to skip over the following branch
.1a048c	aa		tax		            TAX
.1a048d	e2 20		sep #$20	            SEP #$20
.1a048f	a9 1a		lda #$1a	            LDA #`PRTRACE
.1a0491	48		pha		            PHA
.1a0492	ab		plb		            PLB
.1a0493	bd 00 00	lda $0000,x	pr_loop     LDA #0,B,X
.1a0496	f0 06		beq $1a049e	            BEQ done
.1a0498	20 66 03	jsr $1a0366	            JSR SCREEN_PUTC
.1a049b	e8		inx		            INX
.1a049c	80 f5		bra $1a0493	            BRA pr_loop
.1a049e					done
.1a049e	c2 30		rep #$30	            REP #$30
.1a04a0	2b		pld		            PLD
.1a04a1	ab		plb		            PLB
.1a04a2	7a		ply		            PLY
.1a04a3	fa		plx		            PLX
.1a04a4	68		pla		            PLA
.1a04a5	28		plp		            PLP
.1a04a6	60		rts		            RTS
.1a04a7					ISALPHA
.1a04a7	08		php		            PHP
.1a04a8	e2 20		sep #$20	            SEP #$20
.1a04aa	c9 5b		cmp #$5b	            CMP #'Z'+1
.1a04ac	b0 04		bcs $1a04b2	            BGE not_upper
.1a04ae	c9 41		cmp #$41	            CMP #'A'
.1a04b0	b0 0b		bcs $1a04bd	            BGE is_alpha
.1a04b2	c9 7b		cmp #$7b	not_upper   CMP #'z'+1
.1a04b4	b0 04		bcs $1a04ba	            BGE not_alpha
.1a04b6	c9 61		cmp #$61	            CMP #'a'
.1a04b8	b0 03		bcs $1a04bd	            BGE is_alpha
.1a04ba					not_alpha
.1a04ba	28		plp		            PLP
.1a04bb	18		clc		            CLC
.1a04bc	60		rts		            RTS
.1a04bd					is_alpha
.1a04bd	28		plp		            PLP
.1a04be	38		sec		            SEC
.1a04bf	60		rts		            RTS
.1a04c0					ISNUMERAL
.1a04c0	08		php		            PHP
.1a04c1	e2 20		sep #$20	            SEP #$20
.1a04c3	c9 3a		cmp #$3a	            CMP #'9'+1
.1a04c5	b0 04		bcs $1a04cb	            BGE ret_false
.1a04c7	c9 30		cmp #$30	            CMP #'0'
.1a04c9	b0 03		bcs $1a04ce	            BGE ret_true
.1a04cb	28		plp		ret_false   PLP
.1a04cc	18		clc		            CLC
.1a04cd	60		rts		            RTS
.1a04ce	28		plp		ret_true    PLP
.1a04cf	38		sec		            SEC
.1a04d0	60		rts		            RTS
.1a04d1					ISHEX
.1a04d1	08		php		            PHP
.1a04d2	e2 20		sep #$20	            SEP #$20
.1a04d4	c9 3a		cmp #$3a	            CMP #'9'+1
.1a04d6	b0 04		bcs $1a04dc	            BGE chk_lca2f
.1a04d8	c9 30		cmp #$30	            CMP #'0'
.1a04da	b0 13		bcs $1a04ef	            BGE ret_true
.1a04dc	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.1a04de	b0 04		bcs $1a04e4	            BGE chk_uca2f
.1a04e0	c9 61		cmp #$61	            CMP #'a'
.1a04e2	b0 0b		bcs $1a04ef	            BGE ret_true
.1a04e4	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.1a04e6	b0 04		bcs $1a04ec	            BGE ret_false
.1a04e8	c9 41		cmp #$41	            CMP #'A'
.1a04ea	b0 03		bcs $1a04ef	            BGE ret_true
.1a04ec	28		plp		ret_false   PLP
.1a04ed	18		clc		            CLC
.1a04ee	60		rts		            RTS
.1a04ef	28		plp		ret_true    PLP
.1a04f0	38		sec		            SEC
.1a04f1	60		rts		            RTS
.1a04f2					HEX2BIN
.1a04f2	08		php		            PHP
.1a04f3	e2 20		sep #$20	            SEP #$20
.1a04f5	c9 3a		cmp #$3a	            CMP #'9'+1          ; Check to see if '0'..'9'
.1a04f7	b0 04		bcs $1a04fd	            BGE chk_lca2f
.1a04f9	c9 30		cmp #$30	            CMP #'0'
.1a04fb	b0 12		bcs $1a050f	            BGE conv_09         ; Yes: convert it
.1a04fd	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.1a04ff	b0 04		bcs $1a0505	            BGE chk_uca2f
.1a0501	c9 61		cmp #$61	            CMP #'a'
.1a0503	b0 0f		bcs $1a0514	            BGE conv_lcaf
.1a0505	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.1a0507	b0 04		bcs $1a050d	            BGE done
.1a0509	c9 41		cmp #$41	            CMP #'A'
.1a050b	b0 09		bcs $1a0516	            BGE conv_ucaf
.1a050d	28		plp		done        PLP
.1a050e	60		rts		            RTS
.1a050f	38		sec		conv_09     SEC                 ; Convert digits '0'..'9'
.1a0510	e9 30		sbc #$30	            SBC #'0'
.1a0512	80 f9		bra $1a050d	            BRA done
.1a0514	29 df		and #$df	conv_lcaf   AND #%11011111      ; Convert to upper case
.1a0516	38		sec		conv_ucaf   SEC
.1a0517	e9 37		sbc #$37	            SBC #'A'-10         ; Convert 'A'..'F'
.1a0519	80 f2		bra $1a050d	            BRA done
.1a051b					TOUPPERA
.1a051b	08		php		            PHP
.1a051c	e2 20		sep #$20	            SEP #$20
.1a051e	c9 7b		cmp #$7b	            CMP #'z'+1
.1a0520	b0 06		bcs $1a0528	            BCS done
.1a0522	c9 61		cmp #$61	            CMP #'a'
.1a0524	90 02		bcc $1a0528	            BCC done
.1a0526	29 df		and #$df	            AND #%11011111
.1a0528	28		plp		done        PLP
.1a0529	60		rts		            RTS
.1a052a					TOUPPER
.1a052a	08		php		            PHP
.1a052b	e2 20		sep #$20	            SEP #$20
.1a052d	c2 10		rep #$10	            REP #$10
.1a052f	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.1a0532	f0 09		beq $1a053d	            BEQ done
.1a0534	20 1b 05	jsr $1a051b	            JSR TOUPPERA
.1a0537	9d 00 00	sta $0000,x	            STA #0,B,X
.1a053a	e8		inx		continue    INX
.1a053b	80 f2		bra $1a052f	            BRA loop
.1a053d	28		plp		done        PLP
.1a053e	60		rts		            RTS
.1a053f					MULINT10
.1a053f	08		php		                PHP
.1a0540	0b		phd		                PHD
.1a0541	08		php		            PHP
.1a0542	c2 20		rep #$20	            REP #$20
.1a0544	48		pha		            PHA
.1a0545	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0548	5b		tcd		            TCD
.1a0549	68		pla		            PLA
.1a054a	28		plp		            PLP
.1a054b	c2 20		rep #$20	            REP #$20
.1a054d	48		pha		                PHA
.1a054e	06 23		asl $0823	                ASL ARGUMENT1           ; 7 -- 20 -- 74
.1a0550	26 25		rol $0825	                ROL ARGUMENT1+2         ; 7
.1a0552	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.1a0554	85 0c		sta $080c	                STA SCRATCH             ; 4
.1a0556	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.1a0558	85 0e		sta $080e	                STA SCRATCH+2           ; 4
.1a055a	06 0c		asl $080c	                ASL SCRATCH             ; 7 -- 28
.1a055c	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.1a055e	06 0c		asl $080c	                ASL SCRATCH             ; 7
.1a0560	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.1a0562	18		clc		                CLC                     ; 2 -- 26
.1a0563	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.1a0565	65 0c		adc $080c	                ADC SCRATCH             ; 4
.1a0567	85 23		sta $0823	                STA ARGUMENT1           ; 4
.1a0569	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.1a056b	65 0e		adc $080e	                ADC SCRATCH+2           ; 4
.1a056d	85 25		sta $0825	                STA ARGUMENT1+2         ; 4
.1a056f	68		pla		                PLA
.1a0570	2b		pld		                PLD
.1a0571	28		plp		                PLP
.1a0572	60		rts		            RTS
.1a0573					DIVINT10
.1a0573	08		php		                PHP
.1a0574	0b		phd		                PHD
.1a0575	08		php		            PHP
.1a0576	c2 20		rep #$20	            REP #$20
.1a0578	48		pha		            PHA
.1a0579	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a057c	5b		tcd		            TCD
.1a057d	68		pla		            PLA
.1a057e	28		plp		            PLP
.1a057f	c2 20		rep #$20	            REP #$20
.1a0581	a5 23		lda $0823	                LDA ARGUMENT1
.1a0583	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.1a0587	a9 0a 00	lda #$000a	                LDA #10
.1a058a	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.1a058e	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.1a0592	85 23		sta $0823	                STA ARGUMENT1
.1a0594	64 25		stz $0825	                STZ ARGUMENT1+2
.1a0596	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.1a059a	85 29		sta $0829	                STA ARGUMENT2
.1a059c	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a059e	e2 20		sep #$20	            SEP #$20
.1a05a0	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a05a2	85 27		sta $0827	                STA ARGTYPE1
.1a05a4	85 2d		sta $082d	                STA ARGTYPE2
.1a05a6	2b		pld		                PLD
.1a05a7	28		plp		                PLP
.1a05a8	60		rts		            RTS
.1a05a9					DIVINT100
.1a05a9	08		php		                PHP
.1a05aa	0b		phd		                PHD
.1a05ab	08		php		            PHP
.1a05ac	c2 20		rep #$20	            REP #$20
.1a05ae	48		pha		            PHA
.1a05af	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a05b2	5b		tcd		            TCD
.1a05b3	68		pla		            PLA
.1a05b4	28		plp		            PLP
.1a05b5	c2 20		rep #$20	            REP #$20
.1a05b7	a5 23		lda $0823	                LDA ARGUMENT1
.1a05b9	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.1a05bd	a9 64 00	lda #$0064	                LDA #100
.1a05c0	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.1a05c4	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.1a05c8	85 23		sta $0823	                STA ARGUMENT1
.1a05ca	64 25		stz $0825	                STZ ARGUMENT1+2
.1a05cc	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.1a05d0	85 29		sta $0829	                STA ARGUMENT2
.1a05d2	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a05d4	e2 20		sep #$20	            SEP #$20
.1a05d6	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a05d8	85 27		sta $0827	                STA ARGTYPE1
.1a05da	85 2d		sta $082d	                STA ARGTYPE2
.1a05dc	2b		pld		                PLD
.1a05dd	28		plp		                PLP
.1a05de	60		rts		            RTS
.1a05df					IS_ARG1_Z
.1a05df	08		php		                PHP
.1a05e0	c2 20		rep #$20	            REP #$20
.1a05e2	a5 23		lda $0823	                LDA ARGUMENT1
.1a05e4	d0 08		bne $1a05ee	                BNE return_false
.1a05e6	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a05e8	d0 04		bne $1a05ee	                BNE return_false
.1a05ea	28		plp		return_true     PLP
.1a05eb	e2 02		sep #$02	                SEP #$02        ; Set Z
.1a05ed	60		rts		            RTS
.1a05ee	28		plp		return_false    PLP
.1a05ef	c2 02		rep #$02	                REP #$02        ; Clear Z
.1a05f1	60		rts		            RTS
.1a05f2					SET_TRUE
.1a05f2	08		php		                PHP
.1a05f3	c2 30		rep #$30	            REP #$30
.1a05f5	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a05f8	85 23		sta $0823	                STA ARGUMENT1
.1a05fa	85 25		sta $0825	                STA ARGUMENT1+2
.1a05fc	e2 20		sep #$20	            SEP #$20
.1a05fe	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a0600	85 27		sta $0827	                STA ARGTYPE1
.1a0602	28		plp		                PLP
.1a0603	60		rts		            RTS
.1a0604					SET_FALSE
.1a0604	08		php		                PHP
.1a0605	c2 30		rep #$30	            REP #$30
.1a0607	a9 00 00	lda #$0000	                LDA #0
.1a060a	85 23		sta $0823	                STA ARGUMENT1
.1a060c	85 25		sta $0825	                STA ARGUMENT1+2
.1a060e	e2 20		sep #$20	            SEP #$20
.1a0610	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a0612	85 27		sta $0827	                STA ARGTYPE1
.1a0614	28		plp		                PLP
.1a0615	60		rts		            RTS
.1a0616					ASS_ARG1_INT
.1a0616	08		php		                PHP
.1a0617	e2 20		sep #$20	            SEP #$20
.1a0619	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a061b	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a061d	f0 07		beq $1a0626	                BEQ done                ; If so: just return
.1a061f	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a0621	d0 05		bne $1a0628	                BNE TYPE_ERR            ; If not: throw an error
.1a0623	20 1f 5b	jsr $1a5b1f	            JSR FTOI
.1a0626	28		plp		done            PLP
.1a0627	60		rts		            RTS
.1a0628					TYPE_ERR
.1a0628	08		php		            PHP
.1a0629	c2 20		rep #$20	            REP #$20
.1a062b	48		pha		            PHA
.1a062c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a062f	5b		tcd		            TCD
.1a0630	68		pla		            PLA
.1a0631	28		plp		            PLP
.1a0632	e2 20		sep #$20	            SEP #$20
.1a0634	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0636	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a063a	c2 20		rep #$20	            REP #$20
.1a063c	29 ff 00	and #$00ff	            AND #$00FF
.1a063f	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a0642	e2 20		sep #$20	            SEP #$20
.1a0644	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0647					ASS_ARG2_INT
.1a0647	08		php		                PHP
.1a0648	e2 20		sep #$20	            SEP #$20
.1a064a	a5 2d		lda $082d	                LDA ARGTYPE2                ; Verify that the type is INTEGER
.1a064c	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a064e	f0 37		beq $1a0687	                BEQ done                    ; If so: just return
.1a0650	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; Check if it's a float
.1a0652	d0 35		bne $1a0689	                BNE TYPE_ERR                ; If not: throw an error
.1a0654	c2 20		rep #$20	            REP #$20
.1a0656	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0658	48		pha		            PHA
.1a0659	a5 23		lda $0823	            LDA ARGUMENT1
.1a065b	48		pha		            PHA
.1a065c	c2 20		rep #$20	            REP #$20
.1a065e	a5 29		lda $0829	            LDA ARGUMENT2
.1a0660	85 23		sta $0823	            STA ARGUMENT1
.1a0662	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a0664	85 25		sta $0825	            STA ARGUMENT1+2
.1a0666	e2 20		sep #$20	            SEP #$20
.1a0668	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.1a066a	85 27		sta $0827	            STA ARGTYPE1
.1a066c	20 1f 5b	jsr $1a5b1f	            JSR FTOI
.1a066f	c2 20		rep #$20	            REP #$20
.1a0671	a5 23		lda $0823	            LDA ARGUMENT1
.1a0673	85 29		sta $0829	            STA ARGUMENT2
.1a0675	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0677	85 2b		sta $082b	            STA ARGUMENT2+2
.1a0679	e2 20		sep #$20	            SEP #$20
.1a067b	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a067d	85 2d		sta $082d	            STA ARGTYPE2
.1a067f	c2 20		rep #$20	            REP #$20
.1a0681	68		pla		            PLA
.1a0682	85 23		sta $0823	            STA ARGUMENT1
.1a0684	68		pla		            PLA
.1a0685	85 25		sta $0825	            STA ARGUMENT1+2
.1a0687	28		plp		done            PLP
.1a0688	60		rts		            RTS
.1a0689					TYPE_ERR
.1a0689	08		php		            PHP
.1a068a	c2 20		rep #$20	            REP #$20
.1a068c	48		pha		            PHA
.1a068d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0690	5b		tcd		            TCD
.1a0691	68		pla		            PLA
.1a0692	28		plp		            PLP
.1a0693	e2 20		sep #$20	            SEP #$20
.1a0695	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0697	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a069b	c2 20		rep #$20	            REP #$20
.1a069d	29 ff 00	and #$00ff	            AND #$00FF
.1a06a0	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a06a3	e2 20		sep #$20	            SEP #$20
.1a06a5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a06a8					ASS_ARG1_STR
.1a06a8	08		php		                PHP
.1a06a9	e2 20		sep #$20	            SEP #$20
.1a06ab	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is STRING
.1a06ad	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a06af	d0 02		bne $1a06b3	                BNE TYPE_ERR
.1a06b1	28		plp		                PLP
.1a06b2	60		rts		            RTS
.1a06b3					TYPE_ERR
.1a06b3	08		php		            PHP
.1a06b4	c2 20		rep #$20	            REP #$20
.1a06b6	48		pha		            PHA
.1a06b7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a06ba	5b		tcd		            TCD
.1a06bb	68		pla		            PLA
.1a06bc	28		plp		            PLP
.1a06bd	e2 20		sep #$20	            SEP #$20
.1a06bf	a9 04		lda #$04	            LDA #ERR_TYPE
.1a06c1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a06c5	c2 20		rep #$20	            REP #$20
.1a06c7	29 ff 00	and #$00ff	            AND #$00FF
.1a06ca	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a06cd	e2 20		sep #$20	            SEP #$20
.1a06cf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a06d2					ASS_ARG1_INT16
.1a06d2	08		php		                PHP
.1a06d3	e2 20		sep #$20	            SEP #$20
.1a06d5	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a06d7	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a06d9	f0 07		beq $1a06e2	                BEQ check_range         ; If so: check the range
.1a06db	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a06dd	d0 0b		bne $1a06ea	                BNE TYPE_ERR            ; If not: throw an error
.1a06df	20 1f 5b	jsr $1a5b1f	            JSR FTOI
.1a06e2					check_range
.1a06e2	c2 20		rep #$20	            REP #$20
.1a06e4	a5 25		lda $0825	                LDA ARGUMENT1+2         ; Validate it is 16-bit
.1a06e6	d0 21		bne $1a0709	                BNE range_err
.1a06e8	28		plp		                PLP
.1a06e9	60		rts		            RTS
.1a06ea					TYPE_ERR
.1a06ea	08		php		            PHP
.1a06eb	c2 20		rep #$20	            REP #$20
.1a06ed	48		pha		            PHA
.1a06ee	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a06f1	5b		tcd		            TCD
.1a06f2	68		pla		            PLA
.1a06f3	28		plp		            PLP
.1a06f4	e2 20		sep #$20	            SEP #$20
.1a06f6	a9 04		lda #$04	            LDA #ERR_TYPE
.1a06f8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a06fc	c2 20		rep #$20	            REP #$20
.1a06fe	29 ff 00	and #$00ff	            AND #$00FF
.1a0701	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a0704	e2 20		sep #$20	            SEP #$20
.1a0706	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0709					RANGE_ERR
.1a0709	08		php		            PHP
.1a070a	c2 20		rep #$20	            REP #$20
.1a070c	48		pha		            PHA
.1a070d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0710	5b		tcd		            TCD
.1a0711	68		pla		            PLA
.1a0712	28		plp		            PLP
.1a0713	e2 20		sep #$20	            SEP #$20
.1a0715	a9 09		lda #$09	            LDA #ERR_RANGE
.1a0717	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a071b	c2 20		rep #$20	            REP #$20
.1a071d	29 ff 00	and #$00ff	            AND #$00FF
.1a0720	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a0723	e2 20		sep #$20	            SEP #$20
.1a0725	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0728					ASS_ARG1_BYTE
.1a0728	08		php		                PHP
.1a0729	e2 20		sep #$20	            SEP #$20
.1a072b	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a072d	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a072f	f0 07		beq $1a0738	                BEQ check_range         ; If so: check the range
.1a0731	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a0733	d0 11		bne $1a0746	                BNE TYPE_ERR            ; If not: throw an error
.1a0735	20 1f 5b	jsr $1a5b1f	            JSR FTOI
.1a0738	a5 26		lda $0826	check_range     LDA ARGUMENT1+3         ; Validate that the value is in byte range
.1a073a	d0 29		bne $1a0765	                BNE RANGE_ERR           ; If not... throw a range error
.1a073c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a073e	d0 25		bne $1a0765	                BNE RANGE_ERR
.1a0740	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a0742	d0 21		bne $1a0765	                BNE RANGE_ERR
.1a0744	28		plp		                PLP
.1a0745	60		rts		            RTS
.1a0746					TYPE_ERR
.1a0746	08		php		            PHP
.1a0747	c2 20		rep #$20	            REP #$20
.1a0749	48		pha		            PHA
.1a074a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a074d	5b		tcd		            TCD
.1a074e	68		pla		            PLA
.1a074f	28		plp		            PLP
.1a0750	e2 20		sep #$20	            SEP #$20
.1a0752	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0754	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0758	c2 20		rep #$20	            REP #$20
.1a075a	29 ff 00	and #$00ff	            AND #$00FF
.1a075d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a0760	e2 20		sep #$20	            SEP #$20
.1a0762	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0765					RANGE_ERR
.1a0765	08		php		            PHP
.1a0766	c2 20		rep #$20	            REP #$20
.1a0768	48		pha		            PHA
.1a0769	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a076c	5b		tcd		            TCD
.1a076d	68		pla		            PLA
.1a076e	28		plp		            PLP
.1a076f	e2 20		sep #$20	            SEP #$20
.1a0771	a9 09		lda #$09	            LDA #ERR_RANGE
.1a0773	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0777	c2 20		rep #$20	            REP #$20
.1a0779	29 ff 00	and #$00ff	            AND #$00FF
.1a077c	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a077f	e2 20		sep #$20	            SEP #$20
.1a0781	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0784					ASS_ARG1_FLOAT
.1a0784	08		php		                PHP
.1a0785	e2 20		sep #$20	            SEP #$20
.1a0787	a5 27		lda $0827	                LDA ARGTYPE1            ; Check the type
.1a0789	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.1a078b	f0 26		beq $1a07b3	                BEQ done                ; Then we're done
.1a078d	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.1a078f	f0 1f		beq $1a07b0	                BEQ cast                ; Then cast it to float
.1a0791					type_err
.1a0791	08		php		            PHP
.1a0792	c2 20		rep #$20	            REP #$20
.1a0794	48		pha		            PHA
.1a0795	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0798	5b		tcd		            TCD
.1a0799	68		pla		            PLA
.1a079a	28		plp		            PLP
.1a079b	e2 20		sep #$20	            SEP #$20
.1a079d	a9 04		lda #$04	            LDA #ERR_TYPE
.1a079f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a07a3	c2 20		rep #$20	            REP #$20
.1a07a5	29 ff 00	and #$00ff	            AND #$00FF
.1a07a8	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a07ab	e2 20		sep #$20	            SEP #$20
.1a07ad	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a07b0					cast
.1a07b0	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a07b3	28		plp		done            PLP
.1a07b4	60		rts		            RTS
.1a07b5					ASS_ARG2_FLOAT
.1a07b5	08		php		                PHP
.1a07b6	e2 20		sep #$20	            SEP #$20
.1a07b8	a5 2d		lda $082d	                LDA ARGTYPE2            ; Check the type
.1a07ba	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.1a07bc	f0 26		beq $1a07e4	                BEQ done                ; Then we're done
.1a07be	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.1a07c0	f0 1f		beq $1a07e1	                BEQ cast                ; Then cast it to float
.1a07c2					type_err
.1a07c2	08		php		            PHP
.1a07c3	c2 20		rep #$20	            REP #$20
.1a07c5	48		pha		            PHA
.1a07c6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a07c9	5b		tcd		            TCD
.1a07ca	68		pla		            PLA
.1a07cb	28		plp		            PLP
.1a07cc	e2 20		sep #$20	            SEP #$20
.1a07ce	a9 04		lda #$04	            LDA #ERR_TYPE
.1a07d0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a07d4	c2 20		rep #$20	            REP #$20
.1a07d6	29 ff 00	and #$00ff	            AND #$00FF
.1a07d9	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a07dc	e2 20		sep #$20	            SEP #$20
.1a07de	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a07e1					cast
.1a07e1	20 e6 07	jsr $1a07e6	            JSR CAST_ARG2_FLOAT
.1a07e4	28		plp		done            PLP
.1a07e5	60		rts		            RTS
.1a07e6					CAST_ARG2_FLOAT
.1a07e6	c2 20		rep #$20	            REP #$20
.1a07e8	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a07ea	48		pha		            PHA
.1a07eb	a5 23		lda $0823	            LDA ARGUMENT1
.1a07ed	48		pha		            PHA
.1a07ee	c2 20		rep #$20	            REP #$20
.1a07f0	a5 29		lda $0829	            LDA ARGUMENT2
.1a07f2	85 23		sta $0823	            STA ARGUMENT1
.1a07f4	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a07f6	85 25		sta $0825	            STA ARGUMENT1+2
.1a07f8	e2 20		sep #$20	            SEP #$20
.1a07fa	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a07fc	85 27		sta $0827	            STA ARGTYPE1
.1a07fe	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a0801	c2 20		rep #$20	            REP #$20
.1a0803	a5 23		lda $0823	            LDA ARGUMENT1
.1a0805	85 29		sta $0829	            STA ARGUMENT2
.1a0807	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0809	85 2b		sta $082b	            STA ARGUMENT2+2
.1a080b	e2 20		sep #$20	            SEP #$20
.1a080d	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.1a080f	85 2d		sta $082d	            STA ARGTYPE2
.1a0811	c2 20		rep #$20	            REP #$20
.1a0813	68		pla		            PLA
.1a0814	85 23		sta $0823	            STA ARGUMENT1
.1a0816	68		pla		            PLA
.1a0817	85 25		sta $0825	            STA ARGUMENT1+2
.1a0819	60		rts		            RTS
.1a081a					ASS_ARGS_NUM
.1a081a	08		php		                PHP
.1a081b	e2 20		sep #$20	            SEP #$20
.1a081d	a5 27		lda $0827	                LDA ARGTYPE1                ; Check ARGUMENT1
.1a081f	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a0821	f0 23		beq $1a0846	                BEQ arg1_int
.1a0823	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a0825	f0 2e		beq $1a0855	                BEQ arg1_float
.1a0827					type_err
.1a0827	08		php		            PHP
.1a0828	c2 20		rep #$20	            REP #$20
.1a082a	48		pha		            PHA
.1a082b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a082e	5b		tcd		            TCD
.1a082f	68		pla		            PLA
.1a0830	28		plp		            PLP
.1a0831	e2 20		sep #$20	            SEP #$20
.1a0833	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0835	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0839	c2 20		rep #$20	            REP #$20
.1a083b	29 ff 00	and #$00ff	            AND #$00FF
.1a083e	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a0841	e2 20		sep #$20	            SEP #$20
.1a0843	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0846	a5 2d		lda $082d	arg1_int        LDA ARGTYPE2                ; Check argument 2
.1a0848	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If integer, we're done
.1a084a	f0 16		beq $1a0862	                BEQ done
.1a084c	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If not float, throw an error
.1a084e	d0 d7		bne $1a0827	                BNE type_err
.1a0850	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a0853	80 0d		bra $1a0862	                BRA done
.1a0855	a5 2d		lda $082d	arg1_float      LDA ARGTYPE2                ; Check argument 2
.1a0857	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If it's float
.1a0859	f0 07		beq $1a0862	                BEQ done                    ; Then we're done
.1a085b	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If it's not integer
.1a085d	d0 c8		bne $1a0827	                BNE type_err                ; Thrown an error
.1a085f	20 e6 07	jsr $1a07e6	            JSR CAST_ARG2_FLOAT
.1a0862					done
.1a0862	e2 20		sep #$20	            SEP #$20
.1a0864	a5 27		lda $0827	                LDA ARGTYPE1                ; Return the type code in A
.1a0866	28		plp		                PLP
.1a0867	60		rts		            RTS
.1a0868					ASS_ARGS_NUMSTR
.1a0868	08		php		                PHP
.1a0869	e2 20		sep #$20	            SEP #$20
.1a086b	a5 27		lda $0827	                LDA ARGTYPE1                ; Check to see if ARGUMENT1 is a string
.1a086d	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a086f	d0 25		bne $1a0896	                BNE numbers
.1a0871	a5 2d		lda $082d	                LDA ARGTYPE2                ; If ARGUMENT1 is a string, make sure ARGUMENT2 is
.1a0873	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a0875	f0 24		beq $1a089b	                BEQ done
.1a0877					TYPE_ERR
.1a0877	08		php		            PHP
.1a0878	c2 20		rep #$20	            REP #$20
.1a087a	48		pha		            PHA
.1a087b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a087e	5b		tcd		            TCD
.1a087f	68		pla		            PLA
.1a0880	28		plp		            PLP
.1a0881	e2 20		sep #$20	            SEP #$20
.1a0883	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0885	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0889	c2 20		rep #$20	            REP #$20
.1a088b	29 ff 00	and #$00ff	            AND #$00FF
.1a088e	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a0891	e2 20		sep #$20	            SEP #$20
.1a0893	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0896					numbers
.1a0896	20 1a 08	jsr $1a081a	            JSR ASS_ARGS_NUM
.1a0899	a5 27		lda $0827	                LDA ARGTYPE1                ; Make sure A is the type
.1a089b	28		plp		done            PLP
.1a089c	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\tokens.s

.0000					TOKEN
>0000					precedence  .byte ?
>0001					length      .byte ?
>0002					name        .word <>?
>0004					eval        .word <>?
>0006					arity       .word <>?
.1a089d					PARSEINT
.1a089d	08		php		            PHP
.1a089e	0b		phd		            PHD
.1a089f	08		php		            PHP
.1a08a0	c2 20		rep #$20	            REP #$20
.1a08a2	48		pha		            PHA
.1a08a3	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a08a6	5b		tcd		            TCD
.1a08a7	68		pla		            PLA
.1a08a8	28		plp		            PLP
.1a08a9	c2 30		rep #$30	            REP #$30
.1a08ab	64 23		stz $0823	            STZ ARGUMENT1       ; Default to Not-a-value
.1a08ad	64 25		stz $0825	            STZ ARGUMENT1+2
.1a08af	e2 20		sep #$20	            SEP #$20
.1a08b1	64 27		stz $0827	            STZ ARGTYPE1
.1a08b3	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it starts with '$'
.1a08b5	c9 26		cmp #$26	            CMP #'&'
.1a08b7	f0 44		beq $1a08fd	            BEQ check_hex       ; Yes: parse it as a hexadecimal number
.1a08b9					loop
.1a08b9	e2 20		sep #$20	            SEP #$20
.1a08bb	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.1a08bd	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a08c0	90 76		bcc $1a0938	            BCC done            ; No, we're done parsing
.1a08c2	20 3f 05	jsr $1a053f	            JSR MULINT10
.1a08c5	38		sec		            SEC                 ; Convert the ASCII code to a number
.1a08c6	e9 30		sbc #$30	            SBC #'0'
.1a08c8	c2 20		rep #$20	            REP #$20
.1a08ca	29 ff 00	and #$00ff	            AND #$00FF
.1a08cd	18		clc		            CLC
.1a08ce	65 23		adc $0823	            ADC ARGUMENT1
.1a08d0	85 23		sta $0823	            STA ARGUMENT1
.1a08d2	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a08d4	69 00 00	adc #$0000	            ADC #0
.1a08d7	85 25		sta $0825	            STA ARGUMENT1+2
.1a08d9	20 da 20	jsr $1a20da	            JSR INCBIP
.1a08dc	80 db		bra $1a08b9	            BRA loop            ; And try to process it
.1a08de					syntaxerr
.1a08de	08		php		            PHP
.1a08df	c2 20		rep #$20	            REP #$20
.1a08e1	48		pha		            PHA
.1a08e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a08e5	5b		tcd		            TCD
.1a08e6	68		pla		            PLA
.1a08e7	28		plp		            PLP
.1a08e8	e2 20		sep #$20	            SEP #$20
.1a08ea	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a08ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a08f0	c2 20		rep #$20	            REP #$20
.1a08f2	29 ff 00	and #$00ff	            AND #$00FF
.1a08f5	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a08f8	e2 20		sep #$20	            SEP #$20
.1a08fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a08fd					check_hex
.1a08fd	20 da 20	jsr $1a20da	            JSR INCBIP
.1a0900	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.1a0902	c9 48		cmp #$48	            CMP #'H'            ; Is it 'H'?
.1a0904	f0 04		beq $1a090a	            BEQ parse_hex       ; Yes: skip it and parse hex
.1a0906	c9 68		cmp #$68	            CMP #'h'            ; Is it 'h'?
.1a0908	d0 d4		bne $1a08de	            BNE syntaxerr       ; No: throw an error
.1a090a					parse_hex
.1a090a	20 da 20	jsr $1a20da	            JSR INCBIP
.1a090d					hexloop
.1a090d	e2 20		sep #$20	            SEP #$20
.1a090f	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.1a0911	20 d1 04	jsr $1a04d1	            JSR ISHEX
.1a0914	90 22		bcc $1a0938	            BCC done            ; No, we're done parsing
.1a0916	20 f2 04	jsr $1a04f2	            JSR HEX2BIN
.1a0919	c2 20		rep #$20	            REP #$20
.1a091b	06 23		asl $0823	            ASL ARGUMENT1
.1a091d	26 25		rol $0825	            ROL ARGUMENT1+2
.1a091f	06 23		asl $0823	            ASL ARGUMENT1
.1a0921	26 25		rol $0825	            ROL ARGUMENT1+2
.1a0923	06 23		asl $0823	            ASL ARGUMENT1
.1a0925	26 25		rol $0825	            ROL ARGUMENT1+2
.1a0927	06 23		asl $0823	            ASL ARGUMENT1
.1a0929	26 25		rol $0825	            ROL ARGUMENT1+2
.1a092b	29 ff 00	and #$00ff	            AND #$00FF          ; Add binary number to ARGUMENT1
.1a092e	18		clc		            CLC
.1a092f	65 23		adc $0823	            ADC ARGUMENT1
.1a0931	85 23		sta $0823	            STA ARGUMENT1
.1a0933	20 da 20	jsr $1a20da	            JSR INCBIP
.1a0936	80 d5		bra $1a090d	            BRA hexloop         ; And try to process it
.1a0938	2b		pld		done        PLD
.1a0939	28		plp		            PLP
.1a093a	60		rts		            RTS
.1a093b					PREVCHAR
.1a093b	08		php		            PHP
.1a093c	c2 30		rep #$30	            REP #$30
.1a093e	a5 04		lda $0804	            LDA BIPPREV
.1a0940	f0 1c		beq $1a095e	            BEQ ret_false
.1a0942	38		sec		            SEC
.1a0943	a5 04		lda $0804	            LDA BIPPREV
.1a0945	e5 1a		sbc $081a	            SBC CURLINE
.1a0947	a8		tay		            TAY
.1a0948	e2 20		sep #$20	            SEP #$20
.1a094a	b7 1a		lda [$081a],y	loop        LDA [CURLINE],Y
.1a094c	f0 10		beq $1a095e	            BEQ ret_false
.1a094e	c9 20		cmp #$20	            CMP #CHAR_SP
.1a0950	f0 06		beq $1a0958	            BEQ go_back
.1a0952	c9 09		cmp #$09	            CMP #CHAR_TAB
.1a0954	f0 02		beq $1a0958	            BEQ go_back
.1a0956	28		plp		            PLP
.1a0957	60		rts		            RTS
.1a0958	88		dey		go_back     DEY
.1a0959	c0 ff ff	cpy #$ffff	            CPY #$FFFF
.1a095c	d0 ec		bne $1a094a	            BNE loop
.1a095e					ret_false
.1a095e	a9 00		lda #$00	            LDA #0
.1a0960	60		rts		            RTS
.1a0961					TOKENIZE
.1a0961	08		php		            PHP
.1a0962	0b		phd		            PHD
.1a0963	08		php		            PHP
.1a0964	c2 20		rep #$20	            REP #$20
.1a0966	48		pha		            PHA
.1a0967	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a096a	5b		tcd		            TCD
.1a096b	68		pla		            PLA
.1a096c	28		plp		            PLP
.1a096d	c2 30		rep #$30	            REP #$30
.1a096f	a5 1a		lda $081a	            LDA CURLINE
.1a0971	85 00		sta $0800	            STA BIP
.1a0973	e2 20		sep #$20	            SEP #$20
.1a0975	a5 1c		lda $081c	            LDA CURLINE+2
.1a0977	85 02		sta $0802	            STA BIP+2
.1a0979	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a097c	a7 00		lda [$0800]	            LDA [BIP]               ; Do we have a numeral?
.1a097e	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a0981	90 0c		bcc $1a098f	            BCC mv_curline          ; No: adjust CURLINE and tokenize
.1a0983	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a0986	c2 20		rep #$20	            REP #$20
.1a0988	a5 23		lda $0823	            LDA ARGUMENT1
.1a098a	85 d7		sta $08d7	            STA LINENUM
.1a098c	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a098f					mv_curline
.1a098f	c2 20		rep #$20	            REP #$20
.1a0991	a5 00		lda $0800	            LDA BIP
.1a0993	85 1a		sta $081a	            STA CURLINE
.1a0995	e2 20		sep #$20	            SEP #$20
.1a0997	a5 02		lda $0802	            LDA BIP+2
.1a0999	85 1c		sta $081c	            STA CURLINE+2
.1a099b	20 af 09	jsr $1a09af	            JSR FINDREM
.1a099e	e2 20		sep #$20	            SEP #$20
.1a09a0					loop
.1a09a0	20 20 0a	jsr $1a0a20	            JSR TKFINDTOKEN
.1a09a3	c9 00		cmp #$00	            CMP #0                  ; Did we find a token?
.1a09a5	f0 05		beq $1a09ac	            BEQ done                ; No: return
.1a09a7	20 cb 0b	jsr $1a0bcb	            JSR TKWRITE
.1a09aa	80 f4		bra $1a09a0	            BRA loop                ; And try again
.1a09ac	2b		pld		done        PLD
.1a09ad	28		plp		            PLP
.1a09ae	60		rts		            RTS
.1a09af					FINDREM
.1a09af	08		php		            PHP
.1a09b0	c2 20		rep #$20	            REP #$20
.1a09b2	a5 1a		lda $081a	            LDA CURLINE             ; Point BIP to the beginning of the line
.1a09b4	85 00		sta $0800	            STA BIP
.1a09b6	a5 1c		lda $081c	            LDA CURLINE+2
.1a09b8	85 02		sta $0802	            STA BIP+2
.1a09ba	a2 00 00	ldx #$0000	            LDX #0                  ; X will be a flag that we're at the beginning
.1a09bd	e2 20		sep #$20	            SEP #$20
.1a09bf	a0 00 00	ldy #$0000	loop        LDY #0
.1a09c2	e0 00 00	cpx #$0000	            CPX #0                  ; If we are at the first space on the line
.1a09c5	f0 0d		beq $1a09d4	            BEQ skip_delim          ; ... skip looking for a delimiter
.1a09c7	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a09c9	f0 53		beq $1a0a1e	            BEQ done                ; Is it null? Then we're done
.1a09cb	c9 3a		cmp #$3a	            CMP #':'                ; Is it ":"
.1a09cd	f0 04		beq $1a09d3	            BEQ found_delim         ; Yes: we might have a REM... look for E
.1a09cf	c9 20		cmp #$20	            CMP #CHAR_SP
.1a09d1	d0 33		bne $1a0a06	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a09d3	c8		iny		found_delim INY
.1a09d4	b7 00		lda [$0800],y	skip_delim  LDA [BIP],Y             ; Get the first character
.1a09d6	f0 46		beq $1a0a1e	            BEQ done                ; Is it null? Then we're done
.1a09d8	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.1a09da	f0 10		beq $1a09ec	            BEQ found_R             ; Yes: we might have a REM... look for E
.1a09dc	c9 72		cmp #$72	            CMP #'r'
.1a09de	d0 26		bne $1a0a06	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a09e0	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a09e2	f0 3a		beq $1a0a1e	            BEQ done                ; Is it null? Then we're done
.1a09e4	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.1a09e6	f0 04		beq $1a09ec	            BEQ found_R             ; Yes: we might have a REM... look for E
.1a09e8	c9 72		cmp #$72	            CMP #'r'
.1a09ea	d0 1a		bne $1a0a06	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a09ec	c8		iny		found_R     INY
.1a09ed	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a09ef	f0 2d		beq $1a0a1e	            BEQ done                ; Is it null? Then we're done
.1a09f1	c9 45		cmp #$45	            CMP #'E'                ; Is it "E"
.1a09f3	f0 04		beq $1a09f9	            BEQ found_E             ; Yes: we might have a REM... look for M
.1a09f5	c9 65		cmp #$65	            CMP #'e'
.1a09f7	d0 0d		bne $1a0a06	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a09f9	c8		iny		found_E     INY
.1a09fa	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a09fc	f0 20		beq $1a0a1e	            BEQ done                ; Is it null? Then we're done
.1a09fe	c9 4d		cmp #$4d	            CMP #'M'                ; Is it "E"
.1a0a00	f0 0a		beq $1a0a0c	            BEQ found_REM           ; Yes: we might have a REM... look for M
.1a0a02	c9 6d		cmp #$6d	            CMP #'m'
.1a0a04	f0 06		beq $1a0a0c	            BEQ found_REM
.1a0a06	e8		inx		next_pos    INX                     ; Indicate we're no longer at the first position
.1a0a07	20 da 20	jsr $1a20da	            JSR INCBIP
.1a0a0a	80 b3		bra $1a09bf	            BRA loop
.1a0a0c	a7 00		lda [$0800]	found_REM   LDA [BIP]               ; Get the current character
.1a0a0e	c9 3a		cmp #$3a	            CMP #':'                ; Is it the delimiter?
.1a0a10	d0 03		bne $1a0a15	            BNE ret_REM             ; No: go ahead and return REM at that location
.1a0a12	20 da 20	jsr $1a20da	            JSR INCBIP
.1a0a15	a9 03		lda #$03	ret_REM     LDA #3
.1a0a17	85 1e		sta $081e	            STA CURTOKLEN           ; Set the size
.1a0a19	a9 91		lda #$91	            LDA #TOK_REM            ; And the token to write
.1a0a1b	20 cb 0b	jsr $1a0bcb	            JSR TKWRITE
.1a0a1e	28		plp		done        PLP
.1a0a1f	60		rts		            RTS
.1a0a20					TKFINDTOKEN
.1a0a20	08		php		            PHP
.1a0a21	0b		phd		            PHD
.1a0a22	08		php		            PHP
.1a0a23	c2 20		rep #$20	            REP #$20
.1a0a25	48		pha		            PHA
.1a0a26	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0a29	5b		tcd		            TCD
.1a0a2a	68		pla		            PLA
.1a0a2b	28		plp		            PLP
.1a0a2c	e2 20		sep #$20	            SEP #$20
.1a0a2e	a9 7f		lda #$7f	            LDA #$7F                ; Start off looking for any size token
.1a0a30	85 1e		sta $081e	            STA CURTOKLEN
.1a0a32					next_size
.1a0a32	c2 10		rep #$10	            REP #$10
.1a0a34	20 80 0b	jsr $1a0b80	            JSR TKNEXTBIG
.1a0a37	a5 1e		lda $081e	            LDA CURTOKLEN           ; Are there any keywords left?
.1a0a39	d0 03		bne $1a0a3e	            BNE else
.1a0a3b	4c c0 0a	jmp $1a0ac0	            JMP done                ; No: return to caller
.1a0a3e					else
.1a0a3e	c2 20		rep #$20	            REP #$20
.1a0a40	a5 1a		lda $081a	            LDA CURLINE
.1a0a42	85 00		sta $0800	            STA BIP
.1a0a44	e2 20		sep #$20	            SEP #$20
.1a0a46	a5 1c		lda $081c	            LDA CURLINE+2
.1a0a48	85 02		sta $0802	            STA BIP+2
.1a0a4a	c2 20		rep #$20	            REP #$20
.1a0a4c	64 04		stz $0804	            STZ BIPPREV             ; Clear BIPPREV (point to the previous character)
.1a0a4e	64 06		stz $0806	            STZ BIPPREV+2
.1a0a50					check_len
.1a0a50	e2 30		sep #$30	            SEP #$30
.1a0a52	a0 00		ldy #$00	            LDY #0
.1a0a54	b7 00		lda [$0800],y	nul_scan    LDA [BIP],Y
.1a0a56	f0 da		beq $1a0a32	            BEQ next_size
.1a0a58	c9 91		cmp #$91	            CMP #TOK_REM            ; Tokenization stops at REMarks too
.1a0a5a	f0 d6		beq $1a0a32	            BEQ next_size
.1a0a5c	c8		iny		            INY
.1a0a5d	c4 1e		cpy $081e	            CPY CURTOKLEN
.1a0a5f	90 f3		bcc $1a0a54	            BCC nul_scan
.1a0a61	c2 10		rep #$10	            REP #$10
.1a0a63	a7 00		lda [$0800]	            LDA [BIP]               ; Check the current character
.1a0a65	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.1a0a67	d0 05		bne $1a0a6e	            BNE chk_keyword         ; No: check to see if we are at the start of a possible keyword
.1a0a69	20 e2 0a	jsr $1a0ae2	            JSR SKIPQUOTED
.1a0a6c	80 28		bra $1a0a96	            BRA go_next             ; And move on to the next character
.1a0a6e	a5 1e		lda $081e	chk_keyword LDA CURTOKLEN           ; If the token length is <=2
.1a0a70	c9 03		cmp #$03	            CMP #3
.1a0a72	90 19		bcc $1a0a8d	            BLT try_match           ; ... we don't need a delimiter, go ahead and convert it
.1a0a74	c2 20		rep #$20	            REP #$20
.1a0a76	a5 00		lda $0800	            LDA BIP                 ; Check to see if we're at the start of the line
.1a0a78	c5 1a		cmp $081a	            CMP CURLINE
.1a0a7a	d0 08		bne $1a0a84	            BNE chk_delim           ; No: we need to check for a delimiters
.1a0a7c	e2 20		sep #$20	            SEP #$20
.1a0a7e	a5 02		lda $0802	            LDA BIP+2
.1a0a80	c5 1c		cmp $081c	            CMP CURLINE+2
.1a0a82	f0 09		beq $1a0a8d	            BEQ try_match           ; Yes: this can be a keyword
.1a0a84					chk_delim
.1a0a84	e2 20		sep #$20	            SEP #$20
.1a0a86	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.1a0a88	20 62 50	jsr $1a5062	            JSR ISVARCHAR
.1a0a8b	b0 09		bcs $1a0a96	            BCS go_next             ; Yes: we can't start a keyword here
.1a0a8d					try_match
.1a0a8d	e2 20		sep #$20	            SEP #$20
.1a0a8f	20 f2 0a	jsr $1a0af2	            JSR TKMATCH
.1a0a92	c9 00		cmp #$00	            CMP #0                  ; Did we get one?
.1a0a94	d0 11		bne $1a0aa7	            BNE found               ; Yes: return it
.1a0a96					go_next
.1a0a96	c2 20		rep #$20	            REP #$20
.1a0a98	a5 00		lda $0800	            LDA BIP                 ; Update BIPPREV as the point to the previous character
.1a0a9a	85 04		sta $0804	            STA BIPPREV
.1a0a9c	e2 20		sep #$20	            SEP #$20
.1a0a9e	a5 02		lda $0802	            LDA BIP+2
.1a0aa0	85 06		sta $0806	            STA BIPPREV+2
.1a0aa2	20 da 20	jsr $1a20da	            JSR INCBIP
.1a0aa5	80 a9		bra $1a0a50	            BRA check_len           ; And try there
.1a0aa7					found
.1a0aa7	c9 81		cmp #$81	            CMP #TOK_MINUS          ; Found a token... is it minus?
.1a0aa9	d0 15		bne $1a0ac0	            BNE done                ; Nope: go ahead and return it
.1a0aab	20 3b 09	jsr $1a093b	            JSR PREVCHAR
.1a0aae	c9 00		cmp #$00	            CMP #0                  ; Did we get anything?
.1a0ab0	f0 11		beq $1a0ac3	            BEQ syntax              ; No: line cannot start with minus... throw error
.1a0ab2	89 80		bit #$80	            BIT #$80                ; Is it a token?
.1a0ab4	f0 08		beq $1a0abe	            BEQ binaryminus         ; No: leave token unchanged
.1a0ab6	c9 90		cmp #$90	            CMP #TOK_RPAREN         ; Is the token a right parenthesis?
.1a0ab8	f0 04		beq $1a0abe	            BEQ binaryminus         ; Yes: then this should be a binary minus operator
.1a0aba	a9 af		lda #$af	            LDA #TOK_NEGATIVE       ; Otherwise: this should be a unary minus (negation)
.1a0abc	80 02		bra $1a0ac0	            BRA done
.1a0abe	a9 81		lda #$81	binaryminus LDA #TOK_MINUS          ; It's data... so token should be for binary minus
.1a0ac0					done
.1a0ac0	2b		pld		            PLD
.1a0ac1	28		plp		            PLP
.1a0ac2	60		rts		            RTS
.1a0ac3					syntax
.1a0ac3	08		php		            PHP
.1a0ac4	c2 20		rep #$20	            REP #$20
.1a0ac6	48		pha		            PHA
.1a0ac7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0aca	5b		tcd		            TCD
.1a0acb	68		pla		            PLA
.1a0acc	28		plp		            PLP
.1a0acd	e2 20		sep #$20	            SEP #$20
.1a0acf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a0ad1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0ad5	c2 20		rep #$20	            REP #$20
.1a0ad7	29 ff 00	and #$00ff	            AND #$00FF
.1a0ada	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a0add	e2 20		sep #$20	            SEP #$20
.1a0adf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0ae2					SKIPQUOTED
.1a0ae2	08		php		            PHP
.1a0ae3	e2 20		sep #$20	            SEP #$20
.1a0ae5					loop
.1a0ae5	20 da 20	jsr $1a20da	            JSR INCBIP
.1a0ae8	a7 00		lda [$0800]	            LDA [BIP]
.1a0aea	f0 04		beq $1a0af0	            BEQ done                ; If EOL, just return
.1a0aec	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.1a0aee	d0 f5		bne $1a0ae5	            BNE loop                ; No: keep skipping
.1a0af0	28		plp		done        PLP
.1a0af1	60		rts		            RTS
.1a0af2					TKMATCH
.1a0af2	da		phx		            PHX
.1a0af3	5a		phy		            PHY
.1a0af4	08		php		            PHP
.1a0af5	0b		phd		            PHD
.1a0af6	08		php		            PHP
.1a0af7	c2 20		rep #$20	            REP #$20
.1a0af9	48		pha		            PHA
.1a0afa	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0afd	5b		tcd		            TCD
.1a0afe	68		pla		            PLA
.1a0aff	28		plp		            PLP
.1a0b00	c2 20		rep #$20	            REP #$20
.1a0b02	a5 04		lda $0804	            LDA BIPPREV
.1a0b04	d0 0a		bne $1a0b10	            BNE check_prev
.1a0b06	e2 20		sep #$20	            SEP #$20
.1a0b08	a5 04		lda $0804	            LDA BIPPREV
.1a0b0a	d0 04		bne $1a0b10	            BNE check_prev
.1a0b0c	a9 00		lda #$00	            LDA #0
.1a0b0e	80 0a		bra $1a0b1a	            BRA save_delim
.1a0b10					check_prev
.1a0b10	e2 20		sep #$20	            SEP #$20
.1a0b12	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.1a0b14	20 62 50	jsr $1a5062	            JSR ISVARCHAR
.1a0b17	a9 00		lda #$00	            LDA #0
.1a0b19	2a		rol a		            ROL A
.1a0b1a	85 28		sta $0828	save_delim  STA SIGN1               ; SIGN1 := 1 if it is a variable name character
.1a0b1c	c2 30		rep #$30	            REP #$30
.1a0b1e	a9 c0 0c	lda #$0cc0	            LDA #<>TOKENS           ; Set INDEX to point to the first token record
.1a0b21	85 08		sta $0808	            STA INDEX
.1a0b23	e2 20		sep #$20	            SEP #$20
.1a0b25	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0b27	85 0a		sta $080a	            STA INDEX+2
.1a0b29	a2 80 00	ldx #$0080	            LDX #$80                ; Set the initial token ID
.1a0b2c					token_loop
.1a0b2c	e2 20		sep #$20	            SEP #$20
.1a0b2e	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.1a0b31	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the current token
.1a0b33	f0 31		beq $1a0b66	            BEQ no_match            ; Is it 0? We're out of tokens... no match found
.1a0b35	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it the same as the size of the window?
.1a0b37	d0 32		bne $1a0b6b	            BNE next_token          ; No: try the next token
.1a0b39	c2 30		rep #$30	            REP #$30
.1a0b3b	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.1a0b3e	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the pointer to the token's name
.1a0b40	85 0c		sta $080c	            STA SCRATCH             ; Set SCRATCH to point to the token's name
.1a0b42	e2 20		sep #$20	            SEP #$20
.1a0b44	a9 1a		lda #$1a	            LDA #`DATA_BLOCK
.1a0b46	85 0e		sta $080e	            STA SCRATCH+2
.1a0b48	a5 28		lda $0828	            LDA SIGN1               ; Is previous character a variable name character?
.1a0b4a	f0 07		beq $1a0b53	            BEQ cmp_keyword         ; No: we can check for this token
.1a0b4c	a7 0c		lda [$080c]	            LDA [SCRATCH]           ; Get the token's first character
.1a0b4e	20 62 50	jsr $1a5062	            JSR ISVARCHAR
.1a0b51	b0 18		bcs $1a0b6b	            BCS next_token          ; Yes: skip this token
.1a0b53					cmp_keyword
.1a0b53	e2 10		sep #$10	            SEP #$10
.1a0b55	a0 00		ldy #$00	            LDY #0
.1a0b57	b7 00		lda [$0800],y	cmp_loop    LDA [BIP],Y             ; Get the character in the window
.1a0b59	20 1b 05	jsr $1a051b	            JSR TOUPPERA
.1a0b5c	d7 0c		cmp [$080c],y	            CMP [SCRATCH],Y         ; Compare to the character in the token
.1a0b5e	d0 0b		bne $1a0b6b	            BNE next_token          ; If they don't match, try the next token
.1a0b60	c8		iny		            INY                     ; Move to the next character in the window
.1a0b61	c4 1e		cpy $081e	            CPY CURTOKLEN           ; Have we checked the whole window?
.1a0b63	90 f2		bcc $1a0b57	            BCC cmp_loop            ; No: check this next character
.1a0b65	8a		txa		            TXA                     ; Move the token ID to A
.1a0b66	2b		pld		no_match    PLD
.1a0b67	28		plp		            PLP
.1a0b68	7a		ply		            PLY
.1a0b69	fa		plx		            PLX
.1a0b6a	60		rts		            RTS
.1a0b6b					next_token
.1a0b6b	c2 30		rep #$30	            REP #$30
.1a0b6d	18		clc		            CLC
.1a0b6e	a5 08		lda $0808	            LDA INDEX
.1a0b70	69 08 00	adc #$0008	            ADC #size(TOKEN)
.1a0b73	85 08		sta $0808	            STA INDEX
.1a0b75	e2 20		sep #$20	            SEP #$20
.1a0b77	a5 0a		lda $080a	            LDA INDEX+2
.1a0b79	69 00		adc #$00	            ADC #0
.1a0b7b	85 0a		sta $080a	            STA INDEX+2
.1a0b7d	e8		inx		            INX                     ; Increment the token ID
.1a0b7e	80 ac		bra $1a0b2c	            BRA token_loop          ; And check that token
.1a0b80					TKNEXTBIG
.1a0b80	08		php		            PHP
.1a0b81	0b		phd		            PHD
.1a0b82	8b		phb		            PHB
.1a0b83	08		php		            PHP
.1a0b84	c2 20		rep #$20	            REP #$20
.1a0b86	48		pha		            PHA
.1a0b87	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0b8a	5b		tcd		            TCD
.1a0b8b	68		pla		            PLA
.1a0b8c	28		plp		            PLP
.1a0b8d	c2 30		rep #$30	            REP #$30
.1a0b8f	a9 c0 0c	lda #$0cc0	            LDA #<>TOKENS
.1a0b92	85 08		sta $0808	            STA INDEX
.1a0b94	a9 1a 00	lda #$001a	            LDA #`TOKENS
.1a0b97	85 0a		sta $080a	            STA INDEX+2
.1a0b99	64 0c		stz $080c	            STZ SCRATCH             ; Clear SCRATCH
.1a0b9b					loop
.1a0b9b	e2 20		sep #$20	            SEP #$20
.1a0b9d	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.1a0ba0	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the token
.1a0ba2	f0 1d		beq $1a0bc1	            BEQ done                ; If length is 0, we're done
.1a0ba4	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it >= CURTOKLEN?
.1a0ba6	b0 06		bcs $1a0bae	            BGE skip                ; Yes: skip to the next token
.1a0ba8	c5 0c		cmp $080c	            CMP SCRATCH             ; No: is it < SCRATCH?
.1a0baa	90 02		bcc $1a0bae	            BLT skip                ; Yes: skip to the next token
.1a0bac	85 0c		sta $080c	            STA SCRATCH             ; No: it's our new longest token!
.1a0bae					skip
.1a0bae	c2 20		rep #$20	            REP #$20
.1a0bb0	18		clc		            CLC
.1a0bb1	a5 08		lda $0808	            LDA INDEX
.1a0bb3	69 08 00	adc #$0008	            ADC #size(TOKEN)
.1a0bb6	85 08		sta $0808	            STA INDEX
.1a0bb8	a5 0a		lda $080a	            LDA INDEX+2
.1a0bba	69 00 00	adc #$0000	            ADC #0
.1a0bbd	85 0a		sta $080a	            STA INDEX+2
.1a0bbf	80 da		bra $1a0b9b	            BRA loop                ; And go around for another pass
.1a0bc1					done
.1a0bc1	e2 20		sep #$20	            SEP #$20
.1a0bc3	a5 0c		lda $080c	            LDA SCRATCH
.1a0bc5	85 1e		sta $081e	            STA CURTOKLEN
.1a0bc7	ab		plb		            PLB
.1a0bc8	2b		pld		            PLD
.1a0bc9	28		plp		            PLP
.1a0bca	60		rts		            RTS
.1a0bcb					TKWRITE
.1a0bcb	08		php		            PHP
.1a0bcc	0b		phd		            PHD
.1a0bcd	08		php		            PHP
.1a0bce	c2 20		rep #$20	            REP #$20
.1a0bd0	48		pha		            PHA
.1a0bd1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0bd4	5b		tcd		            TCD
.1a0bd5	68		pla		            PLA
.1a0bd6	28		plp		            PLP
.1a0bd7	e2 20		sep #$20	            SEP #$20
.1a0bd9	87 00		sta [$0800]	            STA [BIP]               ; Write the token to the line
.1a0bdb	c2 20		rep #$20	            REP #$20
.1a0bdd	18		clc		            CLC
.1a0bde	a5 00		lda $0800	            LDA BIP
.1a0be0	69 01 00	adc #$0001	            ADC #1
.1a0be3	85 08		sta $0808	            STA INDEX
.1a0be5	a5 02		lda $0802	            LDA BIP+2
.1a0be7	69 00 00	adc #$0000	            ADC #0
.1a0bea	85 0a		sta $080a	            STA INDEX+2
.1a0bec	e2 10		sep #$10	            SEP #$10
.1a0bee	a4 1e		ldy $081e	            LDY CURTOKLEN           ; Y will be the number of characters to move down
.1a0bf0	88		dey		            DEY
.1a0bf1					copy_down
.1a0bf1	e2 20		sep #$20	            SEP #$20
.1a0bf3	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the byte to move down
.1a0bf5	87 08		sta [$0808]	            STA [INDEX]             ; Move it down
.1a0bf7	f0 13		beq $1a0c0c	            BEQ done                ; We've reached the end of the line
.1a0bf9	c2 20		rep #$20	            REP #$20
.1a0bfb	18		clc		            CLC
.1a0bfc	a5 08		lda $0808	            LDA INDEX
.1a0bfe	69 01 00	adc #$0001	            ADC #1
.1a0c01	85 08		sta $0808	            STA INDEX
.1a0c03	a5 0a		lda $080a	            LDA INDEX+2
.1a0c05	69 00 00	adc #$0000	            ADC #0
.1a0c08	85 0a		sta $080a	            STA INDEX+2
.1a0c0a	80 e5		bra $1a0bf1	            BRA copy_down
.1a0c0c	2b		pld		done        PLD
.1a0c0d	28		plp		            PLP
.1a0c0e	60		rts		            RTS
.1a0c0f					GETTOKREC
.1a0c0f	08		php		            PHP
.1a0c10	c2 30		rep #$30	            REP #$30
.1a0c12	29 7f 00	and #$007f	            AND #$007F
.1a0c15	0a		asl a		            ASL A
.1a0c16	0a		asl a		            ASL A
.1a0c17	0a		asl a		            ASL A
.1a0c18	18		clc		            CLC
.1a0c19	69 c0 0c	adc #$0cc0	            ADC #<>TOKENS
.1a0c1c	aa		tax		            TAX                         ; X is now the data bank relative address of the token record
.1a0c1d	28		plp		            PLP
.1a0c1e	60		rts		            RTS
.1a0c1f					TOKPRECED
.1a0c1f	08		php		            PHP
.1a0c20	8b		phb		            PHB
.1a0c21	0b		phd		            PHD
.1a0c22	08		php		            PHP
.1a0c23	c2 20		rep #$20	            REP #$20
.1a0c25	48		pha		            PHA
.1a0c26	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0c29	5b		tcd		            TCD
.1a0c2a	68		pla		            PLA
.1a0c2b	28		plp		            PLP
.1a0c2c	08		php		            PHP
.1a0c2d	e2 20		sep #$20	            SEP #$20
.1a0c2f	48		pha		            PHA
.1a0c30	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0c32	48		pha		            PHA
.1a0c33	ab		plb		            PLB
.1a0c34	68		pla		            PLA
.1a0c35	28		plp		            PLP
.1a0c36	e2 20		sep #$20	            SEP #$20
.1a0c38	c2 10		rep #$10	            REP #$10
.1a0c3a	20 0f 0c	jsr $1a0c0f	            JSR GETTOKREC
.1a0c3d	bd 00 00	lda $1a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.1a0c40	c2 20		rep #$20	            REP #$20
.1a0c42	29 0f 00	and #$000f	            AND #$000F                  ; Mask off the type code
.1a0c45	2b		pld		            PLD
.1a0c46	ab		plb		            PLB
.1a0c47	28		plp		            PLP
.1a0c48	60		rts		            RTS
.1a0c49					TOKEVAL
.1a0c49	08		php		            PHP
.1a0c4a	8b		phb		            PHB
.1a0c4b	0b		phd		            PHD
.1a0c4c	08		php		            PHP
.1a0c4d	c2 20		rep #$20	            REP #$20
.1a0c4f	48		pha		            PHA
.1a0c50	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0c53	5b		tcd		            TCD
.1a0c54	68		pla		            PLA
.1a0c55	28		plp		            PLP
.1a0c56	08		php		            PHP
.1a0c57	e2 20		sep #$20	            SEP #$20
.1a0c59	48		pha		            PHA
.1a0c5a	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0c5c	48		pha		            PHA
.1a0c5d	ab		plb		            PLB
.1a0c5e	68		pla		            PLA
.1a0c5f	28		plp		            PLP
.1a0c60	c2 30		rep #$30	            REP #$30
.1a0c62	20 0f 0c	jsr $1a0c0f	            JSR GETTOKREC
.1a0c65	bd 04 00	lda $1a0004,x	            LDA #TOKEN.eval,B,X         ; Get the address of the evaluation function
.1a0c68	2b		pld		            PLD
.1a0c69	ab		plb		            PLB
.1a0c6a	28		plp		            PLP
.1a0c6b	60		rts		            RTS
.1a0c6c					TOKTYPE
.1a0c6c	08		php		            PHP
.1a0c6d	8b		phb		            PHB
.1a0c6e	0b		phd		            PHD
.1a0c6f	08		php		            PHP
.1a0c70	c2 20		rep #$20	            REP #$20
.1a0c72	48		pha		            PHA
.1a0c73	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0c76	5b		tcd		            TCD
.1a0c77	68		pla		            PLA
.1a0c78	28		plp		            PLP
.1a0c79	08		php		            PHP
.1a0c7a	e2 20		sep #$20	            SEP #$20
.1a0c7c	48		pha		            PHA
.1a0c7d	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0c7f	48		pha		            PHA
.1a0c80	ab		plb		            PLB
.1a0c81	68		pla		            PLA
.1a0c82	28		plp		            PLP
.1a0c83	e2 20		sep #$20	            SEP #$20
.1a0c85	c2 10		rep #$10	            REP #$10
.1a0c87	20 0f 0c	jsr $1a0c0f	            JSR GETTOKREC
.1a0c8a	bd 00 00	lda $1a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.1a0c8d	c2 20		rep #$20	            REP #$20
.1a0c8f	29 f0 00	and #$00f0	            AND #$00F0                  ; Mask off the type code
.1a0c92	2b		pld		            PLD
.1a0c93	ab		plb		            PLB
.1a0c94	28		plp		            PLP
.1a0c95	60		rts		            RTS
.1a0c96					TOKARITY
.1a0c96	08		php		            PHP
.1a0c97	8b		phb		            PHB
.1a0c98	0b		phd		            PHD
.1a0c99	08		php		            PHP
.1a0c9a	c2 20		rep #$20	            REP #$20
.1a0c9c	48		pha		            PHA
.1a0c9d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0ca0	5b		tcd		            TCD
.1a0ca1	68		pla		            PLA
.1a0ca2	28		plp		            PLP
.1a0ca3	08		php		            PHP
.1a0ca4	e2 20		sep #$20	            SEP #$20
.1a0ca6	48		pha		            PHA
.1a0ca7	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0ca9	48		pha		            PHA
.1a0caa	ab		plb		            PLB
.1a0cab	68		pla		            PLA
.1a0cac	28		plp		            PLP
.1a0cad	e2 20		sep #$20	            SEP #$20
.1a0caf	c2 10		rep #$10	            REP #$10
.1a0cb1	20 0f 0c	jsr $1a0c0f	            JSR GETTOKREC
.1a0cb4	bd 06 00	lda $1a0006,x	            LDA #TOKEN.arity,B,X        ; Get the arity
.1a0cb7	c2 20		rep #$20	            REP #$20
.1a0cb9	29 ff 00	and #$00ff	            AND #$00FF
.1a0cbc	2b		pld		            PLD
.1a0cbd	ab		plb		            PLB
.1a0cbe	28		plp		            PLP
.1a0cbf	60		rts		            RTS
=$00					TOK_EOL = $00
=$01					TOK_FUNC_OPEN = $01     ; A pseudo-token to push to the operator stack to mark
=$00					TOK_TY_OP = $00         ; The token is an operator
=$10					TOK_TY_CMD = $10        ; The token is a command (e.g. RUN, LIST, etc.)
=$20					TOK_TY_STMNT = $20      ; The token is a statement (e.g. INPUT, PRINT, DIM, etc.)
=$30					TOK_TY_FUNC = $30       ; The token is a function (e.g. SIN, COS, TAB, etc.)
=$40					TOK_TY_PUNCT = $40      ; The token is a punctuation mark (e.g. "(", ")")
=$50					TOK_TY_BYWRD = $50      ; The token is a by-word (e.g. STEP, TO, WEND, etc.)
.1a0cc0					TOKENS
=$80					TOK_PLUS = $80
>1ad010	2b 00				TOKEN_TEXT  .null "+"
>1a0cc0	03				precedence  .byte TOK_TY_OP | 3
>1a0cc1	01				length      .byte len("+")
>1a0cc2	10 d0				name        .word <>TOKEN_TEXT
>1a0cc4	a0 27				eval        .word <>OP_PLUS
>1a0cc6	02 00				arity       .word <>2
=$81					TOK_MINUS = $81
>1ad012	2d 00				TOKEN_TEXT  .null "-"
>1a0cc8	03				precedence  .byte TOK_TY_OP | 3
>1a0cc9	01				length      .byte len("-")
>1a0cca	12 d0				name        .word <>TOKEN_TEXT
>1a0ccc	e0 27				eval        .word <>OP_MINUS
>1a0cce	02 00				arity       .word <>2
=$82					TOK_MULT = $82
>1ad014	2a 00				TOKEN_TEXT  .null "*"
>1a0cd0	02				precedence  .byte TOK_TY_OP | 2
>1a0cd1	01				length      .byte len("*")
>1a0cd2	14 d0				name        .word <>TOKEN_TEXT
>1a0cd4	17 28				eval        .word <>OP_MULTIPLY
>1a0cd6	02 00				arity       .word <>2
=$83					TOK_DIVIDE = $83
>1ad016	2f 00				TOKEN_TEXT  .null "/"
>1a0cd8	02				precedence  .byte TOK_TY_OP | 2
>1a0cd9	01				length      .byte len("/")
>1a0cda	16 d0				name        .word <>TOKEN_TEXT
>1a0cdc	4e 28				eval        .word <>OP_DIVIDE
>1a0cde	02 00				arity       .word <>2
=$84					TOK_MOD = $84
>1ad018	4d 4f 44 00			TOKEN_TEXT  .null "MOD"
>1a0ce0	02				precedence  .byte TOK_TY_OP | 2
>1a0ce1	03				length      .byte len("MOD")
>1a0ce2	18 d0				name        .word <>TOKEN_TEXT
>1a0ce4	58 28				eval        .word <>OP_MOD
>1a0ce6	02 00				arity       .word <>2
>1ad01c	5e 00				TOKEN_TEXT  .null "^"
>1a0ce8	00				precedence  .byte TOK_TY_OP | 0
>1a0ce9	01				length      .byte len("^")
>1a0cea	1c d0				name        .word <>TOKEN_TEXT
>1a0cec	6b 28				eval        .word <>OP_POW
>1a0cee	02 00				arity       .word <>2
=$86					TOK_LE = $86
>1ad01e	3c 3d 00			TOKEN_TEXT  .null "<="
>1a0cf0	04				precedence  .byte TOK_TY_OP | 4
>1a0cf1	02				length      .byte len("<=")
>1a0cf2	1e d0				name        .word <>TOKEN_TEXT
>1a0cf4	29 2a				eval        .word <>OP_LTE
>1a0cf6	02 00				arity       .word <>2
=$87					TOK_GE = $87
>1ad021	3e 3d 00			TOKEN_TEXT  .null ">="
>1a0cf8	04				precedence  .byte TOK_TY_OP | 4
>1a0cf9	02				length      .byte len(">=")
>1a0cfa	21 d0				name        .word <>TOKEN_TEXT
>1a0cfc	e9 29				eval        .word <>OP_GTE
>1a0cfe	02 00				arity       .word <>2
=$88					TOK_NE = $88
>1ad024	3c 3e 00			TOKEN_TEXT  .null "<>"
>1a0d00	04				precedence  .byte TOK_TY_OP | 4
>1a0d01	02				length      .byte len("<>")
>1a0d02	24 d0				name        .word <>TOKEN_TEXT
>1a0d04	a9 29				eval        .word <>OP_NE
>1a0d06	02 00				arity       .word <>2
>1ad027	3c 00				TOKEN_TEXT  .null "<"
>1a0d08	04				precedence  .byte TOK_TY_OP | 4
>1a0d09	01				length      .byte len("<")
>1a0d0a	27 d0				name        .word <>TOKEN_TEXT
>1a0d0c	e9 28				eval        .word <>OP_LT
>1a0d0e	02 00				arity       .word <>2
=$8a					TOK_EQ = $8A
>1ad029	3d 00				TOKEN_TEXT  .null "="
>1a0d10	04				precedence  .byte TOK_TY_OP | 4
>1a0d11	01				length      .byte len("=")
>1a0d12	29 d0				name        .word <>TOKEN_TEXT
>1a0d14	69 29				eval        .word <>OP_EQ
>1a0d16	02 00				arity       .word <>2
>1ad02b	3e 00				TOKEN_TEXT  .null ">"
>1a0d18	04				precedence  .byte TOK_TY_OP | 4
>1a0d19	01				length      .byte len(">")
>1a0d1a	2b d0				name        .word <>TOKEN_TEXT
>1a0d1c	29 29				eval        .word <>OP_GT
>1a0d1e	02 00				arity       .word <>2
>1ad02d	4e 4f 54 00			TOKEN_TEXT  .null "NOT"
>1a0d20	05				precedence  .byte TOK_TY_OP | 5
>1a0d21	03				length      .byte len("NOT")
>1a0d22	2d d0				name        .word <>TOKEN_TEXT
>1a0d24	d3 28				eval        .word <>OP_NOT
>1a0d26	01 00				arity       .word <>1
>1ad031	41 4e 44 00			TOKEN_TEXT  .null "AND"
>1a0d28	06				precedence  .byte TOK_TY_OP | 6
>1a0d29	03				length      .byte len("AND")
>1a0d2a	31 d0				name        .word <>TOKEN_TEXT
>1a0d2c	a5 28				eval        .word <>OP_AND
>1a0d2e	02 00				arity       .word <>2
>1ad035	4f 52 00			TOKEN_TEXT  .null "OR"
>1a0d30	07				precedence  .byte TOK_TY_OP | 7
>1a0d31	02				length      .byte len("OR")
>1a0d32	35 d0				name        .word <>TOKEN_TEXT
>1a0d34	bc 28				eval        .word <>OP_OR
>1a0d36	02 00				arity       .word <>2
=$8f					TOK_LPAREN = $8F
>1ad038	28 00				TOKEN_TEXT  .null "("
>1a0d38	ff				precedence  .byte TOK_TY_PUNCT | $FF
>1a0d39	01				length      .byte len("(")
>1a0d3a	38 d0				name        .word <>TOKEN_TEXT
>1a0d3c	00 00				eval        .word <>0
>1a0d3e	00 00				arity       .word <>0
=$90					TOK_RPAREN = $90
>1ad03a	29 00				TOKEN_TEXT  .null ")"
>1a0d40	40				precedence  .byte TOK_TY_PUNCT | 0
>1a0d41	01				length      .byte len(")")
>1a0d42	3a d0				name        .word <>TOKEN_TEXT
>1a0d44	00 00				eval        .word <>0
>1a0d46	00 00				arity       .word <>0
=$91					TOK_REM = $91
>1ad03c	52 45 4d 00			TOKEN_TEXT  .null "REM"
>1a0d48	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d49	03				length      .byte len("REM")
>1a0d4a	3c d0				name        .word <>TOKEN_TEXT
>1a0d4c	ef 40				eval        .word <>S_REM
>1a0d4e	00 00				arity       .word <>0
=$92					TOK_PRINT = $92
>1ad040	50 52 49 4e 54 00		TOKEN_TEXT  .null "PRINT"
>1a0d50	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d51	05				length      .byte len("PRINT")
>1a0d52	40 d0				name        .word <>TOKEN_TEXT
>1a0d54	f4 44				eval        .word <>S_PRINT
>1a0d56	00 00				arity       .word <>0
=$93					TOK_LET = $93
>1ad046	4c 45 54 00			TOKEN_TEXT  .null "LET"
>1a0d58	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d59	03				length      .byte len("LET")
>1a0d5a	46 d0				name        .word <>TOKEN_TEXT
>1a0d5c	3f 44				eval        .word <>S_LET
>1a0d5e	00 00				arity       .word <>0
>1ad04a	47 4f 54 4f 00			TOKEN_TEXT  .null "GOTO"
>1a0d60	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d61	04				length      .byte len("GOTO")
>1a0d62	4a d0				name        .word <>TOKEN_TEXT
>1a0d64	df 43				eval        .word <>S_GOTO
>1a0d66	00 00				arity       .word <>0
=$95					TOK_END = $95
>1ad04f	45 4e 44 00			TOKEN_TEXT  .null "END"
>1a0d68	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d69	03				length      .byte len("END")
>1a0d6a	4f d0				name        .word <>TOKEN_TEXT
>1a0d6c	d6 43				eval        .word <>S_END
>1a0d6e	00 00				arity       .word <>0
>1ad053	49 46 00			TOKEN_TEXT  .null "IF"
>1a0d70	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d71	02				length      .byte len("IF")
>1a0d72	53 d0				name        .word <>TOKEN_TEXT
>1a0d74	6e 43				eval        .word <>S_IF
>1a0d76	00 00				arity       .word <>0
=$97					TOK_THEN = $97
>1ad056	54 48 45 4e 00			TOKEN_TEXT  .null "THEN"
>1a0d78	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0d79	04				length      .byte len("THEN")
>1a0d7a	56 d0				name        .word <>TOKEN_TEXT
>1a0d7c	00 00				eval        .word <>0
>1a0d7e	00 00				arity       .word <>0
>1ad05b	45 4c 53 45 00			TOKEN_TEXT  .null "ELSE"
>1a0d80	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0d81	04				length      .byte len("ELSE")
>1a0d82	5b d0				name        .word <>TOKEN_TEXT
>1a0d84	00 00				eval        .word <>0
>1a0d86	00 00				arity       .word <>0
>1ad060	47 4f 53 55 42 00		TOKEN_TEXT  .null "GOSUB"
>1a0d88	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d89	05				length      .byte len("GOSUB")
>1a0d8a	60 d0				name        .word <>TOKEN_TEXT
>1a0d8c	b1 42				eval        .word <>S_GOSUB
>1a0d8e	00 00				arity       .word <>0
>1ad066	52 45 54 55 52 4e 00		TOKEN_TEXT  .null "RETURN"
>1a0d90	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d91	06				length      .byte len("RETURN")
>1a0d92	66 d0				name        .word <>TOKEN_TEXT
>1a0d94	2a 43				eval        .word <>S_RETURN
>1a0d96	00 00				arity       .word <>0
=$9b					TOK_FOR = $9B
>1ad06d	46 4f 52 00			TOKEN_TEXT  .null "FOR"
>1a0d98	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d99	03				length      .byte len("FOR")
>1a0d9a	6d d0				name        .word <>TOKEN_TEXT
>1a0d9c	06 41				eval        .word <>S_FOR
>1a0d9e	00 00				arity       .word <>0
=$9c					TOK_TO = $9C
>1ad071	54 4f 00			TOKEN_TEXT  .null "TO"
>1a0da0	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0da1	02				length      .byte len("TO")
>1a0da2	71 d0				name        .word <>TOKEN_TEXT
>1a0da4	00 00				eval        .word <>0
>1a0da6	00 00				arity       .word <>0
=$9d					TOK_STEP = $9D
>1ad074	53 54 45 50 00			TOKEN_TEXT  .null "STEP"
>1a0da8	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0da9	04				length      .byte len("STEP")
>1a0daa	74 d0				name        .word <>TOKEN_TEXT
>1a0dac	00 00				eval        .word <>0
>1a0dae	00 00				arity       .word <>0
=$9e					TOK_NEXT = $9E
>1ad079	4e 45 58 54 00			TOKEN_TEXT  .null "NEXT"
>1a0db0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0db1	04				length      .byte len("NEXT")
>1a0db2	79 d0				name        .word <>TOKEN_TEXT
>1a0db4	fa 41				eval        .word <>S_NEXT
>1a0db6	00 00				arity       .word <>0
=$9f					TOK_DO = $9F
>1ad07e	44 4f 00			TOKEN_TEXT  .null "DO"
>1a0db8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0db9	02				length      .byte len("DO")
>1a0dba	7e d0				name        .word <>TOKEN_TEXT
>1a0dbc	00 41				eval        .word <>S_DO
>1a0dbe	00 00				arity       .word <>0
=$a0					TOK_LOOP = $A0
>1ad081	4c 4f 4f 50 00			TOKEN_TEXT  .null "LOOP"
>1a0dc0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dc1	04				length      .byte len("LOOP")
>1a0dc2	81 d0				name        .word <>TOKEN_TEXT
>1a0dc4	03 41				eval        .word <>S_LOOP
>1a0dc6	00 00				arity       .word <>0
>1ad086	57 48 49 4c 45 00		TOKEN_TEXT  .null "WHILE"
>1a0dc8	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0dc9	05				length      .byte len("WHILE")
>1a0dca	86 d0				name        .word <>TOKEN_TEXT
>1a0dcc	00 00				eval        .word <>0
>1a0dce	00 00				arity       .word <>0
>1ad08c	55 4e 54 49 4c 00		TOKEN_TEXT  .null "UNTIL"
>1a0dd0	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0dd1	05				length      .byte len("UNTIL")
>1a0dd2	8c d0				name        .word <>TOKEN_TEXT
>1a0dd4	00 00				eval        .word <>0
>1a0dd6	00 00				arity       .word <>0
>1ad092	45 58 49 54 00			TOKEN_TEXT  .null "EXIT"
>1a0dd8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dd9	04				length      .byte len("EXIT")
>1a0dda	92 d0				name        .word <>TOKEN_TEXT
>1a0ddc	fd 40				eval        .word <>S_EXIT
>1a0dde	00 00				arity       .word <>0
>1ad097	43 4c 52 00			TOKEN_TEXT  .null "CLR"
>1a0de0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0de1	03				length      .byte len("CLR")
>1a0de2	97 d0				name        .word <>TOKEN_TEXT
>1a0de4	35 44				eval        .word <>S_CLR
>1a0de6	00 00				arity       .word <>0
>1ad09b	53 54 4f 50 00			TOKEN_TEXT  .null "STOP"
>1a0de8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0de9	04				length      .byte len("STOP")
>1a0dea	9b d0				name        .word <>TOKEN_TEXT
>1a0dec	d0 40				eval        .word <>S_STOP
>1a0dee	00 00				arity       .word <>0
>1ad0a0	50 4f 4b 45 00			TOKEN_TEXT  .null "POKE"
>1a0df0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0df1	04				length      .byte len("POKE")
>1a0df2	a0 d0				name        .word <>TOKEN_TEXT
>1a0df4	60 40				eval        .word <>S_POKE
>1a0df6	00 00				arity       .word <>0
>1ad0a5	50 4f 4b 45 57 00		TOKEN_TEXT  .null "POKEW"
>1a0df8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0df9	05				length      .byte len("POKEW")
>1a0dfa	a5 d0				name        .word <>TOKEN_TEXT
>1a0dfc	f6 3f				eval        .word <>S_POKEW
>1a0dfe	00 00				arity       .word <>0
>1ad0ab	50 4f 4b 45 4c 00		TOKEN_TEXT  .null "POKEL"
>1a0e00	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e01	05				length      .byte len("POKEL")
>1a0e02	ab d0				name        .word <>TOKEN_TEXT
>1a0e04	83 3f				eval        .word <>S_POKEL
>1a0e06	00 00				arity       .word <>0
>1ad0b1	43 4c 53 00			TOKEN_TEXT  .null "CLS"
>1a0e08	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e09	03				length      .byte len("CLS")
>1a0e0a	b1 d0				name        .word <>TOKEN_TEXT
>1a0e0c	7f 3f				eval        .word <>S_CLS
>1a0e0e	00 00				arity       .word <>0
>1ad0b5	52 45 41 44 00			TOKEN_TEXT  .null "READ"
>1a0e10	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e11	04				length      .byte len("READ")
>1a0e12	b5 d0				name        .word <>TOKEN_TEXT
>1a0e14	60 3e				eval        .word <>S_READ
>1a0e16	00 00				arity       .word <>0
=$ab					TOK_DATA = $AB
>1ad0ba	44 41 54 41 00			TOKEN_TEXT  .null "DATA"
>1a0e18	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e19	04				length      .byte len("DATA")
>1a0e1a	ba d0				name        .word <>TOKEN_TEXT
>1a0e1c	72 3f				eval        .word <>S_DATA
>1a0e1e	00 00				arity       .word <>0
>1ad0bf	52 45 53 54 4f 52 45 00		TOKEN_TEXT  .null "RESTORE"
>1a0e20	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e21	07				length      .byte len("RESTORE")
>1a0e22	bf d0				name        .word <>TOKEN_TEXT
>1a0e24	76 3f				eval        .word <>S_RESTORE
>1a0e26	00 00				arity       .word <>0
>1ad0c7	44 49 4d 00			TOKEN_TEXT  .null "DIM"
>1a0e28	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e29	03				length      .byte len("DIM")
>1a0e2a	c7 d0				name        .word <>TOKEN_TEXT
>1a0e2c	b3 3d				eval        .word <>S_DIM
>1a0e2e	00 00				arity       .word <>0
>1ad0cb	43 41 4c 4c 00			TOKEN_TEXT  .null "CALL"
>1a0e30	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e31	04				length      .byte len("CALL")
>1a0e32	cb d0				name        .word <>TOKEN_TEXT
>1a0e34	1c 3d				eval        .word <>S_CALL
>1a0e36	00 00				arity       .word <>0
=$af					TOK_NEGATIVE = $AF
>1ad0d0	2d 00				TOKEN_TEXT  .null "-"
>1a0e38	00				precedence  .byte TOK_TY_OP | 0
>1a0e39	01				length      .byte len("-")
>1a0e3a	d0 d0				name        .word <>TOKEN_TEXT
>1a0e3c	69 2a				eval        .word <>OP_NEGATIVE
>1a0e3e	01 00				arity       .word <>1
>1ad0d2	4c 45 4e 00			TOKEN_TEXT  .null "LEN"
>1a0e40	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e41	03				length      .byte len("LEN")
>1a0e42	d2 d0				name        .word <>TOKEN_TEXT
>1a0e44	e8 4a				eval        .word <>FN_LEN
>1a0e46	00 00				arity       .word <>0
>1ad0d6	50 45 45 4b 00			TOKEN_TEXT  .null "PEEK"
>1a0e48	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e49	04				length      .byte len("PEEK")
>1a0e4a	d6 d0				name        .word <>TOKEN_TEXT
>1a0e4c	38 4b				eval        .word <>FN_PEEK
>1a0e4e	00 00				arity       .word <>0
>1ad0db	50 45 45 4b 57 00		TOKEN_TEXT  .null "PEEKW"
>1a0e50	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e51	05				length      .byte len("PEEKW")
>1a0e52	db d0				name        .word <>TOKEN_TEXT
>1a0e54	ea 4b				eval        .word <>FN_PEEKW
>1a0e56	00 00				arity       .word <>0
>1ad0e1	50 45 45 4b 4c 00		TOKEN_TEXT  .null "PEEKL"
>1a0e58	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e59	05				length      .byte len("PEEKL")
>1a0e5a	e1 d0				name        .word <>TOKEN_TEXT
>1a0e5c	9c 4b				eval        .word <>FN_PEEKL
>1a0e5e	00 00				arity       .word <>0
>1ad0e7	43 48 52 24 00			TOKEN_TEXT  .null "CHR$"
>1a0e60	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e61	04				length      .byte len("CHR$")
>1a0e62	e7 d0				name        .word <>TOKEN_TEXT
>1a0e64	29 4c				eval        .word <>FN_CHR
>1a0e66	00 00				arity       .word <>0
>1ad0ec	41 53 43 00			TOKEN_TEXT  .null "ASC"
>1a0e68	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e69	03				length      .byte len("ASC")
>1a0e6a	ec d0				name        .word <>TOKEN_TEXT
>1a0e6c	7e 4c				eval        .word <>FN_ASC
>1a0e6e	00 00				arity       .word <>0
>1ad0f0	53 50 43 00			TOKEN_TEXT  .null "SPC"
>1a0e70	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e71	03				length      .byte len("SPC")
>1a0e72	f0 d0				name        .word <>TOKEN_TEXT
>1a0e74	c3 4c				eval        .word <>FN_SPC
>1a0e76	00 00				arity       .word <>0
>1ad0f4	54 41 42 00			TOKEN_TEXT  .null "TAB"
>1a0e78	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e79	03				length      .byte len("TAB")
>1a0e7a	f4 d0				name        .word <>TOKEN_TEXT
>1a0e7c	4c 4d				eval        .word <>FN_TAB
>1a0e7e	00 00				arity       .word <>0
>1ad0f8	41 42 53 00			TOKEN_TEXT  .null "ABS"
>1a0e80	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e81	03				length      .byte len("ABS")
>1a0e82	f8 d0				name        .word <>TOKEN_TEXT
>1a0e84	d5 4d				eval        .word <>FN_ABS
>1a0e86	00 00				arity       .word <>0
>1ad0fc	53 47 4e 00			TOKEN_TEXT  .null "SGN"
>1a0e88	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e89	03				length      .byte len("SGN")
>1a0e8a	fc d0				name        .word <>TOKEN_TEXT
>1a0e8c	37 4e				eval        .word <>FN_SGN
>1a0e8e	00 00				arity       .word <>0
>1ad100	48 45 58 24 00			TOKEN_TEXT  .null "HEX$"
>1a0e90	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e91	04				length      .byte len("HEX$")
>1a0e92	00 d1				name        .word <>TOKEN_TEXT
>1a0e94	5a 4a				eval        .word <>FN_HEX
>1a0e96	00 00				arity       .word <>0
>1ad105	44 45 43 00			TOKEN_TEXT  .null "DEC"
>1a0e98	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e99	03				length      .byte len("DEC")
>1a0e9a	05 d1				name        .word <>TOKEN_TEXT
>1a0e9c	f9 49				eval        .word <>FN_DEC
>1a0e9e	00 00				arity       .word <>0
>1ad109	53 54 52 24 00			TOKEN_TEXT  .null "STR$"
>1a0ea0	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ea1	04				length      .byte len("STR$")
>1a0ea2	09 d1				name        .word <>TOKEN_TEXT
>1a0ea4	ab 49				eval        .word <>FN_STR
>1a0ea6	00 00				arity       .word <>0
>1ad10e	56 41 4c 00			TOKEN_TEXT  .null "VAL"
>1a0ea8	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ea9	03				length      .byte len("VAL")
>1a0eaa	0e d1				name        .word <>TOKEN_TEXT
>1a0eac	55 49				eval        .word <>FN_VAL
>1a0eae	00 00				arity       .word <>0
>1ad112	4c 45 46 54 24 00		TOKEN_TEXT  .null "LEFT$"
>1a0eb0	30				precedence  .byte TOK_TY_FUNC | 0
>1a0eb1	05				length      .byte len("LEFT$")
>1a0eb2	12 d1				name        .word <>TOKEN_TEXT
>1a0eb4	8c 48				eval        .word <>FN_LEFT
>1a0eb6	00 00				arity       .word <>0
>1ad118	52 49 47 48 54 24 00		TOKEN_TEXT  .null "RIGHT$"
>1a0eb8	30				precedence  .byte TOK_TY_FUNC | 0
>1a0eb9	06				length      .byte len("RIGHT$")
>1a0eba	18 d1				name        .word <>TOKEN_TEXT
>1a0ebc	ab 47				eval        .word <>FN_RIGHT
>1a0ebe	00 00				arity       .word <>0
>1ad11f	4d 49 44 24 00			TOKEN_TEXT  .null "MID$"
>1a0ec0	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ec1	04				length      .byte len("MID$")
>1a0ec2	1f d1				name        .word <>TOKEN_TEXT
>1a0ec4	f6 46				eval        .word <>FN_MID
>1a0ec6	00 00				arity       .word <>0
>1ad124	52 55 4e 00			TOKEN_TEXT  .null "RUN"
>1a0ec8	10				precedence  .byte TOK_TY_CMD | 0
>1a0ec9	03				length      .byte len("RUN")
>1a0eca	24 d1				name        .word <>TOKEN_TEXT
>1a0ecc	9e 4f				eval        .word <>CMD_RUN
>1a0ece	00 00				arity       .word <>0
>1ad128	4e 45 57 00			TOKEN_TEXT  .null "NEW"
>1a0ed0	10				precedence  .byte TOK_TY_CMD | 0
>1a0ed1	03				length      .byte len("NEW")
>1a0ed2	28 d1				name        .word <>TOKEN_TEXT
>1a0ed4	69 4f				eval        .word <>CMD_NEW
>1a0ed6	00 00				arity       .word <>0
>1ad12c	4c 4f 41 44 00			TOKEN_TEXT  .null "LOAD"
>1a0ed8	10				precedence  .byte TOK_TY_CMD | 0
>1a0ed9	04				length      .byte len("LOAD")
>1a0eda	2c d1				name        .word <>TOKEN_TEXT
>1a0edc	72 6b				eval        .word <>CMD_LOAD
>1a0ede	00 00				arity       .word <>0
>1ad131	4c 49 53 54 00			TOKEN_TEXT  .null "LIST"
>1a0ee0	10				precedence  .byte TOK_TY_CMD | 0
>1a0ee1	04				length      .byte len("LIST")
>1a0ee2	31 d1				name        .word <>TOKEN_TEXT
>1a0ee4	b5 4f				eval        .word <>CMD_LIST
>1a0ee6	00 00				arity       .word <>0
>1ad136	44 49 52 00			TOKEN_TEXT  .null "DIR"
>1a0ee8	10				precedence  .byte TOK_TY_CMD | 0
>1a0ee9	03				length      .byte len("DIR")
>1a0eea	36 d1				name        .word <>TOKEN_TEXT
>1a0eec	99 68				eval        .word <>CMD_DIR
>1a0eee	00 00				arity       .word <>0
>1ad13a	42 4c 4f 41 44 00		TOKEN_TEXT  .null "BLOAD"
>1a0ef0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ef1	05				length      .byte len("BLOAD")
>1a0ef2	3a d1				name        .word <>TOKEN_TEXT
>1a0ef4	44 6a				eval        .word <>S_BLOAD
>1a0ef6	00 00				arity       .word <>0
>1ad140	42 52 55 4e 00			TOKEN_TEXT  .null "BRUN"
>1a0ef8	10				precedence  .byte TOK_TY_CMD | 0
>1a0ef9	04				length      .byte len("BRUN")
>1a0efa	40 d1				name        .word <>TOKEN_TEXT
>1a0efc	1f 6b				eval        .word <>CMD_BRUN
>1a0efe	00 00				arity       .word <>0
>1ad145	42 53 41 56 45 00		TOKEN_TEXT  .null "BSAVE"
>1a0f00	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f01	05				length      .byte len("BSAVE")
>1a0f02	45 d1				name        .word <>TOKEN_TEXT
>1a0f04	2b 6c				eval        .word <>S_BSAVE
>1a0f06	00 00				arity       .word <>0
>1ad14b	44 45 4c 00			TOKEN_TEXT  .null "DEL"
>1a0f08	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f09	03				length      .byte len("DEL")
>1a0f0a	4b d1				name        .word <>TOKEN_TEXT
>1a0f0c	4a 6d				eval        .word <>S_DEL
>1a0f0e	00 00				arity       .word <>0
>1ad14f	53 41 56 45 00			TOKEN_TEXT  .null "SAVE"
>1a0f10	10				precedence  .byte TOK_TY_CMD | 0
>1a0f11	04				length      .byte len("SAVE")
>1a0f12	4f d1				name        .word <>TOKEN_TEXT
>1a0f14	b7 6c				eval        .word <>CMD_SAVE
>1a0f16	00 00				arity       .word <>0
>1ad154	52 45 4e 41 4d 45 00		TOKEN_TEXT  .null "RENAME"
>1a0f18	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f19	06				length      .byte len("RENAME")
>1a0f1a	54 d1				name        .word <>TOKEN_TEXT
>1a0f1c	c0 6d				eval        .word <>S_RENAME
>1a0f1e	00 00				arity       .word <>0
>1ad15b	43 4f 50 59 00			TOKEN_TEXT  .null "COPY"
>1a0f20	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f21	04				length      .byte len("COPY")
>1a0f22	5b d1				name        .word <>TOKEN_TEXT
>1a0f24	e4 6e				eval        .word <>S_COPY
>1a0f26	00 00				arity       .word <>0
>1ad160	4d 4f 4e 49 54 4f 52 00		TOKEN_TEXT  .null "MONITOR"
>1a0f28	10				precedence  .byte TOK_TY_CMD | 0
>1a0f29	07				length      .byte len("MONITOR")
>1a0f2a	60 d1				name        .word <>TOKEN_TEXT
>1a0f2c	66 4f				eval        .word <>CMD_MONITOR
>1a0f2e	00 00				arity       .word <>0
>1ad168	47 45 54 00			TOKEN_TEXT  .null "GET"
>1a0f30	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f31	03				length      .byte len("GET")
>1a0f32	68 d1				name        .word <>TOKEN_TEXT
>1a0f34	aa 3c				eval        .word <>S_GET
>1a0f36	00 00				arity       .word <>0
>1ad16c	49 4e 50 55 54 00		TOKEN_TEXT  .null "INPUT"
>1a0f38	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f39	05				length      .byte len("INPUT")
>1a0f3a	6c d1				name        .word <>TOKEN_TEXT
>1a0f3c	ba 3b				eval        .word <>S_INPUT
>1a0f3e	00 00				arity       .word <>0
>1ad172	53 45 54 42 4f 52 44 45		TOKEN_TEXT  .null "SETBORDER"
>1ad17a	52 00
>1a0f40	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f41	09				length      .byte len("SETBORDER")
>1a0f42	72 d1				name        .word <>TOKEN_TEXT
>1a0f44	28 2c				eval        .word <>S_SETBORDER
>1a0f46	00 00				arity       .word <>0
>1ad17c	54 45 58 54 43 4f 4c 4f		TOKEN_TEXT  .null "TEXTCOLOR"
>1ad184	52 00
>1a0f48	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f49	09				length      .byte len("TEXTCOLOR")
>1a0f4a	7c d1				name        .word <>TOKEN_TEXT
>1a0f4c	b5 2b				eval        .word <>S_TEXTCOLOR
>1a0f4e	00 00				arity       .word <>0
>1ad186	53 45 54 42 47 43 4f 4c		TOKEN_TEXT  .null "SETBGCOLOR"
>1ad18e	4f 52 00
>1a0f50	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f51	0a				length      .byte len("SETBGCOLOR")
>1a0f52	86 d1				name        .word <>TOKEN_TEXT
>1a0f54	e5 2b				eval        .word <>S_SETBGCOLOR
>1a0f56	00 00				arity       .word <>0
>1ad191	53 45 54 44 41 54 45 00		TOKEN_TEXT  .null "SETDATE"
>1a0f58	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f59	07				length      .byte len("SETDATE")
>1a0f5a	91 d1				name        .word <>TOKEN_TEXT
>1a0f5c	22 2b				eval        .word <>S_SETDATE
>1a0f5e	00 00				arity       .word <>0
>1ad199	47 45 54 44 41 54 45 24		TOKEN_TEXT  .null "GETDATE$"
>1ad1a1	00
>1a0f60	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f61	08				length      .byte len("GETDATE$")
>1a0f62	99 d1				name        .word <>TOKEN_TEXT
>1a0f64	d1 45				eval        .word <>F_GETDATE
>1a0f66	00 00				arity       .word <>0
>1ad1a2	53 45 54 54 49 4d 45 00		TOKEN_TEXT  .null "SETTIME"
>1a0f68	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f69	07				length      .byte len("SETTIME")
>1a0f6a	a2 d1				name        .word <>TOKEN_TEXT
>1a0f6c	b7 2a				eval        .word <>S_SETTIME
>1a0f6e	00 00				arity       .word <>0
>1ad1aa	47 45 54 54 49 4d 45 24		TOKEN_TEXT  .null "GETTIME$"
>1ad1b2	00
>1a0f70	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f71	08				length      .byte len("GETTIME$")
>1a0f72	aa d1				name        .word <>TOKEN_TEXT
>1a0f74	3b 46				eval        .word <>F_GETTIME
>1a0f76	00 00				arity       .word <>0
>1ad1b3	47 52 41 50 48 49 43 53		TOKEN_TEXT  .null "GRAPHICS"
>1ad1bb	00
>1a0f78	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f79	08				length      .byte len("GRAPHICS")
>1a0f7a	b3 d1				name        .word <>TOKEN_TEXT
>1a0f7c	6d 2d				eval        .word <>S_GRAPHICS
>1a0f7e	00 00				arity       .word <>0
>1ad1bc	53 45 54 43 4f 4c 4f 52		TOKEN_TEXT  .null "SETCOLOR"
>1ad1c4	00
>1a0f80	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f81	08				length      .byte len("SETCOLOR")
>1a0f82	bc d1				name        .word <>TOKEN_TEXT
>1a0f84	a1 2c				eval        .word <>S_SETCOLOR
>1a0f86	00 00				arity       .word <>0
>1ad1c5	42 49 54 4d 41 50 00		TOKEN_TEXT  .null "BITMAP"
>1a0f88	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f89	06				length      .byte len("BITMAP")
>1a0f8a	c5 d1				name        .word <>TOKEN_TEXT
>1a0f8c	a7 2e				eval        .word <>S_BITMAP
>1a0f8e	00 00				arity       .word <>0
>1ad1cc	43 4c 52 42 49 54 4d 41		TOKEN_TEXT  .null "CLRBITMAP"
>1ad1d4	50 00
>1a0f90	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f91	09				length      .byte len("CLRBITMAP")
>1a0f92	cc d1				name        .word <>TOKEN_TEXT
>1a0f94	af 2f				eval        .word <>S_CLRBITMAP
>1a0f96	00 00				arity       .word <>0
>1ad1d6	50 4c 4f 54 00			TOKEN_TEXT  .null "PLOT"
>1a0f98	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f99	04				length      .byte len("PLOT")
>1a0f9a	d6 d1				name        .word <>TOKEN_TEXT
>1a0f9c	bf 30				eval        .word <>S_PLOT
>1a0f9e	00 00				arity       .word <>0
>1ad1db	4c 49 4e 45 00			TOKEN_TEXT  .null "LINE"
>1a0fa0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fa1	04				length      .byte len("LINE")
>1a0fa2	db d1				name        .word <>TOKEN_TEXT
>1a0fa4	30 31				eval        .word <>S_LINE
>1a0fa6	00 00				arity       .word <>0
>1ad1e0	46 49 4c 4c 00			TOKEN_TEXT  .null "FILL"
>1a0fa8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fa9	04				length      .byte len("FILL")
>1a0faa	e0 d1				name        .word <>TOKEN_TEXT
>1a0fac	c9 31				eval        .word <>S_FILL
>1a0fae	00 00				arity       .word <>0
>1ad1e5	53 50 52 49 54 45 00		TOKEN_TEXT  .null "SPRITE"
>1a0fb0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fb1	06				length      .byte len("SPRITE")
>1a0fb2	e5 d1				name        .word <>TOKEN_TEXT
>1a0fb4	05 33				eval        .word <>S_SPRITE
>1a0fb6	00 00				arity       .word <>0
>1ad1ec	53 50 52 49 54 45 41 54		TOKEN_TEXT  .null "SPRITEAT"
>1ad1f4	00
>1a0fb8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fb9	08				length      .byte len("SPRITEAT")
>1a0fba	ec d1				name        .word <>TOKEN_TEXT
>1a0fbc	a3 33				eval        .word <>S_SPRITEAT
>1a0fbe	00 00				arity       .word <>0
>1ad1f5	53 50 52 49 54 45 53 48		TOKEN_TEXT  .null "SPRITESHOW"
>1ad1fd	4f 57 00
>1a0fc0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fc1	0a				length      .byte len("SPRITESHOW")
>1a0fc2	f5 d1				name        .word <>TOKEN_TEXT
>1a0fc4	f1 33				eval        .word <>S_SPRITESHOW
>1a0fc6	00 00				arity       .word <>0
>1ad200	54 49 4c 45 53 45 54 00		TOKEN_TEXT  .null "TILESET"
>1a0fc8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fc9	07				length      .byte len("TILESET")
>1a0fca	00 d2				name        .word <>TOKEN_TEXT
>1a0fcc	28 35				eval        .word <>S_TILESET
>1a0fce	00 00				arity       .word <>0
>1ad208	54 49 4c 45 4d 41 50 00		TOKEN_TEXT  .null "TILEMAP"
>1a0fd0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fd1	07				length      .byte len("TILEMAP")
>1a0fd2	08 d2				name        .word <>TOKEN_TEXT
>1a0fd4	a6 35				eval        .word <>S_TILEMAP
>1a0fd6	00 00				arity       .word <>0
>1ad210	54 49 4c 45 53 48 4f 57		TOKEN_TEXT  .null "TILESHOW"
>1ad218	00
>1a0fd8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fd9	08				length      .byte len("TILESHOW")
>1a0fda	10 d2				name        .word <>TOKEN_TEXT
>1a0fdc	18 36				eval        .word <>S_TILESHOW
>1a0fde	00 00				arity       .word <>0
>1ad219	54 49 4c 45 41 54 00		TOKEN_TEXT  .null "TILEAT"
>1a0fe0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fe1	06				length      .byte len("TILEAT")
>1a0fe2	19 d2				name        .word <>TOKEN_TEXT
>1a0fe4	55 36				eval        .word <>S_TILEAT
>1a0fe6	00 00				arity       .word <>0
>1ad220	4d 45 4d 43 4f 50 59 00		TOKEN_TEXT  .null "MEMCOPY"
>1a0fe8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fe9	07				length      .byte len("MEMCOPY")
>1a0fea	20 d2				name        .word <>TOKEN_TEXT
>1a0fec	85 39				eval        .word <>S_MEMCOPY
>1a0fee	00 00				arity       .word <>0
=$e6					TOK_LINEAR = $E6
>1ad228	4c 49 4e 45 41 52 00		TOKEN_TEXT  .null "LINEAR"
>1a0ff0	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0ff1	06				length      .byte len("LINEAR")
>1a0ff2	28 d2				name        .word <>TOKEN_TEXT
>1a0ff4	00 00				eval        .word <>0
>1a0ff6	00 00				arity       .word <>0
=$e7					TOK_RECT = $E7
>1ad22f	52 45 43 54 00			TOKEN_TEXT  .null "RECT"
>1a0ff8	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0ff9	04				length      .byte len("RECT")
>1a0ffa	2f d2				name        .word <>TOKEN_TEXT
>1a0ffc	00 00				eval        .word <>0
>1a0ffe	00 00				arity       .word <>0
>1ad234	4c 4f 43 41 54 45 00		TOKEN_TEXT  .null "LOCATE"
>1a1000	20				precedence  .byte TOK_TY_STMNT | 0
>1a1001	06				length      .byte len("LOCATE")
>1a1002	34 d2				name        .word <>TOKEN_TEXT
>1a1004	9a 3b				eval        .word <>S_LOCATE
>1a1006	00 00				arity       .word <>0
>1ad23b	49 4e 54 00			TOKEN_TEXT  .null "INT"
>1a1008	30				precedence  .byte TOK_TY_FUNC | 0
>1a1009	03				length      .byte len("INT")
>1a100a	3b d2				name        .word <>TOKEN_TEXT
>1a100c	8d 4e				eval        .word <>FN_INT
>1a100e	00 00				arity       .word <>0
>1ad23f	52 4e 44 00			TOKEN_TEXT  .null "RND"
>1a1010	30				precedence  .byte TOK_TY_FUNC | 0
>1a1011	03				length      .byte len("RND")
>1a1012	3f d2				name        .word <>TOKEN_TEXT
>1a1014	a0 46				eval        .word <>FN_RND
>1a1016	00 00				arity       .word <>0
>1ad243	53 49 4e 00			TOKEN_TEXT  .null "SIN"
>1a1018	30				precedence  .byte TOK_TY_FUNC | 0
>1a1019	03				length      .byte len("SIN")
>1a101a	43 d2				name        .word <>TOKEN_TEXT
>1a101c	a0 4e				eval        .word <>FN_SIN
>1a101e	00 00				arity       .word <>0
>1ad247	43 4f 53 00			TOKEN_TEXT  .null "COS"
>1a1020	30				precedence  .byte TOK_TY_FUNC | 0
>1a1021	03				length      .byte len("COS")
>1a1022	47 d2				name        .word <>TOKEN_TEXT
>1a1024	b6 4e				eval        .word <>FN_COS
>1a1026	00 00				arity       .word <>0
>1ad24b	54 41 4e 00			TOKEN_TEXT  .null "TAN"
>1a1028	30				precedence  .byte TOK_TY_FUNC | 0
>1a1029	03				length      .byte len("TAN")
>1a102a	4b d2				name        .word <>TOKEN_TEXT
>1a102c	cc 4e				eval        .word <>FN_TAN
>1a102e	00 00				arity       .word <>0
>1ad24f	4c 4e 00			TOKEN_TEXT  .null "LN"
>1a1030	30				precedence  .byte TOK_TY_FUNC | 0
>1a1031	02				length      .byte len("LN")
>1a1032	4f d2				name        .word <>TOKEN_TEXT
>1a1034	e2 4e				eval        .word <>FN_LN
>1a1036	00 00				arity       .word <>0
>1ad252	41 43 4f 53 00			TOKEN_TEXT  .null "ACOS"
>1a1038	30				precedence  .byte TOK_TY_FUNC | 0
>1a1039	04				length      .byte len("ACOS")
>1a103a	52 d2				name        .word <>TOKEN_TEXT
>1a103c	f8 4e				eval        .word <>FN_ACOS
>1a103e	00 00				arity       .word <>0
>1ad257	41 53 49 4e 00			TOKEN_TEXT  .null "ASIN"
>1a1040	30				precedence  .byte TOK_TY_FUNC | 0
>1a1041	04				length      .byte len("ASIN")
>1a1042	57 d2				name        .word <>TOKEN_TEXT
>1a1044	0e 4f				eval        .word <>FN_ASIN
>1a1046	00 00				arity       .word <>0
>1ad25c	41 54 41 4e 00			TOKEN_TEXT  .null "ATAN"
>1a1048	30				precedence  .byte TOK_TY_FUNC | 0
>1a1049	04				length      .byte len("ATAN")
>1a104a	5c d2				name        .word <>TOKEN_TEXT
>1a104c	24 4f				eval        .word <>FN_ATAN
>1a104e	00 00				arity       .word <>0
>1ad261	45 58 50 00			TOKEN_TEXT  .null "EXP"
>1a1050	30				precedence  .byte TOK_TY_FUNC | 0
>1a1051	03				length      .byte len("EXP")
>1a1052	61 d2				name        .word <>TOKEN_TEXT
>1a1054	3a 4f				eval        .word <>FN_EXP
>1a1056	00 00				arity       .word <>0
>1ad265	53 51 52 00			TOKEN_TEXT  .null "SQR"
>1a1058	30				precedence  .byte TOK_TY_FUNC | 0
>1a1059	03				length      .byte len("SQR")
>1a105a	65 d2				name        .word <>TOKEN_TEXT
>1a105c	50 4f				eval        .word <>FN_SQR
>1a105e	00 00				arity       .word <>0
>1a1060	00 00 00 00 00 00 00 00		            .word 0, 0, 0, 0

;******  Return to file: src\basic816.s


;******  Processing file: src\heap.s

>08b7					ALLOCATED   .long ?     ; Pointer to the most recently allocated object
>08ba					HEAP        .long ?     ; Pointer to the top of the heap (next empty byte)
>08bd					FREED       .long ?     ; Pointer to a linked list of freed heap objects
>08c0					CURRBLOCK   .long ?     ; Pointer to the current heap allocated block
>08c3					CURRHEADER  .long ?     ; Pointer to the header of the current block
>08c6					CURREND     .long ?     ; Pointer to the byte immediately after the current block
>08c9					CURRFREED   .long ?     ; Pointer to the current freed block
>08cc					FREEDEND    .long ?     ; Pointer to the byte immediately after the current freed block
>08cf					LASTFREED   .long ?     ;
.0000					HEAPOBJ
>0000					TYPE        .byte ?     ; Code for the type of object allocated
>0001					COUNT       .byte ?     ; Number of references to the heap object
>0002					NEXT        .long ?     ; Pointer to the next object in the list (used when freed)
>0005					END         .long ?     ; Pointer to the next byte after the block
.1a1068					INITHEAP
.1a1068	08		php		            PHP
.1a1069	0b		phd		            PHD
.1a106a	08		php		            PHP
.1a106b	c2 20		rep #$20	            REP #$20
.1a106d	48		pha		            PHA
.1a106e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1071	5b		tcd		            TCD
.1a1072	68		pla		            PLA
.1a1073	28		plp		            PLP
.1a1074	c2 30		rep #$30	            REP #$30
.1a1076	a9 ff ff	lda #$ffff	            LDA #<>HEAP_TOP         ; Set the HEAP to the top
.1a1079	85 ba		sta $08ba	            STA HEAP
.1a107b	e2 20		sep #$20	            SEP #$20
.1a107d	a9 17		lda #$17	            LDA #`HEAP_TOP
.1a107f	85 bc		sta $08bc	            STA HEAP+2
.1a1081	c2 20		rep #$20	            REP #$20
.1a1083	64 b7		stz $08b7	            STZ ALLOCATED           ; And clear the pointer to the allocated objects
.1a1085	64 bd		stz $08bd	            STZ FREED               ; as well as the list of freed objects
.1a1087	e2 20		sep #$20	            SEP #$20
.1a1089	64 b9		stz $08b9	            STZ ALLOCATED+2
.1a108b	64 bf		stz $08bf	            STZ FREED+2
.1a108d	2b		pld		            PLD
.1a108e	28		plp		            PLP
.1a108f	60		rts		            RTS
.1a1090					ALLOC
.1a1090	5a		phy		            PHY
.1a1091	08		php		            PHP
.1a1092	e2 20		sep #$20	            SEP #$20
.1a1094	85 ea		sta $08ea	            STA TOFINDTYPE      ; Save the type of the block to TOFINDTYPE
.1a1096	c2 10		rep #$10	            REP #$10
.1a1098	86 8f		stx $088f	            STX MCOUNT           ; And the length of the block needed to MCOUNT
.1a109a	c2 20		rep #$20	            REP #$20
.1a109c	a5 0e		lda $080e	            LDA SCRATCH+2
.1a109e	48		pha		            PHA
.1a109f	a5 0c		lda $080c	            LDA SCRATCH
.1a10a1	48		pha		            PHA
.1a10a2	a5 12		lda $0812	            LDA SCRATCH2+2
.1a10a4	48		pha		            PHA
.1a10a5	a5 10		lda $0810	            LDA SCRATCH2
.1a10a7	48		pha		            PHA
.1a10a8	20 40 11	jsr $1a1140	            JSR ALLOCFREED
.1a10ab	b0 03		bcs $1a10b0	            BCS done            ; Return, if we got something back
.1a10ad	20 c4 10	jsr $1a10c4	            JSR ALLOCHEAP
.1a10b0					done
.1a10b0	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a10b3	c2 20		rep #$20	            REP #$20
.1a10b5	68		pla		            PLA
.1a10b6	85 10		sta $0810	            STA SCRATCH2
.1a10b8	68		pla		            PLA
.1a10b9	85 12		sta $0812	            STA SCRATCH2+2
.1a10bb	68		pla		            PLA
.1a10bc	85 0c		sta $080c	            STA SCRATCH
.1a10be	68		pla		            PLA
.1a10bf	85 0e		sta $080e	            STA SCRATCH+2
.1a10c1	28		plp		            PLP
.1a10c2	7a		ply		            PLY
.1a10c3	60		rts		            RTS
.1a10c4					ALLOCHEAP
.1a10c4	08		php		            PHP
.1a10c5	0b		phd		            PHD
.1a10c6	08		php		            PHP
.1a10c7	c2 20		rep #$20	            REP #$20
.1a10c9	48		pha		            PHA
.1a10ca	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a10cd	5b		tcd		            TCD
.1a10ce	68		pla		            PLA
.1a10cf	28		plp		            PLP
.1a10d0	e2 20		sep #$20	            SEP #$20
.1a10d2	a6 8f		ldx $088f	            LDX MCOUNT
.1a10d4	ca		dex		            DEX
.1a10d5	86 0c		stx $080c	            STX SCRATCH             ; SCRATCH := size - 1
.1a10d7	e8		inx		            INX
.1a10d8	c2 30		rep #$30	            REP #$30
.1a10da	38		sec		            SEC
.1a10db	a5 ba		lda $08ba	            LDA HEAP
.1a10dd	e5 0c		sbc $080c	            SBC SCRATCH
.1a10df	85 c0		sta $08c0	            STA CURRBLOCK
.1a10e1	e2 20		sep #$20	            SEP #$20
.1a10e3	a5 bc		lda $08bc	            LDA HEAP+2
.1a10e5	e9 00		sbc #$00	            SBC #0
.1a10e7	85 c2		sta $08c2	            STA CURRBLOCK+2
.1a10e9	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a10ec	e2 20		sep #$20	            SEP #$20
.1a10ee	a5 ea		lda $08ea	            LDA TOFINDTYPE
.1a10f0	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE       ; Set the type of the object
.1a10f3	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a10f5	a9 00		lda #$00	            LDA #0                  ; Set the count to zero
.1a10f7	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.1a10fa	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a10fc	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a10ff	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1101	c2 20		rep #$20	            REP #$20
.1a1103	a9 00 00	lda #$0000	            LDA #0
.1a1106	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1108	c2 20		rep #$20	            REP #$20
.1a110a	18		clc		            CLC
.1a110b	a5 ba		lda $08ba	            LDA HEAP
.1a110d	69 01 00	adc #$0001	            ADC #1
.1a1110	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; To get the address of the next byte
.1a1113	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y      ; after the block
.1a1115	e2 20		sep #$20	            SEP #$20
.1a1117	c8		iny		            INY
.1a1118	c8		iny		            INY
.1a1119	a5 bc		lda $08bc	            LDA HEAP+2
.1a111b	69 00		adc #$00	            ADC #0
.1a111d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a111f	c2 20		rep #$20	            REP #$20
.1a1121	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a1123	85 b7		sta $08b7	            STA ALLOCATED
.1a1125	e2 20		sep #$20	            SEP #$20
.1a1127	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a1129	85 b9		sta $08b9	            STA ALLOCATED+2
.1a112b	c2 20		rep #$20	            REP #$20
.1a112d	38		sec		            SEC                     ; Move the HEAP pointer to the first free byte under the header
.1a112e	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1130	e9 01 00	sbc #$0001	            SBC #1
.1a1133	85 ba		sta $08ba	            STA HEAP
.1a1135	e2 20		sep #$20	            SEP #$20
.1a1137	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1139	e9 00		sbc #$00	            SBC #0
.1a113b	85 bc		sta $08bc	            STA HEAP+2
.1a113d	2b		pld		            PLD
.1a113e	28		plp		            PLP
.1a113f	60		rts		            RTS
.1a1140					ALLOCFREED
.1a1140	08		php		            PHP
.1a1141	0b		phd		            PHD
.1a1142	08		php		            PHP
.1a1143	c2 20		rep #$20	            REP #$20
.1a1145	48		pha		            PHA
.1a1146	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1149	5b		tcd		            TCD
.1a114a	68		pla		            PLA
.1a114b	28		plp		            PLP
.1a114c	c2 30		rep #$30	            REP #$30
.1a114e	c2 20		rep #$20	            REP #$20
.1a1150	a5 bd		lda $08bd	            LDA FREED
.1a1152	85 c9		sta $08c9	            STA CURRFREED
.1a1154	e2 20		sep #$20	            SEP #$20
.1a1156	a5 bf		lda $08bf	            LDA FREED+2
.1a1158	85 cb		sta $08cb	            STA CURRFREED+2
.1a115a	a5 c9		lda $08c9	loop        LDA CURRFREED           ; Has anything been freed?
.1a115c	d0 17		bne $1a1175	            BNE has_block           ; Yes: check to see if there's a big enough block
.1a115e	e2 20		sep #$20	            SEP #$20
.1a1160	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1162	d0 11		bne $1a1175	            BNE has_block           ; Yes: check to see if there's a big enough block
.1a1164	c2 20		rep #$20	            REP #$20
.1a1166	a9 00 00	lda #$0000	            LDA #<>0
.1a1169	85 cf		sta $08cf	            STA LASTFREED
.1a116b	e2 20		sep #$20	            SEP #$20
.1a116d	a9 00		lda #$00	            LDA #`0
.1a116f	85 d1		sta $08d1	            STA LASTFREED+2
.1a1171	2b		pld		ret_false   PLD                     ; Return that we didn't find anything
.1a1172	28		plp		            PLP
.1a1173	18		clc		            CLC
.1a1174	60		rts		            RTS
.1a1175					has_block
.1a1175	c2 20		rep #$20	            REP #$20
.1a1177	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.1a117a	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a117c	85 cc		sta $08cc	            STA FREEDEND
.1a117e	e2 20		sep #$20	            SEP #$20
.1a1180	c8		iny		            INY
.1a1181	c8		iny		            INY
.1a1182	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1184	85 ce		sta $08ce	            STA FREEDEND+2
.1a1186	c2 20		rep #$20	            REP #$20
.1a1188	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required
.1a1189	a5 c9		lda $08c9	            LDA CURRFREED
.1a118b	65 8f		adc $088f	            ADC MCOUNT
.1a118d	85 0c		sta $080c	            STA SCRATCH
.1a118f	e2 20		sep #$20	            SEP #$20
.1a1191	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1193	69 00		adc #$00	            ADC #0
.1a1195	85 0e		sta $080e	            STA SCRATCH+2
.1a1197	c2 20		rep #$20	            REP #$20
.1a1199	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required + size of header
.1a119a	a5 0c		lda $080c	            LDA SCRATCH                 ; (that is, it's a pointer to the byte immediately after the block desired)
.1a119c	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)
.1a119f	85 0c		sta $080c	            STA SCRATCH
.1a11a1	e2 20		sep #$20	            SEP #$20
.1a11a3	a5 0e		lda $080e	            LDA SCRATCH+2
.1a11a5	69 00		adc #$00	            ADC #0
.1a11a7	85 0e		sta $080e	            STA SCRATCH+2
.1a11a9	c2 20		rep #$20	            REP #$20
.1a11ab	a5 0c		lda $080c	            LDA SCRATCH                 ; Is SCRATCH == FREEDEND?
.1a11ad	c5 cc		cmp $08cc	            CMP FREEDEND
.1a11af	d0 28		bne $1a11d9	            BNE not_exact               ; No: check if this block is bigger than needed
.1a11b1	e2 20		sep #$20	            SEP #$20
.1a11b3	a5 0e		lda $080e	            LDA SCRATCH+2
.1a11b5	c5 ce		cmp $08ce	            CMP FREEDEND+2
.1a11b7	d0 20		bne $1a11d9	            BNE not_exact
.1a11b9	c2 20		rep #$20	            REP #$20
.1a11bb	a5 cf		lda $08cf	            LDA LASTFREED               ; LASTFREED == 0?
.1a11bd	d0 5d		bne $1a121c	            BNE adj_last1               ; No: point LASTFREED->NEXT to skip this block
.1a11bf	e2 20		sep #$20	            SEP #$20
.1a11c1	a5 d1		lda $08d1	            LDA LASTFREED+2
.1a11c3	d0 57		bne $1a121c	            BNE adj_last1
.1a11c5	c2 20		rep #$20	            REP #$20
.1a11c7	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a11ca	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a11cc	85 bd		sta $08bd	            STA FREED
.1a11ce	e2 20		sep #$20	            SEP #$20
.1a11d0	c8		iny		            INY
.1a11d1	c8		iny		            INY
.1a11d2	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a11d4	85 bf		sta $08bf	            STA FREED+2
.1a11d6	4c 7d 12	jmp $1a127d	            JMP init_block              ; And return CURRFREED as our reallocated memory
.1a11d9					not_exact
.1a11d9	c2 20		rep #$20	            REP #$20
.1a11db	a5 0c		lda $080c	            LDA SCRATCH                 ; Add a buffer to the room needed
.1a11dd	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)          ; So we have room to track the memory still freed
.1a11e0	85 10		sta $0810	            STA SCRATCH2
.1a11e2	e2 20		sep #$20	            SEP #$20
.1a11e4	a5 0e		lda $080e	            LDA SCRATCH+2
.1a11e6	69 00		adc #$00	            ADC #0
.1a11e8	85 12		sta $0812	            STA SCRATCH2+2
.1a11ea	e2 20		sep #$20	            SEP #$20
.1a11ec	a5 c6		lda $08c6	            LDA CURREND                 ; Is CURREND > SCRATCH2
.1a11ee	c5 10		cmp $0810	            CMP SCRATCH2
.1a11f0	b0 3e		bcs $1a1230	            BGE has_room                ; Yes: there is room in this block to allocate some memory
.1a11f2	90 08		bcc $1a11fc	            BLT try_next
.1a11f4	c2 20		rep #$20	            REP #$20
.1a11f6	a5 c6		lda $08c6	            LDA CURREND
.1a11f8	c5 10		cmp $0810	            CMP SCRATCH2
.1a11fa	b0 34		bcs $1a1230	            BGE has_room
.1a11fc					try_next
.1a11fc	c2 20		rep #$20	            REP #$20
.1a11fe	a5 c9		lda $08c9	            LDA CURRFREED
.1a1200	85 cf		sta $08cf	            STA LASTFREED
.1a1202	e2 20		sep #$20	            SEP #$20
.1a1204	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1206	85 d1		sta $08d1	            STA LASTFREED+2
.1a1208	c2 20		rep #$20	            REP #$20
.1a120a	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a120d	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.1a120f	85 c9		sta $08c9	            STA CURRFREED
.1a1211	e2 20		sep #$20	            SEP #$20
.1a1213	c8		iny		            INY
.1a1214	c8		iny		            INY
.1a1215	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.1a1217	85 cb		sta $08cb	            STA CURRFREED+2
.1a1219	4c 5a 11	jmp $1a115a	            JMP loop                                    ; And try the next header
.1a121c					adj_last1
.1a121c	c2 20		rep #$20	            REP #$20
.1a121e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := CURRFREED->NEXT
.1a1221	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1223	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a1225	e2 20		sep #$20	            SEP #$20
.1a1227	c8		iny		            INY
.1a1228	c8		iny		            INY
.1a1229	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a122b	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a122d	4c 7d 12	jmp $1a127d	            JMP init_block              ; And get CURRFREED ready to return
.1a1230					has_room
.1a1230	c2 20		rep #$20	            REP #$20
.1a1232	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END            ; SCRATCH->END := CURRFREED->END
.1a1235	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1237	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1239	e2 20		sep #$20	            SEP #$20
.1a123b	c8		iny		            INY
.1a123c	c8		iny		            INY
.1a123d	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a123f	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1241	c2 20		rep #$20	            REP #$20
.1a1243	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; CURREND->NEXT := CURRFREED->NEXT
.1a1246	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1248	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a124a	e2 20		sep #$20	            SEP #$20
.1a124c	c8		iny		            INY
.1a124d	c8		iny		            INY
.1a124e	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1250	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1252	c2 20		rep #$20	            REP #$20
.1a1254	a5 cf		lda $08cf	            LDA LASTFREED               ; Is this the first object we've examined?
.1a1256	d0 14		bne $1a126c	            BNE adj_last2               ; No: we'll need to adjust the previously examined block
.1a1258	e2 20		sep #$20	            SEP #$20
.1a125a	a5 cf		lda $08cf	            LDA LASTFREED
.1a125c	d0 0e		bne $1a126c	            BNE adj_last2
.1a125e	c2 20		rep #$20	            REP #$20
.1a1260	a5 0c		lda $080c	            LDA SCRATCH
.1a1262	85 bd		sta $08bd	            STA FREED
.1a1264	e2 20		sep #$20	            SEP #$20
.1a1266	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1268	85 bf		sta $08bf	            STA FREED+2
.1a126a	80 11		bra $1a127d	            BRA init_block              ; ... and return the block we've sliced off
.1a126c					adj_last2
.1a126c	c2 20		rep #$20	            REP #$20
.1a126e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := SCRATCH
.1a1271	a5 0c		lda $080c	            LDA SCRATCH                 ; (point the previous freed block to the newly sliced
.1a1273	97 cf		sta [$08cf],y	            STA [LASTFREED],Y           ;  off part of the current block)
.1a1275	e2 20		sep #$20	            SEP #$20
.1a1277	c8		iny		            INY
.1a1278	c8		iny		            INY
.1a1279	a5 0e		lda $080e	            LDA SCRATCH+2
.1a127b	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a127d					init_block
.1a127d	c2 20		rep #$20	            REP #$20
.1a127f	a5 c9		lda $08c9	            LDA CURRFREED
.1a1281	85 c3		sta $08c3	            STA CURRHEADER
.1a1283	e2 20		sep #$20	            SEP #$20
.1a1285	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1287	85 c5		sta $08c5	            STA CURRHEADER+2
.1a1289	c2 20		rep #$20	            REP #$20
.1a128b	a5 c3		lda $08c3	            LDA CURRHEADER
.1a128d	85 b7		sta $08b7	            STA ALLOCATED
.1a128f	e2 20		sep #$20	            SEP #$20
.1a1291	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1293	85 b9		sta $08b9	            STA ALLOCATED+2
.1a1295	c2 20		rep #$20	            REP #$20
.1a1297	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; Set CURRHEADER->END to the byte after the block
.1a129a	a5 0c		lda $080c	            LDA SCRATCH
.1a129c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a129e	e2 20		sep #$20	            SEP #$20
.1a12a0	c8		iny		            INY
.1a12a1	c8		iny		            INY
.1a12a2	a5 0e		lda $080e	            LDA SCRATCH+2
.1a12a4	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12a6	c2 20		rep #$20	            REP #$20
.1a12a8	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Set CURRHEADER->NEXT to NULL
.1a12ab	a9 00 00	lda #$0000	            LDA #0
.1a12ae	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12b0	e2 20		sep #$20	            SEP #$20
.1a12b2	c8		iny		            INY
.1a12b3	c8		iny		            INY
.1a12b4	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12b6	e2 20		sep #$20	            SEP #$20
.1a12b8	a5 ea		lda $08ea	            LDA TOFINDTYPE          ; Get the type code back
.1a12ba	e2 20		sep #$20	            SEP #$20
.1a12bc	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE
.1a12bf	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12c1	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT      ; Set its reference count to 0
.1a12c4	a9 00		lda #$00	            LDA #0
.1a12c6	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12c8	2b		pld		done        PLD
.1a12c9	28		plp		            PLP
.1a12ca	38		sec		            SEC
.1a12cb	60		rts		            RTS
.1a12cc					HEAP_GETHED
.1a12cc	08		php		            PHP
.1a12cd	c2 20		rep #$20	            REP #$20
.1a12cf	38		sec		            SEC
.1a12d0	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a12d2	e9 08 00	sbc #$0008	            SBC #size(HEAPOBJ)
.1a12d5	85 c3		sta $08c3	            STA CURRHEADER
.1a12d7	e2 20		sep #$20	            SEP #$20
.1a12d9	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a12db	e9 00		sbc #$00	            SBC #0
.1a12dd	85 c5		sta $08c5	            STA CURRHEADER+2
.1a12df	28		plp		            PLP
.1a12e0	60		rts		            RTS
.1a12e1					HEAP_ADDREF
.1a12e1	08		php		            PHP
.1a12e2	e2 20		sep #$20	            SEP #$20
.1a12e4	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a12e6	f0 04		beq $1a12ec	            BEQ chk_null
.1a12e8	c9 18		cmp #$18	            CMP #`(HEAP_TOP + 1)
.1a12ea	b0 12		bcs $1a12fe	            BGE out_of_bnds
.1a12ec					chk_null
.1a12ec	c2 20		rep #$20	            REP #$20
.1a12ee	a5 c3		lda $08c3	            LDA CURRHEADER
.1a12f0	f0 0c		beq $1a12fe	            BEQ out_of_bnds
.1a12f2					is_ok
.1a12f2	e2 20		sep #$20	            SEP #$20
.1a12f4	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.1a12f7	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a12f9	1a		inc a		            INC A
.1a12fa	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12fc	28		plp		            PLP
.1a12fd	60		rts		            RTS
.1a12fe	00		brk #		out_of_bnds BRK
.1a12ff	ea		nop		            NOP
.1a1300					HEAP_REMREF
.1a1300	08		php		            PHP
.1a1301	e2 20		sep #$20	            SEP #$20
.1a1303	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1305	f0 04		beq $1a130b	            BEQ chk_null
.1a1307	c9 18		cmp #$18	            CMP #`(HEAP_TOP + 1)
.1a1309	b0 17		bcs $1a1322	            BGE out_of_bnds
.1a130b					chk_null
.1a130b	c2 20		rep #$20	            REP #$20
.1a130d	a5 c3		lda $08c3	            LDA CURRHEADER
.1a130f	f0 11		beq $1a1322	            BEQ out_of_bnds
.1a1311	e2 20		sep #$20	            SEP #$20
.1a1313	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT  ; Decrement the reference count
.1a1316	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1318	3a		dec a		            DEC A
.1a1319	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a131b	d0 03		bne $1a1320	            BNE done            ; If it's still >0, we are done
.1a131d	20 24 13	jsr $1a1324	            JSR HEAP_FREE
.1a1320	28		plp		done        PLP
.1a1321	60		rts		            RTS
.1a1322	00		brk #		out_of_bnds BRK
.1a1323	ea		nop		            NOP
.1a1324					HEAP_FREE
.1a1324	08		php		            PHP
.1a1325	c2 20		rep #$20	            REP #$20
.1a1327	a5 bd		lda $08bd	            LDA FREED           ; Check to see if blocks are already on the freed list
.1a1329	d0 21		bne $1a134c	            BNE has_objects
.1a132b	e2 20		sep #$20	            SEP #$20
.1a132d	a5 bf		lda $08bf	            LDA FREED+2
.1a132f	d0 1b		bne $1a134c	            BNE has_objects
.1a1331	a5 c5		lda $08c5	            LDA CURRHEADER+2    ; No: this block is the first one
.1a1333	85 bf		sta $08bf	            STA FREED+2         ; Just make it the freed list
.1a1335	c2 20		rep #$20	            REP #$20
.1a1337	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1339	85 bd		sta $08bd	            STA FREED
.1a133b	a9 00 00	lda #$0000	            LDA #0
.1a133e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT   ; And clear its next link
.1a1341	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1343	c8		iny		            INY
.1a1344	c8		iny		            INY
.1a1345	e2 20		sep #$20	            SEP #$20
.1a1347	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1349	4c 0b 14	jmp $1a140b	            JMP done
.1a134c					has_objects
.1a134c	e2 20		sep #$20	            SEP #$20
.1a134e	a5 bf		lda $08bf	            LDA FREED+2
.1a1350	c5 c5		cmp $08c5	            CMP CURRHEADER+2
.1a1352	90 28		bcc $1a137c	            BLT start_scan
.1a1354	c2 20		rep #$20	            REP #$20
.1a1356	a5 bd		lda $08bd	            LDA FREED
.1a1358	c5 c3		cmp $08c3	            CMP CURRHEADER
.1a135a	90 20		bcc $1a137c	            BLT start_scan
.1a135c					ins_first
.1a135c	c2 20		rep #$20	            REP #$20
.1a135e	a5 bd		lda $08bd	            LDA FREED               ; CURRHEADER->NEXT := FREED
.1a1360	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1363	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1365	e2 20		sep #$20	            SEP #$20
.1a1367	c8		iny		            INY
.1a1368	c8		iny		            INY
.1a1369	a5 bf		lda $08bf	            LDA FREED+2
.1a136b	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a136d	c2 20		rep #$20	            REP #$20
.1a136f	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1371	85 bd		sta $08bd	            STA FREED
.1a1373	e2 20		sep #$20	            SEP #$20
.1a1375	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1377	85 bf		sta $08bf	            STA FREED+2
.1a1379	4c 0b 14	jmp $1a140b	            JMP done
.1a137c					start_scan
.1a137c	c2 20		rep #$20	            REP #$20
.1a137e	a5 bd		lda $08bd	            LDA FREED
.1a1380	85 08		sta $0808	            STA INDEX
.1a1382	e2 20		sep #$20	            SEP #$20
.1a1384	a5 bf		lda $08bf	            LDA FREED+2
.1a1386	85 0a		sta $080a	            STA INDEX+2
.1a1388					loop
.1a1388	e2 20		sep #$20	            SEP #$20
.1a138a	a0 04 00	ldy #$0004	            LDY #HEAPOBJ.NEXT+2
.1a138d	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a138f	c5 c8		cmp $08c8	            CMP CURREND+2
.1a1391	90 32		bcc $1a13c5	            BLT go_next             ; No: check the next spot
.1a1393	d0 0b		bne $1a13a0	            BNE ins_next
.1a1395	c2 20		rep #$20	            REP #$20
.1a1397	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a139a	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a139c	c5 c6		cmp $08c6	            CMP CURREND
.1a139e	90 25		bcc $1a13c5	            BLT go_next             ; No: check the next spot
.1a13a0					ins_next
.1a13a0	c2 20		rep #$20	            REP #$20
.1a13a2	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := INDEX->NEXT
.1a13a5	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13a7	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a13a9	e2 20		sep #$20	            SEP #$20
.1a13ab	c8		iny		            INY
.1a13ac	c8		iny		            INY
.1a13ad	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13af	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a13b1	c2 20		rep #$20	            REP #$20
.1a13b3	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.1a13b5	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a13b8	97 08		sta [$0808],y	            STA [INDEX],Y
.1a13ba	e2 20		sep #$20	            SEP #$20
.1a13bc	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a13be	c8		iny		            INY
.1a13bf	c8		iny		            INY
.1a13c0	97 08		sta [$0808],y	            STA [INDEX],Y
.1a13c2	4c 0b 14	jmp $1a140b	            JMP done
.1a13c5					go_next
.1a13c5	c2 20		rep #$20	            REP #$20
.1a13c7	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Is INDEX->NEXT = 0
.1a13ca	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13cc	d0 08		bne $1a13d6	            BNE not_at_end          ; No: load up the next object
.1a13ce	e2 20		sep #$20	            SEP #$20
.1a13d0	c8		iny		            INY
.1a13d1	c8		iny		            INY
.1a13d2	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13d4	f0 19		beq $1a13ef	            BEQ at_end
.1a13d6					not_at_end
.1a13d6	c2 20		rep #$20	            REP #$20
.1a13d8	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; INDEX := INDEX->NEXT
.1a13db	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13dd	85 0c		sta $080c	            STA SCRATCH
.1a13df	e2 20		sep #$20	            SEP #$20
.1a13e1	c8		iny		            INY
.1a13e2	c8		iny		            INY
.1a13e3	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13e5	85 0a		sta $080a	            STA INDEX+2
.1a13e7	c2 20		rep #$20	            REP #$20
.1a13e9	a5 0c		lda $080c	            LDA SCRATCH
.1a13eb	85 08		sta $0808	            STA INDEX
.1a13ed	80 99		bra $1a1388	            BRA loop
.1a13ef					at_end
.1a13ef	c2 20		rep #$20	            REP #$20
.1a13f1	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.1a13f3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a13f6	97 08		sta [$0808],y	            STA [INDEX],Y
.1a13f8	e2 20		sep #$20	            SEP #$20
.1a13fa	c8		iny		            INY
.1a13fb	c8		iny		            INY
.1a13fc	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a13fe	97 08		sta [$0808],y	            STA [INDEX],Y
.1a1400	a9 00		lda #$00	            LDA #0                  ; CURRHEADER->NEXT := 0
.1a1402	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1404	c2 20		rep #$20	            REP #$20
.1a1406	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1409	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a140b					done
.1a140b	20 10 14	jsr $1a1410	            JSR COALLESCE
.1a140e	28		plp		            PLP
.1a140f	60		rts		            RTS
.1a1410					COALLESCE
.1a1410	08		php		            PHP
.1a1411	c2 20		rep #$20	            REP #$20
.1a1413	a5 bd		lda $08bd	            LDA FREED
.1a1415	85 c3		sta $08c3	            STA CURRHEADER
.1a1417	e2 20		sep #$20	            SEP #$20
.1a1419	a5 bf		lda $08bf	            LDA FREED+2
.1a141b	85 c5		sta $08c5	            STA CURRHEADER+2
.1a141d					next_head
.1a141d	c2 20		rep #$20	            REP #$20
.1a141f	a5 c3		lda $08c3	            LDA CURRHEADER          ; Is CURRHEADER == 0?
.1a1421	d0 09		bne $1a142c	            BNE check_next          ; No: check if NEXT is contiguous
.1a1423	e2 20		sep #$20	            SEP #$20
.1a1425	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1427	d0 03		bne $1a142c	            BNE check_next
.1a1429	4c b3 14	jmp $1a14b3	            JMP done                ; Yes: we're done
.1a142c					check_next
.1a142c	c2 20		rep #$20	            REP #$20
.1a142e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1431	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1433	85 0c		sta $080c	            STA SCRATCH
.1a1435	e2 20		sep #$20	            SEP #$20
.1a1437	c8		iny		            INY
.1a1438	c8		iny		            INY
.1a1439	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a143b	85 0e		sta $080e	            STA SCRATCH+2
.1a143d	c2 20		rep #$20	            REP #$20
.1a143f	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.1a1442	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1444	85 10		sta $0810	            STA SCRATCH2
.1a1446	e2 20		sep #$20	            SEP #$20
.1a1448	c8		iny		            INY
.1a1449	c8		iny		            INY
.1a144a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a144c	85 12		sta $0812	            STA SCRATCH2+2
.1a144e	c2 20		rep #$20	            REP #$20
.1a1450	a5 0c		lda $080c	            LDA SCRATCH
.1a1452	c5 10		cmp $0810	            CMP SCRATCH2            ; Is CURRHEADER->END = CURRHEADER->NEXT?
.1a1454	d0 08		bne $1a145e	            BNE go_next             ; No: go to the next block
.1a1456	e2 20		sep #$20	            SEP #$20
.1a1458	a5 0e		lda $080e	            LDA SCRATCH+2
.1a145a	c5 12		cmp $0812	            CMP SCRATCH2+2
.1a145c	f0 1f		beq $1a147d	            BEQ combine             ; Yes: combine the two blocks
.1a145e					go_next
.1a145e	c2 20		rep #$20	            REP #$20
.1a1460	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1463	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1465	85 0c		sta $080c	            STA SCRATCH
.1a1467	e2 20		sep #$20	            SEP #$20
.1a1469	c8		iny		            INY
.1a146a	c8		iny		            INY
.1a146b	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a146d	85 0e		sta $080e	            STA SCRATCH+2
.1a146f	c2 20		rep #$20	            REP #$20
.1a1471	a5 0c		lda $080c	            LDA SCRATCH
.1a1473	85 c3		sta $08c3	            STA CURRHEADER
.1a1475	e2 20		sep #$20	            SEP #$20
.1a1477	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1479	85 c5		sta $08c5	            STA CURRHEADER+2
.1a147b	80 a0		bra $1a141d	            BRA next_head                               ; And loop back to next_head
.1a147d					combine
.1a147d	c2 20		rep #$20	            REP #$20
.1a147f	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1482	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1484	85 0c		sta $080c	            STA SCRATCH
.1a1486	e2 20		sep #$20	            SEP #$20
.1a1488	c8		iny		            INY
.1a1489	c8		iny		            INY
.1a148a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a148c	85 0e		sta $080e	            STA SCRATCH+2
.1a148e	c2 20		rep #$20	            REP #$20
.1a1490	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := SCRATCH->NEXT
.1a1493	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a1495	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1497	e2 20		sep #$20	            SEP #$20
.1a1499	c8		iny		            INY
.1a149a	c8		iny		            INY
.1a149b	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a149d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a149f	c2 20		rep #$20	            REP #$20
.1a14a1	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END       ; CURRHEADER->END := SCRATCH->END
.1a14a4	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a14a6	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a14a8	e2 20		sep #$20	            SEP #$20
.1a14aa	c8		iny		            INY
.1a14ab	c8		iny		            INY
.1a14ac	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a14ae	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a14b0	4c 2c 14	jmp $1a142c	            JMP check_next          ; And loop back to check_next
.1a14b3	28		plp		done        PLP
.1a14b4	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\strings.s

.1a14b5					CLRTMPSTR
.1a14b5	08		php		            PHP
.1a14b6	c2 20		rep #$20	            REP #$20
.1a14b8	64 16		stz $0816	            STZ STRPTR
.1a14ba	64 18		stz $0818	            STZ STRPTR+2
.1a14bc	28		plp		            PLP
.1a14bd	60		rts		            RTS
.1a14be					TEMPSTRING
.1a14be	08		php		            PHP
.1a14bf	c2 30		rep #$30	            REP #$30
.1a14c1	a5 16		lda $0816	            LDA STRPTR          ; Is STRPTR == 0?
.1a14c3	d0 16		bne $1a14db	            BNE add_256         ; No: add 256 to it
.1a14c5	a5 18		lda $0818	            LDA STRPTR+2
.1a14c7	d0 12		bne $1a14db	            BNE add_256
.1a14c9	e2 20		sep #$20	            SEP #$20
.1a14cb	64 16		stz $0816	            STZ STRPTR
.1a14cd	a5 e2		lda $08e2	            LDA NEXTVAR+1
.1a14cf	1a		inc a		            INC A
.1a14d0	1a		inc a		            INC A
.1a14d1	85 17		sta $0817	            STA STRPTR+1
.1a14d3	a5 e3		lda $08e3	            LDA NEXTVAR+2
.1a14d5	85 18		sta $0818	            STA STRPTR+2
.1a14d7	64 19		stz $0819	            STZ STRPTR+3
.1a14d9	80 07		bra $1a14e2	            BRA chk_room
.1a14db					add_256
.1a14db	c2 20		rep #$20	            REP #$20
.1a14dd	a5 17		lda $0817	            LDA STRPTR+1        ; There was already a temporary string...
.1a14df	1a		inc a		            INC A               ; Leave 256 bytes for it
.1a14e0	85 17		sta $0817	            STA STRPTR+1
.1a14e2					chk_room
.1a14e2	c2 20		rep #$20	            REP #$20
.1a14e4	a5 bb		lda $08bb	            LDA HEAP+1          ; Check to make sure that STRPTR and HEAP haven't touched
.1a14e6	3a		dec a		            DEC A
.1a14e7	c5 17		cmp $0817	            CMP STRPTR+1
.1a14e9	f0 02		beq $1a14ed	            BEQ no_room         ; If they have, throw an error
.1a14eb	b0 1f		bcs $1a150c	            BGE done
.1a14ed					no_room
.1a14ed	08		php		            PHP
.1a14ee	c2 20		rep #$20	            REP #$20
.1a14f0	48		pha		            PHA
.1a14f1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a14f4	5b		tcd		            TCD
.1a14f5	68		pla		            PLA
.1a14f6	28		plp		            PLP
.1a14f7	e2 20		sep #$20	            SEP #$20
.1a14f9	a9 03		lda #$03	            LDA #ERR_MEMORY
.1a14fb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a14ff	c2 20		rep #$20	            REP #$20
.1a1501	29 ff 00	and #$00ff	            AND #$00FF
.1a1504	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a1507	e2 20		sep #$20	            SEP #$20
.1a1509	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a150c	28		plp		done        PLP
.1a150d	60		rts		            RTS
.1a150e					ITOS_DIGIT
.1a150e	c9 00		cmp #$00	            CMP #0          ; Is it 0?
.1a1510	d0 05		bne $1a1517	            BNE add_digit   ; No: go ahead and add it
.1a1512	c0 01 00	cpy #$0001	            CPY #1          ; Are we on the first digit?
.1a1515	f0 05		beq $1a151c	            BEQ done        ; Yes: ignore this leading 0
.1a1517	09 30		ora #$30	add_digit   ORA #$30        ; Convert it to ASCII
.1a1519	97 16		sta [$0816],y	            STA [STRPTR],Y  ; Save it to the string
.1a151b	c8		iny		            INY             ; And point to the next location
.1a151c					done
.1a151c	60		rts		            RTS
.1a151d					ITOS
.1a151d	08		php		            PHP
.1a151e	c2 30		rep #$30	            REP #$30
.1a1520	64 0c		stz $080c	            STZ SCRATCH         ; Use scratch to store if negative
.1a1522	a5 25		lda $0825	            LDA ARGUMENT1+2     ; Check to see if the number is negative
.1a1524	10 1a		bpl $1a1540	            BPL start_cnvt
.1a1526	18		clc		            CLC                 ; Yes: make ARGUMENT1 positive
.1a1527	a5 23		lda $0823	            LDA ARGUMENT1
.1a1529	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a152c	69 01 00	adc #$0001	            ADC #1
.1a152f	85 23		sta $0823	            STA ARGUMENT1
.1a1531	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1533	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a1536	69 00 00	adc #$0000	            ADC #0
.1a1539	85 25		sta $0825	            STA ARGUMENT1+2
.1a153b	a9 ff ff	lda #$ffff	            LDA #$FFFF          ; Record that the number was negative
.1a153e	85 0c		sta $080c	            STA SCRATCH
.1a1540					start_cnvt
.1a1540	64 10		stz $0810	            STZ SCRATCH2        ; SCRATCH2 will be our BCD version of the number
.1a1542	64 12		stz $0812	            STZ SCRATCH2+2
.1a1544	64 14		stz $0814	            STZ SCRATCH2+4
.1a1546	a2 1f 00	ldx #$001f	            LDX #31
.1a1549	f8		sed		            SED                 ; Yes, we're really using BCD mode
.1a154a	06 23		asl $0823	shift_loop  ASL ARGUMENT1       ; Shift ARGUMENT1 left one bit
.1a154c	26 25		rol $0825	            ROL ARGUMENT1+2
.1a154e	a5 10		lda $0810	            LDA SCRATCH2        ; SCRATCH2 := SCRATCH2 + SCRATCH2 + Carry
.1a1550	65 10		adc $0810	            ADC SCRATCH2
.1a1552	85 10		sta $0810	            STA SCRATCH2
.1a1554	a5 12		lda $0812	            LDA SCRATCH2+2
.1a1556	65 12		adc $0812	            ADC SCRATCH2+2
.1a1558	85 12		sta $0812	            STA SCRATCH2+2
.1a155a	a5 14		lda $0814	            LDA SCRATCH2+4
.1a155c	65 14		adc $0814	            ADC SCRATCH2+4
.1a155e	85 14		sta $0814	            STA SCRATCH2+4
.1a1560	ca		dex		            DEX
.1a1561	10 e7		bpl $1a154a	            BPL shift_loop      ; Loop through all 32 bits of ARGUMENT1
.1a1563	d8		cld		            CLD                 ; Switch back out of BCD mode
.1a1564	e2 20		sep #$20	            SEP #$20
.1a1566	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a1569	a0 00 00	ldy #$0000	            LDY #0              ; Y will be index into the temporary string
.1a156c	a5 0c		lda $080c	            LDA SCRATCH         ; Check to see if the number was negative
.1a156e	f0 04		beq $1a1574	            BEQ is_pos          ; No: write a leading space
.1a1570	a9 2d		lda #$2d	            LDA #'-'            ; If negative, write the minus sign
.1a1572	80 02		bra $1a1576	            BRA wr_lead
.1a1574	a9 20		lda #$20	is_pos      LDA #CHAR_SP        ; Write a leading space
.1a1576	97 16		sta [$0816],y	wr_lead     STA [STRPTR],Y
.1a1578	c8		iny		            INY
.1a1579	a2 05 00	ldx #$0005	            LDX #5
.1a157c	b5 10		lda $0810,x	ascii_loop  LDA SCRATCH2,X
.1a157e	29 f0		and #$f0	            AND #$F0
.1a1580	4a		lsr a		            LSR A
.1a1581	4a		lsr a		            LSR A
.1a1582	4a		lsr a		            LSR A
.1a1583	4a		lsr a		            LSR A
.1a1584	20 0e 15	jsr $1a150e	            JSR ITOS_DIGIT
.1a1587	b5 10		lda $0810,x	            LDA SCRATCH2,X
.1a1589	29 0f		and #$0f	            AND #$0F
.1a158b	20 0e 15	jsr $1a150e	            JSR ITOS_DIGIT
.1a158e	ca		dex		            DEX
.1a158f	10 eb		bpl $1a157c	            BPL ascii_loop
.1a1591	c0 01 00	cpy #$0001	            CPY #1              ; Did we write anything?
.1a1594	d0 0c		bne $1a15a2	            BNE null_term       ; Yes: add a NULL to terminate
.1a1596	a9 20		lda #$20	            LDA #' '            ; No: write a " 0" to the string
.1a1598	87 16		sta [$0816]	            STA [STRPTR]
.1a159a	a0 01 00	ldy #$0001	            LDY #1
.1a159d	a9 30		lda #$30	            LDA #'0'
.1a159f	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a15a1	c8		iny		            INY
.1a15a2	a9 00		lda #$00	null_term   LDA #0
.1a15a4	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And terminate the string
.1a15a6	28		plp		done        PLP
.1a15a7	60		rts		            RTS
.1a15a8	00		brk #		fault       BRK
.1a15a9	ea		nop		            NOP
.1a15aa					STRLEN
.1a15aa	08		php		            PHP
.1a15ab	e2 20		sep #$20	            SEP #$20
.1a15ad	c2 10		rep #$10	            REP #$10
.1a15af	a0 00 00	ldy #$0000	            LDY #0
.1a15b2	bd 00 00	lda $1a0000,x	loop        LDA #0,B,X
.1a15b5	f0 04		beq $1a15bb	            BEQ done
.1a15b7	e8		inx		            INX
.1a15b8	c8		iny		            INY
.1a15b9	80 f7		bra $1a15b2	            BRA loop
.1a15bb	28		plp		done        PLP
.1a15bc	60		rts		            RTS
.1a15bd					STRCMP
.1a15bd	08		php		            PHP
.1a15be	0b		phd		            PHD
.1a15bf	08		php		            PHP
.1a15c0	c2 20		rep #$20	            REP #$20
.1a15c2	48		pha		            PHA
.1a15c3	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a15c6	5b		tcd		            TCD
.1a15c7	68		pla		            PLA
.1a15c8	28		plp		            PLP
.1a15c9	e2 20		sep #$20	            SEP #$20
.1a15cb	c2 10		rep #$10	            REP #$10
.1a15cd	a0 00 00	ldy #$0000	            LDY #0
.1a15d0	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Check if the character 1 is 0
.1a15d2	d0 04		bne $1a15d8	            BNE comp_mag            ; If not, check the magnitudes
.1a15d4	b7 29		lda [$0829],y	            LDA [ARGUMENT2],Y       ; If so, check if the character 2 is 0
.1a15d6	f0 25		beq $1a15fd	            BEQ are_equal           ; If so, the strings are equal
.1a15d8	b7 23		lda [$0823],y	comp_mag    LDA [ARGUMENT1],Y       ; Otherwise, get character 1 again
.1a15da	d7 29		cmp [$0829],y	            CMP [ARGUMENT2],Y       ; And compare it to character 2
.1a15dc	90 12		bcc $1a15f0	            BLT is_less             ; Check if character 1 < character 2
.1a15de	d0 03		bne $1a15e3	            BNE is_greater          ; Check if character 1 > character 2
.1a15e0	c8		iny		            INY                     ; Equal so far... so go to the next pair of characters
.1a15e1	80 ed		bra $1a15d0	            BRA loop
.1a15e3					is_greater
.1a15e3	c2 20		rep #$20	            REP #$20
.1a15e5	a9 01 00	lda #$0001	            LDA #1                  ; So return 1
.1a15e8	85 23		sta $0823	            STA ARGUMENT1
.1a15ea	e2 20		sep #$20	            SEP #$20
.1a15ec	64 25		stz $0825	            STZ ARGUMENT1+2
.1a15ee	80 15		bra $1a1605	            BRA done
.1a15f0					is_less
.1a15f0	c2 20		rep #$20	            REP #$20
.1a15f2	a9 ff ff	lda #$ffff	            LDA #$FFFF              ; So return -1
.1a15f5	85 23		sta $0823	            STA ARGUMENT1
.1a15f7	e2 20		sep #$20	            SEP #$20
.1a15f9	85 25		sta $0825	            STA ARGUMENT1+2
.1a15fb	80 08		bra $1a1605	            BRA done
.1a15fd					are_equal
.1a15fd	c2 20		rep #$20	            REP #$20
.1a15ff	64 23		stz $0823	            STZ ARGUMENT1           ; So return 0
.1a1601	e2 20		sep #$20	            SEP #$20
.1a1603	64 25		stz $0825	            STZ ARGUMENT1+2
.1a1605					done
.1a1605	e2 20		sep #$20	            SEP #$20
.1a1607	a9 00		lda #$00	            LDA #TYPE_INTEGER
.1a1609	85 27		sta $0827	            STA ARGTYPE1
.1a160b	2b		pld		            PLD
.1a160c	28		plp		            PLP
.1a160d	60		rts		            RTS
.1a160e					STRCONCAT
.1a160e	08		php		            PHP
.1a160f	0b		phd		            PHD
.1a1610	8b		phb		            PHB
.1a1611	08		php		            PHP
.1a1612	c2 20		rep #$20	            REP #$20
.1a1614	48		pha		            PHA
.1a1615	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1618	5b		tcd		            TCD
.1a1619	68		pla		            PLA
.1a161a	28		plp		            PLP
.1a161b	e2 20		sep #$20	            SEP #$20
.1a161d	c2 10		rep #$10	            REP #$10
.1a161f	08		php		            PHP
.1a1620	c2 20		rep #$20	            REP #$20
.1a1622	48		pha		            PHA
.1a1623	e2 20		sep #$20	            SEP #$20
.1a1625	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1627	48		pha		            PHA
.1a1628	ab		plb		            PLB
.1a1629	c2 20		rep #$20	            REP #$20
.1a162b	68		pla		            PLA
.1a162c	28		plp		            PLP
.1a162d	a6 23		ldx $0823	            LDX ARGUMENT1
.1a162f	20 aa 15	jsr $1a15aa	            JSR STRLEN
.1a1632	84 0c		sty $080c	            STY SCRATCH
.1a1634	08		php		            PHP
.1a1635	c2 20		rep #$20	            REP #$20
.1a1637	48		pha		            PHA
.1a1638	e2 20		sep #$20	            SEP #$20
.1a163a	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a163c	48		pha		            PHA
.1a163d	ab		plb		            PLB
.1a163e	c2 20		rep #$20	            REP #$20
.1a1640	68		pla		            PLA
.1a1641	28		plp		            PLP
.1a1642	a6 29		ldx $0829	            LDX ARGUMENT2
.1a1644	20 aa 15	jsr $1a15aa	            JSR STRLEN
.1a1647	c2 20		rep #$20	            REP #$20
.1a1649	98		tya		            TYA
.1a164a	38		sec		            SEC                     ; X := LEN(ARGUMENT1) + LEN(ARGUMENT2) + 1
.1a164b	65 0c		adc $080c	            ADC SCRATCH
.1a164d	aa		tax		            TAX
.1a164e	e2 20		sep #$20	            SEP #$20
.1a1650	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set type to STRING
.1a1652	20 90 10	jsr $1a1090	            JSR ALLOC
.1a1655	c2 20		rep #$20	            REP #$20
.1a1657	a5 b7		lda $08b7	            LDA ALLOCATED           ; INDEX := pointer to the string
.1a1659	85 08		sta $0808	            STA INDEX
.1a165b	e2 20		sep #$20	            SEP #$20
.1a165d	a5 b9		lda $08b9	            LDA ALLOCATED+2
.1a165f	85 0a		sta $080a	            STA INDEX+2
.1a1661	a0 00 00	ldy #$0000	            LDY #0                  ; Set the target index to the beginning
.1a1664	08		php		            PHP
.1a1665	c2 20		rep #$20	            REP #$20
.1a1667	48		pha		            PHA
.1a1668	e2 20		sep #$20	            SEP #$20
.1a166a	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a166c	48		pha		            PHA
.1a166d	ab		plb		            PLB
.1a166e	c2 20		rep #$20	            REP #$20
.1a1670	68		pla		            PLA
.1a1671	28		plp		            PLP
.1a1672	a6 23		ldx $0823	            LDX ARGUMENT1
.1a1674	bd 00 00	lda $1a0000,x	loop1       LDA #0,B,X              ; Get the Xth byte of ARGUMENT1
.1a1677	f0 06		beq $1a167f	            BEQ copy_2              ; Is it null? Yes: move on to the next string
.1a1679	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.1a167b	e8		inx		            INX                     ; Point to the next characters
.1a167c	c8		iny		            INY
.1a167d	80 f5		bra $1a1674	            BRA loop1               ; And do again
.1a167f					copy_2
.1a167f	e2 20		sep #$20	            SEP #$20
.1a1681	08		php		            PHP
.1a1682	c2 20		rep #$20	            REP #$20
.1a1684	48		pha		            PHA
.1a1685	e2 20		sep #$20	            SEP #$20
.1a1687	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a1689	48		pha		            PHA
.1a168a	ab		plb		            PLB
.1a168b	c2 20		rep #$20	            REP #$20
.1a168d	68		pla		            PLA
.1a168e	28		plp		            PLP
.1a168f	a6 29		ldx $0829	            LDX ARGUMENT2
.1a1691	bd 00 00	lda $1a0000,x	loop2       LDA #0,B,X              ; Get the Xth byte of ARGUMENT2
.1a1694	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.1a1696	f0 04		beq $1a169c	            BEQ terminate           ; Is it null? Yes: move on to the next string
.1a1698	e8		inx		            INX                     ; Point to the next characters
.1a1699	c8		iny		            INY
.1a169a	80 f5		bra $1a1691	            BRA loop2               ; And do again
.1a169c					terminate
.1a169c	c2 20		rep #$20	            REP #$20
.1a169e	a5 08		lda $0808	            LDA INDEX               ; Set ARGUMENT1 to the new string
.1a16a0	85 23		sta $0823	            STA ARGUMENT1
.1a16a2	e2 20		sep #$20	            SEP #$20
.1a16a4	a5 0a		lda $080a	            LDA INDEX+2
.1a16a6	85 25		sta $0825	            STA ARGUMENT1+2
.1a16a8	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set ARGUMENT1's type to STRING
.1a16aa	85 27		sta $0827	            STA ARGTYPE1
.1a16ac	ab		plb		            PLB
.1a16ad	2b		pld		            PLD
.1a16ae	28		plp		            PLP
.1a16af	60		rts		            RTS
.1a16b0					STRCPY
.1a16b0	da		phx		            PHX
.1a16b1	5a		phy		            PHY
.1a16b2	08		php		            PHP
.1a16b3	0b		phd		            PHD
.1a16b4	8b		phb		            PHB
.1a16b5	08		php		            PHP
.1a16b6	c2 20		rep #$20	            REP #$20
.1a16b8	48		pha		            PHA
.1a16b9	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a16bc	5b		tcd		            TCD
.1a16bd	68		pla		            PLA
.1a16be	28		plp		            PLP
.1a16bf	c2 20		rep #$20	            REP #$20
.1a16c1	a5 0a		lda $080a	            LDA INDEX+2
.1a16c3	48		pha		            PHA
.1a16c4	a5 08		lda $0808	            LDA INDEX
.1a16c6	48		pha		            PHA
.1a16c7	c2 30		rep #$30	            REP #$30
.1a16c9	08		php		            PHP
.1a16ca	c2 20		rep #$20	            REP #$20
.1a16cc	48		pha		            PHA
.1a16cd	e2 20		sep #$20	            SEP #$20
.1a16cf	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a16d1	48		pha		            PHA
.1a16d2	ab		plb		            PLB
.1a16d3	c2 20		rep #$20	            REP #$20
.1a16d5	68		pla		            PLA
.1a16d6	28		plp		            PLP
.1a16d7	a6 23		ldx $0823	            LDX ARGUMENT1
.1a16d9	20 aa 15	jsr $1a15aa	            JSR STRLEN
.1a16dc	98		tya		            TYA
.1a16dd	aa		tax		            TAX
.1a16de	e8		inx		            INX                     ; Put length of string (plus NUL) in X
.1a16df	e2 20		sep #$20	            SEP #$20
.1a16e1	a9 02		lda #$02	            LDA #TYPE_STRING
.1a16e3	20 90 10	jsr $1a1090	            JSR ALLOC
.1a16e6	c2 20		rep #$20	            REP #$20
.1a16e8	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a16ea	85 08		sta $0808	            STA INDEX
.1a16ec	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a16ee	85 0a		sta $080a	            STA INDEX+2
.1a16f0	a0 00 00	ldy #$0000	            LDY #0
.1a16f3	e2 20		sep #$20	            SEP #$20
.1a16f5	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Copy the data to the allocated string
.1a16f7	97 08		sta [$0808],y	            STA [INDEX],Y
.1a16f9	f0 03		beq $1a16fe	            BEQ ret_copy
.1a16fb	c8		iny		            INY
.1a16fc	80 f7		bra $1a16f5	            BRA loop
.1a16fe					ret_copy
.1a16fe	c2 20		rep #$20	            REP #$20
.1a1700	a5 08		lda $0808	            LDA INDEX
.1a1702	85 23		sta $0823	            STA ARGUMENT1
.1a1704	a5 0a		lda $080a	            LDA INDEX+2
.1a1706	85 25		sta $0825	            STA ARGUMENT1+2
.1a1708	c2 20		rep #$20	            REP #$20
.1a170a	68		pla		            PLA
.1a170b	85 08		sta $0808	            STA INDEX
.1a170d	68		pla		            PLA
.1a170e	85 0a		sta $080a	            STA INDEX+2
.1a1710	ab		plb		            PLB
.1a1711	2b		pld		            PLD
.1a1712	28		plp		            PLP
.1a1713	7a		ply		            PLY
.1a1714	fa		plx		            PLX
.1a1715	60		rts		            RTS
.1a1716					STRSUBSTR
.1a1716	08		php		            PHP
.1a1717	e2 20		sep #$20	            SEP #$20
.1a1719	c2 10		rep #$10	            REP #$10
.1a171b	a0 00 00	ldy #$0000	            LDY #0
.1a171e	b7 23		lda [$0823],y	count_loop  LDA [ARGUMENT1],Y
.1a1720	f0 05		beq $1a1727	            BEQ counted
.1a1722	c8		iny		            INY
.1a1723	80 f9		bra $1a171e	            BRA count_loop
.1a1725	84 92		sty $0892	            STY MTEMP               ; MTEMP := length of the source string
.1a1727					counted
.1a1727	c2 30		rep #$30	            REP #$30
.1a1729	c4 29		cpy $0829	            CPY ARGUMENT2           ; length of string <= index?
.1a172b	90 13		bcc $1a1740	            BLT ret_empty           ; Yes: return empty string
.1a172d	f0 11		beq $1a1740	            BEQ ret_empty
.1a172f	a5 8f		lda $088f	            LDA MCOUNT              ; Is the desired count <= 0?
.1a1731	30 0d		bmi $1a1740	            BMI ret_empty
.1a1733	f0 0b		beq $1a1740	            BEQ ret_empty           ; Yes: return the empty string
.1a1735	c4 8f		cpy $088f	            CPY MCOUNT              ; Is the desired length < the length of the source?
.1a1737	b0 12		bcs $1a174b	            BGE do_slice            ; Yes: go ahead and get the substring
.1a1739	a5 29		lda $0829	            LDA ARGUMENT2           ; Is INDEX == 0?
.1a173b	d0 0e		bne $1a174b	            BNE do_slice            ; No: do a slice
.1a173d	4c 94 17	jmp $1a1794	            JMP done                ; Yes: just return the source string
.1a1740					ret_empty
.1a1740	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a1743	e2 20		sep #$20	            SEP #$20
.1a1745	a9 00		lda #$00	            LDA #0
.1a1747	87 16		sta [$0816]	            STA [STRPTR]
.1a1749	80 39		bra $1a1784	            BRA finish_copy
.1a174b					do_slice
.1a174b	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a174e	c2 30		rep #$30	            REP #$30
.1a1750	18		clc		            CLC                     ; ARGUMENT1 := ARGUMENT1 + index
.1a1751	a5 23		lda $0823	            LDA ARGUMENT1
.1a1753	65 29		adc $0829	            ADC ARGUMENT2
.1a1755	85 23		sta $0823	            STA ARGUMENT1
.1a1757	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1759	69 00 00	adc #$0000	            ADC #0
.1a175c	85 25		sta $0825	            STA ARGUMENT1+2
.1a175e	a0 00 00	ldy #$0000	            LDY #0
.1a1761					copy_loop
.1a1761	e2 20		sep #$20	            SEP #$20
.1a1763	a7 23		lda [$0823]	            LDA [ARGUMENT1]         ; Copy a character from the substring to the temporary string
.1a1765	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1767	f0 1b		beq $1a1784	            BEQ finish_copy         ; If it is a NULL, we're done
.1a1769	c2 20		rep #$20	            REP #$20
.1a176b	18		clc		            CLC                     ; Move to the next character
.1a176c	a5 23		lda $0823	            LDA ARGUMENT1
.1a176e	69 01 00	adc #$0001	            ADC #1
.1a1771	85 23		sta $0823	            STA ARGUMENT1
.1a1773	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1775	69 00 00	adc #$0000	            ADC #0
.1a1778	85 25		sta $0825	            STA ARGUMENT1+2
.1a177a	c8		iny		            INY
.1a177b	c4 8f		cpy $088f	            CPY MCOUNT              ; Have we reached the limit to copy?
.1a177d	d0 e2		bne $1a1761	            BNE copy_loop           ; No: copy the next byte
.1a177f	a9 00 00	lda #$0000	            LDA #0                  ; Null terminate string
.1a1782	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1784					finish_copy
.1a1784	c2 20		rep #$20	            REP #$20
.1a1786	a5 16		lda $0816	            LDA STRPTR
.1a1788	85 23		sta $0823	            STA ARGUMENT1
.1a178a	a5 18		lda $0818	            LDA STRPTR+2
.1a178c	85 25		sta $0825	            STA ARGUMENT1+2
.1a178e	e2 20		sep #$20	            SEP #$20
.1a1790	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a1792	85 27		sta $0827	            STA ARGTYPE1
.1a1794					done
.1a1794	28		plp		            PLP
.1a1795	60		rts		            RTS
.1a1796					OP_STR_LT
.1a1796	08		php		            PHP
.1a1797	c2 30		rep #$30	            REP #$30
.1a1799	20 bd 15	jsr $1a15bd	            JSR STRCMP
.1a179c	a5 23		lda $0823	            LDA ARGUMENT1
.1a179e	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.1a17a1	d0 05		bne $1a17a8	            BNE ret_false               ; No: return false
.1a17a3					ret_true
.1a17a3	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a17a6	80 03		bra $1a17ab	            BRA done
.1a17a8					ret_false
.1a17a8	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a17ab	28		plp		done        PLP
.1a17ac	60		rts		            RTS
.1a17ad					OP_STR_GT
.1a17ad	08		php		            PHP
.1a17ae	c2 30		rep #$30	            REP #$30
.1a17b0	20 bd 15	jsr $1a15bd	            JSR STRCMP
.1a17b3	a5 23		lda $0823	            LDA ARGUMENT1
.1a17b5	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.1a17b8	d0 05		bne $1a17bf	            BNE ret_false               ; No: return false
.1a17ba					ret_true
.1a17ba	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a17bd	80 03		bra $1a17c2	            BRA done
.1a17bf					ret_false
.1a17bf	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a17c2	28		plp		done        PLP
.1a17c3	60		rts		            RTS
.1a17c4					OP_STR_EQ
.1a17c4	08		php		            PHP
.1a17c5	c2 30		rep #$30	            REP #$30
.1a17c7	20 bd 15	jsr $1a15bd	            JSR STRCMP
.1a17ca	a5 23		lda $0823	            LDA ARGUMENT1
.1a17cc	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.1a17cf	d0 05		bne $1a17d6	            BNE ret_false               ; No: return false
.1a17d1					ret_true
.1a17d1	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a17d4	80 03		bra $1a17d9	            BRA done
.1a17d6					ret_false
.1a17d6	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a17d9	28		plp		done        PLP
.1a17da	60		rts		            RTS
.1a17db					OP_STR_NE
.1a17db	08		php		            PHP
.1a17dc	c2 30		rep #$30	            REP #$30
.1a17de	20 bd 15	jsr $1a15bd	            JSR STRCMP
.1a17e1	a5 23		lda $0823	            LDA ARGUMENT1
.1a17e3	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.1a17e6	f0 05		beq $1a17ed	            BEQ ret_false               ; Yes: return false
.1a17e8					ret_true
.1a17e8	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a17eb	80 03		bra $1a17f0	            BRA done
.1a17ed					ret_false
.1a17ed	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a17f0	28		plp		done        PLP
.1a17f1	60		rts		            RTS
.1a17f2					OP_STR_GTE
.1a17f2	08		php		            PHP
.1a17f3	c2 30		rep #$30	            REP #$30
.1a17f5	20 bd 15	jsr $1a15bd	            JSR STRCMP
.1a17f8	a5 23		lda $0823	            LDA ARGUMENT1
.1a17fa	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.1a17fd	f0 05		beq $1a1804	            BEQ ret_false               ; Yes: return false
.1a17ff					ret_true
.1a17ff	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a1802	80 03		bra $1a1807	            BRA done
.1a1804					ret_false
.1a1804	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a1807	28		plp		done        PLP
.1a1808	60		rts		            RTS
.1a1809					OP_STR_LTE
.1a1809	08		php		            PHP
.1a180a	c2 30		rep #$30	            REP #$30
.1a180c	20 bd 15	jsr $1a15bd	            JSR STRCMP
.1a180f	a5 23		lda $0823	            LDA ARGUMENT1
.1a1811	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.1a1814	f0 05		beq $1a181b	            BEQ ret_false               ; Yes: return false
.1a1816					ret_true
.1a1816	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a1819	80 03		bra $1a181e	            BRA done
.1a181b					ret_false
.1a181b	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a181e	28		plp		done        PLP
.1a181f	60		rts		            RTS
.1a1820					STR_NORMAL
.1a1820	08		php		            PHP
.1a1821	e2 20		sep #$20	            SEP #$20
.1a1823	a5 27		lda $0827	            LDA ARGTYPE1            ; Is it a string?
.1a1825	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a1827	d0 1d		bne $1a1846	            BNE done                ; No: return it
.1a1829	a5 23		lda $0823	            LDA ARGUMENT1           ; Is it a null pointer?
.1a182b	d0 19		bne $1a1846	            BNE done
.1a182d	a5 24		lda $0824	            LDA ARGUMENT1+1
.1a182f	d0 15		bne $1a1846	            BNE done
.1a1831	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1833	d0 11		bne $1a1846	            BNE done                ; No: return it
.1a1835	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a1838	a9 00		lda #$00	            LDA #0
.1a183a	87 16		sta [$0816]	            STA [STRPTR]            ; Make it empty
.1a183c	c2 20		rep #$20	            REP #$20
.1a183e	a5 16		lda $0816	            LDA STRPTR
.1a1840	85 23		sta $0823	            STA ARGUMENT1
.1a1842	a5 18		lda $0818	            LDA STRPTR+2
.1a1844	85 25		sta $0825	            STA ARGUMENT1+2
.1a1846	28		plp		done        PLP
.1a1847	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\listing.s

.1a1848					LISTPROG
.1a1848	48		pha		            PHA
.1a1849	5a		phy		            PHY
.1a184a	0b		phd		            PHD
.1a184b	08		php		            PHP
.1a184c	08		php		            PHP
.1a184d	c2 20		rep #$20	            REP #$20
.1a184f	48		pha		            PHA
.1a1850	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1853	5b		tcd		            TCD
.1a1854	68		pla		            PLA
.1a1855	28		plp		            PLP
.1a1856	c2 30		rep #$30	            REP #$30
.1a1858	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a185b	85 00		sta $0800	            STA BIP
.1a185d	85 1a		sta $081a	            STA CURLINE
.1a185f	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a1862	85 02		sta $0802	            STA BIP+2
.1a1864	85 1c		sta $081c	            STA CURLINE+2
.1a1866	22 3c 11 00	jsl $00113c	list_loop   JSL FK_TESTBREAK
.1a186a	b0 20		bcs $1a188c	            BCS throw_break     ; If C: user pressed an interrupt key, stop the listing
.1a186c	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.1a186f	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.1a1871	f0 0f		beq $1a1882	            BEQ done
.1a1873	c5 55		cmp $0855	            CMP MARG1
.1a1875	90 10		bcc $1a1887	            BLT skip_line
.1a1877	c5 59		cmp $0859	            CMP MARG2
.1a1879	f0 02		beq $1a187d	            BEQ print_line
.1a187b	b0 05		bcs $1a1882	            BGE done
.1a187d					print_line
.1a187d	20 ab 18	jsr $1a18ab	            JSR LISTLINE
.1a1880	80 e4		bra $1a1866	            BRA list_loop
.1a1882	28		plp		done        PLP
.1a1883	2b		pld		            PLD
.1a1884	7a		ply		            PLY
.1a1885	68		pla		            PLA
.1a1886	60		rts		            RTS
.1a1887					skip_line
.1a1887	20 b7 21	jsr $1a21b7	            JSR NEXTLINE
.1a188a	80 da		bra $1a1866	            BRA list_loop           ; And try again
.1a188c					throw_break
.1a188c	08		php		            PHP
.1a188d	c2 20		rep #$20	            REP #$20
.1a188f	48		pha		            PHA
.1a1890	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1893	5b		tcd		            TCD
.1a1894	68		pla		            PLA
.1a1895	28		plp		            PLP
.1a1896	e2 20		sep #$20	            SEP #$20
.1a1898	a9 01		lda #$01	            LDA #ERR_BREAK
.1a189a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a189e	c2 20		rep #$20	            REP #$20
.1a18a0	29 ff 00	and #$00ff	            AND #$00FF
.1a18a3	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a18a6	e2 20		sep #$20	            SEP #$20
.1a18a8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a18ab					LISTLINE
.1a18ab	08		php		            PHP
.1a18ac	c2 30		rep #$30	            REP #$30
.1a18ae	85 23		sta $0823	            STA ARGUMENT1
.1a18b0	64 25		stz $0825	            STZ ARGUMENT1+2
.1a18b2	20 1d 15	jsr $1a151d	            JSR ITOS
.1a18b5	a5 16		lda $0816	            LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a18b7	1a		inc a		            INC A
.1a18b8	85 23		sta $0823	            STA ARGUMENT1
.1a18ba	a5 18		lda $0818	            LDA STRPTR+2
.1a18bc	85 25		sta $0825	            STA ARGUMENT1+2
.1a18be	20 70 45	jsr $1a4570	            JSR PR_STRING
.1a18c1	18		clc		            CLC                 ; Move the BIP to the first byte of the line
.1a18c2	a5 1a		lda $081a	            LDA CURLINE
.1a18c4	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a18c7	85 00		sta $0800	            STA BIP
.1a18c9	a5 1c		lda $081c	            LDA CURLINE+2
.1a18cb	69 00 00	adc #$0000	            ADC #0
.1a18ce	85 02		sta $0802	            STA BIP+2
.1a18d0	e2 20		sep #$20	            SEP #$20
.1a18d2	a9 20		lda #$20	            LDA #CHAR_SP
.1a18d4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a18d7	c2 20		rep #$20	            REP #$20
.1a18d9					loop
.1a18d9	20 ea 18	jsr $1a18ea	            JSR LISTBYTE
.1a18dc	90 fb		bcc $1a18d9	            BCC loop
.1a18de	e2 20		sep #$20	            SEP #$20
.1a18e0	a9 0d		lda #$0d	            LDA #CHAR_CR
.1a18e2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a18e5	20 b7 21	jsr $1a21b7	            JSR NEXTLINE
.1a18e8	28		plp		            PLP
.1a18e9	60		rts		            RTS
.1a18ea					LISTBYTE
.1a18ea	08		php		            PHP
.1a18eb	0b		phd		            PHD
.1a18ec	8b		phb		            PHB
.1a18ed	08		php		            PHP
.1a18ee	c2 20		rep #$20	            REP #$20
.1a18f0	48		pha		            PHA
.1a18f1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a18f4	5b		tcd		            TCD
.1a18f5	68		pla		            PLA
.1a18f6	28		plp		            PLP
.1a18f7	08		php		            PHP
.1a18f8	e2 20		sep #$20	            SEP #$20
.1a18fa	48		pha		            PHA
.1a18fb	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a18fd	48		pha		            PHA
.1a18fe	ab		plb		            PLB
.1a18ff	68		pla		            PLA
.1a1900	28		plp		            PLP
.1a1901	e2 20		sep #$20	            SEP #$20
.1a1903	c2 10		rep #$10	            REP #$10
.1a1905	a7 00		lda [$0800]	            LDA [BIP]           ; Get the current byte
.1a1907	f0 3a		beq $1a1943	            BEQ end_of_line     ; If it's 0, return with C set
.1a1909	30 05		bmi $1a1910	            BMI is_token        ; If it's 0x80 - 0xFF, it's a token
.1a190b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a190e	80 29		bra $1a1939	            BRA done            ; And return
.1a1910					is_token
.1a1910	c2 20		rep #$20	            REP #$20
.1a1912	29 7f 00	and #$007f	            AND #$007F          ; Compute the index of the token
.1a1915	0a		asl a		            ASL A               ; In the token table
.1a1916	0a		asl a		            ASL A
.1a1917	0a		asl a		            ASL A
.1a1918	18		clc		            CLC
.1a1919	69 c0 0c	adc #$0cc0	            ADC #<>TOKENS       ; Set INDEX to the address of the token
.1a191c	85 08		sta $0808	            STA INDEX
.1a191e	a9 1a 00	lda #$001a	            LDA #`TOKENS
.1a1921	69 00 00	adc #$0000	            ADC #0
.1a1924	85 0a		sta $080a	            STA INDEX+2
.1a1926					pr_default
.1a1926	08		php		            PHP
.1a1927	e2 20		sep #$20	            SEP #$20
.1a1929	48		pha		            PHA
.1a192a	a9 1a		lda #$1a	            LDA #`TOKENS
.1a192c	48		pha		            PHA
.1a192d	ab		plb		            PLB
.1a192e	68		pla		            PLA
.1a192f	28		plp		            PLP
.1a1930	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.1a1933	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1935	aa		tax		            TAX
.1a1936	20 29 04	jsr $1a0429	            JSR PRINTS
.1a1939					done
.1a1939	c2 20		rep #$20	            REP #$20
.1a193b	20 da 20	jsr $1a20da	            JSR INCBIP
.1a193e	ab		plb		            PLB
.1a193f	2b		pld		            PLD
.1a1940	28		plp		            PLP
.1a1941	18		clc		            CLC
.1a1942	60		rts		            RTS
.1a1943	ab		plb		end_of_line PLB
.1a1944	2b		pld		            PLD
.1a1945	28		plp		            PLP
.1a1946	38		sec		            SEC
.1a1947	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\eval.s

.1a1948					INITEVALSP
.1a1948	08		php		            PHP
.1a1949	c2 20		rep #$20	            REP #$20
.1a194b	a9 ff 6f	lda #$6fff	            LDA #ARGUMENT_TOP
.1a194e	85 1f		sta $081f	            STA ARGUMENTSP
.1a1950	a9 ff 7f	lda #$7fff	            LDA #OPERATOR_TOP
.1a1953	85 21		sta $0821	            STA OPERATORSP
.1a1955	a9 ff ff	lda #$ffff	            LDA #$FFFF
.1a1958	85 23		sta $0823	            STA ARGUMENT1
.1a195a	85 25		sta $0825	            STA ARGUMENT1+2
.1a195c	85 29		sta $0829	            STA ARGUMENT2
.1a195e	85 2b		sta $082b	            STA ARGUMENT2+2
.1a1960	e2 20		sep #$20	            SEP #$20
.1a1962	85 27		sta $0827	            STA ARGTYPE1
.1a1964	85 2d		sta $082d	            STA ARGTYPE2
.1a1966	28		plp		            PLP
.1a1967	60		rts		            RTS
.1a1968					PHARGUMENT
.1a1968	08		php		            PHP
.1a1969	0b		phd		            PHD
.1a196a	8b		phb		            PHB
.1a196b	08		php		            PHP
.1a196c	c2 20		rep #$20	            REP #$20
.1a196e	48		pha		            PHA
.1a196f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1972	5b		tcd		            TCD
.1a1973	68		pla		            PLA
.1a1974	28		plp		            PLP
.1a1975	08		php		            PHP
.1a1976	e2 20		sep #$20	            SEP #$20
.1a1978	48		pha		            PHA
.1a1979	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a197b	48		pha		            PHA
.1a197c	ab		plb		            PLB
.1a197d	68		pla		            PLA
.1a197e	28		plp		            PLP
.1a197f	c2 30		rep #$30	            REP #$30
.1a1981	5a		phy		            PHY
.1a1982	a4 1f		ldy $081f	            LDY ARGUMENTSP
.1a1984	bd 00 00	lda $0000,x	            LDA #0,B,X
.1a1987	99 00 00	sta $0000,y	            STA #0,B,Y
.1a198a	bd 02 00	lda $0002,x	            LDA #2,B,X
.1a198d	99 02 00	sta $0002,y	            STA #2,B,Y
.1a1990	e2 20		sep #$20	            SEP #$20
.1a1992	bd 04 00	lda $0004,x	            LDA #4,B,X
.1a1995	99 04 00	sta $0004,y	            STA #4,B,Y
.1a1998	c2 20		rep #$20	            REP #$20
.1a199a	38		sec		            SEC
.1a199b	98		tya		            TYA
.1a199c	e9 05 00	sbc #$0005	            SBC #ARGUMENT_SIZE
.1a199f	85 1f		sta $081f	            STA ARGUMENTSP
.1a19a1	7a		ply		            PLY
.1a19a2	ab		plb		            PLB
.1a19a3	2b		pld		            PLD
.1a19a4	28		plp		            PLP
.1a19a5	60		rts		            RTS
.1a19a6					PLARGUMENT
.1a19a6	08		php		            PHP
.1a19a7	0b		phd		            PHD
.1a19a8	8b		phb		            PHB
.1a19a9	08		php		            PHP
.1a19aa	c2 20		rep #$20	            REP #$20
.1a19ac	48		pha		            PHA
.1a19ad	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a19b0	5b		tcd		            TCD
.1a19b1	68		pla		            PLA
.1a19b2	28		plp		            PLP
.1a19b3	08		php		            PHP
.1a19b4	e2 20		sep #$20	            SEP #$20
.1a19b6	48		pha		            PHA
.1a19b7	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a19b9	48		pha		            PHA
.1a19ba	ab		plb		            PLB
.1a19bb	68		pla		            PLA
.1a19bc	28		plp		            PLP
.1a19bd	c2 30		rep #$30	            REP #$30
.1a19bf	5a		phy		            PHY
.1a19c0	18		clc		            CLC
.1a19c1	a5 1f		lda $081f	            LDA ARGUMENTSP
.1a19c3	69 05 00	adc #$0005	            ADC #ARGUMENT_SIZE
.1a19c6	85 1f		sta $081f	            STA ARGUMENTSP
.1a19c8	a8		tay		            TAY
.1a19c9	b9 00 00	lda $0000,y	            LDA #0,B,Y
.1a19cc	9d 00 00	sta $0000,x	            STA #0,B,X
.1a19cf	b9 02 00	lda $0002,y	            LDA #2,B,Y
.1a19d2	9d 02 00	sta $0002,x	            STA #2,B,X
.1a19d5	e2 20		sep #$20	            SEP #$20
.1a19d7	b9 04 00	lda $0004,y	            LDA #4,B,Y
.1a19da	9d 04 00	sta $0004,x	            STA #4,B,X
.1a19dd	bd 00 00	lda $0000,x	            LDA #0,B,X
.1a19e0	7a		ply		            PLY
.1a19e1	ab		plb		            PLB
.1a19e2	2b		pld		            PLD
.1a19e3	28		plp		            PLP
.1a19e4	60		rts		            RTS
.1a19e5					PHOPERATOR
.1a19e5	08		php		            PHP
.1a19e6	0b		phd		            PHD
.1a19e7	8b		phb		            PHB
.1a19e8	08		php		            PHP
.1a19e9	c2 20		rep #$20	            REP #$20
.1a19eb	48		pha		            PHA
.1a19ec	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a19ef	5b		tcd		            TCD
.1a19f0	68		pla		            PLA
.1a19f1	28		plp		            PLP
.1a19f2	08		php		            PHP
.1a19f3	e2 20		sep #$20	            SEP #$20
.1a19f5	48		pha		            PHA
.1a19f6	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a19f8	48		pha		            PHA
.1a19f9	ab		plb		            PLB
.1a19fa	68		pla		            PLA
.1a19fb	28		plp		            PLP
.1a19fc	e2 20		sep #$20	            SEP #$20
.1a19fe	c2 10		rep #$10	            REP #$10
.1a1a00	5a		phy		            PHY
.1a1a01	a4 21		ldy $0821	            LDY OPERATORSP
.1a1a03	99 00 00	sta $0000,y	            STA #0,B,Y
.1a1a06	88		dey		            DEY
.1a1a07	84 21		sty $0821	            STY OPERATORSP
.1a1a09	7a		ply		done        PLY
.1a1a0a	ab		plb		            PLB
.1a1a0b	2b		pld		            PLD
.1a1a0c	28		plp		            PLP
.1a1a0d	60		rts		            RTS
.1a1a0e					PLOPERATOR
.1a1a0e	08		php		            PHP
.1a1a0f	0b		phd		            PHD
.1a1a10	8b		phb		            PHB
.1a1a11	08		php		            PHP
.1a1a12	c2 20		rep #$20	            REP #$20
.1a1a14	48		pha		            PHA
.1a1a15	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1a18	5b		tcd		            TCD
.1a1a19	68		pla		            PLA
.1a1a1a	28		plp		            PLP
.1a1a1b	08		php		            PHP
.1a1a1c	e2 20		sep #$20	            SEP #$20
.1a1a1e	48		pha		            PHA
.1a1a1f	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1a21	48		pha		            PHA
.1a1a22	ab		plb		            PLB
.1a1a23	68		pla		            PLA
.1a1a24	28		plp		            PLP
.1a1a25	e2 20		sep #$20	            SEP #$20
.1a1a27	c2 10		rep #$10	            REP #$10
.1a1a29	5a		phy		            PHY
.1a1a2a	a4 21		ldy $0821	            LDY OPERATORSP
.1a1a2c	c8		iny		            INY
.1a1a2d	84 21		sty $0821	            STY OPERATORSP
.1a1a2f	b9 00 00	lda $0000,y	            LDA #0,B,Y
.1a1a32	c2 20		rep #$20	            REP #$20
.1a1a34	29 ff 00	and #$00ff	            AND #$00FF
.1a1a37	7a		ply		            PLY
.1a1a38	ab		plb		            PLB
.1a1a39	2b		pld		            PLD
.1a1a3a	28		plp		            PLP
.1a1a3b	60		rts		            RTS
.1a1a3c					OPENPARAMS
.1a1a3c	08		php		            PHP
.1a1a3d	e2 20		sep #$20	            SEP #$20
.1a1a3f	a9 01		lda #$01	            LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.1a1a41	20 e5 19	jsr $1a19e5	            JSR PHOPERATOR
.1a1a44	28		plp		            PLP
.1a1a45	60		rts		            RTS
.1a1a46					CLOSEPARAMS
.1a1a46	5a		phy		            PHY
.1a1a47	08		php		            PHP
.1a1a48	8b		phb		            PHB
.1a1a49	08		php		            PHP
.1a1a4a	e2 20		sep #$20	            SEP #$20
.1a1a4c	48		pha		            PHA
.1a1a4d	a9 00		lda #$00	            LDA #0
.1a1a4f	48		pha		            PHA
.1a1a50	ab		plb		            PLB
.1a1a51	68		pla		            PLA
.1a1a52	28		plp		            PLP
.1a1a53	e2 20		sep #$20	            SEP #$20
.1a1a55	a4 21		ldy $0821	            LDY OPERATORSP      ; Peek at the top operator
.1a1a57	b9 01 00	lda $0001,y	            LDA #1,B,Y
.1a1a5a	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the marker for the start of a parameter list
.1a1a5c	d0 08		bne $1a1a66	            BNE error           ; No: there's a problem
.1a1a5e	c2 20		rep #$20	            REP #$20
.1a1a60	e6 21		inc $0821	            INC OPERATORSP      ; Yes: remove it from the operator stack.
.1a1a62	ab		plb		            PLB
.1a1a63	28		plp		            PLP
.1a1a64	7a		ply		            PLY
.1a1a65	60		rts		            RTS
.1a1a66					error
.1a1a66	08		php		            PHP
.1a1a67	c2 20		rep #$20	            REP #$20
.1a1a69	48		pha		            PHA
.1a1a6a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1a6d	5b		tcd		            TCD
.1a1a6e	68		pla		            PLA
.1a1a6f	28		plp		            PLP
.1a1a70	e2 20		sep #$20	            SEP #$20
.1a1a72	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1a74	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1a78	c2 20		rep #$20	            REP #$20
.1a1a7a	29 ff 00	and #$00ff	            AND #$00FF
.1a1a7d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a1a80	e2 20		sep #$20	            SEP #$20
.1a1a82	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1a85					OPHIGHPREC
.1a1a85	48		pha		            PHA
.1a1a86	08		php		            PHP
.1a1a87	0b		phd		            PHD
.1a1a88	8b		phb		            PHB
.1a1a89	08		php		            PHP
.1a1a8a	c2 20		rep #$20	            REP #$20
.1a1a8c	48		pha		            PHA
.1a1a8d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1a90	5b		tcd		            TCD
.1a1a91	68		pla		            PLA
.1a1a92	28		plp		            PLP
.1a1a93	08		php		            PHP
.1a1a94	e2 20		sep #$20	            SEP #$20
.1a1a96	48		pha		            PHA
.1a1a97	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1a99	48		pha		            PHA
.1a1a9a	ab		plb		            PLB
.1a1a9b	68		pla		            PLA
.1a1a9c	28		plp		            PLP
.1a1a9d	e2 20		sep #$20	            SEP #$20
.1a1a9f	a4 21		ldy $0821	            LDY OPERATORSP
.1a1aa1	c0 ff 7f	cpy #$7fff	            CPY #OPERATOR_TOP       ; Is the stack empty?
.1a1aa4	f0 11		beq $1a1ab7	            BEQ is_false            ; Yes: return false
.1a1aa6	20 1f 0c	jsr $1a0c1f	            JSR TOKPRECED
.1a1aa9	85 0c		sta $080c	            STA SCRATCH             ; Save it for later comparison
.1a1aab	b9 01 00	lda $0001,y	            LDA #1,B,Y              ; Get the operator at the top of the stack
.1a1aae	20 1f 0c	jsr $1a0c1f	            JSR TOKPRECED
.1a1ab1	c5 0c		cmp $080c	            CMP SCRATCH             ; Compare the priorities (0 = highest priority)
.1a1ab3	f0 02		beq $1a1ab7	            BEQ is_false            ; A = SCRATCH, return false
.1a1ab5	90 08		bcc $1a1abf	            BCC is_true             ; A < SCRATCH (A is higher priority), return false
.1a1ab7					is_false
.1a1ab7	c2 20		rep #$20	            REP #$20
.1a1ab9	ab		plb		            PLB
.1a1aba	2b		pld		            PLD
.1a1abb	28		plp		            PLP
.1a1abc	68		pla		            PLA
.1a1abd	18		clc		            CLC
.1a1abe	60		rts		            RTS
.1a1abf					is_true
.1a1abf	c2 20		rep #$20	            REP #$20
.1a1ac1	ab		plb		            PLB                     ; A > SCRATCH (A is lower priority), return true
.1a1ac2	2b		pld		            PLD
.1a1ac3	28		plp		            PLP
.1a1ac4	68		pla		            PLA
.1a1ac5	38		sec		            SEC
.1a1ac6	60		rts		            RTS
.1a1ac7					EVALNUMBER
.1a1ac7	4c 9d 08	jmp $1a089d	            JMP PARSEINT
.1a1aca					ARR_GETIDX
.1a1aca	08		php		            PHP
.1a1acb	e2 20		sep #$20	            SEP #$20
.1a1acd	a9 00		lda #$00	            LDA #0
.1a1acf	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF     ; Set the dimension to 0
.1a1ad3	a2 01 00	ldx #$0001	            LDX #1
.1a1ad6					eval_index
.1a1ad6	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a1ad9	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a1adc	c2 20		rep #$20	            REP #$20
.1a1ade	a5 23		lda $0823	            LDA ARGUMENT1       ; Save the index to the array index buffer
.1a1ae0	9f 00 4d 00	sta $004d00,x	            STA @l ARRIDXBUF,X
.1a1ae4	e2 20		sep #$20	            SEP #$20
.1a1ae6	af 00 4d 00	lda $004d00	            LDA @l ARRIDXBUF    ; Increment the index count
.1a1aea	1a		inc a		            INC A
.1a1aeb	30 3e		bmi $1a1b2b	            BMI arg_err         ; If more than 127 dimensions, throw a range error
.1a1aed	8f 00 4d 00	sta $004d00	            STA @l ARRIDXBUF
.1a1af1	e8		inx		            INX
.1a1af2	e8		inx		            INX
.1a1af3	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a1af6	e2 20		sep #$20	            SEP #$20
.1a1af8	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.1a1afa	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it ")"
.1a1afc	f0 09		beq $1a1b07	            BEQ clean_op        ; Yes: cleanup the argument stack
.1a1afe	c9 2c		cmp #$2c	            CMP #','            ; Is it a comma?
.1a1b00	d0 0a		bne $1a1b0c	            BNE syntax_err      ; No: throw a syntax error
.1a1b02					skip_comma
.1a1b02	20 da 20	jsr $1a20da	            JSR INCBIP
.1a1b05	80 cf		bra $1a1ad6	            BRA eval_index      ; And grab the next index
.1a1b07					clean_op
.1a1b07	20 da 20	jsr $1a20da	            JSR INCBIP
.1a1b0a	28		plp		            PLP
.1a1b0b	60		rts		            RTS
.1a1b0c					syntax_err
.1a1b0c	08		php		            PHP
.1a1b0d	c2 20		rep #$20	            REP #$20
.1a1b0f	48		pha		            PHA
.1a1b10	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1b13	5b		tcd		            TCD
.1a1b14	68		pla		            PLA
.1a1b15	28		plp		            PLP
.1a1b16	e2 20		sep #$20	            SEP #$20
.1a1b18	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1b1a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1b1e	c2 20		rep #$20	            REP #$20
.1a1b20	29 ff 00	and #$00ff	            AND #$00FF
.1a1b23	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a1b26	e2 20		sep #$20	            SEP #$20
.1a1b28	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1b2b					arg_err
.1a1b2b	08		php		            PHP
.1a1b2c	c2 20		rep #$20	            REP #$20
.1a1b2e	48		pha		            PHA
.1a1b2f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1b32	5b		tcd		            TCD
.1a1b33	68		pla		            PLA
.1a1b34	28		plp		            PLP
.1a1b35	e2 20		sep #$20	            SEP #$20
.1a1b37	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a1b39	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1b3d	c2 20		rep #$20	            REP #$20
.1a1b3f	29 ff 00	and #$00ff	            AND #$00FF
.1a1b42	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a1b45	e2 20		sep #$20	            SEP #$20
.1a1b47	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1b4a					EVALREF
.1a1b4a	08		php		            PHP
.1a1b4b					get_name
.1a1b4b	20 35 53	jsr $1a5335	            JSR VAR_FINDNAME
.1a1b4e	90 47		bcc $1a1b97	            BCC syntax_err      ; If we didn't find a name, thrown an error
.1a1b50	e2 20		sep #$20	            SEP #$20
.1a1b52	a5 ea		lda $08ea	            LDA TOFINDTYPE      ; Check the type of the variable
.1a1b54	29 80		and #$80	            AND #$80            ; Is it an array?
.1a1b56	d0 06		bne $1a1b5e	            BNE is_array        ; Yes: look for the indexes
.1a1b58	20 36 51	jsr $1a5136	            JSR VAR_REF
.1a1b5b	4c 95 1b	jmp $1a1b95	            JMP done
.1a1b5e					is_array
.1a1b5e	20 a8 50	jsr $1a50a8	            JSR VAR_FIND
.1a1b61	90 53		bcc $1a1bb6	            BCC notfound
.1a1b63	c2 20		rep #$20	            REP #$20
.1a1b65	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a1b67	48		pha		            PHA
.1a1b68	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a1b6a	48		pha		            PHA
.1a1b6b	a0 09 00	ldy #$0009	            LDY #BINDING.VALUE
.1a1b6e	b7 08		lda [$0808],y	            LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.1a1b70	85 c0		sta $08c0	            STA CURRBLOCK
.1a1b72	e2 20		sep #$20	            SEP #$20
.1a1b74	c8		iny		            INY
.1a1b75	c8		iny		            INY
.1a1b76	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1b78	85 c2		sta $08c2	            STA CURRBLOCK+2
.1a1b7a	e2 20		sep #$20	            SEP #$20
.1a1b7c	a9 8f		lda #$8f	            LDA #TOK_LPAREN
.1a1b7e	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a1b81	20 3c 1a	jsr $1a1a3c	            JSR OPENPARAMS
.1a1b84					            PHARRIDX
.1a1b84	20 ca 1a	jsr $1a1aca	            JSR ARR_GETIDX
.1a1b87	20 0c 68	jsr $1a680c	            JSR ARR_REF
.1a1b8a					            PLARRIDX
.1a1b8a	20 46 1a	jsr $1a1a46	            JSR CLOSEPARAMS
.1a1b8d	c2 20		rep #$20	            REP #$20
.1a1b8f	68		pla		            PLA
.1a1b90	85 c2		sta $08c2	            STA CURRBLOCK+2
.1a1b92	68		pla		            PLA
.1a1b93	85 c0		sta $08c0	            STA CURRBLOCK
.1a1b95	28		plp		done        PLP
.1a1b96	60		rts		            RTS
.1a1b97					syntax_err
.1a1b97	08		php		            PHP
.1a1b98	c2 20		rep #$20	            REP #$20
.1a1b9a	48		pha		            PHA
.1a1b9b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1b9e	5b		tcd		            TCD
.1a1b9f	68		pla		            PLA
.1a1ba0	28		plp		            PLP
.1a1ba1	e2 20		sep #$20	            SEP #$20
.1a1ba3	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1ba5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1ba9	c2 20		rep #$20	            REP #$20
.1a1bab	29 ff 00	and #$00ff	            AND #$00FF
.1a1bae	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a1bb1	e2 20		sep #$20	            SEP #$20
.1a1bb3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1bb6					notfound
.1a1bb6	08		php		            PHP
.1a1bb7	c2 20		rep #$20	            REP #$20
.1a1bb9	48		pha		            PHA
.1a1bba	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1bbd	5b		tcd		            TCD
.1a1bbe	68		pla		            PLA
.1a1bbf	28		plp		            PLP
.1a1bc0	e2 20		sep #$20	            SEP #$20
.1a1bc2	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a1bc4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1bc8	c2 20		rep #$20	            REP #$20
.1a1bca	29 ff 00	and #$00ff	            AND #$00FF
.1a1bcd	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a1bd0	e2 20		sep #$20	            SEP #$20
.1a1bd2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1bd5					EVALSTRING
.1a1bd5	08		php		            PHP
.1a1bd6	0b		phd		            PHD
.1a1bd7	08		php		            PHP
.1a1bd8	c2 20		rep #$20	            REP #$20
.1a1bda	48		pha		            PHA
.1a1bdb	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1bde	5b		tcd		            TCD
.1a1bdf	68		pla		            PLA
.1a1be0	28		plp		            PLP
.1a1be1	e2 20		sep #$20	            SEP #$20
.1a1be3	c2 10		rep #$10	            REP #$10
.1a1be5	20 da 20	jsr $1a20da	            JSR INCBIP
.1a1be8	a0 00 00	ldy #$0000	            LDY #0              ; Ywill be our length counter
.1a1beb	b7 00		lda [$0800],y	count_loop  LDA [BIP],Y         ; Get the character
.1a1bed	f0 24		beq $1a1c13	            BEQ error           ; If it's end-of-line, throw an error
.1a1bef	c9 22		cmp #$22	            CMP #CHAR_DQUOTE    ; Is it the ending double-quote?
.1a1bf1	f0 03		beq $1a1bf6	            BEQ found_end       ; Yes: Y should be the length
.1a1bf3	c8		iny		            INY
.1a1bf4	80 f5		bra $1a1beb	            BRA count_loop
.1a1bf6	84 0c		sty $080c	found_end   STY SCRATCH         ; Save the length to SCRATCH
.1a1bf8	e2 20		sep #$20	            SEP #$20
.1a1bfa	a9 02		lda #$02	            LDA #TYPE_STRING    ; Set the type to allocate to STRING
.1a1bfc	a6 0c		ldx $080c	            LDX SCRATCH         ; And the length to the length of the string literal
.1a1bfe	e8		inx		            INX
.1a1bff	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a1c02	a0 00 00	ldy #$0000	            LDY #0
.1a1c05	c4 0c		cpy $080c	copy_loop   CPY SCRATCH         ; Have we copied all the characters?
.1a1c07	f0 29		beq $1a1c32	            BEQ done            ; Yes: we're done
.1a1c09	a7 00		lda [$0800]	            LDA [BIP]           ; No: get the next character
.1a1c0b	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And copy it to the allocated string
.1a1c0d	c8		iny		            INY
.1a1c0e	20 da 20	jsr $1a20da	            JSR INCBIP
.1a1c11	80 f2		bra $1a1c05	            BRA copy_loop       ; And try the next character
.1a1c13					error
.1a1c13	08		php		            PHP
.1a1c14	c2 20		rep #$20	            REP #$20
.1a1c16	48		pha		            PHA
.1a1c17	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1c1a	5b		tcd		            TCD
.1a1c1b	68		pla		            PLA
.1a1c1c	28		plp		            PLP
.1a1c1d	e2 20		sep #$20	            SEP #$20
.1a1c1f	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1c21	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1c25	c2 20		rep #$20	            REP #$20
.1a1c27	29 ff 00	and #$00ff	            AND #$00FF
.1a1c2a	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a1c2d	e2 20		sep #$20	            SEP #$20
.1a1c2f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1c32	a9 00		lda #$00	done        LDA #0
.1a1c34	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1c36	c2 20		rep #$20	            REP #$20
.1a1c38	a5 16		lda $0816	            LDA STRPTR
.1a1c3a	85 23		sta $0823	            STA ARGUMENT1
.1a1c3c	a5 18		lda $0818	            LDA STRPTR+2
.1a1c3e	85 25		sta $0825	            STA ARGUMENT1+2
.1a1c40	a9 02 00	lda #$0002	            LDA #TYPE_STRING    ; And set the type of ARGUMENT1 to string
.1a1c43	85 27		sta $0827	            STA ARGTYPE1
.1a1c45	20 da 20	jsr $1a20da	            JSR INCBIP
.1a1c48	2b		pld		            PLD
.1a1c49	28		plp		            PLP
.1a1c4a	60		rts		            RTS
.1a1c4b					EVAL_FUNC
.1a1c4b	08		php		            PHP
.1a1c4c	e2 20		sep #$20	            SEP #$20
.1a1c4e	a7 00		lda [$0800]	            LDA [BIP]           ; Get the token
.1a1c50	c2 20		rep #$20	            REP #$20
.1a1c52	29 ff 00	and #$00ff	            AND #$00FF
.1a1c55	20 49 0c	jsr $1a0c49	            JSR TOKEVAL
.1a1c58	85 2f		sta $082f	            STA JMP16PTR
.1a1c5a	20 3c 1a	jsr $1a1a3c	            JSR OPENPARAMS
.1a1c5d	08		php		            PHP
.1a1c5e	e2 20		sep #$20	            SEP #$20
.1a1c60	48		pha		            PHA
.1a1c61	a9 00		lda #$00	            LDA #0
.1a1c63	48		pha		            PHA
.1a1c64	ab		plb		            PLB
.1a1c65	68		pla		            PLA
.1a1c66	28		plp		            PLP
.1a1c67	20 6f 1c	jsr $1a1c6f	            JSR OPSTUB
.1a1c6a	20 46 1a	jsr $1a1a46	            JSR CLOSEPARAMS
.1a1c6d	28		plp		            PLP
.1a1c6e	60		rts		            RTS
.1a1c6f					OPSTUB
.1a1c6f	20 da 20	jsr $1a20da	            JSR INCBIP
.1a1c72	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a1c75					PROCESSOP
.1a1c75	48		pha		            PHA
.1a1c76	08		php		            PHP
.1a1c77	0b		phd		            PHD
.1a1c78	8b		phb		            PHB
.1a1c79	08		php		            PHP
.1a1c7a	c2 20		rep #$20	            REP #$20
.1a1c7c	48		pha		            PHA
.1a1c7d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1c80	5b		tcd		            TCD
.1a1c81	68		pla		            PLA
.1a1c82	28		plp		            PLP
.1a1c83	c2 30		rep #$30	            REP #$30
.1a1c85	20 0e 1a	jsr $1a1a0e	            JSR PLOPERATOR
.1a1c88	89 80 00	bit #$0080	            BIT #$80            ; Check if it's really a token
.1a1c8b	f0 37		beq $1a1cc4	            BEQ bad_token       ; No: it's a bad token
.1a1c8d	48		pha		            PHA
.1a1c8e	20 49 0c	jsr $1a0c49	            JSR TOKEVAL
.1a1c91	85 2f		sta $082f	            STA JMP16PTR
.1a1c93	68		pla		            PLA
.1a1c94	20 96 0c	jsr $1a0c96	            JSR TOKARITY
.1a1c97	c9 01 00	cmp #$0001	            CMP #1              ; Check the operator's arity
.1a1c9a	f0 08		beq $1a1ca4	            BEQ pull_arg1       ; If it's 1 just pull one argument from the stack
.1a1c9c	c2 30		rep #$30	            REP #$30
.1a1c9e	a2 29 08	ldx #$0829	            LDX #<>ARGUMENT2    ; Pull argument 2 from the stack
.1a1ca1	20 a6 19	jsr $1a19a6	            JSR PLARGUMENT
.1a1ca4					pull_arg1
.1a1ca4	c2 30		rep #$30	            REP #$30
.1a1ca6	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Pull argument 1 from the stack
.1a1ca9	20 a6 19	jsr $1a19a6	            JSR PLARGUMENT
.1a1cac	08		php		            PHP
.1a1cad	e2 20		sep #$20	            SEP #$20
.1a1caf	48		pha		            PHA
.1a1cb0	a9 00		lda #$00	            LDA #0
.1a1cb2	48		pha		            PHA
.1a1cb3	ab		plb		            PLB
.1a1cb4	68		pla		            PLA
.1a1cb5	28		plp		            PLP
.1a1cb6	20 c6 1c	jsr $1a1cc6	            JSR OPSTUB
.1a1cb9	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Get return result in argument 1
.1a1cbc	20 68 19	jsr $1a1968	            JSR PHARGUMENT
.1a1cbf	ab		plb		            PLB
.1a1cc0	2b		pld		            PLD
.1a1cc1	28		plp		            PLP
.1a1cc2	68		pla		            PLA
.1a1cc3	60		rts		            RTS
.1a1cc4	00		brk #		bad_token   BRK
.1a1cc5	ea		nop		            NOP
.1a1cc6	6c 2f 08	jmp ($082f)	OPSTUB      JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a1cc9					EVALEXPR
.1a1cc9	08		php		            PHP
.1a1cca	08		php		            PHP
.1a1ccb	c2 20		rep #$20	            REP #$20
.1a1ccd	48		pha		            PHA
.1a1cce	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1cd1	5b		tcd		            TCD
.1a1cd2	68		pla		            PLA
.1a1cd3	28		plp		            PLP
.1a1cd4	08		php		            PHP
.1a1cd5	e2 20		sep #$20	            SEP #$20
.1a1cd7	48		pha		            PHA
.1a1cd8	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1cda	48		pha		            PHA
.1a1cdb	ab		plb		            PLB
.1a1cdc	68		pla		            PLA
.1a1cdd	28		plp		            PLP
.1a1cde	c2 10		rep #$10	            REP #$10
.1a1ce0	da		phx		            PHX
.1a1ce1					get_char
.1a1ce1	e2 20		sep #$20	            SEP #$20
.1a1ce3	a7 00		lda [$0800]	            LDA [BIP]           ; Get the character
.1a1ce5	d0 03		bne $1a1cea	            BNE else1
.1a1ce7	4c 8c 1d	jmp $1a1d8c	            JMP proc_stack      ; Handle end of line, if we see it
.1a1cea	30 33		bmi $1a1d1f	else1       BMI is_token        ; If MSB is set, it's a token
.1a1cec	c9 20		cmp #$20	            CMP #' '            ; Is it a space?
.1a1cee	d0 03		bne $1a1cf3	            BNE else2
.1a1cf0	4c 86 1d	jmp $1a1d86	            JMP next_char       ; Yes: Skip to the next character
.1a1cf3	c9 3a		cmp #$3a	else2       CMP #'9'+1          ; Check to see if we have digits
.1a1cf5	b0 04		bcs $1a1cfb	            BCS else3           ; No: treat as the end of the line
.1a1cf7	c9 30		cmp #$30	            CMP #'0'
.1a1cf9	b0 56		bcs $1a1d51	            BCS is_digit
.1a1cfb	c9 26		cmp #$26	else3       CMP #'&'            ; Check for a hexadecimal prefix
.1a1cfd	f0 52		beq $1a1d51	            BEQ is_digit
.1a1cff	c9 22		cmp #$22	            CMP #'"'            ; Is it a double-quote?
.1a1d01	d0 03		bne $1a1d06	            BNE else4
.1a1d03	4c 9f 1d	jmp $1a1d9f	            JMP is_string       ; Yes: process the string
.1a1d06	c9 5b		cmp #$5b	else4       CMP #'Z'+1          ; Check to see if we have upper case alphabetics
.1a1d08	b0 07		bcs $1a1d11	            BCS check_lc        ; No: check for lower case
.1a1d0a	c9 41		cmp #$41	            CMP #'A'
.1a1d0c	90 03		bcc $1a1d11	            BCC check_lc
.1a1d0e	4c ab 1d	jmp $1a1dab	            JMP is_alpha
.1a1d11	c9 7b		cmp #$7b	check_lc    CMP #'z'+1          ; Check to see if we have lower case alphabetics
.1a1d13	b0 07		bcs $1a1d1c	            BCS else5           ; No: treat as the end of the line
.1a1d15	c9 61		cmp #$61	            CMP #'a'
.1a1d17	90 03		bcc $1a1d1c	            BCC else5
.1a1d19	4c ab 1d	jmp $1a1dab	            JMP is_alpha
.1a1d1c	4c 8c 1d	jmp $1a1d8c	else5       JMP proc_stack
.1a1d1f	c9 8f		cmp #$8f	is_token    CMP #TOK_LPAREN     ; Is it an LPAREN
.1a1d21	f0 40		beq $1a1d63	            BEQ is_lparen       ; Yes: handle the LPAREN
.1a1d23	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it an RPAREN?
.1a1d25	f0 41		beq $1a1d68	            BEQ is_rparen       ; Yes: handle the RPAREN
.1a1d27	20 6c 0c	jsr $1a0c6c	            JSR TOKTYPE
.1a1d2a	c9 30		cmp #$30	            CMP #TOK_TY_FUNC    ; Is it a function?
.1a1d2c	d0 0c		bne $1a1d3a	            BNE chk_op          ; No: check if it's an operator
.1a1d2e	20 4b 1c	jsr $1a1c4b	            JSR EVAL_FUNC
.1a1d31	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1d34	20 68 19	jsr $1a1968	            JSR PHARGUMENT
.1a1d37	4c e1 1c	jmp $1a1ce1	            JMP get_char
.1a1d3a	c9 00		cmp #$00	chk_op      CMP #TOK_TY_OP      ; Is it an operator?
.1a1d3c	d0 4e		bne $1a1d8c	            BNE proc_stack      ; No: we're finished processing
.1a1d3e	a7 00		lda [$0800]	            LDA [BIP]           ; Yes: Get the token back
.1a1d40	a6 21		ldx $0821	chk_prec    LDX OPERATORSP      ; Is the operator stack empty?
.1a1d42	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.1a1d45	f0 05		beq $1a1d4c	            BEQ push_op         ; Yes: push the operator
.1a1d47	20 85 1a	jsr $1a1a85	            JSR OPHIGHPREC
.1a1d4a	b0 12		bcs $1a1d5e	            BCS process1        ; No: we should process the top operator
.1a1d4c					push_op
.1a1d4c	20 e5 19	jsr $1a19e5	            JSR PHOPERATOR
.1a1d4f	80 35		bra $1a1d86	            BRA next_char       ; And go to the next character
.1a1d51					is_digit
.1a1d51	c2 20		rep #$20	            REP #$20
.1a1d53	20 57 59	jsr $1a5957	            JSR PARSENUM
.1a1d56	a2 23 08	ldx #$0823	got_number  LDX #<>ARGUMENT1
.1a1d59	20 68 19	jsr $1a1968	            JSR PHARGUMENT
.1a1d5c	80 83		bra $1a1ce1	            BRA get_char
.1a1d5e					process1
.1a1d5e	20 75 1c	jsr $1a1c75	            JSR PROCESSOP
.1a1d61	80 dd		bra $1a1d40	            BRA chk_prec        ; And check what to do with the current operator
.1a1d63					is_lparen
.1a1d63	20 e5 19	jsr $1a19e5	            JSR PHOPERATOR
.1a1d66	80 1e		bra $1a1d86	            BRA next_char
.1a1d68					is_rparen
.1a1d68	e2 20		sep #$20	            SEP #$20
.1a1d6a	a4 21		ldy $0821	            LDY OPERATORSP      ; Is the operator stack empty?
.1a1d6c	c0 ff 7f	cpy #$7fff	            CPY #<>OPERATOR_TOP
.1a1d6f	f0 46		beq $1a1db7	            BEQ done            ; Yes: we're done evaluating things
.1a1d71	a4 21		ldy $0821	paren_loop  LDY OPERATORSP      ; Peek at the top operator
.1a1d73	b9 01 00	lda $0001,y	            LDA #1,B,Y
.1a1d76	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the LPAREN of a function?
.1a1d78	f0 3d		beq $1a1db7	            BEQ done            ; Yes: treat it as an empty stack
.1a1d7a	c9 8f		cmp #$8f	            CMP #TOK_LPAREN     ; Is it an LPAREN?
.1a1d7c	f0 05		beq $1a1d83	            BEQ done_rparen     ; Yes: we're finished processing
.1a1d7e	20 75 1c	jsr $1a1c75	            JSR PROCESSOP
.1a1d81	80 ee		bra $1a1d71	            BRA paren_loop
.1a1d83					done_rparen
.1a1d83	20 0e 1a	jsr $1a1a0e	            JSR PLOPERATOR
.1a1d86					next_char
.1a1d86	20 da 20	jsr $1a20da	            JSR INCBIP
.1a1d89	4c e1 1c	jmp $1a1ce1	            JMP get_char
.1a1d8c					proc_stack
.1a1d8c	a6 21		ldx $0821	            LDX OPERATORSP      ; Is the operator stack empty?
.1a1d8e	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.1a1d91	b0 24		bcs $1a1db7	            BGE done            ; Yes: return to the caller
.1a1d93	bd 01 00	lda $0001,x	            LDA #1,B,X
.1a1d96	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is top operator a function open?
.1a1d98	f0 1d		beq $1a1db7	            BEQ done            ; Yes: treat as end of expression
.1a1d9a	20 75 1c	jsr $1a1c75	            JSR PROCESSOP
.1a1d9d	80 ed		bra $1a1d8c	            BRA proc_stack
.1a1d9f					is_string
.1a1d9f	20 d5 1b	jsr $1a1bd5	            JSR EVALSTRING
.1a1da2	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1da5	20 68 19	jsr $1a1968	            JSR PHARGUMENT
.1a1da8	4c e1 1c	jmp $1a1ce1	            JMP get_char
.1a1dab					is_alpha
.1a1dab	20 4a 1b	jsr $1a1b4a	            JSR EVALREF
.1a1dae	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1db1	20 68 19	jsr $1a1968	            JSR PHARGUMENT
.1a1db4	4c e1 1c	jmp $1a1ce1	            JMP get_char
.1a1db7	a2 23 08	ldx #$0823	done        LDX #<>ARGUMENT1    ; Make sure the result is off the stack
.1a1dba	20 a6 19	jsr $1a19a6	            JSR PLARGUMENT
.1a1dbd					real_done
.1a1dbd	fa		plx		            PLX
.1a1dbe	28		plp		            PLP
.1a1dbf	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\returnstack.s

.1a1dc0					INITRETURN
.1a1dc0	08		php		                PHP
.1a1dc1	0b		phd		                PHD
.1a1dc2	8b		phb		                PHB
.1a1dc3	08		php		            PHP
.1a1dc4	e2 20		sep #$20	            SEP #$20
.1a1dc6	48		pha		            PHA
.1a1dc7	a9 00		lda #$00	            LDA #0
.1a1dc9	48		pha		            PHA
.1a1dca	ab		plb		            PLB
.1a1dcb	68		pla		            PLA
.1a1dcc	28		plp		            PLP
.1a1dcd	08		php		            PHP
.1a1dce	c2 20		rep #$20	            REP #$20
.1a1dd0	48		pha		            PHA
.1a1dd1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1dd4	5b		tcd		            TCD
.1a1dd5	68		pla		            PLA
.1a1dd6	28		plp		            PLP
.1a1dd7	c2 30		rep #$30	            REP #$30
.1a1dd9	a9 fd 5f	lda #$5ffd	                LDA #RETURN_TOP-2
.1a1ddc	85 33		sta $0833	                STA RETURNSP
.1a1dde	ab		plb		                PLB
.1a1ddf	2b		pld		                PLD
.1a1de0	28		plp		                PLP
.1a1de1	60		rts		            RTS
.1a1de2					PHRETURN
.1a1de2	08		php		                PHP
.1a1de3	0b		phd		                PHD
.1a1de4	08		php		            PHP
.1a1de5	c2 20		rep #$20	            REP #$20
.1a1de7	48		pha		            PHA
.1a1de8	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1deb	5b		tcd		            TCD
.1a1dec	68		pla		            PLA
.1a1ded	28		plp		            PLP
.1a1dee	c2 30		rep #$30	            REP #$30
.1a1df0	92 33		sta ($0833)	                STA (RETURNSP)
.1a1df2	c6 33		dec $0833	                DEC RETURNSP
.1a1df4	c6 33		dec $0833	                DEC RETURNSP
.1a1df6	2b		pld		                PLD
.1a1df7	28		plp		                PLP
.1a1df8	60		rts		            RTS
.1a1df9					PHRETURNB
.1a1df9	08		php		                PHP
.1a1dfa	c2 30		rep #$30	            REP #$30
.1a1dfc	29 ff 00	and #$00ff	                AND #$00FF
.1a1dff	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a1e02	28		plp		                PLP
.1a1e03	60		rts		            RTS
.1a1e04					PLRETURN
.1a1e04	08		php		                PHP
.1a1e05	0b		phd		                PHD
.1a1e06	08		php		            PHP
.1a1e07	c2 20		rep #$20	            REP #$20
.1a1e09	48		pha		            PHA
.1a1e0a	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1e0d	5b		tcd		            TCD
.1a1e0e	68		pla		            PLA
.1a1e0f	28		plp		            PLP
.1a1e10	c2 30		rep #$30	            REP #$30
.1a1e12	e6 33		inc $0833	                INC RETURNSP
.1a1e14	e6 33		inc $0833	                INC RETURNSP
.1a1e16	b2 33		lda ($0833)	                LDA (RETURNSP)
.1a1e18	2b		pld		                PLD
.1a1e19	28		plp		                PLP
.1a1e1a	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\interpreter.s

=$80					ST_RUNNING = $80            ; The interpreter is running a full program
=$00					ST_INTERACT = $00           ; The interpreter is in interactive mode
>08d2					STATE       .byte ?         ; The state of the interpreter ()
>08d3					ERROR_NUM   .byte ?         ; The type of the error
>08d4					HANDLEERR   .long ?         ; Pointer to the error handler
>08d7					LINENUM     .word ?         ; The current line number
>08d9					LASTLINE    .long ?         ; Pointer to the next free space over the BASIC program
>08dc					EXECACTION  .byte ?         ; The action the exection routines should take to get their next statement
=0					LINE_LINK = 0               ; Offset to the link to the next line
=2					LINE_NUMBER = 2             ; Offset to the line number
=4					LINE_TOKENS = 4             ; Offset to the first token
=6					LINE_MINLEN = 6             ; Minimum length of a line
=0					EXEC_CONT = 0               ; Continue advancing the current line
=1					EXEC_STOP = 1               ; Stop execution of the program
=2					EXEC_GOTO = 2               ; Transfer execution to a new CURLINE that is already set
=3					EXEC_RETURN = 3             ; Transfer execution back to a line that was on the stack
.1a1e1b					SET_ERRERL
.1a1e1b	8b		phb		                PHB
.1a1e1c	0b		phd		                PHD
.1a1e1d	08		php		                PHP
.1a1e1e	08		php		            PHP
.1a1e1f	c2 20		rep #$20	            REP #$20
.1a1e21	48		pha		            PHA
.1a1e22	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1e25	5b		tcd		            TCD
.1a1e26	68		pla		            PLA
.1a1e27	28		plp		            PLP
.1a1e28	08		php		            PHP
.1a1e29	e2 20		sep #$20	            SEP #$20
.1a1e2b	48		pha		            PHA
.1a1e2c	a9 00		lda #$00	            LDA #BASIC_BANK
.1a1e2e	48		pha		            PHA
.1a1e2f	ab		plb		            PLB
.1a1e30	68		pla		            PLA
.1a1e31	28		plp		            PLP
.1a1e32	c2 20		rep #$20	            REP #$20
.1a1e34	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.1a1e36	a9 00 00	lda #$0000	                LDA #0
.1a1e39	85 25		sta $0825	                STA ARGUMENT1+2
.1a1e3b	e2 20		sep #$20	            SEP #$20
.1a1e3d	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a1e3f	85 27		sta $0827	                STA ARGTYPE1
.1a1e41	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.1a1e43	a9 1a		lda #$1a	                LDA #`err_name
.1a1e45	85 e9		sta $08e9	                STA TOFIND+2
.1a1e47	c2 20		rep #$20	            REP #$20
.1a1e49	a9 75 1e	lda #$1e75	                LDA #<>err_name
.1a1e4c	85 e7		sta $08e7	                STA TOFIND
.1a1e4e	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a1e51	c2 20		rep #$20	            REP #$20
.1a1e53	a5 d7		lda $08d7	                LDA LINENUM
.1a1e55	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.1a1e57	a5 d9		lda $08d9	                LDA LINENUM+2
.1a1e59	85 25		sta $0825	                STA ARGUMENT1+2
.1a1e5b	e2 20		sep #$20	            SEP #$20
.1a1e5d	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a1e5f	85 27		sta $0827	                STA ARGTYPE1
.1a1e61	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.1a1e63	a9 1a		lda #$1a	                LDA #`erl_name
.1a1e65	85 e9		sta $08e9	                STA TOFIND+2
.1a1e67	c2 20		rep #$20	            REP #$20
.1a1e69	a9 79 1e	lda #$1e79	                LDA #<>erl_name
.1a1e6c	85 e7		sta $08e7	                STA TOFIND
.1a1e6e	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a1e71	28		plp		                PLP
.1a1e72	2b		pld		                PLD
.1a1e73	ab		plb		                PLB
.1a1e74	60		rts		            RTS
>1a1e75	45 52 52 00			err_name        .null "ERR"
>1a1e79	45 52 4c 00			erl_name        .null "ERL"
.1a1e7d					ON_ERROR
.1a1e7d	e2 20		sep #$20	            SEP #$20
.1a1e7f	c2 10		rep #$10	            REP #$10
.1a1e81	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a1e84	af d3 08 00	lda $0008d3	            LDA @lERROR_NUM         ; Calculate index to the error message pointer
.1a1e88	0a		asl a		            ASL A
.1a1e89	c2 20		rep #$20	            REP #$20
.1a1e8b	29 ff 00	and #$00ff	            AND #$00FF
.1a1e8e	a8		tay		            TAY
.1a1e8f	08		php		            PHP
.1a1e90	e2 20		sep #$20	            SEP #$20
.1a1e92	48		pha		            PHA
.1a1e93	a9 1a		lda #$1a	            LDA #`ERRORMSG
.1a1e95	48		pha		            PHA
.1a1e96	ab		plb		            PLB
.1a1e97	68		pla		            PLA
.1a1e98	28		plp		            PLP
.1a1e99	be cf 1e	ldx $1a1ecf,y	            LDX ERRORMSG,Y
.1a1e9c	20 29 04	jsr $1a0429	            JSR PRINTS
.1a1e9f	c2 20		rep #$20	            REP #$20
.1a1ea1	a5 d7		lda $08d7	            LDA LINENUM
.1a1ea3	f0 27		beq $1a1ecc	            BEQ skip_at
.1a1ea5	a2 ff 1e	ldx #$1eff	            LDX #<>MSG_AT           ; If so... print " AT "
.1a1ea8	20 29 04	jsr $1a0429	            JSR PRINTS
.1a1eab	08		php		            PHP
.1a1eac	e2 20		sep #$20	            SEP #$20
.1a1eae	48		pha		            PHA
.1a1eaf	a9 00		lda #$00	            LDA #BASIC_BANK
.1a1eb1	48		pha		            PHA
.1a1eb2	ab		plb		            PLB
.1a1eb3	68		pla		            PLA
.1a1eb4	28		plp		            PLP
.1a1eb5	c2 20		rep #$20	            REP #$20
.1a1eb7	af d7 08 00	lda $0008d7	            LDA @lLINENUM           ; ... and then the line number
.1a1ebb	8f 23 08 00	sta $000823	            STA @lARGUMENT1
.1a1ebf	a9 00 00	lda #$0000	            LDA #0
.1a1ec2	8f 25 08 00	sta $000825	            STA @lARGUMENT1+2
.1a1ec6	20 8e 45	jsr $1a458e	            JSR PR_INTEGER
.1a1ec9	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a1ecc					skip_at
.1a1ecc	4c 7d 27	jmp $1a277d	            JMP INTERACT
>1a1ecf	03 1f				ERRORMSG    .word <>MSG_OK
>1a1ed1	06 1f				            .word <>MSG_BREAK
>1a1ed3	0c 1f				            .word <>MSG_SYNTAX
>1a1ed5	19 1f				            .word <>MSG_MEMORY
>1a1ed7	27 1f				            .word <>MSG_TYPE
>1a1ed9	35 1f				            .word <>MSG_NOTFND
>1a1edb	48 1f				            .word <>MSG_NOLINE
>1a1edd	5e 1f				            .word <>MSG_UNDFLOW
>1a1edf	6e 1f				            .word <>MSG_OVRFLOW
>1a1ee1	7d 1f				            .word <>MSG_RANGE
>1a1ee3	8a 1f				            .word <>MSG_ARG
>1a1ee5	9b 1f				            .word <>MSG_NOFILE
>1a1ee7	aa 1f				            .word <>MSG_NAN
>1a1ee9	b7 1f				            .word <>MSG_OVERFLOW
>1a1eeb	c5 1f				            .word <>MSG_UNDERFLOW
>1a1eed	d4 1f				            .word <>MSG_DIV0
>1a1eef	e5 1f				            .word <>MSG_DIRECTORY
>1a1ef1	fe 1f				            .word <>MSG_LOAD
>1a1ef3	12 20				            .word <>MSG_SAVE
>1a1ef5	26 20				            .word <>MSG_DELETE
>1a1ef7	3c 20				            .word <>MSG_FILENOTFND
>1a1ef9	50 20				            .word <>MSG_DIRNOTWRITE
>1a1efb	6b 20				            .word <>MSG_NOTCOPIED
>1a1efd	83 20				            .word <>MSG_DOMAIN
>1a1eff	20 61 74 00			MSG_AT          .null " at"
>1a1f03	4f 4b 00			MSG_OK          .null "OK"
>1a1f06	42 72 65 61 6b 00		MSG_BREAK       .null "Break"
>1a1f0c	53 79 6e 74 61 78 20 65		MSG_SYNTAX      .null "Syntax error"
>1a1f14	72 72 6f 72 00
>1a1f19	4f 75 74 20 6f 66 20 6d		MSG_MEMORY      .null "Out of memory"
>1a1f21	65 6d 6f 72 79 00
>1a1f27	54 79 70 65 20 6d 69 73		MSG_TYPE        .null "Type mismatch"
>1a1f2f	6d 61 74 63 68 00
>1a1f35	56 61 72 69 61 62 6c 65		MSG_NOTFND      .null "Variable not found"
>1a1f3d	20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1f48	4c 69 6e 65 20 6e 75 6d		MSG_NOLINE      .null "Line number not found"
>1a1f50	62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1f5e	53 74 61 63 6b 20 75 6e		MSG_UNDFLOW     .null "Stack underflow"
>1a1f66	64 65 72 66 6c 6f 77 00
>1a1f6e	53 74 61 63 6b 20 6f 76		MSG_OVRFLOW     .null "Stack overflow"
>1a1f76	65 72 66 6c 6f 77 00
>1a1f7d	4f 75 74 20 6f 66 20 72		MSG_RANGE       .null "Out of range"
>1a1f85	61 6e 67 65 00
>1a1f8a	49 6c 6c 65 67 61 6c 20		MSG_ARG         .null "Illegal argument"
>1a1f92	61 72 67 75 6d 65 6e 74 00
>1a1f9b	46 69 6c 65 20 6e 6f 74		MSG_NOFILE      .null "File not found"
>1a1fa3	20 66 6f 75 6e 64 00
>1a1faa	4e 6f 74 20 61 20 6e 75		MSG_NAN         .null "Not a number"
>1a1fb2	6d 62 65 72 00
>1a1fb7	4d 61 74 68 20 6f 76 65		MSG_OVERFLOW    .null "Math overflow"
>1a1fbf	72 66 6c 6f 77 00
>1a1fc5	4d 61 74 68 20 75 6e 64		MSG_UNDERFLOW   .null "Math underflow"
>1a1fcd	65 72 66 6c 6f 77 00
>1a1fd4	44 69 76 69 73 69 6f 6e		MSG_DIV0        .null "Division by zero"
>1a1fdc	20 62 79 20 7a 65 72 6f 00
>1a1fe5	55 6e 61 62 6c 65 20 74		MSG_DIRECTORY   .null "Unable to read directory"
>1a1fed	6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>1a1ffd	00
>1a1ffe	55 6e 61 62 6c 65 20 74		MSG_LOAD        .null "Unable to load file"
>1a2006	6f 20 6c 6f 61 64 20 66 69 6c 65 00
>1a2012	55 6e 61 62 6c 65 20 74		MSG_SAVE        .null "Unable to save file"
>1a201a	6f 20 73 61 76 65 20 66 69 6c 65 00
>1a2026	55 6e 61 62 6c 65 20 74		MSG_DELETE      .null "Unable to delete file"
>1a202e	6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00
>1a203c	43 6f 75 6c 64 20 6e 6f		MSG_FILENOTFND  .null "Could not find file"
>1a2044	74 20 66 69 6e 64 20 66 69 6c 65 00
>1a2050	43 6f 75 6c 64 20 6e 6f		MSG_DIRNOTWRITE .null "Could not update directory"
>1a2058	74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>1a2068	72 79 00
>1a206b	43 6f 75 6c 64 20 6e 6f		MSG_NOTCOPIED   .null "Could not copy the file"
>1a2073	74 20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00
>1a2083	41 72 67 75 6d 65 6e 74		MSG_DOMAIN      .null "Argument outside domain"
>1a208b	20 6f 75 74 73 69 64 65 20 64 6f 6d 61 69 6e 00
.1a209b					SETINTERACT
.1a209b	08		php		            PHP
.1a209c	0b		phd		            PHD
.1a209d	08		php		            PHP
.1a209e	c2 20		rep #$20	            REP #$20
.1a20a0	48		pha		            PHA
.1a20a1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a20a4	5b		tcd		            TCD
.1a20a5	68		pla		            PLA
.1a20a6	28		plp		            PLP
.1a20a7	e2 20		sep #$20	            SEP #$20
.1a20a9	a9 00		lda #$00	            LDA #ST_INTERACT
.1a20ab	85 d2		sta $08d2	            STA STATE
.1a20ad	2b		pld		            PLD
.1a20ae	28		plp		            PLP
.1a20af	60		rts		            RTS
.1a20b0					CLRINTERP
.1a20b0	0b		phd		            PHD
.1a20b1	08		php		            PHP
.1a20b2	08		php		            PHP
.1a20b3	c2 20		rep #$20	            REP #$20
.1a20b5	48		pha		            PHA
.1a20b6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a20b9	5b		tcd		            TCD
.1a20ba	68		pla		            PLA
.1a20bb	28		plp		            PLP
.1a20bc	08		php		            PHP
.1a20bd	c2 20		rep #$20	            REP #$20
.1a20bf	a9 7d 1e	lda #$1e7d	            LDA #<>ON_ERROR
.1a20c2	8f d4 08 00	sta $0008d4	            STA @lHANDLEERR
.1a20c6	e2 20		sep #$20	            SEP #$20
.1a20c8	a9 1a		lda #$1a	            LDA #`ON_ERROR
.1a20ca	8f d6 08 00	sta $0008d6	            STA @lHANDLEERR+2
.1a20ce	28		plp		            PLP
.1a20cf	20 35 44	jsr $1a4435	            JSR S_CLR
.1a20d2	20 76 3f	jsr $1a3f76	            JSR S_RESTORE
.1a20d5	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the depth of the GOSUB stack
.1a20d7	28		plp		            PLP
.1a20d8	2b		pld		            PLD
.1a20d9	60		rts		            RTS
.1a20da					INCBIP
.1a20da	08		php		            PHP
.1a20db	0b		phd		            PHD
.1a20dc	08		php		            PHP
.1a20dd	c2 20		rep #$20	            REP #$20
.1a20df	48		pha		            PHA
.1a20e0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a20e3	5b		tcd		            TCD
.1a20e4	68		pla		            PLA
.1a20e5	28		plp		            PLP
.1a20e6	c2 20		rep #$20	            REP #$20
.1a20e8	18		clc		            CLC
.1a20e9	a5 00		lda $0800	            LDA BIP
.1a20eb	69 01 00	adc #$0001	            ADC #1
.1a20ee	85 00		sta $0800	            STA BIP
.1a20f0	e2 20		sep #$20	            SEP #$20
.1a20f2	a5 02		lda $0802	            LDA BIP+2
.1a20f4	69 00		adc #$00	            ADC #0
.1a20f6	85 02		sta $0802	            STA BIP+2
.1a20f8	2b		pld		            PLD
.1a20f9	28		plp		            PLP
.1a20fa	60		rts		            RTS
.1a20fb					SKIPWS
.1a20fb	08		php		            PHP
.1a20fc	0b		phd		            PHD
.1a20fd	08		php		            PHP
.1a20fe	c2 20		rep #$20	            REP #$20
.1a2100	48		pha		            PHA
.1a2101	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2104	5b		tcd		            TCD
.1a2105	68		pla		            PLA
.1a2106	28		plp		            PLP
.1a2107	e2 20		sep #$20	            SEP #$20
.1a2109	a7 00		lda [$0800]	loop        LDA [BIP]
.1a210b	f0 0f		beq $1a211c	            BEQ done            ; If character is 0, we've reached the end of the line
.1a210d	c9 20		cmp #$20	            CMP #CHAR_SP        ; Skip if it's a space
.1a210f	f0 06		beq $1a2117	            BEQ skip_char
.1a2111	c9 09		cmp #$09	            CMP #CHAR_TAB       ; Skip if it's a TAB
.1a2113	f0 02		beq $1a2117	            BEQ skip_char
.1a2115	80 05		bra $1a211c	            BRA done            ; Otherwise, we're done and BIP points to a non-whitespace
.1a2117					skip_char
.1a2117	20 da 20	jsr $1a20da	            JSR INCBIP
.1a211a	80 ed		bra $1a2109	            BRA loop
.1a211c	2b		pld		done        PLD
.1a211d	28		plp		            PLP
.1a211e	60		rts		            RTS
.1a211f					SKIPSTMT
.1a211f	08		php		            PHP
.1a2120	e2 20		sep #$20	            SEP #$20
.1a2122	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the current character
.1a2124	f0 09		beq $1a212f	            BEQ done            ; Is it EOL? Yes, we're done
.1a2126	c9 3a		cmp #$3a	            CMP #':'            ; Is it a colon?
.1a2128	f0 05		beq $1a212f	            BEQ done            ; Yes, we're done
.1a212a	20 da 20	jsr $1a20da	            JSR INCBIP
.1a212d	80 f3		bra $1a2122	            BRA loop            ; and check it...
.1a212f	28		plp		done        PLP
.1a2130	60		rts		            RTS
.1a2131					SKIPTOTOK
.1a2131	08		php		            PHP
.1a2132	e2 20		sep #$20	            SEP #$20
.1a2134	64 36		stz $0836	            STZ NESTING
.1a2136	a7 00		lda [$0800]	loop        LDA [BIP]           ; Get the character
.1a2138	f0 19		beq $1a2153	            BEQ end_of_line     ; EOL? Yes: move to the next line
.1a213a	c5 37		cmp $0837	            CMP TARGETTOK       ; Is it the one we want?
.1a213c	f0 2c		beq $1a216a	            BEQ check_depth     ; Yes: check the depth
.1a213e	c9 9b		cmp #$9b	            CMP #TOK_FOR        ; Is it a FOR?
.1a2140	f0 1e		beq $1a2160	            BEQ inc_nesting     ; Yes: increment NESTING
.1a2142	c9 9f		cmp #$9f	            CMP #TOK_DO         ; Is it a DO?
.1a2144	f0 1a		beq $1a2160	            BEQ inc_nesting     ; Yes: increment NESTING
.1a2146	c9 9e		cmp #$9e	            CMP #TOK_NEXT       ; Is it a NEXT?
.1a2148	f0 1a		beq $1a2164	            BEQ dec_nesting     ; Yes: decrement NESTING
.1a214a	c9 a0		cmp #$a0	            CMP #TOK_LOOP       ; Is it a LOOP?
.1a214c	f0 16		beq $1a2164	            BEQ dec_nesting     ; Yes: decrement NESTING
.1a214e					incloop
.1a214e	20 da 20	jsr $1a20da	            JSR INCBIP
.1a2151	80 e3		bra $1a2136	            BRA loop            ; and keep scanning
.1a2153					end_of_line
.1a2153	20 b7 21	jsr $1a21b7	            JSR NEXTLINE
.1a2156	c2 20		rep #$20	            REP #$20
.1a2158	a5 d7		lda $08d7	            LDA LINENUM         ; Check the line number
.1a215a	f0 1d		beq $1a2179	            BEQ syntax_err1     ; If it's zero, we reached the end of the program
.1a215c	e2 20		sep #$20	            SEP #$20
.1a215e	80 d6		bra $1a2136	            BRA loop            ; And keep scanning
.1a2160					inc_nesting
.1a2160	e6 36		inc $0836	            INC NESTING         ; Track that we have entered a lexical scope for a FOR/DO
.1a2162	80 ea		bra $1a214e	            BRA incloop
.1a2164					dec_nesting
.1a2164	c6 36		dec $0836	            DEC NESTING         ; Track that we have left a lexical scope for a FOR/DO
.1a2166	30 30		bmi $1a2198	            BMI syntax_err2     ; If the depth goes <0, throw a syntax error
.1a2168	80 e4		bra $1a214e	            BRA incloop
.1a216a					check_depth
.1a216a	a5 35		lda $0835	            LDA SKIPNEST        ; Check to see if nesting matters
.1a216c	30 06		bmi $1a2174	            BMI found           ; No: just return that we found the token
.1a216e	a5 36		lda $0836	            LDA NESTING         ; Get the nesting depth
.1a2170	f0 02		beq $1a2174	            BEQ found           ; If it's zero, we found our token
.1a2172	80 da		bra $1a214e	            BRA incloop         ; Otherwise: it's a token for an enclosed FOR/DO, keep scanning
.1a2174					found
.1a2174	20 da 20	jsr $1a20da	            JSR INCBIP
.1a2177	28		plp		            PLP
.1a2178	60		rts		            RTS
.1a2179					syntax_err1
.1a2179	08		php		            PHP
.1a217a	c2 20		rep #$20	            REP #$20
.1a217c	48		pha		            PHA
.1a217d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2180	5b		tcd		            TCD
.1a2181	68		pla		            PLA
.1a2182	28		plp		            PLP
.1a2183	e2 20		sep #$20	            SEP #$20
.1a2185	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a2187	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a218b	c2 20		rep #$20	            REP #$20
.1a218d	29 ff 00	and #$00ff	            AND #$00FF
.1a2190	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2193	e2 20		sep #$20	            SEP #$20
.1a2195	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2198					syntax_err2
.1a2198	08		php		            PHP
.1a2199	c2 20		rep #$20	            REP #$20
.1a219b	48		pha		            PHA
.1a219c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a219f	5b		tcd		            TCD
.1a21a0	68		pla		            PLA
.1a21a1	28		plp		            PLP
.1a21a2	e2 20		sep #$20	            SEP #$20
.1a21a4	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a21a6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a21aa	c2 20		rep #$20	            REP #$20
.1a21ac	29 ff 00	and #$00ff	            AND #$00FF
.1a21af	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a21b2	e2 20		sep #$20	            SEP #$20
.1a21b4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a21b7					NEXTLINE
.1a21b7	08		php		            PHP
.1a21b8	c2 30		rep #$30	            REP #$30
.1a21ba	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a21bd	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the offset to the next line
.1a21bf	85 0c		sta $080c	            STA SCRATCH
.1a21c1	18		clc		            CLC                 ; Compute the new CURLINE
.1a21c2	a5 1a		lda $081a	            LDA CURLINE         ; CURLINE := [CURLINE].LINE_LINK
.1a21c4	65 0c		adc $080c	            ADC SCRATCH
.1a21c6	85 1a		sta $081a	            STA CURLINE
.1a21c8	a5 1c		lda $081c	            LDA CURLINE+2
.1a21ca	69 00 00	adc #$0000	            ADC #0
.1a21cd	85 1c		sta $081c	            STA CURLINE+2
.1a21cf	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the LINENUM to the new current line's number
.1a21d2	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; LINENUM := [CURLINE].LINE_NUMBER
.1a21d4	85 d7		sta $08d7	            STA LINENUM
.1a21d6	18		clc		            CLC                 ; Point BIP to the first character of the line
.1a21d7	a5 1a		lda $081a	            LDA CURLINE         ; BIP := CURLINE + LINE_TOKENS
.1a21d9	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a21dc	85 00		sta $0800	            STA BIP
.1a21de	a5 1c		lda $081c	            LDA CURLINE+2
.1a21e0	69 00 00	adc #$0000	            ADC #0
.1a21e3	85 02		sta $0802	            STA BIP+2
.1a21e5	28		plp		            PLP
.1a21e6	60		rts		            RTS
.1a21e7					EXPECT_TOK
.1a21e7	08		php		            PHP
.1a21e8	e2 20		sep #$20	            SEP #$20
.1a21ea	48		pha		            PHA
.1a21eb	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a21ee	68		pla		            PLA
.1a21ef	e2 20		sep #$20	            SEP #$20
.1a21f1	c7 00		cmp [$0800]	            CMP [BIP]           ; Check the character at BIP
.1a21f3	d0 08		bne $1a21fd	            BNE syntax_err      ; Throw a syntax error
.1a21f5	20 da 20	jsr $1a20da	            JSR INCBIP
.1a21f8	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a21fb	28		plp		            PLP
.1a21fc	60		rts		            RTS
.1a21fd					syntax_err
.1a21fd	08		php		            PHP
.1a21fe	c2 20		rep #$20	            REP #$20
.1a2200	48		pha		            PHA
.1a2201	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2204	5b		tcd		            TCD
.1a2205	68		pla		            PLA
.1a2206	28		plp		            PLP
.1a2207	e2 20		sep #$20	            SEP #$20
.1a2209	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a220b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a220f	c2 20		rep #$20	            REP #$20
.1a2211	29 ff 00	and #$00ff	            AND #$00FF
.1a2214	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2217	e2 20		sep #$20	            SEP #$20
.1a2219	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a221c					OPT_TOK
.1a221c	08		php		            PHP
.1a221d	e2 20		sep #$20	            SEP #$20
.1a221f	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a2222	e2 20		sep #$20	            SEP #$20
.1a2224	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the character at BIP
.1a2226	f0 10		beq $1a2238	            BEQ ret_false       ; If end-of-line, return false
.1a2228	c9 3a		cmp #$3a	            CMP #':'
.1a222a	f0 0c		beq $1a2238	            BEQ ret_false       ; If colon, return false
.1a222c	c5 37		cmp $0837	            CMP TARGETTOK
.1a222e	f0 05		beq $1a2235	            BEQ ret_true        ; If matches, return true
.1a2230	20 da 20	jsr $1a20da	            JSR INCBIP
.1a2233	80 ef		bra $1a2224	            BRA loop
.1a2235	28		plp		ret_true    PLP
.1a2236	38		sec		            SEC
.1a2237	60		rts		            RTS
.1a2238	28		plp		ret_false   PLP
.1a2239	18		clc		            CLC
.1a223a	60		rts		            RTS
.1a223b					PEEK_TOK
.1a223b	5a		phy		            PHY
.1a223c	08		php		            PHP
.1a223d	e2 20		sep #$20	            SEP #$20
.1a223f	a0 00 00	ldy #$0000	            LDY #0
.1a2242	b7 00		lda [$0800],y	loop        LDA [BIP],Y
.1a2244	f0 0d		beq $1a2253	            BEQ done
.1a2246	c9 3a		cmp #$3a	            CMP #':'
.1a2248	f0 07		beq $1a2251	            BEQ ret_null
.1a224a	c9 20		cmp #$20	            CMP #CHAR_SP
.1a224c	d0 05		bne $1a2253	            BNE done
.1a224e	c8		iny		            INY
.1a224f	80 f1		bra $1a2242	            BRA loop
.1a2251	a9 00		lda #$00	ret_null    LDA #0
.1a2253	28		plp		done        PLP
.1a2254	7a		ply		            PLY
.1a2255	60		rts		            RTS
.1a2256					EXECSTMT
.1a2256	08		php		            PHP
.1a2257	0b		phd		            PHD
.1a2258	8b		phb		            PHB
.1a2259	08		php		            PHP
.1a225a	c2 20		rep #$20	            REP #$20
.1a225c	48		pha		            PHA
.1a225d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2260	5b		tcd		            TCD
.1a2261	68		pla		            PLA
.1a2262	28		plp		            PLP
.1a2263	20 48 19	jsr $1a1948	            JSR INITEVALSP
.1a2266	e2 20		sep #$20	            SEP #$20
.1a2268	a9 00		lda #$00	            LDA #EXEC_CONT      ; This will tell EXECLINE and EXECPROG to procede in a
.1a226a	85 dc		sta $08dc	            STA EXECACTION      ; linear fashion through the program
.1a226c	22 3c 11 00	jsl $00113c	check_break JSL FK_TESTBREAK
.1a2270	b0 4b		bcs $1a22bd	            BCS throw_break     ; If C: user pressed an interrupt key, stop the program
.1a2272	a7 00		lda [$0800]	            LDA [BIP]           ; If we happen to have a colon, just skip over it.
.1a2274	c9 3a		cmp #$3a	            CMP #':'            ; This can happen with FOR/NEXT
.1a2276	d0 03		bne $1a227b	            BNE eat_ws
.1a2278	20 da 20	jsr $1a20da	            JSR INCBIP
.1a227b					eat_ws
.1a227b	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a227e	a7 00		lda [$0800]	            LDA [BIP]
.1a2280	d0 03		bne $1a2285	            BNE else
.1a2282	4c 07 23	jmp $1a2307	            JMP done            ; If the current byte is 0, we're at the end of the line, just return
.1a2285					else
.1a2285	20 a7 04	jsr $1a04a7	            JSR ISALPHA
.1a2288	b0 52		bcs $1a22dc	            BCS is_variable     ; Yes: we may have a LET statement
.1a228a	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it's any other non-token
.1a228c	10 10		bpl $1a229e	            BPL error           ; Yes: it's a syntax error
.1a228e	20 6c 0c	jsr $1a0c6c	            JSR TOKTYPE
.1a2291	85 0c		sta $080c	            STA SCRATCH         ; Save the type for later
.1a2293	c9 20		cmp #$20	            CMP #TOK_TY_STMNT   ; Is it a statement?
.1a2295	d0 03		bne $1a229a	            BNE else2
.1a2297	4c f5 22	jmp $1a22f5	            JMP ok_to_exec      ; Yes: it's ok to try to execute it
.1a229a	a5 d2		lda $08d2	else2       LDA STATE           ; Check to see if we're in interactive mode
.1a229c	f0 51		beq $1a22ef	            BEQ is_interact
.1a229e					error
.1a229e	08		php		            PHP
.1a229f	c2 20		rep #$20	            REP #$20
.1a22a1	48		pha		            PHA
.1a22a2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a22a5	5b		tcd		            TCD
.1a22a6	68		pla		            PLA
.1a22a7	28		plp		            PLP
.1a22a8	e2 20		sep #$20	            SEP #$20
.1a22aa	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a22ac	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a22b0	c2 20		rep #$20	            REP #$20
.1a22b2	29 ff 00	and #$00ff	            AND #$00FF
.1a22b5	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a22b8	e2 20		sep #$20	            SEP #$20
.1a22ba	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a22bd					throw_break
.1a22bd	08		php		            PHP
.1a22be	c2 20		rep #$20	            REP #$20
.1a22c0	48		pha		            PHA
.1a22c1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a22c4	5b		tcd		            TCD
.1a22c5	68		pla		            PLA
.1a22c6	28		plp		            PLP
.1a22c7	e2 20		sep #$20	            SEP #$20
.1a22c9	a9 01		lda #$01	            LDA #ERR_BREAK
.1a22cb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a22cf	c2 20		rep #$20	            REP #$20
.1a22d1	29 ff 00	and #$00ff	            AND #$00FF
.1a22d4	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a22d7	e2 20		sep #$20	            SEP #$20
.1a22d9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a22dc					is_variable
.1a22dc	20 3f 44	jsr $1a443f	            JSR S_LET
.1a22df	4c 07 23	jmp $1a2307	            JMP done
.1a22e2					STSTUB
.1a22e2	08		php		            PHP
.1a22e3	e2 20		sep #$20	            SEP #$20
.1a22e5	48		pha		            PHA
.1a22e6	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a22e8	48		pha		            PHA
.1a22e9	ab		plb		            PLB
.1a22ea	68		pla		            PLA
.1a22eb	28		plp		            PLP
.1a22ec	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a22ef	a5 0c		lda $080c	is_interact LDA SCRATCH         ; Get the token type
.1a22f1	c9 10		cmp #$10	            CMP #TOK_TY_CMD     ; Is it a command?
.1a22f3	d0 a9		bne $1a229e	            BNE error           ; If not, it's an error
.1a22f5					ok_to_exec
.1a22f5	a7 00		lda [$0800]	            LDA [BIP]           ; Get the original token again
.1a22f7	20 49 0c	jsr $1a0c49	            JSR TOKEVAL
.1a22fa	c2 20		rep #$20	            REP #$20
.1a22fc	85 2f		sta $082f	            STA JMP16PTR        ; Store it in the jump pointer
.1a22fe	20 48 19	jsr $1a1948	            JSR INITEVALSP
.1a2301	20 da 20	jsr $1a20da	            JSR INCBIP
.1a2304	20 e2 22	jsr $1a22e2	            JSR STSTUB
.1a2307	ab		plb		done        PLB
.1a2308	2b		pld		            PLD
.1a2309	28		plp		            PLP
.1a230a	60		rts		            RTS
.1a230b					EXECCMD
.1a230b	08		php		            PHP
.1a230c	58		cli		            CLI
.1a230d	20 9b 20	jsr $1a209b	            JSR SETINTERACT
.1a2310	20 c0 1d	jsr $1a1dc0	            JSR INITRETURN
.1a2313	e2 20		sep #$20	            SEP #$20
.1a2315	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.1a2318	c2 20		rep #$20	            REP #$20
.1a231a	a5 1a		lda $081a	            LDA CURLINE         ; Set the BASIC Instruction Pointer to the first byte of the line
.1a231c	85 00		sta $0800	            STA BIP
.1a231e	a5 1c		lda $081c	            LDA CURLINE+2
.1a2320	85 02		sta $0802	            STA BIP+2
.1a2322	4c 4c 23	jmp $1a234c	            JMP exec_loop
.1a2325	08		php		EXECLINE    PHP
.1a2326	c2 20		rep #$20	            REP #$20
.1a2328	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER            ; Set the current line number
.1a232b	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.1a232d	85 d7		sta $08d7	            STA LINENUM
.1a232f	20 b5 14	jsr $1a14b5	            JSR CLRTMPSTR
.1a2332	e2 20		sep #$20	            SEP #$20
.1a2334	a5 dc		lda $08dc	            LDA EXECACTION              ; If the last EXEC action was RETURN
.1a2336	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; BIP has already been set, so...
.1a2338	f0 12		beq $1a234c	            BEQ exec_loop               ; Skip over setting the BIP to the beginning of the line
.1a233a	c2 20		rep #$20	            REP #$20
.1a233c	18		clc		            CLC                         ; Set the BASIC Instruction Pointer to the first byte of the line
.1a233d	a5 1a		lda $081a	            LDA CURLINE
.1a233f	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2342	85 00		sta $0800	            STA BIP
.1a2344	e2 20		sep #$20	            SEP #$20
.1a2346	a5 1c		lda $081c	            LDA CURLINE+2
.1a2348	69 00		adc #$00	            ADC #0
.1a234a	85 02		sta $0802	            STA BIP+2
.1a234c					exec_loop
.1a234c	c2 20		rep #$20	            REP #$20
.1a234e	20 56 22	jsr $1a2256	            JSR EXECSTMT
.1a2351	e2 20		sep #$20	            SEP #$20
.1a2353	a5 dc		lda $08dc	            LDA EXECACTION
.1a2355	c9 03		cmp #$03	            CMP #EXEC_RETURN
.1a2357	f0 f3		beq $1a234c	            BEQ exec_loop
.1a2359	c9 00		cmp #$00	            CMP #EXEC_CONT              ; If it's not EXEC_CONT, exit to the caller
.1a235b	d0 31		bne $1a238e	            BNE exec_done
.1a235d	e2 20		sep #$20	            SEP #$20
.1a235f	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a2362	a7 00		lda [$0800]	            LDA [BIP]                   ; Get the current character in the line
.1a2364	f0 28		beq $1a238e	            BEQ exec_done               ; If it's NULL, we're done
.1a2366	c9 3a		cmp #$3a	            CMP #':'                    ; If it's colon, we have more statements
.1a2368	f0 1f		beq $1a2389	            BEQ skip_loop               ; Skip over it and try to execute the next one
.1a236a	08		php		            PHP
.1a236b	c2 20		rep #$20	            REP #$20
.1a236d	48		pha		            PHA
.1a236e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2371	5b		tcd		            TCD
.1a2372	68		pla		            PLA
.1a2373	28		plp		            PLP
.1a2374	e2 20		sep #$20	            SEP #$20
.1a2376	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a2378	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a237c	c2 20		rep #$20	            REP #$20
.1a237e	29 ff 00	and #$00ff	            AND #$00FF
.1a2381	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2384	e2 20		sep #$20	            SEP #$20
.1a2386	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2389					skip_loop
.1a2389	20 da 20	jsr $1a20da	            JSR INCBIP
.1a238c	80 be		bra $1a234c	            BRA exec_loop               ; And try to execute another statement
.1a238e					exec_done
.1a238e	28		plp		            PLP
.1a238f	60		rts		            RTS
.1a2390					EXECPROGRAM
.1a2390	08		php		            PHP
.1a2391	58		cli		            CLI
.1a2392	e2 20		sep #$20	            SEP #$20
.1a2394	a9 80		lda #$80	            LDA #ST_RUNNING
.1a2396	85 d2		sta $08d2	            STA STATE
.1a2398	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.1a239b	20 c0 1d	jsr $1a1dc0	            JSR INITRETURN
.1a239e	c2 30		rep #$30	            REP #$30
.1a23a0	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the count of GOSUBs
.1a23a2	a0 02 00	ldy #$0002	exec_loop   LDY #LINE_NUMBER
.1a23a5	b7 1a		lda [$081a],y	            LDA [CURLINE],Y             ; Get the line number of the current line
.1a23a7	f0 29		beq $1a23d2	            BEQ done                    ; If it's 0, we are finished running code (implicit END)
.1a23a9	20 25 23	jsr $1a2325	            JSR EXECLINE
.1a23ac	e2 20		sep #$20	            SEP #$20
.1a23ae	a5 dc		lda $08dc	            LDA EXECACTION              ; Check the EXECACTION from the last line
.1a23b0	c9 01		cmp #$01	            CMP #EXEC_STOP              ; Stop execution of the program?
.1a23b2	f0 1e		beq $1a23d2	            BEQ done
.1a23b4	c9 02		cmp #$02	            CMP #EXEC_GOTO              ; Transfer execution to a new CURLINE that is already set
.1a23b6	f0 ea		beq $1a23a2	            BEQ exec_loop
.1a23b8	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; Transfer execution to the CURLINE and BIP that is already set
.1a23ba	f0 e6		beq $1a23a2	            BEQ exec_loop
.1a23bc	c2 20		rep #$20	            REP #$20
.1a23be	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a23c1	18		clc		            CLC
.1a23c2	a5 1a		lda $081a	            LDA CURLINE
.1a23c4	77 1a		adc [$081a],y	            ADC [CURLINE],Y
.1a23c6	85 1a		sta $081a	            STA CURLINE
.1a23c8	e2 20		sep #$20	            SEP #$20
.1a23ca	a5 1c		lda $081c	            LDA CURLINE+2
.1a23cc	69 00		adc #$00	            ADC #0
.1a23ce	85 1c		sta $081c	            STA CURLINE+2
.1a23d0	80 d0		bra $1a23a2	            BRA exec_loop               ; And try to execute that line
.1a23d2					done
.1a23d2	e2 20		sep #$20	            SEP #$20
.1a23d4	a9 00		lda #$00	            LDA #ST_INTERACT            ; Set interpreter state to RUNNING
.1a23d6	85 d2		sta $08d2	            STA STATE
.1a23d8	28		plp		            PLP
.1a23d9	60		rts		            RTS
.1a23da					FINDLINE
.1a23da	08		php		            PHP
.1a23db	c2 30		rep #$30	            REP #$30
.1a23dd	c2 20		rep #$20	            REP #$20
.1a23df	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT            ; INDEX points to the first line of the program
.1a23e2	85 08		sta $0808	            STA INDEX
.1a23e4	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a23e7	85 0a		sta $080a	            STA INDEX+2
.1a23e9	c2 20		rep #$20	            REP #$20
.1a23eb	a0 02 00	ldy #$0002	check_nmbrs LDY #LINE_NUMBER            ; Get the number of the possible target line
.1a23ee	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a23f0	f0 31		beq $1a2423	            BEQ ret_false               ; If new line number is 0, we got to the
.1a23f2	c5 23		cmp $0823	            CMP ARGUMENT1               ; Compare it to the target line number
.1a23f4	f0 1e		beq $1a2414	            BEQ found
.1a23f6	b0 2b		bcs $1a2423	            BGE ret_false               ; If the line number > target line number, the line is not present
.1a23f8					next_line
.1a23f8	c2 20		rep #$20	            REP #$20
.1a23fa	a0 00 00	ldy #$0000	            LDY #LINE_LINK              ; INDEX := INDEX + [INDEX].LINK
.1a23fd	18		clc		            CLC
.1a23fe	a5 08		lda $0808	            LDA INDEX
.1a2400	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a2402	85 0c		sta $080c	            STA SCRATCH
.1a2404	e2 20		sep #$20	            SEP #$20
.1a2406	a5 0a		lda $080a	            LDA INDEX+2
.1a2408	69 00		adc #$00	            ADC #0
.1a240a	85 0a		sta $080a	            STA INDEX+2
.1a240c	c2 20		rep #$20	            REP #$20
.1a240e	a5 0c		lda $080c	            LDA SCRATCH
.1a2410	85 08		sta $0808	            STA INDEX
.1a2412	80 d7		bra $1a23eb	            BRA check_nmbrs             ; And go back to check the new line INDEX is pointing to
.1a2414					found
.1a2414	c2 20		rep #$20	            REP #$20
.1a2416	a5 08		lda $0808	            LDA INDEX
.1a2418	85 1a		sta $081a	            STA CURLINE
.1a241a	e2 20		sep #$20	            SEP #$20
.1a241c	a5 0a		lda $080a	            LDA INDEX+2
.1a241e	85 1c		sta $081c	            STA CURLINE+2
.1a2420	28		plp		ret_true    PLP                         ; Return true to indicate we've found the line
.1a2421	38		sec		            SEC
.1a2422	60		rts		            RTS
.1a2423	28		plp		ret_false   PLP
.1a2424	18		clc		            CLC
.1a2425	60		rts		            RTS
.1a2426					MVPROGDN
.1a2426	08		php		            PHP
.1a2427					mvd_loop
.1a2427	e2 20		sep #$20	            SEP #$20
.1a2429	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.1a242b	87 08		sta [$0808]	            STA [INDEX]
.1a242d	c2 20		rep #$20	            REP #$20
.1a242f	a5 0c		lda $080c	            LDA SCRATCH
.1a2431	c5 00		cmp $0800	            CMP BIP
.1a2433	d0 08		bne $1a243d	            BNE increment
.1a2435	e2 20		sep #$20	            SEP #$20
.1a2437	a5 0e		lda $080e	            LDA SCRATCH+2
.1a2439	c5 02		cmp $0802	            CMP BIP+2
.1a243b	f0 26		beq $1a2463	            BEQ done            ; Yes: return
.1a243d					increment
.1a243d	c2 20		rep #$20	            REP #$20
.1a243f	18		clc		            CLC
.1a2440	a5 0c		lda $080c	            LDA SCRATCH
.1a2442	69 01 00	adc #$0001	            ADC #1
.1a2445	85 0c		sta $080c	            STA SCRATCH
.1a2447	e2 20		sep #$20	            SEP #$20
.1a2449	a5 0e		lda $080e	            LDA SCRATCH+2
.1a244b	69 00		adc #$00	            ADC #0
.1a244d	85 0e		sta $080e	            STA SCRATCH+2
.1a244f	c2 20		rep #$20	            REP #$20
.1a2451	18		clc		            CLC
.1a2452	a5 08		lda $0808	            LDA INDEX
.1a2454	69 01 00	adc #$0001	            ADC #1
.1a2457	85 08		sta $0808	            STA INDEX
.1a2459	e2 20		sep #$20	            SEP #$20
.1a245b	a5 0a		lda $080a	            LDA INDEX+2
.1a245d	69 00		adc #$00	            ADC #0
.1a245f	85 0a		sta $080a	            STA INDEX+2
.1a2461	80 c4		bra $1a2427	            BRA mvd_loop        ; And try again
.1a2463	28		plp		done        PLP
.1a2464	60		rts		            RTS
.1a2465					MVPROGUP
.1a2465	08		php		            PHP
.1a2466					mvu_loop
.1a2466	e2 20		sep #$20	            SEP #$20
.1a2468	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.1a246a	87 08		sta [$0808]	            STA [INDEX]
.1a246c	c2 20		rep #$20	            REP #$20
.1a246e	a5 0c		lda $080c	            LDA SCRATCH
.1a2470	c5 00		cmp $0800	            CMP BIP
.1a2472	d0 06		bne $1a247a	            BNE decrement
.1a2474	a5 0e		lda $080e	            LDA SCRATCH+2
.1a2476	c5 02		cmp $0802	            CMP BIP+2
.1a2478	f0 26		beq $1a24a0	            BEQ done            ; Yes: return
.1a247a					decrement
.1a247a	c2 20		rep #$20	            REP #$20
.1a247c	38		sec		            SEC
.1a247d	a5 0c		lda $080c	            LDA SCRATCH
.1a247f	e9 01 00	sbc #$0001	            SBC #1
.1a2482	85 0c		sta $080c	            STA SCRATCH
.1a2484	e2 20		sep #$20	            SEP #$20
.1a2486	a5 0e		lda $080e	            LDA SCRATCH+2
.1a2488	e9 00		sbc #$00	            SBC #0
.1a248a	85 0e		sta $080e	            STA SCRATCH+2
.1a248c	c2 20		rep #$20	            REP #$20
.1a248e	38		sec		            SEC
.1a248f	a5 08		lda $0808	            LDA INDEX
.1a2491	e9 01 00	sbc #$0001	            SBC #1
.1a2494	85 08		sta $0808	            STA INDEX
.1a2496	e2 20		sep #$20	            SEP #$20
.1a2498	a5 0a		lda $080a	            LDA INDEX+2
.1a249a	e9 00		sbc #$00	            SBC #0
.1a249c	85 0a		sta $080a	            STA INDEX+2
.1a249e	80 c6		bra $1a2466	            BRA mvu_loop        ; And try again
.1a24a0	28		plp		done        PLP
.1a24a1	60		rts		            RTS
.1a24a2					DELLINE
.1a24a2	08		php		            PHP
.1a24a3	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; SCRATCH := INDEX + [INDEX].LINK (address of the following line)
.1a24a6	c2 20		rep #$20	            REP #$20
.1a24a8	18		clc		            CLC
.1a24a9	a5 08		lda $0808	            LDA INDEX
.1a24ab	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a24ad	85 0c		sta $080c	            STA SCRATCH
.1a24af	e2 20		sep #$20	            SEP #$20
.1a24b1	a5 0a		lda $080a	            LDA INDEX+2
.1a24b3	69 00		adc #$00	            ADC #0
.1a24b5	85 0e		sta $080e	            STA SCRATCH+2
.1a24b7	c2 20		rep #$20	            REP #$20
.1a24b9	18		clc		            CLC
.1a24ba	a5 d9		lda $08d9	            LDA LASTLINE
.1a24bc	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a24bf	85 00		sta $0800	            STA BIP
.1a24c1	e2 20		sep #$20	            SEP #$20
.1a24c3	a5 db		lda $08db	            LDA LASTLINE+2
.1a24c5	69 00		adc #$00	            ADC #0
.1a24c7	85 02		sta $0802	            STA BIP+2
.1a24c9	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; LASTLINE := LASTLINE - [INDEX].LINK
.1a24cc	c2 20		rep #$20	            REP #$20
.1a24ce	38		sec		            SEC
.1a24cf	a5 d9		lda $08d9	            LDA LASTLINE
.1a24d1	f7 08		sbc [$0808],y	            SBC [INDEX],Y
.1a24d3	85 d9		sta $08d9	            STA LASTLINE
.1a24d5	e2 20		sep #$20	            SEP #$20
.1a24d7	a5 db		lda $08db	            LDA LASTLINE+2
.1a24d9	e9 00		sbc #$00	            SBC #0
.1a24db	85 db		sta $08db	            STA LASTLINE+2
.1a24dd	20 26 24	jsr $1a2426	            JSR MVPROGDN
.1a24e0					done
.1a24e0	20 35 44	jsr $1a4435	            JSR S_CLR
.1a24e3	28		plp		            PLP
.1a24e4	60		rts		            RTS
.1a24e5					APPLINE
.1a24e5	08		php		            PHP
.1a24e6	08		php		            PHP
.1a24e7	c2 20		rep #$20	            REP #$20
.1a24e9	48		pha		            PHA
.1a24ea	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a24ed	5b		tcd		            TCD
.1a24ee	68		pla		            PLA
.1a24ef	28		plp		            PLP
.1a24f0	c2 30		rep #$30	            REP #$30
.1a24f2	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the line number of the new line
.1a24f5	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.1a24f7	18		clc		            CLC                 ; Point INDEX to the position to store the tokens
.1a24f8	a5 d9		lda $08d9	            LDA LASTLINE
.1a24fa	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a24fd	85 08		sta $0808	            STA INDEX
.1a24ff	e2 20		sep #$20	            SEP #$20
.1a2501	a5 db		lda $08db	            LDA LASTLINE+2
.1a2503	69 00		adc #$00	            ADC #0
.1a2505	85 0a		sta $080a	            STA INDEX+2
.1a2507	e2 20		sep #$20	            SEP #$20
.1a2509	a0 00 00	ldy #$0000	            LDY #0
.1a250c	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Copy the tokenized line to its place in the code
.1a250e	97 08		sta [$0808],y	            STA [INDEX],Y
.1a2510	f0 03		beq $1a2515	            BEQ copy_done
.1a2512	c8		iny		            INY
.1a2513	80 f7		bra $1a250c	            BRA copy_loop
.1a2515					copy_done
.1a2515	c2 20		rep #$20	            REP #$20
.1a2517	98		tya		            TYA
.1a2518	18		clc		            CLC
.1a2519	69 05 00	adc #$0005	            ADC #LINE_TOKENS+1
.1a251c	85 0c		sta $080c	            STA SCRATCH
.1a251e	c2 20		rep #$20	            REP #$20
.1a2520	a0 00 00	ldy #$0000	            LDY #LINE_LINK      ; Set link to the offset to the next line
.1a2523	a5 0c		lda $080c	            LDA SCRATCH
.1a2525	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.1a2527	c2 20		rep #$20	            REP #$20
.1a2529	18		clc		            CLC
.1a252a	a5 d9		lda $08d9	            LDA LASTLINE
.1a252c	65 0c		adc $080c	            ADC SCRATCH
.1a252e	85 0c		sta $080c	            STA SCRATCH
.1a2530	e2 20		sep #$20	            SEP #$20
.1a2532	a5 db		lda $08db	            LDA LASTLINE+2
.1a2534	69 00		adc #$00	            ADC #0
.1a2536	85 db		sta $08db	            STA LASTLINE+2
.1a2538	c2 20		rep #$20	            REP #$20
.1a253a	a5 0c		lda $080c	            LDA SCRATCH
.1a253c	85 d9		sta $08d9	            STA LASTLINE
.1a253e	c2 20		rep #$20	            REP #$20
.1a2540	a0 00 00	ldy #$0000	            LDY #0
.1a2543	a9 00 00	lda #$0000	            LDA #0
.1a2546	97 d9		sta [$08d9],y	blank_loop  STA [LASTLINE],Y    ; Set the "line" after the last line to nulls
.1a2548	c8		iny		            INY
.1a2549	c0 05 00	cpy #$0005	            CPY #LINE_TOKENS+1
.1a254c	d0 f8		bne $1a2546	            BNE blank_loop
.1a254e	20 35 44	jsr $1a4435	            JSR S_CLR
.1a2551	28		plp		            PLP
.1a2552	60		rts		            RTS
.1a2553					FINDINSPT
.1a2553	0b		phd		            PHD
.1a2554	08		php		            PHP
.1a2555	08		php		            PHP
.1a2556	c2 20		rep #$20	            REP #$20
.1a2558	48		pha		            PHA
.1a2559	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a255c	5b		tcd		            TCD
.1a255d	68		pla		            PLA
.1a255e	28		plp		            PLP
.1a255f	c2 30		rep #$30	            REP #$30
.1a2561	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a2564	85 08		sta $0808	            STA INDEX
.1a2566	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a2569	85 0a		sta $080a	            STA INDEX+2
.1a256b	a0 02 00	ldy #$0002	loop        LDY #LINE_NUMBER
.1a256e	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a2570	f0 1d		beq $1a258f	            BEQ found_end           ; Got to end without finding it
.1a2572	c5 d7		cmp $08d7	            CMP LINENUM
.1a2574	f0 25		beq $1a259b	            BEQ found_line          ; LINENUM = [INDEX].LINE_NUMBER: return we found the exact line
.1a2576	b0 1d		bcs $1a2595	            BGE found_spot          ; LINENUM > [INDEX].LINE_NUMBER: return we found spot to insert
.1a2578	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a257b	18		clc		            CLC                     ; Move INDEX to the next line
.1a257c	a5 08		lda $0808	            LDA INDEX
.1a257e	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a2580	85 0c		sta $080c	            STA SCRATCH
.1a2582	a5 0a		lda $080a	            LDA INDEX+2
.1a2584	69 00 00	adc #$0000	            ADC #0
.1a2587	85 0a		sta $080a	            STA INDEX+2
.1a2589	a5 0c		lda $080c	            LDA SCRATCH
.1a258b	85 08		sta $0808	            STA INDEX
.1a258d	80 dc		bra $1a256b	            BRA loop                ; And check that line
.1a258f	a9 00 00	lda #$0000	found_end   LDA #0                  ; Return that we reached the end of the program
.1a2592	28		plp		            PLP
.1a2593	2b		pld		            PLD
.1a2594	60		rts		            RTS
.1a2595	a9 01 00	lda #$0001	found_spot  LDA #1                  ; Return that we the found the spot to insert the line
.1a2598	28		plp		            PLP                     ; But that it wasn't already there
.1a2599	2b		pld		            PLD
.1a259a	60		rts		            RTS
.1a259b	a9 02 00	lda #$0002	found_line  LDA #2                  ; Return that we found the line
.1a259e	28		plp		            PLP
.1a259f	2b		pld		            PLD
.1a25a0	60		rts		            RTS
.1a25a1					INSLINE
.1a25a1	08		php		            PHP
.1a25a2	c2 30		rep #$30	            REP #$30
.1a25a4	a9 05 00	lda #$0005	            LDA #LINE_TOKENS+1  ; Set SCRATCH2 to the size of the line header with the end-of-line
.1a25a7	85 10		sta $0810	            STA SCRATCH2
.1a25a9	a0 00 00	ldy #$0000	            LDY #0
.1a25ac					count_loop
.1a25ac	e2 20		sep #$20	            SEP #$20
.1a25ae	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the byte of the line
.1a25b0	f0 07		beq $1a25b9	            BEQ shift_prog      ; If it's end-of-line, SCRATCH2 is the length
.1a25b2	c2 20		rep #$20	            REP #$20
.1a25b4	e6 10		inc $0810	            INC SCRATCH2
.1a25b6	c8		iny		            INY
.1a25b7	80 f3		bra $1a25ac	            BRA count_loop      ; Count and continue
.1a25b9					shift_prog
.1a25b9	c2 20		rep #$20	            REP #$20
.1a25bb	a5 08		lda $0808	            LDA INDEX           ; BIP = the address of the first byte for the new line
.1a25bd	85 00		sta $0800	            STA BIP
.1a25bf	a5 0a		lda $080a	            LDA INDEX+2
.1a25c1	85 02		sta $0802	            STA BIP+2
.1a25c3	18		clc		            CLC                 ; SCRATCH = address of highest byte to copy
.1a25c4	a5 d9		lda $08d9	            LDA LASTLINE
.1a25c6	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a25c9	85 0c		sta $080c	            STA SCRATCH
.1a25cb	a5 db		lda $08db	            LDA LASTLINE+2
.1a25cd	69 00 00	adc #$0000	            ADC #0
.1a25d0	85 0e		sta $080e	            STA SCRATCH+2
.1a25d2	18		clc		            CLC                 ; Adjust LASTLINE to its new position after the insert
.1a25d3	a5 d9		lda $08d9	            LDA LASTLINE
.1a25d5	65 10		adc $0810	            ADC SCRATCH2
.1a25d7	85 d9		sta $08d9	            STA LASTLINE
.1a25d9	a5 db		lda $08db	            LDA LASTLINE+2
.1a25db	69 00 00	adc #$0000	            ADC #0
.1a25de	85 db		sta $08db	            STA LASTLINE+2
.1a25e0	18		clc		            CLC                 ; INDEX = address of the highest location to copy into
.1a25e1	a5 d9		lda $08d9	            LDA LASTLINE
.1a25e3	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a25e6	85 08		sta $0808	            STA INDEX
.1a25e8	a5 db		lda $08db	            LDA LASTLINE+2
.1a25ea	69 00 00	adc #$0000	            ADC #0
.1a25ed	85 0a		sta $080a	            STA INDEX+2
.1a25ef	20 65 24	jsr $1a2465	            JSR MVPROGUP
.1a25f2	c2 20		rep #$20	            REP #$20
.1a25f4	a5 10		lda $0810	            LDA SCRATCH2
.1a25f6	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a25f9	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINK_LINK = length of the new line
.1a25fb	a5 d7		lda $08d7	            LDA LINENUM
.1a25fd	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.1a2600	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINE_NUMBER = number of the new line
.1a2602	18		clc		            CLC                 ; Point BIP to the first byte of the new line
.1a2603	a5 00		lda $0800	            LDA BIP
.1a2605	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2608	85 00		sta $0800	            STA BIP
.1a260a	a5 02		lda $0802	            LDA BIP+2
.1a260c	69 00 00	adc #$0000	            ADC #0
.1a260f	85 02		sta $0802	            STA BIP+2
.1a2611	a0 00 00	ldy #$0000	            LDY #0
.1a2614	e2 20		sep #$20	            SEP #$20
.1a2616	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Get the byte of the tokenized line
.1a2618	97 00		sta [$0800],y	            STA [BIP],Y         ; Copy it to its correct location in the program
.1a261a	f0 03		beq $1a261f	            BEQ done            ; If it was end-of-line byte, we're done
.1a261c	c8		iny		            INY
.1a261d	80 f7		bra $1a2616	            BRA copy_loop       ; Otherwise, continue with the next
.1a261f					done
.1a261f	20 35 44	jsr $1a4435	            JSR S_CLR
.1a2622	28		plp		            PLP
.1a2623	60		rts		            RTS
.1a2624					ADDLINE
.1a2624	08		php		            PHP
.1a2625	c2 30		rep #$30	            REP #$30
.1a2627	85 d7		sta $08d7	            STA LINENUM
.1a2629	20 53 25	jsr $1a2553	            JSR FINDINSPT
.1a262c	c9 00 00	cmp #$0000	            CMP #0
.1a262f	f0 2c		beq $1a265d	            BEQ do_append       ; End-of-program found, add the line to the end
.1a2631	c9 01 00	cmp #$0001	            CMP #1
.1a2634	f0 22		beq $1a2658	            BEQ do_insert       ; Spot was found: insertion required
.1a2636	c2 20		rep #$20	            REP #$20
.1a2638	a5 08		lda $0808	            LDA INDEX
.1a263a	48		pha		            PHA
.1a263b	a5 0a		lda $080a	            LDA INDEX+2
.1a263d	48		pha		            PHA
.1a263e	20 a2 24	jsr $1a24a2	            JSR DELLINE
.1a2641	68		pla		            PLA
.1a2642	85 0a		sta $080a	            STA INDEX+2
.1a2644	68		pla		            PLA
.1a2645	85 08		sta $0808	            STA INDEX
.1a2647	a5 1a		lda $081a	            LDA CURLINE         ; Check to see if there is any non-whitespace on the line
.1a2649	85 00		sta $0800	            STA BIP
.1a264b	a5 1c		lda $081c	            LDA CURLINE+2
.1a264d	85 02		sta $0802	            STA BIP+2
.1a264f	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a2652	e2 20		sep #$20	            SEP #$20
.1a2654	a7 00		lda [$0800]	            LDA [BIP]
.1a2656	f0 0a		beq $1a2662	            BEQ done            ; If not, we're done
.1a2658					do_insert
.1a2658	20 a1 25	jsr $1a25a1	            JSR INSLINE
.1a265b	80 05		bra $1a2662	            BRA done
.1a265d	a5 d7		lda $08d7	do_append   LDA LINENUM
.1a265f	20 e5 24	jsr $1a24e5	            JSR APPLINE
.1a2662	28		plp		done        PLP
.1a2663	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\repl.s

="#"					CHAR_DIR = '#'
="|"					CHAR_BRUN = '|'
.1a2664					EXPANDLINE
.1a2664	0b		phd		                PHD
.1a2665	08		php		                PHP
.1a2666	08		php		            PHP
.1a2667	c2 20		rep #$20	            REP #$20
.1a2669	48		pha		            PHA
.1a266a	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a266d	5b		tcd		            TCD
.1a266e	68		pla		            PLA
.1a266f	28		plp		            PLP
.1a2670	e2 20		sep #$20	            SEP #$20
.1a2672	c2 10		rep #$10	            REP #$10
.1a2674	a2 00 00	ldx #$0000	                LDX #0
.1a2677	bd 00 4f	lda $4f00,x	count_loop      LDA INPUTBUF,X              ; Count the number of characters in the input
.1a267a	f0 03		beq $1a267f	                BEQ save_size
.1a267c	e8		inx		                INX
.1a267d	80 f8		bra $1a2677	                BRA count_loop
.1a267f	86 0c		stx $080c	save_size       STX SCRATCH                 ; Save the size in SCRATCH
.1a2681	c2 30		rep #$30	            REP #$30
.1a2683	8a		txa		                TXA
.1a2684	c9 02 00	cmp #$0002	                CMP #2                      ; Are there arguments?
.1a2687	90 12		bcc $1a269b	                BLT start_copy              ; No: just replace the whole string
.1a2689	3a		dec a		                DEC A
.1a268a	18		clc		                CLC
.1a268b	69 00 4f	adc #$4f00	                ADC #<>INPUTBUF
.1a268e	aa		tax		                TAX                         ; X <-- INPUTBUF + len(INPUTBUF) - 1
.1a268f	18		clc		                CLC                         ; Y <-- INPUTBUF + len(INPUTBUF) - 1 + len(substitution)
.1a2690	65 8f		adc $088f	                ADC MCOUNT
.1a2692	a8		tay		                TAY
.1a2693	a5 0c		lda $080c	                LDA SCRATCH
.1a2695	3a		dec a		                DEC A
.1a2696	8b		phb		                PHB
.1a2697	44 00 00	mvp #$00,#$00	                MVP #`INPUTBUF,#`INPUTBUF   ; Make room for the substitition
.1a269a	ab		plb		                PLB
.1a269b					start_copy
.1a269b	c2 20		rep #$20	            REP #$20
.1a269d	a6 55		ldx $0855	                LDX MARG1                   ; Source is data to copy
.1a269f	a0 00 4f	ldy #$4f00	                LDY #<>INPUTBUF             ; Destination is input buffer
.1a26a2	a5 8f		lda $088f	                LDA MCOUNT                  ; Number of bytes to copy
.1a26a4	8b		phb		                PHB
.1a26a5	54 00 1a	mvn #$1a,#$00	                MVN #`EXPANDLINE,#`INPUTBUF ; Copy the data
.1a26a8	ab		plb		                PLB
.1a26a9	e2 20		sep #$20	            SEP #$20
.1a26ab	a5 0c		lda $080c	                LDA SCRATCH                 ; Check again to see if we need quotes
.1a26ad	c9 02		cmp #$02	                CMP #2
.1a26af	90 18		bcc $1a26c9	                BLT done
.1a26b1	a6 8f		ldx $088f	                LDX MCOUNT                  ; If so, add a quote mark here
.1a26b3	a9 22		lda #$22	                LDA #CHAR_DQUOTE
.1a26b5	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a26b8	e8		inx		skip_to_end     INX                         ; Move to the end of the input string
.1a26b9	bd 00 4f	lda $4f00,x	                LDA INPUTBUF,X
.1a26bc	d0 fa		bne $1a26b8	                BNE skip_to_end
.1a26be	a9 22		lda #$22	                LDA #CHAR_DQUOTE            ; Add the quote to the end of the string
.1a26c0	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a26c3	a9 00		lda #$00	                LDA #0                      ; And terminate with a NULL
.1a26c5	e8		inx		                INX
.1a26c6	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a26c9	28		plp		done            PLP
.1a26ca	2b		pld		                PLD
.1a26cb	60		rts		            RTS
.1a26cc					PREPROCESS
.1a26cc	da		phx		                PHX
.1a26cd	5a		phy		                PHY
.1a26ce	8b		phb		                PHB
.1a26cf	0b		phd		                PHD
.1a26d0	08		php		                PHP
.1a26d1	08		php		            PHP
.1a26d2	c2 20		rep #$20	            REP #$20
.1a26d4	48		pha		            PHA
.1a26d5	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a26d8	5b		tcd		            TCD
.1a26d9	68		pla		            PLA
.1a26da	28		plp		            PLP
.1a26db	e2 20		sep #$20	            SEP #$20
.1a26dd	c2 10		rep #$10	            REP #$10
.1a26df	ad 00 4f	lda $4f00	                LDA INPUTBUF            ; Check the first character
.1a26e2	c9 23		cmp #$23	                CMP #CHAR_DIR           ; Is it the DIR character?
.1a26e4	f0 0a		beq $1a26f0	                BEQ expand_dir          ; Yes: expand the DIR command into place
.1a26e6	c9 7c		cmp #$7c	                CMP #CHAR_BRUN          ; Is it the BRUN character?
.1a26e8	f0 17		beq $1a2701	                BEQ expand_brun         ; Yes: expand the BRUN command into place
.1a26ea	28		plp		done            PLP
.1a26eb	2b		pld		                PLD
.1a26ec	ab		plb		                PLB
.1a26ed	7a		ply		                PLY
.1a26ee	fa		plx		                PLX
.1a26ef	60		rts		            RTS
.1a26f0					expand_dir
.1a26f0	c2 20		rep #$20	            REP #$20
.1a26f2	a9 03 00	lda #$0003	                LDA #3                  ; Set size of substitution value
.1a26f5	85 8f		sta $088f	                STA MCOUNT
.1a26f7	a9 12 27	lda #$2712	                LDA #<>dir_text         ; Set pointer to substitution value
.1a26fa	85 55		sta $0855	                STA MARG1
.1a26fc	20 64 26	jsr $1a2664	            JSR EXPANDLINE
.1a26ff	80 e9		bra $1a26ea	                BRA done
.1a2701					expand_brun
.1a2701	c2 20		rep #$20	            REP #$20
.1a2703	a9 04 00	lda #$0004	                LDA #4                  ; Set size of substitution value
.1a2706	85 8f		sta $088f	                STA MCOUNT
.1a2708	a9 16 27	lda #$2716	                LDA #<>brun_text        ; Set pointer to substitution value
.1a270b	85 55		sta $0855	                STA MARG1
.1a270d	20 64 26	jsr $1a2664	            JSR EXPANDLINE
.1a2710	80 d8		bra $1a26ea	                BRA done
>1a2712	44 49 52 00			dir_text        .null "DIR"             ; Expansion of the DIR character
>1a2716	42 52 55 4e 00			brun_text       .null "BRUN"            ; Expansion of the BRUN character
.1a271b					PRREADY
.1a271b	8b		phb		                PHB
.1a271c	08		php		                PHP
.1a271d	20 3d 02	jsr $1a023d	            JSR ENSURETEXT
.1a2720	08		php		            PHP
.1a2721	e2 20		sep #$20	            SEP #$20
.1a2723	48		pha		            PHA
.1a2724	a9 1a		lda #$1a	            LDA #`MPROMPT
.1a2726	48		pha		            PHA
.1a2727	ab		plb		            PLB
.1a2728	68		pla		            PLA
.1a2729	28		plp		            PLP
.1a272a	a2 69 d2	ldx #$d269	                LDX #<>MPROMPT
.1a272d	20 29 04	jsr $1a0429	            JSR PRINTS
.1a2730	28		plp		                PLP
.1a2731	ab		plb		                PLB
.1a2732	60		rts		            RTS
.1a2733					IREADLINE
.1a2733	08		php		                PHP
.1a2734	e2 30		sep #$30	            SEP #$30
.1a2736	a9 01		lda #$01	                LDA #1
.1a2738	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a273b					read_loop
.1a273b	20 db 00	jsr $1a00db	            JSR GETKEYE
.1a273e	c9 00		cmp #$00	                CMP #0
.1a2740	f0 f9		beq $1a273b	                BEQ read_loop
.1a2742	c9 0d		cmp #$0d	                CMP #CHAR_CR
.1a2744	f0 02		beq $1a2748	                BEQ done
.1a2746	80 f3		bra $1a273b	                BRA read_loop
.1a2748	28		plp		done            PLP
.1a2749	60		rts		            RTS
.1a274a					PROCESS
.1a274a	0b		phd		                PHD
.1a274b	08		php		                PHP
.1a274c	08		php		            PHP
.1a274d	c2 20		rep #$20	            REP #$20
.1a274f	48		pha		            PHA
.1a2750	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a2753	5b		tcd		            TCD
.1a2754	68		pla		            PLA
.1a2755	28		plp		            PLP
.1a2756	c2 30		rep #$30	            REP #$30
.1a2758	64 d7		stz $08d7	                STZ LINENUM
.1a275a	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF         ; Attempt to tokenize the line that was read
.1a275d	85 1a		sta $081a	                STA CURLINE
.1a275f	a9 00 00	lda #$0000	                LDA #`CURLINE
.1a2762	85 1c		sta $081c	                STA CURLINE+2
.1a2764	20 61 09	jsr $1a0961	            JSR TOKENIZE
.1a2767	c2 20		rep #$20	            REP #$20
.1a2769	a5 d7		lda $08d7	                LDA LINENUM             ; Did we get a line number?
.1a276b	d0 05		bne $1a2772	                BNE update_line         ; Yes: attempt to add it to the program
.1a276d	20 0b 23	jsr $1a230b	            JSR EXECCMD
.1a2770	80 07		bra $1a2779	                BRA done
.1a2772					update_line
.1a2772	20 24 26	jsr $1a2624	            JSR ADDLINE
.1a2775	28		plp		no_prompt       PLP
.1a2776	2b		pld		                PLD
.1a2777	38		sec		                SEC
.1a2778	60		rts		            RTS
.1a2779	28		plp		done            PLP
.1a277a	2b		pld		                PLD
.1a277b	18		clc		                CLC
.1a277c	60		rts		            RTS
.1a277d					INTERACT
.1a277d	c2 30		rep #$30	            REP #$30
.1a277f	a2 ff fe	ldx #$feff	                LDX #<>STACK_END
.1a2782	9a		txs		                TXS
.1a2783					ready_loop
.1a2783	20 1b 27	jsr $1a271b	            JSR PRREADY
.1a2786					no_ready_loop
.1a2786	20 08 00	jsr $1a0008	            JSR READLINE
.1a2789	20 0c 00	jsr $1a000c	            JSR SCRCOPYLINE
.1a278c	22 3c 11 00	jsl $00113c	                JSL FK_TESTBREAK    ; Make sure the BREAK bit is cleared.
.1a2790	a9 00 00	lda #$0000	                LDA #0              ; Hide the cursor
.1a2793	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a2796	20 cc 26	jsr $1a26cc	            JSR PREPROCESS
.1a2799	20 4a 27	jsr $1a274a	            JSR PROCESS
.1a279c	b0 e8		bcs $1a2786	                BCS no_ready_loop
.1a279e	80 e3		bra $1a2783	                BRA ready_loop
>1ad269	0d 52 45 41 44 59 0d 00		MPROMPT         .null 13,"READY",13

;******  Return to file: src\basic816.s


;******  Processing file: src\operators.s

.1a27a0					OP_PLUS
.1a27a0	08		php		            PHP
.1a27a1	e2 20		sep #$20	            SEP #$20
.1a27a3	20 68 08	jsr $1a0868	            JSR ASS_ARGS_NUMSTR
.1a27a6	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a27a8	f0 2c		beq $1a27d6	            BEQ is_integer
.1a27aa	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a27ac	f0 2d		beq $1a27db	            BEQ is_float
.1a27ae	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a27b0	f0 1f		beq $1a27d1	            BEQ is_string
.1a27b2					type_error
.1a27b2	08		php		            PHP
.1a27b3	c2 20		rep #$20	            REP #$20
.1a27b5	48		pha		            PHA
.1a27b6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a27b9	5b		tcd		            TCD
.1a27ba	68		pla		            PLA
.1a27bb	28		plp		            PLP
.1a27bc	e2 20		sep #$20	            SEP #$20
.1a27be	a9 04		lda #$04	            LDA #ERR_TYPE
.1a27c0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a27c4	c2 20		rep #$20	            REP #$20
.1a27c6	29 ff 00	and #$00ff	            AND #$00FF
.1a27c9	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a27cc	e2 20		sep #$20	            SEP #$20
.1a27ce	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a27d1					is_string
.1a27d1	20 0e 16	jsr $1a160e	            JSR STRCONCAT
.1a27d4	80 08		bra $1a27de	            BRA done
.1a27d6					is_integer
.1a27d6	20 87 53	jsr $1a5387	            JSR OP_INT_ADD
.1a27d9	80 03		bra $1a27de	            BRA done
.1a27db					is_float
.1a27db	20 f6 55	jsr $1a55f6	            JSR OP_FP_ADD
.1a27de	28		plp		done        PLP
.1a27df	60		rts		            RTS
.1a27e0					OP_MINUS
.1a27e0	08		php		            PHP
.1a27e1	e2 20		sep #$20	            SEP #$20
.1a27e3	20 1a 08	jsr $1a081a	            JSR ASS_ARGS_NUM
.1a27e6	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a27e8	f0 23		beq $1a280d	            BEQ is_integer
.1a27ea	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a27ec	f0 24		beq $1a2812	            BEQ is_float
.1a27ee					type_error
.1a27ee	08		php		            PHP
.1a27ef	c2 20		rep #$20	            REP #$20
.1a27f1	48		pha		            PHA
.1a27f2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a27f5	5b		tcd		            TCD
.1a27f6	68		pla		            PLA
.1a27f7	28		plp		            PLP
.1a27f8	e2 20		sep #$20	            SEP #$20
.1a27fa	a9 04		lda #$04	            LDA #ERR_TYPE
.1a27fc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2800	c2 20		rep #$20	            REP #$20
.1a2802	29 ff 00	and #$00ff	            AND #$00FF
.1a2805	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2808	e2 20		sep #$20	            SEP #$20
.1a280a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a280d					is_integer
.1a280d	20 99 53	jsr $1a5399	            JSR OP_INT_SUB
.1a2810	80 03		bra $1a2815	            BRA done
.1a2812					is_float
.1a2812	20 eb 55	jsr $1a55eb	            JSR OP_FP_SUB
.1a2815	28		plp		done        PLP
.1a2816	60		rts		            RTS
.1a2817					OP_MULTIPLY
.1a2817	08		php		            PHP
.1a2818	e2 20		sep #$20	            SEP #$20
.1a281a	20 1a 08	jsr $1a081a	            JSR ASS_ARGS_NUM
.1a281d	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a281f	f0 23		beq $1a2844	            BEQ is_integer
.1a2821	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2823	f0 24		beq $1a2849	            BEQ is_float
.1a2825					type_error
.1a2825	08		php		            PHP
.1a2826	c2 20		rep #$20	            REP #$20
.1a2828	48		pha		            PHA
.1a2829	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a282c	5b		tcd		            TCD
.1a282d	68		pla		            PLA
.1a282e	28		plp		            PLP
.1a282f	e2 20		sep #$20	            SEP #$20
.1a2831	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2833	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2837	c2 20		rep #$20	            REP #$20
.1a2839	29 ff 00	and #$00ff	            AND #$00FF
.1a283c	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a283f	e2 20		sep #$20	            SEP #$20
.1a2841	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2844					is_integer
.1a2844	20 ab 53	jsr $1a53ab	            JSR OP_INT_MUL
.1a2847	80 03		bra $1a284c	            BRA done
.1a2849					is_float
.1a2849	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a284c	28		plp		done        PLP
.1a284d	60		rts		            RTS
.1a284e					OP_DIVIDE
.1a284e	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a2851	20 b5 07	jsr $1a07b5	            JSR ASS_ARG2_FLOAT
.1a2854	20 41 56	jsr $1a5641	            JSR OP_FP_DIV
.1a2857	60		rts		            RTS
.1a2858					OP_MOD
.1a2858	a5 23		lda $0823	            LDA ARGUMENT1
.1a285a	8f 1a 01 00	sta $00011a	            STA @lD1_OPERAND_B
.1a285e	a5 29		lda $0829	            LDA ARGUMENT2
.1a2860	8f 18 01 00	sta $000118	            STA @lD1_OPERAND_A
.1a2864	af 1e 01 00	lda $00011e	            LDA @lD1_REMAINDER
.1a2868	85 23		sta $0823	            STA ARGUMENT1
.1a286a	60		rts		            RTS
.1a286b					OP_POW
.1a286b	08		php		            PHP
.1a286c	c2 30		rep #$30	            REP #$30
.1a286e	48		pha		            PHA
.1a286f	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a2872	a5 2d		lda $082d	            LDA ARGTYPE2
.1a2874	c9 00 00	cmp #$0000	            CMP #TYPE_INTEGER
.1a2877	d0 0d		bne $1a2886	            BNE flt_exp
.1a2879	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a287b	d0 09		bne $1a2886	            BNE flt_exp
.1a287d	da		phx		            PHX
.1a287e	a6 29		ldx $0829	            LDX ARGUMENT2
.1a2880	20 5f 63	jsr $1a635f	            JSR Q_FP_POW_INT
.1a2883	fa		plx		            PLX
.1a2884	80 1c		bra $1a28a2	            BRA done
.1a2886					flt_exp
.1a2886	20 b5 07	jsr $1a07b5	            JSR ASS_ARG2_FLOAT
.1a2889	c2 20		rep #$20	            REP #$20
.1a288b	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a288d	48		pha		            PHA
.1a288e	a5 29		lda $0829	            LDA ARGUMENT2
.1a2890	48		pha		            PHA
.1a2891	20 ea 61	jsr $1a61ea	            JSR FP_LN
.1a2894	c2 20		rep #$20	            REP #$20
.1a2896	68		pla		            PLA
.1a2897	85 29		sta $0829	            STA ARGUMENT2
.1a2899	68		pla		            PLA
.1a289a	85 2b		sta $082b	            STA ARGUMENT2+2
.1a289c	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a289f	20 c9 63	jsr $1a63c9	            JSR FP_EXP
.1a28a2	68		pla		done        PLA
.1a28a3	28		plp		            PLP
.1a28a4	60		rts		            RTS
.1a28a5					OP_AND
.1a28a5	08		php		            PHP
.1a28a6	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a28a9	20 47 06	jsr $1a0647	            JSR ASS_ARG2_INT
.1a28ac	c2 20		rep #$20	            REP #$20
.1a28ae	a5 23		lda $0823	            LDA ARGUMENT1
.1a28b0	25 29		and $0829	            AND ARGUMENT2
.1a28b2	85 23		sta $0823	            STA ARGUMENT1
.1a28b4	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a28b6	25 2b		and $082b	            AND ARGUMENT2+2
.1a28b8	85 25		sta $0825	            STA ARGUMENT1+2
.1a28ba	28		plp		            PLP
.1a28bb	60		rts		            RTS
.1a28bc					OP_OR
.1a28bc	08		php		            PHP
.1a28bd	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a28c0	20 47 06	jsr $1a0647	            JSR ASS_ARG2_INT
.1a28c3	c2 20		rep #$20	            REP #$20
.1a28c5	a5 23		lda $0823	            LDA ARGUMENT1
.1a28c7	05 29		ora $0829	            ORA ARGUMENT2
.1a28c9	85 23		sta $0823	            STA ARGUMENT1
.1a28cb	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a28cd	05 2b		ora $082b	            ORA ARGUMENT2+2
.1a28cf	85 25		sta $0825	            STA ARGUMENT1+2
.1a28d1	28		plp		done        PLP
.1a28d2	60		rts		            RTS
.1a28d3					OP_NOT
.1a28d3	08		php		            PHP
.1a28d4	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a28d7	c2 20		rep #$20	            REP #$20
.1a28d9	a5 23		lda $0823	            LDA ARGUMENT1
.1a28db	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a28de	85 23		sta $0823	            STA ARGUMENT1
.1a28e0	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a28e2	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a28e5	85 25		sta $0825	            STA ARGUMENT1+2
.1a28e7	28		plp		done        PLP
.1a28e8	60		rts		            RTS
.1a28e9					OP_LT
.1a28e9	08		php		            PHP
.1a28ea	e2 20		sep #$20	            SEP #$20
.1a28ec	20 68 08	jsr $1a0868	            JSR ASS_ARGS_NUMSTR
.1a28ef	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a28f1	f0 2c		beq $1a291f	            BEQ is_integer
.1a28f3	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a28f5	f0 2d		beq $1a2924	            BEQ is_float
.1a28f7	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a28f9	f0 1f		beq $1a291a	            BEQ is_string
.1a28fb					type_error
.1a28fb	08		php		            PHP
.1a28fc	c2 20		rep #$20	            REP #$20
.1a28fe	48		pha		            PHA
.1a28ff	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2902	5b		tcd		            TCD
.1a2903	68		pla		            PLA
.1a2904	28		plp		            PLP
.1a2905	e2 20		sep #$20	            SEP #$20
.1a2907	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2909	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a290d	c2 20		rep #$20	            REP #$20
.1a290f	29 ff 00	and #$00ff	            AND #$00FF
.1a2912	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2915	e2 20		sep #$20	            SEP #$20
.1a2917	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a291a					is_string
.1a291a	20 96 17	jsr $1a1796	            JSR OP_STR_LT
.1a291d	80 08		bra $1a2927	            BRA done
.1a291f					is_integer
.1a291f	20 ac 54	jsr $1a54ac	            JSR OP_INT_LT
.1a2922	80 03		bra $1a2927	            BRA done
.1a2924					is_float
.1a2924	20 21 5c	jsr $1a5c21	            JSR OP_FP_LT
.1a2927	28		plp		done        PLP
.1a2928	60		rts		            RTS
.1a2929					OP_GT
.1a2929	08		php		            PHP
.1a292a	e2 20		sep #$20	            SEP #$20
.1a292c	20 68 08	jsr $1a0868	            JSR ASS_ARGS_NUMSTR
.1a292f	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2931	f0 2c		beq $1a295f	            BEQ is_integer
.1a2933	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2935	f0 2d		beq $1a2964	            BEQ is_float
.1a2937	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a2939	f0 1f		beq $1a295a	            BEQ is_string
.1a293b					type_error
.1a293b	08		php		            PHP
.1a293c	c2 20		rep #$20	            REP #$20
.1a293e	48		pha		            PHA
.1a293f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2942	5b		tcd		            TCD
.1a2943	68		pla		            PLA
.1a2944	28		plp		            PLP
.1a2945	e2 20		sep #$20	            SEP #$20
.1a2947	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2949	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a294d	c2 20		rep #$20	            REP #$20
.1a294f	29 ff 00	and #$00ff	            AND #$00FF
.1a2952	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2955	e2 20		sep #$20	            SEP #$20
.1a2957	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a295a					is_string
.1a295a	20 ad 17	jsr $1a17ad	            JSR OP_STR_GT
.1a295d	80 08		bra $1a2967	            BRA done
.1a295f					is_integer
.1a295f	20 cd 54	jsr $1a54cd	            JSR OP_INT_GT
.1a2962	80 03		bra $1a2967	            BRA done
.1a2964					is_float
.1a2964	20 36 5c	jsr $1a5c36	            JSR OP_FP_GT
.1a2967	28		plp		done        PLP
.1a2968	60		rts		            RTS
.1a2969					OP_EQ
.1a2969	08		php		            PHP
.1a296a	e2 20		sep #$20	            SEP #$20
.1a296c	20 68 08	jsr $1a0868	            JSR ASS_ARGS_NUMSTR
.1a296f	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2971	f0 2c		beq $1a299f	            BEQ is_integer
.1a2973	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2975	f0 2d		beq $1a29a4	            BEQ is_float
.1a2977	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a2979	f0 1f		beq $1a299a	            BEQ is_string
.1a297b					type_error
.1a297b	08		php		            PHP
.1a297c	c2 20		rep #$20	            REP #$20
.1a297e	48		pha		            PHA
.1a297f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2982	5b		tcd		            TCD
.1a2983	68		pla		            PLA
.1a2984	28		plp		            PLP
.1a2985	e2 20		sep #$20	            SEP #$20
.1a2987	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2989	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a298d	c2 20		rep #$20	            REP #$20
.1a298f	29 ff 00	and #$00ff	            AND #$00FF
.1a2992	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2995	e2 20		sep #$20	            SEP #$20
.1a2997	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a299a					is_string
.1a299a	20 c4 17	jsr $1a17c4	            JSR OP_STR_EQ
.1a299d	80 08		bra $1a29a7	            BRA done
.1a299f					is_integer
.1a299f	20 fa 54	jsr $1a54fa	            JSR OP_INT_EQ
.1a29a2	80 03		bra $1a29a7	            BRA done
.1a29a4					is_float
.1a29a4	20 4b 5c	jsr $1a5c4b	            JSR OP_FP_EQ
.1a29a7	28		plp		done        PLP
.1a29a8	60		rts		            RTS
.1a29a9					OP_NE
.1a29a9	08		php		            PHP
.1a29aa	e2 20		sep #$20	            SEP #$20
.1a29ac	20 68 08	jsr $1a0868	            JSR ASS_ARGS_NUMSTR
.1a29af	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a29b1	f0 2c		beq $1a29df	            BEQ is_integer
.1a29b3	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a29b5	f0 2d		beq $1a29e4	            BEQ is_float
.1a29b7	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a29b9	f0 1f		beq $1a29da	            BEQ is_string
.1a29bb					type_error
.1a29bb	08		php		            PHP
.1a29bc	c2 20		rep #$20	            REP #$20
.1a29be	48		pha		            PHA
.1a29bf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a29c2	5b		tcd		            TCD
.1a29c3	68		pla		            PLA
.1a29c4	28		plp		            PLP
.1a29c5	e2 20		sep #$20	            SEP #$20
.1a29c7	a9 04		lda #$04	            LDA #ERR_TYPE
.1a29c9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a29cd	c2 20		rep #$20	            REP #$20
.1a29cf	29 ff 00	and #$00ff	            AND #$00FF
.1a29d2	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a29d5	e2 20		sep #$20	            SEP #$20
.1a29d7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a29da					is_string
.1a29da	20 db 17	jsr $1a17db	            JSR OP_STR_NE
.1a29dd	80 08		bra $1a29e7	            BRA done
.1a29df					is_integer
.1a29df	20 18 55	jsr $1a5518	            JSR OP_INT_NE
.1a29e2	80 03		bra $1a29e7	            BRA done
.1a29e4					is_float
.1a29e4	20 8a 5c	jsr $1a5c8a	            JSR OP_FP_NE
.1a29e7	28		plp		done        PLP
.1a29e8	60		rts		            RTS
.1a29e9					OP_GTE
.1a29e9	08		php		            PHP
.1a29ea	e2 20		sep #$20	            SEP #$20
.1a29ec	20 68 08	jsr $1a0868	            JSR ASS_ARGS_NUMSTR
.1a29ef	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a29f1	f0 2c		beq $1a2a1f	            BEQ is_integer
.1a29f3	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a29f5	f0 2d		beq $1a2a24	            BEQ is_float
.1a29f7	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a29f9	f0 1f		beq $1a2a1a	            BEQ is_string
.1a29fb					type_error
.1a29fb	08		php		            PHP
.1a29fc	c2 20		rep #$20	            REP #$20
.1a29fe	48		pha		            PHA
.1a29ff	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2a02	5b		tcd		            TCD
.1a2a03	68		pla		            PLA
.1a2a04	28		plp		            PLP
.1a2a05	e2 20		sep #$20	            SEP #$20
.1a2a07	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2a09	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2a0d	c2 20		rep #$20	            REP #$20
.1a2a0f	29 ff 00	and #$00ff	            AND #$00FF
.1a2a12	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2a15	e2 20		sep #$20	            SEP #$20
.1a2a17	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2a1a					is_string
.1a2a1a	20 f2 17	jsr $1a17f2	            JSR OP_STR_GTE
.1a2a1d	80 08		bra $1a2a27	            BRA done
.1a2a1f					is_integer
.1a2a1f	20 36 55	jsr $1a5536	            JSR OP_INT_GTE
.1a2a22	80 03		bra $1a2a27	            BRA done
.1a2a24					is_float
.1a2a24	20 75 5c	jsr $1a5c75	            JSR OP_FP_GTE
.1a2a27	28		plp		done        PLP
.1a2a28	60		rts		            RTS
.1a2a29					OP_LTE
.1a2a29	08		php		            PHP
.1a2a2a	e2 20		sep #$20	            SEP #$20
.1a2a2c	20 68 08	jsr $1a0868	            JSR ASS_ARGS_NUMSTR
.1a2a2f	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2a31	f0 2c		beq $1a2a5f	            BEQ is_integer
.1a2a33	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2a35	f0 2d		beq $1a2a64	            BEQ is_float
.1a2a37	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a2a39	f0 1f		beq $1a2a5a	            BEQ is_string
.1a2a3b					type_error
.1a2a3b	08		php		            PHP
.1a2a3c	c2 20		rep #$20	            REP #$20
.1a2a3e	48		pha		            PHA
.1a2a3f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2a42	5b		tcd		            TCD
.1a2a43	68		pla		            PLA
.1a2a44	28		plp		            PLP
.1a2a45	e2 20		sep #$20	            SEP #$20
.1a2a47	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2a49	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2a4d	c2 20		rep #$20	            REP #$20
.1a2a4f	29 ff 00	and #$00ff	            AND #$00FF
.1a2a52	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2a55	e2 20		sep #$20	            SEP #$20
.1a2a57	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2a5a					is_string
.1a2a5a	20 09 18	jsr $1a1809	            JSR OP_STR_LTE
.1a2a5d	80 08		bra $1a2a67	            BRA done
.1a2a5f					is_integer
.1a2a5f	20 63 55	jsr $1a5563	            JSR OP_INT_LTE
.1a2a62	80 03		bra $1a2a67	            BRA done
.1a2a64					is_float
.1a2a64	20 60 5c	jsr $1a5c60	            JSR OP_FP_LTE
.1a2a67	28		plp		done        PLP
.1a2a68	60		rts		            RTS
.1a2a69					OP_NEGATIVE
.1a2a69	08		php		                PHP
.1a2a6a	e2 20		sep #$20	            SEP #$20
.1a2a6c	a5 27		lda $0827	                LDA ARGTYPE1                ; Check the type of the argument
.1a2a6e	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a2a70	f0 2d		beq $1a2a9f	                BEQ int_negate              ; If integer: negate the integer
.1a2a72	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a2a74	f0 1f		beq $1a2a95	                BEQ float_negate            ; If floating point: negate the floating point
.1a2a76					type_error
.1a2a76	08		php		            PHP
.1a2a77	c2 20		rep #$20	            REP #$20
.1a2a79	48		pha		            PHA
.1a2a7a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2a7d	5b		tcd		            TCD
.1a2a7e	68		pla		            PLA
.1a2a7f	28		plp		            PLP
.1a2a80	e2 20		sep #$20	            SEP #$20
.1a2a82	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2a84	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2a88	c2 20		rep #$20	            REP #$20
.1a2a8a	29 ff 00	and #$00ff	            AND #$00FF
.1a2a8d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2a90	e2 20		sep #$20	            SEP #$20
.1a2a92	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2a95					float_negate
.1a2a95	e2 20		sep #$20	            SEP #$20
.1a2a97	a5 26		lda $0826	                LDA ARGUMENT1+3             ; Flip the sign bit of the floating point number
.1a2a99	49 80		eor #$80	                EOR #$80
.1a2a9b	85 26		sta $0826	                STA ARGUMENT1+3
.1a2a9d	80 16		bra $1a2ab5	                BRA done
.1a2a9f					int_negate
.1a2a9f	c2 20		rep #$20	            REP #$20
.1a2aa1	a5 23		lda $0823	                LDA ARGUMENT1               ; Invert ARGUMENT1
.1a2aa3	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a2aa6	85 23		sta $0823	                STA ARGUMENT1
.1a2aa8	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a2aaa	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a2aad	85 25		sta $0825	                STA ARGUMENT1+2
.1a2aaf	e6 23		inc $0823	                INC ARGUMENT1               ; And increment to get two's complement
.1a2ab1	d0 02		bne $1a2ab5	                BNE done
.1a2ab3	e6 25		inc $0825	                INC ARGUMENT1+2
.1a2ab5					done
.1a2ab5	28		plp		                PLP
.1a2ab6	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\statements.s


;******  Processing file: src\C256/statements_c256.s

=0					GR_LUT_BLUE = 0
=1					GR_LUT_GREEN = 1
=2					GR_LUT_RED = 2
=3					GR_LUT_ALPHA = 3
=640					GR_DEFAULT_COLS = 640               ; Default number of columns in the display
=480					GR_DEFAULT_ROWS = 480               ; Default number of rows in the display
=8					GR_MAX_LUT = 8                      ; The number of LUTs Vicky supports
=64					SP_MAX = 64                         ; The number of sprites Vicky supports
=8					SP_REG_SIZE = 8                     ; The number of bytes in a sprite's register block
=0					SP_CONTROL = 0                      ; Offset of the control regsiter for a sprite
=1					SP_ADDR = 1                         ; Offset of the pixmap address for a sprite
=4					SP_X_COORD = 4                      ; Offset of the X coordinate for a sprite
=6					SP_Y_COORD = 6                      ; Offset of the Y coordinate for a sprite
=12					TILEMAP_REG_SIZE = 12               ; The number of bytes in a tile map's register set
=4					TILESET_REG_SIZE = 4                ; The number of bytes in a tile set's register set
=2					BM_MAX = 2                          ; Maximum number of bitmaps we support
=$0040					MAX_VRAM_VICKY = $0040              ; Upper limit (exclusive) bank address for VRAM in Vicky address space
=$00f0					MAX_VRAM_CPU = $00F0                ; Upper limit (exclusive) bank address for VRAM in CPU address space
=$00b0					MIN_VRAM_CPU = $00B0                ; Lower limit (inclusive) bank address for VRAM in CPU address space
>1af000					GR_BM0_ADDR     .dword ?            ; Address of bitmap 0 (from CPU's perspective)
>1af004					GR_BM1_ADDR     .dword ?            ; Address of bitmap 1 (from CPU's perspective)
>1af008					GR_BM0_VRAM     .dword ?            ; Address of bitmap 0 (relative to start of VRAM)
>1af00c					GR_BM1_VRAM     .dword ?            ; Address of bitmap 1 (relative to start of VRAM)
>1af010					GR_MAX_COLS     .word ?             ; Width the display in pixels
>1af012					GR_MAX_ROWS     .word ?             ; Height of the display in pixels
>1af014					GR_TOTAL_PIXELS .word ?             ; Total number of pixels in the display
>1af016					GR_TEMP         .word ?             ; A temporary word for graphics commands
>1af018					GS_SP_CONTROL   .fill SP_MAX        ; Shadow registers for the sprite controls
.1a2ab7					S_SETTIME
.1a2ab7	08		php		                PHP
.1a2ab8	e2 20		sep #$20	            SEP #$20
.1a2aba	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2abd	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2ac0	20 73 05	jsr $1a0573	            JSR DIVINT10
.1a2ac3	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2ac5	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2ac6	0a		asl a		                ASL A
.1a2ac7	0a		asl a		                ASL A
.1a2ac8	0a		asl a		                ASL A
.1a2ac9	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2acb	48		pha		                PHA
.1a2acc	a9 2c		lda #$2c	                LDA #','
.1a2ace	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2ad1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2ad4	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2ad7	20 73 05	jsr $1a0573	            JSR DIVINT10
.1a2ada	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2adc	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2add	0a		asl a		                ASL A
.1a2ade	0a		asl a		                ASL A
.1a2adf	0a		asl a		                ASL A
.1a2ae0	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2ae2	48		pha		                PHA
.1a2ae3	a9 2c		lda #$2c	                LDA #','
.1a2ae5	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2ae8	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2aeb	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2aee	20 73 05	jsr $1a0573	            JSR DIVINT10
.1a2af1	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2af3	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2af4	0a		asl a		                ASL A
.1a2af5	0a		asl a		                ASL A
.1a2af6	0a		asl a		                ASL A
.1a2af7	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2af9	48		pha		                PHA
.1a2afa	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a2afe	09 0c		ora #$0c	                ORA #%00001100
.1a2b00	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2b04	68		pla		                PLA                     ; And seconds to the RTC
.1a2b05	8f 00 08 af	sta $af0800	                STA @lRTC_SEC
.1a2b09	68		pla		                PLA                     ; Minutes...
.1a2b0a	8f 02 08 af	sta $af0802	                STA @lRTC_MIN
.1a2b0e	68		pla		                PLA                     ; Save the hour...
.1a2b0f	8f 04 08 af	sta $af0804	                STA @lRTC_HRS
.1a2b13	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a2b17	29 f7		and #$f7	                AND #%11110111
.1a2b19	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2b1d	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a2b20	28		plp		                PLP
.1a2b21	60		rts		            RTS
.1a2b22					S_SETDATE
.1a2b22	08		php		                PHP
.1a2b23	e2 20		sep #$20	            SEP #$20
.1a2b25	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2b28	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2b2b	20 73 05	jsr $1a0573	            JSR DIVINT10
.1a2b2e	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b30	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b31	0a		asl a		                ASL A
.1a2b32	0a		asl a		                ASL A
.1a2b33	0a		asl a		                ASL A
.1a2b34	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b36	48		pha		                PHA
.1a2b37	a9 2c		lda #$2c	                LDA #','
.1a2b39	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2b3c	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2b3f	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2b42	20 73 05	jsr $1a0573	            JSR DIVINT10
.1a2b45	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b47	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b48	0a		asl a		                ASL A
.1a2b49	0a		asl a		                ASL A
.1a2b4a	0a		asl a		                ASL A
.1a2b4b	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b4d	48		pha		                PHA
.1a2b4e	a9 2c		lda #$2c	                LDA #','
.1a2b50	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2b53	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2b56	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a2b59	20 a9 05	jsr $1a05a9	            JSR DIVINT100
.1a2b5c	c2 20		rep #$20	            REP #$20
.1a2b5e	a5 23		lda $0823	                LDA ARGUMENT1           ; Get the century
.1a2b60	85 92		sta $0892	                STA MTEMP               ; Save it in MTEMP
.1a2b62	a5 29		lda $0829	                LDA ARGUMENT2           ; Separate the 10s from the 1s digits
.1a2b64	85 23		sta $0823	                STA ARGUMENT1
.1a2b66	20 73 05	jsr $1a0573	            JSR DIVINT10
.1a2b69	e2 20		sep #$20	            SEP #$20
.1a2b6b	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b6d	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b6e	0a		asl a		                ASL A
.1a2b6f	0a		asl a		                ASL A
.1a2b70	0a		asl a		                ASL A
.1a2b71	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b73	48		pha		                PHA                     ; Save the 10s and 1s in BCD
.1a2b74	c2 20		rep #$20	            REP #$20
.1a2b76	a5 92		lda $0892	                LDA MTEMP               ; Separate the 100s from the 1000s digits
.1a2b78	85 23		sta $0823	                STA ARGUMENT1
.1a2b7a	20 73 05	jsr $1a0573	            JSR DIVINT10
.1a2b7d	e2 20		sep #$20	            SEP #$20
.1a2b7f	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b81	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b82	0a		asl a		                ASL A
.1a2b83	0a		asl a		                ASL A
.1a2b84	0a		asl a		                ASL A
.1a2b85	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b87	48		pha		                PHA                     ; Save the 100s and 1000s in BCD
.1a2b88	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a2b8c	09 0c		ora #$0c	                ORA #%00001100
.1a2b8e	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2b92	68		pla		                PLA                     ; Set the century
.1a2b93	8f 0f 08 af	sta $af080f	                STA @lRTC_CENTURY
.1a2b97	68		pla		                PLA                     ; And year to the RTC
.1a2b98	8f 0a 08 af	sta $af080a	                STA @lRTC_YEAR
.1a2b9c	68		pla		                PLA                     ; Month...
.1a2b9d	8f 09 08 af	sta $af0809	                STA @lRTC_MONTH
.1a2ba1	68		pla		                PLA                     ; Save the day...
.1a2ba2	8f 06 08 af	sta $af0806	                STA @lRTC_DAY
.1a2ba6	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a2baa	29 f7		and #$f7	                AND #%11110111
.1a2bac	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2bb0	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a2bb3	28		plp		                PLP
.1a2bb4	60		rts		            RTS
.1a2bb5					S_TEXTCOLOR
.1a2bb5	08		php		                PHP
.1a2bb6					locals
>0001					L_FOREGROUND    .byte ?
.1a2bb6	e2 20		sep #$20	            SEP #$20
.1a2bb8	48		pha		            PHA
.1a2bb9	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2bbc	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2bbf	e2 20		sep #$20	            SEP #$20
.1a2bc1	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the foreground position
.1a2bc3	29 0f		and #$0f	                AND #$0F
.1a2bc5	0a		asl a		                ASL A
.1a2bc6	0a		asl a		                ASL A
.1a2bc7	0a		asl a		                ASL A
.1a2bc8	0a		asl a		                ASL A
.1a2bc9	83 01		sta $01,s	                STA L_FOREGROUND    ; Save the foreground color
.1a2bcb	a9 2c		lda #$2c	                LDA #','
.1a2bcd	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2bd0	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2bd3	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2bd6	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the background position
.1a2bd8	29 0f		and #$0f	                AND #$0F
.1a2bda	03 01		ora $01,s	                ORA L_FOREGROUND    ; Add in the foreground
.1a2bdc	8f 1e 00 00	sta $00001e	                STA @lCURCOLOR      ; And save the new color combination
.1a2be0	e2 20		sep #$20	            SEP #$20
.1a2be2	68		pla		            PLA
.1a2be3	28		plp		                PLP
.1a2be4	60		rts		            RTS
.1a2be5					S_SETBGCOLOR
.1a2be5	08		php		                PHP
.1a2be6					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.1a2be6	c2 20		rep #$20	            REP #$20
.1a2be8	f4 00 00	pea #$0000	            PEA #0
.1a2beb	e2 20		sep #$20	            SEP #$20
.1a2bed	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2bf0	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2bf3	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.1a2bf5	83 01		sta $01,s	                STA L_RED
.1a2bf7	a9 2c		lda #$2c	                LDA #','
.1a2bf9	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2bfc	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2bff	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2c02	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.1a2c04	83 02		sta $02,s	                STA L_GREEN
.1a2c06	a9 2c		lda #$2c	                LDA #','
.1a2c08	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2c0b	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2c0e	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2c11	a5 23		lda $0823	                LDA ARGUMENT1               ; And set the actual color
.1a2c13	8f 0d 00 af	sta $af000d	                STA @lBACKGROUND_COLOR_B
.1a2c17	a3 02		lda $02,s	                LDA L_GREEN
.1a2c19	8f 0e 00 af	sta $af000e	                STA @lBACKGROUND_COLOR_G
.1a2c1d	a3 01		lda $01,s	                LDA L_RED
.1a2c1f	8f 0f 00 af	sta $af000f	                STA @lBACKGROUND_COLOR_R
.1a2c23	c2 20		rep #$20	            REP #$20
.1a2c25	68		pla		            PLA
.1a2c26	28		plp		                PLP
.1a2c27	60		rts		            RTS
.1a2c28					S_SETBORDER
.1a2c28	08		php		                PHP
.1a2c29					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.1a2c29	c2 20		rep #$20	            REP #$20
.1a2c2b	f4 00 00	pea #$0000	            PEA #0
.1a2c2e	e2 20		sep #$20	            SEP #$20
.1a2c30	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2c33	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a2c36	a5 23		lda $0823	                LDA ARGUMENT1
.1a2c38	f0 16		beq $1a2c50	                BEQ hide_border
.1a2c3a	a9 01		lda #$01	                LDA #Border_Ctrl_Enable     ; Enable the border
.1a2c3c	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.1a2c40	a9 20		lda #$20	                LDA #BORDER_WIDTH           ; Set the border width
.1a2c42	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.1a2c46	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.1a2c4a	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2c4e	80 0a		bra $1a2c5a	                BRA get_color
.1a2c50	a9 00		lda #$00	hide_border     LDA #0                      ; Hide the border
.1a2c52	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.1a2c56	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2c5a	a9 2c		lda #$2c	get_color       LDA #','
.1a2c5c	85 37		sta $0837	                STA TARGETTOK
.1a2c5e	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a2c61	90 39		bcc $1a2c9c	                BCC done                    ; No: we're done
.1a2c63	20 da 20	jsr $1a20da	            JSR INCBIP
.1a2c66	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2c69	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2c6c	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.1a2c6e	83 01		sta $01,s	                STA L_RED
.1a2c70	a9 2c		lda #$2c	                LDA #','
.1a2c72	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2c75	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2c78	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2c7b	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.1a2c7d	83 02		sta $02,s	                STA L_GREEN
.1a2c7f	a9 2c		lda #$2c	                LDA #','
.1a2c81	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2c84	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2c87	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2c8a	a5 23		lda $0823	                LDA ARGUMENT1
.1a2c8c	8f 05 00 af	sta $af0005	                STA @lBORDER_COLOR_B        ; Set the border color
.1a2c90	a3 02		lda $02,s	                LDA L_GREEN
.1a2c92	8f 06 00 af	sta $af0006	                STA @lBORDER_COLOR_G
.1a2c96	a3 01		lda $01,s	                LDA L_RED
.1a2c98	8f 07 00 af	sta $af0007	                STA @lBORDER_COLOR_R
.1a2c9c					done
.1a2c9c	c2 20		rep #$20	            REP #$20
.1a2c9e	68		pla		            PLA
.1a2c9f	28		plp		                PLP
.1a2ca0	60		rts		            RTS
.1a2ca1					S_SETCOLOR
.1a2ca1	08		php		                PHP
.1a2ca2					locals
>0001					L_LUT           .byte ?
>0002					L_COLOR         .byte ?
>0003					L_RED           .byte ?
>0004					L_GREEN         .byte ?
>0005					L_BLUE          .byte ?
.1a2ca2	c2 20		rep #$20	            REP #$20
.1a2ca4	3b		tsc		            TSC
.1a2ca5	38		sec		            SEC
.1a2ca6	e9 05 00	sbc #$0005	            SBC #SIZE(locals)
.1a2ca9	1b		tcs		            TCS
.1a2caa	e2 20		sep #$20	            SEP #$20
.1a2cac	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2caf	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2cb2	a5 23		lda $0823	                LDA ARGUMENT1
.1a2cb4	c9 0a		cmp #$0a	                CMP #10             ; And in range
.1a2cb6	90 1f		bcc $1a2cd7	                BLT save_lut
.1a2cb8					bad_argument
.1a2cb8	08		php		            PHP
.1a2cb9	c2 20		rep #$20	            REP #$20
.1a2cbb	48		pha		            PHA
.1a2cbc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2cbf	5b		tcd		            TCD
.1a2cc0	68		pla		            PLA
.1a2cc1	28		plp		            PLP
.1a2cc2	e2 20		sep #$20	            SEP #$20
.1a2cc4	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a2cc6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2cca	c2 20		rep #$20	            REP #$20
.1a2ccc	29 ff 00	and #$00ff	            AND #$00FF
.1a2ccf	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2cd2	e2 20		sep #$20	            SEP #$20
.1a2cd4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2cd7	83 01		sta $01,s	save_lut        STA L_LUT           ; Save as LUT
.1a2cd9	a9 2c		lda #$2c	                LDA #','
.1a2cdb	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2cde	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2ce1	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2ce4	a5 23		lda $0823	                LDA ARGUMENT1
.1a2ce6	83 02		sta $02,s	                STA L_COLOR         ; Save as COLOR
.1a2ce8	a9 2c		lda #$2c	                LDA #','
.1a2cea	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2ced	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2cf0	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2cf3	a5 23		lda $0823	                LDA ARGUMENT1
.1a2cf5	83 03		sta $03,s	                STA L_RED           ; Save as RED
.1a2cf7	a9 2c		lda #$2c	                LDA #','
.1a2cf9	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2cfc	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2cff	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2d02	a5 23		lda $0823	                LDA ARGUMENT1
.1a2d04	83 04		sta $04,s	                STA L_GREEN         ; Save it as GREEN
.1a2d06	a9 2c		lda #$2c	                LDA #','
.1a2d08	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2d0b	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2d0e	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2d11	a5 23		lda $0823	                LDA ARGUMENT1
.1a2d13	83 05		sta $05,s	                STA L_BLUE          ; Save it as BLUE
.1a2d15	a9 af		lda #$af	                LDA #`GRPH_LUT0_PTR ; Get the bank Vicky is in (should always be $AF)
.1a2d17	85 a0		sta $08a0	                STA MTEMPPTR+2      ; MTEMPPTR will be our pointer to the LUT entry
.1a2d19	a3 01		lda $01,s	                LDA L_LUT           ; Compute the offset to the LUT address
.1a2d1b	0a		asl a		                ASL A
.1a2d1c	c2 20		rep #$20	            REP #$20
.1a2d1e	29 ff 00	and #$00ff	                AND #$00FF
.1a2d21	aa		tax		                TAX                 ; Put it in X
.1a2d22	bf 59 2d 1a	lda $1a2d59,x	                LDA @llut_address,X ; Get the address of the LUT
.1a2d26	85 9e		sta $089e	                STA MTEMPPTR        ; Put it in MTEMPPTR
.1a2d28	e2 20		sep #$20	            SEP #$20
.1a2d2a	a3 02		lda $02,s	                LDA L_COLOR         ; color index *= 4
.1a2d2c	c2 20		rep #$20	            REP #$20
.1a2d2e	29 ff 00	and #$00ff	                AND #$00FF
.1a2d31	0a		asl a		                ASL A               ; Since each color has four bytes of data
.1a2d32	0a		asl a		                ASL A
.1a2d33	18		clc		                CLC                 ; Add the color offset to MTEMPPTR
.1a2d34	65 9e		adc $089e	                ADC MTEMPPTR
.1a2d36	85 9e		sta $089e	                STA MTEMPPTR
.1a2d38	e2 20		sep #$20	            SEP #$20
.1a2d3a	a0 02 00	ldy #$0002	                LDY #GR_LUT_RED
.1a2d3d	a3 03		lda $03,s	                LDA L_RED
.1a2d3f	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the red component to the color entry
.1a2d41	a0 01 00	ldy #$0001	                LDY #GR_LUT_GREEN
.1a2d44	a3 04		lda $04,s	                LDA L_GREEN
.1a2d46	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the green component to the color entry
.1a2d48	a0 00 00	ldy #$0000	                LDY #GR_LUT_BLUE
.1a2d4b	a3 05		lda $05,s	                LDA L_BLUE
.1a2d4d	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the blue component to the color entry
.1a2d4f					done
.1a2d4f	c2 20		rep #$20	            REP #$20
.1a2d51	3b		tsc		            TSC
.1a2d52	18		clc		            CLC
.1a2d53	69 05 00	adc #$0005	            ADC #SIZE(locals)
.1a2d56	1b		tcs		            TCS
.1a2d57	28		plp		                PLP
.1a2d58	60		rts		            RTS
>1a2d59	00 20				lut_address     .word <>GRPH_LUT0_PTR
>1a2d5b	00 24				                .word <>GRPH_LUT1_PTR
>1a2d5d	00 28				                .word <>GRPH_LUT2_PTR
>1a2d5f	00 2c				                .word <>GRPH_LUT3_PTR
>1a2d61	00 30				                .word <>GRPH_LUT4_PTR
>1a2d63	00 34				                .word <>GRPH_LUT5_PTR
>1a2d65	00 38				                .word <>GRPH_LUT6_PTR
>1a2d67	00 3c				                .word <>GRPH_LUT7_PTR
>1a2d69	40 1f				                .word <>FG_CHAR_LUT_PTR
>1a2d6b	80 1f				                .word <>BG_CHAR_LUT_PTR
.1a2d6d					S_GRAPHICS
.1a2d6d	da		phx		                PHX
.1a2d6e	5a		phy		                PHY
.1a2d6f	08		php		                PHP
.1a2d70	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2d73	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a2d76	c2 20		rep #$20	            REP #$20
.1a2d78	a5 23		lda $0823	                LDA ARGUMENT1               ; Check to see if we're setting mode to 800x600 or 400x300
.1a2d7a	89 00 01	bit #$0100	                BIT #$0100
.1a2d7d	d0 17		bne $1a2d96	                BNE set_mode                ; Yes: go ahead and set it
.1a2d7f	af 00 00 af	lda $af0000	                LDA @l MASTER_CTRL_REG_L    ; Otherwise, check to see if we're already in 800x600 or 400x300
.1a2d83	89 00 01	bit #$0100	                BIT #$0100
.1a2d86	f0 0e		beq $1a2d96	                BEQ set_mode                ; No: just go ahead and set the mode
.1a2d88	e2 20		sep #$20	            SEP #$20
.1a2d8a	a9 00		lda #$00	                LDA #0                      ; Yes: toggle back to 640x480...
.1a2d8c	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.1a2d90	a9 01		lda #$01	                LDA #1                      ; And back to 800x600....
.1a2d92	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.1a2d96					set_mode
.1a2d96	c2 20		rep #$20	            REP #$20
.1a2d98	a5 23		lda $0823	                LDA ARGUMENT1
.1a2d9a	8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L    ; Set the graphics mode
.1a2d9e	e2 20		sep #$20	            SEP #$20
.1a2da0	a5 24		lda $0824	                LDA ARGUMENT1+1             ; Get the screen size bits
.1a2da2	c2 20		rep #$20	            REP #$20
.1a2da4	29 03 00	and #$0003	                AND #$0003
.1a2da7	0a		asl a		                ASL A                       ; Multiply by two to get the index
.1a2da8	aa		tax		                TAX                         ; X is index into the size tables
.1a2da9	c2 20		rep #$20	            REP #$20
.1a2dab	bf f4 2d 1a	lda $1a2df4,x	                LDA gr_columns,X            ; Set the columns
.1a2daf	8f 10 f0 1a	sta $1af010	                STA @lGR_MAX_COLS
.1a2db3	bf fc 2d 1a	lda $1a2dfc,x	                LDA gr_rows,X               ; Set the rows
.1a2db7	8f 12 f0 1a	sta $1af012	                STA @lGR_MAX_ROWS
.1a2dbb	af 10 f0 1a	lda $1af010	                LDA @lGR_MAX_COLS           ; Get the current columns
.1a2dbf	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.1a2dc3	af 12 f0 1a	lda $1af012	                LDA @lGR_MAX_ROWS           ; Get the current rows
.1a2dc7	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B
.1a2dcb	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT             ; Multiply them to get the total pixels
.1a2dcf	8f 14 f0 1a	sta $1af014	                STA @lGR_TOTAL_PIXELS
.1a2dd3	e2 20		sep #$20	            SEP #$20
.1a2dd5	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.1a2dd9	8f 16 f0 1a	sta $1af016	                STA @lGR_TOTAL_PIXELS+2
.1a2ddd	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2de1					reset_cursor
.1a2de1	c2 20		rep #$20	            REP #$20
.1a2de3	af 1a 00 00	lda $00001a	                LDA @lCURSORX
.1a2de7	aa		tax		                TAX
.1a2de8	af 1c 00 00	lda $00001c	                LDA @lCURSORY
.1a2dec	a8		tay		                TAY
.1a2ded	20 20 00	jsr $1a0020	            JSR CURSORXY
.1a2df0	28		plp		                PLP
.1a2df1	7a		ply		                PLY
.1a2df2	fa		plx		                PLX
.1a2df3	60		rts		            RTS
>1a2df4	80 02 20 03 40 01 90 01		gr_columns      .word 640,800,320,400
>1a2dfc	e0 01 58 02 f0 00 2c 01		gr_rows         .word 480,600,240,300
>1a2e04	50 00 64 00 28 00 32 00		col_count       .word 80,100,40,50
>1a2e0c	3c 00 4b 00 1e 00 32 00		row_count       .word 60,75,30,50
>1a2e14	48 00 5c 00 20 00 2a 00		colb_count      .word 72,92,32,42
>1a2e1c	34 00 43 00 16 00 34 00		rowb_count      .word 52,67,22,52
.1a2e24					BITMAP_SRAM
.1a2e24	da		phx		                PHX
.1a2e25	08		php		                PHP
.1a2e26	c2 30		rep #$30	            REP #$30
.1a2e28	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2e2b	b0 1c		bcs $1a2e49	                BGE range_err           ; Make sure it's within range
.1a2e2d	0a		asl a		                ASL A
.1a2e2e	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.1a2e2f	aa		tax		                TAX
.1a2e30	bf 00 f0 1a	lda $1af000,x	                LDA @l GR_BM0_ADDR,X    ; Get the low 16-bits of the address
.1a2e34	85 9e		sta $089e	                STA MTEMPPTR
.1a2e36	bf 02 f0 1a	lda $1af002,x	                LDA @l GR_BM0_ADDR+2,X  ; Get the high bits of the address
.1a2e3a	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a2e3c	c9 f0 00	cmp #$00f0	                CMP #MAX_VRAM_CPU       ; Check to make sure address is within VRAM
.1a2e3f	b0 08		bcs $1a2e49	                BGE range_err
.1a2e41	c9 b0 00	cmp #$00b0	                CMP #MIN_VRAM_CPU
.1a2e44	90 03		bcc $1a2e49	                BLT range_err
.1a2e46	28		plp		                PLP
.1a2e47	fa		plx		                PLX
.1a2e48	60		rts		            RTS
.1a2e49					range_err
.1a2e49	08		php		            PHP
.1a2e4a	c2 20		rep #$20	            REP #$20
.1a2e4c	48		pha		            PHA
.1a2e4d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2e50	5b		tcd		            TCD
.1a2e51	68		pla		            PLA
.1a2e52	28		plp		            PLP
.1a2e53	e2 20		sep #$20	            SEP #$20
.1a2e55	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2e57	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2e5b	c2 20		rep #$20	            REP #$20
.1a2e5d	29 ff 00	and #$00ff	            AND #$00FF
.1a2e60	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2e63	e2 20		sep #$20	            SEP #$20
.1a2e65	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2e68					BITMAP_VRAM
.1a2e68	da		phx		                PHX
.1a2e69	08		php		                PHP
.1a2e6a	c2 30		rep #$30	            REP #$30
.1a2e6c	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2e6f	b0 17		bcs $1a2e88	                BGE range_err           ; Make sure it's within range
.1a2e71	0a		asl a		                ASL A
.1a2e72	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.1a2e73	aa		tax		                TAX
.1a2e74	bf 08 f0 1a	lda $1af008,x	                LDA @l GR_BM0_VRAM,X    ; Get the low 16-bits of the address
.1a2e78	85 9e		sta $089e	                STA MTEMPPTR
.1a2e7a	bf 0a f0 1a	lda $1af00a,x	                LDA @l GR_BM0_VRAM+2,X  ; Get the high bits of the address
.1a2e7e	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a2e80	c9 40 00	cmp #$0040	                CMP #MAX_VRAM_VICKY     ; Check to make sure the address is from $00:0000 - $3F:FFFF
.1a2e83	b0 03		bcs $1a2e88	                BGE range_err           ; If not, throw a range error
.1a2e85	28		plp		                PLP
.1a2e86	fa		plx		                PLX
.1a2e87	60		rts		            RTS
.1a2e88					range_err
.1a2e88	08		php		            PHP
.1a2e89	c2 20		rep #$20	            REP #$20
.1a2e8b	48		pha		            PHA
.1a2e8c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2e8f	5b		tcd		            TCD
.1a2e90	68		pla		            PLA
.1a2e91	28		plp		            PLP
.1a2e92	e2 20		sep #$20	            SEP #$20
.1a2e94	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2e96	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2e9a	c2 20		rep #$20	            REP #$20
.1a2e9c	29 ff 00	and #$00ff	            AND #$00FF
.1a2e9f	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2ea2	e2 20		sep #$20	            SEP #$20
.1a2ea4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2ea7					S_BITMAP
.1a2ea7	08		php		                PHP
.1a2ea8					locals
>0001					L_PLANE         .word ?
>0003					L_VISIBLE       .byte ?
>0004					L_ADDRESS       .dword ?
.1a2ea8	c2 30		rep #$30	            REP #$30
.1a2eaa	3b		tsc		                TSC                         ; Allocate space for the locals on the stack
.1a2eab	38		sec		                SEC
.1a2eac	e9 07 00	sbc #$0007	                SBC #SIZE(locals)
.1a2eaf	1b		tcs		                TCS
.1a2eb0	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2eb3	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2eb6	c2 20		rep #$20	            REP #$20
.1a2eb8	a5 23		lda $0823	                LDA ARGUMENT1               ; Make sure it's in range
.1a2eba	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2ebd	b0 59		bcs $1a2f18	                BGE range_err               ; If not, throw an error
.1a2ebf	83 01		sta $01,s	                STA L_PLANE                 ; If so, save it to MARG1
.1a2ec1	e2 20		sep #$20	            SEP #$20
.1a2ec3	a9 2c		lda #$2c	                LDA #','
.1a2ec5	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2ec8	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2ecb	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2ece	a5 23		lda $0823	                LDA ARGUMENT1
.1a2ed0	83 03		sta $03,s	                STA L_VISIBLE
.1a2ed2	a9 2c		lda #$2c	                LDA #','
.1a2ed4	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a2ed7	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2eda	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2edd	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the number back
.1a2edf	0a		asl a		                ASL A                       ; Multiply by 8 to get the offset to the registers
.1a2ee0	0a		asl a		                ASL A
.1a2ee1	0a		asl a		                ASL A
.1a2ee2	aa		tax		                TAX                         ; And save that offset to X
.1a2ee3	a3 03		lda $03,s	                LDA L_VISIBLE               ; Check the visible flag
.1a2ee5	d0 05		bne $1a2eec	                BNE is_visible              ; If <> 0, it's visible
.1a2ee7	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the LUT #
.1a2ee9	0a		asl a		                ASL A                       ; Shift it into position for the register
.1a2eea	80 04		bra $1a2ef0	                BRA wr_bm_reg               ; And go to write it
.1a2eec	a5 23		lda $0823	is_visible      LDA ARGUMENT1               ; Get the LUT #
.1a2eee	38		sec		                SEC
.1a2eef	2a		rol a		                ROL A                       ; And shift it into position, and set enable bit
.1a2ef0	9f 00 01 af	sta $af0100,x	wr_bm_reg       STA @l BM0_CONTROL_REG,X    ; Write to the bitmap control register
.1a2ef4	c2 20		rep #$20	            REP #$20
.1a2ef6	a9 2c 00	lda #$002c	                LDA #','
.1a2ef9	85 37		sta $0837	                STA TARGETTOK
.1a2efb	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a2efe	b0 37		bcs $1a2f37	                BCS get_address             ; Yes: parse the address
.1a2f00	c2 20		rep #$20	            REP #$20
.1a2f02	08		php		            PHP
.1a2f03	c2 20		rep #$20	            REP #$20
.1a2f05	a9 00 00	lda #$0000	            LDA #<>VRAM
.1a2f08	85 23		sta $0823	            STA ARGUMENT1
.1a2f0a	a9 b0 00	lda #$00b0	            LDA #(VRAM >> 16)
.1a2f0d	85 25		sta $0825	            STA ARGUMENT1+2
.1a2f0f	e2 20		sep #$20	            SEP #$20
.1a2f11	a9 00		lda #$00	            LDA #TYPE_INTEGER
.1a2f13	85 27		sta $0827	            STA ARGUMENT1+4
.1a2f15	28		plp		            PLP
.1a2f16	80 27		bra $1a2f3f	                BRA set_address
.1a2f18					range_err
.1a2f18	08		php		            PHP
.1a2f19	c2 20		rep #$20	            REP #$20
.1a2f1b	48		pha		            PHA
.1a2f1c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2f1f	5b		tcd		            TCD
.1a2f20	68		pla		            PLA
.1a2f21	28		plp		            PLP
.1a2f22	e2 20		sep #$20	            SEP #$20
.1a2f24	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2f26	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2f2a	c2 20		rep #$20	            REP #$20
.1a2f2c	29 ff 00	and #$00ff	            AND #$00FF
.1a2f2f	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2f32	e2 20		sep #$20	            SEP #$20
.1a2f34	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2f37					get_address
.1a2f37	c2 20		rep #$20	            REP #$20
.1a2f39	20 da 20	jsr $1a20da	            JSR INCBIP
.1a2f3c	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2f3f					set_address
.1a2f3f	c2 20		rep #$20	            REP #$20
.1a2f41	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.1a2f43	0a		asl a		                ASL A                       ; Multiply by four to get the offset to the address variable
.1a2f44	0a		asl a		                ASL A
.1a2f45	aa		tax		                TAX                         ; And put it in X
.1a2f46	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the CPU-space address
.1a2f48	9f 00 f0 1a	sta $1af000,x	                STA @l GR_BM0_ADDR,X        ; And save it to the correct GR_BM?_ADDR variable
.1a2f4c	9f 08 f0 1a	sta $1af008,x	                STA @l GR_BM0_VRAM,X
.1a2f50	83 04		sta $04,s	                STA L_ADDRESS               ; And L_ADDRESS, temporarily
.1a2f52	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a2f54	9f 02 f0 1a	sta $1af002,x	                STA @l GR_BM0_ADDR+2,X
.1a2f58	38		sec		                SEC
.1a2f59	e9 b0 00	sbc #$00b0	                SBC #`VRAM                  ; Rebase the upper half of the address to Vicky memory space
.1a2f5c	9f 0a f0 1a	sta $1af00a,x	                STA @l GR_BM0_VRAM+2,X
.1a2f60	83 06		sta $06,s	                STA L_ADDRESS+2             ; And to L_ADDRESS
.1a2f62	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.1a2f64	0a		asl a		                ASL A                       ; Multiply by eight to get the offset to the registers
.1a2f65	0a		asl a		                ASL A
.1a2f66	0a		asl a		                ASL A
.1a2f67	aa		tax		                TAX                         ; And put it in X
.1a2f68	e2 20		sep #$20	            SEP #$20
.1a2f6a	a3 04		lda $04,s	                LDA L_ADDRESS               ; Get the address in Vicky space...
.1a2f6c	9f 01 01 af	sta $af0101,x	                STA @l BM0_START_ADDY_L,X   ; Save it to the Vicky registers
.1a2f70	a3 05		lda $05,s	                LDA L_ADDRESS+1
.1a2f72	9f 02 01 af	sta $af0102,x	                STA @l BM0_START_ADDY_M,X
.1a2f76	a3 06		lda $06,s	                LDA L_ADDRESS+2
.1a2f78	9f 03 01 af	sta $af0103,x	                STA @l BM0_START_ADDY_H,X
.1a2f7c	a9 00		lda #$00	                LDA #0                      ; Default offset to (0, 0)
.1a2f7e	9f 04 01 af	sta $af0104,x	                STA @l BM0_X_OFFSET,X
.1a2f82	9f 05 01 af	sta $af0105,x	                STA @l BM0_Y_OFFSET,X
.1a2f86	c2 30		rep #$30	            REP #$30
.1a2f88	3b		tsc		                TSC                         ; Remove the space for the locals from the stack
.1a2f89	18		clc		                CLC
.1a2f8a	69 07 00	adc #$0007	                ADC #SIZE(locals)
.1a2f8d	1b		tcs		                TCS
.1a2f8e	28		plp		                PLP
.1a2f8f	60		rts		            RTS
.1a2f90					bad_address
.1a2f90	08		php		            PHP
.1a2f91	c2 20		rep #$20	            REP #$20
.1a2f93	48		pha		            PHA
.1a2f94	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2f97	5b		tcd		            TCD
.1a2f98	68		pla		            PLA
.1a2f99	28		plp		            PLP
.1a2f9a	e2 20		sep #$20	            SEP #$20
.1a2f9c	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a2f9e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2fa2	c2 20		rep #$20	            REP #$20
.1a2fa4	29 ff 00	and #$00ff	            AND #$00FF
.1a2fa7	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a2faa	e2 20		sep #$20	            SEP #$20
.1a2fac	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2faf					S_CLRBITMAP
.1a2faf	08		php		                PHP
.1a2fb0	c2 20		rep #$20	            REP #$20
.1a2fb2	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a2fb5	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a2fb8	a5 23		lda $0823	                LDA ARGUMENT1
.1a2fba	20 68 2e	jsr $1a2e68	            JSR BITMAP_VRAM
.1a2fbd	c2 20		rep #$20	            REP #$20
.1a2fbf	a5 9e		lda $089e	                LDA MTEMPPTR                ; Set the start address and the # of pixels to write
.1a2fc1	8f 05 04 af	sta $af0405	                STA @lVDMA_DST_ADDY_L
.1a2fc5	af 14 f0 1a	lda $1af014	                LDA @lGR_TOTAL_PIXELS       ; Set the size
.1a2fc9	8f 08 04 af	sta $af0408	                STA @lVDMA_SIZE_L
.1a2fcd	e2 20		sep #$20	            SEP #$20
.1a2fcf	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.1a2fd1	8f 07 04 af	sta $af0407	                STA @lVDMA_DST_ADDY_H
.1a2fd5	af 16 f0 1a	lda $1af016	                LDA @lGR_TOTAL_PIXELS+2
.1a2fd9	8f 0a 04 af	sta $af040a	                STA @lVDMA_SIZE_H
.1a2fdd	a9 00		lda #$00	                LDA #0                      ; Set the color to write
.1a2fdf	8f 01 04 af	sta $af0401	                STA @lVDMA_BYTE_2_WRITE
.1a2fe3	a9 85		lda #$85	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_Start_TRF
.1a2fe5	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.1a2fe9	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.1a2fed	30 fa		bmi $1a2fe9	                BMI wait
.1a2fef	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.1a2ff1	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.1a2ff5	28		plp		done            PLP
.1a2ff6	60		rts		            RTS
=$000855				COLOR = MARG1
=$000859				X0 = MARG2
=$00085d				Y0 = MARG3
=$000861				X1 = MARG4
=$000865				Y1 = MARG5
=$000869				DX = MARG6
=$00086d				DY = MARG7
=$000871				ERR = MARG8
=$000875				ERR2 = MARG9
>08dd					SX      .word ?
>08df					SY      .word ?
.1a2ff7					PLOT
.1a2ff7	08		php		                PHP
.1a2ff8	c2 20		rep #$20	            REP #$20
.1a2ffa	a5 5d		lda $085d	                LDA Y0                      ; Get the row
.1a2ffc	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.1a3000	af 10 f0 1a	lda $1af010	                LDA @lGR_MAX_COLS
.1a3004	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B          ; Multiply by the number of columns in the pixmap
.1a3008	18		clc		                CLC                         ; Add the column
.1a3009	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT
.1a300d	65 59		adc $0859	                ADC X0
.1a300f	85 0c		sta $080c	                STA SCRATCH
.1a3011	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.1a3015	69 00 00	adc #$0000	                ADC #0
.1a3018	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH is offset of pixel in the pixmap
.1a301a	18		clc		                CLC                         ; Add the address of the first pixel
.1a301b	a5 0c		lda $080c	                LDA SCRATCH
.1a301d	65 9e		adc $089e	                ADC MTEMPPTR
.1a301f	85 0c		sta $080c	                STA SCRATCH
.1a3021	a5 0e		lda $080e	                LDA SCRATCH+2
.1a3023	65 a0		adc $08a0	                ADC MTEMPPTR+2
.1a3025	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH := pixmap + pixel offset
.1a3027	e2 20		sep #$20	            SEP #$20
.1a3029	a5 55		lda $0855	                LDA COLOR                   ; Get the color
.1a302b	87 0c		sta [$080c]	                STA [SCRATCH]               ; And write the color to the pixel
.1a302d	28		plp		                PLP
.1a302e	60		rts		            RTS
.1a302f					LINE
.1a302f	c2 20		rep #$20	            REP #$20
.1a3031	a9 01 00	lda #$0001	                LDA #1                      ; Assume SX = 1
.1a3034	85 dd		sta $08dd	                STA SX
.1a3036	38		sec		                SEC                         ; DX := ABS(X1 - X0)
.1a3037	a5 61		lda $0861	                LDA X1
.1a3039	e5 59		sbc $0859	                SBC X0
.1a303b	85 69		sta $0869	                STA DX
.1a303d	10 0b		bpl $1a304a	                BPL abs_Y                   ; If DX < 0 {
.1a303f	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DX := -DX
.1a3042	1a		inc a		                INC A
.1a3043	85 69		sta $0869	                STA DX
.1a3045	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SX := -1
.1a3048	85 dd		sta $08dd	                STA SX                      ; }
.1a304a	a9 01 00	lda #$0001	abs_Y           LDA #1                      ; Assume SY = 1
.1a304d	85 df		sta $08df	                STA SY
.1a304f	38		sec		                SEC                         ; DY := ABS(Y1 - Y0)
.1a3050	a5 65		lda $0865	                LDA Y1
.1a3052	e5 5d		sbc $085d	                SBC Y0
.1a3054	85 6d		sta $086d	                STA DY
.1a3056	10 0b		bpl $1a3063	                BPL calc_ERR                ; If DY < 0 {
.1a3058	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DY := -DY
.1a305b	1a		inc a		                INC A
.1a305c	85 6d		sta $086d	                STA DY
.1a305e	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SY := -1
.1a3061	85 df		sta $08df	                STA SY                      ; }
.1a3063	a5 6d		lda $086d	calc_ERR        LDA DY                      ; (DY < DX)
.1a3065	c5 69		cmp $0869	                CMP DX
.1a3067	b0 04		bcs $1a306d	                BGE else
.1a3069	a5 69		lda $0869	                LDA DX                      ; TRUE CASE: ERR := DX
.1a306b	80 06		bra $1a3073	                BRA shiftERR
.1a306d	a5 6d		lda $086d	else            LDA DY                      ; FALSE CASE: ERR := -DY
.1a306f	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a3072	1a		inc a		                INC A
.1a3073	48		pha		shiftERR        PHA
.1a3074	0a		asl a		                ASL A
.1a3075	68		pla		                PLA
.1a3076	6a		ror a		                ROR A                       ; ERR := ERR / 2
.1a3077	85 71		sta $0871	                STA ERR
.1a3079					loop
.1a3079	20 f7 2f	jsr $1a2ff7	            JSR PLOT
.1a307c	a5 59		lda $0859	                LDA X0                      ; break if X0=X1 and Y0=Y1
.1a307e	c5 61		cmp $0861	                CMP X1
.1a3080	d0 06		bne $1a3088	                BNE calc_ERR2
.1a3082	a5 5d		lda $085d	                LDA Y0
.1a3084	c5 65		cmp $0865	                CMP Y1
.1a3086	f0 36		beq $1a30be	                BEQ done
.1a3088	a5 71		lda $0871	calc_ERR2       LDA ERR                     ; ERR2 := ERR
.1a308a	85 75		sta $0875	                STA ERR2
.1a308c	a5 69		lda $0869	                LDA DX                      ; if (ERR2 > -DX) {
.1a308e	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a3091	1a		inc a		                INC A
.1a3092	c5 75		cmp $0875	                CMP ERR2
.1a3094	10 10		bpl $1a30a6	                BPL check_DY
.1a3096	f0 0e		beq $1a30a6	                BEQ check_DY
.1a3098	38		sec		                SEC                         ; ERR -= DY
.1a3099	a5 71		lda $0871	                LDA ERR
.1a309b	e5 6d		sbc $086d	                SBC DY
.1a309d	85 71		sta $0871	                STA ERR
.1a309f	18		clc		                CLC                         ; X0 += SX
.1a30a0	a5 59		lda $0859	                LDA X0
.1a30a2	65 dd		adc $08dd	                ADC SX
.1a30a4	85 59		sta $0859	                STA X0                      ; }
.1a30a6	a5 75		lda $0875	check_DY        LDA ERR2                    ; if (ERR2 < DY) {
.1a30a8	c5 6d		cmp $086d	                CMP DY
.1a30aa	10 cd		bpl $1a3079	                BPL loop
.1a30ac	f0 cb		beq $1a3079	                BEQ loop
.1a30ae	18		clc		                CLC                         ; ERR += DX
.1a30af	a5 71		lda $0871	                LDA ERR
.1a30b1	65 69		adc $0869	                ADC DX
.1a30b3	85 71		sta $0871	                STA ERR
.1a30b5	18		clc		                CLC                         ; Y0 += SY
.1a30b6	a5 5d		lda $085d	                LDA Y0
.1a30b8	65 df		adc $08df	                ADC SY
.1a30ba	85 5d		sta $085d	                STA Y0                      ; }
.1a30bc	80 bb		bra $1a3079	                BRA loop                    ; }
.1a30be					done
.1a30be	60		rts		            RTS
.1a30bf					S_PLOT
.1a30bf	08		php		                PHP
.1a30c0					locals
>0001					L_PLANE         .word ?
>0003					L_X             .word ?
>0005					L_Y             .word ?
.1a30c0	c2 20		rep #$20	            REP #$20
.1a30c2	3b		tsc		            TSC
.1a30c3	38		sec		            SEC
.1a30c4	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a30c7	1b		tcs		            TCS
.1a30c8	08		php		            PHP
.1a30c9	c2 20		rep #$20	            REP #$20
.1a30cb	48		pha		            PHA
.1a30cc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a30cf	5b		tcd		            TCD
.1a30d0	68		pla		            PLA
.1a30d1	28		plp		            PLP
.1a30d2	08		php		            PHP
.1a30d3	e2 20		sep #$20	            SEP #$20
.1a30d5	48		pha		            PHA
.1a30d6	a9 00		lda #$00	            LDA #0
.1a30d8	48		pha		            PHA
.1a30d9	ab		plb		            PLB
.1a30da	68		pla		            PLA
.1a30db	28		plp		            PLP
.1a30dc	c2 30		rep #$30	            REP #$30
.1a30de	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a30e1	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a30e4	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a30e6	a9 2c 00	lda #$002c	                LDA #','
.1a30e9	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a30ec	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a30ef	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a30f2	a5 23		lda $0823	                LDA ARGUMENT1
.1a30f4	83 03		sta $03,s	                STA L_X                     ; Save it to X
.1a30f6	a9 2c 00	lda #$002c	                LDA #','
.1a30f9	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a30fc	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a30ff	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3102	a5 23		lda $0823	                LDA ARGUMENT1
.1a3104	83 05		sta $05,s	                STA L_Y                     ; Save it to Y
.1a3106	a9 2c 00	lda #$002c	                LDA #','
.1a3109	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a310c	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a310f	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3112	a5 23		lda $0823	                LDA ARGUMENT1
.1a3114	85 55		sta $0855	                STA COLOR                   ; Save it to MARG1
.1a3116	a3 03		lda $03,s	                LDA L_X                     ; Set the (X0, Y0) coordinates
.1a3118	85 59		sta $0859	                STA X0
.1a311a	a3 05		lda $05,s	                LDA L_Y
.1a311c	85 5d		sta $085d	                STA Y0
.1a311e	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a3120	20 24 2e	jsr $1a2e24	            JSR BITMAP_SRAM
.1a3123	20 f7 2f	jsr $1a2ff7	            JSR PLOT
.1a3126	c2 20		rep #$20	            REP #$20
.1a3128	3b		tsc		            TSC
.1a3129	18		clc		            CLC
.1a312a	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a312d	1b		tcs		            TCS
.1a312e	28		plp		                PLP
.1a312f	60		rts		            RTS
.1a3130					S_LINE
.1a3130	08		php		                PHP
.1a3131					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
.1a3131	c2 20		rep #$20	            REP #$20
.1a3133	3b		tsc		            TSC
.1a3134	38		sec		            SEC
.1a3135	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.1a3138	1b		tcs		            TCS
.1a3139	08		php		            PHP
.1a313a	c2 20		rep #$20	            REP #$20
.1a313c	48		pha		            PHA
.1a313d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3140	5b		tcd		            TCD
.1a3141	68		pla		            PLA
.1a3142	28		plp		            PLP
.1a3143	08		php		            PHP
.1a3144	e2 20		sep #$20	            SEP #$20
.1a3146	48		pha		            PHA
.1a3147	a9 00		lda #$00	            LDA #0
.1a3149	48		pha		            PHA
.1a314a	ab		plb		            PLB
.1a314b	68		pla		            PLA
.1a314c	28		plp		            PLP
.1a314d	c2 30		rep #$30	            REP #$30
.1a314f	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3152	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3155	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a3157	a9 2c 00	lda #$002c	                LDA #','
.1a315a	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a315d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3160	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3163	a5 23		lda $0823	                LDA ARGUMENT1
.1a3165	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.1a3167	a9 2c 00	lda #$002c	                LDA #','
.1a316a	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a316d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3170	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3173	a5 23		lda $0823	                LDA ARGUMENT1
.1a3175	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.1a3177	a9 2c 00	lda #$002c	                LDA #','
.1a317a	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a317d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3180	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3183	a5 23		lda $0823	                LDA ARGUMENT1
.1a3185	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.1a3187	a9 2c 00	lda #$002c	                LDA #','
.1a318a	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a318d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3190	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3193	a5 23		lda $0823	                LDA ARGUMENT1
.1a3195	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.1a3197	a9 2c 00	lda #$002c	                LDA #','
.1a319a	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a319d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a31a0	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a31a3	a5 23		lda $0823	                LDA ARGUMENT1
.1a31a5	85 55		sta $0855	                STA COLOR                   ; Save it to COLOR
.1a31a7	a3 03		lda $03,s	                LDA L_X0                    ; Set the (X0, Y0) coordinates
.1a31a9	85 59		sta $0859	                STA X0
.1a31ab	a3 05		lda $05,s	                LDA L_Y0
.1a31ad	85 5d		sta $085d	                STA Y0
.1a31af	a3 07		lda $07,s	                LDA L_X1                    ; Set the (X1, Y1) coordinates
.1a31b1	85 61		sta $0861	                STA X1
.1a31b3	a3 09		lda $09,s	                LDA L_Y1
.1a31b5	85 65		sta $0865	                STA Y1
.1a31b7	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a31b9	20 24 2e	jsr $1a2e24	            JSR BITMAP_SRAM
.1a31bc	20 2f 30	jsr $1a302f	            JSR LINE
.1a31bf					done
.1a31bf	c2 20		rep #$20	            REP #$20
.1a31c1	3b		tsc		            TSC
.1a31c2	18		clc		            CLC
.1a31c3	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.1a31c6	1b		tcs		            TCS
.1a31c7	28		plp		                PLP
.1a31c8	60		rts		            RTS
.1a31c9					S_FILL
.1a31c9	08		php		                PHP
.1a31ca					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
>000b					L_COLOR         .word ?
.1a31ca	c2 20		rep #$20	            REP #$20
.1a31cc	3b		tsc		            TSC
.1a31cd	38		sec		            SEC
.1a31ce	e9 0c 00	sbc #$000c	            SBC #SIZE(locals)
.1a31d1	1b		tcs		            TCS
.1a31d2	08		php		            PHP
.1a31d3	c2 20		rep #$20	            REP #$20
.1a31d5	48		pha		            PHA
.1a31d6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a31d9	5b		tcd		            TCD
.1a31da	68		pla		            PLA
.1a31db	28		plp		            PLP
.1a31dc	08		php		            PHP
.1a31dd	e2 20		sep #$20	            SEP #$20
.1a31df	48		pha		            PHA
.1a31e0	a9 00		lda #$00	            LDA #0
.1a31e2	48		pha		            PHA
.1a31e3	ab		plb		            PLB
.1a31e4	68		pla		            PLA
.1a31e5	28		plp		            PLP
.1a31e6	c2 30		rep #$30	            REP #$30
.1a31e8	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a31eb	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a31ee	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a31f0	a9 2c 00	lda #$002c	                LDA #','
.1a31f3	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a31f6	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a31f9	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a31fc	a5 23		lda $0823	                LDA ARGUMENT1
.1a31fe	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.1a3200	a9 2c 00	lda #$002c	                LDA #','
.1a3203	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3206	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3209	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a320c	a5 23		lda $0823	                LDA ARGUMENT1
.1a320e	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.1a3210	a9 2c 00	lda #$002c	                LDA #','
.1a3213	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3216	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3219	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a321c	a5 23		lda $0823	                LDA ARGUMENT1
.1a321e	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.1a3220	a9 2c 00	lda #$002c	                LDA #','
.1a3223	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3226	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3229	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a322c	a5 23		lda $0823	                LDA ARGUMENT1
.1a322e	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.1a3230	a9 2c 00	lda #$002c	                LDA #','
.1a3233	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3236	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3239	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a323c	a5 23		lda $0823	                LDA ARGUMENT1
.1a323e	83 0b		sta $0b,s	                STA L_COLOR                 ; Save it to COLOR
.1a3240	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a3242	20 68 2e	jsr $1a2e68	            JSR BITMAP_VRAM
.1a3245	a9 07 00	lda #$0007	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_1D_2D
.1a3248	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a324c	c2 20		rep #$20	            REP #$20
.1a324e	a3 05		lda $05,s	                LDA L_Y0                    ; Get the row
.1a3250	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a3254	af 10 f0 1a	lda $1af010	                LDA @l GR_MAX_COLS
.1a3258	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B         ; Multiply by the number of columns in the pixmap
.1a325c	18		clc		                CLC                         ; Add the column
.1a325d	af 04 01 00	lda $000104	                LDA @l M0_RESULT
.1a3261	63 03		adc $03,s	                ADC L_X0
.1a3263	85 0c		sta $080c	                STA SCRATCH
.1a3265	e2 20		sep #$20	            SEP #$20
.1a3267	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.1a326b	69 00		adc #$00	                ADC #0
.1a326d	85 0e		sta $080e	                STA SCRATCH+2
.1a326f	c2 20		rep #$20	            REP #$20
.1a3271	18		clc		                CLC                         ; Set the destination address
.1a3272	a5 9e		lda $089e	                LDA MTEMPPTR
.1a3274	65 0c		adc $080c	                ADC SCRATCH
.1a3276	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.1a327a	e2 20		sep #$20	            SEP #$20
.1a327c	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.1a327e	65 0e		adc $080e	                ADC SCRATCH+2
.1a3280	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H
.1a3284	c2 20		rep #$20	            REP #$20
.1a3286	38		sec		                SEC                         ; Set the width of the FILL operation
.1a3287	a3 07		lda $07,s	                LDA L_X1
.1a3289	e3 03		sbc $03,s	                SBC L_X0
.1a328b	85 0c		sta $080c	                STA SCRATCH
.1a328d	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a3291	38		sec		                SEC
.1a3292	af 10 f0 1a	lda $1af010	                LDA @l GR_MAX_COLS
.1a3296	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L    ; And the destination stride
.1a329a	38		sec		                SEC                         ; Set the height of the FILL operation
.1a329b	a3 09		lda $09,s	                LDA L_Y1
.1a329d	e3 05		sbc $05,s	                SBC L_Y0
.1a329f	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a32a3	e2 20		sep #$20	            SEP #$20
.1a32a5	a3 0b		lda $0b,s	                LDA L_COLOR                 ; Set the color to write
.1a32a7	8f 01 04 af	sta $af0401	                STA @l VDMA_BYTE_2_WRITE
.1a32ab	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.1a32af	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF
.1a32b1	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a32b5	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.1a32b9	30 fa		bmi $1a32b5	                BMI wait
.1a32bb	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.1a32bd	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a32c1					done
.1a32c1	c2 20		rep #$20	            REP #$20
.1a32c3	3b		tsc		            TSC
.1a32c4	18		clc		            CLC
.1a32c5	69 0c 00	adc #$000c	            ADC #SIZE(locals)
.1a32c8	1b		tcs		            TCS
.1a32c9	28		plp		                PLP
.1a32ca	60		rts		            RTS
.1a32cb					SPADDR
.1a32cb	08		php		                PHP
.1a32cc	c2 20		rep #$20	            REP #$20
.1a32ce	c9 40 00	cmp #$0040	                CMP #SP_MAX
.1a32d1	b0 13		bcs $1a32e6	                BGE error
.1a32d3	0a		asl a		                ASL A                       ; Multiply it by 8 (the size of s sprite block)
.1a32d4	0a		asl a		                ASL A
.1a32d5	0a		asl a		                ASL A
.1a32d6	18		clc		                CLC                         ; Add it to the address of the first
.1a32d7	69 00 0c	adc #$0c00	                ADC #<>SP00_CONTROL_REG     ; sprite block
.1a32da	85 9e		sta $089e	                STA MTEMPPTR
.1a32dc	a9 af 00	lda #$00af	                LDA #`SP00_CONTROL_REG
.1a32df	69 00 00	adc #$0000	                ADC #0
.1a32e2	85 a0		sta $08a0	                STA MTEMPPTR+2              ; And save that to MTEMPPTR
.1a32e4	28		plp		                PLP
.1a32e5	60		rts		            RTS
.1a32e6					error
.1a32e6	08		php		            PHP
.1a32e7	c2 20		rep #$20	            REP #$20
.1a32e9	48		pha		            PHA
.1a32ea	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a32ed	5b		tcd		            TCD
.1a32ee	68		pla		            PLA
.1a32ef	28		plp		            PLP
.1a32f0	e2 20		sep #$20	            SEP #$20
.1a32f2	a9 09		lda #$09	            LDA #ERR_RANGE
.1a32f4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a32f8	c2 20		rep #$20	            REP #$20
.1a32fa	29 ff 00	and #$00ff	            AND #$00FF
.1a32fd	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3300	e2 20		sep #$20	            SEP #$20
.1a3302	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3305					S_SPRITE
.1a3305	08		php		                PHP
.1a3306					locals
>0001					L_SPRITE        .word ?
>0003					L_LUT           .byte ?
.1a3306	c2 20		rep #$20	            REP #$20
.1a3308	3b		tsc		            TSC
.1a3309	38		sec		            SEC
.1a330a	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.1a330d	1b		tcs		            TCS
.1a330e	c2 30		rep #$30	            REP #$30
.1a3310	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3313	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3316	a5 23		lda $0823	                LDA ARGUMENT1
.1a3318	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a331a	a9 2c 00	lda #$002c	                LDA #','
.1a331d	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3320	e2 20		sep #$20	            SEP #$20
.1a3322	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3325	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3328	a5 23		lda $0823	                LDA ARGUMENT1
.1a332a	c9 08		cmp #$08	                CMP #GR_MAX_LUT             ; Check that it's in range
.1a332c	b0 56		bcs $1a3384	                BGE error                   ; If not: throw an error
.1a332e	83 03		sta $03,s	                STA L_LUT                   ; Save it as lut
.1a3330	a9 2c		lda #$2c	                LDA #','
.1a3332	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3335	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3338	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a333b	c2 20		rep #$20	            REP #$20
.1a333d	38		sec		                SEC                         ; Adjust address to be in Vicky's space
.1a333e	a5 23		lda $0823	                LDA ARGUMENT1
.1a3340	e9 00 00	sbc #$0000	                SBC #<>VRAM
.1a3343	85 23		sta $0823	                STA ARGUMENT1
.1a3345	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3347	e9 b0 00	sbc #$00b0	                SBC #`VRAM
.1a334a	85 25		sta $0825	                STA ARGUMENT1+2
.1a334c	30 36		bmi $1a3384	                BMI error                   ; If negative, throw an error
.1a334e	c2 20		rep #$20	            REP #$20
.1a3350	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a3352	aa		tax		                TAX
.1a3353	20 cb 32	jsr $1a32cb	            JSR SPADDR
.1a3356	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the lower word of the address
.1a3358	a0 01 00	ldy #$0001	                LDY #SP_ADDR
.1a335b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a335d	e2 20		sep #$20	            SEP #$20
.1a335f	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3361	c8		iny		                INY
.1a3362	c8		iny		                INY
.1a3363	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save the upper byte of the address
.1a3365	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the sprite control register
.1a3369	29 f1		and #$f1	                AND #%11110001              ; Filter off the current LUT
.1a336b	85 0c		sta $080c	                STA SCRATCH
.1a336d	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT back
.1a336f	0a		asl a		                ASL A                       ; Sift it into the LUT position
.1a3370	29 0e		and #$0e	                AND #%00001110              ; Make sure we don't have anything wrong there
.1a3372	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with what's in the sprite's control
.1a3374	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the register's bits
.1a3376	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And the shadow register
.1a337a					done
.1a337a	c2 20		rep #$20	            REP #$20
.1a337c	3b		tsc		            TSC
.1a337d	18		clc		            CLC
.1a337e	69 03 00	adc #$0003	            ADC #SIZE(locals)
.1a3381	1b		tcs		            TCS
.1a3382	28		plp		                PLP
.1a3383	60		rts		            RTS
.1a3384					error
.1a3384	08		php		            PHP
.1a3385	c2 20		rep #$20	            REP #$20
.1a3387	48		pha		            PHA
.1a3388	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a338b	5b		tcd		            TCD
.1a338c	68		pla		            PLA
.1a338d	28		plp		            PLP
.1a338e	e2 20		sep #$20	            SEP #$20
.1a3390	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3392	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3396	c2 20		rep #$20	            REP #$20
.1a3398	29 ff 00	and #$00ff	            AND #$00FF
.1a339b	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a339e	e2 20		sep #$20	            SEP #$20
.1a33a0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a33a3					S_SPRITEAT
.1a33a3	08		php		                PHP
.1a33a4					locals
>0001					L_SPRITE        .word ?
>0003					L_X             .word ?
.1a33a4	c2 20		rep #$20	            REP #$20
.1a33a6	3b		tsc		            TSC
.1a33a7	38		sec		            SEC
.1a33a8	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a33ab	1b		tcs		            TCS
.1a33ac	c2 30		rep #$30	            REP #$30
.1a33ae	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a33b1	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a33b4	a5 23		lda $0823	                LDA ARGUMENT1
.1a33b6	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a33b8	a9 2c 00	lda #$002c	                LDA #','
.1a33bb	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a33be	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a33c1	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a33c4	a5 23		lda $0823	                LDA ARGUMENT1
.1a33c6	83 03		sta $03,s	                STA L_X                     ; Save it as X
.1a33c8	a9 2c 00	lda #$002c	                LDA #','
.1a33cb	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a33ce	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a33d1	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a33d4	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a33d6	20 cb 32	jsr $1a32cb	            JSR SPADDR
.1a33d9	a3 03		lda $03,s	                LDA L_X                     ; Get the X coordinate
.1a33db	a0 04 00	ldy #$0004	                LDY #SP_X_COORD             ; Save the X coordinate for the sprite
.1a33de	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a33e0	a5 23		lda $0823	                LDA ARGUMENT1
.1a33e2	a0 06 00	ldy #$0006	                LDY #SP_Y_COORD             ; Save the Y coordinate for the sprite
.1a33e5	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a33e7					done
.1a33e7	c2 20		rep #$20	            REP #$20
.1a33e9	3b		tsc		            TSC
.1a33ea	18		clc		            CLC
.1a33eb	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a33ee	1b		tcs		            TCS
.1a33ef	28		plp		                PLP
.1a33f0	60		rts		            RTS
.1a33f1					S_SPRITESHOW
.1a33f1	08		php		                PHP
.1a33f2					locals
>0001					L_SPRITE        .word ?
>0003					L_VISIBLE       .byte ?
.1a33f2	c2 20		rep #$20	            REP #$20
.1a33f4	3b		tsc		            TSC
.1a33f5	38		sec		            SEC
.1a33f6	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.1a33f9	1b		tcs		            TCS
.1a33fa	c2 30		rep #$30	            REP #$30
.1a33fc	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a33ff	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3402	a5 23		lda $0823	                LDA ARGUMENT1
.1a3404	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a3406	a9 2c 00	lda #$002c	                LDA #','
.1a3409	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a340c	e2 20		sep #$20	            SEP #$20
.1a340e	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3411	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3414	a5 23		lda $0823	                LDA ARGUMENT1
.1a3416	d0 04		bne $1a341c	                BNE is_visible
.1a3418	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 0 (not visible)
.1a341a	80 04		bra $1a3420	                BRA chk_layer
.1a341c	a9 01		lda #$01	is_visible      LDA #1
.1a341e	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 1 (visible)
.1a3420	a9 2c		lda #$2c	chk_layer       LDA #','
.1a3422	85 37		sta $0837	                STA TARGETTOK
.1a3424	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a3427	b0 20		bcs $1a3449	                BCS get_layer               ; Yes: get the layer
.1a3429					no_layer
.1a3429	c2 30		rep #$30	            REP #$30
.1a342b	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a342d	aa		tax		                TAX
.1a342e	20 cb 32	jsr $1a32cb	            JSR SPADDR
.1a3431	e2 20		sep #$20	            SEP #$20
.1a3433	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.1a3437	29 fe		and #$fe	                AND #$FE                    ; Filter out the enable bit
.1a3439	85 0c		sta $080c	                STA SCRATCH
.1a343b	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.1a343d	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.1a343f	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.1a3441	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And save it
.1a3445	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; ... and to Vicky
.1a3447	80 36		bra $1a347f	                BRA done
.1a3449					get_layer
.1a3449	c2 30		rep #$30	            REP #$30
.1a344b	20 da 20	jsr $1a20da	            JSR INCBIP
.1a344e	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3451	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3454	a5 23		lda $0823	                LDA ARGUMENT1
.1a3456	c9 08 00	cmp #$0008	                CMP #8                      ; Make sure it's in range
.1a3459	b0 2e		bcs $1a3489	                BGE error                   ; If not, throw an out of range error
.1a345b	0a		asl a		                ASL A                       ; If it's ok... shift it into position
.1a345c	0a		asl a		                ASL A
.1a345d	0a		asl a		                ASL A
.1a345e	0a		asl a		                ASL A
.1a345f	85 0c		sta $080c	                STA SCRATCH                 ; And save it in SCRATCH
.1a3461	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a3463	aa		tax		                TAX
.1a3464	20 cb 32	jsr $1a32cb	            JSR SPADDR
.1a3467	e2 20		sep #$20	            SEP #$20
.1a3469	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.1a346b	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.1a346d	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.1a346f	85 0c		sta $080c	                STA SCRATCH
.1a3471	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.1a3475	29 8e		and #$8e	                AND #%10001110              ; Filter out the enable and layer bits
.1a3477	05 0c		ora $080c	                ORA SCRATCH                 ; Combine with the provided layer and enable
.1a3479	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the bits in Vicky
.1a347b	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And to the shadow registers
.1a347f					done
.1a347f	c2 20		rep #$20	            REP #$20
.1a3481	3b		tsc		            TSC
.1a3482	18		clc		            CLC
.1a3483	69 03 00	adc #$0003	            ADC #SIZE(locals)
.1a3486	1b		tcs		            TCS
.1a3487	28		plp		                PLP
.1a3488	60		rts		            RTS
.1a3489					error
.1a3489	08		php		            PHP
.1a348a	c2 20		rep #$20	            REP #$20
.1a348c	48		pha		            PHA
.1a348d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3490	5b		tcd		            TCD
.1a3491	68		pla		            PLA
.1a3492	28		plp		            PLP
.1a3493	e2 20		sep #$20	            SEP #$20
.1a3495	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3497	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a349b	c2 20		rep #$20	            REP #$20
.1a349d	29 ff 00	and #$00ff	            AND #$00FF
.1a34a0	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a34a3	e2 20		sep #$20	            SEP #$20
.1a34a5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a34a8					TILESET_ADDR
.1a34a8	08		php		                PHP
.1a34a9	c2 20		rep #$20	            REP #$20
.1a34ab	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.1a34ae	b0 19		bcs $1a34c9	                BGE out_of_range            ; If not, throw a range error
.1a34b0	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.1a34b3	a9 04 00	lda #$0004	                LDA #TILESET_REG_SIZE       ; Multiply it by the number of bytes in a tile set register set
.1a34b6	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.1a34b9	18		clc		                CLC                         ; Add to TILESET0_ADDY_L to get the final address
.1a34ba	ad 04 01	lda $0104	                LDA @w M0_RESULT
.1a34bd	69 80 02	adc #$0280	                ADC #<>TILESET0_ADDY_L
.1a34c0	85 9e		sta $089e	                STA MTEMPPTR
.1a34c2	a9 af 00	lda #$00af	                LDA #`TILESET0_ADDY_L
.1a34c5	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a34c7	28		plp		                PLP
.1a34c8	60		rts		            RTS
.1a34c9					out_of_range
.1a34c9	08		php		            PHP
.1a34ca	c2 20		rep #$20	            REP #$20
.1a34cc	48		pha		            PHA
.1a34cd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a34d0	5b		tcd		            TCD
.1a34d1	68		pla		            PLA
.1a34d2	28		plp		            PLP
.1a34d3	e2 20		sep #$20	            SEP #$20
.1a34d5	a9 09		lda #$09	            LDA #ERR_RANGE
.1a34d7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a34db	c2 20		rep #$20	            REP #$20
.1a34dd	29 ff 00	and #$00ff	            AND #$00FF
.1a34e0	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a34e3	e2 20		sep #$20	            SEP #$20
.1a34e5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a34e8					TILEMAP_ADDR
.1a34e8	08		php		                PHP
.1a34e9	c2 20		rep #$20	            REP #$20
.1a34eb	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.1a34ee	b0 19		bcs $1a3509	                BGE out_of_range            ; If not, throw a range error
.1a34f0	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.1a34f3	a9 0c 00	lda #$000c	                LDA #TILEMAP_REG_SIZE       ; Multiply it by the number of bytes in a tile map register set
.1a34f6	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.1a34f9	18		clc		                CLC
.1a34fa	ad 04 01	lda $0104	                LDA @w M0_RESULT            ; Add to TL0_CONTROL_REG to get the final address
.1a34fd	69 00 02	adc #$0200	                ADC #<>TL0_CONTROL_REG
.1a3500	85 9e		sta $089e	                STA MTEMPPTR
.1a3502	a9 af 00	lda #$00af	                LDA #`TL0_CONTROL_REG
.1a3505	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a3507	28		plp		                PLP
.1a3508	60		rts		            RTS
.1a3509					out_of_range
.1a3509	08		php		            PHP
.1a350a	c2 20		rep #$20	            REP #$20
.1a350c	48		pha		            PHA
.1a350d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3510	5b		tcd		            TCD
.1a3511	68		pla		            PLA
.1a3512	28		plp		            PLP
.1a3513	e2 20		sep #$20	            SEP #$20
.1a3515	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3517	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a351b	c2 20		rep #$20	            REP #$20
.1a351d	29 ff 00	and #$00ff	            AND #$00FF
.1a3520	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3523	e2 20		sep #$20	            SEP #$20
.1a3525	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3528					S_TILESET
.1a3528	08		php		                PHP
.1a3529					locals
>0001					L_TILENUM       .word ?
>0003					L_LUT           .word ?
>0005					L_IS_SQUARE     .word ?
.1a3529	c2 20		rep #$20	            REP #$20
.1a352b	3b		tsc		            TSC
.1a352c	38		sec		            SEC
.1a352d	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a3530	1b		tcs		            TCS
.1a3531	c2 20		rep #$20	            REP #$20
.1a3533	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3536	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3539	a5 23		lda $0823	                LDA ARGUMENT1
.1a353b	83 01		sta $01,s	                STA L_TILENUM               ; Save it as the tile set/map number
.1a353d	a9 2c 00	lda #$002c	                LDA #','
.1a3540	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3543	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3546	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3549	a5 23		lda $0823	                LDA ARGUMENT1
.1a354b	83 03		sta $03,s	                STA L_LUT                   ; Save it as LUT
.1a354d	a9 2c 00	lda #$002c	                LDA #','
.1a3550	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3553	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3556	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3559	a5 23		lda $0823	                LDA ARGUMENT1
.1a355b	83 05		sta $05,s	                STA L_IS_SQUARE             ; Save it as IS_SQUARE
.1a355d	a9 2c 00	lda #$002c	                LDA #','
.1a3560	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3563	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3566	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3569	a3 01		lda $01,s	                LDA L_TILENUM
.1a356b	20 a8 34	jsr $1a34a8	            JSR TILESET_ADDR
.1a356e	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the bitmap address - the address of the start of VRAM
.1a3570	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And save it to the registers
.1a3572	e2 20		sep #$20	            SEP #$20
.1a3574	38		sec		                SEC
.1a3575	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3577	e9 b0		sbc #$b0	                SBC #`VRAM
.1a3579	a0 02 00	ldy #$0002	                LDY #TILESET_ADDY_H
.1a357c	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a357e	a3 05		lda $05,s	                LDA L_IS_SQUARE             ; Check if is_square == 0?
.1a3580	d0 0d		bne $1a358f	                BNE is_square
.1a3582					not_square
.1a3582	e2 20		sep #$20	            SEP #$20
.1a3584	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.1a3586	29 07		and #$07	                AND #$07                    ; Force it to be in range
.1a3588	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.1a358b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.1a358d	80 0d		bra $1a359c	                BRA done
.1a358f					is_square
.1a358f	e2 20		sep #$20	            SEP #$20
.1a3591	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.1a3593	29 07		and #$07	                AND #$07                    ; Force it to be in range
.1a3595	09 08		ora #$08	                ORA #TILESET_SQUARE_256     ; Turn on the 256x256 flag
.1a3597	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.1a359a	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.1a359c					done
.1a359c	c2 20		rep #$20	            REP #$20
.1a359e	3b		tsc		            TSC
.1a359f	18		clc		            CLC
.1a35a0	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a35a3	1b		tcs		            TCS
.1a35a4	28		plp		                PLP
.1a35a5	60		rts		            RTS
.1a35a6					S_TILEMAP
.1a35a6	08		php		                PHP
.1a35a7					locals
>0001					L_TILENUM       .word ?
>0003					L_WIDTH         .word ?
>0005					L_HEIGHT        .word ?
.1a35a7	c2 20		rep #$20	            REP #$20
.1a35a9	3b		tsc		            TSC
.1a35aa	38		sec		            SEC
.1a35ab	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a35ae	1b		tcs		            TCS
.1a35af	c2 20		rep #$20	            REP #$20
.1a35b1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a35b4	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a35b7	a5 23		lda $0823	                LDA ARGUMENT1
.1a35b9	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a35bb	a9 2c 00	lda #$002c	                LDA #','
.1a35be	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a35c1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a35c4	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a35c7	a5 23		lda $0823	                LDA ARGUMENT1
.1a35c9	83 03		sta $03,s	                STA L_WIDTH                 ; Save it as WIDTH
.1a35cb	a9 2c 00	lda #$002c	                LDA #','
.1a35ce	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a35d1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a35d4	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a35d7	a5 23		lda $0823	                LDA ARGUMENT1
.1a35d9	83 05		sta $05,s	                STA L_HEIGHT                ; Save it as HEIGHT
.1a35db	a9 2c 00	lda #$002c	                LDA #','
.1a35de	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a35e1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a35e4	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a35e7	a3 01		lda $01,s	                LDA L_TILENUM
.1a35e9	20 e8 34	jsr $1a34e8	            JSR TILEMAP_ADDR
.1a35ec	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the map address - the address of the start of VRAM
.1a35ee	a0 01 00	ldy #$0001	                LDY #TILEMAP_START_ADDY
.1a35f1	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; And save it to the registers
.1a35f3	e2 20		sep #$20	            SEP #$20
.1a35f5	38		sec		                SEC
.1a35f6	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a35f8	e9 b0		sbc #$b0	                SBC #`VRAM
.1a35fa	c8		iny		                INY
.1a35fb	c8		iny		                INY
.1a35fc	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a35fe	c2 20		rep #$20	            REP #$20
.1a3600	a3 03		lda $03,s	                LDA L_WIDTH                 ; Set the width
.1a3602	a0 04 00	ldy #$0004	                LDY #TILEMAP_TOTAL_X
.1a3605	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3607	a3 05		lda $05,s	                LDA L_HEIGHT                ; Set the height
.1a3609	a0 06 00	ldy #$0006	                LDY #TILEMAP_TOTAL_Y
.1a360c	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a360e					done
.1a360e	c2 20		rep #$20	            REP #$20
.1a3610	3b		tsc		            TSC
.1a3611	18		clc		            CLC
.1a3612	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a3615	1b		tcs		            TCS
.1a3616	28		plp		                PLP
.1a3617	60		rts		            RTS
.1a3618					S_TILESHOW
.1a3618	08		php		                PHP
.1a3619					locals
>0001					L_TILENUM       .word ?
.1a3619	c2 20		rep #$20	            REP #$20
.1a361b	f4 00 00	pea #$0000	            PEA #0
.1a361e	c2 20		rep #$20	            REP #$20
.1a3620	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3623	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3626	a5 23		lda $0823	                LDA ARGUMENT1
.1a3628	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a362a	a9 2c 00	lda #$002c	                LDA #','
.1a362d	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3630	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3633	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3636	a3 01		lda $01,s	                LDA L_TILENUM
.1a3638	20 e8 34	jsr $1a34e8	            JSR TILEMAP_ADDR
.1a363b	a5 23		lda $0823	                LDA ARGUMENT1               ; CHeck the visible parameter
.1a363d	d0 06		bne $1a3645	                BNE is_visible              ; If it's <> 0, make it visible
.1a363f	e2 20		sep #$20	            SEP #$20
.1a3641	a9 00		lda #$00	                LDA #0                      ; Control value for invisible
.1a3643	80 04		bra $1a3649	                BRA set_control
.1a3645					is_visible
.1a3645	e2 20		sep #$20	            SEP #$20
.1a3647	a9 01		lda #$01	                LDA #TILEMAP_VISIBLE        ; Control value for visible
.1a3649					set_control
.1a3649	e2 20		sep #$20	            SEP #$20
.1a364b	a0 00 00	ldy #$0000	                LDY #TILEMAP_CONTROL        ; Set the control register
.1a364e	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3650					done
.1a3650	c2 20		rep #$20	            REP #$20
.1a3652	68		pla		            PLA
.1a3653	28		plp		                PLP
.1a3654	60		rts		            RTS
.1a3655					S_TILEAT
.1a3655	08		php		                PHP
.1a3656					locals
>0001					L_TILENUM       .word ?
>0003					L_X             .word ?
.1a3656	c2 20		rep #$20	            REP #$20
.1a3658	3b		tsc		            TSC
.1a3659	38		sec		            SEC
.1a365a	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a365d	1b		tcs		            TCS
.1a365e	c2 20		rep #$20	            REP #$20
.1a3660	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3663	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3666	a5 23		lda $0823	                LDA ARGUMENT1
.1a3668	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a366a	a9 2c 00	lda #$002c	                LDA #','
.1a366d	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3670	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3673	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3676	a5 23		lda $0823	                LDA ARGUMENT1
.1a3678	83 03		sta $03,s	                STA L_X                     ; Save as X
.1a367a	a9 2c 00	lda #$002c	                LDA #','
.1a367d	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3680	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3683	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3686	a3 01		lda $01,s	                LDA L_TILENUM
.1a3688	20 e8 34	jsr $1a34e8	            JSR TILEMAP_ADDR
.1a368b	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the Y position
.1a368d	a0 0a 00	ldy #$000a	                LDY #TILEMAP_WINDOW_Y
.1a3690	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3692	a3 03		lda $03,s	                LDA L_X                     ; Set the X position
.1a3694	a0 08 00	ldy #$0008	                LDY #TILEMAP_WINDOW_X
.1a3697	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3699					done
.1a3699	c2 20		rep #$20	            REP #$20
.1a369b	3b		tsc		            TSC
.1a369c	18		clc		            CLC
.1a369d	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a36a0	1b		tcs		            TCS
.1a36a1	28		plp		                PLP
.1a36a2	60		rts		            RTS
=0					DMA_LINEAR = 0                              ; Memory to copy is a continguous, linear range
=1					DMA_RECT = 1                                ; Memory to copy is a rectangular block
.0000					DMA_BLOCK
>0000					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>0001					ADDR            .long ?                     ; The starting address for the data to transfer
>0004					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>0007					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>0009					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>000b					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
=$01					DMA_SRC_2D = $01                            ; Source transfer should be 2D
=$02					DMA_DST_2D = $02                            ; Destination transfer should be 2D
=$10					DMA_SRC_SRAM = $10                          ; Flag indicating that the source is in SRAM ($00:0000 - $3F:FFFF)
=$20					DMA_DST_SRAM = $20                          ; Flag indicating that the destination is in SRAM ($00:0000 - $3F:FFFF)
>1af058					DMA_BLOCKS      .byte ?                     ; What blocks are involved
.1af059					DMA_SRC
>1af059					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>1af05a					ADDR            .long ?                     ; The starting address for the data to transfer
>1af05d					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>1af060					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>1af062					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>1af064					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.1af066					DMA_DEST
>1af066					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>1af067					ADDR            .long ?                     ; The starting address for the data to transfer
>1af06a					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>1af06d					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>1af06f					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>1af071					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.1a36a3					DO_DMA
.1a36a3	0b		phd		                PHD
.1a36a4	08		php		                PHP
.1a36a5	08		php		            PHP
.1a36a6	c2 20		rep #$20	            REP #$20
.1a36a8	48		pha		            PHA
.1a36a9	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a36ac	5b		tcd		            TCD
.1a36ad	68		pla		            PLA
.1a36ae	28		plp		            PLP
.1a36af	e2 20		sep #$20	            SEP #$20
.1a36b1	a9 00		lda #$00	                LDA #0
.1a36b3	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS           ; Set mode to something neutral
.1a36b7	af 5c f0 1a	lda $1af05c	                LDA @l DMA_SRC.ADDR+2       ; Check the bank
.1a36bb	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.1a36bd	b0 1c		bcs $1a36db	                BGE src_vram                ; Yes: leave the DMA_BLOCK bit alone
.1a36bf	8f 24 04 af	sta $af0424	src_sram        STA @l SDMA_SRC_ADDY_H      ; Set the SDMA source address
.1a36c3	af 5b f0 1a	lda $1af05b	                LDA @l DMA_SRC.ADDR+1
.1a36c7	8f 23 04 af	sta $af0423	                STA @l SDMA_SRC_ADDY_M
.1a36cb	af 5a f0 1a	lda $1af05a	                LDA @l DMA_SRC.ADDR
.1a36cf	8f 22 04 af	sta $af0422	                STA @l SDMA_SRC_ADDY_L
.1a36d3	a9 10		lda #$10	                LDA #DMA_SRC_SRAM           ; Set the SRAM source block bit
.1a36d5	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a36d9	80 17		bra $1a36f2	                BRA src_mode
.1a36db	38		sec		src_vram        SEC                         ; Convert to VRAM relative address
.1a36dc	e9 b0		sbc #$b0	                SBC #`VRAM
.1a36de	8f 04 04 af	sta $af0404	                STA @l VDMA_SRC_ADDY_H      ; Set the VDMA source address
.1a36e2	af 5b f0 1a	lda $1af05b	                LDA @l DMA_SRC.ADDR+1
.1a36e6	8f 03 04 af	sta $af0403	                STA @l VDMA_SRC_ADDY_M
.1a36ea	af 5a f0 1a	lda $1af05a	                LDA @l DMA_SRC.ADDR
.1a36ee	8f 02 04 af	sta $af0402	                STA @l VDMA_SRC_ADDY_L
.1a36f2	af 59 f0 1a	lda $1af059	src_mode        LDA @l DMA_SRC.MODE         ; Determine if source is 1D or 2D
.1a36f6	d0 3c		bne $1a3734	                BNE src_2d
.1a36f8	af 58 f0 1a	lda $1af058	src_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.1a36fc	f0 1b		beq $1a3719	                BEQ src_1d_vram
.1a36fe	af 5d f0 1a	lda $1af05d	src_1d_sram     LDA @l DMA_SRC.SIZE         ; It's SRAM, so set the SDMA size
.1a3702	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.1a3706	af 5e f0 1a	lda $1af05e	                LDA @l DMA_SRC.SIZE+1
.1a370a	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_M
.1a370e	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a3712	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.1a3716	82 8b 00	brl $1a37a4	                BRL set_dst                 ; Go to set up the destination
.1a3719	af 5d f0 1a	lda $1af05d	src_1d_vram     LDA @l DMA_SRC.SIZE         ; It's VRAM, so set the VDMA size
.1a371d	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.1a3721	af 5e f0 1a	lda $1af05e	                LDA @l DMA_SRC.SIZE+1
.1a3725	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_M
.1a3729	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a372d	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.1a3731	82 70 00	brl $1a37a4	                BRL set_dst                 ; Go to set up the destination
.1a3734	af 58 f0 1a	lda $1af058	src_2d          LDA @l DMA_BLOCKS
.1a3738	09 01		ora #$01	                ORA #DMA_SRC_2D             ; Set the bit to make the source a 2D transfer
.1a373a	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a373e	89 10		bit #$10	                BIT #DMA_SRC_SRAM           ; Are we writing to SRAM
.1a3740	f0 32		beq $1a3774	                BEQ src_2d_vram             ; No: set the 2d values in the VRAM source
.1a3742	af 60 f0 1a	lda $1af060	src_2d_sram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.1a3746	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.1a374a	af 61 f0 1a	lda $1af061	                LDA @l DMA_SRC.WIDTH+1
.1a374e	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.1a3752	af 62 f0 1a	lda $1af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.1a3756	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.1a375a	af 63 f0 1a	lda $1af063	                LDA @l DMA_SRC.HEIGHT+1
.1a375e	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.1a3762	af 64 f0 1a	lda $1af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.1a3766	8f 2c 04 af	sta $af042c	                STA @l SDMA_SRC_STRIDE_L
.1a376a	af 65 f0 1a	lda $1af065	                LDA @l DMA_SRC.STRIDE+1
.1a376e	8f 2d 04 af	sta $af042d	                STA @l SDMA_SRC_STRIDE_L+1
.1a3772	80 30		bra $1a37a4	                BRA set_dst
.1a3774	af 60 f0 1a	lda $1af060	src_2d_vram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.1a3778	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a377c	af 61 f0 1a	lda $1af061	                LDA @l DMA_SRC.WIDTH+1
.1a3780	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.1a3784	af 62 f0 1a	lda $1af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.1a3788	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a378c	af 63 f0 1a	lda $1af063	                LDA @l DMA_SRC.HEIGHT+1
.1a3790	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.1a3794	af 64 f0 1a	lda $1af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.1a3798	8f 0c 04 af	sta $af040c	                STA @l VDMA_SRC_STRIDE_L
.1a379c	af 65 f0 1a	lda $1af065	                LDA @l DMA_SRC.STRIDE+1
.1a37a0	8f 0d 04 af	sta $af040d	                STA @l VDMA_SRC_STRIDE_L+1
.1a37a4					set_dst
.1a37a4	e2 20		sep #$20	            SEP #$20
.1a37a6	af 69 f0 1a	lda $1af069	                LDA @l DMA_DEST.ADDR+2      ; Check the bank
.1a37aa	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.1a37ac	b0 20		bcs $1a37ce	                BGE dst_vram                ; Yes: leave the DMA_BLOCK bit alone
.1a37ae	8f 27 04 af	sta $af0427	dst_sram        STA @l SDMA_DST_ADDY_H      ; Set the SDMA destination address
.1a37b2	af 68 f0 1a	lda $1af068	                LDA @l DMA_DEST.ADDR+1
.1a37b6	8f 26 04 af	sta $af0426	                STA @l SDMA_DST_ADDY_M
.1a37ba	af 67 f0 1a	lda $1af067	                LDA @l DMA_DEST.ADDR
.1a37be	8f 25 04 af	sta $af0425	                STA @l SDMA_DST_ADDY_L
.1a37c2	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS
.1a37c6	09 20		ora #$20	                ORA #DMA_DST_SRAM           ; Set the bit to indicate the destination is SRAM
.1a37c8	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a37cc	80 17		bra $1a37e5	                BRA dst_mode
.1a37ce	38		sec		dst_vram        SEC                         ; Convert to VRAM relative address
.1a37cf	e9 b0		sbc #$b0	                SBC #`VRAM
.1a37d1	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H      ; Set the VDMA destination address
.1a37d5	af 68 f0 1a	lda $1af068	                LDA @l DMA_DEST.ADDR+1
.1a37d9	8f 06 04 af	sta $af0406	                STA @l VDMA_DST_ADDY_M
.1a37dd	af 67 f0 1a	lda $1af067	                LDA @l DMA_DEST.ADDR
.1a37e1	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.1a37e5	af 66 f0 1a	lda $1af066	dst_mode        LDA @l DMA_DEST.MODE
.1a37e9	d0 3e		bne $1a3829	                BNE dst_2d                  ; If 2D, set up the 2D destination parameters
.1a37eb	af 58 f0 1a	lda $1af058	dst_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.1a37ef	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Is the destination SRAM?
.1a37f1	f0 1b		beq $1a380e	                BEQ dst_1d_vram
.1a37f3	af 6a f0 1a	lda $1af06a	dst_1d_sram     LDA @l DMA_DEST.SIZE
.1a37f7	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.1a37fb	af 6b f0 1a	lda $1af06b	                LDA @l DMA_DEST.SIZE+1
.1a37ff	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_L+1
.1a3803	af 6c f0 1a	lda $1af06c	                LDA @l DMA_DEST.SIZE+2
.1a3807	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.1a380b	82 8b 00	brl $1a3899	                BRL start_xfer
.1a380e	af 6a f0 1a	lda $1af06a	dst_1d_vram     LDA @l DMA_DEST.SIZE
.1a3812	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.1a3816	af 6b f0 1a	lda $1af06b	                LDA @l DMA_DEST.SIZE+1
.1a381a	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_L+1
.1a381e	af 6c f0 1a	lda $1af06c	                LDA @l DMA_DEST.SIZE+2
.1a3822	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.1a3826	82 70 00	brl $1a3899	                BRL start_xfer
.1a3829	af 58 f0 1a	lda $1af058	dst_2d          LDA @l DMA_BLOCKS
.1a382d	09 02		ora #$02	                ORA #DMA_DST_2D             ; Set the bit to make the source a 2D transfer
.1a382f	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a3833	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Are we writing to the SRAM?
.1a3835	f0 32		beq $1a3869	                BEQ dst_2d_vram             ; No: set the 2D parameters for VRAM
.1a3837	af 6d f0 1a	lda $1af06d	dst_2d_sram     LDA @l DMA_DEST.WIDTH       ; Set the SRAM width
.1a383b	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.1a383f	af 6e f0 1a	lda $1af06e	                LDA @L DMA_DEST.WIDTH+1
.1a3843	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.1a3847	af 6f f0 1a	lda $1af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the SRAM height
.1a384b	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.1a384f	af 70 f0 1a	lda $1af070	                LDA @L DMA_DEST.HEIGHT+1
.1a3853	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.1a3857	af 71 f0 1a	lda $1af071	                LDA @l DMA_DEST.STRIDE      ; Set the SRAM stride
.1a385b	8f 2e 04 af	sta $af042e	                STA @l SDMA_DST_STRIDE_L
.1a385f	af 72 f0 1a	lda $1af072	                LDA @L DMA_DEST.STRIDE+1
.1a3863	8f 2f 04 af	sta $af042f	                STA @l SDMA_DST_STRIDE_L+1
.1a3867	80 30		bra $1a3899	                BRA start_xfer
.1a3869	af 6d f0 1a	lda $1af06d	dst_2d_vram     LDA @l DMA_DEST.WIDTH       ; Set the VRAM width
.1a386d	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a3871	af 6e f0 1a	lda $1af06e	                LDA @L DMA_DEST.WIDTH+1
.1a3875	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.1a3879	af 6f f0 1a	lda $1af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the VRAM height
.1a387d	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a3881	af 70 f0 1a	lda $1af070	                LDA @L DMA_DEST.HEIGHT+1
.1a3885	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.1a3889	af 71 f0 1a	lda $1af071	                LDA @l DMA_DEST.STRIDE      ; Set the VRAM stride
.1a388d	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L
.1a3891	af 72 f0 1a	lda $1af072	                LDA @L DMA_DEST.STRIDE+1
.1a3895	8f 0f 04 af	sta $af040f	                STA @l VDMA_DST_STRIDE_L+1
.1a3899	af 58 f0 1a	lda $1af058	start_xfer      LDA @l DMA_BLOCKS
.1a389d	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.1a389f	f0 43		beq $1a38e4	                BEQ start_vdma_only
.1a38a1	c9 10		cmp #$10	                CMP #DMA_SRC_SRAM
.1a38a3	f0 76		beq $1a391b	                BEQ start_s2v
.1a38a5	c9 20		cmp #$20	                CMP #DMA_DST_SRAM
.1a38a7	d0 03		bne $1a38ac	                BNE start_sdma_only
.1a38a9	82 8a 00	brl $1a3936	                BRL start_v2s
.1a38ac					start_sdma_only
.1a38ac	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.1a38b0	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.1a38b2	f0 23		beq $1a38d7	                BEQ sdma_1d_only            ; Source and Destination 1D...
.1a38b4	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.1a38b6	f0 23		beq $1a38db	                BEQ sdma_2d_only            ; Source and Destination 2D
.1a38b8	08		php		            PHP
.1a38b9	c2 20		rep #$20	            REP #$20
.1a38bb	48		pha		            PHA
.1a38bc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a38bf	5b		tcd		            TCD
.1a38c0	68		pla		            PLA
.1a38c1	28		plp		            PLP
.1a38c2	e2 20		sep #$20	            SEP #$20
.1a38c4	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a38c6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a38ca	c2 20		rep #$20	            REP #$20
.1a38cc	29 ff 00	and #$00ff	            AND #$00FF
.1a38cf	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a38d2	e2 20		sep #$20	            SEP #$20
.1a38d4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a38d7	a9 01		lda #$01	sdma_1d_only    LDA #SDMA_CTRL0_Enable      ; Set the bits for 1D, SRAM->SRAM
.1a38d9	80 02		bra $1a38dd	                BRA sdma_set_ctrl
.1a38db	a9 03		lda #$03	sdma_2d_only    LDA #SDMA_CTRL0_Enable | SDMA_CTRL0_1D_2D
.1a38dd	8f 20 04 af	sta $af0420	sdma_set_ctrl   STA @l SDMA_CTRL_REG0
.1a38e1	82 7d 00	brl $1a3961	                BRL trig_sdma               ; And trigger the SDMA
.1a38e4					start_vdma_only
.1a38e4	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.1a38e8	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.1a38ea	f0 23		beq $1a390f	                BEQ vdma_1d_only            ; Source and Destination 1D...
.1a38ec	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.1a38ee	f0 23		beq $1a3913	                BEQ vdma_2d_only            ; Source and Destination 2D...
.1a38f0	08		php		            PHP
.1a38f1	c2 20		rep #$20	            REP #$20
.1a38f3	48		pha		            PHA
.1a38f4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a38f7	5b		tcd		            TCD
.1a38f8	68		pla		            PLA
.1a38f9	28		plp		            PLP
.1a38fa	e2 20		sep #$20	            SEP #$20
.1a38fc	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a38fe	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3902	c2 20		rep #$20	            REP #$20
.1a3904	29 ff 00	and #$00ff	            AND #$00FF
.1a3907	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a390a	e2 20		sep #$20	            SEP #$20
.1a390c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a390f	a9 01		lda #$01	vdma_1d_only    LDA #VDMA_CTRL_Enable       ; Set the bits for 1D, VRAM->VRAM
.1a3911	80 02		bra $1a3915	                BRA vdma_set_ctrl
.1a3913	a9 03		lda #$03	vdma_2d_only    LDA #VDMA_CTRL_Enable | VDMA_CTRL_1D_2D
.1a3915	8f 00 04 af	sta $af0400	vdma_set_ctrl   STA @l VDMA_CONTROL_REG
.1a3919	80 34		bra $1a394f	                BRA trig_vdma               ; And trigger the VDMA
.1a391b					start_s2v
.1a391b	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.1a391f	29 01		and #$01	                AND #DMA_SRC_2D
.1a3921	0a		asl a		                ASL A
.1a3922	09 11		ora #$11	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src
.1a3924	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a3928	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.1a392c	29 02		and #$02	                AND #DMA_DST_2D
.1a392e	09 11		ora #$11	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Src
.1a3930	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3934	80 19		bra $1a394f	                BRA trig_vdma               ; And trigger the VDMA
.1a3936					start_v2s
.1a3936	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.1a393a	29 02		and #$02	                AND #DMA_DST_2D
.1a393c	09 21		ora #$21	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Dst
.1a393e	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a3942	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.1a3946	29 01		and #$01	                AND #DMA_SRC_2D
.1a3948	0a		asl a		                ASL A
.1a3949	09 21		ora #$21	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Dst
.1a394b	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a394f					trig_vdma
.1a394f	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.1a3953	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF    ; Trigger the VDMA
.1a3955	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3959	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check if we need SDMA
.1a395d	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.1a395f	f0 0f		beq $1a3970	                BEQ wait_vdma               ; No: wait for VDMA to complete
.1a3961					trig_sdma
.1a3961	af 20 04 af	lda $af0420	                LDA @l SDMA_CTRL_REG0
.1a3965	09 80		ora #$80	                ORA #SDMA_CTRL0_Start_TRF   ; Trigger the SDMA
.1a3967	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a396b	ea		nop		                NOP                         ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1a396c	ea		nop		                NOP                         ; Before it actually gets to stop it will execute a couple more instructions
.1a396d	ea		nop		                NOP                         ; From that point on, the CPU is halted (keep that in mind)
.1a396e	ea		nop		                NOP                         ; No IRQ will be processed either during that time
.1a396f	ea		nop		                NOP
.1a3970	af 01 04 af	lda $af0401	wait_vdma       LDA @l VDMA_STATUS_REG      ; Check the VDMA status
.1a3974	89 80		bit #$80	                BIT #VDMA_STAT_VDMA_IPS     ; If the transfer is still in process...
.1a3976	d0 f8		bne $1a3970	                BNE wait_vdma               ; Wait until it stops.
.1a3978	a9 00		lda #$00	                LDA #$00                    ; Clear the TRF bits
.1a397a	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a397e	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3982	28		plp		                PLP
.1a3983	2b		pld		                PLD
.1a3984	60		rts		            RTS
.1a3985					S_MEMCOPY
.1a3985	0b		phd		                PHD
.1a3986	08		php		                PHP
.1a3987	e2 20		sep #$20	            SEP #$20
.1a3989	c2 10		rep #$10	            REP #$10
.1a398b	a9 00		lda #$00	                LDA #0
.1a398d	a2 00 00	ldx #$0000	                LDX #0
.1a3990	8f 59 f0 1a	sta $1af059	clr_loop        STA @l DMA_SRC
.1a3994	e8		inx		                INX
.1a3995	e0 1a 00	cpx #$001a	                CPX #SIZE(DMA_BLOCK) * 2
.1a3998	d0 f6		bne $1a3990	                BNE clr_loop
.1a399a	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a399d	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.1a399f	f0 23		beq $1a39c4	                BEQ src_linear                      ; Yes: go to process a linear source
.1a39a1	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.1a39a3	f0 5e		beq $1a3a03	                BEQ src_rect                        ; Yes: go to process a rectangular source
.1a39a5					syntax_err
.1a39a5	08		php		            PHP
.1a39a6	c2 20		rep #$20	            REP #$20
.1a39a8	48		pha		            PHA
.1a39a9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a39ac	5b		tcd		            TCD
.1a39ad	68		pla		            PLA
.1a39ae	28		plp		            PLP
.1a39af	e2 20		sep #$20	            SEP #$20
.1a39b1	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a39b3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a39b7	c2 20		rep #$20	            REP #$20
.1a39b9	29 ff 00	and #$00ff	            AND #$00FF
.1a39bc	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a39bf	e2 20		sep #$20	            SEP #$20
.1a39c1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a39c4					src_linear
.1a39c4	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a39c7	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a39ca	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a39cd	c2 20		rep #$20	            REP #$20
.1a39cf	a5 23		lda $0823	            LDA ARGUMENT1
.1a39d1	8f 5a f0 1a	sta $1af05a	            STA DMA_SRC.ADDR
.1a39d5	e2 20		sep #$20	            SEP #$20
.1a39d7	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a39d9	8f 5c f0 1a	sta $1af05c	            STA DMA_SRC.ADDR+2
.1a39dd	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a39df	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a39e2	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a39e5	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a39e8	c2 20		rep #$20	            REP #$20
.1a39ea	a5 23		lda $0823	            LDA ARGUMENT1
.1a39ec	8f 5d f0 1a	sta $1af05d	            STA DMA_SRC.SIZE
.1a39f0	e2 20		sep #$20	            SEP #$20
.1a39f2	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a39f4	8f 5f f0 1a	sta $1af05f	            STA DMA_SRC.SIZE+2
.1a39f8	e2 20		sep #$20	            SEP #$20
.1a39fa	a9 00		lda #$00	            LDA #<DMA_LINEAR
.1a39fc	8f 59 f0 1a	sta $1af059	            STA DMA_SRC.MODE
.1a3a00	82 74 00	brl $1a3a77	                BRL process_to
.1a3a03					src_rect
.1a3a03	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3a06	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3a09	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3a0c	c2 20		rep #$20	            REP #$20
.1a3a0e	a5 23		lda $0823	            LDA ARGUMENT1
.1a3a10	8f 5a f0 1a	sta $1af05a	            STA DMA_SRC.ADDR
.1a3a14	e2 20		sep #$20	            SEP #$20
.1a3a16	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3a18	8f 5c f0 1a	sta $1af05c	            STA DMA_SRC.ADDR+2
.1a3a1c	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a3a1e	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3a21	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3a24	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3a27	c2 20		rep #$20	            REP #$20
.1a3a29	a5 23		lda $0823	            LDA ARGUMENT1
.1a3a2b	8f 60 f0 1a	sta $1af060	            STA DMA_SRC.WIDTH
.1a3a2f	8d 00 01	sta $0100	            STA M0_OPERAND_A
.1a3a32	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3a35	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3a38	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3a3b	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3a3e	c2 20		rep #$20	            REP #$20
.1a3a40	a5 23		lda $0823	            LDA ARGUMENT1
.1a3a42	8f 62 f0 1a	sta $1af062	            STA DMA_SRC.HEIGHT
.1a3a46	8d 02 01	sta $0102	            STA M0_OPERAND_B
.1a3a49	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3a4c	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3a4f	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3a52	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3a55	c2 20		rep #$20	            REP #$20
.1a3a57	a5 23		lda $0823	            LDA ARGUMENT1
.1a3a59	8f 64 f0 1a	sta $1af064	            STA DMA_SRC.STRIDE
.1a3a5d	c2 20		rep #$20	            REP #$20
.1a3a5f	ad 04 01	lda $0104	            LDA M0_RESULT
.1a3a62	8f 5d f0 1a	sta $1af05d	            STA DMA_SRC.SIZE
.1a3a66	e2 20		sep #$20	            SEP #$20
.1a3a68	ad 06 01	lda $0106	            LDA M0_RESULT+2
.1a3a6b	8f 5f f0 1a	sta $1af05f	            STA DMA_SRC.SIZE+2
.1a3a6f	e2 20		sep #$20	            SEP #$20
.1a3a71	a9 01		lda #$01	            LDA #<DMA_RECT
.1a3a73	8f 59 f0 1a	sta $1af059	            STA DMA_SRC.MODE
.1a3a77					process_to
.1a3a77	e2 20		sep #$20	            SEP #$20
.1a3a79	a9 9c		lda #$9c	                LDA #TOK_TO
.1a3a7b	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3a7e	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a3a81	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.1a3a83	f0 23		beq $1a3aa8	                BEQ dest_linear                     ; Yes: go to process a linear destination
.1a3a85	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.1a3a87	f0 5e		beq $1a3ae7	                BEQ dest_rect                       ; Yes: go to process a rectangular source
.1a3a89					syntax_err2
.1a3a89	08		php		            PHP
.1a3a8a	c2 20		rep #$20	            REP #$20
.1a3a8c	48		pha		            PHA
.1a3a8d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3a90	5b		tcd		            TCD
.1a3a91	68		pla		            PLA
.1a3a92	28		plp		            PLP
.1a3a93	e2 20		sep #$20	            SEP #$20
.1a3a95	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3a97	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3a9b	c2 20		rep #$20	            REP #$20
.1a3a9d	29 ff 00	and #$00ff	            AND #$00FF
.1a3aa0	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3aa3	e2 20		sep #$20	            SEP #$20
.1a3aa5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3aa8					dest_linear
.1a3aa8	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3aab	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3aae	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3ab1	c2 20		rep #$20	            REP #$20
.1a3ab3	a5 23		lda $0823	            LDA ARGUMENT1
.1a3ab5	8f 67 f0 1a	sta $1af067	            STA DMA_DEST.ADDR
.1a3ab9	e2 20		sep #$20	            SEP #$20
.1a3abb	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3abd	8f 69 f0 1a	sta $1af069	            STA DMA_DEST.ADDR+2
.1a3ac1	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a3ac3	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3ac6	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3ac9	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3acc	c2 20		rep #$20	            REP #$20
.1a3ace	a5 23		lda $0823	            LDA ARGUMENT1
.1a3ad0	8f 6a f0 1a	sta $1af06a	            STA DMA_DEST.SIZE
.1a3ad4	e2 20		sep #$20	            SEP #$20
.1a3ad6	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3ad8	8f 6c f0 1a	sta $1af06c	            STA DMA_DEST.SIZE+2
.1a3adc	e2 20		sep #$20	            SEP #$20
.1a3ade	a9 00		lda #$00	            LDA #<DMA_LINEAR
.1a3ae0	8f 66 f0 1a	sta $1af066	            STA DMA_DEST.MODE
.1a3ae4	82 74 00	brl $1a3b5b	                BRL verify
.1a3ae7					dest_rect
.1a3ae7	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3aea	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3aed	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3af0	c2 20		rep #$20	            REP #$20
.1a3af2	a5 23		lda $0823	            LDA ARGUMENT1
.1a3af4	8f 67 f0 1a	sta $1af067	            STA DMA_DEST.ADDR
.1a3af8	e2 20		sep #$20	            SEP #$20
.1a3afa	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3afc	8f 69 f0 1a	sta $1af069	            STA DMA_DEST.ADDR+2
.1a3b00	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a3b02	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3b05	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3b08	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3b0b	c2 20		rep #$20	            REP #$20
.1a3b0d	a5 23		lda $0823	            LDA ARGUMENT1
.1a3b0f	8f 6d f0 1a	sta $1af06d	            STA DMA_DEST.WIDTH
.1a3b13	8d 00 01	sta $0100	            STA M0_OPERAND_A
.1a3b16	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3b19	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3b1c	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3b1f	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3b22	c2 20		rep #$20	            REP #$20
.1a3b24	a5 23		lda $0823	            LDA ARGUMENT1
.1a3b26	8f 6f f0 1a	sta $1af06f	            STA DMA_DEST.HEIGHT
.1a3b2a	8d 02 01	sta $0102	            STA M0_OPERAND_B
.1a3b2d	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3b30	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3b33	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3b36	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3b39	c2 20		rep #$20	            REP #$20
.1a3b3b	a5 23		lda $0823	            LDA ARGUMENT1
.1a3b3d	8f 71 f0 1a	sta $1af071	            STA DMA_DEST.STRIDE
.1a3b41	c2 20		rep #$20	            REP #$20
.1a3b43	ad 04 01	lda $0104	            LDA M0_RESULT
.1a3b46	8f 6a f0 1a	sta $1af06a	            STA DMA_DEST.SIZE
.1a3b4a	e2 20		sep #$20	            SEP #$20
.1a3b4c	ad 06 01	lda $0106	            LDA M0_RESULT+2
.1a3b4f	8f 6c f0 1a	sta $1af06c	            STA DMA_DEST.SIZE+2
.1a3b53	e2 20		sep #$20	            SEP #$20
.1a3b55	a9 01		lda #$01	            LDA #<DMA_RECT
.1a3b57	8f 66 f0 1a	sta $1af066	            STA DMA_DEST.MODE
.1a3b5b					verify
.1a3b5b	c2 20		rep #$20	            REP #$20
.1a3b5d	af 5d f0 1a	lda $1af05d	                LDA @l DMA_SRC.SIZE
.1a3b61	cf 6a f0 1a	cmp $1af06a	                CMP @l DMA_DEST.SIZE
.1a3b65	d0 14		bne $1a3b7b	                BNE size_err
.1a3b67	e2 20		sep #$20	            SEP #$20
.1a3b69	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a3b6d	cf 6c f0 1a	cmp $1af06c	                CMP @l DMA_DEST.SIZE+2
.1a3b71	d0 08		bne $1a3b7b	                BNE size_err
.1a3b73	c2 20		rep #$20	            REP #$20
.1a3b75	20 a3 36	jsr $1a36a3	            JSR DO_DMA
.1a3b78	28		plp		                PLP
.1a3b79	2b		pld		                PLD
.1a3b7a	60		rts		            RTS
.1a3b7b					size_err
.1a3b7b	08		php		            PHP
.1a3b7c	c2 20		rep #$20	            REP #$20
.1a3b7e	48		pha		            PHA
.1a3b7f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3b82	5b		tcd		            TCD
.1a3b83	68		pla		            PLA
.1a3b84	28		plp		            PLP
.1a3b85	e2 20		sep #$20	            SEP #$20
.1a3b87	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a3b89	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3b8d	c2 20		rep #$20	            REP #$20
.1a3b8f	29 ff 00	and #$00ff	            AND #$00FF
.1a3b92	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3b95	e2 20		sep #$20	            SEP #$20
.1a3b97	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3b9a					S_LOCATE
.1a3b9a	08		php		                PHP
.1a3b9b	c2 30		rep #$30	            REP #$30
.1a3b9d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3ba0	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3ba3	a5 23		lda $0823	                LDA ARGUMENT1
.1a3ba5	48		pha		                PHA                         ; Save it for later
.1a3ba6	a9 2c 00	lda #$002c	                LDA #','                    ; Check for the comma separator
.1a3ba9	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3bac	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3baf	20 28 07	jsr $1a0728	            JSR ASS_ARG1_BYTE
.1a3bb2	a4 23		ldy $0823	                LDY ARGUMENT1               ; Set Y to the row
.1a3bb4	fa		plx		                PLX                         ; Set X to the column
.1a3bb5	20 20 00	jsr $1a0020	            JSR CURSORXY
.1a3bb8	28		plp		                PLP
.1a3bb9	60		rts		            RTS

;******  Return to file: src\statements.s

.1a3bba					S_INPUT
.1a3bba	08		php		                PHP
.1a3bbb					varloop
.1a3bbb	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3bbe	e2 20		sep #$20	            SEP #$20
.1a3bc0	a7 00		lda [$0800]	                LDA [BIP]
.1a3bc2	d0 03		bne $1a3bc7	                BNE check_colon
.1a3bc4	4c 62 3c	jmp $1a3c62	                JMP done            ; If EOL, we're done
.1a3bc7	c9 3a		cmp #$3a	check_colon     CMP #':'
.1a3bc9	d0 03		bne $1a3bce	                BNE check_string
.1a3bcb	4c 62 3c	jmp $1a3c62	                JMP done            ; If colon, we're done
.1a3bce	c9 22		cmp #$22	check_string    CMP #CHAR_DQUOTE    ; Is it the start of a string?
.1a3bd0	d0 0b		bne $1a3bdd	                BNE check_var       ; No: then it should be a variable name
.1a3bd2	20 d5 1b	jsr $1a1bd5	            JSR EVALSTRING
.1a3bd5	20 70 45	jsr $1a4570	            JSR PR_STRING
.1a3bd8	a9 3b		lda #$3b	                LDA #';'            ; Look for a semicolon
.1a3bda	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3bdd					check_var
.1a3bdd	20 a7 04	jsr $1a04a7	            JSR ISALPHA
.1a3be0	90 44		bcc $1a3c26	                BCC syntax_err      ; No: it's a syntax error
.1a3be2	20 35 53	jsr $1a5335	            JSR VAR_FINDNAME
.1a3be5	90 3f		bcc $1a3c26	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3be7	a9 3f		lda #$3f	                LDA #"?"            ; Print a "? " to follow
.1a3be9	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3bec	a9 20		lda #$20	                LDA #CHAR_SP
.1a3bee	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3bf1	20 10 00	jsr $1a0010	            JSR INPUTLINE
.1a3bf4	e2 20		sep #$20	            SEP #$20
.1a3bf6	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Check the type of the variable
.1a3bf8	c9 02		cmp #$02	                CMP #TYPE_STRING    ; If it's a string...
.1a3bfa	f0 49		beq $1a3c45	                BEQ in_string       ; ... go to copy the string data
.1a3bfc	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; If it's an integer...
.1a3bfe	d0 03		bne $1a3c03	                BNE chk_float
.1a3c00	82 84 00	brl $1a3c87	                BRL in_integer      ; ... go to parse the integer
.1a3c03	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT     ; If it's a float...
.1a3c05	f0 5d		beq $1a3c64	                BEQ in_float        ; ... go to parse the float
.1a3c07	08		php		            PHP
.1a3c08	c2 20		rep #$20	            REP #$20
.1a3c0a	48		pha		            PHA
.1a3c0b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3c0e	5b		tcd		            TCD
.1a3c0f	68		pla		            PLA
.1a3c10	28		plp		            PLP
.1a3c11	e2 20		sep #$20	            SEP #$20
.1a3c13	a9 04		lda #$04	            LDA #ERR_TYPE
.1a3c15	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3c19	c2 20		rep #$20	            REP #$20
.1a3c1b	29 ff 00	and #$00ff	            AND #$00FF
.1a3c1e	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3c21	e2 20		sep #$20	            SEP #$20
.1a3c23	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3c26					syntax_err
.1a3c26	08		php		            PHP
.1a3c27	c2 20		rep #$20	            REP #$20
.1a3c29	48		pha		            PHA
.1a3c2a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3c2d	5b		tcd		            TCD
.1a3c2e	68		pla		            PLA
.1a3c2f	28		plp		            PLP
.1a3c30	e2 20		sep #$20	            SEP #$20
.1a3c32	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3c34	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3c38	c2 20		rep #$20	            REP #$20
.1a3c3a	29 ff 00	and #$00ff	            AND #$00FF
.1a3c3d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3c40	e2 20		sep #$20	            SEP #$20
.1a3c42	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3c45					in_string
.1a3c45	c2 20		rep #$20	            REP #$20
.1a3c47	a9 00 4c	lda #$4c00	                LDA #<>IOBUF
.1a3c4a	85 23		sta $0823	                STA ARGUMENT1
.1a3c4c	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3c4f	85 25		sta $0825	                STA ARGUMENT1+2
.1a3c51	e2 20		sep #$20	            SEP #$20
.1a3c53	a9 02		lda #$02	                LDA #TYPE_STRING
.1a3c55	85 27		sta $0827	                STA ARGTYPE1
.1a3c57					save_input
.1a3c57	c2 20		rep #$20	            REP #$20
.1a3c59	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a3c5c	a9 0d 00	lda #$000d	                LDA #CHAR_CR        ; Print a newline
.1a3c5f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3c62	28		plp		done            PLP
.1a3c63	60		rts		            RTS
.1a3c64					in_float
.1a3c64	c2 20		rep #$20	            REP #$20
.1a3c66	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.1a3c68	85 40		sta $0840	                STA SAVEBIP
.1a3c6a	a5 02		lda $0802	                LDA BIP+2
.1a3c6c	85 42		sta $0842	                STA SAVEBIP+2
.1a3c6e	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.1a3c71	85 00		sta $0800	                STA BIP
.1a3c73	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3c76	85 02		sta $0802	                STA BIP+2
.1a3c78	20 57 59	jsr $1a5957	            JSR PARSENUM
.1a3c7b	c2 20		rep #$20	            REP #$20
.1a3c7d	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.1a3c7f	85 00		sta $0800	                STA BIP
.1a3c81	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3c83	85 02		sta $0802	                STA BIP+2
.1a3c85	80 d0		bra $1a3c57	                BRA save_input
.1a3c87					in_integer
.1a3c87	c2 20		rep #$20	            REP #$20
.1a3c89	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.1a3c8b	85 40		sta $0840	                STA SAVEBIP
.1a3c8d	a5 02		lda $0802	                LDA BIP+2
.1a3c8f	85 42		sta $0842	                STA SAVEBIP+2
.1a3c91	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.1a3c94	85 00		sta $0800	                STA BIP
.1a3c96	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3c99	85 02		sta $0802	                STA BIP+2
.1a3c9b	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a3c9e	c2 20		rep #$20	            REP #$20
.1a3ca0	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.1a3ca2	85 00		sta $0800	                STA BIP
.1a3ca4	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3ca6	85 02		sta $0802	                STA BIP+2
.1a3ca8	80 ad		bra $1a3c57	                BRA save_input
.1a3caa					S_GET
.1a3caa	08		php		                PHP
.1a3cab					varloop
.1a3cab	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3cae	e2 20		sep #$20	            SEP #$20
.1a3cb0	a7 00		lda [$0800]	                LDA [BIP]
.1a3cb2	f0 47		beq $1a3cfb	                BEQ done            ; If EOL, we're done
.1a3cb4	c9 3a		cmp #$3a	                CMP #':'
.1a3cb6	f0 43		beq $1a3cfb	                BEQ done            ; If colon, we're done
.1a3cb8	20 a7 04	jsr $1a04a7	            JSR ISALPHA
.1a3cbb	90 40		bcc $1a3cfd	                BCC syntax_err      ; No: it's a syntax error
.1a3cbd	20 35 53	jsr $1a5335	            JSR VAR_FINDNAME
.1a3cc0	90 3b		bcc $1a3cfd	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3cc2	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a3cc5	20 14 00	jsr $1a0014	            JSR GETKEY
.1a3cc8	e2 20		sep #$20	            SEP #$20
.1a3cca	a0 00 00	ldy #$0000	                LDY #0
.1a3ccd	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a3ccf	a9 00		lda #$00	                LDA #0
.1a3cd1	c8		iny		                INY
.1a3cd2	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a3cd4	c2 20		rep #$20	            REP #$20
.1a3cd6	a5 16		lda $0816	                LDA STRPTR
.1a3cd8	85 23		sta $0823	                STA ARGUMENT1
.1a3cda	a5 18		lda $0818	                LDA STRPTR+2
.1a3cdc	85 25		sta $0825	                STA ARGUMENT1+2
.1a3cde	e2 20		sep #$20	            SEP #$20
.1a3ce0	a9 02		lda #$02	                LDA #TYPE_STRING
.1a3ce2	85 27		sta $0827	                STA ARGTYPE1
.1a3ce4	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a3ce7	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3cea	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.1a3cec	f0 0d		beq $1a3cfb	                BEQ done            ; EOL? We're done
.1a3cee	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.1a3cf0	f0 09		beq $1a3cfb	                BEQ done
.1a3cf2	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3cf4	d0 07		bne $1a3cfd	                BNE syntax_err      ; Nope: syntax error
.1a3cf6	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3cf9	80 b0		bra $1a3cab	                BRA varloop
.1a3cfb	28		plp		done            PLP
.1a3cfc	60		rts		            RTS
.1a3cfd					syntax_err
.1a3cfd	08		php		            PHP
.1a3cfe	c2 20		rep #$20	            REP #$20
.1a3d00	48		pha		            PHA
.1a3d01	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3d04	5b		tcd		            TCD
.1a3d05	68		pla		            PLA
.1a3d06	28		plp		            PLP
.1a3d07	e2 20		sep #$20	            SEP #$20
.1a3d09	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3d0b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3d0f	c2 20		rep #$20	            REP #$20
.1a3d11	29 ff 00	and #$00ff	            AND #$00FF
.1a3d14	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3d17	e2 20		sep #$20	            SEP #$20
.1a3d19	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3d1c					S_CALL
.1a3d1c	08		php		                PHP
.1a3d1d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3d20	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3d23	e2 20		sep #$20	            SEP #$20
.1a3d25	a9 5c		lda #$5c	                LDA #$5C            ; Set the opcode for JML
.1a3d27	85 a2		sta $08a2	                STA MJUMPINST
.1a3d29	c2 20		rep #$20	            REP #$20
.1a3d2b	a5 23		lda $0823	                LDA ARGUMENT1
.1a3d2d	85 a3		sta $08a3	                STA MJUMPADDR
.1a3d2f	e2 20		sep #$20	            SEP #$20
.1a3d31	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3d33	85 a5		sta $08a5	                STA MJUMPADDR+2
.1a3d35	e2 20		sep #$20	            SEP #$20
.1a3d37	a9 2c		lda #$2c	                LDA #','
.1a3d39	85 37		sta $0837	                STA TARGETTOK
.1a3d3b	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a3d3e	90 41		bcc $1a3d81	                BCC launch          ; Not present... go ahead and launch
.1a3d40	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3d43	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3d46	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3d49	c2 20		rep #$20	            REP #$20
.1a3d4b	a5 23		lda $0823	                LDA ARGUMENT1
.1a3d4d	85 55		sta $0855	                STA MARG1           ; Save it to MARG1
.1a3d4f	e2 20		sep #$20	            SEP #$20
.1a3d51	a9 2c		lda #$2c	                LDA #','
.1a3d53	85 37		sta $0837	                STA TARGETTOK
.1a3d55	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a3d58	90 27		bcc $1a3d81	                BCC launch          ; Not present... go ahead and launch
.1a3d5a	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3d5d	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3d60	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3d63	c2 20		rep #$20	            REP #$20
.1a3d65	a5 23		lda $0823	                LDA ARGUMENT1
.1a3d67	85 59		sta $0859	                STA MARG2           ; Save it to MARG2
.1a3d69	e2 20		sep #$20	            SEP #$20
.1a3d6b	a9 2c		lda #$2c	                LDA #','
.1a3d6d	85 37		sta $0837	                STA TARGETTOK
.1a3d6f	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a3d72	90 0d		bcc $1a3d81	                BCC launch          ; Not present... go ahead and launch
.1a3d74	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3d77	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3d7a	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a3d7d	c2 20		rep #$20	            REP #$20
.1a3d7f	a4 23		ldy $0823	                LDY ARGUMENT1
.1a3d81	a6 59		ldx $0859	launch          LDX MARG2
.1a3d83	a5 55		lda $0855	                LDA MARG1
.1a3d85	0b		phd		                PHD
.1a3d86	8b		phb		                PHB
.1a3d87	08		php		                PHP
.1a3d88	22 a2 08 00	jsl $0008a2	                JSL MJUMPINST       ; Call the subroutine indicated
.1a3d8c	28		plp		                PLP
.1a3d8d	ab		plb		                PLB
.1a3d8e	2b		pld		                PLD
.1a3d8f	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a3d92	28		plp		                PLP
.1a3d93	60		rts		            RTS
.1a3d94					type_err
.1a3d94	08		php		            PHP
.1a3d95	c2 20		rep #$20	            REP #$20
.1a3d97	48		pha		            PHA
.1a3d98	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3d9b	5b		tcd		            TCD
.1a3d9c	68		pla		            PLA
.1a3d9d	28		plp		            PLP
.1a3d9e	e2 20		sep #$20	            SEP #$20
.1a3da0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a3da2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3da6	c2 20		rep #$20	            REP #$20
.1a3da8	29 ff 00	and #$00ff	            AND #$00FF
.1a3dab	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3dae	e2 20		sep #$20	            SEP #$20
.1a3db0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3db3					S_DIM
.1a3db3	08		php		                PHP
.1a3db4	e2 20		sep #$20	            SEP #$20
.1a3db6	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3db9	20 35 53	jsr $1a5335	            JSR VAR_FINDNAME
.1a3dbc	90 64		bcc $1a3e22	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3dbe	a9 8f		lda #$8f	                LDA #TOK_LPAREN     ; Verify we have a left parenthesis
.1a3dc0	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a3dc3	a9 01		lda #$01	                LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.1a3dc5	20 e5 19	jsr $1a19e5	            JSR PHOPERATOR
.1a3dc8	a2 01 00	ldx #$0001	                LDX #1
.1a3dcb	a9 00		lda #$00	                LDA #0
.1a3dcd	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Set the dimension count to 0
.1a3dd1					dim_loop
.1a3dd1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3dd4	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a3dd7	c2 20		rep #$20	            REP #$20
.1a3dd9	a5 23		lda $0823	                LDA ARGUMENT1
.1a3ddb	9f 00 4d 00	sta $004d00,x	                STA @lARRIDXBUF,X   ; And store it in the buffer
.1a3ddf	e2 20		sep #$20	            SEP #$20
.1a3de1	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF     ; Add to the dimension count
.1a3de5	1a		inc a		                INC A
.1a3de6	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF
.1a3dea	30 55		bmi $1a3e41	                BMI overflow        ; If > 127 throw an error
.1a3dec	e8		inx		                INX
.1a3ded	e8		inx		                INX
.1a3dee	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3df1	a7 00		lda [$0800]	                LDA [BIP]           ; Check the character
.1a3df3	c9 2c		cmp #$2c	                CMP #','            ; Is it a comma?
.1a3df5	f0 25		beq $1a3e1c	                BEQ skip_comma      ; Yes: get the next dimension
.1a3df7	c9 90		cmp #$90	                CMP #TOK_RPAREN     ; No: is it a ")"?
.1a3df9	d0 27		bne $1a3e22	                BNE syntax_err      ; No: throw a syntax error
.1a3dfb	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3dfe	20 b3 65	jsr $1a65b3	            JSR ARR_ALLOC
.1a3e01	c2 20		rep #$20	            REP #$20
.1a3e03	a5 c0		lda $08c0	                LDA CURRBLOCK       ; Set up the pointer to the array
.1a3e05	85 23		sta $0823	                STA ARGUMENT1
.1a3e07	e2 20		sep #$20	            SEP #$20
.1a3e09	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a3e0b	85 25		sta $0825	                STA ARGUMENT1+2
.1a3e0d	64 26		stz $0826	                STZ ARGUMENT1+3
.1a3e0f	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Get the type of the values
.1a3e11	09 80		ora #$80	                ORA #$80            ; Make sure we change the type to array
.1a3e13	85 ea		sta $08ea	                STA TOFINDTYPE      ; And save it back for searching
.1a3e15	85 27		sta $0827	                STA ARGTYPE1        ; And for the value to set
.1a3e17	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a3e1a	28		plp		                PLP
.1a3e1b	60		rts		            RTS
.1a3e1c					skip_comma
.1a3e1c	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3e1f	4c d1 3d	jmp $1a3dd1	                JMP dim_loop
.1a3e22					syntax_err
.1a3e22	08		php		            PHP
.1a3e23	c2 20		rep #$20	            REP #$20
.1a3e25	48		pha		            PHA
.1a3e26	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3e29	5b		tcd		            TCD
.1a3e2a	68		pla		            PLA
.1a3e2b	28		plp		            PLP
.1a3e2c	e2 20		sep #$20	            SEP #$20
.1a3e2e	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3e30	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3e34	c2 20		rep #$20	            REP #$20
.1a3e36	29 ff 00	and #$00ff	            AND #$00FF
.1a3e39	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3e3c	e2 20		sep #$20	            SEP #$20
.1a3e3e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3e41					overflow
.1a3e41	08		php		            PHP
.1a3e42	c2 20		rep #$20	            REP #$20
.1a3e44	48		pha		            PHA
.1a3e45	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3e48	5b		tcd		            TCD
.1a3e49	68		pla		            PLA
.1a3e4a	28		plp		            PLP
.1a3e4b	e2 20		sep #$20	            SEP #$20
.1a3e4d	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a3e4f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3e53	c2 20		rep #$20	            REP #$20
.1a3e55	29 ff 00	and #$00ff	            AND #$00FF
.1a3e58	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3e5b	e2 20		sep #$20	            SEP #$20
.1a3e5d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3e60					S_READ
.1a3e60	08		php		                PHP
.1a3e61					varloop
.1a3e61	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3e64	e2 20		sep #$20	            SEP #$20
.1a3e66	a7 00		lda [$0800]	                LDA [BIP]
.1a3e68	f0 28		beq $1a3e92	                BEQ done            ; If EOL, we're done
.1a3e6a	c9 3a		cmp #$3a	                CMP #':'
.1a3e6c	f0 24		beq $1a3e92	                BEQ done            ; If colon, we're done
.1a3e6e	20 a7 04	jsr $1a04a7	            JSR ISALPHA
.1a3e71	90 21		bcc $1a3e94	                BCC syntax_err      ; No: it's a syntax error
.1a3e73	20 35 53	jsr $1a5335	            JSR VAR_FINDNAME
.1a3e76	90 1c		bcc $1a3e94	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3e78	20 b3 3e	jsr $1a3eb3	            JSR NEXTDATA
.1a3e7b	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a3e7e	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3e81	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.1a3e83	f0 0d		beq $1a3e92	                BEQ done            ; EOL? We're done
.1a3e85	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.1a3e87	f0 09		beq $1a3e92	                BEQ done
.1a3e89	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3e8b	d0 07		bne $1a3e94	                BNE syntax_err      ; Nope: syntax error
.1a3e8d	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3e90	80 cf		bra $1a3e61	                BRA varloop
.1a3e92	28		plp		done            PLP
.1a3e93	60		rts		            RTS
.1a3e94					syntax_err
.1a3e94	08		php		            PHP
.1a3e95	c2 20		rep #$20	            REP #$20
.1a3e97	48		pha		            PHA
.1a3e98	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3e9b	5b		tcd		            TCD
.1a3e9c	68		pla		            PLA
.1a3e9d	28		plp		            PLP
.1a3e9e	e2 20		sep #$20	            SEP #$20
.1a3ea0	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3ea2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3ea6	c2 20		rep #$20	            REP #$20
.1a3ea8	29 ff 00	and #$00ff	            AND #$00FF
.1a3eab	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3eae	e2 20		sep #$20	            SEP #$20
.1a3eb0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3eb3					NEXTDATA
.1a3eb3	08		php		                PHP
.1a3eb4	a5 02		lda $0802	                LDA BIP+2           ; Save BIP
.1a3eb6	85 42		sta $0842	                STA SAVEBIP+2
.1a3eb8	a5 00		lda $0800	                LDA BIP
.1a3eba	85 40		sta $0840	                STA SAVEBIP
.1a3ebc	a5 1c		lda $081c	                LDA CURLINE+2       ; Save CURLINE
.1a3ebe	85 46		sta $0846	                STA SAVELINE+2
.1a3ec0	a5 1a		lda $081a	                LDA CURLINE
.1a3ec2	85 44		sta $0844	                STA SAVELINE
.1a3ec4	c2 20		rep #$20	            REP #$20
.1a3ec6	a5 3a		lda $083a	                LDA DATABIP+2
.1a3ec8	d0 04		bne $1a3ece	                BNE data_set
.1a3eca	a5 38		lda $0838	                LDA DATABIP
.1a3ecc	f0 4e		beq $1a3f1c	                BEQ scan_start      ; No: scan for a DATA statement
.1a3ece	a5 38		lda $0838	data_set        LDA DATABIP         ; Move BIP to the DATA statement
.1a3ed0	85 00		sta $0800	                STA BIP
.1a3ed2	a5 3a		lda $083a	                LDA DATABIP+2
.1a3ed4	85 02		sta $0802	                STA BIP+2
.1a3ed6	a5 3c		lda $083c	                LDA DATALINE        ; Set CURLINE from DATALINE
.1a3ed8	85 1a		sta $081a	                STA CURLINE
.1a3eda	a5 3e		lda $083e	                LDA DATALINE+2
.1a3edc	85 1c		sta $081c	                STA CURLINE+2
.1a3ede	e2 20		sep #$20	            SEP #$20
.1a3ee0	a7 00		lda [$0800]	                LDA [BIP]           ; Check character at BIP
.1a3ee2	f0 53		beq $1a3f37	                BEQ scan_DATA       ; EOL? scan for a DATA statement
.1a3ee4	c9 3a		cmp #$3a	                CMP #':'            ; Colon?
.1a3ee6	f0 4f		beq $1a3f37	                BEQ scan_DATA       ; ... scan for a DATA statement
.1a3ee8	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3eea	d0 03		bne $1a3eef	                BNE skip_parse      ; No: skip leading WS and try to parse
.1a3eec	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3eef					skip_parse
.1a3eef	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a3ef2	a7 00		lda [$0800]	                LDA [BIP]
.1a3ef4	c9 22		cmp #$22	                CMP #CHAR_DQUOTE    ; Is it a quote?
.1a3ef6	f0 4e		beq $1a3f46	                BEQ read_string     ; Yes: process the string
.1a3ef8	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a3efb	b0 4e		bcs $1a3f4b	                BCS read_number     ; Yes: process the number
.1a3efd					syntax_err
.1a3efd	08		php		            PHP
.1a3efe	c2 20		rep #$20	            REP #$20
.1a3f00	48		pha		            PHA
.1a3f01	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3f04	5b		tcd		            TCD
.1a3f05	68		pla		            PLA
.1a3f06	28		plp		            PLP
.1a3f07	e2 20		sep #$20	            SEP #$20
.1a3f09	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3f0b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3f0f	c2 20		rep #$20	            REP #$20
.1a3f11	29 ff 00	and #$00ff	            AND #$00FF
.1a3f14	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3f17	e2 20		sep #$20	            SEP #$20
.1a3f19	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3f1c					scan_start
.1a3f1c	c2 20		rep #$20	            REP #$20
.1a3f1e	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT    ; Point CURLINE to the first line
.1a3f21	85 1a		sta $081a	                STA CURLINE
.1a3f23	a9 16 00	lda #$0016	                LDA #`BASIC_BOT
.1a3f26	85 1c		sta $081c	                STA CURLINE+2
.1a3f28	18		clc		                CLC
.1a3f29	a5 1a		lda $081a	                LDA CURLINE         ; Point BIP to the first possible token
.1a3f2b	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.1a3f2e	85 00		sta $0800	                STA BIP
.1a3f30	a5 1c		lda $081c	                LDA CURLINE+2
.1a3f32	69 00 00	adc #$0000	                ADC #0
.1a3f35	85 02		sta $0802	                STA BIP+2
.1a3f37					scan_data
.1a3f37	e2 20		sep #$20	            SEP #$20
.1a3f39	a9 80		lda #$80	                LDA #$80            ; We don't want to process nesting
.1a3f3b	85 35		sta $0835	                STA SKIPNEST
.1a3f3d	a9 ab		lda #$ab	                LDA #TOK_DATA       ; We're looking for a DATA token
.1a3f3f	85 37		sta $0837	                STA TARGETTOK
.1a3f41	20 31 21	jsr $1a2131	            JSR SKIPTOTOK
.1a3f44	80 a9		bra $1a3eef	                BRA skip_parse
.1a3f46					read_string
.1a3f46	20 d5 1b	jsr $1a1bd5	            JSR EVALSTRING
.1a3f49	80 03		bra $1a3f4e	                BRA done
.1a3f4b					read_number
.1a3f4b	20 c7 1a	jsr $1a1ac7	            JSR EVALNUMBER
.1a3f4e					done
.1a3f4e	c2 20		rep #$20	            REP #$20
.1a3f50	a5 00		lda $0800	                LDA BIP             ; Save BIP to DATABIP
.1a3f52	85 38		sta $0838	                STA DATABIP
.1a3f54	a5 02		lda $0802	                LDA BIP+2
.1a3f56	85 3a		sta $083a	                STA DATABIP+2
.1a3f58	a5 1a		lda $081a	                LDA CURLINE         ; Save CURLINE to DATALINE
.1a3f5a	85 3c		sta $083c	                STA DATALINE
.1a3f5c	a5 1c		lda $081c	                LDA CURLINE+2
.1a3f5e	85 3e		sta $083e	                STA DATALINE+2
.1a3f60	a5 44		lda $0844	                LDA SAVELINE        ; Restore CURLINE
.1a3f62	85 1a		sta $081a	                STA CURLINE
.1a3f64	a5 46		lda $0846	                LDA SAVELINE+2
.1a3f66	85 1c		sta $081c	                STA CURLINE+2
.1a3f68	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.1a3f6a	85 00		sta $0800	                STA BIP
.1a3f6c	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3f6e	85 02		sta $0802	                STA BIP+2
.1a3f70	28		plp		                PLP
.1a3f71	60		rts		            RTS
.1a3f72					S_DATA
.1a3f72	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a3f75	60		rts		            RTS
.1a3f76					S_RESTORE
.1a3f76	64 38		stz $0838	                STZ DATABIP         ; Just set DATABIP to 0
.1a3f78	64 3a		stz $083a	                STZ DATABIP+2       ; The next READ will move it to the first DATA
.1a3f7a	64 3c		stz $083c	                STZ DATALINE        ; Set DATALINE to 0
.1a3f7c	64 3e		stz $083e	                STZ DATALINE+2
.1a3f7e	60		rts		            RTS
.1a3f7f					S_CLS
.1a3f7f	20 24 00	jsr $1a0024	            JSR CLSCREEN
.1a3f82	60		rts		            RTS
.1a3f83					S_POKEL
.1a3f83	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3f86	c2 20		rep #$20	            REP #$20
.1a3f88	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a3f8a	48		pha		                PHA
.1a3f8b	a5 23		lda $0823	                LDA ARGUMENT1
.1a3f8d	48		pha		                PHA
.1a3f8e	e2 20		sep #$20	            SEP #$20
.1a3f90	a7 00		lda [$0800]	                LDA [BIP]
.1a3f92	c9 2c		cmp #$2c	                CMP #','
.1a3f94	d0 22		bne $1a3fb8	                BNE syntax_err
.1a3f96	20 da 20	jsr $1a20da	            JSR INCBIP
.1a3f99	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3f9c	c2 20		rep #$20	            REP #$20
.1a3f9e	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a3fa0	d0 35		bne $1a3fd7	                BNE range_err
.1a3fa2	68		pla		                PLA                 ; Pull the target address from the stack
.1a3fa3	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a3fa5	68		pla		                PLA
.1a3fa6	85 0a		sta $080a	                STA INDEX+2
.1a3fa8	c2 20		rep #$20	            REP #$20
.1a3faa	a5 23		lda $0823	                LDA ARGUMENT1
.1a3fac	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a3fae	e2 20		sep #$20	            SEP #$20
.1a3fb0	a0 02 00	ldy #$0002	                LDY #2
.1a3fb3	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3fb5	97 08		sta [$0808],y	                STA [INDEX],Y
.1a3fb7	60		rts		            RTS
.1a3fb8					syntax_err
.1a3fb8	08		php		            PHP
.1a3fb9	c2 20		rep #$20	            REP #$20
.1a3fbb	48		pha		            PHA
.1a3fbc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3fbf	5b		tcd		            TCD
.1a3fc0	68		pla		            PLA
.1a3fc1	28		plp		            PLP
.1a3fc2	e2 20		sep #$20	            SEP #$20
.1a3fc4	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3fc6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3fca	c2 20		rep #$20	            REP #$20
.1a3fcc	29 ff 00	and #$00ff	            AND #$00FF
.1a3fcf	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3fd2	e2 20		sep #$20	            SEP #$20
.1a3fd4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3fd7					range_err
.1a3fd7	08		php		            PHP
.1a3fd8	c2 20		rep #$20	            REP #$20
.1a3fda	48		pha		            PHA
.1a3fdb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3fde	5b		tcd		            TCD
.1a3fdf	68		pla		            PLA
.1a3fe0	28		plp		            PLP
.1a3fe1	e2 20		sep #$20	            SEP #$20
.1a3fe3	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3fe5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3fe9	c2 20		rep #$20	            REP #$20
.1a3feb	29 ff 00	and #$00ff	            AND #$00FF
.1a3fee	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a3ff1	e2 20		sep #$20	            SEP #$20
.1a3ff3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3ff6					S_POKEW
.1a3ff6	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a3ff9	c2 20		rep #$20	            REP #$20
.1a3ffb	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a3ffd	48		pha		                PHA
.1a3ffe	a5 23		lda $0823	                LDA ARGUMENT1
.1a4000	48		pha		                PHA
.1a4001	e2 20		sep #$20	            SEP #$20
.1a4003	a7 00		lda [$0800]	                LDA [BIP]
.1a4005	c9 2c		cmp #$2c	                CMP #','
.1a4007	d0 19		bne $1a4022	                BNE syntax_err
.1a4009	20 da 20	jsr $1a20da	            JSR INCBIP
.1a400c	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a400f	c2 20		rep #$20	            REP #$20
.1a4011	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4013	d0 2c		bne $1a4041	                BNE range_err
.1a4015	68		pla		                PLA                 ; Pull the target address from the stack
.1a4016	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a4018	68		pla		                PLA
.1a4019	85 0a		sta $080a	                STA INDEX+2
.1a401b	c2 20		rep #$20	            REP #$20
.1a401d	a5 23		lda $0823	                LDA ARGUMENT1
.1a401f	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a4021	60		rts		            RTS
.1a4022					syntax_err
.1a4022	08		php		            PHP
.1a4023	c2 20		rep #$20	            REP #$20
.1a4025	48		pha		            PHA
.1a4026	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4029	5b		tcd		            TCD
.1a402a	68		pla		            PLA
.1a402b	28		plp		            PLP
.1a402c	e2 20		sep #$20	            SEP #$20
.1a402e	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4030	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4034	c2 20		rep #$20	            REP #$20
.1a4036	29 ff 00	and #$00ff	            AND #$00FF
.1a4039	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a403c	e2 20		sep #$20	            SEP #$20
.1a403e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4041					range_err
.1a4041	08		php		            PHP
.1a4042	c2 20		rep #$20	            REP #$20
.1a4044	48		pha		            PHA
.1a4045	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4048	5b		tcd		            TCD
.1a4049	68		pla		            PLA
.1a404a	28		plp		            PLP
.1a404b	e2 20		sep #$20	            SEP #$20
.1a404d	a9 09		lda #$09	            LDA #ERR_RANGE
.1a404f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4053	c2 20		rep #$20	            REP #$20
.1a4055	29 ff 00	and #$00ff	            AND #$00FF
.1a4058	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a405b	e2 20		sep #$20	            SEP #$20
.1a405d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4060					S_POKE
.1a4060	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4063	c2 20		rep #$20	            REP #$20
.1a4065	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a4067	48		pha		                PHA
.1a4068	a5 23		lda $0823	                LDA ARGUMENT1
.1a406a	48		pha		                PHA
.1a406b	e2 20		sep #$20	            SEP #$20
.1a406d	a7 00		lda [$0800]	                LDA [BIP]
.1a406f	c9 2c		cmp #$2c	                CMP #','
.1a4071	d0 1f		bne $1a4092	                BNE syntax_err
.1a4073	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4076	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4079	e2 20		sep #$20	            SEP #$20
.1a407b	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Make sure the value is from 0 - 255
.1a407d	d0 32		bne $1a40b1	                BNE range_err
.1a407f	c2 20		rep #$20	            REP #$20
.1a4081	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4083	d0 2c		bne $1a40b1	                BNE range_err
.1a4085	68		pla		                PLA                 ; Pull the target address from the stack
.1a4086	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a4088	68		pla		                PLA
.1a4089	85 0a		sta $080a	                STA INDEX+2
.1a408b	e2 20		sep #$20	            SEP #$20
.1a408d	a5 23		lda $0823	                LDA ARGUMENT1
.1a408f	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a4091	60		rts		            RTS
.1a4092					syntax_err
.1a4092	08		php		            PHP
.1a4093	c2 20		rep #$20	            REP #$20
.1a4095	48		pha		            PHA
.1a4096	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4099	5b		tcd		            TCD
.1a409a	68		pla		            PLA
.1a409b	28		plp		            PLP
.1a409c	e2 20		sep #$20	            SEP #$20
.1a409e	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a40a0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a40a4	c2 20		rep #$20	            REP #$20
.1a40a6	29 ff 00	and #$00ff	            AND #$00FF
.1a40a9	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a40ac	e2 20		sep #$20	            SEP #$20
.1a40ae	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a40b1					range_err
.1a40b1	08		php		            PHP
.1a40b2	c2 20		rep #$20	            REP #$20
.1a40b4	48		pha		            PHA
.1a40b5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a40b8	5b		tcd		            TCD
.1a40b9	68		pla		            PLA
.1a40ba	28		plp		            PLP
.1a40bb	e2 20		sep #$20	            SEP #$20
.1a40bd	a9 09		lda #$09	            LDA #ERR_RANGE
.1a40bf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a40c3	c2 20		rep #$20	            REP #$20
.1a40c5	29 ff 00	and #$00ff	            AND #$00FF
.1a40c8	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a40cb	e2 20		sep #$20	            SEP #$20
.1a40cd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a40d0					S_STOP
.1a40d0	08		php		            PHP
.1a40d1	c2 20		rep #$20	            REP #$20
.1a40d3	48		pha		            PHA
.1a40d4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a40d7	5b		tcd		            TCD
.1a40d8	68		pla		            PLA
.1a40d9	28		plp		            PLP
.1a40da	e2 20		sep #$20	            SEP #$20
.1a40dc	a9 01		lda #$01	            LDA #ERR_BREAK
.1a40de	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a40e2	c2 20		rep #$20	            REP #$20
.1a40e4	29 ff 00	and #$00ff	            AND #$00FF
.1a40e7	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a40ea	e2 20		sep #$20	            SEP #$20
.1a40ec	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a40ef					S_REM
.1a40ef	08		php		                PHP
.1a40f0	e2 20		sep #$20	            SEP #$20
.1a40f2	a7 00		lda [$0800]	rem_loop        LDA [BIP]
.1a40f4	f0 05		beq $1a40fb	                BEQ done
.1a40f6	20 da 20	jsr $1a20da	            JSR INCBIP
.1a40f9	80 f7		bra $1a40f2	                BRA rem_loop
.1a40fb	28		plp		done            PLP
.1a40fc	60		rts		            RTS
.1a40fd					S_EXIT
.1a40fd	08		php		                PHP
.1a40fe	28		plp		                PLP
.1a40ff	60		rts		            RTS
.1a4100					S_DO
.1a4100	08		php		                PHP
.1a4101	28		plp		                PLP
.1a4102	60		rts		            RTS
.0000					DO_RECORD
>0000					BIP             .dword  ?
>0004					CURLINE         .dword  ?
.1a4103					S_LOOP
.1a4103	08		php		                PHP
.1a4104	28		plp		                PLP
.1a4105	60		rts		            RTS
.1a4106					S_FOR
.1a4106	08		php		                PHP
.1a4107	c2 20		rep #$20	            REP #$20
.1a4109	a5 1c		lda $081c	                LDA CURLINE+2
.1a410b	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a410e	a5 1a		lda $081a	                LDA CURLINE
.1a4110	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a4113	a5 02		lda $0802	                LDA BIP+2           ; Save current BIP
.1a4115	48		pha		                PHA
.1a4116	a5 00		lda $0800	                LDA BIP
.1a4118	48		pha		                PHA
.1a4119	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a411c	a5 02		lda $0802	                LDA BIP+2           ; Save the BIP for the next statement to the RETURN stack
.1a411e	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a4121	a5 00		lda $0800	                LDA BIP
.1a4123	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a4126	68		pla		                PLA                 ; Restore the original BIP
.1a4127	85 00		sta $0800	                STA BIP
.1a4129	68		pla		                PLA
.1a412a	85 02		sta $0802	                STA BIP+2
.1a412c	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a412f					get_name
.1a412f	20 35 53	jsr $1a5335	            JSR VAR_FINDNAME
.1a4132	b0 1f		bcs $1a4153	                BCS push_name       ; If we didn't find a name, thrown an error
.1a4134	08		php		            PHP
.1a4135	c2 20		rep #$20	            REP #$20
.1a4137	48		pha		            PHA
.1a4138	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a413b	5b		tcd		            TCD
.1a413c	68		pla		            PLA
.1a413d	28		plp		            PLP
.1a413e	e2 20		sep #$20	            SEP #$20
.1a4140	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a4142	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4146	c2 20		rep #$20	            REP #$20
.1a4148	29 ff 00	and #$00ff	            AND #$00FF
.1a414b	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a414e	e2 20		sep #$20	            SEP #$20
.1a4150	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4153					push_name
.1a4153	e2 20		sep #$20	            SEP #$20
.1a4155	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; To the return stack
.1a4157	20 f9 1d	jsr $1a1df9	            JSR PHRETURNB
.1a415a	a5 e9		lda $08e9	                LDA TOFIND+2
.1a415c	20 f9 1d	jsr $1a1df9	            JSR PHRETURNB
.1a415f	c2 20		rep #$20	            REP #$20
.1a4161	a5 e7		lda $08e7	                LDA TOFIND
.1a4163	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a4166					else
.1a4166	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a4169	e2 20		sep #$20	            SEP #$20
.1a416b	a7 00		lda [$0800]	                LDA [BIP]
.1a416d	c9 8a		cmp #$8a	                CMP #TOK_EQ
.1a416f	d0 6a		bne $1a41db	                BNE syntax_err      ; If not found: signal an syntax error
.1a4171	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Verify type of variable
.1a4173	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; Is it integer?
.1a4175	f0 04		beq $1a417b	                BEQ process_initial ; Yes: it's ok
.1a4177	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; Is it floating point?
.1a4179	f0 00		beq $1a417b	                BEQ process_initial ; Yes: it's ok
.1a417b					process_initial
.1a417b	20 da 20	jsr $1a20da	            JSR INCBIP
.1a417e	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4181	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a4184	e2 20		sep #$20	            SEP #$20
.1a4186	a9 9c		lda #$9c	                LDA #TOK_TO         ; Expect the next token to be TO
.1a4188	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a418b	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a418e	c2 20		rep #$20	            REP #$20
.1a4190	a5 27		lda $0827	                LDA ARGTYPE1
.1a4192	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a4195	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4197	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a419a	a5 23		lda $0823	                LDA ARGUMENT1
.1a419c	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a419f	e2 20		sep #$20	            SEP #$20
.1a41a1	a9 9d		lda #$9d	                LDA #TOK_STEP
.1a41a3	85 37		sta $0837	                STA TARGETTOK
.1a41a5	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a41a8	90 1b		bcc $1a41c5	                BCC default_inc     ; Not found: set a default increment of 1
.1a41aa	20 da 20	jsr $1a20da	            JSR INCBIP
.1a41ad	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a41b0	e2 20		sep #$20	            SEP #$20
.1a41b2	a5 27		lda $0827	                LDA ARGTYPE1        ; Push the result as the increment
.1a41b4	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a41b7	c2 20		rep #$20	            REP #$20
.1a41b9	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a41bb	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a41be	a5 23		lda $0823	                LDA ARGUMENT1
.1a41c0	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a41c3	80 14		bra $1a41d9	                BRA done
.1a41c5					default_inc
.1a41c5	c2 20		rep #$20	            REP #$20
.1a41c7	a9 00 00	lda #$0000	                LDA #TYPE_INTEGER
.1a41ca	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a41cd	a9 00 00	lda #$0000	                LDA #0
.1a41d0	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a41d3	a9 01 00	lda #$0001	                LDA #1
.1a41d6	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a41d9	28		plp		done            PLP
.1a41da	60		rts		            RTS
.1a41db					syntax_err
.1a41db	08		php		            PHP
.1a41dc	c2 20		rep #$20	            REP #$20
.1a41de	48		pha		            PHA
.1a41df	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a41e2	5b		tcd		            TCD
.1a41e3	68		pla		            PLA
.1a41e4	28		plp		            PLP
.1a41e5	e2 20		sep #$20	            SEP #$20
.1a41e7	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a41e9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a41ed	c2 20		rep #$20	            REP #$20
.1a41ef	29 ff 00	and #$00ff	            AND #$00FF
.1a41f2	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a41f5	e2 20		sep #$20	            SEP #$20
.1a41f7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.0000					FOR_RECORD
>0000					INCREMENT       .dword  ?
>0004					INCTYPE         .word   ?
>0006					FINAL           .dword  ?
>000a					FINALTYPE       .word   ?
>000c					VARIBLE         .dword  ?
>0010					VARTYPE         .word   ?
>0012					BIP             .dword  ?
>0016					CURLINE         .dword  ?
.1a41fa					S_NEXT
.1a41fa	08		php		                PHP
.1a41fb	8b		phb		                PHB
.1a41fc	08		php		            PHP
.1a41fd	e2 20		sep #$20	            SEP #$20
.1a41ff	48		pha		            PHA
.1a4200	a9 00		lda #$00	            LDA #0
.1a4202	48		pha		            PHA
.1a4203	ab		plb		            PLB
.1a4204	68		pla		            PLA
.1a4205	28		plp		            PLP
.1a4206	08		php		            PHP
.1a4207	c2 20		rep #$20	            REP #$20
.1a4209	48		pha		            PHA
.1a420a	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a420d	5b		tcd		            TCD
.1a420e	68		pla		            PLA
.1a420f	28		plp		            PLP
.1a4210	c2 30		rep #$30	            REP #$30
.1a4212	a4 33		ldy $0833	                LDY RETURNSP                    ; Y := pointer to first byte of the FOR record
.1a4214	c8		iny		                INY                             ; RETURNSP points to the first free slot, so move up 2 bytes
.1a4215	c8		iny		                INY
.1a4216	c2 20		rep #$20	            REP #$20
.1a4218	b9 0c 00	lda $000c,y	                LDA #FOR_RECORD.VARIBLE,B,Y     ; TOFIND := FOR_RECORD.VARIABLE
.1a421b	85 e7		sta $08e7	                STA TOFIND
.1a421d	b9 0e 00	lda $000e,y	                LDA #FOR_RECORD.VARIBLE+2,B,Y
.1a4220	e2 20		sep #$20	            SEP #$20
.1a4222	85 e9		sta $08e9	                STA TOFIND+2
.1a4224	b9 10 00	lda $0010,y	                LDA #FOR_RECORD.VARTYPE,B,Y
.1a4227	85 ea		sta $08ea	                STA TOFINDTYPE
.1a4229	c2 20		rep #$20	            REP #$20
.1a422b	5a		phy		                PHY
.1a422c	20 36 51	jsr $1a5136	            JSR VAR_REF
.1a422f	7a		ply		                PLY
.1a4230	c2 20		rep #$20	            REP #$20
.1a4232	b9 00 00	lda $0000,y	                LDA #FOR_RECORD.INCREMENT,B,Y   ; ARGUMENT2 := FOR_RECORD.INCREMENT
.1a4235	85 29		sta $0829	                STA ARGUMENT2
.1a4237	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y
.1a423a	85 2b		sta $082b	                STA ARGUMENT2+2
.1a423c	e2 20		sep #$20	            SEP #$20
.1a423e	b9 04 00	lda $0004,y	                LDA #FOR_RECORD.INCTYPE,B,Y
.1a4241	85 2d		sta $082d	                STA ARGTYPE2
.1a4243	c2 20		rep #$20	            REP #$20
.1a4245	5a		phy		                PHY
.1a4246	20 a0 27	jsr $1a27a0	            JSR OP_PLUS
.1a4249	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a424c	7a		ply		                PLY
.1a424d	c2 20		rep #$20	            REP #$20
.1a424f	b9 06 00	lda $0006,y	                LDA #FOR_RECORD.FINAL,B,Y       ; ARGUMENT2 := FOR_RECORD.FINAL
.1a4252	85 29		sta $0829	                STA ARGUMENT2
.1a4254	b9 08 00	lda $0008,y	                LDA #FOR_RECORD.FINAL+2,B,Y
.1a4257	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4259	e2 20		sep #$20	            SEP #$20
.1a425b	b9 0a 00	lda $000a,y	                LDA #FOR_RECORD.FINALTYPE,B,Y
.1a425e	85 2d		sta $082d	                STA ARGTYPE2
.1a4260	c2 20		rep #$20	            REP #$20
.1a4262	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y ; Check the increment's sign
.1a4265	30 0a		bmi $1a4271	                BMI going_down
.1a4267					going_up
.1a4267	20 29 2a	jsr $1a2a29	            JSR OP_LTE
.1a426a	20 df 05	jsr $1a05df	            JSR IS_ARG1_Z
.1a426d	f0 28		beq $1a4297	                BEQ end_loop                    ; No: end the loop
.1a426f	80 08		bra $1a4279	                BRA loop_back                   ; Yes: loop back
.1a4271					going_down
.1a4271	20 e9 29	jsr $1a29e9	            JSR OP_GTE
.1a4274	20 df 05	jsr $1a05df	            JSR IS_ARG1_Z
.1a4277	f0 1e		beq $1a4297	                BEQ end_loop                    ; No: end the loop
.1a4279					loop_back
.1a4279	c2 20		rep #$20	            REP #$20
.1a427b	b9 12 00	lda $0012,y	                LDA #FOR_RECORD.BIP,B,Y
.1a427e	85 00		sta $0800	                STA BIP
.1a4280	b9 14 00	lda $0014,y	                LDA #FOR_RECORD.BIP+2,B,Y
.1a4283	85 02		sta $0802	                STA BIP+2
.1a4285	b9 16 00	lda $0016,y	                LDA #FOR_RECORD.CURLINE,B,Y     ; CURLINE := FOR_RECORD.CURLINE
.1a4288	85 1a		sta $081a	                STA CURLINE
.1a428a	b9 18 00	lda $0018,y	                LDA #FOR_RECORD.CURLINE+2,B,Y
.1a428d	85 1c		sta $081c	                STA CURLINE+2
.1a428f	e2 20		sep #$20	            SEP #$20
.1a4291	a9 03		lda #$03	                LDA #EXEC_RETURN
.1a4293	85 dc		sta $08dc	                STA EXECACTION
.1a4295	80 17		bra $1a42ae	                BRA done
.1a4297					end_loop
.1a4297	a2 23 08	ldx #$0823	                LDX #ARGUMENT1
.1a429a	20 a6 19	jsr $1a19a6	            JSR PLARGUMENT
.1a429d	c2 20		rep #$20	            REP #$20
.1a429f	18		clc		                CLC
.1a42a0	a5 33		lda $0833	                LDA RETURNSP
.1a42a2	69 1a 00	adc #$001a	                ADC #size(FOR_RECORD)           ; Move pointer by number of bytes in a FOR record
.1a42a5	85 33		sta $0833	                STA RETURNSP
.1a42a7	a5 35		lda $0835	                LDA RETURNSP+2
.1a42a9	69 00 00	adc #$0000	                ADC #0
.1a42ac	85 35		sta $0835	                STA RETURNSP+2
.1a42ae	ab		plb		done            PLB
.1a42af	28		plp		                PLP
.1a42b0	60		rts		            RTS
.1a42b1					S_GOSUB
.1a42b1	08		php		                PHP
.1a42b2	a5 1a		lda $081a	                LDA CURLINE                 ; Save the current line for later
.1a42b4	48		pha		                PHA
.1a42b5	a5 1c		lda $081c	                LDA CURLINE+2
.1a42b7	48		pha		                PHA
.1a42b8	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a42bb	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a42be	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.1a42c0	f0 26		beq $1a42e8	                BEQ syntax_err              ; If 0, no number was found... syntax error
.1a42c2	20 da 23	jsr $1a23da	            JSR FINDLINE
.1a42c5	90 42		bcc $1a4309	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a42c7	e2 20		sep #$20	            SEP #$20
.1a42c9	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a42cb	85 dc		sta $08dc	                STA EXECACTION
.1a42cd	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a42d0	c2 20		rep #$20	            REP #$20
.1a42d2	68		pla		                PLA                         ; Save the old value of CURLINE to the RETURN stack
.1a42d3	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a42d6	68		pla		                PLA
.1a42d7	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a42da	a5 02		lda $0802	                LDA BIP+2                   ; Save the BASIC Instruction Pointer to the RETURN stack
.1a42dc	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a42df	a5 00		lda $0800	                LDA BIP
.1a42e1	20 e2 1d	jsr $1a1de2	            JSR PHRETURN
.1a42e4	e6 31		inc $0831	                INC GOSUBDEPTH              ; Increase the count of GOSUBs on the stack
.1a42e6	28		plp		                PLP
.1a42e7	60		rts		            RTS
.1a42e8	68		pla		syntax_err      PLA
.1a42e9	68		pla		                PLA
.1a42ea	08		php		            PHP
.1a42eb	c2 20		rep #$20	            REP #$20
.1a42ed	48		pha		            PHA
.1a42ee	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a42f1	5b		tcd		            TCD
.1a42f2	68		pla		            PLA
.1a42f3	28		plp		            PLP
.1a42f4	e2 20		sep #$20	            SEP #$20
.1a42f6	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a42f8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a42fc	c2 20		rep #$20	            REP #$20
.1a42fe	29 ff 00	and #$00ff	            AND #$00FF
.1a4301	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4304	e2 20		sep #$20	            SEP #$20
.1a4306	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4309	68		pla		not_found       PLA
.1a430a	68		pla		                PLA
.1a430b	08		php		            PHP
.1a430c	c2 20		rep #$20	            REP #$20
.1a430e	48		pha		            PHA
.1a430f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4312	5b		tcd		            TCD
.1a4313	68		pla		            PLA
.1a4314	28		plp		            PLP
.1a4315	e2 20		sep #$20	            SEP #$20
.1a4317	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a4319	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a431d	c2 20		rep #$20	            REP #$20
.1a431f	29 ff 00	and #$00ff	            AND #$00FF
.1a4322	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4325	e2 20		sep #$20	            SEP #$20
.1a4327	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a432a					S_RETURN
.1a432a	08		php		                PHP
.1a432b	c2 30		rep #$30	            REP #$30
.1a432d	a5 31		lda $0831	                LDA GOSUBDEPTH              ; Check that there is at least on GOSUB on the stack
.1a432f	f0 1e		beq $1a434f	                BEQ underflow               ; No? It's a stack underflow error
.1a4331	20 04 1e	jsr $1a1e04	            JSR PLRETURN
.1a4334	85 00		sta $0800	                STA BIP
.1a4336	20 04 1e	jsr $1a1e04	            JSR PLRETURN
.1a4339	85 02		sta $0802	                STA BIP+2
.1a433b	20 04 1e	jsr $1a1e04	            JSR PLRETURN
.1a433e	85 1a		sta $081a	                STA CURLINE
.1a4340	20 04 1e	jsr $1a1e04	            JSR PLRETURN
.1a4343	85 1c		sta $081c	                STA CURLINE+2
.1a4345	c6 31		dec $0831	                DEC GOSUBDEPTH              ; Indicate we've popped that GOSUB off the stack
.1a4347	e2 20		sep #$20	            SEP #$20
.1a4349	a9 03		lda #$03	                LDA #EXEC_RETURN
.1a434b	85 dc		sta $08dc	                STA EXECACTION
.1a434d	28		plp		                PLP
.1a434e	60		rts		            RTS
.1a434f					underflow
.1a434f	08		php		            PHP
.1a4350	c2 20		rep #$20	            REP #$20
.1a4352	48		pha		            PHA
.1a4353	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4356	5b		tcd		            TCD
.1a4357	68		pla		            PLA
.1a4358	28		plp		            PLP
.1a4359	e2 20		sep #$20	            SEP #$20
.1a435b	a9 07		lda #$07	            LDA #ERR_STACKUNDER
.1a435d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4361	c2 20		rep #$20	            REP #$20
.1a4363	29 ff 00	and #$00ff	            AND #$00FF
.1a4366	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4369	e2 20		sep #$20	            SEP #$20
.1a436b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a436e					S_IF
.1a436e	08		php		                PHP
.1a436f	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4372	20 df 05	jsr $1a05df	            JSR IS_ARG1_Z
.1a4375	f0 1c		beq $1a4393	                BEQ is_false                ; If so, handle the FALSE case
.1a4377	e2 20		sep #$20	            SEP #$20
.1a4379	a9 97		lda #$97	                LDA #TOK_THEN               ; Verify that the next token is THEN and eat it
.1a437b	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a437e	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a4381	20 df 05	jsr $1a05df	            JSR IS_ARG1_Z
.1a4384	f0 12		beq $1a4398	                BEQ syntax_err              ; If not, we have a syntax error
.1a4386	20 da 23	jsr $1a23da	            JSR FINDLINE
.1a4389	90 2c		bcc $1a43b7	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a438b	e2 20		sep #$20	            SEP #$20
.1a438d	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a438f	85 dc		sta $08dc	                STA EXECACTION
.1a4391	80 03		bra $1a4396	                BRA done
.1a4393					is_false
.1a4393	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a4396	28		plp		done            PLP
.1a4397	60		rts		            RTS
.1a4398					syntax_err
.1a4398	08		php		            PHP
.1a4399	c2 20		rep #$20	            REP #$20
.1a439b	48		pha		            PHA
.1a439c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a439f	5b		tcd		            TCD
.1a43a0	68		pla		            PLA
.1a43a1	28		plp		            PLP
.1a43a2	e2 20		sep #$20	            SEP #$20
.1a43a4	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a43a6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a43aa	c2 20		rep #$20	            REP #$20
.1a43ac	29 ff 00	and #$00ff	            AND #$00FF
.1a43af	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a43b2	e2 20		sep #$20	            SEP #$20
.1a43b4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a43b7					not_found
.1a43b7	08		php		            PHP
.1a43b8	c2 20		rep #$20	            REP #$20
.1a43ba	48		pha		            PHA
.1a43bb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a43be	5b		tcd		            TCD
.1a43bf	68		pla		            PLA
.1a43c0	28		plp		            PLP
.1a43c1	e2 20		sep #$20	            SEP #$20
.1a43c3	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a43c5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a43c9	c2 20		rep #$20	            REP #$20
.1a43cb	29 ff 00	and #$00ff	            AND #$00FF
.1a43ce	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a43d1	e2 20		sep #$20	            SEP #$20
.1a43d3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a43d6					S_END
.1a43d6	08		php		                PHP
.1a43d7	e2 20		sep #$20	            SEP #$20
.1a43d9	a9 01		lda #$01	                LDA #EXEC_STOP
.1a43db	85 dc		sta $08dc	                STA EXECACTION
.1a43dd	28		plp		                PLP
.1a43de	60		rts		            RTS
.1a43df					S_GOTO
.1a43df	08		php		                PHP
.1a43e0	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a43e3	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a43e6	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.1a43e8	f0 0d		beq $1a43f7	                BEQ syntax_err              ; If 0, no number was found... syntax error
.1a43ea	20 da 23	jsr $1a23da	            JSR FINDLINE
.1a43ed	90 27		bcc $1a4416	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a43ef	e2 20		sep #$20	            SEP #$20
.1a43f1	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a43f3	85 dc		sta $08dc	                STA EXECACTION
.1a43f5	28		plp		                PLP
.1a43f6	60		rts		            RTS
.1a43f7					syntax_err
.1a43f7	08		php		            PHP
.1a43f8	c2 20		rep #$20	            REP #$20
.1a43fa	48		pha		            PHA
.1a43fb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a43fe	5b		tcd		            TCD
.1a43ff	68		pla		            PLA
.1a4400	28		plp		            PLP
.1a4401	e2 20		sep #$20	            SEP #$20
.1a4403	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4405	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4409	c2 20		rep #$20	            REP #$20
.1a440b	29 ff 00	and #$00ff	            AND #$00FF
.1a440e	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4411	e2 20		sep #$20	            SEP #$20
.1a4413	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4416					not_found
.1a4416	08		php		            PHP
.1a4417	c2 20		rep #$20	            REP #$20
.1a4419	48		pha		            PHA
.1a441a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a441d	5b		tcd		            TCD
.1a441e	68		pla		            PLA
.1a441f	28		plp		            PLP
.1a4420	e2 20		sep #$20	            SEP #$20
.1a4422	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a4424	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4428	c2 20		rep #$20	            REP #$20
.1a442a	29 ff 00	and #$00ff	            AND #$00FF
.1a442d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4430	e2 20		sep #$20	            SEP #$20
.1a4432	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4435					S_CLR
.1a4435	20 48 19	jsr $1a1948	            JSR INITEVALSP
.1a4438	20 68 10	jsr $1a1068	            JSR INITHEAP
.1a443b	20 35 50	jsr $1a5035	            JSR INITVARS
.1a443e	60		rts		            RTS
.1a443f					S_LET
.1a443f	08		php		                PHP
.1a4440	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.1a4442	10 03		bpl $1a4447	                BPL get_name        ; If it's not a token, try to find the variable name
.1a4444	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4447					get_name
.1a4447	20 35 53	jsr $1a5335	            JSR VAR_FINDNAME
.1a444a	b0 03		bcs $1a444f	                BCS check_array     ; If we didn't find a name, thrown an error
.1a444c	4c b6 44	jmp $1a44b6	                JMP syntax_err
.1a444f					check_array
.1a444f	e2 20		sep #$20	            SEP #$20
.1a4451	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Save the variable name for later
.1a4453	48		pha		                PHA                 ; (it will get over-written by variable references)
.1a4454	a5 e9		lda $08e9	                LDA TOFIND+2
.1a4456	48		pha		                PHA
.1a4457	a5 e8		lda $08e8	                LDA TOFIND+1
.1a4459	48		pha		                PHA
.1a445a	a5 e7		lda $08e7	                LDA TOFIND
.1a445c	48		pha		                PHA
.1a445d	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a4460	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it a "("
.1a4462	d0 0e		bne $1a4472	                BNE get_value       ; No: it's a scalar assignment, look for the "="
.1a4464	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4466	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4469	a9 00		lda #$00	                LDA #0
.1a446b	8f 00 4d 00	sta $004d00	                STA @l ARRIDXBUF    ; Blank out the array index buffer
.1a446f	20 ca 1a	jsr $1a1aca	            JSR ARR_GETIDX
.1a4472					get_value
.1a4472	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a4475	e2 20		sep #$20	            SEP #$20
.1a4477	a7 00		lda [$0800]	                LDA [BIP]
.1a4479	c9 8a		cmp #$8a	                CMP #TOK_EQ
.1a447b	f0 03		beq $1a4480	                BEQ found_eq        ; If not found: signal an syntax error
.1a447d	4c b6 44	jmp $1a44b6	                JMP syntax_err
.1a4480					found_eq
.1a4480	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4483	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4486	68		pla		                PLA                 ; Restore the variable name
.1a4487	85 e7		sta $08e7	                STA TOFIND
.1a4489	68		pla		                PLA
.1a448a	85 e8		sta $08e8	                STA TOFIND+1
.1a448c	68		pla		                PLA
.1a448d	85 e9		sta $08e9	                STA TOFIND+2
.1a448f	68		pla		                PLA
.1a4490	85 ea		sta $08ea	                STA TOFINDTYPE
.1a4492	29 80		and #$80	                AND #$80            ; Is it an array we're setting?
.1a4494	f0 1b		beq $1a44b1	                BEQ set_scalar      ; No: do a scalar variable set
.1a4496	20 a8 50	jsr $1a50a8	            JSR VAR_FIND
.1a4499	90 3a		bcc $1a44d5	                BCC notfound_err
.1a449b	c2 20		rep #$20	            REP #$20
.1a449d	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a44a0	b7 08		lda [$0808],y	                LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.1a44a2	85 c0		sta $08c0	                STA CURRBLOCK
.1a44a4	e2 20		sep #$20	            SEP #$20
.1a44a6	c8		iny		                INY
.1a44a7	c8		iny		                INY
.1a44a8	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a44aa	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a44ac	20 9f 67	jsr $1a679f	            JSR ARR_SET
.1a44af	80 03		bra $1a44b4	                BRA done            ; and we're finished!
.1a44b1					set_scalar
.1a44b1	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a44b4					done
.1a44b4	28		plp		                PLP
.1a44b5	60		rts		            RTS
.1a44b6					syntax_err
.1a44b6	08		php		            PHP
.1a44b7	c2 20		rep #$20	            REP #$20
.1a44b9	48		pha		            PHA
.1a44ba	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a44bd	5b		tcd		            TCD
.1a44be	68		pla		            PLA
.1a44bf	28		plp		            PLP
.1a44c0	e2 20		sep #$20	            SEP #$20
.1a44c2	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a44c4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a44c8	c2 20		rep #$20	            REP #$20
.1a44ca	29 ff 00	and #$00ff	            AND #$00FF
.1a44cd	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a44d0	e2 20		sep #$20	            SEP #$20
.1a44d2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a44d5					notfound_err
.1a44d5	08		php		            PHP
.1a44d6	c2 20		rep #$20	            REP #$20
.1a44d8	48		pha		            PHA
.1a44d9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a44dc	5b		tcd		            TCD
.1a44dd	68		pla		            PLA
.1a44de	28		plp		            PLP
.1a44df	e2 20		sep #$20	            SEP #$20
.1a44e1	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a44e3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a44e7	c2 20		rep #$20	            REP #$20
.1a44e9	29 ff 00	and #$00ff	            AND #$00FF
.1a44ec	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a44ef	e2 20		sep #$20	            SEP #$20
.1a44f1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a44f4					S_PRINT
.1a44f4	08		php		                PHP
.1a44f5	e2 20		sep #$20	            SEP #$20
.1a44f7	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a44fa	c9 00		cmp #$00	                CMP #0              ; Is it EOL or :?
.1a44fc	f0 6d		beq $1a456b	                BEQ pr_nl_exit      ; Yes: just print return
.1a44fe					pr_loop
.1a44fe	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4501	e2 20		sep #$20	            SEP #$20
.1a4503	a5 27		lda $0827	                LDA ARGTYPE1        ; Get the type of the result
.1a4505	c9 ff		cmp #$ff	                CMP #TYPE_NAV       ; Is is NAV?
.1a4507	f0 1b		beq $1a4524	                BEQ check_nl        ; Yes: we are probably just printing a newline
.1a4509	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string?
.1a450b	d0 05		bne $1a4512	                BNE check_int       ; No: check to see if it's an integer
.1a450d	20 70 45	jsr $1a4570	            JSR PR_STRING
.1a4510	80 12		bra $1a4524	                BRA check_nl
.1a4512	c9 00		cmp #$00	check_int       CMP #TYPE_INTEGER   ; Is it an integer?
.1a4514	d0 05		bne $1a451b	                BNE check_float     ; No: check to see if it is a float
.1a4516	20 8e 45	jsr $1a458e	            JSR PR_INTEGER
.1a4519	80 09		bra $1a4524	                BRA check_nl
.1a451b	c9 01		cmp #$01	check_float     CMP #TYPE_FLOAT     ; Is it a float?
.1a451d	d0 4f		bne $1a456e	                BNE done            ; No: just quit
.1a451f	20 a1 45	jsr $1a45a1	            JSR PR_FLOAT
.1a4522	80 00		bra $1a4524	                BRA check_nl
.1a4524					check_nl
.1a4524	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a4527	a7 00		lda [$0800]	                LDA [BIP]
.1a4529	f0 40		beq $1a456b	                BEQ pr_nl_exit      ; If it's nul, print a newline and return
.1a452b	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.1a452d	f0 3c		beq $1a456b	                BEQ pr_nl_exit      ; print a newline and return
.1a452f	c9 2c		cmp #$2c	                CMP #','            ; If it's a comma
.1a4531	f0 23		beq $1a4556	                BEQ pr_comma        ; Print a TAB and try another expression
.1a4533	c9 3b		cmp #$3b	                CMP #';'            ; If it's a semicolon...
.1a4535	f0 24		beq $1a455b	                BEQ is_more         ; Print nothing, and try another expression
.1a4537	08		php		            PHP
.1a4538	c2 20		rep #$20	            REP #$20
.1a453a	48		pha		            PHA
.1a453b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a453e	5b		tcd		            TCD
.1a453f	68		pla		            PLA
.1a4540	28		plp		            PLP
.1a4541	e2 20		sep #$20	            SEP #$20
.1a4543	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4545	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4549	c2 20		rep #$20	            REP #$20
.1a454b	29 ff 00	and #$00ff	            AND #$00FF
.1a454e	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4551	e2 20		sep #$20	            SEP #$20
.1a4553	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4556	a9 09		lda #$09	pr_comma        LDA #CHAR_TAB       ; Print a TAB
.1a4558	20 18 00	jsr $1a0018	            JSR PRINTC
.1a455b					is_more
.1a455b	20 da 20	jsr $1a20da	            JSR INCBIP
.1a455e	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a4561	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.1a4563	f0 09		beq $1a456e	                BEQ done            ; If it's NULL, return without printing a newline
.1a4565	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.1a4567	f0 05		beq $1a456e	                BEQ done            ; ... return without printing a newline
.1a4569	80 93		bra $1a44fe	                BRA pr_loop         ; Otherwise, we should have another expression, try to handle it
.1a456b					pr_nl_exit
.1a456b	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a456e	28		plp		done            PLP
.1a456f	60		rts		            RTS
.1a4570					PR_STRING
.1a4570	08		php		                PHP
.1a4571	8b		phb		                PHB
.1a4572	08		php		            PHP
.1a4573	c2 20		rep #$20	            REP #$20
.1a4575	48		pha		            PHA
.1a4576	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a4579	5b		tcd		            TCD
.1a457a	68		pla		            PLA
.1a457b	28		plp		            PLP
.1a457c	e2 20		sep #$20	            SEP #$20
.1a457e	a0 00 00	ldy #$0000	start_print     LDY #0
.1a4581	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y
.1a4583	f0 06		beq $1a458b	                BEQ done
.1a4585	20 18 00	jsr $1a0018	            JSR PRINTC
.1a4588	c8		iny		                INY
.1a4589	80 f6		bra $1a4581	                BRA loop
.1a458b	ab		plb		done            PLB
.1a458c	28		plp		                PLP
.1a458d	60		rts		            RTS
.1a458e					PR_INTEGER
.1a458e	08		php		                PHP
.1a458f	c2 20		rep #$20	            REP #$20
.1a4591	20 1d 15	jsr $1a151d	            JSR ITOS
.1a4594	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a4596	85 23		sta $0823	                STA ARGUMENT1
.1a4598	a5 18		lda $0818	                LDA STRPTR+2
.1a459a	85 25		sta $0825	                STA ARGUMENT1+2
.1a459c	20 70 45	jsr $1a4570	            JSR PR_STRING
.1a459f	28		plp		                PLP
.1a45a0	60		rts		            RTS
.1a45a1					PR_FLOAT
.1a45a1	08		php		                PHP
.1a45a2	20 fe 5c	jsr $1a5cfe	            JSR FTOS
.1a45a5	c2 20		rep #$20	            REP #$20
.1a45a7	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a45a9	85 23		sta $0823	                STA ARGUMENT1
.1a45ab	a5 18		lda $0818	                LDA STRPTR+2
.1a45ad	85 25		sta $0825	                STA ARGUMENT1+2
.1a45af	20 70 45	jsr $1a4570	            JSR PR_STRING
.1a45b2	28		plp		                PLP
.1a45b3	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\functions.s


;******  Processing file: src\C256/functions_c256.s

.1a45b4					BCD2STR
.1a45b4	08		php		            PHP
.1a45b5	e2 20		sep #$20	            SEP #$20
.1a45b7	85 b5		sta $08b5	            STA SAVE_A
.1a45b9	4a		lsr a		            LSR A
.1a45ba	4a		lsr a		            LSR A
.1a45bb	4a		lsr a		            LSR A
.1a45bc	4a		lsr a		            LSR A
.1a45bd	29 0f		and #$0f	            AND #$0F
.1a45bf	18		clc		            CLC
.1a45c0	69 30		adc #$30	            ADC #'0'
.1a45c2	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a45c4	c8		iny		            INY
.1a45c5	a5 b5		lda $08b5	            LDA SAVE_A
.1a45c7	29 0f		and #$0f	            AND #$0F
.1a45c9	18		clc		            CLC
.1a45ca	69 30		adc #$30	            ADC #'0'
.1a45cc	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a45ce	c8		iny		            INY
.1a45cf	28		plp		            PLP
.1a45d0	60		rts		            RTS
.1a45d1					F_GETDATE
.1a45d1	e2 20		sep #$20	            SEP #$20
.1a45d3	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a45d5	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a45d8	08		php		            PHP
.1a45d9	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a45dc	e2 20		sep #$20	            SEP #$20
.1a45de	c2 10		rep #$10	            REP #$10
.1a45e0	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a45e4	09 08		ora #$08	            ORA #%00001000
.1a45e6	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a45ea	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a45ed	a0 00 00	ldy #$0000	            LDY #0
.1a45f0	af 06 08 af	lda $af0806	            LDA @lRTC_DAY           ; Write the day of the month
.1a45f4	20 b4 45	jsr $1a45b4	            JSR BCD2STR
.1a45f7	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.1a45f9	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a45fb	c8		iny		            INY
.1a45fc	af 09 08 af	lda $af0809	            LDA @lRTC_MONTH         ; Write the month
.1a4600	20 b4 45	jsr $1a45b4	            JSR BCD2STR
.1a4603	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.1a4605	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4607	c8		iny		            INY
.1a4608	af 0f 08 af	lda $af080f	            LDA @lRTC_CENTURY       ; Write the year
.1a460c	20 b4 45	jsr $1a45b4	            JSR BCD2STR
.1a460f	af 0a 08 af	lda $af080a	            LDA @lRTC_YEAR          ; Write the year
.1a4613	20 b4 45	jsr $1a45b4	            JSR BCD2STR
.1a4616	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.1a4618	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a461a	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a461e	29 f7		and #$f7	            AND #%11110111
.1a4620	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a4624	c2 20		rep #$20	            REP #$20
.1a4626	a5 16		lda $0816	            LDA STRPTR
.1a4628	85 23		sta $0823	            STA ARGUMENT1
.1a462a	a5 18		lda $0818	            LDA STRPTR+2
.1a462c	85 25		sta $0825	            STA ARGUMENT1+2
.1a462e	e2 20		sep #$20	            SEP #$20
.1a4630	a9 02		lda #$02	            LDA #TYPE_STRING
.1a4632	85 27		sta $0827	            STA ARGTYPE1
.1a4634	28		plp		            PLP
.1a4635	e2 20		sep #$20	            SEP #$20
.1a4637	20 da 20	jsr $1a20da	            JSR INCBIP
.1a463a	60		rts		            RTS
.1a463b					F_GETTIME
.1a463b	e2 20		sep #$20	            SEP #$20
.1a463d	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a463f	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4642	08		php		            PHP
.1a4643	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4646	e2 20		sep #$20	            SEP #$20
.1a4648	c2 10		rep #$10	            REP #$10
.1a464a	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a464e	09 08		ora #$08	            ORA #%00001000
.1a4650	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a4654	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a4657	a0 00 00	ldy #$0000	            LDY #0
.1a465a	af 04 08 af	lda $af0804	            LDA @lRTC_HRS           ; Write the hour
.1a465e	29 7f		and #$7f	            AND #$7F                ; Trim out the AM/PM indicator
.1a4660	20 b4 45	jsr $1a45b4	            JSR BCD2STR
.1a4663	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.1a4665	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4667	c8		iny		            INY
.1a4668	af 02 08 af	lda $af0802	            LDA @lRTC_MIN           ; Write the minute
.1a466c	20 b4 45	jsr $1a45b4	            JSR BCD2STR
.1a466f	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.1a4671	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4673	c8		iny		            INY
.1a4674	af 00 08 af	lda $af0800	            LDA @lRTC_SEC           ; Write the second
.1a4678	20 b4 45	jsr $1a45b4	            JSR BCD2STR
.1a467b	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.1a467d	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a467f	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a4683	29 f7		and #$f7	            AND #%11110111
.1a4685	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a4689	c2 20		rep #$20	            REP #$20
.1a468b	a5 16		lda $0816	            LDA STRPTR
.1a468d	85 23		sta $0823	            STA ARGUMENT1
.1a468f	a5 18		lda $0818	            LDA STRPTR+2
.1a4691	85 25		sta $0825	            STA ARGUMENT1+2
.1a4693	e2 20		sep #$20	            SEP #$20
.1a4695	a9 02		lda #$02	            LDA #TYPE_STRING
.1a4697	85 27		sta $0827	            STA ARGTYPE1
.1a4699	28		plp		            PLP
.1a469a	e2 20		sep #$20	            SEP #$20
.1a469c	20 da 20	jsr $1a20da	            JSR INCBIP
.1a469f	60		rts		            RTS
.1a46a0					FN_RND
.1a46a0	e2 20		sep #$20	            SEP #$20
.1a46a2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a46a4	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a46a7	08		php		            PHP
.1a46a8	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a46ab	e2 20		sep #$20	            SEP #$20
.1a46ad	a9 01		lda #$01	            LDA #TYPE_FLOAT             ; We'll return a floating point number
.1a46af	85 27		sta $0827	            STA ARGTYPE1
.1a46b1	a9 03		lda #$03	            LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a46b3	8f 00 e2 af	sta $afe200	            STA @l FP_MATH_CTRL0        ; Expect fixed point numbers
.1a46b7	a9 01		lda #$01	            LDA #FP_OUT_DIV             ; Set us to do a division
.1a46b9	8f 01 e2 af	sta $afe201	            STA @l FP_MATH_CTRL1
.1a46bd	c2 30		rep #$30	            REP #$30
.1a46bf	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get a random 16-bits
.1a46c3	8f 08 e2 af	sta $afe208	            STA @l FP_MATH_INPUT0_LL    ; Send them to the FP unit
.1a46c7	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get another random 16-bits
.1a46cb	29 ff 7f	and #$7fff	            AND #$7FFF                  ; Make sure it's positive
.1a46ce	8f 0a e2 af	sta $afe20a	            STA @l FP_MATH_INPUT0_LL+2  ; Send them to the FP unit
.1a46d2	a9 ff ff	lda #$ffff	            LDA #$FFFF                  ; Get the maximum value
.1a46d5	8f 0c e2 af	sta $afe20c	            STA @l FP_MATH_INPUT1_LL    ; Send it to the FP unit
.1a46d9	a9 ff 7f	lda #$7fff	            LDA #$7FFF
.1a46dc	8f 0e e2 af	sta $afe20e	            STA @l FP_MATH_INPUT1_LL+2
.1a46e0	ea		nop		            NOP
.1a46e1	ea		nop		            NOP
.1a46e2	ea		nop		            NOP
.1a46e3	af 08 e2 af	lda $afe208	            LDA @l FP_MATH_OUTPUT_FP_LL     ; Get the normalized result
.1a46e7	85 23		sta $0823	            STA ARGUMENT1
.1a46e9	af 0a e2 af	lda $afe20a	            LDA @l FP_MATH_OUTPUT_FP_LL+2
.1a46ed	85 25		sta $0825	            STA ARGUMENT1+2
.1a46ef	28		plp		            PLP
.1a46f0	e2 20		sep #$20	            SEP #$20
.1a46f2	20 da 20	jsr $1a20da	            JSR INCBIP
.1a46f5	60		rts		            RTS

;******  Return to file: src\functions.s

.1a46f6					FN_MID
.1a46f6	e2 20		sep #$20	            SEP #$20
.1a46f8	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a46fa	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a46fd	08		php		                PHP
.1a46fe	c2 30		rep #$30	            REP #$30
.1a4700	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4703	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a4706					save_string
.1a4706	c2 20		rep #$20	            REP #$20
.1a4708	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a470a	48		pha		                PHA
.1a470b	a5 23		lda $0823	                LDA ARGUMENT1
.1a470d	48		pha		                PHA
.1a470e	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a4711	e2 20		sep #$20	            SEP #$20
.1a4713	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a4715	c9 2c		cmp #$2c	                CMP #','
.1a4717	f0 03		beq $1a471c	                BEQ skip_comma1
.1a4719	4c 6d 47	jmp $1a476d	                JMP syntax_err
.1a471c					skip_comma1
.1a471c	20 da 20	jsr $1a20da	            JSR INCBIP
.1a471f	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4722	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a4725	c2 20		rep #$20	            REP #$20
.1a4727	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the index
.1a4729	48		pha		                PHA
.1a472a	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a472d	e2 20		sep #$20	            SEP #$20
.1a472f	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a4731	c9 2c		cmp #$2c	                CMP #','
.1a4733	f0 03		beq $1a4738	                BEQ skip_comma2
.1a4735	4c 6d 47	jmp $1a476d	                JMP syntax_err
.1a4738					skip_comma2
.1a4738	20 da 20	jsr $1a20da	            JSR INCBIP
.1a473b	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a473e	20 d2 06	jsr $1a06d2	            JSR ASS_ARG1_INT16
.1a4741	c2 20		rep #$20	            REP #$20
.1a4743	a5 23		lda $0823	            LDA ARGUMENT1
.1a4745	85 8f		sta $088f	            STA MCOUNT
.1a4747	e2 20		sep #$20	            SEP #$20
.1a4749	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a474b	85 91		sta $0891	            STA MCOUNT+2
.1a474d	c2 20		rep #$20	            REP #$20
.1a474f	68		pla		                PLA                         ; Restore index
.1a4750	85 29		sta $0829	                STA ARGUMENT2               ; ... to ARGUMENT2
.1a4752	a9 00 00	lda #$0000	                LDA #0
.1a4755	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4757	68		pla		                PLA                         ; Restore string
.1a4758	85 23		sta $0823	                STA ARGUMENT1               ; ... to ARGUMENT1
.1a475a	68		pla		                PLA
.1a475b	85 25		sta $0825	                STA ARGUMENT1+2
.1a475d	e2 20		sep #$20	            SEP #$20
.1a475f	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a4761	85 27		sta $0827	            STA ARGTYPE1
.1a4763	20 16 17	jsr $1a1716	            JSR STRSUBSTR
.1a4766					done
.1a4766	e2 20		sep #$20	            SEP #$20
.1a4768	20 da 20	jsr $1a20da	            JSR INCBIP
.1a476b	28		plp		                PLP
.1a476c	60		rts		            RTS
.1a476d					syntax_err
.1a476d	08		php		            PHP
.1a476e	c2 20		rep #$20	            REP #$20
.1a4770	48		pha		            PHA
.1a4771	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4774	5b		tcd		            TCD
.1a4775	68		pla		            PLA
.1a4776	28		plp		            PLP
.1a4777	e2 20		sep #$20	            SEP #$20
.1a4779	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a477b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a477f	c2 20		rep #$20	            REP #$20
.1a4781	29 ff 00	and #$00ff	            AND #$00FF
.1a4784	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4787	e2 20		sep #$20	            SEP #$20
.1a4789	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a478c					range_err
.1a478c	08		php		            PHP
.1a478d	c2 20		rep #$20	            REP #$20
.1a478f	48		pha		            PHA
.1a4790	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4793	5b		tcd		            TCD
.1a4794	68		pla		            PLA
.1a4795	28		plp		            PLP
.1a4796	e2 20		sep #$20	            SEP #$20
.1a4798	a9 09		lda #$09	            LDA #ERR_RANGE
.1a479a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a479e	c2 20		rep #$20	            REP #$20
.1a47a0	29 ff 00	and #$00ff	            AND #$00FF
.1a47a3	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a47a6	e2 20		sep #$20	            SEP #$20
.1a47a8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a47ab					FN_RIGHT
.1a47ab	e2 20		sep #$20	            SEP #$20
.1a47ad	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a47af	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a47b2	08		php		                PHP
.1a47b3	c2 30		rep #$30	            REP #$30
.1a47b5	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a47b8	e2 20		sep #$20	            SEP #$20
.1a47ba	a5 27		lda $0827	                LDA ARGTYPE1
.1a47bc	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a47be	f0 03		beq $1a47c3	                BEQ save_string
.1a47c0	4c 2f 48	jmp $1a482f	                JMP type_mismatch           ; Type mismatch if it's not a string
.1a47c3					save_string
.1a47c3	c2 20		rep #$20	            REP #$20
.1a47c5	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a47c7	48		pha		                PHA
.1a47c8	a5 23		lda $0823	                LDA ARGUMENT1
.1a47ca	48		pha		                PHA
.1a47cb	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a47ce	e2 20		sep #$20	            SEP #$20
.1a47d0	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a47d2	c9 2c		cmp #$2c	                CMP #','
.1a47d4	f0 03		beq $1a47d9	                BEQ skip_comma
.1a47d6	4c 4e 48	jmp $1a484e	                JMP syntax_err
.1a47d9					skip_comma
.1a47d9	20 da 20	jsr $1a20da	            JSR INCBIP
.1a47dc	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a47df	e2 20		sep #$20	            SEP #$20
.1a47e1	a5 27		lda $0827	                LDA ARGTYPE1
.1a47e3	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a47e5	d0 48		bne $1a482f	                BNE type_mismatch           ; Type mismatch if it's not an integer
.1a47e7	c2 20		rep #$20	            REP #$20
.1a47e9	a5 23		lda $0823	            LDA ARGUMENT1
.1a47eb	85 8f		sta $088f	            STA MCOUNT
.1a47ed	c2 20		rep #$20	            REP #$20
.1a47ef	68		pla		                PLA                         ; Recover the string pointer
.1a47f0	85 23		sta $0823	                STA ARGUMENT1
.1a47f2	68		pla		                PLA
.1a47f3	85 25		sta $0825	                STA ARGUMENT1+2
.1a47f5	e2 20		sep #$20	            SEP #$20
.1a47f7	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a47f9	85 27		sta $0827	            STA ARGTYPE1
.1a47fb	e2 20		sep #$20	            SEP #$20
.1a47fd	a0 00 00	ldy #$0000	                LDY #0
.1a4800	b7 23		lda [$0823],y	count_loop      LDA [ARGUMENT1],Y
.1a4802	f0 03		beq $1a4807	                BEQ count_done
.1a4804	c8		iny		                INY
.1a4805	80 f9		bra $1a4800	                BRA count_loop
.1a4807					count_done
.1a4807	c2 20		rep #$20	            REP #$20
.1a4809	98		tya		                TYA                         ; ARGUMENT2 := LENGTH - MCOUNT
.1a480a	38		sec		                SEC
.1a480b	e5 8f		sbc $088f	                SBC MCOUNT
.1a480d	30 09		bmi $1a4818	                BMI index0                  ; if ARGUMENT2 < 0, set ARGUMENT2 := 0
.1a480f	85 29		sta $0829	                STA ARGUMENT2
.1a4811	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT2[23..16] := 0
.1a4814	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4816	80 07		bra $1a481f	                BRA slice
.1a4818	a9 00 00	lda #$0000	index0          LDA #0                      ; 0 is the floor for the index
.1a481b	85 29		sta $0829	                STA ARGUMENT2
.1a481d	85 2b		sta $082b	                STA ARGUMENT2+2
.1a481f					slice
.1a481f	e2 20		sep #$20	            SEP #$20
.1a4821	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a4823	85 2d		sta $082d	            STA ARGTYPE2
.1a4825	20 16 17	jsr $1a1716	            JSR STRSUBSTR
.1a4828					done
.1a4828	e2 20		sep #$20	            SEP #$20
.1a482a	20 da 20	jsr $1a20da	            JSR INCBIP
.1a482d	28		plp		                PLP
.1a482e	60		rts		            RTS
.1a482f					type_mismatch
.1a482f	08		php		            PHP
.1a4830	c2 20		rep #$20	            REP #$20
.1a4832	48		pha		            PHA
.1a4833	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4836	5b		tcd		            TCD
.1a4837	68		pla		            PLA
.1a4838	28		plp		            PLP
.1a4839	e2 20		sep #$20	            SEP #$20
.1a483b	a9 04		lda #$04	            LDA #ERR_TYPE
.1a483d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4841	c2 20		rep #$20	            REP #$20
.1a4843	29 ff 00	and #$00ff	            AND #$00FF
.1a4846	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4849	e2 20		sep #$20	            SEP #$20
.1a484b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a484e					syntax_err
.1a484e	08		php		            PHP
.1a484f	c2 20		rep #$20	            REP #$20
.1a4851	48		pha		            PHA
.1a4852	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4855	5b		tcd		            TCD
.1a4856	68		pla		            PLA
.1a4857	28		plp		            PLP
.1a4858	e2 20		sep #$20	            SEP #$20
.1a485a	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a485c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4860	c2 20		rep #$20	            REP #$20
.1a4862	29 ff 00	and #$00ff	            AND #$00FF
.1a4865	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4868	e2 20		sep #$20	            SEP #$20
.1a486a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a486d					range_err
.1a486d	08		php		            PHP
.1a486e	c2 20		rep #$20	            REP #$20
.1a4870	48		pha		            PHA
.1a4871	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4874	5b		tcd		            TCD
.1a4875	68		pla		            PLA
.1a4876	28		plp		            PLP
.1a4877	e2 20		sep #$20	            SEP #$20
.1a4879	a9 09		lda #$09	            LDA #ERR_RANGE
.1a487b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a487f	c2 20		rep #$20	            REP #$20
.1a4881	29 ff 00	and #$00ff	            AND #$00FF
.1a4884	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4887	e2 20		sep #$20	            SEP #$20
.1a4889	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a488c					FN_LEFT
.1a488c	e2 20		sep #$20	            SEP #$20
.1a488e	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4890	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4893	08		php		                PHP
.1a4894	c2 30		rep #$30	            REP #$30
.1a4896	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4899	e2 20		sep #$20	            SEP #$20
.1a489b	a5 27		lda $0827	                LDA ARGTYPE1
.1a489d	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a489f	f0 03		beq $1a48a4	                BEQ save_string
.1a48a1	4c f8 48	jmp $1a48f8	                JMP type_mismatch           ; Type mismatch if it's not a string
.1a48a4					save_string
.1a48a4	c2 20		rep #$20	            REP #$20
.1a48a6	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a48a8	48		pha		                PHA
.1a48a9	a5 23		lda $0823	                LDA ARGUMENT1
.1a48ab	48		pha		                PHA
.1a48ac	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a48af	e2 20		sep #$20	            SEP #$20
.1a48b1	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a48b3	c9 2c		cmp #$2c	                CMP #','
.1a48b5	f0 03		beq $1a48ba	                BEQ skip_comma
.1a48b7	4c 17 49	jmp $1a4917	                JMP syntax_err
.1a48ba					skip_comma
.1a48ba	20 da 20	jsr $1a20da	            JSR INCBIP
.1a48bd	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a48c0	e2 20		sep #$20	            SEP #$20
.1a48c2	a5 27		lda $0827	                LDA ARGTYPE1
.1a48c4	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a48c6	d0 30		bne $1a48f8	                BNE type_mismatch           ; Type mismatch if it's not an integer
.1a48c8	c2 20		rep #$20	            REP #$20
.1a48ca	a5 23		lda $0823	            LDA ARGUMENT1
.1a48cc	85 8f		sta $088f	            STA MCOUNT
.1a48ce	c2 20		rep #$20	            REP #$20
.1a48d0	a9 00 00	lda #$0000	            LDA #<>0
.1a48d3	85 29		sta $0829	            STA ARGUMENT2
.1a48d5	a9 00 00	lda #$0000	            LDA #(0 >> 16)
.1a48d8	85 2b		sta $082b	            STA ARGUMENT2+2
.1a48da	e2 20		sep #$20	            SEP #$20
.1a48dc	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a48de	85 2d		sta $082d	            STA ARGTYPE2
.1a48e0	c2 20		rep #$20	            REP #$20
.1a48e2	68		pla		                PLA                         ; Recover the string pointer
.1a48e3	85 23		sta $0823	                STA ARGUMENT1
.1a48e5	68		pla		                PLA
.1a48e6	85 25		sta $0825	                STA ARGUMENT1+2
.1a48e8	e2 20		sep #$20	            SEP #$20
.1a48ea	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a48ec	85 27		sta $0827	            STA ARGTYPE1
.1a48ee	20 16 17	jsr $1a1716	            JSR STRSUBSTR
.1a48f1					done
.1a48f1	e2 20		sep #$20	            SEP #$20
.1a48f3	20 da 20	jsr $1a20da	            JSR INCBIP
.1a48f6	28		plp		                PLP
.1a48f7	60		rts		            RTS
.1a48f8					type_mismatch
.1a48f8	08		php		            PHP
.1a48f9	c2 20		rep #$20	            REP #$20
.1a48fb	48		pha		            PHA
.1a48fc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a48ff	5b		tcd		            TCD
.1a4900	68		pla		            PLA
.1a4901	28		plp		            PLP
.1a4902	e2 20		sep #$20	            SEP #$20
.1a4904	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4906	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a490a	c2 20		rep #$20	            REP #$20
.1a490c	29 ff 00	and #$00ff	            AND #$00FF
.1a490f	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4912	e2 20		sep #$20	            SEP #$20
.1a4914	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4917					syntax_err
.1a4917	08		php		            PHP
.1a4918	c2 20		rep #$20	            REP #$20
.1a491a	48		pha		            PHA
.1a491b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a491e	5b		tcd		            TCD
.1a491f	68		pla		            PLA
.1a4920	28		plp		            PLP
.1a4921	e2 20		sep #$20	            SEP #$20
.1a4923	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4925	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4929	c2 20		rep #$20	            REP #$20
.1a492b	29 ff 00	and #$00ff	            AND #$00FF
.1a492e	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4931	e2 20		sep #$20	            SEP #$20
.1a4933	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4936					range_err
.1a4936	08		php		            PHP
.1a4937	c2 20		rep #$20	            REP #$20
.1a4939	48		pha		            PHA
.1a493a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a493d	5b		tcd		            TCD
.1a493e	68		pla		            PLA
.1a493f	28		plp		            PLP
.1a4940	e2 20		sep #$20	            SEP #$20
.1a4942	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4944	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4948	c2 20		rep #$20	            REP #$20
.1a494a	29 ff 00	and #$00ff	            AND #$00FF
.1a494d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4950	e2 20		sep #$20	            SEP #$20
.1a4952	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4955					FN_VAL
.1a4955	e2 20		sep #$20	            SEP #$20
.1a4957	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4959	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a495c	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a495f	c2 10		rep #$10	            REP #$10
.1a4961	e2 20		sep #$20	            SEP #$20
.1a4963	a5 27		lda $0827	                LDA ARGTYPE1
.1a4965	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4967	d0 23		bne $1a498c	                BNE type_mismatch
.1a4969	c2 20		rep #$20	            REP #$20
.1a496b	a5 00		lda $0800	                LDA BIP             ; preserve BIP for later
.1a496d	85 40		sta $0840	                STA SAVEBIP
.1a496f	a5 02		lda $0802	                LDA BIP+2
.1a4971	85 42		sta $0842	                STA SAVEBIP+2
.1a4973	a5 23		lda $0823	                LDA ARGUMENT1       ; Temporarily point BIP to the string to parse
.1a4975	85 00		sta $0800	                STA BIP
.1a4977	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4979	85 02		sta $0802	                STA BIP+2
.1a497b	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a497e	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.1a4980	85 00		sta $0800	                STA BIP
.1a4982	a5 42		lda $0842	                LDA SAVEBIP+2
.1a4984	85 02		sta $0802	                STA BIP+2
.1a4986	e2 20		sep #$20	            SEP #$20
.1a4988	20 da 20	jsr $1a20da	            JSR INCBIP
.1a498b	60		rts		            RTS
.1a498c					type_mismatch
.1a498c	08		php		            PHP
.1a498d	c2 20		rep #$20	            REP #$20
.1a498f	48		pha		            PHA
.1a4990	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4993	5b		tcd		            TCD
.1a4994	68		pla		            PLA
.1a4995	28		plp		            PLP
.1a4996	e2 20		sep #$20	            SEP #$20
.1a4998	a9 04		lda #$04	            LDA #ERR_TYPE
.1a499a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a499e	c2 20		rep #$20	            REP #$20
.1a49a0	29 ff 00	and #$00ff	            AND #$00FF
.1a49a3	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a49a6	e2 20		sep #$20	            SEP #$20
.1a49a8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a49ab					FN_STR
.1a49ab	e2 20		sep #$20	            SEP #$20
.1a49ad	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a49af	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a49b2	08		php		                PHP
.1a49b3	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a49b6	c2 10		rep #$10	            REP #$10
.1a49b8	e2 20		sep #$20	            SEP #$20
.1a49ba	a5 27		lda $0827	                LDA ARGTYPE1
.1a49bc	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a49be	d0 1a		bne $1a49da	                BNE type_mismatch
.1a49c0	20 1d 15	jsr $1a151d	            JSR ITOS
.1a49c3	c2 20		rep #$20	            REP #$20
.1a49c5	a5 16		lda $0816	                LDA STRPTR          ; Prepare the return result
.1a49c7	85 23		sta $0823	                STA ARGUMENT1
.1a49c9	a5 18		lda $0818	                LDA STRPTR+2
.1a49cb	85 25		sta $0825	                STA ARGUMENT1+2
.1a49cd	e2 20		sep #$20	            SEP #$20
.1a49cf	a9 02		lda #$02	                LDA #TYPE_STRING
.1a49d1	85 27		sta $0827	                STA ARGTYPE1
.1a49d3	28		plp		                PLP
.1a49d4	e2 20		sep #$20	            SEP #$20
.1a49d6	20 da 20	jsr $1a20da	            JSR INCBIP
.1a49d9	60		rts		            RTS
.1a49da					type_mismatch
.1a49da	08		php		            PHP
.1a49db	c2 20		rep #$20	            REP #$20
.1a49dd	48		pha		            PHA
.1a49de	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a49e1	5b		tcd		            TCD
.1a49e2	68		pla		            PLA
.1a49e3	28		plp		            PLP
.1a49e4	e2 20		sep #$20	            SEP #$20
.1a49e6	a9 04		lda #$04	            LDA #ERR_TYPE
.1a49e8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a49ec	c2 20		rep #$20	            REP #$20
.1a49ee	29 ff 00	and #$00ff	            AND #$00FF
.1a49f1	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a49f4	e2 20		sep #$20	            SEP #$20
.1a49f6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a49f9					FN_DEC
.1a49f9	e2 20		sep #$20	            SEP #$20
.1a49fb	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a49fd	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4a00	08		php		                PHP
.1a4a01	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4a04	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a4a07	c2 20		rep #$20	            REP #$20
.1a4a09	64 0c		stz $080c	                STZ SCRATCH
.1a4a0b	64 0e		stz $080e	                STZ SCRATCH+2
.1a4a0d	e2 30		sep #$30	            SEP #$30
.1a4a0f	a0 00		ldy #$00	                LDY #0
.1a4a11	b7 23		lda [$0823],y	skip_loop       LDA [ARGUMENT1],Y
.1a4a13	c9 20		cmp #$20	                CMP #CHAR_SP
.1a4a15	f0 04		beq $1a4a1b	                BEQ skip_char
.1a4a17	c9 24		cmp #$24	                CMP #'$'
.1a4a19	d0 03		bne $1a4a1e	                BNE loop
.1a4a1b	c8		iny		skip_char       INY
.1a4a1c	80 f3		bra $1a4a11	                BRA skip_loop
.1a4a1e	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y   ; Check the character
.1a4a20	20 d1 04	jsr $1a04d1	            JSR ISHEX
.1a4a23	90 1e		bcc $1a4a43	                BCC ret_result      ; No: return what we have so far
.1a4a25	c2 20		rep #$20	            REP #$20
.1a4a27	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4a29	26 0e		rol $080e	                ROL SCRATCH+2
.1a4a2b	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4a2d	26 0e		rol $080e	                ROL SCRATCH+2
.1a4a2f	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4a31	26 0e		rol $080e	                ROL SCRATCH+2
.1a4a33	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4a35	26 0e		rol $080e	                ROL SCRATCH+2
.1a4a37	e2 20		sep #$20	            SEP #$20
.1a4a39	20 f2 04	jsr $1a04f2	            JSR HEX2BIN
.1a4a3c	05 0c		ora $080c	                ORA SCRATCH
.1a4a3e	85 0c		sta $080c	                STA SCRATCH         ; And add it to the result
.1a4a40	c8		iny		                INY
.1a4a41	80 db		bra $1a4a1e	                BRA loop            ; And try the next character
.1a4a43					ret_result
.1a4a43	c2 20		rep #$20	            REP #$20
.1a4a45	a5 0c		lda $080c	                LDA SCRATCH         ; Return the result
.1a4a47	85 23		sta $0823	                STA ARGUMENT1
.1a4a49	a5 0e		lda $080e	                LDA SCRATCH+2
.1a4a4b	85 25		sta $0825	                STA ARGUMENT1+2
.1a4a4d	e2 20		sep #$20	            SEP #$20
.1a4a4f	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a4a51	85 27		sta $0827	                STA ARGTYPE1
.1a4a53	28		plp		                PLP
.1a4a54	e2 20		sep #$20	            SEP #$20
.1a4a56	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4a59	60		rts		            RTS
.1a4a5a					FN_HEX
.1a4a5a	e2 20		sep #$20	            SEP #$20
.1a4a5c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4a5e	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4a61	08		php		                PHP
.1a4a62	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4a65	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a4a68	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a4a6b	e2 30		sep #$30	            SEP #$30
.1a4a6d	a0 ff		ldy #$ff	                LDY #$FF            ; Terminate the string
.1a4a6f	a9 00		lda #$00	                LDA #0
.1a4a71	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4a73	88		dey		                DEY
.1a4a74	a5 23		lda $0823	loop            LDA ARGUMENT1       ; Write the low digit
.1a4a76	29 0f		and #$0f	                AND #$0F
.1a4a78	aa		tax		                TAX
.1a4a79	bf 00 d0 1a	lda $1ad000,x	                LDA @lHEXDIGITS,X
.1a4a7d	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4a7f	88		dey		                DEY
.1a4a80	a5 23		lda $0823	                LDA ARGUMENT1       ; Write the high digit
.1a4a82	29 f0		and #$f0	                AND #$F0
.1a4a84	4a		lsr a		                LSR A
.1a4a85	4a		lsr a		                LSR A
.1a4a86	4a		lsr a		                LSR A
.1a4a87	4a		lsr a		                LSR A
.1a4a88	aa		tax		                TAX
.1a4a89	bf 00 d0 1a	lda $1ad000,x	                LDA @lHEXDIGITS,X
.1a4a8d	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4a8f	88		dey		                DEY
.1a4a90	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Shift value by one byte
.1a4a92	85 23		sta $0823	                STA ARGUMENT1
.1a4a94	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4a96	85 24		sta $0824	                STA ARGUMENT1+1
.1a4a98	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a4a9a	85 25		sta $0825	                STA ARGUMENT1+2
.1a4a9c	a9 00		lda #$00	                LDA #0
.1a4a9e	85 26		sta $0826	                STA ARGUMENT1+3
.1a4aa0	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the argument 0?
.1a4aa2	d0 d0		bne $1a4a74	                BNE loop            ; No: keep converting
.1a4aa4	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4aa6	d0 cc		bne $1a4a74	                BNE loop
.1a4aa8	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4aaa	d0 c8		bne $1a4a74	                BNE loop
.1a4aac	98		tya		                TYA                 ; Get the index of the first free char
.1a4aad	38		sec		                SEC                 ; Add 1 to get to the first character of the string
.1a4aae	65 16		adc $0816	                ADC STRPTR          ; And add the whole thing to the temp string pointer
.1a4ab0	85 23		sta $0823	                STA ARGUMENT1       ; And return it as the result
.1a4ab2	a5 17		lda $0817	                LDA STRPTR+1
.1a4ab4	85 24		sta $0824	                STA ARGUMENT1+1
.1a4ab6	a5 18		lda $0818	                LDA STRPTR+2
.1a4ab8	85 25		sta $0825	                STA ARGUMENT1+2
.1a4aba	a5 19		lda $0819	                LDA STRPTR+3
.1a4abc	85 26		sta $0826	                STA ARGUMENT1+3
.1a4abe	a9 02		lda #$02	                LDA #TYPE_STRING    ; And make the type STRING
.1a4ac0	85 27		sta $0827	                STA ARGTYPE1
.1a4ac2	28		plp		                PLP
.1a4ac3	e2 20		sep #$20	            SEP #$20
.1a4ac5	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4ac8	60		rts		            RTS
.1a4ac9					type_mismatch
.1a4ac9	08		php		            PHP
.1a4aca	c2 20		rep #$20	            REP #$20
.1a4acc	48		pha		            PHA
.1a4acd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4ad0	5b		tcd		            TCD
.1a4ad1	68		pla		            PLA
.1a4ad2	28		plp		            PLP
.1a4ad3	e2 20		sep #$20	            SEP #$20
.1a4ad5	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4ad7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4adb	c2 20		rep #$20	            REP #$20
.1a4add	29 ff 00	and #$00ff	            AND #$00FF
.1a4ae0	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4ae3	e2 20		sep #$20	            SEP #$20
.1a4ae5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4ae8					FN_LEN
.1a4ae8	e2 20		sep #$20	            SEP #$20
.1a4aea	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4aec	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4aef	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4af2	e2 20		sep #$20	            SEP #$20
.1a4af4	a5 27		lda $0827	                LDA ARGTYPE1
.1a4af6	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4af8	d0 1f		bne $1a4b19	                BNE type_mismatch
.1a4afa	8b		phb		                PHB                 ; Set the data bank to the data bank of the string
.1a4afb	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4afd	48		pha		                PHA
.1a4afe	ab		plb		                PLB
.1a4aff	c2 10		rep #$10	            REP #$10
.1a4b01	a6 23		ldx $0823	                LDX ARGUMENT1       ; And point X to the string data
.1a4b03	20 aa 15	jsr $1a15aa	            JSR STRLEN
.1a4b06	ab		plb		                PLB                 ; Restore the old data bank
.1a4b07	84 23		sty $0823	                STY ARGUMENT1       ; Save the length to ARGUMENT1
.1a4b09	c2 20		rep #$20	            REP #$20
.1a4b0b	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4b0d	e2 20		sep #$20	            SEP #$20
.1a4b0f	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the type to INTEGER
.1a4b11	85 27		sta $0827	                STA ARGTYPE1
.1a4b13	e2 20		sep #$20	            SEP #$20
.1a4b15	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4b18	60		rts		            RTS
.1a4b19					type_mismatch
.1a4b19	08		php		            PHP
.1a4b1a	c2 20		rep #$20	            REP #$20
.1a4b1c	48		pha		            PHA
.1a4b1d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4b20	5b		tcd		            TCD
.1a4b21	68		pla		            PLA
.1a4b22	28		plp		            PLP
.1a4b23	e2 20		sep #$20	            SEP #$20
.1a4b25	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4b27	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4b2b	c2 20		rep #$20	            REP #$20
.1a4b2d	29 ff 00	and #$00ff	            AND #$00FF
.1a4b30	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4b33	e2 20		sep #$20	            SEP #$20
.1a4b35	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4b38					FN_PEEK
.1a4b38	e2 20		sep #$20	            SEP #$20
.1a4b3a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4b3c	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4b3f	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4b42	e2 20		sep #$20	            SEP #$20
.1a4b44	a5 27		lda $0827	                LDA ARGTYPE1
.1a4b46	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4b48	d0 33		bne $1a4b7d	                BNE type_mismatch
.1a4b4a	a5 25		lda $0825	                LDA ARGUMENT1+2                     ; Check to see if the request is to video memory
.1a4b4c	c9 b0		cmp #$b0	                CMP #`VRAM
.1a4b4e	90 1b		bcc $1a4b6b	                BLT simple_peek                     ; No: just do an ordinary PEEK
.1a4b50	c9 f0		cmp #$f0	                CMP #$F0
.1a4b52	b0 17		bcs $1a4b6b	                BGE simple_peek
.1a4b54	e2 20		sep #$20	            SEP #$20
.1a4b56	a7 23		lda [$0823]	                LDA [ARGUMENT1]                     ; Request the data from VRAM
.1a4b58	c2 20		rep #$20	            REP #$20
.1a4b5a	af 02 09 af	lda $af0902	wait_vram       LDA @l VMEM2CPU_Fifo_Count_LO       ; Wait for the Vicky FIFO to have a byte in it
.1a4b5e	89 00 80	bit #$8000	                BIT #$8000
.1a4b61	d0 f7		bne $1a4b5a	                BNE wait_vram
.1a4b63	e2 20		sep #$20	            SEP #$20
.1a4b65	af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port           ; Fetch the byte from the Vicky FIFO
.1a4b69	80 04		bra $1a4b6f	                BRA save_result                     ; And return it
.1a4b6b					simple_peek
.1a4b6b	e2 20		sep #$20	            SEP #$20
.1a4b6d	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a4b6f	85 23		sta $0823	save_result     STA ARGUMENT1
.1a4b71	64 24		stz $0824	                STZ ARGUMENT1+1
.1a4b73	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4b75	64 30		stz $0830	                STZ ARGUMENT1+13
.1a4b77	e2 20		sep #$20	            SEP #$20
.1a4b79	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4b7c	60		rts		            RTS
.1a4b7d					type_mismatch
.1a4b7d	08		php		            PHP
.1a4b7e	c2 20		rep #$20	            REP #$20
.1a4b80	48		pha		            PHA
.1a4b81	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4b84	5b		tcd		            TCD
.1a4b85	68		pla		            PLA
.1a4b86	28		plp		            PLP
.1a4b87	e2 20		sep #$20	            SEP #$20
.1a4b89	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4b8b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4b8f	c2 20		rep #$20	            REP #$20
.1a4b91	29 ff 00	and #$00ff	            AND #$00FF
.1a4b94	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4b97	e2 20		sep #$20	            SEP #$20
.1a4b99	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4b9c					FN_PEEKL
.1a4b9c	e2 20		sep #$20	            SEP #$20
.1a4b9e	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ba0	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4ba3	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4ba6	e2 20		sep #$20	            SEP #$20
.1a4ba8	a5 27		lda $0827	                LDA ARGTYPE1
.1a4baa	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4bac	d0 1d		bne $1a4bcb	                BNE type_mismatch
.1a4bae	c2 20		rep #$20	            REP #$20
.1a4bb0	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a4bb2	85 0c		sta $080c	                STA SCRATCH
.1a4bb4	e2 20		sep #$20	            SEP #$20
.1a4bb6	a0 02 00	ldy #$0002	                LDY #2
.1a4bb9	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y
.1a4bbb	85 25		sta $0825	                STA ARGUMENT1+2
.1a4bbd	64 26		stz $0826	                STZ ARGUMENT1+3
.1a4bbf	c2 20		rep #$20	            REP #$20
.1a4bc1	a5 0c		lda $080c	                LDA SCRATCH
.1a4bc3	85 23		sta $0823	                STA ARGUMENT1
.1a4bc5	e2 20		sep #$20	            SEP #$20
.1a4bc7	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4bca	60		rts		            RTS
.1a4bcb					type_mismatch
.1a4bcb	08		php		            PHP
.1a4bcc	c2 20		rep #$20	            REP #$20
.1a4bce	48		pha		            PHA
.1a4bcf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4bd2	5b		tcd		            TCD
.1a4bd3	68		pla		            PLA
.1a4bd4	28		plp		            PLP
.1a4bd5	e2 20		sep #$20	            SEP #$20
.1a4bd7	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4bd9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4bdd	c2 20		rep #$20	            REP #$20
.1a4bdf	29 ff 00	and #$00ff	            AND #$00FF
.1a4be2	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4be5	e2 20		sep #$20	            SEP #$20
.1a4be7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4bea					FN_PEEKW
.1a4bea	e2 20		sep #$20	            SEP #$20
.1a4bec	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4bee	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4bf1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4bf4	e2 20		sep #$20	            SEP #$20
.1a4bf6	a5 27		lda $0827	                LDA ARGTYPE1
.1a4bf8	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4bfa	d0 0e		bne $1a4c0a	                BNE type_mismatch
.1a4bfc	c2 20		rep #$20	            REP #$20
.1a4bfe	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a4c00	85 23		sta $0823	                STA ARGUMENT1
.1a4c02	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4c04	e2 20		sep #$20	            SEP #$20
.1a4c06	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4c09	60		rts		            RTS
.1a4c0a					type_mismatch
.1a4c0a	08		php		            PHP
.1a4c0b	c2 20		rep #$20	            REP #$20
.1a4c0d	48		pha		            PHA
.1a4c0e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4c11	5b		tcd		            TCD
.1a4c12	68		pla		            PLA
.1a4c13	28		plp		            PLP
.1a4c14	e2 20		sep #$20	            SEP #$20
.1a4c16	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4c18	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4c1c	c2 20		rep #$20	            REP #$20
.1a4c1e	29 ff 00	and #$00ff	            AND #$00FF
.1a4c21	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4c24	e2 20		sep #$20	            SEP #$20
.1a4c26	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4c29					FN_CHR
.1a4c29	e2 20		sep #$20	            SEP #$20
.1a4c2b	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4c2d	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4c30	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4c33	e2 20		sep #$20	            SEP #$20
.1a4c35	a5 27		lda $0827	                LDA ARGTYPE1
.1a4c37	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4c39	d0 24		bne $1a4c5f	                BNE type_mismatch
.1a4c3b	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a4c3e	a5 23		lda $0823	                LDA ARGUMENT1       ; Get the numberic value
.1a4c40	87 16		sta [$0816]	                STA [STRPTR]        ; And save it as the first character
.1a4c42	a9 00		lda #$00	                LDA #0              ; Null terminate the string
.1a4c44	a0 01 00	ldy #$0001	                LDY #1
.1a4c47	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4c49	c2 20		rep #$20	            REP #$20
.1a4c4b	a5 16		lda $0816	                LDA STRPTR
.1a4c4d	85 23		sta $0823	                STA ARGUMENT1
.1a4c4f	a5 18		lda $0818	                LDA STRPTR+2
.1a4c51	85 25		sta $0825	                STA ARGUMENT1+2
.1a4c53	e2 20		sep #$20	            SEP #$20
.1a4c55	a9 02		lda #$02	                LDA #TYPE_STRING
.1a4c57	85 27		sta $0827	                STA ARGTYPE1
.1a4c59	e2 20		sep #$20	            SEP #$20
.1a4c5b	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4c5e	60		rts		            RTS
.1a4c5f					type_mismatch
.1a4c5f	08		php		            PHP
.1a4c60	c2 20		rep #$20	            REP #$20
.1a4c62	48		pha		            PHA
.1a4c63	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4c66	5b		tcd		            TCD
.1a4c67	68		pla		            PLA
.1a4c68	28		plp		            PLP
.1a4c69	e2 20		sep #$20	            SEP #$20
.1a4c6b	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4c6d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4c71	c2 20		rep #$20	            REP #$20
.1a4c73	29 ff 00	and #$00ff	            AND #$00FF
.1a4c76	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4c79	e2 20		sep #$20	            SEP #$20
.1a4c7b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4c7e					FN_ASC
.1a4c7e	e2 20		sep #$20	            SEP #$20
.1a4c80	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4c82	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4c85	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4c88	e2 20		sep #$20	            SEP #$20
.1a4c8a	a5 27		lda $0827	                LDA ARGTYPE1
.1a4c8c	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4c8e	d0 14		bne $1a4ca4	                BNE type_mismatch
.1a4c90	a7 23		lda [$0823]	                LDA [ARGUMENT1]     ; Get the character
.1a4c92	85 23		sta $0823	                STA ARGUMENT1       ; Save its code to ARGUMENT1
.1a4c94	64 24		stz $0824	                STZ ARGUMENT1+1
.1a4c96	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4c98	64 26		stz $0826	                STZ ARGUMENT1+3
.1a4c9a	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the return type to integer
.1a4c9c	85 27		sta $0827	                STA ARGTYPE1
.1a4c9e	e2 20		sep #$20	            SEP #$20
.1a4ca0	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4ca3	60		rts		            RTS
.1a4ca4					type_mismatch
.1a4ca4	08		php		            PHP
.1a4ca5	c2 20		rep #$20	            REP #$20
.1a4ca7	48		pha		            PHA
.1a4ca8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4cab	5b		tcd		            TCD
.1a4cac	68		pla		            PLA
.1a4cad	28		plp		            PLP
.1a4cae	e2 20		sep #$20	            SEP #$20
.1a4cb0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4cb2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4cb6	c2 20		rep #$20	            REP #$20
.1a4cb8	29 ff 00	and #$00ff	            AND #$00FF
.1a4cbb	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4cbe	e2 20		sep #$20	            SEP #$20
.1a4cc0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4cc3					FN_SPC
.1a4cc3	e2 20		sep #$20	            SEP #$20
.1a4cc5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4cc7	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4cca	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4ccd	e2 20		sep #$20	            SEP #$20
.1a4ccf	a5 27		lda $0827	                LDA ARGTYPE1
.1a4cd1	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4cd3	d0 39		bne $1a4d0e	                BNE type_mismatch
.1a4cd5	e2 20		sep #$20	            SEP #$20
.1a4cd7	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.1a4cd9	d0 52		bne $1a4d2d	                BNE err_limit
.1a4cdb	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4cdd	d0 4e		bne $1a4d2d	                BNE err_limit
.1a4cdf	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4ce1	d0 4a		bne $1a4d2d	                BNE err_limit
.1a4ce3	c2 10		rep #$10	            REP #$10
.1a4ce5	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a4ce8	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.1a4cea	e2 20		sep #$20	            SEP #$20
.1a4cec	a9 00		lda #$00	                LDA #0
.1a4cee	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.1a4cf0	88		dey		                DEY
.1a4cf1	30 07		bmi $1a4cfa	                BMI done
.1a4cf3	a9 20		lda #$20	                LDA #CHAR_SP
.1a4cf5	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.1a4cf7	88		dey		                DEY
.1a4cf8	10 fb		bpl $1a4cf5	                BPL loop            ; And keep writing until we're done
.1a4cfa	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.1a4cfc	85 27		sta $0827	                STA ARGTYPE1
.1a4cfe	c2 20		rep #$20	            REP #$20
.1a4d00	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.1a4d02	85 23		sta $0823	                STA ARGUMENT1
.1a4d04	a5 18		lda $0818	                LDA STRPTR+2
.1a4d06	85 25		sta $0825	                STA ARGUMENT1+2
.1a4d08	e2 20		sep #$20	            SEP #$20
.1a4d0a	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4d0d	60		rts		            RTS
.1a4d0e					type_mismatch
.1a4d0e	08		php		            PHP
.1a4d0f	c2 20		rep #$20	            REP #$20
.1a4d11	48		pha		            PHA
.1a4d12	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d15	5b		tcd		            TCD
.1a4d16	68		pla		            PLA
.1a4d17	28		plp		            PLP
.1a4d18	e2 20		sep #$20	            SEP #$20
.1a4d1a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4d1c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4d20	c2 20		rep #$20	            REP #$20
.1a4d22	29 ff 00	and #$00ff	            AND #$00FF
.1a4d25	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4d28	e2 20		sep #$20	            SEP #$20
.1a4d2a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4d2d					err_limit
.1a4d2d	08		php		            PHP
.1a4d2e	c2 20		rep #$20	            REP #$20
.1a4d30	48		pha		            PHA
.1a4d31	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d34	5b		tcd		            TCD
.1a4d35	68		pla		            PLA
.1a4d36	28		plp		            PLP
.1a4d37	e2 20		sep #$20	            SEP #$20
.1a4d39	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4d3b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4d3f	c2 20		rep #$20	            REP #$20
.1a4d41	29 ff 00	and #$00ff	            AND #$00FF
.1a4d44	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4d47	e2 20		sep #$20	            SEP #$20
.1a4d49	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4d4c					FN_TAB
.1a4d4c	e2 20		sep #$20	            SEP #$20
.1a4d4e	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4d50	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4d53	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4d56	e2 20		sep #$20	            SEP #$20
.1a4d58	a5 27		lda $0827	                LDA ARGTYPE1
.1a4d5a	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4d5c	d0 39		bne $1a4d97	                BNE type_mismatch
.1a4d5e	e2 20		sep #$20	            SEP #$20
.1a4d60	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.1a4d62	d0 52		bne $1a4db6	                BNE err_limit
.1a4d64	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4d66	d0 4e		bne $1a4db6	                BNE err_limit
.1a4d68	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4d6a	d0 4a		bne $1a4db6	                BNE err_limit
.1a4d6c	c2 10		rep #$10	            REP #$10
.1a4d6e	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a4d71	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.1a4d73	e2 20		sep #$20	            SEP #$20
.1a4d75	a9 00		lda #$00	                LDA #0
.1a4d77	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.1a4d79	88		dey		                DEY
.1a4d7a	30 07		bmi $1a4d83	                BMI done
.1a4d7c	a9 09		lda #$09	                LDA #CHAR_TAB
.1a4d7e	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.1a4d80	88		dey		                DEY
.1a4d81	10 fb		bpl $1a4d7e	                BPL loop            ; And keep writing until we're done
.1a4d83	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.1a4d85	85 27		sta $0827	                STA ARGTYPE1
.1a4d87	c2 20		rep #$20	            REP #$20
.1a4d89	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.1a4d8b	85 23		sta $0823	                STA ARGUMENT1
.1a4d8d	a5 18		lda $0818	                LDA STRPTR+2
.1a4d8f	85 25		sta $0825	                STA ARGUMENT1+2
.1a4d91	e2 20		sep #$20	            SEP #$20
.1a4d93	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4d96	60		rts		            RTS
.1a4d97					type_mismatch
.1a4d97	08		php		            PHP
.1a4d98	c2 20		rep #$20	            REP #$20
.1a4d9a	48		pha		            PHA
.1a4d9b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d9e	5b		tcd		            TCD
.1a4d9f	68		pla		            PLA
.1a4da0	28		plp		            PLP
.1a4da1	e2 20		sep #$20	            SEP #$20
.1a4da3	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4da5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4da9	c2 20		rep #$20	            REP #$20
.1a4dab	29 ff 00	and #$00ff	            AND #$00FF
.1a4dae	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4db1	e2 20		sep #$20	            SEP #$20
.1a4db3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4db6					err_limit
.1a4db6	08		php		            PHP
.1a4db7	c2 20		rep #$20	            REP #$20
.1a4db9	48		pha		            PHA
.1a4dba	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4dbd	5b		tcd		            TCD
.1a4dbe	68		pla		            PLA
.1a4dbf	28		plp		            PLP
.1a4dc0	e2 20		sep #$20	            SEP #$20
.1a4dc2	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4dc4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4dc8	c2 20		rep #$20	            REP #$20
.1a4dca	29 ff 00	and #$00ff	            AND #$00FF
.1a4dcd	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4dd0	e2 20		sep #$20	            SEP #$20
.1a4dd2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4dd5					FN_ABS
.1a4dd5	e2 20		sep #$20	            SEP #$20
.1a4dd7	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4dd9	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4ddc	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4ddf	e2 20		sep #$20	            SEP #$20
.1a4de1	a5 27		lda $0827	                LDA ARGTYPE1        ; Check the type
.1a4de3	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4de5	f0 23		beq $1a4e0a	                BEQ abs_int         ; If integer, get the absolute value of the integer
.1a4de7	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a4de9	f0 3e		beq $1a4e29	                BEQ abs_float       ; If float, get the absolute value of the float
.1a4deb					type_err
.1a4deb	08		php		            PHP
.1a4dec	c2 20		rep #$20	            REP #$20
.1a4dee	48		pha		            PHA
.1a4def	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4df2	5b		tcd		            TCD
.1a4df3	68		pla		            PLA
.1a4df4	28		plp		            PLP
.1a4df5	e2 20		sep #$20	            SEP #$20
.1a4df7	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4df9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4dfd	c2 20		rep #$20	            REP #$20
.1a4dff	29 ff 00	and #$00ff	            AND #$00FF
.1a4e02	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4e05	e2 20		sep #$20	            SEP #$20
.1a4e07	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4e0a					abs_int
.1a4e0a	c2 20		rep #$20	            REP #$20
.1a4e0c	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Is it positive already?
.1a4e0e	10 21		bpl $1a4e31	                BPL done            ; Yes: we don't need to do anythign further
.1a4e10	49 ff ff	eor #$ffff	                EOR #$FFFF          ; Otherwise, take the two's compliment
.1a4e13	85 25		sta $0825	                STA ARGUMENT1+2     ; Of ARGUMENT1
.1a4e15	a5 23		lda $0823	                LDA ARGUMENT1
.1a4e17	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a4e1a	18		clc		                CLC
.1a4e1b	69 01 00	adc #$0001	                ADC #1
.1a4e1e	85 23		sta $0823	                STA ARGUMENT1       ; And save it back to ARGUMENT1
.1a4e20	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4e22	69 00 00	adc #$0000	                ADC #0
.1a4e25	85 25		sta $0825	                STA ARGUMENT1+2
.1a4e27	80 08		bra $1a4e31	                BRA done
.1a4e29					abs_float
.1a4e29	e2 20		sep #$20	            SEP #$20
.1a4e2b	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Just clear the sign bit
.1a4e2d	29 7f		and #$7f	                AND #$7F
.1a4e2f	85 26		sta $0826	                STA ARGUMENT1+3
.1a4e31					done
.1a4e31	e2 20		sep #$20	            SEP #$20
.1a4e33	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4e36	60		rts		            RTS
.1a4e37					FN_SGN
.1a4e37	e2 20		sep #$20	            SEP #$20
.1a4e39	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4e3b	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4e3e	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4e41	e2 20		sep #$20	            SEP #$20
.1a4e43	a5 27		lda $0827	                LDA ARGTYPE1
.1a4e45	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4e47	d0 25		bne $1a4e6e	                BNE type_mismatch
.1a4e49	c2 20		rep #$20	            REP #$20
.1a4e4b	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4e4d	30 12		bmi $1a4e61	                BMI is_negative     ; Negative: return -1
.1a4e4f	d0 04		bne $1a4e55	                BNE is_positive     ; Is it not 0? Then return 1
.1a4e51	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the lower word 0?
.1a4e53	f0 13		beq $1a4e68	                BEQ done            ; Yes: the whole thing is zero: return 0
.1a4e55	a9 00 00	lda #$0000	is_positive     LDA #0              ; It's positive: return 1
.1a4e58	85 25		sta $0825	                STA ARGUMENT1+2
.1a4e5a	a9 01 00	lda #$0001	                LDA #1
.1a4e5d	85 23		sta $0823	                STA ARGUMENT1
.1a4e5f	80 07		bra $1a4e68	                BRA done
.1a4e61	a9 ff ff	lda #$ffff	is_negative     LDA #$FFFF          ; It's negative: return -1
.1a4e64	85 25		sta $0825	                STA ARGUMENT1+2
.1a4e66	85 23		sta $0823	                STA ARGUMENT1
.1a4e68					done
.1a4e68	e2 20		sep #$20	            SEP #$20
.1a4e6a	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4e6d	60		rts		            RTS
.1a4e6e					type_mismatch
.1a4e6e	08		php		            PHP
.1a4e6f	c2 20		rep #$20	            REP #$20
.1a4e71	48		pha		            PHA
.1a4e72	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4e75	5b		tcd		            TCD
.1a4e76	68		pla		            PLA
.1a4e77	28		plp		            PLP
.1a4e78	e2 20		sep #$20	            SEP #$20
.1a4e7a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4e7c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4e80	c2 20		rep #$20	            REP #$20
.1a4e82	29 ff 00	and #$00ff	            AND #$00FF
.1a4e85	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a4e88	e2 20		sep #$20	            SEP #$20
.1a4e8a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4e8d					FN_INT
.1a4e8d	e2 20		sep #$20	            SEP #$20
.1a4e8f	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4e91	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4e94	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4e97	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a4e9a					done
.1a4e9a	e2 20		sep #$20	            SEP #$20
.1a4e9c	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4e9f	60		rts		            RTS
.1a4ea0					FN_SIN
.1a4ea0	e2 20		sep #$20	            SEP #$20
.1a4ea2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ea4	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4ea7	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4eaa	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4ead	20 5e 61	jsr $1a615e	            JSR FP_SIN
.1a4eb0					done
.1a4eb0	e2 20		sep #$20	            SEP #$20
.1a4eb2	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4eb5	60		rts		            RTS
.1a4eb6					FN_COS
.1a4eb6	e2 20		sep #$20	            SEP #$20
.1a4eb8	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4eba	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4ebd	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4ec0	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4ec3	20 8d 61	jsr $1a618d	            JSR FP_COS
.1a4ec6					done
.1a4ec6	e2 20		sep #$20	            SEP #$20
.1a4ec8	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4ecb	60		rts		            RTS
.1a4ecc					FN_TAN
.1a4ecc	e2 20		sep #$20	            SEP #$20
.1a4ece	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ed0	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4ed3	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4ed6	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4ed9	20 bc 61	jsr $1a61bc	            JSR FP_TAN
.1a4edc					done
.1a4edc	e2 20		sep #$20	            SEP #$20
.1a4ede	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4ee1	60		rts		            RTS
.1a4ee2					FN_LN
.1a4ee2	e2 20		sep #$20	            SEP #$20
.1a4ee4	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ee6	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4ee9	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4eec	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4eef	20 ea 61	jsr $1a61ea	            JSR FP_LN
.1a4ef2					done
.1a4ef2	e2 20		sep #$20	            SEP #$20
.1a4ef4	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4ef7	60		rts		            RTS
.1a4ef8					FN_ACOS
.1a4ef8	e2 20		sep #$20	            SEP #$20
.1a4efa	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4efc	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4eff	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4f02	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4f05	20 13 63	jsr $1a6313	            JSR FP_ACOS
.1a4f08					done
.1a4f08	e2 20		sep #$20	            SEP #$20
.1a4f0a	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4f0d	60		rts		            RTS
.1a4f0e					FN_ASIN
.1a4f0e	e2 20		sep #$20	            SEP #$20
.1a4f10	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4f12	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4f15	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4f18	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4f1b	20 e9 62	jsr $1a62e9	            JSR FP_ASIN
.1a4f1e					done
.1a4f1e	e2 20		sep #$20	            SEP #$20
.1a4f20	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4f23	60		rts		            RTS
.1a4f24					FN_ATAN
.1a4f24	e2 20		sep #$20	            SEP #$20
.1a4f26	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4f28	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4f2b	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4f2e	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4f31	20 35 63	jsr $1a6335	            JSR FP_ATAN
.1a4f34					done
.1a4f34	e2 20		sep #$20	            SEP #$20
.1a4f36	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4f39	60		rts		            RTS
.1a4f3a					FN_EXP
.1a4f3a	e2 20		sep #$20	            SEP #$20
.1a4f3c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4f3e	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4f41	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4f44	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4f47	20 c9 63	jsr $1a63c9	            JSR FP_EXP
.1a4f4a					done
.1a4f4a	e2 20		sep #$20	            SEP #$20
.1a4f4c	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4f4f	60		rts		            RTS
.1a4f50					FN_SQR
.1a4f50	e2 20		sep #$20	            SEP #$20
.1a4f52	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4f54	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4f57	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a4f5a	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a4f5d	20 4b 64	jsr $1a644b	            JSR FP_SQR
.1a4f60					done
.1a4f60	e2 20		sep #$20	            SEP #$20
.1a4f62	20 da 20	jsr $1a20da	            JSR INCBIP
.1a4f65	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\commands.s

.1a4f66	00		brk #		CMD_MONITOR     BRK
.1a4f67	ea		nop		                NOP
.1a4f68	60		rts		            RTS
.1a4f69					CMD_NEW
.1a4f69	08		php		                PHP
.1a4f6a	0b		phd		                PHD
.1a4f6b	08		php		            PHP
.1a4f6c	c2 20		rep #$20	            REP #$20
.1a4f6e	48		pha		            PHA
.1a4f6f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a4f72	5b		tcd		            TCD
.1a4f73	68		pla		            PLA
.1a4f74	28		plp		            PLP
.1a4f75	c2 30		rep #$30	            REP #$30
.1a4f77	c2 20		rep #$20	            REP #$20
.1a4f79	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a4f7c	85 d9		sta $08d9	            STA LASTLINE
.1a4f7e	e2 20		sep #$20	            SEP #$20
.1a4f80	a9 16		lda #$16	            LDA #`BASIC_BOT
.1a4f82	85 db		sta $08db	            STA LASTLINE+2
.1a4f84	c2 30		rep #$30	            REP #$30
.1a4f86	a9 00 00	lda #$0000	                LDA #0
.1a4f89	a0 00 00	ldy #$0000	                LDY #LINE_LINK
.1a4f8c	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a4f8e	a0 02 00	ldy #$0002	                LDY #LINE_NUMBER
.1a4f91	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a4f93	a0 04 00	ldy #$0004	                LDY #LINE_TOKENS
.1a4f96	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a4f98	20 b0 20	jsr $1a20b0	            JSR CLRINTERP
.1a4f9b	2b		pld		                PLD
.1a4f9c	28		plp		                PLP
.1a4f9d	60		rts		            RTS
.1a4f9e					CMD_RUN
.1a4f9e	8b		phb		                PHB
.1a4f9f	08		php		                PHP
.1a4fa0	c2 20		rep #$20	            REP #$20
.1a4fa2	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT            ; Point to the first line of the program
.1a4fa5	85 1a		sta $081a	                STA CURLINE
.1a4fa7	a9 16 00	lda #$0016	                LDA #`BASIC_BOT
.1a4faa	85 1c		sta $081c	                STA CURLINE + 2
.1a4fac	20 b0 20	jsr $1a20b0	            JSR CLRINTERP
.1a4faf	20 90 23	jsr $1a2390	            JSR EXECPROGRAM
.1a4fb2	28		plp		                PLP
.1a4fb3	ab		plb		                PLB
.1a4fb4	60		rts		            RTS
.1a4fb5					CMD_LIST
.1a4fb5	08		php		                PHP
.1a4fb6	c2 20		rep #$20	            REP #$20
.1a4fb8	64 55		stz $0855	                STZ MARG1               ; MARG1 is starting line number, default 0
.1a4fba	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.1a4fbd	85 59		sta $0859	                STA MARG2               ; MARG2 is ending line number, default MAXINT
.1a4fbf	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a4fc2	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a4fc5	29 ff 00	and #$00ff	                AND #$00FF
.1a4fc8	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.1a4fcb	f0 2c		beq $1a4ff9	                BEQ call_list           ; ... just list with the defaults
.1a4fcd	c9 81 00	cmp #$0081	                CMP #TOK_MINUS          ; If just "- ###"...
.1a4fd0	f0 1a		beq $1a4fec	                BEQ parse_endline       ; ... try to parse the end line number
.1a4fd2	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a4fd5	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a4fd8	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG1
.1a4fda	85 55		sta $0855	                STA MARG1
.1a4fdc	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a4fdf	29 ff 00	and #$00ff	                AND #$00FF
.1a4fe2	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.1a4fe5	f0 12		beq $1a4ff9	                BEQ call_list           ; ... just list with the defaults
.1a4fe7	c9 81 00	cmp #$0081	                CMP #TOK_MINUS
.1a4fea	d0 2a		bne $1a5016	                BNE error               ; At this point, if not '-', it's a syntax error
.1a4fec					parse_endline
.1a4fec	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a4fef	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a4ff2	20 9d 08	jsr $1a089d	            JSR PARSEINT
.1a4ff5	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG2
.1a4ff7	85 59		sta $0859	                STA MARG2
.1a4ff9	a5 1c		lda $081c	call_list       LDA CURLINE+2           ; Save CURLINE
.1a4ffb	48		pha		                PHA
.1a4ffc	a5 1a		lda $081a	                LDA CURLINE
.1a4ffe	48		pha		                PHA
.1a4fff	a5 02		lda $0802	                LDA BIP+2               ; Save BIP
.1a5001	48		pha		                PHA
.1a5002	a5 00		lda $0800	                LDA BIP
.1a5004	48		pha		                PHA
.1a5005	20 48 18	jsr $1a1848	            JSR LISTPROG
.1a5008	68		pla		                PLA
.1a5009	85 00		sta $0800	                STA BIP
.1a500b	68		pla		                PLA
.1a500c	85 02		sta $0802	                STA BIP+2
.1a500e	68		pla		                PLA
.1a500f	85 1a		sta $081a	                STA CURLINE
.1a5011	68		pla		                PLA
.1a5012	85 1c		sta $081c	                STA CURLINE+2
.1a5014	28		plp		                PLP
.1a5015	60		rts		            RTS
.1a5016					error
.1a5016	08		php		            PHP
.1a5017	c2 20		rep #$20	            REP #$20
.1a5019	48		pha		            PHA
.1a501a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a501d	5b		tcd		            TCD
.1a501e	68		pla		            PLA
.1a501f	28		plp		            PLP
.1a5020	e2 20		sep #$20	            SEP #$20
.1a5022	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a5024	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5028	c2 20		rep #$20	            REP #$20
.1a502a	29 ff 00	and #$00ff	            AND #$00FF
.1a502d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a5030	e2 20		sep #$20	            SEP #$20
.1a5032	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\variables.s

>08e1					NEXTVAR         .long ?         ; Pointer to the the next available byte for variable bindings
>08e4					VARIABLES       .long ?         ; Pointer to the most recently allocated variable
>08e7					TOFIND          .long ?         ; Pointer to the variable name to find
>08ea					TOFINDTYPE      .byte ?         ; The type to find
.0000					BINDING
>0000					TYPE            .fill 1                 ; The type of the data stored in the variable
>0001					NAME            .fill VAR_NAME_SIZE     ; The name of the variable
>0009					VALUE           .fill 4                 ; The data stored in the variable
>000d					NEXT            .fill 3                 ; The pointer to the next allocated variable of this type
.1a5035					INITVARS
.1a5035	08		php		                PHP
.1a5036	08		php		            PHP
.1a5037	c2 20		rep #$20	            REP #$20
.1a5039	48		pha		            PHA
.1a503a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a503d	5b		tcd		            TCD
.1a503e	68		pla		            PLA
.1a503f	28		plp		            PLP
.1a5040	c2 20		rep #$20	            REP #$20
.1a5042	64 e4		stz $08e4	                STZ VARIABLES           ; Clear the pointer to the variables
.1a5044	64 e7		stz $08e7	                STZ TOFIND
.1a5046	e2 20		sep #$20	            SEP #$20
.1a5048	64 e6		stz $08e6	                STZ VARIABLES+2
.1a504a	64 e9		stz $08e9	                STZ TOFIND+2
.1a504c	64 ea		stz $08ea	                STZ TOFINDTYPE
.1a504e	c2 20		rep #$20	            REP #$20
.1a5050	38		sec		                SEC                     ; Compute the position of the first variable
.1a5051	a5 d9		lda $08d9	                LDA LASTLINE
.1a5053	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.1a5056	85 e1		sta $08e1	                STA NEXTVAR
.1a5058	e2 20		sep #$20	            SEP #$20
.1a505a	a5 db		lda $08db	                LDA LASTLINE+2
.1a505c	69 00		adc #$00	                ADC #0
.1a505e	85 e3		sta $08e3	                STA NEXTVAR+2
.1a5060	28		plp		                PLP
.1a5061	60		rts		            RTS
.1a5062					ISVARCHAR
.1a5062	c9 5f		cmp #$5f	                CMP #'_'            ; Check if it's an underscore
.1a5064	f0 1a		beq $1a5080	                BEQ return_true     ; Yes: return true
.1a5066	c9 3a		cmp #$3a	                CMP #'9'+1          ; Check if its in [0-9]
.1a5068	b0 04		bcs $1a506e	                BGE else1           ; No: check something else
.1a506a	c9 30		cmp #$30	                CMP #'0'
.1a506c	b0 12		bcs $1a5080	                BGE return_true     ; Yes: return true
.1a506e	c9 5b		cmp #$5b	else1           CMP #'Z'+1          ; Check if its in [A-Z]
.1a5070	b0 04		bcs $1a5076	                BGE not_upper       ; No: check lower case
.1a5072	c9 41		cmp #$41	                CMP #'A'
.1a5074	b0 0a		bcs $1a5080	                BGE return_true     ; Yes: return true
.1a5076	c9 7b		cmp #$7b	not_upper       CMP #'z'+1          ; Check if its in [a-z]
.1a5078	b0 04		bcs $1a507e	                BGE return_false    ; No: return false
.1a507a	c9 61		cmp #$61	                CMP #'a'
.1a507c	b0 02		bcs $1a5080	                BGE return_true     ; Yes: return true
.1a507e	18		clc		return_false    CLC
.1a507f	60		rts		            RTS
.1a5080	38		sec		return_true     SEC
.1a5081	60		rts		            RTS
.1a5082					VARNAMECMP
.1a5082	08		php		                PHP
.1a5083	e2 20		sep #$20	            SEP #$20
.1a5085	c2 10		rep #$10	            REP #$10
.1a5087	a0 00 00	ldy #$0000	                LDY #0
.1a508a	b7 0c		lda [$080c],y	cmp_loop        LDA [SCRATCH],Y         ; Check the character in the variable name
.1a508c	f0 0a		beq $1a5098	                BEQ is_end
.1a508e	d7 e7		cmp [$08e7],y	                CMP [TOFIND],Y          ; Compare the character to the one TOFIND
.1a5090	d0 13		bne $1a50a5	                BNE return_false        ; Not equal? Then this is not a match
.1a5092	c8		iny		                INY
.1a5093	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a5096	d0 f2		bne $1a508a	                BNE cmp_loop
.1a5098	b7 e7		lda [$08e7],y	is_end          LDA [TOFIND],Y          ; Check the character in the name to find
.1a509a	20 1b 05	jsr $1a051b	            JSR TOUPPERA
.1a509d	20 62 50	jsr $1a5062	            JSR ISVARCHAR
.1a50a0	b0 03		bcs $1a50a5	                BCS return_false        ; YES: we do not have a match
.1a50a2					return_true
.1a50a2	28		plp		                PLP
.1a50a3	38		sec		                SEC
.1a50a4	60		rts		            RTS
.1a50a5					return_false
.1a50a5	28		plp		                PLP
.1a50a6	18		clc		                CLC
.1a50a7	60		rts		            RTS
.1a50a8					VAR_FIND
.1a50a8	08		php		                PHP
.1a50a9	e2 20		sep #$20	            SEP #$20
.1a50ab	c2 10		rep #$10	            REP #$10
.1a50ad	a0 00 00	ldy #$0000	                LDY #0
.1a50b0	a2 00 00	ldx #$0000	                LDX #0
.1a50b3	b7 e7		lda [$08e7],y	upper_loop      LDA [TOFIND],Y          ; Get a character
.1a50b5	f0 0b		beq $1a50c2	                BEQ done_upper
.1a50b7	20 1b 05	jsr $1a051b	            JSR TOUPPERA
.1a50ba	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; And save it to the temp
.1a50be	c8		iny		                INY
.1a50bf	e8		inx		                INX
.1a50c0	80 f1		bra $1a50b3	                BRA upper_loop          ; Go back for another
.1a50c2	a9 00		lda #$00	done_upper      LDA #0
.1a50c4	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; NULL terminate the temporary string
.1a50c8	c2 20		rep #$20	            REP #$20
.1a50ca	a9 00 4e	lda #$4e00	                LDA #<>TEMPBUF          ; Make the temporary string the string
.1a50cd	85 e7		sta $08e7	                STA TOFIND              ; the variable name to find
.1a50cf	e2 20		sep #$20	            SEP #$20
.1a50d1	a9 00		lda #$00	                LDA #`TEMPBUF
.1a50d3	85 e9		sta $08e9	                STA TOFIND+2
.1a50d5	c2 20		rep #$20	            REP #$20
.1a50d7	a5 e4		lda $08e4	                LDA VARIABLES           ; Point INDEX to the first variable to check
.1a50d9	85 08		sta $0808	                STA INDEX
.1a50db	d0 06		bne $1a50e3	                BNE set_index_h         ; If the low word is not 0, copy the high byte
.1a50dd	e2 20		sep #$20	            SEP #$20
.1a50df	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a50e1	f0 4d		beq $1a5130	                BEQ not_found           ; If it is, we have no variables yet.
.1a50e3					set_index_h
.1a50e3	e2 20		sep #$20	            SEP #$20
.1a50e5	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a50e7	85 0a		sta $080a	                STA INDEX+2
.1a50e9	a5 ea		lda $08ea	check_binding   LDA TOFINDTYPE
.1a50eb	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Get the type of the variable
.1a50ee	d7 08		cmp [$0808],y	                CMP [INDEX],Y
.1a50f0	d0 17		bne $1a5109	                BNE check_next          ; If it's not a match, check the next binding
.1a50f2	c2 20		rep #$20	            REP #$20
.1a50f4	18		clc		                CLC
.1a50f5	a5 08		lda $0808	                LDA INDEX
.1a50f7	69 01 00	adc #$0001	                ADC #BINDING.NAME
.1a50fa	85 0c		sta $080c	                STA SCRATCH
.1a50fc	e2 20		sep #$20	            SEP #$20
.1a50fe	a5 0a		lda $080a	                LDA INDEX+2
.1a5100	69 00		adc #$00	                ADC #0
.1a5102	85 0e		sta $080e	                STA SCRATCH+2
.1a5104	20 82 50	jsr $1a5082	            JSR VARNAMECMP
.1a5107	b0 2a		bcs $1a5133	                BCS found               ; If they match, return that we've found the variable
.1a5109	a0 0d 00	ldy #$000d	check_next      LDY #BINDING.NEXT       ; SCRATCH := [INDEX].NEXT
.1a510c	c2 20		rep #$20	            REP #$20
.1a510e	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5110	85 0c		sta $080c	                STA SCRATCH
.1a5112	c8		iny		                INY
.1a5113	c8		iny		                INY
.1a5114	e2 20		sep #$20	            SEP #$20
.1a5116	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5118	85 0e		sta $080e	                STA SCRATCH+2
.1a511a	d0 06		bne $1a5122	                BNE set_index           ; If SCRATCH == 0, the variable wasn't found
.1a511c	c2 20		rep #$20	            REP #$20
.1a511e	a5 0c		lda $080c	                LDA SCRATCH
.1a5120	f0 0e		beq $1a5130	                BEQ not_found
.1a5122					set_index
.1a5122	c2 20		rep #$20	            REP #$20
.1a5124	a5 0c		lda $080c	                LDA SCRATCH
.1a5126	85 08		sta $0808	                STA INDEX
.1a5128	e2 20		sep #$20	            SEP #$20
.1a512a	a5 0e		lda $080e	                LDA SCRATCH+2
.1a512c	85 0a		sta $080a	                STA INDEX+2
.1a512e	80 b9		bra $1a50e9	                BRA check_binding       ; And check this next variable for a match
.1a5130					not_found
.1a5130	28		plp		                PLP
.1a5131	18		clc		                CLC
.1a5132	60		rts		            RTS
.1a5133					found
.1a5133	28		plp		                PLP
.1a5134	38		sec		                SEC
.1a5135	60		rts		            RTS
.1a5136					VAR_REF
.1a5136	08		php		                PHP
.1a5137	20 a8 50	jsr $1a50a8	            JSR VAR_FIND
.1a513a	b0 1f		bcs $1a515b	                BCS found
.1a513c	08		php		            PHP
.1a513d	c2 20		rep #$20	            REP #$20
.1a513f	48		pha		            PHA
.1a5140	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5143	5b		tcd		            TCD
.1a5144	68		pla		            PLA
.1a5145	28		plp		            PLP
.1a5146	e2 20		sep #$20	            SEP #$20
.1a5148	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a514a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a514e	c2 20		rep #$20	            REP #$20
.1a5150	29 ff 00	and #$00ff	            AND #$00FF
.1a5153	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a5156	e2 20		sep #$20	            SEP #$20
.1a5158	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a515b					found
.1a515b	c2 30		rep #$30	            REP #$30
.1a515d	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a5160	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5162	85 23		sta $0823	                STA ARGUMENT1
.1a5164	c8		iny		                INY
.1a5165	c8		iny		                INY
.1a5166	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5168	85 25		sta $0825	                STA ARGUMENT1+2
.1a516a	e2 20		sep #$20	            SEP #$20
.1a516c	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE
.1a516f	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5171	85 27		sta $0827	                STA ARGTYPE1
.1a5173	28		plp		done            PLP
.1a5174	60		rts		            RTS
.1a5175					VAR_ALLOC
.1a5175	08		php		                PHP
.1a5176	c2 20		rep #$20	            REP #$20
.1a5178	18		clc		                CLC                     ; Compute extent of the binding
.1a5179	a5 e1		lda $08e1	                LDA NEXTVAR
.1a517b	69 10 00	adc #$0010	                ADC #size(BINDING)
.1a517e	85 08		sta $0808	                STA INDEX
.1a5180	e2 20		sep #$20	            SEP #$20
.1a5182	a5 e3		lda $08e3	                LDA NEXTVAR+2
.1a5184	69 00		adc #$00	                ADC #0
.1a5186	85 0a		sta $080a	                STA INDEX+2
.1a5188	c5 bc		cmp $08bc	                CMP HEAP+2              ; Check to see if HEAP > INDEX
.1a518a	90 27		bcc $1a51b3	                BLT has_room
.1a518c	c2 20		rep #$20	            REP #$20
.1a518e	a5 08		lda $0808	                LDA INDEX
.1a5190	c5 ba		cmp $08ba	                CMP HEAP
.1a5192	90 1f		bcc $1a51b3	                BLT has_room
.1a5194	08		php		            PHP
.1a5195	c2 20		rep #$20	            REP #$20
.1a5197	48		pha		            PHA
.1a5198	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a519b	5b		tcd		            TCD
.1a519c	68		pla		            PLA
.1a519d	28		plp		            PLP
.1a519e	e2 20		sep #$20	            SEP #$20
.1a51a0	a9 09		lda #$09	            LDA #ERR_RANGE
.1a51a2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a51a6	c2 20		rep #$20	            REP #$20
.1a51a8	29 ff 00	and #$00ff	            AND #$00FF
.1a51ab	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a51ae	e2 20		sep #$20	            SEP #$20
.1a51b0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a51b3					has_room
.1a51b3	c2 20		rep #$20	            REP #$20
.1a51b5	a5 e1		lda $08e1	                LDA NEXTVAR             ; Yes: we can allocate the variable
.1a51b7	85 c0		sta $08c0	                STA CURRBLOCK           ; Point CURRBLOCK to it
.1a51b9	e2 20		sep #$20	            SEP #$20
.1a51bb	a5 e3		lda $08e3	                LDA NEXTVAR+2
.1a51bd	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a51bf	c2 20		rep #$20	            REP #$20
.1a51c1	a5 08		lda $0808	                LDA INDEX               ; And point NEXTVAR to the next possible spot
.1a51c3	85 e1		sta $08e1	                STA NEXTVAR
.1a51c5	e2 20		sep #$20	            SEP #$20
.1a51c7	a5 0a		lda $080a	                LDA INDEX+2
.1a51c9	85 e3		sta $08e3	                STA NEXTVAR+2
.1a51cb	28		plp		                PLP
.1a51cc	60		rts		            RTS
.1a51cd					VAR_CREATE
.1a51cd	08		php		                PHP
.1a51ce	e2 20		sep #$20	            SEP #$20
.1a51d0	a5 27		lda $0827	                LDA ARGTYPE1            ; Validate that our types match
.1a51d2	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.1a51d4	f0 33		beq $1a5209	                BEQ chk_string          ; If so: check to see if it's a string
.1a51d6	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable type
.1a51d8	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's INTEGER
.1a51da	d0 05		bne $1a51e1	                BNE chk_float
.1a51dc	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a51df	80 2f		bra $1a5210	                BRA alloc_binding       ; And bind the variable
.1a51e1	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; If it's FLOAT
.1a51e3	d0 05		bne $1a51ea	                BNE type_error
.1a51e5	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a51e8	80 26		bra $1a5210	                BRA alloc_binding       ; And bind the variable
.1a51ea					type_error
.1a51ea	08		php		            PHP
.1a51eb	c2 20		rep #$20	            REP #$20
.1a51ed	48		pha		            PHA
.1a51ee	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a51f1	5b		tcd		            TCD
.1a51f2	68		pla		            PLA
.1a51f3	28		plp		            PLP
.1a51f4	e2 20		sep #$20	            SEP #$20
.1a51f6	a9 04		lda #$04	            LDA #ERR_TYPE
.1a51f8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a51fc	c2 20		rep #$20	            REP #$20
.1a51fe	29 ff 00	and #$00ff	            AND #$00FF
.1a5201	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a5204	e2 20		sep #$20	            SEP #$20
.1a5206	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5209	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING        ; Is it a string?
.1a520b	d0 03		bne $1a5210	                BNE alloc_binding       ; No: just go ahead and bind it
.1a520d	20 b0 16	jsr $1a16b0	            JSR STRCPY
.1a5210					alloc_binding
.1a5210	c2 10		rep #$10	            REP #$10
.1a5212	20 75 51	jsr $1a5175	            JSR VAR_ALLOC
.1a5215	c2 30		rep #$30	            REP #$30
.1a5217	18		clc		                CLC
.1a5218	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a521a	69 01 00	adc #$0001	                ADC #BINDING.NAME
.1a521d	85 08		sta $0808	                STA INDEX
.1a521f	e2 20		sep #$20	            SEP #$20
.1a5221	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a5223	69 00		adc #$00	                ADC #0
.1a5225	85 0a		sta $080a	                STA INDEX+2
.1a5227	a0 00 00	ldy #$0000	                LDY #0                  ; Ensure that the name field is blank
.1a522a	a9 00		lda #$00	                LDA #0
.1a522c	97 08		sta [$0808],y	blank_loop      STA [INDEX],Y
.1a522e	c8		iny		                INY
.1a522f	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a5232	d0 f8		bne $1a522c	                BNE blank_loop
.1a5234	a0 00 00	ldy #$0000	                LDY #0
.1a5237	b7 e7		lda [$08e7],y	name_loop       LDA [TOFIND],Y          ; Copy TOFIND to the NAME field
.1a5239	f0 10		beq $1a524b	                BEQ set_type
.1a523b	20 1b 05	jsr $1a051b	            JSR TOUPPERA
.1a523e	20 62 50	jsr $1a5062	            JSR ISVARCHAR
.1a5241	90 08		bcc $1a524b	                BCC set_type
.1a5243	97 08		sta [$0808],y	                STA [INDEX],Y
.1a5245	c8		iny		                INY
.1a5246	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a5249	d0 ec		bne $1a5237	                BNE name_loop
.1a524b					set_type
.1a524b	c2 20		rep #$20	            REP #$20
.1a524d	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE      ; Copy the value to the variable
.1a5250	a5 23		lda $0823	                LDA ARGUMENT1
.1a5252	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5254	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5256	c8		iny		                INY
.1a5257	c8		iny		                INY
.1a5258	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a525a	a5 e4		lda $08e4	                LDA VARIABLES           ; Point NEXT to the current top of variables
.1a525c	a0 0d 00	ldy #$000d	                LDY #BINDING.NEXT
.1a525f	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5261	c8		iny		                INY
.1a5262	c8		iny		                INY
.1a5263	e2 20		sep #$20	            SEP #$20
.1a5265	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a5267	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5269	c2 20		rep #$20	            REP #$20
.1a526b	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a526d	85 e4		sta $08e4	                STA VARIABLES
.1a526f	e2 20		sep #$20	            SEP #$20
.1a5271	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a5273	85 e6		sta $08e6	                STA VARIABLES+2
.1a5275	e2 20		sep #$20	            SEP #$20
.1a5277	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Set the type of the variable
.1a527a	a5 27		lda $0827	                LDA ARGTYPE1
.1a527c	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a527e	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is it a string?
.1a5280	f0 02		beq $1a5284	                BEQ set_ref             ; Yes: add a reference count to it
.1a5282	28		plp		done            PLP
.1a5283	60		rts		            RTS
.1a5284					set_ref
.1a5284	c2 20		rep #$20	            REP #$20
.1a5286	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the a heap allocated value
.1a5288	85 c0		sta $08c0	                STA CURRBLOCK
.1a528a	e2 20		sep #$20	            SEP #$20
.1a528c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a528e	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a5290	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a5293	20 e1 12	jsr $1a12e1	            JSR HEAP_ADDREF
.1a5296	80 ea		bra $1a5282	                BRA done
.1a5298					VAR_SET
.1a5298	08		php		                PHP
.1a5299	c2 30		rep #$30	            REP #$30
.1a529b	a5 e4		lda $08e4	                LDA VARIABLES          ; If VARIABLES = 0, use VAR_CREATE
.1a529d	d0 06		bne $1a52a5	                BNE use_find
.1a529f	e2 20		sep #$20	            SEP #$20
.1a52a1	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a52a3	f0 05		beq $1a52aa	                BEQ use_create
.1a52a5					use_find
.1a52a5	20 a8 50	jsr $1a50a8	            JSR VAR_FIND
.1a52a8	b0 05		bcs $1a52af	                BCS found
.1a52aa					use_create
.1a52aa	20 cd 51	jsr $1a51cd	            JSR VAR_CREATE
.1a52ad	80 4e		bra $1a52fd	                BRA done
.1a52af					found
.1a52af	e2 20		sep #$20	            SEP #$20
.1a52b1	a5 27		lda $0827	                LDA ARGTYPE1            ; Do the types match?
.1a52b3	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.1a52b5	f0 33		beq $1a52ea	                BEQ chk_string          ; Yes: check to see if it's string
.1a52b7	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable
.1a52b9	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; Is it INTEGER?
.1a52bb	d0 05		bne $1a52c2	                BNE chk_float
.1a52bd	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a52c0	80 2c		bra $1a52ee	                BRA set_val
.1a52c2	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; Is it FLOAT?
.1a52c4	d0 05		bne $1a52cb	                BNE type_error          ; No: throw an error
.1a52c6	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a52c9	80 23		bra $1a52ee	                BRA set_val
.1a52cb					type_error
.1a52cb	08		php		            PHP
.1a52cc	c2 20		rep #$20	            REP #$20
.1a52ce	48		pha		            PHA
.1a52cf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a52d2	5b		tcd		            TCD
.1a52d3	68		pla		            PLA
.1a52d4	28		plp		            PLP
.1a52d5	e2 20		sep #$20	            SEP #$20
.1a52d7	a9 04		lda #$04	            LDA #ERR_TYPE
.1a52d9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a52dd	c2 20		rep #$20	            REP #$20
.1a52df	29 ff 00	and #$00ff	            AND #$00FF
.1a52e2	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a52e5	e2 20		sep #$20	            SEP #$20
.1a52e7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a52ea	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING
.1a52ec	f0 11		beq $1a52ff	                BEQ set_string          ; Yes: set the string value of the variable
.1a52ee					set_val
.1a52ee	c2 30		rep #$30	            REP #$30
.1a52f0	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a52f3	a5 23		lda $0823	                LDA ARGUMENT1
.1a52f5	97 08		sta [$0808],y	                STA [INDEX],Y
.1a52f7	c8		iny		                INY
.1a52f8	c8		iny		                INY
.1a52f9	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a52fb	97 08		sta [$0808],y	                STA [INDEX],Y
.1a52fd					done
.1a52fd	28		plp		                PLP
.1a52fe	60		rts		            RTS
.1a52ff					set_string
.1a52ff	20 b0 16	jsr $1a16b0	            JSR STRCPY
.1a5302	a0 09 00	ldy #$0009	set_ref         LDY #BINDING.VALUE      ; Set CURRBLOCK to the current string value
.1a5305	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5307	85 c0		sta $08c0	                STA CURRBLOCK
.1a5309	c8		iny		                INY
.1a530a	c8		iny		                INY
.1a530b	e2 20		sep #$20	            SEP #$20
.1a530d	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a530f	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a5311	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a5314	20 00 13	jsr $1a1300	            JSR HEAP_REMREF
.1a5317	e2 20		sep #$20	            SEP #$20
.1a5319	a5 27		lda $0827	                LDA ARGTYPE1
.1a531b	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is the new value a string?
.1a531d	f0 02		beq $1a5321	                BEQ add_ref             ; Yes: add a reference to it
.1a531f	80 cd		bra $1a52ee	                BRA set_val             ; No: go back to set the value... this probably shouldn't happen
.1a5321					add_ref
.1a5321	c2 20		rep #$20	            REP #$20
.1a5323	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the new string value
.1a5325	85 c0		sta $08c0	                STA CURRBLOCK
.1a5327	e2 20		sep #$20	            SEP #$20
.1a5329	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a532b	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a532d	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a5330	20 e1 12	jsr $1a12e1	            JSR HEAP_ADDREF
.1a5333	80 b9		bra $1a52ee	                BRA set_val
.1a5335					VAR_FINDNAME
.1a5335	08		php		                PHP
.1a5336	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a5339	e2 20		sep #$20	            SEP #$20
.1a533b	a7 00		lda [$0800]	                LDA [BIP]           ; Get the first character
.1a533d	20 a7 04	jsr $1a04a7	            JSR ISALPHA
.1a5340	90 42		bcc $1a5384	                BCC not_found
.1a5342	c2 20		rep #$20	            REP #$20
.1a5344	a5 00		lda $0800	                LDA BIP
.1a5346	85 e7		sta $08e7	                STA TOFIND
.1a5348	e2 20		sep #$20	            SEP #$20
.1a534a	a5 02		lda $0802	                LDA BIP+2
.1a534c	85 e9		sta $08e9	                STA TOFIND+2
.1a534e					loop
.1a534e	20 da 20	jsr $1a20da	            JSR INCBIP
.1a5351	a7 00		lda [$0800]	                LDA [BIP]
.1a5353	f0 0d		beq $1a5362	                BEQ is_float        ; If it's EOL, the variable is a float
.1a5355	c9 24		cmp #$24	                CMP #'$'            ; If it's $, the variable is a string
.1a5357	f0 14		beq $1a536d	                BEQ is_string
.1a5359	c9 25		cmp #$25	                CMP #'%'            ; If it's %, the variable is an integer
.1a535b	f0 09		beq $1a5366	                BEQ is_integer
.1a535d	20 62 50	jsr $1a5062	            JSR ISVARCHAR
.1a5360	b0 ec		bcs $1a534e	                BCS loop            ; Check the next one
.1a5362	a9 01		lda #$01	is_float        LDA #TYPE_FLOAT     ; Otherwise it's a float
.1a5364	80 0c		bra $1a5372	                BRA set_type
.1a5366					is_integer
.1a5366	20 da 20	jsr $1a20da	            JSR INCBIP
.1a5369	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a536b	80 05		bra $1a5372	                BRA set_type
.1a536d					is_string
.1a536d	20 da 20	jsr $1a20da	            JSR INCBIP
.1a5370	a9 02		lda #$02	                LDA #TYPE_STRING
.1a5372	85 ea		sta $08ea	set_type        STA TOFINDTYPE
.1a5374	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a5377	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it "("?
.1a5379	d0 06		bne $1a5381	                BNE done            ; No: we're done... it's just a scalar variable
.1a537b	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Yes: this is an array reference
.1a537d	09 80		ora #$80	                ORA #$80            ; ... turn on the "Array of..." bit
.1a537f	85 ea		sta $08ea	                STA TOFINDTYPE
.1a5381					done
.1a5381	28		plp		                PLP
.1a5382	38		sec		                SEC
.1a5383	60		rts		            RTS
.1a5384	28		plp		not_found       PLP
.1a5385	18		clc		                CLC
.1a5386	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\integers.s

.1a5387					OP_INT_ADD
.1a5387	08		php		            PHP
.1a5388	c2 20		rep #$20	            REP #$20
.1a538a	18		clc		            CLC
.1a538b	a5 23		lda $0823	            LDA ARGUMENT1
.1a538d	65 29		adc $0829	            ADC ARGUMENT2
.1a538f	85 23		sta $0823	            STA ARGUMENT1
.1a5391	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5393	65 2b		adc $082b	            ADC ARGUMENT2+2
.1a5395	85 25		sta $0825	            STA ARGUMENT1+2
.1a5397	28		plp		            PLP
.1a5398	60		rts		            RTS
.1a5399					OP_INT_SUB
.1a5399	08		php		            PHP
.1a539a	c2 20		rep #$20	            REP #$20
.1a539c	38		sec		            SEC
.1a539d	a5 23		lda $0823	            LDA ARGUMENT1
.1a539f	e5 29		sbc $0829	            SBC ARGUMENT2
.1a53a1	85 23		sta $0823	            STA ARGUMENT1
.1a53a3	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a53a5	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a53a7	85 25		sta $0825	            STA ARGUMENT1+2
.1a53a9	28		plp		            PLP
.1a53aa	60		rts		            RTS
.1a53ab					OP_INT_MUL
.1a53ab	08		php		            PHP
.1a53ac					locals
>0001					L_SIGN      .word ?
>0003					L_RESULT    .dword ?
>0007					            .dword ?
.1a53ac	c2 20		rep #$20	            REP #$20
.1a53ae	3b		tsc		            TSC
.1a53af	38		sec		            SEC
.1a53b0	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.1a53b3	1b		tcs		            TCS
.1a53b4	c2 30		rep #$30	            REP #$30
.1a53b6	a9 00 00	lda #$0000	            LDA #0                  ; Start by assuming positive numbers
.1a53b9	83 01		sta $01,s	            STA L_SIGN
.1a53bb	83 03		sta $03,s	            STA L_RESULT            ; Clear result
.1a53bd	83 05		sta $05,s	            STA L_RESULT+2
.1a53bf	83 07		sta $07,s	            STA L_RESULT+4
.1a53c1	83 09		sta $09,s	            STA L_RESULT+6
.1a53c3	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Ensure ARGUMENT1 is positive
.1a53c5	10 18		bpl $1a53df	            BPL chk_sign2
.1a53c7	a9 00 80	lda #$8000	            LDA #$8000              ; Record that ARGUMENT1 is negative
.1a53ca	83 01		sta $01,s	            STA L_SIGN
.1a53cc	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Take the two's complement of ARGUMENT1
.1a53ce	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a53d1	85 25		sta $0825	            STA ARGUMENT1+2
.1a53d3	a5 23		lda $0823	            LDA ARGUMENT1
.1a53d5	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a53d8	1a		inc a		            INC A
.1a53d9	85 23		sta $0823	            STA ARGUMENT1
.1a53db	d0 02		bne $1a53df	            BNE chk_sign2
.1a53dd	e6 25		inc $0825	            INC ARGUMENT1+2
.1a53df	a5 2b		lda $082b	chk_sign2   LDA ARGUMENT2+2         ; Ensure ARGUMENT2 is positive
.1a53e1	10 1a		bpl $1a53fd	            BPL chk_over
.1a53e3	a3 01		lda $01,s	            LDA L_SIGN              ; Flip the sign
.1a53e5	49 00 80	eor #$8000	            EOR #$8000
.1a53e8	83 01		sta $01,s	            STA L_SIGN
.1a53ea	a5 2b		lda $082b	            LDA ARGUMENT2+2         ; Take the two's complement of ARGUMENT2
.1a53ec	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a53ef	85 2b		sta $082b	            STA ARGUMENT2+2
.1a53f1	a5 29		lda $0829	            LDA ARGUMENT2
.1a53f3	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a53f6	1a		inc a		            INC A
.1a53f7	85 29		sta $0829	            STA ARGUMENT2
.1a53f9	d0 02		bne $1a53fd	            BNE chk_over
.1a53fb	e6 2b		inc $082b	            INC ARGUMENT2+2
.1a53fd					chk_over
.1a53fd	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a53ff	f0 04		beq $1a5405	            BEQ do_mult
.1a5401	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a5403	d0 5a		bne $1a545f	            BNE overflow
.1a5405					do_mult
.1a5405	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*D
.1a5407	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a540b	a5 29		lda $0829	            LDA ARGUMENT2
.1a540d	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a5411	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a5415	83 03		sta $03,s	            STA L_RESULT
.1a5417	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a541b	83 05		sta $05,s	            STA L_RESULT+2
.1a541d	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Calculate A*D << 16 + B*D
.1a541f	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a5423	a5 29		lda $0829	            LDA ARGUMENT2
.1a5425	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a5429	18		clc		            CLC
.1a542a	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a542e	63 05		adc $05,s	            ADC L_RESULT+2
.1a5430	83 05		sta $05,s	            STA L_RESULT+2
.1a5432	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a5436	63 07		adc $07,s	            ADC L_RESULT+4
.1a5438	83 07		sta $07,s	            STA L_RESULT+4
.1a543a	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*C << 16 + A*D << 16 + B*D
.1a543c	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a5440	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a5442	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a5446	18		clc		            CLC
.1a5447	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a544b	63 05		adc $05,s	            ADC L_RESULT+2
.1a544d	83 05		sta $05,s	            STA L_RESULT+2
.1a544f	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a5453	63 07		adc $07,s	            ADC L_RESULT+4
.1a5455	83 07		sta $07,s	            STA L_RESULT+4
.1a5457	a3 07		lda $07,s	            LDA L_RESULT+4
.1a5459	f0 23		beq $1a547e	            BEQ no_overflow
.1a545b	a3 09		lda $09,s	            LDA L_RESULT+6
.1a545d	f0 1f		beq $1a547e	            BEQ no_overflow
.1a545f					overflow
.1a545f	08		php		            PHP
.1a5460	c2 20		rep #$20	            REP #$20
.1a5462	48		pha		            PHA
.1a5463	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5466	5b		tcd		            TCD
.1a5467	68		pla		            PLA
.1a5468	28		plp		            PLP
.1a5469	e2 20		sep #$20	            SEP #$20
.1a546b	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a546d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5471	c2 20		rep #$20	            REP #$20
.1a5473	29 ff 00	and #$00ff	            AND #$00FF
.1a5476	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a5479	e2 20		sep #$20	            SEP #$20
.1a547b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a547e					no_overflow
.1a547e	c2 30		rep #$30	            REP #$30
.1a5480	a3 01		lda $01,s	            LDA L_SIGN              ; Check the sign
.1a5482	10 16		bpl $1a549a	            BPL ret_result          ; If positive: just return the result
.1a5484	a3 05		lda $05,s	            LDA L_RESULT+2          ; Compute the two's complement of the result
.1a5486	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a5489	83 05		sta $05,s	            STA L_RESULT+2
.1a548b	a3 03		lda $03,s	            LDA L_RESULT
.1a548d	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a5490	1a		inc a		            INC A
.1a5491	83 03		sta $03,s	            STA L_RESULT
.1a5493	d0 05		bne $1a549a	            BNE ret_result
.1a5495	a3 05		lda $05,s	            LDA L_RESULT+2
.1a5497	1a		inc a		            INC A
.1a5498	83 05		sta $05,s	            STA L_RESULT+2
.1a549a					ret_result
.1a549a	a3 03		lda $03,s	            LDA L_RESULT
.1a549c	85 23		sta $0823	            STA ARGUMENT1
.1a549e	a3 05		lda $05,s	            LDA L_RESULT+2
.1a54a0	85 25		sta $0825	            STA ARGUMENT1+2
.1a54a2	c2 20		rep #$20	            REP #$20
.1a54a4	3b		tsc		            TSC
.1a54a5	18		clc		            CLC
.1a54a6	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.1a54a9	1b		tcs		            TCS
.1a54aa	28		plp		            PLP
.1a54ab	60		rts		            RTS
.1a54ac					OP_INT_LT
.1a54ac	08		php		            PHP
.1a54ad	c2 20		rep #$20	            REP #$20
.1a54af	a5 23		lda $0823	            LDA ARGUMENT1
.1a54b1	c5 29		cmp $0829	            CMP ARGUMENT2
.1a54b3	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a54b5	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a54b7	50 03		bvc $1a54bc	            BVC skip_eor
.1a54b9	49 00 80	eor #$8000	            EOR #$8000
.1a54bc	30 06		bmi $1a54c4	skip_eor    BMI ret_true
.1a54be	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a54c0	64 25		stz $0825	            STZ ARGUMENT1+2
.1a54c2	80 07		bra $1a54cb	            BRA done
.1a54c4	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a54c7	85 23		sta $0823	            STA ARGUMENT1
.1a54c9	85 25		sta $0825	            STA ARGUMENT1+2
.1a54cb	28		plp		done        PLP
.1a54cc	60		rts		            RTS
.1a54cd					OP_INT_GT
.1a54cd	08		php		            PHP
.1a54ce	c2 20		rep #$20	            REP #$20
.1a54d0	a5 23		lda $0823	            LDA ARGUMENT1
.1a54d2	c5 29		cmp $0829	            CMP ARGUMENT2
.1a54d4	d0 0c		bne $1a54e2	            BNE test_fully
.1a54d6	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a54d8	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a54da	d0 06		bne $1a54e2	            BNE test_fully
.1a54dc	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a54de	64 25		stz $0825	            STZ ARGUMENT1+2
.1a54e0	80 16		bra $1a54f8	            BRA done
.1a54e2	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.1a54e4	c5 23		cmp $0823	            CMP ARGUMENT1
.1a54e6	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a54e8	e5 25		sbc $0825	            SBC ARGUMENT1+2
.1a54ea	50 03		bvc $1a54ef	            BVC skip_eor
.1a54ec	49 00 80	eor #$8000	            EOR #$8000
.1a54ef	10 eb		bpl $1a54dc	skip_eor    BPL ret_false
.1a54f1	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a54f4	85 23		sta $0823	            STA ARGUMENT1
.1a54f6	85 25		sta $0825	            STA ARGUMENT1+2
.1a54f8	28		plp		done        PLP
.1a54f9	60		rts		            RTS
.1a54fa					OP_INT_EQ
.1a54fa	08		php		            PHP
.1a54fb	c2 20		rep #$20	            REP #$20
.1a54fd	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a54ff	c5 25		cmp $0825	            CMP ARGUMENT1+2
.1a5501	d0 0f		bne $1a5512	            BNE ret_false
.1a5503	a5 29		lda $0829	            LDA ARGUMENT2
.1a5505	c5 23		cmp $0823	            CMP ARGUMENT1
.1a5507	d0 09		bne $1a5512	            BNE ret_false
.1a5509	a9 ff ff	lda #$ffff	            LDA #$FFFF
.1a550c	85 23		sta $0823	            STA ARGUMENT1
.1a550e	85 25		sta $0825	            STA ARGUMENT1+2
.1a5510	80 04		bra $1a5516	            BRA done
.1a5512	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a5514	64 25		stz $0825	            STZ ARGUMENT1+2
.1a5516	28		plp		done        PLP
.1a5517	60		rts		            RTS
.1a5518					OP_INT_NE
.1a5518	08		php		            PHP
.1a5519	c2 20		rep #$20	            REP #$20
.1a551b	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a551d	c5 25		cmp $0825	            CMP ARGUMENT1+2
.1a551f	d0 0c		bne $1a552d	            BNE ret_true
.1a5521	a5 29		lda $0829	            LDA ARGUMENT2
.1a5523	c5 23		cmp $0823	            CMP ARGUMENT1
.1a5525	d0 06		bne $1a552d	            BNE ret_true
.1a5527	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a5529	64 25		stz $0825	            STZ ARGUMENT1+2
.1a552b	80 07		bra $1a5534	            BRA done
.1a552d	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a5530	85 23		sta $0823	            STA ARGUMENT1
.1a5532	85 25		sta $0825	            STA ARGUMENT1+2
.1a5534	28		plp		done        PLP
.1a5535	60		rts		            RTS
.1a5536					OP_INT_GTE
.1a5536	08		php		            PHP
.1a5537	c2 20		rep #$20	            REP #$20
.1a5539	a5 23		lda $0823	            LDA ARGUMENT1
.1a553b	c5 29		cmp $0829	            CMP ARGUMENT2
.1a553d	d0 0f		bne $1a554e	            BNE test_fully
.1a553f	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5541	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a5543	d0 09		bne $1a554e	            BNE test_fully
.1a5545	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a5548	85 23		sta $0823	            STA ARGUMENT1
.1a554a	85 25		sta $0825	            STA ARGUMENT1+2
.1a554c	80 13		bra $1a5561	            BRA done
.1a554e	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.1a5550	c5 23		cmp $0823	            CMP ARGUMENT1
.1a5552	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a5554	e5 25		sbc $0825	            SBC ARGUMENT1+2
.1a5556	50 03		bvc $1a555b	            BVC skip_eor
.1a5558	49 00 80	eor #$8000	            EOR #$8000
.1a555b	30 e8		bmi $1a5545	skip_eor    BMI ret_true
.1a555d	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a555f	64 25		stz $0825	            STZ ARGUMENT1+2
.1a5561	28		plp		done        PLP
.1a5562	60		rts		            RTS
.1a5563					OP_INT_LTE
.1a5563	08		php		            PHP
.1a5564	c2 20		rep #$20	            REP #$20
.1a5566	a5 23		lda $0823	            LDA ARGUMENT1
.1a5568	c5 29		cmp $0829	            CMP ARGUMENT2
.1a556a	d0 0f		bne $1a557b	            BNE test_fully
.1a556c	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a556e	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a5570	d0 09		bne $1a557b	            BNE test_fully
.1a5572	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a5575	85 23		sta $0823	            STA ARGUMENT1
.1a5577	85 25		sta $0825	            STA ARGUMENT1+2
.1a5579	80 13		bra $1a558e	            BRA done
.1a557b	a5 23		lda $0823	test_fully  LDA ARGUMENT1
.1a557d	c5 29		cmp $0829	            CMP ARGUMENT2
.1a557f	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5581	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a5583	50 03		bvc $1a5588	            BVC skip_eor
.1a5585	49 00 80	eor #$8000	            EOR #$8000
.1a5588	30 e8		bmi $1a5572	skip_eor    BMI ret_true
.1a558a	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a558c	64 25		stz $0825	            STZ ARGUMENT1+2
.1a558e	28		plp		done        PLP
.1a558f	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\floats.s


;******  Processing file: src\C256/floats.s


;******  Processing file: src\C256/fp_math_defs.s

=$afe200				FP_MATH_CTRL0 = $AFE200         ; Read/write
=$08					FP_MATH_CTRL0_ADD = $08         ; 0: Substraction - 1: Addition
=$01					FP_CTRL0_CONV_0 = %00000001     ; Input 0 should be converted from 24.12 fixed point to floating point
=$02					FP_CTRL0_CONV_1 = %00000010     ; Input 1 should be converted from 24.12 fixed point to floating point
=$00					FP_ADD_IN0_MUX0 = %00000000     ; Adder input #0 is the output of MUX0
=$10					FP_ADD_IN0_MUX1 = %00010000     ; Adder input #0 is the output of MUX1
=$20					FP_ADD_IN0_MULT = %00100000     ; Adder input #0 is the output of the multiplier
=$30					FP_ADD_IN0_DIV  = %00110000     ; Adder input #0 is the output of the divider
=$00					FP_ADD_IN1_MUX0 = %00000000     ; Adder input #1 is the output of MUX0
=$40					FP_ADD_IN1_MUX1 = %01000000     ; Adder input #1 is the output of MUX1
=$80					FP_ADD_IN1_MULT = %10000000     ; Adder input #1 is the output of the multiplier
=$c0					FP_ADD_IN1_DIV  = %11000000     ; Adder input #1 is the output of the divider
=$afe201				FP_MATH_CTRL1 = $AFE201
=$00					FP_OUT_MULT = %00000000         ; Output is from the multiplier
=$01					FP_OUT_DIV  = %00000001         ; Output is from the divider
=$02					FP_OUT_ADD  = %00000010         ; Output is from the adder/subtracter
=$03					FP_OUT_ONE  = %00000011         ; Output is the constant '1.0'
=$afe202				FP_MATH_CTRL2 = $AFE202         ; Not Used - Reserved
=$afe203				FP_MATH_CTRL3 = $AFE203         ; Not Used - Reserved
=$afe204				FP_MATH_MULT_STAT = $AFE204     ; Status of the multiplier
=$01					FP_MULT_STAT_NAN  = $01         ; (NAN) Not a Number Status
=$02					FP_MULT_STAT_OVF  = $02         ; Overflow
=$04					FP_MULT_STAT_UDF  = $04         ; Underflow
=$08					FP_MULT_STAT_ZERO = $08         ; Zero
=$afe205				FP_MATH_DIV_STAT  = $AFE205     ; Status of the divider
=$01					FP_DIV_STAT_NAN       = $01     ; Not a number Status
=$02					FP_DIV_STAT_OVF       = $02     ; Overflow
=$04					FP_DIV_STAT_UDF       = $04     ; Underflow
=$08					FP_DIV_STAT_ZERO      = $08     ; Zero
=$10					FP_DIV_STAT_DIVBYZERO = $10     ; Division by Zero
=$afe206				FP_MATH_ADD_STAT  = $AFE206     ; Status of the adder/subtracter
=$01					FP_ADD_STAT_NAN  = $01          ; Not a number Status
=$02					FP_ADD_STAT_OVF  = $02          ; Overflow
=$04					FP_ADD_STAT_UDF  = $04          ; Underflow
=$08					FP_ADD_STAT_ZERO = $08          ; Zero
=$afe207				FP_MATH_CONV_STAT = $AFE207     ; Status of the fixed <=> float converters
=$01					FP_CONV_STAT_NAN  = $01         ; Not a number Status
=$02					FP_CONV_STAT_OVF  = $02         ; Overflow
=$04					FP_CONV_STAT_UDF  = $04         ; Underflow
=$afe208				FP_MATH_INPUT0_LL = $AFE208
=$afe209				FP_MATH_INPUT0_LH = $AFE209
=$afe20a				FP_MATH_INPUT0_HL = $AFE20A
=$afe20b				FP_MATH_INPUT0_HH = $AFE20B
=$afe20c				FP_MATH_INPUT1_LL = $AFE20C
=$afe20d				FP_MATH_INPUT1_LH = $AFE20D
=$afe20e				FP_MATH_INPUT1_HL = $AFE20E
=$afe20f				FP_MATH_INPUT1_HH = $AFE20F
=$afe208				FP_MATH_OUTPUT_FP_LL = $AFE208
=$afe209				FP_MATH_OUTPUT_FP_LH = $AFE209
=$afe20a				FP_MATH_OUTPUT_FP_HL = $AFE20A
=$afe20b				FP_MATH_OUTPUT_FP_HH = $AFE20B
=$afe20c				FP_MATH_OUTPUT_FIXED_LL = $AFE20C
=$afe20d				FP_MATH_OUTPUT_FIXED_LH = $AFE20D
=$afe20e				FP_MATH_OUTPUT_FIXED_HL = $AFE20E
=$afe20f				FP_MATH_OUTPUT_FIXED_HH = $AFE20F

;******  Return to file: src\C256/floats.s


;******  Processing file: src\C256/math_cop.s

.1a5590					UINT_DIV_A_X
.1a5590	08		php		                    PHP
.1a5591	c2 20		rep #$20	            REP #$20
.1a5593	8f 12 01 00	sta $000112	                    STA @l UNSIGNED_DIV_NUM_LO
.1a5597	8a		txa		                    TXA
.1a5598	8f 10 01 00	sta $000110	                    STA @l UNSIGNED_DIV_DEM_LO
.1a559c	af 16 01 00	lda $000116	                    LDA @l UNSIGNED_DIV_REM_LO
.1a55a0	aa		tax		                    TAX
.1a55a1	af 14 01 00	lda $000114	                    LDA @l UNSIGNED_DIV_QUO_LO
.1a55a5	28		plp		                    PLP
.1a55a6	60		rts		            RTS

;******  Return to file: src\C256/floats.s

.1a55a7					FIXINT_TO_FP
.1a55a7	08		php		                    PHP
.1a55a8	e2 20		sep #$20	            SEP #$20
.1a55aa	a9 03		lda #$03	                    LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a55ac	8f 00 e2 af	sta $afe200	                    STA @l FP_MATH_CTRL0
.1a55b0	a9 00		lda #$00	                    LDA #FP_OUT_MULT
.1a55b2	8f 01 e2 af	sta $afe201	                    STA @l FP_MATH_CTRL1
.1a55b6	c2 20		rep #$20	            REP #$20
.1a55b8	a5 23		lda $0823	                    LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a55ba	8f 08 e2 af	sta $afe208	                    STA @l FP_MATH_INPUT0_LL
.1a55be	a5 25		lda $0825	                    LDA ARGUMENT1+2
.1a55c0	8f 0a e2 af	sta $afe20a	                    STA @l FP_MATH_INPUT0_HL
.1a55c4	a9 00 00	lda #$0000	                    LDA #0
.1a55c7	8f 0c e2 af	sta $afe20c	                    STA @l FP_MATH_INPUT1_LL    ; ARGUMENT2 = 0100 0000 = 4096 in 20:12
.1a55cb	a9 00 01	lda #$0100	                    LDA #$0100
.1a55ce	8f 0e e2 af	sta $afe20e	                    STA @l FP_MATH_INPUT1_HL
.1a55d2	ea		nop		                    NOP
.1a55d3	ea		nop		                    NOP
.1a55d4	ea		nop		                    NOP
.1a55d5	ea		nop		                    NOP
.1a55d6	ea		nop		                    NOP
.1a55d7	ea		nop		                    NOP
.1a55d8	af 08 e2 af	lda $afe208	                    LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a55dc	85 23		sta $0823	                    STA ARGUMENT1
.1a55de	af 0a e2 af	lda $afe20a	                    LDA @l FP_MATH_OUTPUT_FP_HL
.1a55e2	85 25		sta $0825	                    STA ARGUMENT1+2
.1a55e4	a9 01 00	lda #$0001	                    LDA #TYPE_FLOAT
.1a55e7	85 27		sta $0827	                    STA ARGTYPE1
.1a55e9	28		plp		                    PLP
.1a55ea	60		rts		            RTS
.1a55eb	08		php		OP_FP_SUB       PHP
.1a55ec	e2 20		sep #$20	            SEP #$20
.1a55ee	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a55f0	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a55f4	80 09		bra $1a55ff	                BRA FP_ADD_SUB
.1a55f6	08		php		OP_FP_ADD       PHP
.1a55f7	e2 20		sep #$20	            SEP #$20
.1a55f9	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a55fb	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a55ff	a9 02		lda #$02	FP_ADD_SUB      LDA #FP_OUT_ADD
.1a5601	8f 01 e2 af	sta $afe201	                STA @lFP_MATH_CTRL1
.1a5605	c2 20		rep #$20	            REP #$20
.1a5607	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a5609	8f 08 e2 af	sta $afe208	                STA @lFP_MATH_INPUT0_LL
.1a560d	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a560f	8f 0a e2 af	sta $afe20a	                STA @lFP_MATH_INPUT0_HL
.1a5613	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a5615	8f 0c e2 af	sta $afe20c	                STA @lFP_MATH_INPUT1_LL
.1a5619	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a561b	8f 0e e2 af	sta $afe20e	                STA @lFP_MATH_INPUT1_HL
.1a561f	ea		nop		                NOP
.1a5620	ea		nop		                NOP
.1a5621	ea		nop		                NOP
.1a5622	e2 20		sep #$20	            SEP #$20
.1a5624	af 06 e2 af	lda $afe206	                LDA @lFP_MATH_ADD_STAT      ; Check the status of the addition
.1a5628	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.1a562a	d0 10		bne $1a563c	                BNE fp_add_error            ; If an issue was raise, process the math error
.1a562c	c2 20		rep #$20	            REP #$20
.1a562e	af 08 e2 af	lda $afe208	                LDA @lFP_MATH_OUTPUT_FP_LL  ; Retrieve the results into ARGUMENT1
.1a5632	85 23		sta $0823	                STA ARGUMENT1
.1a5634	af 0a e2 af	lda $afe20a	                LDA @lFP_MATH_OUTPUT_FP_HL
.1a5638	85 25		sta $0825	                STA ARGUMENT1+2
.1a563a	28		plp		fp_add_done     PLP
.1a563b	60		rts		            RTS
.1a563c					fp_add_error
.1a563c	20 d7 56	jsr $1a56d7	            JSR FP_MATH_ERROR
.1a563f	80 f9		bra $1a563a	                BRA fp_add_done
.1a5641	08		php		OP_FP_DIV       PHP
.1a5642	e2 20		sep #$20	            SEP #$20
.1a5644	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a5646	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a564a	a9 00		lda #$00	                LDA #0
.1a564c	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a5650	c2 20		rep #$20	            REP #$20
.1a5652	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a5654	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5658	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a565a	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a565e	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a5660	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5664	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a5666	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a566a	ea		nop		                NOP
.1a566b	ea		nop		                NOP
.1a566c	ea		nop		                NOP
.1a566d	e2 20		sep #$20	            SEP #$20
.1a566f	af 05 e2 af	lda $afe205	                LDA @l FP_MATH_DIV_STAT     ; Check the status of the addition
.1a5673	29 17		and #$17	                AND #%00010111              ; Filter out the ZERO status
.1a5675	d0 10		bne $1a5687	                BNE fp_div_error            ; If an issue was raise, process the math error
.1a5677	c2 20		rep #$20	            REP #$20
.1a5679	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a567d	85 23		sta $0823	                STA ARGUMENT1
.1a567f	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5683	85 25		sta $0825	                STA ARGUMENT1+2
.1a5685	28		plp		fp_div_done     PLP
.1a5686	60		rts		            RTS
.1a5687					fp_div_error
.1a5687	20 d7 56	jsr $1a56d7	            JSR FP_MATH_ERROR
.1a568a	80 f9		bra $1a5685	                BRA fp_div_done
.1a568c	08		php		OP_FP_MUL       PHP
.1a568d	e2 20		sep #$20	            SEP #$20
.1a568f	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a5691	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5695	a9 00		lda #$00	                LDA #0
.1a5697	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a569b	c2 20		rep #$20	            REP #$20
.1a569d	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a569f	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a56a3	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a56a5	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a56a9	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a56ab	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a56af	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a56b1	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a56b5	ea		nop		                NOP
.1a56b6	ea		nop		                NOP
.1a56b7	ea		nop		                NOP
.1a56b8	e2 20		sep #$20	            SEP #$20
.1a56ba	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT    ; Check the status of the addition
.1a56be	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.1a56c0	d0 10		bne $1a56d2	                BNE fp_mul_error            ; If an issue was raise, process the math error
.1a56c2	c2 20		rep #$20	            REP #$20
.1a56c4	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a56c8	85 23		sta $0823	                STA ARGUMENT1
.1a56ca	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a56ce	85 25		sta $0825	                STA ARGUMENT1+2
.1a56d0	28		plp		fp_mul_done     PLP
.1a56d1	60		rts		            RTS
.1a56d2					fp_mul_error
.1a56d2	20 d7 56	jsr $1a56d7	            JSR FP_MATH_ERROR
.1a56d5	80 f9		bra $1a56d0	                BRA fp_mul_done
.1a56d7					FP_MATH_ERROR
.1a56d7	e2 20		sep #$20	            SEP #$20
.1a56d9	89 01		bit #$01	                BIT #FP_ADD_STAT_NAN        ; Is there a NaN condition?
.1a56db	f0 20		beq $1a56fd	                BEQ check_over              ; No: check for overflow
.1a56dd	00		brk #		                BRK
.1a56de	08		php		            PHP
.1a56df	c2 20		rep #$20	            REP #$20
.1a56e1	48		pha		            PHA
.1a56e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a56e5	5b		tcd		            TCD
.1a56e6	68		pla		            PLA
.1a56e7	28		plp		            PLP
.1a56e8	e2 20		sep #$20	            SEP #$20
.1a56ea	a9 0c		lda #$0c	            LDA #ERR_NAN
.1a56ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a56f0	c2 20		rep #$20	            REP #$20
.1a56f2	29 ff 00	and #$00ff	            AND #$00FF
.1a56f5	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a56f8	e2 20		sep #$20	            SEP #$20
.1a56fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a56fd	89 02		bit #$02	check_over      BIT #FP_ADD_STAT_OVF        ; Is ther an overflow condition?
.1a56ff	f0 1f		beq $1a5720	                BEQ check_under             ; No: check for underflow
.1a5701	08		php		            PHP
.1a5702	c2 20		rep #$20	            REP #$20
.1a5704	48		pha		            PHA
.1a5705	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5708	5b		tcd		            TCD
.1a5709	68		pla		            PLA
.1a570a	28		plp		            PLP
.1a570b	e2 20		sep #$20	            SEP #$20
.1a570d	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a570f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5713	c2 20		rep #$20	            REP #$20
.1a5715	29 ff 00	and #$00ff	            AND #$00FF
.1a5718	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a571b	e2 20		sep #$20	            SEP #$20
.1a571d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5720	89 04		bit #$04	check_under     BIT #FP_ADD_STAT_UDF        ; Is there an underflow condition?
.1a5722	f0 1f		beq $1a5743	                BEQ done                    ; No: we should just return... this probably shouldn't happen
.1a5724	08		php		            PHP
.1a5725	c2 20		rep #$20	            REP #$20
.1a5727	48		pha		            PHA
.1a5728	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a572b	5b		tcd		            TCD
.1a572c	68		pla		            PLA
.1a572d	28		plp		            PLP
.1a572e	e2 20		sep #$20	            SEP #$20
.1a5730	a9 0e		lda #$0e	            LDA #ERR_UNDERFLOW
.1a5732	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5736	c2 20		rep #$20	            REP #$20
.1a5738	29 ff 00	and #$00ff	            AND #$00FF
.1a573b	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a573e	e2 20		sep #$20	            SEP #$20
.1a5740	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5743					done
.1a5743	60		rts		            RTS
.1a5744					FP_MUL10
.1a5744	08		php		                PHP
.1a5745	e2 20		sep #$20	            SEP #$20
.1a5747	a9 00		lda #$00	                LDA #FP_OUT_MULT                ; Set for multiplication
.1a5749	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a574d	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1            ; Input 1 is fixed point
.1a574f	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5753	c2 20		rep #$20	            REP #$20
.1a5755	a9 00 a0	lda #$a000	                LDA #$A000                      ; 10 is one factor
.1a5758	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a575c	a9 00 00	lda #$0000	                LDA #0
.1a575f	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5763	a5 23		lda $0823	                LDA ARGUMENT1                   ; N is the other
.1a5765	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5769	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a576b	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a576f	ea		nop		                NOP
.1a5770	ea		nop		                NOP
.1a5771	ea		nop		                NOP
.1a5772	e2 20		sep #$20	            SEP #$20
.1a5774	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT        ; Check the status
.1a5778	89 07		bit #$07	                BIT #FP_MULT_STAT_NAN | FP_MULT_STAT_OVF | FP_MULT_STAT_UDF
.1a577a	f0 01		beq $1a577d	                BEQ ret_result
.1a577c	00		brk #		                BRK                             ; There was an error...
.1a577d					ret_result
.1a577d	c2 20		rep #$20	            REP #$20
.1a577f	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL     ; Save result back
.1a5783	85 23		sta $0823	                STA ARGUMENT1
.1a5785	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5789	85 25		sta $0825	                STA ARGUMENT1+2
.1a578b	28		plp		                PLP
.1a578c	60		rts		            RTS
.1a578d					FP_DIV10
.1a578d	08		php		                PHP
.1a578e	e2 20		sep #$20	            SEP #$20
.1a5790	a9 01		lda #$01	                LDA #FP_OUT_DIV             ; Set for multiplication
.1a5792	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5796	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1        ; Input 1 is fixed point
.1a5798	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a579c	c2 20		rep #$20	            REP #$20
.1a579e	a9 00 a0	lda #$a000	                LDA #$A000                  ; 10 is one factor
.1a57a1	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a57a5	a9 00 00	lda #$0000	                LDA #0
.1a57a8	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a57ac	a5 23		lda $0823	                LDA ARGUMENT1               ; N is the other
.1a57ae	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a57b2	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a57b4	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a57b8	ea		nop		                NOP
.1a57b9	ea		nop		                NOP
.1a57ba	ea		nop		                NOP
.1a57bb	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Save result back
.1a57bf	85 23		sta $0823	                STA ARGUMENT1
.1a57c1	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a57c5	85 25		sta $0825	                STA ARGUMENT1+2
.1a57c7	28		plp		                PLP
.1a57c8	60		rts		            RTS

;******  Return to file: src\floats.s

.1a57c9					FARG1EQ0
.1a57c9	08		php		                PHP
.1a57ca	c2 20		rep #$20	            REP #$20
.1a57cc	a5 23		lda $0823	                LDA ARGUMENT1
.1a57ce	d0 0a		bne $1a57da	                BNE return_false
.1a57d0	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a57d2	29 ff 7f	and #$7fff	                AND #$7FFF              ; Mask off the sign bit
.1a57d5	d0 03		bne $1a57da	                BNE return_false
.1a57d7	28		plp		return_true     PLP
.1a57d8	38		sec		                SEC
.1a57d9	60		rts		            RTS
.1a57da	28		plp		return_false    PLP
.1a57db	18		clc		                CLC
.1a57dc	60		rts		            RTS
.1a57dd					SHIFTDEC
.1a57dd	08		php		                PHP
.1a57de	e2 20		sep #$20	            SEP #$20
.1a57e0	38		sec		                SEC                     ; Convert '0'..'9' to it's number
.1a57e1	e9 30		sbc #$30	                SBC #'0'
.1a57e3	20 3f 05	jsr $1a053f	            JSR MULINT10
.1a57e6	c2 20		rep #$20	            REP #$20
.1a57e8	29 ff 00	and #$00ff	                AND #$00FF              ; Add the number to ARGUMENT1
.1a57eb	18		clc		                CLC
.1a57ec	65 23		adc $0823	                ADC ARGUMENT1
.1a57ee	85 23		sta $0823	                STA ARGUMENT1
.1a57f0	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a57f2	69 00 00	adc #$0000	                ADC #0
.1a57f5	85 25		sta $0825	                STA ARGUMENT1+2
.1a57f7	28		plp		                PLP
.1a57f8	60		rts		            RTS
.1a57f9					SHIFTHEX
.1a57f9	08		php		                PHP
.1a57fa	e2 20		sep #$20	            SEP #$20
.1a57fc	c9 30		cmp #$30	                CMP #'0'                ; Process 0-9
.1a57fe	90 04		bcc $1a5804	                BLT not_09
.1a5800	c9 3a		cmp #$3a	                CMP #'9'+1
.1a5802	90 1c		bcc $1a5820	                BLT is_09
.1a5804	c9 61		cmp #$61	not_09          CMP #'a'                ; Process lowercase A-F
.1a5806	90 04		bcc $1a580c	                BLT not_lc
.1a5808	c9 67		cmp #$67	                CMP #'f'+1
.1a580a	90 0a		bcc $1a5816	                BLT is_lc
.1a580c	c9 41		cmp #$41	not_lc          CMP #'A'                ; Process uppercase A-F
.1a580e	90 04		bcc $1a5814	                BLT not_uc
.1a5810	c9 47		cmp #$47	                CMP #'F'+1
.1a5812	90 07		bcc $1a581b	                BLT is_uc
.1a5814	80 31		bra $1a5847	not_uc          BRA done                ; Just return if we couldn't convert... this shouldn't happen
.1a5816	38		sec		is_lc           SEC                     ; Convert 'a'-'f' to the actual number
.1a5817	e9 57		sbc #$57	                SBC #'a'-10
.1a5819	80 08		bra $1a5823	                BRA shift
.1a581b	38		sec		is_uc           SEC                     ; Convert 'A'-'F' to the actual number
.1a581c	e9 37		sbc #$37	                SBC #'A'-10
.1a581e	80 03		bra $1a5823	                BRA shift
.1a5820	38		sec		is_09           SEC                     ; Convert '0'-'9' to the actual number
.1a5821	e9 30		sbc #$30	                SBC #'0'
.1a5823					shift
.1a5823	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5825	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5827	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5829	26 26		rol $0826	                ROL ARGUMENT1+3
.1a582b	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a582d	26 24		rol $0824	                ROL ARGUMENT1+1
.1a582f	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5831	26 26		rol $0826	                ROL ARGUMENT1+3
.1a5833	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5835	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5837	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5839	26 26		rol $0826	                ROL ARGUMENT1+3
.1a583b	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a583d	26 24		rol $0824	                ROL ARGUMENT1+1
.1a583f	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5841	26 26		rol $0826	                ROL ARGUMENT1+3
.1a5843	05 23		ora $0823	                ORA ARGUMENT1           ; Add the number to it
.1a5845	85 23		sta $0823	                STA ARGUMENT1
.1a5847	28		plp		done            PLP
.1a5848	60		rts		            RTS
.1a5849					SHIFTBIN
.1a5849	08		php		                PHP
.1a584a	e2 20		sep #$20	            SEP #$20
.1a584c	c9 30		cmp #$30	                CMP #'0'                ; If the character is '0'...
.1a584e	f0 06		beq $1a5856	                BEQ shift_0             ; Shift a 0 onto ARGUMENT1
.1a5850	c9 31		cmp #$31	                CMP #'1'                ; If the character is '1'...
.1a5852	f0 0a		beq $1a585e	                BEQ shift_1             ; Shift a 1 onto ARGUMENT1
.1a5854	80 0f		bra $1a5865	                BRA done
.1a5856					shift_0
.1a5856	c2 20		rep #$20	            REP #$20
.1a5858	06 23		asl $0823	                ASL ARGUMENT1
.1a585a	26 25		rol $0825	                ROL ARGUMENT1+2
.1a585c	80 07		bra $1a5865	                BRA done
.1a585e					shift_1
.1a585e	c2 20		rep #$20	            REP #$20
.1a5860	38		sec		                SEC
.1a5861	26 23		rol $0823	                ROL ARGUMENT1
.1a5863	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5865	28		plp		done            PLP
.1a5866	60		rts		            RTS
.1a5867					FP_POW10
.1a5867	08		php		                PHP
.1a5868	e2 30		sep #$30	            SEP #$30
.1a586a	a5 61		lda $0861	                LDA MARG4
.1a586c	f0 0d		beq $1a587b	                BEQ return_1
.1a586e	aa		tax		                TAX
.1a586f	a5 69		lda $0869	                LDA MARG6
.1a5871	d0 15		bne $1a5888	                BNE do_div
.1a5873	a9 00		lda #$00	                LDA #FP_OUT_MULT                    ; We'll multiply
.1a5875	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5879	80 15		bra $1a5890	                BRA start_loop
.1a587b					return_1
.1a587b	e2 20		sep #$20	            SEP #$20
.1a587d	a9 03		lda #$03	                LDA #FP_OUT_ONE                     ; We want to return a 1.0
.1a587f	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5883	ea		nop		                NOP
.1a5884	ea		nop		                NOP
.1a5885	ea		nop		                NOP
.1a5886	80 62		bra $1a58ea	                BRA ret_result                      ; And return the result
.1a5888					do_div
.1a5888	e2 20		sep #$20	            SEP #$20
.1a588a	a9 01		lda #$01	                LDA #FP_OUT_DIV                     ; We'll divide
.1a588c	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5890					start_loop
.1a5890	e2 20		sep #$20	            SEP #$20
.1a5892	a9 43		lda #$43	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a5894	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.1a5898	c2 20		rep #$20	            REP #$20
.1a589a	a9 00 10	lda #$1000	                LDA #$1000                          ; Input 0 = 1.0
.1a589d	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a58a1	a9 00 00	lda #$0000	                LDA #0
.1a58a4	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a58a8					loop
.1a58a8	c2 20		rep #$20	            REP #$20
.1a58aa	a9 00 a0	lda #$a000	                LDA #$A000                          ; Input 1 = 10.0
.1a58ad	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a58b1	a9 00 00	lda #$0000	                LDA #0
.1a58b4	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a58b8	ea		nop		                NOP                                 ; Wait for the operation to complete
.1a58b9	ea		nop		                NOP
.1a58ba	ea		nop		                NOP
.1a58bb	ca		dex		                DEX                                 ; Count down
.1a58bc	f0 2c		beq $1a58ea	                BEQ ret_result                      ; If 0, then we're done
.1a58be	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; SCRATCH <-- Result
.1a58c2	8f 0c 08 00	sta $00080c	                STA @l SCRATCH
.1a58c6	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a58ca	8f 0e 08 00	sta $00080e	                STA @l SCRATCH+2
.1a58ce	e2 20		sep #$20	            SEP #$20
.1a58d0	a9 42		lda #$42	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_1
.1a58d2	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.1a58d6	c2 20		rep #$20	            REP #$20
.1a58d8	af 0c 08 00	lda $00080c	                LDA @l SCRATCH                      ; Input 0 <-- SCRATCH
.1a58dc	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a58e0	af 0e 08 00	lda $00080e	                LDA @l SCRATCH+2
.1a58e4	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a58e8	80 be		bra $1a58a8	                BRA loop
.1a58ea					ret_result
.1a58ea	c2 20		rep #$20	            REP #$20
.1a58ec	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; Return the result
.1a58f0	85 23		sta $0823	                STA ARGUMENT1
.1a58f2	af 0a e2 af	lda $afe20a	                LDA FP_MATH_OUTPUT_FP_HL
.1a58f6	85 25		sta $0825	                STA ARGUMENT1+2
.1a58f8	e2 20		sep #$20	            SEP #$20
.1a58fa	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a58fc	85 27		sta $0827	                STA ARGTYPE1
.1a58fe	28		plp		done            PLP
.1a58ff	60		rts		            RTS
.1a5900					PACKFLOAT
.1a5900	08		php		                PHP
.1a5901	c2 20		rep #$20	            REP #$20
.1a5903	a5 5d		lda $085d	            LDA MARG3
.1a5905	85 23		sta $0823	            STA ARGUMENT1
.1a5907	a5 5f		lda $085f	            LDA MARG3+2
.1a5909	85 25		sta $0825	            STA ARGUMENT1+2
.1a590b	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a590e	c2 20		rep #$20	            REP #$20
.1a5910	a5 23		lda $0823	            LDA ARGUMENT1
.1a5912	85 29		sta $0829	            STA ARGUMENT2
.1a5914	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5916	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5918	c2 20		rep #$20	            REP #$20
.1a591a	a5 59		lda $0859	            LDA MARG2
.1a591c	85 23		sta $0823	            STA ARGUMENT1
.1a591e	a5 5b		lda $085b	            LDA MARG2+2
.1a5920	85 25		sta $0825	            STA ARGUMENT1+2
.1a5922	20 41 56	jsr $1a5641	            JSR OP_FP_DIV
.1a5925	c2 20		rep #$20	            REP #$20
.1a5927	a5 55		lda $0855	            LDA MARG1
.1a5929	85 29		sta $0829	            STA ARGUMENT2
.1a592b	a5 57		lda $0857	            LDA MARG1+2
.1a592d	85 2b		sta $082b	            STA ARGUMENT2+2
.1a592f	20 f6 55	jsr $1a55f6	            JSR OP_FP_ADD
.1a5932	c2 20		rep #$20	            REP #$20
.1a5934	a5 23		lda $0823	            LDA ARGUMENT1
.1a5936	85 29		sta $0829	            STA ARGUMENT2
.1a5938	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a593a	85 2b		sta $082b	            STA ARGUMENT2+2
.1a593c	20 67 58	jsr $1a5867	            JSR FP_POW10
.1a593f	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a5942	c2 20		rep #$20	            REP #$20
.1a5944	a5 65		lda $0865	                LDA MARG5                       ; Check to see if the float should be negative
.1a5946	f0 07		beq $1a594f	                BEQ set_float_type              ; If not, just set the type
.1a5948	a5 25		lda $0825	                LDA ARGUMENT1+2                 ; If so, set the sign bit
.1a594a	09 00 80	ora #$8000	                ORA #$8000
.1a594d	85 25		sta $0825	                STA ARGUMENT1+2
.1a594f					set_float_type
.1a594f	e2 20		sep #$20	            SEP #$20
.1a5951	a9 01		lda #$01	                LDA #TYPE_FLOAT                 ; Set the type to float... ready for returning!
.1a5953	85 27		sta $0827	                STA ARGTYPE1
.1a5955	28		plp		                PLP
.1a5956	60		rts		            RTS
.1a5957					PARSENUM
.1a5957	5a		phy		                PHY
.1a5958	08		php		                PHP
.1a5959	c2 30		rep #$30	            REP #$30
.1a595b	64 23		stz $0823	                STZ ARGUMENT1       ; This will be the accumulator for building the number
.1a595d	64 25		stz $0825	                STZ ARGUMENT1+2
.1a595f	64 55		stz $0855	                STZ MARG1           ; This will be the integer portion of the mantissa for floats
.1a5961	64 57		stz $0857	                STZ MARG1+2
.1a5963	64 65		stz $0865	                STZ MARG5           ; MARG5 will be the negative flag for the number
.1a5965	64 59		stz $0859	                STZ MARG2           ; This will be the denominator of the fractional part of the mantissa
.1a5967	64 5b		stz $085b	                STZ MARG2+2
.1a5969	a9 01 00	lda #$0001	                LDA #1
.1a596c	85 5d		sta $085d	                STA MARG3           ; This will be the divisor of the fractional part of the mantissa
.1a596e	64 5f		stz $085f	                STZ MARG3+2
.1a5970	64 61		stz $0861	                STZ MARG4           ; This will be the exponent of a float
.1a5972	64 63		stz $0863	                STZ MARG4+2
.1a5974	64 69		stz $0869	                STZ MARG6           ; MARG6 will be the negative flag for the exponent
.1a5976					s0
.1a5976	e2 20		sep #$20	            SEP #$20
.1a5978	a0 00 00	ldy #$0000	                LDY #0
.1a597b	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the first byte
.1a597d	c9 2b		cmp #$2b	                CMP #'+'
.1a597f	f0 33		beq $1a59b4	                BEQ s1_drop         ; '+' --> S1, drop
.1a5981	c9 2d		cmp #$2d	                CMP #'-'
.1a5983	f0 2b		beq $1a59b0	                BEQ s1_negative     ; Flag that the number is negative
.1a5985	c9 26		cmp #$26	                CMP #'&'
.1a5987	f0 3a		beq $1a59c3	                BEQ s2_drop         ; '&' --> S2, drop
.1a5989	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a598c	90 03		bcc $1a5991	                BCC syntax_err
.1a598e	82 ac 00	brl $1a5a3d	                BRL s7_shift        ; '0'-'9' --> S7, emit
.1a5991					syntax_err
.1a5991	08		php		            PHP
.1a5992	c2 20		rep #$20	            REP #$20
.1a5994	48		pha		            PHA
.1a5995	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5998	5b		tcd		            TCD
.1a5999	68		pla		            PLA
.1a599a	28		plp		            PLP
.1a599b	e2 20		sep #$20	            SEP #$20
.1a599d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a599f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a59a3	c2 20		rep #$20	            REP #$20
.1a59a5	29 ff 00	and #$00ff	            AND #$00FF
.1a59a8	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a59ab	e2 20		sep #$20	            SEP #$20
.1a59ad	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a59b0	a9 01		lda #$01	s1_negative     LDA #1              ; Set the negative flag for the mantissa
.1a59b2	85 65		sta $0865	                STA MARG5
.1a59b4	c8		iny		s1_drop         INY                 ; Drop the character...
.1a59b5	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next
.1a59b7	c9 26		cmp #$26	                CMP #'&'
.1a59b9	f0 08		beq $1a59c3	                BEQ s2_drop         ; '&' --> S2, drop the '&'
.1a59bb	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a59be	90 d1		bcc $1a5991	                BCC syntax_err
.1a59c0	82 7a 00	brl $1a5a3d	                BRL s7_shift        ; '0'-'9' --> S7, shift
.1a59c3	c8		iny		s2_drop         INY                 ; Drop the character
.1a59c4	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.1a59c6	c9 68		cmp #$68	                CMP #'h'
.1a59c8	f0 0e		beq $1a59d8	                BEQ s3_drop         ; 'h', 'H' --> S3, drop
.1a59ca	c9 48		cmp #$48	                CMP #'H'
.1a59cc	f0 0a		beq $1a59d8	                BEQ s3_drop
.1a59ce	c9 62		cmp #$62	                CMP #'b'
.1a59d0	f0 4c		beq $1a5a1e	                BEQ s5_drop         ; 'b', 'B' --> S5, drop
.1a59d2	c9 42		cmp #$42	                CMP #'B'
.1a59d4	f0 48		beq $1a5a1e	                BEQ s5_drop
.1a59d6	80 b9		bra $1a5991	                BRA syntax_err
.1a59d8	c8		iny		s3_drop         INY                 ; Drop the character
.1a59d9	b7 00		lda [$0800],y	s3              LDA [BIP],Y         ; Get the next character
.1a59db	20 d1 04	jsr $1a04d1	            JSR ISHEX
.1a59de	b0 02		bcs $1a59e2	                BCS s4_shift
.1a59e0	80 af		bra $1a5991	                BRA syntax_err
.1a59e2					s4_shift
.1a59e2	20 f9 57	jsr $1a57f9	            JSR SHIFTHEX
.1a59e5	c8		iny		                INY
.1a59e6	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.1a59e8	20 d1 04	jsr $1a04d1	            JSR ISHEX
.1a59eb	b0 f5		bcs $1a59e2	                BCS s4_shift        ; '0'-'9','A'-'F' --> S4, shift
.1a59ed					ret_integer
.1a59ed	e2 20		sep #$20	            SEP #$20
.1a59ef	a5 65		lda $0865	                LDA MARG5           ; check if the number should be negative
.1a59f1	f0 11		beq $1a5a04	                BEQ set_int_type    ; If not, just set the type and return
.1a59f3	c2 20		rep #$20	            REP #$20
.1a59f5	38		sec		                SEC                 ; If so, negate it
.1a59f6	a9 00 00	lda #$0000	                LDA #0
.1a59f9	e5 23		sbc $0823	                SBC ARGUMENT1
.1a59fb	85 23		sta $0823	                STA ARGUMENT1
.1a59fd	a9 00 00	lda #$0000	                LDA #0
.1a5a00	e5 25		sbc $0825	                SBC ARGUMENT1+2
.1a5a02	85 25		sta $0825	                STA ARGUMENT1+2
.1a5a04					set_int_type
.1a5a04	e2 20		sep #$20	            SEP #$20
.1a5a06	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; Return an integer
.1a5a08	85 27		sta $0827	                STA ARGTYPE1
.1a5a0a					stop
.1a5a0a	c2 20		rep #$20	            REP #$20
.1a5a0c	18		clc		                CLC
.1a5a0d	98		tya		                TYA
.1a5a0e	65 00		adc $0800	                ADC BIP
.1a5a10	85 00		sta $0800	                STA BIP
.1a5a12	a5 02		lda $0802	                LDA BIP+2
.1a5a14	69 00 00	adc #$0000	                ADC #0
.1a5a17	85 02		sta $0802	                STA BIP+2
.1a5a19	e2 20		sep #$20	            SEP #$20
.1a5a1b	28		plp		                PLP
.1a5a1c	7a		ply		                PLY
.1a5a1d	60		rts		            RTS
.1a5a1e	c8		iny		s5_drop         INY                     ; Drop the character
.1a5a1f	b7 00		lda [$0800],y	s5              LDA [BIP],Y             ; Get the next character
.1a5a21	c9 30		cmp #$30	                CMP #'0'
.1a5a23	f0 07		beq $1a5a2c	                BEQ s6_shift            ; '0', '1' --> S6, shift
.1a5a25	c9 31		cmp #$31	                CMP #'1'
.1a5a27	f0 03		beq $1a5a2c	                BEQ s6_shift
.1a5a29	82 65 ff	brl $1a5991	                BRL syntax_err
.1a5a2c					s6_shift
.1a5a2c	20 49 58	jsr $1a5849	            JSR SHIFTBIN
.1a5a2f	c8		iny		                INY
.1a5a30	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5a32	c9 30		cmp #$30	                CMP #'0'                ; '0', '1' --> S6, shift
.1a5a34	f0 f6		beq $1a5a2c	                BEQ s6_shift
.1a5a36	c9 31		cmp #$31	                CMP #'1'
.1a5a38	f0 f2		beq $1a5a2c	                BEQ s6_shift
.1a5a3a	82 b0 ff	brl $1a59ed	                BRL ret_integer         ; Return integer
.1a5a3d					s7_shift
.1a5a3d	20 dd 57	jsr $1a57dd	            JSR SHIFTDEC
.1a5a40	c8		iny		                INY
.1a5a41	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5a43	c9 2e		cmp #$2e	                CMP #'.'                ; '.' --> S8, drop and preserve mantissa
.1a5a45	f0 08		beq $1a5a4f	                BEQ s8_mantissa
.1a5a47	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a5a4a	b0 f1		bcs $1a5a3d	                BCS s7_shift
.1a5a4c	82 9e ff	brl $1a59ed	                BRL ret_integer         ; Return integer
.1a5a4f					s8_mantissa
.1a5a4f	c2 20		rep #$20	            REP #$20
.1a5a51	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a5a54	c2 20		rep #$20	            REP #$20
.1a5a56	a5 23		lda $0823	            LDA ARGUMENT1
.1a5a58	85 55		sta $0855	            STA MARG1
.1a5a5a	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5a5c	85 57		sta $0857	            STA MARG1+2
.1a5a5e	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the decimal
.1a5a60	64 25		stz $0825	                STZ ARGUMENT1+2
.1a5a62	e2 20		sep #$20	            SEP #$20
.1a5a64	80 36		bra $1a5a9c	                BRA s8_drop
.1a5a66					s8_shift
.1a5a66	20 dd 57	jsr $1a57dd	            JSR SHIFTDEC
.1a5a69	c2 20		rep #$20	            REP #$20
.1a5a6b	a5 5f		lda $085f	                LDA MARG3+2             ; high 16 bits
.1a5a6d	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a5a71	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.1a5a74	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.1a5a78	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to high 16 bits of MARG3
.1a5a7c	85 5f		sta $085f	                STA MARG3+2
.1a5a7e	a5 5d		lda $085d	                LDA MARG3
.1a5a80	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a5a84	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.1a5a87	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.1a5a8b	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to MARG3
.1a5a8f	85 5d		sta $085d	                STA MARG3
.1a5a91	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.1a5a95	18		clc		                CLC
.1a5a96	65 5f		adc $085f	                ADC MARG3+2
.1a5a98	85 5f		sta $085f	                STA MARG3+2
.1a5a9a	e2 20		sep #$20	            SEP #$20
.1a5a9c					s8_drop
.1a5a9c	c8		iny		                INY
.1a5a9d	b7 00		lda [$0800],y	                LDA [BIP],Y
.1a5a9f	c9 65		cmp #$65	                CMP #'e'                ; 'E' --> S9, drop
.1a5aa1	f0 24		beq $1a5ac7	                BEQ s9_drop
.1a5aa3	c9 45		cmp #$45	                CMP #'E'
.1a5aa5	f0 20		beq $1a5ac7	                BEQ s9_drop
.1a5aa7	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a5aaa	b0 ba		bcs $1a5a66	                BCS s8_shift
.1a5aac	c2 20		rep #$20	            REP #$20
.1a5aae	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a5ab1	c2 20		rep #$20	            REP #$20
.1a5ab3	a5 23		lda $0823	            LDA ARGUMENT1
.1a5ab5	85 59		sta $0859	            STA MARG2
.1a5ab7	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5ab9	85 5b		sta $085b	            STA MARG2+2
.1a5abb	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.1a5abd	64 25		stz $0825	                STZ ARGUMENT1+2
.1a5abf	20 00 59	jsr $1a5900	            JSR PACKFLOAT
.1a5ac2	e2 20		sep #$20	            SEP #$20
.1a5ac4	82 43 ff	brl $1a5a0a	                BRL stop
.1a5ac7					s9_drop
.1a5ac7	c2 20		rep #$20	            REP #$20
.1a5ac9	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a5acc	c2 20		rep #$20	            REP #$20
.1a5ace	a5 23		lda $0823	            LDA ARGUMENT1
.1a5ad0	85 59		sta $0859	            STA MARG2
.1a5ad2	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5ad4	85 5b		sta $085b	            STA MARG2+2
.1a5ad6	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.1a5ad8	64 25		stz $0825	                STZ ARGUMENT1+2
.1a5ada	e2 20		sep #$20	            SEP #$20
.1a5adc	c8		iny		                INY
.1a5add	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5adf	c9 2b		cmp #$2b	                CMP #'+'
.1a5ae1	f0 10		beq $1a5af3	                BEQ s10_drop            ; '+' --> S10, drop
.1a5ae3	c9 2d		cmp #$2d	                CMP #'-'
.1a5ae5	f0 08		beq $1a5aef	                BEQ s10_setneg          ; '-' --> S10, set exponent is negative
.1a5ae7	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a5aea	b0 12		bcs $1a5afe	                BCS S11_shift           ; '0'-'9' --> S11, shift
.1a5aec	82 a2 fe	brl $1a5991	                BRL syntax_err
.1a5aef					s10_setneg
.1a5aef	a9 01		lda #$01	                LDA #1                  ; Set that the exponent should be negative
.1a5af1	85 69		sta $0869	                STA MARG6
.1a5af3					s10_drop
.1a5af3	c8		iny		                INY
.1a5af4	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5af6	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a5af9	b0 03		bcs $1a5afe	                BCS s11_shift
.1a5afb	82 93 fe	brl $1a5991	                BRL syntax_err
.1a5afe					s11_shift
.1a5afe	20 dd 57	jsr $1a57dd	            JSR SHIFTDEC
.1a5b01	c8		iny		                INY
.1a5b02	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5b04	20 c0 04	jsr $1a04c0	            JSR ISNUMERAL
.1a5b07	b0 f5		bcs $1a5afe	                BCS s11_shift
.1a5b09	c2 20		rep #$20	            REP #$20
.1a5b0b	a5 23		lda $0823	            LDA ARGUMENT1
.1a5b0d	85 61		sta $0861	            STA MARG4
.1a5b0f	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5b11	85 63		sta $0863	            STA MARG4+2
.1a5b13	20 00 59	jsr $1a5900	            JSR PACKFLOAT
.1a5b16	82 f1 fe	brl $1a5a0a	                BRL stop
.1a5b19					ITOF
.1a5b19	08		php		                PHP
.1a5b1a	20 a7 55	jsr $1a55a7	            JSR FIXINT_TO_FP
.1a5b1d	28		plp		done            PLP
.1a5b1e	60		rts		            RTS
.1a5b1f					FTOI
.1a5b1f	08		php		                PHP
.1a5b20					LOCALS
>0001					l_sign          .byte ?
>0002					l_exponent      .byte ?
>0003					l_mantissa      .dword ?
.1a5b20	c2 20		rep #$20	            REP #$20
.1a5b22	a9 16 5e	lda #$5e16	                LDA #<>FP_1_0
.1a5b25	85 29		sta $0829	                STA ARGUMENT2
.1a5b27	a9 1a 00	lda #$001a	                LDA #(FP_1_0 >> 16)
.1a5b2a	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5b2c	e2 20		sep #$20	            SEP #$20
.1a5b2e	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a5b30	85 2d		sta $082d	                STA ARGTYPE2
.1a5b32	c2 20		rep #$20	            REP #$20
.1a5b34	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5b37	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5b3a	d0 0c		bne $1a5b48	                BNE alloc_locals        ; No: get ready to do the full conversion
.1a5b3c	a9 00 00	lda #$0000	                LDA #0
.1a5b3f	8d 23 08	sta $0823	                STA @w ARGUMENT1        ; Yes: Return 0
.1a5b42	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5b45	82 a1 00	brl $1a5be9	                BRL done
.1a5b48	f4 00 00	pea #$0000	alloc_locals    PEA #0                  ; Reserve space for the locals
.1a5b4b	f4 00 00	pea #$0000	                PEA #0
.1a5b4e	f4 00 00	pea #$0000	                PEA #0
.1a5b51	e2 20		sep #$20	            SEP #$20
.1a5b53	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3      ; Preserve the sign bit
.1a5b56	29 80		and #$80	                AND #$80
.1a5b58	83 01		sta $01,s	                STA l_sign
.1a5b5a	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2      ; Preserve the exponent
.1a5b5d	2a		rol a		                ROL A
.1a5b5e	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3
.1a5b61	2a		rol a		                ROL A
.1a5b62	83 02		sta $02,s	                STA l_exponent
.1a5b64	a9 00		lda #$00	save_mantissa   LDA #0                  ; Save the mantissa (with the implied 1)
.1a5b66	83 06		sta $06,s	                STA l_mantissa+3
.1a5b68	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2
.1a5b6b	09 80		ora #$80	                ORA #$80
.1a5b6d	83 05		sta $05,s	                STA l_mantissa+2
.1a5b6f	ad 24 08	lda $0824	                LDA @w ARGUMENT1+1
.1a5b72	83 04		sta $04,s	                STA l_mantissa+1
.1a5b74	ad 23 08	lda $0823	                LDA @w ARGUMENT1
.1a5b77	83 03		sta $03,s	                STA l_mantissa
.1a5b79	a3 02		lda $02,s	                LDA l_exponent
.1a5b7b	c9 96		cmp #$96	loop            CMP #150
.1a5b7d	f0 3a		beq $1a5bb9	                BEQ adj_sign
.1a5b7f	90 1f		bcc $1a5ba0	                BLT shift_right
.1a5b81	08		php		            PHP
.1a5b82	c2 20		rep #$20	            REP #$20
.1a5b84	48		pha		            PHA
.1a5b85	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5b88	5b		tcd		            TCD
.1a5b89	68		pla		            PLA
.1a5b8a	28		plp		            PLP
.1a5b8b	e2 20		sep #$20	            SEP #$20
.1a5b8d	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a5b8f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5b93	c2 20		rep #$20	            REP #$20
.1a5b95	29 ff 00	and #$00ff	            AND #$00FF
.1a5b98	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a5b9b	e2 20		sep #$20	            SEP #$20
.1a5b9d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5ba0					shift_right
.1a5ba0	c2 20		rep #$20	            REP #$20
.1a5ba2	a3 05		lda $05,s	                LDA l_mantissa+2
.1a5ba4	4a		lsr a		                LSR A
.1a5ba5	83 05		sta $05,s	                STA l_mantissa+2
.1a5ba7	a3 03		lda $03,s	                LDA l_mantissa
.1a5ba9	6a		ror a		                ROR A
.1a5baa	83 03		sta $03,s	                STA l_mantissa
.1a5bac	e2 20		sep #$20	            SEP #$20
.1a5bae	a3 02		lda $02,s	                LDA l_exponent
.1a5bb0	1a		inc a		                INC A
.1a5bb1	83 02		sta $02,s	                STA l_exponent
.1a5bb3	c9 96		cmp #$96	                CMP #150
.1a5bb5	f0 02		beq $1a5bb9	                BEQ adj_sign
.1a5bb7	80 e7		bra $1a5ba0	                BRA shift_right
.1a5bb9	a3 01		lda $01,s	adj_sign        LDA l_sign
.1a5bbb	f0 1b		beq $1a5bd8	                BEQ ret_positive
.1a5bbd	c2 20		rep #$20	            REP #$20
.1a5bbf	a3 03		lda $03,s	                LDA l_mantissa
.1a5bc1	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a5bc4	18		clc		                CLC
.1a5bc5	69 01 00	adc #$0001	                ADC #1
.1a5bc8	8d 23 08	sta $0823	                STA @w ARGUMENT1
.1a5bcb	a3 05		lda $05,s	                LDA l_mantissa+2
.1a5bcd	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a5bd0	69 00 00	adc #$0000	                ADC #0
.1a5bd3	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5bd6	80 0c		bra $1a5be4	                BRA clean
.1a5bd8					ret_positive
.1a5bd8	c2 20		rep #$20	            REP #$20
.1a5bda	a3 03		lda $03,s	                LDA l_mantissa
.1a5bdc	8d 23 08	sta $0823	                STA @w ARGUMENT1
.1a5bdf	a3 05		lda $05,s	                LDA l_mantissa+2
.1a5be1	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5be4					clean
.1a5be4	c2 20		rep #$20	            REP #$20
.1a5be6	68		pla		                PLA                     ; Clean up the locals
.1a5be7	68		pla		                PLA
.1a5be8	68		pla		                PLA
.1a5be9					done
.1a5be9	e2 20		sep #$20	            SEP #$20
.1a5beb	a9 00		lda #$00	                LDA #TYPE_INTEGER       ; Set the return type to integer
.1a5bed	8d 27 08	sta $0827	                STA @w ARGTYPE1
.1a5bf0	28		plp		                PLP
.1a5bf1	60		rts		            RTS
.1a5bf2					FP_COMPARE
.1a5bf2	da		phx		                PHX
.1a5bf3	08		php		                PHP
.1a5bf4	c2 20		rep #$20	            REP #$20
.1a5bf6	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save ARGUMENT1 so we don't destroy it
.1a5bf8	48		pha		                PHA
.1a5bf9	a5 23		lda $0823	                LDA ARGUMENT1
.1a5bfb	48		pha		                PHA
.1a5bfc	20 eb 55	jsr $1a55eb	            JSR OP_FP_SUB
.1a5bff	20 c9 57	jsr $1a57c9	            JSR FARG1EQ0
.1a5c02	b0 11		bcs $1a5c15	                BCS are_equal
.1a5c04	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Check the high word
.1a5c06	89 00 80	bit #$8000	                BIT #$8000
.1a5c09	d0 05		bne $1a5c10	                BNE is_lt                   ; ARGUMENT1 < ARGUMENT2
.1a5c0b	a9 01 00	lda #$0001	is_gt           LDA #1                      ; ARGUMENT1 > ARGUMENT2: return 1
.1a5c0e	80 08		bra $1a5c18	                BRA ret_result
.1a5c10	a9 ff ff	lda #$ffff	is_lt           LDA #$FFFF                  ; ARGUMENT1 > ARGUMENT2: return -1
.1a5c13	80 03		bra $1a5c18	                BRA ret_result
.1a5c15	a9 00 00	lda #$0000	are_equal       LDA #0                      ; Equal: return 0
.1a5c18	fa		plx		ret_result      PLX                         ; Restore ARGUMENT1
.1a5c19	86 23		stx $0823	                STX ARGUMENT1
.1a5c1b	fa		plx		                PLX
.1a5c1c	86 25		stx $0825	                STX ARGUMENT1+2
.1a5c1e	28		plp		                PLP
.1a5c1f	fa		plx		                PLX
.1a5c20	60		rts		            RTS
.1a5c21					OP_FP_LT
.1a5c21	08		php		                PHP
.1a5c22	c2 30		rep #$30	            REP #$30
.1a5c24	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5c27	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5c2a	d0 05		bne $1a5c31	                BNE ret_false
.1a5c2c	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a5c2f	80 03		bra $1a5c34	                BRA done
.1a5c31					ret_false
.1a5c31	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a5c34	28		plp		done            PLP
.1a5c35	60		rts		            RTS
.1a5c36					OP_FP_GT
.1a5c36	08		php		                PHP
.1a5c37	c2 30		rep #$30	            REP #$30
.1a5c39	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5c3c	c9 01 00	cmp #$0001	                CMP #1
.1a5c3f	d0 05		bne $1a5c46	                BNE ret_false
.1a5c41	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a5c44	80 03		bra $1a5c49	                BRA done
.1a5c46					ret_false
.1a5c46	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a5c49	28		plp		done            PLP
.1a5c4a	60		rts		            RTS
.1a5c4b					OP_FP_EQ
.1a5c4b	08		php		                PHP
.1a5c4c	c2 30		rep #$30	            REP #$30
.1a5c4e	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5c51	c9 00 00	cmp #$0000	                CMP #0
.1a5c54	d0 05		bne $1a5c5b	                BNE ret_false
.1a5c56	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a5c59	80 03		bra $1a5c5e	                BRA done
.1a5c5b					ret_false
.1a5c5b	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a5c5e	28		plp		done            PLP
.1a5c5f	60		rts		            RTS
.1a5c60					OP_FP_LTE
.1a5c60	08		php		                PHP
.1a5c61	c2 30		rep #$30	            REP #$30
.1a5c63	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5c66	c9 01 00	cmp #$0001	                CMP #1
.1a5c69	f0 05		beq $1a5c70	                BEQ ret_false
.1a5c6b	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a5c6e	80 03		bra $1a5c73	                BRA done
.1a5c70					ret_false
.1a5c70	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a5c73	28		plp		done            PLP
.1a5c74	60		rts		            RTS
.1a5c75					OP_FP_GTE
.1a5c75	08		php		                PHP
.1a5c76	c2 30		rep #$30	            REP #$30
.1a5c78	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5c7b	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5c7e	f0 05		beq $1a5c85	                BEQ ret_false
.1a5c80	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a5c83	80 03		bra $1a5c88	                BRA done
.1a5c85					ret_false
.1a5c85	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a5c88	28		plp		done            PLP
.1a5c89	60		rts		            RTS
.1a5c8a					OP_FP_NE
.1a5c8a	08		php		                PHP
.1a5c8b	c2 30		rep #$30	            REP #$30
.1a5c8d	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5c90	c9 00 00	cmp #$0000	                CMP #0
.1a5c93	f0 05		beq $1a5c9a	                BEQ ret_false
.1a5c95	20 f2 05	jsr $1a05f2	            JSR SET_TRUE
.1a5c98	80 03		bra $1a5c9d	                BRA done
.1a5c9a					ret_false
.1a5c9a	20 04 06	jsr $1a0604	            JSR SET_FALSE
.1a5c9d	28		plp		done            PLP
.1a5c9e	60		rts		            RTS
.1a5c9f					STREMIT
.1a5c9f	08		php		                PHP
.1a5ca0	e2 20		sep #$20	            SEP #$20
.1a5ca2	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Append the character
.1a5ca4	c8		iny		                INY                         ; Advance the character pointer in Y
.1a5ca5	a9 00		lda #$00	                LDA #0                      ; And add the NULL
.1a5ca7	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5ca9	28		plp		                PLP
.1a5caa	60		rts		            RTS
.1a5cab					STREMITB
.1a5cab	da		phx		                PHX
.1a5cac	08		php		                PHP
.1a5cad	e2 20		sep #$20	            SEP #$20
.1a5caf	c9 80		cmp #$80	                CMP #$80
.1a5cb1	90 0a		bcc $1a5cbd	                BLT emit_digits
.1a5cb3	48		pha		                PHA
.1a5cb4	a9 2d		lda #$2d	                LDA #'-'                    ; Print a minus sign
.1a5cb6	20 9f 5c	jsr $1a5c9f	            JSR STREMIT
.1a5cb9	68		pla		                PLA
.1a5cba	49 ff		eor #$ff	                EOR #$FF                    ; And negate it
.1a5cbc	1a		inc a		                INC A
.1a5cbd					emit_digits
.1a5cbd	c2 30		rep #$30	            REP #$30
.1a5cbf	29 ff 00	and #$00ff	                AND #$00FF
.1a5cc2	c9 64 00	cmp #$0064	                CMP #100
.1a5cc5	90 0e		bcc $1a5cd5	                BLT chk_tens
.1a5cc7	a2 64 00	ldx #$0064	                LDX #100
.1a5cca	20 90 55	jsr $1a5590	            JSR UINT_DIV_A_X
.1a5ccd	18		clc		                CLC
.1a5cce	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.1a5cd1	20 9f 5c	jsr $1a5c9f	            JSR STREMIT
.1a5cd4	8a		txa		                TXA                         ; Put the remainder in A
.1a5cd5					chk_tens
.1a5cd5	a2 0a 00	ldx #$000a	                LDX #10
.1a5cd8	20 90 55	jsr $1a5590	            JSR UINT_DIV_A_X
.1a5cdb	18		clc		                CLC
.1a5cdc	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.1a5cdf	20 9f 5c	jsr $1a5c9f	            JSR STREMIT
.1a5ce2	8a		txa		                TXA                         ; Put the remainder in A
.1a5ce3					ones_digit
.1a5ce3	18		clc		                CLC
.1a5ce4	69 30 00	adc #$0030	                ADC #'0'                    ; Convert it to ASCII
.1a5ce7	20 9f 5c	jsr $1a5c9f	            JSR STREMIT
.1a5cea	28		plp		                PLP
.1a5ceb	fa		plx		                PLX
.1a5cec	60		rts		            RTS
.1a5ced					STRFINDEND
.1a5ced	08		php		                PHP
.1a5cee	e2 20		sep #$20	            SEP #$20
.1a5cf0	c2 10		rep #$10	            REP #$10
.1a5cf2	a0 00 00	ldy #$0000	                LDY #0
.1a5cf5	b7 23		lda [$0823],y	find_end        LDA [ARGUMENT1],Y           ; Scan to the end of the string
.1a5cf7	f0 03		beq $1a5cfc	                BEQ done
.1a5cf9	c8		iny		                INY
.1a5cfa	80 f9		bra $1a5cf5	                BRA find_end
.1a5cfc	28		plp		done            PLP
.1a5cfd	60		rts		            RTS
=6					FP_D = 6        ; Number of mantissa digits
.1a5cfe					FTOS
.1a5cfe	08		php		                PHP
.1a5cff	e2 20		sep #$20	            SEP #$20
.1a5d01	c2 10		rep #$10	            REP #$10
.1a5d03	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be the negative flag
.1a5d06	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be K
.1a5d09	f4 00 00	pea #$0000	                PEA #0                      ; This spot will be for the exponents
>0001					L_NEGATIVE      .word ?
>0003					L_K             .word ?
>0005					L_X1            .byte ?                     ; The binary exponent
>0006					L_EXP           .byte ?                     ; The decimal exponent
.1a5d0c	20 c9 57	jsr $1a57c9	            JSR FARG1EQ0
.1a5d0f	90 19		bcc $1a5d2a	                BCC chk_negative
.1a5d11	20 be 14	jsr $1a14be	            JSR TEMPSTRING
.1a5d14	e2 20		sep #$20	            SEP #$20
.1a5d16	a0 00 00	ldy #$0000	                LDY #0
.1a5d19	a9 20		lda #$20	                LDA #' '
.1a5d1b	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5d1d	c8		iny		                INY
.1a5d1e	a9 30		lda #$30	                LDA #'0'                    ; Return a "0"
.1a5d20	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5d22	c8		iny		                INY
.1a5d23	a9 00		lda #$00	                LDA #0
.1a5d25	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5d27	82 ce 00	brl $1a5df8	                BRL ret_result
.1a5d2a					chk_negative
.1a5d2a	e2 20		sep #$20	            SEP #$20
.1a5d2c	a5 26		lda $0826	                LDA ARGUMENT1+3             ; If N is negative, output a minus sign and negate N
.1a5d2e	10 08		bpl $1a5d38	                BPL not_negative
.1a5d30	29 7f		and #$7f	                AND #$7F                    ; Negate the number
.1a5d32	85 26		sta $0826	                STA ARGUMENT1+3
.1a5d34	a9 01		lda #$01	                LDA #1
.1a5d36	83 01		sta $01,s	                STA L_NEGATIVE              ; Set IsNegative to a TRUE value
.1a5d38					not_negative
.1a5d38	c2 20		rep #$20	            REP #$20
.1a5d3a	a9 00 00	lda #$0000	                LDA #0                      ; Initialize K to 0, K is a 1-byte signed integer. (SCRATCH is K)
.1a5d3d	83 03		sta $03,s	                STA L_K                     ; We're using a word here for convenience
.1a5d3f	c2 20		rep #$20	            REP #$20
.1a5d41	af 12 5e 1a	lda $1a5e12	            LDA ten_d_1
.1a5d45	85 29		sta $0829	            STA ARGUMENT2
.1a5d47	af 14 5e 1a	lda $1a5e14	            LDA ten_d_1+2
.1a5d4b	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5d4d	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5d50	89 00 80	bit #$8000	                BIT #$8000                  ; Is N < 10^(D-1)?
.1a5d53	d0 12		bne $1a5d67	                BNE shift_up
.1a5d55					shift_down
.1a5d55	20 8d 57	jsr $1a578d	            JSR FP_DIV10
.1a5d58	a3 03		lda $03,s	                LDA L_K
.1a5d5a	1a		inc a		                INC A
.1a5d5b	83 03		sta $03,s	                STA L_K                     ; Increment K
.1a5d5d	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5d60	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N < 10^(D-1)?
.1a5d63	f0 12		beq $1a5d77	                BEQ do_digits               ; Yes: we're ready to process digits
.1a5d65	80 ee		bra $1a5d55	                BRA shift_down              ; No: keep dividing
.1a5d67					shift_up
.1a5d67	20 44 57	jsr $1a5744	            JSR FP_MUL10
.1a5d6a	a3 03		lda $03,s	                LDA L_K
.1a5d6c	3a		dec a		                DEC A
.1a5d6d	83 03		sta $03,s	                STA L_K                     ; Decrement K
.1a5d6f	20 f2 5b	jsr $1a5bf2	            JSR FP_COMPARE
.1a5d72	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N >= 10 ^ (D-1)?
.1a5d75	f0 f0		beq $1a5d67	                BEQ shift_up                ; No: keep multiplying
.1a5d77					do_digits
.1a5d77	e2 30		sep #$30	            SEP #$30
.1a5d79	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5d7b	0a		asl a		                ASL A
.1a5d7c	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5d7e	2a		rol a		                ROL A
.1a5d7f	83 05		sta $05,s	                STA L_X1
.1a5d81	38		sec		                SEC
.1a5d82	a9 96		lda #$96	                LDA #150                    ; X := 150 - X1
.1a5d84	e3 05		sbc $05,s	                SBC L_X1
.1a5d86	aa		tax		                TAX
.1a5d87	f0 0f		beq $1a5d98	                BEQ emit_digits             ; If X = 0, just emit the digits
.1a5d89	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Set the implied '1' MSB of the mantissa
.1a5d8b	09 80		ora #$80	                ORA #$80
.1a5d8d	85 25		sta $0825	                STA ARGUMENT1+2
.1a5d8f	46 25		lsr $0825	shift_r         LSR ARGUMENT1+2             ; Shift the mantissa right
.1a5d91	66 24		ror $0824	                ROR ARGUMENT1+1
.1a5d93	66 23		ror $0823	                ROR ARGUMENT1
.1a5d95	ca		dex		                DEX
.1a5d96	d0 f7		bne $1a5d8f	                BNE shift_r                 ; Until X = 0
.1a5d98					emit_digits
.1a5d98	c2 10		rep #$10	            REP #$10
.1a5d9a	e2 20		sep #$20	            SEP #$20
.1a5d9c	64 26		stz $0826	                STZ ARGUMENT1+3             ; Blank out the MSB
.1a5d9e	a9 00		lda #$00	                LDA #TYPE_INTEGER           ; Make it an integer
.1a5da0	85 27		sta $0827	                STA ARGTYPE1
.1a5da2	a3 01		lda $01,s	                LDA L_NEGATIVE              ; Check IsNegative
.1a5da4	f0 11		beq $1a5db7	                BEQ get_raw_digits          ; If FALSE, just convert the raw digits
.1a5da6	c2 20		rep #$20	            REP #$20
.1a5da8	38		sec		                SEC                         ; Make the raw integer negative
.1a5da9	a9 00 00	lda #$0000	                LDA #0
.1a5dac	e5 23		sbc $0823	                SBC ARGUMENT1
.1a5dae	85 23		sta $0823	                STA ARGUMENT1
.1a5db0	a9 00 00	lda #$0000	                LDA #0
.1a5db3	e5 25		sbc $0825	                SBC ARGUMENT1+2
.1a5db5	85 25		sta $0825	                STA ARGUMENT1+2
.1a5db7					get_raw_digits
.1a5db7	20 1d 15	jsr $1a151d	            JSR ITOS
.1a5dba	c2 20		rep #$20	            REP #$20
.1a5dbc	a5 16		lda $0816	            LDA STRPTR
.1a5dbe	85 23		sta $0823	            STA ARGUMENT1
.1a5dc0	a5 18		lda $0818	            LDA STRPTR+2
.1a5dc2	85 25		sta $0825	            STA ARGUMENT1+2
.1a5dc4	20 ed 5c	jsr $1a5ced	            JSR STRFINDEND
.1a5dc7	e2 20		sep #$20	            SEP #$20
.1a5dc9	c8		iny		                INY                         ; Move the NULL up one byte
.1a5dca	a9 00		lda #$00	                LDA #0
.1a5dcc	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5dce	88		dey		insert_loop     DEY                         ; Move to the character before the one we just moved
.1a5dcf	88		dey		                DEY
.1a5dd0	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y           ; Get the character
.1a5dd2	c8		iny		                INY                         ; Move to the next space
.1a5dd3	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Store the character here
.1a5dd5	c0 02 00	cpy #$0002	                CPY #2                      ; Check to see if we just moved the 2nd character
.1a5dd8	d0 f4		bne $1a5dce	                BNE insert_loop             ; If not, keep moving the characters
.1a5dda	a9 2e		lda #$2e	                LDA #'.'                    ; Insert the '.' in the space we openned
.1a5ddc	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5dde	e2 20		sep #$20	            SEP #$20
.1a5de0	18		clc		                CLC                         ; Compute the exponent
.1a5de1	a3 03		lda $03,s	                LDA L_K
.1a5de3	69 05		adc #$05	                ADC #(FP_D - 1)
.1a5de5	83 06		sta $06,s	                STA L_EXP
.1a5de7	f0 19		beq $1a5e02	                BEQ done                    ; If it's 0, just return the number
.1a5de9	20 ed 5c	jsr $1a5ced	            JSR STRFINDEND
.1a5dec	a9 45		lda #$45	                LDA #'E'                    ; Append the "E"
.1a5dee	20 9f 5c	jsr $1a5c9f	            JSR STREMIT
.1a5df1	a3 06		lda $06,s	                LDA L_EXP
.1a5df3	20 ab 5c	jsr $1a5cab	            JSR STREMITB
.1a5df6	80 0a		bra $1a5e02	                BRA done                    ; TODO: reformat integer... add E and exponent...
.1a5df8					ret_result
.1a5df8	c2 20		rep #$20	            REP #$20
.1a5dfa	a5 16		lda $0816	                LDA STRPTR                  ; Return the temporary string we've assembled
.1a5dfc	85 23		sta $0823	                STA ARGUMENT1
.1a5dfe	a5 18		lda $0818	                LDA STRPTR+2
.1a5e00	85 25		sta $0825	                STA ARGUMENT1+2
.1a5e02					done
.1a5e02	e2 20		sep #$20	            SEP #$20
.1a5e04	a9 02		lda #$02	                LDA #TYPE_STRING
.1a5e06	85 27		sta $0827	                STA ARGTYPE1
.1a5e08	c2 20		rep #$20	            REP #$20
.1a5e0a	3b		tsc		                TSC                         ; Remove the locals from the stack
.1a5e0b	18		clc		                CLC
.1a5e0c	69 06 00	adc #$0006	                ADC #6
.1a5e0f	1b		tcs		                TCS
.1a5e10	28		plp		                PLP
.1a5e11	60		rts		            RTS
>1a5e12	00 50 c3 47			ten_d_1         .dword $47c35000            ; 10^(FP_D-1), where FP_D=5
>1a5e16	00 00 80 3f			FP_1_0          .dword $3f800000    ; Floating point constant: 1.0
>1a5e1a	f3 04 b5 3f			FP_SQR_2_0      .dword $3fb504f3    ; Floating point constant: sqrt(2.0)
>1a5e1e	f3 04 35 3f			FP_SQR_0_5      .dword $3f3504f3    ; Floating point constant: sqrt(0.2)

;******  Return to file: src\basic816.s


;******  Processing file: src\transcendentals.s

.1a5e22					Q_POLY_HR
.1a5e22	e2 20		sep #$20	            SEP #$20
.1a5e24	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5e26	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5e2a	c2 20		rep #$20	            REP #$20
.1a5e2c	bd 00 00	lda $0000,x	                LDA 0,X
.1a5e2f	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5e33	bd 02 00	lda $0002,x	                LDA 2,X
.1a5e36	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5e3a	88		dey		                DEY             ; (Y-1) more coefficients.
.1a5e3b	e8		inx		loop            INX             ; point to the next coefficient
.1a5e3c	e8		inx		                INX
.1a5e3d	e8		inx		                INX
.1a5e3e	e8		inx		                INX
.1a5e3f	e2 20		sep #$20	            SEP #$20
.1a5e41	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a5e43	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5e47	c2 20		rep #$20	            REP #$20
.1a5e49	af 23 08 00	lda $000823	                LDA @l ARGUMENT1
.1a5e4d	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5e51	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5e55	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5e59	ea		nop		                NOP
.1a5e5a	ea		nop		                NOP
.1a5e5b	ea		nop		                NOP
.1a5e5c	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5e60	48		pha		                PHA
.1a5e61	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5e65	8f 0a e2 af	sta $afe20a	                STA FP_MATH_INPUT0_HL
.1a5e69	68		pla		                PLA
.1a5e6a	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5e6e	e2 20		sep #$20	            SEP #$20
.1a5e70	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a5e72	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5e76	c2 20		rep #$20	            REP #$20
.1a5e78	bd 00 00	lda $0000,x	                LDA 0,X
.1a5e7b	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5e7f	bd 02 00	lda $0002,x	                LDA 2,X
.1a5e82	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5e86	ea		nop		                NOP
.1a5e87	ea		nop		                NOP
.1a5e88	ea		nop		                NOP
.1a5e89	88		dey		                DEY
.1a5e8a	f0 14		beq $1a5ea0	                BEQ done
.1a5e8c	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5e90	48		pha		                PHA
.1a5e91	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5e95	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5e99	68		pla		                PLA
.1a5e9a	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5e9e	80 9b		bra $1a5e3b	                BRA loop
.1a5ea0	af 08 e2 af	lda $afe208	done            LDA @l FP_MATH_OUTPUT_FP_LL
.1a5ea4	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.1a5ea8	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5eac	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.1a5eb0	60		rts		                RTS
.1a5eb1					Q_SQ
.1a5eb1	e2 20		sep #$20	            SEP #$20
.1a5eb3	a9 00		lda #$00	                LDA #0
.1a5eb5	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5eb9	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a5ebb	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5ebf	c2 20		rep #$20	            REP #$20
.1a5ec1	a5 23		lda $0823	                LDA ARGUMENT1
.1a5ec3	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5ec7	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5ecb	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5ecf	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5ed3	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5ed7	ea		nop		                NOP
.1a5ed8	ea		nop		                NOP
.1a5ed9	ea		nop		                NOP
.1a5eda	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5ede	85 23		sta $0823	                STA ARGUMENT1
.1a5ee0	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5ee4	85 25		sta $0825	                STA ARGUMENT1+2
.1a5ee6	60		rts		                RTS
.1a5ee7					Q_INV
.1a5ee7	e2 20		sep #$20	            SEP #$20
.1a5ee9	a9 00		lda #$00	                LDA #0
.1a5eeb	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5eef	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a5ef1	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5ef5	c2 20		rep #$20	            REP #$20
.1a5ef7	a5 23		lda $0823	                LDA ARGUMENT1
.1a5ef9	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5efd	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5f01	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5f05	af 3b 65 1a	lda $1a653b	                LDA @l fp_one
.1a5f09	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f0d	af 3d 65 1a	lda $1a653d	                LDA @l fp_one+2
.1a5f11	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5f15	ea		nop		                NOP
.1a5f16	ea		nop		                NOP
.1a5f17	ea		nop		                NOP
.1a5f18	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5f1c	85 23		sta $0823	                STA ARGUMENT1
.1a5f1e	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5f22	85 25		sta $0825	                STA ARGUMENT1+2
.1a5f24	60		rts		                RTS
.1a5f25					Q_FP_SCALE
.1a5f25	a2 00 00	ldx #$0000	                LDX #0
.1a5f28	a5 23		lda $0823	loop            LDA ARGUMENT1
.1a5f2a	c5 29		cmp $0829	                CMP ARGUMENT2
.1a5f2c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5f2e	e5 2b		sbc $082b	                SBC ARGUMENT2+2
.1a5f30	90 1e		bcc $1a5f50	                BCC done
.1a5f32	a5 23		lda $0823	                LDA ARGUMENT1
.1a5f34	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f38	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5f3a	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5f3e	ea		nop		                NOP
.1a5f3f	ea		nop		                NOP
.1a5f40	ea		nop		                NOP
.1a5f41	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5f45	85 23		sta $0823	                STA ARGUMENT1
.1a5f47	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5f4b	85 25		sta $0825	                STA ARGUMENT1+2
.1a5f4d	e8		inx		                INX
.1a5f4e	80 d8		bra $1a5f28	                BRA loop
.1a5f50					done
.1a5f50	60		rts		            RTS
.1a5f51					Q_FP_SCALE_TAU
.1a5f51	e2 20		sep #$20	            SEP #$20
.1a5f53	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5f55	10 09		bpl $1a5f60	                BPL notneg
.1a5f57	29 7f		and #$7f	                AND #$7F
.1a5f59	85 26		sta $0826	                STA ARGUMENT1+3
.1a5f5b	a9 01		lda #$01	                LDA #1
.1a5f5d	48		pha		                PHA
.1a5f5e	80 03		bra $1a5f63	                BRA compute
.1a5f60	a9 00		lda #$00	notneg          LDA #0          ; not negative, so push 0.
.1a5f62	48		pha		                PHA
.1a5f63	a9 40		lda #$40	compute         LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5f65	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5f69	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a5f6b	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5f6f	c2 30		rep #$30	            REP #$30
.1a5f71	af a3 65 1a	lda $1a65a3	                LDA @l twopi
.1a5f75	85 29		sta $0829	                STA ARGUMENT2
.1a5f77	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5f7b	af a5 65 1a	lda $1a65a5	                LDA @l twopi+2
.1a5f7f	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5f81	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5f85	20 25 5f	jsr $1a5f25	            JSR Q_FP_SCALE
.1a5f88	e2 20		sep #$20	            SEP #$20
.1a5f8a	68		pla		                PLA
.1a5f8b	c2 20		rep #$20	            REP #$20
.1a5f8d	f0 1e		beq $1a5fad	                BEQ done
.1a5f8f	a5 23		lda $0823	                LDA ARGUMENT1
.1a5f91	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f95	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5f97	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5f9b	ea		nop		                NOP
.1a5f9c	ea		nop		                NOP
.1a5f9d	ea		nop		                NOP
.1a5f9e	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5fa2	85 23		sta $0823	                STA ARGUMENT1
.1a5fa4	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5fa8	29 ff 7f	and #$7fff	                AND #$7fff
.1a5fab	85 25		sta $0825	                STA ARGUMENT1+2
.1a5fad					done
.1a5fad	60		rts		            RTS
.1a5fae					Q_FP_NORM_ANGLE
.1a5fae	5a		phy		                PHY
.1a5faf	a2 00 00	ldx #$0000	                LDX #0
.1a5fb2	a0 00 00	ldy #$0000	                LDY #0
.1a5fb5	a5 23		lda $0823	loop            LDA ARGUMENT1
.1a5fb7	df a7 65 1a	cmp $1a65a7,x	                CMP @l onepi,x
.1a5fbb	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5fbd	ff a9 65 1a	sbc $1a65a9,x	                SBC @l onepi+2,x
.1a5fc1	90 2c		bcc $1a5fef	                BCC less
.1a5fc3	bf a3 65 1a	lda $1a65a3,x	                LDA @l twopi,x
.1a5fc7	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5fcb	bf a5 65 1a	lda $1a65a5,x	                LDA @l twopi+2,x
.1a5fcf	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5fd3	a5 23		lda $0823	                LDA ARGUMENT1
.1a5fd5	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5fd9	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5fdb	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5fdf	ea		nop		                NOP
.1a5fe0	ea		nop		                NOP
.1a5fe1	ea		nop		                NOP
.1a5fe2	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5fe6	85 23		sta $0823	                STA ARGUMENT1
.1a5fe8	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5fec	85 25		sta $0825	                STA ARGUMENT1+2
.1a5fee	38		sec		                SEC             ; set carry to indicate a reflection
.1a5fef	98		tya		less            TYA             ; carry already cleared if we branched
.1a5ff0	2a		rol a		                ROL             ; shift carry into flags...
.1a5ff1	a8		tay		                TAY             ; and store back into y
.1a5ff2	e8		inx		                INX             ; next set of values
.1a5ff3	e8		inx		                INX
.1a5ff4	e8		inx		                INX
.1a5ff5	e8		inx		                INX
.1a5ff6	e0 0c 00	cpx #$000c	                CPX #12         ; check if we have already looked at 3
.1a5ff9	d0 ba		bne $1a5fb5	                BNE loop
.1a5ffb	98		tya		                TYA             ; copy Y to X, as that's what we have
.1a5ffc	aa		tax		                TAX
.1a5ffd	7a		ply		                PLY
.1a5ffe	60		rts		            RTS
.1a5fff					Q_FP_COS
.1a5fff	08		php		                PHP
.1a6000	c2 30		rep #$30	            REP #$30
.1a6002	48		pha		                PHA
.1a6003	da		phx		                PHX
.1a6004	20 b1 5e	jsr $1a5eb1	            JSR Q_SQ
.1a6007	8b		phb		                PHB
.1a6008	e2 20		sep #$20	            SEP #$20
.1a600a	a9 1a		lda #$1a	                LDA #`cos_coeff
.1a600c	48		pha		                PHA
.1a600d	ab		plb		                PLB
.1a600e	c2 20		rep #$20	            REP #$20
.1a6010	a2 e3 64	ldx #$64e3	                LDX #<>cos_coeff
.1a6013	5a		phy		                PHY
.1a6014	a0 05 00	ldy #$0005	                LDY #5
.1a6017	20 22 5e	jsr $1a5e22	            JSR Q_POLY_HR
.1a601a	7a		ply		                PLY
.1a601b	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.1a601e	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a6022	ab		plb		                PLB
.1a6023	fa		plx		                PLX
.1a6024	68		pla		                PLA
.1a6025	28		plp		                PLP
.1a6026	60		rts		            RTS
.1a6027					Q_FP_SIN
.1a6027	08		php		                PHP
.1a6028	c2 30		rep #$30	            REP #$30
.1a602a	48		pha		                PHA
.1a602b	da		phx		                PHX
.1a602c	a5 23		lda $0823	                LDA ARGUMENT1
.1a602e	85 29		sta $0829	                STA ARGUMENT2
.1a6030	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6032	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6034	20 b1 5e	jsr $1a5eb1	            JSR Q_SQ
.1a6037	8b		phb		                PHB
.1a6038	e2 20		sep #$20	            SEP #$20
.1a603a	a9 1a		lda #$1a	                LDA #`sin_coeff
.1a603c	48		pha		                PHA
.1a603d	ab		plb		                PLB
.1a603e	c2 20		rep #$20	            REP #$20
.1a6040	a2 f7 64	ldx #$64f7	                LDX #<>sin_coeff
.1a6043	5a		phy		                PHY
.1a6044	a0 05 00	ldy #$0005	                LDY #5
.1a6047	20 22 5e	jsr $1a5e22	            JSR Q_POLY_HR
.1a604a	7a		ply		                PLY
.1a604b	ab		plb		                PLB
.1a604c	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a604f	fa		plx		                PLX
.1a6050	68		pla		                PLA
.1a6051	28		plp		                PLP
.1a6052	60		rts		            RTS
.1a6053					Q_FP_TAN
.1a6053	08		php		                PHP
.1a6054	c2 30		rep #$30	            REP #$30
.1a6056	48		pha		                PHA
.1a6057	da		phx		                PHX
.1a6058	a5 23		lda $0823	                LDA ARGUMENT1
.1a605a	85 29		sta $0829	                STA ARGUMENT2
.1a605c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a605e	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6060	20 b1 5e	jsr $1a5eb1	            JSR Q_SQ
.1a6063	8b		phb		                PHB
.1a6064	e2 20		sep #$20	            SEP #$20
.1a6066	a9 1a		lda #$1a	                LDA #`tan_coeff
.1a6068	48		pha		                PHA
.1a6069	ab		plb		                PLB
.1a606a	c2 20		rep #$20	            REP #$20
.1a606c	a2 0b 65	ldx #$650b	                LDX #<>tan_coeff
.1a606f	5a		phy		                PHY
.1a6070	a0 05 00	ldy #$0005	                LDY #5
.1a6073	20 22 5e	jsr $1a5e22	            JSR Q_POLY_HR
.1a6076	7a		ply		                PLY
.1a6077	ab		plb		                PLB
.1a6078	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a607b	fa		plx		                PLX
.1a607c	68		pla		                PLA
.1a607d	28		plp		                PLP
.1a607e	60		rts		            RTS
.1a607f					Q_FP_LN
.1a607f	08		php		                PHP
.1a6080	c2 30		rep #$30	            REP #$30
.1a6082	48		pha		                PHA
.1a6083	da		phx		                PHX
.1a6084	e2 20		sep #$20	            SEP #$20
.1a6086	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a6088	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a608c	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a608e	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a6092	c2 20		rep #$20	            REP #$20
.1a6094	a5 23		lda $0823	                LDA ARGUMENT1
.1a6096	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a609a	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a609c	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a60a0	af 3b 65 1a	lda $1a653b	                LDA @l fp_one
.1a60a4	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a60a8	af 3d 65 1a	lda $1a653d	                LDA @l fp_one+2
.1a60ac	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a60b0	ea		nop		                NOP
.1a60b1	ea		nop		                NOP
.1a60b2	ea		nop		                NOP
.1a60b3	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a60b7	85 0c		sta $080c	                STA SCRATCH
.1a60b9	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a60bd	85 0e		sta $080e	                STA SCRATCH+2
.1a60bf	e2 20		sep #$20	            SEP #$20
.1a60c1	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a60c3	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a60c7	c2 20		rep #$20	            REP #$20
.1a60c9	ea		nop		                NOP
.1a60ca	ea		nop		                NOP
.1a60cb	ea		nop		                NOP
.1a60cc	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a60d0	85 10		sta $0810	                STA SCRATCH2
.1a60d2	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a60d6	85 12		sta $0812	                STA SCRATCH2+2
.1a60d8	e2 20		sep #$20	            SEP #$20
.1a60da	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a60dc	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a60e0	c2 20		rep #$20	            REP #$20
.1a60e2	a5 0c		lda $080c	                LDA SCRATCH
.1a60e4	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a60e8	a5 0e		lda $080e	                LDA SCRATCH+2
.1a60ea	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a60ee	a5 10		lda $0810	                LDA SCRATCH2
.1a60f0	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a60f4	a5 12		lda $0812	                LDA SCRATCH2+2
.1a60f6	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a60fa	ea		nop		                NOP
.1a60fb	ea		nop		                NOP
.1a60fc	ea		nop		                NOP
.1a60fd	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a6101	85 23		sta $0823	                STA ARGUMENT1
.1a6103	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a6107	85 25		sta $0825	                STA ARGUMENT1+2
.1a6109	e2 20		sep #$20	            SEP #$20
.1a610b	a9 08		lda #$08	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX0
.1a610d	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a6111	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a6113	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a6117	c2 20		rep #$20	            REP #$20
.1a6119	a5 23		lda $0823	                LDA ARGUMENT1
.1a611b	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a611f	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6121	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a6125	ea		nop		                NOP
.1a6126	ea		nop		                NOP
.1a6127	ea		nop		                NOP
.1a6128	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a612c	85 29		sta $0829	                STA ARGUMENT2
.1a612e	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a6132	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6134	20 b1 5e	jsr $1a5eb1	            JSR Q_SQ
.1a6137	8b		phb		                PHB
.1a6138	e2 20		sep #$20	            SEP #$20
.1a613a	a9 1a		lda #$1a	                LDA #`ln_coeff
.1a613c	48		pha		                PHA
.1a613d	ab		plb		                PLB
.1a613e	c2 20		rep #$20	            REP #$20
.1a6140	a2 1f 65	ldx #$651f	                LDX #<>ln_coeff
.1a6143	5a		phy		                PHY
.1a6144	a0 08 00	ldy #$0008	                LDY #8
.1a6147	20 22 5e	jsr $1a5e22	            JSR Q_POLY_HR
.1a614a	7a		ply		                PLY
.1a614b	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.1a614e	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a6152	8f 2d 08 00	sta $00082d	                STA @l ARGTYPE2
.1a6156	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a6159	ab		plb		                PLB
.1a615a	fa		plx		                PLX
.1a615b	68		pla		                PLA
.1a615c	28		plp		                PLP
.1a615d	60		rts		            RTS
.1a615e					FP_SIN
.1a615e	08		php		                PHP
.1a615f	c2 30		rep #$30	            REP #$30
.1a6161	48		pha		                PHA
.1a6162	da		phx		                PHX
.1a6163	20 51 5f	jsr $1a5f51	            JSR Q_FP_SCALE_TAU
.1a6166	20 ae 5f	jsr $1a5fae	            JSR Q_FP_NORM_ANGLE
.1a6169	da		phx		                PHX
.1a616a	8a		txa		                TXA
.1a616b	29 01 00	and #$0001	                AND #1
.1a616e	d0 05		bne $1a6175	                BNE do_cos
.1a6170	20 27 60	jsr $1a6027	            JSR Q_FP_SIN
.1a6173	80 03		bra $1a6178	                BRA maybe_neg
.1a6175					do_cos
.1a6175	20 ff 5f	jsr $1a5fff	            JSR Q_FP_COS
.1a6178	fa		plx		maybe_neg       PLX
.1a6179	8a		txa		                TXA
.1a617a	29 04 00	and #$0004	                AND #4
.1a617d	f0 0a		beq $1a6189	                BEQ done
.1a617f	e2 20		sep #$20	            SEP #$20
.1a6181	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a6183	09 80		ora #$80	                ORA #$80
.1a6185	85 26		sta $0826	                STA ARGUMENT1+3
.1a6187	c2 20		rep #$20	            REP #$20
.1a6189	fa		plx		done            PLX
.1a618a	68		pla		                PLA
.1a618b	28		plp		                PLP
.1a618c	60		rts		            RTS
.1a618d					FP_COS
.1a618d	08		php		                PHP
.1a618e	c2 30		rep #$30	            REP #$30
.1a6190	48		pha		                PHA
.1a6191	da		phx		                PHX
.1a6192	20 51 5f	jsr $1a5f51	            JSR Q_FP_SCALE_TAU
.1a6195	20 ae 5f	jsr $1a5fae	            JSR Q_FP_NORM_ANGLE
.1a6198	da		phx		                PHX
.1a6199	8a		txa		                TXA
.1a619a	29 01 00	and #$0001	                AND #1
.1a619d	d0 05		bne $1a61a4	                BNE do_sin
.1a619f	20 ff 5f	jsr $1a5fff	            JSR Q_FP_COS
.1a61a2	80 03		bra $1a61a7	                BRA maybe_neg
.1a61a4					do_sin
.1a61a4	20 27 60	jsr $1a6027	            JSR Q_FP_SIN
.1a61a7	fa		plx		maybe_neg       PLX
.1a61a8	8a		txa		                TXA
.1a61a9	29 02 00	and #$0002	                AND #2
.1a61ac	f0 0a		beq $1a61b8	                BEQ done
.1a61ae	e2 20		sep #$20	            SEP #$20
.1a61b0	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a61b2	09 80		ora #$80	                ORA #$80
.1a61b4	85 26		sta $0826	                STA ARGUMENT1+3
.1a61b6	c2 20		rep #$20	            REP #$20
.1a61b8	fa		plx		done            PLX
.1a61b9	68		pla		                PLA
.1a61ba	28		plp		                PLP
.1a61bb	60		rts		            RTS
.1a61bc					FP_TAN
.1a61bc	08		php		                PHP
.1a61bd	c2 30		rep #$30	            REP #$30
.1a61bf	48		pha		                PHA
.1a61c0	da		phx		                PHX
.1a61c1	20 51 5f	jsr $1a5f51	            JSR Q_FP_SCALE_TAU
.1a61c4	20 ae 5f	jsr $1a5fae	            JSR Q_FP_NORM_ANGLE
.1a61c7	20 53 60	jsr $1a6053	            JSR Q_FP_TAN
.1a61ca	8a		txa		                TXA
.1a61cb	29 01 00	and #$0001	                AND #1
.1a61ce	f0 03		beq $1a61d3	                BEQ no_inv
.1a61d0	20 e7 5e	jsr $1a5ee7	            JSR Q_INV
.1a61d3	8a		txa		no_inv          TXA
.1a61d4	e2 20		sep #$20	            SEP #$20
.1a61d6	4a		lsr a		                LSR
.1a61d7	4a		lsr a		                LSR
.1a61d8	69 00		adc #$00	                ADC #0
.1a61da	29 01		and #$01	                AND #1
.1a61dc	f0 06		beq $1a61e4	                BEQ no_neg
.1a61de	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a61e0	09 80		ora #$80	                ORA #$80
.1a61e2	85 26		sta $0826	                STA ARGUMENT1+3
.1a61e4					no_neg
.1a61e4	c2 20		rep #$20	            REP #$20
.1a61e6	fa		plx		                PLX
.1a61e7	68		pla		                PLA
.1a61e8	28		plp		                PLP
.1a61e9	60		rts		            RTS
.1a61ea					FP_LN
.1a61ea	08		php		                PHP
.1a61eb	c2 30		rep #$30	            REP #$30
.1a61ed	48		pha		                PHA
.1a61ee	da		phx		                PHX
.1a61ef	5a		phy		                PHY
.1a61f0	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a61f2	10 1f		bpl $1a6213	                BPL arg_ok
.1a61f4	08		php		            PHP
.1a61f5	c2 20		rep #$20	            REP #$20
.1a61f7	48		pha		            PHA
.1a61f8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a61fb	5b		tcd		            TCD
.1a61fc	68		pla		            PLA
.1a61fd	28		plp		            PLP
.1a61fe	e2 20		sep #$20	            SEP #$20
.1a6200	a9 17		lda #$17	            LDA #ERR_DOMAIN
.1a6202	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6206	c2 20		rep #$20	            REP #$20
.1a6208	29 ff 00	and #$00ff	            AND #$00FF
.1a620b	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a620e	e2 20		sep #$20	            SEP #$20
.1a6210	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6213					arg_ok
.1a6213	c2 30		rep #$30	            REP #$30
.1a6215	a5 23		lda $0823	                LDA ARGUMENT1
.1a6217	cf 3b 65 1a	cmp $1a653b	                CMP @l fp_one
.1a621b	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a621d	cf 3d 65 1a	cmp $1a653d	                CMP @l fp_one+2
.1a6221	b0 04		bcs $1a6227	                BCS gtone
.1a6223	20 e7 5e	jsr $1a5ee7	            JSR Q_INV
.1a6226	18		clc		                CLC
.1a6227	a9 00 00	lda #$0000	gtone           LDA #0
.1a622a	a8		tay		                TAY
.1a622b	2a		rol a		                ROL             ; Rotate Carry into A; 0 means negate
.1a622c	48		pha		                PHA
.1a622d	e2 20		sep #$20	            SEP #$20
.1a622f	a9 00		lda #$00	                LDA #0
.1a6231	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a6235	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a6237	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a623b	c2 20		rep #$20	            REP #$20
.1a623d	af 93 65 1a	lda $1a6593	                LDA @l eexp64
.1a6241	85 29		sta $0829	                STA ARGUMENT2
.1a6243	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6247	af 95 65 1a	lda $1a6595	                LDA @l eexp64+2
.1a624b	85 2b		sta $082b	                STA ARGUMENT2+2
.1a624d	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a6251	20 25 5f	jsr $1a5f25	            JSR Q_FP_SCALE
.1a6254	8a		txa		                TXA
.1a6255	f0 07		beq $1a625e	                BEQ chk16
.1a6257	0a		asl a		                ASL             ; multiply counter by 64
.1a6258	0a		asl a		                ASL
.1a6259	0a		asl a		                ASL
.1a625a	0a		asl a		                ASL
.1a625b	0a		asl a		                ASL
.1a625c	0a		asl a		                ASL
.1a625d	a8		tay		                TAY
.1a625e	af 97 65 1a	lda $1a6597	chk16           LDA @l eexp16
.1a6262	85 29		sta $0829	                STA ARGUMENT2
.1a6264	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6268	af 99 65 1a	lda $1a6599	                LDA @l eexp16+2
.1a626c	85 2b		sta $082b	                STA ARGUMENT2+2
.1a626e	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a6272	20 25 5f	jsr $1a5f25	            JSR Q_FP_SCALE
.1a6275	8a		txa		                TXA
.1a6276	f0 0b		beq $1a6283	                BEQ chk04
.1a6278	0a		asl a		                ASL             ; multiply counter by 16
.1a6279	0a		asl a		                ASL
.1a627a	0a		asl a		                ASL
.1a627b	0a		asl a		                ASL
.1a627c	85 29		sta $0829	                STA ARGUMENT2   ; and add into total
.1a627e	18		clc		                CLC
.1a627f	98		tya		                TYA
.1a6280	65 29		adc $0829	                ADC ARGUMENT2
.1a6282	a8		tay		                TAY
.1a6283	af 9b 65 1a	lda $1a659b	chk04           LDA @l eexp04
.1a6287	85 29		sta $0829	                STA ARGUMENT2
.1a6289	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a628d	af 9d 65 1a	lda $1a659d	                LDA @l eexp04+2
.1a6291	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6293	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a6297	20 25 5f	jsr $1a5f25	            JSR Q_FP_SCALE
.1a629a	8a		txa		                TXA
.1a629b	f0 09		beq $1a62a6	                BEQ chk01
.1a629d	0a		asl a		                ASL             ;multiply counter by 4
.1a629e	0a		asl a		                ASL
.1a629f	85 29		sta $0829	                STA ARGUMENT2   ;and add to total
.1a62a1	18		clc		                CLC
.1a62a2	98		tya		                TYA
.1a62a3	65 29		adc $0829	                ADC ARGUMENT2
.1a62a5	a8		tay		                TAY
.1a62a6	af 9f 65 1a	lda $1a659f	chk01           LDA @l eexp01
.1a62aa	85 29		sta $0829	                STA ARGUMENT2
.1a62ac	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a62b0	af a1 65 1a	lda $1a65a1	                LDA @l eexp01+2
.1a62b4	85 2b		sta $082b	                STA ARGUMENT2+2
.1a62b6	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a62ba	20 25 5f	jsr $1a5f25	            JSR Q_FP_SCALE
.1a62bd	86 29		stx $0829	                STX ARGUMENT2   ; add counter to total
.1a62bf	18		clc		                CLC
.1a62c0	98		tya		                TYA
.1a62c1	65 29		adc $0829	                ADC ARGUMENT2
.1a62c3	a8		tay		                TAY
.1a62c4	20 7f 60	jsr $1a607f	            JSR Q_FP_LN
.1a62c7	a5 23		lda $0823	                LDA ARGUMENT1
.1a62c9	85 29		sta $0829	                STA ARGUMENT2
.1a62cb	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a62cd	85 2b		sta $082b	                STA ARGUMENT2+2
.1a62cf	98		tya		                TYA
.1a62d0	85 23		sta $0823	                STA ARGUMENT1
.1a62d2	64 25		stz $0825	                STZ ARGUMENT1+2
.1a62d4	20 19 5b	jsr $1a5b19	            JSR ITOF
.1a62d7	20 f6 55	jsr $1a55f6	            JSR OP_FP_ADD
.1a62da	68		pla		                PLA
.1a62db	d0 07		bne $1a62e4	                BNE done
.1a62dd	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a62df	09 00 80	ora #$8000	                ORA #$8000
.1a62e2	85 25		sta $0825	                STA ARGUMENT1+2
.1a62e4	7a		ply		done            PLY
.1a62e5	fa		plx		                PLX
.1a62e6	68		pla		                PLA
.1a62e7	28		plp		                PLP
.1a62e8	60		rts		            RTS
.1a62e9					FP_ASIN
.1a62e9	08		php		                PHP
.1a62ea	c2 30		rep #$30	            REP #$30
.1a62ec	48		pha		                PHA
.1a62ed	da		phx		                PHX
.1a62ee	a5 23		lda $0823	                LDA ARGUMENT1
.1a62f0	85 29		sta $0829	                STA ARGUMENT2
.1a62f2	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a62f4	85 2b		sta $082b	                STA ARGUMENT2+2
.1a62f6	20 b1 5e	jsr $1a5eb1	            JSR Q_SQ
.1a62f9	8b		phb		                PHB
.1a62fa	e2 20		sep #$20	            SEP #$20
.1a62fc	a9 1a		lda #$1a	                LDA #`asin_coeff
.1a62fe	48		pha		                PHA
.1a62ff	ab		plb		                PLB
.1a6300	c2 20		rep #$20	            REP #$20
.1a6302	a2 43 65	ldx #$6543	                LDX #<>asin_coeff
.1a6305	a0 05 00	ldy #$0005	                LDY #5
.1a6308	20 22 5e	jsr $1a5e22	            JSR Q_POLY_HR
.1a630b	ab		plb		                PLB
.1a630c	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a630f	fa		plx		                PLX
.1a6310	68		pla		                PLA
.1a6311	28		plp		                PLP
.1a6312	60		rts		            RTS
.1a6313					FP_ACOS
.1a6313	08		php		                PHP
.1a6314	c2 30		rep #$30	            REP #$30
.1a6316	48		pha		                PHA
.1a6317	da		phx		                PHX
.1a6318	20 e9 62	jsr $1a62e9	            JSR FP_ASIN
.1a631b	af ab 65 1a	lda $1a65ab	                LDA @l halfpi
.1a631f	85 29		sta $0829	                STA ARGUMENT2
.1a6321	af ad 65 1a	lda $1a65ad	                LDA @l halfpi+2
.1a6325	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6327	20 eb 55	jsr $1a55eb	            JSR OP_FP_SUB
.1a632a	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a632c	49 00 80	eor #$8000	                EOR #$8000
.1a632f	85 25		sta $0825	                STA ARGUMENT1+2
.1a6331	fa		plx		                PLX
.1a6332	68		pla		                PLA
.1a6333	28		plp		                PLP
.1a6334	60		rts		            RTS
.1a6335					FP_ATAN
.1a6335	08		php		                PHP
.1a6336	c2 30		rep #$30	            REP #$30
.1a6338	48		pha		                PHA
.1a6339	da		phx		                PHX
.1a633a	a5 23		lda $0823	                LDA ARGUMENT1
.1a633c	85 29		sta $0829	                STA ARGUMENT2
.1a633e	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6340	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6342	20 b1 5e	jsr $1a5eb1	            JSR Q_SQ
.1a6345	8b		phb		                PHB
.1a6346	e2 20		sep #$20	            SEP #$20
.1a6348	a9 1a		lda #$1a	                LDA #`atan_coeff
.1a634a	48		pha		                PHA
.1a634b	ab		plb		                PLB
.1a634c	c2 20		rep #$20	            REP #$20
.1a634e	a2 57 65	ldx #$6557	                LDX #<>atan_coeff
.1a6351	a0 05 00	ldy #$0005	                LDY #5
.1a6354	20 22 5e	jsr $1a5e22	            JSR Q_POLY_HR
.1a6357	ab		plb		                PLB
.1a6358	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a635b	fa		plx		                PLX
.1a635c	68		pla		                PLA
.1a635d	28		plp		                PLP
.1a635e	60		rts		            RTS
.1a635f					Q_FP_POW_INT
.1a635f	c2 20		rep #$20	            REP #$20
.1a6361	a5 23		lda $0823	            LDA ARGUMENT1
.1a6363	85 29		sta $0829	            STA ARGUMENT2
.1a6365	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a6367	85 2b		sta $082b	            STA ARGUMENT2+2
.1a6369	c2 20		rep #$20	            REP #$20
.1a636b	af 3b 65 1a	lda $1a653b	            LDA @l fp_one
.1a636f	85 23		sta $0823	            STA ARGUMENT1
.1a6371	af 3d 65 1a	lda $1a653d	            LDA @l fp_one+2
.1a6375	85 25		sta $0825	            STA ARGUMENT1+2
.1a6377	8a		txa		loop            TXA
.1a6378	f0 30		beq $1a63aa	                BEQ done
.1a637a	4a		lsr a		                LSR
.1a637b	aa		tax		                TAX
.1a637c	90 03		bcc $1a6381	                BCC next
.1a637e	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a6381					next
.1a6381	c2 20		rep #$20	            REP #$20
.1a6383	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a6385	48		pha		            PHA
.1a6386	a5 23		lda $0823	            LDA ARGUMENT1
.1a6388	48		pha		            PHA
.1a6389	c2 20		rep #$20	            REP #$20
.1a638b	a5 29		lda $0829	            LDA ARGUMENT2
.1a638d	85 23		sta $0823	            STA ARGUMENT1
.1a638f	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a6391	85 25		sta $0825	            STA ARGUMENT1+2
.1a6393	20 b1 5e	jsr $1a5eb1	            JSR Q_SQ
.1a6396	c2 20		rep #$20	            REP #$20
.1a6398	a5 23		lda $0823	            LDA ARGUMENT1
.1a639a	85 29		sta $0829	            STA ARGUMENT2
.1a639c	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a639e	85 2b		sta $082b	            STA ARGUMENT2+2
.1a63a0	c2 20		rep #$20	            REP #$20
.1a63a2	68		pla		            PLA
.1a63a3	85 23		sta $0823	            STA ARGUMENT1
.1a63a5	68		pla		            PLA
.1a63a6	85 25		sta $0825	            STA ARGUMENT1+2
.1a63a8	80 cd		bra $1a6377	                BRA loop
.1a63aa					done
.1a63aa	60		rts		            RTS
.1a63ab					Q_FP_EXP
.1a63ab	08		php		                PHP
.1a63ac	c2 30		rep #$30	            REP #$30
.1a63ae	48		pha		                PHA
.1a63af	da		phx		                PHX
.1a63b0	8b		phb		                PHB
.1a63b1	e2 20		sep #$20	            SEP #$20
.1a63b3	a9 1a		lda #$1a	                LDA #`exp_coeff
.1a63b5	48		pha		                PHA
.1a63b6	ab		plb		                PLB
.1a63b7	c2 20		rep #$20	            REP #$20
.1a63b9	a2 6b 65	ldx #$656b	                LDX #<>exp_coeff
.1a63bc	5a		phy		                PHY
.1a63bd	a0 0a 00	ldy #$000a	                LDY #10
.1a63c0	20 22 5e	jsr $1a5e22	            JSR Q_POLY_HR
.1a63c3	7a		ply		                PLY
.1a63c4	ab		plb		                PLB
.1a63c5	fa		plx		                PLX
.1a63c6	68		pla		                PLA
.1a63c7	28		plp		                PLP
.1a63c8	60		rts		            RTS
.1a63c9					FP_EXP
.1a63c9	08		php		                PHP
.1a63ca	c2 30		rep #$30	            REP #$30
.1a63cc	48		pha		                PHA
.1a63cd	da		phx		                PHX
.1a63ce	5a		phy		                PHY
.1a63cf	a5 23		lda $0823	                LDA ARGUMENT1   ; special case for x==0
.1a63d1	05 25		ora $0825	                ORA ARGUMENT1+2
.1a63d3	d0 10		bne $1a63e5	                BNE notzero
.1a63d5	c2 20		rep #$20	            REP #$20
.1a63d7	af 3b 65 1a	lda $1a653b	            LDA @l fp_one
.1a63db	85 23		sta $0823	            STA ARGUMENT1
.1a63dd	af 3d 65 1a	lda $1a653d	            LDA @l fp_one+2
.1a63e1	85 25		sta $0825	            STA ARGUMENT1+2
.1a63e3	80 61		bra $1a6446	                BRA done
.1a63e5	a5 25		lda $0825	notzero         LDA ARGUMENT1+2 ; check if negative
.1a63e7	29 00 80	and #$8000	                AND #$8000
.1a63ea	a8		tay		                TAY             ; Y != 0 -> arg was negative
.1a63eb	f0 07		beq $1a63f4	                BEQ notneg
.1a63ed	a5 25		lda $0825	                LDA ARGUMENT1+2 ; negate x
.1a63ef	29 ff 7f	and #$7fff	                AND #$7FFF
.1a63f2	85 25		sta $0825	                STA ARGUMENT1+2
.1a63f4					notneg
.1a63f4	c2 20		rep #$20	            REP #$20
.1a63f6	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a63f8	48		pha		            PHA
.1a63f9	a5 23		lda $0823	            LDA ARGUMENT1
.1a63fb	48		pha		            PHA
.1a63fc	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a63ff	a6 23		ldx $0823	                LDX ARGUMENT1              ; INT(x) now in ARGUMENT1; low 16 bits into X
.1a6401	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a6404	c2 20		rep #$20	            REP #$20
.1a6406	a5 23		lda $0823	            LDA ARGUMENT1
.1a6408	85 29		sta $0829	            STA ARGUMENT2
.1a640a	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a640c	85 2b		sta $082b	            STA ARGUMENT2+2
.1a640e	c2 20		rep #$20	            REP #$20
.1a6410	68		pla		            PLA
.1a6411	85 23		sta $0823	            STA ARGUMENT1
.1a6413	68		pla		            PLA
.1a6414	85 25		sta $0825	            STA ARGUMENT1+2
.1a6416	20 eb 55	jsr $1a55eb	            JSR OP_FP_SUB
.1a6419	20 ab 63	jsr $1a63ab	            JSR Q_FP_EXP
.1a641c	c2 20		rep #$20	            REP #$20
.1a641e	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a6420	48		pha		            PHA
.1a6421	a5 23		lda $0823	            LDA ARGUMENT1
.1a6423	48		pha		            PHA
.1a6424	c2 20		rep #$20	            REP #$20
.1a6426	af 9f 65 1a	lda $1a659f	            LDA @leexp01
.1a642a	85 23		sta $0823	            STA ARGUMENT1
.1a642c	af a1 65 1a	lda $1a65a1	            LDA @leexp01+2
.1a6430	85 25		sta $0825	            STA ARGUMENT1+2
.1a6432	20 5f 63	jsr $1a635f	            JSR Q_FP_POW_INT
.1a6435	c2 20		rep #$20	            REP #$20
.1a6437	68		pla		            PLA
.1a6438	85 29		sta $0829	            STA ARGUMENT2
.1a643a	68		pla		            PLA
.1a643b	85 2b		sta $082b	            STA ARGUMENT2+2
.1a643d	20 8c 56	jsr $1a568c	            JSR OP_FP_MUL
.1a6440	98		tya		                TYA
.1a6441	f0 03		beq $1a6446	                BEQ done
.1a6443	20 e7 5e	jsr $1a5ee7	            JSR Q_INV
.1a6446	7a		ply		done            PLY
.1a6447	fa		plx		                PLX
.1a6448	68		pla		                PLA
.1a6449	28		plp		                PLP
.1a644a	60		rts		            RTS
.1a644b					FP_SQR
.1a644b	08		php		                PHP
.1a644c	c2 30		rep #$30	            REP #$30
.1a644e	48		pha		                PHA
.1a644f	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6451	10 1f		bpl $1a6472	                BPL arg_ok
.1a6453	08		php		            PHP
.1a6454	c2 20		rep #$20	            REP #$20
.1a6456	48		pha		            PHA
.1a6457	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a645a	5b		tcd		            TCD
.1a645b	68		pla		            PLA
.1a645c	28		plp		            PLP
.1a645d	e2 20		sep #$20	            SEP #$20
.1a645f	a9 17		lda #$17	            LDA #ERR_DOMAIN
.1a6461	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6465	c2 20		rep #$20	            REP #$20
.1a6467	29 ff 00	and #$00ff	            AND #$00FF
.1a646a	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a646d	e2 20		sep #$20	            SEP #$20
.1a646f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6472					arg_ok
.1a6472	c2 30		rep #$30	            REP #$30
.1a6474	05 23		ora $0823	                ORA ARGUMENT1
.1a6476	f0 68		beq $1a64e0	                BEQ done
.1a6478	c2 20		rep #$20	            REP #$20
.1a647a	af 3f 65 1a	lda $1a653f	            LDA @l fp_two
.1a647e	85 29		sta $0829	            STA ARGUMENT2
.1a6480	af 41 65 1a	lda $1a6541	            LDA @l fp_two+2
.1a6484	85 2b		sta $082b	            STA ARGUMENT2+2
.1a6486	e2 20		sep #$20	            SEP #$20
.1a6488	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a648a	85 2d		sta $082d	                STA ARGTYPE2
.1a648c	c2 20		rep #$20	            REP #$20
.1a648e	c2 20		rep #$20	            REP #$20
.1a6490	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a6492	48		pha		            PHA
.1a6493	a5 23		lda $0823	            LDA ARGUMENT1
.1a6495	48		pha		            PHA
.1a6496					loop
.1a6496	20 41 56	jsr $1a5641	            JSR OP_FP_DIV
.1a6499	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a649b	c5 2b		cmp $082b	                CMP ARGUMENT2+2
.1a649d	d0 09		bne $1a64a8	                BNE more
.1a649f	a5 23		lda $0823	                LDA ARGUMENT1
.1a64a1	45 29		eor $0829	                EOR ARGUMENT2
.1a64a3	29 f8 ff	and #$fff8	                AND #$FFF8
.1a64a6	f0 30		beq $1a64d8	                BEQ exitloop
.1a64a8					more
.1a64a8	20 f6 55	jsr $1a55f6	            JSR OP_FP_ADD
.1a64ab	c2 20		rep #$20	            REP #$20
.1a64ad	af 3f 65 1a	lda $1a653f	            LDA @l fp_two
.1a64b1	85 29		sta $0829	            STA ARGUMENT2
.1a64b3	af 41 65 1a	lda $1a6541	            LDA @l fp_two+2
.1a64b7	85 2b		sta $082b	            STA ARGUMENT2+2
.1a64b9	20 41 56	jsr $1a5641	            JSR OP_FP_DIV
.1a64bc	c2 20		rep #$20	            REP #$20
.1a64be	a5 23		lda $0823	            LDA ARGUMENT1
.1a64c0	85 29		sta $0829	            STA ARGUMENT2
.1a64c2	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a64c4	85 2b		sta $082b	            STA ARGUMENT2+2
.1a64c6	c2 20		rep #$20	            REP #$20
.1a64c8	68		pla		            PLA
.1a64c9	85 23		sta $0823	            STA ARGUMENT1
.1a64cb	68		pla		            PLA
.1a64cc	85 25		sta $0825	            STA ARGUMENT1+2
.1a64ce	c2 20		rep #$20	            REP #$20
.1a64d0	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a64d2	48		pha		            PHA
.1a64d3	a5 23		lda $0823	            LDA ARGUMENT1
.1a64d5	48		pha		            PHA
.1a64d6	80 be		bra $1a6496	                BRA loop
.1a64d8					exitloop
.1a64d8	c2 20		rep #$20	            REP #$20
.1a64da	68		pla		            PLA
.1a64db	85 29		sta $0829	            STA ARGUMENT2
.1a64dd	68		pla		            PLA
.1a64de	85 2b		sta $082b	            STA ARGUMENT2+2
.1a64e0	68		pla		done            PLA
.1a64e1	28		plp		                PLP
.1a64e2	60		rts		            RTS
.1a64e3					cos_coeff
>1a64e3	01 0d d0 37			                .dword $37D00D01
>1a64e7	61 0b b6 ba			                .dword $BAB60B61
>1a64eb	ab aa 2a 3d			                .dword $3D2AAAAB
>1a64ef	00 00 00 bf			                .dword $BF000000
>1a64f3	00 00 80 3f			                .dword $3F800000
.1a64f7					sin_coeff
>1a64f7	1d ef 38 36			                .dword $3638EF1D
>1a64fb	01 0d 50 b9			                .dword $B9500D01
>1a64ff	89 88 08 3c			                .dword $3C088889
>1a6503	ab aa 2a be			                .dword $BE2AAAAB
>1a6507	00 00 80 3f			                .dword $3F800000
.1a650b					tan_coeff
>1a650b	a4 27 b3 3c			                .dword $3CB327A4
>1a650f	d1 0d 5d 3d			                .dword $3D5D0DD1
>1a6513	89 88 08 3e			                .dword $3E088889
>1a6517	ab aa aa 3e			                .dword $3EAAAAAB
>1a651b	00 00 80 3f			                .dword $3F800000
.1a651f					ln_coeff
>1a651f	89 88 88 3d			                .dword $3D888889
>1a6523	d9 89 9d 3d			                .dword $3D9D89D9
>1a6527	8c 2e ba 3d			                .dword $3DBA2E8C
>1a652b	39 8e e3 3d			                .dword $3DE38E39
>1a652f	25 49 12 3e			                .dword $3E124925
>1a6533	cd cc 4c 3e			                .dword $3E4CCCCD
>1a6537	ab aa aa 3e			                .dword $3EAAAAAB
>1a653b	00 00 80 3f			fp_one          .dword $3F800000
>1a653f	00 00 00 40			fp_two          .dword $40000000
.1a6543					asin_coeff
>1a6543	8e e3 f8 3c			                .dword $3CF8E38E
>1a6547	6e db 36 3d			                .dword $3D36DB6E
>1a654b	9a 99 99 3d			                .dword $3D99999A
>1a654f	ab aa 2a 3e			                .dword $3E2AAAAB
>1a6553	00 00 80 3f			                .dword $3F800000
.1a6557					atan_coeff
>1a6557	39 8e e3 3d			                .dword $3DE38E39
>1a655b	25 49 12 be			                .dword $BE124925
>1a655f	cd cc 4c 3e			                .dword $3E4CCCCD
>1a6563	ab aa aa be			                .dword $BEAAAAAB
>1a6567	00 00 80 3f			                .dword $3F800000
.1a656b					exp_coeff
>1a656b	1d ef 38 36			        .dword $3638EF1D
>1a656f	01 0d d0 37			        .dword $37D00D01
>1a6573	01 0d 50 39			        .dword $39500D01
>1a6577	61 0b b6 3a			        .dword $3AB60B61
>1a657b	89 88 08 3c			        .dword $3C088889
>1a657f	ab aa 2a 3d			        .dword $3D2AAAAB
>1a6583	ab aa 2a 3e			        .dword $3E2AAAAB
>1a6587	00 00 00 3f			        .dword $3F000000
>1a658b	00 00 80 3f			        .dword $3F800000
>1a658f	00 00 80 3f			        .dword $3F800000
>1a6593	c1 2c a1 6d			eexp64          .dword $6DA12CC1
>1a6597	5f 97 07 4b			eexp16          .dword $4B07975F
>1a659b	81 64 5a 42			eexp04          .dword $425A6481
>1a659f	54 f8 2d 40			eexp01          .dword $402DF854
>1a65a3	db 0f c9 40			twopi           .dword $40C90FDB
>1a65a7	db 0f 49 40			onepi           .dword $40490FDB
>1a65ab	db 0f c9 3f			halfpi          .dword $3FC90FDB
>1a65af	db 0f 49 3f			quarterpi       .dword $3F490FDB

;******  Return to file: src\basic816.s


;******  Processing file: src\arrays.s

.1a65b3					ARR_ALLOC
.1a65b3	08		php		                PHP
.1a65b4	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a65b7	c2 20		rep #$20	            REP #$20
.1a65b9	a9 01 00	lda #$0001	                LDA #1                      ; ARGUMENT1 := 1
.1a65bc	85 23		sta $0823	                STA ARGUMENT1
.1a65be	a9 00 00	lda #$0000	                LDA #0
.1a65c1	85 25		sta $0825	                STA ARGUMENT1+2
.1a65c3	e2 20		sep #$20	            SEP #$20
.1a65c5	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.1a65c9	c2 20		rep #$20	            REP #$20
.1a65cb	29 ff 00	and #$00ff	                AND #$00FF
.1a65ce	85 8f		sta $088f	                STA MCOUNT                  ; Save it to MCOUNT for later
.1a65d0	a8		tay		                TAY                         ; Y := number of dimensions
.1a65d1	a2 01 00	ldx #$0001	                LDX #1                      ; X := index to size 0
.1a65d4					size_loop
.1a65d4	c2 20		rep #$20	            REP #$20
.1a65d6	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X           ; ARGUMENT2 := Ith dimension
.1a65da	85 29		sta $0829	                STA ARGUMENT2
.1a65dc	a9 00 00	lda #$0000	                LDA #0
.1a65df	85 2b		sta $082b	                STA ARGUMENT2+2
.1a65e1	e2 20		sep #$20	            SEP #$20
.1a65e3	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a65e5	85 2d		sta $082d	                STA ARGTYPE2
.1a65e7	c2 20		rep #$20	            REP #$20
.1a65e9	20 17 28	jsr $1a2817	            JSR OP_MULTIPLY
.1a65ec	e8		inx		                INX
.1a65ed	e8		inx		                INX
.1a65ee	88		dey		                DEY
.1a65ef	d0 e3		bne $1a65d4	                BNE size_loop               ; If there are more dimensions, take the next one
.1a65f1	c2 20		rep #$20	            REP #$20
.1a65f3	a9 04 00	lda #$0004	                LDA #ARGUMENT_SIZE-1        ; Size of a data item (don't include the type code)
.1a65f6	85 29		sta $0829	                STA ARGUMENT2
.1a65f8	a9 00 00	lda #$0000	                LDA #0
.1a65fb	85 2b		sta $082b	                STA ARGUMENT2+2
.1a65fd	20 17 28	jsr $1a2817	            JSR OP_MULTIPLY
.1a6600	e2 20		sep #$20	            SEP #$20
.1a6602	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF             ; SCRATCH := N * 2
.1a6606	85 0c		sta $080c	                STA SCRATCH
.1a6608	a9 00		lda #$00	                LDA #0
.1a660a	85 0d		sta $080d	                STA SCRATCH+1
.1a660c	c2 20		rep #$20	            REP #$20
.1a660e	06 0c		asl $080c	                ASL SCRATCH
.1a6610	38		sec		                SEC                         ; ARGUMENT1 := size of the complete block
.1a6611	a5 23		lda $0823	                LDA ARGUMENT1
.1a6613	65 0c		adc $080c	                ADC SCRATCH                 ; Size of data area + N*2 + 1 (in carry)
.1a6615	85 23		sta $0823	                STA ARGUMENT1
.1a6617	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6619	69 00 00	adc #$0000	                ADC #0
.1a661c	85 25		sta $0825	                STA ARGUMENT1+2
.1a661e	d0 29		bne $1a6649	                BNE too_big                 ; size > 16-bit? Yes: throw an error
.1a6620	e2 20		sep #$20	            SEP #$20
.1a6622	a5 ea		lda $08ea	                LDA TOFINDTYPE              ; Get the type
.1a6624	09 80		ora #$80	                ORA #$80                    ; Flip the flag to make it an array of that type
.1a6626	a6 23		ldx $0823	                LDX ARGUMENT1               ; Get the computed size
.1a6628	20 90 10	jsr $1a1090	            JSR ALLOC
.1a662b	e2 20		sep #$20	            SEP #$20
.1a662d	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.1a6631	87 c0		sta [$08c0]	                STA [CURRBLOCK]             ; Write the number of dimensions to the array's preamble
.1a6633	a0 01 00	ldy #$0001	                LDY #1
.1a6636	a2 00 00	ldx #$0000	                LDX #0
.1a6639					copy_loop
.1a6639	e2 20		sep #$20	            SEP #$20
.1a663b	bf 01 4d 00	lda $004d01,x	                LDA @lARRIDXBUF+1,X         ; ARGUMENT2 := Ith dimension
.1a663f	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y           ; And write the dimension to the array's preamble
.1a6641	e4 8f		cpx $088f	                CPX MCOUNT                  ; Have we written the last byte?
.1a6643	f0 23		beq $1a6668	                BEQ null_array              ; Yes: clear the array
.1a6645	e8		inx		                INX                         ; No: move to the next byte
.1a6646	c8		iny		                INY
.1a6647	80 f0		bra $1a6639	                BRA copy_loop
.1a6649					too_big
.1a6649	08		php		            PHP
.1a664a	c2 20		rep #$20	            REP #$20
.1a664c	48		pha		            PHA
.1a664d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6650	5b		tcd		            TCD
.1a6651	68		pla		            PLA
.1a6652	28		plp		            PLP
.1a6653	e2 20		sep #$20	            SEP #$20
.1a6655	a9 09		lda #$09	            LDA #ERR_RANGE
.1a6657	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a665b	c2 20		rep #$20	            REP #$20
.1a665d	29 ff 00	and #$00ff	            AND #$00FF
.1a6660	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6663	e2 20		sep #$20	            SEP #$20
.1a6665	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6668					null_array
.1a6668	e2 20		sep #$20	            SEP #$20
.1a666a	38		sec		                SEC                         ; INDEX := pointer to first value
.1a666b	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a666d	67 c0		adc [$08c0]	                ADC [CURRBLOCK]
.1a666f	85 08		sta $0808	                STA INDEX
.1a6671	a5 c1		lda $08c1	                LDA CURRBLOCK+1
.1a6673	69 00		adc #$00	                ADC #0
.1a6675	85 09		sta $0809	                STA INDEX+1
.1a6677	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a6679	69 00		adc #$00	                ADC #0
.1a667b	85 0a		sta $080a	                STA INDEX+2
.1a667d	64 0b		stz $080b	                STZ INDEX+3
.1a667f	c2 20		rep #$20	            REP #$20
.1a6681	a0 05 00	ldy #$0005	                LDY #HEAPOBJ.END            ; SCRATCH := pointer the the first byte after the array
.1a6684	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a6686	85 0c		sta $080c	                STA SCRATCH
.1a6688	e2 20		sep #$20	            SEP #$20
.1a668a	c8		iny		                INY
.1a668b	c8		iny		                INY
.1a668c	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a668e	85 0e		sta $080e	                STA SCRATCH+2
.1a6690	64 0f		stz $080f	                STZ SCRATCH+3
.1a6692					clr_loop
.1a6692	e2 20		sep #$20	            SEP #$20
.1a6694	a9 00		lda #$00	                LDA #0
.1a6696	87 08		sta [$0808]	                STA [INDEX]                 ; Clear the byte
.1a6698	c2 20		rep #$20	            REP #$20
.1a669a	18		clc		                CLC                         ; Increment INDEX
.1a669b	a5 08		lda $0808	                LDA INDEX
.1a669d	69 01 00	adc #$0001	                ADC #1
.1a66a0	85 08		sta $0808	                STA INDEX
.1a66a2	a5 0a		lda $080a	                LDA INDEX+2
.1a66a4	69 00 00	adc #$0000	                ADC #0
.1a66a7	85 0a		sta $080a	                STA INDEX+2
.1a66a9	c5 0e		cmp $080e	                CMP SCRATCH+2               ; INDEX == SCRATCH?
.1a66ab	d0 e5		bne $1a6692	                BNE clr_loop                ; No: write to this next byte
.1a66ad	a5 08		lda $0808	                LDA INDEX
.1a66af	c5 0c		cmp $080c	                CMP SCRATCH
.1a66b1	d0 df		bne $1a6692	                BNE clr_loop
.1a66b3					done
.1a66b3	28		plp		                PLP
.1a66b4	60		rts		            RTS
.1a66b5					ARR_CELL
.1a66b5	08		php		                PHP
.1a66b6	c2 20		rep #$20	            REP #$20
.1a66b8	64 08		stz $0808	                STZ INDEX               ; INDEX := 0
.1a66ba	64 0a		stz $080a	                STZ INDEX+2
.1a66bc	e2 20		sep #$20	            SEP #$20
.1a66be	af 00 4d 00	lda $004d00	                LDA @l ARRIDXBUF        ; MCOUNT := N (number of dimensions)
.1a66c2	85 8f		sta $088f	                STA MCOUNT
.1a66c4	64 90		stz $0890	                STZ MCOUNT+1
.1a66c6	a2 01 00	ldx #$0001	                LDX #1                  ; X := index to dimension 0
.1a66c9	e2 20		sep #$20	            SEP #$20
.1a66cb	a7 c0		lda [$08c0]	                LDA [CURRBLOCK]         ; Make sure the dimensions of the array
.1a66cd	c5 8f		cmp $088f	                CMP MCOUNT              ; ... match those requested
.1a66cf	f0 22		beq $1a66f3	                BEQ dims_match          ; Yes: the dimensions match
.1a66d1	a6 8f		ldx $088f	                LDX MCOUNT
.1a66d3	00		brk #		                BRK
.1a66d4					arg_err
.1a66d4	08		php		            PHP
.1a66d5	c2 20		rep #$20	            REP #$20
.1a66d7	48		pha		            PHA
.1a66d8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a66db	5b		tcd		            TCD
.1a66dc	68		pla		            PLA
.1a66dd	28		plp		            PLP
.1a66de	e2 20		sep #$20	            SEP #$20
.1a66e0	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a66e2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a66e6	c2 20		rep #$20	            REP #$20
.1a66e8	29 ff 00	and #$00ff	            AND #$00FF
.1a66eb	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a66ee	e2 20		sep #$20	            SEP #$20
.1a66f0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a66f3	c9 01		cmp #$01	dims_match      CMP #1                  ; Check to see if this array is one dimensional
.1a66f5	f0 3a		beq $1a6731	                BEQ add_last            ; If so, just add the index of the cell to INDEX
.1a66f7	a0 01 00	ldy #$0001	                LDY #1
.1a66fa					index_loop
.1a66fa	e2 20		sep #$20	            SEP #$20
.1a66fc	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; ARGUMENT1 := I_j
.1a6700	85 23		sta $0823	                STA ARGUMENT1
.1a6702	64 24		stz $0824	                STZ ARGUMENT1+1
.1a6704	64 25		stz $0825	                STZ ARGUMENT1+2
.1a6706	64 26		stz $0826	                STZ ARGUMENT1+3
.1a6708	b7 c0		lda [$08c0],y	                LDA [CURRBLOCK],Y       ; ARGUMENT2 := D_j
.1a670a	85 29		sta $0829	                STA ARGUMENT2
.1a670c	64 2a		stz $082a	                STZ ARGUMENT2+1
.1a670e	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a6710	64 2c		stz $082c	                STZ ARGUMENT2+3
.1a6712	a5 23		lda $0823	                LDA ARGUMENT1
.1a6714	c5 29		cmp $0829	                CMP ARGUMENT2           ; Is I_j >= D_j
.1a6716	b0 68		bcs $1a6780	                BGE range_err           ; Yes: throw an out-of-range error
.1a6718	20 17 28	jsr $1a2817	            JSR OP_MULTIPLY
.1a671b	c2 20		rep #$20	            REP #$20
.1a671d	18		clc		                CLC                     ; INDEX := INDEX + ARGUMENT1
.1a671e	a5 08		lda $0808	                LDA INDEX
.1a6720	65 23		adc $0823	                ADC ARGUMENT1
.1a6722	85 08		sta $0808	                STA INDEX
.1a6724	a5 0a		lda $080a	                LDA INDEX+2
.1a6726	65 25		adc $0825	                ADC ARGUMENT1+2
.1a6728	85 0a		sta $080a	                STA INDEX+2
.1a672a	e8		inx		                INX
.1a672b	e8		inx		                INX
.1a672c	c8		iny		                INY
.1a672d	c4 8f		cpy $088f	                CPY MCOUNT              ; Are we on the last index?
.1a672f	d0 c9		bne $1a66fa	                BNE index_loop          ; No: move to the next index and try again
.1a6731					add_last
.1a6731	e2 20		sep #$20	            SEP #$20
.1a6733	18		clc		                CLC
.1a6734	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; INDEX := INDEX + I_(n-1)
.1a6738	85 90		sta $0890	                STA MCOUNT+1
.1a673a	65 08		adc $0808	                ADC INDEX
.1a673c	85 08		sta $0808	                STA INDEX
.1a673e	a5 09		lda $0809	                LDA INDEX+1
.1a6740	69 00		adc #$00	                ADC #0
.1a6742	85 09		sta $0809	                STA INDEX+1
.1a6744	c2 20		rep #$20	            REP #$20
.1a6746	a5 0a		lda $080a	                LDA INDEX+2
.1a6748	69 00 00	adc #$0000	                ADC #0
.1a674b	85 0a		sta $080a	                STA INDEX+2
.1a674d	c2 20		rep #$20	            REP #$20
.1a674f	06 08		asl $0808	                ASL INDEX               ; INDEX := INDEX * 4 (size of a value)
.1a6751	26 0a		rol $080a	                ROL INDEX+2
.1a6753	06 08		asl $0808	                ASL INDEX
.1a6755	26 0a		rol $080a	                ROL INDEX+2
.1a6757	e2 20		sep #$20	            SEP #$20
.1a6759	38		sec		                SEC
.1a675a	a5 08		lda $0808	                LDA INDEX
.1a675c	65 8f		adc $088f	                ADC MCOUNT
.1a675e	85 08		sta $0808	                STA INDEX
.1a6760	a5 09		lda $0809	                LDA INDEX+1
.1a6762	69 00		adc #$00	                ADC #0
.1a6764	85 09		sta $0809	                STA INDEX+1
.1a6766	c2 20		rep #$20	            REP #$20
.1a6768	a5 0a		lda $080a	                LDA INDEX+2
.1a676a	69 00 00	adc #$0000	                ADC #0
.1a676d	85 0a		sta $080a	                STA INDEX+2
.1a676f	18		clc		                CLC                     ; INDEX := INDEX + CURRBLOCK (point to the address desired)
.1a6770	a5 08		lda $0808	                LDA INDEX
.1a6772	65 c0		adc $08c0	                ADC CURRBLOCK
.1a6774	85 08		sta $0808	                STA INDEX
.1a6776	e2 20		sep #$20	            SEP #$20
.1a6778	a5 0a		lda $080a	                LDA INDEX+2
.1a677a	65 c2		adc $08c2	                ADC CURRBLOCK+2
.1a677c	85 0a		sta $080a	                STA INDEX+2
.1a677e	28		plp		                PLP
.1a677f	60		rts		            RTS
.1a6780					range_err
.1a6780	08		php		            PHP
.1a6781	c2 20		rep #$20	            REP #$20
.1a6783	48		pha		            PHA
.1a6784	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6787	5b		tcd		            TCD
.1a6788	68		pla		            PLA
.1a6789	28		plp		            PLP
.1a678a	e2 20		sep #$20	            SEP #$20
.1a678c	a9 09		lda #$09	            LDA #ERR_RANGE
.1a678e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6792	c2 20		rep #$20	            REP #$20
.1a6794	29 ff 00	and #$00ff	            AND #$00FF
.1a6797	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a679a	e2 20		sep #$20	            SEP #$20
.1a679c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a679f					ARR_SET
.1a679f	08		php		                PHP
.1a67a0	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a67a3	e2 20		sep #$20	            SEP #$20
.1a67a5	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.1a67a8	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a67aa	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.1a67ac	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string array?
.1a67ae	d0 05		bne $1a67b5	                BNE chk_integer
.1a67b0	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a67b3	80 10		bra $1a67c5	                BRA save_type
.1a67b5	c9 00		cmp #$00	chk_integer     CMP #TYPE_INTEGER   ; Is it an integer array?
.1a67b7	d0 05		bne $1a67be	                BNE chk_float
.1a67b9	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a67bc	80 07		bra $1a67c5	                BRA save_type
.1a67be	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT     ; Is it an float array?
.1a67c0	d0 2b		bne $1a67ed	                BNE type_mismatch   ; No: throw a type mismatch error... something strange...
.1a67c2	20 84 07	jsr $1a0784	            JSR ASS_ARG1_FLOAT
.1a67c5	a5 27		lda $0827	save_type       LDA ARGTYPE1        ; Save the type
.1a67c7	48		pha		                PHA
.1a67c8	c2 20		rep #$20	            REP #$20
.1a67ca	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Save ARGUMENT1
.1a67cc	48		pha		                PHA
.1a67cd	a5 23		lda $0823	                LDA ARGUMENT1
.1a67cf	48		pha		                PHA
.1a67d0	20 b5 66	jsr $1a66b5	            JSR ARR_CELL
.1a67d3	68		pla		                PLA                 ; Restore ARGUMENT1
.1a67d4	85 23		sta $0823	                STA ARGUMENT1
.1a67d6	68		pla		                PLA
.1a67d7	85 25		sta $0825	                STA ARGUMENT1+2
.1a67d9	e2 20		sep #$20	            SEP #$20
.1a67db	68		pla		                PLA
.1a67dc	85 27		sta $0827	                STA ARGTYPE1
.1a67de	c2 20		rep #$20	            REP #$20
.1a67e0	a5 23		lda $0823	                LDA ARGUMENT1       ; Set the value in the cell
.1a67e2	87 08		sta [$0808]	                STA [INDEX]
.1a67e4	a0 02 00	ldy #$0002	                LDY #2
.1a67e7	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a67e9	97 08		sta [$0808],y	                STA [INDEX],Y
.1a67eb	28		plp		                PLP
.1a67ec	60		rts		            RTS
.1a67ed					type_mismatch
.1a67ed	08		php		            PHP
.1a67ee	c2 20		rep #$20	            REP #$20
.1a67f0	48		pha		            PHA
.1a67f1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a67f4	5b		tcd		            TCD
.1a67f5	68		pla		            PLA
.1a67f6	28		plp		            PLP
.1a67f7	e2 20		sep #$20	            SEP #$20
.1a67f9	a9 04		lda #$04	            LDA #ERR_TYPE
.1a67fb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a67ff	c2 20		rep #$20	            REP #$20
.1a6801	29 ff 00	and #$00ff	            AND #$00FF
.1a6804	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6807	e2 20		sep #$20	            SEP #$20
.1a6809	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a680c					ARR_REF
.1a680c	08		php		                PHP
.1a680d	20 cc 12	jsr $1a12cc	            JSR HEAP_GETHED
.1a6810	f4 00 00	pea #$0000	                PEA #0              ; Make room on the stack that ARR_CELL expects
.1a6813	f4 00 00	pea #$0000	                PEA #0
.1a6816	e2 20		sep #$20	            SEP #$20
.1a6818	48		pha		                PHA
.1a6819	20 b5 66	jsr $1a66b5	            JSR ARR_CELL
.1a681c	e2 20		sep #$20	            SEP #$20
.1a681e	68		pla		                PLA
.1a681f	c2 20		rep #$20	            REP #$20
.1a6821	68		pla		                PLA
.1a6822	68		pla		                PLA
.1a6823	c2 20		rep #$20	            REP #$20
.1a6825	a7 08		lda [$0808]	                LDA [INDEX]         ; Get the value in the cell
.1a6827	85 23		sta $0823	                STA ARGUMENT1
.1a6829	a0 02 00	ldy #$0002	                LDY #2
.1a682c	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a682e	85 25		sta $0825	                STA ARGUMENT1+2
.1a6830	e2 20		sep #$20	            SEP #$20
.1a6832	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.1a6835	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a6837	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.1a6839	85 27		sta $0827	                STA ARGTYPE1        ; Set the type of the return value
.1a683b	20 20 18	jsr $1a1820	            JSR STR_NORMAL
.1a683e	28		plp		                PLP
.1a683f	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\dos.s

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					FILESIZE            .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
>1af073					CLUSTER_BUFF    .fill 512           ; A buffer for cluster read/write operations
.1af273					FD_IN
>1af273					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>1af274					DEV                 .byte ?             ; The ID of the device holding the file
>1af275					PATH                .dword ?            ; Pointer to a NULL terminated path string
>1af279					CLUSTER             .dword ?            ; The current cluster of the file.
>1af27d					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>1af281					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>1af285					FILESIZE            .dword ?            ; The size of the file
>1af289					CREATE_DATE         .word ?             ; The creation date of the file
>1af28b					CREATE_TIME         .word ?             ; The creation time of the file
>1af28d					MODIFIED_DATE       .word ?             ; The modification date of the file
>1af28f					MODIFIED_TIME       .word ?             ; The modification time of the file
.1a6840					PR_FILESIZE
.1a6840	da		phx		                PHX
.1a6841	0b		phd		                PHD
.1a6842	08		php		                PHP
.1a6843	08		php		            PHP
.1a6844	c2 20		rep #$20	            REP #$20
.1a6846	48		pha		            PHA
.1a6847	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a684a	5b		tcd		            TCD
.1a684b	68		pla		            PLA
.1a684c	28		plp		            PLP
.1a684d	c2 30		rep #$30	            REP #$30
.1a684f	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6851	89 f0 ff	bit #$fff0	                BIT #$FFF0              ; Check to see if the amount is in MB range
.1a6854	d0 29		bne $1a687f	                BNE pr_mb               ; If so, print it in MBs
.1a6856	89 0f 00	bit #$000f	                BIT #$000F              ; Check to see if the amount is in KB range
.1a6859	d0 0c		bne $1a6867	                BNE pr_kb
.1a685b	a5 23		lda $0823	                LDA ARGUMENT1
.1a685d	89 00 fc	bit #$fc00	                BIT #$FC00
.1a6860	d0 05		bne $1a6867	                BNE pr_kb               ; If so, print it in KBs
.1a6862					pr_regular
.1a6862	20 8e 45	jsr $1a458e	            JSR PR_INTEGER
.1a6865	80 2e		bra $1a6895	                BRA done
.1a6867	a2 0a 00	ldx #$000a	pr_kb           LDX #10                 ; Shift so the amount in KB is in ARGUMENT1
.1a686a	46 25		lsr $0825	kb_shift        LSR ARGUMENT1+2
.1a686c	66 23		ror $0823	                ROR ARGUMENT1
.1a686e	ca		dex		                DEX
.1a686f	d0 f9		bne $1a686a	                BNE kb_shift
.1a6871	20 8e 45	jsr $1a458e	            JSR PR_INTEGER
.1a6874	e2 20		sep #$20	            SEP #$20
.1a6876	a9 4b		lda #$4b	                LDA #'K'
.1a6878	20 18 00	jsr $1a0018	            JSR PRINTC
.1a687b	c2 20		rep #$20	            REP #$20
.1a687d	80 16		bra $1a6895	                BRA done
.1a687f	a2 14 00	ldx #$0014	pr_mb           LDX #20                 ; Shift so the amount in MB is in ARGUMENT1
.1a6882	46 25		lsr $0825	mb_shift        LSR ARGUMENT1+2
.1a6884	66 23		ror $0823	                ROR ARGUMENT1
.1a6886	ca		dex		                DEX
.1a6887	d0 f9		bne $1a6882	                BNE mb_shift
.1a6889	20 8e 45	jsr $1a458e	            JSR PR_INTEGER
.1a688c	e2 20		sep #$20	            SEP #$20
.1a688e	a9 4d		lda #$4d	                LDA #'M'
.1a6890	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6893	c2 20		rep #$20	            REP #$20
.1a6895	28		plp		done            PLP
.1a6896	2b		pld		                PLD
.1a6897	fa		plx		                PLX
.1a6898	60		rts		            RTS
.1a6899					CMD_DIR
.1a6899	0b		phd		                PHD
.1a689a	08		php		                PHP
.1a689b	c2 30		rep #$30	            REP #$30
.1a689d	a9 00 00	lda #$0000	                LDA #0                      ; Zero out the pagination line count
.1a68a0	8f b6 08 00	sta $0008b6	                STA @l LINECOUNT
.1a68a4	8f b8 08 00	sta $0008b8	                STA @l LINECOUNT+2
.1a68a8	e2 20		sep #$20	            SEP #$20
.1a68aa	20 3b 22	jsr $1a223b	            JSR PEEK_TOK
.1a68ad	c9 00		cmp #$00	                CMP #0
.1a68af	f0 08		beq $1a68b9	                BEQ set_null                ; If none provided, set the path to empty
.1a68b1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a68b4	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a68b7	80 11		bra $1a68ca	                BRA set_fd
.1a68b9					set_null
.1a68b9	c2 20		rep #$20	            REP #$20
.1a68bb	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT1 to the NULL string
.1a68be	85 23		sta $0823	                STA ARGUMENT1
.1a68c0	85 25		sta $0825	                STA ARGUMENT1+2
.1a68c2	e2 20		sep #$20	            SEP #$20
.1a68c4	a9 02		lda #$02	                LDA #TYPE_STRING
.1a68c6	85 27		sta $0827	                STA ARGTYPE1
.1a68c8	c2 20		rep #$20	            REP #$20
.1a68ca					set_fd
.1a68ca	20 fa 69	jsr $1a69fa	            JSR SETFILEDESC
.1a68cd	22 08 11 00	jsl $001108	                JSL FK_DIROPEN              ; Open up the directory
.1a68d1	b0 22		bcs $1a68f5	                BCS pr_first
.1a68d3	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a68d6	08		php		            PHP
.1a68d7	c2 20		rep #$20	            REP #$20
.1a68d9	48		pha		            PHA
.1a68da	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a68dd	5b		tcd		            TCD
.1a68de	68		pla		            PLA
.1a68df	28		plp		            PLP
.1a68e0	e2 20		sep #$20	            SEP #$20
.1a68e2	a9 10		lda #$10	            LDA #ERR_DIRECTORY
.1a68e4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a68e8	c2 20		rep #$20	            REP #$20
.1a68ea	29 ff 00	and #$00ff	            AND #$00FF
.1a68ed	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a68f0	e2 20		sep #$20	            SEP #$20
.1a68f2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a68f5					pr_first
.1a68f5	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a68f8					pr_entry
.1a68f8	08		php		            PHP
.1a68f9	c2 20		rep #$20	            REP #$20
.1a68fb	48		pha		            PHA
.1a68fc	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a68ff	5b		tcd		            TCD
.1a6900	68		pla		            PLA
.1a6901	28		plp		            PLP
.1a6902	e2 20		sep #$20	            SEP #$20
.1a6904	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Start with the file name
.1a6907	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the initial character of the name
.1a6909	d0 03		bne $1a690e	                BNE chk_unused
.1a690b	82 a9 00	brl $1a69b7	                BRL done                    ; If it's NULL, we're done
.1a690e	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED     ; Is it the unusued code?
.1a6910	d0 03		bne $1a6915	                BNE chk_attributes
.1a6912	82 96 00	brl $1a69ab	                BRL next_entry              ; Yes: go to the next entry
.1a6915	a0 0b 00	ldy #$000b	chk_attributes  LDY #DIRENTRY.ATTRIBUTE
.1a6918	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute byte
.1a691a	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.1a691c	f0 03		beq $1a6921	                BEQ chk_hidden
.1a691e	82 a9 00	brl $1a69ca	                BRL pr_volume               ; Print the volume label
.1a6921	89 02		bit #$02	chk_hidden      BIT #DOS_ATTR_HIDDEN        ; Is it a hidden file?
.1a6923	f0 03		beq $1a6928	                BEQ chk_long
.1a6925	82 83 00	brl $1a69ab	                BRL next_entry              ; Yes: go to the next entry
.1a6928	29 0f		and #$0f	chk_long        AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.1a692a	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.1a692c	d0 03		bne $1a6931	                BNE get_short_name
.1a692e	82 7a 00	brl $1a69ab	                BRL next_entry              ; Yes: go to the next entry
.1a6931	a0 00 00	ldy #$0000	get_short_name  LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.1a6934	b7 18		lda [$0338],y	pr_name_loop    LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a6936	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6939	c8		iny		                INY                         ; Move to the next character
.1a693a	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.1a693d	d0 f5		bne $1a6934	                BNE pr_name_loop            ; No: print this new character
.1a693f	a9 20		lda #$20	                LDA #' '                    ; Print the separator
.1a6941	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6944	a0 08 00	ldy #$0008	                LDY #DIRENTRY.SHORTNAME+8   ; Move to the first of the extension characters
.1a6947	b7 18		lda [$0338],y	pr_ext_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a6949	20 18 00	jsr $1a0018	                JSR PRINTC                  ; Otherwise: print it.
.1a694c	c8		iny		                INY                         ; Move to the next character
.1a694d	c0 0b 00	cpy #$000b	                CPY #DIRENTRY.SHORTNAME+11  ; Are we at the end of the extension portion?
.1a6950	d0 f5		bne $1a6947	                BNE pr_ext_loop             ; No: print this new character
.1a6952	a9 09		lda #$09	pr_tab1         LDA #CHAR_TAB               ; Print a TAB
.1a6954	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6957	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.1a695a	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.1a695c	89 10		bit #$10	                BIT #DOS_ATTR_DIR           ; Is it a directory?
.1a695e	d0 1e		bne $1a697e	                BNE pr_attr                 ; Yes: skip printing a file size
.1a6960	c2 20		rep #$20	            REP #$20
.1a6962	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.1a6965	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the file size
.1a6967	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.1a696b	c8		iny		                INY
.1a696c	c8		iny		                INY
.1a696d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1a696f	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.1a6973	e2 20		sep #$20	            SEP #$20
.1a6975	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6977	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a697b	20 40 68	jsr $1a6840	            JSR PR_FILESIZE
.1a697e	a9 09		lda #$09	pr_attr         LDA #CHAR_TAB               ; Print a TAB
.1a6980	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6983	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.1a6986	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.1a6988	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.1a698a	d0 1c		bne $1a69a8	                BNE end_entry               ; Yes: we're done printing this entry
.1a698c	89 01		bit #$01	chk_read        BIT #DOS_ATTR_RO            ; Is it a read-only file?
.1a698e	f0 05		beq $1a6995	                BEQ chk_system
.1a6990	a9 52		lda #$52	                LDA #'R'                    ; Yes: print an R
.1a6992	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6995	89 04		bit #$04	chk_system      BIT #DOS_ATTR_SYSTEM        ; Is it System file?
.1a6997	f0 05		beq $1a699e	                BEQ chk_directory
.1a6999	a9 53		lda #$53	                LDA #'S'                    ; Yes: print an S
.1a699b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a699e	89 10		bit #$10	chk_directory   BIT #DOS_ATTR_DIR           ; Is it a directory?
.1a69a0	f0 05		beq $1a69a7	                BEQ pr_tab2
.1a69a2	a9 44		lda #$44	                LDA #'D'                    ; Yes: print a D
.1a69a4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a69a7	ea		nop		pr_tab2         NOP
.1a69a8					end_entry
.1a69a8	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a69ab					next_entry
.1a69ab	20 b3 03	jsr $1a03b3	            JSR PAGINATE
.1a69ae	22 0c 11 00	jsl $00110c	                JSL FK_DIRNEXT
.1a69b2	90 03		bcc $1a69b7	                BCC done
.1a69b4	82 41 ff	brl $1a68f8	                BRL pr_entry
.1a69b7					done
.1a69b7	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a69ba	08		php		            PHP
.1a69bb	c2 20		rep #$20	            REP #$20
.1a69bd	48		pha		            PHA
.1a69be	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a69c1	5b		tcd		            TCD
.1a69c2	68		pla		            PLA
.1a69c3	28		plp		            PLP
.1a69c4	20 1f 21	jsr $1a211f	            JSR SKIPSTMT
.1a69c7	28		plp		                PLP
.1a69c8	2b		pld		                PLD
.1a69c9	60		rts		            RTS
.1a69ca					pr_volume
.1a69ca	08		php		            PHP
.1a69cb	c2 20		rep #$20	            REP #$20
.1a69cd	48		pha		            PHA
.1a69ce	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a69d1	5b		tcd		            TCD
.1a69d2	68		pla		            PLA
.1a69d3	28		plp		            PLP
.1a69d4	e2 20		sep #$20	            SEP #$20
.1a69d6	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.1a69d8	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.1a69da	f0 cf		beq $1a69ab	                BEQ next_entry              ; Yes: skip it
.1a69dc	a9 5b		lda #$5b	pr_lbracket     LDA #'['
.1a69de	20 18 00	jsr $1a0018	            JSR PRINTC
.1a69e1	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.1a69e4	b7 18		lda [$0338],y	pr_vol_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a69e6	c9 20		cmp #$20	                CMP #CHAR_SP                ; Is it a blank?
.1a69e8	f0 09		beq $1a69f3	                BEQ pr_rbracket             ; Yes: end the name and print the dot
.1a69ea	20 18 00	jsr $1a0018	            JSR PRINTC
.1a69ed	c8		iny		                INY                         ; Move to the next character
.1a69ee	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.1a69f1	d0 f1		bne $1a69e4	                BNE pr_vol_loop             ; No: print this new character
.1a69f3	a9 5d		lda #$5d	pr_rbracket     LDA #']'                    ; Print a close bracket
.1a69f5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a69f8	80 ae		bra $1a69a8	                BRA end_entry               ; And try to get the next entry
.1a69fa					SETFILEDESC
.1a69fa	0b		phd		                PHD
.1a69fb	08		php		                PHP
.1a69fc	08		php		            PHP
.1a69fd	c2 20		rep #$20	            REP #$20
.1a69ff	48		pha		            PHA
.1a6a00	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a6a03	5b		tcd		            TCD
.1a6a04	68		pla		            PLA
.1a6a05	28		plp		            PLP
.1a6a06	c2 30		rep #$30	            REP #$30
.1a6a08	a9 73 f2	lda #$f273	                LDA #<>FD_IN            ; Point to the file descriptor
.1a6a0b	85 20		sta $0340	                STA DOS_FD_PTR
.1a6a0d	a9 1a 00	lda #$001a	                LDA #`FD_IN
.1a6a10	85 22		sta $0342	                STA DOS_FD_PTR+2
.1a6a12	a0 00 00	ldy #$0000	                LDY #0                  ; Fille the file descriptor with 0
.1a6a15	e2 20		sep #$20	            SEP #$20
.1a6a17	a9 00		lda #$00	                LDA #0
.1a6a19	97 20		sta [$0340],y	zero_loop       STA [DOS_FD_PTR],Y
.1a6a1b	c8		iny		                INY
.1a6a1c	c0 1e 00	cpy #$001e	                CPY #SIZE(FILEDESC)
.1a6a1f	d0 f8		bne $1a6a19	                BNE zero_loop
.1a6a21	c2 20		rep #$20	            REP #$20
.1a6a23	a9 73 f0	lda #$f073	                LDA #<>CLUSTER_BUFF     ; Point to the cluster buffer
.1a6a26	8f 81 f2 1a	sta $1af281	                STA @l FD_IN.BUFFER
.1a6a2a	a9 1a 00	lda #$001a	                LDA #`CLUSTER_BUFF
.1a6a2d	8f 83 f2 1a	sta $1af283	                STA @l FD_IN.BUFFER+2
.1a6a31	af 23 08 00	lda $000823	                LDA @l ARGUMENT1        ; Point the file desriptor to the path
.1a6a35	8f 75 f2 1a	sta $1af275	                STA @l FD_IN.PATH
.1a6a39	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a6a3d	8f 77 f2 1a	sta $1af277	                STA @l FD_IN.PATH+2
.1a6a41	28		plp		                PLP
.1a6a42	2b		pld		                PLD
.1a6a43	60		rts		            RTS
.1a6a44					S_BLOAD
.1a6a44	08		php		                PHP
.1a6a45	c2 30		rep #$30	            REP #$30
.1a6a47	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a6a4a	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6a4d	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6a50	20 fa 69	jsr $1a69fa	            JSR SETFILEDESC
.1a6a53	e2 20		sep #$20	            SEP #$20
.1a6a55	a9 2c		lda #$2c	                LDA #','
.1a6a57	85 37		sta $0837	                STA TARGETTOK
.1a6a59	20 1c 22	jsr $1a221c	            JSR OPT_TOK
.1a6a5c	b0 0f		bcs $1a6a6d	                BCS get_dest
.1a6a5e	c2 20		rep #$20	            REP #$20
.1a6a60	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set destination address to something "safe"
.1a6a63	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6a67	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a6a6b	80 17		bra $1a6a84	                BRA do_load
.1a6a6d					get_dest
.1a6a6d	20 da 20	jsr $1a20da	            JSR INCBIP
.1a6a70	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6a73	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a6a76	c2 20		rep #$20	            REP #$20
.1a6a78	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the destination address
.1a6a7a	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6a7e	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6a80	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a6a84	22 18 11 00	jsl $001118	do_load         JSL FK_LOAD                 ; Attempt to load the file
.1a6a88	b0 1f		bcs $1a6aa9	                BCS done
.1a6a8a	08		php		            PHP
.1a6a8b	c2 20		rep #$20	            REP #$20
.1a6a8d	48		pha		            PHA
.1a6a8e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6a91	5b		tcd		            TCD
.1a6a92	68		pla		            PLA
.1a6a93	28		plp		            PLP
.1a6a94	e2 20		sep #$20	            SEP #$20
.1a6a96	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6a98	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6a9c	c2 20		rep #$20	            REP #$20
.1a6a9e	29 ff 00	and #$00ff	            AND #$00FF
.1a6aa1	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6aa4	e2 20		sep #$20	            SEP #$20
.1a6aa6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6aa9	28		plp		done            PLP
.1a6aaa	60		rts		            RTS
.1a6aab					SET_DOSSTAT
.1a6aab	8b		phb		                PHB
.1a6aac	0b		phd		                PHD
.1a6aad	08		php		                PHP
.1a6aae	08		php		            PHP
.1a6aaf	c2 20		rep #$20	            REP #$20
.1a6ab1	48		pha		            PHA
.1a6ab2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6ab5	5b		tcd		            TCD
.1a6ab6	68		pla		            PLA
.1a6ab7	28		plp		            PLP
.1a6ab8	08		php		            PHP
.1a6ab9	e2 20		sep #$20	            SEP #$20
.1a6abb	48		pha		            PHA
.1a6abc	a9 00		lda #$00	            LDA #BASIC_BANK
.1a6abe	48		pha		            PHA
.1a6abf	ab		plb		            PLB
.1a6ac0	68		pla		            PLA
.1a6ac1	28		plp		            PLP
.1a6ac2	e2 20		sep #$20	            SEP #$20
.1a6ac4	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS           ; Get the DOS status code
.1a6ac8	85 23		sta $0823	                STA ARGUMENT1
.1a6aca	a9 00		lda #$00	                LDA #0
.1a6acc	85 24		sta $0824	                STA ARGUMENT1+1
.1a6ace	85 25		sta $0825	                STA ARGUMENT1+2
.1a6ad0	85 26		sta $0826	                STA ARGUMENT1+3
.1a6ad2	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6ad4	85 27		sta $0827	                STA ARGTYPE1
.1a6ad6	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (DOSSTAT)
.1a6ad8	a9 1a		lda #$1a	                LDA #`dosstat_name
.1a6ada	85 e9		sta $08e9	                STA TOFIND+2
.1a6adc	c2 20		rep #$20	            REP #$20
.1a6ade	a9 0e 6b	lda #$6b0e	                LDA #<>dosstat_name
.1a6ae1	85 e7		sta $08e7	                STA TOFIND
.1a6ae3	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a6ae6	e2 20		sep #$20	            SEP #$20
.1a6ae8	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS          ; Get the BIOS status code
.1a6aec	85 23		sta $0823	                STA ARGUMENT1
.1a6aee	a9 00		lda #$00	                LDA #0
.1a6af0	85 24		sta $0824	                STA ARGUMENT1+1
.1a6af2	85 25		sta $0825	                STA ARGUMENT1+2
.1a6af4	85 26		sta $0826	                STA ARGUMENT1+3
.1a6af6	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6af8	85 27		sta $0827	                STA ARGTYPE1
.1a6afa	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BIOSSTAT)
.1a6afc	a9 1a		lda #$1a	                LDA #`biosstat_name
.1a6afe	85 e9		sta $08e9	                STA TOFIND+2
.1a6b00	c2 20		rep #$20	            REP #$20
.1a6b02	a9 16 6b	lda #$6b16	                LDA #<>biosstat_name
.1a6b05	85 e7		sta $08e7	                STA TOFIND
.1a6b07	20 98 52	jsr $1a5298	            JSR VAR_SET
.1a6b0a	28		plp		                PLP
.1a6b0b	2b		pld		                PLD
.1a6b0c	ab		plb		                PLB
.1a6b0d	60		rts		            RTS
>1a6b0e	44 4f 53 53 54 41 54 00		dosstat_name    .null "DOSSTAT"
>1a6b16	42 49 4f 53 53 54 41 54		biosstat_name   .null "BIOSSTAT"
>1a6b1e	00
.1a6b1f					CMD_BRUN
.1a6b1f	08		php		                PHP
.1a6b20	c2 30		rep #$30	            REP #$30
.1a6b22	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a6b25	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6b28	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6b2b	a5 23		lda $0823	                LDA ARGUMENT1
.1a6b2d	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.1a6b31	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6b33	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.1a6b37	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a6b3a	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6b3e	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a6b42	22 24 11 00	jsl $001124	                JSL FK_RUN                  ; Attempt to run the file
.1a6b46	b0 25		bcs $1a6b6d	                BCS done                    ; If we got it: try to execute it
.1a6b48	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6b4b	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6b4e	08		php		            PHP
.1a6b4f	c2 20		rep #$20	            REP #$20
.1a6b51	48		pha		            PHA
.1a6b52	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6b55	5b		tcd		            TCD
.1a6b56	68		pla		            PLA
.1a6b57	28		plp		            PLP
.1a6b58	e2 20		sep #$20	            SEP #$20
.1a6b5a	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6b5c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6b60	c2 20		rep #$20	            REP #$20
.1a6b62	29 ff 00	and #$00ff	            AND #$00FF
.1a6b65	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6b68	e2 20		sep #$20	            SEP #$20
.1a6b6a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6b6d					done
.1a6b6d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6b70	28		plp		                PLP
.1a6b71	60		rts		            RTS
.1a6b72					CMD_LOAD
.1a6b72	08		php		                PHP
.1a6b73	c2 30		rep #$30	            REP #$30
.1a6b75	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a6b78	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6b7b	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6b7e	20 fa 69	jsr $1a69fa	            JSR SETFILEDESC
.1a6b81	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a6b84	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6b88	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6b8b	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2        ; Set the destination address
.1a6b8f	20 69 4f	jsr $1a4f69	            JSR CMD_NEW
.1a6b92	22 18 11 00	jsl $001118	                JSL FK_LOAD                 ; Attempt to load the file
.1a6b96	b0 22		bcs $1a6bba	                BCS start_tokenize          ; If we got it: start tokenizing
.1a6b98	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6b9b	08		php		            PHP
.1a6b9c	c2 20		rep #$20	            REP #$20
.1a6b9e	48		pha		            PHA
.1a6b9f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6ba2	5b		tcd		            TCD
.1a6ba3	68		pla		            PLA
.1a6ba4	28		plp		            PLP
.1a6ba5	e2 20		sep #$20	            SEP #$20
.1a6ba7	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6ba9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6bad	c2 20		rep #$20	            REP #$20
.1a6baf	29 ff 00	and #$00ff	            AND #$00FF
.1a6bb2	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6bb5	e2 20		sep #$20	            SEP #$20
.1a6bb7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6bba					start_tokenize
.1a6bba	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6bbd	c2 20		rep #$20	            REP #$20
.1a6bbf	a2 12 00	ldx #$0012	                LDX #FILEDESC.FILESIZE
.1a6bc2	18		clc		                CLC                         ; Set MTEMP to point to the byte after the file
.1a6bc3	bf 73 f2 1a	lda $1af273,x	                LDA FD_IN,X
.1a6bc7	69 00 00	adc #$0000	                ADC #<>LOADBLOCK
.1a6bca	85 92		sta $0892	                STA MTEMP
.1a6bcc	bf 75 f2 1a	lda $1af275,x	                LDA FD_IN+2,X
.1a6bd0	69 01 00	adc #$0001	                ADC #`LOADBLOCK
.1a6bd3	85 94		sta $0894	                STA MTEMP+2
.1a6bd5	e2 20		sep #$20	            SEP #$20
.1a6bd7	a9 00		lda #$00	                LDA #0
.1a6bd9	87 92		sta [$0892]	                STA [MTEMP]                 ; Write a NULL right after the file
.1a6bdb	c2 20		rep #$20	            REP #$20
.1a6bdd	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK            ; Set MCURSOR to the begining of the loaded data
.1a6be0	85 7a		sta $087a	                STA MCURSOR
.1a6be2	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6be5	85 7c		sta $087c	                STA MCURSOR+2
.1a6be7	a2 00 00	ldx #$0000	copy_line       LDX #0
.1a6bea					copy_char
.1a6bea	e2 20		sep #$20	            SEP #$20
.1a6bec	a7 7a		lda [$087a]	                LDA [MCURSOR]
.1a6bee	f0 2a		beq $1a6c1a	                BEQ clean_up                ; If the character is 0, we're done
.1a6bf0	c9 0d		cmp #$0d	                CMP #CHAR_CR                ; If it is new line...
.1a6bf2	f0 12		beq $1a6c06	                BEQ do_process              ; ... we want to process the line
.1a6bf4	c9 0a		cmp #$0a	                CMP #CHAR_LF                ; If it is a line feed...
.1a6bf6	f0 04		beq $1a6bfc	                BEQ next_char               ; ... we want to skip it
.1a6bf8	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X              ; Otherwise, copy the character to the input buffer
.1a6bfb	e8		inx		                INX
.1a6bfc					next_char
.1a6bfc	c2 20		rep #$20	            REP #$20
.1a6bfe	e6 7a		inc $087a	                INC MCURSOR                 ; Advance the input cursor
.1a6c00	d0 e8		bne $1a6bea	                BNE copy_char
.1a6c02	e6 7c		inc $087c	                INC MCURSOR+2
.1a6c04	80 e4		bra $1a6bea	                BRA copy_char
.1a6c06					do_process
.1a6c06	e2 20		sep #$20	            SEP #$20
.1a6c08	a9 00		lda #$00	                LDA #0                      ; Put a 0 at the end of the input buffer
.1a6c0a	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a6c0d	20 4a 27	jsr $1a274a	            JSR PROCESS
.1a6c10	c2 20		rep #$20	            REP #$20
.1a6c12	e6 7a		inc $087a	                INC MCURSOR                 ; Try again with the next line
.1a6c14	d0 d1		bne $1a6be7	                BNE copy_line
.1a6c16	e6 7c		inc $087c	                INC MCURSOR+2
.1a6c18	80 cd		bra $1a6be7	                BRA copy_line
.1a6c1a	e0 00 00	cpx #$0000	clean_up        CPX #0                      ; Is there data in the INPUTBUF?
.1a6c1d	f0 0a		beq $1a6c29	                BEQ done                    ; No: just return
.1a6c1f	e2 20		sep #$20	            SEP #$20
.1a6c21	a9 00		lda #$00	                LDA #0                      ; Make sure there is a trailing NULL
.1a6c23	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a6c26	20 4a 27	jsr $1a274a	            JSR PROCESS
.1a6c29	28		plp		done            PLP
.1a6c2a	60		rts		            RTS
.1a6c2b					S_BSAVE
.1a6c2b	08		php		                PHP
.1a6c2c	c2 30		rep #$30	            REP #$30
.1a6c2e	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a6c31	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6c34	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6c37	20 fa 69	jsr $1a69fa	            JSR SETFILEDESC
.1a6c3a	e2 20		sep #$20	            SEP #$20
.1a6c3c	a9 2c		lda #$2c	                LDA #','
.1a6c3e	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a6c41	c2 20		rep #$20	            REP #$20
.1a6c43	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6c46	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a6c49	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_SRC_PTR
.1a6c4b	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a6c4f	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6c51	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a6c55	e2 20		sep #$20	            SEP #$20
.1a6c57	a9 2c		lda #$2c	                LDA #','
.1a6c59	c2 20		rep #$20	            REP #$20
.1a6c5b	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a6c5e	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6c61	20 16 06	jsr $1a0616	            JSR ASS_ARG1_INT
.1a6c64	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_END_PTR
.1a6c66	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a6c6a	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6c6c	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a6c70	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                 ; Attempt to save the memory to file.
.1a6c74	b0 22		bcs $1a6c98	                BCS done
.1a6c76	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6c79	08		php		            PHP
.1a6c7a	c2 20		rep #$20	            REP #$20
.1a6c7c	48		pha		            PHA
.1a6c7d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6c80	5b		tcd		            TCD
.1a6c81	68		pla		            PLA
.1a6c82	28		plp		            PLP
.1a6c83	e2 20		sep #$20	            SEP #$20
.1a6c85	a9 12		lda #$12	            LDA #ERR_SAVE
.1a6c87	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6c8b	c2 20		rep #$20	            REP #$20
.1a6c8d	29 ff 00	and #$00ff	            AND #$00FF
.1a6c90	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6c93	e2 20		sep #$20	            SEP #$20
.1a6c95	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6c98					done
.1a6c98	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6c9b	28		plp		                PLP
.1a6c9c	60		rts		            RTS
.1a6c9d					COPY2PATHBUF
.1a6c9d	da		phx		                PHX
.1a6c9e	5a		phy		                PHY
.1a6c9f	08		php		                PHP
.1a6ca0	a2 00 00	ldx #$0000	                LDX #0
.1a6ca3	a0 00 00	ldy #$0000	                LDY #0
.1a6ca6	e2 20		sep #$20	            SEP #$20
.1a6ca8	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y           ; Copy the path to the DOS_PATH_BUFF
.1a6caa	9d 00 04	sta $0400,x	                STA DOS_PATH_BUFF,X
.1a6cad	f0 04		beq $1a6cb3	                BEQ done
.1a6caf	e8		inx		                INX
.1a6cb0	c8		iny		                INY
.1a6cb1	80 f5		bra $1a6ca8	                BRA loop
.1a6cb3	28		plp		done            PLP
.1a6cb4	7a		ply		                PLY
.1a6cb5	fa		plx		                PLX
.1a6cb6	60		rts		            RTS
.1a6cb7					CMD_SAVE
.1a6cb7	08		php		                PHP
.1a6cb8	c2 30		rep #$30	            REP #$30
.1a6cba	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a6cbd	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6cc0	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6cc3	20 fa 69	jsr $1a69fa	            JSR SETFILEDESC
.1a6cc6	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a6cc9	85 a6		sta $08a6	                STA OBUFFER
.1a6ccb	e2 20		sep #$20	            SEP #$20
.1a6ccd	a9 01		lda #$01	                LDA #`LOADBLOCK
.1a6ccf	85 a8		sta $08a8	                STA OBUFFER+2
.1a6cd1	a9 20		lda #$20	                LDA #DEV_BUFFER             ; Set up output for the buffer
.1a6cd3	85 b4		sta $08b4	                STA BCONSOLE
.1a6cd5	c2 20		rep #$20	            REP #$20
.1a6cd7	a9 00 00	lda #$0000	                LDA #0
.1a6cda	85 ab		sta $08ab	                STA OBUFFIDX
.1a6cdc	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a6cdf	85 a9		sta $08a9	                STA OBUFFSIZE
.1a6ce1	c2 20		rep #$20	            REP #$20
.1a6ce3	a9 00 00	lda #$0000	                LDA #0                      ; Set start line number to 0
.1a6ce6	85 55		sta $0855	                STA MARG1
.1a6ce8	85 57		sta $0857	                STA MARG1+2
.1a6cea	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set end line number to MAXINT
.1a6ced	85 59		sta $0859	                STA MARG2
.1a6cef	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.1a6cf2	85 5b		sta $085b	                STA MARG2+2
.1a6cf4	20 48 18	jsr $1a1848	            JSR LISTPROG
.1a6cf7	e2 20		sep #$20	            SEP #$20
.1a6cf9	a9 80		lda #$80	                LDA #DEV_SCREEN             ; Restore output to the screen
.1a6cfb	85 b4		sta $08b4	                STA BCONSOLE
.1a6cfd	c2 20		rep #$20	            REP #$20
.1a6cff	c6 ab		dec $08ab	                DEC OBUFFIDX                ; OBUFFIDX points to the next free byte... so pull it in one
.1a6d01	18		clc		                CLC                         ; Set the range of memory to save
.1a6d02	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a6d05	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a6d09	65 ab		adc $08ab	                ADC OBUFFIDX
.1a6d0b	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a6d0f	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6d12	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a6d16	69 00 00	adc #$0000	                ADC #0
.1a6d19	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a6d1d	22 1c 11 00	jsl $00111c	do_save         JSL FK_SAVE                 ; Attempt to save the file
.1a6d21	b0 22		bcs $1a6d45	                BCS done
.1a6d23	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6d26	08		php		            PHP
.1a6d27	c2 20		rep #$20	            REP #$20
.1a6d29	48		pha		            PHA
.1a6d2a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6d2d	5b		tcd		            TCD
.1a6d2e	68		pla		            PLA
.1a6d2f	28		plp		            PLP
.1a6d30	e2 20		sep #$20	            SEP #$20
.1a6d32	a9 12		lda #$12	            LDA #ERR_SAVE
.1a6d34	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6d38	c2 20		rep #$20	            REP #$20
.1a6d3a	29 ff 00	and #$00ff	            AND #$00FF
.1a6d3d	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6d40	e2 20		sep #$20	            SEP #$20
.1a6d42	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6d45					done
.1a6d45	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6d48	28		plp		                PLP
.1a6d49	60		rts		            RTS
.1a6d4a					S_DEL
.1a6d4a	08		php		                PHP
.1a6d4b	c2 30		rep #$30	            REP #$30
.1a6d4d	20 fb 20	jsr $1a20fb	            JSR SKIPWS
.1a6d50	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6d53	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6d56	20 9d 6c	jsr $1a6c9d	            JSR COPY2PATHBUF
.1a6d59	22 04 11 00	jsl $001104	path_loaded     JSL FK_DELETE               ; Try to delete the file
.1a6d5d	b0 22		bcs $1a6d81	                BCS done
.1a6d5f	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6d62	08		php		            PHP
.1a6d63	c2 20		rep #$20	            REP #$20
.1a6d65	48		pha		            PHA
.1a6d66	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6d69	5b		tcd		            TCD
.1a6d6a	68		pla		            PLA
.1a6d6b	28		plp		            PLP
.1a6d6c	e2 20		sep #$20	            SEP #$20
.1a6d6e	a9 13		lda #$13	            LDA #ERR_DELETE
.1a6d70	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6d74	c2 20		rep #$20	            REP #$20
.1a6d76	29 ff 00	and #$00ff	            AND #$00FF
.1a6d79	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6d7c	e2 20		sep #$20	            SEP #$20
.1a6d7e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6d81					done
.1a6d81	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6d84	28		plp		                PLP
.1a6d85	60		rts		            RTS
.1a6d86					VALIDFILECHAR
.1a6d86	da		phx		                PHX
.1a6d87	08		php		                PHP
.1a6d88	e2 20		sep #$20	            SEP #$20
.1a6d8a	c9 61		cmp #$61	                CMP #'a'                    ; Is it lower case?
.1a6d8c	90 08		bcc $1a6d96	                BLT chk_space
.1a6d8e	c9 7b		cmp #$7b	                CMP #'z'+1
.1a6d90	b0 04		bcs $1a6d96	                BGE chk_space
.1a6d92	29 df		and #$df	                AND #%11011111              ; Yes: convert to upper case
.1a6d94	80 13		bra $1a6da9	                BRA ret_valid
.1a6d96	c9 20		cmp #$20	chk_space       CMP #CHAR_SP            ; Is it a control code?
.1a6d98	90 13		bcc $1a6dad	                BLT is_invalid          ; Yes: it's invalid
.1a6d9a	a2 00 00	ldx #$0000	                LDX #0                  ; See if it's in the list of invalids
.1a6d9d	df b1 6d 1a	cmp $1a6db1,x	loop            CMP invalid_chars,X
.1a6da1	f0 0a		beq $1a6dad	                BEQ is_invalid
.1a6da3	e8		inx		                INX
.1a6da4	e0 0f 00	cpx #$000f	                CPX #15                 ; # of invalid characters
.1a6da7	d0 f4		bne $1a6d9d	                BNE loop
.1a6da9	28		plp		ret_valid       PLP
.1a6daa	38		sec		                SEC
.1a6dab	fa		plx		                PLX
.1a6dac	6b		rtl		                RTL
.1a6dad	28		plp		is_invalid      PLP
.1a6dae	18		clc		                CLC
.1a6daf	fa		plx		                PLX
.1a6db0	6b		rtl		                RTL
>1a6db1	2a 2b 2c 2f 3a 3b 3c 3d		invalid_chars   .text "*+,/:;<=>?\[]|",CHAR_DQUOTE
>1a6db9	3e 3f 5c 5b 5d 7c 22
.1a6dc0					S_RENAME
.1a6dc0	08		php		                PHP
.1a6dc1	08		php		            PHP
.1a6dc2	c2 20		rep #$20	            REP #$20
.1a6dc4	48		pha		            PHA
.1a6dc5	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6dc8	5b		tcd		            TCD
.1a6dc9	68		pla		            PLA
.1a6dca	28		plp		            PLP
.1a6dcb	c2 30		rep #$30	            REP #$30
.1a6dcd	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6dd0	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6dd3	20 9d 6c	jsr $1a6c9d	            JSR COPY2PATHBUF
.1a6dd6	22 10 11 00	jsl $001110	                JSL FK_DIRREAD              ; Try to read the file
.1a6dda	b0 22		bcs $1a6dfe	                BCS get_new_name            ; If ok: get the new name
.1a6ddc	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6ddf	08		php		            PHP
.1a6de0	c2 20		rep #$20	            REP #$20
.1a6de2	48		pha		            PHA
.1a6de3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6de6	5b		tcd		            TCD
.1a6de7	68		pla		            PLA
.1a6de8	28		plp		            PLP
.1a6de9	e2 20		sep #$20	            SEP #$20
.1a6deb	a9 14		lda #$14	            LDA #ERR_FILENOTFOUND
.1a6ded	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6df1	c2 20		rep #$20	            REP #$20
.1a6df3	29 ff 00	and #$00ff	            AND #$00FF
.1a6df6	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6df9	e2 20		sep #$20	            SEP #$20
.1a6dfb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6dfe					get_new_name
.1a6dfe	e2 20		sep #$20	            SEP #$20
.1a6e00	a9 2c		lda #$2c	                LDA #','
.1a6e02	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a6e05	c2 20		rep #$20	            REP #$20
.1a6e07	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6e0a	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6e0d	ad 38 03	lda $0338	                LDA DOS_DIR_PTR
.1a6e10	85 08		sta $0808	                STA INDEX
.1a6e12	ad 3a 03	lda $033a	                LDA DOS_DIR_PTR+2
.1a6e15	85 0a		sta $080a	                STA INDEX+2
.1a6e17	e2 20		sep #$20	            SEP #$20
.1a6e19	a2 00 00	ldx #$0000	                LDX #0
.1a6e1c	a9 20		lda #$20	                LDA #CHAR_SP                ; We'll use MLINEBUFF as temporary name storage
.1a6e1e	95 7e		sta $087e,x	blank_loop      STA MLINEBUF,X              ; Fill it with blanks
.1a6e20	e8		inx		                INX
.1a6e21	e0 0b 00	cpx #$000b	                CPX #11
.1a6e24	d0 f8		bne $1a6e1e	                BNE blank_loop
.1a6e26	a2 00 00	ldx #$0000	                LDX #0
.1a6e29	a0 00 00	ldy #$0000	                LDY #0
.1a6e2c	b7 23		lda [$0823],y	name_loop       LDA [ARGUMENT1],Y           ; Get the character of the new name
.1a6e2e	f0 76		beq $1a6ea6	                BEQ copy_short_name         ; If end-of-string: copy what we have
.1a6e30	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.1a6e32	f0 39		beq $1a6e6d	                BEQ skip_dot                ; Yes: move on to the extension characters
.1a6e34	22 86 6d 1a	jsl $1a6d86	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.1a6e38	b0 1f		bcs $1a6e59	                BCS save_nm_char
.1a6e3a	08		php		            PHP
.1a6e3b	c2 20		rep #$20	            REP #$20
.1a6e3d	48		pha		            PHA
.1a6e3e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6e41	5b		tcd		            TCD
.1a6e42	68		pla		            PLA
.1a6e43	28		plp		            PLP
.1a6e44	e2 20		sep #$20	            SEP #$20
.1a6e46	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a6e48	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6e4c	c2 20		rep #$20	            REP #$20
.1a6e4e	29 ff 00	and #$00ff	            AND #$00FF
.1a6e51	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6e54	e2 20		sep #$20	            SEP #$20
.1a6e56	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6e59	95 7e		sta $087e,x	save_nm_char    STA MLINEBUF,X              ; Otherwise: copy it
.1a6e5b	c8		iny		                INY
.1a6e5c	e8		inx		                INX
.1a6e5d	c0 08 00	cpy #$0008	                CPY #8
.1a6e60	d0 ca		bne $1a6e2c	                BNE name_loop
.1a6e62	b7 23		lda [$0823],y	eat_name        LDA [ARGUMENT1],Y           ; Get the character
.1a6e64	f0 40		beq $1a6ea6	                BEQ copy_short_name         ; If null, we're done with the short name
.1a6e66	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.1a6e68	f0 03		beq $1a6e6d	                BEQ skip_dot                ; Yes: skip over it
.1a6e6a	c8		iny		                INY                         ; No: try again with the the next character
.1a6e6b	80 f5		bra $1a6e62	                BRA eat_name
.1a6e6d	c8		iny		skip_dot        INY                         ; Character at Y is '.', so skip over it
.1a6e6e	a2 08 00	ldx #$0008	do_ext          LDX #8
.1a6e71	b7 23		lda [$0823],y	ext_loop        LDA [ARGUMENT1],Y           ; Get the character of the new extension
.1a6e73	f0 31		beq $1a6ea6	                BEQ copy_short_name         ; If end-of-string: copy what we have
.1a6e75	22 86 6d 1a	jsl $1a6d86	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.1a6e79	b0 22		bcs $1a6e9d	                BCS save_ext_char
.1a6e7b	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6e7e	08		php		            PHP
.1a6e7f	c2 20		rep #$20	            REP #$20
.1a6e81	48		pha		            PHA
.1a6e82	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6e85	5b		tcd		            TCD
.1a6e86	68		pla		            PLA
.1a6e87	28		plp		            PLP
.1a6e88	e2 20		sep #$20	            SEP #$20
.1a6e8a	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a6e8c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6e90	c2 20		rep #$20	            REP #$20
.1a6e92	29 ff 00	and #$00ff	            AND #$00FF
.1a6e95	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6e98	e2 20		sep #$20	            SEP #$20
.1a6e9a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6e9d	95 7e		sta $087e,x	save_ext_char   STA MLINEBUF,X              ; Otherwise: copy it
.1a6e9f	c8		iny		                INY
.1a6ea0	e8		inx		                INX
.1a6ea1	c0 0c 00	cpy #$000c	                CPY #12
.1a6ea4	d0 cb		bne $1a6e71	                BNE ext_loop
.1a6ea6	a2 00 00	ldx #$0000	copy_short_name LDX #0                      ; Copy the short name we built to the directory entry
.1a6ea9	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1a6eac	b5 7e		lda $087e,x	copy_loop       LDA MLINEBUF,X
.1a6eae	97 08		sta [$0808],y	                STA [INDEX],Y
.1a6eb0	e8		inx		                INX
.1a6eb1	c8		iny		                INY
.1a6eb2	c0 0b 00	cpy #$000b	                CPY #11
.1a6eb5	d0 f5		bne $1a6eac	                BNE copy_loop
.1a6eb7	22 14 11 00	jsl $001114	                JSL FK_DIRWRITE             ; Write the directory entry back
.1a6ebb	b0 22		bcs $1a6edf	                BCS done
.1a6ebd	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6ec0	08		php		            PHP
.1a6ec1	c2 20		rep #$20	            REP #$20
.1a6ec3	48		pha		            PHA
.1a6ec4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6ec7	5b		tcd		            TCD
.1a6ec8	68		pla		            PLA
.1a6ec9	28		plp		            PLP
.1a6eca	e2 20		sep #$20	            SEP #$20
.1a6ecc	a9 15		lda #$15	            LDA #ERR_DIRNOTWRITE
.1a6ece	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6ed2	c2 20		rep #$20	            REP #$20
.1a6ed4	29 ff 00	and #$00ff	            AND #$00FF
.1a6ed7	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6eda	e2 20		sep #$20	            SEP #$20
.1a6edc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6edf					done
.1a6edf	20 ab 6a	jsr $1a6aab	            JSR SET_DOSSTAT
.1a6ee2	28		plp		                PLP
.1a6ee3	60		rts		            RTS
.1a6ee4					S_COPY
.1a6ee4	08		php		                PHP
.1a6ee5	08		php		            PHP
.1a6ee6	c2 20		rep #$20	            REP #$20
.1a6ee8	48		pha		            PHA
.1a6ee9	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6eec	5b		tcd		            TCD
.1a6eed	68		pla		            PLA
.1a6eee	28		plp		            PLP
.1a6eef	c2 30		rep #$30	            REP #$30
.1a6ef1	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6ef4	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6ef7	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.1a6ef9	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.1a6efd	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6eff	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.1a6f03	e2 20		sep #$20	            SEP #$20
.1a6f05	a9 2c		lda #$2c	                LDA #','
.1a6f07	20 e7 21	jsr $1a21e7	            JSR EXPECT_TOK
.1a6f0a	c2 20		rep #$20	            REP #$20
.1a6f0c	20 c9 1c	jsr $1a1cc9	            JSR EVALEXPR
.1a6f0f	20 a8 06	jsr $1a06a8	            JSR ASS_ARG1_STR
.1a6f12	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.1a6f14	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.1a6f18	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6f1a	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.1a6f1e	22 30 11 00	jsl $001130	                JSL FK_COPY                 ; Attempt to copy the file
.1a6f22	b0 1f		bcs $1a6f43	                BCS done
.1a6f24	08		php		            PHP
.1a6f25	c2 20		rep #$20	            REP #$20
.1a6f27	48		pha		            PHA
.1a6f28	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6f2b	5b		tcd		            TCD
.1a6f2c	68		pla		            PLA
.1a6f2d	28		plp		            PLP
.1a6f2e	e2 20		sep #$20	            SEP #$20
.1a6f30	a9 16		lda #$16	            LDA #ERR_NOTCOPIED
.1a6f32	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6f36	c2 20		rep #$20	            REP #$20
.1a6f38	29 ff 00	and #$00ff	            AND #$00FF
.1a6f3b	20 1b 1e	jsr $1a1e1b	            JSR SET_ERRERL
.1a6f3e	e2 20		sep #$20	            SEP #$20
.1a6f40	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6f43	28		plp		done            PLP
.1a6f44	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\monitor.s

.1a6f45	5c 02 89 1a	jmp $1a8902	MRETURN         JML IMRETURN
.1a6f49	5c 53 87 1a	jmp $1a8753	MPARSE          JML IMPARSE
.1a6f4d	5c 03 89 1a	jmp $1a8903	MPARSE1         JML IMPARSE1
.1a6f51	5c 7f 78 1a	jmp $1a787f	MEXECUTE        JML IMEXECUTE
.1a6f55	5c dc 78 1a	jmp $1a78dc	MASSEMBLE       JML IMASSEMBLE
.1a6f59	5c 0f 78 1a	jmp $1a780f	MRMODIFY        JML IMRMODIFY
.1a6f5d	5c 95 77 1a	jmp $1a7795	MCOMPARE        JML IMCOMPARE
.1a6f61	5c 12 7d 1a	jmp $1a7d12	MDISASSEMBLE    JML IMDISASSEMBLE
.1a6f65	5c 00 74 1a	jmp $1a7400	MFILL           JML IMFILL
.1a6f69	5c 2d 77 1a	jmp $1a772d	MGO             JML IMGO
.1a6f6d	5c e8 76 1a	jmp $1a76e8	MJUMP           JML IMJUMP
.1a6f71	5c 72 76 1a	jmp $1a7672	MHUNT           JML IMHUNT
.1a6f75	5c 11 88 1a	jmp $1a8811	MLOAD           JML IMLOAD
.1a6f79	5c 0e 75 1a	jmp $1a750e	MMEMORY         JML IMMEMORY
.1a6f7d	5c 5e 73 1a	jmp $1a735e	MREGISTERS      JML IMREGISTERS
.1a6f81	5c 8c 88 1a	jmp $1a888c	MSAVE           JML IMSAVE
.1a6f85	5c 3c 74 1a	jmp $1a743c	MTRANSFER       JML IMTRANSFER
.1a6f89	5c 05 89 1a	jmp $1a8905	MVERIFY         JML IMVERIFY
.1a6f8d	5c fe 88 1a	jmp $1a88fe	MEXIT           JML IMEXIT
.1a6f91	5c 2b 76 1a	jmp $1a762b	MMODIFY         JML IMMODIFY
.1a6f95	5c 06 89 1a	jmp $1a8906	MDOS            JML IMDOS
.1a6f99	18		clc		IMONITOR        CLC                 ; clear the carry flag
.1a6f9a	fb		xce		                XCE                 ; move carry to emulation flags
.1a6f9b	58		cli		                CLI                 ; Re-enable interrupts
.1a6f9c	5c a0 6f 1a	jmp $1a6fa0	                JML IMREADY
.1a6fa0					IMREADY
.1a6fa0	c2 30		rep #$30	            REP #$30
.1a6fa2	22 5e 73 1a	jsl $1a735e	                JSL IMREGISTERS
.1a6fa6					ready_loop
.1a6fa6	20 08 00	jsr $1a0008	            JSR READLINE
.1a6fa9	20 0c 00	jsr $1a000c	            JSR SCRCOPYLINE
.1a6fac	8b		phb		                PHB
.1a6fad	e2 20		sep #$20	            SEP #$20
.1a6faf	a9 00		lda #$00	                LDA #`INPUTBUF
.1a6fb1	48		pha		                PHA
.1a6fb2	ab		plb		                PLB
.1a6fb3	a2 00 4f	ldx #$4f00	                LDX #<>INPUTBUF
.1a6fb6	20 2a 05	jsr $1a052a	            JSR TOUPPER
.1a6fb9	ab		plb		                PLB
.1a6fba	22 49 6f 1a	jsl $1a6f49	                JSL MPARSE          ; Parse the command
.1a6fbe	22 51 6f 1a	jsl $1a6f51	                JSL MEXECUTE        ; And execute the parsed command
.1a6fc2	80 e2		bra $1a6fa6	                BRA ready_loop
.1a6fc4					IMHELP
.1a6fc4	08		php		                PHP
.1a6fc5	8b		phb		                PHB
.1a6fc6	e2 20		sep #$20	            SEP #$20
.1a6fc8	a9 1a		lda #$1a	                LDA #`help_text
.1a6fca	48		pha		                PHA
.1a6fcb	ab		plb		                PLB
.1a6fcc	c2 10		rep #$10	            REP #$10
.1a6fce	a2 d7 6f	ldx #$6fd7	                LDX #<>help_text
.1a6fd1	20 29 04	jsr $1a0429	            JSR PRINTS
.1a6fd4	ab		plb		                PLB
.1a6fd5	28		plp		                PLP
.1a6fd6	6b		rtl		                RTL
>1a6fd7	41 20 3c 73 74 61 72 74		help_text       .text "A <start> <assembly>",CHAR_CR
>1a6fdf	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d
>1a6fec	20 20 41 73 73 65 6d 62		                .text "  Assemble a program",CHAR_CR,CHAR_CR
>1a6ff4	6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>1a7002	43 20 3c 73 74 61 72 74		                .text "C <start1> <start2> [len (1 if blank)]",CHAR_CR
>1a700a	31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e
>1a701a	20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d
>1a7029	20 20 43 6f 6d 70 61 72		                .text "  Compare to sections of memory",CHAR_CR,CHAR_CR
>1a7031	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>1a7041	20 6d 65 6d 6f 72 79 0d 0d
>1a704a	44 20 3c 73 74 61 72 74		                .text "D <start> [end]",CHAR_CR
>1a7052	3e 20 5b 65 6e 64 5d 0d
>1a705a	20 20 44 69 73 61 73 73		                .text "  Disassemble a program",CHAR_CR,CHAR_CR
>1a7062	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>1a7072	0d
>1a7073	46 20 3c 73 74 61 72 74		                .text "F <start> <end> <byte>",CHAR_CR
>1a707b	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d
>1a708a	20 20 46 69 6c 6c 20 61		                .text "  Fill a block of memory with a byte",CHAR_CR,CHAR_CR
>1a7092	20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>1a70a2	20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>1a70b0	47 20 5b 61 64 64 72 65		                .text "G [address]",CHAR_CR
>1a70b8	73 73 5d 0d
>1a70bc	20 20 53 74 61 72 74 20		                .text "  Start execution at a location",CHAR_CR,CHAR_CR
>1a70c4	65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>1a70d4	6f 63 61 74 69 6f 6e 0d 0d
>1a70dd	4a 20 5b 61 64 64 72 65		                .text "J [address] - Jump to a location in memory",CHAR_CR
>1a70e5	73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20
>1a70f5	6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>1a7105	72 79 0d
>1a7108	20 20 4a 75 6d 70 20 74		                .text "  Jump to a location in memory",CHAR_CR,CHAR_CR
>1a7110	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>1a7120	6d 65 6d 6f 72 79 0d 0d
>1a7128	48 20 3c 73 74 61 72 74		                .text "H <start> <end> <byte> [byte]..",CHAR_CR
>1a7130	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>1a7140	62 79 74 65 5d 2e 2e 0d
>1a7148	20 20 48 75 6e 74 20 66		                .text "  Hunt for values in memory",CHAR_CR,CHAR_CR
>1a7150	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>1a7160	6f 72 79 0d 0d
>1a7165	4c 20 20 20 20 20 4c 4f		                .text "L     LOAD         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," [destination]",CHAR_CR
>1a716d	41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a717d	22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>1a718d	4d 20 3c 73 74 61 72 74		                .text "M <start> [end]",CHAR_CR
>1a7195	3e 20 5b 65 6e 64 5d 0d
>1a719d	20 20 44 75 6d 70 20 74		                .text "  Dump the value in memory",CHAR_CR,CHAR_CR
>1a71a5	68 65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f
>1a71b5	72 79 0d 0d
>1a71b9	52 20 2d 20 44 69 73 70		                .text "R - Display the values of the registers",CHAR_CR,CHAR_CR
>1a71c1	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>1a71d1	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>1a71e1	0d
>1a71e2	3b 20 3c 50 43 3e 20 3c		                .text "; <PC> <A> <X> <Y> <SP> <DBR> <DP> <NVMXDIZC>",CHAR_CR
>1a71ea	41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>1a71fa	3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>1a720a	44 49 5a 43 3e 0d
>1a7210	20 20 43 68 61 6e 67 65		                .text "  Change the contents of the registers",CHAR_CR,CHAR_CR
>1a7218	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>1a7228	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>1a7238	53 20 20 20 20 20 53 41		                .text "S     SAVE         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," <start> <end>",CHAR_CR
>1a7240	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a7250	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>1a7260	54 20 3c 73 74 61 72 74		                .text "T <start> <end> <destination>",CHAR_CR
>1a7268	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>1a7278	74 69 6f 6e 3e 0d
>1a727e	20 20 54 72 61 6e 73 66		                .text "  Transfer (copy) data within memory",CHAR_CR,CHAR_CR
>1a7286	65 72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77
>1a7296	69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a72a4	57 20 3c 62 79 74 65 3e		                .text "W <byte>",CHAR_CR
>1a72ac	0d
>1a72ad	20 20 53 65 74 20 74 68		                .text "  Set the register width flags for the disassembler",CHAR_CR,CHAR_CR
>1a72b5	65 20 72 65 67 69 73 74 65 72 20 77 69 64 74 68
>1a72c5	20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20 64
>1a72d5	69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>1a72e2	58 20 2d 20 52 65 74 75		                .text "X - Return to BASIC",CHAR_CR,CHAR_CR
>1a72ea	72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>1a72f7	3e 20 3c 73 74 61 72 74		                .text "> <start> <byte> [byte]...",CHAR_CR
>1a72ff	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>1a730f	2e 2e 0d
>1a7312	20 20 45 64 69 74 20 64		                .text "  Edit data in memory",CHAR_CR,CHAR_CR
>1a731a	61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a7329	3f 20 2d 20 44 69 73 70		                .null "? - Display a short help screen",CHAR_CR,CHAR_CR
>1a7331	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>1a7341	20 73 63 72 65 65 6e 0d 0d 00
.1a734b					IMWIDTH
.1a734b	08		php		                PHP
.1a734c	08		php		            PHP
.1a734d	c2 20		rep #$20	            REP #$20
.1a734f	48		pha		            PHA
.1a7350	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7353	5b		tcd		            TCD
.1a7354	68		pla		            PLA
.1a7355	28		plp		            PLP
.1a7356	e2 20		sep #$20	            SEP #$20
.1a7358	a5 0d		lda $0855	                LDA MARG1
.1a735a	85 4e		sta $0896	                STA MCPUSTAT
.1a735c	28		plp		                PLP
.1a735d	6b		rtl		                RTL
.1a735e					IMREGISTERS
.1a735e	20 3d 02	jsr $1a023d	            JSR ENSURETEXT
.1a7361	08		php		            PHP
.1a7362	e2 20		sep #$20	            SEP #$20
.1a7364	48		pha		            PHA
.1a7365	a9 1a		lda #$1a	            LDA #`mregisters_msg
.1a7367	48		pha		            PHA
.1a7368	ab		plb		            PLB
.1a7369	68		pla		            PLA
.1a736a	28		plp		            PLP
.1a736b	a2 43 89	ldx #$8943	                LDX #<>mregisters_msg
.1a736e	20 29 04	jsr $1a0429	            JSR PRINTS
.1a7371	e2 20		sep #$20	            SEP #$20
.1a7373	a9 3b		lda #$3b	                LDA #';'
.1a7375	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7378	a9 20		lda #$20	                LDA #' '
.1a737a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a737d	c2 30		rep #$30	            REP #$30
.1a737f	08		php		            PHP
.1a7380	e2 20		sep #$20	            SEP #$20
.1a7382	48		pha		            PHA
.1a7383	a9 00		lda #$00	            LDA #$0
.1a7385	48		pha		            PHA
.1a7386	ab		plb		            PLB
.1a7387	68		pla		            PLA
.1a7388	28		plp		            PLP
.1a7389	a0 03 00	ldy #$0003	                LDY #3
.1a738c	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1a738f	20 ac 03	jsr $1a03ac	            JSR PRINTH
.1a7392	c2 20		rep #$20	            REP #$20
.1a7394	a9 20 00	lda #$0020	                LDA #' '
.1a7397	20 18 00	jsr $1a0018	            JSR PRINTC
.1a739a	af 44 02 00	lda $000244	                LDA @lCPUA
.1a739e	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a73a1	a9 20 00	lda #$0020	                LDA #' '
.1a73a4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a73a7	af 46 02 00	lda $000246	                LDA @lCPUX
.1a73ab	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a73ae	a9 20 00	lda #$0020	                LDA #' '
.1a73b1	20 18 00	jsr $1a0018	            JSR PRINTC
.1a73b4	af 48 02 00	lda $000248	                LDA @lCPUY
.1a73b8	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a73bb	a9 20 00	lda #$0020	                LDA #' '
.1a73be	20 18 00	jsr $1a0018	            JSR PRINTC
.1a73c1	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK
.1a73c5	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a73c8	a9 20 00	lda #$0020	                LDA #' '
.1a73cb	20 18 00	jsr $1a0018	            JSR PRINTC
.1a73ce	af 4e 02 00	lda $00024e	                LDA @lCPUDBR
.1a73d2	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a73d5	a9 20 00	lda #$0020	                LDA #' '
.1a73d8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a73db	a9 20 00	lda #$0020	                LDA #' '
.1a73de	20 18 00	jsr $1a0018	            JSR PRINTC
.1a73e1	af 4c 02 00	lda $00024c	                LDA @lCPUDP
.1a73e5	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a73e8	a9 20 00	lda #$0020	                LDA #' '
.1a73eb	20 18 00	jsr $1a0018	            JSR PRINTC
.1a73ee	08		php		                PHP
.1a73ef	e2 20		sep #$20	            SEP #$20
.1a73f1	ad 4f 02	lda $024f	                LDA CPUFLAGS
.1a73f4	22 5c 86 1a	jsl $1a865c	                JSL MPRINTB
.1a73f8	28		plp		                PLP
.1a73f9	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a73fc	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a73ff	6b		rtl		                RTL
.1a7400					IMFILL
.1a7400	08		php		                PHP                 ; Save the caller's context
.1a7401	0b		phd		                PHD
.1a7402	08		php		            PHP
.1a7403	c2 20		rep #$20	            REP #$20
.1a7405	48		pha		            PHA
.1a7406	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7409	5b		tcd		            TCD
.1a740a	68		pla		            PLA
.1a740b	28		plp		            PLP
.1a740c					do_copy
.1a740c	e2 20		sep #$20	            SEP #$20
.1a740e	a5 15		lda $085d	                LDA MARG3
.1a7410	87 0d		sta [$0855]	                STA [MARG1]
.1a7412	e2 20		sep #$20	            SEP #$20
.1a7414	a5 0f		lda $0857	                LDA MARG1+2
.1a7416	c5 13		cmp $085b	                CMP MARG2+2
.1a7418	d0 0e		bne $1a7428	                BNE go_next         ; No: we haven't reached end address yet
.1a741a	c2 20		rep #$20	            REP #$20
.1a741c	a5 0d		lda $0855	                LDA MARG1
.1a741e	c5 11		cmp $0859	                CMP MARG2           ; Are they equal?
.1a7420	d0 06		bne $1a7428	                BNE go_next         ; No: we haven't reached end address yet
.1a7422	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7425	2b		pld		                PLD                 ; Restore the caller's context
.1a7426	28		plp		                PLP
.1a7427	6b		rtl		                RTL
.1a7428					go_next
.1a7428	c2 20		rep #$20	            REP #$20
.1a742a	18		clc		                CLC
.1a742b	a5 0d		lda $0855	                LDA MARG1
.1a742d	69 01 00	adc #$0001	                ADC #1
.1a7430	85 0d		sta $0855	                STA MARG1
.1a7432	e2 20		sep #$20	            SEP #$20
.1a7434	a5 0e		lda $0856	                LDA MARG1+1
.1a7436	69 00		adc #$00	                ADC #0
.1a7438	85 0e		sta $0856	                STA MARG1+1
.1a743a	80 d0		bra $1a740c	                BRA do_copy
.1a743c					IMTRANSFER
.1a743c	08		php		                PHP
.1a743d	0b		phd		                PHD
.1a743e	08		php		            PHP
.1a743f	c2 20		rep #$20	            REP #$20
.1a7441	48		pha		            PHA
.1a7442	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7445	5b		tcd		            TCD
.1a7446	68		pla		            PLA
.1a7447	28		plp		            PLP
.1a7448	e2 20		sep #$20	            SEP #$20
.1a744a	a5 0f		lda $0857	                LDA MARG1+2
.1a744c	c5 17		cmp $085f	                CMP MARG3+2
.1a744e	90 45		bcc $1a7495	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.1a7450	c2 20		rep #$20	            REP #$20
.1a7452	a5 0d		lda $0855	                LDA MARG1
.1a7454	c5 15		cmp $085d	                CMP MARG3
.1a7456	90 3d		bcc $1a7495	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.1a7458					copy_byte_down
.1a7458	e2 20		sep #$20	            SEP #$20
.1a745a	a7 0d		lda [$0855]	                LDA [MARG1]         ; Copy the byte
.1a745c	87 15		sta [$085d]	                STA [MARG3]
.1a745e	a5 0f		lda $0857	                LDA MARG1+2         ; Are the source's current and end bank bytes equal?
.1a7460	c5 13		cmp $085b	                CMP MARG2+2
.1a7462	d0 0b		bne $1a746f	                BNE inc_pointers    ; No: we're not done yet
.1a7464	c2 20		rep #$20	            REP #$20
.1a7466	a5 0d		lda $0855	                LDA MARG1           ; Are the rest of the bits equal?
.1a7468	c5 11		cmp $0859	                CMP MARG2
.1a746a	d0 03		bne $1a746f	                BNE inc_pointers    ; No: we're not done yet
.1a746c	4c f3 74	jmp $1a74f3	                JMP done            ; Yes: we've copied the last byte, exit
.1a746f					inc_pointers
.1a746f	c2 20		rep #$20	            REP #$20
.1a7471	18		clc		                CLC
.1a7472	a5 0d		lda $0855	                LDA MARG1
.1a7474	69 01 00	adc #$0001	                ADC #1
.1a7477	85 0d		sta $0855	                STA MARG1
.1a7479	e2 20		sep #$20	            SEP #$20
.1a747b	a5 0e		lda $0856	                LDA MARG1+1
.1a747d	69 00		adc #$00	                ADC #0
.1a747f	85 0e		sta $0856	                STA MARG1+1
.1a7481	c2 20		rep #$20	            REP #$20
.1a7483	18		clc		                CLC
.1a7484	a5 15		lda $085d	                LDA MARG3
.1a7486	69 01 00	adc #$0001	                ADC #1
.1a7489	85 15		sta $085d	                STA MARG3
.1a748b	e2 20		sep #$20	            SEP #$20
.1a748d	a5 16		lda $085e	                LDA MARG3+1
.1a748f	69 00		adc #$00	                ADC #0
.1a7491	85 16		sta $085e	                STA MARG3+1
.1a7493	80 c3		bra $1a7458	                BRA copy_byte_down  ; And copy that next byte over
.1a7495					copy_up
.1a7495	c2 20		rep #$20	            REP #$20
.1a7497	38		sec		                SEC
.1a7498	a5 11		lda $0859	                LDA MARG2
.1a749a	e5 0d		sbc $0855	                SBC MARG1
.1a749c	85 19		sta $0861	                STA MARG4
.1a749e	e2 20		sep #$20	            SEP #$20
.1a74a0	a5 13		lda $085b	                LDA MARG2+2
.1a74a2	e5 0f		sbc $0857	                SBC MARG1+2
.1a74a4	85 1b		sta $0863	                STA MARG4+2
.1a74a6	c2 20		rep #$20	            REP #$20
.1a74a8	18		clc		                CLC
.1a74a9	a5 19		lda $0861	                LDA MARG4
.1a74ab	65 15		adc $085d	                ADC MARG3
.1a74ad	85 15		sta $085d	                STA MARG3
.1a74af	e2 20		sep #$20	            SEP #$20
.1a74b1	a5 1b		lda $0863	                LDA MARG4+2
.1a74b3	65 17		adc $085f	                ADC MARG3+2
.1a74b5	85 17		sta $085f	                STA MARG3+2
.1a74b7					copy_byte_up
.1a74b7	e2 20		sep #$20	            SEP #$20
.1a74b9	a7 11		lda [$0859]	                LDA [MARG2]
.1a74bb	87 15		sta [$085d]	                STA [MARG3]
.1a74bd	a5 13		lda $085b	                LDA MARG2+2         ; Are the source's current and start bank bytes equal?
.1a74bf	c5 0f		cmp $0857	                CMP MARG1+2
.1a74c1	d0 0a		bne $1a74cd	                BNE dec_pointers    ; No: we're not done yet
.1a74c3	c2 20		rep #$20	            REP #$20
.1a74c5	a5 11		lda $0859	                LDA MARG2           ; Are the rest of the bits equal?
.1a74c7	c5 0d		cmp $0855	                CMP MARG1
.1a74c9	d0 02		bne $1a74cd	                BNE dec_pointers    ; No: we're not done yet
.1a74cb	80 26		bra $1a74f3	                BRA done            ; Yes: we've copied the last byte, exit
.1a74cd					dec_pointers
.1a74cd	c2 20		rep #$20	            REP #$20
.1a74cf	38		sec		                SEC
.1a74d0	a5 11		lda $0859	                LDA MARG2
.1a74d2	e9 01 00	sbc #$0001	                SBC #1
.1a74d5	85 11		sta $0859	                STA MARG2
.1a74d7	e2 20		sep #$20	            SEP #$20
.1a74d9	a5 12		lda $085a	                LDA MARG2+1
.1a74db	e9 00		sbc #$00	                SBC #0
.1a74dd	85 12		sta $085a	                STA MARG2+1
.1a74df	c2 20		rep #$20	            REP #$20
.1a74e1	38		sec		                SEC                 ; Decrement the current destination pointer (MARG3)
.1a74e2	a5 15		lda $085d	                LDA MARG3
.1a74e4	e9 01 00	sbc #$0001	                SBC #1
.1a74e7	85 15		sta $085d	                STA MARG3
.1a74e9	e2 20		sep #$20	            SEP #$20
.1a74eb	a5 16		lda $085e	                LDA MARG3+1
.1a74ed	e9 00		sbc #$00	                SBC #0
.1a74ef	85 16		sta $085e	                STA MARG3+1
.1a74f1	80 c4		bra $1a74b7	                BRA copy_byte_up    ; And copy that next byte
.1a74f3					done
.1a74f3	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a74f6	2b		pld		                PLD
.1a74f7	28		plp		                PLP
.1a74f8	6b		rtl		                RTL
.1a74f9					IS_PRINTABLE
.1a74f9	08		php		                PHP
.1a74fa	e2 20		sep #$20	            SEP #$20
.1a74fc	c9 21		cmp #$21	                CMP #33
.1a74fe	90 0b		bcc $1a750b	                BLT not_printable   ; 0 .. 31 are not printable
.1a7500	c9 7f		cmp #$7f	                CMP #127
.1a7502	90 04		bcc $1a7508	                BLT printable       ; 32 .. 126 are printable
.1a7504	c9 a0		cmp #$a0	                CMP #160
.1a7506	90 03		bcc $1a750b	                BLT not_printable   ; 127 .. 159 are not printable (assuming Latin-1)
.1a7508	28		plp		printable       PLP
.1a7509	38		sec		                SEC
.1a750a	6b		rtl		                RTL
.1a750b	28		plp		not_printable   PLP
.1a750c	18		clc		                CLC
.1a750d	6b		rtl		                RTL
=256					MMEMDUMPSIZE = 256  ; Default number of bytes to dump
=8					MMEMROWSIZE = 8    ; Number of bytes to dump per-row
.1a750e					IMMEMORY
.1a750e	08		php		                PHP
.1a750f	8b		phb		                PHB
.1a7510	0b		phd		                PHD
.1a7511	08		php		            PHP
.1a7512	c2 20		rep #$20	            REP #$20
.1a7514	48		pha		            PHA
.1a7515	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7518	5b		tcd		            TCD
.1a7519	68		pla		            PLA
.1a751a	28		plp		            PLP
.1a751b	e2 20		sep #$20	            SEP #$20
.1a751d	a9 00		lda #$00	                LDA #0              ; Clear the pagination line counter
.1a751f	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT
.1a7523	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a7525	c9 02		cmp #$02	                CMP #2
.1a7527	b0 16		bcs $1a753f	                BGE set_cursor      ; 2>= arguments? Use them as-is
.1a7529	c9 01		cmp #$01	                CMP #1
.1a752b	90 20		bcc $1a754d	                BLT no_args         ; No arguments passed? Use defaults
.1a752d	c2 20		rep #$20	            REP #$20
.1a752f	18		clc		                CLC
.1a7530	a5 0d		lda $0855	                LDA MARG1
.1a7532	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a7535	85 11		sta $0859	                STA MARG2
.1a7537	e2 20		sep #$20	            SEP #$20
.1a7539	a5 0f		lda $0857	                LDA MARG1+2
.1a753b	69 00		adc #$00	                ADC #0
.1a753d	85 13		sta $085b	                STA MARG2+2
.1a753f					set_cursor
.1a753f	c2 20		rep #$20	            REP #$20
.1a7541	a5 0d		lda $0855	                LDA MARG1
.1a7543	85 32		sta $087a	                STA MCURSOR
.1a7545	e2 20		sep #$20	            SEP #$20
.1a7547	a5 0f		lda $0857	                LDA MARG1+2
.1a7549	85 34		sta $087c	                STA MCURSOR+2
.1a754b	80 12		bra $1a755f	                BRA dump_line
.1a754d					no_args
.1a754d	c2 20		rep #$20	            REP #$20
.1a754f	18		clc		                CLC
.1a7550	a5 32		lda $087a	                LDA MCURSOR
.1a7552	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a7555	85 11		sta $0859	                STA MARG2
.1a7557	e2 20		sep #$20	            SEP #$20
.1a7559	a5 34		lda $087c	                LDA MCURSOR+2
.1a755b	69 00		adc #$00	                ADC #0
.1a755d	85 13		sta $085b	                STA MARG2+2
.1a755f					dump_line
.1a755f	e2 20		sep #$20	            SEP #$20
.1a7561	a0 00 00	ldy #$0000	                LDY #0
.1a7564	c2 20		rep #$20	            REP #$20
.1a7566	a5 32		lda $087a	                LDA MCURSOR             ; NOTE: the use of MARG4 here is a temporary
.1a7568	85 19		sta $0861	                STA MARG4               ; hack. the copy_loop instruction does not
.1a756a	e2 20		sep #$20	            SEP #$20
.1a756c	a5 34		lda $087c	                LDA MCURSOR+2
.1a756e	85 1b		sta $0863	                STA MARG4+2
.1a7570	e2 20		sep #$20	            SEP #$20
.1a7572	a7 19		lda [$0861]	copy_loop       LDA [MARG4]             ; TODO: Should be LDA [MCURSOR],Y, which doesn't seem to be working
.1a7574	22 f9 74 1a	jsl $1a74f9	                JSL IS_PRINTABLE        ; Is it printable?
.1a7578	b0 02		bcs $1a757c	                BCS buffer_char         ; Yes: go ahead and add it to the line buffer
.1a757a	a9 3f		lda #$3f	                LDA #'?'                ; No: replace it with dot
.1a757c	99 7e 08	sta $087e,y	buffer_char     STA #MLINEBUF,B,Y
.1a757f	c2 20		rep #$20	            REP #$20
.1a7581	18		clc		                CLC
.1a7582	a5 19		lda $0861	                LDA MARG4
.1a7584	69 01 00	adc #$0001	                ADC #1
.1a7587	85 19		sta $0861	                STA MARG4
.1a7589	e2 20		sep #$20	            SEP #$20
.1a758b	a5 1b		lda $0863	                LDA MARG4+2
.1a758d	69 00		adc #$00	                ADC #0
.1a758f	85 1b		sta $0863	                STA MARG4+2
.1a7591	c8		iny		                INY
.1a7592	c0 08 00	cpy #$0008	                CPY #MMEMROWSIZE
.1a7595	90 db		bcc $1a7572	                BLT copy_loop
.1a7597	a9 00		lda #$00	                LDA #0
.1a7599	99 7e 08	sta $087e,y	                STA #MLINEBUF,B,Y
.1a759c	a9 3e		lda #$3e	                LDA #'>'
.1a759e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75a1	a9 20		lda #$20	                LDA #' '
.1a75a3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75a6	e2 20		sep #$20	            SEP #$20
.1a75a8	a5 34		lda $087c	                LDA MCURSOR+2
.1a75aa	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a75ad	a9 3a		lda #$3a	                LDA #':'                ; then a colon
.1a75af	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75b2	c2 20		rep #$20	            REP #$20
.1a75b4	a5 32		lda $087a	                LDA MCURSOR
.1a75b6	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a75b9	c2 20		rep #$20	            REP #$20
.1a75bb	a9 08 00	lda #$0008	                LDA #MMEMROWSIZE
.1a75be	85 47		sta $088f	                STA MCOUNT
.1a75c0					prhex_loop
.1a75c0	e2 20		sep #$20	            SEP #$20
.1a75c2	a9 20		lda #$20	                LDA #' '
.1a75c4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75c7	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a75c9	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a75cc	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR        ; Point MCURSOR to the next byte
.1a75d0					check_line
.1a75d0	e2 20		sep #$20	            SEP #$20
.1a75d2	c6 47		dec $088f	                DEC MCOUNT              ; Count down the number of bytes on the row
.1a75d4	d0 ea		bne $1a75c0	                BNE prhex_loop          ; If we're not at zero, keep looping over the bytes
.1a75d6	a9 20		lda #$20	                LDA #' '
.1a75d8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75db	a9 20		lda #$20	                LDA #' '
.1a75dd	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75e0	08		php		            PHP
.1a75e1	e2 20		sep #$20	            SEP #$20
.1a75e3	48		pha		            PHA
.1a75e4	a9 00		lda #$00	            LDA #`MLINEBUF
.1a75e6	48		pha		            PHA
.1a75e7	ab		plb		            PLB
.1a75e8	68		pla		            PLA
.1a75e9	28		plp		            PLP
.1a75ea	a2 7e 08	ldx #$087e	                LDX #MLINEBUF
.1a75ed	20 29 04	jsr $1a0429	            JSR PRINTS
.1a75f0	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a75f3	20 b3 03	jsr $1a03b3	            JSR PAGINATE
.1a75f6	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.1a75f8	c5 13		cmp $085b	                CMP MARG2+2
.1a75fa	90 0f		bcc $1a760b	                BLT continue            ; No: continue
.1a75fc	c2 20		rep #$20	            REP #$20
.1a75fe	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.1a7600	c5 11		cmp $0859	                CMP MARG2
.1a7602	90 07		bcc $1a760b	                BLT continue            ; Nope... keep going
.1a7604					done
.1a7604	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7607	2b		pld		                PLD
.1a7608	ab		plb		                PLB
.1a7609	28		plp		                PLP
.1a760a	6b		rtl		                RTL
.1a760b	4c 5f 75	jmp $1a755f	continue        JMP dump_line
.1a760e					M_COPY_ARGB
.1a760e	08		php		                PHP
.1a760f	8d 92 08	sta $0892	                STA MTEMP
.1a7612	e2 20		sep #$20	            SEP #$20
.1a7614	bd 00 00	lda $0000,x	loop            LDA #0,B,X
.1a7617	99 00 00	sta $0000,y	                STA #0,B,Y      ; Copy the byte
.1a761a	ad 92 08	lda $0892	                LDA MTEMP       ; Check the count of characters remaining
.1a761d	f0 0a		beq $1a7629	                BEQ done        ; If it's 0, we're done
.1a761f	c8		iny		                INY             ; Point to the next destination byte
.1a7620	e8		inx		                INX             ; Point to the next source byte (skip three bytes)
.1a7621	e8		inx		                INX
.1a7622	e8		inx		                INX
.1a7623	e8		inx		                INX
.1a7624	ce 92 08	dec $0892	                DEC MTEMP       ; Count down and see if we're done
.1a7627	80 eb		bra $1a7614	                BRA loop
.1a7629	28		plp		done            PLP
.1a762a	6b		rtl		                RTL
.1a762b					IMMODIFY
.1a762b	08		php		                PHP
.1a762c	0b		phd		                PHD
.1a762d	8b		phb		                PHB
.1a762e	08		php		            PHP
.1a762f	c2 20		rep #$20	            REP #$20
.1a7631	48		pha		            PHA
.1a7632	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7635	5b		tcd		            TCD
.1a7636	68		pla		            PLA
.1a7637	28		plp		            PLP
.1a7638	08		php		            PHP
.1a7639	e2 20		sep #$20	            SEP #$20
.1a763b	48		pha		            PHA
.1a763c	a9 00		lda #$00	            LDA #0
.1a763e	48		pha		            PHA
.1a763f	ab		plb		            PLB
.1a7640	68		pla		            PLA
.1a7641	28		plp		            PLP
.1a7642	c2 30		rep #$30	            REP #$30
.1a7644	a5 0d		lda $0855	                LDA MARG1           ; Set MCURSOR to MARG1
.1a7646	85 32		sta $087a	                STA MCURSOR
.1a7648	a5 0f		lda $0857	                LDA MARG1+2
.1a764a	85 34		sta $087c	                STA MCURSOR+2
.1a764c	e2 20		sep #$20	            SEP #$20
.1a764e	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.1a7650	3a		dec a		                DEC A               ; (MARG_LEN - 1)
.1a7651	85 47		sta $088f	                STA MCOUNT
.1a7653	a2 59 08	ldx #$0859	                LDX #<>MARG2        ; Copy MCOUNT bytes from MARG2..MARG9
.1a7656	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF     ; to MLINEBUF
.1a7659	22 0e 76 1a	jsl $1a760e	                JSL M_COPY_ARGB
.1a765d	a0 00 00	ldy #$0000	                LDY #0
.1a7660	b9 7e 08	lda $087e,y	loop            LDA MLINEBUF,Y      ; Copy the byte from the buffer
.1a7663	87 32		sta [$087a]	                STA [MCURSOR]       ; To the address indicated by MCURSOR
.1a7665	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR    ; Advance the cursor
.1a7669	c8		iny		                INY                 ; Go to the next buffered byte
.1a766a	c4 47		cpy $088f	                CPY MCOUNT          ; Did we just write the last one?
.1a766c	d0 f2		bne $1a7660	                BNE loop            ; No: continue writing
.1a766e	ab		plb		                PLB
.1a766f	2b		pld		                PLD
.1a7670	28		plp		                PLP
.1a7671	6b		rtl		                RTL
.1a7672					IMHUNT
.1a7672	08		php		                PHP
.1a7673	0b		phd		                PHD
.1a7674	8b		phb		                PHB
.1a7675	08		php		            PHP
.1a7676	c2 20		rep #$20	            REP #$20
.1a7678	48		pha		            PHA
.1a7679	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a767c	5b		tcd		            TCD
.1a767d	68		pla		            PLA
.1a767e	28		plp		            PLP
.1a767f	08		php		            PHP
.1a7680	e2 20		sep #$20	            SEP #$20
.1a7682	48		pha		            PHA
.1a7683	a9 00		lda #$00	            LDA #0
.1a7685	48		pha		            PHA
.1a7686	ab		plb		            PLB
.1a7687	68		pla		            PLA
.1a7688	28		plp		            PLP
.1a7689	e2 20		sep #$20	            SEP #$20
.1a768b	c2 10		rep #$10	            REP #$10
.1a768d	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.1a768f	3a		dec a		                DEC A               ; (MARG_LEN - 2)
.1a7690	3a		dec a		                DEC A
.1a7691	85 47		sta $088f	                STA MCOUNT
.1a7693	a2 5d 08	ldx #$085d	                LDX #<>MARG3
.1a7696	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF
.1a7699	22 0e 76 1a	jsl $1a760e	                JSL M_COPY_ARGB
.1a769d	c2 20		rep #$20	            REP #$20
.1a769f	a5 0d		lda $0855	                LDA MARG1           ; Copy starting address to MCURSOR
.1a76a1	85 32		sta $087a	                STA MCURSOR
.1a76a3	a5 0f		lda $0857	                LDA MARG1+2
.1a76a5	85 34		sta $087c	                STA MCURSOR+2
.1a76a7					outer_loop
.1a76a7	c2 20		rep #$20	            REP #$20
.1a76a9	a5 34		lda $087c	                LDA MCURSOR+2      ; If MCURSOR < MARG2, we're not done yet
.1a76ab	c5 13		cmp $085b	                CMP MARG2+2
.1a76ad	d0 06		bne $1a76b5	                BNE not_done
.1a76af	a5 32		lda $087a	                LDA MCURSOR
.1a76b1	c5 11		cmp $0859	                CMP MARG2
.1a76b3	f0 2c		beq $1a76e1	                BEQ done            ; MCURSOR = MARG2: we're done
.1a76b5					not_done
.1a76b5	e2 20		sep #$20	            SEP #$20
.1a76b7	a0 00 00	ldy #$0000	                LDY #0
.1a76ba	b7 32		lda [$087a],y	cmp_loop        LDA [MCURSOR],Y     ; Get the byte from the memory to check
.1a76bc	d9 7e 08	cmp $087e,y	                CMP MLINEBUF,Y      ; Compare it against our pattern
.1a76bf	d0 1a		bne $1a76db	                BNE advance         ; If not equal, we need to move on
.1a76c1	c8		iny		                INY                 ; Otherwise do we have more bytes to check?
.1a76c2	c4 47		cpy $088f	                CPY MCOUNT
.1a76c4	d0 f4		bne $1a76ba	                BNE cmp_loop        ; No: check more
.1a76c6	c2 20		rep #$20	            REP #$20
.1a76c8	a5 32		lda $087a	                LDA MCURSOR         ; Print the address
.1a76ca	85 4a		sta $0892	                STA MTEMP
.1a76cc	a5 34		lda $087c	                LDA MCURSOR+2
.1a76ce	85 4c		sta $0894	                STA MTEMP+2
.1a76d0	22 e5 80 1a	jsl $1a80e5	                JSL M_PR_ADDR
.1a76d4	e2 20		sep #$20	            SEP #$20
.1a76d6	a9 20		lda #$20	                LDA #' '
.1a76d8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a76db	22 3b 86 1a	jsl $1a863b	advance         JSL M_INC_CURSOR    ; Move MCURSOR forward by one
.1a76df	80 c6		bra $1a76a7	                BRA outer_loop      ; And try to compare that to the pattern
.1a76e1					done
.1a76e1	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a76e4	ab		plb		                PLB
.1a76e5	2b		pld		                PLD
.1a76e6	28		plp		                PLP
.1a76e7	6b		rtl		                RTL
.1a76e8					IMJUMP
.1a76e8	08		php		            PHP
.1a76e9	c2 20		rep #$20	            REP #$20
.1a76eb	48		pha		            PHA
.1a76ec	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a76ef	5b		tcd		            TCD
.1a76f0	68		pla		            PLA
.1a76f1	28		plp		            PLP
.1a76f2	e2 20		sep #$20	            SEP #$20
.1a76f4	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.1a76f6	f0 0e		beq $1a7706	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.1a76f8	c2 30		rep #$30	            REP #$30
.1a76fa	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.1a76fc	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.1a7700	a5 0f		lda $0857	                LDA MARG1+2
.1a7702	8f 42 02 00	sta $000242	                STA @lCPUPBR
.1a7706	af 46 02 00	lda $000246	MJUMPRESTORE    LDA @lCPUX          ; Restore X and Y
.1a770a	aa		tax		                TAX
.1a770b	af 48 02 00	lda $000248	                LDA @lCPUY
.1a770f	a8		tay		                TAY
.1a7710	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.1a7714	1b		tcs		                TCS
.1a7715	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.1a7719	5b		tcd		                TCD
.1a771a	e2 20		sep #$20	            SEP #$20
.1a771c	a9 1a		lda #$1a	                LDA #`MJUMPSTART
.1a771e	48		pha		                PHA
.1a771f	a9 77		lda #$77	                LDA #>MJUMPSTART
.1a7721	48		pha		                PHA
.1a7722	a9 28		lda #$28	                LDA #<MJUMPSTART
.1a7724	48		pha		                PHA
.1a7725	4c 5f 77	jmp $1a775f	                JMP MGOSTACK        ; And push remaining registers and restart execution
.1a7728	ea		nop		MJUMPSTART      NOP                 ; RTL increments PC pulled from stack, NOP leaves space for that
.1a7729	5c 04 00 1a	jmp $1a0004	                JML MONITOR
.1a772d					IMGO
.1a772d	08		php		            PHP
.1a772e	c2 20		rep #$20	            REP #$20
.1a7730	48		pha		            PHA
.1a7731	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a7734	5b		tcd		            TCD
.1a7735	68		pla		            PLA
.1a7736	28		plp		            PLP
.1a7737	e2 20		sep #$20	            SEP #$20
.1a7739	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.1a773b	f0 c9		beq $1a7706	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.1a773d	c2 30		rep #$30	            REP #$30
.1a773f	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.1a7741	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.1a7745	a5 0f		lda $0857	                LDA MARG1+2
.1a7747	8f 42 02 00	sta $000242	                STA @lCPUPBR
.1a774b	af 46 02 00	lda $000246	MGORESTORE      LDA @lCPUX          ; Restore X and Y
.1a774f	aa		tax		                TAX
.1a7750	af 48 02 00	lda $000248	                LDA @lCPUY
.1a7754	a8		tay		                TAY
.1a7755	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.1a7759	1b		tcs		                TCS
.1a775a	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.1a775e	5b		tcd		                TCD
.1a775f					MGOSTACK
.1a775f	e2 20		sep #$20	            SEP #$20
.1a7761	af 4e 02 00	lda $00024e	                LDA @lCPUDBR        ; Restore the data bank register
.1a7765	48		pha		                PHA
.1a7766	ab		plb		                PLB
.1a7767	a9 5c		lda #$5c	                LDA #$5C            ; Save the JSL opcode
.1a7769	8f a2 08 00	sta $0008a2	                STA @lMJUMPINST
.1a776d	af 42 02 00	lda $000242	                LDA @lCPUPBR        ; Write PBR
.1a7771	8f a5 08 00	sta $0008a5	                STA @lMJUMPADDR+2
.1a7775	af 41 02 00	lda $000241	                LDA @lCPUPC+1       ; Write PCH
.1a7779	8f a4 08 00	sta $0008a4	                STA @lMJUMPADDR+1
.1a777d	af 40 02 00	lda $000240	                LDA @lCPUPC         ; Write PCL
.1a7781	8f a3 08 00	sta $0008a3	                STA @lMJUMPADDR
.1a7785	af 4f 02 00	lda $00024f	                LDA @lCPUFLAGS      ; Push processor status
.1a7789	48		pha		                PHA
.1a778a	c2 20		rep #$20	            REP #$20
.1a778c	af 44 02 00	lda $000244	                LDA @lCPUA          ; Restore A
.1a7790	28		plp		                PLP                 ; And the status register
.1a7791	5c a2 08 00	jmp $0008a2	                JML MJUMPINST       ; And jump to the target address
.1a7795					IMCOMPARE
.1a7795	08		php		                PHP
.1a7796	0b		phd		                PHD
.1a7797	8b		phb		                PHB
.1a7798	08		php		            PHP
.1a7799	e2 20		sep #$20	            SEP #$20
.1a779b	48		pha		            PHA
.1a779c	a9 1a		lda #$1a	            LDA #`MERRARGS
.1a779e	48		pha		            PHA
.1a779f	ab		plb		            PLB
.1a77a0	68		pla		            PLA
.1a77a1	28		plp		            PLP
.1a77a2	08		php		            PHP
.1a77a3	c2 20		rep #$20	            REP #$20
.1a77a5	48		pha		            PHA
.1a77a6	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a77a9	5b		tcd		            TCD
.1a77aa	68		pla		            PLA
.1a77ab	28		plp		            PLP
.1a77ac	c2 10		rep #$10	            REP #$10
.1a77ae	e2 20		sep #$20	            SEP #$20
.1a77b0	a5 31		lda $0879	                LDA MARG_LEN                ; Check the number of arguments provided
.1a77b2	c9 02		cmp #$02	                CMP #2
.1a77b4	f0 0c		beq $1a77c2	                BEQ default_len             ; If 2: set MCOUNT to default of 1
.1a77b6	c9 03		cmp #$03	                CMP #3
.1a77b8	d0 11		bne $1a77cb	                BNE bad_arguments           ; Otherwise, if not 3: print an error
.1a77ba	c2 20		rep #$20	            REP #$20
.1a77bc	a5 15		lda $085d	                LDA MARG3                   ; If 3: set MCOUNT to MARG3
.1a77be	85 47		sta $088f	                STA MCOUNT
.1a77c0	80 11		bra $1a77d3	                BRA compare
.1a77c2					default_len
.1a77c2	c2 20		rep #$20	            REP #$20
.1a77c4	a9 01 00	lda #$0001	                LDA #1                      ; No length was provided, set MCOUNT to 1
.1a77c7	85 47		sta $088f	                STA MCOUNT
.1a77c9	80 08		bra $1a77d3	                BRA compare
.1a77cb	a2 07 89	ldx #$8907	bad_arguments   LDX #<>MERRARGS             ; The wrong number of arguments was provided
.1a77ce	20 29 04	jsr $1a0429	            JSR PRINTS
.1a77d1	80 35		bra $1a7808	                BRA done
.1a77d3	a5 0d		lda $0855	compare         LDA MARG1                   ; Set MTEMP to MARG1
.1a77d5	85 4a		sta $0892	                STA MTEMP
.1a77d7	a5 0f		lda $0857	                LDA MARG1+2
.1a77d9	85 4c		sta $0894	                STA MTEMP+2
.1a77db	a0 00 00	ldy #$0000	                LDY #0
.1a77de					loop
.1a77de	e2 20		sep #$20	            SEP #$20
.1a77e0	a7 4a		lda [$0892]	                LDA [MTEMP]                 ; Compare the byte at MTEMP
.1a77e2	d7 11		cmp [$0859],y	                CMP [MARG2],Y               ; To the Yth byte from MARG2
.1a77e4	f0 09		beq $1a77ef	                BEQ continue                ; If they're the same, keep going
.1a77e6	22 e5 80 1a	jsl $1a80e5	mismatch        JSL M_PR_ADDR               ; If they're different, print MTEMP
.1a77ea	a9 20		lda #$20	                LDA #' '
.1a77ec	20 18 00	jsr $1a0018	            JSR PRINTC
.1a77ef					continue
.1a77ef	c2 20		rep #$20	            REP #$20
.1a77f1	18		clc		                CLC                         ; Either way, increment MTEMP
.1a77f2	a5 4a		lda $0892	                LDA MTEMP
.1a77f4	69 01 00	adc #$0001	                ADC #1
.1a77f7	85 4a		sta $0892	                STA MTEMP
.1a77f9	a5 4c		lda $0894	                LDA MTEMP+2
.1a77fb	69 00 00	adc #$0000	                ADC #0
.1a77fe	85 4c		sta $0894	                STA MTEMP+2
.1a7800	c8		iny		                INY                         ; Increment Y
.1a7801	c4 47		cpy $088f	                CPY MCOUNT                  ; Try again unless we've checked MCOUNT bytes
.1a7803	d0 d9		bne $1a77de	                BNE loop
.1a7805	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7808					done
.1a7808	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a780b	ab		plb		                PLB
.1a780c	2b		pld		                PLD
.1a780d	28		plp		                PLP
.1a780e	6b		rtl		                RTL
.1a780f					IMRMODIFY
.1a780f	08		php		                PHP
.1a7810	0b		phd		                PHD
.1a7811	8b		phb		                PHB
.1a7812	08		php		            PHP
.1a7813	e2 20		sep #$20	            SEP #$20
.1a7815	48		pha		            PHA
.1a7816	a9 00		lda #$00	            LDA #0
.1a7818	48		pha		            PHA
.1a7819	ab		plb		            PLB
.1a781a	68		pla		            PLA
.1a781b	28		plp		            PLP
.1a781c	08		php		            PHP
.1a781d	c2 20		rep #$20	            REP #$20
.1a781f	48		pha		            PHA
.1a7820	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a7823	5b		tcd		            TCD
.1a7824	68		pla		            PLA
.1a7825	28		plp		            PLP
.1a7826	e2 20		sep #$20	            SEP #$20
.1a7828	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a782a	f0 4f		beq $1a787b	                BEQ done            ; 0? Just quit
.1a782c	a6 0d		ldx $0855	                LDX MARG1           ; Set the PC and PBR
.1a782e	8e 40 02	stx $0240	                STX #CPUPC,B
.1a7831	a6 0f		ldx $0857	                LDX MARG1+2
.1a7833	8e 42 02	stx $0242	                STX #CPUPBR,B
.1a7836	c9 01		cmp #$01	                CMP #1              ; Check the number of arguments
.1a7838	f0 41		beq $1a787b	                BEQ done            ; 1? Just quit
.1a783a	a6 11		ldx $0859	                LDX MARG2           ; Set A
.1a783c	8e 44 02	stx $0244	                STX #CPUA,B
.1a783f	c9 02		cmp #$02	                CMP #2              ; Check the number of arguments
.1a7841	f0 38		beq $1a787b	                BEQ done            ; 2? Just quit
.1a7843	a6 15		ldx $085d	                LDX MARG3           ; Set X
.1a7845	8e 46 02	stx $0246	                STX #CPUX,B
.1a7848	c9 03		cmp #$03	                CMP #3              ; Check the number of arguments
.1a784a	f0 2f		beq $1a787b	                BEQ done            ; 3? Just quit
.1a784c	a6 19		ldx $0861	                LDX MARG4           ; Set Y
.1a784e	8e 48 02	stx $0248	                STX #CPUY,B
.1a7851	c9 04		cmp #$04	                CMP #4              ; Check the number of arguments
.1a7853	f0 26		beq $1a787b	                BEQ done            ; 4? Just quit
.1a7855	a6 1d		ldx $0865	                LDX MARG5           ; Set SP
.1a7857	8e 4a 02	stx $024a	                STX #CPUSTACK,B
.1a785a	c9 05		cmp #$05	                CMP #5              ; Check the number of arguments
.1a785c	f0 1d		beq $1a787b	                BEQ done            ; 5? Just quit
.1a785e	e2 10		sep #$10	            SEP #$10
.1a7860	a6 21		ldx $0869	                LDX MARG6           ; Set DBR
.1a7862	8e 4e 02	stx $024e	                STX #CPUDBR,B
.1a7865	c9 06		cmp #$06	                CMP #6              ; Check the number of arguments
.1a7867	f0 12		beq $1a787b	                BEQ done            ; 6? Just quit
.1a7869	c2 10		rep #$10	            REP #$10
.1a786b	a6 25		ldx $086d	                LDX MARG7           ; Set DP
.1a786d	8e 4c 02	stx $024c	                STX #CPUDP,B
.1a7870	c9 07		cmp #$07	                CMP #7              ; Check the number of arguments
.1a7872	f0 07		beq $1a787b	                BEQ done            ; 7? Just quit
.1a7874	e2 10		sep #$10	            SEP #$10
.1a7876	a6 29		ldx $0871	                LDX MARG8           ; Set flags
.1a7878	8e 4f 02	stx $024f	                STX #CPUFLAGS,B
.1a787b	ab		plb		done            PLB
.1a787c	2b		pld		                PLD
.1a787d	28		plp		                PLP
.1a787e	6b		rtl		                RTL
.1a787f					IMEXECUTE
.1a787f	08		php		                PHP
.1a7880	0b		phd		                PHD
.1a7881	8b		phb		                PHB
.1a7882	08		php		            PHP
.1a7883	c2 20		rep #$20	            REP #$20
.1a7885	48		pha		            PHA
.1a7886	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7889	5b		tcd		            TCD
.1a788a	68		pla		            PLA
.1a788b	28		plp		            PLP
.1a788c	e2 20		sep #$20	            SEP #$20
.1a788e	c2 10		rep #$10	            REP #$10
.1a7890	a2 00 00	ldx #$0000	                LDX #0
.1a7893	bf 74 89 1a	lda $1a8974,x	loop            LDA @lMCOMMANDS,X
.1a7897	f0 18		beq $1a78b1	                BEQ done
.1a7899	c7 08		cmp [$0850]	                CMP [MCMD]
.1a789b	f0 03		beq $1a78a0	                BEQ found
.1a789d	e8		inx		                INX
.1a789e	80 f3		bra $1a7893	                BRA loop
.1a78a0					found
.1a78a0	c2 20		rep #$20	            REP #$20
.1a78a2	8a		txa		                TXA
.1a78a3	0a		asl a		                ASL A
.1a78a4	aa		tax		                TAX
.1a78a5	bf b5 78 1a	lda $1a78b5,x	                LDA dispatch,X
.1a78a9	8f 2f 08 00	sta $00082f	                STA @lJMP16PTR
.1a78ad	22 d9 78 1a	jsl $1a78d9	                JSL MDOCMD
.1a78b1	ab		plb		done            PLB
.1a78b2	2b		pld		                PLD
.1a78b3	28		plp		                PLP
.1a78b4	6b		rtl		                RTL
>1a78b5	55 6f				dispatch        .word <>MASSEMBLE
>1a78b7	5d 6f				                .word <>MCOMPARE
>1a78b9	61 6f				                .word <>MDISASSEMBLE
>1a78bb	65 6f				                .word <>MFILL
>1a78bd	69 6f				                .word <>MGO
>1a78bf	6d 6f				                .word <>MJUMP
>1a78c1	71 6f				                .word <>MHUNT
>1a78c3	75 6f				                .word <>MLOAD
>1a78c5	79 6f				                .word <>MMEMORY
>1a78c7	7d 6f				                .word <>MREGISTERS
>1a78c9	59 6f				                .word <>MRMODIFY
>1a78cb	81 6f				                .word <>MSAVE
>1a78cd	85 6f				                .word <>MTRANSFER
>1a78cf	89 6f				                .word <>MVERIFY
>1a78d1	4b 73				                .word <>IMWIDTH
>1a78d3	8d 6f				                .word <>MEXIT
>1a78d5	91 6f				                .word <>MMODIFY
>1a78d7	c4 6f				                .word <>IMHELP
.1a78d9					MDOCMD
.1a78d9	6c 2f 08	jmp ($082f)	                JMP (JMP16PTR)

;******  Processing file: src\assembler.s

=0					ADDR_DP_IND_X = 0       ; (dd,X)
=1					ADDR_DP = 1             ; dd
=2					ADDR_IMM = 2            ; #dd
=3					ADDR_ABS = 3            ; dddd
=4					ADDR_DP_IND_Y = 4       ; (dd),Y
=5					ADDR_DP_X = 5           ; dd,X
=6					ADDR_ABS_Y = 6          ; dddd,Y
=7					ADDR_ABS_X = 7          ; dddd,X
=8					ADDR_ACC = 8            ; A
=9					ADDR_SP_R = 9           ; #d,S
=10					ADDR_DP_LONG = 10       ; [dd]
=11					ADDR_ABS_LONG = 11      ; dddddd
=12					ADDR_SP_R_Y = 12        ; #dd,S,Y
=13					ADDR_DP_Y_LONG = 13     ; [dd],Y
=14					ADDR_ABS_X_LONG = 14    ; dddddd,X
=15					ADDR_DP_IND = 15        ; (dd)
=16					ADDR_ABS_X_ID = 16      ; (dddd,X)
=17					ADDR_DP_Y = 17          ; dd,Y
=18					ADDR_PC_REL = 18        ; PC relative
=19					ADDR_IMPLIED = 19       ; Implied (no operand)
=20					ADDR_XYC = 20           ; #dd, #dd
=21					ADDR_ABS_IND = 21       ; (dddd)
=22					ADDR_PC_REL_LONG = 22   ; PC relative ()
=23					ADDR_ABS_IND_LONG = 23  ; [dddd]
=$80					OP_M_EFFECT = $80       ; Flag to indicate instruction is modified by M
=$40					OP_X_EFFECT = $40       ; Flag to indicate instruction is modified by X
.1a78dc					IMASSEMBLE
.1a78dc	08		php		                PHP
.1a78dd	8b		phb		                PHB
.1a78de	0b		phd		                PHD
.1a78df	08		php		            PHP
.1a78e0	c2 20		rep #$20	            REP #$20
.1a78e2	48		pha		            PHA
.1a78e3	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a78e6	5b		tcd		            TCD
.1a78e7	68		pla		            PLA
.1a78e8	28		plp		            PLP
.1a78e9	e2 20		sep #$20	            SEP #$20
.1a78eb	a5 31		lda $0879	                LDA MARG_LEN            ; Do we have at least 2 arguments?
.1a78ed	c9 02		cmp #$02	                CMP #2
.1a78ef	b0 03		bcs $1a78f4	                BGE has_args            ; Yes: try to assemble the line
.1a78f1	4c 82 7a	jmp $1a7a82	                JMP done                ; No: just return
.1a78f4					has_args
.1a78f4	c2 20		rep #$20	            REP #$20
.1a78f6	a5 0d		lda $0855	                LDA MARG1               ; Set the monitor cursor to the address
.1a78f8	85 32		sta $087a	                STA MCURSOR
.1a78fa	a5 0f		lda $0857	                LDA MARG1+2
.1a78fc	85 34		sta $087c	                STA MCURSOR+2
.1a78fe	c2 20		rep #$20	            REP #$20
.1a7900	22 84 7c 1a	jsl $1a7c84	                JSL AS_FIND_MNEMO       ; Find the address of the mnemonic
.1a7904	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a7907	f0 10		beq $1a7919	                BEQ bad_mnemonic        ; If not found, print bad mnemonic error message
.1a7909	85 54		sta $089c	                STA MMNEMONIC
.1a790b	e2 20		sep #$20	            SEP #$20
.1a790d	a5 31		lda $0879	                LDA MARG_LEN            ; Check the number of arguments passed
.1a790f	c9 03		cmp #$03	                CMP #3                  ; Were all three arguments provided?
.1a7911	f0 36		beq $1a7949	                BEQ get_operand         ; Yes: parse the operand
.1a7913	a9 13		lda #$13	                LDA #ADDR_IMPLIED       ; No: assume address mode is implied
.1a7915	85 4f		sta $0897	                STA MADDR_MODE
.1a7917	80 4c		bra $1a7965	                BRA get_opcode
.1a7919					bad_mnemonic
.1a7919	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a791c	08		php		            PHP
.1a791d	e2 20		sep #$20	            SEP #$20
.1a791f	48		pha		            PHA
.1a7920	a9 1a		lda #$1a	            LDA #`MERRBADMNEMO
.1a7922	48		pha		            PHA
.1a7923	ab		plb		            PLB
.1a7924	68		pla		            PLA
.1a7925	28		plp		            PLP
.1a7926	c2 10		rep #$10	            REP #$10
.1a7928	a2 b9 7a	ldx #$7ab9	                LDX #<>MERRBADMNEMO
.1a792b	20 29 04	jsr $1a0429	            JSR PRINTS
.1a792e	4c 82 7a	jmp $1a7a82	                JMP done
.1a7931					bad_operand
.1a7931	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7934	08		php		            PHP
.1a7935	e2 20		sep #$20	            SEP #$20
.1a7937	48		pha		            PHA
.1a7938	a9 1a		lda #$1a	            LDA #`MERRBADOPER
.1a793a	48		pha		            PHA
.1a793b	ab		plb		            PLB
.1a793c	68		pla		            PLA
.1a793d	28		plp		            PLP
.1a793e	c2 10		rep #$10	            REP #$10
.1a7940	a2 c8 7a	ldx #$7ac8	                LDX #<>MERRBADOPER
.1a7943	20 29 04	jsr $1a0429	            JSR PRINTS
.1a7946	4c 82 7a	jmp $1a7a82	                JMP done
.1a7949					get_operand
.1a7949	e2 20		sep #$20	            SEP #$20
.1a794b	22 ba 7c 1a	jsl $1a7cba	                JSL AS_FIND_MODE        ; Find the addressing mode of the operand
.1a794f	c9 ff		cmp #$ff	compare         CMP #$FF
.1a7951	f0 de		beq $1a7931	                BEQ bad_operand         ; If not found, print bad operand error message
.1a7953	85 4f		sta $0897	                STA MADDR_MODE
.1a7955	c9 03		cmp #$03	                CMP #ADDR_ABS           ; If mode is absolute or absolute long...
.1a7957	f0 62		beq $1a79bb	                BEQ check_for_pcrel     ; Check to see if the mnemonic is one of the branches
.1a7959	c9 0b		cmp #$0b	                CMP #ADDR_ABS_LONG
.1a795b	f0 5e		beq $1a79bb	                BEQ check_for_pcrel
.1a795d	c9 13		cmp #$13	                CMP #ADDR_IMPLIED       ; If mode is implied or accumulator, get the opcode
.1a795f	f0 04		beq $1a7965	                BEQ get_opcode
.1a7961	c9 08		cmp #$08	                CMP #ADDR_ACC
.1a7963	f0 00		beq $1a7965	                BEQ get_opcode
.1a7965	22 b2 7b 1a	jsl $1a7bb2	get_opcode      JSL AS_FIND_OPCODE      ; Find the opcode matching the two
.1a7969	b0 03		bcs $1a796e	                BCS save_opcode
.1a796b	4c 4b 7a	jmp $1a7a4b	                JMP bad_mode            ; If opcode not found, print bad address mode error message
.1a796e	87 32		sta [$087a]	save_opcode     STA [MCURSOR]           ; Write the opcode to the address
.1a7970	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR        ; And point to the next byte
.1a7974	08		php		            PHP
.1a7975	e2 20		sep #$20	            SEP #$20
.1a7977	48		pha		            PHA
.1a7978	a9 00		lda #$00	            LDA #0
.1a797a	48		pha		            PHA
.1a797b	ab		plb		            PLB
.1a797c	68		pla		            PLA
.1a797d	28		plp		            PLP
.1a797e	c2 20		rep #$20	            REP #$20
.1a7980	a5 32		lda $087a	                LDA MCURSOR             ; Make MTEMPPTR a pointer to the machine code we're assembling
.1a7982	85 56		sta $089e	                STA MTEMPPTR
.1a7984	a5 34		lda $087c	                LDA MCURSOR+2
.1a7986	85 58		sta $08a0	                STA MTEMPPTR+2
.1a7988	e2 20		sep #$20	            SEP #$20
.1a798a	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check the address mode again
.1a798c	c9 12		cmp #$12	                CMP #ADDR_PC_REL        ; If it's PC relative
.1a798e	f0 6c		beq $1a79fc	                BEQ compute_rel         ; Convert the address to an offset
.1a7990	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.1a7992	f0 68		beq $1a79fc	                BEQ compute_rel
.1a7994	c9 14		cmp #$14	                CMP #ADDR_XYC           ; MVP/MVN addressing mode?
.1a7996	f0 7c		beq $1a7a14	                BEQ emit_2
.1a7998	29 3f		and #$3f	                AND #%00111111          ; Filter out the mode bits
.1a799a	c9 02		cmp #$02	                CMP #ADDR_IMM           ; Is it immediate?
.1a799c	d0 03		bne $1a79a1	                BNE fixed_length        ; Yes: emit it as an immediate (variable length)
.1a799e	4c 79 7a	jmp $1a7a79	                JMP emit_imm
.1a79a1					fixed_length
.1a79a1	c2 20		rep #$20	            REP #$20
.1a79a3	29 ff 00	and #$00ff	                AND #$00FF
.1a79a6	aa		tax		                TAX
.1a79a7	e2 20		sep #$20	            SEP #$20
.1a79a9	bf 81 85 1a	lda $1a8581,x	get_length      LDA ADDR_LENGTH,X       ; Get the number of bytes in the addressing mode
.1a79ad	c9 03		cmp #$03	                CMP #$03
.1a79af	f0 57		beq $1a7a08	                BEQ emit_3
.1a79b1	c9 02		cmp #$02	                CMP #$02
.1a79b3	f0 5f		beq $1a7a14	                BEQ emit_2
.1a79b5	c9 01		cmp #$01	                CMP #$01
.1a79b7	f0 67		beq $1a7a20	                BEQ emit_1
.1a79b9	80 71		bra $1a7a2c	                BRA next_line
.1a79bb					check_for_pcrel
.1a79bb	c2 20		rep #$20	            REP #$20
.1a79bd	a5 54		lda $089c	                LDA MMNEMONIC
.1a79bf	c9 f9 81	cmp #$81f9	                CMP #<>MN_BRA
.1a79c2	f0 26		beq $1a79ea	                BEQ is_pcrel
.1a79c4	c9 5d 82	cmp #$825d	                CMP #<>MN_BRL
.1a79c7	f0 2a		beq $1a79f3	                BEQ is_pcrel_long
.1a79c9	c9 dd 81	cmp #$81dd	                CMP #<>MN_BCC
.1a79cc	f0 1c		beq $1a79ea	                BEQ is_pcrel
.1a79ce	c9 e1 81	cmp #$81e1	                CMP #<>MN_BCS
.1a79d1	f0 17		beq $1a79ea	                BEQ is_pcrel
.1a79d3	c9 e9 81	cmp #$81e9	                CMP #<>MN_BEQ
.1a79d6	f0 12		beq $1a79ea	                BEQ is_pcrel
.1a79d8	c9 d1 81	cmp #$81d1	                CMP #<>MN_BMI
.1a79db	f0 0d		beq $1a79ea	                BEQ is_pcrel
.1a79dd	c9 e5 81	cmp #$81e5	                CMP #<>MN_BNE
.1a79e0	f0 08		beq $1a79ea	                BEQ is_pcrel
.1a79e2	c9 cd 81	cmp #$81cd	                CMP #<>MN_BPL
.1a79e5	f0 03		beq $1a79ea	                BEQ is_pcrel
.1a79e7	4c 65 79	jmp $1a7965	                JMP get_opcode
.1a79ea					is_pcrel
.1a79ea	e2 20		sep #$20	            SEP #$20
.1a79ec	a9 12		lda #$12	                LDA #ADDR_PC_REL
.1a79ee	85 4f		sta $0897	                STA MADDR_MODE
.1a79f0	4c 65 79	jmp $1a7965	                JMP get_opcode
.1a79f3					is_pcrel_long
.1a79f3	e2 20		sep #$20	            SEP #$20
.1a79f5	a9 16		lda #$16	                LDA #ADDR_PC_REL_LONG
.1a79f7	85 4f		sta $0897	                STA MADDR_MODE
.1a79f9	4c 65 79	jmp $1a7965	                JMP get_opcode
.1a79fc	22 f5 7a 1a	jsl $1a7af5	compute_rel     JSL AS_PC_OFFSET        ; Try to compute the offset
.1a7a00	90 60		bcc $1a7a62	                BCC bad_offset          ; If failed, it's a bad offset operand
.1a7a02	c9 02		cmp #$02	emit_rel        CMP #$02                ; If the offset is two bytes
.1a7a04	f0 0e		beq $1a7a14	                BEQ emit_2              ; Emit those two bytes
.1a7a06	80 18		bra $1a7a20	                BRA emit_1              ; Otherwise emit just the one
.1a7a08	a0 02 00	ldy #$0002	emit_3          LDY #2                  ; Write bank byte of operand
.1a7a0b	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a7a0e	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a7a10	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a7a14	a0 01 00	ldy #$0001	emit_2          LDY #1                  ; Write high byte of operand
.1a7a17	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a7a1a	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a7a1c	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a7a20	a0 00 00	ldy #$0000	emit_1          LDY #0                  ; Write low byte of operand
.1a7a23	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a7a26	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a7a28	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a7a2c					next_line
.1a7a2c	e2 20		sep #$20	            SEP #$20
.1a7a2e	a9 41		lda #$41	                LDA #'A'
.1a7a30	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a33	a9 20		lda #$20	                LDA #' '
.1a7a35	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a38	a6 32		ldx $087a	                LDX MCURSOR
.1a7a3a	86 4a		stx $0892	                STX MTEMP
.1a7a3c	a6 34		ldx $087c	                LDX MCURSOR+2
.1a7a3e	86 4c		stx $0894	                STX MTEMP+2
.1a7a40	22 e5 80 1a	jsl $1a80e5	                JSL M_PR_ADDR
.1a7a44	a9 20		lda #$20	                LDA #' '
.1a7a46	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a49	80 37		bra $1a7a82	                BRA done
.1a7a4b					bad_mode
.1a7a4b	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7a4e	08		php		            PHP
.1a7a4f	e2 20		sep #$20	            SEP #$20
.1a7a51	48		pha		            PHA
.1a7a52	a9 1a		lda #$1a	            LDA #`MERRBADMODE
.1a7a54	48		pha		            PHA
.1a7a55	ab		plb		            PLB
.1a7a56	68		pla		            PLA
.1a7a57	28		plp		            PLP
.1a7a58	c2 10		rep #$10	            REP #$10
.1a7a5a	a2 86 7a	ldx #$7a86	                LDX #<>MERRBADMODE
.1a7a5d	20 29 04	jsr $1a0429	            JSR PRINTS
.1a7a60	80 20		bra $1a7a82	                BRA done
.1a7a62					bad_offset
.1a7a62	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7a65	08		php		            PHP
.1a7a66	e2 20		sep #$20	            SEP #$20
.1a7a68	48		pha		            PHA
.1a7a69	a9 1a		lda #$1a	            LDA #`MERRBADOFFSET
.1a7a6b	48		pha		            PHA
.1a7a6c	ab		plb		            PLB
.1a7a6d	68		pla		            PLA
.1a7a6e	28		plp		            PLP
.1a7a6f	c2 10		rep #$10	            REP #$10
.1a7a71	a2 d6 7a	ldx #$7ad6	                LDX #<>MERRBADOFFSET
.1a7a74	20 29 04	jsr $1a0429	            JSR PRINTS
.1a7a77	80 09		bra $1a7a82	                BRA done
.1a7a79	a5 4f		lda $0897	emit_imm        LDA MADDR_MODE          ; Check to see if long immediate was used
.1a7a7b	29 c0		and #$c0	                AND #%11000000
.1a7a7d	d0 95		bne $1a7a14	                BNE emit_2              ; Yes: emit two bytes
.1a7a7f	4c 20 7a	jmp $1a7a20	                JMP emit_1              ; No: emit one byte
.1a7a82	2b		pld		done            PLD
.1a7a83	ab		plb		                PLB
.1a7a84	28		plp		                PLP
.1a7a85	6b		rtl		                RTL
>1a7a86	41 64 64 72 65 73 73 69		MERRBADMODE     .null "Addressing mode not defined for that instruction.",CHAR_CR
>1a7a8e	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>1a7a9e	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>1a7aae	74 72 75 63 74 69 6f 6e 2e 0d 00
>1a7ab9	42 61 64 20 6d 6e 65 6d		MERRBADMNEMO    .null "Bad mnemonic.",CHAR_CR
>1a7ac1	6f 6e 69 63 2e 0d 00
>1a7ac8	42 61 64 20 6f 70 65 72		MERRBADOPER     .null "Bad operand.",CHAR_CR
>1a7ad0	61 6e 64 2e 0d 00
>1a7ad6	52 65 6c 61 74 69 76 65		MERRBADOFFSET   .null "Relative offset is too large.",CHAR_CR
>1a7ade	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>1a7aee	61 72 67 65 2e 0d 00
.1a7af5					AS_PC_OFFSET
.1a7af5	08		php		                PHP
.1a7af6	0b		phd		                PHD
.1a7af7	08		php		            PHP
.1a7af8	c2 20		rep #$20	            REP #$20
.1a7afa	48		pha		            PHA
.1a7afb	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7afe	5b		tcd		            TCD
.1a7aff	68		pla		            PLA
.1a7b00	28		plp		            PLP
.1a7b01	e2 20		sep #$20	            SEP #$20
.1a7b03	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check to see if it 1 byte or 2 byte relative
.1a7b05	c9 12		cmp #$12	                CMP #ADDR_PC_REL
.1a7b07	f0 0a		beq $1a7b13	                BEQ is_short
.1a7b09	c2 20		rep #$20	            REP #$20
.1a7b0b	18		clc		                CLC                     ; Branch is long. Compute where MCURSOR will be
.1a7b0c	a5 32		lda $087a	                LDA MCURSOR             ; with two branch offset bytes
.1a7b0e	69 02 00	adc #$0002	                ADC #2
.1a7b11	80 08		bra $1a7b1b	                BRA compute_cursor
.1a7b13					is_short
.1a7b13	c2 20		rep #$20	            REP #$20
.1a7b15	18		clc		                CLC                     ; Branch is short. Computer where MCURSOR will be
.1a7b16	a5 32		lda $087a	                LDA MCURSOR             ; with one branch offset byte
.1a7b18	69 01 00	adc #$0001	                ADC #1
.1a7b1b	85 4a		sta $0892	compute_cursor  STA MTEMP
.1a7b1d	a5 34		lda $087c	                LDA MCURSOR+2
.1a7b1f	69 00 00	adc #$0000	                ADC #0
.1a7b22	85 4c		sta $0894	                STA MTEMP+2
.1a7b24	38		sec		                SEC                     ; MPARSEDNUM = MPARSEDNUM - MTEMP (MCURSOR after the instruction)
.1a7b25	a5 50		lda $0898	                LDA MPARSEDNUM
.1a7b27	e5 4a		sbc $0892	                SBC MTEMP
.1a7b29	85 50		sta $0898	                STA MPARSEDNUM
.1a7b2b	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a7b2d	e5 4c		sbc $0894	                SBC MTEMP+2
.1a7b2f	85 52		sta $089a	                STA MPARSEDNUM+2
.1a7b31	e2 20		sep #$20	            SEP #$20
.1a7b33	a5 4f		lda $0897	                LDA MADDR_MODE
.1a7b35	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.1a7b37	f0 1e		beq $1a7b57	                BEQ check_long
.1a7b39	a5 50		lda $0898	                LDA MPARSEDNUM          ; Short offset... check if it's negative
.1a7b3b	30 0c		bmi $1a7b49	                BMI check_short_neg
.1a7b3d	a5 51		lda $0899	                LDA MPARSEDNUM+1        ; Positive short offset... upper two bytes
.1a7b3f	d0 2a		bne $1a7b6b	                BNE failure             ; Must be 0 or it's an overflow
.1a7b41	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a7b43	d0 26		bne $1a7b6b	                BNE failure
.1a7b45	a9 01		lda #$01	                LDA #1                  ; Short offset is 1 byte
.1a7b47	80 26		bra $1a7b6f	                BRA success
.1a7b49	a5 51		lda $0899	check_short_neg LDA MPARSEDNUM+1        ; Negative short offset... upper two bytes
.1a7b4b	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's an  overflow
.1a7b4d	d0 1c		bne $1a7b6b	                BNE failure
.1a7b4f	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a7b51	c9 ff		cmp #$ff	                CMP #$FF
.1a7b53	d0 16		bne $1a7b6b	                BNE failure
.1a7b55	80 18		bra $1a7b6f	                BRA success
.1a7b57	a5 51		lda $0899	check_long      LDA MPARSEDNUM+1        ; Long offset... check if it's negative
.1a7b59	30 06		bmi $1a7b61	                BMI check_long_neg
.1a7b5b	a5 52		lda $089a	                LDA MPARSEDNUM+2        ; Positive long offset... upper byte
.1a7b5d	d0 0c		bne $1a7b6b	                BNE failure             ; Must be 0 or it's an overflow
.1a7b5f	80 0e		bra $1a7b6f	                BRA success
.1a7b61	a5 52		lda $089a	check_long_neg  LDA MPARSEDNUM+2        ; Negative offset... upper two bytes
.1a7b63	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's and overflow
.1a7b65	d0 04		bne $1a7b6b	                BNE failure
.1a7b67	a9 02		lda #$02	                LDA #2                  ; Long offset is 2 bytes
.1a7b69	80 04		bra $1a7b6f	                BRA success
.1a7b6b	2b		pld		failure         PLD
.1a7b6c	28		plp		                PLP
.1a7b6d	18		clc		                CLC
.1a7b6e	6b		rtl		                RTL
.1a7b6f	2b		pld		success         PLD
.1a7b70	28		plp		                PLP
.1a7b71	38		sec		                SEC
.1a7b72	6b		rtl		                RTL
.1a7b73					AS_SHIFT_HEX
.1a7b73	08		php		                PHP
.1a7b74	0b		phd		                PHD
.1a7b75	c2 10		rep #$10	            REP #$10
.1a7b77	da		phx		                PHX
.1a7b78	08		php		            PHP
.1a7b79	c2 20		rep #$20	            REP #$20
.1a7b7b	48		pha		            PHA
.1a7b7c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7b7f	5b		tcd		            TCD
.1a7b80	68		pla		            PLA
.1a7b81	28		plp		            PLP
.1a7b82	e2 20		sep #$20	            SEP #$20
.1a7b84	a2 00 00	ldx #$0000	                LDX #0
.1a7b87	df 00 d0 1a	cmp $1ad000,x	seek_loop       CMP @lHEXDIGITS,X   ; Check the passed character against the hex digits
.1a7b8b	f0 08		beq $1a7b95	                BEQ found
.1a7b8d	e8		inx		                INX                 ; Go to the next hex digit
.1a7b8e	e0 10 00	cpx #$0010	                CPX #$10            ; Are we out of digits?
.1a7b91	f0 1b		beq $1a7bae	                BEQ done            ; Yes... just return
.1a7b93	80 f2		bra $1a7b87	                BRA seek_loop
.1a7b95					found
.1a7b95	c2 20		rep #$20	            REP #$20
.1a7b97	06 50		asl $0898	                ASL MPARSEDNUM
.1a7b99	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7b9b	06 50		asl $0898	                ASL MPARSEDNUM
.1a7b9d	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7b9f	06 50		asl $0898	                ASL MPARSEDNUM
.1a7ba1	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7ba3	06 50		asl $0898	                ASL MPARSEDNUM
.1a7ba5	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7ba7	e2 20		sep #$20	            SEP #$20
.1a7ba9	8a		txa		                TXA
.1a7baa	05 50		ora $0898	                ORA MPARSEDNUM
.1a7bac	85 50		sta $0898	                STA MPARSEDNUM
.1a7bae	fa		plx		done            PLX
.1a7baf	2b		pld		                PLD
.1a7bb0	28		plp		                PLP
.1a7bb1	6b		rtl		                RTL
.1a7bb2					AS_FIND_OPCODE
.1a7bb2	0b		phd		                PHD
.1a7bb3	8b		phb		                PHB
.1a7bb4	08		php		            PHP
.1a7bb5	c2 20		rep #$20	            REP #$20
.1a7bb7	48		pha		            PHA
.1a7bb8	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7bbb	5b		tcd		            TCD
.1a7bbc	68		pla		            PLA
.1a7bbd	28		plp		            PLP
.1a7bbe	08		php		            PHP
.1a7bbf	e2 20		sep #$20	            SEP #$20
.1a7bc1	48		pha		            PHA
.1a7bc2	a9 1a		lda #$1a	            LDA #`MNEMONIC_TAB
.1a7bc4	48		pha		            PHA
.1a7bc5	ab		plb		            PLB
.1a7bc6	68		pla		            PLA
.1a7bc7	28		plp		            PLP
.1a7bc8	e2 20		sep #$20	            SEP #$20
.1a7bca	a5 4f		lda $0897	                LDA MADDR_MODE
.1a7bcc	29 3f		and #$3f	                AND #%00111111
.1a7bce	85 4a		sta $0892	                STA MTEMP
.1a7bd0	c2 30		rep #$30	            REP #$30
.1a7bd2	a2 00 00	ldx #$0000	                LDX #0
.1a7bd5	a0 00 00	ldy #$0000	                LDY #0
.1a7bd8	bd 7f 82	lda $1a827f,x	mnemonic_loop   LDA MNEMONIC_TAB,X      ; Get the mnemonic from the opcode table
.1a7bdb	f0 1b		beq $1a7bf8	                BEQ not_found           ; If it's 0, we did not find the mnemonic
.1a7bdd	c5 54		cmp $089c	                CMP MMNEMONIC           ; Does it match the passed mnemonic?
.1a7bdf	d0 0d		bne $1a7bee	                BNE next_opcode         ; No: go to the next opcode
.1a7be1					check_mode
.1a7be1	e2 20		sep #$20	            SEP #$20
.1a7be3	b9 81 84	lda $1a8481,y	                LDA ADDRESS_TAB,Y       ; Get the corresponding address mode
.1a7be6	29 3f		and #$3f	                AND #%00111111          ; Filter out effect bits
.1a7be8	c5 4a		cmp $0892	                CMP MTEMP
.1a7bea	f0 07		beq $1a7bf3	                BEQ found               ; Yes: we found the opcode
.1a7bec	c2 20		rep #$20	            REP #$20
.1a7bee	e8		inx		next_opcode     INX                     ; Point to the next mnemonic in the table
.1a7bef	e8		inx		                INX
.1a7bf0	c8		iny		                INY
.1a7bf1	80 e5		bra $1a7bd8	                BRA mnemonic_loop       ; And check it
.1a7bf3	98		tya		found           TYA
.1a7bf4	38		sec		                SEC                     ; Set carry to show success
.1a7bf5	ab		plb		                PLB
.1a7bf6	2b		pld		                PLD
.1a7bf7	6b		rtl		                RTL
.1a7bf8	18		clc		not_found       CLC                     ; Clear carry to show failure
.1a7bf9	ab		plb		                PLB
.1a7bfa	2b		pld		                PLD
.1a7bfb	6b		rtl		                RTL
.1a7bfc					AS_STR_MATCH
.1a7bfc	08		php		                PHP
.1a7bfd	0b		phd		                PHD
.1a7bfe	08		php		            PHP
.1a7bff	c2 20		rep #$20	            REP #$20
.1a7c01	48		pha		            PHA
.1a7c02	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7c05	5b		tcd		            TCD
.1a7c06	68		pla		            PLA
.1a7c07	28		plp		            PLP
.1a7c08	e2 20		sep #$20	            SEP #$20
.1a7c0a	c2 10		rep #$10	            REP #$10
.1a7c0c	a0 00 00	ldy #$0000	                LDY #0
.1a7c0f	64 50		stz $0898	                STZ MPARSEDNUM      ; Set parsed number to 0 in anticipation of
.1a7c11	64 52		stz $089a	                STZ MPARSEDNUM+2    ; hex digits in the pattern
.1a7c13	b7 03		lda [$084b],y	match_loop      LDA [MCMP_TEXT],Y   ; Get the pattern character
.1a7c15	f0 11		beq $1a7c28	                BEQ nul_check       ; If at end of pattern, check for end of test string
.1a7c17	c9 64		cmp #$64	                CMP #'d'            ; Is it a digit?
.1a7c19	f0 19		beq $1a7c34	                BEQ check_digit     ; Yes: do special check for hex digit
.1a7c1b	48		pha		compare         PHA
.1a7c1c	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.1a7c1e	85 4a		sta $0892	                STA MTEMP
.1a7c20	68		pla		                PLA
.1a7c21	c5 4a		cmp $0892	                CMP MTEMP           ; Does it match the character to test?
.1a7c23	d0 0b		bne $1a7c30	                BNE return_false    ; No: return fail
.1a7c25	c8		iny		next_char       INY                 ; Yes: test the next character
.1a7c26	80 eb		bra $1a7c13	                BRA match_loop
.1a7c28	b7 36		lda [$087e],y	nul_check       LDA [MLINEBUF],Y    ; Check to see that we're at the end of the test string
.1a7c2a	d0 04		bne $1a7c30	                BNE return_false    ; If not: return false
.1a7c2c	2b		pld		return_true     PLD
.1a7c2d	28		plp		                PLP                 ; Return true
.1a7c2e	38		sec		                SEC
.1a7c2f	6b		rtl		                RTL
.1a7c30	2b		pld		return_false    PLD
.1a7c31	28		plp		                PLP                 ; Return false
.1a7c32	18		clc		                CLC
.1a7c33	6b		rtl		                RTL
.1a7c34					check_digit
.1a7c34	e2 20		sep #$20	            SEP #$20
.1a7c36	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.1a7c38	c9 3a		cmp #$3a	                CMP #'9'+1
.1a7c3a	b0 04		bcs $1a7c40	                BCS check_AF
.1a7c3c	c9 30		cmp #$30	                CMP #'0'
.1a7c3e	b0 14		bcs $1a7c54	                BCS shift_digit     ; character is in [0..9]
.1a7c40	c9 47		cmp #$47	check_AF        CMP #'F'+1
.1a7c42	b0 04		bcs $1a7c48	                BCS check_lc        ; check lower case
.1a7c44	c9 41		cmp #$41	                CMP #'A'
.1a7c46	b0 0c		bcs $1a7c54	                BCS shift_digit     ; character is in [A..F]
.1a7c48	c9 67		cmp #$67	check_lc        CMP #'f'+1
.1a7c4a	b0 e4		bcs $1a7c30	                BCS return_false    ; check lower case
.1a7c4c	c9 61		cmp #$61	                CMP #'a'
.1a7c4e	b0 02		bcs $1a7c52	                BCS to_upcase       ; character is in [A..F]
.1a7c50	80 de		bra $1a7c30	                BRA return_false    ; No match found... return false
.1a7c52	29 df		and #$df	to_upcase       AND #%11011111      ; Convert lower case to upper case
.1a7c54	22 73 7b 1a	jsl $1a7b73	shift_digit     JSL AS_SHIFT_HEX    ; Shift the digit into MPARSEDNUM
.1a7c58	80 cb		bra $1a7c25	                BRA next_char       ; And check the next character
.1a7c5a					AS_MCMP_NEXT
.1a7c5a	0b		phd		                PHD
.1a7c5b	08		php		            PHP
.1a7c5c	c2 20		rep #$20	            REP #$20
.1a7c5e	48		pha		            PHA
.1a7c5f	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7c62	5b		tcd		            TCD
.1a7c63	68		pla		            PLA
.1a7c64	28		plp		            PLP
.1a7c65	a0 00 00	ldy #$0000	                LDY #0
.1a7c68	e2 20		sep #$20	            SEP #$20
.1a7c6a	b7 03		lda [$084b],y	loop            LDA [MCMP_TEXT],Y   ; Check to see if we have gotten to the NUL
.1a7c6c	f0 03		beq $1a7c71	                BEQ found_nul
.1a7c6e	c8		iny		                INY
.1a7c6f	80 f9		bra $1a7c6a	                BRA loop
.1a7c71					found_nul
.1a7c71	c2 20		rep #$20	            REP #$20
.1a7c73	c8		iny		                INY                 ; Got to NUL... point to next byte
.1a7c74	5a		phy		                PHY
.1a7c75	68		pla		                PLA                 ; And add that index to MCMP_TEXT pointer
.1a7c76	18		clc		                CLC
.1a7c77	65 03		adc $084b	                ADC MCMP_TEXT
.1a7c79	85 03		sta $084b	                STA MCMP_TEXT
.1a7c7b	a5 05		lda $084d	                LDA MCMP_TEXT+2
.1a7c7d	69 00 00	adc #$0000	                ADC #0
.1a7c80	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7c82	2b		pld		                PLD
.1a7c83	6b		rtl		                RTL
.1a7c84					AS_FIND_MNEMO
.1a7c84	0b		phd		                PHD
.1a7c85	08		php		            PHP
.1a7c86	c2 20		rep #$20	            REP #$20
.1a7c88	48		pha		            PHA
.1a7c89	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7c8c	5b		tcd		            TCD
.1a7c8d	68		pla		            PLA
.1a7c8e	28		plp		            PLP
.1a7c8f	c2 20		rep #$20	            REP #$20
.1a7c91	a5 11		lda $0859	                LDA MARG2                   ; Point MLINEBUF to the text
.1a7c93	85 36		sta $087e	                STA MLINEBUF
.1a7c95	a5 13		lda $085b	                LDA MARG2+2
.1a7c97	85 38		sta $0880	                STA MLINEBUF+2
.1a7c99	a9 0d 81	lda #$810d	                LDA #<>MNEMONICS_TAB        ; Point to the first mnemonic
.1a7c9c	85 03		sta $084b	                STA MCMP_TEXT
.1a7c9e	a9 1a 00	lda #$001a	                LDA #`MNEMONICS_TAB
.1a7ca1	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7ca3	22 fc 7b 1a	jsl $1a7bfc	match_loop      JSL AS_STR_MATCH            ; Check to see if the text matches the mnemonic
.1a7ca7	b0 0d		bcs $1a7cb6	                BCS found_mnemonic          ; If so: return that we found it
.1a7ca9	22 5a 7c 1a	jsl $1a7c5a	                JSL AS_MCMP_NEXT            ; Point to the next mnemonic
.1a7cad	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Check to see if it's NUL
.1a7caf	d0 f2		bne $1a7ca3	                BNE match_loop              ; If not, check this next mnemonic
.1a7cb1	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Otherwise, return -1
.1a7cb4	80 02		bra $1a7cb8	                BRA done
.1a7cb6	a5 03		lda $084b	found_mnemonic  LDA MCMP_TEXT               ; Found it: return the address
.1a7cb8	2b		pld		done            PLD
.1a7cb9	6b		rtl		                RTL
.1a7cba					AS_FIND_MODE
.1a7cba	08		php		                PHP
.1a7cbb	0b		phd		                PHD
.1a7cbc	08		php		            PHP
.1a7cbd	c2 20		rep #$20	            REP #$20
.1a7cbf	48		pha		            PHA
.1a7cc0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7cc3	5b		tcd		            TCD
.1a7cc4	68		pla		            PLA
.1a7cc5	28		plp		            PLP
.1a7cc6	c2 30		rep #$30	            REP #$30
.1a7cc8	a5 15		lda $085d	                LDA MARG3                   ; Point MLINEBUF to the operand
.1a7cca	85 36		sta $087e	                STA MLINEBUF
.1a7ccc	a5 17		lda $085f	                LDA MARG3+2
.1a7cce	85 38		sta $0880	                STA MLINEBUF+2
.1a7cd0	a9 99 85	lda #$8599	                LDA #<>ADDR_PATTERNS        ; Point to the first address mode pattern to check
.1a7cd3	85 03		sta $084b	                STA MCMP_TEXT
.1a7cd5	a9 1a 00	lda #$001a	                LDA #`ADDR_PATTERNS
.1a7cd8	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7cda	22 fc 7b 1a	jsl $1a7bfc	match_loop      JSL AS_STR_MATCH            ; Check to see if the pattern matches the operand
.1a7cde	b0 22		bcs $1a7d02	                BCS is_match                ; Yes: Find address mode code
.1a7ce0	22 5a 7c 1a	jsl $1a7c5a	                JSL AS_MCMP_NEXT            ; Point to the address mode
.1a7ce4	c2 20		rep #$20	            REP #$20
.1a7ce6	18		clc		                CLC                         ; Point to the first byte of the next pattern
.1a7ce7	a5 03		lda $084b	                LDA MCMP_TEXT
.1a7ce9	69 01 00	adc #$0001	                ADC #1
.1a7cec	85 03		sta $084b	                STA MCMP_TEXT
.1a7cee	a5 05		lda $084d	                LDA MCMP_TEXT+2
.1a7cf0	69 00 00	adc #$0000	                ADC #0
.1a7cf3	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7cf5	e2 20		sep #$20	            SEP #$20
.1a7cf7	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Is the first byte 0?
.1a7cf9	d0 df		bne $1a7cda	                BNE match_loop              ; No: check this next pattern
.1a7cfb	c2 20		rep #$20	            REP #$20
.1a7cfd	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Yes: we didn't find a matching pattern, return -1
.1a7d00	80 0d		bra $1a7d0f	                BRA done
.1a7d02	22 5a 7c 1a	jsl $1a7c5a	is_match        JSL AS_MCMP_NEXT            ; Point to the address mode
.1a7d06	e2 20		sep #$20	            SEP #$20
.1a7d08	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Get the corresponding address mode code (a byte)
.1a7d0a	c2 20		rep #$20	            REP #$20
.1a7d0c	29 ff 00	and #$00ff	                AND #$00FF
.1a7d0f	2b		pld		done            PLD
.1a7d10	28		plp		                PLP
.1a7d11	6b		rtl		                RTL
.1a7d12					IMDISASSEMBLE
.1a7d12	08		php		                PHP
.1a7d13	8b		phb		                PHB
.1a7d14	0b		phd		                PHD
.1a7d15	08		php		            PHP
.1a7d16	c2 20		rep #$20	            REP #$20
.1a7d18	48		pha		            PHA
.1a7d19	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7d1c	5b		tcd		            TCD
.1a7d1d	68		pla		            PLA
.1a7d1e	28		plp		            PLP
.1a7d1f	e2 20		sep #$20	            SEP #$20
.1a7d21	a9 00		lda #$00	                LDA #0
.1a7d23	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT     ; Clear the pagination line counter
.1a7d27	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a7d29	c9 02		cmp #$02	                CMP #2
.1a7d2b	b0 16		bcs $1a7d43	                BGE set_cursor      ; 2>= arguments? Use them as-is
.1a7d2d	c9 01		cmp #$01	                CMP #1
.1a7d2f	90 20		bcc $1a7d51	                BLT no_args         ; No arguments passed? Use defaults
.1a7d31	c2 20		rep #$20	            REP #$20
.1a7d33	18		clc		                CLC
.1a7d34	a5 0d		lda $0855	                LDA MARG1
.1a7d36	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a7d39	85 11		sta $0859	                STA MARG2
.1a7d3b	e2 20		sep #$20	            SEP #$20
.1a7d3d	a5 0f		lda $0857	                LDA MARG1+2
.1a7d3f	69 00		adc #$00	                ADC #0
.1a7d41	85 13		sta $085b	                STA MARG2+2
.1a7d43					set_cursor
.1a7d43	c2 20		rep #$20	            REP #$20
.1a7d45	a5 0d		lda $0855	                LDA MARG1
.1a7d47	85 32		sta $087a	                STA MCURSOR
.1a7d49	e2 20		sep #$20	            SEP #$20
.1a7d4b	a5 0f		lda $0857	                LDA MARG1+2
.1a7d4d	85 34		sta $087c	                STA MCURSOR+2
.1a7d4f	80 12		bra $1a7d63	                BRA dasm_loop
.1a7d51					no_args
.1a7d51	c2 20		rep #$20	            REP #$20
.1a7d53	18		clc		                CLC
.1a7d54	a5 32		lda $087a	                LDA MCURSOR
.1a7d56	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a7d59	85 11		sta $0859	                STA MARG2
.1a7d5b	e2 20		sep #$20	            SEP #$20
.1a7d5d	a5 34		lda $087c	                LDA MCURSOR+2
.1a7d5f	69 00		adc #$00	                ADC #0
.1a7d61	85 13		sta $085b	                STA MARG2+2
.1a7d63	22 7e 7d 1a	jsl $1a7d7e	dasm_loop       JSL DS_PR_LINE
.1a7d67	e2 20		sep #$20	            SEP #$20
.1a7d69	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.1a7d6b	c5 13		cmp $085b	                CMP MARG2+2
.1a7d6d	90 f4		bcc $1a7d63	                BLT dasm_loop           ; No: continue
.1a7d6f	c2 20		rep #$20	            REP #$20
.1a7d71	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.1a7d73	c5 11		cmp $0859	                CMP MARG2
.1a7d75	90 ec		bcc $1a7d63	                BLT dasm_loop           ; Nope... keep going
.1a7d77					done
.1a7d77	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7d7a	2b		pld		                PLD
.1a7d7b	ab		plb		                PLB
.1a7d7c	28		plp		                PLP
.1a7d7d	6b		rtl		                RTL
.1a7d7e					DS_PR_LINE
.1a7d7e	08		php		                PHP
.1a7d7f	0b		phd		                PHD
.1a7d80	e2 20		sep #$20	            SEP #$20
.1a7d82	a9 41		lda #$41	                LDA #'A'
.1a7d84	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7d87	a9 20		lda #$20	                LDA #' '
.1a7d89	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7d8c	08		php		            PHP
.1a7d8d	c2 20		rep #$20	            REP #$20
.1a7d8f	48		pha		            PHA
.1a7d90	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a7d93	5b		tcd		            TCD
.1a7d94	68		pla		            PLA
.1a7d95	28		plp		            PLP
.1a7d96	c2 20		rep #$20	            REP #$20
.1a7d98	a5 00		lda $087a	                LDA MCURSOR
.1a7d9a	85 18		sta $0892	                STA MTEMP
.1a7d9c	e2 20		sep #$20	            SEP #$20
.1a7d9e	a5 02		lda $087c	                LDA MCURSOR+2
.1a7da0	85 1a		sta $0894	                STA MTEMP+2
.1a7da2	22 e5 80 1a	jsl $1a80e5	                JSL M_PR_ADDR
.1a7da6	a9 20		lda #$20	                LDA #' '
.1a7da8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7dab	c2 20		rep #$20	            REP #$20
.1a7dad	18		clc		                CLC
.1a7dae	a5 00		lda $087a	                LDA MCURSOR
.1a7db0	69 01 00	adc #$0001	                ADC #1
.1a7db3	85 18		sta $0892	                STA MTEMP
.1a7db5	e2 20		sep #$20	            SEP #$20
.1a7db7	a5 02		lda $087c	                LDA MCURSOR+2
.1a7db9	69 00		adc #$00	                ADC #0
.1a7dbb	85 1a		sta $0894	                STA MTEMP+2
.1a7dbd	e2 20		sep #$20	            SEP #$20
.1a7dbf	c2 10		rep #$10	            REP #$10
.1a7dc1	a7 00		lda [$087a]	                LDA [MCURSOR]           ; Get the mnemonic
.1a7dc3	c9 c2		cmp #$c2	                CMP #$C2                ; Is it REP?
.1a7dc5	d0 0b		bne $1a7dd2	                BNE check_sep           ; No: check to see if it is SEP
.1a7dc7	48		pha		handle_rep      PHA
.1a7dc8	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.1a7dca	49 ff		eor #$ff	                EOR #$FF                ; Invert the bits
.1a7dcc	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Mask off the bits in the CPUSTAT
.1a7dd0	80 0b		bra $1a7ddd	                BRA save_stat
.1a7dd2	c9 e2		cmp #$e2	check_sep       CMP #$E2                ; Is it SEP?
.1a7dd4	d0 0c		bne $1a7de2	                BNE get_op_index        ; No: process the instruction regularly
.1a7dd6	48		pha		handle_sep      PHA
.1a7dd7	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.1a7dd9	0f 96 08 00	ora $000896	                ORA @lMCPUSTAT          ; Activate the bits in the CPUSTAT
.1a7ddd	8f 96 08 00	sta $000896	save_stat       STA @lMCPUSTAT          ; And save it back
.1a7de1	68		pla		                PLA
.1a7de2					get_op_index
.1a7de2	c2 20		rep #$20	            REP #$20
.1a7de4	29 ff 00	and #$00ff	                AND #$00FF
.1a7de7	0a		asl a		                ASL A
.1a7de8	aa		tax		                TAX                     ; Get the index into the mnemonic lookup table
.1a7de9	bf 7f 82 1a	lda $1a827f,x	                LDA @lMNEMONIC_TAB,X    ; Get the mnemonic
.1a7ded	aa		tax		                TAX
.1a7dee	22 5f 80 1a	jsl $1a805f	                JSL DS_PR_MNEMONIC      ; And print it
.1a7df2	e2 20		sep #$20	            SEP #$20
.1a7df4	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a7df6	aa		tax		                TAX
.1a7df7	bf 81 84 1a	lda $1a8481,x	pr_operand      LDA @lADDRESS_TAB,X     ; Get the addressing mode for the instruction
.1a7dfb	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR        ; Advance the cursor to the next byte
.1a7dff	22 0c 7e 1a	jsl $1a7e0c	                JSL DS_PR_OPERAND       ; And print the correct operand
.1a7e03	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a7e06	20 b3 03	jsr $1a03b3	            JSR PAGINATE
.1a7e09	2b		pld		                PLD
.1a7e0a	28		plp		                PLP
.1a7e0b	6b		rtl		                RTL
.1a7e0c					DS_PR_OPERAND
.1a7e0c	08		php		                PHP
.1a7e0d	e2 20		sep #$20	            SEP #$20
.1a7e0f	48		pha		                PHA             ; Save the address mode so we can get to the M and X flags
.1a7e10	29 3f		and #$3f	                AND #%00111111  ; Filter out the mode flags
.1a7e12	0a		asl a		                ASL A           ; Compute the index to the table
.1a7e13	c2 10		rep #$10	            REP #$10
.1a7e15	aa		tax		                TAX
.1a7e16	68		pla		                PLA             ; Restore A
.1a7e17	7c 1a 7e	jmp ($1a7e1a,x)	                JMP (dispatch,X)
>1a7e1a	4a 7e				dispatch        .word <>is_dp_ind_x
>1a7e1c	65 7e				                .word <>is_dp
>1a7e1e	6c 7e				                .word <>is_imm
>1a7e20	91 7e				                .word <>is_abs
>1a7e22	98 7e				                .word <>is_dp_ind_y
>1a7e24	b3 7e				                .word <>is_dp_x
>1a7e26	d5 7e				                .word <>is_abs_y
>1a7e28	e6 7e				                .word <>is_abs_x
>1a7e2a	23 7f				                .word <>is_accumulator
>1a7e2c	2b 7f				                .word <>is_stack_r
>1a7e2e	3c 7f				                .word <>is_dp_long
>1a7e30	4d 7f				                .word <>is_abs_long
>1a7e32	54 7f				                .word <>is_stack_r_y
>1a7e34	79 7f				                .word <>is_dp_y_long
>1a7e36	a6 7f				                .word <>is_abs_x_long
>1a7e38	12 7f				                .word <>is_dp_ind
>1a7e3a	f7 7e				                .word <>is_abs_x_id
>1a7e3c	c4 7e				                .word <>is_dp_y
>1a7e3e	99 7f				                .word <>is_pc_rel
>1a7e40	a3 7f				                .word <>is_implied
>1a7e42	b7 7f				                .word <>is_xyc
>1a7e44	e6 7f				                .word <>is_abs_ind
>1a7e46	94 7f				                .word <>is_pc_rel_long
>1a7e48	f7 7f				                .word <>is_abs_ind_long
.1a7e4a	a9 28		lda #$28	is_dp_ind_x     LDA #'('                ; Print (dd,X)
.1a7e4c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e4f	22 0e 80 1a	jsl $1a800e	                JSL DS_PR_OPERAND1      ; Print dd
.1a7e53	a9 2c		lda #$2c	                LDA #','
.1a7e55	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e58	a9 58		lda #$58	                LDA #'X'
.1a7e5a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e5d	a9 29		lda #$29	                LDA #')'
.1a7e5f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e62	4c 08 80	jmp $1a8008	                JMP done_1
.1a7e65	22 0e 80 1a	jsl $1a800e	is_dp           JSL DS_PR_OPERAND1      ; Print dd
.1a7e69	4c 08 80	jmp $1a8008	                JMP done_1
.1a7e6c					is_imm
.1a7e6c	e2 20		sep #$20	            SEP #$20
.1a7e6e	48		pha		                PHA
.1a7e6f	a9 23		lda #$23	                LDA #'#'
.1a7e71	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e74	68		pla		                PLA
.1a7e75	29 c0		and #$c0	                AND #%11000000          ; Filter so we just look at the mode bits
.1a7e77	c9 00		cmp #$00	                CMP #$00                ; Are any set to check?
.1a7e79	f0 0f		beq $1a7e8a	                BEQ is_imm_short        ; No: treat it as a short always
.1a7e7b	4a		lsr a		                LSR A                   ; Move the flag bits right by 2 to match
.1a7e7c	4a		lsr a		                LSR A                   ; the positions of the bits in the CPU status register
.1a7e7d	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Otherwise, filter the mode bit we care about
.1a7e81	d0 07		bne $1a7e8a	                BNE is_imm_short        ; If it is set, immediate operation is short
.1a7e83	22 18 80 1a	jsl $1a8018	                JSL DS_PR_OPERAND2      ; Print dddd
.1a7e87	4c 08 80	jmp $1a8008	                JMP done_1
.1a7e8a	22 0e 80 1a	jsl $1a800e	is_imm_short    JSL DS_PR_OPERAND1      ; Print dd
.1a7e8e	4c 08 80	jmp $1a8008	                JMP done_1
.1a7e91	22 18 80 1a	jsl $1a8018	is_abs          JSL DS_PR_OPERAND2      ; Print dddd
.1a7e95	4c 08 80	jmp $1a8008	                JMP done_1
.1a7e98	a9 28		lda #$28	is_dp_ind_y     LDA #'('                ; Print (dd),Y
.1a7e9a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e9d	22 0e 80 1a	jsl $1a800e	                JSL DS_PR_OPERAND1      ; Print dd
.1a7ea1	a9 29		lda #$29	                LDA #')'
.1a7ea3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ea6	a9 2c		lda #$2c	                LDA #','
.1a7ea8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7eab	a9 59		lda #$59	                LDA #'Y'
.1a7ead	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7eb0	4c 08 80	jmp $1a8008	                JMP done_1
.1a7eb3	22 0e 80 1a	jsl $1a800e	is_dp_x         JSL DS_PR_OPERAND1      ; Print dd,X
.1a7eb7	a9 2c		lda #$2c	                LDA #','
.1a7eb9	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ebc	a9 58		lda #$58	                LDA #'X'
.1a7ebe	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ec1	4c 08 80	jmp $1a8008	                JMP done_1
.1a7ec4	22 0e 80 1a	jsl $1a800e	is_dp_y         JSL DS_PR_OPERAND1      ; Print dd,Y
.1a7ec8	a9 2c		lda #$2c	                LDA #','
.1a7eca	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ecd	a9 59		lda #$59	                LDA #'Y'
.1a7ecf	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ed2	4c 08 80	jmp $1a8008	                JMP done_1
.1a7ed5	22 18 80 1a	jsl $1a8018	is_abs_y        JSL DS_PR_OPERAND2      ; Print dddd,Y
.1a7ed9	a9 2c		lda #$2c	                LDA #','
.1a7edb	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ede	a9 59		lda #$59	                LDA #'Y'
.1a7ee0	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ee3	4c 08 80	jmp $1a8008	                JMP done_1
.1a7ee6	22 18 80 1a	jsl $1a8018	is_abs_x        JSL DS_PR_OPERAND2      ; Print dddd,X
.1a7eea	a9 2c		lda #$2c	                LDA #','
.1a7eec	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7eef	a9 58		lda #$58	                LDA #'X'
.1a7ef1	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ef4	4c 08 80	jmp $1a8008	                JMP done_1
.1a7ef7	a9 28		lda #$28	is_abs_x_id     LDA #'('
.1a7ef9	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7efc	22 18 80 1a	jsl $1a8018	                JSL DS_PR_OPERAND2      ; Print (dddd,X)
.1a7f00	a9 2c		lda #$2c	                LDA #','
.1a7f02	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f05	a9 58		lda #$58	                LDA #'X'
.1a7f07	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f0a	a9 29		lda #$29	                LDA #')'
.1a7f0c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f0f	4c 08 80	jmp $1a8008	                JMP done_1
.1a7f12	a9 28		lda #$28	is_dp_ind       LDA #'('
.1a7f14	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f17	22 0e 80 1a	jsl $1a800e	                JSL DS_PR_OPERAND1      ; Print (dd)
.1a7f1b	a9 29		lda #$29	                LDA #')'
.1a7f1d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f20	4c 08 80	jmp $1a8008	                JMP done_1
.1a7f23	a9 41		lda #$41	is_accumulator  LDA #'A'                ; Print A
.1a7f25	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f28	4c 0c 80	jmp $1a800c	                JMP done
.1a7f2b	22 0e 80 1a	jsl $1a800e	is_stack_r      JSL DS_PR_OPERAND1      ; Print dd,S
.1a7f2f	a9 2c		lda #$2c	                LDA #','
.1a7f31	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f34	a9 53		lda #$53	                LDA #'S'
.1a7f36	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f39	4c 08 80	jmp $1a8008	                JMP done_1
.1a7f3c	a9 5b		lda #$5b	is_dp_long      LDA #'['                ; [dd]
.1a7f3e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f41	22 0e 80 1a	jsl $1a800e	                JSL DS_PR_OPERAND1      ; Print dd
.1a7f45	a9 5d		lda #$5d	                LDA #']'
.1a7f47	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f4a	4c 08 80	jmp $1a8008	                JMP done_1
.1a7f4d	22 26 80 1a	jsl $1a8026	is_abs_long     JSL DS_PR_OPERAND3      ; Print dddddd
.1a7f51	4c 0c 80	jmp $1a800c	                JMP done
.1a7f54	a9 28		lda #$28	is_stack_r_y    LDA #'('                ; (dd,S),Y
.1a7f56	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f59	22 0e 80 1a	jsl $1a800e	                JSL DS_PR_OPERAND1      ; Print dd
.1a7f5d	a9 2c		lda #$2c	                LDA #','
.1a7f5f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f62	a9 53		lda #$53	                LDA #'S'
.1a7f64	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f67	a9 29		lda #$29	                LDA #')'
.1a7f69	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f6c	a9 2c		lda #$2c	                LDA #','
.1a7f6e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f71	a9 59		lda #$59	                LDA #'Y'
.1a7f73	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f76	4c 08 80	jmp $1a8008	                JMP done_1
.1a7f79	a9 5b		lda #$5b	is_dp_y_long    LDA #'['                ; [dd],Y
.1a7f7b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f7e	22 0e 80 1a	jsl $1a800e	                JSL DS_PR_OPERAND1      ; Print dd
.1a7f82	a9 5d		lda #$5d	                LDA #']'
.1a7f84	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f87	a9 2c		lda #$2c	                LDA #','
.1a7f89	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f8c	a9 59		lda #$59	                LDA #'Y'
.1a7f8e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f91	4c 08 80	jmp $1a8008	                JMP done_1
.1a7f94	a0 02 00	ldy #$0002	is_pc_rel_long  LDY #2
.1a7f97	80 03		bra $1a7f9c	                BRA do_pcrel
.1a7f99	a0 01 00	ldy #$0001	is_pc_rel       LDY #1
.1a7f9c	22 8c 80 1a	jsl $1a808c	do_pcrel        JSL DS_PR_PCREL
.1a7fa0	4c 0c 80	jmp $1a800c	                JMP done
.1a7fa3	4c 0c 80	jmp $1a800c	is_implied      JMP done
.1a7fa6	22 26 80 1a	jsl $1a8026	is_abs_x_long   JSL DS_PR_OPERAND3      ; Print dddddd
.1a7faa	a9 2c		lda #$2c	                LDA #','
.1a7fac	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7faf	a9 58		lda #$58	                LDA #'X'
.1a7fb1	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fb4	4c 0c 80	jmp $1a800c	                JMP done
.1a7fb7	a9 23		lda #$23	is_xyc          LDA #'#'
.1a7fb9	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fbc	8b		phb		                PHB                     ; Make sure the databank is pointed to our number
.1a7fbd	a5 02		lda $087c	                LDA MCURSOR+2
.1a7fbf	48		pha		                PHA
.1a7fc0	ab		plb		                PLB
.1a7fc1	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.1a7fc3	e8		inx		                INX
.1a7fc4	a0 01 00	ldy #$0001	                LDY #1
.1a7fc7	22 ac 03 1a	jsl $1a03ac	                JSL PRINTH
.1a7fcb	a9 2c		lda #$2c	                LDA #','
.1a7fcd	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fd0	a9 23		lda #$23	                LDA #'#'
.1a7fd2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fd5	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.1a7fd7	a0 01 00	ldy #$0001	                LDY #1
.1a7fda	22 ac 03 1a	jsl $1a03ac	                JSL PRINTH
.1a7fde	ab		plb		                PLB                     ; Get our old data bank back
.1a7fdf	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a7fe3	4c 08 80	jmp $1a8008	                JMP done_1
.1a7fe6	a9 28		lda #$28	is_abs_ind      LDA #'('
.1a7fe8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7feb	22 18 80 1a	jsl $1a8018	                JSL DS_PR_OPERAND2      ; Print (dddd)
.1a7fef	a9 29		lda #$29	                LDA #')'
.1a7ff1	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ff4	4c 08 80	jmp $1a8008	                JMP done_1
.1a7ff7	a9 5b		lda #$5b	is_abs_ind_long LDA #'['
.1a7ff9	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ffc	22 18 80 1a	jsl $1a8018	                JSL DS_PR_OPERAND2      ; Print [dddd]
.1a8000	a9 5d		lda #$5d	                LDA #']'
.1a8002	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8005	4c 08 80	jmp $1a8008	                JMP done_1
.1a8008	22 3b 86 1a	jsl $1a863b	done_1          JSL M_INC_CURSOR    ; Skip over a single byte operand
.1a800c	28		plp		done            PLP
.1a800d	6b		rtl		                RTL
.1a800e					DS_PR_OPERAND1
.1a800e	08		php		                PHP
.1a800f	e2 20		sep #$20	            SEP #$20
.1a8011	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a8013	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a8016	28		plp		                PLP
.1a8017	6b		rtl		                RTL
.1a8018					DS_PR_OPERAND2
.1a8018	08		php		                PHP
.1a8019	c2 30		rep #$30	            REP #$30
.1a801b	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a801d	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a8020	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a8024	28		plp		                PLP
.1a8025	6b		rtl		                RTL
.1a8026					DS_PR_OPERAND3
.1a8026	08		php		                PHP
.1a8027	8b		phb		                PHB
.1a8028	0b		phd		                PHD
.1a8029	c2 30		rep #$30	            REP #$30
.1a802b	5a		phy		                PHY
.1a802c	08		php		            PHP
.1a802d	c2 20		rep #$20	            REP #$20
.1a802f	48		pha		            PHA
.1a8030	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a8033	5b		tcd		            TCD
.1a8034	68		pla		            PLA
.1a8035	28		plp		            PLP
.1a8036	08		php		            PHP
.1a8037	e2 20		sep #$20	            SEP #$20
.1a8039	48		pha		            PHA
.1a803a	a9 00		lda #$00	            LDA #`MTEMP
.1a803c	48		pha		            PHA
.1a803d	ab		plb		            PLB
.1a803e	68		pla		            PLA
.1a803f	28		plp		            PLP
.1a8040	e2 20		sep #$20	            SEP #$20
.1a8042	a0 00 00	ldy #$0000	                LDY #0
.1a8045	a7 00		lda [$087a]	copy_loop       LDA [MCURSOR]       ; Copy the address pointed to by MCURSOR
.1a8047	99 92 08	sta $0892,y	                STA MTEMP,Y         ; to MTEMP
.1a804a	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a804e	c8		iny		                INY
.1a804f	c0 03 00	cpy #$0003	                CPY #3
.1a8052	d0 f1		bne $1a8045	                BNE copy_loop
.1a8054	22 e5 80 1a	jsl $1a80e5	                JSL M_PR_ADDR       ; Print the address
.1a8058	c2 30		rep #$30	            REP #$30
.1a805a	7a		ply		                PLY
.1a805b	2b		pld		                PLD
.1a805c	ab		plb		                PLB
.1a805d	28		plp		                PLP
.1a805e	6b		rtl		                RTL
.1a805f					DS_PR_MNEMONIC
.1a805f	08		php		                PHP
.1a8060	8b		phb		                PHB
.1a8061	e2 20		sep #$20	            SEP #$20
.1a8063	c2 10		rep #$10	            REP #$10
.1a8065	08		php		            PHP
.1a8066	e2 20		sep #$20	            SEP #$20
.1a8068	48		pha		            PHA
.1a8069	a9 1a		lda #$1a	            LDA #`MN_ORA
.1a806b	48		pha		            PHA
.1a806c	ab		plb		            PLB
.1a806d	68		pla		            PLA
.1a806e	28		plp		            PLP
.1a806f	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a8072	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8075	e8		inx		                INX
.1a8076	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a8079	20 18 00	jsr $1a0018	            JSR PRINTC
.1a807c	e8		inx		                INX
.1a807d	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a8080	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8083	e8		inx		                INX
.1a8084	a9 20		lda #$20	                LDA #' '            ; Print a space
.1a8086	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8089	ab		plb		                PLB
.1a808a	28		plp		                PLP
.1a808b	6b		rtl		                RTL
.1a808c					DS_PR_PCREL
.1a808c	08		php		                PHP
.1a808d	0b		phd		                PHD
.1a808e	08		php		            PHP
.1a808f	c2 20		rep #$20	            REP #$20
.1a8091	48		pha		            PHA
.1a8092	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a8095	5b		tcd		            TCD
.1a8096	68		pla		            PLA
.1a8097	28		plp		            PLP
.1a8098	e2 20		sep #$20	            SEP #$20
.1a809a	c0 02 00	cpy #$0002	                CPY #2
.1a809d	f0 14		beq $1a80b3	                BEQ offset_2
.1a809f	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a80a1	85 18		sta $0892	                STA MTEMP
.1a80a3	30 06		bmi $1a80ab	                BMI is_negative
.1a80a5	64 19		stz $0893	                STZ MTEMP+1
.1a80a7	64 1a		stz $0894	                STZ MTEMP+2
.1a80a9	80 1e		bra $1a80c9	                BRA add_offset
.1a80ab	a9 ff		lda #$ff	is_negative     LDA #$FF
.1a80ad	85 19		sta $0893	                STA MTEMP+1
.1a80af	85 1a		sta $0894	                STA MTEMP+2
.1a80b1	80 16		bra $1a80c9	                BRA add_offset
.1a80b3	a7 00		lda [$087a]	offset_2        LDA [MCURSOR]
.1a80b5	85 18		sta $0892	                STA MTEMP
.1a80b7	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a80bb	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a80bd	85 19		sta $0893	                STA MTEMP+1
.1a80bf	30 04		bmi $1a80c5	                BMI is_negative2
.1a80c1	64 1a		stz $0894	                STZ MTEMP+2
.1a80c3	80 04		bra $1a80c9	                BRA add_offset
.1a80c5	a9 ff		lda #$ff	is_negative2    LDA #$FF
.1a80c7	85 1a		sta $0894	                STA MTEMP+2
.1a80c9					add_offset
.1a80c9	c2 20		rep #$20	            REP #$20
.1a80cb	38		sec		                SEC             ; Add 1 to the offset
.1a80cc	a5 00		lda $087a	                LDA MCURSOR
.1a80ce	65 18		adc $0892	                ADC MTEMP
.1a80d0	85 18		sta $0892	                STA MTEMP
.1a80d2	e2 20		sep #$20	            SEP #$20
.1a80d4	a5 02		lda $087c	                LDA MCURSOR+2
.1a80d6	65 1a		adc $0894	                ADC MTEMP+2
.1a80d8	85 1a		sta $0894	                STA MTEMP+2
.1a80da	22 e5 80 1a	jsl $1a80e5	                JSL M_PR_ADDR
.1a80de	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a80e2	2b		pld		                PLD
.1a80e3	28		plp		                PLP
.1a80e4	6b		rtl		                RTL
.1a80e5					M_PR_ADDR
.1a80e5	08		php		                PHP
.1a80e6	0b		phd		                PHD
.1a80e7	c2 20		rep #$20	            REP #$20
.1a80e9	48		pha		                PHA
.1a80ea	08		php		            PHP
.1a80eb	c2 20		rep #$20	            REP #$20
.1a80ed	48		pha		            PHA
.1a80ee	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a80f1	5b		tcd		            TCD
.1a80f2	68		pla		            PLA
.1a80f3	28		plp		            PLP
.1a80f4	e2 20		sep #$20	            SEP #$20
.1a80f6	a5 4c		lda $0894	                LDA MTEMP+2     ; Print the bank byte of the address
.1a80f8	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a80fb	e2 20		sep #$20	            SEP #$20
.1a80fd	a9 3a		lda #$3a	                LDA #':'
.1a80ff	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8102	c2 20		rep #$20	            REP #$20
.1a8104	a5 4a		lda $0892	                LDA MTEMP       ; Print the lower 16-bits of the address
.1a8106	20 39 04	jsr $1a0439	            JSR PRHEXW
.1a8109	68		pla		                PLA
.1a810a	2b		pld		                PLD
.1a810b	28		plp		                PLP
.1a810c	6b		rtl		                RTL
.1a810d					MNEMONICS_TAB
.1a810d					MN_ORA
>1a810d	4f 52 41 00			            .null "ORA"
.1a8111					MN_AND
>1a8111	41 4e 44 00			            .null "AND"
.1a8115					MN_EOR
>1a8115	45 4f 52 00			            .null "EOR"
.1a8119					MN_ADC
>1a8119	41 44 43 00			            .null "ADC"
.1a811d					MN_STA
>1a811d	53 54 41 00			            .null "STA"
.1a8121					MN_LDA
>1a8121	4c 44 41 00			            .null "LDA"
.1a8125					MN_CMP
>1a8125	43 4d 50 00			            .null "CMP"
.1a8129					MN_SBC
>1a8129	53 42 43 00			            .null "SBC"
.1a812d					MN_ASL
>1a812d	41 53 4c 00			            .null "ASL"
.1a8131					MN_ROL
>1a8131	52 4f 4c 00			            .null "ROL"
.1a8135					MN_LSR
>1a8135	4c 53 52 00			            .null "LSR"
.1a8139					MN_ROR
>1a8139	52 4f 52 00			            .null "ROR"
.1a813d					MN_STX
>1a813d	53 54 58 00			            .null "STX"
.1a8141					MN_LDX
>1a8141	4c 44 58 00			            .null "LDX"
.1a8145					MN_DEC
>1a8145	44 45 43 00			            .null "DEC"
.1a8149					MN_INC
>1a8149	49 4e 43 00			            .null "INC"
.1a814d					MN_BIT
>1a814d	42 49 54 00			            .null "BIT"
.1a8151					MN_JMP
>1a8151	4a 4d 50 00			            .null "JMP"
.1a8155					MN_STY
>1a8155	53 54 59 00			            .null "STY"
.1a8159					MN_LDY
>1a8159	4c 44 59 00			            .null "LDY"
.1a815d					MN_CPY
>1a815d	43 50 59 00			            .null "CPY"
.1a8161					MN_CPX
>1a8161	43 50 58 00			            .null "CPX"
.1a8165					MN_BRK
>1a8165	42 52 4b 00			            .null "BRK"
.1a8169					MN_JSR
>1a8169	4a 53 52 00			            .null "JSR"
.1a816d					MN_RTI
>1a816d	52 54 49 00			            .null "RTI"
.1a8171					MN_RTS
>1a8171	52 54 53 00			            .null "RTS"
.1a8175					MN_PHP
>1a8175	50 48 50 00			            .null "PHP"
.1a8179					MN_PLP
>1a8179	50 4c 50 00			            .null "PLP"
.1a817d					MN_PHA
>1a817d	50 48 41 00			            .null "PHA"
.1a8181					MN_PLA
>1a8181	50 4c 41 00			            .null "PLA"
.1a8185					MN_DEY
>1a8185	44 45 59 00			            .null "DEY"
.1a8189					MN_TAY
>1a8189	54 41 59 00			            .null "TAY"
.1a818d					MN_INY
>1a818d	49 4e 59 00			            .null "INY"
.1a8191					MN_INX
>1a8191	49 4e 58 00			            .null "INX"
.1a8195					MN_CLC
>1a8195	43 4c 43 00			            .null "CLC"
.1a8199					MN_SEC
>1a8199	53 45 43 00			            .null "SEC"
.1a819d					MN_CLI
>1a819d	43 4c 49 00			            .null "CLI"
.1a81a1					MN_SEI
>1a81a1	53 45 49 00			            .null "SEI"
.1a81a5					MN_TYA
>1a81a5	54 59 41 00			            .null "TYA"
.1a81a9					MN_CLV
>1a81a9	43 4c 56 00			            .null "CLV"
.1a81ad					MN_CLD
>1a81ad	43 4c 44 00			            .null "CLD"
.1a81b1					MN_SED
>1a81b1	53 45 44 00			            .null "SED"
.1a81b5					MN_TXA
>1a81b5	54 58 41 00			            .null "TXA"
.1a81b9					MN_TXS
>1a81b9	54 58 53 00			            .null "TXS"
.1a81bd					MN_TAX
>1a81bd	54 41 58 00			            .null "TAX"
.1a81c1					MN_TSX
>1a81c1	54 53 58 00			            .null "TSX"
.1a81c5					MN_DEX
>1a81c5	44 45 58 00			            .null "DEX"
.1a81c9					MN_NOP
>1a81c9	4e 4f 50 00			            .null "NOP"
.1a81cd					MN_BPL
>1a81cd	42 50 4c 00			            .null "BPL"
.1a81d1					MN_BMI
>1a81d1	42 4d 49 00			            .null "BMI"
.1a81d5					MN_BVC
>1a81d5	42 56 43 00			            .null "BVC"
.1a81d9					MN_BVS
>1a81d9	42 56 53 00			            .null "BVS"
.1a81dd					MN_BCC
>1a81dd	42 43 43 00			            .null "BCC"
.1a81e1					MN_BCS
>1a81e1	42 43 53 00			            .null "BCS"
.1a81e5					MN_BNE
>1a81e5	42 4e 45 00			            .null "BNE"
.1a81e9					MN_BEQ
>1a81e9	42 45 51 00			            .null "BEQ"
.1a81ed					MN_TSB
>1a81ed	54 53 42 00			            .null "TSB"
.1a81f1					MN_TRB
>1a81f1	54 52 42 00			            .null "TRB"
.1a81f5					MN_STZ
>1a81f5	53 54 5a 00			            .null "STZ"
.1a81f9					MN_BRA
>1a81f9	42 52 41 00			            .null "BRA"
.1a81fd					MN_PHY
>1a81fd	50 48 59 00			            .null "PHY"
.1a8201					MN_PLY
>1a8201	50 4c 59 00			            .null "PLY"
.1a8205					MN_PHX
>1a8205	50 48 58 00			            .null "PHX"
.1a8209					MN_PLX
>1a8209	50 4c 58 00			            .null "PLX"
.1a820d					MN_PHD
>1a820d	50 48 44 00			            .null "PHD"
.1a8211					MN_PLD
>1a8211	50 4c 44 00			            .null "PLD"
.1a8215					MN_PHK
>1a8215	50 48 4b 00			            .null "PHK"
.1a8219					MN_RTL
>1a8219	52 54 4c 00			            .null "RTL"
.1a821d					MN_PHB
>1a821d	50 48 42 00			            .null "PHB"
.1a8221					MN_PLB
>1a8221	50 4c 42 00			            .null "PLB"
.1a8225					MN_WAI
>1a8225	57 41 49 00			            .null "WAI"
.1a8229					MN_XBA
>1a8229	58 42 41 00			            .null "XBA"
.1a822d					MN_TCS
>1a822d	54 43 53 00			            .null "TCS"
.1a8231					MN_TSC
>1a8231	54 53 43 00			            .null "TSC"
.1a8235					MN_TCD
>1a8235	54 43 44 00			            .null "TCD"
.1a8239					MN_TDC
>1a8239	54 44 43 00			            .null "TDC"
.1a823d					MN_TXY
>1a823d	54 58 59 00			            .null "TXY"
.1a8241					MN_TYX
>1a8241	54 59 58 00			            .null "TYX"
.1a8245					MN_STP
>1a8245	53 54 50 00			            .null "STP"
.1a8249					MN_XCE
>1a8249	58 43 45 00			            .null "XCE"
.1a824d					MN_COP
>1a824d	43 4f 50 00			            .null "COP"
.1a8251					MN_JSL
>1a8251	4a 53 4c 00			            .null "JSL"
.1a8255					MN_WDM
>1a8255	57 44 4d 00			            .null "WDM"
.1a8259					MN_PER
>1a8259	50 45 52 00			            .null "PER"
.1a825d					MN_BRL
>1a825d	42 52 4c 00			            .null "BRL"
.1a8261					MN_REP
>1a8261	52 45 50 00			            .null "REP"
.1a8265					MN_SEP
>1a8265	53 45 50 00			            .null "SEP"
.1a8269					MN_MVP
>1a8269	4d 56 50 00			            .null "MVP"
.1a826d					MN_MVN
>1a826d	4d 56 4e 00			            .null "MVN"
.1a8271					MN_PEI
>1a8271	50 45 49 00			            .null "PEI"
.1a8275					MN_PEA
>1a8275	50 45 41 00			            .null "PEA"
.1a8279					MN_JML
>1a8279	4a 4d 4c 00			            .null "JML"
>1a827d	00 00				            .byte 0, 0
>1a827f	65 81 0d 81 4d 82 0d 81		MNEMONIC_TAB    .word <>MN_BRK, <>MN_ORA, <>MN_COP, <>MN_ORA, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 0x
>1a8287	ed 81 0d 81 2d 81 0d 81
>1a828f	75 81 0d 81 2d 81 0d 82		                .word <>MN_PHP, <>MN_ORA, <>MN_ASL, <>MN_PHD, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>1a8297	ed 81 0d 81 2d 81 0d 81
>1a829f	cd 81 0d 81 0d 81 0d 81		                .word <>MN_BPL, <>MN_ORA, <>MN_ORA, <>MN_ORA, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 1x
>1a82a7	f1 81 0d 81 2d 81 0d 81
>1a82af	95 81 0d 81 49 81 2d 82		                .word <>MN_CLC, <>MN_ORA, <>MN_INC, <>MN_TCS, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>1a82b7	f1 81 0d 81 2d 81 0d 81
>1a82bf	69 81 11 81 51 82 11 81		                .word <>MN_JSR, <>MN_AND, <>MN_JSL, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 2x
>1a82c7	4d 81 11 81 31 81 11 81
>1a82cf	79 81 11 81 31 81 11 82		                .word <>MN_PLP, <>MN_AND, <>MN_ROL, <>MN_PLD, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>1a82d7	4d 81 11 81 31 81 11 81
>1a82df	d1 81 11 81 11 81 11 81		                .word <>MN_BMI, <>MN_AND, <>MN_AND, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 3x
>1a82e7	4d 81 11 81 31 81 11 81
>1a82ef	99 81 11 81 45 81 31 82		                .word <>MN_SEC, <>MN_AND, <>MN_DEC, <>MN_TSC, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>1a82f7	4d 81 11 81 31 81 11 81
>1a82ff	6d 81 15 81 55 82 15 81		                .word <>MN_RTI, <>MN_EOR, <>MN_WDM, <>MN_EOR, <>MN_MVP, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 4x
>1a8307	69 82 15 81 35 81 15 81
>1a830f	7d 81 15 81 35 81 15 82		                .word <>MN_PHA, <>MN_EOR, <>MN_LSR, <>MN_PHK, <>MN_JMP, <>MN_EOR, <>MN_LSR, <>MN_EOR
>1a8317	51 81 15 81 35 81 15 81
>1a831f	d5 81 15 81 15 81 15 81		                .word <>MN_BVC, <>MN_EOR, <>MN_EOR, <>MN_EOR, <>MN_MVN, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 5x
>1a8327	6d 82 15 81 35 81 15 81
>1a832f	9d 81 15 81 fd 81 35 82		                .word <>MN_CLI, <>MN_EOR, <>MN_PHY, <>MN_TCD, <>MN_JML, <>MN_EOR, <>MN_LSR, <>MN_EOR
>1a8337	79 82 15 81 35 81 15 81
>1a833f	71 81 19 81 59 82 19 81		                .word <>MN_RTS, <>MN_ADC, <>MN_PER, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 6x
>1a8347	f5 81 19 81 39 81 19 81
>1a834f	81 81 19 81 39 81 19 82		                .word <>MN_PLA, <>MN_ADC, <>MN_ROR, <>MN_RTL, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>1a8357	51 81 19 81 39 81 19 81
>1a835f	d9 81 19 81 19 81 19 81		                .word <>MN_BVS, <>MN_ADC, <>MN_ADC, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 7x
>1a8367	f5 81 19 81 39 81 19 81
>1a836f	a1 81 19 81 01 82 39 82		                .word <>MN_SEI, <>MN_ADC, <>MN_PLY, <>MN_TDC, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>1a8377	51 81 19 81 39 81 19 81
>1a837f	f9 81 1d 81 5d 82 1d 81		                .word <>MN_BRA, <>MN_STA, <>MN_BRL, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 8x
>1a8387	55 81 1d 81 3d 81 1d 81
>1a838f	85 81 4d 81 b5 81 1d 82		                .word <>MN_DEY, <>MN_BIT, <>MN_TXA, <>MN_PHB, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA
>1a8397	55 81 1d 81 3d 81 1d 81
>1a839f	dd 81 1d 81 1d 81 1d 81		                .word <>MN_BCC, <>MN_STA, <>MN_STA, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 9x
>1a83a7	55 81 1d 81 3d 81 1d 81
>1a83af	a5 81 1d 81 b9 81 3d 82		                .word <>MN_TYA, <>MN_STA, <>MN_TXS, <>MN_TXY, <>MN_STZ, <>MN_STA, <>MN_STZ, <>MN_STA
>1a83b7	f5 81 1d 81 f5 81 1d 81
>1a83bf	59 81 21 81 41 81 21 81		                .word <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Ax
>1a83c7	59 81 21 81 41 81 21 81
>1a83cf	89 81 21 81 bd 81 21 82		                .word <>MN_TAY, <>MN_LDA, <>MN_TAX, <>MN_PLB, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>1a83d7	59 81 21 81 41 81 21 81
>1a83df	e1 81 21 81 21 81 21 81		                .word <>MN_BCS, <>MN_LDA, <>MN_LDA, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Bx
>1a83e7	59 81 21 81 41 81 21 81
>1a83ef	a9 81 21 81 c1 81 41 82		                .word <>MN_CLV, <>MN_LDA, <>MN_TSX, <>MN_TYX, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>1a83f7	59 81 21 81 41 81 21 81
>1a83ff	5d 81 25 81 61 82 25 81		                .word <>MN_CPY, <>MN_CMP, <>MN_REP, <>MN_CMP, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Cx
>1a8407	5d 81 25 81 45 81 25 81
>1a840f	8d 81 25 81 c5 81 25 82		                .word <>MN_INY, <>MN_CMP, <>MN_DEX, <>MN_WAI, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP
>1a8417	5d 81 25 81 45 81 25 81
>1a841f	e5 81 25 81 25 81 25 81		                .word <>MN_BNE, <>MN_CMP, <>MN_CMP, <>MN_CMP, <>MN_PEI, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Dx
>1a8427	71 82 25 81 45 81 25 81
>1a842f	ad 81 25 81 05 82 45 82		                .word <>MN_CLD, <>MN_CMP, <>MN_PHX, <>MN_STP, <>MN_JML, <>MN_CMP, <>MN_DEC, <>MN_CMP
>1a8437	79 82 25 81 45 81 25 81
>1a843f	61 81 29 81 65 82 29 81		                .word <>MN_CPX, <>MN_SBC, <>MN_SEP, <>MN_SBC, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Ex
>1a8447	61 81 29 81 49 81 29 81
>1a844f	91 81 29 81 c9 81 29 82		                .word <>MN_INX, <>MN_SBC, <>MN_NOP, <>MN_XBA, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC
>1a8457	61 81 29 81 49 81 29 81
>1a845f	e9 81 29 81 29 81 29 81		                .word <>MN_BEQ, <>MN_SBC, <>MN_SBC, <>MN_SBC, <>MN_PEA, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Fx
>1a8467	75 82 29 81 49 81 29 81
>1a846f	b1 81 29 81 09 82 49 82		                .word <>MN_SED, <>MN_SBC, <>MN_PLX, <>MN_XCE, <>MN_JSR, <>MN_SBC, <>MN_INC, <>MN_SBC
>1a8477	69 81 29 81 49 81 29 81
>1a847f	00 00				                .word 0
>1a8481	13 00 02 09			ADDRESS_TAB     .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R                  ; 0x
>1a8485	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8489	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a848d	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a8491	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 1x
>1a8495	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8499	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>1a849d	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a84a1	03 00 0b 09			                .byte ADDR_ABS, ADDR_DP_IND_X, ADDR_ABS_LONG, ADDR_SP_R                 ; 2x
>1a84a5	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a84a9	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a84ad	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a84b1	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 3x
>1a84b5	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a84b9	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>1a84bd	07 07 07 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a84c1	13 00 13 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMPLIED, ADDR_SP_R              ; 4x
>1a84c5	14 01 01 0a			                .byte ADDR_XYC, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a84c9	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a84cd	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a84d1	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 5x
>1a84d5	14 05 05 0d			                .byte ADDR_XYC, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a84d9	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a84dd	0b 07 07 0b			                .byte ADDR_ABS_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_LONG
>1a84e1	13 00 16 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R          ; 6x
>1a84e5	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a84e9	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a84ed	15 03 03 0b			                .byte ADDR_ABS_IND, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a84f1	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 7x
>1a84f5	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a84f9	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a84fd	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a8501	12 00 16 09			                .byte ADDR_PC_REL, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R           ; 8x
>1a8505	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8509	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a850d	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a8511	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 9x
>1a8515	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>1a8519	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a851d	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a8521	82 00 42 09			                .byte ADDR_IMM | OP_M_EFFECT, ADDR_DP_IND_X, ADDR_IMM | OP_X_EFFECT, ADDR_SP_R  ; Ax
>1a8525	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8529	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a852d	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a8531	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Bx
>1a8535	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>1a8539	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a853d	07 07 06 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_Y, ADDR_ABS_X_LONG
>1a8541	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Cx
>1a8545	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8549	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a854d	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a8551	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Dx
>1a8555	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8559	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a855d	17 07 07 0e			                .byte ADDR_ABS_IND_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a8561	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Ex
>1a8565	01 01 01 0f			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_IND
>1a8569	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a856d	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a8571	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Fx
>1a8575	03 05 05 0d			                .byte ADDR_ABS, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8579	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a857d	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a8581	01 01 01 02 01 01 02 02		ADDR_LENGTH     .byte 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 0, 2, 2, 2, 2
>1a8589	00 01 01 03 01 01 03 01 02 01 01 00 02 02 02 02
.1a8599					ADDR_PATTERNS
>1a8599	41 00				            .null "A"
>1a859b	08				            .byte ADDR_ACC
>1a859c	64 64 3a 64 64 64 64 2c		            .null "dd:dddd,X"
>1a85a4	58 00
>1a85a6	0e				            .byte ADDR_ABS_X_LONG
>1a85a7	64 64 3a 64 64 64 64 00		            .null "dd:dddd"
>1a85af	0b				            .byte ADDR_ABS_LONG
>1a85b0	64 64 64 64 2c 58 00		            .null "dddd,X"
>1a85b7	07				            .byte ADDR_ABS_X
>1a85b8	64 64 64 64 2c 59 00		            .null "dddd,Y"
>1a85bf	06				            .byte ADDR_ABS_Y
>1a85c0	64 64 64 64 00			            .null "dddd"
>1a85c5	03				            .byte ADDR_ABS
>1a85c6	64 64 2c 58 00			            .null "dd,X"
>1a85cb	05				            .byte ADDR_DP_X
>1a85cc	64 64 2c 59 00			            .null "dd,Y"
>1a85d1	11				            .byte ADDR_DP_Y
>1a85d2	64 64 2c 53 00			            .null "dd,S"
>1a85d7	09				            .byte ADDR_SP_R
>1a85d8	64 64 00			            .null "dd"
>1a85db	01				            .byte ADDR_DP
>1a85dc	23 64 64 64 64 00		            .null "#dddd"
>1a85e2	c2				            .byte ADDR_IMM | OP_M_EFFECT | OP_X_EFFECT
>1a85e3	23 64 64 2c 23 64 64 00		            .null "#dd,#dd"
>1a85eb	14				            .byte ADDR_XYC
>1a85ec	23 64 64 00			            .null "#dd"
>1a85f0	02				            .byte ADDR_IMM
>1a85f1	28 64 64 2c 53 29 2c 59		            .null "(dd,S),Y"
>1a85f9	00
>1a85fa	0c				            .byte ADDR_SP_R_Y
>1a85fb	28 64 64 64 64 2c 58 29		            .null "(dddd,X)"
>1a8603	00
>1a8604	10				            .byte ADDR_ABS_X_ID
>1a8605	28 64 64 64 64 29 00		            .null "(dddd)"
>1a860c	10				            .byte ADDR_ABS_X_ID
>1a860d	28 64 64 2c 58 29 00		            .null "(dd,X)"
>1a8614	00				            .byte ADDR_DP_IND_X
>1a8615	28 64 64 29 2c 59 00		            .null "(dd),Y"
>1a861c	04				            .byte ADDR_DP_IND_Y
>1a861d	28 64 64 29 00			            .null "(dd)"
>1a8622	0f				            .byte ADDR_DP_IND
>1a8623	5b 64 64 64 64 5d 00		            .null "[dddd]"
>1a862a	17				            .byte ADDR_ABS_IND_LONG
>1a862b	5b 64 64 5d 2c 59 00		            .null "[dd],Y"
>1a8632	0d				            .byte ADDR_DP_Y_LONG
>1a8633	5b 64 64 5d 00			            .null "[dd]"
>1a8638	0a				            .byte ADDR_DP_LONG
>1a8639	00 00				                .byte 0, 0

;******  Return to file: src\monitor.s

.1a863b					M_INC_CURSOR
.1a863b	08		php		                PHP
.1a863c	c2 20		rep #$20	            REP #$20
.1a863e	48		pha		                PHA
.1a863f	18		clc		                CLC
.1a8640	af 7a 08 00	lda $00087a	                LDA MCURSOR
.1a8644	69 01 00	adc #$0001	                ADC #1
.1a8647	8f 7a 08 00	sta $00087a	                STA MCURSOR
.1a864b	e2 20		sep #$20	            SEP #$20
.1a864d	af 7c 08 00	lda $00087c	                LDA MCURSOR+2
.1a8651	69 00		adc #$00	                ADC #0
.1a8653	8f 7c 08 00	sta $00087c	                STA MCURSOR+2
.1a8657	c2 20		rep #$20	            REP #$20
.1a8659	68		pla		                PLA
.1a865a	28		plp		                PLP
.1a865b	6b		rtl		                RTL
.1a865c					MPRINTB
.1a865c	08		php		                PHP
.1a865d	c2 10		rep #$10	            REP #$10
.1a865f	e2 20		sep #$20	            SEP #$20
.1a8661	da		phx		                PHX
.1a8662	a2 08 00	ldx #$0008	                LDX #8          ; Set number of bits to print to 8
.1a8665	0a		asl a		loop            ASL A           ; Shift MSB to C
.1a8666	b0 08		bcs $1a8670	                BCS is_one
.1a8668	48		pha		                PHA             ; Save value to print
.1a8669	a9 30		lda #$30	                LDA #'0'        ; Print '0'
.1a866b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a866e	80 06		bra $1a8676	                BRA continue
.1a8670	48		pha		is_one          PHA             ; Save value to print
.1a8671	a9 31		lda #$31	                LDA #'1'        ; Print '1'
.1a8673	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8676	68		pla		continue        PLA
.1a8677	ca		dex		                DEX             ; Count down the bits to shift
.1a8678	d0 eb		bne $1a8665	                BNE loop        ; And try the next one if there is one
.1a867a	fa		plx		                PLX             ; Otherwise, return
.1a867b	28		plp		                PLP
.1a867c	6b		rtl		                RTL
.1a867d					MSKIPWS
.1a867d	08		php		            PHP
.1a867e	c2 20		rep #$20	            REP #$20
.1a8680	48		pha		            PHA
.1a8681	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a8684	5b		tcd		            TCD
.1a8685	68		pla		            PLA
.1a8686	28		plp		            PLP
.1a8687	e2 20		sep #$20	            SEP #$20
.1a8689	a7 32		lda [$087a]	loop            LDA [MCURSOR]       ; Check the current character
.1a868b	f0 0a		beq $1a8697	                BEQ done            ; If NULL, we're done
.1a868d	c9 20		cmp #$20	                CMP #' '            ; Is it a space?
.1a868f	d0 06		bne $1a8697	                BNE done            ; No: we're done
.1a8691	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR    ; Yes, try the next one
.1a8695	80 f2		bra $1a8689	                BRA loop
.1a8697	6b		rtl		done            RTL
.1a8698					MPARSESTR
.1a8698	08		php		                PHP
.1a8699	08		php		            PHP
.1a869a	c2 20		rep #$20	            REP #$20
.1a869c	48		pha		            PHA
.1a869d	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a86a0	5b		tcd		            TCD
.1a86a1	68		pla		            PLA
.1a86a2	28		plp		            PLP
.1a86a3	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR                ; Point to the first character of the name
.1a86a7	22 7d 86 1a	jsl $1a867d	                JSL MSKIPWS                     ; Skip white space
.1a86ab	c2 30		rep #$30	            REP #$30
.1a86ad	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.1a86af	c2 20		rep #$20	            REP #$20
.1a86b1	29 ff 00	and #$00ff	                AND #$00FF
.1a86b4	0a		asl a		                ASL A                           ; multiply it by forfour
.1a86b5	0a		asl a		                ASL A
.1a86b6	aa		tax		                TAX                             ; ... to get the index to the argument
.1a86b7	a5 32		lda $087a	                LDA MCURSOR                     ; Set the argument to the address of the first byte
.1a86b9	95 0d		sta $0855,x	                STA MARG1,X
.1a86bb	a5 34		lda $087c	                LDA MCURSOR+2
.1a86bd	95 0f		sta $0857,x	                STA MARG1+2,X
.1a86bf	e2 20		sep #$20	            SEP #$20
.1a86c1	a7 32		lda [$087a]	loop            LDA [MCURSOR]                   ; Scan to the closing double quote
.1a86c3	f0 14		beq $1a86d9	                BEQ done                        ; If NULL... treat it as a closed argument
.1a86c5	c9 22		cmp #$22	                CMP #CHAR_DQUOTE
.1a86c7	f0 06		beq $1a86cf	                BEQ close_string
.1a86c9	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a86cd	80 f2		bra $1a86c1	                BRA loop
.1a86cf	a9 00		lda #$00	close_string    LDA #0                          ; Write a NULL to close the string
.1a86d1	87 32		sta [$087a]	                STA [MCURSOR]
.1a86d3	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR                ; And point to the next byte
.1a86d7	e6 31		inc $0879	                INC MARG_LEN
.1a86d9	28		plp		done            PLP
.1a86da	6b		rtl		                RTL
.1a86db					MPARSEARG
.1a86db	08		php		            PHP
.1a86dc	c2 20		rep #$20	            REP #$20
.1a86de	48		pha		            PHA
.1a86df	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a86e2	5b		tcd		            TCD
.1a86e3	68		pla		            PLA
.1a86e4	28		plp		            PLP
.1a86e5	e2 20		sep #$20	            SEP #$20
.1a86e7	64 4a		stz $0892	                STZ MTEMP                       ; Use MTEMP as a flag for having processed digits
.1a86e9	c2 20		rep #$20	            REP #$20
.1a86eb	64 50		stz $0898	                STZ MPARSEDNUM                  ; Clear the parsed number
.1a86ed	64 52		stz $089a	                STZ MPARSEDNUM+2
.1a86ef					pa_loop
.1a86ef	e2 20		sep #$20	            SEP #$20
.1a86f1	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Get the current character
.1a86f3	c9 3a		cmp #$3a	                CMP #":"
.1a86f5	f0 0d		beq $1a8704	                BEQ pa_next_char                ; Ignore any colons
.1a86f7	20 d1 04	jsr $1a04d1	            JSR ISHEX
.1a86fa	90 0e		bcc $1a870a	                BCC finished_arg                ; No? We're done with this argument
.1a86fc	22 73 7b 1a	jsl $1a7b73	                JSL AS_SHIFT_HEX                ; Yes: shift it onto MPARSEDNUM
.1a8700	a9 01		lda #$01	                LDA #1                          ; Flag that we've processed a character
.1a8702	85 4a		sta $0892	                STA MTEMP
.1a8704	22 3b 86 1a	jsl $1a863b	pa_next_char    JSL M_INC_CURSOR                ; And try the next character
.1a8708	80 e5		bra $1a86ef	                BRA pa_loop
.1a870a	a5 4a		lda $0892	finished_arg    LDA MTEMP                       ; Check to see if we've processed any characters
.1a870c	f0 16		beq $1a8724	                BEQ done                        ; No: we're done
.1a870e	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.1a8710	c2 20		rep #$20	            REP #$20
.1a8712	29 ff 00	and #$00ff	                AND #$00FF
.1a8715	0a		asl a		                ASL A                           ; multiply it by forfour
.1a8716	0a		asl a		                ASL A
.1a8717	aa		tax		                TAX                             ; ... to get the index to the argument
.1a8718	a5 50		lda $0898	                LDA MPARSEDNUM                  ; Copy the value to the argument slot
.1a871a	95 0d		sta $0855,x	                STA MARG1,X
.1a871c	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a871e	95 0f		sta $0857,x	                STA MARG1+2,X
.1a8720	e2 20		sep #$20	            SEP #$20
.1a8722	e6 31		inc $0879	                INC MARG_LEN                    ; And bump up the argument count
.1a8724	6b		rtl		done            RTL
.1a8725					MPARSEALLARG
.1a8725	e2 20		sep #$20	            SEP #$20
.1a8727	64 31		stz $0879	                STZ MARG_LEN                    ; Set the arg count to 0
.1a8729	22 7d 86 1a	jsl $1a867d	parse_arg       JSL MSKIPWS                     ; Otherwise, skip white space
.1a872d	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Check the current character
.1a872f	f0 21		beq $1a8752	                BEQ done                        ; If it is NULL, we're done
.1a8731	c9 22		cmp #$22	                CMP #CHAR_DQUOTE                ; Is it a double-quote?
.1a8733	d0 06		bne $1a873b	                BNE regular_arg
.1a8735	22 98 86 1a	jsl $1a8698	                JSL MPARSESTR                   ; Yes: parse it as a string argument
.1a8739	80 0a		bra $1a8745	                BRA check_rest
.1a873b	22 db 86 1a	jsl $1a86db	regular_arg     JSL MPARSEARG                   ; Attempt to parse the argument
.1a873f	a5 31		lda $0879	                LDA MARG_LEN                    ; Check how many arguments we've processed
.1a8741	c9 09		cmp #$09	                CMP #9
.1a8743	b0 0d		bcs $1a8752	                BGE done                        ; If >=9, then we're done
.1a8745	a7 32		lda [$087a]	check_rest      LDA [MCURSOR]                   ; Check the current character
.1a8747	f0 09		beq $1a8752	                BEQ done                        ; If EOL: we're done
.1a8749	c9 20		cmp #$20	                CMP #' '
.1a874b	f0 dc		beq $1a8729	                BEQ parse_arg                   ; If space: try to process another argument
.1a874d	20 d1 04	jsr $1a04d1	            JSR ISHEX
.1a8750	b0 d7		bcs $1a8729	                BCS parse_arg                   ; If hex digit: try to process another argument
.1a8752	6b		rtl		done            RTL
.1a8753					IMPARSE
.1a8753	08		php		                PHP
.1a8754	0b		phd		                PHD
.1a8755	08		php		            PHP
.1a8756	c2 20		rep #$20	            REP #$20
.1a8758	48		pha		            PHA
.1a8759	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a875c	5b		tcd		            TCD
.1a875d	68		pla		            PLA
.1a875e	28		plp		            PLP
.1a875f	c2 10		rep #$10	            REP #$10
.1a8761	e2 20		sep #$20	            SEP #$20
.1a8763	a2 31 00	ldx #$0031	                LDX #MARG_LEN - MONITOR_VARS    ; Clear the monitor command line parameters
.1a8766	74 00		stz $0848,x	clear_command   STZ MONITOR_VARS,X
.1a8768	ca		dex		                DEX
.1a8769	d0 fb		bne $1a8766	                BNE clear_command
.1a876b	a9 00		lda #$00	                LDA #`INPUTBUF                  ; Point the command parser to the input buffer
.1a876d	85 02		sta $084a	                STA MCMDADDR+2
.1a876f	85 34		sta $087c	                STA MCURSOR+2                   ; And point MCURSOR there too
.1a8771	c2 20		rep #$20	            REP #$20
.1a8773	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF
.1a8776	85 00		sta $0848	                STA MCMDADDR
.1a8778	85 32		sta $087a	                STA MCURSOR
.1a877a	e2 20		sep #$20	            SEP #$20
.1a877c	22 7d 86 1a	jsl $1a867d	                JSL MSKIPWS                     ; Skip to the first letter of the command
.1a8780	c9 00		cmp #$00	                CMP #0                          ; Is the current character a NULL?
.1a8782	f0 38		beq $1a87bc	                BEQ done                        ; Yes: there's no command here
.1a8784	c2 20		rep #$20	            REP #$20
.1a8786	a5 32		lda $087a	                LDA MCURSOR
.1a8788	85 08		sta $0850	                STA MCMD
.1a878a	e2 20		sep #$20	            SEP #$20
.1a878c	a5 34		lda $087c	                LDA MCURSOR+2
.1a878e	85 0a		sta $0852	                STA MCMD+2
.1a8790	a2 01 00	ldx #$0001	                LDX #1
.1a8793	22 3b 86 1a	jsl $1a863b	cmd_loop        JSL M_INC_CURSOR                ; Move to the next character
.1a8797	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; What is that character?
.1a8799	d0 06		bne $1a87a1	                BNE cmd_space                   ; If not NULL: check for a space
.1a879b	86 0b		stx $0853	no_arguments    STX MCMD_LEN                    ; If NULL: Save the length of the command
.1a879d	64 31		stz $0879	                STZ MARG_LEN                    ; ... And the fact there are no arguments
.1a879f	80 1b		bra $1a87bc	                BRA done                        ; ... And return
.1a87a1	c9 20		cmp #$20	cmd_space       CMP #' '                        ; Is it a space?
.1a87a3	f0 03		beq $1a87a8	                BEQ found_cmd                   ; Yes: save the length
.1a87a5	e8		inx		                INX                             ; No: go to the next character
.1a87a6	80 eb		bra $1a8793	                BRA cmd_loop
.1a87a8	86 0b		stx $0853	found_cmd       STX MCMD_LEN                    ; Save the length of the command
.1a87aa	a9 00		lda #$00	                LDA #0
.1a87ac	87 32		sta [$087a]	                STA [MCURSOR]                   ; Write a NULL to the end of the command
.1a87ae	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR                ; And skip to the next character
.1a87b2	a7 08		lda [$0850]	                LDA [MCMD]                      ; Check the command
.1a87b4	c9 41		cmp #$41	                CMP #'A'
.1a87b6	f0 07		beq $1a87bf	                BEQ parse_asm                   ; If 'A', parse the line for the assemble command
.1a87b8	22 25 87 1a	jsl $1a8725	                JSL MPARSEALLARG
.1a87bc	2b		pld		done            PLD
.1a87bd	28		plp		                PLP
.1a87be	6b		rtl		                RTL
.1a87bf	22 7d 86 1a	jsl $1a867d	parse_asm       JSL MSKIPWS                     ; Skip to the first letter of the address
.1a87c3	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a87c5	f0 f5		beq $1a87bc	                BEQ done                        ; Exit if we got the end-of-line
.1a87c7	22 db 86 1a	jsl $1a86db	                JSL MPARSEARG                   ; Parse the first argument as the target address
.1a87cb	22 7d 86 1a	jsl $1a867d	                JSL MSKIPWS                     ; Skip to the first letter of the mnemonic
.1a87cf	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a87d1	f0 e9		beq $1a87bc	                BEQ done                        ; Exit if we got the end-of-line
.1a87d3	c2 20		rep #$20	            REP #$20
.1a87d5	a5 32		lda $087a	                LDA MCURSOR                     ; Save pointer to the start of the mnemonic
.1a87d7	85 11		sta $0859	                STA MARG2
.1a87d9	e2 20		sep #$20	            SEP #$20
.1a87db	a5 34		lda $087c	                LDA MCURSOR+2
.1a87dd	85 13		sta $085b	                STA MARG2+2
.1a87df	22 3b 86 1a	jsl $1a863b	asm_find_sp     JSL M_INC_CURSOR                ; Find the space at the end of the mnemonic
.1a87e3	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a87e5	f0 26		beq $1a880d	                BEQ asm_no_operand              ; If EOL: we have an instruction but no operand
.1a87e7	c9 20		cmp #$20	                CMP #' '
.1a87e9	d0 f4		bne $1a87df	                BNE asm_find_sp
.1a87eb	a9 00		lda #$00	                LDA #0
.1a87ed	87 32		sta [$087a]	                STA [MCURSOR]                   ; Null terminate the mnemonic
.1a87ef	e6 31		inc $0879	                INC MARG_LEN                    ; Count the mnemonic as an argument
.1a87f1	22 3b 86 1a	jsl $1a863b	                JSL M_INC_CURSOR
.1a87f5	22 7d 86 1a	jsl $1a867d	                JSL MSKIPWS                     ; Skip to the addressing mode
.1a87f9	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a87fb	f0 bf		beq $1a87bc	                BEQ done                        ; If EOL: we're done
.1a87fd	c2 20		rep #$20	            REP #$20
.1a87ff	a5 32		lda $087a	                LDA MCURSOR                     ; Set the pointer to the addressing mode
.1a8801	85 15		sta $085d	                STA MARG3
.1a8803	e2 20		sep #$20	            SEP #$20
.1a8805	a5 34		lda $087c	                LDA MCURSOR+2
.1a8807	85 17		sta $085f	                STA MARG3+2
.1a8809	e6 31		inc $0879	                INC MARG_LEN                    ; And count it as the second argument
.1a880b	80 af		bra $1a87bc	                BRA done                        ; and return
.1a880d	e6 31		inc $0879	asm_no_operand  INC MARG_LEN                    ; Increment the argument count
.1a880f	80 ab		bra $1a87bc	                BRA done                        ; And quit
.1a8811					IMLOAD
.1a8811	08		php		                PHP
.1a8812	c2 10		rep #$10	            REP #$10
.1a8814	e2 20		sep #$20	            SEP #$20
.1a8816	a5 31		lda $0879	                LDA MARG_LEN
.1a8818	d0 0f		bne $1a8829	                BNE get_arguments
.1a881a	a2 07 89	ldx #$8907	bad_arguments   LDX #<>MERRARGS                 ; Print bad arguments error
.1a881d	a9 1a		lda #$1a	                LDA #`MERRARGS
.1a881f	48		pha		                PHA
.1a8820	ab		plb		                PLB
.1a8821	20 29 04	jsr $1a0429	            JSR PRINTS
.1a8824	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a8827	80 61		bra $1a888a	                BRA done
.1a8829					get_arguments
.1a8829	c2 20		rep #$20	            REP #$20
.1a882b	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.1a882d	8f 23 08 00	sta $000823	                STA ARGUMENT1
.1a8831	a5 0f		lda $0857	                LDA MARG1+2
.1a8833	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.1a8837	20 fa 69	jsr $1a69fa	            JSR SETFILEDESC
.1a883a	e2 20		sep #$20	            SEP #$20
.1a883c	a5 31		lda $0879	                LDA MARG_LEN
.1a883e	c9 01		cmp #$01	                CMP #1
.1a8840	d0 0f		bne $1a8851	                BNE get_dest
.1a8842	c2 20		rep #$20	            REP #$20
.1a8844	a9 ff ff	lda #$ffff	                LDA #$FFFF                      ; Destination address not provided...
.1a8847	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR              ; ... set it to something sane
.1a884b	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a884f	80 0e		bra $1a885f	                BRA try_load
.1a8851					get_dest
.1a8851	c2 20		rep #$20	            REP #$20
.1a8853	a5 11		lda $0859	                LDA MARG2                       ; Set the destination address from the arguments
.1a8855	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a8859	a5 13		lda $085b	                LDA MARG2+2
.1a885b	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a885f	22 18 11 00	jsl $001118	try_load        JSL FK_LOAD                     ; Try to load the file
.1a8863	b0 25		bcs $1a888a	                BCS done
.1a8865					error
.1a8865	e2 20		sep #$20	            SEP #$20
.1a8867	a2 2d 89	ldx #$892d	                LDX #<>MCANTLOAD                ; Print bad arguments error
.1a886a	a9 1a		lda #$1a	                LDA #`MCANTLOAD
.1a886c	48		pha		                PHA
.1a886d	ab		plb		                PLB
.1a886e	20 29 04	jsr $1a0429	            JSR PRINTS
.1a8871	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.1a8875	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a8878	a9 20		lda #$20	                LDA #' '
.1a887a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a887d	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.1a8881	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a8884	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a8887	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a888a	28		plp		done            PLP
.1a888b	6b		rtl		                RTL
.1a888c					IMSAVE
.1a888c	8b		phb		                PHB
.1a888d	08		php		                PHP
.1a888e	c2 10		rep #$10	            REP #$10
.1a8890	e2 20		sep #$20	            SEP #$20
.1a8892	a5 31		lda $0879	                LDA MARG_LEN
.1a8894	c9 03		cmp #$03	                CMP #3
.1a8896	f0 0f		beq $1a88a7	                BEQ get_arguments
.1a8898	a2 07 89	ldx #$8907	                LDX #<>MERRARGS                 ; Print bad arguments error
.1a889b	a9 1a		lda #$1a	                LDA #`MERRARGS
.1a889d	48		pha		                PHA
.1a889e	ab		plb		                PLB
.1a889f	20 29 04	jsr $1a0429	            JSR PRINTS
.1a88a2	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a88a5	80 54		bra $1a88fb	                BRA done
.1a88a7					get_arguments
.1a88a7	c2 20		rep #$20	            REP #$20
.1a88a9	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.1a88ab	8f 23 08 00	sta $000823	                STA ARGUMENT1
.1a88af	a5 0f		lda $0857	                LDA MARG1+2
.1a88b1	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.1a88b5	20 fa 69	jsr $1a69fa	            JSR SETFILEDESC
.1a88b8	a5 11		lda $0859	                LDA MARG2                       ; Set the starting address
.1a88ba	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a88be	a5 13		lda $085b	                LDA MARG2+2
.1a88c0	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a88c4	a5 15		lda $085d	                LDA MARG3                       ; Set the ending address
.1a88c6	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a88ca	a5 17		lda $085f	                LDA MARG3+2
.1a88cc	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a88d0	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                     ; Save the data
.1a88d4	b0 25		bcs $1a88fb	                BCS done
.1a88d6					error
.1a88d6	e2 20		sep #$20	            SEP #$20
.1a88d8	a2 17 89	ldx #$8917	                LDX #<>MCANTSAVE                ; Print bad arguments error
.1a88db	a9 1a		lda #$1a	                LDA #`MCANTSAVE
.1a88dd	48		pha		                PHA
.1a88de	ab		plb		                PLB
.1a88df	20 29 04	jsr $1a0429	            JSR PRINTS
.1a88e2	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.1a88e6	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a88e9	a9 20		lda #$20	                LDA #' '
.1a88eb	20 18 00	jsr $1a0018	            JSR PRINTC
.1a88ee	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.1a88f2	20 53 04	jsr $1a0453	            JSR PRHEXB
.1a88f5	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a88f8	20 9c 03	jsr $1a039c	            JSR PRINTCR
.1a88fb	28		plp		done            PLP
.1a88fc	ab		plb		                PLB
.1a88fd	6b		rtl		                RTL
.1a88fe	5c 7d 27 1a	jmp $1a277d	IMEXIT          JML INTERACT
.1a8902	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.1a8903	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.1a8904	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.1a8905	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.1a8906	00		brk #		IMDOS           BRK ; Execute DOS command
.1a8907					MMESSAGES
>1a8907	42 61 64 20 61 72 67 75		MERRARGS        .null "Bad arguments",CHAR_CR,CHAR_CR
>1a890f	6d 65 6e 74 73 0d 0d 00
>1a8917	55 6e 61 62 6c 65 20 74		MCANTSAVE       .null "Unable to save file: "
>1a891f	6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>1a892d	55 6e 61 62 6c 65 20 74		MCANTLOAD       .null "Unable to load file: "
>1a8935	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00
>1a8943	0d 20 20 50 43 20 20 20		mregisters_msg  .null $0D,"  PC     A    X    Y    SP   DBR DP   NVMXDIZC",CHAR_CR
>1a894b	20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>1a895b	20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>1a896b	56 4d 58 44 49 5a 43 0d 00
>1a8974	41 43 44 46 47 4a 48 4c		MCOMMANDS       .null "ACDFGJHLMR;STVWX>?"
>1a897c	4d 52 3b 53 54 56 57 58 3e 3f 00

;******  Return to file: src\basic816.s

.1a8987	18		clc		START       CLC                 ; Go to native mode
.1a8988	fb		xce		            XCE
.1a8989	08		php		            PHP
.1a898a	c2 20		rep #$20	            REP #$20
.1a898c	48		pha		            PHA
.1a898d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a8990	5b		tcd		            TCD
.1a8991	68		pla		            PLA
.1a8992	28		plp		            PLP
.1a8993	08		php		            PHP
.1a8994	e2 20		sep #$20	            SEP #$20
.1a8996	48		pha		            PHA
.1a8997	a9 00		lda #$00	            LDA #BASIC_BANK
.1a8999	48		pha		            PHA
.1a899a	ab		plb		            PLB
.1a899b	68		pla		            PLA
.1a899c	28		plp		            PLP
.1a899d	c2 30		rep #$30	            REP #$30
.1a899f	20 c6 89	jsr $1a89c6	            JSR INITBASIC
.1a89a2	a9 ff fe	lda #$feff	            LDA #STACK_END      ; Set the system stack
.1a89a5	1b		tcs		            TCS
.1a89a6	08		php		            PHP
.1a89a7	e2 20		sep #$20	            SEP #$20
.1a89a9	48		pha		            PHA
.1a89aa	a9 1a		lda #$1a	            LDA #`GREET
.1a89ac	48		pha		            PHA
.1a89ad	ab		plb		            PLB
.1a89ae	68		pla		            PLA
.1a89af	28		plp		            PLP
.1a89b0	a2 71 d2	ldx #$d271	            LDX #<>GREET
.1a89b3	20 29 04	jsr $1a0429	            JSR PRINTS
.1a89b6	08		php		            PHP
.1a89b7	e2 20		sep #$20	            SEP #$20
.1a89b9	48		pha		            PHA
.1a89ba	a9 00		lda #$00	            LDA #BASIC_BANK
.1a89bc	48		pha		            PHA
.1a89bd	ab		plb		            PLB
.1a89be	68		pla		            PLA
.1a89bf	28		plp		            PLP
.1a89c0	4c 7d 27	jmp $1a277d	            JMP INTERACT        ; Start accepting input from the user
.1a89c3	4c c3 89	jmp $1a89c3	WAIT        JMP WAIT
.1a89c6					INITBASIC
.1a89c6	08		php		            PHP
.1a89c7	20 34 03	jsr $1a0334	            JSR INITIO
.1a89ca	20 69 4f	jsr $1a4f69	            JSR CMD_NEW
.1a89cd	28		plp		            PLP
.1a89ce	60		rts		            RTS
>1ad271	43 32 35 36 20 46 6f 65		GREET       .text "C256 Foenix BASIC816 "
>1ad279	6e 69 78 20 42 41 53 49 43 38 31 36 20

;******  Processing file: src\version.s

>1ad286	76 30 2e 32 2e 30 2d 61		.text "v0.2.0-alpha+389"
>1ad28e	6c 70 68 61 2b 33 38 39

;******  Return to file: src\basic816.s

>1ad296	0d 00				            .byte 13,0

;******  End of listing
