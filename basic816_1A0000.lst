
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D SYSTEM=2 -D C256_SKU=2 -D UARTSUPPORT= -D UNITTEST=0 -D TRACE_LEVEL=0 --long-address --flat -b --m65816 --intel-hex -o basic816_1A0000.hex --list=basic816_1A0000.lst --labels=basic816_1A0000.lbl src\basic816.s
; Mon Aug 02 15:20:50 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					SYSTEM=2
=2					C256_SKU=2
=					UARTSUPPORT=
=0					UNITTEST=0
=0					TRACE_LEVEL=0

;******  Processing input file: src\basic816.s


;******  Processing file: src\constants.s

=2					SYSTEM_C256 = 2         ; C256 Foenix
=1					SYSTEM_C64 = 1          ; Commodore 64 with SuperCPU
=$03					CHAR_CTRL_C = $03       ; CTRL-C: used as a program interrupt key
=$07					CHAR_BELL = $07         ; Ring the console bell
=$08					CHAR_BS = $08           ; Backspace
=$09					CHAR_TAB = $09          ; TAB
=$0a					CHAR_LF = $0A           ; Linefeed
=$0d					CHAR_CR = $0D           ; Carriage Return
=$0f					CHAR_INS = $0F          ; Insert
=$1b					CHAR_ESC = $1B          ; Escape
=$22					CHAR_DQUOTE = $22       ; Double quote
=$20					CHAR_SP = $20           ; Space
=$7f					CHAR_DEL = $7F          ; Delete
=5					ARGUMENT_SIZE = 5       ; Number of bytes in an argument
=8					VAR_NAME_SIZE = 8       ; Maximum number of characters in a variable name
=0					TYPE_INTEGER = 0        ; 32-bit integer
=1					TYPE_FLOAT = 1          ; Single-precision floating point
=2					TYPE_STRING = 2         ; ASCII string
=$80					TYPE_ARR_INTEGER = $80  ; Array of 32-bit integers
=$81					TYPE_ARR_FLOAT = $81    ; Array of 32-bit floats
=$82					TYPE_ARR_STRING = $82   ; Array of strings
=$7f					TYPE_BINDING = $7F      ; A variable name binding
=$ff					TYPE_NAV = $FF          ; Not-A-Value
=0					ERR_OK = 0              ; No error
=1					ERR_BREAK = 1           ; The user pressed an interrupt key
=2					ERR_SYNTAX = 2          ; A syntax error was found on the current line
=3					ERR_MEMORY = 3          ; Out of memory
=4					ERR_TYPE = 4            ; Type mismatch error
=5					ERR_NOTFOUND = 5        ; Variable not found error
=6					ERR_NOLINE = 6          ; Line number not found
=7					ERR_STACKUNDER = 7      ; Stack underflow error
=8					ERR_STACKOVER = 8       ; Stack overflow error
=9					ERR_RANGE = 9           ; Out-of-range error
=10					ERR_ARGUMENT = 10       ; Bad argument error
=11					ERR_NOFILE = 11         ; File not found error
=12					ERR_NAN = 12            ; Floating point math resulted in something that is not a number
=13					ERR_OVERFLOW = 13       ; Math operation overflowed
=14					ERR_UNDERFLOW = 14      ; Math operation underflowed
=15					ERR_DIV0 = 15           ; Math operation involved a division by zero
=16					ERR_DIRECTORY = 16      ; Error reading the directory
=17					ERR_LOAD = 17           ; Could not load file
=18					ERR_SAVE = 18           ; Could not save a file
=19					ERR_DELETE = 19         ; Could not delete a file
=20					ERR_FILENOTFOUND = 20   ; Could not find the file
=21					ERR_DIRNOTWRITE = 21    ; Could not update the directory entry
=22					ERR_NOTCOPIED = 22      ; Could not copy the file
=23					ERR_DOMAIN = 23         ; Mathematical functions domain error

;******  Return to file: src\basic816.s


;******  Processing file: src\memorymap.s


;******  Processing file: src\C256/mmap_c256.s

=1					SYS_C256_FMX = 1        ; System SKU for C256 Foenix FMX
=2					SYS_C256_USER = 2       ; System SKU for C256 Foenix User

;******  Processing file: src\C256/page_00_inc.s

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Unsigned divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 0 Divisor ex B in A/B
=$000114				D0_RESULT        = $000114 ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Signed divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 1 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/int_math_defs.s

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B
=$af1400				SIGNED32_MULT_A     = $AF1400
=$af1404				SIGNED32_MULT_B     = $AF1404
=$af1408				SIGNED32_MULT_OUT   = $AF1408

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/vicky_def.s

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				GAMMA_CTRL_REG          = $AF0002
=$01					GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02					GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08					GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10					HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af0900				VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01					VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02					VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901				VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902				VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903				VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80					VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000

;******  Processing file: src\C256/VKYII_CFP9553_BITMAP_def.s

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_TILEMAP_def.s

=$01					TILE_Enable             = $01
=0					TILEMAP_CONTROL         = 0             ; Offset to a tile map's control register
=1					TILEMAP_START_ADDY      = 1             ; Offset to a tile map's address
=4					TILEMAP_TOTAL_X         = 4             ; Offset to a tile map's width
=6					TILEMAP_TOTAL_Y         = 6             ; Offset to a tile map's height
=8					TILEMAP_WINDOW_X        = 8             ; Offset to a tile map's X position
=10					TILEMAP_WINDOW_Y        = 10            ; Offset to a tile map's Y position
=1					TILEMAP_VISIBLE         = 1             ; Tile map is visible flag
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=2					TILESET_ADDY_H          = 2             ; Offset to high byte of tile set address
=3					TILESET_ADDY_CFG        = 3             ; Offset to the tile set address configuration
=$08					TILESET_SQUARE_256      = $08
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SDMA_def.s

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_VDMA_def.s

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$10					VDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					VDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SPRITE_def.s

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\C256/vicky_def.s


;******  Return to file: src\C256/mmap_c256.s

=$00					BASIC_BANK = $00            ; Memory bank for default purposes
=$004c00				IOBUF = $004C00             ; A buffer for I/O operations
=$004d00				ARRIDXBUF = $004D00         ; The array index buffer used for array references
=$004e00				TEMPBUF = $004E00           ; Temporary buffer for string processing, etc.
=$004f00				INPUTBUF = $004F00          ; Starting address of the line input buffer (one page)
=$005000				RETURN_BOT = $005000        ; Starting address of the return stack
=$005fff				RETURN_TOP = $005FFF        ; Ending address of the return stack
=$006000				ARGUMENT_BOT = $006000      ; Starting address of the argument stack
=$006fff				ARGUMENT_TOP = $006FFF      ; Ending address of the argument stack
=$007000				OPERATOR_BOT = $007000      ; Starting address of the operator stack
=$007fff				OPERATOR_TOP = $007FFF      ; Ending address of the operator stack
=$b00000				VRAM = $B00000              ; Start of video RAM
=$010000				LOADBLOCK = $010000         ; File loading will start here
=$360000				BASIC_BOT := $360000         ; Starting point for BASIC programs
=$37ffff				HEAP_TOP := $37FFFF          ; Starting point of the heap
=$160000				BASIC_BOT := $160000         ; Starting point for BASIC programs
=$17ffff				HEAP_TOP := $17FFFF          ; Starting point of the heap

;******  Return to file: src\memorymap.s

=$00ffe6				VBRK = $00FFE6          ; Vector for the native-mode BRK vector
=$1ad000				DATA_BLOCK = *
=$000800				GLOBAL_VARS = *
>0800					BIP         .dword ?    ; Pointer to the current byte in the current BASIC program
>0804					BIPPREV     .dword ?    ; Pointer to the previous bytein the current BASIC program
>0808					INDEX       .dword ?    ; A temporary pointer
>080c					SCRATCH     .dword ?    ; A temporary scratch variable
>0810					SCRATCH2    .dword ?    ; A temporary scratch variable
>0814					            .word  ?	; Need a few more bits for BCD conversion
>0816					STRPTR      .dword ?    ; A temporary pointer for strings
>081a					CURLINE     .dword ?    ; Pointer to the current input line needing tokenization
>081e					CURTOKLEN   .byte ?     ; Length of the text of the current token
>081f					ARGUMENTSP  .word ?     ; Pointer to the top of the argument stack
>0821					OPERATORSP  .word ?     ; Pointer to the top of the operator stack
>0823					ARGUMENT1   .dword ?    ; Argument 1 for expression calculations
>0827					ARGTYPE1    .byte ?     ; Type code for argument 1 (integer, float, string)
>0828					SIGN1       .byte ?     ; Temporary sign marker for argument 1
>0829					ARGUMENT2   .dword ?    ; Argument 2 for expression calculations
>082d					ARGTYPE2    .byte ?     ; Type code for argument 2 (integer, float, string)
>082e					SIGN2       .byte ?     ; Temporary sign marker for argument 1
>082f					JMP16PTR    .word ?     ; Pointer for 16-bit indirect jumps (within BASIC816's code base)
>0831					GOSUBDEPTH  .word ?     ; Number of GOSUBs on the stack
>0833					RETURNSP    .word ?     ; Pointer to the top of the return stack
>0835					SKIPNEST    .byte ?     ; Flag to indicate if token seeking should respect nesting (MSB set if so)
>0836					NESTING     .byte ?     ; Counter of the depth of lexical nesting for FOR/NEXT, DO/LOOP
>0837					TARGETTOK   .byte ?     ; When searching for a token, TARGETTOK is the token to find
>0838					DATABIP     .dword ?    ; Pointer to the next data element for READ statements
>083c					DATALINE    .dword ?    ; Pointer to the current line for a DATA statement
>0840					SAVEBIP     .dword ?    ; Spot to save BIP temporarily
>0844					SAVELINE    .dword ?    ; Spot to save CURLINE temporarily
=$000848				MONITOR_VARS = *
>0848					MCMDADDR    .long ?     ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
>084b					MCMP_TEXT   .long ?     ;3 Bytes Address of symbol being evaluated for COMPARE routine
>084e					MCMP_LEN    .word ?     ;2 Bytes Length of symbol being evaluated for COMPARE routine
>0850					MCMD        .long ?     ;3 Bytes Address of the current command/function string
>0853					MCMD_LEN    .word ?     ;2 Bytes Length of the current command/function string
>0855					MARG1       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command
>0859					MARG2       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>085d					MARG3       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0861					MARG4       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0865					MARG5       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0869					MARG6       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>086d					MARG7       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0871					MARG8       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0875					MARG9       .dword ?    ;4 Bytes First command argument.
>0879					MARG_LEN    .byte ?     ;1 Byte count of the number of arguments passed
>087a					MCURSOR     .dword ?    ;4 Bytes Pointer to the current memory location for disassembly, memory dump, etc.
>087e					MLINEBUF    .fill 17    ;17 Byte buffer for dumping memory (TODO: could be moved to a general string scratch area)
>088f					MCOUNT      .long ?     ;2 Byte counter
>0892					MTEMP       .dword ?    ;4 Bytes of temporary space
>0896					MCPUSTAT    .byte ?     ;1 Byte to represent what the disassembler thinks the processor MX bits are
>0897					MADDR_MODE  .byte ?     ;1 Byte address mode found by the assembler
>0898					MPARSEDNUM  .dword ?    ;4 Bytes to store a parsed number
>089c					MMNEMONIC   .word ?     ;2 Byte address of mnemonic found by the assembler
>089e					MTEMPPTR    .dword ?    ;4 Byte temporary pointer
>08a2					MJUMPINST   .byte ?     ;1 Byte JSL opcode
>08a3					MJUMPADDR   .long ?     ;3 Byte address for JSL
=$000823				MANTISSA1 = ARGUMENT1
=$000826				EXPONENT1 = ARGUMENT1+3

;******  Return to file: src\basic816.s


;******  Processing file: src\macros.s


;******  Return to file: src\basic816.s

.1a0000	5c 71 8a 1a	jmp $1a8a71	COLDBOOT        JML START               ; Entry point to boot up BASIC from scratch
.1a0004	5c 83 70 1a	jmp $1a7083	MONITOR         JML IMONITOR            ; Entry point to the machine language monitor
.1a0008	5c 75 27 1a	jmp $1a2775	READLINE        JML IREADLINE           ; Wait for the user to enter a line of text (for programming input)
.1a000c	5c ba 02 1a	jmp $1a02ba	SCRCOPYLINE     JML ISCRCPYLINE         ; Copy the line on the screen the user just input to INPUTBUF
.1a0010	5c 58 00 1a	jmp $1a0058	INPUTLINE       JML IINPUTLINE          ; Read a single line of text from the user, and copy it to TEMPBUF (for INPUT statement)
.1a0014	5c b8 00 1a	jmp $1a00b8	GETKEY          JML IGETKEY             ; Wait for a keypress by the user and return the ASCII code in A
.1a0018	5c 0f 04 1a	jmp $1a040f	PRINTC          JML IPRINTC             ; Print the character in A to the console
.1a001c	5c 5e 02 1a	jmp $1a025e	SHOWCURSOR      JML ISHOWCURSOR         ; Set cursor visibility: A=0, hide... A<>0, show.
.1a0020	5c 79 02 1a	jmp $1a0279	CURSORXY        JML ICURSORXY           ; Set the position of the cursor to (X, Y)
.1a0024	5c 80 02 1a	jmp $1a0280	CLSCREEN        JML ICLSCREEN           ; Clear the screen

;******  Processing file: src\bios.s


;******  Processing file: src\membuffers.s

>08a6					OBUFFER     .long ?     ; Pointer to the current text memory buffer for output
>08a9					OBUFFSIZE   .word ?     ; Maximum size of output text memory buffer
>08ab					OBUFFIDX    .word ?     ; Index into the current output buffer
>08ad					IBUFFER     .long ?     ; Pointer to the current text memory buffer for input
>08b0					IBUFFSIZE   .word ?     ; Number of bytes written to the buffer
>08b2					IBUFFIDX    .word ?     ; Index into the current input buffer (next available character)
.1a0028					OBUFF_PUTC
.1a0028	0b		phd		                PHD
.1a0029	08		php		                PHP
.1a002a	08		php		            PHP
.1a002b	c2 20		rep #$20	            REP #$20
.1a002d	48		pha		            PHA
.1a002e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0031	5b		tcd		            TCD
.1a0032	68		pla		            PLA
.1a0033	28		plp		            PLP
.1a0034	e2 20		sep #$20	            SEP #$20
.1a0036	85 b5		sta $08b5	                STA SAVE_A
.1a0038	c2 20		rep #$20	            REP #$20
.1a003a	a5 a6		lda $08a6	                LDA OBUFFER
.1a003c	d0 06		bne $1a0044	                BNE has_buffer
.1a003e	e2 20		sep #$20	            SEP #$20
.1a0040	a5 a8		lda $08a8	                LDA OBUFFER+2
.1a0042	f0 11		beq $1a0055	                BEQ done
.1a0044					has_buffer
.1a0044	c2 10		rep #$10	            REP #$10
.1a0046	a4 ab		ldy $08ab	                LDY OBUFFIDX        ; Check to make sure there is room
.1a0048	c4 a9		cpy $08a9	                CPY OBUFFSIZE
.1a004a	f0 09		beq $1a0055	                BEQ done            ; If not, exit silently
.1a004c	e2 20		sep #$20	            SEP #$20
.1a004e	a5 b5		lda $08b5	                LDA SAVE_A
.1a0050	97 a6		sta [$08a6],y	                STA [OBUFFER],Y     ; Write the character to the buffer
.1a0052	c8		iny		                INY                 ; Increment the index
.1a0053	84 ab		sty $08ab	                STY OBUFFIDX
.1a0055	28		plp		done            PLP
.1a0056	2b		pld		                PLD
.1a0057	60		rts		            RTS

;******  Return to file: src\bios.s


;******  Processing file: src\C256/io_c256.s


;******  Processing file: src\C256/kernel_c256.s

=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001080				FK_PRINTAH          = $001080 ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=$00113c				FK_TESTBREAK        = $00113C ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
=$001028				FK_GETSCANCODE      = $001028 ; Get the next scancode from the keyboard (A = scancode, 0 if none available)
=$001144				FK_READVRAM         = $001144 ; Read a byte from video RAM at B:X
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/RTC_inc.s

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/keyboard.s


;******  Processing file: src\C256/keyboard_def.s

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04
=2					ANSI_IN_INS = 2     ; ANSI input code for INSERT
=3					ANSI_IN_DEL = 3     ; ANSI input code for DELETE
=24					ANSI_IN_F12 = 24    ; ANSI input code for F12
=8					ANSI_IN_CTRL = 8    ; ANSI input modifier flag for CTRL

;******  Return to file: src\C256/keyboard.s

.1a0058					IINPUTLINE
.1a0058	08		php		                PHP
.1a0059	c2 10		rep #$10	            REP #$10
.1a005b	e2 20		sep #$20	            SEP #$20
.1a005d	a9 01		lda #$01	                LDA #1              ; Show the cursor
.1a005f	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a0062	a2 00 00	ldx #$0000	                LDX #0
.1a0065	a9 00		lda #$00	                LDA #0
.1a0067	9f 00 4c 00	sta $004c00,x	zero_loop       STA @lIOBUF,X
.1a006b	e8		inx		                INX
.1a006c	e0 00 01	cpx #$0100	                CPX #$100
.1a006f	d0 f6		bne $1a0067	                BNE zero_loop
.1a0071	a2 00 00	ldx #$0000	                LDX #0
.1a0074					getchar
.1a0074	20 14 00	jsr $1a0014	            JSR GETKEY
.1a0077	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; Got a CR?
.1a0079	d0 03		bne $1a007e	                BNE not_cr
.1a007b	4c b1 00	jmp $1a00b1	                JMP endofline       ; Yes: we're done
.1a007e					not_cr
.1a007e	c9 08		cmp #$08	not_right       CMP #CHAR_BS        ; Is it a backspace?
.1a0080	d0 1a		bne $1a009c	                BNE not_bs
.1a0082	e0 00 00	cpx #$0000	                CPX #0              ; Are we at the beginning of the line?
.1a0085	f0 ed		beq $1a0074	                BEQ getchar         ; yes: ignore the backspace
.1a0087	da		phx		                PHX                 ; Save the cursor position
.1a0088	bf 01 4c 00	lda $004c01,x	clr_loop        LDA @lIOBUF+1,X     ; Get the character above
.1a008c	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the current position
.1a0090	f0 06		beq $1a0098	                BEQ done_clr        ; If we copied a NUL, we're done copying
.1a0092	e8		inx		                INX                 ; Otherwise, keep copying down
.1a0093	e0 ff 00	cpx #$00ff	                CPX #$FF            ; Until we're at the end of the buffer
.1a0096	d0 f0		bne $1a0088	                BNE clr_loop
.1a0098	fa		plx		done_clr        PLX                 ; Restore the cursor position
.1a0099	ca		dex		                DEX                 ; No: move the cursor left
.1a009a	80 0e		bra $1a00aa	                BRA print_bs        ; And print the backspace
.1a009c	c9 20		cmp #$20	not_bs          CMP #$20            ; Is it in range 00 -- 1F?
.1a009e	90 d4		bcc $1a0074	                BLT getchar         ; Yes: ignore it
.1a00a0	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the input buffer
.1a00a4	e8		inx		                INX                 ; Move the cursor forward
.1a00a5					echo
.1a00a5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00a8	80 ca		bra $1a0074	                BRA getchar         ; And get another...
.1a00aa	a9 08		lda #$08	print_bs        LDA #CHAR_BS        ; Backspace character...
.1a00ac	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00af	80 c3		bra $1a0074	                BRA getchar         ; And get another...
.1a00b1	a9 00		lda #$00	endofline       LDA #0              ; Hide the cursor
.1a00b3	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a00b6	28		plp		                PLP
.1a00b7	60		rts		            RTS
.1a00b8					IGETKEY
.1a00b8	da		phx		                PHX
.1a00b9	5a		phy		                PHY
.1a00ba	8b		phb		                PHB
.1a00bb	0b		phd		                PHD
.1a00bc	08		php		                PHP
.1a00bd	22 4c 10 00	jsl $00104c	                JSL FK_GETCHW
.1a00c1	28		plp		                PLP
.1a00c2	2b		pld		                PLD
.1a00c3	ab		plb		                PLB
.1a00c4	7a		ply		                PLY
.1a00c5	fa		plx		                PLX
.1a00c6	60		rts		            RTS
=0					GK_ST_INIT = 0      ; GETKEYE state: initial
=1					GK_ST_ESC = 1       ; GETKEYE state: ESC seen
=2					GK_ST_CSI = 2       ; GETKEYE state: CSI "ESC[" seen
=3					GK_ST_CODE = 3      ; GETKEYE state: We're at the command code in the sequence
=4					GK_ST_MODS = 4      ; GETKEYE state: We're at the modifier code in the sequence
.1a00c7					SEND_ANSI
.1a00c7	08		php		                PHP
.1a00c8	e2 30		sep #$30	            SEP #$30
.1a00ca	48		pha		                PHA
.1a00cb	a9 1b		lda #$1b	                LDA #CHAR_ESC           ; Print ESC
.1a00cd	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00d0	a9 5b		lda #$5b	                LDA #'['                ; Print [
.1a00d2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00d5	68		pla		                PLA                     ; Print the command code
.1a00d6	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00d9	28		plp		                PLP
.1a00da	60		rts		            RTS
.1a00db					GETKEYE
.1a00db	0b		phd		                PHD
.1a00dc	8b		phb		                PHB
.1a00dd	08		php		                PHP
.1a00de	08		php		            PHP
.1a00df	e2 20		sep #$20	            SEP #$20
.1a00e1	48		pha		            PHA
.1a00e2	a9 00		lda #$00	            LDA #0
.1a00e4	48		pha		            PHA
.1a00e5	ab		plb		            PLB
.1a00e6	68		pla		            PLA
.1a00e7	28		plp		            PLP
.1a00e8	08		php		            PHP
.1a00e9	c2 20		rep #$20	            REP #$20
.1a00eb	48		pha		            PHA
.1a00ec	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a00ef	5b		tcd		            TCD
.1a00f0	68		pla		            PLA
.1a00f1	28		plp		            PLP
.1a00f2					locals
>0001					l_character     .byte ?                 ; The character returned by the input stream
>0002					l_state         .byte ?                 ; Current state of the input parser
>0003					l_code          .byte ?                 ; Code number for any escaped input sequence
>0004					l_modifiers     .byte ?                 ; Modifier bit field for any escaped input sequence
.1a00f2	c2 20		rep #$20	            REP #$20
.1a00f4	3b		tsc		            TSC
.1a00f5	38		sec		            SEC
.1a00f6	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a00f9	1b		tcs		            TCS
.1a00fa	e2 20		sep #$20	            SEP #$20
.1a00fc	a9 00		lda #$00	get_reset       LDA #0                  ; Initialize state, code, and modifiers
.1a00fe	83 02		sta $02,s	                STA l_state
.1a0100	83 03		sta $03,s	                STA l_code
.1a0102	83 04		sta $04,s	                STA l_modifiers
.1a0104					loop
.1a0104	20 14 00	jsr $1a0014	            JSR GETKEY
.1a0107	c9 00		cmp #$00	                CMP #0                  ; Is it 0?
.1a0109	f0 f9		beq $1a0104	                BEQ loop                ; Yes: keep waiting
.1a010b	83 01		sta $01,s	                STA l_character         ; Save the character
.1a010d	a3 02		lda $02,s	                LDA l_state             ; What is the current state?
.1a010f	d0 35		bne $1a0146	                BNE chk_st_esc
.1a0111	a3 01		lda $01,s	                LDA l_character         ; Get the character back
.1a0113	c9 08		cmp #$08	                CMP #CHAR_BS            ; Is it a backspace?
.1a0115	d0 0a		bne $1a0121	                BNE not_bs
.1a0117	20 18 00	jsr $1a0018	            JSR PRINTC
.1a011a	a9 50		lda #$50	                LDA #'P'
.1a011c	20 c7 00	jsr $1a00c7	            JSR SEND_ANSI
.1a011f	80 e3		bra $1a0104	                BRA loop                ; And keep waiting for a keypress
.1a0121	c9 0d		cmp #$0d	not_bs          CMP #CHAR_CR            ; Is it a carriage return?
.1a0123	f0 0a		beq $1a012f	                BEQ send                ; Yes: print and return it
.1a0125	c9 1b		cmp #$1b	                CMP #CHAR_ESC           ; Is it ESC?
.1a0127	d0 06		bne $1a012f	                BNE send                ; No: just print it out
.1a0129	a9 01		lda #$01	                LDA #GK_ST_ESC          ; Yes: move to the ESC state
.1a012b	83 02		sta $02,s	                STA l_state
.1a012d	80 d5		bra $1a0104	                BRA loop                ; And get the next character in the sequence
.1a012f					send
.1a012f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0132	a3 01		lda $01,s	done            LDA l_character         ; Save the character so we can return it
.1a0134	85 0c		sta $080c	                STA SCRATCH
.1a0136	c2 20		rep #$20	            REP #$20
.1a0138	3b		tsc		            TSC
.1a0139	18		clc		            CLC
.1a013a	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a013d	1b		tcs		            TCS
.1a013e	e2 20		sep #$20	            SEP #$20
.1a0140	a5 0c		lda $080c	                LDA SCRATCH             ; Restore the character we're returning
.1a0142	28		plp		                PLP
.1a0143	2b		pld		                PLD
.1a0144	ab		plb		                PLB
.1a0145	60		rts		            RTS
.1a0146	c9 01		cmp #$01	chk_st_esc      CMP #GK_ST_ESC          ; Are we in the ESC state?
.1a0148	d0 10		bne $1a015a	                BNE chk_st_csi          ; No: check to see if we're in CSI state
.1a014a	a3 01		lda $01,s	                LDA l_character         ; Get the character
.1a014c	c9 5b		cmp #$5b	                CMP #'['                ; Is it "["?
.1a014e	f0 03		beq $1a0153	                BEQ go_st_csi           ; Yes: go to the CSI state
.1a0150	82 a9 ff	brl $1a00fc	                BRL get_reset           ; Reset the state machine and keep reading characters
.1a0153	a9 02		lda #$02	go_st_csi       LDA #GK_ST_CSI          ; Yes: move to the CSI state
.1a0155	83 02		sta $02,s	                STA l_state
.1a0157	82 aa ff	brl $1a0104	                BRL loop
.1a015a	c9 02		cmp #$02	chk_st_csi      CMP #GK_ST_CSI          ; Are we in the CSI state?
.1a015c	d0 29		bne $1a0187	                BNE chk_st_code         ; No: check to see if we're in the code state
.1a015e	a3 01		lda $01,s	                LDA l_character         ; Check the character
.1a0160	c9 41		cmp #$41	                CMP #'A'                ; Is it in 'A'..'D'?
.1a0162	90 0c		bcc $1a0170	                BLT not_letter
.1a0164	c9 45		cmp #$45	                CMP #'D'+1
.1a0166	b0 08		bcs $1a0170	                BGE not_letter
.1a0168	a3 01		lda $01,s	                LDA l_character         ; Yes: it's a cursor key, send the sequence to the screen
.1a016a	20 c7 00	jsr $1a00c7	            JSR SEND_ANSI
.1a016d	82 8c ff	brl $1a00fc	                BRL get_reset           ; Reset the state machine and keep reading characters
.1a0170	c9 30		cmp #$30	not_letter      CMP #'0'                ; Is it in range '0'..'9'?
.1a0172	90 10		bcc $1a0184	                BLT not_csi_digit
.1a0174	c9 3a		cmp #$3a	                CMP #'9'+1
.1a0176	b0 0c		bcs $1a0184	                BGE not_csi_digit       ; No: handle it being invalid
.1a0178	38		sec		                SEC                     ; Yes: convert to a value
.1a0179	e9 30		sbc #$30	                SBC #'0'
.1a017b	83 03		sta $03,s	                STA l_code              ; And save it to the code variable
.1a017d	a9 03		lda #$03	                LDA #GK_ST_CODE         ; Move to the CODE state
.1a017f	83 02		sta $02,s	                STA l_state
.1a0181	82 80 ff	brl $1a0104	                BRL loop
.1a0184	82 75 ff	brl $1a00fc	not_csi_digit   BRL get_reset           ; Bad sequence: reset and keep reading characters
.1a0187	c9 03		cmp #$03	chk_st_code     CMP #GK_ST_CODE         ; Is it the CODE state?
.1a0189	d0 41		bne $1a01cc	                BNE chk_st_mods         ; No: check to see if it's MODIFIERS
.1a018b	a3 01		lda $01,s	                LDA l_character         ; Check the character
.1a018d	c9 30		cmp #$30	                CMP #'0'                ; Is it in the range '0'..'9'
.1a018f	90 29		bcc $1a01ba	                BLT not_digits_2
.1a0191	c9 3a		cmp #$3a	                CMP #'9'+1
.1a0193	b0 25		bcs $1a01ba	                BGE not_digits_2
.1a0195	a3 03		lda $03,s	                LDA l_code              ; Multiply l_code by 2
.1a0197	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.1a019b	a9 00		lda #$00	                LDA #0
.1a019d	8f 01 01 00	sta $000101	                STA @l UNSIGNED_MULT_A_HI
.1a01a1	8f 03 01 00	sta $000103	                STA @l UNSIGNED_MULT_B_HI
.1a01a5	a9 0a		lda #$0a	                LDA #10
.1a01a7	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.1a01ab	a3 01		lda $01,s	                LDA l_character         ; Convert the digit to a number
.1a01ad	38		sec		                SEC
.1a01ae	e9 30		sbc #$30	                SBC #'0'
.1a01b0	18		clc		                CLC                     ; And add to l_code
.1a01b1	6f 04 01 00	adc $000104	                ADC @l UNSIGNED_MULT_AL_LO
.1a01b5	83 03		sta $03,s	                STA l_code
.1a01b7	82 4a ff	brl $1a0104	                BRL loop                ; And keep processing the sequence
.1a01ba	c9 3b		cmp #$3b	not_digits_2    CMP #';'                ; Is it the semicolon?
.1a01bc	d0 07		bne $1a01c5	                BNE not_semi
.1a01be	a9 04		lda #$04	                LDA #GK_ST_MODS         ; Yes: Move to the MODIFIERS state
.1a01c0	83 02		sta $02,s	                STA l_state
.1a01c2	82 3f ff	brl $1a0104	                BRL loop
.1a01c5	c9 7e		cmp #$7e	not_semi        CMP #'~'                ; No: Is it the tilda?
.1a01c7	f0 40		beq $1a0209	                BEQ end_sequence        ; Yes: we've gotten the end of the sequence
.1a01c9	82 30 ff	brl $1a00fc	                BRL get_reset           ; No: we've got a bad sequence... for now just reset and keep looping
.1a01cc	c9 04		cmp #$04	chk_st_mods     CMP #GK_ST_MODS         ; Are we in the MODIFIERS state?
.1a01ce	f0 03		beq $1a01d3	                BEQ do_mods
.1a01d0	82 5f ff	brl $1a0132	                BRL done                ; No: we're done
.1a01d3	a3 01		lda $01,s	do_mods         LDA l_character         ; Check the character
.1a01d5	c9 30		cmp #$30	                CMP #'0'                ; Is it in the range '0'..'9'
.1a01d7	90 29		bcc $1a0202	                BLT not_digits_3
.1a01d9	c9 3a		cmp #$3a	                CMP #'9'+1
.1a01db	b0 25		bcs $1a0202	                BGE not_digits_3
.1a01dd	a3 04		lda $04,s	                LDA l_modifiers         ; Multiply l_modifiers by 2
.1a01df	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.1a01e3	a9 00		lda #$00	                LDA #0
.1a01e5	8f 01 01 00	sta $000101	                STA @l UNSIGNED_MULT_A_HI
.1a01e9	8f 03 01 00	sta $000103	                STA @l UNSIGNED_MULT_B_HI
.1a01ed	a9 0a		lda #$0a	                LDA #10
.1a01ef	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.1a01f3	a3 01		lda $01,s	                LDA l_character         ; Convert the digit to a number
.1a01f5	38		sec		                SEC
.1a01f6	e9 30		sbc #$30	                SBC #'0'
.1a01f8	18		clc		                CLC                     ; And add to l_modifiers
.1a01f9	6f 04 01 00	adc $000104	                ADC @l UNSIGNED_MULT_AL_LO
.1a01fd	83 04		sta $04,s	                STA l_modifiers
.1a01ff	82 02 ff	brl $1a0104	                BRL loop                ; And keep processing the sequence
.1a0202	c9 7e		cmp #$7e	not_digits_3    CMP #'~'                ; No: Is it the tilda?
.1a0204	f0 03		beq $1a0209	                BEQ end_sequence        ; Yes: we've gotten the end of the sequence
.1a0206	82 f3 fe	brl $1a00fc	                BRL get_reset           ; No: we've got a bad sequence... for now just reset and keep looping
.1a0209	a3 03		lda $03,s	end_sequence    LDA l_code              ; Get the code
.1a020b	c9 02		cmp #$02	                CMP #ANSI_IN_INS        ; Is it INSERT?
.1a020d	f0 0b		beq $1a021a	                BEQ do_ins              ; Yes: process the insert
.1a020f	c9 03		cmp #$03	                CMP #ANSI_IN_DEL        ; Is it DELETE?
.1a0211	f0 0b		beq $1a021e	                BEQ do_del              ; Yes: process the delete
.1a0213	c9 18		cmp #$18	                CMP #ANSI_IN_F12        ; Is it F12?
.1a0215	f0 0f		beq $1a0226	                BEQ do_f12              ; Yes: process the F12 key
.1a0217	82 e2 fe	brl $1a00fc	                BRL get_reset           ; Code is not one we handle, just return
.1a021a	a9 40		lda #$40	do_ins          LDA #'@'                ; Send the ANSI ICH command
.1a021c	80 02		bra $1a0220	                BRA snd_ansi
.1a021e	a9 50		lda #$50	do_del          LDA #'P'                ; Send the ANSI DCH command
.1a0220					snd_ansi
.1a0220	20 c7 00	jsr $1a00c7	            JSR SEND_ANSI
.1a0223	82 d6 fe	brl $1a00fc	                BRL get_reset           ; Reset and keep getting characters
.1a0226	a5 d2		lda $08d2	do_f12          LDA STATE               ; Check the state
.1a0228	d0 10		bne $1a023a	                BNE skip_f12            ; If we're running, ignore the F12
.1a022a	a3 04		lda $04,s	                LDA l_modifiers         ; Check to make sure it's CTRL-F12
.1a022c	c9 08		cmp #$08	                CMP #ANSI_IN_CTRL       ; Modifier flag for CTRL
.1a022e	d0 0a		bne $1a023a	                BNE skip_f12
.1a0230	a9 1b		lda #$1b	                LDA #CHAR_ESC           ; Send ESC_ (APC) to show the credits
.1a0232	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0235	a9 5f		lda #$5f	                LDA #'_'
.1a0237	20 18 00	jsr $1a0018	            JSR PRINTC
.1a023a	82 bf fe	brl $1a00fc	skip_f12        BRL get_reset           ; And reset the state machine

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/screen.s

.1a023d					ENSURETEXT
.1a023d	08		php		            PHP
.1a023e	e2 20		sep #$20	            SEP #$20
.1a0240	af 00 00 af	lda $af0000	            LDA @l MASTER_CTRL_REG_L            ; Get the current display mode
.1a0244	89 3c		bit #$3c	            BIT #Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_TileMap_En | Mstr_Ctrl_Sprite_En
.1a0246	f0 08		beq $1a0250	            BEQ textonly                        ; If not, make sure text is enabled
.1a0248					overlay
.1a0248	09 03		ora #$03	            ORA #Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay
.1a024a	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.1a024e	80 0c		bra $1a025c	            BRA done
.1a0250					textonly
.1a0250	09 01		ora #$01	            ORA #Mstr_Ctrl_Text_Mode_En
.1a0252	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.1a0256	a9 00		lda #$00	            LDA #CHAN_CONSOLE                   ; Make sure we're writing to the main screen
.1a0258	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a025c	28		plp		done        PLP
.1a025d	60		rts		            RTS
.1a025e					ISHOWCURSOR
.1a025e	08		php		            PHP
.1a025f	e2 20		sep #$20	            SEP #$20
.1a0261	c9 00		cmp #$00	            CMP #0
.1a0263	f0 08		beq $1a026d	            BEQ hide
.1a0265	af 10 00 af	lda $af0010	show        LDA @lVKY_TXT_CURSOR_CTRL_REG
.1a0269	09 01		ora #$01	            ORA #Vky_Cursor_Enable
.1a026b	80 06		bra $1a0273	            BRA setit
.1a026d	af 10 00 af	lda $af0010	hide        LDA @lVKY_TXT_CURSOR_CTRL_REG
.1a0271	29 fe		and #$fe	            AND #~Vky_Cursor_Enable
.1a0273	8f 10 00 af	sta $af0010	setit       STA @lVKY_TXT_CURSOR_CTRL_REG
.1a0277	28		plp		            PLP
.1a0278	60		rts		            RTS
.1a0279					ICURSORXY
.1a0279	08		php		            PHP
.1a027a	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.1a027e	28		plp		            PLP
.1a027f	60		rts		            RTS
.1a0280					ICLSCREEN
.1a0280	48		pha		            PHA
.1a0281	da		phx		            PHX
.1a0282	5a		phy		            PHY
.1a0283	0b		phd		            PHD
.1a0284	08		php		            PHP
.1a0285	e2 20		sep #$20	            SEP #$20
.1a0287	c2 10		rep #$10	            REP #$10
.1a0289	a2 00 00	ldx #$0000	            LDX #0
.1a028c	a9 20		lda #$20	loop        LDA #$20
.1a028e	9f 00 a0 af	sta $afa000,x	            STA @lCS_TEXT_MEM_PTR,X     ; Write a space in the text cell
.1a0292	af 1e 00 00	lda $00001e	            LDA @lCURCOLOR
.1a0296	9f 00 c0 af	sta $afc000,x	            STA @lCS_COLOR_MEM_PTR,X    ; Set the color to green on black
.1a029a	e8		inx		            INX                         ; Move to the next character cell
.1a029b	e0 00 20	cpx #$2000	            CPX #$2000
.1a029e	d0 ec		bne $1a028c	            BNE loop
.1a02a0	08		php		            PHP
.1a02a1	c2 20		rep #$20	            REP #$20
.1a02a3	48		pha		            PHA
.1a02a4	a9 00 00	lda #$0000	            LDA #0
.1a02a7	5b		tcd		            TCD
.1a02a8	68		pla		            PLA
.1a02a9	28		plp		            PLP
.1a02aa	a2 00 00	ldx #$0000	            LDX #0                      ; Set cursor to upper-left corner
.1a02ad	a0 00 00	ldy #$0000	            LDY #0
.1a02b0	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.1a02b4	28		plp		            PLP
.1a02b5	2b		pld		            PLD
.1a02b6	7a		ply		            PLY
.1a02b7	fa		plx		            PLX
.1a02b8	68		pla		            PLA
.1a02b9	60		rts		            RTS
.1a02ba					ISCRCPYLINE
.1a02ba	da		phx		            PHX
.1a02bb	5a		phy		            PHY
.1a02bc	0b		phd		            PHD
.1a02bd	08		php		            PHP
.1a02be	08		php		            PHP
.1a02bf	c2 20		rep #$20	            REP #$20
.1a02c1	48		pha		            PHA
.1a02c2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a02c5	5b		tcd		            TCD
.1a02c6	68		pla		            PLA
.1a02c7	28		plp		            PLP
.1a02c8	c2 30		rep #$30	            REP #$30
.1a02ca	af 0c 00 00	lda $00000c	            LDA @l SCREENBEGIN      ; Set INDEX to the first byte of the text screen
.1a02ce	85 08		sta $0808	            STA INDEX
.1a02d0	e2 20		sep #$20	            SEP #$20
.1a02d2	af 0e 00 00	lda $00000e	            LDA @l SCREENBEGIN+2
.1a02d6	c2 20		rep #$20	            REP #$20
.1a02d8	29 ff 00	and #$00ff	            AND #$00FF
.1a02db	85 0a		sta $080a	            STA INDEX+2
.1a02dd	af 11 00 00	lda $000011	            LDA @l COLS_PER_LINE    ; Calculate the offset to the current line
.1a02e1	8f 08 01 00	sta $000108	            STA @l M1_OPERAND_A
.1a02e5	af 1c 00 00	lda $00001c	            LDA @l CURSORY
.1a02e9	3a		dec a		            DEC A
.1a02ea	8f 0a 01 00	sta $00010a	            STA @l M1_OPERAND_B
.1a02ee	18		clc		            CLC                     ; And add it to INDEX
.1a02ef	a5 08		lda $0808	            LDA INDEX
.1a02f1	6f 0c 01 00	adc $00010c	            ADC @l M1_RESULT
.1a02f5	85 08		sta $0808	            STA INDEX
.1a02f7	a5 0a		lda $080a	            LDA INDEX+2
.1a02f9	69 00 00	adc #$0000	            ADC #0
.1a02fc	85 0a		sta $080a	            STA INDEX+2
.1a02fe	e2 20		sep #$20	            SEP #$20
.1a0300	af 0f 00 00	lda $00000f	            LDA @l COLS_VISIBLE
.1a0304	85 8f		sta $088f	            STA MCOUNT
.1a0306	a0 00 00	ldy #$0000	            LDY #0
.1a0309	a2 00 00	ldx #$0000	            LDX #0
.1a030c	b7 08		lda [$0808],y	copy_loop   LDA [INDEX],Y           ; Copy a byte from the screen to the input buffer
.1a030e	9f 00 4f 00	sta $004f00,x	            STA @l INPUTBUF,X
.1a0312	e8		inx		            INX
.1a0313	c8		iny		            INY
.1a0314	c4 8f		cpy $088f	            CPY MCOUNT
.1a0316	d0 f4		bne $1a030c	            BNE copy_loop
.1a0318	af 0f 00 00	lda $00000f	            LDA @l COLS_VISIBLE     ; Starting from the end of the line...
.1a031c	3a		dec a		            DEC A
.1a031d	aa		tax		            TAX
.1a031e	bf 00 4f 00	lda $004f00,x	trim_loop   LDA @l INPUTBUF,X       ; Replace spaces at the end with NULLs
.1a0322	c9 20		cmp #$20	            CMP #CHAR_SP
.1a0324	d0 09		bne $1a032f	            BNE done
.1a0326	a9 00		lda #$00	            LDA #0
.1a0328	9f 00 4f 00	sta $004f00,x	            STA @l INPUTBUF,X
.1a032c	ca		dex		            DEX
.1a032d	10 ef		bpl $1a031e	            BPL trim_loop
.1a032f	28		plp		done        PLP
.1a0330	2b		pld		            PLD
.1a0331	7a		ply		            PLY
.1a0332	fa		plx		            PLX
.1a0333	60		rts		            RTS

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/gabe_defs.s

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04					GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08					GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01					GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02					GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10					GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20					GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40					GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80					GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04					GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10					GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a				GABE_SUBVERSION_LO  = $AFE88A
=$afe88b				GABE_SUBVERSION_HI  = $AFE88B
=$afe88c				GABE_VERSION_LO     = $AFE88C
=$afe88d				GABE_VERSION_HI     = $AFE88D
=$afe88e				GABE_MODEL_LO       = $AFE88E
=$afe88f				GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\C256/io_c256.s

=32					BORDER_WIDTH = 32               ; The width of the border (when it is on)
=72					TEXT_COLS_WB = 72               ; Number of columns of text with the border enabled
=52					TEXT_ROWS_WB = 52               ; Number of rows of text with the border enabled
=80					TEXT_COLS_WOB = 80              ; Number of columns of text with no border enabled
=60					TEXT_ROWS_WOB = 60              ; Number of rows of text with no border enabled
.1a0334					INITIO
.1a0334	e2 20		sep #$20	            SEP #$20
.1a0336	20 69 03	jsr $1a0369	            JSR INITRNG
.1a0339	a2 00 00	ldx #$0000	            LDX #0              ; Clear all the sprite control shadow registers
.1a033c	a9 00		lda #$00	            LDA #0
.1a033e	9f 18 f0 1a	sta $1af018,x	sp_loop     STA GS_SP_CONTROL,X
.1a0342	e8		inx		            INX
.1a0343	e0 40 00	cpx #$0040	            CPX #SP_MAX
.1a0346	d0 f6		bne $1a033e	            BNE sp_loop
.1a0348	a9 80		lda #$80	            LDA #DEV_SCREEN
.1a034a	8f b4 08 00	sta $0008b4	            STA @lBCONSOLE
.1a034e	e2 20		sep #$20	            SEP #$20
.1a0350	a9 00		lda #$00	            LDA #0                  ; Clear the lock key flags
.1a0352	8f 89 0f 00	sta $000f89	            STA @lKEYBOARD_LOCKS
.1a0356	a9 00		lda #$00	            LDA #0
.1a0358	8f 00 02 af	sta $af0200	            STA @l TL0_CONTROL_REG
.1a035c	8f 0c 02 af	sta $af020c	            STA @l TL1_CONTROL_REG
.1a0360	8f 18 02 af	sta $af0218	            STA @l TL2_CONTROL_REG
.1a0364	8f 24 02 af	sta $af0224	            STA @l TL3_CONTROL_REG
.1a0368					done
.1a0368	60		rts		            RTS
.1a0369					INITRNG
.1a0369	08		php		            PHP
.1a036a	e2 20		sep #$20	            SEP #$20
.1a036c	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Pause updates to the clock registers
.1a0370	09 08		ora #$08	            ORA #%00001000
.1a0372	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.1a0376	af 00 08 af	lda $af0800	            LDA @l RTC_SEC          ; Set the random number generator seed
.1a037a	8f 84 e8 af	sta $afe884	            STA @l GABE_RNG_SEED_LO
.1a037e	af 02 08 af	lda $af0802	            LDA @l RTC_MIN
.1a0382	8f 85 e8 af	sta $afe885	            STA @l GABE_RNG_SEED_HI
.1a0386	a9 03		lda #$03	            LDA #GABE_RNG_CTRL_DV | GABE_RNG_CTRL_EN
.1a0388	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL    ; Load the seed into the RNG
.1a038c	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Re-enable updates to the clock registers
.1a0390	29 f7		and #$f7	            AND #%11110111
.1a0392	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.1a0396	ea		nop		            NOP                     ; Give the RNG some time... not sure if needed, really
.1a0397	ea		nop		            NOP
.1a0398	ea		nop		            NOP
.1a0399	a9 01		lda #$01	            LDA #GABE_RNG_CTRL_EN   ; Turn on the random number genertator
.1a039b	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL
.1a039f	28		plp		            PLP
.1a03a0	60		rts		            RTS
.1a03a1					SCREEN_PUTC
.1a03a1	08		php		            PHP
.1a03a2	e2 20		sep #$20	            SEP #$20
.1a03a4	48		pha		            PHA
.1a03a5	48		pha		            PHA
.1a03a6	a9 00		lda #$00	            LDA #CHAN_CONSOLE       ; Switch to the console device
.1a03a8	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a03ac	68		pla		            PLA
.1a03ad	22 18 10 00	jsl $001018	            JSL FK_PUTC
.1a03b1	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.1a03b5	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.1a03b7	d0 f8		bne $1a03b1	            BNE loop                ; Yes: wait until it's released
.1a03b9	68		pla		            PLA
.1a03ba	28		plp		            PLP
.1a03bb	60		rts		            RTS
.1a03bc					UART_PUTC
.1a03bc	08		php		            PHP
.1a03bd	e2 20		sep #$20	            SEP #$20
.1a03bf	48		pha		            PHA
.1a03c0	48		pha		            PHA
.1a03c1	a9 01		lda #$01	            LDA #CHAN_COM1          ; Switch to COM1
.1a03c3	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a03c7	68		pla		            PLA
.1a03c8	22 18 10 00	jsl $001018	            JSL FK_PUTC
.1a03cc	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.1a03d0	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.1a03d2	d0 f8		bne $1a03cc	            BNE loop                ; Yes: wait until it's released
.1a03d4	68		pla		            PLA
.1a03d5	28		plp		            PLP
.1a03d6	60		rts		            RTS
.1a03d7					PRINTCR
.1a03d7	08		php		            PHP
.1a03d8	c2 20		rep #$20	            REP #$20
.1a03da	48		pha		            PHA
.1a03db	e2 20		sep #$20	            SEP #$20
.1a03dd	a9 0d		lda #$0d	            LDA #CHAR_CR
.1a03df	20 18 00	jsr $1a0018	            JSR PRINTC
.1a03e2	c2 20		rep #$20	            REP #$20
.1a03e4	68		pla		            PLA
.1a03e5	28		plp		            PLP
.1a03e6	60		rts		            RTS
.1a03e7					PRINTH
.1a03e7	08		php		            PHP
.1a03e8	22 78 10 00	jsl $001078	            JSL FK_IPRINTH
.1a03ec	28		plp		            PLP
.1a03ed	60		rts		            RTS

;******  Return to file: src\bios.s

=10					LINES_PER_PAGE = 10     ; The number of lines to print on a page before pausing
=$80					DEV_SCREEN = $80        ; Use the screen and keyboard for the console device
=$40					DEV_UART = $40          ; Use UART for console device
=$20					DEV_BUFFER = $20        ; Use the current text memory buffer for output or input
>08b4					BCONSOLE    .byte ?     ; Device for BASIC console
>08b5					SAVE_A      .byte ?     ; Save spot for the A register
>08b6					LINECOUNT   .byte ?     ; Counter for new lines to support pagination
.1a03ee					PAGINATE
.1a03ee	08		php		            PHP
.1a03ef	0b		phd		            PHD
.1a03f0	08		php		            PHP
.1a03f1	c2 20		rep #$20	            REP #$20
.1a03f3	48		pha		            PHA
.1a03f4	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a03f7	5b		tcd		            TCD
.1a03f8	68		pla		            PLA
.1a03f9	28		plp		            PLP
.1a03fa	e2 20		sep #$20	            SEP #$20
.1a03fc	a5 b6		lda $08b6	            LDA LINECOUNT           ; Check the line count
.1a03fe	1a		inc a		            INC A
.1a03ff	85 b6		sta $08b6	            STA LINECOUNT
.1a0401	cf 13 00 00	cmp $000013	            CMP @l LINES_VISIBLE
.1a0405	90 05		bcc $1a040c	            BLT done                ; If < limit, just return
.1a0407	20 14 00	jsr $1a0014	            JSR GETKEY
.1a040a	64 b6		stz $08b6	            STZ LINECOUNT           ; And reset the line count
.1a040c	2b		pld		done        PLD
.1a040d	28		plp		            PLP
.1a040e	60		rts		            RTS
.1a040f					IPRINTC
.1a040f	da		phx		            PHX
.1a0410	5a		phy		            PHY
.1a0411	0b		phd		            PHD
.1a0412	08		php		            PHP
.1a0413	08		php		            PHP
.1a0414	c2 20		rep #$20	            REP #$20
.1a0416	48		pha		            PHA
.1a0417	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a041a	5b		tcd		            TCD
.1a041b	68		pla		            PLA
.1a041c	28		plp		            PLP
.1a041d	e2 20		sep #$20	            SEP #$20
.1a041f	c2 10		rep #$10	            REP #$10
.1a0421	8f b5 08 00	sta $0008b5	            STA @lSAVE_A
.1a0425	af b4 08 00	lda $0008b4	chk_out     LDA @lBCONSOLE      ; Check to see if we should send to an output buffer
.1a0429	29 20		and #$20	            AND #DEV_BUFFER
.1a042b	f0 07		beq $1a0434	            BEQ check_scrn      ; No... move on to the hardware screen
.1a042d	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a0431	20 28 00	jsr $1a0028	            JSR OBUFF_PUTC
.1a0434	af b4 08 00	lda $0008b4	check_scrn  LDA @lBCONSOLE
.1a0438	29 80		and #$80	            AND #DEV_SCREEN     ; Check to see if the screen is selected
.1a043a	f0 07		beq $1a0443	            BEQ send_uart
.1a043c	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a0440	20 a1 03	jsr $1a03a1	            JSR SCREEN_PUTC
.1a0443	af b4 08 00	lda $0008b4	send_uart   LDA @lBCONSOLE
.1a0447	29 40		and #$40	            AND #DEV_UART       ; Check to see if the UART is active
.1a0449	f0 14		beq $1a045f	            BEQ done
.1a044b	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a044f	20 bc 03	jsr $1a03bc	            JSR UART_PUTC
.1a0452	af b5 08 00	lda $0008b5	            LDA @lSAVE_A        ; If sending a CR to the serial port
.1a0456	c9 0d		cmp #$0d	            CMP #CHAR_CR
.1a0458	d0 05		bne $1a045f	            BNE done
.1a045a	a9 0a		lda #$0a	            LDA #CHAR_LF        ; Send a linefeed after
.1a045c	20 bc 03	jsr $1a03bc	            JSR UART_PUTC
.1a045f	28		plp		done        PLP
.1a0460	2b		pld		            PLD
.1a0461	7a		ply		            PLY
.1a0462	fa		plx		            PLX
.1a0463	60		rts		            RTS
.1a0464					PRINTS
.1a0464	08		php		            PHP
.1a0465	e2 20		sep #$20	            SEP #$20
.1a0467	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.1a046a	f0 06		beq $1a0472	            BEQ done
.1a046c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a046f	e8		inx		            INX
.1a0470	80 f5		bra $1a0467	            BRA loop
.1a0472	28		plp		done        PLP
.1a0473	60		rts		            RTS
.1a0474					PRHEXW
.1a0474	08		php		            PHP
.1a0475	c2 20		rep #$20	            REP #$20
.1a0477	48		pha		            PHA
.1a0478	48		pha		            PHA
.1a0479	4a		lsr a		            LSR A
.1a047a	4a		lsr a		            LSR A
.1a047b	4a		lsr a		            LSR A
.1a047c	4a		lsr a		            LSR A
.1a047d	4a		lsr a		            LSR A
.1a047e	4a		lsr a		            LSR A
.1a047f	4a		lsr a		            LSR A
.1a0480	4a		lsr a		            LSR A
.1a0481	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a0484	68		pla		            PLA
.1a0485	29 ff 00	and #$00ff	            AND #$00FF
.1a0488	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a048b	68		pla		            PLA
.1a048c	28		plp		            PLP
.1a048d	60		rts		            RTS
.1a048e					PRHEXB
.1a048e	08		php		            PHP
.1a048f	c2 20		rep #$20	            REP #$20
.1a0491	48		pha		            PHA
.1a0492	e2 20		sep #$20	            SEP #$20
.1a0494	48		pha		            PHA
.1a0495	4a		lsr a		            LSR A
.1a0496	4a		lsr a		            LSR A
.1a0497	4a		lsr a		            LSR A
.1a0498	4a		lsr a		            LSR A
.1a0499	20 a5 04	jsr $1a04a5	            JSR PRHEXN
.1a049c	68		pla		            PLA
.1a049d	20 a5 04	jsr $1a04a5	            JSR PRHEXN
.1a04a0	c2 20		rep #$20	            REP #$20
.1a04a2	68		pla		            PLA
.1a04a3	28		plp		            PLP
.1a04a4	60		rts		            RTS
.1a04a5					PRHEXN
.1a04a5	08		php		            PHP
.1a04a6	c2 30		rep #$30	            REP #$30
.1a04a8	da		phx		            PHX
.1a04a9	29 0f 00	and #$000f	            AND #$000F
.1a04ac	aa		tax		            TAX
.1a04ad	bf 00 d0 1a	lda $1ad000,x	            LDA @lHEXDIGITS,X
.1a04b1	20 18 00	jsr $1a0018	            JSR PRINTC
.1a04b4	fa		plx		            PLX
.1a04b5	28		plp		            PLP
.1a04b6	60		rts		            RTS
>1ad000	30 31 32 33 34 35 36 37		HEXDIGITS   .text "0123456789ABCDEF"
>1ad008	38 39 41 42 43 44 45 46

;******  Return to file: src\basic816.s


;******  Processing file: src\utilities.s

.1a04b7					PRTRACE
.1a04b7	08		php		            PHP
.1a04b8	c2 30		rep #$30	            REP #$30
.1a04ba	48		pha		            PHA
.1a04bb	da		phx		            PHX
.1a04bc	5a		phy		            PHY
.1a04bd	8b		phb		            PHB
.1a04be	0b		phd		            PHD
.1a04bf	c2 30		rep #$30	            REP #$30
.1a04c1	a3 0b		lda $0b,s	            LDA 11,S        ; Get the return address
.1a04c3	18		clc		calc_addr   CLC
.1a04c4	69 03 00	adc #$0003	            ADC #3          ; Add 3 to skip over the following branch
.1a04c7	aa		tax		            TAX
.1a04c8	e2 20		sep #$20	            SEP #$20
.1a04ca	a9 1a		lda #$1a	            LDA #`PRTRACE
.1a04cc	48		pha		            PHA
.1a04cd	ab		plb		            PLB
.1a04ce	bd 00 00	lda $0000,x	pr_loop     LDA #0,B,X
.1a04d1	f0 06		beq $1a04d9	            BEQ done
.1a04d3	20 a1 03	jsr $1a03a1	            JSR SCREEN_PUTC
.1a04d6	e8		inx		            INX
.1a04d7	80 f5		bra $1a04ce	            BRA pr_loop
.1a04d9					done
.1a04d9	c2 30		rep #$30	            REP #$30
.1a04db	2b		pld		            PLD
.1a04dc	ab		plb		            PLB
.1a04dd	7a		ply		            PLY
.1a04de	fa		plx		            PLX
.1a04df	68		pla		            PLA
.1a04e0	28		plp		            PLP
.1a04e1	60		rts		            RTS
.1a04e2					ISALPHA
.1a04e2	08		php		            PHP
.1a04e3	e2 20		sep #$20	            SEP #$20
.1a04e5	c9 5b		cmp #$5b	            CMP #'Z'+1
.1a04e7	b0 04		bcs $1a04ed	            BGE not_upper
.1a04e9	c9 41		cmp #$41	            CMP #'A'
.1a04eb	b0 0b		bcs $1a04f8	            BGE is_alpha
.1a04ed	c9 7b		cmp #$7b	not_upper   CMP #'z'+1
.1a04ef	b0 04		bcs $1a04f5	            BGE not_alpha
.1a04f1	c9 61		cmp #$61	            CMP #'a'
.1a04f3	b0 03		bcs $1a04f8	            BGE is_alpha
.1a04f5					not_alpha
.1a04f5	28		plp		            PLP
.1a04f6	18		clc		            CLC
.1a04f7	60		rts		            RTS
.1a04f8					is_alpha
.1a04f8	28		plp		            PLP
.1a04f9	38		sec		            SEC
.1a04fa	60		rts		            RTS
.1a04fb					ISNUMERAL
.1a04fb	08		php		            PHP
.1a04fc	e2 20		sep #$20	            SEP #$20
.1a04fe	c9 3a		cmp #$3a	            CMP #'9'+1
.1a0500	b0 04		bcs $1a0506	            BGE ret_false
.1a0502	c9 30		cmp #$30	            CMP #'0'
.1a0504	b0 03		bcs $1a0509	            BGE ret_true
.1a0506	28		plp		ret_false   PLP
.1a0507	18		clc		            CLC
.1a0508	60		rts		            RTS
.1a0509	28		plp		ret_true    PLP
.1a050a	38		sec		            SEC
.1a050b	60		rts		            RTS
.1a050c					ISHEX
.1a050c	08		php		            PHP
.1a050d	e2 20		sep #$20	            SEP #$20
.1a050f	c9 3a		cmp #$3a	            CMP #'9'+1
.1a0511	b0 04		bcs $1a0517	            BGE chk_lca2f
.1a0513	c9 30		cmp #$30	            CMP #'0'
.1a0515	b0 13		bcs $1a052a	            BGE ret_true
.1a0517	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.1a0519	b0 04		bcs $1a051f	            BGE chk_uca2f
.1a051b	c9 61		cmp #$61	            CMP #'a'
.1a051d	b0 0b		bcs $1a052a	            BGE ret_true
.1a051f	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.1a0521	b0 04		bcs $1a0527	            BGE ret_false
.1a0523	c9 41		cmp #$41	            CMP #'A'
.1a0525	b0 03		bcs $1a052a	            BGE ret_true
.1a0527	28		plp		ret_false   PLP
.1a0528	18		clc		            CLC
.1a0529	60		rts		            RTS
.1a052a	28		plp		ret_true    PLP
.1a052b	38		sec		            SEC
.1a052c	60		rts		            RTS
.1a052d					HEX2BIN
.1a052d	08		php		            PHP
.1a052e	e2 20		sep #$20	            SEP #$20
.1a0530	c9 3a		cmp #$3a	            CMP #'9'+1          ; Check to see if '0'..'9'
.1a0532	b0 04		bcs $1a0538	            BGE chk_lca2f
.1a0534	c9 30		cmp #$30	            CMP #'0'
.1a0536	b0 12		bcs $1a054a	            BGE conv_09         ; Yes: convert it
.1a0538	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.1a053a	b0 04		bcs $1a0540	            BGE chk_uca2f
.1a053c	c9 61		cmp #$61	            CMP #'a'
.1a053e	b0 0f		bcs $1a054f	            BGE conv_lcaf
.1a0540	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.1a0542	b0 04		bcs $1a0548	            BGE done
.1a0544	c9 41		cmp #$41	            CMP #'A'
.1a0546	b0 09		bcs $1a0551	            BGE conv_ucaf
.1a0548	28		plp		done        PLP
.1a0549	60		rts		            RTS
.1a054a	38		sec		conv_09     SEC                 ; Convert digits '0'..'9'
.1a054b	e9 30		sbc #$30	            SBC #'0'
.1a054d	80 f9		bra $1a0548	            BRA done
.1a054f	29 df		and #$df	conv_lcaf   AND #%11011111      ; Convert to upper case
.1a0551	38		sec		conv_ucaf   SEC
.1a0552	e9 37		sbc #$37	            SBC #'A'-10         ; Convert 'A'..'F'
.1a0554	80 f2		bra $1a0548	            BRA done
.1a0556					TOUPPERA
.1a0556	08		php		            PHP
.1a0557	e2 20		sep #$20	            SEP #$20
.1a0559	c9 7b		cmp #$7b	            CMP #'z'+1
.1a055b	b0 06		bcs $1a0563	            BCS done
.1a055d	c9 61		cmp #$61	            CMP #'a'
.1a055f	90 02		bcc $1a0563	            BCC done
.1a0561	29 df		and #$df	            AND #%11011111
.1a0563	28		plp		done        PLP
.1a0564	60		rts		            RTS
.1a0565					TOUPPER
.1a0565	08		php		            PHP
.1a0566	e2 20		sep #$20	            SEP #$20
.1a0568	c2 10		rep #$10	            REP #$10
.1a056a	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.1a056d	f0 09		beq $1a0578	            BEQ done
.1a056f	20 56 05	jsr $1a0556	            JSR TOUPPERA
.1a0572	9d 00 00	sta $0000,x	            STA #0,B,X
.1a0575	e8		inx		continue    INX
.1a0576	80 f2		bra $1a056a	            BRA loop
.1a0578	28		plp		done        PLP
.1a0579	60		rts		            RTS
.1a057a					MULINT10
.1a057a	08		php		                PHP
.1a057b	0b		phd		                PHD
.1a057c	08		php		            PHP
.1a057d	c2 20		rep #$20	            REP #$20
.1a057f	48		pha		            PHA
.1a0580	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0583	5b		tcd		            TCD
.1a0584	68		pla		            PLA
.1a0585	28		plp		            PLP
.1a0586	c2 20		rep #$20	            REP #$20
.1a0588	48		pha		                PHA
.1a0589	06 23		asl $0823	                ASL ARGUMENT1           ; 7 -- 20 -- 74
.1a058b	26 25		rol $0825	                ROL ARGUMENT1+2         ; 7
.1a058d	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.1a058f	85 0c		sta $080c	                STA SCRATCH             ; 4
.1a0591	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.1a0593	85 0e		sta $080e	                STA SCRATCH+2           ; 4
.1a0595	06 0c		asl $080c	                ASL SCRATCH             ; 7 -- 28
.1a0597	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.1a0599	06 0c		asl $080c	                ASL SCRATCH             ; 7
.1a059b	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.1a059d	18		clc		                CLC                     ; 2 -- 26
.1a059e	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.1a05a0	65 0c		adc $080c	                ADC SCRATCH             ; 4
.1a05a2	85 23		sta $0823	                STA ARGUMENT1           ; 4
.1a05a4	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.1a05a6	65 0e		adc $080e	                ADC SCRATCH+2           ; 4
.1a05a8	85 25		sta $0825	                STA ARGUMENT1+2         ; 4
.1a05aa	68		pla		                PLA
.1a05ab	2b		pld		                PLD
.1a05ac	28		plp		                PLP
.1a05ad	60		rts		            RTS
.1a05ae					DIVINT10
.1a05ae	08		php		                PHP
.1a05af	0b		phd		                PHD
.1a05b0	08		php		            PHP
.1a05b1	c2 20		rep #$20	            REP #$20
.1a05b3	48		pha		            PHA
.1a05b4	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a05b7	5b		tcd		            TCD
.1a05b8	68		pla		            PLA
.1a05b9	28		plp		            PLP
.1a05ba	c2 20		rep #$20	            REP #$20
.1a05bc	a5 23		lda $0823	                LDA ARGUMENT1
.1a05be	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.1a05c2	a9 0a 00	lda #$000a	                LDA #10
.1a05c5	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.1a05c9	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.1a05cd	85 23		sta $0823	                STA ARGUMENT1
.1a05cf	64 25		stz $0825	                STZ ARGUMENT1+2
.1a05d1	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.1a05d5	85 29		sta $0829	                STA ARGUMENT2
.1a05d7	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a05d9	e2 20		sep #$20	            SEP #$20
.1a05db	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a05dd	85 27		sta $0827	                STA ARGTYPE1
.1a05df	85 2d		sta $082d	                STA ARGTYPE2
.1a05e1	2b		pld		                PLD
.1a05e2	28		plp		                PLP
.1a05e3	60		rts		            RTS
.1a05e4					DIVINT100
.1a05e4	08		php		                PHP
.1a05e5	0b		phd		                PHD
.1a05e6	08		php		            PHP
.1a05e7	c2 20		rep #$20	            REP #$20
.1a05e9	48		pha		            PHA
.1a05ea	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a05ed	5b		tcd		            TCD
.1a05ee	68		pla		            PLA
.1a05ef	28		plp		            PLP
.1a05f0	c2 20		rep #$20	            REP #$20
.1a05f2	a5 23		lda $0823	                LDA ARGUMENT1
.1a05f4	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.1a05f8	a9 64 00	lda #$0064	                LDA #100
.1a05fb	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.1a05ff	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.1a0603	85 23		sta $0823	                STA ARGUMENT1
.1a0605	64 25		stz $0825	                STZ ARGUMENT1+2
.1a0607	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.1a060b	85 29		sta $0829	                STA ARGUMENT2
.1a060d	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a060f	e2 20		sep #$20	            SEP #$20
.1a0611	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a0613	85 27		sta $0827	                STA ARGTYPE1
.1a0615	85 2d		sta $082d	                STA ARGTYPE2
.1a0617	2b		pld		                PLD
.1a0618	28		plp		                PLP
.1a0619	60		rts		            RTS
.1a061a					IS_ARG1_Z
.1a061a	08		php		                PHP
.1a061b	c2 20		rep #$20	            REP #$20
.1a061d	a5 23		lda $0823	                LDA ARGUMENT1
.1a061f	d0 08		bne $1a0629	                BNE return_false
.1a0621	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a0623	d0 04		bne $1a0629	                BNE return_false
.1a0625	28		plp		return_true     PLP
.1a0626	e2 02		sep #$02	                SEP #$02        ; Set Z
.1a0628	60		rts		            RTS
.1a0629	28		plp		return_false    PLP
.1a062a	c2 02		rep #$02	                REP #$02        ; Clear Z
.1a062c	60		rts		            RTS
.1a062d					SET_TRUE
.1a062d	08		php		                PHP
.1a062e	c2 30		rep #$30	            REP #$30
.1a0630	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a0633	85 23		sta $0823	                STA ARGUMENT1
.1a0635	85 25		sta $0825	                STA ARGUMENT1+2
.1a0637	e2 20		sep #$20	            SEP #$20
.1a0639	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a063b	85 27		sta $0827	                STA ARGTYPE1
.1a063d	28		plp		                PLP
.1a063e	60		rts		            RTS
.1a063f					SET_FALSE
.1a063f	08		php		                PHP
.1a0640	c2 30		rep #$30	            REP #$30
.1a0642	a9 00 00	lda #$0000	                LDA #0
.1a0645	85 23		sta $0823	                STA ARGUMENT1
.1a0647	85 25		sta $0825	                STA ARGUMENT1+2
.1a0649	e2 20		sep #$20	            SEP #$20
.1a064b	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a064d	85 27		sta $0827	                STA ARGTYPE1
.1a064f	28		plp		                PLP
.1a0650	60		rts		            RTS
.1a0651					ASS_ARG1_INT
.1a0651	08		php		                PHP
.1a0652	e2 20		sep #$20	            SEP #$20
.1a0654	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a0656	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a0658	f0 07		beq $1a0661	                BEQ done                ; If so: just return
.1a065a	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a065c	d0 05		bne $1a0663	                BNE TYPE_ERR            ; If not: throw an error
.1a065e	20 09 5c	jsr $1a5c09	            JSR FTOI
.1a0661	28		plp		done            PLP
.1a0662	60		rts		            RTS
.1a0663					TYPE_ERR
.1a0663	08		php		            PHP
.1a0664	c2 20		rep #$20	            REP #$20
.1a0666	48		pha		            PHA
.1a0667	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a066a	5b		tcd		            TCD
.1a066b	68		pla		            PLA
.1a066c	28		plp		            PLP
.1a066d	e2 20		sep #$20	            SEP #$20
.1a066f	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0671	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0675	c2 20		rep #$20	            REP #$20
.1a0677	29 ff 00	and #$00ff	            AND #$00FF
.1a067a	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a067d	e2 20		sep #$20	            SEP #$20
.1a067f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0682					ASS_ARG2_INT
.1a0682	08		php		                PHP
.1a0683	e2 20		sep #$20	            SEP #$20
.1a0685	a5 2d		lda $082d	                LDA ARGTYPE2                ; Verify that the type is INTEGER
.1a0687	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a0689	f0 37		beq $1a06c2	                BEQ done                    ; If so: just return
.1a068b	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; Check if it's a float
.1a068d	d0 35		bne $1a06c4	                BNE TYPE_ERR                ; If not: throw an error
.1a068f	c2 20		rep #$20	            REP #$20
.1a0691	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0693	48		pha		            PHA
.1a0694	a5 23		lda $0823	            LDA ARGUMENT1
.1a0696	48		pha		            PHA
.1a0697	c2 20		rep #$20	            REP #$20
.1a0699	a5 29		lda $0829	            LDA ARGUMENT2
.1a069b	85 23		sta $0823	            STA ARGUMENT1
.1a069d	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a069f	85 25		sta $0825	            STA ARGUMENT1+2
.1a06a1	e2 20		sep #$20	            SEP #$20
.1a06a3	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.1a06a5	85 27		sta $0827	            STA ARGTYPE1
.1a06a7	20 09 5c	jsr $1a5c09	            JSR FTOI
.1a06aa	c2 20		rep #$20	            REP #$20
.1a06ac	a5 23		lda $0823	            LDA ARGUMENT1
.1a06ae	85 29		sta $0829	            STA ARGUMENT2
.1a06b0	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a06b2	85 2b		sta $082b	            STA ARGUMENT2+2
.1a06b4	e2 20		sep #$20	            SEP #$20
.1a06b6	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a06b8	85 2d		sta $082d	            STA ARGTYPE2
.1a06ba	c2 20		rep #$20	            REP #$20
.1a06bc	68		pla		            PLA
.1a06bd	85 23		sta $0823	            STA ARGUMENT1
.1a06bf	68		pla		            PLA
.1a06c0	85 25		sta $0825	            STA ARGUMENT1+2
.1a06c2	28		plp		done            PLP
.1a06c3	60		rts		            RTS
.1a06c4					TYPE_ERR
.1a06c4	08		php		            PHP
.1a06c5	c2 20		rep #$20	            REP #$20
.1a06c7	48		pha		            PHA
.1a06c8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a06cb	5b		tcd		            TCD
.1a06cc	68		pla		            PLA
.1a06cd	28		plp		            PLP
.1a06ce	e2 20		sep #$20	            SEP #$20
.1a06d0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a06d2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a06d6	c2 20		rep #$20	            REP #$20
.1a06d8	29 ff 00	and #$00ff	            AND #$00FF
.1a06db	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a06de	e2 20		sep #$20	            SEP #$20
.1a06e0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a06e3					ASS_ARG1_STR
.1a06e3	08		php		                PHP
.1a06e4	e2 20		sep #$20	            SEP #$20
.1a06e6	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is STRING
.1a06e8	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a06ea	d0 02		bne $1a06ee	                BNE TYPE_ERR
.1a06ec	28		plp		                PLP
.1a06ed	60		rts		            RTS
.1a06ee					TYPE_ERR
.1a06ee	08		php		            PHP
.1a06ef	c2 20		rep #$20	            REP #$20
.1a06f1	48		pha		            PHA
.1a06f2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a06f5	5b		tcd		            TCD
.1a06f6	68		pla		            PLA
.1a06f7	28		plp		            PLP
.1a06f8	e2 20		sep #$20	            SEP #$20
.1a06fa	a9 04		lda #$04	            LDA #ERR_TYPE
.1a06fc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0700	c2 20		rep #$20	            REP #$20
.1a0702	29 ff 00	and #$00ff	            AND #$00FF
.1a0705	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a0708	e2 20		sep #$20	            SEP #$20
.1a070a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a070d					ASS_ARG1_INT16
.1a070d	08		php		                PHP
.1a070e	e2 20		sep #$20	            SEP #$20
.1a0710	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a0712	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a0714	f0 07		beq $1a071d	                BEQ check_range         ; If so: check the range
.1a0716	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a0718	d0 0b		bne $1a0725	                BNE TYPE_ERR            ; If not: throw an error
.1a071a	20 09 5c	jsr $1a5c09	            JSR FTOI
.1a071d					check_range
.1a071d	c2 20		rep #$20	            REP #$20
.1a071f	a5 25		lda $0825	                LDA ARGUMENT1+2         ; Validate it is 16-bit
.1a0721	d0 21		bne $1a0744	                BNE range_err
.1a0723	28		plp		                PLP
.1a0724	60		rts		            RTS
.1a0725					TYPE_ERR
.1a0725	08		php		            PHP
.1a0726	c2 20		rep #$20	            REP #$20
.1a0728	48		pha		            PHA
.1a0729	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a072c	5b		tcd		            TCD
.1a072d	68		pla		            PLA
.1a072e	28		plp		            PLP
.1a072f	e2 20		sep #$20	            SEP #$20
.1a0731	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0733	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0737	c2 20		rep #$20	            REP #$20
.1a0739	29 ff 00	and #$00ff	            AND #$00FF
.1a073c	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a073f	e2 20		sep #$20	            SEP #$20
.1a0741	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0744					RANGE_ERR
.1a0744	08		php		            PHP
.1a0745	c2 20		rep #$20	            REP #$20
.1a0747	48		pha		            PHA
.1a0748	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a074b	5b		tcd		            TCD
.1a074c	68		pla		            PLA
.1a074d	28		plp		            PLP
.1a074e	e2 20		sep #$20	            SEP #$20
.1a0750	a9 09		lda #$09	            LDA #ERR_RANGE
.1a0752	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0756	c2 20		rep #$20	            REP #$20
.1a0758	29 ff 00	and #$00ff	            AND #$00FF
.1a075b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a075e	e2 20		sep #$20	            SEP #$20
.1a0760	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0763					ASS_ARG1_BYTE
.1a0763	08		php		                PHP
.1a0764	e2 20		sep #$20	            SEP #$20
.1a0766	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a0768	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a076a	f0 07		beq $1a0773	                BEQ check_range         ; If so: check the range
.1a076c	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a076e	d0 11		bne $1a0781	                BNE TYPE_ERR            ; If not: throw an error
.1a0770	20 09 5c	jsr $1a5c09	            JSR FTOI
.1a0773	a5 26		lda $0826	check_range     LDA ARGUMENT1+3         ; Validate that the value is in byte range
.1a0775	d0 29		bne $1a07a0	                BNE RANGE_ERR           ; If not... throw a range error
.1a0777	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a0779	d0 25		bne $1a07a0	                BNE RANGE_ERR
.1a077b	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a077d	d0 21		bne $1a07a0	                BNE RANGE_ERR
.1a077f	28		plp		                PLP
.1a0780	60		rts		            RTS
.1a0781					TYPE_ERR
.1a0781	08		php		            PHP
.1a0782	c2 20		rep #$20	            REP #$20
.1a0784	48		pha		            PHA
.1a0785	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0788	5b		tcd		            TCD
.1a0789	68		pla		            PLA
.1a078a	28		plp		            PLP
.1a078b	e2 20		sep #$20	            SEP #$20
.1a078d	a9 04		lda #$04	            LDA #ERR_TYPE
.1a078f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0793	c2 20		rep #$20	            REP #$20
.1a0795	29 ff 00	and #$00ff	            AND #$00FF
.1a0798	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a079b	e2 20		sep #$20	            SEP #$20
.1a079d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a07a0					RANGE_ERR
.1a07a0	08		php		            PHP
.1a07a1	c2 20		rep #$20	            REP #$20
.1a07a3	48		pha		            PHA
.1a07a4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a07a7	5b		tcd		            TCD
.1a07a8	68		pla		            PLA
.1a07a9	28		plp		            PLP
.1a07aa	e2 20		sep #$20	            SEP #$20
.1a07ac	a9 09		lda #$09	            LDA #ERR_RANGE
.1a07ae	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a07b2	c2 20		rep #$20	            REP #$20
.1a07b4	29 ff 00	and #$00ff	            AND #$00FF
.1a07b7	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a07ba	e2 20		sep #$20	            SEP #$20
.1a07bc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a07bf					ASS_ARG1_FLOAT
.1a07bf	08		php		                PHP
.1a07c0	e2 20		sep #$20	            SEP #$20
.1a07c2	a5 27		lda $0827	                LDA ARGTYPE1            ; Check the type
.1a07c4	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.1a07c6	f0 26		beq $1a07ee	                BEQ done                ; Then we're done
.1a07c8	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.1a07ca	f0 1f		beq $1a07eb	                BEQ cast                ; Then cast it to float
.1a07cc					type_err
.1a07cc	08		php		            PHP
.1a07cd	c2 20		rep #$20	            REP #$20
.1a07cf	48		pha		            PHA
.1a07d0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a07d3	5b		tcd		            TCD
.1a07d4	68		pla		            PLA
.1a07d5	28		plp		            PLP
.1a07d6	e2 20		sep #$20	            SEP #$20
.1a07d8	a9 04		lda #$04	            LDA #ERR_TYPE
.1a07da	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a07de	c2 20		rep #$20	            REP #$20
.1a07e0	29 ff 00	and #$00ff	            AND #$00FF
.1a07e3	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a07e6	e2 20		sep #$20	            SEP #$20
.1a07e8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a07eb					cast
.1a07eb	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a07ee	28		plp		done            PLP
.1a07ef	60		rts		            RTS
.1a07f0					ASS_ARG2_FLOAT
.1a07f0	08		php		                PHP
.1a07f1	e2 20		sep #$20	            SEP #$20
.1a07f3	a5 2d		lda $082d	                LDA ARGTYPE2            ; Check the type
.1a07f5	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.1a07f7	f0 26		beq $1a081f	                BEQ done                ; Then we're done
.1a07f9	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.1a07fb	f0 1f		beq $1a081c	                BEQ cast                ; Then cast it to float
.1a07fd					type_err
.1a07fd	08		php		            PHP
.1a07fe	c2 20		rep #$20	            REP #$20
.1a0800	48		pha		            PHA
.1a0801	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0804	5b		tcd		            TCD
.1a0805	68		pla		            PLA
.1a0806	28		plp		            PLP
.1a0807	e2 20		sep #$20	            SEP #$20
.1a0809	a9 04		lda #$04	            LDA #ERR_TYPE
.1a080b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a080f	c2 20		rep #$20	            REP #$20
.1a0811	29 ff 00	and #$00ff	            AND #$00FF
.1a0814	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a0817	e2 20		sep #$20	            SEP #$20
.1a0819	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a081c					cast
.1a081c	20 21 08	jsr $1a0821	            JSR CAST_ARG2_FLOAT
.1a081f	28		plp		done            PLP
.1a0820	60		rts		            RTS
.1a0821					CAST_ARG2_FLOAT
.1a0821	c2 20		rep #$20	            REP #$20
.1a0823	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0825	48		pha		            PHA
.1a0826	a5 23		lda $0823	            LDA ARGUMENT1
.1a0828	48		pha		            PHA
.1a0829	c2 20		rep #$20	            REP #$20
.1a082b	a5 29		lda $0829	            LDA ARGUMENT2
.1a082d	85 23		sta $0823	            STA ARGUMENT1
.1a082f	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a0831	85 25		sta $0825	            STA ARGUMENT1+2
.1a0833	e2 20		sep #$20	            SEP #$20
.1a0835	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a0837	85 27		sta $0827	            STA ARGTYPE1
.1a0839	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a083c	c2 20		rep #$20	            REP #$20
.1a083e	a5 23		lda $0823	            LDA ARGUMENT1
.1a0840	85 29		sta $0829	            STA ARGUMENT2
.1a0842	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0844	85 2b		sta $082b	            STA ARGUMENT2+2
.1a0846	e2 20		sep #$20	            SEP #$20
.1a0848	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.1a084a	85 2d		sta $082d	            STA ARGTYPE2
.1a084c	c2 20		rep #$20	            REP #$20
.1a084e	68		pla		            PLA
.1a084f	85 23		sta $0823	            STA ARGUMENT1
.1a0851	68		pla		            PLA
.1a0852	85 25		sta $0825	            STA ARGUMENT1+2
.1a0854	60		rts		            RTS
.1a0855					ASS_ARGS_NUM
.1a0855	08		php		                PHP
.1a0856	e2 20		sep #$20	            SEP #$20
.1a0858	a5 27		lda $0827	                LDA ARGTYPE1                ; Check ARGUMENT1
.1a085a	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a085c	f0 23		beq $1a0881	                BEQ arg1_int
.1a085e	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a0860	f0 2e		beq $1a0890	                BEQ arg1_float
.1a0862					type_err
.1a0862	08		php		            PHP
.1a0863	c2 20		rep #$20	            REP #$20
.1a0865	48		pha		            PHA
.1a0866	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0869	5b		tcd		            TCD
.1a086a	68		pla		            PLA
.1a086b	28		plp		            PLP
.1a086c	e2 20		sep #$20	            SEP #$20
.1a086e	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0870	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0874	c2 20		rep #$20	            REP #$20
.1a0876	29 ff 00	and #$00ff	            AND #$00FF
.1a0879	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a087c	e2 20		sep #$20	            SEP #$20
.1a087e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0881	a5 2d		lda $082d	arg1_int        LDA ARGTYPE2                ; Check argument 2
.1a0883	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If integer, we're done
.1a0885	f0 16		beq $1a089d	                BEQ done
.1a0887	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If not float, throw an error
.1a0889	d0 d7		bne $1a0862	                BNE type_err
.1a088b	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a088e	80 0d		bra $1a089d	                BRA done
.1a0890	a5 2d		lda $082d	arg1_float      LDA ARGTYPE2                ; Check argument 2
.1a0892	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If it's float
.1a0894	f0 07		beq $1a089d	                BEQ done                    ; Then we're done
.1a0896	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If it's not integer
.1a0898	d0 c8		bne $1a0862	                BNE type_err                ; Thrown an error
.1a089a	20 21 08	jsr $1a0821	            JSR CAST_ARG2_FLOAT
.1a089d					done
.1a089d	e2 20		sep #$20	            SEP #$20
.1a089f	a5 27		lda $0827	                LDA ARGTYPE1                ; Return the type code in A
.1a08a1	28		plp		                PLP
.1a08a2	60		rts		            RTS
.1a08a3					ASS_ARGS_NUMSTR
.1a08a3	08		php		                PHP
.1a08a4	e2 20		sep #$20	            SEP #$20
.1a08a6	a5 27		lda $0827	                LDA ARGTYPE1                ; Check to see if ARGUMENT1 is a string
.1a08a8	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a08aa	d0 25		bne $1a08d1	                BNE numbers
.1a08ac	a5 2d		lda $082d	                LDA ARGTYPE2                ; If ARGUMENT1 is a string, make sure ARGUMENT2 is
.1a08ae	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a08b0	f0 24		beq $1a08d6	                BEQ done
.1a08b2					TYPE_ERR
.1a08b2	08		php		            PHP
.1a08b3	c2 20		rep #$20	            REP #$20
.1a08b5	48		pha		            PHA
.1a08b6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a08b9	5b		tcd		            TCD
.1a08ba	68		pla		            PLA
.1a08bb	28		plp		            PLP
.1a08bc	e2 20		sep #$20	            SEP #$20
.1a08be	a9 04		lda #$04	            LDA #ERR_TYPE
.1a08c0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a08c4	c2 20		rep #$20	            REP #$20
.1a08c6	29 ff 00	and #$00ff	            AND #$00FF
.1a08c9	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a08cc	e2 20		sep #$20	            SEP #$20
.1a08ce	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a08d1					numbers
.1a08d1	20 55 08	jsr $1a0855	            JSR ASS_ARGS_NUM
.1a08d4	a5 27		lda $0827	                LDA ARGTYPE1                ; Make sure A is the type
.1a08d6	28		plp		done            PLP
.1a08d7	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\tokens.s

.0000					TOKEN
>0000					precedence  .byte ?
>0001					length      .byte ?
>0002					name        .word <>?
>0004					eval        .word <>?
>0006					arity       .word <>?
.1a08d8					PARSEINT
.1a08d8	08		php		            PHP
.1a08d9	0b		phd		            PHD
.1a08da	08		php		            PHP
.1a08db	c2 20		rep #$20	            REP #$20
.1a08dd	48		pha		            PHA
.1a08de	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a08e1	5b		tcd		            TCD
.1a08e2	68		pla		            PLA
.1a08e3	28		plp		            PLP
.1a08e4	c2 30		rep #$30	            REP #$30
.1a08e6	64 23		stz $0823	            STZ ARGUMENT1       ; Default to Not-a-value
.1a08e8	64 25		stz $0825	            STZ ARGUMENT1+2
.1a08ea	e2 20		sep #$20	            SEP #$20
.1a08ec	64 27		stz $0827	            STZ ARGTYPE1
.1a08ee	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it starts with '$'
.1a08f0	c9 26		cmp #$26	            CMP #'&'
.1a08f2	f0 44		beq $1a0938	            BEQ check_hex       ; Yes: parse it as a hexadecimal number
.1a08f4					loop
.1a08f4	e2 20		sep #$20	            SEP #$20
.1a08f6	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.1a08f8	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a08fb	90 76		bcc $1a0973	            BCC done            ; No, we're done parsing
.1a08fd	20 7a 05	jsr $1a057a	            JSR MULINT10
.1a0900	38		sec		            SEC                 ; Convert the ASCII code to a number
.1a0901	e9 30		sbc #$30	            SBC #'0'
.1a0903	c2 20		rep #$20	            REP #$20
.1a0905	29 ff 00	and #$00ff	            AND #$00FF
.1a0908	18		clc		            CLC
.1a0909	65 23		adc $0823	            ADC ARGUMENT1
.1a090b	85 23		sta $0823	            STA ARGUMENT1
.1a090d	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a090f	69 00 00	adc #$0000	            ADC #0
.1a0912	85 25		sta $0825	            STA ARGUMENT1+2
.1a0914	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a0917	80 db		bra $1a08f4	            BRA loop            ; And try to process it
.1a0919					syntaxerr
.1a0919	08		php		            PHP
.1a091a	c2 20		rep #$20	            REP #$20
.1a091c	48		pha		            PHA
.1a091d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0920	5b		tcd		            TCD
.1a0921	68		pla		            PLA
.1a0922	28		plp		            PLP
.1a0923	e2 20		sep #$20	            SEP #$20
.1a0925	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a0927	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a092b	c2 20		rep #$20	            REP #$20
.1a092d	29 ff 00	and #$00ff	            AND #$00FF
.1a0930	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a0933	e2 20		sep #$20	            SEP #$20
.1a0935	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0938					check_hex
.1a0938	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a093b	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.1a093d	c9 48		cmp #$48	            CMP #'H'            ; Is it 'H'?
.1a093f	f0 04		beq $1a0945	            BEQ parse_hex       ; Yes: skip it and parse hex
.1a0941	c9 68		cmp #$68	            CMP #'h'            ; Is it 'h'?
.1a0943	d0 d4		bne $1a0919	            BNE syntaxerr       ; No: throw an error
.1a0945					parse_hex
.1a0945	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a0948					hexloop
.1a0948	e2 20		sep #$20	            SEP #$20
.1a094a	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.1a094c	20 0c 05	jsr $1a050c	            JSR ISHEX
.1a094f	90 22		bcc $1a0973	            BCC done            ; No, we're done parsing
.1a0951	20 2d 05	jsr $1a052d	            JSR HEX2BIN
.1a0954	c2 20		rep #$20	            REP #$20
.1a0956	06 23		asl $0823	            ASL ARGUMENT1
.1a0958	26 25		rol $0825	            ROL ARGUMENT1+2
.1a095a	06 23		asl $0823	            ASL ARGUMENT1
.1a095c	26 25		rol $0825	            ROL ARGUMENT1+2
.1a095e	06 23		asl $0823	            ASL ARGUMENT1
.1a0960	26 25		rol $0825	            ROL ARGUMENT1+2
.1a0962	06 23		asl $0823	            ASL ARGUMENT1
.1a0964	26 25		rol $0825	            ROL ARGUMENT1+2
.1a0966	29 ff 00	and #$00ff	            AND #$00FF          ; Add binary number to ARGUMENT1
.1a0969	18		clc		            CLC
.1a096a	65 23		adc $0823	            ADC ARGUMENT1
.1a096c	85 23		sta $0823	            STA ARGUMENT1
.1a096e	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a0971	80 d5		bra $1a0948	            BRA hexloop         ; And try to process it
.1a0973	2b		pld		done        PLD
.1a0974	28		plp		            PLP
.1a0975	60		rts		            RTS
.1a0976					PREVCHAR
.1a0976	08		php		            PHP
.1a0977	c2 30		rep #$30	            REP #$30
.1a0979	a5 04		lda $0804	            LDA BIPPREV
.1a097b	f0 1c		beq $1a0999	            BEQ ret_false
.1a097d	38		sec		            SEC
.1a097e	a5 04		lda $0804	            LDA BIPPREV
.1a0980	e5 1a		sbc $081a	            SBC CURLINE
.1a0982	a8		tay		            TAY
.1a0983	e2 20		sep #$20	            SEP #$20
.1a0985	b7 1a		lda [$081a],y	loop        LDA [CURLINE],Y
.1a0987	f0 10		beq $1a0999	            BEQ ret_false
.1a0989	c9 20		cmp #$20	            CMP #CHAR_SP
.1a098b	f0 06		beq $1a0993	            BEQ go_back
.1a098d	c9 09		cmp #$09	            CMP #CHAR_TAB
.1a098f	f0 02		beq $1a0993	            BEQ go_back
.1a0991	28		plp		            PLP
.1a0992	60		rts		            RTS
.1a0993	88		dey		go_back     DEY
.1a0994	c0 ff ff	cpy #$ffff	            CPY #$FFFF
.1a0997	d0 ec		bne $1a0985	            BNE loop
.1a0999					ret_false
.1a0999	a9 00		lda #$00	            LDA #0
.1a099b	60		rts		            RTS
.1a099c					TOKENIZE
.1a099c	08		php		            PHP
.1a099d	0b		phd		            PHD
.1a099e	08		php		            PHP
.1a099f	c2 20		rep #$20	            REP #$20
.1a09a1	48		pha		            PHA
.1a09a2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a09a5	5b		tcd		            TCD
.1a09a6	68		pla		            PLA
.1a09a7	28		plp		            PLP
.1a09a8	c2 30		rep #$30	            REP #$30
.1a09aa	a5 1a		lda $081a	            LDA CURLINE
.1a09ac	85 00		sta $0800	            STA BIP
.1a09ae	e2 20		sep #$20	            SEP #$20
.1a09b0	a5 1c		lda $081c	            LDA CURLINE+2
.1a09b2	85 02		sta $0802	            STA BIP+2
.1a09b4	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a09b7	a7 00		lda [$0800]	            LDA [BIP]               ; Do we have a numeral?
.1a09b9	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a09bc	90 0c		bcc $1a09ca	            BCC mv_curline          ; No: adjust CURLINE and tokenize
.1a09be	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a09c1	c2 20		rep #$20	            REP #$20
.1a09c3	a5 23		lda $0823	            LDA ARGUMENT1
.1a09c5	85 d7		sta $08d7	            STA LINENUM
.1a09c7	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a09ca					mv_curline
.1a09ca	c2 20		rep #$20	            REP #$20
.1a09cc	a5 00		lda $0800	            LDA BIP
.1a09ce	85 1a		sta $081a	            STA CURLINE
.1a09d0	e2 20		sep #$20	            SEP #$20
.1a09d2	a5 02		lda $0802	            LDA BIP+2
.1a09d4	85 1c		sta $081c	            STA CURLINE+2
.1a09d6	20 ea 09	jsr $1a09ea	            JSR FINDREM
.1a09d9	e2 20		sep #$20	            SEP #$20
.1a09db					loop
.1a09db	20 5b 0a	jsr $1a0a5b	            JSR TKFINDTOKEN
.1a09de	c9 00		cmp #$00	            CMP #0                  ; Did we find a token?
.1a09e0	f0 05		beq $1a09e7	            BEQ done                ; No: return
.1a09e2	20 06 0c	jsr $1a0c06	            JSR TKWRITE
.1a09e5	80 f4		bra $1a09db	            BRA loop                ; And try again
.1a09e7	2b		pld		done        PLD
.1a09e8	28		plp		            PLP
.1a09e9	60		rts		            RTS
.1a09ea					FINDREM
.1a09ea	08		php		            PHP
.1a09eb	c2 20		rep #$20	            REP #$20
.1a09ed	a5 1a		lda $081a	            LDA CURLINE             ; Point BIP to the beginning of the line
.1a09ef	85 00		sta $0800	            STA BIP
.1a09f1	a5 1c		lda $081c	            LDA CURLINE+2
.1a09f3	85 02		sta $0802	            STA BIP+2
.1a09f5	a2 00 00	ldx #$0000	            LDX #0                  ; X will be a flag that we're at the beginning
.1a09f8	e2 20		sep #$20	            SEP #$20
.1a09fa	a0 00 00	ldy #$0000	loop        LDY #0
.1a09fd	e0 00 00	cpx #$0000	            CPX #0                  ; If we are at the first space on the line
.1a0a00	f0 0d		beq $1a0a0f	            BEQ skip_delim          ; ... skip looking for a delimiter
.1a0a02	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a0a04	f0 53		beq $1a0a59	            BEQ done                ; Is it null? Then we're done
.1a0a06	c9 3a		cmp #$3a	            CMP #':'                ; Is it ":"
.1a0a08	f0 04		beq $1a0a0e	            BEQ found_delim         ; Yes: we might have a REM... look for E
.1a0a0a	c9 20		cmp #$20	            CMP #CHAR_SP
.1a0a0c	d0 33		bne $1a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a0a0e	c8		iny		found_delim INY
.1a0a0f	b7 00		lda [$0800],y	skip_delim  LDA [BIP],Y             ; Get the first character
.1a0a11	f0 46		beq $1a0a59	            BEQ done                ; Is it null? Then we're done
.1a0a13	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.1a0a15	f0 10		beq $1a0a27	            BEQ found_R             ; Yes: we might have a REM... look for E
.1a0a17	c9 72		cmp #$72	            CMP #'r'
.1a0a19	d0 26		bne $1a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a0a1b	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a0a1d	f0 3a		beq $1a0a59	            BEQ done                ; Is it null? Then we're done
.1a0a1f	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.1a0a21	f0 04		beq $1a0a27	            BEQ found_R             ; Yes: we might have a REM... look for E
.1a0a23	c9 72		cmp #$72	            CMP #'r'
.1a0a25	d0 1a		bne $1a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a0a27	c8		iny		found_R     INY
.1a0a28	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a0a2a	f0 2d		beq $1a0a59	            BEQ done                ; Is it null? Then we're done
.1a0a2c	c9 45		cmp #$45	            CMP #'E'                ; Is it "E"
.1a0a2e	f0 04		beq $1a0a34	            BEQ found_E             ; Yes: we might have a REM... look for M
.1a0a30	c9 65		cmp #$65	            CMP #'e'
.1a0a32	d0 0d		bne $1a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a0a34	c8		iny		found_E     INY
.1a0a35	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a0a37	f0 20		beq $1a0a59	            BEQ done                ; Is it null? Then we're done
.1a0a39	c9 4d		cmp #$4d	            CMP #'M'                ; Is it "E"
.1a0a3b	f0 0a		beq $1a0a47	            BEQ found_REM           ; Yes: we might have a REM... look for M
.1a0a3d	c9 6d		cmp #$6d	            CMP #'m'
.1a0a3f	f0 06		beq $1a0a47	            BEQ found_REM
.1a0a41	e8		inx		next_pos    INX                     ; Indicate we're no longer at the first position
.1a0a42	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a0a45	80 b3		bra $1a09fa	            BRA loop
.1a0a47	a7 00		lda [$0800]	found_REM   LDA [BIP]               ; Get the current character
.1a0a49	c9 3a		cmp #$3a	            CMP #':'                ; Is it the delimiter?
.1a0a4b	d0 03		bne $1a0a50	            BNE ret_REM             ; No: go ahead and return REM at that location
.1a0a4d	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a0a50	a9 03		lda #$03	ret_REM     LDA #3
.1a0a52	85 1e		sta $081e	            STA CURTOKLEN           ; Set the size
.1a0a54	a9 91		lda #$91	            LDA #TOK_REM            ; And the token to write
.1a0a56	20 06 0c	jsr $1a0c06	            JSR TKWRITE
.1a0a59	28		plp		done        PLP
.1a0a5a	60		rts		            RTS
.1a0a5b					TKFINDTOKEN
.1a0a5b	08		php		            PHP
.1a0a5c	0b		phd		            PHD
.1a0a5d	08		php		            PHP
.1a0a5e	c2 20		rep #$20	            REP #$20
.1a0a60	48		pha		            PHA
.1a0a61	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0a64	5b		tcd		            TCD
.1a0a65	68		pla		            PLA
.1a0a66	28		plp		            PLP
.1a0a67	e2 20		sep #$20	            SEP #$20
.1a0a69	a9 7f		lda #$7f	            LDA #$7F                ; Start off looking for any size token
.1a0a6b	85 1e		sta $081e	            STA CURTOKLEN
.1a0a6d					next_size
.1a0a6d	c2 10		rep #$10	            REP #$10
.1a0a6f	20 bb 0b	jsr $1a0bbb	            JSR TKNEXTBIG
.1a0a72	a5 1e		lda $081e	            LDA CURTOKLEN           ; Are there any keywords left?
.1a0a74	d0 03		bne $1a0a79	            BNE else
.1a0a76	4c fb 0a	jmp $1a0afb	            JMP done                ; No: return to caller
.1a0a79					else
.1a0a79	c2 20		rep #$20	            REP #$20
.1a0a7b	a5 1a		lda $081a	            LDA CURLINE
.1a0a7d	85 00		sta $0800	            STA BIP
.1a0a7f	e2 20		sep #$20	            SEP #$20
.1a0a81	a5 1c		lda $081c	            LDA CURLINE+2
.1a0a83	85 02		sta $0802	            STA BIP+2
.1a0a85	c2 20		rep #$20	            REP #$20
.1a0a87	64 04		stz $0804	            STZ BIPPREV             ; Clear BIPPREV (point to the previous character)
.1a0a89	64 06		stz $0806	            STZ BIPPREV+2
.1a0a8b					check_len
.1a0a8b	e2 30		sep #$30	            SEP #$30
.1a0a8d	a0 00		ldy #$00	            LDY #0
.1a0a8f	b7 00		lda [$0800],y	nul_scan    LDA [BIP],Y
.1a0a91	f0 da		beq $1a0a6d	            BEQ next_size
.1a0a93	c9 91		cmp #$91	            CMP #TOK_REM            ; Tokenization stops at REMarks too
.1a0a95	f0 d6		beq $1a0a6d	            BEQ next_size
.1a0a97	c8		iny		            INY
.1a0a98	c4 1e		cpy $081e	            CPY CURTOKLEN
.1a0a9a	90 f3		bcc $1a0a8f	            BCC nul_scan
.1a0a9c	c2 10		rep #$10	            REP #$10
.1a0a9e	a7 00		lda [$0800]	            LDA [BIP]               ; Check the current character
.1a0aa0	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.1a0aa2	d0 05		bne $1a0aa9	            BNE chk_keyword         ; No: check to see if we are at the start of a possible keyword
.1a0aa4	20 1d 0b	jsr $1a0b1d	            JSR SKIPQUOTED
.1a0aa7	80 28		bra $1a0ad1	            BRA go_next             ; And move on to the next character
.1a0aa9	a5 1e		lda $081e	chk_keyword LDA CURTOKLEN           ; If the token length is <=2
.1a0aab	c9 03		cmp #$03	            CMP #3
.1a0aad	90 19		bcc $1a0ac8	            BLT try_match           ; ... we don't need a delimiter, go ahead and convert it
.1a0aaf	c2 20		rep #$20	            REP #$20
.1a0ab1	a5 00		lda $0800	            LDA BIP                 ; Check to see if we're at the start of the line
.1a0ab3	c5 1a		cmp $081a	            CMP CURLINE
.1a0ab5	d0 08		bne $1a0abf	            BNE chk_delim           ; No: we need to check for a delimiters
.1a0ab7	e2 20		sep #$20	            SEP #$20
.1a0ab9	a5 02		lda $0802	            LDA BIP+2
.1a0abb	c5 1c		cmp $081c	            CMP CURLINE+2
.1a0abd	f0 09		beq $1a0ac8	            BEQ try_match           ; Yes: this can be a keyword
.1a0abf					chk_delim
.1a0abf	e2 20		sep #$20	            SEP #$20
.1a0ac1	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.1a0ac3	20 4c 51	jsr $1a514c	            JSR ISVARCHAR
.1a0ac6	b0 09		bcs $1a0ad1	            BCS go_next             ; Yes: we can't start a keyword here
.1a0ac8					try_match
.1a0ac8	e2 20		sep #$20	            SEP #$20
.1a0aca	20 2d 0b	jsr $1a0b2d	            JSR TKMATCH
.1a0acd	c9 00		cmp #$00	            CMP #0                  ; Did we get one?
.1a0acf	d0 11		bne $1a0ae2	            BNE found               ; Yes: return it
.1a0ad1					go_next
.1a0ad1	c2 20		rep #$20	            REP #$20
.1a0ad3	a5 00		lda $0800	            LDA BIP                 ; Update BIPPREV as the point to the previous character
.1a0ad5	85 04		sta $0804	            STA BIPPREV
.1a0ad7	e2 20		sep #$20	            SEP #$20
.1a0ad9	a5 02		lda $0802	            LDA BIP+2
.1a0adb	85 06		sta $0806	            STA BIPPREV+2
.1a0add	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a0ae0	80 a9		bra $1a0a8b	            BRA check_len           ; And try there
.1a0ae2					found
.1a0ae2	c9 81		cmp #$81	            CMP #TOK_MINUS          ; Found a token... is it minus?
.1a0ae4	d0 15		bne $1a0afb	            BNE done                ; Nope: go ahead and return it
.1a0ae6	20 76 09	jsr $1a0976	            JSR PREVCHAR
.1a0ae9	c9 00		cmp #$00	            CMP #0                  ; Did we get anything?
.1a0aeb	f0 11		beq $1a0afe	            BEQ syntax              ; No: line cannot start with minus... throw error
.1a0aed	89 80		bit #$80	            BIT #$80                ; Is it a token?
.1a0aef	f0 08		beq $1a0af9	            BEQ binaryminus         ; No: leave token unchanged
.1a0af1	c9 90		cmp #$90	            CMP #TOK_RPAREN         ; Is the token a right parenthesis?
.1a0af3	f0 04		beq $1a0af9	            BEQ binaryminus         ; Yes: then this should be a binary minus operator
.1a0af5	a9 af		lda #$af	            LDA #TOK_NEGATIVE       ; Otherwise: this should be a unary minus (negation)
.1a0af7	80 02		bra $1a0afb	            BRA done
.1a0af9	a9 81		lda #$81	binaryminus LDA #TOK_MINUS          ; It's data... so token should be for binary minus
.1a0afb					done
.1a0afb	2b		pld		            PLD
.1a0afc	28		plp		            PLP
.1a0afd	60		rts		            RTS
.1a0afe					syntax
.1a0afe	08		php		            PHP
.1a0aff	c2 20		rep #$20	            REP #$20
.1a0b01	48		pha		            PHA
.1a0b02	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0b05	5b		tcd		            TCD
.1a0b06	68		pla		            PLA
.1a0b07	28		plp		            PLP
.1a0b08	e2 20		sep #$20	            SEP #$20
.1a0b0a	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a0b0c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0b10	c2 20		rep #$20	            REP #$20
.1a0b12	29 ff 00	and #$00ff	            AND #$00FF
.1a0b15	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a0b18	e2 20		sep #$20	            SEP #$20
.1a0b1a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0b1d					SKIPQUOTED
.1a0b1d	08		php		            PHP
.1a0b1e	e2 20		sep #$20	            SEP #$20
.1a0b20					loop
.1a0b20	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a0b23	a7 00		lda [$0800]	            LDA [BIP]
.1a0b25	f0 04		beq $1a0b2b	            BEQ done                ; If EOL, just return
.1a0b27	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.1a0b29	d0 f5		bne $1a0b20	            BNE loop                ; No: keep skipping
.1a0b2b	28		plp		done        PLP
.1a0b2c	60		rts		            RTS
.1a0b2d					TKMATCH
.1a0b2d	da		phx		            PHX
.1a0b2e	5a		phy		            PHY
.1a0b2f	08		php		            PHP
.1a0b30	0b		phd		            PHD
.1a0b31	08		php		            PHP
.1a0b32	c2 20		rep #$20	            REP #$20
.1a0b34	48		pha		            PHA
.1a0b35	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0b38	5b		tcd		            TCD
.1a0b39	68		pla		            PLA
.1a0b3a	28		plp		            PLP
.1a0b3b	c2 20		rep #$20	            REP #$20
.1a0b3d	a5 04		lda $0804	            LDA BIPPREV
.1a0b3f	d0 0a		bne $1a0b4b	            BNE check_prev
.1a0b41	e2 20		sep #$20	            SEP #$20
.1a0b43	a5 04		lda $0804	            LDA BIPPREV
.1a0b45	d0 04		bne $1a0b4b	            BNE check_prev
.1a0b47	a9 00		lda #$00	            LDA #0
.1a0b49	80 0a		bra $1a0b55	            BRA save_delim
.1a0b4b					check_prev
.1a0b4b	e2 20		sep #$20	            SEP #$20
.1a0b4d	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.1a0b4f	20 4c 51	jsr $1a514c	            JSR ISVARCHAR
.1a0b52	a9 00		lda #$00	            LDA #0
.1a0b54	2a		rol a		            ROL A
.1a0b55	85 28		sta $0828	save_delim  STA SIGN1               ; SIGN1 := 1 if it is a variable name character
.1a0b57	c2 30		rep #$30	            REP #$30
.1a0b59	a9 fb 0c	lda #$0cfb	            LDA #<>TOKENS           ; Set INDEX to point to the first token record
.1a0b5c	85 08		sta $0808	            STA INDEX
.1a0b5e	e2 20		sep #$20	            SEP #$20
.1a0b60	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0b62	85 0a		sta $080a	            STA INDEX+2
.1a0b64	a2 80 00	ldx #$0080	            LDX #$80                ; Set the initial token ID
.1a0b67					token_loop
.1a0b67	e2 20		sep #$20	            SEP #$20
.1a0b69	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.1a0b6c	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the current token
.1a0b6e	f0 31		beq $1a0ba1	            BEQ no_match            ; Is it 0? We're out of tokens... no match found
.1a0b70	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it the same as the size of the window?
.1a0b72	d0 32		bne $1a0ba6	            BNE next_token          ; No: try the next token
.1a0b74	c2 30		rep #$30	            REP #$30
.1a0b76	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.1a0b79	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the pointer to the token's name
.1a0b7b	85 0c		sta $080c	            STA SCRATCH             ; Set SCRATCH to point to the token's name
.1a0b7d	e2 20		sep #$20	            SEP #$20
.1a0b7f	a9 1a		lda #$1a	            LDA #`DATA_BLOCK
.1a0b81	85 0e		sta $080e	            STA SCRATCH+2
.1a0b83	a5 28		lda $0828	            LDA SIGN1               ; Is previous character a variable name character?
.1a0b85	f0 07		beq $1a0b8e	            BEQ cmp_keyword         ; No: we can check for this token
.1a0b87	a7 0c		lda [$080c]	            LDA [SCRATCH]           ; Get the token's first character
.1a0b89	20 4c 51	jsr $1a514c	            JSR ISVARCHAR
.1a0b8c	b0 18		bcs $1a0ba6	            BCS next_token          ; Yes: skip this token
.1a0b8e					cmp_keyword
.1a0b8e	e2 10		sep #$10	            SEP #$10
.1a0b90	a0 00		ldy #$00	            LDY #0
.1a0b92	b7 00		lda [$0800],y	cmp_loop    LDA [BIP],Y             ; Get the character in the window
.1a0b94	20 56 05	jsr $1a0556	            JSR TOUPPERA
.1a0b97	d7 0c		cmp [$080c],y	            CMP [SCRATCH],Y         ; Compare to the character in the token
.1a0b99	d0 0b		bne $1a0ba6	            BNE next_token          ; If they don't match, try the next token
.1a0b9b	c8		iny		            INY                     ; Move to the next character in the window
.1a0b9c	c4 1e		cpy $081e	            CPY CURTOKLEN           ; Have we checked the whole window?
.1a0b9e	90 f2		bcc $1a0b92	            BCC cmp_loop            ; No: check this next character
.1a0ba0	8a		txa		            TXA                     ; Move the token ID to A
.1a0ba1	2b		pld		no_match    PLD
.1a0ba2	28		plp		            PLP
.1a0ba3	7a		ply		            PLY
.1a0ba4	fa		plx		            PLX
.1a0ba5	60		rts		            RTS
.1a0ba6					next_token
.1a0ba6	c2 30		rep #$30	            REP #$30
.1a0ba8	18		clc		            CLC
.1a0ba9	a5 08		lda $0808	            LDA INDEX
.1a0bab	69 08 00	adc #$0008	            ADC #size(TOKEN)
.1a0bae	85 08		sta $0808	            STA INDEX
.1a0bb0	e2 20		sep #$20	            SEP #$20
.1a0bb2	a5 0a		lda $080a	            LDA INDEX+2
.1a0bb4	69 00		adc #$00	            ADC #0
.1a0bb6	85 0a		sta $080a	            STA INDEX+2
.1a0bb8	e8		inx		            INX                     ; Increment the token ID
.1a0bb9	80 ac		bra $1a0b67	            BRA token_loop          ; And check that token
.1a0bbb					TKNEXTBIG
.1a0bbb	08		php		            PHP
.1a0bbc	0b		phd		            PHD
.1a0bbd	8b		phb		            PHB
.1a0bbe	08		php		            PHP
.1a0bbf	c2 20		rep #$20	            REP #$20
.1a0bc1	48		pha		            PHA
.1a0bc2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0bc5	5b		tcd		            TCD
.1a0bc6	68		pla		            PLA
.1a0bc7	28		plp		            PLP
.1a0bc8	c2 30		rep #$30	            REP #$30
.1a0bca	a9 fb 0c	lda #$0cfb	            LDA #<>TOKENS
.1a0bcd	85 08		sta $0808	            STA INDEX
.1a0bcf	a9 1a 00	lda #$001a	            LDA #`TOKENS
.1a0bd2	85 0a		sta $080a	            STA INDEX+2
.1a0bd4	64 0c		stz $080c	            STZ SCRATCH             ; Clear SCRATCH
.1a0bd6					loop
.1a0bd6	e2 20		sep #$20	            SEP #$20
.1a0bd8	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.1a0bdb	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the token
.1a0bdd	f0 1d		beq $1a0bfc	            BEQ done                ; If length is 0, we're done
.1a0bdf	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it >= CURTOKLEN?
.1a0be1	b0 06		bcs $1a0be9	            BGE skip                ; Yes: skip to the next token
.1a0be3	c5 0c		cmp $080c	            CMP SCRATCH             ; No: is it < SCRATCH?
.1a0be5	90 02		bcc $1a0be9	            BLT skip                ; Yes: skip to the next token
.1a0be7	85 0c		sta $080c	            STA SCRATCH             ; No: it's our new longest token!
.1a0be9					skip
.1a0be9	c2 20		rep #$20	            REP #$20
.1a0beb	18		clc		            CLC
.1a0bec	a5 08		lda $0808	            LDA INDEX
.1a0bee	69 08 00	adc #$0008	            ADC #size(TOKEN)
.1a0bf1	85 08		sta $0808	            STA INDEX
.1a0bf3	a5 0a		lda $080a	            LDA INDEX+2
.1a0bf5	69 00 00	adc #$0000	            ADC #0
.1a0bf8	85 0a		sta $080a	            STA INDEX+2
.1a0bfa	80 da		bra $1a0bd6	            BRA loop                ; And go around for another pass
.1a0bfc					done
.1a0bfc	e2 20		sep #$20	            SEP #$20
.1a0bfe	a5 0c		lda $080c	            LDA SCRATCH
.1a0c00	85 1e		sta $081e	            STA CURTOKLEN
.1a0c02	ab		plb		            PLB
.1a0c03	2b		pld		            PLD
.1a0c04	28		plp		            PLP
.1a0c05	60		rts		            RTS
.1a0c06					TKWRITE
.1a0c06	08		php		            PHP
.1a0c07	0b		phd		            PHD
.1a0c08	08		php		            PHP
.1a0c09	c2 20		rep #$20	            REP #$20
.1a0c0b	48		pha		            PHA
.1a0c0c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0c0f	5b		tcd		            TCD
.1a0c10	68		pla		            PLA
.1a0c11	28		plp		            PLP
.1a0c12	e2 20		sep #$20	            SEP #$20
.1a0c14	87 00		sta [$0800]	            STA [BIP]               ; Write the token to the line
.1a0c16	c2 20		rep #$20	            REP #$20
.1a0c18	18		clc		            CLC
.1a0c19	a5 00		lda $0800	            LDA BIP
.1a0c1b	69 01 00	adc #$0001	            ADC #1
.1a0c1e	85 08		sta $0808	            STA INDEX
.1a0c20	a5 02		lda $0802	            LDA BIP+2
.1a0c22	69 00 00	adc #$0000	            ADC #0
.1a0c25	85 0a		sta $080a	            STA INDEX+2
.1a0c27	e2 10		sep #$10	            SEP #$10
.1a0c29	a4 1e		ldy $081e	            LDY CURTOKLEN           ; Y will be the number of characters to move down
.1a0c2b	88		dey		            DEY
.1a0c2c					copy_down
.1a0c2c	e2 20		sep #$20	            SEP #$20
.1a0c2e	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the byte to move down
.1a0c30	87 08		sta [$0808]	            STA [INDEX]             ; Move it down
.1a0c32	f0 13		beq $1a0c47	            BEQ done                ; We've reached the end of the line
.1a0c34	c2 20		rep #$20	            REP #$20
.1a0c36	18		clc		            CLC
.1a0c37	a5 08		lda $0808	            LDA INDEX
.1a0c39	69 01 00	adc #$0001	            ADC #1
.1a0c3c	85 08		sta $0808	            STA INDEX
.1a0c3e	a5 0a		lda $080a	            LDA INDEX+2
.1a0c40	69 00 00	adc #$0000	            ADC #0
.1a0c43	85 0a		sta $080a	            STA INDEX+2
.1a0c45	80 e5		bra $1a0c2c	            BRA copy_down
.1a0c47	2b		pld		done        PLD
.1a0c48	28		plp		            PLP
.1a0c49	60		rts		            RTS
.1a0c4a					GETTOKREC
.1a0c4a	08		php		            PHP
.1a0c4b	c2 30		rep #$30	            REP #$30
.1a0c4d	29 7f 00	and #$007f	            AND #$007F
.1a0c50	0a		asl a		            ASL A
.1a0c51	0a		asl a		            ASL A
.1a0c52	0a		asl a		            ASL A
.1a0c53	18		clc		            CLC
.1a0c54	69 fb 0c	adc #$0cfb	            ADC #<>TOKENS
.1a0c57	aa		tax		            TAX                         ; X is now the data bank relative address of the token record
.1a0c58	28		plp		            PLP
.1a0c59	60		rts		            RTS
.1a0c5a					TOKPRECED
.1a0c5a	08		php		            PHP
.1a0c5b	8b		phb		            PHB
.1a0c5c	0b		phd		            PHD
.1a0c5d	08		php		            PHP
.1a0c5e	c2 20		rep #$20	            REP #$20
.1a0c60	48		pha		            PHA
.1a0c61	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0c64	5b		tcd		            TCD
.1a0c65	68		pla		            PLA
.1a0c66	28		plp		            PLP
.1a0c67	08		php		            PHP
.1a0c68	e2 20		sep #$20	            SEP #$20
.1a0c6a	48		pha		            PHA
.1a0c6b	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0c6d	48		pha		            PHA
.1a0c6e	ab		plb		            PLB
.1a0c6f	68		pla		            PLA
.1a0c70	28		plp		            PLP
.1a0c71	e2 20		sep #$20	            SEP #$20
.1a0c73	c2 10		rep #$10	            REP #$10
.1a0c75	20 4a 0c	jsr $1a0c4a	            JSR GETTOKREC
.1a0c78	bd 00 00	lda $1a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.1a0c7b	c2 20		rep #$20	            REP #$20
.1a0c7d	29 0f 00	and #$000f	            AND #$000F                  ; Mask off the type code
.1a0c80	2b		pld		            PLD
.1a0c81	ab		plb		            PLB
.1a0c82	28		plp		            PLP
.1a0c83	60		rts		            RTS
.1a0c84					TOKEVAL
.1a0c84	08		php		            PHP
.1a0c85	8b		phb		            PHB
.1a0c86	0b		phd		            PHD
.1a0c87	08		php		            PHP
.1a0c88	c2 20		rep #$20	            REP #$20
.1a0c8a	48		pha		            PHA
.1a0c8b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0c8e	5b		tcd		            TCD
.1a0c8f	68		pla		            PLA
.1a0c90	28		plp		            PLP
.1a0c91	08		php		            PHP
.1a0c92	e2 20		sep #$20	            SEP #$20
.1a0c94	48		pha		            PHA
.1a0c95	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0c97	48		pha		            PHA
.1a0c98	ab		plb		            PLB
.1a0c99	68		pla		            PLA
.1a0c9a	28		plp		            PLP
.1a0c9b	c2 30		rep #$30	            REP #$30
.1a0c9d	20 4a 0c	jsr $1a0c4a	            JSR GETTOKREC
.1a0ca0	bd 04 00	lda $1a0004,x	            LDA #TOKEN.eval,B,X         ; Get the address of the evaluation function
.1a0ca3	2b		pld		            PLD
.1a0ca4	ab		plb		            PLB
.1a0ca5	28		plp		            PLP
.1a0ca6	60		rts		            RTS
.1a0ca7					TOKTYPE
.1a0ca7	08		php		            PHP
.1a0ca8	8b		phb		            PHB
.1a0ca9	0b		phd		            PHD
.1a0caa	08		php		            PHP
.1a0cab	c2 20		rep #$20	            REP #$20
.1a0cad	48		pha		            PHA
.1a0cae	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0cb1	5b		tcd		            TCD
.1a0cb2	68		pla		            PLA
.1a0cb3	28		plp		            PLP
.1a0cb4	08		php		            PHP
.1a0cb5	e2 20		sep #$20	            SEP #$20
.1a0cb7	48		pha		            PHA
.1a0cb8	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0cba	48		pha		            PHA
.1a0cbb	ab		plb		            PLB
.1a0cbc	68		pla		            PLA
.1a0cbd	28		plp		            PLP
.1a0cbe	e2 20		sep #$20	            SEP #$20
.1a0cc0	c2 10		rep #$10	            REP #$10
.1a0cc2	20 4a 0c	jsr $1a0c4a	            JSR GETTOKREC
.1a0cc5	bd 00 00	lda $1a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.1a0cc8	c2 20		rep #$20	            REP #$20
.1a0cca	29 f0 00	and #$00f0	            AND #$00F0                  ; Mask off the type code
.1a0ccd	2b		pld		            PLD
.1a0cce	ab		plb		            PLB
.1a0ccf	28		plp		            PLP
.1a0cd0	60		rts		            RTS
.1a0cd1					TOKARITY
.1a0cd1	08		php		            PHP
.1a0cd2	8b		phb		            PHB
.1a0cd3	0b		phd		            PHD
.1a0cd4	08		php		            PHP
.1a0cd5	c2 20		rep #$20	            REP #$20
.1a0cd7	48		pha		            PHA
.1a0cd8	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0cdb	5b		tcd		            TCD
.1a0cdc	68		pla		            PLA
.1a0cdd	28		plp		            PLP
.1a0cde	08		php		            PHP
.1a0cdf	e2 20		sep #$20	            SEP #$20
.1a0ce1	48		pha		            PHA
.1a0ce2	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0ce4	48		pha		            PHA
.1a0ce5	ab		plb		            PLB
.1a0ce6	68		pla		            PLA
.1a0ce7	28		plp		            PLP
.1a0ce8	e2 20		sep #$20	            SEP #$20
.1a0cea	c2 10		rep #$10	            REP #$10
.1a0cec	20 4a 0c	jsr $1a0c4a	            JSR GETTOKREC
.1a0cef	bd 06 00	lda $1a0006,x	            LDA #TOKEN.arity,B,X        ; Get the arity
.1a0cf2	c2 20		rep #$20	            REP #$20
.1a0cf4	29 ff 00	and #$00ff	            AND #$00FF
.1a0cf7	2b		pld		            PLD
.1a0cf8	ab		plb		            PLB
.1a0cf9	28		plp		            PLP
.1a0cfa	60		rts		            RTS
=$00					TOK_EOL = $00
=$01					TOK_FUNC_OPEN = $01     ; A pseudo-token to push to the operator stack to mark
=$00					TOK_TY_OP = $00         ; The token is an operator
=$10					TOK_TY_CMD = $10        ; The token is a command (e.g. RUN, LIST, etc.)
=$20					TOK_TY_STMNT = $20      ; The token is a statement (e.g. INPUT, PRINT, DIM, etc.)
=$30					TOK_TY_FUNC = $30       ; The token is a function (e.g. SIN, COS, TAB, etc.)
=$40					TOK_TY_PUNCT = $40      ; The token is a punctuation mark (e.g. "(", ")")
=$50					TOK_TY_BYWRD = $50      ; The token is a by-word (e.g. STEP, TO, WEND, etc.)
.1a0cfb					TOKENS
=$80					TOK_PLUS = $80
>1ad010	2b 00				TOKEN_TEXT  .null "+"
>1a0cfb	03				precedence  .byte TOK_TY_OP | 3
>1a0cfc	01				length      .byte len("+")
>1a0cfd	10 d0				name        .word <>TOKEN_TEXT
>1a0cff	e2 27				eval        .word <>OP_PLUS
>1a0d01	02 00				arity       .word <>2
=$81					TOK_MINUS = $81
>1ad012	2d 00				TOKEN_TEXT  .null "-"
>1a0d03	03				precedence  .byte TOK_TY_OP | 3
>1a0d04	01				length      .byte len("-")
>1a0d05	12 d0				name        .word <>TOKEN_TEXT
>1a0d07	22 28				eval        .word <>OP_MINUS
>1a0d09	02 00				arity       .word <>2
=$82					TOK_MULT = $82
>1ad014	2a 00				TOKEN_TEXT  .null "*"
>1a0d0b	02				precedence  .byte TOK_TY_OP | 2
>1a0d0c	01				length      .byte len("*")
>1a0d0d	14 d0				name        .word <>TOKEN_TEXT
>1a0d0f	59 28				eval        .word <>OP_MULTIPLY
>1a0d11	02 00				arity       .word <>2
=$83					TOK_DIVIDE = $83
>1ad016	2f 00				TOKEN_TEXT  .null "/"
>1a0d13	02				precedence  .byte TOK_TY_OP | 2
>1a0d14	01				length      .byte len("/")
>1a0d15	16 d0				name        .word <>TOKEN_TEXT
>1a0d17	90 28				eval        .word <>OP_DIVIDE
>1a0d19	02 00				arity       .word <>2
=$84					TOK_MOD = $84
>1ad018	4d 4f 44 00			TOKEN_TEXT  .null "MOD"
>1a0d1b	02				precedence  .byte TOK_TY_OP | 2
>1a0d1c	03				length      .byte len("MOD")
>1a0d1d	18 d0				name        .word <>TOKEN_TEXT
>1a0d1f	9a 28				eval        .word <>OP_MOD
>1a0d21	02 00				arity       .word <>2
>1ad01c	5e 00				TOKEN_TEXT  .null "^"
>1a0d23	00				precedence  .byte TOK_TY_OP | 0
>1a0d24	01				length      .byte len("^")
>1a0d25	1c d0				name        .word <>TOKEN_TEXT
>1a0d27	ad 28				eval        .word <>OP_POW
>1a0d29	02 00				arity       .word <>2
=$86					TOK_LE = $86
>1ad01e	3c 3d 00			TOKEN_TEXT  .null "<="
>1a0d2b	04				precedence  .byte TOK_TY_OP | 4
>1a0d2c	02				length      .byte len("<=")
>1a0d2d	1e d0				name        .word <>TOKEN_TEXT
>1a0d2f	6b 2a				eval        .word <>OP_LTE
>1a0d31	02 00				arity       .word <>2
=$87					TOK_GE = $87
>1ad021	3e 3d 00			TOKEN_TEXT  .null ">="
>1a0d33	04				precedence  .byte TOK_TY_OP | 4
>1a0d34	02				length      .byte len(">=")
>1a0d35	21 d0				name        .word <>TOKEN_TEXT
>1a0d37	2b 2a				eval        .word <>OP_GTE
>1a0d39	02 00				arity       .word <>2
=$88					TOK_NE = $88
>1ad024	3c 3e 00			TOKEN_TEXT  .null "<>"
>1a0d3b	04				precedence  .byte TOK_TY_OP | 4
>1a0d3c	02				length      .byte len("<>")
>1a0d3d	24 d0				name        .word <>TOKEN_TEXT
>1a0d3f	eb 29				eval        .word <>OP_NE
>1a0d41	02 00				arity       .word <>2
>1ad027	3c 00				TOKEN_TEXT  .null "<"
>1a0d43	04				precedence  .byte TOK_TY_OP | 4
>1a0d44	01				length      .byte len("<")
>1a0d45	27 d0				name        .word <>TOKEN_TEXT
>1a0d47	2b 29				eval        .word <>OP_LT
>1a0d49	02 00				arity       .word <>2
=$8a					TOK_EQ = $8A
>1ad029	3d 00				TOKEN_TEXT  .null "="
>1a0d4b	04				precedence  .byte TOK_TY_OP | 4
>1a0d4c	01				length      .byte len("=")
>1a0d4d	29 d0				name        .word <>TOKEN_TEXT
>1a0d4f	ab 29				eval        .word <>OP_EQ
>1a0d51	02 00				arity       .word <>2
>1ad02b	3e 00				TOKEN_TEXT  .null ">"
>1a0d53	04				precedence  .byte TOK_TY_OP | 4
>1a0d54	01				length      .byte len(">")
>1a0d55	2b d0				name        .word <>TOKEN_TEXT
>1a0d57	6b 29				eval        .word <>OP_GT
>1a0d59	02 00				arity       .word <>2
>1ad02d	4e 4f 54 00			TOKEN_TEXT  .null "NOT"
>1a0d5b	05				precedence  .byte TOK_TY_OP | 5
>1a0d5c	03				length      .byte len("NOT")
>1a0d5d	2d d0				name        .word <>TOKEN_TEXT
>1a0d5f	15 29				eval        .word <>OP_NOT
>1a0d61	01 00				arity       .word <>1
>1ad031	41 4e 44 00			TOKEN_TEXT  .null "AND"
>1a0d63	06				precedence  .byte TOK_TY_OP | 6
>1a0d64	03				length      .byte len("AND")
>1a0d65	31 d0				name        .word <>TOKEN_TEXT
>1a0d67	e7 28				eval        .word <>OP_AND
>1a0d69	02 00				arity       .word <>2
>1ad035	4f 52 00			TOKEN_TEXT  .null "OR"
>1a0d6b	07				precedence  .byte TOK_TY_OP | 7
>1a0d6c	02				length      .byte len("OR")
>1a0d6d	35 d0				name        .word <>TOKEN_TEXT
>1a0d6f	fe 28				eval        .word <>OP_OR
>1a0d71	02 00				arity       .word <>2
=$8f					TOK_LPAREN = $8F
>1ad038	28 00				TOKEN_TEXT  .null "("
>1a0d73	ff				precedence  .byte TOK_TY_PUNCT | $FF
>1a0d74	01				length      .byte len("(")
>1a0d75	38 d0				name        .word <>TOKEN_TEXT
>1a0d77	00 00				eval        .word <>0
>1a0d79	00 00				arity       .word <>0
=$90					TOK_RPAREN = $90
>1ad03a	29 00				TOKEN_TEXT  .null ")"
>1a0d7b	40				precedence  .byte TOK_TY_PUNCT | 0
>1a0d7c	01				length      .byte len(")")
>1a0d7d	3a d0				name        .word <>TOKEN_TEXT
>1a0d7f	00 00				eval        .word <>0
>1a0d81	00 00				arity       .word <>0
=$91					TOK_REM = $91
>1ad03c	52 45 4d 00			TOKEN_TEXT  .null "REM"
>1a0d83	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d84	03				length      .byte len("REM")
>1a0d85	3c d0				name        .word <>TOKEN_TEXT
>1a0d87	7e 41				eval        .word <>S_REM
>1a0d89	00 00				arity       .word <>0
=$92					TOK_PRINT = $92
>1ad040	50 52 49 4e 54 00		TOKEN_TEXT  .null "PRINT"
>1a0d8b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d8c	05				length      .byte len("PRINT")
>1a0d8d	40 d0				name        .word <>TOKEN_TEXT
>1a0d8f	83 45				eval        .word <>S_PRINT
>1a0d91	00 00				arity       .word <>0
=$93					TOK_LET = $93
>1ad046	4c 45 54 00			TOKEN_TEXT  .null "LET"
>1a0d93	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d94	03				length      .byte len("LET")
>1a0d95	46 d0				name        .word <>TOKEN_TEXT
>1a0d97	ce 44				eval        .word <>S_LET
>1a0d99	00 00				arity       .word <>0
>1ad04a	47 4f 54 4f 00			TOKEN_TEXT  .null "GOTO"
>1a0d9b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d9c	04				length      .byte len("GOTO")
>1a0d9d	4a d0				name        .word <>TOKEN_TEXT
>1a0d9f	6e 44				eval        .word <>S_GOTO
>1a0da1	00 00				arity       .word <>0
=$95					TOK_END = $95
>1ad04f	45 4e 44 00			TOKEN_TEXT  .null "END"
>1a0da3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0da4	03				length      .byte len("END")
>1a0da5	4f d0				name        .word <>TOKEN_TEXT
>1a0da7	65 44				eval        .word <>S_END
>1a0da9	00 00				arity       .word <>0
>1ad053	49 46 00			TOKEN_TEXT  .null "IF"
>1a0dab	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dac	02				length      .byte len("IF")
>1a0dad	53 d0				name        .word <>TOKEN_TEXT
>1a0daf	fd 43				eval        .word <>S_IF
>1a0db1	00 00				arity       .word <>0
=$97					TOK_THEN = $97
>1ad056	54 48 45 4e 00			TOKEN_TEXT  .null "THEN"
>1a0db3	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0db4	04				length      .byte len("THEN")
>1a0db5	56 d0				name        .word <>TOKEN_TEXT
>1a0db7	00 00				eval        .word <>0
>1a0db9	00 00				arity       .word <>0
>1ad05b	45 4c 53 45 00			TOKEN_TEXT  .null "ELSE"
>1a0dbb	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0dbc	04				length      .byte len("ELSE")
>1a0dbd	5b d0				name        .word <>TOKEN_TEXT
>1a0dbf	00 00				eval        .word <>0
>1a0dc1	00 00				arity       .word <>0
>1ad060	47 4f 53 55 42 00		TOKEN_TEXT  .null "GOSUB"
>1a0dc3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dc4	05				length      .byte len("GOSUB")
>1a0dc5	60 d0				name        .word <>TOKEN_TEXT
>1a0dc7	40 43				eval        .word <>S_GOSUB
>1a0dc9	00 00				arity       .word <>0
>1ad066	52 45 54 55 52 4e 00		TOKEN_TEXT  .null "RETURN"
>1a0dcb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dcc	06				length      .byte len("RETURN")
>1a0dcd	66 d0				name        .word <>TOKEN_TEXT
>1a0dcf	b9 43				eval        .word <>S_RETURN
>1a0dd1	00 00				arity       .word <>0
=$9b					TOK_FOR = $9B
>1ad06d	46 4f 52 00			TOKEN_TEXT  .null "FOR"
>1a0dd3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dd4	03				length      .byte len("FOR")
>1a0dd5	6d d0				name        .word <>TOKEN_TEXT
>1a0dd7	95 41				eval        .word <>S_FOR
>1a0dd9	00 00				arity       .word <>0
=$9c					TOK_TO = $9C
>1ad071	54 4f 00			TOKEN_TEXT  .null "TO"
>1a0ddb	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0ddc	02				length      .byte len("TO")
>1a0ddd	71 d0				name        .word <>TOKEN_TEXT
>1a0ddf	00 00				eval        .word <>0
>1a0de1	00 00				arity       .word <>0
=$9d					TOK_STEP = $9D
>1ad074	53 54 45 50 00			TOKEN_TEXT  .null "STEP"
>1a0de3	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0de4	04				length      .byte len("STEP")
>1a0de5	74 d0				name        .word <>TOKEN_TEXT
>1a0de7	00 00				eval        .word <>0
>1a0de9	00 00				arity       .word <>0
=$9e					TOK_NEXT = $9E
>1ad079	4e 45 58 54 00			TOKEN_TEXT  .null "NEXT"
>1a0deb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dec	04				length      .byte len("NEXT")
>1a0ded	79 d0				name        .word <>TOKEN_TEXT
>1a0def	89 42				eval        .word <>S_NEXT
>1a0df1	00 00				arity       .word <>0
=$9f					TOK_DO = $9F
>1ad07e	44 4f 00			TOKEN_TEXT  .null "DO"
>1a0df3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0df4	02				length      .byte len("DO")
>1a0df5	7e d0				name        .word <>TOKEN_TEXT
>1a0df7	8f 41				eval        .word <>S_DO
>1a0df9	00 00				arity       .word <>0
=$a0					TOK_LOOP = $A0
>1ad081	4c 4f 4f 50 00			TOKEN_TEXT  .null "LOOP"
>1a0dfb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0dfc	04				length      .byte len("LOOP")
>1a0dfd	81 d0				name        .word <>TOKEN_TEXT
>1a0dff	92 41				eval        .word <>S_LOOP
>1a0e01	00 00				arity       .word <>0
>1ad086	57 48 49 4c 45 00		TOKEN_TEXT  .null "WHILE"
>1a0e03	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0e04	05				length      .byte len("WHILE")
>1a0e05	86 d0				name        .word <>TOKEN_TEXT
>1a0e07	00 00				eval        .word <>0
>1a0e09	00 00				arity       .word <>0
>1ad08c	55 4e 54 49 4c 00		TOKEN_TEXT  .null "UNTIL"
>1a0e0b	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0e0c	05				length      .byte len("UNTIL")
>1a0e0d	8c d0				name        .word <>TOKEN_TEXT
>1a0e0f	00 00				eval        .word <>0
>1a0e11	00 00				arity       .word <>0
>1ad092	45 58 49 54 00			TOKEN_TEXT  .null "EXIT"
>1a0e13	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e14	04				length      .byte len("EXIT")
>1a0e15	92 d0				name        .word <>TOKEN_TEXT
>1a0e17	8c 41				eval        .word <>S_EXIT
>1a0e19	00 00				arity       .word <>0
>1ad097	43 4c 52 00			TOKEN_TEXT  .null "CLR"
>1a0e1b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e1c	03				length      .byte len("CLR")
>1a0e1d	97 d0				name        .word <>TOKEN_TEXT
>1a0e1f	c4 44				eval        .word <>S_CLR
>1a0e21	00 00				arity       .word <>0
>1ad09b	53 54 4f 50 00			TOKEN_TEXT  .null "STOP"
>1a0e23	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e24	04				length      .byte len("STOP")
>1a0e25	9b d0				name        .word <>TOKEN_TEXT
>1a0e27	5f 41				eval        .word <>S_STOP
>1a0e29	00 00				arity       .word <>0
>1ad0a0	50 4f 4b 45 00			TOKEN_TEXT  .null "POKE"
>1a0e2b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e2c	04				length      .byte len("POKE")
>1a0e2d	a0 d0				name        .word <>TOKEN_TEXT
>1a0e2f	ef 40				eval        .word <>S_POKE
>1a0e31	00 00				arity       .word <>0
>1ad0a5	50 4f 4b 45 57 00		TOKEN_TEXT  .null "POKEW"
>1a0e33	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e34	05				length      .byte len("POKEW")
>1a0e35	a5 d0				name        .word <>TOKEN_TEXT
>1a0e37	85 40				eval        .word <>S_POKEW
>1a0e39	00 00				arity       .word <>0
>1ad0ab	50 4f 4b 45 4c 00		TOKEN_TEXT  .null "POKEL"
>1a0e3b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e3c	05				length      .byte len("POKEL")
>1a0e3d	ab d0				name        .word <>TOKEN_TEXT
>1a0e3f	12 40				eval        .word <>S_POKEL
>1a0e41	00 00				arity       .word <>0
>1ad0b1	43 4c 53 00			TOKEN_TEXT  .null "CLS"
>1a0e43	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e44	03				length      .byte len("CLS")
>1a0e45	b1 d0				name        .word <>TOKEN_TEXT
>1a0e47	0e 40				eval        .word <>S_CLS
>1a0e49	00 00				arity       .word <>0
>1ad0b5	52 45 41 44 00			TOKEN_TEXT  .null "READ"
>1a0e4b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e4c	04				length      .byte len("READ")
>1a0e4d	b5 d0				name        .word <>TOKEN_TEXT
>1a0e4f	ef 3e				eval        .word <>S_READ
>1a0e51	00 00				arity       .word <>0
=$ab					TOK_DATA = $AB
>1ad0ba	44 41 54 41 00			TOKEN_TEXT  .null "DATA"
>1a0e53	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e54	04				length      .byte len("DATA")
>1a0e55	ba d0				name        .word <>TOKEN_TEXT
>1a0e57	01 40				eval        .word <>S_DATA
>1a0e59	00 00				arity       .word <>0
>1ad0bf	52 45 53 54 4f 52 45 00		TOKEN_TEXT  .null "RESTORE"
>1a0e5b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e5c	07				length      .byte len("RESTORE")
>1a0e5d	bf d0				name        .word <>TOKEN_TEXT
>1a0e5f	05 40				eval        .word <>S_RESTORE
>1a0e61	00 00				arity       .word <>0
>1ad0c7	44 49 4d 00			TOKEN_TEXT  .null "DIM"
>1a0e63	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e64	03				length      .byte len("DIM")
>1a0e65	c7 d0				name        .word <>TOKEN_TEXT
>1a0e67	42 3e				eval        .word <>S_DIM
>1a0e69	00 00				arity       .word <>0
>1ad0cb	43 41 4c 4c 00			TOKEN_TEXT  .null "CALL"
>1a0e6b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e6c	04				length      .byte len("CALL")
>1a0e6d	cb d0				name        .word <>TOKEN_TEXT
>1a0e6f	ab 3d				eval        .word <>S_CALL
>1a0e71	00 00				arity       .word <>0
=$af					TOK_NEGATIVE = $AF
>1ad0d0	2d 00				TOKEN_TEXT  .null "-"
>1a0e73	00				precedence  .byte TOK_TY_OP | 0
>1a0e74	01				length      .byte len("-")
>1a0e75	d0 d0				name        .word <>TOKEN_TEXT
>1a0e77	ab 2a				eval        .word <>OP_NEGATIVE
>1a0e79	01 00				arity       .word <>1
>1ad0d2	4c 45 4e 00			TOKEN_TEXT  .null "LEN"
>1a0e7b	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e7c	03				length      .byte len("LEN")
>1a0e7d	d2 d0				name        .word <>TOKEN_TEXT
>1a0e7f	9b 4b				eval        .word <>FN_LEN
>1a0e81	00 00				arity       .word <>0
>1ad0d6	50 45 45 4b 00			TOKEN_TEXT  .null "PEEK"
>1a0e83	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e84	04				length      .byte len("PEEK")
>1a0e85	d6 d0				name        .word <>TOKEN_TEXT
>1a0e87	eb 4b				eval        .word <>FN_PEEK
>1a0e89	00 00				arity       .word <>0
>1ad0db	50 45 45 4b 57 00		TOKEN_TEXT  .null "PEEKW"
>1a0e8b	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e8c	05				length      .byte len("PEEKW")
>1a0e8d	db d0				name        .word <>TOKEN_TEXT
>1a0e8f	b4 4c				eval        .word <>FN_PEEKW
>1a0e91	00 00				arity       .word <>0
>1ad0e1	50 45 45 4b 4c 00		TOKEN_TEXT  .null "PEEKL"
>1a0e93	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e94	05				length      .byte len("PEEKL")
>1a0e95	e1 d0				name        .word <>TOKEN_TEXT
>1a0e97	41 4c				eval        .word <>FN_PEEKL
>1a0e99	00 00				arity       .word <>0
>1ad0e7	43 48 52 24 00			TOKEN_TEXT  .null "CHR$"
>1a0e9b	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e9c	04				length      .byte len("CHR$")
>1a0e9d	e7 d0				name        .word <>TOKEN_TEXT
>1a0e9f	13 4d				eval        .word <>FN_CHR
>1a0ea1	00 00				arity       .word <>0
>1ad0ec	41 53 43 00			TOKEN_TEXT  .null "ASC"
>1a0ea3	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ea4	03				length      .byte len("ASC")
>1a0ea5	ec d0				name        .word <>TOKEN_TEXT
>1a0ea7	68 4d				eval        .word <>FN_ASC
>1a0ea9	00 00				arity       .word <>0
>1ad0f0	53 50 43 00			TOKEN_TEXT  .null "SPC"
>1a0eab	30				precedence  .byte TOK_TY_FUNC | 0
>1a0eac	03				length      .byte len("SPC")
>1a0ead	f0 d0				name        .word <>TOKEN_TEXT
>1a0eaf	ad 4d				eval        .word <>FN_SPC
>1a0eb1	00 00				arity       .word <>0
>1ad0f4	54 41 42 00			TOKEN_TEXT  .null "TAB"
>1a0eb3	30				precedence  .byte TOK_TY_FUNC | 0
>1a0eb4	03				length      .byte len("TAB")
>1a0eb5	f4 d0				name        .word <>TOKEN_TEXT
>1a0eb7	36 4e				eval        .word <>FN_TAB
>1a0eb9	00 00				arity       .word <>0
>1ad0f8	41 42 53 00			TOKEN_TEXT  .null "ABS"
>1a0ebb	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ebc	03				length      .byte len("ABS")
>1a0ebd	f8 d0				name        .word <>TOKEN_TEXT
>1a0ebf	bf 4e				eval        .word <>FN_ABS
>1a0ec1	00 00				arity       .word <>0
>1ad0fc	53 47 4e 00			TOKEN_TEXT  .null "SGN"
>1a0ec3	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ec4	03				length      .byte len("SGN")
>1a0ec5	fc d0				name        .word <>TOKEN_TEXT
>1a0ec7	21 4f				eval        .word <>FN_SGN
>1a0ec9	00 00				arity       .word <>0
>1ad100	48 45 58 24 00			TOKEN_TEXT  .null "HEX$"
>1a0ecb	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ecc	04				length      .byte len("HEX$")
>1a0ecd	00 d1				name        .word <>TOKEN_TEXT
>1a0ecf	0d 4b				eval        .word <>FN_HEX
>1a0ed1	00 00				arity       .word <>0
>1ad105	44 45 43 00			TOKEN_TEXT  .null "DEC"
>1a0ed3	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ed4	03				length      .byte len("DEC")
>1a0ed5	05 d1				name        .word <>TOKEN_TEXT
>1a0ed7	ac 4a				eval        .word <>FN_DEC
>1a0ed9	00 00				arity       .word <>0
>1ad109	53 54 52 24 00			TOKEN_TEXT  .null "STR$"
>1a0edb	30				precedence  .byte TOK_TY_FUNC | 0
>1a0edc	04				length      .byte len("STR$")
>1a0edd	09 d1				name        .word <>TOKEN_TEXT
>1a0edf	5e 4a				eval        .word <>FN_STR
>1a0ee1	00 00				arity       .word <>0
>1ad10e	56 41 4c 00			TOKEN_TEXT  .null "VAL"
>1a0ee3	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ee4	03				length      .byte len("VAL")
>1a0ee5	0e d1				name        .word <>TOKEN_TEXT
>1a0ee7	08 4a				eval        .word <>FN_VAL
>1a0ee9	00 00				arity       .word <>0
>1ad112	4c 45 46 54 24 00		TOKEN_TEXT  .null "LEFT$"
>1a0eeb	30				precedence  .byte TOK_TY_FUNC | 0
>1a0eec	05				length      .byte len("LEFT$")
>1a0eed	12 d1				name        .word <>TOKEN_TEXT
>1a0eef	3f 49				eval        .word <>FN_LEFT
>1a0ef1	00 00				arity       .word <>0
>1ad118	52 49 47 48 54 24 00		TOKEN_TEXT  .null "RIGHT$"
>1a0ef3	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ef4	06				length      .byte len("RIGHT$")
>1a0ef5	18 d1				name        .word <>TOKEN_TEXT
>1a0ef7	5e 48				eval        .word <>FN_RIGHT
>1a0ef9	00 00				arity       .word <>0
>1ad11f	4d 49 44 24 00			TOKEN_TEXT  .null "MID$"
>1a0efb	30				precedence  .byte TOK_TY_FUNC | 0
>1a0efc	04				length      .byte len("MID$")
>1a0efd	1f d1				name        .word <>TOKEN_TEXT
>1a0eff	a9 47				eval        .word <>FN_MID
>1a0f01	00 00				arity       .word <>0
>1ad124	52 55 4e 00			TOKEN_TEXT  .null "RUN"
>1a0f03	10				precedence  .byte TOK_TY_CMD | 0
>1a0f04	03				length      .byte len("RUN")
>1a0f05	24 d1				name        .word <>TOKEN_TEXT
>1a0f07	88 50				eval        .word <>CMD_RUN
>1a0f09	00 00				arity       .word <>0
>1ad128	4e 45 57 00			TOKEN_TEXT  .null "NEW"
>1a0f0b	10				precedence  .byte TOK_TY_CMD | 0
>1a0f0c	03				length      .byte len("NEW")
>1a0f0d	28 d1				name        .word <>TOKEN_TEXT
>1a0f0f	53 50				eval        .word <>CMD_NEW
>1a0f11	00 00				arity       .word <>0
>1ad12c	4c 4f 41 44 00			TOKEN_TEXT  .null "LOAD"
>1a0f13	10				precedence  .byte TOK_TY_CMD | 0
>1a0f14	04				length      .byte len("LOAD")
>1a0f15	2c d1				name        .word <>TOKEN_TEXT
>1a0f17	5c 6c				eval        .word <>CMD_LOAD
>1a0f19	00 00				arity       .word <>0
>1ad131	4c 49 53 54 00			TOKEN_TEXT  .null "LIST"
>1a0f1b	10				precedence  .byte TOK_TY_CMD | 0
>1a0f1c	04				length      .byte len("LIST")
>1a0f1d	31 d1				name        .word <>TOKEN_TEXT
>1a0f1f	9f 50				eval        .word <>CMD_LIST
>1a0f21	00 00				arity       .word <>0
>1ad136	44 49 52 00			TOKEN_TEXT  .null "DIR"
>1a0f23	10				precedence  .byte TOK_TY_CMD | 0
>1a0f24	03				length      .byte len("DIR")
>1a0f25	36 d1				name        .word <>TOKEN_TEXT
>1a0f27	83 69				eval        .word <>CMD_DIR
>1a0f29	00 00				arity       .word <>0
>1ad13a	42 4c 4f 41 44 00		TOKEN_TEXT  .null "BLOAD"
>1a0f2b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f2c	05				length      .byte len("BLOAD")
>1a0f2d	3a d1				name        .word <>TOKEN_TEXT
>1a0f2f	2e 6b				eval        .word <>S_BLOAD
>1a0f31	00 00				arity       .word <>0
>1ad140	42 52 55 4e 00			TOKEN_TEXT  .null "BRUN"
>1a0f33	10				precedence  .byte TOK_TY_CMD | 0
>1a0f34	04				length      .byte len("BRUN")
>1a0f35	40 d1				name        .word <>TOKEN_TEXT
>1a0f37	09 6c				eval        .word <>CMD_BRUN
>1a0f39	00 00				arity       .word <>0
>1ad145	42 53 41 56 45 00		TOKEN_TEXT  .null "BSAVE"
>1a0f3b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f3c	05				length      .byte len("BSAVE")
>1a0f3d	45 d1				name        .word <>TOKEN_TEXT
>1a0f3f	15 6d				eval        .word <>S_BSAVE
>1a0f41	00 00				arity       .word <>0
>1ad14b	44 45 4c 00			TOKEN_TEXT  .null "DEL"
>1a0f43	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f44	03				length      .byte len("DEL")
>1a0f45	4b d1				name        .word <>TOKEN_TEXT
>1a0f47	34 6e				eval        .word <>S_DEL
>1a0f49	00 00				arity       .word <>0
>1ad14f	53 41 56 45 00			TOKEN_TEXT  .null "SAVE"
>1a0f4b	10				precedence  .byte TOK_TY_CMD | 0
>1a0f4c	04				length      .byte len("SAVE")
>1a0f4d	4f d1				name        .word <>TOKEN_TEXT
>1a0f4f	a1 6d				eval        .word <>CMD_SAVE
>1a0f51	00 00				arity       .word <>0
>1ad154	52 45 4e 41 4d 45 00		TOKEN_TEXT  .null "RENAME"
>1a0f53	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f54	06				length      .byte len("RENAME")
>1a0f55	54 d1				name        .word <>TOKEN_TEXT
>1a0f57	aa 6e				eval        .word <>S_RENAME
>1a0f59	00 00				arity       .word <>0
>1ad15b	43 4f 50 59 00			TOKEN_TEXT  .null "COPY"
>1a0f5b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f5c	04				length      .byte len("COPY")
>1a0f5d	5b d1				name        .word <>TOKEN_TEXT
>1a0f5f	ce 6f				eval        .word <>S_COPY
>1a0f61	00 00				arity       .word <>0
>1ad160	4d 4f 4e 49 54 4f 52 00		TOKEN_TEXT  .null "MONITOR"
>1a0f63	10				precedence  .byte TOK_TY_CMD | 0
>1a0f64	07				length      .byte len("MONITOR")
>1a0f65	60 d1				name        .word <>TOKEN_TEXT
>1a0f67	50 50				eval        .word <>CMD_MONITOR
>1a0f69	00 00				arity       .word <>0
>1ad168	47 45 54 00			TOKEN_TEXT  .null "GET"
>1a0f6b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f6c	03				length      .byte len("GET")
>1a0f6d	68 d1				name        .word <>TOKEN_TEXT
>1a0f6f	39 3d				eval        .word <>S_GET
>1a0f71	00 00				arity       .word <>0
>1ad16c	49 4e 50 55 54 00		TOKEN_TEXT  .null "INPUT"
>1a0f73	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f74	05				length      .byte len("INPUT")
>1a0f75	6c d1				name        .word <>TOKEN_TEXT
>1a0f77	49 3c				eval        .word <>S_INPUT
>1a0f79	00 00				arity       .word <>0
>1ad172	53 45 54 42 4f 52 44 45		TOKEN_TEXT  .null "SETBORDER"
>1ad17a	52 00
>1a0f7b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f7c	09				length      .byte len("SETBORDER")
>1a0f7d	72 d1				name        .word <>TOKEN_TEXT
>1a0f7f	6a 2c				eval        .word <>S_SETBORDER
>1a0f81	00 00				arity       .word <>0
>1ad17c	54 45 58 54 43 4f 4c 4f		TOKEN_TEXT  .null "TEXTCOLOR"
>1ad184	52 00
>1a0f83	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f84	09				length      .byte len("TEXTCOLOR")
>1a0f85	7c d1				name        .word <>TOKEN_TEXT
>1a0f87	f7 2b				eval        .word <>S_TEXTCOLOR
>1a0f89	00 00				arity       .word <>0
>1ad186	53 45 54 42 47 43 4f 4c		TOKEN_TEXT  .null "SETBGCOLOR"
>1ad18e	4f 52 00
>1a0f8b	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f8c	0a				length      .byte len("SETBGCOLOR")
>1a0f8d	86 d1				name        .word <>TOKEN_TEXT
>1a0f8f	27 2c				eval        .word <>S_SETBGCOLOR
>1a0f91	00 00				arity       .word <>0
>1ad191	53 45 54 44 41 54 45 00		TOKEN_TEXT  .null "SETDATE"
>1a0f93	20				precedence  .byte TOK_TY_STMNT | 0
>1a0f94	07				length      .byte len("SETDATE")
>1a0f95	91 d1				name        .word <>TOKEN_TEXT
>1a0f97	64 2b				eval        .word <>S_SETDATE
>1a0f99	00 00				arity       .word <>0
>1ad199	47 45 54 44 41 54 45 24		TOKEN_TEXT  .null "GETDATE$"
>1ad1a1	00
>1a0f9b	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f9c	08				length      .byte len("GETDATE$")
>1a0f9d	99 d1				name        .word <>TOKEN_TEXT
>1a0f9f	60 46				eval        .word <>F_GETDATE
>1a0fa1	00 00				arity       .word <>0
>1ad1a2	53 45 54 54 49 4d 45 00		TOKEN_TEXT  .null "SETTIME"
>1a0fa3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fa4	07				length      .byte len("SETTIME")
>1a0fa5	a2 d1				name        .word <>TOKEN_TEXT
>1a0fa7	f9 2a				eval        .word <>S_SETTIME
>1a0fa9	00 00				arity       .word <>0
>1ad1aa	47 45 54 54 49 4d 45 24		TOKEN_TEXT  .null "GETTIME$"
>1ad1b2	00
>1a0fab	30				precedence  .byte TOK_TY_FUNC | 0
>1a0fac	08				length      .byte len("GETTIME$")
>1a0fad	aa d1				name        .word <>TOKEN_TEXT
>1a0faf	ca 46				eval        .word <>F_GETTIME
>1a0fb1	00 00				arity       .word <>0
>1ad1b3	47 52 41 50 48 49 43 53		TOKEN_TEXT  .null "GRAPHICS"
>1ad1bb	00
>1a0fb3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fb4	08				length      .byte len("GRAPHICS")
>1a0fb5	b3 d1				name        .word <>TOKEN_TEXT
>1a0fb7	af 2d				eval        .word <>S_GRAPHICS
>1a0fb9	00 00				arity       .word <>0
>1ad1bc	53 45 54 43 4f 4c 4f 52		TOKEN_TEXT  .null "SETCOLOR"
>1ad1c4	00
>1a0fbb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fbc	08				length      .byte len("SETCOLOR")
>1a0fbd	bc d1				name        .word <>TOKEN_TEXT
>1a0fbf	e3 2c				eval        .word <>S_SETCOLOR
>1a0fc1	00 00				arity       .word <>0
>1ad1c5	42 49 54 4d 41 50 00		TOKEN_TEXT  .null "BITMAP"
>1a0fc3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fc4	06				length      .byte len("BITMAP")
>1a0fc5	c5 d1				name        .word <>TOKEN_TEXT
>1a0fc7	e9 2e				eval        .word <>S_BITMAP
>1a0fc9	00 00				arity       .word <>0
>1ad1cc	43 4c 52 42 49 54 4d 41		TOKEN_TEXT  .null "CLRBITMAP"
>1ad1d4	50 00
>1a0fcb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fcc	09				length      .byte len("CLRBITMAP")
>1a0fcd	cc d1				name        .word <>TOKEN_TEXT
>1a0fcf	f1 2f				eval        .word <>S_CLRBITMAP
>1a0fd1	00 00				arity       .word <>0
>1ad1d6	50 4c 4f 54 00			TOKEN_TEXT  .null "PLOT"
>1a0fd3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fd4	04				length      .byte len("PLOT")
>1a0fd5	d6 d1				name        .word <>TOKEN_TEXT
>1a0fd7	4e 31				eval        .word <>S_PLOT
>1a0fd9	00 00				arity       .word <>0
>1ad1db	4c 49 4e 45 00			TOKEN_TEXT  .null "LINE"
>1a0fdb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fdc	04				length      .byte len("LINE")
>1a0fdd	db d1				name        .word <>TOKEN_TEXT
>1a0fdf	bf 31				eval        .word <>S_LINE
>1a0fe1	00 00				arity       .word <>0
>1ad1e0	46 49 4c 4c 00			TOKEN_TEXT  .null "FILL"
>1a0fe3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fe4	04				length      .byte len("FILL")
>1a0fe5	e0 d1				name        .word <>TOKEN_TEXT
>1a0fe7	58 32				eval        .word <>S_FILL
>1a0fe9	00 00				arity       .word <>0
>1ad1e5	53 50 52 49 54 45 00		TOKEN_TEXT  .null "SPRITE"
>1a0feb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0fec	06				length      .byte len("SPRITE")
>1a0fed	e5 d1				name        .word <>TOKEN_TEXT
>1a0fef	94 33				eval        .word <>S_SPRITE
>1a0ff1	00 00				arity       .word <>0
>1ad1ec	53 50 52 49 54 45 41 54		TOKEN_TEXT  .null "SPRITEAT"
>1ad1f4	00
>1a0ff3	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ff4	08				length      .byte len("SPRITEAT")
>1a0ff5	ec d1				name        .word <>TOKEN_TEXT
>1a0ff7	32 34				eval        .word <>S_SPRITEAT
>1a0ff9	00 00				arity       .word <>0
>1ad1f5	53 50 52 49 54 45 53 48		TOKEN_TEXT  .null "SPRITESHOW"
>1ad1fd	4f 57 00
>1a0ffb	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ffc	0a				length      .byte len("SPRITESHOW")
>1a0ffd	f5 d1				name        .word <>TOKEN_TEXT
>1a0fff	80 34				eval        .word <>S_SPRITESHOW
>1a1001	00 00				arity       .word <>0
>1ad200	54 49 4c 45 53 45 54 00		TOKEN_TEXT  .null "TILESET"
>1a1003	20				precedence  .byte TOK_TY_STMNT | 0
>1a1004	07				length      .byte len("TILESET")
>1a1005	00 d2				name        .word <>TOKEN_TEXT
>1a1007	b7 35				eval        .word <>S_TILESET
>1a1009	00 00				arity       .word <>0
>1ad208	54 49 4c 45 4d 41 50 00		TOKEN_TEXT  .null "TILEMAP"
>1a100b	20				precedence  .byte TOK_TY_STMNT | 0
>1a100c	07				length      .byte len("TILEMAP")
>1a100d	08 d2				name        .word <>TOKEN_TEXT
>1a100f	35 36				eval        .word <>S_TILEMAP
>1a1011	00 00				arity       .word <>0
>1ad210	54 49 4c 45 53 48 4f 57		TOKEN_TEXT  .null "TILESHOW"
>1ad218	00
>1a1013	20				precedence  .byte TOK_TY_STMNT | 0
>1a1014	08				length      .byte len("TILESHOW")
>1a1015	10 d2				name        .word <>TOKEN_TEXT
>1a1017	a7 36				eval        .word <>S_TILESHOW
>1a1019	00 00				arity       .word <>0
>1ad219	54 49 4c 45 41 54 00		TOKEN_TEXT  .null "TILEAT"
>1a101b	20				precedence  .byte TOK_TY_STMNT | 0
>1a101c	06				length      .byte len("TILEAT")
>1a101d	19 d2				name        .word <>TOKEN_TEXT
>1a101f	e4 36				eval        .word <>S_TILEAT
>1a1021	00 00				arity       .word <>0
>1ad220	4d 45 4d 43 4f 50 59 00		TOKEN_TEXT  .null "MEMCOPY"
>1a1023	20				precedence  .byte TOK_TY_STMNT | 0
>1a1024	07				length      .byte len("MEMCOPY")
>1a1025	20 d2				name        .word <>TOKEN_TEXT
>1a1027	14 3a				eval        .word <>S_MEMCOPY
>1a1029	00 00				arity       .word <>0
=$e6					TOK_LINEAR = $E6
>1ad228	4c 49 4e 45 41 52 00		TOKEN_TEXT  .null "LINEAR"
>1a102b	50				precedence  .byte TOK_TY_BYWRD | 0
>1a102c	06				length      .byte len("LINEAR")
>1a102d	28 d2				name        .word <>TOKEN_TEXT
>1a102f	00 00				eval        .word <>0
>1a1031	00 00				arity       .word <>0
=$e7					TOK_RECT = $E7
>1ad22f	52 45 43 54 00			TOKEN_TEXT  .null "RECT"
>1a1033	50				precedence  .byte TOK_TY_BYWRD | 0
>1a1034	04				length      .byte len("RECT")
>1a1035	2f d2				name        .word <>TOKEN_TEXT
>1a1037	00 00				eval        .word <>0
>1a1039	00 00				arity       .word <>0
>1ad234	4c 4f 43 41 54 45 00		TOKEN_TEXT  .null "LOCATE"
>1a103b	20				precedence  .byte TOK_TY_STMNT | 0
>1a103c	06				length      .byte len("LOCATE")
>1a103d	34 d2				name        .word <>TOKEN_TEXT
>1a103f	29 3c				eval        .word <>S_LOCATE
>1a1041	00 00				arity       .word <>0
>1ad23b	49 4e 54 00			TOKEN_TEXT  .null "INT"
>1a1043	30				precedence  .byte TOK_TY_FUNC | 0
>1a1044	03				length      .byte len("INT")
>1a1045	3b d2				name        .word <>TOKEN_TEXT
>1a1047	77 4f				eval        .word <>FN_INT
>1a1049	00 00				arity       .word <>0
>1ad23f	52 4e 44 00			TOKEN_TEXT  .null "RND"
>1a104b	30				precedence  .byte TOK_TY_FUNC | 0
>1a104c	03				length      .byte len("RND")
>1a104d	3f d2				name        .word <>TOKEN_TEXT
>1a104f	2f 47				eval        .word <>FN_RND
>1a1051	00 00				arity       .word <>0
>1ad243	53 49 4e 00			TOKEN_TEXT  .null "SIN"
>1a1053	30				precedence  .byte TOK_TY_FUNC | 0
>1a1054	03				length      .byte len("SIN")
>1a1055	43 d2				name        .word <>TOKEN_TEXT
>1a1057	8a 4f				eval        .word <>FN_SIN
>1a1059	00 00				arity       .word <>0
>1ad247	43 4f 53 00			TOKEN_TEXT  .null "COS"
>1a105b	30				precedence  .byte TOK_TY_FUNC | 0
>1a105c	03				length      .byte len("COS")
>1a105d	47 d2				name        .word <>TOKEN_TEXT
>1a105f	a0 4f				eval        .word <>FN_COS
>1a1061	00 00				arity       .word <>0
>1ad24b	54 41 4e 00			TOKEN_TEXT  .null "TAN"
>1a1063	30				precedence  .byte TOK_TY_FUNC | 0
>1a1064	03				length      .byte len("TAN")
>1a1065	4b d2				name        .word <>TOKEN_TEXT
>1a1067	b6 4f				eval        .word <>FN_TAN
>1a1069	00 00				arity       .word <>0
>1ad24f	4c 4e 00			TOKEN_TEXT  .null "LN"
>1a106b	30				precedence  .byte TOK_TY_FUNC | 0
>1a106c	02				length      .byte len("LN")
>1a106d	4f d2				name        .word <>TOKEN_TEXT
>1a106f	cc 4f				eval        .word <>FN_LN
>1a1071	00 00				arity       .word <>0
>1ad252	41 43 4f 53 00			TOKEN_TEXT  .null "ACOS"
>1a1073	30				precedence  .byte TOK_TY_FUNC | 0
>1a1074	04				length      .byte len("ACOS")
>1a1075	52 d2				name        .word <>TOKEN_TEXT
>1a1077	e2 4f				eval        .word <>FN_ACOS
>1a1079	00 00				arity       .word <>0
>1ad257	41 53 49 4e 00			TOKEN_TEXT  .null "ASIN"
>1a107b	30				precedence  .byte TOK_TY_FUNC | 0
>1a107c	04				length      .byte len("ASIN")
>1a107d	57 d2				name        .word <>TOKEN_TEXT
>1a107f	f8 4f				eval        .word <>FN_ASIN
>1a1081	00 00				arity       .word <>0
>1ad25c	41 54 41 4e 00			TOKEN_TEXT  .null "ATAN"
>1a1083	30				precedence  .byte TOK_TY_FUNC | 0
>1a1084	04				length      .byte len("ATAN")
>1a1085	5c d2				name        .word <>TOKEN_TEXT
>1a1087	0e 50				eval        .word <>FN_ATAN
>1a1089	00 00				arity       .word <>0
>1ad261	45 58 50 00			TOKEN_TEXT  .null "EXP"
>1a108b	30				precedence  .byte TOK_TY_FUNC | 0
>1a108c	03				length      .byte len("EXP")
>1a108d	61 d2				name        .word <>TOKEN_TEXT
>1a108f	24 50				eval        .word <>FN_EXP
>1a1091	00 00				arity       .word <>0
>1ad265	53 51 52 00			TOKEN_TEXT  .null "SQR"
>1a1093	30				precedence  .byte TOK_TY_FUNC | 0
>1a1094	03				length      .byte len("SQR")
>1a1095	65 d2				name        .word <>TOKEN_TEXT
>1a1097	3a 50				eval        .word <>FN_SQR
>1a1099	00 00				arity       .word <>0
>1ad269	49 4e 4b 45 59 00		TOKEN_TEXT  .null "INKEY"
>1a109b	30				precedence  .byte TOK_TY_FUNC | 0
>1a109c	05				length      .byte len("INKEY")
>1a109d	69 d2				name        .word <>TOKEN_TEXT
>1a109f	85 47				eval        .word <>FN_INKEY
>1a10a1	00 00				arity       .word <>0
>1a10a3	00 00 00 00 00 00 00 00		            .word 0, 0, 0, 0

;******  Return to file: src\basic816.s


;******  Processing file: src\heap.s

>08b7					ALLOCATED   .long ?     ; Pointer to the most recently allocated object
>08ba					HEAP        .long ?     ; Pointer to the top of the heap (next empty byte)
>08bd					FREED       .long ?     ; Pointer to a linked list of freed heap objects
>08c0					CURRBLOCK   .long ?     ; Pointer to the current heap allocated block
>08c3					CURRHEADER  .long ?     ; Pointer to the header of the current block
>08c6					CURREND     .long ?     ; Pointer to the byte immediately after the current block
>08c9					CURRFREED   .long ?     ; Pointer to the current freed block
>08cc					FREEDEND    .long ?     ; Pointer to the byte immediately after the current freed block
>08cf					LASTFREED   .long ?     ;
.0000					HEAPOBJ
>0000					TYPE        .byte ?     ; Code for the type of object allocated
>0001					COUNT       .byte ?     ; Number of references to the heap object
>0002					NEXT        .long ?     ; Pointer to the next object in the list (used when freed)
>0005					END         .long ?     ; Pointer to the next byte after the block
.1a10ab					INITHEAP
.1a10ab	08		php		            PHP
.1a10ac	0b		phd		            PHD
.1a10ad	08		php		            PHP
.1a10ae	c2 20		rep #$20	            REP #$20
.1a10b0	48		pha		            PHA
.1a10b1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a10b4	5b		tcd		            TCD
.1a10b5	68		pla		            PLA
.1a10b6	28		plp		            PLP
.1a10b7	c2 30		rep #$30	            REP #$30
.1a10b9	a9 ff ff	lda #$ffff	            LDA #<>HEAP_TOP         ; Set the HEAP to the top
.1a10bc	85 ba		sta $08ba	            STA HEAP
.1a10be	e2 20		sep #$20	            SEP #$20
.1a10c0	a9 17		lda #$17	            LDA #`HEAP_TOP
.1a10c2	85 bc		sta $08bc	            STA HEAP+2
.1a10c4	c2 20		rep #$20	            REP #$20
.1a10c6	64 b7		stz $08b7	            STZ ALLOCATED           ; And clear the pointer to the allocated objects
.1a10c8	64 bd		stz $08bd	            STZ FREED               ; as well as the list of freed objects
.1a10ca	e2 20		sep #$20	            SEP #$20
.1a10cc	64 b9		stz $08b9	            STZ ALLOCATED+2
.1a10ce	64 bf		stz $08bf	            STZ FREED+2
.1a10d0	2b		pld		            PLD
.1a10d1	28		plp		            PLP
.1a10d2	60		rts		            RTS
.1a10d3					ALLOC
.1a10d3	5a		phy		            PHY
.1a10d4	08		php		            PHP
.1a10d5	e2 20		sep #$20	            SEP #$20
.1a10d7	85 ea		sta $08ea	            STA TOFINDTYPE      ; Save the type of the block to TOFINDTYPE
.1a10d9	c2 10		rep #$10	            REP #$10
.1a10db	86 8f		stx $088f	            STX MCOUNT           ; And the length of the block needed to MCOUNT
.1a10dd	c2 20		rep #$20	            REP #$20
.1a10df	a5 0e		lda $080e	            LDA SCRATCH+2
.1a10e1	48		pha		            PHA
.1a10e2	a5 0c		lda $080c	            LDA SCRATCH
.1a10e4	48		pha		            PHA
.1a10e5	a5 12		lda $0812	            LDA SCRATCH2+2
.1a10e7	48		pha		            PHA
.1a10e8	a5 10		lda $0810	            LDA SCRATCH2
.1a10ea	48		pha		            PHA
.1a10eb	20 83 11	jsr $1a1183	            JSR ALLOCFREED
.1a10ee	b0 03		bcs $1a10f3	            BCS done            ; Return, if we got something back
.1a10f0	20 07 11	jsr $1a1107	            JSR ALLOCHEAP
.1a10f3					done
.1a10f3	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a10f6	c2 20		rep #$20	            REP #$20
.1a10f8	68		pla		            PLA
.1a10f9	85 10		sta $0810	            STA SCRATCH2
.1a10fb	68		pla		            PLA
.1a10fc	85 12		sta $0812	            STA SCRATCH2+2
.1a10fe	68		pla		            PLA
.1a10ff	85 0c		sta $080c	            STA SCRATCH
.1a1101	68		pla		            PLA
.1a1102	85 0e		sta $080e	            STA SCRATCH+2
.1a1104	28		plp		            PLP
.1a1105	7a		ply		            PLY
.1a1106	60		rts		            RTS
.1a1107					ALLOCHEAP
.1a1107	08		php		            PHP
.1a1108	0b		phd		            PHD
.1a1109	08		php		            PHP
.1a110a	c2 20		rep #$20	            REP #$20
.1a110c	48		pha		            PHA
.1a110d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1110	5b		tcd		            TCD
.1a1111	68		pla		            PLA
.1a1112	28		plp		            PLP
.1a1113	e2 20		sep #$20	            SEP #$20
.1a1115	a6 8f		ldx $088f	            LDX MCOUNT
.1a1117	ca		dex		            DEX
.1a1118	86 0c		stx $080c	            STX SCRATCH             ; SCRATCH := size - 1
.1a111a	e8		inx		            INX
.1a111b	c2 30		rep #$30	            REP #$30
.1a111d	38		sec		            SEC
.1a111e	a5 ba		lda $08ba	            LDA HEAP
.1a1120	e5 0c		sbc $080c	            SBC SCRATCH
.1a1122	85 c0		sta $08c0	            STA CURRBLOCK
.1a1124	e2 20		sep #$20	            SEP #$20
.1a1126	a5 bc		lda $08bc	            LDA HEAP+2
.1a1128	e9 00		sbc #$00	            SBC #0
.1a112a	85 c2		sta $08c2	            STA CURRBLOCK+2
.1a112c	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a112f	e2 20		sep #$20	            SEP #$20
.1a1131	a5 ea		lda $08ea	            LDA TOFINDTYPE
.1a1133	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE       ; Set the type of the object
.1a1136	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1138	a9 00		lda #$00	            LDA #0                  ; Set the count to zero
.1a113a	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.1a113d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a113f	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1142	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1144	c2 20		rep #$20	            REP #$20
.1a1146	a9 00 00	lda #$0000	            LDA #0
.1a1149	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a114b	c2 20		rep #$20	            REP #$20
.1a114d	18		clc		            CLC
.1a114e	a5 ba		lda $08ba	            LDA HEAP
.1a1150	69 01 00	adc #$0001	            ADC #1
.1a1153	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; To get the address of the next byte
.1a1156	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y      ; after the block
.1a1158	e2 20		sep #$20	            SEP #$20
.1a115a	c8		iny		            INY
.1a115b	c8		iny		            INY
.1a115c	a5 bc		lda $08bc	            LDA HEAP+2
.1a115e	69 00		adc #$00	            ADC #0
.1a1160	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1162	c2 20		rep #$20	            REP #$20
.1a1164	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a1166	85 b7		sta $08b7	            STA ALLOCATED
.1a1168	e2 20		sep #$20	            SEP #$20
.1a116a	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a116c	85 b9		sta $08b9	            STA ALLOCATED+2
.1a116e	c2 20		rep #$20	            REP #$20
.1a1170	38		sec		            SEC                     ; Move the HEAP pointer to the first free byte under the header
.1a1171	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1173	e9 01 00	sbc #$0001	            SBC #1
.1a1176	85 ba		sta $08ba	            STA HEAP
.1a1178	e2 20		sep #$20	            SEP #$20
.1a117a	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a117c	e9 00		sbc #$00	            SBC #0
.1a117e	85 bc		sta $08bc	            STA HEAP+2
.1a1180	2b		pld		            PLD
.1a1181	28		plp		            PLP
.1a1182	60		rts		            RTS
.1a1183					ALLOCFREED
.1a1183	08		php		            PHP
.1a1184	0b		phd		            PHD
.1a1185	08		php		            PHP
.1a1186	c2 20		rep #$20	            REP #$20
.1a1188	48		pha		            PHA
.1a1189	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a118c	5b		tcd		            TCD
.1a118d	68		pla		            PLA
.1a118e	28		plp		            PLP
.1a118f	c2 30		rep #$30	            REP #$30
.1a1191	c2 20		rep #$20	            REP #$20
.1a1193	a5 bd		lda $08bd	            LDA FREED
.1a1195	85 c9		sta $08c9	            STA CURRFREED
.1a1197	e2 20		sep #$20	            SEP #$20
.1a1199	a5 bf		lda $08bf	            LDA FREED+2
.1a119b	85 cb		sta $08cb	            STA CURRFREED+2
.1a119d	a5 c9		lda $08c9	loop        LDA CURRFREED           ; Has anything been freed?
.1a119f	d0 17		bne $1a11b8	            BNE has_block           ; Yes: check to see if there's a big enough block
.1a11a1	e2 20		sep #$20	            SEP #$20
.1a11a3	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a11a5	d0 11		bne $1a11b8	            BNE has_block           ; Yes: check to see if there's a big enough block
.1a11a7	c2 20		rep #$20	            REP #$20
.1a11a9	a9 00 00	lda #$0000	            LDA #<>0
.1a11ac	85 cf		sta $08cf	            STA LASTFREED
.1a11ae	e2 20		sep #$20	            SEP #$20
.1a11b0	a9 00		lda #$00	            LDA #`0
.1a11b2	85 d1		sta $08d1	            STA LASTFREED+2
.1a11b4	2b		pld		ret_false   PLD                     ; Return that we didn't find anything
.1a11b5	28		plp		            PLP
.1a11b6	18		clc		            CLC
.1a11b7	60		rts		            RTS
.1a11b8					has_block
.1a11b8	c2 20		rep #$20	            REP #$20
.1a11ba	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.1a11bd	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a11bf	85 cc		sta $08cc	            STA FREEDEND
.1a11c1	e2 20		sep #$20	            SEP #$20
.1a11c3	c8		iny		            INY
.1a11c4	c8		iny		            INY
.1a11c5	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a11c7	85 ce		sta $08ce	            STA FREEDEND+2
.1a11c9	c2 20		rep #$20	            REP #$20
.1a11cb	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required
.1a11cc	a5 c9		lda $08c9	            LDA CURRFREED
.1a11ce	65 8f		adc $088f	            ADC MCOUNT
.1a11d0	85 0c		sta $080c	            STA SCRATCH
.1a11d2	e2 20		sep #$20	            SEP #$20
.1a11d4	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a11d6	69 00		adc #$00	            ADC #0
.1a11d8	85 0e		sta $080e	            STA SCRATCH+2
.1a11da	c2 20		rep #$20	            REP #$20
.1a11dc	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required + size of header
.1a11dd	a5 0c		lda $080c	            LDA SCRATCH                 ; (that is, it's a pointer to the byte immediately after the block desired)
.1a11df	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)
.1a11e2	85 0c		sta $080c	            STA SCRATCH
.1a11e4	e2 20		sep #$20	            SEP #$20
.1a11e6	a5 0e		lda $080e	            LDA SCRATCH+2
.1a11e8	69 00		adc #$00	            ADC #0
.1a11ea	85 0e		sta $080e	            STA SCRATCH+2
.1a11ec	c2 20		rep #$20	            REP #$20
.1a11ee	a5 0c		lda $080c	            LDA SCRATCH                 ; Is SCRATCH == FREEDEND?
.1a11f0	c5 cc		cmp $08cc	            CMP FREEDEND
.1a11f2	d0 28		bne $1a121c	            BNE not_exact               ; No: check if this block is bigger than needed
.1a11f4	e2 20		sep #$20	            SEP #$20
.1a11f6	a5 0e		lda $080e	            LDA SCRATCH+2
.1a11f8	c5 ce		cmp $08ce	            CMP FREEDEND+2
.1a11fa	d0 20		bne $1a121c	            BNE not_exact
.1a11fc	c2 20		rep #$20	            REP #$20
.1a11fe	a5 cf		lda $08cf	            LDA LASTFREED               ; LASTFREED == 0?
.1a1200	d0 5d		bne $1a125f	            BNE adj_last1               ; No: point LASTFREED->NEXT to skip this block
.1a1202	e2 20		sep #$20	            SEP #$20
.1a1204	a5 d1		lda $08d1	            LDA LASTFREED+2
.1a1206	d0 57		bne $1a125f	            BNE adj_last1
.1a1208	c2 20		rep #$20	            REP #$20
.1a120a	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a120d	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a120f	85 bd		sta $08bd	            STA FREED
.1a1211	e2 20		sep #$20	            SEP #$20
.1a1213	c8		iny		            INY
.1a1214	c8		iny		            INY
.1a1215	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1217	85 bf		sta $08bf	            STA FREED+2
.1a1219	4c c0 12	jmp $1a12c0	            JMP init_block              ; And return CURRFREED as our reallocated memory
.1a121c					not_exact
.1a121c	c2 20		rep #$20	            REP #$20
.1a121e	a5 0c		lda $080c	            LDA SCRATCH                 ; Add a buffer to the room needed
.1a1220	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)          ; So we have room to track the memory still freed
.1a1223	85 10		sta $0810	            STA SCRATCH2
.1a1225	e2 20		sep #$20	            SEP #$20
.1a1227	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1229	69 00		adc #$00	            ADC #0
.1a122b	85 12		sta $0812	            STA SCRATCH2+2
.1a122d	e2 20		sep #$20	            SEP #$20
.1a122f	a5 c6		lda $08c6	            LDA CURREND                 ; Is CURREND > SCRATCH2
.1a1231	c5 10		cmp $0810	            CMP SCRATCH2
.1a1233	b0 3e		bcs $1a1273	            BGE has_room                ; Yes: there is room in this block to allocate some memory
.1a1235	90 08		bcc $1a123f	            BLT try_next
.1a1237	c2 20		rep #$20	            REP #$20
.1a1239	a5 c6		lda $08c6	            LDA CURREND
.1a123b	c5 10		cmp $0810	            CMP SCRATCH2
.1a123d	b0 34		bcs $1a1273	            BGE has_room
.1a123f					try_next
.1a123f	c2 20		rep #$20	            REP #$20
.1a1241	a5 c9		lda $08c9	            LDA CURRFREED
.1a1243	85 cf		sta $08cf	            STA LASTFREED
.1a1245	e2 20		sep #$20	            SEP #$20
.1a1247	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1249	85 d1		sta $08d1	            STA LASTFREED+2
.1a124b	c2 20		rep #$20	            REP #$20
.1a124d	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1250	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.1a1252	85 c9		sta $08c9	            STA CURRFREED
.1a1254	e2 20		sep #$20	            SEP #$20
.1a1256	c8		iny		            INY
.1a1257	c8		iny		            INY
.1a1258	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.1a125a	85 cb		sta $08cb	            STA CURRFREED+2
.1a125c	4c 9d 11	jmp $1a119d	            JMP loop                                    ; And try the next header
.1a125f					adj_last1
.1a125f	c2 20		rep #$20	            REP #$20
.1a1261	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := CURRFREED->NEXT
.1a1264	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1266	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a1268	e2 20		sep #$20	            SEP #$20
.1a126a	c8		iny		            INY
.1a126b	c8		iny		            INY
.1a126c	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a126e	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a1270	4c c0 12	jmp $1a12c0	            JMP init_block              ; And get CURRFREED ready to return
.1a1273					has_room
.1a1273	c2 20		rep #$20	            REP #$20
.1a1275	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END            ; SCRATCH->END := CURRFREED->END
.1a1278	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a127a	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a127c	e2 20		sep #$20	            SEP #$20
.1a127e	c8		iny		            INY
.1a127f	c8		iny		            INY
.1a1280	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1282	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1284	c2 20		rep #$20	            REP #$20
.1a1286	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; CURREND->NEXT := CURRFREED->NEXT
.1a1289	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a128b	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a128d	e2 20		sep #$20	            SEP #$20
.1a128f	c8		iny		            INY
.1a1290	c8		iny		            INY
.1a1291	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1293	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1295	c2 20		rep #$20	            REP #$20
.1a1297	a5 cf		lda $08cf	            LDA LASTFREED               ; Is this the first object we've examined?
.1a1299	d0 14		bne $1a12af	            BNE adj_last2               ; No: we'll need to adjust the previously examined block
.1a129b	e2 20		sep #$20	            SEP #$20
.1a129d	a5 cf		lda $08cf	            LDA LASTFREED
.1a129f	d0 0e		bne $1a12af	            BNE adj_last2
.1a12a1	c2 20		rep #$20	            REP #$20
.1a12a3	a5 0c		lda $080c	            LDA SCRATCH
.1a12a5	85 bd		sta $08bd	            STA FREED
.1a12a7	e2 20		sep #$20	            SEP #$20
.1a12a9	a5 0e		lda $080e	            LDA SCRATCH+2
.1a12ab	85 bf		sta $08bf	            STA FREED+2
.1a12ad	80 11		bra $1a12c0	            BRA init_block              ; ... and return the block we've sliced off
.1a12af					adj_last2
.1a12af	c2 20		rep #$20	            REP #$20
.1a12b1	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := SCRATCH
.1a12b4	a5 0c		lda $080c	            LDA SCRATCH                 ; (point the previous freed block to the newly sliced
.1a12b6	97 cf		sta [$08cf],y	            STA [LASTFREED],Y           ;  off part of the current block)
.1a12b8	e2 20		sep #$20	            SEP #$20
.1a12ba	c8		iny		            INY
.1a12bb	c8		iny		            INY
.1a12bc	a5 0e		lda $080e	            LDA SCRATCH+2
.1a12be	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a12c0					init_block
.1a12c0	c2 20		rep #$20	            REP #$20
.1a12c2	a5 c9		lda $08c9	            LDA CURRFREED
.1a12c4	85 c3		sta $08c3	            STA CURRHEADER
.1a12c6	e2 20		sep #$20	            SEP #$20
.1a12c8	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a12ca	85 c5		sta $08c5	            STA CURRHEADER+2
.1a12cc	c2 20		rep #$20	            REP #$20
.1a12ce	a5 c3		lda $08c3	            LDA CURRHEADER
.1a12d0	85 b7		sta $08b7	            STA ALLOCATED
.1a12d2	e2 20		sep #$20	            SEP #$20
.1a12d4	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a12d6	85 b9		sta $08b9	            STA ALLOCATED+2
.1a12d8	c2 20		rep #$20	            REP #$20
.1a12da	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; Set CURRHEADER->END to the byte after the block
.1a12dd	a5 0c		lda $080c	            LDA SCRATCH
.1a12df	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12e1	e2 20		sep #$20	            SEP #$20
.1a12e3	c8		iny		            INY
.1a12e4	c8		iny		            INY
.1a12e5	a5 0e		lda $080e	            LDA SCRATCH+2
.1a12e7	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12e9	c2 20		rep #$20	            REP #$20
.1a12eb	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Set CURRHEADER->NEXT to NULL
.1a12ee	a9 00 00	lda #$0000	            LDA #0
.1a12f1	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12f3	e2 20		sep #$20	            SEP #$20
.1a12f5	c8		iny		            INY
.1a12f6	c8		iny		            INY
.1a12f7	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12f9	e2 20		sep #$20	            SEP #$20
.1a12fb	a5 ea		lda $08ea	            LDA TOFINDTYPE          ; Get the type code back
.1a12fd	e2 20		sep #$20	            SEP #$20
.1a12ff	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE
.1a1302	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1304	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT      ; Set its reference count to 0
.1a1307	a9 00		lda #$00	            LDA #0
.1a1309	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a130b	2b		pld		done        PLD
.1a130c	28		plp		            PLP
.1a130d	38		sec		            SEC
.1a130e	60		rts		            RTS
.1a130f					HEAP_GETHED
.1a130f	08		php		            PHP
.1a1310	c2 20		rep #$20	            REP #$20
.1a1312	38		sec		            SEC
.1a1313	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a1315	e9 08 00	sbc #$0008	            SBC #size(HEAPOBJ)
.1a1318	85 c3		sta $08c3	            STA CURRHEADER
.1a131a	e2 20		sep #$20	            SEP #$20
.1a131c	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a131e	e9 00		sbc #$00	            SBC #0
.1a1320	85 c5		sta $08c5	            STA CURRHEADER+2
.1a1322	28		plp		            PLP
.1a1323	60		rts		            RTS
.1a1324					HEAP_ADDREF
.1a1324	08		php		            PHP
.1a1325	e2 20		sep #$20	            SEP #$20
.1a1327	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1329	f0 04		beq $1a132f	            BEQ chk_null
.1a132b	c9 18		cmp #$18	            CMP #`(HEAP_TOP + 1)
.1a132d	b0 12		bcs $1a1341	            BGE out_of_bnds
.1a132f					chk_null
.1a132f	c2 20		rep #$20	            REP #$20
.1a1331	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1333	f0 0c		beq $1a1341	            BEQ out_of_bnds
.1a1335					is_ok
.1a1335	e2 20		sep #$20	            SEP #$20
.1a1337	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.1a133a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a133c	1a		inc a		            INC A
.1a133d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a133f	28		plp		            PLP
.1a1340	60		rts		            RTS
.1a1341	00		brk #		out_of_bnds BRK
.1a1342	ea		nop		            NOP
.1a1343					HEAP_REMREF
.1a1343	08		php		            PHP
.1a1344	e2 20		sep #$20	            SEP #$20
.1a1346	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1348	f0 04		beq $1a134e	            BEQ chk_null
.1a134a	c9 18		cmp #$18	            CMP #`(HEAP_TOP + 1)
.1a134c	b0 17		bcs $1a1365	            BGE out_of_bnds
.1a134e					chk_null
.1a134e	c2 20		rep #$20	            REP #$20
.1a1350	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1352	f0 11		beq $1a1365	            BEQ out_of_bnds
.1a1354	e2 20		sep #$20	            SEP #$20
.1a1356	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT  ; Decrement the reference count
.1a1359	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a135b	3a		dec a		            DEC A
.1a135c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a135e	d0 03		bne $1a1363	            BNE done            ; If it's still >0, we are done
.1a1360	20 67 13	jsr $1a1367	            JSR HEAP_FREE
.1a1363	28		plp		done        PLP
.1a1364	60		rts		            RTS
.1a1365	00		brk #		out_of_bnds BRK
.1a1366	ea		nop		            NOP
.1a1367					HEAP_FREE
.1a1367	08		php		            PHP
.1a1368	c2 20		rep #$20	            REP #$20
.1a136a	a5 bd		lda $08bd	            LDA FREED           ; Check to see if blocks are already on the freed list
.1a136c	d0 21		bne $1a138f	            BNE has_objects
.1a136e	e2 20		sep #$20	            SEP #$20
.1a1370	a5 bf		lda $08bf	            LDA FREED+2
.1a1372	d0 1b		bne $1a138f	            BNE has_objects
.1a1374	a5 c5		lda $08c5	            LDA CURRHEADER+2    ; No: this block is the first one
.1a1376	85 bf		sta $08bf	            STA FREED+2         ; Just make it the freed list
.1a1378	c2 20		rep #$20	            REP #$20
.1a137a	a5 c3		lda $08c3	            LDA CURRHEADER
.1a137c	85 bd		sta $08bd	            STA FREED
.1a137e	a9 00 00	lda #$0000	            LDA #0
.1a1381	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT   ; And clear its next link
.1a1384	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1386	c8		iny		            INY
.1a1387	c8		iny		            INY
.1a1388	e2 20		sep #$20	            SEP #$20
.1a138a	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a138c	4c 4e 14	jmp $1a144e	            JMP done
.1a138f					has_objects
.1a138f	e2 20		sep #$20	            SEP #$20
.1a1391	a5 bf		lda $08bf	            LDA FREED+2
.1a1393	c5 c5		cmp $08c5	            CMP CURRHEADER+2
.1a1395	90 28		bcc $1a13bf	            BLT start_scan
.1a1397	c2 20		rep #$20	            REP #$20
.1a1399	a5 bd		lda $08bd	            LDA FREED
.1a139b	c5 c3		cmp $08c3	            CMP CURRHEADER
.1a139d	90 20		bcc $1a13bf	            BLT start_scan
.1a139f					ins_first
.1a139f	c2 20		rep #$20	            REP #$20
.1a13a1	a5 bd		lda $08bd	            LDA FREED               ; CURRHEADER->NEXT := FREED
.1a13a3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a13a6	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a13a8	e2 20		sep #$20	            SEP #$20
.1a13aa	c8		iny		            INY
.1a13ab	c8		iny		            INY
.1a13ac	a5 bf		lda $08bf	            LDA FREED+2
.1a13ae	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a13b0	c2 20		rep #$20	            REP #$20
.1a13b2	a5 c3		lda $08c3	            LDA CURRHEADER
.1a13b4	85 bd		sta $08bd	            STA FREED
.1a13b6	e2 20		sep #$20	            SEP #$20
.1a13b8	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a13ba	85 bf		sta $08bf	            STA FREED+2
.1a13bc	4c 4e 14	jmp $1a144e	            JMP done
.1a13bf					start_scan
.1a13bf	c2 20		rep #$20	            REP #$20
.1a13c1	a5 bd		lda $08bd	            LDA FREED
.1a13c3	85 08		sta $0808	            STA INDEX
.1a13c5	e2 20		sep #$20	            SEP #$20
.1a13c7	a5 bf		lda $08bf	            LDA FREED+2
.1a13c9	85 0a		sta $080a	            STA INDEX+2
.1a13cb					loop
.1a13cb	e2 20		sep #$20	            SEP #$20
.1a13cd	a0 04 00	ldy #$0004	            LDY #HEAPOBJ.NEXT+2
.1a13d0	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13d2	c5 c8		cmp $08c8	            CMP CURREND+2
.1a13d4	90 32		bcc $1a1408	            BLT go_next             ; No: check the next spot
.1a13d6	d0 0b		bne $1a13e3	            BNE ins_next
.1a13d8	c2 20		rep #$20	            REP #$20
.1a13da	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a13dd	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13df	c5 c6		cmp $08c6	            CMP CURREND
.1a13e1	90 25		bcc $1a1408	            BLT go_next             ; No: check the next spot
.1a13e3					ins_next
.1a13e3	c2 20		rep #$20	            REP #$20
.1a13e5	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := INDEX->NEXT
.1a13e8	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13ea	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a13ec	e2 20		sep #$20	            SEP #$20
.1a13ee	c8		iny		            INY
.1a13ef	c8		iny		            INY
.1a13f0	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a13f2	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a13f4	c2 20		rep #$20	            REP #$20
.1a13f6	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.1a13f8	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a13fb	97 08		sta [$0808],y	            STA [INDEX],Y
.1a13fd	e2 20		sep #$20	            SEP #$20
.1a13ff	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1401	c8		iny		            INY
.1a1402	c8		iny		            INY
.1a1403	97 08		sta [$0808],y	            STA [INDEX],Y
.1a1405	4c 4e 14	jmp $1a144e	            JMP done
.1a1408					go_next
.1a1408	c2 20		rep #$20	            REP #$20
.1a140a	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Is INDEX->NEXT = 0
.1a140d	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a140f	d0 08		bne $1a1419	            BNE not_at_end          ; No: load up the next object
.1a1411	e2 20		sep #$20	            SEP #$20
.1a1413	c8		iny		            INY
.1a1414	c8		iny		            INY
.1a1415	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1417	f0 19		beq $1a1432	            BEQ at_end
.1a1419					not_at_end
.1a1419	c2 20		rep #$20	            REP #$20
.1a141b	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; INDEX := INDEX->NEXT
.1a141e	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1420	85 0c		sta $080c	            STA SCRATCH
.1a1422	e2 20		sep #$20	            SEP #$20
.1a1424	c8		iny		            INY
.1a1425	c8		iny		            INY
.1a1426	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1428	85 0a		sta $080a	            STA INDEX+2
.1a142a	c2 20		rep #$20	            REP #$20
.1a142c	a5 0c		lda $080c	            LDA SCRATCH
.1a142e	85 08		sta $0808	            STA INDEX
.1a1430	80 99		bra $1a13cb	            BRA loop
.1a1432					at_end
.1a1432	c2 20		rep #$20	            REP #$20
.1a1434	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.1a1436	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1439	97 08		sta [$0808],y	            STA [INDEX],Y
.1a143b	e2 20		sep #$20	            SEP #$20
.1a143d	c8		iny		            INY
.1a143e	c8		iny		            INY
.1a143f	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1441	97 08		sta [$0808],y	            STA [INDEX],Y
.1a1443	a9 00		lda #$00	            LDA #0                  ; CURRHEADER->NEXT := 0
.1a1445	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1447	c2 20		rep #$20	            REP #$20
.1a1449	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a144c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a144e					done
.1a144e	20 53 14	jsr $1a1453	            JSR COALLESCE
.1a1451	28		plp		            PLP
.1a1452	60		rts		            RTS
.1a1453					COALLESCE
.1a1453	08		php		            PHP
.1a1454	c2 20		rep #$20	            REP #$20
.1a1456	a5 bd		lda $08bd	            LDA FREED
.1a1458	85 c3		sta $08c3	            STA CURRHEADER
.1a145a	e2 20		sep #$20	            SEP #$20
.1a145c	a5 bf		lda $08bf	            LDA FREED+2
.1a145e	85 c5		sta $08c5	            STA CURRHEADER+2
.1a1460					next_head
.1a1460	c2 20		rep #$20	            REP #$20
.1a1462	a5 c3		lda $08c3	            LDA CURRHEADER          ; Is CURRHEADER == 0?
.1a1464	d0 09		bne $1a146f	            BNE check_next          ; No: check if NEXT is contiguous
.1a1466	e2 20		sep #$20	            SEP #$20
.1a1468	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a146a	d0 03		bne $1a146f	            BNE check_next
.1a146c	4c f6 14	jmp $1a14f6	            JMP done                ; Yes: we're done
.1a146f					check_next
.1a146f	c2 20		rep #$20	            REP #$20
.1a1471	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1474	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1476	85 0c		sta $080c	            STA SCRATCH
.1a1478	e2 20		sep #$20	            SEP #$20
.1a147a	c8		iny		            INY
.1a147b	c8		iny		            INY
.1a147c	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a147e	85 0e		sta $080e	            STA SCRATCH+2
.1a1480	c2 20		rep #$20	            REP #$20
.1a1482	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.1a1485	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1487	85 10		sta $0810	            STA SCRATCH2
.1a1489	e2 20		sep #$20	            SEP #$20
.1a148b	c8		iny		            INY
.1a148c	c8		iny		            INY
.1a148d	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a148f	85 12		sta $0812	            STA SCRATCH2+2
.1a1491	c2 20		rep #$20	            REP #$20
.1a1493	a5 0c		lda $080c	            LDA SCRATCH
.1a1495	c5 10		cmp $0810	            CMP SCRATCH2            ; Is CURRHEADER->END = CURRHEADER->NEXT?
.1a1497	d0 08		bne $1a14a1	            BNE go_next             ; No: go to the next block
.1a1499	e2 20		sep #$20	            SEP #$20
.1a149b	a5 0e		lda $080e	            LDA SCRATCH+2
.1a149d	c5 12		cmp $0812	            CMP SCRATCH2+2
.1a149f	f0 1f		beq $1a14c0	            BEQ combine             ; Yes: combine the two blocks
.1a14a1					go_next
.1a14a1	c2 20		rep #$20	            REP #$20
.1a14a3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a14a6	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a14a8	85 0c		sta $080c	            STA SCRATCH
.1a14aa	e2 20		sep #$20	            SEP #$20
.1a14ac	c8		iny		            INY
.1a14ad	c8		iny		            INY
.1a14ae	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a14b0	85 0e		sta $080e	            STA SCRATCH+2
.1a14b2	c2 20		rep #$20	            REP #$20
.1a14b4	a5 0c		lda $080c	            LDA SCRATCH
.1a14b6	85 c3		sta $08c3	            STA CURRHEADER
.1a14b8	e2 20		sep #$20	            SEP #$20
.1a14ba	a5 0e		lda $080e	            LDA SCRATCH+2
.1a14bc	85 c5		sta $08c5	            STA CURRHEADER+2
.1a14be	80 a0		bra $1a1460	            BRA next_head                               ; And loop back to next_head
.1a14c0					combine
.1a14c0	c2 20		rep #$20	            REP #$20
.1a14c2	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a14c5	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a14c7	85 0c		sta $080c	            STA SCRATCH
.1a14c9	e2 20		sep #$20	            SEP #$20
.1a14cb	c8		iny		            INY
.1a14cc	c8		iny		            INY
.1a14cd	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a14cf	85 0e		sta $080e	            STA SCRATCH+2
.1a14d1	c2 20		rep #$20	            REP #$20
.1a14d3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := SCRATCH->NEXT
.1a14d6	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a14d8	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a14da	e2 20		sep #$20	            SEP #$20
.1a14dc	c8		iny		            INY
.1a14dd	c8		iny		            INY
.1a14de	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a14e0	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a14e2	c2 20		rep #$20	            REP #$20
.1a14e4	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END       ; CURRHEADER->END := SCRATCH->END
.1a14e7	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a14e9	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a14eb	e2 20		sep #$20	            SEP #$20
.1a14ed	c8		iny		            INY
.1a14ee	c8		iny		            INY
.1a14ef	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a14f1	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a14f3	4c 6f 14	jmp $1a146f	            JMP check_next          ; And loop back to check_next
.1a14f6	28		plp		done        PLP
.1a14f7	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\strings.s

.1a14f8					CLRTMPSTR
.1a14f8	08		php		            PHP
.1a14f9	c2 20		rep #$20	            REP #$20
.1a14fb	64 16		stz $0816	            STZ STRPTR
.1a14fd	64 18		stz $0818	            STZ STRPTR+2
.1a14ff	28		plp		            PLP
.1a1500	60		rts		            RTS
.1a1501					TEMPSTRING
.1a1501	08		php		            PHP
.1a1502	c2 30		rep #$30	            REP #$30
.1a1504	a5 16		lda $0816	            LDA STRPTR          ; Is STRPTR == 0?
.1a1506	d0 16		bne $1a151e	            BNE add_256         ; No: add 256 to it
.1a1508	a5 18		lda $0818	            LDA STRPTR+2
.1a150a	d0 12		bne $1a151e	            BNE add_256
.1a150c	e2 20		sep #$20	            SEP #$20
.1a150e	64 16		stz $0816	            STZ STRPTR
.1a1510	a5 e2		lda $08e2	            LDA NEXTVAR+1
.1a1512	1a		inc a		            INC A
.1a1513	1a		inc a		            INC A
.1a1514	85 17		sta $0817	            STA STRPTR+1
.1a1516	a5 e3		lda $08e3	            LDA NEXTVAR+2
.1a1518	85 18		sta $0818	            STA STRPTR+2
.1a151a	64 19		stz $0819	            STZ STRPTR+3
.1a151c	80 07		bra $1a1525	            BRA chk_room
.1a151e					add_256
.1a151e	c2 20		rep #$20	            REP #$20
.1a1520	a5 17		lda $0817	            LDA STRPTR+1        ; There was already a temporary string...
.1a1522	1a		inc a		            INC A               ; Leave 256 bytes for it
.1a1523	85 17		sta $0817	            STA STRPTR+1
.1a1525					chk_room
.1a1525	c2 20		rep #$20	            REP #$20
.1a1527	a5 bb		lda $08bb	            LDA HEAP+1          ; Check to make sure that STRPTR and HEAP haven't touched
.1a1529	3a		dec a		            DEC A
.1a152a	c5 17		cmp $0817	            CMP STRPTR+1
.1a152c	f0 02		beq $1a1530	            BEQ no_room         ; If they have, throw an error
.1a152e	b0 1f		bcs $1a154f	            BGE done
.1a1530					no_room
.1a1530	08		php		            PHP
.1a1531	c2 20		rep #$20	            REP #$20
.1a1533	48		pha		            PHA
.1a1534	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1537	5b		tcd		            TCD
.1a1538	68		pla		            PLA
.1a1539	28		plp		            PLP
.1a153a	e2 20		sep #$20	            SEP #$20
.1a153c	a9 03		lda #$03	            LDA #ERR_MEMORY
.1a153e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1542	c2 20		rep #$20	            REP #$20
.1a1544	29 ff 00	and #$00ff	            AND #$00FF
.1a1547	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a154a	e2 20		sep #$20	            SEP #$20
.1a154c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a154f	28		plp		done        PLP
.1a1550	60		rts		            RTS
.1a1551					ITOS_DIGIT
.1a1551	c9 00		cmp #$00	            CMP #0          ; Is it 0?
.1a1553	d0 05		bne $1a155a	            BNE add_digit   ; No: go ahead and add it
.1a1555	c0 01 00	cpy #$0001	            CPY #1          ; Are we on the first digit?
.1a1558	f0 05		beq $1a155f	            BEQ done        ; Yes: ignore this leading 0
.1a155a	09 30		ora #$30	add_digit   ORA #$30        ; Convert it to ASCII
.1a155c	97 16		sta [$0816],y	            STA [STRPTR],Y  ; Save it to the string
.1a155e	c8		iny		            INY             ; And point to the next location
.1a155f					done
.1a155f	60		rts		            RTS
.1a1560					ITOS
.1a1560	08		php		            PHP
.1a1561	c2 30		rep #$30	            REP #$30
.1a1563	64 0c		stz $080c	            STZ SCRATCH         ; Use scratch to store if negative
.1a1565	a5 25		lda $0825	            LDA ARGUMENT1+2     ; Check to see if the number is negative
.1a1567	10 1a		bpl $1a1583	            BPL start_cnvt
.1a1569	18		clc		            CLC                 ; Yes: make ARGUMENT1 positive
.1a156a	a5 23		lda $0823	            LDA ARGUMENT1
.1a156c	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a156f	69 01 00	adc #$0001	            ADC #1
.1a1572	85 23		sta $0823	            STA ARGUMENT1
.1a1574	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1576	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a1579	69 00 00	adc #$0000	            ADC #0
.1a157c	85 25		sta $0825	            STA ARGUMENT1+2
.1a157e	a9 ff ff	lda #$ffff	            LDA #$FFFF          ; Record that the number was negative
.1a1581	85 0c		sta $080c	            STA SCRATCH
.1a1583					start_cnvt
.1a1583	64 10		stz $0810	            STZ SCRATCH2        ; SCRATCH2 will be our BCD version of the number
.1a1585	64 12		stz $0812	            STZ SCRATCH2+2
.1a1587	64 14		stz $0814	            STZ SCRATCH2+4
.1a1589	a2 1f 00	ldx #$001f	            LDX #31
.1a158c	f8		sed		            SED                 ; Yes, we're really using BCD mode
.1a158d	06 23		asl $0823	shift_loop  ASL ARGUMENT1       ; Shift ARGUMENT1 left one bit
.1a158f	26 25		rol $0825	            ROL ARGUMENT1+2
.1a1591	a5 10		lda $0810	            LDA SCRATCH2        ; SCRATCH2 := SCRATCH2 + SCRATCH2 + Carry
.1a1593	65 10		adc $0810	            ADC SCRATCH2
.1a1595	85 10		sta $0810	            STA SCRATCH2
.1a1597	a5 12		lda $0812	            LDA SCRATCH2+2
.1a1599	65 12		adc $0812	            ADC SCRATCH2+2
.1a159b	85 12		sta $0812	            STA SCRATCH2+2
.1a159d	a5 14		lda $0814	            LDA SCRATCH2+4
.1a159f	65 14		adc $0814	            ADC SCRATCH2+4
.1a15a1	85 14		sta $0814	            STA SCRATCH2+4
.1a15a3	ca		dex		            DEX
.1a15a4	10 e7		bpl $1a158d	            BPL shift_loop      ; Loop through all 32 bits of ARGUMENT1
.1a15a6	d8		cld		            CLD                 ; Switch back out of BCD mode
.1a15a7	e2 20		sep #$20	            SEP #$20
.1a15a9	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a15ac	a0 00 00	ldy #$0000	            LDY #0              ; Y will be index into the temporary string
.1a15af	a5 0c		lda $080c	            LDA SCRATCH         ; Check to see if the number was negative
.1a15b1	f0 04		beq $1a15b7	            BEQ is_pos          ; No: write a leading space
.1a15b3	a9 2d		lda #$2d	            LDA #'-'            ; If negative, write the minus sign
.1a15b5	80 02		bra $1a15b9	            BRA wr_lead
.1a15b7	a9 20		lda #$20	is_pos      LDA #CHAR_SP        ; Write a leading space
.1a15b9	97 16		sta [$0816],y	wr_lead     STA [STRPTR],Y
.1a15bb	c8		iny		            INY
.1a15bc	a2 05 00	ldx #$0005	            LDX #5
.1a15bf	b5 10		lda $0810,x	ascii_loop  LDA SCRATCH2,X
.1a15c1	29 f0		and #$f0	            AND #$F0
.1a15c3	4a		lsr a		            LSR A
.1a15c4	4a		lsr a		            LSR A
.1a15c5	4a		lsr a		            LSR A
.1a15c6	4a		lsr a		            LSR A
.1a15c7	20 51 15	jsr $1a1551	            JSR ITOS_DIGIT
.1a15ca	b5 10		lda $0810,x	            LDA SCRATCH2,X
.1a15cc	29 0f		and #$0f	            AND #$0F
.1a15ce	20 51 15	jsr $1a1551	            JSR ITOS_DIGIT
.1a15d1	ca		dex		            DEX
.1a15d2	10 eb		bpl $1a15bf	            BPL ascii_loop
.1a15d4	c0 01 00	cpy #$0001	            CPY #1              ; Did we write anything?
.1a15d7	d0 0c		bne $1a15e5	            BNE null_term       ; Yes: add a NULL to terminate
.1a15d9	a9 20		lda #$20	            LDA #' '            ; No: write a " 0" to the string
.1a15db	87 16		sta [$0816]	            STA [STRPTR]
.1a15dd	a0 01 00	ldy #$0001	            LDY #1
.1a15e0	a9 30		lda #$30	            LDA #'0'
.1a15e2	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a15e4	c8		iny		            INY
.1a15e5	a9 00		lda #$00	null_term   LDA #0
.1a15e7	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And terminate the string
.1a15e9	28		plp		done        PLP
.1a15ea	60		rts		            RTS
.1a15eb	00		brk #		fault       BRK
.1a15ec	ea		nop		            NOP
.1a15ed					STRLEN
.1a15ed	08		php		            PHP
.1a15ee	e2 20		sep #$20	            SEP #$20
.1a15f0	c2 10		rep #$10	            REP #$10
.1a15f2	a0 00 00	ldy #$0000	            LDY #0
.1a15f5	bd 00 00	lda $1a0000,x	loop        LDA #0,B,X
.1a15f8	f0 04		beq $1a15fe	            BEQ done
.1a15fa	e8		inx		            INX
.1a15fb	c8		iny		            INY
.1a15fc	80 f7		bra $1a15f5	            BRA loop
.1a15fe	28		plp		done        PLP
.1a15ff	60		rts		            RTS
.1a1600					STRCMP
.1a1600	08		php		            PHP
.1a1601	0b		phd		            PHD
.1a1602	08		php		            PHP
.1a1603	c2 20		rep #$20	            REP #$20
.1a1605	48		pha		            PHA
.1a1606	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1609	5b		tcd		            TCD
.1a160a	68		pla		            PLA
.1a160b	28		plp		            PLP
.1a160c	e2 20		sep #$20	            SEP #$20
.1a160e	c2 10		rep #$10	            REP #$10
.1a1610	a0 00 00	ldy #$0000	            LDY #0
.1a1613	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Check if the character 1 is 0
.1a1615	d0 04		bne $1a161b	            BNE comp_mag            ; If not, check the magnitudes
.1a1617	b7 29		lda [$0829],y	            LDA [ARGUMENT2],Y       ; If so, check if the character 2 is 0
.1a1619	f0 25		beq $1a1640	            BEQ are_equal           ; If so, the strings are equal
.1a161b	b7 23		lda [$0823],y	comp_mag    LDA [ARGUMENT1],Y       ; Otherwise, get character 1 again
.1a161d	d7 29		cmp [$0829],y	            CMP [ARGUMENT2],Y       ; And compare it to character 2
.1a161f	90 12		bcc $1a1633	            BLT is_less             ; Check if character 1 < character 2
.1a1621	d0 03		bne $1a1626	            BNE is_greater          ; Check if character 1 > character 2
.1a1623	c8		iny		            INY                     ; Equal so far... so go to the next pair of characters
.1a1624	80 ed		bra $1a1613	            BRA loop
.1a1626					is_greater
.1a1626	c2 20		rep #$20	            REP #$20
.1a1628	a9 01 00	lda #$0001	            LDA #1                  ; So return 1
.1a162b	85 23		sta $0823	            STA ARGUMENT1
.1a162d	e2 20		sep #$20	            SEP #$20
.1a162f	64 25		stz $0825	            STZ ARGUMENT1+2
.1a1631	80 15		bra $1a1648	            BRA done
.1a1633					is_less
.1a1633	c2 20		rep #$20	            REP #$20
.1a1635	a9 ff ff	lda #$ffff	            LDA #$FFFF              ; So return -1
.1a1638	85 23		sta $0823	            STA ARGUMENT1
.1a163a	e2 20		sep #$20	            SEP #$20
.1a163c	85 25		sta $0825	            STA ARGUMENT1+2
.1a163e	80 08		bra $1a1648	            BRA done
.1a1640					are_equal
.1a1640	c2 20		rep #$20	            REP #$20
.1a1642	64 23		stz $0823	            STZ ARGUMENT1           ; So return 0
.1a1644	e2 20		sep #$20	            SEP #$20
.1a1646	64 25		stz $0825	            STZ ARGUMENT1+2
.1a1648					done
.1a1648	e2 20		sep #$20	            SEP #$20
.1a164a	a9 00		lda #$00	            LDA #TYPE_INTEGER
.1a164c	85 27		sta $0827	            STA ARGTYPE1
.1a164e	2b		pld		            PLD
.1a164f	28		plp		            PLP
.1a1650	60		rts		            RTS
.1a1651					STRCONCAT
.1a1651	08		php		            PHP
.1a1652	0b		phd		            PHD
.1a1653	8b		phb		            PHB
.1a1654	08		php		            PHP
.1a1655	c2 20		rep #$20	            REP #$20
.1a1657	48		pha		            PHA
.1a1658	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a165b	5b		tcd		            TCD
.1a165c	68		pla		            PLA
.1a165d	28		plp		            PLP
.1a165e	e2 20		sep #$20	            SEP #$20
.1a1660	c2 10		rep #$10	            REP #$10
.1a1662	08		php		            PHP
.1a1663	c2 20		rep #$20	            REP #$20
.1a1665	48		pha		            PHA
.1a1666	e2 20		sep #$20	            SEP #$20
.1a1668	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a166a	48		pha		            PHA
.1a166b	ab		plb		            PLB
.1a166c	c2 20		rep #$20	            REP #$20
.1a166e	68		pla		            PLA
.1a166f	28		plp		            PLP
.1a1670	a6 23		ldx $0823	            LDX ARGUMENT1
.1a1672	20 ed 15	jsr $1a15ed	            JSR STRLEN
.1a1675	84 0c		sty $080c	            STY SCRATCH
.1a1677	08		php		            PHP
.1a1678	c2 20		rep #$20	            REP #$20
.1a167a	48		pha		            PHA
.1a167b	e2 20		sep #$20	            SEP #$20
.1a167d	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a167f	48		pha		            PHA
.1a1680	ab		plb		            PLB
.1a1681	c2 20		rep #$20	            REP #$20
.1a1683	68		pla		            PLA
.1a1684	28		plp		            PLP
.1a1685	a6 29		ldx $0829	            LDX ARGUMENT2
.1a1687	20 ed 15	jsr $1a15ed	            JSR STRLEN
.1a168a	c2 20		rep #$20	            REP #$20
.1a168c	98		tya		            TYA
.1a168d	38		sec		            SEC                     ; X := LEN(ARGUMENT1) + LEN(ARGUMENT2) + 1
.1a168e	65 0c		adc $080c	            ADC SCRATCH
.1a1690	aa		tax		            TAX
.1a1691	e2 20		sep #$20	            SEP #$20
.1a1693	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set type to STRING
.1a1695	20 d3 10	jsr $1a10d3	            JSR ALLOC
.1a1698	c2 20		rep #$20	            REP #$20
.1a169a	a5 b7		lda $08b7	            LDA ALLOCATED           ; INDEX := pointer to the string
.1a169c	85 08		sta $0808	            STA INDEX
.1a169e	e2 20		sep #$20	            SEP #$20
.1a16a0	a5 b9		lda $08b9	            LDA ALLOCATED+2
.1a16a2	85 0a		sta $080a	            STA INDEX+2
.1a16a4	a0 00 00	ldy #$0000	            LDY #0                  ; Set the target index to the beginning
.1a16a7	08		php		            PHP
.1a16a8	c2 20		rep #$20	            REP #$20
.1a16aa	48		pha		            PHA
.1a16ab	e2 20		sep #$20	            SEP #$20
.1a16ad	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a16af	48		pha		            PHA
.1a16b0	ab		plb		            PLB
.1a16b1	c2 20		rep #$20	            REP #$20
.1a16b3	68		pla		            PLA
.1a16b4	28		plp		            PLP
.1a16b5	a6 23		ldx $0823	            LDX ARGUMENT1
.1a16b7	bd 00 00	lda $1a0000,x	loop1       LDA #0,B,X              ; Get the Xth byte of ARGUMENT1
.1a16ba	f0 06		beq $1a16c2	            BEQ copy_2              ; Is it null? Yes: move on to the next string
.1a16bc	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.1a16be	e8		inx		            INX                     ; Point to the next characters
.1a16bf	c8		iny		            INY
.1a16c0	80 f5		bra $1a16b7	            BRA loop1               ; And do again
.1a16c2					copy_2
.1a16c2	e2 20		sep #$20	            SEP #$20
.1a16c4	08		php		            PHP
.1a16c5	c2 20		rep #$20	            REP #$20
.1a16c7	48		pha		            PHA
.1a16c8	e2 20		sep #$20	            SEP #$20
.1a16ca	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a16cc	48		pha		            PHA
.1a16cd	ab		plb		            PLB
.1a16ce	c2 20		rep #$20	            REP #$20
.1a16d0	68		pla		            PLA
.1a16d1	28		plp		            PLP
.1a16d2	a6 29		ldx $0829	            LDX ARGUMENT2
.1a16d4	bd 00 00	lda $1a0000,x	loop2       LDA #0,B,X              ; Get the Xth byte of ARGUMENT2
.1a16d7	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.1a16d9	f0 04		beq $1a16df	            BEQ terminate           ; Is it null? Yes: move on to the next string
.1a16db	e8		inx		            INX                     ; Point to the next characters
.1a16dc	c8		iny		            INY
.1a16dd	80 f5		bra $1a16d4	            BRA loop2               ; And do again
.1a16df					terminate
.1a16df	c2 20		rep #$20	            REP #$20
.1a16e1	a5 08		lda $0808	            LDA INDEX               ; Set ARGUMENT1 to the new string
.1a16e3	85 23		sta $0823	            STA ARGUMENT1
.1a16e5	e2 20		sep #$20	            SEP #$20
.1a16e7	a5 0a		lda $080a	            LDA INDEX+2
.1a16e9	85 25		sta $0825	            STA ARGUMENT1+2
.1a16eb	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set ARGUMENT1's type to STRING
.1a16ed	85 27		sta $0827	            STA ARGTYPE1
.1a16ef	ab		plb		            PLB
.1a16f0	2b		pld		            PLD
.1a16f1	28		plp		            PLP
.1a16f2	60		rts		            RTS
.1a16f3					STRCPY
.1a16f3	da		phx		            PHX
.1a16f4	5a		phy		            PHY
.1a16f5	08		php		            PHP
.1a16f6	0b		phd		            PHD
.1a16f7	8b		phb		            PHB
.1a16f8	08		php		            PHP
.1a16f9	c2 20		rep #$20	            REP #$20
.1a16fb	48		pha		            PHA
.1a16fc	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a16ff	5b		tcd		            TCD
.1a1700	68		pla		            PLA
.1a1701	28		plp		            PLP
.1a1702	c2 20		rep #$20	            REP #$20
.1a1704	a5 0a		lda $080a	            LDA INDEX+2
.1a1706	48		pha		            PHA
.1a1707	a5 08		lda $0808	            LDA INDEX
.1a1709	48		pha		            PHA
.1a170a	c2 30		rep #$30	            REP #$30
.1a170c	08		php		            PHP
.1a170d	c2 20		rep #$20	            REP #$20
.1a170f	48		pha		            PHA
.1a1710	e2 20		sep #$20	            SEP #$20
.1a1712	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1714	48		pha		            PHA
.1a1715	ab		plb		            PLB
.1a1716	c2 20		rep #$20	            REP #$20
.1a1718	68		pla		            PLA
.1a1719	28		plp		            PLP
.1a171a	a6 23		ldx $0823	            LDX ARGUMENT1
.1a171c	20 ed 15	jsr $1a15ed	            JSR STRLEN
.1a171f	98		tya		            TYA
.1a1720	aa		tax		            TAX
.1a1721	e8		inx		            INX                     ; Put length of string (plus NUL) in X
.1a1722	e2 20		sep #$20	            SEP #$20
.1a1724	a9 02		lda #$02	            LDA #TYPE_STRING
.1a1726	20 d3 10	jsr $1a10d3	            JSR ALLOC
.1a1729	c2 20		rep #$20	            REP #$20
.1a172b	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a172d	85 08		sta $0808	            STA INDEX
.1a172f	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a1731	85 0a		sta $080a	            STA INDEX+2
.1a1733	a0 00 00	ldy #$0000	            LDY #0
.1a1736	e2 20		sep #$20	            SEP #$20
.1a1738	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Copy the data to the allocated string
.1a173a	97 08		sta [$0808],y	            STA [INDEX],Y
.1a173c	f0 03		beq $1a1741	            BEQ ret_copy
.1a173e	c8		iny		            INY
.1a173f	80 f7		bra $1a1738	            BRA loop
.1a1741					ret_copy
.1a1741	c2 20		rep #$20	            REP #$20
.1a1743	a5 08		lda $0808	            LDA INDEX
.1a1745	85 23		sta $0823	            STA ARGUMENT1
.1a1747	a5 0a		lda $080a	            LDA INDEX+2
.1a1749	85 25		sta $0825	            STA ARGUMENT1+2
.1a174b	c2 20		rep #$20	            REP #$20
.1a174d	68		pla		            PLA
.1a174e	85 08		sta $0808	            STA INDEX
.1a1750	68		pla		            PLA
.1a1751	85 0a		sta $080a	            STA INDEX+2
.1a1753	ab		plb		            PLB
.1a1754	2b		pld		            PLD
.1a1755	28		plp		            PLP
.1a1756	7a		ply		            PLY
.1a1757	fa		plx		            PLX
.1a1758	60		rts		            RTS
.1a1759					STRSUBSTR
.1a1759	08		php		            PHP
.1a175a	e2 20		sep #$20	            SEP #$20
.1a175c	c2 10		rep #$10	            REP #$10
.1a175e	a0 00 00	ldy #$0000	            LDY #0
.1a1761	b7 23		lda [$0823],y	count_loop  LDA [ARGUMENT1],Y
.1a1763	f0 05		beq $1a176a	            BEQ counted
.1a1765	c8		iny		            INY
.1a1766	80 f9		bra $1a1761	            BRA count_loop
.1a1768	84 92		sty $0892	            STY MTEMP               ; MTEMP := length of the source string
.1a176a					counted
.1a176a	c2 30		rep #$30	            REP #$30
.1a176c	c4 29		cpy $0829	            CPY ARGUMENT2           ; length of string <= index?
.1a176e	90 13		bcc $1a1783	            BLT ret_empty           ; Yes: return empty string
.1a1770	f0 11		beq $1a1783	            BEQ ret_empty
.1a1772	a5 8f		lda $088f	            LDA MCOUNT              ; Is the desired count <= 0?
.1a1774	30 0d		bmi $1a1783	            BMI ret_empty
.1a1776	f0 0b		beq $1a1783	            BEQ ret_empty           ; Yes: return the empty string
.1a1778	c4 8f		cpy $088f	            CPY MCOUNT              ; Is the desired length < the length of the source?
.1a177a	b0 12		bcs $1a178e	            BGE do_slice            ; Yes: go ahead and get the substring
.1a177c	a5 29		lda $0829	            LDA ARGUMENT2           ; Is INDEX == 0?
.1a177e	d0 0e		bne $1a178e	            BNE do_slice            ; No: do a slice
.1a1780	4c d7 17	jmp $1a17d7	            JMP done                ; Yes: just return the source string
.1a1783					ret_empty
.1a1783	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a1786	e2 20		sep #$20	            SEP #$20
.1a1788	a9 00		lda #$00	            LDA #0
.1a178a	87 16		sta [$0816]	            STA [STRPTR]
.1a178c	80 39		bra $1a17c7	            BRA finish_copy
.1a178e					do_slice
.1a178e	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a1791	c2 30		rep #$30	            REP #$30
.1a1793	18		clc		            CLC                     ; ARGUMENT1 := ARGUMENT1 + index
.1a1794	a5 23		lda $0823	            LDA ARGUMENT1
.1a1796	65 29		adc $0829	            ADC ARGUMENT2
.1a1798	85 23		sta $0823	            STA ARGUMENT1
.1a179a	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a179c	69 00 00	adc #$0000	            ADC #0
.1a179f	85 25		sta $0825	            STA ARGUMENT1+2
.1a17a1	a0 00 00	ldy #$0000	            LDY #0
.1a17a4					copy_loop
.1a17a4	e2 20		sep #$20	            SEP #$20
.1a17a6	a7 23		lda [$0823]	            LDA [ARGUMENT1]         ; Copy a character from the substring to the temporary string
.1a17a8	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a17aa	f0 1b		beq $1a17c7	            BEQ finish_copy         ; If it is a NULL, we're done
.1a17ac	c2 20		rep #$20	            REP #$20
.1a17ae	18		clc		            CLC                     ; Move to the next character
.1a17af	a5 23		lda $0823	            LDA ARGUMENT1
.1a17b1	69 01 00	adc #$0001	            ADC #1
.1a17b4	85 23		sta $0823	            STA ARGUMENT1
.1a17b6	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a17b8	69 00 00	adc #$0000	            ADC #0
.1a17bb	85 25		sta $0825	            STA ARGUMENT1+2
.1a17bd	c8		iny		            INY
.1a17be	c4 8f		cpy $088f	            CPY MCOUNT              ; Have we reached the limit to copy?
.1a17c0	d0 e2		bne $1a17a4	            BNE copy_loop           ; No: copy the next byte
.1a17c2	a9 00 00	lda #$0000	            LDA #0                  ; Null terminate string
.1a17c5	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a17c7					finish_copy
.1a17c7	c2 20		rep #$20	            REP #$20
.1a17c9	a5 16		lda $0816	            LDA STRPTR
.1a17cb	85 23		sta $0823	            STA ARGUMENT1
.1a17cd	a5 18		lda $0818	            LDA STRPTR+2
.1a17cf	85 25		sta $0825	            STA ARGUMENT1+2
.1a17d1	e2 20		sep #$20	            SEP #$20
.1a17d3	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a17d5	85 27		sta $0827	            STA ARGTYPE1
.1a17d7					done
.1a17d7	28		plp		            PLP
.1a17d8	60		rts		            RTS
.1a17d9					OP_STR_LT
.1a17d9	08		php		            PHP
.1a17da	c2 30		rep #$30	            REP #$30
.1a17dc	20 00 16	jsr $1a1600	            JSR STRCMP
.1a17df	a5 23		lda $0823	            LDA ARGUMENT1
.1a17e1	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.1a17e4	d0 05		bne $1a17eb	            BNE ret_false               ; No: return false
.1a17e6					ret_true
.1a17e6	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a17e9	80 03		bra $1a17ee	            BRA done
.1a17eb					ret_false
.1a17eb	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a17ee	28		plp		done        PLP
.1a17ef	60		rts		            RTS
.1a17f0					OP_STR_GT
.1a17f0	08		php		            PHP
.1a17f1	c2 30		rep #$30	            REP #$30
.1a17f3	20 00 16	jsr $1a1600	            JSR STRCMP
.1a17f6	a5 23		lda $0823	            LDA ARGUMENT1
.1a17f8	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.1a17fb	d0 05		bne $1a1802	            BNE ret_false               ; No: return false
.1a17fd					ret_true
.1a17fd	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a1800	80 03		bra $1a1805	            BRA done
.1a1802					ret_false
.1a1802	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a1805	28		plp		done        PLP
.1a1806	60		rts		            RTS
.1a1807					OP_STR_EQ
.1a1807	08		php		            PHP
.1a1808	c2 30		rep #$30	            REP #$30
.1a180a	20 00 16	jsr $1a1600	            JSR STRCMP
.1a180d	a5 23		lda $0823	            LDA ARGUMENT1
.1a180f	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.1a1812	d0 05		bne $1a1819	            BNE ret_false               ; No: return false
.1a1814					ret_true
.1a1814	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a1817	80 03		bra $1a181c	            BRA done
.1a1819					ret_false
.1a1819	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a181c	28		plp		done        PLP
.1a181d	60		rts		            RTS
.1a181e					OP_STR_NE
.1a181e	08		php		            PHP
.1a181f	c2 30		rep #$30	            REP #$30
.1a1821	20 00 16	jsr $1a1600	            JSR STRCMP
.1a1824	a5 23		lda $0823	            LDA ARGUMENT1
.1a1826	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.1a1829	f0 05		beq $1a1830	            BEQ ret_false               ; Yes: return false
.1a182b					ret_true
.1a182b	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a182e	80 03		bra $1a1833	            BRA done
.1a1830					ret_false
.1a1830	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a1833	28		plp		done        PLP
.1a1834	60		rts		            RTS
.1a1835					OP_STR_GTE
.1a1835	08		php		            PHP
.1a1836	c2 30		rep #$30	            REP #$30
.1a1838	20 00 16	jsr $1a1600	            JSR STRCMP
.1a183b	a5 23		lda $0823	            LDA ARGUMENT1
.1a183d	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.1a1840	f0 05		beq $1a1847	            BEQ ret_false               ; Yes: return false
.1a1842					ret_true
.1a1842	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a1845	80 03		bra $1a184a	            BRA done
.1a1847					ret_false
.1a1847	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a184a	28		plp		done        PLP
.1a184b	60		rts		            RTS
.1a184c					OP_STR_LTE
.1a184c	08		php		            PHP
.1a184d	c2 30		rep #$30	            REP #$30
.1a184f	20 00 16	jsr $1a1600	            JSR STRCMP
.1a1852	a5 23		lda $0823	            LDA ARGUMENT1
.1a1854	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.1a1857	f0 05		beq $1a185e	            BEQ ret_false               ; Yes: return false
.1a1859					ret_true
.1a1859	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a185c	80 03		bra $1a1861	            BRA done
.1a185e					ret_false
.1a185e	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a1861	28		plp		done        PLP
.1a1862	60		rts		            RTS
.1a1863					STR_NORMAL
.1a1863	08		php		            PHP
.1a1864	e2 20		sep #$20	            SEP #$20
.1a1866	a5 27		lda $0827	            LDA ARGTYPE1            ; Is it a string?
.1a1868	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a186a	d0 1d		bne $1a1889	            BNE done                ; No: return it
.1a186c	a5 23		lda $0823	            LDA ARGUMENT1           ; Is it a null pointer?
.1a186e	d0 19		bne $1a1889	            BNE done
.1a1870	a5 24		lda $0824	            LDA ARGUMENT1+1
.1a1872	d0 15		bne $1a1889	            BNE done
.1a1874	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1876	d0 11		bne $1a1889	            BNE done                ; No: return it
.1a1878	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a187b	a9 00		lda #$00	            LDA #0
.1a187d	87 16		sta [$0816]	            STA [STRPTR]            ; Make it empty
.1a187f	c2 20		rep #$20	            REP #$20
.1a1881	a5 16		lda $0816	            LDA STRPTR
.1a1883	85 23		sta $0823	            STA ARGUMENT1
.1a1885	a5 18		lda $0818	            LDA STRPTR+2
.1a1887	85 25		sta $0825	            STA ARGUMENT1+2
.1a1889	28		plp		done        PLP
.1a188a	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\listing.s

.1a188b					LISTPROG
.1a188b	48		pha		            PHA
.1a188c	5a		phy		            PHY
.1a188d	0b		phd		            PHD
.1a188e	08		php		            PHP
.1a188f	08		php		            PHP
.1a1890	c2 20		rep #$20	            REP #$20
.1a1892	48		pha		            PHA
.1a1893	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1896	5b		tcd		            TCD
.1a1897	68		pla		            PLA
.1a1898	28		plp		            PLP
.1a1899	c2 30		rep #$30	            REP #$30
.1a189b	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a189e	85 00		sta $0800	            STA BIP
.1a18a0	85 1a		sta $081a	            STA CURLINE
.1a18a2	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a18a5	85 02		sta $0802	            STA BIP+2
.1a18a7	85 1c		sta $081c	            STA CURLINE+2
.1a18a9	22 3c 11 00	jsl $00113c	list_loop   JSL FK_TESTBREAK
.1a18ad	b0 20		bcs $1a18cf	            BCS throw_break     ; If C: user pressed an interrupt key, stop the listing
.1a18af	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.1a18b2	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.1a18b4	f0 0f		beq $1a18c5	            BEQ done
.1a18b6	c5 55		cmp $0855	            CMP MARG1
.1a18b8	90 10		bcc $1a18ca	            BLT skip_line
.1a18ba	c5 59		cmp $0859	            CMP MARG2
.1a18bc	f0 02		beq $1a18c0	            BEQ print_line
.1a18be	b0 05		bcs $1a18c5	            BGE done
.1a18c0					print_line
.1a18c0	20 ee 18	jsr $1a18ee	            JSR LISTLINE
.1a18c3	80 e4		bra $1a18a9	            BRA list_loop
.1a18c5	28		plp		done        PLP
.1a18c6	2b		pld		            PLD
.1a18c7	7a		ply		            PLY
.1a18c8	68		pla		            PLA
.1a18c9	60		rts		            RTS
.1a18ca					skip_line
.1a18ca	20 fa 21	jsr $1a21fa	            JSR NEXTLINE
.1a18cd	80 da		bra $1a18a9	            BRA list_loop           ; And try again
.1a18cf					throw_break
.1a18cf	08		php		            PHP
.1a18d0	c2 20		rep #$20	            REP #$20
.1a18d2	48		pha		            PHA
.1a18d3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a18d6	5b		tcd		            TCD
.1a18d7	68		pla		            PLA
.1a18d8	28		plp		            PLP
.1a18d9	e2 20		sep #$20	            SEP #$20
.1a18db	a9 01		lda #$01	            LDA #ERR_BREAK
.1a18dd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a18e1	c2 20		rep #$20	            REP #$20
.1a18e3	29 ff 00	and #$00ff	            AND #$00FF
.1a18e6	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a18e9	e2 20		sep #$20	            SEP #$20
.1a18eb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a18ee					LISTLINE
.1a18ee	08		php		            PHP
.1a18ef	c2 30		rep #$30	            REP #$30
.1a18f1	85 23		sta $0823	            STA ARGUMENT1
.1a18f3	64 25		stz $0825	            STZ ARGUMENT1+2
.1a18f5	20 60 15	jsr $1a1560	            JSR ITOS
.1a18f8	a5 16		lda $0816	            LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a18fa	1a		inc a		            INC A
.1a18fb	85 23		sta $0823	            STA ARGUMENT1
.1a18fd	a5 18		lda $0818	            LDA STRPTR+2
.1a18ff	85 25		sta $0825	            STA ARGUMENT1+2
.1a1901	20 ff 45	jsr $1a45ff	            JSR PR_STRING
.1a1904	18		clc		            CLC                 ; Move the BIP to the first byte of the line
.1a1905	a5 1a		lda $081a	            LDA CURLINE
.1a1907	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a190a	85 00		sta $0800	            STA BIP
.1a190c	a5 1c		lda $081c	            LDA CURLINE+2
.1a190e	69 00 00	adc #$0000	            ADC #0
.1a1911	85 02		sta $0802	            STA BIP+2
.1a1913	e2 20		sep #$20	            SEP #$20
.1a1915	a9 20		lda #$20	            LDA #CHAR_SP
.1a1917	20 18 00	jsr $1a0018	            JSR PRINTC
.1a191a	c2 20		rep #$20	            REP #$20
.1a191c					loop
.1a191c	20 2d 19	jsr $1a192d	            JSR LISTBYTE
.1a191f	90 fb		bcc $1a191c	            BCC loop
.1a1921	e2 20		sep #$20	            SEP #$20
.1a1923	a9 0d		lda #$0d	            LDA #CHAR_CR
.1a1925	20 18 00	jsr $1a0018	            JSR PRINTC
.1a1928	20 fa 21	jsr $1a21fa	            JSR NEXTLINE
.1a192b	28		plp		            PLP
.1a192c	60		rts		            RTS
.1a192d					LISTBYTE
.1a192d	08		php		            PHP
.1a192e	0b		phd		            PHD
.1a192f	8b		phb		            PHB
.1a1930	08		php		            PHP
.1a1931	c2 20		rep #$20	            REP #$20
.1a1933	48		pha		            PHA
.1a1934	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1937	5b		tcd		            TCD
.1a1938	68		pla		            PLA
.1a1939	28		plp		            PLP
.1a193a	08		php		            PHP
.1a193b	e2 20		sep #$20	            SEP #$20
.1a193d	48		pha		            PHA
.1a193e	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1940	48		pha		            PHA
.1a1941	ab		plb		            PLB
.1a1942	68		pla		            PLA
.1a1943	28		plp		            PLP
.1a1944	e2 20		sep #$20	            SEP #$20
.1a1946	c2 10		rep #$10	            REP #$10
.1a1948	a7 00		lda [$0800]	            LDA [BIP]           ; Get the current byte
.1a194a	f0 3a		beq $1a1986	            BEQ end_of_line     ; If it's 0, return with C set
.1a194c	30 05		bmi $1a1953	            BMI is_token        ; If it's 0x80 - 0xFF, it's a token
.1a194e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a1951	80 29		bra $1a197c	            BRA done            ; And return
.1a1953					is_token
.1a1953	c2 20		rep #$20	            REP #$20
.1a1955	29 7f 00	and #$007f	            AND #$007F          ; Compute the index of the token
.1a1958	0a		asl a		            ASL A               ; In the token table
.1a1959	0a		asl a		            ASL A
.1a195a	0a		asl a		            ASL A
.1a195b	18		clc		            CLC
.1a195c	69 fb 0c	adc #$0cfb	            ADC #<>TOKENS       ; Set INDEX to the address of the token
.1a195f	85 08		sta $0808	            STA INDEX
.1a1961	a9 1a 00	lda #$001a	            LDA #`TOKENS
.1a1964	69 00 00	adc #$0000	            ADC #0
.1a1967	85 0a		sta $080a	            STA INDEX+2
.1a1969					pr_default
.1a1969	08		php		            PHP
.1a196a	e2 20		sep #$20	            SEP #$20
.1a196c	48		pha		            PHA
.1a196d	a9 1a		lda #$1a	            LDA #`TOKENS
.1a196f	48		pha		            PHA
.1a1970	ab		plb		            PLB
.1a1971	68		pla		            PLA
.1a1972	28		plp		            PLP
.1a1973	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.1a1976	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1978	aa		tax		            TAX
.1a1979	20 64 04	jsr $1a0464	            JSR PRINTS
.1a197c					done
.1a197c	c2 20		rep #$20	            REP #$20
.1a197e	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1981	ab		plb		            PLB
.1a1982	2b		pld		            PLD
.1a1983	28		plp		            PLP
.1a1984	18		clc		            CLC
.1a1985	60		rts		            RTS
.1a1986	ab		plb		end_of_line PLB
.1a1987	2b		pld		            PLD
.1a1988	28		plp		            PLP
.1a1989	38		sec		            SEC
.1a198a	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\eval.s

.1a198b					INITEVALSP
.1a198b	08		php		            PHP
.1a198c	c2 20		rep #$20	            REP #$20
.1a198e	a9 ff 6f	lda #$6fff	            LDA #ARGUMENT_TOP
.1a1991	85 1f		sta $081f	            STA ARGUMENTSP
.1a1993	a9 ff 7f	lda #$7fff	            LDA #OPERATOR_TOP
.1a1996	85 21		sta $0821	            STA OPERATORSP
.1a1998	a9 ff ff	lda #$ffff	            LDA #$FFFF
.1a199b	85 23		sta $0823	            STA ARGUMENT1
.1a199d	85 25		sta $0825	            STA ARGUMENT1+2
.1a199f	85 29		sta $0829	            STA ARGUMENT2
.1a19a1	85 2b		sta $082b	            STA ARGUMENT2+2
.1a19a3	e2 20		sep #$20	            SEP #$20
.1a19a5	85 27		sta $0827	            STA ARGTYPE1
.1a19a7	85 2d		sta $082d	            STA ARGTYPE2
.1a19a9	28		plp		            PLP
.1a19aa	60		rts		            RTS
.1a19ab					PHARGUMENT
.1a19ab	08		php		            PHP
.1a19ac	0b		phd		            PHD
.1a19ad	8b		phb		            PHB
.1a19ae	08		php		            PHP
.1a19af	c2 20		rep #$20	            REP #$20
.1a19b1	48		pha		            PHA
.1a19b2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a19b5	5b		tcd		            TCD
.1a19b6	68		pla		            PLA
.1a19b7	28		plp		            PLP
.1a19b8	08		php		            PHP
.1a19b9	e2 20		sep #$20	            SEP #$20
.1a19bb	48		pha		            PHA
.1a19bc	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a19be	48		pha		            PHA
.1a19bf	ab		plb		            PLB
.1a19c0	68		pla		            PLA
.1a19c1	28		plp		            PLP
.1a19c2	c2 30		rep #$30	            REP #$30
.1a19c4	5a		phy		            PHY
.1a19c5	a4 1f		ldy $081f	            LDY ARGUMENTSP
.1a19c7	bd 00 00	lda $0000,x	            LDA #0,B,X
.1a19ca	99 00 00	sta $0000,y	            STA #0,B,Y
.1a19cd	bd 02 00	lda $0002,x	            LDA #2,B,X
.1a19d0	99 02 00	sta $0002,y	            STA #2,B,Y
.1a19d3	e2 20		sep #$20	            SEP #$20
.1a19d5	bd 04 00	lda $0004,x	            LDA #4,B,X
.1a19d8	99 04 00	sta $0004,y	            STA #4,B,Y
.1a19db	c2 20		rep #$20	            REP #$20
.1a19dd	38		sec		            SEC
.1a19de	98		tya		            TYA
.1a19df	e9 05 00	sbc #$0005	            SBC #ARGUMENT_SIZE
.1a19e2	85 1f		sta $081f	            STA ARGUMENTSP
.1a19e4	7a		ply		            PLY
.1a19e5	ab		plb		            PLB
.1a19e6	2b		pld		            PLD
.1a19e7	28		plp		            PLP
.1a19e8	60		rts		            RTS
.1a19e9					PLARGUMENT
.1a19e9	08		php		            PHP
.1a19ea	0b		phd		            PHD
.1a19eb	8b		phb		            PHB
.1a19ec	08		php		            PHP
.1a19ed	c2 20		rep #$20	            REP #$20
.1a19ef	48		pha		            PHA
.1a19f0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a19f3	5b		tcd		            TCD
.1a19f4	68		pla		            PLA
.1a19f5	28		plp		            PLP
.1a19f6	08		php		            PHP
.1a19f7	e2 20		sep #$20	            SEP #$20
.1a19f9	48		pha		            PHA
.1a19fa	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a19fc	48		pha		            PHA
.1a19fd	ab		plb		            PLB
.1a19fe	68		pla		            PLA
.1a19ff	28		plp		            PLP
.1a1a00	c2 30		rep #$30	            REP #$30
.1a1a02	5a		phy		            PHY
.1a1a03	18		clc		            CLC
.1a1a04	a5 1f		lda $081f	            LDA ARGUMENTSP
.1a1a06	69 05 00	adc #$0005	            ADC #ARGUMENT_SIZE
.1a1a09	85 1f		sta $081f	            STA ARGUMENTSP
.1a1a0b	a8		tay		            TAY
.1a1a0c	b9 00 00	lda $0000,y	            LDA #0,B,Y
.1a1a0f	9d 00 00	sta $0000,x	            STA #0,B,X
.1a1a12	b9 02 00	lda $0002,y	            LDA #2,B,Y
.1a1a15	9d 02 00	sta $0002,x	            STA #2,B,X
.1a1a18	e2 20		sep #$20	            SEP #$20
.1a1a1a	b9 04 00	lda $0004,y	            LDA #4,B,Y
.1a1a1d	9d 04 00	sta $0004,x	            STA #4,B,X
.1a1a20	bd 00 00	lda $0000,x	            LDA #0,B,X
.1a1a23	7a		ply		            PLY
.1a1a24	ab		plb		            PLB
.1a1a25	2b		pld		            PLD
.1a1a26	28		plp		            PLP
.1a1a27	60		rts		            RTS
.1a1a28					PHOPERATOR
.1a1a28	08		php		            PHP
.1a1a29	0b		phd		            PHD
.1a1a2a	8b		phb		            PHB
.1a1a2b	08		php		            PHP
.1a1a2c	c2 20		rep #$20	            REP #$20
.1a1a2e	48		pha		            PHA
.1a1a2f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1a32	5b		tcd		            TCD
.1a1a33	68		pla		            PLA
.1a1a34	28		plp		            PLP
.1a1a35	08		php		            PHP
.1a1a36	e2 20		sep #$20	            SEP #$20
.1a1a38	48		pha		            PHA
.1a1a39	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1a3b	48		pha		            PHA
.1a1a3c	ab		plb		            PLB
.1a1a3d	68		pla		            PLA
.1a1a3e	28		plp		            PLP
.1a1a3f	e2 20		sep #$20	            SEP #$20
.1a1a41	c2 10		rep #$10	            REP #$10
.1a1a43	5a		phy		            PHY
.1a1a44	a4 21		ldy $0821	            LDY OPERATORSP
.1a1a46	99 00 00	sta $0000,y	            STA #0,B,Y
.1a1a49	88		dey		            DEY
.1a1a4a	84 21		sty $0821	            STY OPERATORSP
.1a1a4c	7a		ply		done        PLY
.1a1a4d	ab		plb		            PLB
.1a1a4e	2b		pld		            PLD
.1a1a4f	28		plp		            PLP
.1a1a50	60		rts		            RTS
.1a1a51					PLOPERATOR
.1a1a51	08		php		            PHP
.1a1a52	0b		phd		            PHD
.1a1a53	8b		phb		            PHB
.1a1a54	08		php		            PHP
.1a1a55	c2 20		rep #$20	            REP #$20
.1a1a57	48		pha		            PHA
.1a1a58	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1a5b	5b		tcd		            TCD
.1a1a5c	68		pla		            PLA
.1a1a5d	28		plp		            PLP
.1a1a5e	08		php		            PHP
.1a1a5f	e2 20		sep #$20	            SEP #$20
.1a1a61	48		pha		            PHA
.1a1a62	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1a64	48		pha		            PHA
.1a1a65	ab		plb		            PLB
.1a1a66	68		pla		            PLA
.1a1a67	28		plp		            PLP
.1a1a68	e2 20		sep #$20	            SEP #$20
.1a1a6a	c2 10		rep #$10	            REP #$10
.1a1a6c	5a		phy		            PHY
.1a1a6d	a4 21		ldy $0821	            LDY OPERATORSP
.1a1a6f	c8		iny		            INY
.1a1a70	84 21		sty $0821	            STY OPERATORSP
.1a1a72	b9 00 00	lda $0000,y	            LDA #0,B,Y
.1a1a75	c2 20		rep #$20	            REP #$20
.1a1a77	29 ff 00	and #$00ff	            AND #$00FF
.1a1a7a	7a		ply		            PLY
.1a1a7b	ab		plb		            PLB
.1a1a7c	2b		pld		            PLD
.1a1a7d	28		plp		            PLP
.1a1a7e	60		rts		            RTS
.1a1a7f					OPENPARAMS
.1a1a7f	08		php		            PHP
.1a1a80	e2 20		sep #$20	            SEP #$20
.1a1a82	a9 01		lda #$01	            LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.1a1a84	20 28 1a	jsr $1a1a28	            JSR PHOPERATOR
.1a1a87	28		plp		            PLP
.1a1a88	60		rts		            RTS
.1a1a89					CLOSEPARAMS
.1a1a89	5a		phy		            PHY
.1a1a8a	08		php		            PHP
.1a1a8b	8b		phb		            PHB
.1a1a8c	08		php		            PHP
.1a1a8d	e2 20		sep #$20	            SEP #$20
.1a1a8f	48		pha		            PHA
.1a1a90	a9 00		lda #$00	            LDA #0
.1a1a92	48		pha		            PHA
.1a1a93	ab		plb		            PLB
.1a1a94	68		pla		            PLA
.1a1a95	28		plp		            PLP
.1a1a96	e2 20		sep #$20	            SEP #$20
.1a1a98	a4 21		ldy $0821	            LDY OPERATORSP      ; Peek at the top operator
.1a1a9a	b9 01 00	lda $0001,y	            LDA #1,B,Y
.1a1a9d	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the marker for the start of a parameter list
.1a1a9f	d0 08		bne $1a1aa9	            BNE error           ; No: there's a problem
.1a1aa1	c2 20		rep #$20	            REP #$20
.1a1aa3	e6 21		inc $0821	            INC OPERATORSP      ; Yes: remove it from the operator stack.
.1a1aa5	ab		plb		            PLB
.1a1aa6	28		plp		            PLP
.1a1aa7	7a		ply		            PLY
.1a1aa8	60		rts		            RTS
.1a1aa9					error
.1a1aa9	08		php		            PHP
.1a1aaa	c2 20		rep #$20	            REP #$20
.1a1aac	48		pha		            PHA
.1a1aad	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1ab0	5b		tcd		            TCD
.1a1ab1	68		pla		            PLA
.1a1ab2	28		plp		            PLP
.1a1ab3	e2 20		sep #$20	            SEP #$20
.1a1ab5	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1ab7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1abb	c2 20		rep #$20	            REP #$20
.1a1abd	29 ff 00	and #$00ff	            AND #$00FF
.1a1ac0	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a1ac3	e2 20		sep #$20	            SEP #$20
.1a1ac5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1ac8					OPHIGHPREC
.1a1ac8	48		pha		            PHA
.1a1ac9	08		php		            PHP
.1a1aca	0b		phd		            PHD
.1a1acb	8b		phb		            PHB
.1a1acc	08		php		            PHP
.1a1acd	c2 20		rep #$20	            REP #$20
.1a1acf	48		pha		            PHA
.1a1ad0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1ad3	5b		tcd		            TCD
.1a1ad4	68		pla		            PLA
.1a1ad5	28		plp		            PLP
.1a1ad6	08		php		            PHP
.1a1ad7	e2 20		sep #$20	            SEP #$20
.1a1ad9	48		pha		            PHA
.1a1ada	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1adc	48		pha		            PHA
.1a1add	ab		plb		            PLB
.1a1ade	68		pla		            PLA
.1a1adf	28		plp		            PLP
.1a1ae0	e2 20		sep #$20	            SEP #$20
.1a1ae2	a4 21		ldy $0821	            LDY OPERATORSP
.1a1ae4	c0 ff 7f	cpy #$7fff	            CPY #OPERATOR_TOP       ; Is the stack empty?
.1a1ae7	f0 11		beq $1a1afa	            BEQ is_false            ; Yes: return false
.1a1ae9	20 5a 0c	jsr $1a0c5a	            JSR TOKPRECED
.1a1aec	85 0c		sta $080c	            STA SCRATCH             ; Save it for later comparison
.1a1aee	b9 01 00	lda $0001,y	            LDA #1,B,Y              ; Get the operator at the top of the stack
.1a1af1	20 5a 0c	jsr $1a0c5a	            JSR TOKPRECED
.1a1af4	c5 0c		cmp $080c	            CMP SCRATCH             ; Compare the priorities (0 = highest priority)
.1a1af6	f0 02		beq $1a1afa	            BEQ is_false            ; A = SCRATCH, return false
.1a1af8	90 08		bcc $1a1b02	            BCC is_true             ; A < SCRATCH (A is higher priority), return false
.1a1afa					is_false
.1a1afa	c2 20		rep #$20	            REP #$20
.1a1afc	ab		plb		            PLB
.1a1afd	2b		pld		            PLD
.1a1afe	28		plp		            PLP
.1a1aff	68		pla		            PLA
.1a1b00	18		clc		            CLC
.1a1b01	60		rts		            RTS
.1a1b02					is_true
.1a1b02	c2 20		rep #$20	            REP #$20
.1a1b04	ab		plb		            PLB                     ; A > SCRATCH (A is lower priority), return true
.1a1b05	2b		pld		            PLD
.1a1b06	28		plp		            PLP
.1a1b07	68		pla		            PLA
.1a1b08	38		sec		            SEC
.1a1b09	60		rts		            RTS
.1a1b0a					EVALNUMBER
.1a1b0a	4c d8 08	jmp $1a08d8	            JMP PARSEINT
.1a1b0d					ARR_GETIDX
.1a1b0d	08		php		            PHP
.1a1b0e	e2 20		sep #$20	            SEP #$20
.1a1b10	a9 00		lda #$00	            LDA #0
.1a1b12	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF     ; Set the dimension to 0
.1a1b16	a2 01 00	ldx #$0001	            LDX #1
.1a1b19					eval_index
.1a1b19	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a1b1c	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a1b1f	c2 20		rep #$20	            REP #$20
.1a1b21	a5 23		lda $0823	            LDA ARGUMENT1       ; Save the index to the array index buffer
.1a1b23	9f 00 4d 00	sta $004d00,x	            STA @l ARRIDXBUF,X
.1a1b27	e2 20		sep #$20	            SEP #$20
.1a1b29	af 00 4d 00	lda $004d00	            LDA @l ARRIDXBUF    ; Increment the index count
.1a1b2d	1a		inc a		            INC A
.1a1b2e	30 3e		bmi $1a1b6e	            BMI arg_err         ; If more than 127 dimensions, throw a range error
.1a1b30	8f 00 4d 00	sta $004d00	            STA @l ARRIDXBUF
.1a1b34	e8		inx		            INX
.1a1b35	e8		inx		            INX
.1a1b36	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a1b39	e2 20		sep #$20	            SEP #$20
.1a1b3b	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.1a1b3d	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it ")"
.1a1b3f	f0 09		beq $1a1b4a	            BEQ clean_op        ; Yes: cleanup the argument stack
.1a1b41	c9 2c		cmp #$2c	            CMP #','            ; Is it a comma?
.1a1b43	d0 0a		bne $1a1b4f	            BNE syntax_err      ; No: throw a syntax error
.1a1b45					skip_comma
.1a1b45	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1b48	80 cf		bra $1a1b19	            BRA eval_index      ; And grab the next index
.1a1b4a					clean_op
.1a1b4a	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1b4d	28		plp		            PLP
.1a1b4e	60		rts		            RTS
.1a1b4f					syntax_err
.1a1b4f	08		php		            PHP
.1a1b50	c2 20		rep #$20	            REP #$20
.1a1b52	48		pha		            PHA
.1a1b53	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1b56	5b		tcd		            TCD
.1a1b57	68		pla		            PLA
.1a1b58	28		plp		            PLP
.1a1b59	e2 20		sep #$20	            SEP #$20
.1a1b5b	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1b5d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1b61	c2 20		rep #$20	            REP #$20
.1a1b63	29 ff 00	and #$00ff	            AND #$00FF
.1a1b66	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a1b69	e2 20		sep #$20	            SEP #$20
.1a1b6b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1b6e					arg_err
.1a1b6e	08		php		            PHP
.1a1b6f	c2 20		rep #$20	            REP #$20
.1a1b71	48		pha		            PHA
.1a1b72	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1b75	5b		tcd		            TCD
.1a1b76	68		pla		            PLA
.1a1b77	28		plp		            PLP
.1a1b78	e2 20		sep #$20	            SEP #$20
.1a1b7a	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a1b7c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1b80	c2 20		rep #$20	            REP #$20
.1a1b82	29 ff 00	and #$00ff	            AND #$00FF
.1a1b85	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a1b88	e2 20		sep #$20	            SEP #$20
.1a1b8a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1b8d					EVALREF
.1a1b8d	08		php		            PHP
.1a1b8e					get_name
.1a1b8e	20 1f 54	jsr $1a541f	            JSR VAR_FINDNAME
.1a1b91	90 47		bcc $1a1bda	            BCC syntax_err      ; If we didn't find a name, thrown an error
.1a1b93	e2 20		sep #$20	            SEP #$20
.1a1b95	a5 ea		lda $08ea	            LDA TOFINDTYPE      ; Check the type of the variable
.1a1b97	29 80		and #$80	            AND #$80            ; Is it an array?
.1a1b99	d0 06		bne $1a1ba1	            BNE is_array        ; Yes: look for the indexes
.1a1b9b	20 20 52	jsr $1a5220	            JSR VAR_REF
.1a1b9e	4c d8 1b	jmp $1a1bd8	            JMP done
.1a1ba1					is_array
.1a1ba1	20 92 51	jsr $1a5192	            JSR VAR_FIND
.1a1ba4	90 53		bcc $1a1bf9	            BCC notfound
.1a1ba6	c2 20		rep #$20	            REP #$20
.1a1ba8	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a1baa	48		pha		            PHA
.1a1bab	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a1bad	48		pha		            PHA
.1a1bae	a0 09 00	ldy #$0009	            LDY #BINDING.VALUE
.1a1bb1	b7 08		lda [$0808],y	            LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.1a1bb3	85 c0		sta $08c0	            STA CURRBLOCK
.1a1bb5	e2 20		sep #$20	            SEP #$20
.1a1bb7	c8		iny		            INY
.1a1bb8	c8		iny		            INY
.1a1bb9	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1bbb	85 c2		sta $08c2	            STA CURRBLOCK+2
.1a1bbd	e2 20		sep #$20	            SEP #$20
.1a1bbf	a9 8f		lda #$8f	            LDA #TOK_LPAREN
.1a1bc1	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a1bc4	20 7f 1a	jsr $1a1a7f	            JSR OPENPARAMS
.1a1bc7					            PHARRIDX
.1a1bc7	20 0d 1b	jsr $1a1b0d	            JSR ARR_GETIDX
.1a1bca	20 f6 68	jsr $1a68f6	            JSR ARR_REF
.1a1bcd					            PLARRIDX
.1a1bcd	20 89 1a	jsr $1a1a89	            JSR CLOSEPARAMS
.1a1bd0	c2 20		rep #$20	            REP #$20
.1a1bd2	68		pla		            PLA
.1a1bd3	85 c2		sta $08c2	            STA CURRBLOCK+2
.1a1bd5	68		pla		            PLA
.1a1bd6	85 c0		sta $08c0	            STA CURRBLOCK
.1a1bd8	28		plp		done        PLP
.1a1bd9	60		rts		            RTS
.1a1bda					syntax_err
.1a1bda	08		php		            PHP
.1a1bdb	c2 20		rep #$20	            REP #$20
.1a1bdd	48		pha		            PHA
.1a1bde	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1be1	5b		tcd		            TCD
.1a1be2	68		pla		            PLA
.1a1be3	28		plp		            PLP
.1a1be4	e2 20		sep #$20	            SEP #$20
.1a1be6	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1be8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1bec	c2 20		rep #$20	            REP #$20
.1a1bee	29 ff 00	and #$00ff	            AND #$00FF
.1a1bf1	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a1bf4	e2 20		sep #$20	            SEP #$20
.1a1bf6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1bf9					notfound
.1a1bf9	08		php		            PHP
.1a1bfa	c2 20		rep #$20	            REP #$20
.1a1bfc	48		pha		            PHA
.1a1bfd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1c00	5b		tcd		            TCD
.1a1c01	68		pla		            PLA
.1a1c02	28		plp		            PLP
.1a1c03	e2 20		sep #$20	            SEP #$20
.1a1c05	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a1c07	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1c0b	c2 20		rep #$20	            REP #$20
.1a1c0d	29 ff 00	and #$00ff	            AND #$00FF
.1a1c10	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a1c13	e2 20		sep #$20	            SEP #$20
.1a1c15	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1c18					EVALSTRING
.1a1c18	08		php		            PHP
.1a1c19	0b		phd		            PHD
.1a1c1a	08		php		            PHP
.1a1c1b	c2 20		rep #$20	            REP #$20
.1a1c1d	48		pha		            PHA
.1a1c1e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1c21	5b		tcd		            TCD
.1a1c22	68		pla		            PLA
.1a1c23	28		plp		            PLP
.1a1c24	e2 20		sep #$20	            SEP #$20
.1a1c26	c2 10		rep #$10	            REP #$10
.1a1c28	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1c2b	a0 00 00	ldy #$0000	            LDY #0              ; Ywill be our length counter
.1a1c2e	b7 00		lda [$0800],y	count_loop  LDA [BIP],Y         ; Get the character
.1a1c30	f0 24		beq $1a1c56	            BEQ error           ; If it's end-of-line, throw an error
.1a1c32	c9 22		cmp #$22	            CMP #CHAR_DQUOTE    ; Is it the ending double-quote?
.1a1c34	f0 03		beq $1a1c39	            BEQ found_end       ; Yes: Y should be the length
.1a1c36	c8		iny		            INY
.1a1c37	80 f5		bra $1a1c2e	            BRA count_loop
.1a1c39	84 0c		sty $080c	found_end   STY SCRATCH         ; Save the length to SCRATCH
.1a1c3b	e2 20		sep #$20	            SEP #$20
.1a1c3d	a9 02		lda #$02	            LDA #TYPE_STRING    ; Set the type to allocate to STRING
.1a1c3f	a6 0c		ldx $080c	            LDX SCRATCH         ; And the length to the length of the string literal
.1a1c41	e8		inx		            INX
.1a1c42	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a1c45	a0 00 00	ldy #$0000	            LDY #0
.1a1c48	c4 0c		cpy $080c	copy_loop   CPY SCRATCH         ; Have we copied all the characters?
.1a1c4a	f0 29		beq $1a1c75	            BEQ done            ; Yes: we're done
.1a1c4c	a7 00		lda [$0800]	            LDA [BIP]           ; No: get the next character
.1a1c4e	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And copy it to the allocated string
.1a1c50	c8		iny		            INY
.1a1c51	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1c54	80 f2		bra $1a1c48	            BRA copy_loop       ; And try the next character
.1a1c56					error
.1a1c56	08		php		            PHP
.1a1c57	c2 20		rep #$20	            REP #$20
.1a1c59	48		pha		            PHA
.1a1c5a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1c5d	5b		tcd		            TCD
.1a1c5e	68		pla		            PLA
.1a1c5f	28		plp		            PLP
.1a1c60	e2 20		sep #$20	            SEP #$20
.1a1c62	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1c64	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1c68	c2 20		rep #$20	            REP #$20
.1a1c6a	29 ff 00	and #$00ff	            AND #$00FF
.1a1c6d	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a1c70	e2 20		sep #$20	            SEP #$20
.1a1c72	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1c75	a9 00		lda #$00	done        LDA #0
.1a1c77	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1c79	c2 20		rep #$20	            REP #$20
.1a1c7b	a5 16		lda $0816	            LDA STRPTR
.1a1c7d	85 23		sta $0823	            STA ARGUMENT1
.1a1c7f	a5 18		lda $0818	            LDA STRPTR+2
.1a1c81	85 25		sta $0825	            STA ARGUMENT1+2
.1a1c83	a9 02 00	lda #$0002	            LDA #TYPE_STRING    ; And set the type of ARGUMENT1 to string
.1a1c86	85 27		sta $0827	            STA ARGTYPE1
.1a1c88	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1c8b	2b		pld		            PLD
.1a1c8c	28		plp		            PLP
.1a1c8d	60		rts		            RTS
.1a1c8e					EVAL_FUNC
.1a1c8e	08		php		            PHP
.1a1c8f	e2 20		sep #$20	            SEP #$20
.1a1c91	a7 00		lda [$0800]	            LDA [BIP]           ; Get the token
.1a1c93	c2 20		rep #$20	            REP #$20
.1a1c95	29 ff 00	and #$00ff	            AND #$00FF
.1a1c98	20 84 0c	jsr $1a0c84	            JSR TOKEVAL
.1a1c9b	85 2f		sta $082f	            STA JMP16PTR
.1a1c9d	20 7f 1a	jsr $1a1a7f	            JSR OPENPARAMS
.1a1ca0	08		php		            PHP
.1a1ca1	e2 20		sep #$20	            SEP #$20
.1a1ca3	48		pha		            PHA
.1a1ca4	a9 00		lda #$00	            LDA #0
.1a1ca6	48		pha		            PHA
.1a1ca7	ab		plb		            PLB
.1a1ca8	68		pla		            PLA
.1a1ca9	28		plp		            PLP
.1a1caa	20 b2 1c	jsr $1a1cb2	            JSR OPSTUB
.1a1cad	20 89 1a	jsr $1a1a89	            JSR CLOSEPARAMS
.1a1cb0	28		plp		            PLP
.1a1cb1	60		rts		            RTS
.1a1cb2					OPSTUB
.1a1cb2	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1cb5	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a1cb8					PROCESSOP
.1a1cb8	48		pha		            PHA
.1a1cb9	08		php		            PHP
.1a1cba	0b		phd		            PHD
.1a1cbb	8b		phb		            PHB
.1a1cbc	08		php		            PHP
.1a1cbd	c2 20		rep #$20	            REP #$20
.1a1cbf	48		pha		            PHA
.1a1cc0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1cc3	5b		tcd		            TCD
.1a1cc4	68		pla		            PLA
.1a1cc5	28		plp		            PLP
.1a1cc6	c2 30		rep #$30	            REP #$30
.1a1cc8	20 51 1a	jsr $1a1a51	            JSR PLOPERATOR
.1a1ccb	89 80 00	bit #$0080	            BIT #$80            ; Check if it's really a token
.1a1cce	f0 37		beq $1a1d07	            BEQ bad_token       ; No: it's a bad token
.1a1cd0	48		pha		            PHA
.1a1cd1	20 84 0c	jsr $1a0c84	            JSR TOKEVAL
.1a1cd4	85 2f		sta $082f	            STA JMP16PTR
.1a1cd6	68		pla		            PLA
.1a1cd7	20 d1 0c	jsr $1a0cd1	            JSR TOKARITY
.1a1cda	c9 01 00	cmp #$0001	            CMP #1              ; Check the operator's arity
.1a1cdd	f0 08		beq $1a1ce7	            BEQ pull_arg1       ; If it's 1 just pull one argument from the stack
.1a1cdf	c2 30		rep #$30	            REP #$30
.1a1ce1	a2 29 08	ldx #$0829	            LDX #<>ARGUMENT2    ; Pull argument 2 from the stack
.1a1ce4	20 e9 19	jsr $1a19e9	            JSR PLARGUMENT
.1a1ce7					pull_arg1
.1a1ce7	c2 30		rep #$30	            REP #$30
.1a1ce9	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Pull argument 1 from the stack
.1a1cec	20 e9 19	jsr $1a19e9	            JSR PLARGUMENT
.1a1cef	08		php		            PHP
.1a1cf0	e2 20		sep #$20	            SEP #$20
.1a1cf2	48		pha		            PHA
.1a1cf3	a9 00		lda #$00	            LDA #0
.1a1cf5	48		pha		            PHA
.1a1cf6	ab		plb		            PLB
.1a1cf7	68		pla		            PLA
.1a1cf8	28		plp		            PLP
.1a1cf9	20 09 1d	jsr $1a1d09	            JSR OPSTUB
.1a1cfc	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Get return result in argument 1
.1a1cff	20 ab 19	jsr $1a19ab	            JSR PHARGUMENT
.1a1d02	ab		plb		            PLB
.1a1d03	2b		pld		            PLD
.1a1d04	28		plp		            PLP
.1a1d05	68		pla		            PLA
.1a1d06	60		rts		            RTS
.1a1d07	00		brk #		bad_token   BRK
.1a1d08	ea		nop		            NOP
.1a1d09	6c 2f 08	jmp ($082f)	OPSTUB      JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a1d0c					EVALEXPR
.1a1d0c	08		php		            PHP
.1a1d0d	08		php		            PHP
.1a1d0e	c2 20		rep #$20	            REP #$20
.1a1d10	48		pha		            PHA
.1a1d11	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1d14	5b		tcd		            TCD
.1a1d15	68		pla		            PLA
.1a1d16	28		plp		            PLP
.1a1d17	08		php		            PHP
.1a1d18	e2 20		sep #$20	            SEP #$20
.1a1d1a	48		pha		            PHA
.1a1d1b	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1d1d	48		pha		            PHA
.1a1d1e	ab		plb		            PLB
.1a1d1f	68		pla		            PLA
.1a1d20	28		plp		            PLP
.1a1d21	c2 10		rep #$10	            REP #$10
.1a1d23	da		phx		            PHX
.1a1d24					get_char
.1a1d24	e2 20		sep #$20	            SEP #$20
.1a1d26	a7 00		lda [$0800]	            LDA [BIP]           ; Get the character
.1a1d28	d0 03		bne $1a1d2d	            BNE else1
.1a1d2a	4c cf 1d	jmp $1a1dcf	            JMP proc_stack      ; Handle end of line, if we see it
.1a1d2d	30 33		bmi $1a1d62	else1       BMI is_token        ; If MSB is set, it's a token
.1a1d2f	c9 20		cmp #$20	            CMP #' '            ; Is it a space?
.1a1d31	d0 03		bne $1a1d36	            BNE else2
.1a1d33	4c c9 1d	jmp $1a1dc9	            JMP next_char       ; Yes: Skip to the next character
.1a1d36	c9 3a		cmp #$3a	else2       CMP #'9'+1          ; Check to see if we have digits
.1a1d38	b0 04		bcs $1a1d3e	            BCS else3           ; No: treat as the end of the line
.1a1d3a	c9 30		cmp #$30	            CMP #'0'
.1a1d3c	b0 56		bcs $1a1d94	            BCS is_digit
.1a1d3e	c9 26		cmp #$26	else3       CMP #'&'            ; Check for a hexadecimal prefix
.1a1d40	f0 52		beq $1a1d94	            BEQ is_digit
.1a1d42	c9 22		cmp #$22	            CMP #'"'            ; Is it a double-quote?
.1a1d44	d0 03		bne $1a1d49	            BNE else4
.1a1d46	4c e2 1d	jmp $1a1de2	            JMP is_string       ; Yes: process the string
.1a1d49	c9 5b		cmp #$5b	else4       CMP #'Z'+1          ; Check to see if we have upper case alphabetics
.1a1d4b	b0 07		bcs $1a1d54	            BCS check_lc        ; No: check for lower case
.1a1d4d	c9 41		cmp #$41	            CMP #'A'
.1a1d4f	90 03		bcc $1a1d54	            BCC check_lc
.1a1d51	4c ee 1d	jmp $1a1dee	            JMP is_alpha
.1a1d54	c9 7b		cmp #$7b	check_lc    CMP #'z'+1          ; Check to see if we have lower case alphabetics
.1a1d56	b0 07		bcs $1a1d5f	            BCS else5           ; No: treat as the end of the line
.1a1d58	c9 61		cmp #$61	            CMP #'a'
.1a1d5a	90 03		bcc $1a1d5f	            BCC else5
.1a1d5c	4c ee 1d	jmp $1a1dee	            JMP is_alpha
.1a1d5f	4c cf 1d	jmp $1a1dcf	else5       JMP proc_stack
.1a1d62	c9 8f		cmp #$8f	is_token    CMP #TOK_LPAREN     ; Is it an LPAREN
.1a1d64	f0 40		beq $1a1da6	            BEQ is_lparen       ; Yes: handle the LPAREN
.1a1d66	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it an RPAREN?
.1a1d68	f0 41		beq $1a1dab	            BEQ is_rparen       ; Yes: handle the RPAREN
.1a1d6a	20 a7 0c	jsr $1a0ca7	            JSR TOKTYPE
.1a1d6d	c9 30		cmp #$30	            CMP #TOK_TY_FUNC    ; Is it a function?
.1a1d6f	d0 0c		bne $1a1d7d	            BNE chk_op          ; No: check if it's an operator
.1a1d71	20 8e 1c	jsr $1a1c8e	            JSR EVAL_FUNC
.1a1d74	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1d77	20 ab 19	jsr $1a19ab	            JSR PHARGUMENT
.1a1d7a	4c 24 1d	jmp $1a1d24	            JMP get_char
.1a1d7d	c9 00		cmp #$00	chk_op      CMP #TOK_TY_OP      ; Is it an operator?
.1a1d7f	d0 4e		bne $1a1dcf	            BNE proc_stack      ; No: we're finished processing
.1a1d81	a7 00		lda [$0800]	            LDA [BIP]           ; Yes: Get the token back
.1a1d83	a6 21		ldx $0821	chk_prec    LDX OPERATORSP      ; Is the operator stack empty?
.1a1d85	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.1a1d88	f0 05		beq $1a1d8f	            BEQ push_op         ; Yes: push the operator
.1a1d8a	20 c8 1a	jsr $1a1ac8	            JSR OPHIGHPREC
.1a1d8d	b0 12		bcs $1a1da1	            BCS process1        ; No: we should process the top operator
.1a1d8f					push_op
.1a1d8f	20 28 1a	jsr $1a1a28	            JSR PHOPERATOR
.1a1d92	80 35		bra $1a1dc9	            BRA next_char       ; And go to the next character
.1a1d94					is_digit
.1a1d94	c2 20		rep #$20	            REP #$20
.1a1d96	20 41 5a	jsr $1a5a41	            JSR PARSENUM
.1a1d99	a2 23 08	ldx #$0823	got_number  LDX #<>ARGUMENT1
.1a1d9c	20 ab 19	jsr $1a19ab	            JSR PHARGUMENT
.1a1d9f	80 83		bra $1a1d24	            BRA get_char
.1a1da1					process1
.1a1da1	20 b8 1c	jsr $1a1cb8	            JSR PROCESSOP
.1a1da4	80 dd		bra $1a1d83	            BRA chk_prec        ; And check what to do with the current operator
.1a1da6					is_lparen
.1a1da6	20 28 1a	jsr $1a1a28	            JSR PHOPERATOR
.1a1da9	80 1e		bra $1a1dc9	            BRA next_char
.1a1dab					is_rparen
.1a1dab	e2 20		sep #$20	            SEP #$20
.1a1dad	a4 21		ldy $0821	            LDY OPERATORSP      ; Is the operator stack empty?
.1a1daf	c0 ff 7f	cpy #$7fff	            CPY #<>OPERATOR_TOP
.1a1db2	f0 46		beq $1a1dfa	            BEQ done            ; Yes: we're done evaluating things
.1a1db4	a4 21		ldy $0821	paren_loop  LDY OPERATORSP      ; Peek at the top operator
.1a1db6	b9 01 00	lda $0001,y	            LDA #1,B,Y
.1a1db9	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the LPAREN of a function?
.1a1dbb	f0 3d		beq $1a1dfa	            BEQ done            ; Yes: treat it as an empty stack
.1a1dbd	c9 8f		cmp #$8f	            CMP #TOK_LPAREN     ; Is it an LPAREN?
.1a1dbf	f0 05		beq $1a1dc6	            BEQ done_rparen     ; Yes: we're finished processing
.1a1dc1	20 b8 1c	jsr $1a1cb8	            JSR PROCESSOP
.1a1dc4	80 ee		bra $1a1db4	            BRA paren_loop
.1a1dc6					done_rparen
.1a1dc6	20 51 1a	jsr $1a1a51	            JSR PLOPERATOR
.1a1dc9					next_char
.1a1dc9	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a1dcc	4c 24 1d	jmp $1a1d24	            JMP get_char
.1a1dcf					proc_stack
.1a1dcf	a6 21		ldx $0821	            LDX OPERATORSP      ; Is the operator stack empty?
.1a1dd1	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.1a1dd4	b0 24		bcs $1a1dfa	            BGE done            ; Yes: return to the caller
.1a1dd6	bd 01 00	lda $0001,x	            LDA #1,B,X
.1a1dd9	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is top operator a function open?
.1a1ddb	f0 1d		beq $1a1dfa	            BEQ done            ; Yes: treat as end of expression
.1a1ddd	20 b8 1c	jsr $1a1cb8	            JSR PROCESSOP
.1a1de0	80 ed		bra $1a1dcf	            BRA proc_stack
.1a1de2					is_string
.1a1de2	20 18 1c	jsr $1a1c18	            JSR EVALSTRING
.1a1de5	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1de8	20 ab 19	jsr $1a19ab	            JSR PHARGUMENT
.1a1deb	4c 24 1d	jmp $1a1d24	            JMP get_char
.1a1dee					is_alpha
.1a1dee	20 8d 1b	jsr $1a1b8d	            JSR EVALREF
.1a1df1	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1df4	20 ab 19	jsr $1a19ab	            JSR PHARGUMENT
.1a1df7	4c 24 1d	jmp $1a1d24	            JMP get_char
.1a1dfa	a2 23 08	ldx #$0823	done        LDX #<>ARGUMENT1    ; Make sure the result is off the stack
.1a1dfd	20 e9 19	jsr $1a19e9	            JSR PLARGUMENT
.1a1e00					real_done
.1a1e00	fa		plx		            PLX
.1a1e01	28		plp		            PLP
.1a1e02	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\returnstack.s

.1a1e03					INITRETURN
.1a1e03	08		php		                PHP
.1a1e04	0b		phd		                PHD
.1a1e05	8b		phb		                PHB
.1a1e06	08		php		            PHP
.1a1e07	e2 20		sep #$20	            SEP #$20
.1a1e09	48		pha		            PHA
.1a1e0a	a9 00		lda #$00	            LDA #0
.1a1e0c	48		pha		            PHA
.1a1e0d	ab		plb		            PLB
.1a1e0e	68		pla		            PLA
.1a1e0f	28		plp		            PLP
.1a1e10	08		php		            PHP
.1a1e11	c2 20		rep #$20	            REP #$20
.1a1e13	48		pha		            PHA
.1a1e14	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1e17	5b		tcd		            TCD
.1a1e18	68		pla		            PLA
.1a1e19	28		plp		            PLP
.1a1e1a	c2 30		rep #$30	            REP #$30
.1a1e1c	a9 fd 5f	lda #$5ffd	                LDA #RETURN_TOP-2
.1a1e1f	85 33		sta $0833	                STA RETURNSP
.1a1e21	ab		plb		                PLB
.1a1e22	2b		pld		                PLD
.1a1e23	28		plp		                PLP
.1a1e24	60		rts		            RTS
.1a1e25					PHRETURN
.1a1e25	08		php		                PHP
.1a1e26	0b		phd		                PHD
.1a1e27	08		php		            PHP
.1a1e28	c2 20		rep #$20	            REP #$20
.1a1e2a	48		pha		            PHA
.1a1e2b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1e2e	5b		tcd		            TCD
.1a1e2f	68		pla		            PLA
.1a1e30	28		plp		            PLP
.1a1e31	c2 30		rep #$30	            REP #$30
.1a1e33	92 33		sta ($0833)	                STA (RETURNSP)
.1a1e35	c6 33		dec $0833	                DEC RETURNSP
.1a1e37	c6 33		dec $0833	                DEC RETURNSP
.1a1e39	2b		pld		                PLD
.1a1e3a	28		plp		                PLP
.1a1e3b	60		rts		            RTS
.1a1e3c					PHRETURNB
.1a1e3c	08		php		                PHP
.1a1e3d	c2 30		rep #$30	            REP #$30
.1a1e3f	29 ff 00	and #$00ff	                AND #$00FF
.1a1e42	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a1e45	28		plp		                PLP
.1a1e46	60		rts		            RTS
.1a1e47					PLRETURN
.1a1e47	08		php		                PHP
.1a1e48	0b		phd		                PHD
.1a1e49	08		php		            PHP
.1a1e4a	c2 20		rep #$20	            REP #$20
.1a1e4c	48		pha		            PHA
.1a1e4d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1e50	5b		tcd		            TCD
.1a1e51	68		pla		            PLA
.1a1e52	28		plp		            PLP
.1a1e53	c2 30		rep #$30	            REP #$30
.1a1e55	e6 33		inc $0833	                INC RETURNSP
.1a1e57	e6 33		inc $0833	                INC RETURNSP
.1a1e59	b2 33		lda ($0833)	                LDA (RETURNSP)
.1a1e5b	2b		pld		                PLD
.1a1e5c	28		plp		                PLP
.1a1e5d	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\interpreter.s

=$80					ST_RUNNING = $80            ; The interpreter is running a full program
=$00					ST_INTERACT = $00           ; The interpreter is in interactive mode
>08d2					STATE       .byte ?         ; The state of the interpreter ()
>08d3					ERROR_NUM   .byte ?         ; The type of the error
>08d4					HANDLEERR   .long ?         ; Pointer to the error handler
>08d7					LINENUM     .word ?         ; The current line number
>08d9					LASTLINE    .long ?         ; Pointer to the next free space over the BASIC program
>08dc					EXECACTION  .byte ?         ; The action the exection routines should take to get their next statement
=0					LINE_LINK = 0               ; Offset to the link to the next line
=2					LINE_NUMBER = 2             ; Offset to the line number
=4					LINE_TOKENS = 4             ; Offset to the first token
=6					LINE_MINLEN = 6             ; Minimum length of a line
=0					EXEC_CONT = 0               ; Continue advancing the current line
=1					EXEC_STOP = 1               ; Stop execution of the program
=2					EXEC_GOTO = 2               ; Transfer execution to a new CURLINE that is already set
=3					EXEC_RETURN = 3             ; Transfer execution back to a line that was on the stack
.1a1e5e					SET_ERRERL
.1a1e5e	8b		phb		                PHB
.1a1e5f	0b		phd		                PHD
.1a1e60	08		php		                PHP
.1a1e61	08		php		            PHP
.1a1e62	c2 20		rep #$20	            REP #$20
.1a1e64	48		pha		            PHA
.1a1e65	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1e68	5b		tcd		            TCD
.1a1e69	68		pla		            PLA
.1a1e6a	28		plp		            PLP
.1a1e6b	08		php		            PHP
.1a1e6c	e2 20		sep #$20	            SEP #$20
.1a1e6e	48		pha		            PHA
.1a1e6f	a9 00		lda #$00	            LDA #BASIC_BANK
.1a1e71	48		pha		            PHA
.1a1e72	ab		plb		            PLB
.1a1e73	68		pla		            PLA
.1a1e74	28		plp		            PLP
.1a1e75	c2 20		rep #$20	            REP #$20
.1a1e77	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.1a1e79	a9 00 00	lda #$0000	                LDA #0
.1a1e7c	85 25		sta $0825	                STA ARGUMENT1+2
.1a1e7e	e2 20		sep #$20	            SEP #$20
.1a1e80	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a1e82	85 27		sta $0827	                STA ARGTYPE1
.1a1e84	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.1a1e86	a9 1a		lda #$1a	                LDA #`err_name
.1a1e88	85 e9		sta $08e9	                STA TOFIND+2
.1a1e8a	c2 20		rep #$20	            REP #$20
.1a1e8c	a9 b8 1e	lda #$1eb8	                LDA #<>err_name
.1a1e8f	85 e7		sta $08e7	                STA TOFIND
.1a1e91	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a1e94	c2 20		rep #$20	            REP #$20
.1a1e96	a5 d7		lda $08d7	                LDA LINENUM
.1a1e98	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.1a1e9a	a5 d9		lda $08d9	                LDA LINENUM+2
.1a1e9c	85 25		sta $0825	                STA ARGUMENT1+2
.1a1e9e	e2 20		sep #$20	            SEP #$20
.1a1ea0	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a1ea2	85 27		sta $0827	                STA ARGTYPE1
.1a1ea4	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.1a1ea6	a9 1a		lda #$1a	                LDA #`erl_name
.1a1ea8	85 e9		sta $08e9	                STA TOFIND+2
.1a1eaa	c2 20		rep #$20	            REP #$20
.1a1eac	a9 bc 1e	lda #$1ebc	                LDA #<>erl_name
.1a1eaf	85 e7		sta $08e7	                STA TOFIND
.1a1eb1	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a1eb4	28		plp		                PLP
.1a1eb5	2b		pld		                PLD
.1a1eb6	ab		plb		                PLB
.1a1eb7	60		rts		            RTS
>1a1eb8	45 52 52 00			err_name        .null "ERR"
>1a1ebc	45 52 4c 00			erl_name        .null "ERL"
.1a1ec0					ON_ERROR
.1a1ec0	e2 20		sep #$20	            SEP #$20
.1a1ec2	c2 10		rep #$10	            REP #$10
.1a1ec4	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a1ec7	af d3 08 00	lda $0008d3	            LDA @lERROR_NUM         ; Calculate index to the error message pointer
.1a1ecb	0a		asl a		            ASL A
.1a1ecc	c2 20		rep #$20	            REP #$20
.1a1ece	29 ff 00	and #$00ff	            AND #$00FF
.1a1ed1	a8		tay		            TAY
.1a1ed2	08		php		            PHP
.1a1ed3	e2 20		sep #$20	            SEP #$20
.1a1ed5	48		pha		            PHA
.1a1ed6	a9 1a		lda #$1a	            LDA #`ERRORMSG
.1a1ed8	48		pha		            PHA
.1a1ed9	ab		plb		            PLB
.1a1eda	68		pla		            PLA
.1a1edb	28		plp		            PLP
.1a1edc	be 12 1f	ldx $1a1f12,y	            LDX ERRORMSG,Y
.1a1edf	20 64 04	jsr $1a0464	            JSR PRINTS
.1a1ee2	c2 20		rep #$20	            REP #$20
.1a1ee4	a5 d7		lda $08d7	            LDA LINENUM
.1a1ee6	f0 27		beq $1a1f0f	            BEQ skip_at
.1a1ee8	a2 42 1f	ldx #$1f42	            LDX #<>MSG_AT           ; If so... print " AT "
.1a1eeb	20 64 04	jsr $1a0464	            JSR PRINTS
.1a1eee	08		php		            PHP
.1a1eef	e2 20		sep #$20	            SEP #$20
.1a1ef1	48		pha		            PHA
.1a1ef2	a9 00		lda #$00	            LDA #BASIC_BANK
.1a1ef4	48		pha		            PHA
.1a1ef5	ab		plb		            PLB
.1a1ef6	68		pla		            PLA
.1a1ef7	28		plp		            PLP
.1a1ef8	c2 20		rep #$20	            REP #$20
.1a1efa	af d7 08 00	lda $0008d7	            LDA @lLINENUM           ; ... and then the line number
.1a1efe	8f 23 08 00	sta $000823	            STA @lARGUMENT1
.1a1f02	a9 00 00	lda #$0000	            LDA #0
.1a1f05	8f 25 08 00	sta $000825	            STA @lARGUMENT1+2
.1a1f09	20 1d 46	jsr $1a461d	            JSR PR_INTEGER
.1a1f0c	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a1f0f					skip_at
.1a1f0f	4c bf 27	jmp $1a27bf	            JMP INTERACT
>1a1f12	46 1f				ERRORMSG    .word <>MSG_OK
>1a1f14	49 1f				            .word <>MSG_BREAK
>1a1f16	4f 1f				            .word <>MSG_SYNTAX
>1a1f18	5c 1f				            .word <>MSG_MEMORY
>1a1f1a	6a 1f				            .word <>MSG_TYPE
>1a1f1c	78 1f				            .word <>MSG_NOTFND
>1a1f1e	8b 1f				            .word <>MSG_NOLINE
>1a1f20	a1 1f				            .word <>MSG_UNDFLOW
>1a1f22	b1 1f				            .word <>MSG_OVRFLOW
>1a1f24	c0 1f				            .word <>MSG_RANGE
>1a1f26	cd 1f				            .word <>MSG_ARG
>1a1f28	de 1f				            .word <>MSG_NOFILE
>1a1f2a	ed 1f				            .word <>MSG_NAN
>1a1f2c	fa 1f				            .word <>MSG_OVERFLOW
>1a1f2e	08 20				            .word <>MSG_UNDERFLOW
>1a1f30	17 20				            .word <>MSG_DIV0
>1a1f32	28 20				            .word <>MSG_DIRECTORY
>1a1f34	41 20				            .word <>MSG_LOAD
>1a1f36	55 20				            .word <>MSG_SAVE
>1a1f38	69 20				            .word <>MSG_DELETE
>1a1f3a	7f 20				            .word <>MSG_FILENOTFND
>1a1f3c	93 20				            .word <>MSG_DIRNOTWRITE
>1a1f3e	ae 20				            .word <>MSG_NOTCOPIED
>1a1f40	c6 20				            .word <>MSG_DOMAIN
>1a1f42	20 61 74 00			MSG_AT          .null " at"
>1a1f46	4f 4b 00			MSG_OK          .null "OK"
>1a1f49	42 72 65 61 6b 00		MSG_BREAK       .null "Break"
>1a1f4f	53 79 6e 74 61 78 20 65		MSG_SYNTAX      .null "Syntax error"
>1a1f57	72 72 6f 72 00
>1a1f5c	4f 75 74 20 6f 66 20 6d		MSG_MEMORY      .null "Out of memory"
>1a1f64	65 6d 6f 72 79 00
>1a1f6a	54 79 70 65 20 6d 69 73		MSG_TYPE        .null "Type mismatch"
>1a1f72	6d 61 74 63 68 00
>1a1f78	56 61 72 69 61 62 6c 65		MSG_NOTFND      .null "Variable not found"
>1a1f80	20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1f8b	4c 69 6e 65 20 6e 75 6d		MSG_NOLINE      .null "Line number not found"
>1a1f93	62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1fa1	53 74 61 63 6b 20 75 6e		MSG_UNDFLOW     .null "Stack underflow"
>1a1fa9	64 65 72 66 6c 6f 77 00
>1a1fb1	53 74 61 63 6b 20 6f 76		MSG_OVRFLOW     .null "Stack overflow"
>1a1fb9	65 72 66 6c 6f 77 00
>1a1fc0	4f 75 74 20 6f 66 20 72		MSG_RANGE       .null "Out of range"
>1a1fc8	61 6e 67 65 00
>1a1fcd	49 6c 6c 65 67 61 6c 20		MSG_ARG         .null "Illegal argument"
>1a1fd5	61 72 67 75 6d 65 6e 74 00
>1a1fde	46 69 6c 65 20 6e 6f 74		MSG_NOFILE      .null "File not found"
>1a1fe6	20 66 6f 75 6e 64 00
>1a1fed	4e 6f 74 20 61 20 6e 75		MSG_NAN         .null "Not a number"
>1a1ff5	6d 62 65 72 00
>1a1ffa	4d 61 74 68 20 6f 76 65		MSG_OVERFLOW    .null "Math overflow"
>1a2002	72 66 6c 6f 77 00
>1a2008	4d 61 74 68 20 75 6e 64		MSG_UNDERFLOW   .null "Math underflow"
>1a2010	65 72 66 6c 6f 77 00
>1a2017	44 69 76 69 73 69 6f 6e		MSG_DIV0        .null "Division by zero"
>1a201f	20 62 79 20 7a 65 72 6f 00
>1a2028	55 6e 61 62 6c 65 20 74		MSG_DIRECTORY   .null "Unable to read directory"
>1a2030	6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>1a2040	00
>1a2041	55 6e 61 62 6c 65 20 74		MSG_LOAD        .null "Unable to load file"
>1a2049	6f 20 6c 6f 61 64 20 66 69 6c 65 00
>1a2055	55 6e 61 62 6c 65 20 74		MSG_SAVE        .null "Unable to save file"
>1a205d	6f 20 73 61 76 65 20 66 69 6c 65 00
>1a2069	55 6e 61 62 6c 65 20 74		MSG_DELETE      .null "Unable to delete file"
>1a2071	6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00
>1a207f	43 6f 75 6c 64 20 6e 6f		MSG_FILENOTFND  .null "Could not find file"
>1a2087	74 20 66 69 6e 64 20 66 69 6c 65 00
>1a2093	43 6f 75 6c 64 20 6e 6f		MSG_DIRNOTWRITE .null "Could not update directory"
>1a209b	74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>1a20ab	72 79 00
>1a20ae	43 6f 75 6c 64 20 6e 6f		MSG_NOTCOPIED   .null "Could not copy the file"
>1a20b6	74 20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00
>1a20c6	41 72 67 75 6d 65 6e 74		MSG_DOMAIN      .null "Argument outside domain"
>1a20ce	20 6f 75 74 73 69 64 65 20 64 6f 6d 61 69 6e 00
.1a20de					SETINTERACT
.1a20de	08		php		            PHP
.1a20df	0b		phd		            PHD
.1a20e0	08		php		            PHP
.1a20e1	c2 20		rep #$20	            REP #$20
.1a20e3	48		pha		            PHA
.1a20e4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a20e7	5b		tcd		            TCD
.1a20e8	68		pla		            PLA
.1a20e9	28		plp		            PLP
.1a20ea	e2 20		sep #$20	            SEP #$20
.1a20ec	a9 00		lda #$00	            LDA #ST_INTERACT
.1a20ee	85 d2		sta $08d2	            STA STATE
.1a20f0	2b		pld		            PLD
.1a20f1	28		plp		            PLP
.1a20f2	60		rts		            RTS
.1a20f3					CLRINTERP
.1a20f3	0b		phd		            PHD
.1a20f4	08		php		            PHP
.1a20f5	08		php		            PHP
.1a20f6	c2 20		rep #$20	            REP #$20
.1a20f8	48		pha		            PHA
.1a20f9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a20fc	5b		tcd		            TCD
.1a20fd	68		pla		            PLA
.1a20fe	28		plp		            PLP
.1a20ff	08		php		            PHP
.1a2100	c2 20		rep #$20	            REP #$20
.1a2102	a9 c0 1e	lda #$1ec0	            LDA #<>ON_ERROR
.1a2105	8f d4 08 00	sta $0008d4	            STA @lHANDLEERR
.1a2109	e2 20		sep #$20	            SEP #$20
.1a210b	a9 1a		lda #$1a	            LDA #`ON_ERROR
.1a210d	8f d6 08 00	sta $0008d6	            STA @lHANDLEERR+2
.1a2111	28		plp		            PLP
.1a2112	20 c4 44	jsr $1a44c4	            JSR S_CLR
.1a2115	20 05 40	jsr $1a4005	            JSR S_RESTORE
.1a2118	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the depth of the GOSUB stack
.1a211a	28		plp		            PLP
.1a211b	2b		pld		            PLD
.1a211c	60		rts		            RTS
.1a211d					INCBIP
.1a211d	08		php		            PHP
.1a211e	0b		phd		            PHD
.1a211f	08		php		            PHP
.1a2120	c2 20		rep #$20	            REP #$20
.1a2122	48		pha		            PHA
.1a2123	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2126	5b		tcd		            TCD
.1a2127	68		pla		            PLA
.1a2128	28		plp		            PLP
.1a2129	c2 20		rep #$20	            REP #$20
.1a212b	18		clc		            CLC
.1a212c	a5 00		lda $0800	            LDA BIP
.1a212e	69 01 00	adc #$0001	            ADC #1
.1a2131	85 00		sta $0800	            STA BIP
.1a2133	e2 20		sep #$20	            SEP #$20
.1a2135	a5 02		lda $0802	            LDA BIP+2
.1a2137	69 00		adc #$00	            ADC #0
.1a2139	85 02		sta $0802	            STA BIP+2
.1a213b	2b		pld		            PLD
.1a213c	28		plp		            PLP
.1a213d	60		rts		            RTS
.1a213e					SKIPWS
.1a213e	08		php		            PHP
.1a213f	0b		phd		            PHD
.1a2140	08		php		            PHP
.1a2141	c2 20		rep #$20	            REP #$20
.1a2143	48		pha		            PHA
.1a2144	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2147	5b		tcd		            TCD
.1a2148	68		pla		            PLA
.1a2149	28		plp		            PLP
.1a214a	e2 20		sep #$20	            SEP #$20
.1a214c	a7 00		lda [$0800]	loop        LDA [BIP]
.1a214e	f0 0f		beq $1a215f	            BEQ done            ; If character is 0, we've reached the end of the line
.1a2150	c9 20		cmp #$20	            CMP #CHAR_SP        ; Skip if it's a space
.1a2152	f0 06		beq $1a215a	            BEQ skip_char
.1a2154	c9 09		cmp #$09	            CMP #CHAR_TAB       ; Skip if it's a TAB
.1a2156	f0 02		beq $1a215a	            BEQ skip_char
.1a2158	80 05		bra $1a215f	            BRA done            ; Otherwise, we're done and BIP points to a non-whitespace
.1a215a					skip_char
.1a215a	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a215d	80 ed		bra $1a214c	            BRA loop
.1a215f	2b		pld		done        PLD
.1a2160	28		plp		            PLP
.1a2161	60		rts		            RTS
.1a2162					SKIPSTMT
.1a2162	08		php		            PHP
.1a2163	e2 20		sep #$20	            SEP #$20
.1a2165	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the current character
.1a2167	f0 09		beq $1a2172	            BEQ done            ; Is it EOL? Yes, we're done
.1a2169	c9 3a		cmp #$3a	            CMP #':'            ; Is it a colon?
.1a216b	f0 05		beq $1a2172	            BEQ done            ; Yes, we're done
.1a216d	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a2170	80 f3		bra $1a2165	            BRA loop            ; and check it...
.1a2172	28		plp		done        PLP
.1a2173	60		rts		            RTS
.1a2174					SKIPTOTOK
.1a2174	08		php		            PHP
.1a2175	e2 20		sep #$20	            SEP #$20
.1a2177	64 36		stz $0836	            STZ NESTING
.1a2179	a7 00		lda [$0800]	loop        LDA [BIP]           ; Get the character
.1a217b	f0 19		beq $1a2196	            BEQ end_of_line     ; EOL? Yes: move to the next line
.1a217d	c5 37		cmp $0837	            CMP TARGETTOK       ; Is it the one we want?
.1a217f	f0 2c		beq $1a21ad	            BEQ check_depth     ; Yes: check the depth
.1a2181	c9 9b		cmp #$9b	            CMP #TOK_FOR        ; Is it a FOR?
.1a2183	f0 1e		beq $1a21a3	            BEQ inc_nesting     ; Yes: increment NESTING
.1a2185	c9 9f		cmp #$9f	            CMP #TOK_DO         ; Is it a DO?
.1a2187	f0 1a		beq $1a21a3	            BEQ inc_nesting     ; Yes: increment NESTING
.1a2189	c9 9e		cmp #$9e	            CMP #TOK_NEXT       ; Is it a NEXT?
.1a218b	f0 1a		beq $1a21a7	            BEQ dec_nesting     ; Yes: decrement NESTING
.1a218d	c9 a0		cmp #$a0	            CMP #TOK_LOOP       ; Is it a LOOP?
.1a218f	f0 16		beq $1a21a7	            BEQ dec_nesting     ; Yes: decrement NESTING
.1a2191					incloop
.1a2191	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a2194	80 e3		bra $1a2179	            BRA loop            ; and keep scanning
.1a2196					end_of_line
.1a2196	20 fa 21	jsr $1a21fa	            JSR NEXTLINE
.1a2199	c2 20		rep #$20	            REP #$20
.1a219b	a5 d7		lda $08d7	            LDA LINENUM         ; Check the line number
.1a219d	f0 1d		beq $1a21bc	            BEQ syntax_err1     ; If it's zero, we reached the end of the program
.1a219f	e2 20		sep #$20	            SEP #$20
.1a21a1	80 d6		bra $1a2179	            BRA loop            ; And keep scanning
.1a21a3					inc_nesting
.1a21a3	e6 36		inc $0836	            INC NESTING         ; Track that we have entered a lexical scope for a FOR/DO
.1a21a5	80 ea		bra $1a2191	            BRA incloop
.1a21a7					dec_nesting
.1a21a7	c6 36		dec $0836	            DEC NESTING         ; Track that we have left a lexical scope for a FOR/DO
.1a21a9	30 30		bmi $1a21db	            BMI syntax_err2     ; If the depth goes <0, throw a syntax error
.1a21ab	80 e4		bra $1a2191	            BRA incloop
.1a21ad					check_depth
.1a21ad	a5 35		lda $0835	            LDA SKIPNEST        ; Check to see if nesting matters
.1a21af	30 06		bmi $1a21b7	            BMI found           ; No: just return that we found the token
.1a21b1	a5 36		lda $0836	            LDA NESTING         ; Get the nesting depth
.1a21b3	f0 02		beq $1a21b7	            BEQ found           ; If it's zero, we found our token
.1a21b5	80 da		bra $1a2191	            BRA incloop         ; Otherwise: it's a token for an enclosed FOR/DO, keep scanning
.1a21b7					found
.1a21b7	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a21ba	28		plp		            PLP
.1a21bb	60		rts		            RTS
.1a21bc					syntax_err1
.1a21bc	08		php		            PHP
.1a21bd	c2 20		rep #$20	            REP #$20
.1a21bf	48		pha		            PHA
.1a21c0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a21c3	5b		tcd		            TCD
.1a21c4	68		pla		            PLA
.1a21c5	28		plp		            PLP
.1a21c6	e2 20		sep #$20	            SEP #$20
.1a21c8	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a21ca	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a21ce	c2 20		rep #$20	            REP #$20
.1a21d0	29 ff 00	and #$00ff	            AND #$00FF
.1a21d3	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a21d6	e2 20		sep #$20	            SEP #$20
.1a21d8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a21db					syntax_err2
.1a21db	08		php		            PHP
.1a21dc	c2 20		rep #$20	            REP #$20
.1a21de	48		pha		            PHA
.1a21df	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a21e2	5b		tcd		            TCD
.1a21e3	68		pla		            PLA
.1a21e4	28		plp		            PLP
.1a21e5	e2 20		sep #$20	            SEP #$20
.1a21e7	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a21e9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a21ed	c2 20		rep #$20	            REP #$20
.1a21ef	29 ff 00	and #$00ff	            AND #$00FF
.1a21f2	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a21f5	e2 20		sep #$20	            SEP #$20
.1a21f7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a21fa					NEXTLINE
.1a21fa	08		php		            PHP
.1a21fb	c2 30		rep #$30	            REP #$30
.1a21fd	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a2200	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the offset to the next line
.1a2202	85 0c		sta $080c	            STA SCRATCH
.1a2204	18		clc		            CLC                 ; Compute the new CURLINE
.1a2205	a5 1a		lda $081a	            LDA CURLINE         ; CURLINE := [CURLINE].LINE_LINK
.1a2207	65 0c		adc $080c	            ADC SCRATCH
.1a2209	85 1a		sta $081a	            STA CURLINE
.1a220b	a5 1c		lda $081c	            LDA CURLINE+2
.1a220d	69 00 00	adc #$0000	            ADC #0
.1a2210	85 1c		sta $081c	            STA CURLINE+2
.1a2212	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the LINENUM to the new current line's number
.1a2215	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; LINENUM := [CURLINE].LINE_NUMBER
.1a2217	85 d7		sta $08d7	            STA LINENUM
.1a2219	18		clc		            CLC                 ; Point BIP to the first character of the line
.1a221a	a5 1a		lda $081a	            LDA CURLINE         ; BIP := CURLINE + LINE_TOKENS
.1a221c	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a221f	85 00		sta $0800	            STA BIP
.1a2221	a5 1c		lda $081c	            LDA CURLINE+2
.1a2223	69 00 00	adc #$0000	            ADC #0
.1a2226	85 02		sta $0802	            STA BIP+2
.1a2228	28		plp		            PLP
.1a2229	60		rts		            RTS
.1a222a					EXPECT_TOK
.1a222a	08		php		            PHP
.1a222b	e2 20		sep #$20	            SEP #$20
.1a222d	48		pha		            PHA
.1a222e	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a2231	68		pla		            PLA
.1a2232	e2 20		sep #$20	            SEP #$20
.1a2234	c7 00		cmp [$0800]	            CMP [BIP]           ; Check the character at BIP
.1a2236	d0 08		bne $1a2240	            BNE syntax_err      ; Throw a syntax error
.1a2238	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a223b	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a223e	28		plp		            PLP
.1a223f	60		rts		            RTS
.1a2240					syntax_err
.1a2240	08		php		            PHP
.1a2241	c2 20		rep #$20	            REP #$20
.1a2243	48		pha		            PHA
.1a2244	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2247	5b		tcd		            TCD
.1a2248	68		pla		            PLA
.1a2249	28		plp		            PLP
.1a224a	e2 20		sep #$20	            SEP #$20
.1a224c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a224e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2252	c2 20		rep #$20	            REP #$20
.1a2254	29 ff 00	and #$00ff	            AND #$00FF
.1a2257	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a225a	e2 20		sep #$20	            SEP #$20
.1a225c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a225f					OPT_TOK
.1a225f	08		php		            PHP
.1a2260	e2 20		sep #$20	            SEP #$20
.1a2262	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a2265	e2 20		sep #$20	            SEP #$20
.1a2267	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the character at BIP
.1a2269	f0 10		beq $1a227b	            BEQ ret_false       ; If end-of-line, return false
.1a226b	c9 3a		cmp #$3a	            CMP #':'
.1a226d	f0 0c		beq $1a227b	            BEQ ret_false       ; If colon, return false
.1a226f	c5 37		cmp $0837	            CMP TARGETTOK
.1a2271	f0 05		beq $1a2278	            BEQ ret_true        ; If matches, return true
.1a2273	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a2276	80 ef		bra $1a2267	            BRA loop
.1a2278	28		plp		ret_true    PLP
.1a2279	38		sec		            SEC
.1a227a	60		rts		            RTS
.1a227b	28		plp		ret_false   PLP
.1a227c	18		clc		            CLC
.1a227d	60		rts		            RTS
.1a227e					PEEK_TOK
.1a227e	5a		phy		            PHY
.1a227f	08		php		            PHP
.1a2280	e2 20		sep #$20	            SEP #$20
.1a2282	a0 00 00	ldy #$0000	            LDY #0
.1a2285	b7 00		lda [$0800],y	loop        LDA [BIP],Y
.1a2287	f0 0d		beq $1a2296	            BEQ done
.1a2289	c9 3a		cmp #$3a	            CMP #':'
.1a228b	f0 07		beq $1a2294	            BEQ ret_null
.1a228d	c9 20		cmp #$20	            CMP #CHAR_SP
.1a228f	d0 05		bne $1a2296	            BNE done
.1a2291	c8		iny		            INY
.1a2292	80 f1		bra $1a2285	            BRA loop
.1a2294	a9 00		lda #$00	ret_null    LDA #0
.1a2296	28		plp		done        PLP
.1a2297	7a		ply		            PLY
.1a2298	60		rts		            RTS
.1a2299					EXECSTMT
.1a2299	08		php		            PHP
.1a229a	0b		phd		            PHD
.1a229b	8b		phb		            PHB
.1a229c	08		php		            PHP
.1a229d	c2 20		rep #$20	            REP #$20
.1a229f	48		pha		            PHA
.1a22a0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a22a3	5b		tcd		            TCD
.1a22a4	68		pla		            PLA
.1a22a5	28		plp		            PLP
.1a22a6	20 f8 14	jsr $1a14f8	            JSR CLRTMPSTR
.1a22a9	20 8b 19	jsr $1a198b	            JSR INITEVALSP
.1a22ac	e2 20		sep #$20	            SEP #$20
.1a22ae	a9 00		lda #$00	            LDA #EXEC_CONT      ; This will tell EXECLINE and EXECPROG to procede in a
.1a22b0	85 dc		sta $08dc	            STA EXECACTION      ; linear fashion through the program
.1a22b2	22 3c 11 00	jsl $00113c	check_break JSL FK_TESTBREAK
.1a22b6	b0 4b		bcs $1a2303	            BCS throw_break     ; If C: user pressed an interrupt key, stop the program
.1a22b8	a7 00		lda [$0800]	            LDA [BIP]           ; If we happen to have a colon, just skip over it.
.1a22ba	c9 3a		cmp #$3a	            CMP #':'            ; This can happen with FOR/NEXT
.1a22bc	d0 03		bne $1a22c1	            BNE eat_ws
.1a22be	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a22c1					eat_ws
.1a22c1	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a22c4	a7 00		lda [$0800]	            LDA [BIP]
.1a22c6	d0 03		bne $1a22cb	            BNE else
.1a22c8	4c 4d 23	jmp $1a234d	            JMP done            ; If the current byte is 0, we're at the end of the line, just return
.1a22cb					else
.1a22cb	20 e2 04	jsr $1a04e2	            JSR ISALPHA
.1a22ce	b0 52		bcs $1a2322	            BCS is_variable     ; Yes: we may have a LET statement
.1a22d0	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it's any other non-token
.1a22d2	10 10		bpl $1a22e4	            BPL error           ; Yes: it's a syntax error
.1a22d4	20 a7 0c	jsr $1a0ca7	            JSR TOKTYPE
.1a22d7	85 0c		sta $080c	            STA SCRATCH         ; Save the type for later
.1a22d9	c9 20		cmp #$20	            CMP #TOK_TY_STMNT   ; Is it a statement?
.1a22db	d0 03		bne $1a22e0	            BNE else2
.1a22dd	4c 3b 23	jmp $1a233b	            JMP ok_to_exec      ; Yes: it's ok to try to execute it
.1a22e0	a5 d2		lda $08d2	else2       LDA STATE           ; Check to see if we're in interactive mode
.1a22e2	f0 51		beq $1a2335	            BEQ is_interact
.1a22e4					error
.1a22e4	08		php		            PHP
.1a22e5	c2 20		rep #$20	            REP #$20
.1a22e7	48		pha		            PHA
.1a22e8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a22eb	5b		tcd		            TCD
.1a22ec	68		pla		            PLA
.1a22ed	28		plp		            PLP
.1a22ee	e2 20		sep #$20	            SEP #$20
.1a22f0	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a22f2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a22f6	c2 20		rep #$20	            REP #$20
.1a22f8	29 ff 00	and #$00ff	            AND #$00FF
.1a22fb	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a22fe	e2 20		sep #$20	            SEP #$20
.1a2300	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2303					throw_break
.1a2303	08		php		            PHP
.1a2304	c2 20		rep #$20	            REP #$20
.1a2306	48		pha		            PHA
.1a2307	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a230a	5b		tcd		            TCD
.1a230b	68		pla		            PLA
.1a230c	28		plp		            PLP
.1a230d	e2 20		sep #$20	            SEP #$20
.1a230f	a9 01		lda #$01	            LDA #ERR_BREAK
.1a2311	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2315	c2 20		rep #$20	            REP #$20
.1a2317	29 ff 00	and #$00ff	            AND #$00FF
.1a231a	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a231d	e2 20		sep #$20	            SEP #$20
.1a231f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2322					is_variable
.1a2322	20 ce 44	jsr $1a44ce	            JSR S_LET
.1a2325	4c 4d 23	jmp $1a234d	            JMP done
.1a2328					STSTUB
.1a2328	08		php		            PHP
.1a2329	e2 20		sep #$20	            SEP #$20
.1a232b	48		pha		            PHA
.1a232c	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a232e	48		pha		            PHA
.1a232f	ab		plb		            PLB
.1a2330	68		pla		            PLA
.1a2331	28		plp		            PLP
.1a2332	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a2335	a5 0c		lda $080c	is_interact LDA SCRATCH         ; Get the token type
.1a2337	c9 10		cmp #$10	            CMP #TOK_TY_CMD     ; Is it a command?
.1a2339	d0 a9		bne $1a22e4	            BNE error           ; If not, it's an error
.1a233b					ok_to_exec
.1a233b	a7 00		lda [$0800]	            LDA [BIP]           ; Get the original token again
.1a233d	20 84 0c	jsr $1a0c84	            JSR TOKEVAL
.1a2340	c2 20		rep #$20	            REP #$20
.1a2342	85 2f		sta $082f	            STA JMP16PTR        ; Store it in the jump pointer
.1a2344	20 8b 19	jsr $1a198b	            JSR INITEVALSP
.1a2347	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a234a	20 28 23	jsr $1a2328	            JSR STSTUB
.1a234d	ab		plb		done        PLB
.1a234e	2b		pld		            PLD
.1a234f	28		plp		            PLP
.1a2350	60		rts		            RTS
.1a2351					EXECCMD
.1a2351	08		php		            PHP
.1a2352	58		cli		            CLI
.1a2353	20 de 20	jsr $1a20de	            JSR SETINTERACT
.1a2356	20 03 1e	jsr $1a1e03	            JSR INITRETURN
.1a2359	e2 20		sep #$20	            SEP #$20
.1a235b	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.1a235e	c2 20		rep #$20	            REP #$20
.1a2360	a5 1a		lda $081a	            LDA CURLINE         ; Set the BASIC Instruction Pointer to the first byte of the line
.1a2362	85 00		sta $0800	            STA BIP
.1a2364	a5 1c		lda $081c	            LDA CURLINE+2
.1a2366	85 02		sta $0802	            STA BIP+2
.1a2368	4c 8f 23	jmp $1a238f	            JMP exec_loop
.1a236b	08		php		EXECLINE    PHP
.1a236c	c2 20		rep #$20	            REP #$20
.1a236e	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER            ; Set the current line number
.1a2371	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.1a2373	85 d7		sta $08d7	            STA LINENUM
.1a2375	e2 20		sep #$20	            SEP #$20
.1a2377	a5 dc		lda $08dc	            LDA EXECACTION              ; If the last EXEC action was RETURN
.1a2379	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; BIP has already been set, so...
.1a237b	f0 12		beq $1a238f	            BEQ exec_loop               ; Skip over setting the BIP to the beginning of the line
.1a237d	c2 20		rep #$20	            REP #$20
.1a237f	18		clc		            CLC                         ; Set the BASIC Instruction Pointer to the first byte of the line
.1a2380	a5 1a		lda $081a	            LDA CURLINE
.1a2382	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2385	85 00		sta $0800	            STA BIP
.1a2387	e2 20		sep #$20	            SEP #$20
.1a2389	a5 1c		lda $081c	            LDA CURLINE+2
.1a238b	69 00		adc #$00	            ADC #0
.1a238d	85 02		sta $0802	            STA BIP+2
.1a238f					exec_loop
.1a238f	c2 20		rep #$20	            REP #$20
.1a2391	20 99 22	jsr $1a2299	            JSR EXECSTMT
.1a2394	e2 20		sep #$20	            SEP #$20
.1a2396	a5 dc		lda $08dc	            LDA EXECACTION
.1a2398	c9 03		cmp #$03	            CMP #EXEC_RETURN
.1a239a	f0 f3		beq $1a238f	            BEQ exec_loop
.1a239c	c9 00		cmp #$00	            CMP #EXEC_CONT              ; If it's not EXEC_CONT, exit to the caller
.1a239e	d0 31		bne $1a23d1	            BNE exec_done
.1a23a0	e2 20		sep #$20	            SEP #$20
.1a23a2	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a23a5	a7 00		lda [$0800]	            LDA [BIP]                   ; Get the current character in the line
.1a23a7	f0 28		beq $1a23d1	            BEQ exec_done               ; If it's NULL, we're done
.1a23a9	c9 3a		cmp #$3a	            CMP #':'                    ; If it's colon, we have more statements
.1a23ab	f0 1f		beq $1a23cc	            BEQ skip_loop               ; Skip over it and try to execute the next one
.1a23ad	08		php		            PHP
.1a23ae	c2 20		rep #$20	            REP #$20
.1a23b0	48		pha		            PHA
.1a23b1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a23b4	5b		tcd		            TCD
.1a23b5	68		pla		            PLA
.1a23b6	28		plp		            PLP
.1a23b7	e2 20		sep #$20	            SEP #$20
.1a23b9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a23bb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a23bf	c2 20		rep #$20	            REP #$20
.1a23c1	29 ff 00	and #$00ff	            AND #$00FF
.1a23c4	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a23c7	e2 20		sep #$20	            SEP #$20
.1a23c9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a23cc					skip_loop
.1a23cc	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a23cf	80 be		bra $1a238f	            BRA exec_loop               ; And try to execute another statement
.1a23d1					exec_done
.1a23d1	28		plp		            PLP
.1a23d2	60		rts		            RTS
.1a23d3					EXECPROGRAM
.1a23d3	08		php		            PHP
.1a23d4	58		cli		            CLI
.1a23d5	e2 20		sep #$20	            SEP #$20
.1a23d7	a9 80		lda #$80	            LDA #ST_RUNNING
.1a23d9	85 d2		sta $08d2	            STA STATE
.1a23db	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.1a23de	20 03 1e	jsr $1a1e03	            JSR INITRETURN
.1a23e1	c2 30		rep #$30	            REP #$30
.1a23e3	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the count of GOSUBs
.1a23e5	a0 02 00	ldy #$0002	exec_loop   LDY #LINE_NUMBER
.1a23e8	b7 1a		lda [$081a],y	            LDA [CURLINE],Y             ; Get the line number of the current line
.1a23ea	f0 28		beq $1a2414	            BEQ done                    ; If it's 0, we are finished running code (implicit END)
.1a23ec	20 6b 23	jsr $1a236b	            JSR EXECLINE
.1a23ef	e2 20		sep #$20	            SEP #$20
.1a23f1	a5 dc		lda $08dc	            LDA EXECACTION              ; Check the EXECACTION from the last line
.1a23f3	c9 01		cmp #$01	            CMP #EXEC_STOP              ; Stop execution of the program?
.1a23f5	f0 1d		beq $1a2414	            BEQ done
.1a23f7	c9 02		cmp #$02	            CMP #EXEC_GOTO              ; Transfer execution to a new CURLINE that is already set
.1a23f9	f0 ea		beq $1a23e5	            BEQ exec_loop
.1a23fb	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; Transfer execution to the CURLINE and BIP that is already set
.1a23fd	f0 e6		beq $1a23e5	            BEQ exec_loop
.1a23ff	c2 20		rep #$20	            REP #$20
.1a2401	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a2404	18		clc		            CLC
.1a2405	a5 1a		lda $081a	            LDA CURLINE
.1a2407	77 1a		adc [$081a],y	            ADC [CURLINE],Y
.1a2409	85 1a		sta $081a	            STA CURLINE
.1a240b	a5 1c		lda $081c	            LDA CURLINE+2
.1a240d	69 00 00	adc #$0000	            ADC #0
.1a2410	85 1c		sta $081c	            STA CURLINE+2
.1a2412	80 d1		bra $1a23e5	            BRA exec_loop               ; And try to execute that line
.1a2414					done
.1a2414	e2 20		sep #$20	            SEP #$20
.1a2416	a9 00		lda #$00	            LDA #ST_INTERACT            ; Set interpreter state to RUNNING
.1a2418	85 d2		sta $08d2	            STA STATE
.1a241a	28		plp		            PLP
.1a241b	60		rts		            RTS
.1a241c					FINDLINE
.1a241c	08		php		            PHP
.1a241d	c2 30		rep #$30	            REP #$30
.1a241f	c2 20		rep #$20	            REP #$20
.1a2421	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT            ; INDEX points to the first line of the program
.1a2424	85 08		sta $0808	            STA INDEX
.1a2426	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a2429	85 0a		sta $080a	            STA INDEX+2
.1a242b	c2 20		rep #$20	            REP #$20
.1a242d	a0 02 00	ldy #$0002	check_nmbrs LDY #LINE_NUMBER            ; Get the number of the possible target line
.1a2430	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a2432	f0 31		beq $1a2465	            BEQ ret_false               ; If new line number is 0, we got to the
.1a2434	c5 23		cmp $0823	            CMP ARGUMENT1               ; Compare it to the target line number
.1a2436	f0 1e		beq $1a2456	            BEQ found
.1a2438	b0 2b		bcs $1a2465	            BGE ret_false               ; If the line number > target line number, the line is not present
.1a243a					next_line
.1a243a	c2 20		rep #$20	            REP #$20
.1a243c	a0 00 00	ldy #$0000	            LDY #LINE_LINK              ; INDEX := INDEX + [INDEX].LINK
.1a243f	18		clc		            CLC
.1a2440	a5 08		lda $0808	            LDA INDEX
.1a2442	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a2444	85 0c		sta $080c	            STA SCRATCH
.1a2446	e2 20		sep #$20	            SEP #$20
.1a2448	a5 0a		lda $080a	            LDA INDEX+2
.1a244a	69 00		adc #$00	            ADC #0
.1a244c	85 0a		sta $080a	            STA INDEX+2
.1a244e	c2 20		rep #$20	            REP #$20
.1a2450	a5 0c		lda $080c	            LDA SCRATCH
.1a2452	85 08		sta $0808	            STA INDEX
.1a2454	80 d7		bra $1a242d	            BRA check_nmbrs             ; And go back to check the new line INDEX is pointing to
.1a2456					found
.1a2456	c2 20		rep #$20	            REP #$20
.1a2458	a5 08		lda $0808	            LDA INDEX
.1a245a	85 1a		sta $081a	            STA CURLINE
.1a245c	e2 20		sep #$20	            SEP #$20
.1a245e	a5 0a		lda $080a	            LDA INDEX+2
.1a2460	85 1c		sta $081c	            STA CURLINE+2
.1a2462	28		plp		ret_true    PLP                         ; Return true to indicate we've found the line
.1a2463	38		sec		            SEC
.1a2464	60		rts		            RTS
.1a2465	28		plp		ret_false   PLP
.1a2466	18		clc		            CLC
.1a2467	60		rts		            RTS
.1a2468					MVPROGDN
.1a2468	08		php		            PHP
.1a2469					mvd_loop
.1a2469	e2 20		sep #$20	            SEP #$20
.1a246b	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.1a246d	87 08		sta [$0808]	            STA [INDEX]
.1a246f	c2 20		rep #$20	            REP #$20
.1a2471	a5 0c		lda $080c	            LDA SCRATCH
.1a2473	c5 00		cmp $0800	            CMP BIP
.1a2475	d0 08		bne $1a247f	            BNE increment
.1a2477	e2 20		sep #$20	            SEP #$20
.1a2479	a5 0e		lda $080e	            LDA SCRATCH+2
.1a247b	c5 02		cmp $0802	            CMP BIP+2
.1a247d	f0 26		beq $1a24a5	            BEQ done            ; Yes: return
.1a247f					increment
.1a247f	c2 20		rep #$20	            REP #$20
.1a2481	18		clc		            CLC
.1a2482	a5 0c		lda $080c	            LDA SCRATCH
.1a2484	69 01 00	adc #$0001	            ADC #1
.1a2487	85 0c		sta $080c	            STA SCRATCH
.1a2489	e2 20		sep #$20	            SEP #$20
.1a248b	a5 0e		lda $080e	            LDA SCRATCH+2
.1a248d	69 00		adc #$00	            ADC #0
.1a248f	85 0e		sta $080e	            STA SCRATCH+2
.1a2491	c2 20		rep #$20	            REP #$20
.1a2493	18		clc		            CLC
.1a2494	a5 08		lda $0808	            LDA INDEX
.1a2496	69 01 00	adc #$0001	            ADC #1
.1a2499	85 08		sta $0808	            STA INDEX
.1a249b	e2 20		sep #$20	            SEP #$20
.1a249d	a5 0a		lda $080a	            LDA INDEX+2
.1a249f	69 00		adc #$00	            ADC #0
.1a24a1	85 0a		sta $080a	            STA INDEX+2
.1a24a3	80 c4		bra $1a2469	            BRA mvd_loop        ; And try again
.1a24a5	28		plp		done        PLP
.1a24a6	60		rts		            RTS
.1a24a7					MVPROGUP
.1a24a7	08		php		            PHP
.1a24a8					mvu_loop
.1a24a8	e2 20		sep #$20	            SEP #$20
.1a24aa	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.1a24ac	87 08		sta [$0808]	            STA [INDEX]
.1a24ae	c2 20		rep #$20	            REP #$20
.1a24b0	a5 0c		lda $080c	            LDA SCRATCH
.1a24b2	c5 00		cmp $0800	            CMP BIP
.1a24b4	d0 06		bne $1a24bc	            BNE decrement
.1a24b6	a5 0e		lda $080e	            LDA SCRATCH+2
.1a24b8	c5 02		cmp $0802	            CMP BIP+2
.1a24ba	f0 26		beq $1a24e2	            BEQ done            ; Yes: return
.1a24bc					decrement
.1a24bc	c2 20		rep #$20	            REP #$20
.1a24be	38		sec		            SEC
.1a24bf	a5 0c		lda $080c	            LDA SCRATCH
.1a24c1	e9 01 00	sbc #$0001	            SBC #1
.1a24c4	85 0c		sta $080c	            STA SCRATCH
.1a24c6	e2 20		sep #$20	            SEP #$20
.1a24c8	a5 0e		lda $080e	            LDA SCRATCH+2
.1a24ca	e9 00		sbc #$00	            SBC #0
.1a24cc	85 0e		sta $080e	            STA SCRATCH+2
.1a24ce	c2 20		rep #$20	            REP #$20
.1a24d0	38		sec		            SEC
.1a24d1	a5 08		lda $0808	            LDA INDEX
.1a24d3	e9 01 00	sbc #$0001	            SBC #1
.1a24d6	85 08		sta $0808	            STA INDEX
.1a24d8	e2 20		sep #$20	            SEP #$20
.1a24da	a5 0a		lda $080a	            LDA INDEX+2
.1a24dc	e9 00		sbc #$00	            SBC #0
.1a24de	85 0a		sta $080a	            STA INDEX+2
.1a24e0	80 c6		bra $1a24a8	            BRA mvu_loop        ; And try again
.1a24e2	28		plp		done        PLP
.1a24e3	60		rts		            RTS
.1a24e4					DELLINE
.1a24e4	08		php		            PHP
.1a24e5	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; SCRATCH := INDEX + [INDEX].LINK (address of the following line)
.1a24e8	c2 20		rep #$20	            REP #$20
.1a24ea	18		clc		            CLC
.1a24eb	a5 08		lda $0808	            LDA INDEX
.1a24ed	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a24ef	85 0c		sta $080c	            STA SCRATCH
.1a24f1	e2 20		sep #$20	            SEP #$20
.1a24f3	a5 0a		lda $080a	            LDA INDEX+2
.1a24f5	69 00		adc #$00	            ADC #0
.1a24f7	85 0e		sta $080e	            STA SCRATCH+2
.1a24f9	c2 20		rep #$20	            REP #$20
.1a24fb	18		clc		            CLC
.1a24fc	a5 d9		lda $08d9	            LDA LASTLINE
.1a24fe	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2501	85 00		sta $0800	            STA BIP
.1a2503	e2 20		sep #$20	            SEP #$20
.1a2505	a5 db		lda $08db	            LDA LASTLINE+2
.1a2507	69 00		adc #$00	            ADC #0
.1a2509	85 02		sta $0802	            STA BIP+2
.1a250b	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; LASTLINE := LASTLINE - [INDEX].LINK
.1a250e	c2 20		rep #$20	            REP #$20
.1a2510	38		sec		            SEC
.1a2511	a5 d9		lda $08d9	            LDA LASTLINE
.1a2513	f7 08		sbc [$0808],y	            SBC [INDEX],Y
.1a2515	85 d9		sta $08d9	            STA LASTLINE
.1a2517	e2 20		sep #$20	            SEP #$20
.1a2519	a5 db		lda $08db	            LDA LASTLINE+2
.1a251b	e9 00		sbc #$00	            SBC #0
.1a251d	85 db		sta $08db	            STA LASTLINE+2
.1a251f	20 68 24	jsr $1a2468	            JSR MVPROGDN
.1a2522					done
.1a2522	20 c4 44	jsr $1a44c4	            JSR S_CLR
.1a2525	28		plp		            PLP
.1a2526	60		rts		            RTS
.1a2527					APPLINE
.1a2527	08		php		            PHP
.1a2528	08		php		            PHP
.1a2529	c2 20		rep #$20	            REP #$20
.1a252b	48		pha		            PHA
.1a252c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a252f	5b		tcd		            TCD
.1a2530	68		pla		            PLA
.1a2531	28		plp		            PLP
.1a2532	c2 30		rep #$30	            REP #$30
.1a2534	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the line number of the new line
.1a2537	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.1a2539	18		clc		            CLC                 ; Point INDEX to the position to store the tokens
.1a253a	a5 d9		lda $08d9	            LDA LASTLINE
.1a253c	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a253f	85 08		sta $0808	            STA INDEX
.1a2541	e2 20		sep #$20	            SEP #$20
.1a2543	a5 db		lda $08db	            LDA LASTLINE+2
.1a2545	69 00		adc #$00	            ADC #0
.1a2547	85 0a		sta $080a	            STA INDEX+2
.1a2549	e2 20		sep #$20	            SEP #$20
.1a254b	a0 00 00	ldy #$0000	            LDY #0
.1a254e	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Copy the tokenized line to its place in the code
.1a2550	97 08		sta [$0808],y	            STA [INDEX],Y
.1a2552	f0 03		beq $1a2557	            BEQ copy_done
.1a2554	c8		iny		            INY
.1a2555	80 f7		bra $1a254e	            BRA copy_loop
.1a2557					copy_done
.1a2557	c2 20		rep #$20	            REP #$20
.1a2559	98		tya		            TYA
.1a255a	18		clc		            CLC
.1a255b	69 05 00	adc #$0005	            ADC #LINE_TOKENS+1
.1a255e	85 0c		sta $080c	            STA SCRATCH
.1a2560	c2 20		rep #$20	            REP #$20
.1a2562	a0 00 00	ldy #$0000	            LDY #LINE_LINK      ; Set link to the offset to the next line
.1a2565	a5 0c		lda $080c	            LDA SCRATCH
.1a2567	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.1a2569	c2 20		rep #$20	            REP #$20
.1a256b	18		clc		            CLC
.1a256c	a5 d9		lda $08d9	            LDA LASTLINE
.1a256e	65 0c		adc $080c	            ADC SCRATCH
.1a2570	85 0c		sta $080c	            STA SCRATCH
.1a2572	e2 20		sep #$20	            SEP #$20
.1a2574	a5 db		lda $08db	            LDA LASTLINE+2
.1a2576	69 00		adc #$00	            ADC #0
.1a2578	85 db		sta $08db	            STA LASTLINE+2
.1a257a	c2 20		rep #$20	            REP #$20
.1a257c	a5 0c		lda $080c	            LDA SCRATCH
.1a257e	85 d9		sta $08d9	            STA LASTLINE
.1a2580	c2 20		rep #$20	            REP #$20
.1a2582	a0 00 00	ldy #$0000	            LDY #0
.1a2585	a9 00 00	lda #$0000	            LDA #0
.1a2588	97 d9		sta [$08d9],y	blank_loop  STA [LASTLINE],Y    ; Set the "line" after the last line to nulls
.1a258a	c8		iny		            INY
.1a258b	c0 05 00	cpy #$0005	            CPY #LINE_TOKENS+1
.1a258e	d0 f8		bne $1a2588	            BNE blank_loop
.1a2590	20 c4 44	jsr $1a44c4	            JSR S_CLR
.1a2593	28		plp		            PLP
.1a2594	60		rts		            RTS
.1a2595					FINDINSPT
.1a2595	0b		phd		            PHD
.1a2596	08		php		            PHP
.1a2597	08		php		            PHP
.1a2598	c2 20		rep #$20	            REP #$20
.1a259a	48		pha		            PHA
.1a259b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a259e	5b		tcd		            TCD
.1a259f	68		pla		            PLA
.1a25a0	28		plp		            PLP
.1a25a1	c2 30		rep #$30	            REP #$30
.1a25a3	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a25a6	85 08		sta $0808	            STA INDEX
.1a25a8	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a25ab	85 0a		sta $080a	            STA INDEX+2
.1a25ad	a0 02 00	ldy #$0002	loop        LDY #LINE_NUMBER
.1a25b0	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a25b2	f0 1d		beq $1a25d1	            BEQ found_end           ; Got to end without finding it
.1a25b4	c5 d7		cmp $08d7	            CMP LINENUM
.1a25b6	f0 25		beq $1a25dd	            BEQ found_line          ; LINENUM = [INDEX].LINE_NUMBER: return we found the exact line
.1a25b8	b0 1d		bcs $1a25d7	            BGE found_spot          ; LINENUM > [INDEX].LINE_NUMBER: return we found spot to insert
.1a25ba	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a25bd	18		clc		            CLC                     ; Move INDEX to the next line
.1a25be	a5 08		lda $0808	            LDA INDEX
.1a25c0	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a25c2	85 0c		sta $080c	            STA SCRATCH
.1a25c4	a5 0a		lda $080a	            LDA INDEX+2
.1a25c6	69 00 00	adc #$0000	            ADC #0
.1a25c9	85 0a		sta $080a	            STA INDEX+2
.1a25cb	a5 0c		lda $080c	            LDA SCRATCH
.1a25cd	85 08		sta $0808	            STA INDEX
.1a25cf	80 dc		bra $1a25ad	            BRA loop                ; And check that line
.1a25d1	a9 00 00	lda #$0000	found_end   LDA #0                  ; Return that we reached the end of the program
.1a25d4	28		plp		            PLP
.1a25d5	2b		pld		            PLD
.1a25d6	60		rts		            RTS
.1a25d7	a9 01 00	lda #$0001	found_spot  LDA #1                  ; Return that we the found the spot to insert the line
.1a25da	28		plp		            PLP                     ; But that it wasn't already there
.1a25db	2b		pld		            PLD
.1a25dc	60		rts		            RTS
.1a25dd	a9 02 00	lda #$0002	found_line  LDA #2                  ; Return that we found the line
.1a25e0	28		plp		            PLP
.1a25e1	2b		pld		            PLD
.1a25e2	60		rts		            RTS
.1a25e3					INSLINE
.1a25e3	08		php		            PHP
.1a25e4	c2 30		rep #$30	            REP #$30
.1a25e6	a9 05 00	lda #$0005	            LDA #LINE_TOKENS+1  ; Set SCRATCH2 to the size of the line header with the end-of-line
.1a25e9	85 10		sta $0810	            STA SCRATCH2
.1a25eb	a0 00 00	ldy #$0000	            LDY #0
.1a25ee					count_loop
.1a25ee	e2 20		sep #$20	            SEP #$20
.1a25f0	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the byte of the line
.1a25f2	f0 07		beq $1a25fb	            BEQ shift_prog      ; If it's end-of-line, SCRATCH2 is the length
.1a25f4	c2 20		rep #$20	            REP #$20
.1a25f6	e6 10		inc $0810	            INC SCRATCH2
.1a25f8	c8		iny		            INY
.1a25f9	80 f3		bra $1a25ee	            BRA count_loop      ; Count and continue
.1a25fb					shift_prog
.1a25fb	c2 20		rep #$20	            REP #$20
.1a25fd	a5 08		lda $0808	            LDA INDEX           ; BIP = the address of the first byte for the new line
.1a25ff	85 00		sta $0800	            STA BIP
.1a2601	a5 0a		lda $080a	            LDA INDEX+2
.1a2603	85 02		sta $0802	            STA BIP+2
.1a2605	18		clc		            CLC                 ; SCRATCH = address of highest byte to copy
.1a2606	a5 d9		lda $08d9	            LDA LASTLINE
.1a2608	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a260b	85 0c		sta $080c	            STA SCRATCH
.1a260d	a5 db		lda $08db	            LDA LASTLINE+2
.1a260f	69 00 00	adc #$0000	            ADC #0
.1a2612	85 0e		sta $080e	            STA SCRATCH+2
.1a2614	18		clc		            CLC                 ; Adjust LASTLINE to its new position after the insert
.1a2615	a5 d9		lda $08d9	            LDA LASTLINE
.1a2617	65 10		adc $0810	            ADC SCRATCH2
.1a2619	85 d9		sta $08d9	            STA LASTLINE
.1a261b	a5 db		lda $08db	            LDA LASTLINE+2
.1a261d	69 00 00	adc #$0000	            ADC #0
.1a2620	85 db		sta $08db	            STA LASTLINE+2
.1a2622	18		clc		            CLC                 ; INDEX = address of the highest location to copy into
.1a2623	a5 d9		lda $08d9	            LDA LASTLINE
.1a2625	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2628	85 08		sta $0808	            STA INDEX
.1a262a	a5 db		lda $08db	            LDA LASTLINE+2
.1a262c	69 00 00	adc #$0000	            ADC #0
.1a262f	85 0a		sta $080a	            STA INDEX+2
.1a2631	20 a7 24	jsr $1a24a7	            JSR MVPROGUP
.1a2634	c2 20		rep #$20	            REP #$20
.1a2636	a5 10		lda $0810	            LDA SCRATCH2
.1a2638	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a263b	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINK_LINK = length of the new line
.1a263d	a5 d7		lda $08d7	            LDA LINENUM
.1a263f	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.1a2642	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINE_NUMBER = number of the new line
.1a2644	18		clc		            CLC                 ; Point BIP to the first byte of the new line
.1a2645	a5 00		lda $0800	            LDA BIP
.1a2647	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a264a	85 00		sta $0800	            STA BIP
.1a264c	a5 02		lda $0802	            LDA BIP+2
.1a264e	69 00 00	adc #$0000	            ADC #0
.1a2651	85 02		sta $0802	            STA BIP+2
.1a2653	a0 00 00	ldy #$0000	            LDY #0
.1a2656	e2 20		sep #$20	            SEP #$20
.1a2658	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Get the byte of the tokenized line
.1a265a	97 00		sta [$0800],y	            STA [BIP],Y         ; Copy it to its correct location in the program
.1a265c	f0 03		beq $1a2661	            BEQ done            ; If it was end-of-line byte, we're done
.1a265e	c8		iny		            INY
.1a265f	80 f7		bra $1a2658	            BRA copy_loop       ; Otherwise, continue with the next
.1a2661					done
.1a2661	20 c4 44	jsr $1a44c4	            JSR S_CLR
.1a2664	28		plp		            PLP
.1a2665	60		rts		            RTS
.1a2666					ADDLINE
.1a2666	08		php		            PHP
.1a2667	c2 30		rep #$30	            REP #$30
.1a2669	85 d7		sta $08d7	            STA LINENUM
.1a266b	20 95 25	jsr $1a2595	            JSR FINDINSPT
.1a266e	c9 00 00	cmp #$0000	            CMP #0
.1a2671	f0 2c		beq $1a269f	            BEQ do_append       ; End-of-program found, add the line to the end
.1a2673	c9 01 00	cmp #$0001	            CMP #1
.1a2676	f0 22		beq $1a269a	            BEQ do_insert       ; Spot was found: insertion required
.1a2678	c2 20		rep #$20	            REP #$20
.1a267a	a5 08		lda $0808	            LDA INDEX
.1a267c	48		pha		            PHA
.1a267d	a5 0a		lda $080a	            LDA INDEX+2
.1a267f	48		pha		            PHA
.1a2680	20 e4 24	jsr $1a24e4	            JSR DELLINE
.1a2683	68		pla		            PLA
.1a2684	85 0a		sta $080a	            STA INDEX+2
.1a2686	68		pla		            PLA
.1a2687	85 08		sta $0808	            STA INDEX
.1a2689	a5 1a		lda $081a	            LDA CURLINE         ; Check to see if there is any non-whitespace on the line
.1a268b	85 00		sta $0800	            STA BIP
.1a268d	a5 1c		lda $081c	            LDA CURLINE+2
.1a268f	85 02		sta $0802	            STA BIP+2
.1a2691	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a2694	e2 20		sep #$20	            SEP #$20
.1a2696	a7 00		lda [$0800]	            LDA [BIP]
.1a2698	f0 0a		beq $1a26a4	            BEQ done            ; If not, we're done
.1a269a					do_insert
.1a269a	20 e3 25	jsr $1a25e3	            JSR INSLINE
.1a269d	80 05		bra $1a26a4	            BRA done
.1a269f	a5 d7		lda $08d7	do_append   LDA LINENUM
.1a26a1	20 27 25	jsr $1a2527	            JSR APPLINE
.1a26a4	28		plp		done        PLP
.1a26a5	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\repl.s

="#"					CHAR_DIR = '#'
="|"					CHAR_BRUN = '|'
.1a26a6					EXPANDLINE
.1a26a6	0b		phd		                PHD
.1a26a7	08		php		                PHP
.1a26a8	08		php		            PHP
.1a26a9	c2 20		rep #$20	            REP #$20
.1a26ab	48		pha		            PHA
.1a26ac	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a26af	5b		tcd		            TCD
.1a26b0	68		pla		            PLA
.1a26b1	28		plp		            PLP
.1a26b2	e2 20		sep #$20	            SEP #$20
.1a26b4	c2 10		rep #$10	            REP #$10
.1a26b6	a2 00 00	ldx #$0000	                LDX #0
.1a26b9	bd 00 4f	lda $4f00,x	count_loop      LDA INPUTBUF,X              ; Count the number of characters in the input
.1a26bc	f0 03		beq $1a26c1	                BEQ save_size
.1a26be	e8		inx		                INX
.1a26bf	80 f8		bra $1a26b9	                BRA count_loop
.1a26c1	86 0c		stx $080c	save_size       STX SCRATCH                 ; Save the size in SCRATCH
.1a26c3	c2 30		rep #$30	            REP #$30
.1a26c5	8a		txa		                TXA
.1a26c6	c9 02 00	cmp #$0002	                CMP #2                      ; Are there arguments?
.1a26c9	90 12		bcc $1a26dd	                BLT start_copy              ; No: just replace the whole string
.1a26cb	3a		dec a		                DEC A
.1a26cc	18		clc		                CLC
.1a26cd	69 00 4f	adc #$4f00	                ADC #<>INPUTBUF
.1a26d0	aa		tax		                TAX                         ; X <-- INPUTBUF + len(INPUTBUF) - 1
.1a26d1	18		clc		                CLC                         ; Y <-- INPUTBUF + len(INPUTBUF) - 1 + len(substitution)
.1a26d2	65 8f		adc $088f	                ADC MCOUNT
.1a26d4	a8		tay		                TAY
.1a26d5	a5 0c		lda $080c	                LDA SCRATCH
.1a26d7	3a		dec a		                DEC A
.1a26d8	8b		phb		                PHB
.1a26d9	44 00 00	mvp #$00,#$00	                MVP #`INPUTBUF,#`INPUTBUF   ; Make room for the substitition
.1a26dc	ab		plb		                PLB
.1a26dd					start_copy
.1a26dd	c2 20		rep #$20	            REP #$20
.1a26df	a6 55		ldx $0855	                LDX MARG1                   ; Source is data to copy
.1a26e1	a0 00 4f	ldy #$4f00	                LDY #<>INPUTBUF             ; Destination is input buffer
.1a26e4	a5 8f		lda $088f	                LDA MCOUNT                  ; Number of bytes to copy
.1a26e6	8b		phb		                PHB
.1a26e7	54 00 1a	mvn #$1a,#$00	                MVN #`EXPANDLINE,#`INPUTBUF ; Copy the data
.1a26ea	ab		plb		                PLB
.1a26eb	e2 20		sep #$20	            SEP #$20
.1a26ed	a5 0c		lda $080c	                LDA SCRATCH                 ; Check again to see if we need quotes
.1a26ef	c9 02		cmp #$02	                CMP #2
.1a26f1	90 18		bcc $1a270b	                BLT done
.1a26f3	a6 8f		ldx $088f	                LDX MCOUNT                  ; If so, add a quote mark here
.1a26f5	a9 22		lda #$22	                LDA #CHAR_DQUOTE
.1a26f7	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a26fa	e8		inx		skip_to_end     INX                         ; Move to the end of the input string
.1a26fb	bd 00 4f	lda $4f00,x	                LDA INPUTBUF,X
.1a26fe	d0 fa		bne $1a26fa	                BNE skip_to_end
.1a2700	a9 22		lda #$22	                LDA #CHAR_DQUOTE            ; Add the quote to the end of the string
.1a2702	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a2705	a9 00		lda #$00	                LDA #0                      ; And terminate with a NULL
.1a2707	e8		inx		                INX
.1a2708	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a270b	28		plp		done            PLP
.1a270c	2b		pld		                PLD
.1a270d	60		rts		            RTS
.1a270e					PREPROCESS
.1a270e	da		phx		                PHX
.1a270f	5a		phy		                PHY
.1a2710	8b		phb		                PHB
.1a2711	0b		phd		                PHD
.1a2712	08		php		                PHP
.1a2713	08		php		            PHP
.1a2714	c2 20		rep #$20	            REP #$20
.1a2716	48		pha		            PHA
.1a2717	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a271a	5b		tcd		            TCD
.1a271b	68		pla		            PLA
.1a271c	28		plp		            PLP
.1a271d	e2 20		sep #$20	            SEP #$20
.1a271f	c2 10		rep #$10	            REP #$10
.1a2721	ad 00 4f	lda $4f00	                LDA INPUTBUF            ; Check the first character
.1a2724	c9 23		cmp #$23	                CMP #CHAR_DIR           ; Is it the DIR character?
.1a2726	f0 0a		beq $1a2732	                BEQ expand_dir          ; Yes: expand the DIR command into place
.1a2728	c9 7c		cmp #$7c	                CMP #CHAR_BRUN          ; Is it the BRUN character?
.1a272a	f0 17		beq $1a2743	                BEQ expand_brun         ; Yes: expand the BRUN command into place
.1a272c	28		plp		done            PLP
.1a272d	2b		pld		                PLD
.1a272e	ab		plb		                PLB
.1a272f	7a		ply		                PLY
.1a2730	fa		plx		                PLX
.1a2731	60		rts		            RTS
.1a2732					expand_dir
.1a2732	c2 20		rep #$20	            REP #$20
.1a2734	a9 03 00	lda #$0003	                LDA #3                  ; Set size of substitution value
.1a2737	85 8f		sta $088f	                STA MCOUNT
.1a2739	a9 54 27	lda #$2754	                LDA #<>dir_text         ; Set pointer to substitution value
.1a273c	85 55		sta $0855	                STA MARG1
.1a273e	20 a6 26	jsr $1a26a6	            JSR EXPANDLINE
.1a2741	80 e9		bra $1a272c	                BRA done
.1a2743					expand_brun
.1a2743	c2 20		rep #$20	            REP #$20
.1a2745	a9 04 00	lda #$0004	                LDA #4                  ; Set size of substitution value
.1a2748	85 8f		sta $088f	                STA MCOUNT
.1a274a	a9 58 27	lda #$2758	                LDA #<>brun_text        ; Set pointer to substitution value
.1a274d	85 55		sta $0855	                STA MARG1
.1a274f	20 a6 26	jsr $1a26a6	            JSR EXPANDLINE
.1a2752	80 d8		bra $1a272c	                BRA done
>1a2754	44 49 52 00			dir_text        .null "DIR"             ; Expansion of the DIR character
>1a2758	42 52 55 4e 00			brun_text       .null "BRUN"            ; Expansion of the BRUN character
.1a275d					PRREADY
.1a275d	8b		phb		                PHB
.1a275e	08		php		                PHP
.1a275f	20 3d 02	jsr $1a023d	            JSR ENSURETEXT
.1a2762	08		php		            PHP
.1a2763	e2 20		sep #$20	            SEP #$20
.1a2765	48		pha		            PHA
.1a2766	a9 1a		lda #$1a	            LDA #`MPROMPT
.1a2768	48		pha		            PHA
.1a2769	ab		plb		            PLB
.1a276a	68		pla		            PLA
.1a276b	28		plp		            PLP
.1a276c	a2 6f d2	ldx #$d26f	                LDX #<>MPROMPT
.1a276f	20 64 04	jsr $1a0464	            JSR PRINTS
.1a2772	28		plp		                PLP
.1a2773	ab		plb		                PLB
.1a2774	60		rts		            RTS
.1a2775					IREADLINE
.1a2775	08		php		                PHP
.1a2776	e2 30		sep #$30	            SEP #$30
.1a2778	a9 01		lda #$01	                LDA #1
.1a277a	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a277d					read_loop
.1a277d	20 db 00	jsr $1a00db	            JSR GETKEYE
.1a2780	c9 00		cmp #$00	                CMP #0
.1a2782	f0 f9		beq $1a277d	                BEQ read_loop
.1a2784	c9 0d		cmp #$0d	                CMP #CHAR_CR
.1a2786	f0 02		beq $1a278a	                BEQ done
.1a2788	80 f3		bra $1a277d	                BRA read_loop
.1a278a	28		plp		done            PLP
.1a278b	60		rts		            RTS
.1a278c					PROCESS
.1a278c	0b		phd		                PHD
.1a278d	08		php		                PHP
.1a278e	08		php		            PHP
.1a278f	c2 20		rep #$20	            REP #$20
.1a2791	48		pha		            PHA
.1a2792	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a2795	5b		tcd		            TCD
.1a2796	68		pla		            PLA
.1a2797	28		plp		            PLP
.1a2798	c2 30		rep #$30	            REP #$30
.1a279a	64 d7		stz $08d7	                STZ LINENUM
.1a279c	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF         ; Attempt to tokenize the line that was read
.1a279f	85 1a		sta $081a	                STA CURLINE
.1a27a1	a9 00 00	lda #$0000	                LDA #`CURLINE
.1a27a4	85 1c		sta $081c	                STA CURLINE+2
.1a27a6	20 9c 09	jsr $1a099c	            JSR TOKENIZE
.1a27a9	c2 20		rep #$20	            REP #$20
.1a27ab	a5 d7		lda $08d7	                LDA LINENUM             ; Did we get a line number?
.1a27ad	d0 05		bne $1a27b4	                BNE update_line         ; Yes: attempt to add it to the program
.1a27af	20 51 23	jsr $1a2351	            JSR EXECCMD
.1a27b2	80 07		bra $1a27bb	                BRA done
.1a27b4					update_line
.1a27b4	20 66 26	jsr $1a2666	            JSR ADDLINE
.1a27b7	28		plp		no_prompt       PLP
.1a27b8	2b		pld		                PLD
.1a27b9	38		sec		                SEC
.1a27ba	60		rts		            RTS
.1a27bb	28		plp		done            PLP
.1a27bc	2b		pld		                PLD
.1a27bd	18		clc		                CLC
.1a27be	60		rts		            RTS
.1a27bf					INTERACT
.1a27bf	c2 30		rep #$30	            REP #$30
.1a27c1	a2 ff fe	ldx #$feff	                LDX #<>STACK_END
.1a27c4	9a		txs		                TXS
.1a27c5					ready_loop
.1a27c5	20 5d 27	jsr $1a275d	            JSR PRREADY
.1a27c8					no_ready_loop
.1a27c8	20 08 00	jsr $1a0008	            JSR READLINE
.1a27cb	20 0c 00	jsr $1a000c	            JSR SCRCOPYLINE
.1a27ce	22 3c 11 00	jsl $00113c	                JSL FK_TESTBREAK    ; Make sure the BREAK bit is cleared.
.1a27d2	a9 00 00	lda #$0000	                LDA #0              ; Hide the cursor
.1a27d5	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a27d8	20 0e 27	jsr $1a270e	            JSR PREPROCESS
.1a27db	20 8c 27	jsr $1a278c	            JSR PROCESS
.1a27de	b0 e8		bcs $1a27c8	                BCS no_ready_loop
.1a27e0	80 e3		bra $1a27c5	                BRA ready_loop
>1ad26f	0d 52 45 41 44 59 0d 00		MPROMPT         .null 13,"READY",13

;******  Return to file: src\basic816.s


;******  Processing file: src\operators.s

.1a27e2					OP_PLUS
.1a27e2	08		php		            PHP
.1a27e3	e2 20		sep #$20	            SEP #$20
.1a27e5	20 a3 08	jsr $1a08a3	            JSR ASS_ARGS_NUMSTR
.1a27e8	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a27ea	f0 2c		beq $1a2818	            BEQ is_integer
.1a27ec	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a27ee	f0 2d		beq $1a281d	            BEQ is_float
.1a27f0	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a27f2	f0 1f		beq $1a2813	            BEQ is_string
.1a27f4					type_error
.1a27f4	08		php		            PHP
.1a27f5	c2 20		rep #$20	            REP #$20
.1a27f7	48		pha		            PHA
.1a27f8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a27fb	5b		tcd		            TCD
.1a27fc	68		pla		            PLA
.1a27fd	28		plp		            PLP
.1a27fe	e2 20		sep #$20	            SEP #$20
.1a2800	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2802	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2806	c2 20		rep #$20	            REP #$20
.1a2808	29 ff 00	and #$00ff	            AND #$00FF
.1a280b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a280e	e2 20		sep #$20	            SEP #$20
.1a2810	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2813					is_string
.1a2813	20 51 16	jsr $1a1651	            JSR STRCONCAT
.1a2816	80 08		bra $1a2820	            BRA done
.1a2818					is_integer
.1a2818	20 71 54	jsr $1a5471	            JSR OP_INT_ADD
.1a281b	80 03		bra $1a2820	            BRA done
.1a281d					is_float
.1a281d	20 e0 56	jsr $1a56e0	            JSR OP_FP_ADD
.1a2820	28		plp		done        PLP
.1a2821	60		rts		            RTS
.1a2822					OP_MINUS
.1a2822	08		php		            PHP
.1a2823	e2 20		sep #$20	            SEP #$20
.1a2825	20 55 08	jsr $1a0855	            JSR ASS_ARGS_NUM
.1a2828	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a282a	f0 23		beq $1a284f	            BEQ is_integer
.1a282c	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a282e	f0 24		beq $1a2854	            BEQ is_float
.1a2830					type_error
.1a2830	08		php		            PHP
.1a2831	c2 20		rep #$20	            REP #$20
.1a2833	48		pha		            PHA
.1a2834	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2837	5b		tcd		            TCD
.1a2838	68		pla		            PLA
.1a2839	28		plp		            PLP
.1a283a	e2 20		sep #$20	            SEP #$20
.1a283c	a9 04		lda #$04	            LDA #ERR_TYPE
.1a283e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2842	c2 20		rep #$20	            REP #$20
.1a2844	29 ff 00	and #$00ff	            AND #$00FF
.1a2847	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a284a	e2 20		sep #$20	            SEP #$20
.1a284c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a284f					is_integer
.1a284f	20 83 54	jsr $1a5483	            JSR OP_INT_SUB
.1a2852	80 03		bra $1a2857	            BRA done
.1a2854					is_float
.1a2854	20 d5 56	jsr $1a56d5	            JSR OP_FP_SUB
.1a2857	28		plp		done        PLP
.1a2858	60		rts		            RTS
.1a2859					OP_MULTIPLY
.1a2859	08		php		            PHP
.1a285a	e2 20		sep #$20	            SEP #$20
.1a285c	20 55 08	jsr $1a0855	            JSR ASS_ARGS_NUM
.1a285f	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2861	f0 23		beq $1a2886	            BEQ is_integer
.1a2863	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2865	f0 24		beq $1a288b	            BEQ is_float
.1a2867					type_error
.1a2867	08		php		            PHP
.1a2868	c2 20		rep #$20	            REP #$20
.1a286a	48		pha		            PHA
.1a286b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a286e	5b		tcd		            TCD
.1a286f	68		pla		            PLA
.1a2870	28		plp		            PLP
.1a2871	e2 20		sep #$20	            SEP #$20
.1a2873	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2875	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2879	c2 20		rep #$20	            REP #$20
.1a287b	29 ff 00	and #$00ff	            AND #$00FF
.1a287e	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2881	e2 20		sep #$20	            SEP #$20
.1a2883	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2886					is_integer
.1a2886	20 95 54	jsr $1a5495	            JSR OP_INT_MUL
.1a2889	80 03		bra $1a288e	            BRA done
.1a288b					is_float
.1a288b	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a288e	28		plp		done        PLP
.1a288f	60		rts		            RTS
.1a2890					OP_DIVIDE
.1a2890	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a2893	20 f0 07	jsr $1a07f0	            JSR ASS_ARG2_FLOAT
.1a2896	20 2b 57	jsr $1a572b	            JSR OP_FP_DIV
.1a2899	60		rts		            RTS
.1a289a					OP_MOD
.1a289a	a5 23		lda $0823	            LDA ARGUMENT1
.1a289c	8f 1a 01 00	sta $00011a	            STA @lD1_OPERAND_B
.1a28a0	a5 29		lda $0829	            LDA ARGUMENT2
.1a28a2	8f 18 01 00	sta $000118	            STA @lD1_OPERAND_A
.1a28a6	af 1e 01 00	lda $00011e	            LDA @lD1_REMAINDER
.1a28aa	85 23		sta $0823	            STA ARGUMENT1
.1a28ac	60		rts		            RTS
.1a28ad					OP_POW
.1a28ad	08		php		            PHP
.1a28ae	c2 30		rep #$30	            REP #$30
.1a28b0	48		pha		            PHA
.1a28b1	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a28b4	a5 2d		lda $082d	            LDA ARGTYPE2
.1a28b6	c9 00 00	cmp #$0000	            CMP #TYPE_INTEGER
.1a28b9	d0 0d		bne $1a28c8	            BNE flt_exp
.1a28bb	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a28bd	d0 09		bne $1a28c8	            BNE flt_exp
.1a28bf	da		phx		            PHX
.1a28c0	a6 29		ldx $0829	            LDX ARGUMENT2
.1a28c2	20 49 64	jsr $1a6449	            JSR Q_FP_POW_INT
.1a28c5	fa		plx		            PLX
.1a28c6	80 1c		bra $1a28e4	            BRA done
.1a28c8					flt_exp
.1a28c8	20 f0 07	jsr $1a07f0	            JSR ASS_ARG2_FLOAT
.1a28cb	c2 20		rep #$20	            REP #$20
.1a28cd	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a28cf	48		pha		            PHA
.1a28d0	a5 29		lda $0829	            LDA ARGUMENT2
.1a28d2	48		pha		            PHA
.1a28d3	20 d4 62	jsr $1a62d4	            JSR FP_LN
.1a28d6	c2 20		rep #$20	            REP #$20
.1a28d8	68		pla		            PLA
.1a28d9	85 29		sta $0829	            STA ARGUMENT2
.1a28db	68		pla		            PLA
.1a28dc	85 2b		sta $082b	            STA ARGUMENT2+2
.1a28de	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a28e1	20 b3 64	jsr $1a64b3	            JSR FP_EXP
.1a28e4	68		pla		done        PLA
.1a28e5	28		plp		            PLP
.1a28e6	60		rts		            RTS
.1a28e7					OP_AND
.1a28e7	08		php		            PHP
.1a28e8	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a28eb	20 82 06	jsr $1a0682	            JSR ASS_ARG2_INT
.1a28ee	c2 20		rep #$20	            REP #$20
.1a28f0	a5 23		lda $0823	            LDA ARGUMENT1
.1a28f2	25 29		and $0829	            AND ARGUMENT2
.1a28f4	85 23		sta $0823	            STA ARGUMENT1
.1a28f6	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a28f8	25 2b		and $082b	            AND ARGUMENT2+2
.1a28fa	85 25		sta $0825	            STA ARGUMENT1+2
.1a28fc	28		plp		            PLP
.1a28fd	60		rts		            RTS
.1a28fe					OP_OR
.1a28fe	08		php		            PHP
.1a28ff	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a2902	20 82 06	jsr $1a0682	            JSR ASS_ARG2_INT
.1a2905	c2 20		rep #$20	            REP #$20
.1a2907	a5 23		lda $0823	            LDA ARGUMENT1
.1a2909	05 29		ora $0829	            ORA ARGUMENT2
.1a290b	85 23		sta $0823	            STA ARGUMENT1
.1a290d	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a290f	05 2b		ora $082b	            ORA ARGUMENT2+2
.1a2911	85 25		sta $0825	            STA ARGUMENT1+2
.1a2913	28		plp		done        PLP
.1a2914	60		rts		            RTS
.1a2915					OP_NOT
.1a2915	08		php		            PHP
.1a2916	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a2919	c2 20		rep #$20	            REP #$20
.1a291b	a5 23		lda $0823	            LDA ARGUMENT1
.1a291d	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a2920	85 23		sta $0823	            STA ARGUMENT1
.1a2922	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a2924	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a2927	85 25		sta $0825	            STA ARGUMENT1+2
.1a2929	28		plp		done        PLP
.1a292a	60		rts		            RTS
.1a292b					OP_LT
.1a292b	08		php		            PHP
.1a292c	e2 20		sep #$20	            SEP #$20
.1a292e	20 a3 08	jsr $1a08a3	            JSR ASS_ARGS_NUMSTR
.1a2931	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2933	f0 2c		beq $1a2961	            BEQ is_integer
.1a2935	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2937	f0 2d		beq $1a2966	            BEQ is_float
.1a2939	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a293b	f0 1f		beq $1a295c	            BEQ is_string
.1a293d					type_error
.1a293d	08		php		            PHP
.1a293e	c2 20		rep #$20	            REP #$20
.1a2940	48		pha		            PHA
.1a2941	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2944	5b		tcd		            TCD
.1a2945	68		pla		            PLA
.1a2946	28		plp		            PLP
.1a2947	e2 20		sep #$20	            SEP #$20
.1a2949	a9 04		lda #$04	            LDA #ERR_TYPE
.1a294b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a294f	c2 20		rep #$20	            REP #$20
.1a2951	29 ff 00	and #$00ff	            AND #$00FF
.1a2954	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2957	e2 20		sep #$20	            SEP #$20
.1a2959	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a295c					is_string
.1a295c	20 d9 17	jsr $1a17d9	            JSR OP_STR_LT
.1a295f	80 08		bra $1a2969	            BRA done
.1a2961					is_integer
.1a2961	20 96 55	jsr $1a5596	            JSR OP_INT_LT
.1a2964	80 03		bra $1a2969	            BRA done
.1a2966					is_float
.1a2966	20 0b 5d	jsr $1a5d0b	            JSR OP_FP_LT
.1a2969	28		plp		done        PLP
.1a296a	60		rts		            RTS
.1a296b					OP_GT
.1a296b	08		php		            PHP
.1a296c	e2 20		sep #$20	            SEP #$20
.1a296e	20 a3 08	jsr $1a08a3	            JSR ASS_ARGS_NUMSTR
.1a2971	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2973	f0 2c		beq $1a29a1	            BEQ is_integer
.1a2975	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2977	f0 2d		beq $1a29a6	            BEQ is_float
.1a2979	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a297b	f0 1f		beq $1a299c	            BEQ is_string
.1a297d					type_error
.1a297d	08		php		            PHP
.1a297e	c2 20		rep #$20	            REP #$20
.1a2980	48		pha		            PHA
.1a2981	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2984	5b		tcd		            TCD
.1a2985	68		pla		            PLA
.1a2986	28		plp		            PLP
.1a2987	e2 20		sep #$20	            SEP #$20
.1a2989	a9 04		lda #$04	            LDA #ERR_TYPE
.1a298b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a298f	c2 20		rep #$20	            REP #$20
.1a2991	29 ff 00	and #$00ff	            AND #$00FF
.1a2994	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2997	e2 20		sep #$20	            SEP #$20
.1a2999	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a299c					is_string
.1a299c	20 f0 17	jsr $1a17f0	            JSR OP_STR_GT
.1a299f	80 08		bra $1a29a9	            BRA done
.1a29a1					is_integer
.1a29a1	20 b7 55	jsr $1a55b7	            JSR OP_INT_GT
.1a29a4	80 03		bra $1a29a9	            BRA done
.1a29a6					is_float
.1a29a6	20 20 5d	jsr $1a5d20	            JSR OP_FP_GT
.1a29a9	28		plp		done        PLP
.1a29aa	60		rts		            RTS
.1a29ab					OP_EQ
.1a29ab	08		php		            PHP
.1a29ac	e2 20		sep #$20	            SEP #$20
.1a29ae	20 a3 08	jsr $1a08a3	            JSR ASS_ARGS_NUMSTR
.1a29b1	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a29b3	f0 2c		beq $1a29e1	            BEQ is_integer
.1a29b5	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a29b7	f0 2d		beq $1a29e6	            BEQ is_float
.1a29b9	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a29bb	f0 1f		beq $1a29dc	            BEQ is_string
.1a29bd					type_error
.1a29bd	08		php		            PHP
.1a29be	c2 20		rep #$20	            REP #$20
.1a29c0	48		pha		            PHA
.1a29c1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a29c4	5b		tcd		            TCD
.1a29c5	68		pla		            PLA
.1a29c6	28		plp		            PLP
.1a29c7	e2 20		sep #$20	            SEP #$20
.1a29c9	a9 04		lda #$04	            LDA #ERR_TYPE
.1a29cb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a29cf	c2 20		rep #$20	            REP #$20
.1a29d1	29 ff 00	and #$00ff	            AND #$00FF
.1a29d4	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a29d7	e2 20		sep #$20	            SEP #$20
.1a29d9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a29dc					is_string
.1a29dc	20 07 18	jsr $1a1807	            JSR OP_STR_EQ
.1a29df	80 08		bra $1a29e9	            BRA done
.1a29e1					is_integer
.1a29e1	20 e4 55	jsr $1a55e4	            JSR OP_INT_EQ
.1a29e4	80 03		bra $1a29e9	            BRA done
.1a29e6					is_float
.1a29e6	20 35 5d	jsr $1a5d35	            JSR OP_FP_EQ
.1a29e9	28		plp		done        PLP
.1a29ea	60		rts		            RTS
.1a29eb					OP_NE
.1a29eb	08		php		            PHP
.1a29ec	e2 20		sep #$20	            SEP #$20
.1a29ee	20 a3 08	jsr $1a08a3	            JSR ASS_ARGS_NUMSTR
.1a29f1	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a29f3	f0 2c		beq $1a2a21	            BEQ is_integer
.1a29f5	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a29f7	f0 2d		beq $1a2a26	            BEQ is_float
.1a29f9	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a29fb	f0 1f		beq $1a2a1c	            BEQ is_string
.1a29fd					type_error
.1a29fd	08		php		            PHP
.1a29fe	c2 20		rep #$20	            REP #$20
.1a2a00	48		pha		            PHA
.1a2a01	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2a04	5b		tcd		            TCD
.1a2a05	68		pla		            PLA
.1a2a06	28		plp		            PLP
.1a2a07	e2 20		sep #$20	            SEP #$20
.1a2a09	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2a0b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2a0f	c2 20		rep #$20	            REP #$20
.1a2a11	29 ff 00	and #$00ff	            AND #$00FF
.1a2a14	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2a17	e2 20		sep #$20	            SEP #$20
.1a2a19	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2a1c					is_string
.1a2a1c	20 1e 18	jsr $1a181e	            JSR OP_STR_NE
.1a2a1f	80 08		bra $1a2a29	            BRA done
.1a2a21					is_integer
.1a2a21	20 02 56	jsr $1a5602	            JSR OP_INT_NE
.1a2a24	80 03		bra $1a2a29	            BRA done
.1a2a26					is_float
.1a2a26	20 74 5d	jsr $1a5d74	            JSR OP_FP_NE
.1a2a29	28		plp		done        PLP
.1a2a2a	60		rts		            RTS
.1a2a2b					OP_GTE
.1a2a2b	08		php		            PHP
.1a2a2c	e2 20		sep #$20	            SEP #$20
.1a2a2e	20 a3 08	jsr $1a08a3	            JSR ASS_ARGS_NUMSTR
.1a2a31	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2a33	f0 2c		beq $1a2a61	            BEQ is_integer
.1a2a35	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2a37	f0 2d		beq $1a2a66	            BEQ is_float
.1a2a39	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a2a3b	f0 1f		beq $1a2a5c	            BEQ is_string
.1a2a3d					type_error
.1a2a3d	08		php		            PHP
.1a2a3e	c2 20		rep #$20	            REP #$20
.1a2a40	48		pha		            PHA
.1a2a41	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2a44	5b		tcd		            TCD
.1a2a45	68		pla		            PLA
.1a2a46	28		plp		            PLP
.1a2a47	e2 20		sep #$20	            SEP #$20
.1a2a49	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2a4b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2a4f	c2 20		rep #$20	            REP #$20
.1a2a51	29 ff 00	and #$00ff	            AND #$00FF
.1a2a54	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2a57	e2 20		sep #$20	            SEP #$20
.1a2a59	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2a5c					is_string
.1a2a5c	20 35 18	jsr $1a1835	            JSR OP_STR_GTE
.1a2a5f	80 08		bra $1a2a69	            BRA done
.1a2a61					is_integer
.1a2a61	20 20 56	jsr $1a5620	            JSR OP_INT_GTE
.1a2a64	80 03		bra $1a2a69	            BRA done
.1a2a66					is_float
.1a2a66	20 5f 5d	jsr $1a5d5f	            JSR OP_FP_GTE
.1a2a69	28		plp		done        PLP
.1a2a6a	60		rts		            RTS
.1a2a6b					OP_LTE
.1a2a6b	08		php		            PHP
.1a2a6c	e2 20		sep #$20	            SEP #$20
.1a2a6e	20 a3 08	jsr $1a08a3	            JSR ASS_ARGS_NUMSTR
.1a2a71	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2a73	f0 2c		beq $1a2aa1	            BEQ is_integer
.1a2a75	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2a77	f0 2d		beq $1a2aa6	            BEQ is_float
.1a2a79	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a2a7b	f0 1f		beq $1a2a9c	            BEQ is_string
.1a2a7d					type_error
.1a2a7d	08		php		            PHP
.1a2a7e	c2 20		rep #$20	            REP #$20
.1a2a80	48		pha		            PHA
.1a2a81	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2a84	5b		tcd		            TCD
.1a2a85	68		pla		            PLA
.1a2a86	28		plp		            PLP
.1a2a87	e2 20		sep #$20	            SEP #$20
.1a2a89	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2a8b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2a8f	c2 20		rep #$20	            REP #$20
.1a2a91	29 ff 00	and #$00ff	            AND #$00FF
.1a2a94	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2a97	e2 20		sep #$20	            SEP #$20
.1a2a99	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2a9c					is_string
.1a2a9c	20 4c 18	jsr $1a184c	            JSR OP_STR_LTE
.1a2a9f	80 08		bra $1a2aa9	            BRA done
.1a2aa1					is_integer
.1a2aa1	20 4d 56	jsr $1a564d	            JSR OP_INT_LTE
.1a2aa4	80 03		bra $1a2aa9	            BRA done
.1a2aa6					is_float
.1a2aa6	20 4a 5d	jsr $1a5d4a	            JSR OP_FP_LTE
.1a2aa9	28		plp		done        PLP
.1a2aaa	60		rts		            RTS
.1a2aab					OP_NEGATIVE
.1a2aab	08		php		                PHP
.1a2aac	e2 20		sep #$20	            SEP #$20
.1a2aae	a5 27		lda $0827	                LDA ARGTYPE1                ; Check the type of the argument
.1a2ab0	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a2ab2	f0 2d		beq $1a2ae1	                BEQ int_negate              ; If integer: negate the integer
.1a2ab4	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a2ab6	f0 1f		beq $1a2ad7	                BEQ float_negate            ; If floating point: negate the floating point
.1a2ab8					type_error
.1a2ab8	08		php		            PHP
.1a2ab9	c2 20		rep #$20	            REP #$20
.1a2abb	48		pha		            PHA
.1a2abc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2abf	5b		tcd		            TCD
.1a2ac0	68		pla		            PLA
.1a2ac1	28		plp		            PLP
.1a2ac2	e2 20		sep #$20	            SEP #$20
.1a2ac4	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2ac6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2aca	c2 20		rep #$20	            REP #$20
.1a2acc	29 ff 00	and #$00ff	            AND #$00FF
.1a2acf	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2ad2	e2 20		sep #$20	            SEP #$20
.1a2ad4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2ad7					float_negate
.1a2ad7	e2 20		sep #$20	            SEP #$20
.1a2ad9	a5 26		lda $0826	                LDA ARGUMENT1+3             ; Flip the sign bit of the floating point number
.1a2adb	49 80		eor #$80	                EOR #$80
.1a2add	85 26		sta $0826	                STA ARGUMENT1+3
.1a2adf	80 16		bra $1a2af7	                BRA done
.1a2ae1					int_negate
.1a2ae1	c2 20		rep #$20	            REP #$20
.1a2ae3	a5 23		lda $0823	                LDA ARGUMENT1               ; Invert ARGUMENT1
.1a2ae5	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a2ae8	85 23		sta $0823	                STA ARGUMENT1
.1a2aea	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a2aec	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a2aef	85 25		sta $0825	                STA ARGUMENT1+2
.1a2af1	e6 23		inc $0823	                INC ARGUMENT1               ; And increment to get two's complement
.1a2af3	d0 02		bne $1a2af7	                BNE done
.1a2af5	e6 25		inc $0825	                INC ARGUMENT1+2
.1a2af7					done
.1a2af7	28		plp		                PLP
.1a2af8	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\statements.s


;******  Processing file: src\C256/statements_c256.s

=0					GR_LUT_BLUE = 0
=1					GR_LUT_GREEN = 1
=2					GR_LUT_RED = 2
=3					GR_LUT_ALPHA = 3
=640					GR_DEFAULT_COLS = 640               ; Default number of columns in the display
=480					GR_DEFAULT_ROWS = 480               ; Default number of rows in the display
=8					GR_MAX_LUT = 8                      ; The number of LUTs Vicky supports
=64					SP_MAX = 64                         ; The number of sprites Vicky supports
=8					SP_REG_SIZE = 8                     ; The number of bytes in a sprite's register block
=0					SP_CONTROL = 0                      ; Offset of the control regsiter for a sprite
=1					SP_ADDR = 1                         ; Offset of the pixmap address for a sprite
=4					SP_X_COORD = 4                      ; Offset of the X coordinate for a sprite
=6					SP_Y_COORD = 6                      ; Offset of the Y coordinate for a sprite
=12					TILEMAP_REG_SIZE = 12               ; The number of bytes in a tile map's register set
=4					TILESET_REG_SIZE = 4                ; The number of bytes in a tile set's register set
=2					BM_MAX = 2                          ; Maximum number of bitmaps we support
=$0040					MAX_VRAM_VICKY = $0040              ; Upper limit (exclusive) bank address for VRAM in Vicky address space
=$00f0					MAX_VRAM_CPU = $00F0                ; Upper limit (exclusive) bank address for VRAM in CPU address space
=$00b0					MIN_VRAM_CPU = $00B0                ; Lower limit (inclusive) bank address for VRAM in CPU address space
>1af000					GR_BM0_ADDR     .dword ?            ; Address of bitmap 0 (from CPU's perspective)
>1af004					GR_BM1_ADDR     .dword ?            ; Address of bitmap 1 (from CPU's perspective)
>1af008					GR_BM0_VRAM     .dword ?            ; Address of bitmap 0 (relative to start of VRAM)
>1af00c					GR_BM1_VRAM     .dword ?            ; Address of bitmap 1 (relative to start of VRAM)
>1af010					GR_MAX_COLS     .word ?             ; Width the display in pixels
>1af012					GR_MAX_ROWS     .word ?             ; Height of the display in pixels
>1af014					GR_TOTAL_PIXELS .word ?             ; Total number of pixels in the display
>1af016					GR_TEMP         .word ?             ; A temporary word for graphics commands
>1af018					GS_SP_CONTROL   .fill SP_MAX        ; Shadow registers for the sprite controls
.1a2af9					S_SETTIME
.1a2af9	08		php		                PHP
.1a2afa	e2 20		sep #$20	            SEP #$20
.1a2afc	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2aff	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2b02	20 ae 05	jsr $1a05ae	            JSR DIVINT10
.1a2b05	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b07	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b08	0a		asl a		                ASL A
.1a2b09	0a		asl a		                ASL A
.1a2b0a	0a		asl a		                ASL A
.1a2b0b	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b0d	48		pha		                PHA
.1a2b0e	a9 2c		lda #$2c	                LDA #','
.1a2b10	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2b13	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2b16	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2b19	20 ae 05	jsr $1a05ae	            JSR DIVINT10
.1a2b1c	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b1e	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b1f	0a		asl a		                ASL A
.1a2b20	0a		asl a		                ASL A
.1a2b21	0a		asl a		                ASL A
.1a2b22	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b24	48		pha		                PHA
.1a2b25	a9 2c		lda #$2c	                LDA #','
.1a2b27	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2b2a	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2b2d	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2b30	20 ae 05	jsr $1a05ae	            JSR DIVINT10
.1a2b33	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b35	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b36	0a		asl a		                ASL A
.1a2b37	0a		asl a		                ASL A
.1a2b38	0a		asl a		                ASL A
.1a2b39	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b3b	48		pha		                PHA
.1a2b3c	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a2b40	09 0c		ora #$0c	                ORA #%00001100
.1a2b42	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2b46	68		pla		                PLA                     ; And seconds to the RTC
.1a2b47	8f 00 08 af	sta $af0800	                STA @lRTC_SEC
.1a2b4b	68		pla		                PLA                     ; Minutes...
.1a2b4c	8f 02 08 af	sta $af0802	                STA @lRTC_MIN
.1a2b50	68		pla		                PLA                     ; Save the hour...
.1a2b51	8f 04 08 af	sta $af0804	                STA @lRTC_HRS
.1a2b55	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a2b59	29 f7		and #$f7	                AND #%11110111
.1a2b5b	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2b5f	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a2b62	28		plp		                PLP
.1a2b63	60		rts		            RTS
.1a2b64					S_SETDATE
.1a2b64	08		php		                PHP
.1a2b65	e2 20		sep #$20	            SEP #$20
.1a2b67	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2b6a	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2b6d	20 ae 05	jsr $1a05ae	            JSR DIVINT10
.1a2b70	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b72	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b73	0a		asl a		                ASL A
.1a2b74	0a		asl a		                ASL A
.1a2b75	0a		asl a		                ASL A
.1a2b76	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b78	48		pha		                PHA
.1a2b79	a9 2c		lda #$2c	                LDA #','
.1a2b7b	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2b7e	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2b81	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2b84	20 ae 05	jsr $1a05ae	            JSR DIVINT10
.1a2b87	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2b89	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2b8a	0a		asl a		                ASL A
.1a2b8b	0a		asl a		                ASL A
.1a2b8c	0a		asl a		                ASL A
.1a2b8d	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2b8f	48		pha		                PHA
.1a2b90	a9 2c		lda #$2c	                LDA #','
.1a2b92	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2b95	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2b98	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a2b9b	20 e4 05	jsr $1a05e4	            JSR DIVINT100
.1a2b9e	c2 20		rep #$20	            REP #$20
.1a2ba0	a5 23		lda $0823	                LDA ARGUMENT1           ; Get the century
.1a2ba2	85 92		sta $0892	                STA MTEMP               ; Save it in MTEMP
.1a2ba4	a5 29		lda $0829	                LDA ARGUMENT2           ; Separate the 10s from the 1s digits
.1a2ba6	85 23		sta $0823	                STA ARGUMENT1
.1a2ba8	20 ae 05	jsr $1a05ae	            JSR DIVINT10
.1a2bab	e2 20		sep #$20	            SEP #$20
.1a2bad	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2baf	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2bb0	0a		asl a		                ASL A
.1a2bb1	0a		asl a		                ASL A
.1a2bb2	0a		asl a		                ASL A
.1a2bb3	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2bb5	48		pha		                PHA                     ; Save the 10s and 1s in BCD
.1a2bb6	c2 20		rep #$20	            REP #$20
.1a2bb8	a5 92		lda $0892	                LDA MTEMP               ; Separate the 100s from the 1000s digits
.1a2bba	85 23		sta $0823	                STA ARGUMENT1
.1a2bbc	20 ae 05	jsr $1a05ae	            JSR DIVINT10
.1a2bbf	e2 20		sep #$20	            SEP #$20
.1a2bc1	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2bc3	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2bc4	0a		asl a		                ASL A
.1a2bc5	0a		asl a		                ASL A
.1a2bc6	0a		asl a		                ASL A
.1a2bc7	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2bc9	48		pha		                PHA                     ; Save the 100s and 1000s in BCD
.1a2bca	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a2bce	09 0c		ora #$0c	                ORA #%00001100
.1a2bd0	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2bd4	68		pla		                PLA                     ; Set the century
.1a2bd5	8f 0f 08 af	sta $af080f	                STA @lRTC_CENTURY
.1a2bd9	68		pla		                PLA                     ; And year to the RTC
.1a2bda	8f 0a 08 af	sta $af080a	                STA @lRTC_YEAR
.1a2bde	68		pla		                PLA                     ; Month...
.1a2bdf	8f 09 08 af	sta $af0809	                STA @lRTC_MONTH
.1a2be3	68		pla		                PLA                     ; Save the day...
.1a2be4	8f 06 08 af	sta $af0806	                STA @lRTC_DAY
.1a2be8	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a2bec	29 f7		and #$f7	                AND #%11110111
.1a2bee	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2bf2	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a2bf5	28		plp		                PLP
.1a2bf6	60		rts		            RTS
.1a2bf7					S_TEXTCOLOR
.1a2bf7	08		php		                PHP
.1a2bf8					locals
>0001					L_FOREGROUND    .byte ?
.1a2bf8	e2 20		sep #$20	            SEP #$20
.1a2bfa	48		pha		            PHA
.1a2bfb	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2bfe	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2c01	e2 20		sep #$20	            SEP #$20
.1a2c03	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the foreground position
.1a2c05	29 0f		and #$0f	                AND #$0F
.1a2c07	0a		asl a		                ASL A
.1a2c08	0a		asl a		                ASL A
.1a2c09	0a		asl a		                ASL A
.1a2c0a	0a		asl a		                ASL A
.1a2c0b	83 01		sta $01,s	                STA L_FOREGROUND    ; Save the foreground color
.1a2c0d	a9 2c		lda #$2c	                LDA #','
.1a2c0f	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2c12	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2c15	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2c18	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the background position
.1a2c1a	29 0f		and #$0f	                AND #$0F
.1a2c1c	03 01		ora $01,s	                ORA L_FOREGROUND    ; Add in the foreground
.1a2c1e	8f 1e 00 00	sta $00001e	                STA @lCURCOLOR      ; And save the new color combination
.1a2c22	e2 20		sep #$20	            SEP #$20
.1a2c24	68		pla		            PLA
.1a2c25	28		plp		                PLP
.1a2c26	60		rts		            RTS
.1a2c27					S_SETBGCOLOR
.1a2c27	08		php		                PHP
.1a2c28					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.1a2c28	c2 20		rep #$20	            REP #$20
.1a2c2a	f4 00 00	pea #$0000	            PEA #0
.1a2c2d	e2 20		sep #$20	            SEP #$20
.1a2c2f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2c32	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2c35	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.1a2c37	83 01		sta $01,s	                STA L_RED
.1a2c39	a9 2c		lda #$2c	                LDA #','
.1a2c3b	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2c3e	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2c41	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2c44	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.1a2c46	83 02		sta $02,s	                STA L_GREEN
.1a2c48	a9 2c		lda #$2c	                LDA #','
.1a2c4a	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2c4d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2c50	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2c53	a5 23		lda $0823	                LDA ARGUMENT1               ; And set the actual color
.1a2c55	8f 0d 00 af	sta $af000d	                STA @lBACKGROUND_COLOR_B
.1a2c59	a3 02		lda $02,s	                LDA L_GREEN
.1a2c5b	8f 0e 00 af	sta $af000e	                STA @lBACKGROUND_COLOR_G
.1a2c5f	a3 01		lda $01,s	                LDA L_RED
.1a2c61	8f 0f 00 af	sta $af000f	                STA @lBACKGROUND_COLOR_R
.1a2c65	c2 20		rep #$20	            REP #$20
.1a2c67	68		pla		            PLA
.1a2c68	28		plp		                PLP
.1a2c69	60		rts		            RTS
.1a2c6a					S_SETBORDER
.1a2c6a	08		php		                PHP
.1a2c6b					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.1a2c6b	c2 20		rep #$20	            REP #$20
.1a2c6d	f4 00 00	pea #$0000	            PEA #0
.1a2c70	e2 20		sep #$20	            SEP #$20
.1a2c72	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2c75	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a2c78	a5 23		lda $0823	                LDA ARGUMENT1
.1a2c7a	f0 16		beq $1a2c92	                BEQ hide_border
.1a2c7c	a9 01		lda #$01	                LDA #Border_Ctrl_Enable     ; Enable the border
.1a2c7e	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.1a2c82	a9 20		lda #$20	                LDA #BORDER_WIDTH           ; Set the border width
.1a2c84	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.1a2c88	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.1a2c8c	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2c90	80 0a		bra $1a2c9c	                BRA get_color
.1a2c92	a9 00		lda #$00	hide_border     LDA #0                      ; Hide the border
.1a2c94	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.1a2c98	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2c9c	a9 2c		lda #$2c	get_color       LDA #','
.1a2c9e	85 37		sta $0837	                STA TARGETTOK
.1a2ca0	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a2ca3	90 39		bcc $1a2cde	                BCC done                    ; No: we're done
.1a2ca5	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a2ca8	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2cab	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2cae	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.1a2cb0	83 01		sta $01,s	                STA L_RED
.1a2cb2	a9 2c		lda #$2c	                LDA #','
.1a2cb4	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2cb7	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2cba	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2cbd	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.1a2cbf	83 02		sta $02,s	                STA L_GREEN
.1a2cc1	a9 2c		lda #$2c	                LDA #','
.1a2cc3	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2cc6	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2cc9	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2ccc	a5 23		lda $0823	                LDA ARGUMENT1
.1a2cce	8f 05 00 af	sta $af0005	                STA @lBORDER_COLOR_B        ; Set the border color
.1a2cd2	a3 02		lda $02,s	                LDA L_GREEN
.1a2cd4	8f 06 00 af	sta $af0006	                STA @lBORDER_COLOR_G
.1a2cd8	a3 01		lda $01,s	                LDA L_RED
.1a2cda	8f 07 00 af	sta $af0007	                STA @lBORDER_COLOR_R
.1a2cde					done
.1a2cde	c2 20		rep #$20	            REP #$20
.1a2ce0	68		pla		            PLA
.1a2ce1	28		plp		                PLP
.1a2ce2	60		rts		            RTS
.1a2ce3					S_SETCOLOR
.1a2ce3	08		php		                PHP
.1a2ce4					locals
>0001					L_LUT           .byte ?
>0002					L_COLOR         .byte ?
>0003					L_RED           .byte ?
>0004					L_GREEN         .byte ?
>0005					L_BLUE          .byte ?
.1a2ce4	c2 20		rep #$20	            REP #$20
.1a2ce6	3b		tsc		            TSC
.1a2ce7	38		sec		            SEC
.1a2ce8	e9 05 00	sbc #$0005	            SBC #SIZE(locals)
.1a2ceb	1b		tcs		            TCS
.1a2cec	e2 20		sep #$20	            SEP #$20
.1a2cee	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2cf1	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2cf4	a5 23		lda $0823	                LDA ARGUMENT1
.1a2cf6	c9 0a		cmp #$0a	                CMP #10             ; And in range
.1a2cf8	90 1f		bcc $1a2d19	                BLT save_lut
.1a2cfa					bad_argument
.1a2cfa	08		php		            PHP
.1a2cfb	c2 20		rep #$20	            REP #$20
.1a2cfd	48		pha		            PHA
.1a2cfe	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2d01	5b		tcd		            TCD
.1a2d02	68		pla		            PLA
.1a2d03	28		plp		            PLP
.1a2d04	e2 20		sep #$20	            SEP #$20
.1a2d06	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a2d08	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2d0c	c2 20		rep #$20	            REP #$20
.1a2d0e	29 ff 00	and #$00ff	            AND #$00FF
.1a2d11	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2d14	e2 20		sep #$20	            SEP #$20
.1a2d16	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2d19	83 01		sta $01,s	save_lut        STA L_LUT           ; Save as LUT
.1a2d1b	a9 2c		lda #$2c	                LDA #','
.1a2d1d	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2d20	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2d23	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2d26	a5 23		lda $0823	                LDA ARGUMENT1
.1a2d28	83 02		sta $02,s	                STA L_COLOR         ; Save as COLOR
.1a2d2a	a9 2c		lda #$2c	                LDA #','
.1a2d2c	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2d2f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2d32	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2d35	a5 23		lda $0823	                LDA ARGUMENT1
.1a2d37	83 03		sta $03,s	                STA L_RED           ; Save as RED
.1a2d39	a9 2c		lda #$2c	                LDA #','
.1a2d3b	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2d3e	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2d41	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2d44	a5 23		lda $0823	                LDA ARGUMENT1
.1a2d46	83 04		sta $04,s	                STA L_GREEN         ; Save it as GREEN
.1a2d48	a9 2c		lda #$2c	                LDA #','
.1a2d4a	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2d4d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2d50	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2d53	a5 23		lda $0823	                LDA ARGUMENT1
.1a2d55	83 05		sta $05,s	                STA L_BLUE          ; Save it as BLUE
.1a2d57	a9 af		lda #$af	                LDA #`GRPH_LUT0_PTR ; Get the bank Vicky is in (should always be $AF)
.1a2d59	85 a0		sta $08a0	                STA MTEMPPTR+2      ; MTEMPPTR will be our pointer to the LUT entry
.1a2d5b	a3 01		lda $01,s	                LDA L_LUT           ; Compute the offset to the LUT address
.1a2d5d	0a		asl a		                ASL A
.1a2d5e	c2 20		rep #$20	            REP #$20
.1a2d60	29 ff 00	and #$00ff	                AND #$00FF
.1a2d63	aa		tax		                TAX                 ; Put it in X
.1a2d64	bf 9b 2d 1a	lda $1a2d9b,x	                LDA @llut_address,X ; Get the address of the LUT
.1a2d68	85 9e		sta $089e	                STA MTEMPPTR        ; Put it in MTEMPPTR
.1a2d6a	e2 20		sep #$20	            SEP #$20
.1a2d6c	a3 02		lda $02,s	                LDA L_COLOR         ; color index *= 4
.1a2d6e	c2 20		rep #$20	            REP #$20
.1a2d70	29 ff 00	and #$00ff	                AND #$00FF
.1a2d73	0a		asl a		                ASL A               ; Since each color has four bytes of data
.1a2d74	0a		asl a		                ASL A
.1a2d75	18		clc		                CLC                 ; Add the color offset to MTEMPPTR
.1a2d76	65 9e		adc $089e	                ADC MTEMPPTR
.1a2d78	85 9e		sta $089e	                STA MTEMPPTR
.1a2d7a	e2 20		sep #$20	            SEP #$20
.1a2d7c	a0 02 00	ldy #$0002	                LDY #GR_LUT_RED
.1a2d7f	a3 03		lda $03,s	                LDA L_RED
.1a2d81	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the red component to the color entry
.1a2d83	a0 01 00	ldy #$0001	                LDY #GR_LUT_GREEN
.1a2d86	a3 04		lda $04,s	                LDA L_GREEN
.1a2d88	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the green component to the color entry
.1a2d8a	a0 00 00	ldy #$0000	                LDY #GR_LUT_BLUE
.1a2d8d	a3 05		lda $05,s	                LDA L_BLUE
.1a2d8f	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the blue component to the color entry
.1a2d91					done
.1a2d91	c2 20		rep #$20	            REP #$20
.1a2d93	3b		tsc		            TSC
.1a2d94	18		clc		            CLC
.1a2d95	69 05 00	adc #$0005	            ADC #SIZE(locals)
.1a2d98	1b		tcs		            TCS
.1a2d99	28		plp		                PLP
.1a2d9a	60		rts		            RTS
>1a2d9b	00 20				lut_address     .word <>GRPH_LUT0_PTR
>1a2d9d	00 24				                .word <>GRPH_LUT1_PTR
>1a2d9f	00 28				                .word <>GRPH_LUT2_PTR
>1a2da1	00 2c				                .word <>GRPH_LUT3_PTR
>1a2da3	00 30				                .word <>GRPH_LUT4_PTR
>1a2da5	00 34				                .word <>GRPH_LUT5_PTR
>1a2da7	00 38				                .word <>GRPH_LUT6_PTR
>1a2da9	00 3c				                .word <>GRPH_LUT7_PTR
>1a2dab	40 1f				                .word <>FG_CHAR_LUT_PTR
>1a2dad	80 1f				                .word <>BG_CHAR_LUT_PTR
.1a2daf					S_GRAPHICS
.1a2daf	da		phx		                PHX
.1a2db0	5a		phy		                PHY
.1a2db1	08		php		                PHP
.1a2db2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2db5	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a2db8	c2 20		rep #$20	            REP #$20
.1a2dba	a5 23		lda $0823	                LDA ARGUMENT1               ; Check to see if we're setting mode to 800x600 or 400x300
.1a2dbc	89 00 01	bit #$0100	                BIT #$0100
.1a2dbf	d0 17		bne $1a2dd8	                BNE set_mode                ; Yes: go ahead and set it
.1a2dc1	af 00 00 af	lda $af0000	                LDA @l MASTER_CTRL_REG_L    ; Otherwise, check to see if we're already in 800x600 or 400x300
.1a2dc5	89 00 01	bit #$0100	                BIT #$0100
.1a2dc8	f0 0e		beq $1a2dd8	                BEQ set_mode                ; No: just go ahead and set the mode
.1a2dca	e2 20		sep #$20	            SEP #$20
.1a2dcc	a9 00		lda #$00	                LDA #0                      ; Yes: toggle back to 640x480...
.1a2dce	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.1a2dd2	a9 01		lda #$01	                LDA #1                      ; And back to 800x600....
.1a2dd4	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.1a2dd8					set_mode
.1a2dd8	c2 20		rep #$20	            REP #$20
.1a2dda	a5 23		lda $0823	                LDA ARGUMENT1
.1a2ddc	8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L    ; Set the graphics mode
.1a2de0	e2 20		sep #$20	            SEP #$20
.1a2de2	a5 24		lda $0824	                LDA ARGUMENT1+1             ; Get the screen size bits
.1a2de4	c2 20		rep #$20	            REP #$20
.1a2de6	29 03 00	and #$0003	                AND #$0003
.1a2de9	0a		asl a		                ASL A                       ; Multiply by two to get the index
.1a2dea	aa		tax		                TAX                         ; X is index into the size tables
.1a2deb	c2 20		rep #$20	            REP #$20
.1a2ded	bf 36 2e 1a	lda $1a2e36,x	                LDA gr_columns,X            ; Set the columns
.1a2df1	8f 10 f0 1a	sta $1af010	                STA @lGR_MAX_COLS
.1a2df5	bf 3e 2e 1a	lda $1a2e3e,x	                LDA gr_rows,X               ; Set the rows
.1a2df9	8f 12 f0 1a	sta $1af012	                STA @lGR_MAX_ROWS
.1a2dfd	af 10 f0 1a	lda $1af010	                LDA @lGR_MAX_COLS           ; Get the current columns
.1a2e01	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.1a2e05	af 12 f0 1a	lda $1af012	                LDA @lGR_MAX_ROWS           ; Get the current rows
.1a2e09	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B
.1a2e0d	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT             ; Multiply them to get the total pixels
.1a2e11	8f 14 f0 1a	sta $1af014	                STA @lGR_TOTAL_PIXELS
.1a2e15	e2 20		sep #$20	            SEP #$20
.1a2e17	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.1a2e1b	8f 16 f0 1a	sta $1af016	                STA @lGR_TOTAL_PIXELS+2
.1a2e1f	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2e23					reset_cursor
.1a2e23	c2 20		rep #$20	            REP #$20
.1a2e25	af 1a 00 00	lda $00001a	                LDA @lCURSORX
.1a2e29	aa		tax		                TAX
.1a2e2a	af 1c 00 00	lda $00001c	                LDA @lCURSORY
.1a2e2e	a8		tay		                TAY
.1a2e2f	20 20 00	jsr $1a0020	            JSR CURSORXY
.1a2e32	28		plp		                PLP
.1a2e33	7a		ply		                PLY
.1a2e34	fa		plx		                PLX
.1a2e35	60		rts		            RTS
>1a2e36	80 02 20 03 40 01 90 01		gr_columns      .word 640,800,320,400
>1a2e3e	e0 01 58 02 f0 00 2c 01		gr_rows         .word 480,600,240,300
>1a2e46	50 00 64 00 28 00 32 00		col_count       .word 80,100,40,50
>1a2e4e	3c 00 4b 00 1e 00 32 00		row_count       .word 60,75,30,50
>1a2e56	48 00 5c 00 20 00 2a 00		colb_count      .word 72,92,32,42
>1a2e5e	34 00 43 00 16 00 34 00		rowb_count      .word 52,67,22,52
.1a2e66					BITMAP_SRAM
.1a2e66	da		phx		                PHX
.1a2e67	08		php		                PHP
.1a2e68	c2 30		rep #$30	            REP #$30
.1a2e6a	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2e6d	b0 1c		bcs $1a2e8b	                BGE range_err           ; Make sure it's within range
.1a2e6f	0a		asl a		                ASL A
.1a2e70	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.1a2e71	aa		tax		                TAX
.1a2e72	bf 00 f0 1a	lda $1af000,x	                LDA @l GR_BM0_ADDR,X    ; Get the low 16-bits of the address
.1a2e76	85 9e		sta $089e	                STA MTEMPPTR
.1a2e78	bf 02 f0 1a	lda $1af002,x	                LDA @l GR_BM0_ADDR+2,X  ; Get the high bits of the address
.1a2e7c	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a2e7e	c9 f0 00	cmp #$00f0	                CMP #MAX_VRAM_CPU       ; Check to make sure address is within VRAM
.1a2e81	b0 08		bcs $1a2e8b	                BGE range_err
.1a2e83	c9 b0 00	cmp #$00b0	                CMP #MIN_VRAM_CPU
.1a2e86	90 03		bcc $1a2e8b	                BLT range_err
.1a2e88	28		plp		                PLP
.1a2e89	fa		plx		                PLX
.1a2e8a	60		rts		            RTS
.1a2e8b					range_err
.1a2e8b	08		php		            PHP
.1a2e8c	c2 20		rep #$20	            REP #$20
.1a2e8e	48		pha		            PHA
.1a2e8f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2e92	5b		tcd		            TCD
.1a2e93	68		pla		            PLA
.1a2e94	28		plp		            PLP
.1a2e95	e2 20		sep #$20	            SEP #$20
.1a2e97	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2e99	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2e9d	c2 20		rep #$20	            REP #$20
.1a2e9f	29 ff 00	and #$00ff	            AND #$00FF
.1a2ea2	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2ea5	e2 20		sep #$20	            SEP #$20
.1a2ea7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2eaa					BITMAP_VRAM
.1a2eaa	da		phx		                PHX
.1a2eab	08		php		                PHP
.1a2eac	c2 30		rep #$30	            REP #$30
.1a2eae	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2eb1	b0 17		bcs $1a2eca	                BGE range_err           ; Make sure it's within range
.1a2eb3	0a		asl a		                ASL A
.1a2eb4	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.1a2eb5	aa		tax		                TAX
.1a2eb6	bf 08 f0 1a	lda $1af008,x	                LDA @l GR_BM0_VRAM,X    ; Get the low 16-bits of the address
.1a2eba	85 9e		sta $089e	                STA MTEMPPTR
.1a2ebc	bf 0a f0 1a	lda $1af00a,x	                LDA @l GR_BM0_VRAM+2,X  ; Get the high bits of the address
.1a2ec0	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a2ec2	c9 40 00	cmp #$0040	                CMP #MAX_VRAM_VICKY     ; Check to make sure the address is from $00:0000 - $3F:FFFF
.1a2ec5	b0 03		bcs $1a2eca	                BGE range_err           ; If not, throw a range error
.1a2ec7	28		plp		                PLP
.1a2ec8	fa		plx		                PLX
.1a2ec9	60		rts		            RTS
.1a2eca					range_err
.1a2eca	08		php		            PHP
.1a2ecb	c2 20		rep #$20	            REP #$20
.1a2ecd	48		pha		            PHA
.1a2ece	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2ed1	5b		tcd		            TCD
.1a2ed2	68		pla		            PLA
.1a2ed3	28		plp		            PLP
.1a2ed4	e2 20		sep #$20	            SEP #$20
.1a2ed6	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2ed8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2edc	c2 20		rep #$20	            REP #$20
.1a2ede	29 ff 00	and #$00ff	            AND #$00FF
.1a2ee1	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2ee4	e2 20		sep #$20	            SEP #$20
.1a2ee6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2ee9					S_BITMAP
.1a2ee9	08		php		                PHP
.1a2eea					locals
>0001					L_PLANE         .word ?
>0003					L_VISIBLE       .byte ?
>0004					L_ADDRESS       .dword ?
.1a2eea	c2 30		rep #$30	            REP #$30
.1a2eec	3b		tsc		                TSC                         ; Allocate space for the locals on the stack
.1a2eed	38		sec		                SEC
.1a2eee	e9 07 00	sbc #$0007	                SBC #SIZE(locals)
.1a2ef1	1b		tcs		                TCS
.1a2ef2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2ef5	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2ef8	c2 20		rep #$20	            REP #$20
.1a2efa	a5 23		lda $0823	                LDA ARGUMENT1               ; Make sure it's in range
.1a2efc	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2eff	b0 59		bcs $1a2f5a	                BGE range_err               ; If not, throw an error
.1a2f01	83 01		sta $01,s	                STA L_PLANE                 ; If so, save it to MARG1
.1a2f03	e2 20		sep #$20	            SEP #$20
.1a2f05	a9 2c		lda #$2c	                LDA #','
.1a2f07	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2f0a	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2f0d	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2f10	a5 23		lda $0823	                LDA ARGUMENT1
.1a2f12	83 03		sta $03,s	                STA L_VISIBLE
.1a2f14	a9 2c		lda #$2c	                LDA #','
.1a2f16	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a2f19	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2f1c	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2f1f	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the number back
.1a2f21	0a		asl a		                ASL A                       ; Multiply by 8 to get the offset to the registers
.1a2f22	0a		asl a		                ASL A
.1a2f23	0a		asl a		                ASL A
.1a2f24	aa		tax		                TAX                         ; And save that offset to X
.1a2f25	a3 03		lda $03,s	                LDA L_VISIBLE               ; Check the visible flag
.1a2f27	d0 05		bne $1a2f2e	                BNE is_visible              ; If <> 0, it's visible
.1a2f29	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the LUT #
.1a2f2b	0a		asl a		                ASL A                       ; Shift it into position for the register
.1a2f2c	80 04		bra $1a2f32	                BRA wr_bm_reg               ; And go to write it
.1a2f2e	a5 23		lda $0823	is_visible      LDA ARGUMENT1               ; Get the LUT #
.1a2f30	38		sec		                SEC
.1a2f31	2a		rol a		                ROL A                       ; And shift it into position, and set enable bit
.1a2f32	9f 00 01 af	sta $af0100,x	wr_bm_reg       STA @l BM0_CONTROL_REG,X    ; Write to the bitmap control register
.1a2f36	c2 20		rep #$20	            REP #$20
.1a2f38	a9 2c 00	lda #$002c	                LDA #','
.1a2f3b	85 37		sta $0837	                STA TARGETTOK
.1a2f3d	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a2f40	b0 37		bcs $1a2f79	                BCS get_address             ; Yes: parse the address
.1a2f42	c2 20		rep #$20	            REP #$20
.1a2f44	08		php		            PHP
.1a2f45	c2 20		rep #$20	            REP #$20
.1a2f47	a9 00 00	lda #$0000	            LDA #<>VRAM
.1a2f4a	85 23		sta $0823	            STA ARGUMENT1
.1a2f4c	a9 b0 00	lda #$00b0	            LDA #(VRAM >> 16)
.1a2f4f	85 25		sta $0825	            STA ARGUMENT1+2
.1a2f51	e2 20		sep #$20	            SEP #$20
.1a2f53	a9 00		lda #$00	            LDA #TYPE_INTEGER
.1a2f55	85 27		sta $0827	            STA ARGUMENT1+4
.1a2f57	28		plp		            PLP
.1a2f58	80 27		bra $1a2f81	                BRA set_address
.1a2f5a					range_err
.1a2f5a	08		php		            PHP
.1a2f5b	c2 20		rep #$20	            REP #$20
.1a2f5d	48		pha		            PHA
.1a2f5e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2f61	5b		tcd		            TCD
.1a2f62	68		pla		            PLA
.1a2f63	28		plp		            PLP
.1a2f64	e2 20		sep #$20	            SEP #$20
.1a2f66	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2f68	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2f6c	c2 20		rep #$20	            REP #$20
.1a2f6e	29 ff 00	and #$00ff	            AND #$00FF
.1a2f71	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2f74	e2 20		sep #$20	            SEP #$20
.1a2f76	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2f79					get_address
.1a2f79	c2 20		rep #$20	            REP #$20
.1a2f7b	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a2f7e	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2f81					set_address
.1a2f81	c2 20		rep #$20	            REP #$20
.1a2f83	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.1a2f85	0a		asl a		                ASL A                       ; Multiply by four to get the offset to the address variable
.1a2f86	0a		asl a		                ASL A
.1a2f87	aa		tax		                TAX                         ; And put it in X
.1a2f88	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the CPU-space address
.1a2f8a	9f 00 f0 1a	sta $1af000,x	                STA @l GR_BM0_ADDR,X        ; And save it to the correct GR_BM?_ADDR variable
.1a2f8e	9f 08 f0 1a	sta $1af008,x	                STA @l GR_BM0_VRAM,X
.1a2f92	83 04		sta $04,s	                STA L_ADDRESS               ; And L_ADDRESS, temporarily
.1a2f94	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a2f96	9f 02 f0 1a	sta $1af002,x	                STA @l GR_BM0_ADDR+2,X
.1a2f9a	38		sec		                SEC
.1a2f9b	e9 b0 00	sbc #$00b0	                SBC #`VRAM                  ; Rebase the upper half of the address to Vicky memory space
.1a2f9e	9f 0a f0 1a	sta $1af00a,x	                STA @l GR_BM0_VRAM+2,X
.1a2fa2	83 06		sta $06,s	                STA L_ADDRESS+2             ; And to L_ADDRESS
.1a2fa4	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.1a2fa6	0a		asl a		                ASL A                       ; Multiply by eight to get the offset to the registers
.1a2fa7	0a		asl a		                ASL A
.1a2fa8	0a		asl a		                ASL A
.1a2fa9	aa		tax		                TAX                         ; And put it in X
.1a2faa	e2 20		sep #$20	            SEP #$20
.1a2fac	a3 04		lda $04,s	                LDA L_ADDRESS               ; Get the address in Vicky space...
.1a2fae	9f 01 01 af	sta $af0101,x	                STA @l BM0_START_ADDY_L,X   ; Save it to the Vicky registers
.1a2fb2	a3 05		lda $05,s	                LDA L_ADDRESS+1
.1a2fb4	9f 02 01 af	sta $af0102,x	                STA @l BM0_START_ADDY_M,X
.1a2fb8	a3 06		lda $06,s	                LDA L_ADDRESS+2
.1a2fba	9f 03 01 af	sta $af0103,x	                STA @l BM0_START_ADDY_H,X
.1a2fbe	a9 00		lda #$00	                LDA #0                      ; Default offset to (0, 0)
.1a2fc0	9f 04 01 af	sta $af0104,x	                STA @l BM0_X_OFFSET,X
.1a2fc4	9f 05 01 af	sta $af0105,x	                STA @l BM0_Y_OFFSET,X
.1a2fc8	c2 30		rep #$30	            REP #$30
.1a2fca	3b		tsc		                TSC                         ; Remove the space for the locals from the stack
.1a2fcb	18		clc		                CLC
.1a2fcc	69 07 00	adc #$0007	                ADC #SIZE(locals)
.1a2fcf	1b		tcs		                TCS
.1a2fd0	28		plp		                PLP
.1a2fd1	60		rts		            RTS
.1a2fd2					bad_address
.1a2fd2	08		php		            PHP
.1a2fd3	c2 20		rep #$20	            REP #$20
.1a2fd5	48		pha		            PHA
.1a2fd6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2fd9	5b		tcd		            TCD
.1a2fda	68		pla		            PLA
.1a2fdb	28		plp		            PLP
.1a2fdc	e2 20		sep #$20	            SEP #$20
.1a2fde	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a2fe0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2fe4	c2 20		rep #$20	            REP #$20
.1a2fe6	29 ff 00	and #$00ff	            AND #$00FF
.1a2fe9	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a2fec	e2 20		sep #$20	            SEP #$20
.1a2fee	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2ff1					S_CLRBITMAP
.1a2ff1	08		php		                PHP
.1a2ff2	c2 20		rep #$20	            REP #$20
.1a2ff4	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a2ff7	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a2ffa	a5 23		lda $0823	                LDA ARGUMENT1
.1a2ffc	20 aa 2e	jsr $1a2eaa	            JSR BITMAP_VRAM
.1a2fff	c2 20		rep #$20	            REP #$20
.1a3001	a5 9e		lda $089e	                LDA MTEMPPTR                ; Set the start address and the # of pixels to write
.1a3003	8f 05 04 af	sta $af0405	                STA @lVDMA_DST_ADDY_L
.1a3007	af 14 f0 1a	lda $1af014	                LDA @lGR_TOTAL_PIXELS       ; Set the size
.1a300b	8f 08 04 af	sta $af0408	                STA @lVDMA_SIZE_L
.1a300f	e2 20		sep #$20	            SEP #$20
.1a3011	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.1a3013	8f 07 04 af	sta $af0407	                STA @lVDMA_DST_ADDY_H
.1a3017	af 16 f0 1a	lda $1af016	                LDA @lGR_TOTAL_PIXELS+2
.1a301b	8f 0a 04 af	sta $af040a	                STA @lVDMA_SIZE_H
.1a301f	a9 00		lda #$00	                LDA #0                      ; Set the color to write
.1a3021	8f 01 04 af	sta $af0401	                STA @lVDMA_BYTE_2_WRITE
.1a3025	a9 85		lda #$85	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_Start_TRF
.1a3027	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.1a302b	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.1a302f	30 fa		bmi $1a302b	                BMI wait
.1a3031	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.1a3033	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.1a3037	28		plp		done            PLP
.1a3038	60		rts		            RTS
=$000855				COLOR = MARG1
=$000859				X0 = MARG2
=$00085d				Y0 = MARG3
=$000861				X1 = MARG4
=$000865				Y1 = MARG5
=$000869				DX = MARG6
=$00086d				DY = MARG7
=$000871				ERR = MARG8
=$000875				ERR2 = MARG9
>08dd					SX      .word ?
>08df					SY      .word ?
.1a3039					PLOT
.1a3039	08		php		                PHP
.1a303a	c2 20		rep #$20	            REP #$20
.1a303c	a5 59		lda $0859	                LDA X0                      ; Get the column
.1a303e	cf 10 f0 1a	cmp $1af010	                CMP @l GR_MAX_COLS          ; Make sure it's in range for this graphics mode
.1a3042	90 1f		bcc $1a3063	                BLT chk_row                 ; If so: check the row
.1a3044					range_err
.1a3044	08		php		            PHP
.1a3045	c2 20		rep #$20	            REP #$20
.1a3047	48		pha		            PHA
.1a3048	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a304b	5b		tcd		            TCD
.1a304c	68		pla		            PLA
.1a304d	28		plp		            PLP
.1a304e	e2 20		sep #$20	            SEP #$20
.1a3050	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3052	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3056	c2 20		rep #$20	            REP #$20
.1a3058	29 ff 00	and #$00ff	            AND #$00FF
.1a305b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a305e	e2 20		sep #$20	            SEP #$20
.1a3060	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3063					chk_row
.1a3063	c2 30		rep #$30	            REP #$30
.1a3065	a5 5d		lda $085d	                LDA Y0                      ; Get the row
.1a3067	cf 12 f0 1a	cmp $1af012	                CMP @l GR_MAX_ROWS          ; Make sure it's in range for this graphics mode
.1a306b	b0 d7		bcs $1a3044	                BGE range_err               ; If not: throw an error
.1a306d	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.1a3071	af 10 f0 1a	lda $1af010	                LDA @lGR_MAX_COLS
.1a3075	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B          ; Multiply by the number of columns in the pixmap
.1a3079	18		clc		                CLC                         ; Add the column
.1a307a	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT
.1a307e	65 59		adc $0859	                ADC X0
.1a3080	85 0c		sta $080c	                STA SCRATCH
.1a3082	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.1a3086	69 00 00	adc #$0000	                ADC #0
.1a3089	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH is offset of pixel in the pixmap
.1a308b	18		clc		                CLC                         ; Add the address of the first pixel
.1a308c	a5 0c		lda $080c	                LDA SCRATCH
.1a308e	65 9e		adc $089e	                ADC MTEMPPTR
.1a3090	85 0c		sta $080c	                STA SCRATCH
.1a3092	a5 0e		lda $080e	                LDA SCRATCH+2
.1a3094	65 a0		adc $08a0	                ADC MTEMPPTR+2
.1a3096	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH := pixmap + pixel offset
.1a3098	e2 20		sep #$20	            SEP #$20
.1a309a	a5 55		lda $0855	                LDA COLOR                   ; Get the color
.1a309c	87 0c		sta [$080c]	                STA [SCRATCH]               ; And write the color to the pixel
.1a309e	28		plp		done            PLP
.1a309f	60		rts		            RTS
.1a30a0					LINE
.1a30a0	c2 20		rep #$20	            REP #$20
.1a30a2	a9 01 00	lda #$0001	                LDA #1                      ; Assume SX = 1
.1a30a5	85 dd		sta $08dd	                STA SX
.1a30a7	38		sec		                SEC                         ; DX := ABS(X1 - X0)
.1a30a8	a5 61		lda $0861	                LDA X1
.1a30aa	e5 59		sbc $0859	                SBC X0
.1a30ac	85 69		sta $0869	                STA DX
.1a30ae	10 0b		bpl $1a30bb	                BPL abs_Y                   ; If DX < 0 {
.1a30b0	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DX := -DX
.1a30b3	1a		inc a		                INC A
.1a30b4	85 69		sta $0869	                STA DX
.1a30b6	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SX := -1
.1a30b9	85 dd		sta $08dd	                STA SX                      ; }
.1a30bb	a9 01 00	lda #$0001	abs_Y           LDA #1                      ; Assume SY = 1
.1a30be	85 df		sta $08df	                STA SY
.1a30c0	38		sec		                SEC                         ; DY := ABS(Y1 - Y0)
.1a30c1	a5 65		lda $0865	                LDA Y1
.1a30c3	e5 5d		sbc $085d	                SBC Y0
.1a30c5	85 6d		sta $086d	                STA DY
.1a30c7	10 0b		bpl $1a30d4	                BPL calc_ERR                ; If DY < 0 {
.1a30c9	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DY := -DY
.1a30cc	1a		inc a		                INC A
.1a30cd	85 6d		sta $086d	                STA DY
.1a30cf	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SY := -1
.1a30d2	85 df		sta $08df	                STA SY                      ; }
.1a30d4	a5 6d		lda $086d	calc_ERR        LDA DY
.1a30d6	c9 01 00	cmp #$0001	                CMP #1                      ; Is DY = 1?
.1a30d9	d0 19		bne $1a30f4	                BNE cmp_dx                  ; No: compare to DX
.1a30db	a5 69		lda $0869	                LDA DX
.1a30dd	c9 01 00	cmp #$0001	                CMP #1                      ; Is DX = 1 too?
.1a30e0	d0 10		bne $1a30f2	                BNE cmp_dy_dx               ; No: treat normally
.1a30e2	20 39 30	jsr $1a3039	            JSR PLOT
.1a30e5	a5 61		lda $0861	                LDA X1
.1a30e7	85 59		sta $0859	                STA X0
.1a30e9	a5 65		lda $0865	                LDA Y1
.1a30eb	85 5d		sta $085d	                STA Y0
.1a30ed	20 39 30	jsr $1a3039	            JSR PLOT
.1a30f0	80 5b		bra $1a314d	                BRA done
.1a30f2	a5 6d		lda $086d	cmp_dy_dx       LDA DY
.1a30f4	c5 69		cmp $0869	cmp_dx          CMP DX                      ; (DY < DX)
.1a30f6	b0 04		bcs $1a30fc	                BGE else
.1a30f8	a5 69		lda $0869	                LDA DX                      ; TRUE CASE: ERR := DX
.1a30fa	80 06		bra $1a3102	                BRA shiftERR
.1a30fc	a5 6d		lda $086d	else            LDA DY                      ; FALSE CASE: ERR := -DY
.1a30fe	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a3101	1a		inc a		                INC A
.1a3102	48		pha		shiftERR        PHA
.1a3103	0a		asl a		                ASL A
.1a3104	68		pla		                PLA
.1a3105	6a		ror a		                ROR A                       ; ERR := ERR / 2
.1a3106	85 71		sta $0871	                STA ERR
.1a3108					loop
.1a3108	20 39 30	jsr $1a3039	            JSR PLOT
.1a310b	a5 59		lda $0859	                LDA X0                      ; break if X0=X1 and Y0=Y1
.1a310d	c5 61		cmp $0861	                CMP X1
.1a310f	d0 06		bne $1a3117	                BNE calc_ERR2
.1a3111	a5 5d		lda $085d	                LDA Y0
.1a3113	c5 65		cmp $0865	                CMP Y1
.1a3115	f0 36		beq $1a314d	                BEQ done
.1a3117	a5 71		lda $0871	calc_ERR2       LDA ERR                     ; ERR2 := ERR
.1a3119	85 75		sta $0875	                STA ERR2
.1a311b	a5 69		lda $0869	                LDA DX                      ; if (ERR2 > -DX) {
.1a311d	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a3120	1a		inc a		                INC A
.1a3121	c5 75		cmp $0875	                CMP ERR2
.1a3123	10 10		bpl $1a3135	                BPL check_DY
.1a3125	f0 0e		beq $1a3135	                BEQ check_DY
.1a3127	38		sec		                SEC                         ; ERR -= DY
.1a3128	a5 71		lda $0871	                LDA ERR
.1a312a	e5 6d		sbc $086d	                SBC DY
.1a312c	85 71		sta $0871	                STA ERR
.1a312e	18		clc		                CLC                         ; X0 += SX
.1a312f	a5 59		lda $0859	                LDA X0
.1a3131	65 dd		adc $08dd	                ADC SX
.1a3133	85 59		sta $0859	                STA X0                      ; }
.1a3135	a5 75		lda $0875	check_DY        LDA ERR2                    ; if (ERR2 < DY) {
.1a3137	c5 6d		cmp $086d	                CMP DY
.1a3139	10 cd		bpl $1a3108	                BPL loop
.1a313b	f0 cb		beq $1a3108	                BEQ loop
.1a313d	18		clc		                CLC                         ; ERR += DX
.1a313e	a5 71		lda $0871	                LDA ERR
.1a3140	65 69		adc $0869	                ADC DX
.1a3142	85 71		sta $0871	                STA ERR
.1a3144	18		clc		                CLC                         ; Y0 += SY
.1a3145	a5 5d		lda $085d	                LDA Y0
.1a3147	65 df		adc $08df	                ADC SY
.1a3149	85 5d		sta $085d	                STA Y0                      ; }
.1a314b	80 bb		bra $1a3108	                BRA loop                    ; }
.1a314d					done
.1a314d	60		rts		            RTS
.1a314e					S_PLOT
.1a314e	08		php		                PHP
.1a314f					locals
>0001					L_PLANE         .word ?
>0003					L_X             .word ?
>0005					L_Y             .word ?
.1a314f	c2 20		rep #$20	            REP #$20
.1a3151	3b		tsc		            TSC
.1a3152	38		sec		            SEC
.1a3153	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a3156	1b		tcs		            TCS
.1a3157	08		php		            PHP
.1a3158	c2 20		rep #$20	            REP #$20
.1a315a	48		pha		            PHA
.1a315b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a315e	5b		tcd		            TCD
.1a315f	68		pla		            PLA
.1a3160	28		plp		            PLP
.1a3161	08		php		            PHP
.1a3162	e2 20		sep #$20	            SEP #$20
.1a3164	48		pha		            PHA
.1a3165	a9 00		lda #$00	            LDA #0
.1a3167	48		pha		            PHA
.1a3168	ab		plb		            PLB
.1a3169	68		pla		            PLA
.1a316a	28		plp		            PLP
.1a316b	c2 30		rep #$30	            REP #$30
.1a316d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3170	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a3173	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a3175	a9 2c 00	lda #$002c	                LDA #','
.1a3178	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a317b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a317e	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3181	a5 23		lda $0823	                LDA ARGUMENT1
.1a3183	83 03		sta $03,s	                STA L_X                     ; Save it to X
.1a3185	a9 2c 00	lda #$002c	                LDA #','
.1a3188	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a318b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a318e	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3191	a5 23		lda $0823	                LDA ARGUMENT1
.1a3193	83 05		sta $05,s	                STA L_Y                     ; Save it to Y
.1a3195	a9 2c 00	lda #$002c	                LDA #','
.1a3198	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a319b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a319e	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a31a1	a5 23		lda $0823	                LDA ARGUMENT1
.1a31a3	85 55		sta $0855	                STA COLOR                   ; Save it to MARG1
.1a31a5	a3 03		lda $03,s	                LDA L_X                     ; Set the (X0, Y0) coordinates
.1a31a7	85 59		sta $0859	                STA X0
.1a31a9	a3 05		lda $05,s	                LDA L_Y
.1a31ab	85 5d		sta $085d	                STA Y0
.1a31ad	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a31af	20 66 2e	jsr $1a2e66	            JSR BITMAP_SRAM
.1a31b2	20 39 30	jsr $1a3039	            JSR PLOT
.1a31b5	c2 20		rep #$20	            REP #$20
.1a31b7	3b		tsc		            TSC
.1a31b8	18		clc		            CLC
.1a31b9	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a31bc	1b		tcs		            TCS
.1a31bd	28		plp		                PLP
.1a31be	60		rts		            RTS
.1a31bf					S_LINE
.1a31bf	08		php		                PHP
.1a31c0					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
.1a31c0	c2 20		rep #$20	            REP #$20
.1a31c2	3b		tsc		            TSC
.1a31c3	38		sec		            SEC
.1a31c4	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.1a31c7	1b		tcs		            TCS
.1a31c8	08		php		            PHP
.1a31c9	c2 20		rep #$20	            REP #$20
.1a31cb	48		pha		            PHA
.1a31cc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a31cf	5b		tcd		            TCD
.1a31d0	68		pla		            PLA
.1a31d1	28		plp		            PLP
.1a31d2	08		php		            PHP
.1a31d3	e2 20		sep #$20	            SEP #$20
.1a31d5	48		pha		            PHA
.1a31d6	a9 00		lda #$00	            LDA #0
.1a31d8	48		pha		            PHA
.1a31d9	ab		plb		            PLB
.1a31da	68		pla		            PLA
.1a31db	28		plp		            PLP
.1a31dc	c2 30		rep #$30	            REP #$30
.1a31de	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a31e1	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a31e4	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a31e6	a9 2c 00	lda #$002c	                LDA #','
.1a31e9	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a31ec	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a31ef	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a31f2	a5 23		lda $0823	                LDA ARGUMENT1
.1a31f4	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.1a31f6	a9 2c 00	lda #$002c	                LDA #','
.1a31f9	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a31fc	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a31ff	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3202	a5 23		lda $0823	                LDA ARGUMENT1
.1a3204	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.1a3206	a9 2c 00	lda #$002c	                LDA #','
.1a3209	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a320c	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a320f	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3212	a5 23		lda $0823	                LDA ARGUMENT1
.1a3214	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.1a3216	a9 2c 00	lda #$002c	                LDA #','
.1a3219	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a321c	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a321f	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3222	a5 23		lda $0823	                LDA ARGUMENT1
.1a3224	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.1a3226	a9 2c 00	lda #$002c	                LDA #','
.1a3229	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a322c	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a322f	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a3232	a5 23		lda $0823	                LDA ARGUMENT1
.1a3234	85 55		sta $0855	                STA COLOR                   ; Save it to COLOR
.1a3236	a3 03		lda $03,s	                LDA L_X0                    ; Set the (X0, Y0) coordinates
.1a3238	85 59		sta $0859	                STA X0
.1a323a	a3 05		lda $05,s	                LDA L_Y0
.1a323c	85 5d		sta $085d	                STA Y0
.1a323e	a3 07		lda $07,s	                LDA L_X1                    ; Set the (X1, Y1) coordinates
.1a3240	85 61		sta $0861	                STA X1
.1a3242	a3 09		lda $09,s	                LDA L_Y1
.1a3244	85 65		sta $0865	                STA Y1
.1a3246	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a3248	20 66 2e	jsr $1a2e66	            JSR BITMAP_SRAM
.1a324b	20 a0 30	jsr $1a30a0	            JSR LINE
.1a324e					done
.1a324e	c2 20		rep #$20	            REP #$20
.1a3250	3b		tsc		            TSC
.1a3251	18		clc		            CLC
.1a3252	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.1a3255	1b		tcs		            TCS
.1a3256	28		plp		                PLP
.1a3257	60		rts		            RTS
.1a3258					S_FILL
.1a3258	08		php		                PHP
.1a3259					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
>000b					L_COLOR         .word ?
.1a3259	c2 20		rep #$20	            REP #$20
.1a325b	3b		tsc		            TSC
.1a325c	38		sec		            SEC
.1a325d	e9 0c 00	sbc #$000c	            SBC #SIZE(locals)
.1a3260	1b		tcs		            TCS
.1a3261	08		php		            PHP
.1a3262	c2 20		rep #$20	            REP #$20
.1a3264	48		pha		            PHA
.1a3265	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3268	5b		tcd		            TCD
.1a3269	68		pla		            PLA
.1a326a	28		plp		            PLP
.1a326b	08		php		            PHP
.1a326c	e2 20		sep #$20	            SEP #$20
.1a326e	48		pha		            PHA
.1a326f	a9 00		lda #$00	            LDA #0
.1a3271	48		pha		            PHA
.1a3272	ab		plb		            PLB
.1a3273	68		pla		            PLA
.1a3274	28		plp		            PLP
.1a3275	c2 30		rep #$30	            REP #$30
.1a3277	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a327a	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a327d	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a327f	a9 2c 00	lda #$002c	                LDA #','
.1a3282	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3285	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3288	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a328b	a5 23		lda $0823	                LDA ARGUMENT1
.1a328d	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.1a328f	a9 2c 00	lda #$002c	                LDA #','
.1a3292	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3295	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3298	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a329b	a5 23		lda $0823	                LDA ARGUMENT1
.1a329d	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.1a329f	a9 2c 00	lda #$002c	                LDA #','
.1a32a2	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a32a5	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a32a8	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a32ab	a5 23		lda $0823	                LDA ARGUMENT1
.1a32ad	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.1a32af	a9 2c 00	lda #$002c	                LDA #','
.1a32b2	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a32b5	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a32b8	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a32bb	a5 23		lda $0823	                LDA ARGUMENT1
.1a32bd	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.1a32bf	a9 2c 00	lda #$002c	                LDA #','
.1a32c2	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a32c5	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a32c8	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a32cb	a5 23		lda $0823	                LDA ARGUMENT1
.1a32cd	83 0b		sta $0b,s	                STA L_COLOR                 ; Save it to COLOR
.1a32cf	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a32d1	20 aa 2e	jsr $1a2eaa	            JSR BITMAP_VRAM
.1a32d4	a9 07 00	lda #$0007	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_1D_2D
.1a32d7	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a32db	c2 20		rep #$20	            REP #$20
.1a32dd	a3 05		lda $05,s	                LDA L_Y0                    ; Get the row
.1a32df	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a32e3	af 10 f0 1a	lda $1af010	                LDA @l GR_MAX_COLS
.1a32e7	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B         ; Multiply by the number of columns in the pixmap
.1a32eb	18		clc		                CLC                         ; Add the column
.1a32ec	af 04 01 00	lda $000104	                LDA @l M0_RESULT
.1a32f0	63 03		adc $03,s	                ADC L_X0
.1a32f2	85 0c		sta $080c	                STA SCRATCH
.1a32f4	e2 20		sep #$20	            SEP #$20
.1a32f6	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.1a32fa	69 00		adc #$00	                ADC #0
.1a32fc	85 0e		sta $080e	                STA SCRATCH+2
.1a32fe	c2 20		rep #$20	            REP #$20
.1a3300	18		clc		                CLC                         ; Set the destination address
.1a3301	a5 9e		lda $089e	                LDA MTEMPPTR
.1a3303	65 0c		adc $080c	                ADC SCRATCH
.1a3305	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.1a3309	e2 20		sep #$20	            SEP #$20
.1a330b	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.1a330d	65 0e		adc $080e	                ADC SCRATCH+2
.1a330f	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H
.1a3313	c2 20		rep #$20	            REP #$20
.1a3315	38		sec		                SEC                         ; Set the width of the FILL operation
.1a3316	a3 07		lda $07,s	                LDA L_X1
.1a3318	e3 03		sbc $03,s	                SBC L_X0
.1a331a	85 0c		sta $080c	                STA SCRATCH
.1a331c	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a3320	38		sec		                SEC
.1a3321	af 10 f0 1a	lda $1af010	                LDA @l GR_MAX_COLS
.1a3325	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L    ; And the destination stride
.1a3329	38		sec		                SEC                         ; Set the height of the FILL operation
.1a332a	a3 09		lda $09,s	                LDA L_Y1
.1a332c	e3 05		sbc $05,s	                SBC L_Y0
.1a332e	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a3332	e2 20		sep #$20	            SEP #$20
.1a3334	a3 0b		lda $0b,s	                LDA L_COLOR                 ; Set the color to write
.1a3336	8f 01 04 af	sta $af0401	                STA @l VDMA_BYTE_2_WRITE
.1a333a	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.1a333e	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF
.1a3340	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3344	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.1a3348	30 fa		bmi $1a3344	                BMI wait
.1a334a	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.1a334c	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3350					done
.1a3350	c2 20		rep #$20	            REP #$20
.1a3352	3b		tsc		            TSC
.1a3353	18		clc		            CLC
.1a3354	69 0c 00	adc #$000c	            ADC #SIZE(locals)
.1a3357	1b		tcs		            TCS
.1a3358	28		plp		                PLP
.1a3359	60		rts		            RTS
.1a335a					SPADDR
.1a335a	08		php		                PHP
.1a335b	c2 20		rep #$20	            REP #$20
.1a335d	c9 40 00	cmp #$0040	                CMP #SP_MAX
.1a3360	b0 13		bcs $1a3375	                BGE error
.1a3362	0a		asl a		                ASL A                       ; Multiply it by 8 (the size of s sprite block)
.1a3363	0a		asl a		                ASL A
.1a3364	0a		asl a		                ASL A
.1a3365	18		clc		                CLC                         ; Add it to the address of the first
.1a3366	69 00 0c	adc #$0c00	                ADC #<>SP00_CONTROL_REG     ; sprite block
.1a3369	85 9e		sta $089e	                STA MTEMPPTR
.1a336b	a9 af 00	lda #$00af	                LDA #`SP00_CONTROL_REG
.1a336e	69 00 00	adc #$0000	                ADC #0
.1a3371	85 a0		sta $08a0	                STA MTEMPPTR+2              ; And save that to MTEMPPTR
.1a3373	28		plp		                PLP
.1a3374	60		rts		            RTS
.1a3375					error
.1a3375	08		php		            PHP
.1a3376	c2 20		rep #$20	            REP #$20
.1a3378	48		pha		            PHA
.1a3379	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a337c	5b		tcd		            TCD
.1a337d	68		pla		            PLA
.1a337e	28		plp		            PLP
.1a337f	e2 20		sep #$20	            SEP #$20
.1a3381	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3383	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3387	c2 20		rep #$20	            REP #$20
.1a3389	29 ff 00	and #$00ff	            AND #$00FF
.1a338c	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a338f	e2 20		sep #$20	            SEP #$20
.1a3391	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3394					S_SPRITE
.1a3394	08		php		                PHP
.1a3395					locals
>0001					L_SPRITE        .word ?
>0003					L_LUT           .byte ?
.1a3395	c2 20		rep #$20	            REP #$20
.1a3397	3b		tsc		            TSC
.1a3398	38		sec		            SEC
.1a3399	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.1a339c	1b		tcs		            TCS
.1a339d	c2 30		rep #$30	            REP #$30
.1a339f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a33a2	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a33a5	a5 23		lda $0823	                LDA ARGUMENT1
.1a33a7	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a33a9	a9 2c 00	lda #$002c	                LDA #','
.1a33ac	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a33af	e2 20		sep #$20	            SEP #$20
.1a33b1	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a33b4	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a33b7	a5 23		lda $0823	                LDA ARGUMENT1
.1a33b9	c9 08		cmp #$08	                CMP #GR_MAX_LUT             ; Check that it's in range
.1a33bb	b0 56		bcs $1a3413	                BGE error                   ; If not: throw an error
.1a33bd	83 03		sta $03,s	                STA L_LUT                   ; Save it as lut
.1a33bf	a9 2c		lda #$2c	                LDA #','
.1a33c1	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a33c4	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a33c7	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a33ca	c2 20		rep #$20	            REP #$20
.1a33cc	38		sec		                SEC                         ; Adjust address to be in Vicky's space
.1a33cd	a5 23		lda $0823	                LDA ARGUMENT1
.1a33cf	e9 00 00	sbc #$0000	                SBC #<>VRAM
.1a33d2	85 23		sta $0823	                STA ARGUMENT1
.1a33d4	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a33d6	e9 b0 00	sbc #$00b0	                SBC #`VRAM
.1a33d9	85 25		sta $0825	                STA ARGUMENT1+2
.1a33db	30 36		bmi $1a3413	                BMI error                   ; If negative, throw an error
.1a33dd	c2 20		rep #$20	            REP #$20
.1a33df	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a33e1	aa		tax		                TAX
.1a33e2	20 5a 33	jsr $1a335a	            JSR SPADDR
.1a33e5	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the lower word of the address
.1a33e7	a0 01 00	ldy #$0001	                LDY #SP_ADDR
.1a33ea	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a33ec	e2 20		sep #$20	            SEP #$20
.1a33ee	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a33f0	c8		iny		                INY
.1a33f1	c8		iny		                INY
.1a33f2	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save the upper byte of the address
.1a33f4	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the sprite control register
.1a33f8	29 f1		and #$f1	                AND #%11110001              ; Filter off the current LUT
.1a33fa	85 0c		sta $080c	                STA SCRATCH
.1a33fc	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT back
.1a33fe	0a		asl a		                ASL A                       ; Sift it into the LUT position
.1a33ff	29 0e		and #$0e	                AND #%00001110              ; Make sure we don't have anything wrong there
.1a3401	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with what's in the sprite's control
.1a3403	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the register's bits
.1a3405	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And the shadow register
.1a3409					done
.1a3409	c2 20		rep #$20	            REP #$20
.1a340b	3b		tsc		            TSC
.1a340c	18		clc		            CLC
.1a340d	69 03 00	adc #$0003	            ADC #SIZE(locals)
.1a3410	1b		tcs		            TCS
.1a3411	28		plp		                PLP
.1a3412	60		rts		            RTS
.1a3413					error
.1a3413	08		php		            PHP
.1a3414	c2 20		rep #$20	            REP #$20
.1a3416	48		pha		            PHA
.1a3417	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a341a	5b		tcd		            TCD
.1a341b	68		pla		            PLA
.1a341c	28		plp		            PLP
.1a341d	e2 20		sep #$20	            SEP #$20
.1a341f	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3421	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3425	c2 20		rep #$20	            REP #$20
.1a3427	29 ff 00	and #$00ff	            AND #$00FF
.1a342a	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a342d	e2 20		sep #$20	            SEP #$20
.1a342f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3432					S_SPRITEAT
.1a3432	08		php		                PHP
.1a3433					locals
>0001					L_SPRITE        .word ?
>0003					L_X             .word ?
.1a3433	c2 20		rep #$20	            REP #$20
.1a3435	3b		tsc		            TSC
.1a3436	38		sec		            SEC
.1a3437	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a343a	1b		tcs		            TCS
.1a343b	c2 30		rep #$30	            REP #$30
.1a343d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3440	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a3443	a5 23		lda $0823	                LDA ARGUMENT1
.1a3445	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a3447	a9 2c 00	lda #$002c	                LDA #','
.1a344a	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a344d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3450	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3453	a5 23		lda $0823	                LDA ARGUMENT1
.1a3455	83 03		sta $03,s	                STA L_X                     ; Save it as X
.1a3457	a9 2c 00	lda #$002c	                LDA #','
.1a345a	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a345d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3460	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3463	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a3465	20 5a 33	jsr $1a335a	            JSR SPADDR
.1a3468	a3 03		lda $03,s	                LDA L_X                     ; Get the X coordinate
.1a346a	a0 04 00	ldy #$0004	                LDY #SP_X_COORD             ; Save the X coordinate for the sprite
.1a346d	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a346f	a5 23		lda $0823	                LDA ARGUMENT1
.1a3471	a0 06 00	ldy #$0006	                LDY #SP_Y_COORD             ; Save the Y coordinate for the sprite
.1a3474	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3476					done
.1a3476	c2 20		rep #$20	            REP #$20
.1a3478	3b		tsc		            TSC
.1a3479	18		clc		            CLC
.1a347a	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a347d	1b		tcs		            TCS
.1a347e	28		plp		                PLP
.1a347f	60		rts		            RTS
.1a3480					S_SPRITESHOW
.1a3480	08		php		                PHP
.1a3481					locals
>0001					L_SPRITE        .word ?
>0003					L_VISIBLE       .byte ?
.1a3481	c2 20		rep #$20	            REP #$20
.1a3483	3b		tsc		            TSC
.1a3484	38		sec		            SEC
.1a3485	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.1a3488	1b		tcs		            TCS
.1a3489	c2 30		rep #$30	            REP #$30
.1a348b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a348e	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a3491	a5 23		lda $0823	                LDA ARGUMENT1
.1a3493	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a3495	a9 2c 00	lda #$002c	                LDA #','
.1a3498	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a349b	e2 20		sep #$20	            SEP #$20
.1a349d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a34a0	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a34a3	a5 23		lda $0823	                LDA ARGUMENT1
.1a34a5	d0 04		bne $1a34ab	                BNE is_visible
.1a34a7	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 0 (not visible)
.1a34a9	80 04		bra $1a34af	                BRA chk_layer
.1a34ab	a9 01		lda #$01	is_visible      LDA #1
.1a34ad	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 1 (visible)
.1a34af	a9 2c		lda #$2c	chk_layer       LDA #','
.1a34b1	85 37		sta $0837	                STA TARGETTOK
.1a34b3	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a34b6	b0 20		bcs $1a34d8	                BCS get_layer               ; Yes: get the layer
.1a34b8					no_layer
.1a34b8	c2 30		rep #$30	            REP #$30
.1a34ba	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a34bc	aa		tax		                TAX
.1a34bd	20 5a 33	jsr $1a335a	            JSR SPADDR
.1a34c0	e2 20		sep #$20	            SEP #$20
.1a34c2	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.1a34c6	29 fe		and #$fe	                AND #$FE                    ; Filter out the enable bit
.1a34c8	85 0c		sta $080c	                STA SCRATCH
.1a34ca	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.1a34cc	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.1a34ce	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.1a34d0	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And save it
.1a34d4	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; ... and to Vicky
.1a34d6	80 36		bra $1a350e	                BRA done
.1a34d8					get_layer
.1a34d8	c2 30		rep #$30	            REP #$30
.1a34da	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a34dd	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a34e0	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a34e3	a5 23		lda $0823	                LDA ARGUMENT1
.1a34e5	c9 08 00	cmp #$0008	                CMP #8                      ; Make sure it's in range
.1a34e8	b0 2e		bcs $1a3518	                BGE error                   ; If not, throw an out of range error
.1a34ea	0a		asl a		                ASL A                       ; If it's ok... shift it into position
.1a34eb	0a		asl a		                ASL A
.1a34ec	0a		asl a		                ASL A
.1a34ed	0a		asl a		                ASL A
.1a34ee	85 0c		sta $080c	                STA SCRATCH                 ; And save it in SCRATCH
.1a34f0	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a34f2	aa		tax		                TAX
.1a34f3	20 5a 33	jsr $1a335a	            JSR SPADDR
.1a34f6	e2 20		sep #$20	            SEP #$20
.1a34f8	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.1a34fa	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.1a34fc	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.1a34fe	85 0c		sta $080c	                STA SCRATCH
.1a3500	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.1a3504	29 8e		and #$8e	                AND #%10001110              ; Filter out the enable and layer bits
.1a3506	05 0c		ora $080c	                ORA SCRATCH                 ; Combine with the provided layer and enable
.1a3508	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the bits in Vicky
.1a350a	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And to the shadow registers
.1a350e					done
.1a350e	c2 20		rep #$20	            REP #$20
.1a3510	3b		tsc		            TSC
.1a3511	18		clc		            CLC
.1a3512	69 03 00	adc #$0003	            ADC #SIZE(locals)
.1a3515	1b		tcs		            TCS
.1a3516	28		plp		                PLP
.1a3517	60		rts		            RTS
.1a3518					error
.1a3518	08		php		            PHP
.1a3519	c2 20		rep #$20	            REP #$20
.1a351b	48		pha		            PHA
.1a351c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a351f	5b		tcd		            TCD
.1a3520	68		pla		            PLA
.1a3521	28		plp		            PLP
.1a3522	e2 20		sep #$20	            SEP #$20
.1a3524	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3526	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a352a	c2 20		rep #$20	            REP #$20
.1a352c	29 ff 00	and #$00ff	            AND #$00FF
.1a352f	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3532	e2 20		sep #$20	            SEP #$20
.1a3534	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3537					TILESET_ADDR
.1a3537	08		php		                PHP
.1a3538	c2 20		rep #$20	            REP #$20
.1a353a	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.1a353d	b0 19		bcs $1a3558	                BGE out_of_range            ; If not, throw a range error
.1a353f	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.1a3542	a9 04 00	lda #$0004	                LDA #TILESET_REG_SIZE       ; Multiply it by the number of bytes in a tile set register set
.1a3545	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.1a3548	18		clc		                CLC                         ; Add to TILESET0_ADDY_L to get the final address
.1a3549	ad 04 01	lda $0104	                LDA @w M0_RESULT
.1a354c	69 80 02	adc #$0280	                ADC #<>TILESET0_ADDY_L
.1a354f	85 9e		sta $089e	                STA MTEMPPTR
.1a3551	a9 af 00	lda #$00af	                LDA #`TILESET0_ADDY_L
.1a3554	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a3556	28		plp		                PLP
.1a3557	60		rts		            RTS
.1a3558					out_of_range
.1a3558	08		php		            PHP
.1a3559	c2 20		rep #$20	            REP #$20
.1a355b	48		pha		            PHA
.1a355c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a355f	5b		tcd		            TCD
.1a3560	68		pla		            PLA
.1a3561	28		plp		            PLP
.1a3562	e2 20		sep #$20	            SEP #$20
.1a3564	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3566	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a356a	c2 20		rep #$20	            REP #$20
.1a356c	29 ff 00	and #$00ff	            AND #$00FF
.1a356f	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3572	e2 20		sep #$20	            SEP #$20
.1a3574	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3577					TILEMAP_ADDR
.1a3577	08		php		                PHP
.1a3578	c2 20		rep #$20	            REP #$20
.1a357a	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.1a357d	b0 19		bcs $1a3598	                BGE out_of_range            ; If not, throw a range error
.1a357f	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.1a3582	a9 0c 00	lda #$000c	                LDA #TILEMAP_REG_SIZE       ; Multiply it by the number of bytes in a tile map register set
.1a3585	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.1a3588	18		clc		                CLC
.1a3589	ad 04 01	lda $0104	                LDA @w M0_RESULT            ; Add to TL0_CONTROL_REG to get the final address
.1a358c	69 00 02	adc #$0200	                ADC #<>TL0_CONTROL_REG
.1a358f	85 9e		sta $089e	                STA MTEMPPTR
.1a3591	a9 af 00	lda #$00af	                LDA #`TL0_CONTROL_REG
.1a3594	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a3596	28		plp		                PLP
.1a3597	60		rts		            RTS
.1a3598					out_of_range
.1a3598	08		php		            PHP
.1a3599	c2 20		rep #$20	            REP #$20
.1a359b	48		pha		            PHA
.1a359c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a359f	5b		tcd		            TCD
.1a35a0	68		pla		            PLA
.1a35a1	28		plp		            PLP
.1a35a2	e2 20		sep #$20	            SEP #$20
.1a35a4	a9 09		lda #$09	            LDA #ERR_RANGE
.1a35a6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a35aa	c2 20		rep #$20	            REP #$20
.1a35ac	29 ff 00	and #$00ff	            AND #$00FF
.1a35af	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a35b2	e2 20		sep #$20	            SEP #$20
.1a35b4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a35b7					S_TILESET
.1a35b7	08		php		                PHP
.1a35b8					locals
>0001					L_TILENUM       .word ?
>0003					L_LUT           .word ?
>0005					L_IS_SQUARE     .word ?
.1a35b8	c2 20		rep #$20	            REP #$20
.1a35ba	3b		tsc		            TSC
.1a35bb	38		sec		            SEC
.1a35bc	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a35bf	1b		tcs		            TCS
.1a35c0	c2 20		rep #$20	            REP #$20
.1a35c2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a35c5	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a35c8	a5 23		lda $0823	                LDA ARGUMENT1
.1a35ca	83 01		sta $01,s	                STA L_TILENUM               ; Save it as the tile set/map number
.1a35cc	a9 2c 00	lda #$002c	                LDA #','
.1a35cf	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a35d2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a35d5	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a35d8	a5 23		lda $0823	                LDA ARGUMENT1
.1a35da	83 03		sta $03,s	                STA L_LUT                   ; Save it as LUT
.1a35dc	a9 2c 00	lda #$002c	                LDA #','
.1a35df	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a35e2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a35e5	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a35e8	a5 23		lda $0823	                LDA ARGUMENT1
.1a35ea	83 05		sta $05,s	                STA L_IS_SQUARE             ; Save it as IS_SQUARE
.1a35ec	a9 2c 00	lda #$002c	                LDA #','
.1a35ef	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a35f2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a35f5	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a35f8	a3 01		lda $01,s	                LDA L_TILENUM
.1a35fa	20 37 35	jsr $1a3537	            JSR TILESET_ADDR
.1a35fd	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the bitmap address - the address of the start of VRAM
.1a35ff	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And save it to the registers
.1a3601	e2 20		sep #$20	            SEP #$20
.1a3603	38		sec		                SEC
.1a3604	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3606	e9 b0		sbc #$b0	                SBC #`VRAM
.1a3608	a0 02 00	ldy #$0002	                LDY #TILESET_ADDY_H
.1a360b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a360d	a3 05		lda $05,s	                LDA L_IS_SQUARE             ; Check if is_square == 0?
.1a360f	d0 0d		bne $1a361e	                BNE is_square
.1a3611					not_square
.1a3611	e2 20		sep #$20	            SEP #$20
.1a3613	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.1a3615	29 07		and #$07	                AND #$07                    ; Force it to be in range
.1a3617	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.1a361a	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.1a361c	80 0d		bra $1a362b	                BRA done
.1a361e					is_square
.1a361e	e2 20		sep #$20	            SEP #$20
.1a3620	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.1a3622	29 07		and #$07	                AND #$07                    ; Force it to be in range
.1a3624	09 08		ora #$08	                ORA #TILESET_SQUARE_256     ; Turn on the 256x256 flag
.1a3626	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.1a3629	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.1a362b					done
.1a362b	c2 20		rep #$20	            REP #$20
.1a362d	3b		tsc		            TSC
.1a362e	18		clc		            CLC
.1a362f	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a3632	1b		tcs		            TCS
.1a3633	28		plp		                PLP
.1a3634	60		rts		            RTS
.1a3635					S_TILEMAP
.1a3635	08		php		                PHP
.1a3636					locals
>0001					L_TILENUM       .word ?
>0003					L_WIDTH         .word ?
>0005					L_HEIGHT        .word ?
.1a3636	c2 20		rep #$20	            REP #$20
.1a3638	3b		tsc		            TSC
.1a3639	38		sec		            SEC
.1a363a	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a363d	1b		tcs		            TCS
.1a363e	c2 20		rep #$20	            REP #$20
.1a3640	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3643	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a3646	a5 23		lda $0823	                LDA ARGUMENT1
.1a3648	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a364a	a9 2c 00	lda #$002c	                LDA #','
.1a364d	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3650	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3653	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3656	a5 23		lda $0823	                LDA ARGUMENT1
.1a3658	83 03		sta $03,s	                STA L_WIDTH                 ; Save it as WIDTH
.1a365a	a9 2c 00	lda #$002c	                LDA #','
.1a365d	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3660	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3663	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3666	a5 23		lda $0823	                LDA ARGUMENT1
.1a3668	83 05		sta $05,s	                STA L_HEIGHT                ; Save it as HEIGHT
.1a366a	a9 2c 00	lda #$002c	                LDA #','
.1a366d	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3670	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3673	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3676	a3 01		lda $01,s	                LDA L_TILENUM
.1a3678	20 77 35	jsr $1a3577	            JSR TILEMAP_ADDR
.1a367b	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the map address - the address of the start of VRAM
.1a367d	a0 01 00	ldy #$0001	                LDY #TILEMAP_START_ADDY
.1a3680	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; And save it to the registers
.1a3682	e2 20		sep #$20	            SEP #$20
.1a3684	38		sec		                SEC
.1a3685	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3687	e9 b0		sbc #$b0	                SBC #`VRAM
.1a3689	c8		iny		                INY
.1a368a	c8		iny		                INY
.1a368b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a368d	c2 20		rep #$20	            REP #$20
.1a368f	a3 03		lda $03,s	                LDA L_WIDTH                 ; Set the width
.1a3691	a0 04 00	ldy #$0004	                LDY #TILEMAP_TOTAL_X
.1a3694	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3696	a3 05		lda $05,s	                LDA L_HEIGHT                ; Set the height
.1a3698	a0 06 00	ldy #$0006	                LDY #TILEMAP_TOTAL_Y
.1a369b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a369d					done
.1a369d	c2 20		rep #$20	            REP #$20
.1a369f	3b		tsc		            TSC
.1a36a0	18		clc		            CLC
.1a36a1	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a36a4	1b		tcs		            TCS
.1a36a5	28		plp		                PLP
.1a36a6	60		rts		            RTS
.1a36a7					S_TILESHOW
.1a36a7	08		php		                PHP
.1a36a8					locals
>0001					L_TILENUM       .word ?
.1a36a8	c2 20		rep #$20	            REP #$20
.1a36aa	f4 00 00	pea #$0000	            PEA #0
.1a36ad	c2 20		rep #$20	            REP #$20
.1a36af	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a36b2	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a36b5	a5 23		lda $0823	                LDA ARGUMENT1
.1a36b7	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a36b9	a9 2c 00	lda #$002c	                LDA #','
.1a36bc	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a36bf	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a36c2	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a36c5	a3 01		lda $01,s	                LDA L_TILENUM
.1a36c7	20 77 35	jsr $1a3577	            JSR TILEMAP_ADDR
.1a36ca	a5 23		lda $0823	                LDA ARGUMENT1               ; CHeck the visible parameter
.1a36cc	d0 06		bne $1a36d4	                BNE is_visible              ; If it's <> 0, make it visible
.1a36ce	e2 20		sep #$20	            SEP #$20
.1a36d0	a9 00		lda #$00	                LDA #0                      ; Control value for invisible
.1a36d2	80 04		bra $1a36d8	                BRA set_control
.1a36d4					is_visible
.1a36d4	e2 20		sep #$20	            SEP #$20
.1a36d6	a9 01		lda #$01	                LDA #TILEMAP_VISIBLE        ; Control value for visible
.1a36d8					set_control
.1a36d8	e2 20		sep #$20	            SEP #$20
.1a36da	a0 00 00	ldy #$0000	                LDY #TILEMAP_CONTROL        ; Set the control register
.1a36dd	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a36df					done
.1a36df	c2 20		rep #$20	            REP #$20
.1a36e1	68		pla		            PLA
.1a36e2	28		plp		                PLP
.1a36e3	60		rts		            RTS
.1a36e4					S_TILEAT
.1a36e4	08		php		                PHP
.1a36e5					locals
>0001					L_TILENUM       .word ?
>0003					L_X             .word ?
.1a36e5	c2 20		rep #$20	            REP #$20
.1a36e7	3b		tsc		            TSC
.1a36e8	38		sec		            SEC
.1a36e9	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a36ec	1b		tcs		            TCS
.1a36ed	c2 20		rep #$20	            REP #$20
.1a36ef	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a36f2	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a36f5	a5 23		lda $0823	                LDA ARGUMENT1
.1a36f7	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a36f9	a9 2c 00	lda #$002c	                LDA #','
.1a36fc	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a36ff	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3702	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3705	a5 23		lda $0823	                LDA ARGUMENT1
.1a3707	83 03		sta $03,s	                STA L_X                     ; Save as X
.1a3709	a9 2c 00	lda #$002c	                LDA #','
.1a370c	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a370f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3712	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3715	a3 01		lda $01,s	                LDA L_TILENUM
.1a3717	20 77 35	jsr $1a3577	            JSR TILEMAP_ADDR
.1a371a	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the Y position
.1a371c	a0 0a 00	ldy #$000a	                LDY #TILEMAP_WINDOW_Y
.1a371f	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3721	a3 03		lda $03,s	                LDA L_X                     ; Set the X position
.1a3723	a0 08 00	ldy #$0008	                LDY #TILEMAP_WINDOW_X
.1a3726	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3728					done
.1a3728	c2 20		rep #$20	            REP #$20
.1a372a	3b		tsc		            TSC
.1a372b	18		clc		            CLC
.1a372c	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a372f	1b		tcs		            TCS
.1a3730	28		plp		                PLP
.1a3731	60		rts		            RTS
=0					DMA_LINEAR = 0                              ; Memory to copy is a continguous, linear range
=1					DMA_RECT = 1                                ; Memory to copy is a rectangular block
.0000					DMA_BLOCK
>0000					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>0001					ADDR            .long ?                     ; The starting address for the data to transfer
>0004					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>0007					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>0009					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>000b					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
=$01					DMA_SRC_2D = $01                            ; Source transfer should be 2D
=$02					DMA_DST_2D = $02                            ; Destination transfer should be 2D
=$10					DMA_SRC_SRAM = $10                          ; Flag indicating that the source is in SRAM ($00:0000 - $3F:FFFF)
=$20					DMA_DST_SRAM = $20                          ; Flag indicating that the destination is in SRAM ($00:0000 - $3F:FFFF)
>1af058					DMA_BLOCKS      .byte ?                     ; What blocks are involved
.1af059					DMA_SRC
>1af059					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>1af05a					ADDR            .long ?                     ; The starting address for the data to transfer
>1af05d					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>1af060					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>1af062					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>1af064					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.1af066					DMA_DEST
>1af066					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>1af067					ADDR            .long ?                     ; The starting address for the data to transfer
>1af06a					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>1af06d					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>1af06f					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>1af071					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.1a3732					DO_DMA
.1a3732	0b		phd		                PHD
.1a3733	08		php		                PHP
.1a3734	08		php		            PHP
.1a3735	c2 20		rep #$20	            REP #$20
.1a3737	48		pha		            PHA
.1a3738	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a373b	5b		tcd		            TCD
.1a373c	68		pla		            PLA
.1a373d	28		plp		            PLP
.1a373e	e2 20		sep #$20	            SEP #$20
.1a3740	a9 00		lda #$00	                LDA #0
.1a3742	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS           ; Set mode to something neutral
.1a3746	af 5c f0 1a	lda $1af05c	                LDA @l DMA_SRC.ADDR+2       ; Check the bank
.1a374a	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.1a374c	b0 1c		bcs $1a376a	                BGE src_vram                ; Yes: leave the DMA_BLOCK bit alone
.1a374e	8f 24 04 af	sta $af0424	src_sram        STA @l SDMA_SRC_ADDY_H      ; Set the SDMA source address
.1a3752	af 5b f0 1a	lda $1af05b	                LDA @l DMA_SRC.ADDR+1
.1a3756	8f 23 04 af	sta $af0423	                STA @l SDMA_SRC_ADDY_M
.1a375a	af 5a f0 1a	lda $1af05a	                LDA @l DMA_SRC.ADDR
.1a375e	8f 22 04 af	sta $af0422	                STA @l SDMA_SRC_ADDY_L
.1a3762	a9 10		lda #$10	                LDA #DMA_SRC_SRAM           ; Set the SRAM source block bit
.1a3764	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a3768	80 17		bra $1a3781	                BRA src_mode
.1a376a	38		sec		src_vram        SEC                         ; Convert to VRAM relative address
.1a376b	e9 b0		sbc #$b0	                SBC #`VRAM
.1a376d	8f 04 04 af	sta $af0404	                STA @l VDMA_SRC_ADDY_H      ; Set the VDMA source address
.1a3771	af 5b f0 1a	lda $1af05b	                LDA @l DMA_SRC.ADDR+1
.1a3775	8f 03 04 af	sta $af0403	                STA @l VDMA_SRC_ADDY_M
.1a3779	af 5a f0 1a	lda $1af05a	                LDA @l DMA_SRC.ADDR
.1a377d	8f 02 04 af	sta $af0402	                STA @l VDMA_SRC_ADDY_L
.1a3781	af 59 f0 1a	lda $1af059	src_mode        LDA @l DMA_SRC.MODE         ; Determine if source is 1D or 2D
.1a3785	d0 3c		bne $1a37c3	                BNE src_2d
.1a3787	af 58 f0 1a	lda $1af058	src_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.1a378b	f0 1b		beq $1a37a8	                BEQ src_1d_vram
.1a378d	af 5d f0 1a	lda $1af05d	src_1d_sram     LDA @l DMA_SRC.SIZE         ; It's SRAM, so set the SDMA size
.1a3791	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.1a3795	af 5e f0 1a	lda $1af05e	                LDA @l DMA_SRC.SIZE+1
.1a3799	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_M
.1a379d	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a37a1	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.1a37a5	82 8b 00	brl $1a3833	                BRL set_dst                 ; Go to set up the destination
.1a37a8	af 5d f0 1a	lda $1af05d	src_1d_vram     LDA @l DMA_SRC.SIZE         ; It's VRAM, so set the VDMA size
.1a37ac	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.1a37b0	af 5e f0 1a	lda $1af05e	                LDA @l DMA_SRC.SIZE+1
.1a37b4	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_M
.1a37b8	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a37bc	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.1a37c0	82 70 00	brl $1a3833	                BRL set_dst                 ; Go to set up the destination
.1a37c3	af 58 f0 1a	lda $1af058	src_2d          LDA @l DMA_BLOCKS
.1a37c7	09 01		ora #$01	                ORA #DMA_SRC_2D             ; Set the bit to make the source a 2D transfer
.1a37c9	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a37cd	89 10		bit #$10	                BIT #DMA_SRC_SRAM           ; Are we writing to SRAM
.1a37cf	f0 32		beq $1a3803	                BEQ src_2d_vram             ; No: set the 2d values in the VRAM source
.1a37d1	af 60 f0 1a	lda $1af060	src_2d_sram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.1a37d5	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.1a37d9	af 61 f0 1a	lda $1af061	                LDA @l DMA_SRC.WIDTH+1
.1a37dd	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.1a37e1	af 62 f0 1a	lda $1af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.1a37e5	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.1a37e9	af 63 f0 1a	lda $1af063	                LDA @l DMA_SRC.HEIGHT+1
.1a37ed	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.1a37f1	af 64 f0 1a	lda $1af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.1a37f5	8f 2c 04 af	sta $af042c	                STA @l SDMA_SRC_STRIDE_L
.1a37f9	af 65 f0 1a	lda $1af065	                LDA @l DMA_SRC.STRIDE+1
.1a37fd	8f 2d 04 af	sta $af042d	                STA @l SDMA_SRC_STRIDE_L+1
.1a3801	80 30		bra $1a3833	                BRA set_dst
.1a3803	af 60 f0 1a	lda $1af060	src_2d_vram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.1a3807	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a380b	af 61 f0 1a	lda $1af061	                LDA @l DMA_SRC.WIDTH+1
.1a380f	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.1a3813	af 62 f0 1a	lda $1af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.1a3817	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a381b	af 63 f0 1a	lda $1af063	                LDA @l DMA_SRC.HEIGHT+1
.1a381f	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.1a3823	af 64 f0 1a	lda $1af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.1a3827	8f 0c 04 af	sta $af040c	                STA @l VDMA_SRC_STRIDE_L
.1a382b	af 65 f0 1a	lda $1af065	                LDA @l DMA_SRC.STRIDE+1
.1a382f	8f 0d 04 af	sta $af040d	                STA @l VDMA_SRC_STRIDE_L+1
.1a3833					set_dst
.1a3833	e2 20		sep #$20	            SEP #$20
.1a3835	af 69 f0 1a	lda $1af069	                LDA @l DMA_DEST.ADDR+2      ; Check the bank
.1a3839	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.1a383b	b0 20		bcs $1a385d	                BGE dst_vram                ; Yes: leave the DMA_BLOCK bit alone
.1a383d	8f 27 04 af	sta $af0427	dst_sram        STA @l SDMA_DST_ADDY_H      ; Set the SDMA destination address
.1a3841	af 68 f0 1a	lda $1af068	                LDA @l DMA_DEST.ADDR+1
.1a3845	8f 26 04 af	sta $af0426	                STA @l SDMA_DST_ADDY_M
.1a3849	af 67 f0 1a	lda $1af067	                LDA @l DMA_DEST.ADDR
.1a384d	8f 25 04 af	sta $af0425	                STA @l SDMA_DST_ADDY_L
.1a3851	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS
.1a3855	09 20		ora #$20	                ORA #DMA_DST_SRAM           ; Set the bit to indicate the destination is SRAM
.1a3857	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a385b	80 17		bra $1a3874	                BRA dst_mode
.1a385d	38		sec		dst_vram        SEC                         ; Convert to VRAM relative address
.1a385e	e9 b0		sbc #$b0	                SBC #`VRAM
.1a3860	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H      ; Set the VDMA destination address
.1a3864	af 68 f0 1a	lda $1af068	                LDA @l DMA_DEST.ADDR+1
.1a3868	8f 06 04 af	sta $af0406	                STA @l VDMA_DST_ADDY_M
.1a386c	af 67 f0 1a	lda $1af067	                LDA @l DMA_DEST.ADDR
.1a3870	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.1a3874	af 66 f0 1a	lda $1af066	dst_mode        LDA @l DMA_DEST.MODE
.1a3878	d0 3e		bne $1a38b8	                BNE dst_2d                  ; If 2D, set up the 2D destination parameters
.1a387a	af 58 f0 1a	lda $1af058	dst_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.1a387e	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Is the destination SRAM?
.1a3880	f0 1b		beq $1a389d	                BEQ dst_1d_vram
.1a3882	af 6a f0 1a	lda $1af06a	dst_1d_sram     LDA @l DMA_DEST.SIZE
.1a3886	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.1a388a	af 6b f0 1a	lda $1af06b	                LDA @l DMA_DEST.SIZE+1
.1a388e	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_L+1
.1a3892	af 6c f0 1a	lda $1af06c	                LDA @l DMA_DEST.SIZE+2
.1a3896	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.1a389a	82 8b 00	brl $1a3928	                BRL start_xfer
.1a389d	af 6a f0 1a	lda $1af06a	dst_1d_vram     LDA @l DMA_DEST.SIZE
.1a38a1	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.1a38a5	af 6b f0 1a	lda $1af06b	                LDA @l DMA_DEST.SIZE+1
.1a38a9	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_L+1
.1a38ad	af 6c f0 1a	lda $1af06c	                LDA @l DMA_DEST.SIZE+2
.1a38b1	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.1a38b5	82 70 00	brl $1a3928	                BRL start_xfer
.1a38b8	af 58 f0 1a	lda $1af058	dst_2d          LDA @l DMA_BLOCKS
.1a38bc	09 02		ora #$02	                ORA #DMA_DST_2D             ; Set the bit to make the source a 2D transfer
.1a38be	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a38c2	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Are we writing to the SRAM?
.1a38c4	f0 32		beq $1a38f8	                BEQ dst_2d_vram             ; No: set the 2D parameters for VRAM
.1a38c6	af 6d f0 1a	lda $1af06d	dst_2d_sram     LDA @l DMA_DEST.WIDTH       ; Set the SRAM width
.1a38ca	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.1a38ce	af 6e f0 1a	lda $1af06e	                LDA @L DMA_DEST.WIDTH+1
.1a38d2	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.1a38d6	af 6f f0 1a	lda $1af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the SRAM height
.1a38da	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.1a38de	af 70 f0 1a	lda $1af070	                LDA @L DMA_DEST.HEIGHT+1
.1a38e2	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.1a38e6	af 71 f0 1a	lda $1af071	                LDA @l DMA_DEST.STRIDE      ; Set the SRAM stride
.1a38ea	8f 2e 04 af	sta $af042e	                STA @l SDMA_DST_STRIDE_L
.1a38ee	af 72 f0 1a	lda $1af072	                LDA @L DMA_DEST.STRIDE+1
.1a38f2	8f 2f 04 af	sta $af042f	                STA @l SDMA_DST_STRIDE_L+1
.1a38f6	80 30		bra $1a3928	                BRA start_xfer
.1a38f8	af 6d f0 1a	lda $1af06d	dst_2d_vram     LDA @l DMA_DEST.WIDTH       ; Set the VRAM width
.1a38fc	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a3900	af 6e f0 1a	lda $1af06e	                LDA @L DMA_DEST.WIDTH+1
.1a3904	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.1a3908	af 6f f0 1a	lda $1af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the VRAM height
.1a390c	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a3910	af 70 f0 1a	lda $1af070	                LDA @L DMA_DEST.HEIGHT+1
.1a3914	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.1a3918	af 71 f0 1a	lda $1af071	                LDA @l DMA_DEST.STRIDE      ; Set the VRAM stride
.1a391c	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L
.1a3920	af 72 f0 1a	lda $1af072	                LDA @L DMA_DEST.STRIDE+1
.1a3924	8f 0f 04 af	sta $af040f	                STA @l VDMA_DST_STRIDE_L+1
.1a3928	af 58 f0 1a	lda $1af058	start_xfer      LDA @l DMA_BLOCKS
.1a392c	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.1a392e	f0 43		beq $1a3973	                BEQ start_vdma_only
.1a3930	c9 10		cmp #$10	                CMP #DMA_SRC_SRAM
.1a3932	f0 76		beq $1a39aa	                BEQ start_s2v
.1a3934	c9 20		cmp #$20	                CMP #DMA_DST_SRAM
.1a3936	d0 03		bne $1a393b	                BNE start_sdma_only
.1a3938	82 8a 00	brl $1a39c5	                BRL start_v2s
.1a393b					start_sdma_only
.1a393b	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.1a393f	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.1a3941	f0 23		beq $1a3966	                BEQ sdma_1d_only            ; Source and Destination 1D...
.1a3943	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.1a3945	f0 23		beq $1a396a	                BEQ sdma_2d_only            ; Source and Destination 2D
.1a3947	08		php		            PHP
.1a3948	c2 20		rep #$20	            REP #$20
.1a394a	48		pha		            PHA
.1a394b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a394e	5b		tcd		            TCD
.1a394f	68		pla		            PLA
.1a3950	28		plp		            PLP
.1a3951	e2 20		sep #$20	            SEP #$20
.1a3953	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a3955	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3959	c2 20		rep #$20	            REP #$20
.1a395b	29 ff 00	and #$00ff	            AND #$00FF
.1a395e	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3961	e2 20		sep #$20	            SEP #$20
.1a3963	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3966	a9 01		lda #$01	sdma_1d_only    LDA #SDMA_CTRL0_Enable      ; Set the bits for 1D, SRAM->SRAM
.1a3968	80 02		bra $1a396c	                BRA sdma_set_ctrl
.1a396a	a9 03		lda #$03	sdma_2d_only    LDA #SDMA_CTRL0_Enable | SDMA_CTRL0_1D_2D
.1a396c	8f 20 04 af	sta $af0420	sdma_set_ctrl   STA @l SDMA_CTRL_REG0
.1a3970	82 7d 00	brl $1a39f0	                BRL trig_sdma               ; And trigger the SDMA
.1a3973					start_vdma_only
.1a3973	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.1a3977	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.1a3979	f0 23		beq $1a399e	                BEQ vdma_1d_only            ; Source and Destination 1D...
.1a397b	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.1a397d	f0 23		beq $1a39a2	                BEQ vdma_2d_only            ; Source and Destination 2D...
.1a397f	08		php		            PHP
.1a3980	c2 20		rep #$20	            REP #$20
.1a3982	48		pha		            PHA
.1a3983	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3986	5b		tcd		            TCD
.1a3987	68		pla		            PLA
.1a3988	28		plp		            PLP
.1a3989	e2 20		sep #$20	            SEP #$20
.1a398b	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a398d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3991	c2 20		rep #$20	            REP #$20
.1a3993	29 ff 00	and #$00ff	            AND #$00FF
.1a3996	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3999	e2 20		sep #$20	            SEP #$20
.1a399b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a399e	a9 01		lda #$01	vdma_1d_only    LDA #VDMA_CTRL_Enable       ; Set the bits for 1D, VRAM->VRAM
.1a39a0	80 02		bra $1a39a4	                BRA vdma_set_ctrl
.1a39a2	a9 03		lda #$03	vdma_2d_only    LDA #VDMA_CTRL_Enable | VDMA_CTRL_1D_2D
.1a39a4	8f 00 04 af	sta $af0400	vdma_set_ctrl   STA @l VDMA_CONTROL_REG
.1a39a8	80 34		bra $1a39de	                BRA trig_vdma               ; And trigger the VDMA
.1a39aa					start_s2v
.1a39aa	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.1a39ae	29 01		and #$01	                AND #DMA_SRC_2D
.1a39b0	0a		asl a		                ASL A
.1a39b1	09 11		ora #$11	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src
.1a39b3	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a39b7	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.1a39bb	29 02		and #$02	                AND #DMA_DST_2D
.1a39bd	09 11		ora #$11	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Src
.1a39bf	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a39c3	80 19		bra $1a39de	                BRA trig_vdma               ; And trigger the VDMA
.1a39c5					start_v2s
.1a39c5	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.1a39c9	29 02		and #$02	                AND #DMA_DST_2D
.1a39cb	09 21		ora #$21	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Dst
.1a39cd	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a39d1	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.1a39d5	29 01		and #$01	                AND #DMA_SRC_2D
.1a39d7	0a		asl a		                ASL A
.1a39d8	09 21		ora #$21	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Dst
.1a39da	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a39de					trig_vdma
.1a39de	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.1a39e2	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF    ; Trigger the VDMA
.1a39e4	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a39e8	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check if we need SDMA
.1a39ec	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.1a39ee	f0 0f		beq $1a39ff	                BEQ wait_vdma               ; No: wait for VDMA to complete
.1a39f0					trig_sdma
.1a39f0	af 20 04 af	lda $af0420	                LDA @l SDMA_CTRL_REG0
.1a39f4	09 80		ora #$80	                ORA #SDMA_CTRL0_Start_TRF   ; Trigger the SDMA
.1a39f6	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a39fa	ea		nop		                NOP                         ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1a39fb	ea		nop		                NOP                         ; Before it actually gets to stop it will execute a couple more instructions
.1a39fc	ea		nop		                NOP                         ; From that point on, the CPU is halted (keep that in mind)
.1a39fd	ea		nop		                NOP                         ; No IRQ will be processed either during that time
.1a39fe	ea		nop		                NOP
.1a39ff	af 01 04 af	lda $af0401	wait_vdma       LDA @l VDMA_STATUS_REG      ; Check the VDMA status
.1a3a03	89 80		bit #$80	                BIT #VDMA_STAT_VDMA_IPS     ; If the transfer is still in process...
.1a3a05	d0 f8		bne $1a39ff	                BNE wait_vdma               ; Wait until it stops.
.1a3a07	a9 00		lda #$00	                LDA #$00                    ; Clear the TRF bits
.1a3a09	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a3a0d	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3a11	28		plp		                PLP
.1a3a12	2b		pld		                PLD
.1a3a13	60		rts		            RTS
.1a3a14					S_MEMCOPY
.1a3a14	0b		phd		                PHD
.1a3a15	08		php		                PHP
.1a3a16	e2 20		sep #$20	            SEP #$20
.1a3a18	c2 10		rep #$10	            REP #$10
.1a3a1a	a9 00		lda #$00	                LDA #0
.1a3a1c	a2 00 00	ldx #$0000	                LDX #0
.1a3a1f	8f 59 f0 1a	sta $1af059	clr_loop        STA @l DMA_SRC
.1a3a23	e8		inx		                INX
.1a3a24	e0 1a 00	cpx #$001a	                CPX #SIZE(DMA_BLOCK) * 2
.1a3a27	d0 f6		bne $1a3a1f	                BNE clr_loop
.1a3a29	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a3a2c	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.1a3a2e	f0 23		beq $1a3a53	                BEQ src_linear                      ; Yes: go to process a linear source
.1a3a30	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.1a3a32	f0 5e		beq $1a3a92	                BEQ src_rect                        ; Yes: go to process a rectangular source
.1a3a34					syntax_err
.1a3a34	08		php		            PHP
.1a3a35	c2 20		rep #$20	            REP #$20
.1a3a37	48		pha		            PHA
.1a3a38	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3a3b	5b		tcd		            TCD
.1a3a3c	68		pla		            PLA
.1a3a3d	28		plp		            PLP
.1a3a3e	e2 20		sep #$20	            SEP #$20
.1a3a40	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3a42	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3a46	c2 20		rep #$20	            REP #$20
.1a3a48	29 ff 00	and #$00ff	            AND #$00FF
.1a3a4b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3a4e	e2 20		sep #$20	            SEP #$20
.1a3a50	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3a53					src_linear
.1a3a53	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3a56	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3a59	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3a5c	c2 20		rep #$20	            REP #$20
.1a3a5e	a5 23		lda $0823	            LDA ARGUMENT1
.1a3a60	8f 5a f0 1a	sta $1af05a	            STA DMA_SRC.ADDR
.1a3a64	e2 20		sep #$20	            SEP #$20
.1a3a66	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3a68	8f 5c f0 1a	sta $1af05c	            STA DMA_SRC.ADDR+2
.1a3a6c	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a3a6e	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3a71	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3a74	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3a77	c2 20		rep #$20	            REP #$20
.1a3a79	a5 23		lda $0823	            LDA ARGUMENT1
.1a3a7b	8f 5d f0 1a	sta $1af05d	            STA DMA_SRC.SIZE
.1a3a7f	e2 20		sep #$20	            SEP #$20
.1a3a81	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3a83	8f 5f f0 1a	sta $1af05f	            STA DMA_SRC.SIZE+2
.1a3a87	e2 20		sep #$20	            SEP #$20
.1a3a89	a9 00		lda #$00	            LDA #<DMA_LINEAR
.1a3a8b	8f 59 f0 1a	sta $1af059	            STA DMA_SRC.MODE
.1a3a8f	82 74 00	brl $1a3b06	                BRL process_to
.1a3a92					src_rect
.1a3a92	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3a95	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3a98	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3a9b	c2 20		rep #$20	            REP #$20
.1a3a9d	a5 23		lda $0823	            LDA ARGUMENT1
.1a3a9f	8f 5a f0 1a	sta $1af05a	            STA DMA_SRC.ADDR
.1a3aa3	e2 20		sep #$20	            SEP #$20
.1a3aa5	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3aa7	8f 5c f0 1a	sta $1af05c	            STA DMA_SRC.ADDR+2
.1a3aab	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a3aad	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3ab0	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3ab3	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3ab6	c2 20		rep #$20	            REP #$20
.1a3ab8	a5 23		lda $0823	            LDA ARGUMENT1
.1a3aba	8f 60 f0 1a	sta $1af060	            STA DMA_SRC.WIDTH
.1a3abe	8d 00 01	sta $0100	            STA M0_OPERAND_A
.1a3ac1	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3ac4	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3ac7	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3aca	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3acd	c2 20		rep #$20	            REP #$20
.1a3acf	a5 23		lda $0823	            LDA ARGUMENT1
.1a3ad1	8f 62 f0 1a	sta $1af062	            STA DMA_SRC.HEIGHT
.1a3ad5	8d 02 01	sta $0102	            STA M0_OPERAND_B
.1a3ad8	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3adb	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3ade	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3ae1	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3ae4	c2 20		rep #$20	            REP #$20
.1a3ae6	a5 23		lda $0823	            LDA ARGUMENT1
.1a3ae8	8f 64 f0 1a	sta $1af064	            STA DMA_SRC.STRIDE
.1a3aec	c2 20		rep #$20	            REP #$20
.1a3aee	ad 04 01	lda $0104	            LDA M0_RESULT
.1a3af1	8f 5d f0 1a	sta $1af05d	            STA DMA_SRC.SIZE
.1a3af5	e2 20		sep #$20	            SEP #$20
.1a3af7	ad 06 01	lda $0106	            LDA M0_RESULT+2
.1a3afa	8f 5f f0 1a	sta $1af05f	            STA DMA_SRC.SIZE+2
.1a3afe	e2 20		sep #$20	            SEP #$20
.1a3b00	a9 01		lda #$01	            LDA #<DMA_RECT
.1a3b02	8f 59 f0 1a	sta $1af059	            STA DMA_SRC.MODE
.1a3b06					process_to
.1a3b06	e2 20		sep #$20	            SEP #$20
.1a3b08	a9 9c		lda #$9c	                LDA #TOK_TO
.1a3b0a	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3b0d	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a3b10	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.1a3b12	f0 23		beq $1a3b37	                BEQ dest_linear                     ; Yes: go to process a linear destination
.1a3b14	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.1a3b16	f0 5e		beq $1a3b76	                BEQ dest_rect                       ; Yes: go to process a rectangular source
.1a3b18					syntax_err2
.1a3b18	08		php		            PHP
.1a3b19	c2 20		rep #$20	            REP #$20
.1a3b1b	48		pha		            PHA
.1a3b1c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3b1f	5b		tcd		            TCD
.1a3b20	68		pla		            PLA
.1a3b21	28		plp		            PLP
.1a3b22	e2 20		sep #$20	            SEP #$20
.1a3b24	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3b26	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3b2a	c2 20		rep #$20	            REP #$20
.1a3b2c	29 ff 00	and #$00ff	            AND #$00FF
.1a3b2f	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3b32	e2 20		sep #$20	            SEP #$20
.1a3b34	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3b37					dest_linear
.1a3b37	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3b3a	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3b3d	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3b40	c2 20		rep #$20	            REP #$20
.1a3b42	a5 23		lda $0823	            LDA ARGUMENT1
.1a3b44	8f 67 f0 1a	sta $1af067	            STA DMA_DEST.ADDR
.1a3b48	e2 20		sep #$20	            SEP #$20
.1a3b4a	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3b4c	8f 69 f0 1a	sta $1af069	            STA DMA_DEST.ADDR+2
.1a3b50	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a3b52	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3b55	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3b58	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3b5b	c2 20		rep #$20	            REP #$20
.1a3b5d	a5 23		lda $0823	            LDA ARGUMENT1
.1a3b5f	8f 6a f0 1a	sta $1af06a	            STA DMA_DEST.SIZE
.1a3b63	e2 20		sep #$20	            SEP #$20
.1a3b65	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3b67	8f 6c f0 1a	sta $1af06c	            STA DMA_DEST.SIZE+2
.1a3b6b	e2 20		sep #$20	            SEP #$20
.1a3b6d	a9 00		lda #$00	            LDA #<DMA_LINEAR
.1a3b6f	8f 66 f0 1a	sta $1af066	            STA DMA_DEST.MODE
.1a3b73	82 74 00	brl $1a3bea	                BRL verify
.1a3b76					dest_rect
.1a3b76	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3b79	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3b7c	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3b7f	c2 20		rep #$20	            REP #$20
.1a3b81	a5 23		lda $0823	            LDA ARGUMENT1
.1a3b83	8f 67 f0 1a	sta $1af067	            STA DMA_DEST.ADDR
.1a3b87	e2 20		sep #$20	            SEP #$20
.1a3b89	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3b8b	8f 69 f0 1a	sta $1af069	            STA DMA_DEST.ADDR+2
.1a3b8f	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a3b91	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3b94	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3b97	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3b9a	c2 20		rep #$20	            REP #$20
.1a3b9c	a5 23		lda $0823	            LDA ARGUMENT1
.1a3b9e	8f 6d f0 1a	sta $1af06d	            STA DMA_DEST.WIDTH
.1a3ba2	8d 00 01	sta $0100	            STA M0_OPERAND_A
.1a3ba5	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3ba8	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3bab	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3bae	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3bb1	c2 20		rep #$20	            REP #$20
.1a3bb3	a5 23		lda $0823	            LDA ARGUMENT1
.1a3bb5	8f 6f f0 1a	sta $1af06f	            STA DMA_DEST.HEIGHT
.1a3bb9	8d 02 01	sta $0102	            STA M0_OPERAND_B
.1a3bbc	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3bbf	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3bc2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3bc5	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3bc8	c2 20		rep #$20	            REP #$20
.1a3bca	a5 23		lda $0823	            LDA ARGUMENT1
.1a3bcc	8f 71 f0 1a	sta $1af071	            STA DMA_DEST.STRIDE
.1a3bd0	c2 20		rep #$20	            REP #$20
.1a3bd2	ad 04 01	lda $0104	            LDA M0_RESULT
.1a3bd5	8f 6a f0 1a	sta $1af06a	            STA DMA_DEST.SIZE
.1a3bd9	e2 20		sep #$20	            SEP #$20
.1a3bdb	ad 06 01	lda $0106	            LDA M0_RESULT+2
.1a3bde	8f 6c f0 1a	sta $1af06c	            STA DMA_DEST.SIZE+2
.1a3be2	e2 20		sep #$20	            SEP #$20
.1a3be4	a9 01		lda #$01	            LDA #<DMA_RECT
.1a3be6	8f 66 f0 1a	sta $1af066	            STA DMA_DEST.MODE
.1a3bea					verify
.1a3bea	c2 20		rep #$20	            REP #$20
.1a3bec	af 5d f0 1a	lda $1af05d	                LDA @l DMA_SRC.SIZE
.1a3bf0	cf 6a f0 1a	cmp $1af06a	                CMP @l DMA_DEST.SIZE
.1a3bf4	d0 14		bne $1a3c0a	                BNE size_err
.1a3bf6	e2 20		sep #$20	            SEP #$20
.1a3bf8	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a3bfc	cf 6c f0 1a	cmp $1af06c	                CMP @l DMA_DEST.SIZE+2
.1a3c00	d0 08		bne $1a3c0a	                BNE size_err
.1a3c02	c2 20		rep #$20	            REP #$20
.1a3c04	20 32 37	jsr $1a3732	            JSR DO_DMA
.1a3c07	28		plp		                PLP
.1a3c08	2b		pld		                PLD
.1a3c09	60		rts		            RTS
.1a3c0a					size_err
.1a3c0a	08		php		            PHP
.1a3c0b	c2 20		rep #$20	            REP #$20
.1a3c0d	48		pha		            PHA
.1a3c0e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3c11	5b		tcd		            TCD
.1a3c12	68		pla		            PLA
.1a3c13	28		plp		            PLP
.1a3c14	e2 20		sep #$20	            SEP #$20
.1a3c16	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a3c18	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3c1c	c2 20		rep #$20	            REP #$20
.1a3c1e	29 ff 00	and #$00ff	            AND #$00FF
.1a3c21	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3c24	e2 20		sep #$20	            SEP #$20
.1a3c26	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3c29					S_LOCATE
.1a3c29	08		php		                PHP
.1a3c2a	c2 30		rep #$30	            REP #$30
.1a3c2c	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3c2f	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a3c32	a5 23		lda $0823	                LDA ARGUMENT1
.1a3c34	48		pha		                PHA                         ; Save it for later
.1a3c35	a9 2c 00	lda #$002c	                LDA #','                    ; Check for the comma separator
.1a3c38	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3c3b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3c3e	20 63 07	jsr $1a0763	            JSR ASS_ARG1_BYTE
.1a3c41	a4 23		ldy $0823	                LDY ARGUMENT1               ; Set Y to the row
.1a3c43	fa		plx		                PLX                         ; Set X to the column
.1a3c44	20 20 00	jsr $1a0020	            JSR CURSORXY
.1a3c47	28		plp		                PLP
.1a3c48	60		rts		            RTS

;******  Return to file: src\statements.s

.1a3c49					S_INPUT
.1a3c49	08		php		                PHP
.1a3c4a					varloop
.1a3c4a	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3c4d	e2 20		sep #$20	            SEP #$20
.1a3c4f	a7 00		lda [$0800]	                LDA [BIP]
.1a3c51	d0 03		bne $1a3c56	                BNE check_colon
.1a3c53	4c f1 3c	jmp $1a3cf1	                JMP done            ; If EOL, we're done
.1a3c56	c9 3a		cmp #$3a	check_colon     CMP #':'
.1a3c58	d0 03		bne $1a3c5d	                BNE check_string
.1a3c5a	4c f1 3c	jmp $1a3cf1	                JMP done            ; If colon, we're done
.1a3c5d	c9 22		cmp #$22	check_string    CMP #CHAR_DQUOTE    ; Is it the start of a string?
.1a3c5f	d0 0b		bne $1a3c6c	                BNE check_var       ; No: then it should be a variable name
.1a3c61	20 18 1c	jsr $1a1c18	            JSR EVALSTRING
.1a3c64	20 ff 45	jsr $1a45ff	            JSR PR_STRING
.1a3c67	a9 3b		lda #$3b	                LDA #';'            ; Look for a semicolon
.1a3c69	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3c6c					check_var
.1a3c6c	20 e2 04	jsr $1a04e2	            JSR ISALPHA
.1a3c6f	90 44		bcc $1a3cb5	                BCC syntax_err      ; No: it's a syntax error
.1a3c71	20 1f 54	jsr $1a541f	            JSR VAR_FINDNAME
.1a3c74	90 3f		bcc $1a3cb5	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3c76	a9 3f		lda #$3f	                LDA #"?"            ; Print a "? " to follow
.1a3c78	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3c7b	a9 20		lda #$20	                LDA #CHAR_SP
.1a3c7d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3c80	20 10 00	jsr $1a0010	            JSR INPUTLINE
.1a3c83	e2 20		sep #$20	            SEP #$20
.1a3c85	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Check the type of the variable
.1a3c87	c9 02		cmp #$02	                CMP #TYPE_STRING    ; If it's a string...
.1a3c89	f0 49		beq $1a3cd4	                BEQ in_string       ; ... go to copy the string data
.1a3c8b	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; If it's an integer...
.1a3c8d	d0 03		bne $1a3c92	                BNE chk_float
.1a3c8f	82 84 00	brl $1a3d16	                BRL in_integer      ; ... go to parse the integer
.1a3c92	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT     ; If it's a float...
.1a3c94	f0 5d		beq $1a3cf3	                BEQ in_float        ; ... go to parse the float
.1a3c96	08		php		            PHP
.1a3c97	c2 20		rep #$20	            REP #$20
.1a3c99	48		pha		            PHA
.1a3c9a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3c9d	5b		tcd		            TCD
.1a3c9e	68		pla		            PLA
.1a3c9f	28		plp		            PLP
.1a3ca0	e2 20		sep #$20	            SEP #$20
.1a3ca2	a9 04		lda #$04	            LDA #ERR_TYPE
.1a3ca4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3ca8	c2 20		rep #$20	            REP #$20
.1a3caa	29 ff 00	and #$00ff	            AND #$00FF
.1a3cad	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3cb0	e2 20		sep #$20	            SEP #$20
.1a3cb2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3cb5					syntax_err
.1a3cb5	08		php		            PHP
.1a3cb6	c2 20		rep #$20	            REP #$20
.1a3cb8	48		pha		            PHA
.1a3cb9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3cbc	5b		tcd		            TCD
.1a3cbd	68		pla		            PLA
.1a3cbe	28		plp		            PLP
.1a3cbf	e2 20		sep #$20	            SEP #$20
.1a3cc1	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3cc3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3cc7	c2 20		rep #$20	            REP #$20
.1a3cc9	29 ff 00	and #$00ff	            AND #$00FF
.1a3ccc	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3ccf	e2 20		sep #$20	            SEP #$20
.1a3cd1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3cd4					in_string
.1a3cd4	c2 20		rep #$20	            REP #$20
.1a3cd6	a9 00 4c	lda #$4c00	                LDA #<>IOBUF
.1a3cd9	85 23		sta $0823	                STA ARGUMENT1
.1a3cdb	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3cde	85 25		sta $0825	                STA ARGUMENT1+2
.1a3ce0	e2 20		sep #$20	            SEP #$20
.1a3ce2	a9 02		lda #$02	                LDA #TYPE_STRING
.1a3ce4	85 27		sta $0827	                STA ARGTYPE1
.1a3ce6					save_input
.1a3ce6	c2 20		rep #$20	            REP #$20
.1a3ce8	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a3ceb	a9 0d 00	lda #$000d	                LDA #CHAR_CR        ; Print a newline
.1a3cee	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3cf1	28		plp		done            PLP
.1a3cf2	60		rts		            RTS
.1a3cf3					in_float
.1a3cf3	c2 20		rep #$20	            REP #$20
.1a3cf5	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.1a3cf7	85 40		sta $0840	                STA SAVEBIP
.1a3cf9	a5 02		lda $0802	                LDA BIP+2
.1a3cfb	85 42		sta $0842	                STA SAVEBIP+2
.1a3cfd	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.1a3d00	85 00		sta $0800	                STA BIP
.1a3d02	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3d05	85 02		sta $0802	                STA BIP+2
.1a3d07	20 41 5a	jsr $1a5a41	            JSR PARSENUM
.1a3d0a	c2 20		rep #$20	            REP #$20
.1a3d0c	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.1a3d0e	85 00		sta $0800	                STA BIP
.1a3d10	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3d12	85 02		sta $0802	                STA BIP+2
.1a3d14	80 d0		bra $1a3ce6	                BRA save_input
.1a3d16					in_integer
.1a3d16	c2 20		rep #$20	            REP #$20
.1a3d18	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.1a3d1a	85 40		sta $0840	                STA SAVEBIP
.1a3d1c	a5 02		lda $0802	                LDA BIP+2
.1a3d1e	85 42		sta $0842	                STA SAVEBIP+2
.1a3d20	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.1a3d23	85 00		sta $0800	                STA BIP
.1a3d25	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3d28	85 02		sta $0802	                STA BIP+2
.1a3d2a	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a3d2d	c2 20		rep #$20	            REP #$20
.1a3d2f	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.1a3d31	85 00		sta $0800	                STA BIP
.1a3d33	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3d35	85 02		sta $0802	                STA BIP+2
.1a3d37	80 ad		bra $1a3ce6	                BRA save_input
.1a3d39					S_GET
.1a3d39	08		php		                PHP
.1a3d3a					varloop
.1a3d3a	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3d3d	e2 20		sep #$20	            SEP #$20
.1a3d3f	a7 00		lda [$0800]	                LDA [BIP]
.1a3d41	f0 47		beq $1a3d8a	                BEQ done            ; If EOL, we're done
.1a3d43	c9 3a		cmp #$3a	                CMP #':'
.1a3d45	f0 43		beq $1a3d8a	                BEQ done            ; If colon, we're done
.1a3d47	20 e2 04	jsr $1a04e2	            JSR ISALPHA
.1a3d4a	90 40		bcc $1a3d8c	                BCC syntax_err      ; No: it's a syntax error
.1a3d4c	20 1f 54	jsr $1a541f	            JSR VAR_FINDNAME
.1a3d4f	90 3b		bcc $1a3d8c	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3d51	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a3d54	20 14 00	jsr $1a0014	            JSR GETKEY
.1a3d57	e2 20		sep #$20	            SEP #$20
.1a3d59	a0 00 00	ldy #$0000	                LDY #0
.1a3d5c	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a3d5e	a9 00		lda #$00	                LDA #0
.1a3d60	c8		iny		                INY
.1a3d61	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a3d63	c2 20		rep #$20	            REP #$20
.1a3d65	a5 16		lda $0816	                LDA STRPTR
.1a3d67	85 23		sta $0823	                STA ARGUMENT1
.1a3d69	a5 18		lda $0818	                LDA STRPTR+2
.1a3d6b	85 25		sta $0825	                STA ARGUMENT1+2
.1a3d6d	e2 20		sep #$20	            SEP #$20
.1a3d6f	a9 02		lda #$02	                LDA #TYPE_STRING
.1a3d71	85 27		sta $0827	                STA ARGTYPE1
.1a3d73	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a3d76	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3d79	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.1a3d7b	f0 0d		beq $1a3d8a	                BEQ done            ; EOL? We're done
.1a3d7d	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.1a3d7f	f0 09		beq $1a3d8a	                BEQ done
.1a3d81	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3d83	d0 07		bne $1a3d8c	                BNE syntax_err      ; Nope: syntax error
.1a3d85	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3d88	80 b0		bra $1a3d3a	                BRA varloop
.1a3d8a	28		plp		done            PLP
.1a3d8b	60		rts		            RTS
.1a3d8c					syntax_err
.1a3d8c	08		php		            PHP
.1a3d8d	c2 20		rep #$20	            REP #$20
.1a3d8f	48		pha		            PHA
.1a3d90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3d93	5b		tcd		            TCD
.1a3d94	68		pla		            PLA
.1a3d95	28		plp		            PLP
.1a3d96	e2 20		sep #$20	            SEP #$20
.1a3d98	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3d9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3d9e	c2 20		rep #$20	            REP #$20
.1a3da0	29 ff 00	and #$00ff	            AND #$00FF
.1a3da3	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3da6	e2 20		sep #$20	            SEP #$20
.1a3da8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3dab					S_CALL
.1a3dab	08		php		                PHP
.1a3dac	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3daf	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3db2	e2 20		sep #$20	            SEP #$20
.1a3db4	a9 5c		lda #$5c	                LDA #$5C            ; Set the opcode for JML
.1a3db6	85 a2		sta $08a2	                STA MJUMPINST
.1a3db8	c2 20		rep #$20	            REP #$20
.1a3dba	a5 23		lda $0823	                LDA ARGUMENT1
.1a3dbc	85 a3		sta $08a3	                STA MJUMPADDR
.1a3dbe	e2 20		sep #$20	            SEP #$20
.1a3dc0	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3dc2	85 a5		sta $08a5	                STA MJUMPADDR+2
.1a3dc4	e2 20		sep #$20	            SEP #$20
.1a3dc6	a9 2c		lda #$2c	                LDA #','
.1a3dc8	85 37		sta $0837	                STA TARGETTOK
.1a3dca	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a3dcd	90 41		bcc $1a3e10	                BCC launch          ; Not present... go ahead and launch
.1a3dcf	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3dd2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3dd5	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3dd8	c2 20		rep #$20	            REP #$20
.1a3dda	a5 23		lda $0823	                LDA ARGUMENT1
.1a3ddc	85 55		sta $0855	                STA MARG1           ; Save it to MARG1
.1a3dde	e2 20		sep #$20	            SEP #$20
.1a3de0	a9 2c		lda #$2c	                LDA #','
.1a3de2	85 37		sta $0837	                STA TARGETTOK
.1a3de4	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a3de7	90 27		bcc $1a3e10	                BCC launch          ; Not present... go ahead and launch
.1a3de9	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3dec	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3def	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3df2	c2 20		rep #$20	            REP #$20
.1a3df4	a5 23		lda $0823	                LDA ARGUMENT1
.1a3df6	85 59		sta $0859	                STA MARG2           ; Save it to MARG2
.1a3df8	e2 20		sep #$20	            SEP #$20
.1a3dfa	a9 2c		lda #$2c	                LDA #','
.1a3dfc	85 37		sta $0837	                STA TARGETTOK
.1a3dfe	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a3e01	90 0d		bcc $1a3e10	                BCC launch          ; Not present... go ahead and launch
.1a3e03	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3e06	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3e09	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a3e0c	c2 20		rep #$20	            REP #$20
.1a3e0e	a4 23		ldy $0823	                LDY ARGUMENT1
.1a3e10	a6 59		ldx $0859	launch          LDX MARG2
.1a3e12	a5 55		lda $0855	                LDA MARG1
.1a3e14	0b		phd		                PHD
.1a3e15	8b		phb		                PHB
.1a3e16	08		php		                PHP
.1a3e17	22 a2 08 00	jsl $0008a2	                JSL MJUMPINST       ; Call the subroutine indicated
.1a3e1b	28		plp		                PLP
.1a3e1c	ab		plb		                PLB
.1a3e1d	2b		pld		                PLD
.1a3e1e	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a3e21	28		plp		                PLP
.1a3e22	60		rts		            RTS
.1a3e23					type_err
.1a3e23	08		php		            PHP
.1a3e24	c2 20		rep #$20	            REP #$20
.1a3e26	48		pha		            PHA
.1a3e27	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3e2a	5b		tcd		            TCD
.1a3e2b	68		pla		            PLA
.1a3e2c	28		plp		            PLP
.1a3e2d	e2 20		sep #$20	            SEP #$20
.1a3e2f	a9 04		lda #$04	            LDA #ERR_TYPE
.1a3e31	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3e35	c2 20		rep #$20	            REP #$20
.1a3e37	29 ff 00	and #$00ff	            AND #$00FF
.1a3e3a	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3e3d	e2 20		sep #$20	            SEP #$20
.1a3e3f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3e42					S_DIM
.1a3e42	08		php		                PHP
.1a3e43	e2 20		sep #$20	            SEP #$20
.1a3e45	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3e48	20 1f 54	jsr $1a541f	            JSR VAR_FINDNAME
.1a3e4b	90 64		bcc $1a3eb1	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3e4d	a9 8f		lda #$8f	                LDA #TOK_LPAREN     ; Verify we have a left parenthesis
.1a3e4f	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a3e52	a9 01		lda #$01	                LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.1a3e54	20 28 1a	jsr $1a1a28	            JSR PHOPERATOR
.1a3e57	a2 01 00	ldx #$0001	                LDX #1
.1a3e5a	a9 00		lda #$00	                LDA #0
.1a3e5c	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Set the dimension count to 0
.1a3e60					dim_loop
.1a3e60	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a3e63	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a3e66	c2 20		rep #$20	            REP #$20
.1a3e68	a5 23		lda $0823	                LDA ARGUMENT1
.1a3e6a	9f 00 4d 00	sta $004d00,x	                STA @lARRIDXBUF,X   ; And store it in the buffer
.1a3e6e	e2 20		sep #$20	            SEP #$20
.1a3e70	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF     ; Add to the dimension count
.1a3e74	1a		inc a		                INC A
.1a3e75	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF
.1a3e79	30 55		bmi $1a3ed0	                BMI overflow        ; If > 127 throw an error
.1a3e7b	e8		inx		                INX
.1a3e7c	e8		inx		                INX
.1a3e7d	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3e80	a7 00		lda [$0800]	                LDA [BIP]           ; Check the character
.1a3e82	c9 2c		cmp #$2c	                CMP #','            ; Is it a comma?
.1a3e84	f0 25		beq $1a3eab	                BEQ skip_comma      ; Yes: get the next dimension
.1a3e86	c9 90		cmp #$90	                CMP #TOK_RPAREN     ; No: is it a ")"?
.1a3e88	d0 27		bne $1a3eb1	                BNE syntax_err      ; No: throw a syntax error
.1a3e8a	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3e8d	20 9d 66	jsr $1a669d	            JSR ARR_ALLOC
.1a3e90	c2 20		rep #$20	            REP #$20
.1a3e92	a5 c0		lda $08c0	                LDA CURRBLOCK       ; Set up the pointer to the array
.1a3e94	85 23		sta $0823	                STA ARGUMENT1
.1a3e96	e2 20		sep #$20	            SEP #$20
.1a3e98	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a3e9a	85 25		sta $0825	                STA ARGUMENT1+2
.1a3e9c	64 26		stz $0826	                STZ ARGUMENT1+3
.1a3e9e	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Get the type of the values
.1a3ea0	09 80		ora #$80	                ORA #$80            ; Make sure we change the type to array
.1a3ea2	85 ea		sta $08ea	                STA TOFINDTYPE      ; And save it back for searching
.1a3ea4	85 27		sta $0827	                STA ARGTYPE1        ; And for the value to set
.1a3ea6	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a3ea9	28		plp		                PLP
.1a3eaa	60		rts		            RTS
.1a3eab					skip_comma
.1a3eab	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3eae	4c 60 3e	jmp $1a3e60	                JMP dim_loop
.1a3eb1					syntax_err
.1a3eb1	08		php		            PHP
.1a3eb2	c2 20		rep #$20	            REP #$20
.1a3eb4	48		pha		            PHA
.1a3eb5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3eb8	5b		tcd		            TCD
.1a3eb9	68		pla		            PLA
.1a3eba	28		plp		            PLP
.1a3ebb	e2 20		sep #$20	            SEP #$20
.1a3ebd	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3ebf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3ec3	c2 20		rep #$20	            REP #$20
.1a3ec5	29 ff 00	and #$00ff	            AND #$00FF
.1a3ec8	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3ecb	e2 20		sep #$20	            SEP #$20
.1a3ecd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3ed0					overflow
.1a3ed0	08		php		            PHP
.1a3ed1	c2 20		rep #$20	            REP #$20
.1a3ed3	48		pha		            PHA
.1a3ed4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3ed7	5b		tcd		            TCD
.1a3ed8	68		pla		            PLA
.1a3ed9	28		plp		            PLP
.1a3eda	e2 20		sep #$20	            SEP #$20
.1a3edc	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a3ede	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3ee2	c2 20		rep #$20	            REP #$20
.1a3ee4	29 ff 00	and #$00ff	            AND #$00FF
.1a3ee7	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3eea	e2 20		sep #$20	            SEP #$20
.1a3eec	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3eef					S_READ
.1a3eef	08		php		                PHP
.1a3ef0					varloop
.1a3ef0	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3ef3	e2 20		sep #$20	            SEP #$20
.1a3ef5	a7 00		lda [$0800]	                LDA [BIP]
.1a3ef7	f0 28		beq $1a3f21	                BEQ done            ; If EOL, we're done
.1a3ef9	c9 3a		cmp #$3a	                CMP #':'
.1a3efb	f0 24		beq $1a3f21	                BEQ done            ; If colon, we're done
.1a3efd	20 e2 04	jsr $1a04e2	            JSR ISALPHA
.1a3f00	90 21		bcc $1a3f23	                BCC syntax_err      ; No: it's a syntax error
.1a3f02	20 1f 54	jsr $1a541f	            JSR VAR_FINDNAME
.1a3f05	90 1c		bcc $1a3f23	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3f07	20 42 3f	jsr $1a3f42	            JSR NEXTDATA
.1a3f0a	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a3f0d	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3f10	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.1a3f12	f0 0d		beq $1a3f21	                BEQ done            ; EOL? We're done
.1a3f14	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.1a3f16	f0 09		beq $1a3f21	                BEQ done
.1a3f18	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3f1a	d0 07		bne $1a3f23	                BNE syntax_err      ; Nope: syntax error
.1a3f1c	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3f1f	80 cf		bra $1a3ef0	                BRA varloop
.1a3f21	28		plp		done            PLP
.1a3f22	60		rts		            RTS
.1a3f23					syntax_err
.1a3f23	08		php		            PHP
.1a3f24	c2 20		rep #$20	            REP #$20
.1a3f26	48		pha		            PHA
.1a3f27	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3f2a	5b		tcd		            TCD
.1a3f2b	68		pla		            PLA
.1a3f2c	28		plp		            PLP
.1a3f2d	e2 20		sep #$20	            SEP #$20
.1a3f2f	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3f31	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3f35	c2 20		rep #$20	            REP #$20
.1a3f37	29 ff 00	and #$00ff	            AND #$00FF
.1a3f3a	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3f3d	e2 20		sep #$20	            SEP #$20
.1a3f3f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3f42					NEXTDATA
.1a3f42	08		php		                PHP
.1a3f43	a5 02		lda $0802	                LDA BIP+2           ; Save BIP
.1a3f45	85 42		sta $0842	                STA SAVEBIP+2
.1a3f47	a5 00		lda $0800	                LDA BIP
.1a3f49	85 40		sta $0840	                STA SAVEBIP
.1a3f4b	a5 1c		lda $081c	                LDA CURLINE+2       ; Save CURLINE
.1a3f4d	85 46		sta $0846	                STA SAVELINE+2
.1a3f4f	a5 1a		lda $081a	                LDA CURLINE
.1a3f51	85 44		sta $0844	                STA SAVELINE
.1a3f53	c2 20		rep #$20	            REP #$20
.1a3f55	a5 3a		lda $083a	                LDA DATABIP+2
.1a3f57	d0 04		bne $1a3f5d	                BNE data_set
.1a3f59	a5 38		lda $0838	                LDA DATABIP
.1a3f5b	f0 4e		beq $1a3fab	                BEQ scan_start      ; No: scan for a DATA statement
.1a3f5d	a5 38		lda $0838	data_set        LDA DATABIP         ; Move BIP to the DATA statement
.1a3f5f	85 00		sta $0800	                STA BIP
.1a3f61	a5 3a		lda $083a	                LDA DATABIP+2
.1a3f63	85 02		sta $0802	                STA BIP+2
.1a3f65	a5 3c		lda $083c	                LDA DATALINE        ; Set CURLINE from DATALINE
.1a3f67	85 1a		sta $081a	                STA CURLINE
.1a3f69	a5 3e		lda $083e	                LDA DATALINE+2
.1a3f6b	85 1c		sta $081c	                STA CURLINE+2
.1a3f6d	e2 20		sep #$20	            SEP #$20
.1a3f6f	a7 00		lda [$0800]	                LDA [BIP]           ; Check character at BIP
.1a3f71	f0 53		beq $1a3fc6	                BEQ scan_DATA       ; EOL? scan for a DATA statement
.1a3f73	c9 3a		cmp #$3a	                CMP #':'            ; Colon?
.1a3f75	f0 4f		beq $1a3fc6	                BEQ scan_DATA       ; ... scan for a DATA statement
.1a3f77	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3f79	d0 03		bne $1a3f7e	                BNE skip_parse      ; No: skip leading WS and try to parse
.1a3f7b	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a3f7e					skip_parse
.1a3f7e	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a3f81	a7 00		lda [$0800]	                LDA [BIP]
.1a3f83	c9 22		cmp #$22	                CMP #CHAR_DQUOTE    ; Is it a quote?
.1a3f85	f0 4e		beq $1a3fd5	                BEQ read_string     ; Yes: process the string
.1a3f87	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a3f8a	b0 4e		bcs $1a3fda	                BCS read_number     ; Yes: process the number
.1a3f8c					syntax_err
.1a3f8c	08		php		            PHP
.1a3f8d	c2 20		rep #$20	            REP #$20
.1a3f8f	48		pha		            PHA
.1a3f90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3f93	5b		tcd		            TCD
.1a3f94	68		pla		            PLA
.1a3f95	28		plp		            PLP
.1a3f96	e2 20		sep #$20	            SEP #$20
.1a3f98	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3f9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3f9e	c2 20		rep #$20	            REP #$20
.1a3fa0	29 ff 00	and #$00ff	            AND #$00FF
.1a3fa3	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a3fa6	e2 20		sep #$20	            SEP #$20
.1a3fa8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3fab					scan_start
.1a3fab	c2 20		rep #$20	            REP #$20
.1a3fad	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT    ; Point CURLINE to the first line
.1a3fb0	85 1a		sta $081a	                STA CURLINE
.1a3fb2	a9 16 00	lda #$0016	                LDA #`BASIC_BOT
.1a3fb5	85 1c		sta $081c	                STA CURLINE+2
.1a3fb7	18		clc		                CLC
.1a3fb8	a5 1a		lda $081a	                LDA CURLINE         ; Point BIP to the first possible token
.1a3fba	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.1a3fbd	85 00		sta $0800	                STA BIP
.1a3fbf	a5 1c		lda $081c	                LDA CURLINE+2
.1a3fc1	69 00 00	adc #$0000	                ADC #0
.1a3fc4	85 02		sta $0802	                STA BIP+2
.1a3fc6					scan_data
.1a3fc6	e2 20		sep #$20	            SEP #$20
.1a3fc8	a9 80		lda #$80	                LDA #$80            ; We don't want to process nesting
.1a3fca	85 35		sta $0835	                STA SKIPNEST
.1a3fcc	a9 ab		lda #$ab	                LDA #TOK_DATA       ; We're looking for a DATA token
.1a3fce	85 37		sta $0837	                STA TARGETTOK
.1a3fd0	20 74 21	jsr $1a2174	            JSR SKIPTOTOK
.1a3fd3	80 a9		bra $1a3f7e	                BRA skip_parse
.1a3fd5					read_string
.1a3fd5	20 18 1c	jsr $1a1c18	            JSR EVALSTRING
.1a3fd8	80 03		bra $1a3fdd	                BRA done
.1a3fda					read_number
.1a3fda	20 0a 1b	jsr $1a1b0a	            JSR EVALNUMBER
.1a3fdd					done
.1a3fdd	c2 20		rep #$20	            REP #$20
.1a3fdf	a5 00		lda $0800	                LDA BIP             ; Save BIP to DATABIP
.1a3fe1	85 38		sta $0838	                STA DATABIP
.1a3fe3	a5 02		lda $0802	                LDA BIP+2
.1a3fe5	85 3a		sta $083a	                STA DATABIP+2
.1a3fe7	a5 1a		lda $081a	                LDA CURLINE         ; Save CURLINE to DATALINE
.1a3fe9	85 3c		sta $083c	                STA DATALINE
.1a3feb	a5 1c		lda $081c	                LDA CURLINE+2
.1a3fed	85 3e		sta $083e	                STA DATALINE+2
.1a3fef	a5 44		lda $0844	                LDA SAVELINE        ; Restore CURLINE
.1a3ff1	85 1a		sta $081a	                STA CURLINE
.1a3ff3	a5 46		lda $0846	                LDA SAVELINE+2
.1a3ff5	85 1c		sta $081c	                STA CURLINE+2
.1a3ff7	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.1a3ff9	85 00		sta $0800	                STA BIP
.1a3ffb	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3ffd	85 02		sta $0802	                STA BIP+2
.1a3fff	28		plp		                PLP
.1a4000	60		rts		            RTS
.1a4001					S_DATA
.1a4001	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a4004	60		rts		            RTS
.1a4005					S_RESTORE
.1a4005	64 38		stz $0838	                STZ DATABIP         ; Just set DATABIP to 0
.1a4007	64 3a		stz $083a	                STZ DATABIP+2       ; The next READ will move it to the first DATA
.1a4009	64 3c		stz $083c	                STZ DATALINE        ; Set DATALINE to 0
.1a400b	64 3e		stz $083e	                STZ DATALINE+2
.1a400d	60		rts		            RTS
.1a400e					S_CLS
.1a400e	20 24 00	jsr $1a0024	            JSR CLSCREEN
.1a4011	60		rts		            RTS
.1a4012					S_POKEL
.1a4012	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4015	c2 20		rep #$20	            REP #$20
.1a4017	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a4019	48		pha		                PHA
.1a401a	a5 23		lda $0823	                LDA ARGUMENT1
.1a401c	48		pha		                PHA
.1a401d	e2 20		sep #$20	            SEP #$20
.1a401f	a7 00		lda [$0800]	                LDA [BIP]
.1a4021	c9 2c		cmp #$2c	                CMP #','
.1a4023	d0 22		bne $1a4047	                BNE syntax_err
.1a4025	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4028	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a402b	c2 20		rep #$20	            REP #$20
.1a402d	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a402f	d0 35		bne $1a4066	                BNE range_err
.1a4031	68		pla		                PLA                 ; Pull the target address from the stack
.1a4032	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a4034	68		pla		                PLA
.1a4035	85 0a		sta $080a	                STA INDEX+2
.1a4037	c2 20		rep #$20	            REP #$20
.1a4039	a5 23		lda $0823	                LDA ARGUMENT1
.1a403b	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a403d	e2 20		sep #$20	            SEP #$20
.1a403f	a0 02 00	ldy #$0002	                LDY #2
.1a4042	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4044	97 08		sta [$0808],y	                STA [INDEX],Y
.1a4046	60		rts		            RTS
.1a4047					syntax_err
.1a4047	08		php		            PHP
.1a4048	c2 20		rep #$20	            REP #$20
.1a404a	48		pha		            PHA
.1a404b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a404e	5b		tcd		            TCD
.1a404f	68		pla		            PLA
.1a4050	28		plp		            PLP
.1a4051	e2 20		sep #$20	            SEP #$20
.1a4053	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4055	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4059	c2 20		rep #$20	            REP #$20
.1a405b	29 ff 00	and #$00ff	            AND #$00FF
.1a405e	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4061	e2 20		sep #$20	            SEP #$20
.1a4063	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4066					range_err
.1a4066	08		php		            PHP
.1a4067	c2 20		rep #$20	            REP #$20
.1a4069	48		pha		            PHA
.1a406a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a406d	5b		tcd		            TCD
.1a406e	68		pla		            PLA
.1a406f	28		plp		            PLP
.1a4070	e2 20		sep #$20	            SEP #$20
.1a4072	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4074	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4078	c2 20		rep #$20	            REP #$20
.1a407a	29 ff 00	and #$00ff	            AND #$00FF
.1a407d	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4080	e2 20		sep #$20	            SEP #$20
.1a4082	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4085					S_POKEW
.1a4085	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4088	c2 20		rep #$20	            REP #$20
.1a408a	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a408c	48		pha		                PHA
.1a408d	a5 23		lda $0823	                LDA ARGUMENT1
.1a408f	48		pha		                PHA
.1a4090	e2 20		sep #$20	            SEP #$20
.1a4092	a7 00		lda [$0800]	                LDA [BIP]
.1a4094	c9 2c		cmp #$2c	                CMP #','
.1a4096	d0 19		bne $1a40b1	                BNE syntax_err
.1a4098	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a409b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a409e	c2 20		rep #$20	            REP #$20
.1a40a0	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a40a2	d0 2c		bne $1a40d0	                BNE range_err
.1a40a4	68		pla		                PLA                 ; Pull the target address from the stack
.1a40a5	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a40a7	68		pla		                PLA
.1a40a8	85 0a		sta $080a	                STA INDEX+2
.1a40aa	c2 20		rep #$20	            REP #$20
.1a40ac	a5 23		lda $0823	                LDA ARGUMENT1
.1a40ae	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a40b0	60		rts		            RTS
.1a40b1					syntax_err
.1a40b1	08		php		            PHP
.1a40b2	c2 20		rep #$20	            REP #$20
.1a40b4	48		pha		            PHA
.1a40b5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a40b8	5b		tcd		            TCD
.1a40b9	68		pla		            PLA
.1a40ba	28		plp		            PLP
.1a40bb	e2 20		sep #$20	            SEP #$20
.1a40bd	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a40bf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a40c3	c2 20		rep #$20	            REP #$20
.1a40c5	29 ff 00	and #$00ff	            AND #$00FF
.1a40c8	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a40cb	e2 20		sep #$20	            SEP #$20
.1a40cd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a40d0					range_err
.1a40d0	08		php		            PHP
.1a40d1	c2 20		rep #$20	            REP #$20
.1a40d3	48		pha		            PHA
.1a40d4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a40d7	5b		tcd		            TCD
.1a40d8	68		pla		            PLA
.1a40d9	28		plp		            PLP
.1a40da	e2 20		sep #$20	            SEP #$20
.1a40dc	a9 09		lda #$09	            LDA #ERR_RANGE
.1a40de	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a40e2	c2 20		rep #$20	            REP #$20
.1a40e4	29 ff 00	and #$00ff	            AND #$00FF
.1a40e7	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a40ea	e2 20		sep #$20	            SEP #$20
.1a40ec	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a40ef					S_POKE
.1a40ef	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a40f2	c2 20		rep #$20	            REP #$20
.1a40f4	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a40f6	48		pha		                PHA
.1a40f7	a5 23		lda $0823	                LDA ARGUMENT1
.1a40f9	48		pha		                PHA
.1a40fa	e2 20		sep #$20	            SEP #$20
.1a40fc	a7 00		lda [$0800]	                LDA [BIP]
.1a40fe	c9 2c		cmp #$2c	                CMP #','
.1a4100	d0 1f		bne $1a4121	                BNE syntax_err
.1a4102	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4105	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4108	e2 20		sep #$20	            SEP #$20
.1a410a	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Make sure the value is from 0 - 255
.1a410c	d0 32		bne $1a4140	                BNE range_err
.1a410e	c2 20		rep #$20	            REP #$20
.1a4110	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4112	d0 2c		bne $1a4140	                BNE range_err
.1a4114	68		pla		                PLA                 ; Pull the target address from the stack
.1a4115	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a4117	68		pla		                PLA
.1a4118	85 0a		sta $080a	                STA INDEX+2
.1a411a	e2 20		sep #$20	            SEP #$20
.1a411c	a5 23		lda $0823	                LDA ARGUMENT1
.1a411e	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a4120	60		rts		            RTS
.1a4121					syntax_err
.1a4121	08		php		            PHP
.1a4122	c2 20		rep #$20	            REP #$20
.1a4124	48		pha		            PHA
.1a4125	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4128	5b		tcd		            TCD
.1a4129	68		pla		            PLA
.1a412a	28		plp		            PLP
.1a412b	e2 20		sep #$20	            SEP #$20
.1a412d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a412f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4133	c2 20		rep #$20	            REP #$20
.1a4135	29 ff 00	and #$00ff	            AND #$00FF
.1a4138	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a413b	e2 20		sep #$20	            SEP #$20
.1a413d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4140					range_err
.1a4140	08		php		            PHP
.1a4141	c2 20		rep #$20	            REP #$20
.1a4143	48		pha		            PHA
.1a4144	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4147	5b		tcd		            TCD
.1a4148	68		pla		            PLA
.1a4149	28		plp		            PLP
.1a414a	e2 20		sep #$20	            SEP #$20
.1a414c	a9 09		lda #$09	            LDA #ERR_RANGE
.1a414e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4152	c2 20		rep #$20	            REP #$20
.1a4154	29 ff 00	and #$00ff	            AND #$00FF
.1a4157	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a415a	e2 20		sep #$20	            SEP #$20
.1a415c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a415f					S_STOP
.1a415f	08		php		            PHP
.1a4160	c2 20		rep #$20	            REP #$20
.1a4162	48		pha		            PHA
.1a4163	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4166	5b		tcd		            TCD
.1a4167	68		pla		            PLA
.1a4168	28		plp		            PLP
.1a4169	e2 20		sep #$20	            SEP #$20
.1a416b	a9 01		lda #$01	            LDA #ERR_BREAK
.1a416d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4171	c2 20		rep #$20	            REP #$20
.1a4173	29 ff 00	and #$00ff	            AND #$00FF
.1a4176	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4179	e2 20		sep #$20	            SEP #$20
.1a417b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a417e					S_REM
.1a417e	08		php		                PHP
.1a417f	e2 20		sep #$20	            SEP #$20
.1a4181	a7 00		lda [$0800]	rem_loop        LDA [BIP]
.1a4183	f0 05		beq $1a418a	                BEQ done
.1a4185	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4188	80 f7		bra $1a4181	                BRA rem_loop
.1a418a	28		plp		done            PLP
.1a418b	60		rts		            RTS
.1a418c					S_EXIT
.1a418c	08		php		                PHP
.1a418d	28		plp		                PLP
.1a418e	60		rts		            RTS
.1a418f					S_DO
.1a418f	08		php		                PHP
.1a4190	28		plp		                PLP
.1a4191	60		rts		            RTS
.0000					DO_RECORD
>0000					BIP             .dword  ?
>0004					CURLINE         .dword  ?
.1a4192					S_LOOP
.1a4192	08		php		                PHP
.1a4193	28		plp		                PLP
.1a4194	60		rts		            RTS
.1a4195					S_FOR
.1a4195	08		php		                PHP
.1a4196	c2 20		rep #$20	            REP #$20
.1a4198	a5 1c		lda $081c	                LDA CURLINE+2
.1a419a	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a419d	a5 1a		lda $081a	                LDA CURLINE
.1a419f	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a41a2	a5 02		lda $0802	                LDA BIP+2           ; Save current BIP
.1a41a4	48		pha		                PHA
.1a41a5	a5 00		lda $0800	                LDA BIP
.1a41a7	48		pha		                PHA
.1a41a8	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a41ab	a5 02		lda $0802	                LDA BIP+2           ; Save the BIP for the next statement to the RETURN stack
.1a41ad	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a41b0	a5 00		lda $0800	                LDA BIP
.1a41b2	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a41b5	68		pla		                PLA                 ; Restore the original BIP
.1a41b6	85 00		sta $0800	                STA BIP
.1a41b8	68		pla		                PLA
.1a41b9	85 02		sta $0802	                STA BIP+2
.1a41bb	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a41be					get_name
.1a41be	20 1f 54	jsr $1a541f	            JSR VAR_FINDNAME
.1a41c1	b0 1f		bcs $1a41e2	                BCS push_name       ; If we didn't find a name, thrown an error
.1a41c3	08		php		            PHP
.1a41c4	c2 20		rep #$20	            REP #$20
.1a41c6	48		pha		            PHA
.1a41c7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a41ca	5b		tcd		            TCD
.1a41cb	68		pla		            PLA
.1a41cc	28		plp		            PLP
.1a41cd	e2 20		sep #$20	            SEP #$20
.1a41cf	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a41d1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a41d5	c2 20		rep #$20	            REP #$20
.1a41d7	29 ff 00	and #$00ff	            AND #$00FF
.1a41da	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a41dd	e2 20		sep #$20	            SEP #$20
.1a41df	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a41e2					push_name
.1a41e2	e2 20		sep #$20	            SEP #$20
.1a41e4	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; To the return stack
.1a41e6	20 3c 1e	jsr $1a1e3c	            JSR PHRETURNB
.1a41e9	a5 e9		lda $08e9	                LDA TOFIND+2
.1a41eb	20 3c 1e	jsr $1a1e3c	            JSR PHRETURNB
.1a41ee	c2 20		rep #$20	            REP #$20
.1a41f0	a5 e7		lda $08e7	                LDA TOFIND
.1a41f2	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a41f5					else
.1a41f5	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a41f8	e2 20		sep #$20	            SEP #$20
.1a41fa	a7 00		lda [$0800]	                LDA [BIP]
.1a41fc	c9 8a		cmp #$8a	                CMP #TOK_EQ
.1a41fe	d0 6a		bne $1a426a	                BNE syntax_err      ; If not found: signal an syntax error
.1a4200	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Verify type of variable
.1a4202	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; Is it integer?
.1a4204	f0 04		beq $1a420a	                BEQ process_initial ; Yes: it's ok
.1a4206	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; Is it floating point?
.1a4208	f0 00		beq $1a420a	                BEQ process_initial ; Yes: it's ok
.1a420a					process_initial
.1a420a	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a420d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4210	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a4213	e2 20		sep #$20	            SEP #$20
.1a4215	a9 9c		lda #$9c	                LDA #TOK_TO         ; Expect the next token to be TO
.1a4217	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a421a	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a421d	c2 20		rep #$20	            REP #$20
.1a421f	a5 27		lda $0827	                LDA ARGTYPE1
.1a4221	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4224	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4226	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4229	a5 23		lda $0823	                LDA ARGUMENT1
.1a422b	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a422e	e2 20		sep #$20	            SEP #$20
.1a4230	a9 9d		lda #$9d	                LDA #TOK_STEP
.1a4232	85 37		sta $0837	                STA TARGETTOK
.1a4234	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a4237	90 1b		bcc $1a4254	                BCC default_inc     ; Not found: set a default increment of 1
.1a4239	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a423c	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a423f	e2 20		sep #$20	            SEP #$20
.1a4241	a5 27		lda $0827	                LDA ARGTYPE1        ; Push the result as the increment
.1a4243	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4246	c2 20		rep #$20	            REP #$20
.1a4248	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a424a	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a424d	a5 23		lda $0823	                LDA ARGUMENT1
.1a424f	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4252	80 14		bra $1a4268	                BRA done
.1a4254					default_inc
.1a4254	c2 20		rep #$20	            REP #$20
.1a4256	a9 00 00	lda #$0000	                LDA #TYPE_INTEGER
.1a4259	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a425c	a9 00 00	lda #$0000	                LDA #0
.1a425f	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4262	a9 01 00	lda #$0001	                LDA #1
.1a4265	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4268	28		plp		done            PLP
.1a4269	60		rts		            RTS
.1a426a					syntax_err
.1a426a	08		php		            PHP
.1a426b	c2 20		rep #$20	            REP #$20
.1a426d	48		pha		            PHA
.1a426e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4271	5b		tcd		            TCD
.1a4272	68		pla		            PLA
.1a4273	28		plp		            PLP
.1a4274	e2 20		sep #$20	            SEP #$20
.1a4276	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4278	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a427c	c2 20		rep #$20	            REP #$20
.1a427e	29 ff 00	and #$00ff	            AND #$00FF
.1a4281	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4284	e2 20		sep #$20	            SEP #$20
.1a4286	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.0000					FOR_RECORD
>0000					INCREMENT       .dword  ?
>0004					INCTYPE         .word   ?
>0006					FINAL           .dword  ?
>000a					FINALTYPE       .word   ?
>000c					VARIBLE         .dword  ?
>0010					VARTYPE         .word   ?
>0012					BIP             .dword  ?
>0016					CURLINE         .dword  ?
.1a4289					S_NEXT
.1a4289	08		php		                PHP
.1a428a	8b		phb		                PHB
.1a428b	08		php		            PHP
.1a428c	e2 20		sep #$20	            SEP #$20
.1a428e	48		pha		            PHA
.1a428f	a9 00		lda #$00	            LDA #0
.1a4291	48		pha		            PHA
.1a4292	ab		plb		            PLB
.1a4293	68		pla		            PLA
.1a4294	28		plp		            PLP
.1a4295	08		php		            PHP
.1a4296	c2 20		rep #$20	            REP #$20
.1a4298	48		pha		            PHA
.1a4299	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a429c	5b		tcd		            TCD
.1a429d	68		pla		            PLA
.1a429e	28		plp		            PLP
.1a429f	c2 30		rep #$30	            REP #$30
.1a42a1	a4 33		ldy $0833	                LDY RETURNSP                    ; Y := pointer to first byte of the FOR record
.1a42a3	c8		iny		                INY                             ; RETURNSP points to the first free slot, so move up 2 bytes
.1a42a4	c8		iny		                INY
.1a42a5	c2 20		rep #$20	            REP #$20
.1a42a7	b9 0c 00	lda $000c,y	                LDA #FOR_RECORD.VARIBLE,B,Y     ; TOFIND := FOR_RECORD.VARIABLE
.1a42aa	85 e7		sta $08e7	                STA TOFIND
.1a42ac	b9 0e 00	lda $000e,y	                LDA #FOR_RECORD.VARIBLE+2,B,Y
.1a42af	e2 20		sep #$20	            SEP #$20
.1a42b1	85 e9		sta $08e9	                STA TOFIND+2
.1a42b3	b9 10 00	lda $0010,y	                LDA #FOR_RECORD.VARTYPE,B,Y
.1a42b6	85 ea		sta $08ea	                STA TOFINDTYPE
.1a42b8	c2 20		rep #$20	            REP #$20
.1a42ba	5a		phy		                PHY
.1a42bb	20 20 52	jsr $1a5220	            JSR VAR_REF
.1a42be	7a		ply		                PLY
.1a42bf	c2 20		rep #$20	            REP #$20
.1a42c1	b9 00 00	lda $0000,y	                LDA #FOR_RECORD.INCREMENT,B,Y   ; ARGUMENT2 := FOR_RECORD.INCREMENT
.1a42c4	85 29		sta $0829	                STA ARGUMENT2
.1a42c6	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y
.1a42c9	85 2b		sta $082b	                STA ARGUMENT2+2
.1a42cb	e2 20		sep #$20	            SEP #$20
.1a42cd	b9 04 00	lda $0004,y	                LDA #FOR_RECORD.INCTYPE,B,Y
.1a42d0	85 2d		sta $082d	                STA ARGTYPE2
.1a42d2	c2 20		rep #$20	            REP #$20
.1a42d4	5a		phy		                PHY
.1a42d5	20 e2 27	jsr $1a27e2	            JSR OP_PLUS
.1a42d8	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a42db	7a		ply		                PLY
.1a42dc	c2 20		rep #$20	            REP #$20
.1a42de	b9 06 00	lda $0006,y	                LDA #FOR_RECORD.FINAL,B,Y       ; ARGUMENT2 := FOR_RECORD.FINAL
.1a42e1	85 29		sta $0829	                STA ARGUMENT2
.1a42e3	b9 08 00	lda $0008,y	                LDA #FOR_RECORD.FINAL+2,B,Y
.1a42e6	85 2b		sta $082b	                STA ARGUMENT2+2
.1a42e8	e2 20		sep #$20	            SEP #$20
.1a42ea	b9 0a 00	lda $000a,y	                LDA #FOR_RECORD.FINALTYPE,B,Y
.1a42ed	85 2d		sta $082d	                STA ARGTYPE2
.1a42ef	c2 20		rep #$20	            REP #$20
.1a42f1	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y ; Check the increment's sign
.1a42f4	30 0a		bmi $1a4300	                BMI going_down
.1a42f6					going_up
.1a42f6	20 6b 2a	jsr $1a2a6b	            JSR OP_LTE
.1a42f9	20 1a 06	jsr $1a061a	            JSR IS_ARG1_Z
.1a42fc	f0 28		beq $1a4326	                BEQ end_loop                    ; No: end the loop
.1a42fe	80 08		bra $1a4308	                BRA loop_back                   ; Yes: loop back
.1a4300					going_down
.1a4300	20 2b 2a	jsr $1a2a2b	            JSR OP_GTE
.1a4303	20 1a 06	jsr $1a061a	            JSR IS_ARG1_Z
.1a4306	f0 1e		beq $1a4326	                BEQ end_loop                    ; No: end the loop
.1a4308					loop_back
.1a4308	c2 20		rep #$20	            REP #$20
.1a430a	b9 12 00	lda $0012,y	                LDA #FOR_RECORD.BIP,B,Y
.1a430d	85 00		sta $0800	                STA BIP
.1a430f	b9 14 00	lda $0014,y	                LDA #FOR_RECORD.BIP+2,B,Y
.1a4312	85 02		sta $0802	                STA BIP+2
.1a4314	b9 16 00	lda $0016,y	                LDA #FOR_RECORD.CURLINE,B,Y     ; CURLINE := FOR_RECORD.CURLINE
.1a4317	85 1a		sta $081a	                STA CURLINE
.1a4319	b9 18 00	lda $0018,y	                LDA #FOR_RECORD.CURLINE+2,B,Y
.1a431c	85 1c		sta $081c	                STA CURLINE+2
.1a431e	e2 20		sep #$20	            SEP #$20
.1a4320	a9 03		lda #$03	                LDA #EXEC_RETURN
.1a4322	85 dc		sta $08dc	                STA EXECACTION
.1a4324	80 17		bra $1a433d	                BRA done
.1a4326					end_loop
.1a4326	a2 23 08	ldx #$0823	                LDX #ARGUMENT1
.1a4329	20 e9 19	jsr $1a19e9	            JSR PLARGUMENT
.1a432c	c2 20		rep #$20	            REP #$20
.1a432e	18		clc		                CLC
.1a432f	a5 33		lda $0833	                LDA RETURNSP
.1a4331	69 1a 00	adc #$001a	                ADC #size(FOR_RECORD)           ; Move pointer by number of bytes in a FOR record
.1a4334	85 33		sta $0833	                STA RETURNSP
.1a4336	a5 35		lda $0835	                LDA RETURNSP+2
.1a4338	69 00 00	adc #$0000	                ADC #0
.1a433b	85 35		sta $0835	                STA RETURNSP+2
.1a433d	ab		plb		done            PLB
.1a433e	28		plp		                PLP
.1a433f	60		rts		            RTS
.1a4340					S_GOSUB
.1a4340	08		php		                PHP
.1a4341	a5 1a		lda $081a	                LDA CURLINE                 ; Save the current line for later
.1a4343	48		pha		                PHA
.1a4344	a5 1c		lda $081c	                LDA CURLINE+2
.1a4346	48		pha		                PHA
.1a4347	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a434a	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a434d	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.1a434f	f0 26		beq $1a4377	                BEQ syntax_err              ; If 0, no number was found... syntax error
.1a4351	20 1c 24	jsr $1a241c	            JSR FINDLINE
.1a4354	90 42		bcc $1a4398	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a4356	e2 20		sep #$20	            SEP #$20
.1a4358	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a435a	85 dc		sta $08dc	                STA EXECACTION
.1a435c	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a435f	c2 20		rep #$20	            REP #$20
.1a4361	68		pla		                PLA                         ; Save the old value of CURLINE to the RETURN stack
.1a4362	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4365	68		pla		                PLA
.1a4366	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4369	a5 02		lda $0802	                LDA BIP+2                   ; Save the BASIC Instruction Pointer to the RETURN stack
.1a436b	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a436e	a5 00		lda $0800	                LDA BIP
.1a4370	20 25 1e	jsr $1a1e25	            JSR PHRETURN
.1a4373	e6 31		inc $0831	                INC GOSUBDEPTH              ; Increase the count of GOSUBs on the stack
.1a4375	28		plp		                PLP
.1a4376	60		rts		            RTS
.1a4377	68		pla		syntax_err      PLA
.1a4378	68		pla		                PLA
.1a4379	08		php		            PHP
.1a437a	c2 20		rep #$20	            REP #$20
.1a437c	48		pha		            PHA
.1a437d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4380	5b		tcd		            TCD
.1a4381	68		pla		            PLA
.1a4382	28		plp		            PLP
.1a4383	e2 20		sep #$20	            SEP #$20
.1a4385	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4387	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a438b	c2 20		rep #$20	            REP #$20
.1a438d	29 ff 00	and #$00ff	            AND #$00FF
.1a4390	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4393	e2 20		sep #$20	            SEP #$20
.1a4395	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4398	68		pla		not_found       PLA
.1a4399	68		pla		                PLA
.1a439a	08		php		            PHP
.1a439b	c2 20		rep #$20	            REP #$20
.1a439d	48		pha		            PHA
.1a439e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a43a1	5b		tcd		            TCD
.1a43a2	68		pla		            PLA
.1a43a3	28		plp		            PLP
.1a43a4	e2 20		sep #$20	            SEP #$20
.1a43a6	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a43a8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a43ac	c2 20		rep #$20	            REP #$20
.1a43ae	29 ff 00	and #$00ff	            AND #$00FF
.1a43b1	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a43b4	e2 20		sep #$20	            SEP #$20
.1a43b6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a43b9					S_RETURN
.1a43b9	08		php		                PHP
.1a43ba	c2 30		rep #$30	            REP #$30
.1a43bc	a5 31		lda $0831	                LDA GOSUBDEPTH              ; Check that there is at least on GOSUB on the stack
.1a43be	f0 1e		beq $1a43de	                BEQ underflow               ; No? It's a stack underflow error
.1a43c0	20 47 1e	jsr $1a1e47	            JSR PLRETURN
.1a43c3	85 00		sta $0800	                STA BIP
.1a43c5	20 47 1e	jsr $1a1e47	            JSR PLRETURN
.1a43c8	85 02		sta $0802	                STA BIP+2
.1a43ca	20 47 1e	jsr $1a1e47	            JSR PLRETURN
.1a43cd	85 1a		sta $081a	                STA CURLINE
.1a43cf	20 47 1e	jsr $1a1e47	            JSR PLRETURN
.1a43d2	85 1c		sta $081c	                STA CURLINE+2
.1a43d4	c6 31		dec $0831	                DEC GOSUBDEPTH              ; Indicate we've popped that GOSUB off the stack
.1a43d6	e2 20		sep #$20	            SEP #$20
.1a43d8	a9 03		lda #$03	                LDA #EXEC_RETURN
.1a43da	85 dc		sta $08dc	                STA EXECACTION
.1a43dc	28		plp		                PLP
.1a43dd	60		rts		            RTS
.1a43de					underflow
.1a43de	08		php		            PHP
.1a43df	c2 20		rep #$20	            REP #$20
.1a43e1	48		pha		            PHA
.1a43e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a43e5	5b		tcd		            TCD
.1a43e6	68		pla		            PLA
.1a43e7	28		plp		            PLP
.1a43e8	e2 20		sep #$20	            SEP #$20
.1a43ea	a9 07		lda #$07	            LDA #ERR_STACKUNDER
.1a43ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a43f0	c2 20		rep #$20	            REP #$20
.1a43f2	29 ff 00	and #$00ff	            AND #$00FF
.1a43f5	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a43f8	e2 20		sep #$20	            SEP #$20
.1a43fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a43fd					S_IF
.1a43fd	08		php		                PHP
.1a43fe	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4401	20 1a 06	jsr $1a061a	            JSR IS_ARG1_Z
.1a4404	f0 1c		beq $1a4422	                BEQ is_false                ; If so, handle the FALSE case
.1a4406	e2 20		sep #$20	            SEP #$20
.1a4408	a9 97		lda #$97	                LDA #TOK_THEN               ; Verify that the next token is THEN and eat it
.1a440a	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a440d	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a4410	20 1a 06	jsr $1a061a	            JSR IS_ARG1_Z
.1a4413	f0 12		beq $1a4427	                BEQ syntax_err              ; If not, we have a syntax error
.1a4415	20 1c 24	jsr $1a241c	            JSR FINDLINE
.1a4418	90 2c		bcc $1a4446	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a441a	e2 20		sep #$20	            SEP #$20
.1a441c	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a441e	85 dc		sta $08dc	                STA EXECACTION
.1a4420	80 03		bra $1a4425	                BRA done
.1a4422					is_false
.1a4422	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a4425	28		plp		done            PLP
.1a4426	60		rts		            RTS
.1a4427					syntax_err
.1a4427	08		php		            PHP
.1a4428	c2 20		rep #$20	            REP #$20
.1a442a	48		pha		            PHA
.1a442b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a442e	5b		tcd		            TCD
.1a442f	68		pla		            PLA
.1a4430	28		plp		            PLP
.1a4431	e2 20		sep #$20	            SEP #$20
.1a4433	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4435	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4439	c2 20		rep #$20	            REP #$20
.1a443b	29 ff 00	and #$00ff	            AND #$00FF
.1a443e	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4441	e2 20		sep #$20	            SEP #$20
.1a4443	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4446					not_found
.1a4446	08		php		            PHP
.1a4447	c2 20		rep #$20	            REP #$20
.1a4449	48		pha		            PHA
.1a444a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a444d	5b		tcd		            TCD
.1a444e	68		pla		            PLA
.1a444f	28		plp		            PLP
.1a4450	e2 20		sep #$20	            SEP #$20
.1a4452	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a4454	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4458	c2 20		rep #$20	            REP #$20
.1a445a	29 ff 00	and #$00ff	            AND #$00FF
.1a445d	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4460	e2 20		sep #$20	            SEP #$20
.1a4462	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4465					S_END
.1a4465	08		php		                PHP
.1a4466	e2 20		sep #$20	            SEP #$20
.1a4468	a9 01		lda #$01	                LDA #EXEC_STOP
.1a446a	85 dc		sta $08dc	                STA EXECACTION
.1a446c	28		plp		                PLP
.1a446d	60		rts		            RTS
.1a446e					S_GOTO
.1a446e	08		php		                PHP
.1a446f	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a4472	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a4475	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.1a4477	f0 0d		beq $1a4486	                BEQ syntax_err              ; If 0, no number was found... syntax error
.1a4479	20 1c 24	jsr $1a241c	            JSR FINDLINE
.1a447c	90 27		bcc $1a44a5	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a447e	e2 20		sep #$20	            SEP #$20
.1a4480	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a4482	85 dc		sta $08dc	                STA EXECACTION
.1a4484	28		plp		                PLP
.1a4485	60		rts		            RTS
.1a4486					syntax_err
.1a4486	08		php		            PHP
.1a4487	c2 20		rep #$20	            REP #$20
.1a4489	48		pha		            PHA
.1a448a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a448d	5b		tcd		            TCD
.1a448e	68		pla		            PLA
.1a448f	28		plp		            PLP
.1a4490	e2 20		sep #$20	            SEP #$20
.1a4492	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4494	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4498	c2 20		rep #$20	            REP #$20
.1a449a	29 ff 00	and #$00ff	            AND #$00FF
.1a449d	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a44a0	e2 20		sep #$20	            SEP #$20
.1a44a2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a44a5					not_found
.1a44a5	08		php		            PHP
.1a44a6	c2 20		rep #$20	            REP #$20
.1a44a8	48		pha		            PHA
.1a44a9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a44ac	5b		tcd		            TCD
.1a44ad	68		pla		            PLA
.1a44ae	28		plp		            PLP
.1a44af	e2 20		sep #$20	            SEP #$20
.1a44b1	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a44b3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a44b7	c2 20		rep #$20	            REP #$20
.1a44b9	29 ff 00	and #$00ff	            AND #$00FF
.1a44bc	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a44bf	e2 20		sep #$20	            SEP #$20
.1a44c1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a44c4					S_CLR
.1a44c4	20 8b 19	jsr $1a198b	            JSR INITEVALSP
.1a44c7	20 ab 10	jsr $1a10ab	            JSR INITHEAP
.1a44ca	20 1f 51	jsr $1a511f	            JSR INITVARS
.1a44cd	60		rts		            RTS
.1a44ce					S_LET
.1a44ce	08		php		                PHP
.1a44cf	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.1a44d1	10 03		bpl $1a44d6	                BPL get_name        ; If it's not a token, try to find the variable name
.1a44d3	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a44d6					get_name
.1a44d6	20 1f 54	jsr $1a541f	            JSR VAR_FINDNAME
.1a44d9	b0 03		bcs $1a44de	                BCS check_array     ; If we didn't find a name, thrown an error
.1a44db	4c 45 45	jmp $1a4545	                JMP syntax_err
.1a44de					check_array
.1a44de	e2 20		sep #$20	            SEP #$20
.1a44e0	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Save the variable name for later
.1a44e2	48		pha		                PHA                 ; (it will get over-written by variable references)
.1a44e3	a5 e9		lda $08e9	                LDA TOFIND+2
.1a44e5	48		pha		                PHA
.1a44e6	a5 e8		lda $08e8	                LDA TOFIND+1
.1a44e8	48		pha		                PHA
.1a44e9	a5 e7		lda $08e7	                LDA TOFIND
.1a44eb	48		pha		                PHA
.1a44ec	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a44ef	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it a "("
.1a44f1	d0 0e		bne $1a4501	                BNE get_value       ; No: it's a scalar assignment, look for the "="
.1a44f3	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a44f5	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a44f8	a9 00		lda #$00	                LDA #0
.1a44fa	8f 00 4d 00	sta $004d00	                STA @l ARRIDXBUF    ; Blank out the array index buffer
.1a44fe	20 0d 1b	jsr $1a1b0d	            JSR ARR_GETIDX
.1a4501					get_value
.1a4501	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a4504	e2 20		sep #$20	            SEP #$20
.1a4506	a7 00		lda [$0800]	                LDA [BIP]
.1a4508	c9 8a		cmp #$8a	                CMP #TOK_EQ
.1a450a	f0 03		beq $1a450f	                BEQ found_eq        ; If not found: signal an syntax error
.1a450c	4c 45 45	jmp $1a4545	                JMP syntax_err
.1a450f					found_eq
.1a450f	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4512	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4515	68		pla		                PLA                 ; Restore the variable name
.1a4516	85 e7		sta $08e7	                STA TOFIND
.1a4518	68		pla		                PLA
.1a4519	85 e8		sta $08e8	                STA TOFIND+1
.1a451b	68		pla		                PLA
.1a451c	85 e9		sta $08e9	                STA TOFIND+2
.1a451e	68		pla		                PLA
.1a451f	85 ea		sta $08ea	                STA TOFINDTYPE
.1a4521	29 80		and #$80	                AND #$80            ; Is it an array we're setting?
.1a4523	f0 1b		beq $1a4540	                BEQ set_scalar      ; No: do a scalar variable set
.1a4525	20 92 51	jsr $1a5192	            JSR VAR_FIND
.1a4528	90 3a		bcc $1a4564	                BCC notfound_err
.1a452a	c2 20		rep #$20	            REP #$20
.1a452c	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a452f	b7 08		lda [$0808],y	                LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.1a4531	85 c0		sta $08c0	                STA CURRBLOCK
.1a4533	e2 20		sep #$20	            SEP #$20
.1a4535	c8		iny		                INY
.1a4536	c8		iny		                INY
.1a4537	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a4539	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a453b	20 89 68	jsr $1a6889	            JSR ARR_SET
.1a453e	80 03		bra $1a4543	                BRA done            ; and we're finished!
.1a4540					set_scalar
.1a4540	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a4543					done
.1a4543	28		plp		                PLP
.1a4544	60		rts		            RTS
.1a4545					syntax_err
.1a4545	08		php		            PHP
.1a4546	c2 20		rep #$20	            REP #$20
.1a4548	48		pha		            PHA
.1a4549	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a454c	5b		tcd		            TCD
.1a454d	68		pla		            PLA
.1a454e	28		plp		            PLP
.1a454f	e2 20		sep #$20	            SEP #$20
.1a4551	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4553	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4557	c2 20		rep #$20	            REP #$20
.1a4559	29 ff 00	and #$00ff	            AND #$00FF
.1a455c	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a455f	e2 20		sep #$20	            SEP #$20
.1a4561	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4564					notfound_err
.1a4564	08		php		            PHP
.1a4565	c2 20		rep #$20	            REP #$20
.1a4567	48		pha		            PHA
.1a4568	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a456b	5b		tcd		            TCD
.1a456c	68		pla		            PLA
.1a456d	28		plp		            PLP
.1a456e	e2 20		sep #$20	            SEP #$20
.1a4570	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a4572	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4576	c2 20		rep #$20	            REP #$20
.1a4578	29 ff 00	and #$00ff	            AND #$00FF
.1a457b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a457e	e2 20		sep #$20	            SEP #$20
.1a4580	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4583					S_PRINT
.1a4583	08		php		                PHP
.1a4584	e2 20		sep #$20	            SEP #$20
.1a4586	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a4589	c9 00		cmp #$00	                CMP #0              ; Is it EOL or :?
.1a458b	f0 6d		beq $1a45fa	                BEQ pr_nl_exit      ; Yes: just print return
.1a458d					pr_loop
.1a458d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4590	e2 20		sep #$20	            SEP #$20
.1a4592	a5 27		lda $0827	                LDA ARGTYPE1        ; Get the type of the result
.1a4594	c9 ff		cmp #$ff	                CMP #TYPE_NAV       ; Is is NAV?
.1a4596	f0 1b		beq $1a45b3	                BEQ check_nl        ; Yes: we are probably just printing a newline
.1a4598	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string?
.1a459a	d0 05		bne $1a45a1	                BNE check_int       ; No: check to see if it's an integer
.1a459c	20 ff 45	jsr $1a45ff	            JSR PR_STRING
.1a459f	80 12		bra $1a45b3	                BRA check_nl
.1a45a1	c9 00		cmp #$00	check_int       CMP #TYPE_INTEGER   ; Is it an integer?
.1a45a3	d0 05		bne $1a45aa	                BNE check_float     ; No: check to see if it is a float
.1a45a5	20 1d 46	jsr $1a461d	            JSR PR_INTEGER
.1a45a8	80 09		bra $1a45b3	                BRA check_nl
.1a45aa	c9 01		cmp #$01	check_float     CMP #TYPE_FLOAT     ; Is it a float?
.1a45ac	d0 4f		bne $1a45fd	                BNE done            ; No: just quit
.1a45ae	20 30 46	jsr $1a4630	            JSR PR_FLOAT
.1a45b1	80 00		bra $1a45b3	                BRA check_nl
.1a45b3					check_nl
.1a45b3	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a45b6	a7 00		lda [$0800]	                LDA [BIP]
.1a45b8	f0 40		beq $1a45fa	                BEQ pr_nl_exit      ; If it's nul, print a newline and return
.1a45ba	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.1a45bc	f0 3c		beq $1a45fa	                BEQ pr_nl_exit      ; print a newline and return
.1a45be	c9 2c		cmp #$2c	                CMP #','            ; If it's a comma
.1a45c0	f0 23		beq $1a45e5	                BEQ pr_comma        ; Print a TAB and try another expression
.1a45c2	c9 3b		cmp #$3b	                CMP #';'            ; If it's a semicolon...
.1a45c4	f0 24		beq $1a45ea	                BEQ is_more         ; Print nothing, and try another expression
.1a45c6	08		php		            PHP
.1a45c7	c2 20		rep #$20	            REP #$20
.1a45c9	48		pha		            PHA
.1a45ca	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a45cd	5b		tcd		            TCD
.1a45ce	68		pla		            PLA
.1a45cf	28		plp		            PLP
.1a45d0	e2 20		sep #$20	            SEP #$20
.1a45d2	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a45d4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a45d8	c2 20		rep #$20	            REP #$20
.1a45da	29 ff 00	and #$00ff	            AND #$00FF
.1a45dd	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a45e0	e2 20		sep #$20	            SEP #$20
.1a45e2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a45e5	a9 09		lda #$09	pr_comma        LDA #CHAR_TAB       ; Print a TAB
.1a45e7	20 18 00	jsr $1a0018	            JSR PRINTC
.1a45ea					is_more
.1a45ea	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a45ed	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a45f0	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.1a45f2	f0 09		beq $1a45fd	                BEQ done            ; If it's NULL, return without printing a newline
.1a45f4	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.1a45f6	f0 05		beq $1a45fd	                BEQ done            ; ... return without printing a newline
.1a45f8	80 93		bra $1a458d	                BRA pr_loop         ; Otherwise, we should have another expression, try to handle it
.1a45fa					pr_nl_exit
.1a45fa	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a45fd	28		plp		done            PLP
.1a45fe	60		rts		            RTS
.1a45ff					PR_STRING
.1a45ff	08		php		                PHP
.1a4600	8b		phb		                PHB
.1a4601	08		php		            PHP
.1a4602	c2 20		rep #$20	            REP #$20
.1a4604	48		pha		            PHA
.1a4605	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a4608	5b		tcd		            TCD
.1a4609	68		pla		            PLA
.1a460a	28		plp		            PLP
.1a460b	e2 20		sep #$20	            SEP #$20
.1a460d	a0 00 00	ldy #$0000	start_print     LDY #0
.1a4610	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y
.1a4612	f0 06		beq $1a461a	                BEQ done
.1a4614	20 18 00	jsr $1a0018	            JSR PRINTC
.1a4617	c8		iny		                INY
.1a4618	80 f6		bra $1a4610	                BRA loop
.1a461a	ab		plb		done            PLB
.1a461b	28		plp		                PLP
.1a461c	60		rts		            RTS
.1a461d					PR_INTEGER
.1a461d	08		php		                PHP
.1a461e	c2 20		rep #$20	            REP #$20
.1a4620	20 60 15	jsr $1a1560	            JSR ITOS
.1a4623	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a4625	85 23		sta $0823	                STA ARGUMENT1
.1a4627	a5 18		lda $0818	                LDA STRPTR+2
.1a4629	85 25		sta $0825	                STA ARGUMENT1+2
.1a462b	20 ff 45	jsr $1a45ff	            JSR PR_STRING
.1a462e	28		plp		                PLP
.1a462f	60		rts		            RTS
.1a4630					PR_FLOAT
.1a4630	08		php		                PHP
.1a4631	20 e8 5d	jsr $1a5de8	            JSR FTOS
.1a4634	c2 20		rep #$20	            REP #$20
.1a4636	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a4638	85 23		sta $0823	                STA ARGUMENT1
.1a463a	a5 18		lda $0818	                LDA STRPTR+2
.1a463c	85 25		sta $0825	                STA ARGUMENT1+2
.1a463e	20 ff 45	jsr $1a45ff	            JSR PR_STRING
.1a4641	28		plp		                PLP
.1a4642	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\functions.s


;******  Processing file: src\C256/functions_c256.s

.1a4643					BCD2STR
.1a4643	08		php		            PHP
.1a4644	e2 20		sep #$20	            SEP #$20
.1a4646	85 b5		sta $08b5	            STA SAVE_A
.1a4648	4a		lsr a		            LSR A
.1a4649	4a		lsr a		            LSR A
.1a464a	4a		lsr a		            LSR A
.1a464b	4a		lsr a		            LSR A
.1a464c	29 0f		and #$0f	            AND #$0F
.1a464e	18		clc		            CLC
.1a464f	69 30		adc #$30	            ADC #'0'
.1a4651	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4653	c8		iny		            INY
.1a4654	a5 b5		lda $08b5	            LDA SAVE_A
.1a4656	29 0f		and #$0f	            AND #$0F
.1a4658	18		clc		            CLC
.1a4659	69 30		adc #$30	            ADC #'0'
.1a465b	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a465d	c8		iny		            INY
.1a465e	28		plp		            PLP
.1a465f	60		rts		            RTS
.1a4660					F_GETDATE
.1a4660	e2 20		sep #$20	            SEP #$20
.1a4662	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4664	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4667	08		php		            PHP
.1a4668	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a466b	e2 20		sep #$20	            SEP #$20
.1a466d	c2 10		rep #$10	            REP #$10
.1a466f	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a4673	09 08		ora #$08	            ORA #%00001000
.1a4675	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a4679	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a467c	a0 00 00	ldy #$0000	            LDY #0
.1a467f	af 06 08 af	lda $af0806	            LDA @lRTC_DAY           ; Write the day of the month
.1a4683	20 43 46	jsr $1a4643	            JSR BCD2STR
.1a4686	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.1a4688	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a468a	c8		iny		            INY
.1a468b	af 09 08 af	lda $af0809	            LDA @lRTC_MONTH         ; Write the month
.1a468f	20 43 46	jsr $1a4643	            JSR BCD2STR
.1a4692	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.1a4694	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4696	c8		iny		            INY
.1a4697	af 0f 08 af	lda $af080f	            LDA @lRTC_CENTURY       ; Write the year
.1a469b	20 43 46	jsr $1a4643	            JSR BCD2STR
.1a469e	af 0a 08 af	lda $af080a	            LDA @lRTC_YEAR          ; Write the year
.1a46a2	20 43 46	jsr $1a4643	            JSR BCD2STR
.1a46a5	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.1a46a7	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a46a9	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a46ad	29 f7		and #$f7	            AND #%11110111
.1a46af	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a46b3	c2 20		rep #$20	            REP #$20
.1a46b5	a5 16		lda $0816	            LDA STRPTR
.1a46b7	85 23		sta $0823	            STA ARGUMENT1
.1a46b9	a5 18		lda $0818	            LDA STRPTR+2
.1a46bb	85 25		sta $0825	            STA ARGUMENT1+2
.1a46bd	e2 20		sep #$20	            SEP #$20
.1a46bf	a9 02		lda #$02	            LDA #TYPE_STRING
.1a46c1	85 27		sta $0827	            STA ARGTYPE1
.1a46c3	28		plp		            PLP
.1a46c4	e2 20		sep #$20	            SEP #$20
.1a46c6	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a46c9	60		rts		            RTS
.1a46ca					F_GETTIME
.1a46ca	e2 20		sep #$20	            SEP #$20
.1a46cc	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a46ce	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a46d1	08		php		            PHP
.1a46d2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a46d5	e2 20		sep #$20	            SEP #$20
.1a46d7	c2 10		rep #$10	            REP #$10
.1a46d9	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a46dd	09 08		ora #$08	            ORA #%00001000
.1a46df	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a46e3	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a46e6	a0 00 00	ldy #$0000	            LDY #0
.1a46e9	af 04 08 af	lda $af0804	            LDA @lRTC_HRS           ; Write the hour
.1a46ed	29 7f		and #$7f	            AND #$7F                ; Trim out the AM/PM indicator
.1a46ef	20 43 46	jsr $1a4643	            JSR BCD2STR
.1a46f2	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.1a46f4	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a46f6	c8		iny		            INY
.1a46f7	af 02 08 af	lda $af0802	            LDA @lRTC_MIN           ; Write the minute
.1a46fb	20 43 46	jsr $1a4643	            JSR BCD2STR
.1a46fe	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.1a4700	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4702	c8		iny		            INY
.1a4703	af 00 08 af	lda $af0800	            LDA @lRTC_SEC           ; Write the second
.1a4707	20 43 46	jsr $1a4643	            JSR BCD2STR
.1a470a	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.1a470c	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a470e	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a4712	29 f7		and #$f7	            AND #%11110111
.1a4714	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a4718	c2 20		rep #$20	            REP #$20
.1a471a	a5 16		lda $0816	            LDA STRPTR
.1a471c	85 23		sta $0823	            STA ARGUMENT1
.1a471e	a5 18		lda $0818	            LDA STRPTR+2
.1a4720	85 25		sta $0825	            STA ARGUMENT1+2
.1a4722	e2 20		sep #$20	            SEP #$20
.1a4724	a9 02		lda #$02	            LDA #TYPE_STRING
.1a4726	85 27		sta $0827	            STA ARGTYPE1
.1a4728	28		plp		            PLP
.1a4729	e2 20		sep #$20	            SEP #$20
.1a472b	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a472e	60		rts		            RTS
.1a472f					FN_RND
.1a472f	e2 20		sep #$20	            SEP #$20
.1a4731	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4733	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4736	08		php		            PHP
.1a4737	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a473a	e2 20		sep #$20	            SEP #$20
.1a473c	a9 01		lda #$01	            LDA #TYPE_FLOAT             ; We'll return a floating point number
.1a473e	85 27		sta $0827	            STA ARGTYPE1
.1a4740	a9 03		lda #$03	            LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a4742	8f 00 e2 af	sta $afe200	            STA @l FP_MATH_CTRL0        ; Expect fixed point numbers
.1a4746	a9 01		lda #$01	            LDA #FP_OUT_DIV             ; Set us to do a division
.1a4748	8f 01 e2 af	sta $afe201	            STA @l FP_MATH_CTRL1
.1a474c	c2 30		rep #$30	            REP #$30
.1a474e	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get a random 16-bits
.1a4752	8f 08 e2 af	sta $afe208	            STA @l FP_MATH_INPUT0_LL    ; Send them to the FP unit
.1a4756	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get another random 16-bits
.1a475a	29 ff 7f	and #$7fff	            AND #$7FFF                  ; Make sure it's positive
.1a475d	8f 0a e2 af	sta $afe20a	            STA @l FP_MATH_INPUT0_LL+2  ; Send them to the FP unit
.1a4761	a9 ff ff	lda #$ffff	            LDA #$FFFF                  ; Get the maximum value
.1a4764	8f 0c e2 af	sta $afe20c	            STA @l FP_MATH_INPUT1_LL    ; Send it to the FP unit
.1a4768	a9 ff 7f	lda #$7fff	            LDA #$7FFF
.1a476b	8f 0e e2 af	sta $afe20e	            STA @l FP_MATH_INPUT1_LL+2
.1a476f	ea		nop		            NOP
.1a4770	ea		nop		            NOP
.1a4771	ea		nop		            NOP
.1a4772	af 08 e2 af	lda $afe208	            LDA @l FP_MATH_OUTPUT_FP_LL     ; Get the normalized result
.1a4776	85 23		sta $0823	            STA ARGUMENT1
.1a4778	af 0a e2 af	lda $afe20a	            LDA @l FP_MATH_OUTPUT_FP_LL+2
.1a477c	85 25		sta $0825	            STA ARGUMENT1+2
.1a477e	28		plp		            PLP
.1a477f	e2 20		sep #$20	            SEP #$20
.1a4781	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4784	60		rts		            RTS
.1a4785					FN_INKEY
.1a4785	e2 20		sep #$20	            SEP #$20
.1a4787	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4789	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a478c	08		php		            PHP
.1a478d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4790	22 28 10 00	jsl $001028	            JSL FK_GETSCANCODE          ; Get the scan code
.1a4794	e2 20		sep #$20	            SEP #$20
.1a4796	85 23		sta $0823	            STA ARGUMENT1
.1a4798	64 24		stz $0824	            STZ ARGUMENT1+1
.1a479a	64 25		stz $0825	            STZ ARGUMENT1+2
.1a479c	64 26		stz $0826	            STZ ARGUMENT1+3
.1a479e	a9 00		lda #$00	            LDA #TYPE_INTEGER           ; We'll return an integer number
.1a47a0	85 27		sta $0827	            STA ARGTYPE1
.1a47a2	28		plp		            PLP
.1a47a3	e2 20		sep #$20	            SEP #$20
.1a47a5	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a47a8	60		rts		            RTS

;******  Return to file: src\functions.s

.1a47a9					FN_MID
.1a47a9	e2 20		sep #$20	            SEP #$20
.1a47ab	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a47ad	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a47b0	08		php		                PHP
.1a47b1	c2 30		rep #$30	            REP #$30
.1a47b3	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a47b6	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a47b9					save_string
.1a47b9	c2 20		rep #$20	            REP #$20
.1a47bb	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a47bd	48		pha		                PHA
.1a47be	a5 23		lda $0823	                LDA ARGUMENT1
.1a47c0	48		pha		                PHA
.1a47c1	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a47c4	e2 20		sep #$20	            SEP #$20
.1a47c6	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a47c8	c9 2c		cmp #$2c	                CMP #','
.1a47ca	f0 03		beq $1a47cf	                BEQ skip_comma1
.1a47cc	4c 20 48	jmp $1a4820	                JMP syntax_err
.1a47cf					skip_comma1
.1a47cf	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a47d2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a47d5	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a47d8	c2 20		rep #$20	            REP #$20
.1a47da	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the index
.1a47dc	48		pha		                PHA
.1a47dd	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a47e0	e2 20		sep #$20	            SEP #$20
.1a47e2	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a47e4	c9 2c		cmp #$2c	                CMP #','
.1a47e6	f0 03		beq $1a47eb	                BEQ skip_comma2
.1a47e8	4c 20 48	jmp $1a4820	                JMP syntax_err
.1a47eb					skip_comma2
.1a47eb	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a47ee	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a47f1	20 0d 07	jsr $1a070d	            JSR ASS_ARG1_INT16
.1a47f4	c2 20		rep #$20	            REP #$20
.1a47f6	a5 23		lda $0823	            LDA ARGUMENT1
.1a47f8	85 8f		sta $088f	            STA MCOUNT
.1a47fa	e2 20		sep #$20	            SEP #$20
.1a47fc	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a47fe	85 91		sta $0891	            STA MCOUNT+2
.1a4800	c2 20		rep #$20	            REP #$20
.1a4802	68		pla		                PLA                         ; Restore index
.1a4803	85 29		sta $0829	                STA ARGUMENT2               ; ... to ARGUMENT2
.1a4805	a9 00 00	lda #$0000	                LDA #0
.1a4808	85 2b		sta $082b	                STA ARGUMENT2+2
.1a480a	68		pla		                PLA                         ; Restore string
.1a480b	85 23		sta $0823	                STA ARGUMENT1               ; ... to ARGUMENT1
.1a480d	68		pla		                PLA
.1a480e	85 25		sta $0825	                STA ARGUMENT1+2
.1a4810	e2 20		sep #$20	            SEP #$20
.1a4812	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a4814	85 27		sta $0827	            STA ARGTYPE1
.1a4816	20 59 17	jsr $1a1759	            JSR STRSUBSTR
.1a4819					done
.1a4819	e2 20		sep #$20	            SEP #$20
.1a481b	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a481e	28		plp		                PLP
.1a481f	60		rts		            RTS
.1a4820					syntax_err
.1a4820	08		php		            PHP
.1a4821	c2 20		rep #$20	            REP #$20
.1a4823	48		pha		            PHA
.1a4824	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4827	5b		tcd		            TCD
.1a4828	68		pla		            PLA
.1a4829	28		plp		            PLP
.1a482a	e2 20		sep #$20	            SEP #$20
.1a482c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a482e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4832	c2 20		rep #$20	            REP #$20
.1a4834	29 ff 00	and #$00ff	            AND #$00FF
.1a4837	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a483a	e2 20		sep #$20	            SEP #$20
.1a483c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a483f					range_err
.1a483f	08		php		            PHP
.1a4840	c2 20		rep #$20	            REP #$20
.1a4842	48		pha		            PHA
.1a4843	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4846	5b		tcd		            TCD
.1a4847	68		pla		            PLA
.1a4848	28		plp		            PLP
.1a4849	e2 20		sep #$20	            SEP #$20
.1a484b	a9 09		lda #$09	            LDA #ERR_RANGE
.1a484d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4851	c2 20		rep #$20	            REP #$20
.1a4853	29 ff 00	and #$00ff	            AND #$00FF
.1a4856	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4859	e2 20		sep #$20	            SEP #$20
.1a485b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a485e					FN_RIGHT
.1a485e	e2 20		sep #$20	            SEP #$20
.1a4860	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4862	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4865	08		php		                PHP
.1a4866	c2 30		rep #$30	            REP #$30
.1a4868	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a486b	e2 20		sep #$20	            SEP #$20
.1a486d	a5 27		lda $0827	                LDA ARGTYPE1
.1a486f	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4871	f0 03		beq $1a4876	                BEQ save_string
.1a4873	4c e2 48	jmp $1a48e2	                JMP type_mismatch           ; Type mismatch if it's not a string
.1a4876					save_string
.1a4876	c2 20		rep #$20	            REP #$20
.1a4878	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a487a	48		pha		                PHA
.1a487b	a5 23		lda $0823	                LDA ARGUMENT1
.1a487d	48		pha		                PHA
.1a487e	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a4881	e2 20		sep #$20	            SEP #$20
.1a4883	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a4885	c9 2c		cmp #$2c	                CMP #','
.1a4887	f0 03		beq $1a488c	                BEQ skip_comma
.1a4889	4c 01 49	jmp $1a4901	                JMP syntax_err
.1a488c					skip_comma
.1a488c	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a488f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4892	e2 20		sep #$20	            SEP #$20
.1a4894	a5 27		lda $0827	                LDA ARGTYPE1
.1a4896	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4898	d0 48		bne $1a48e2	                BNE type_mismatch           ; Type mismatch if it's not an integer
.1a489a	c2 20		rep #$20	            REP #$20
.1a489c	a5 23		lda $0823	            LDA ARGUMENT1
.1a489e	85 8f		sta $088f	            STA MCOUNT
.1a48a0	c2 20		rep #$20	            REP #$20
.1a48a2	68		pla		                PLA                         ; Recover the string pointer
.1a48a3	85 23		sta $0823	                STA ARGUMENT1
.1a48a5	68		pla		                PLA
.1a48a6	85 25		sta $0825	                STA ARGUMENT1+2
.1a48a8	e2 20		sep #$20	            SEP #$20
.1a48aa	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a48ac	85 27		sta $0827	            STA ARGTYPE1
.1a48ae	e2 20		sep #$20	            SEP #$20
.1a48b0	a0 00 00	ldy #$0000	                LDY #0
.1a48b3	b7 23		lda [$0823],y	count_loop      LDA [ARGUMENT1],Y
.1a48b5	f0 03		beq $1a48ba	                BEQ count_done
.1a48b7	c8		iny		                INY
.1a48b8	80 f9		bra $1a48b3	                BRA count_loop
.1a48ba					count_done
.1a48ba	c2 20		rep #$20	            REP #$20
.1a48bc	98		tya		                TYA                         ; ARGUMENT2 := LENGTH - MCOUNT
.1a48bd	38		sec		                SEC
.1a48be	e5 8f		sbc $088f	                SBC MCOUNT
.1a48c0	30 09		bmi $1a48cb	                BMI index0                  ; if ARGUMENT2 < 0, set ARGUMENT2 := 0
.1a48c2	85 29		sta $0829	                STA ARGUMENT2
.1a48c4	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT2[23..16] := 0
.1a48c7	85 2b		sta $082b	                STA ARGUMENT2+2
.1a48c9	80 07		bra $1a48d2	                BRA slice
.1a48cb	a9 00 00	lda #$0000	index0          LDA #0                      ; 0 is the floor for the index
.1a48ce	85 29		sta $0829	                STA ARGUMENT2
.1a48d0	85 2b		sta $082b	                STA ARGUMENT2+2
.1a48d2					slice
.1a48d2	e2 20		sep #$20	            SEP #$20
.1a48d4	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a48d6	85 2d		sta $082d	            STA ARGTYPE2
.1a48d8	20 59 17	jsr $1a1759	            JSR STRSUBSTR
.1a48db					done
.1a48db	e2 20		sep #$20	            SEP #$20
.1a48dd	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a48e0	28		plp		                PLP
.1a48e1	60		rts		            RTS
.1a48e2					type_mismatch
.1a48e2	08		php		            PHP
.1a48e3	c2 20		rep #$20	            REP #$20
.1a48e5	48		pha		            PHA
.1a48e6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a48e9	5b		tcd		            TCD
.1a48ea	68		pla		            PLA
.1a48eb	28		plp		            PLP
.1a48ec	e2 20		sep #$20	            SEP #$20
.1a48ee	a9 04		lda #$04	            LDA #ERR_TYPE
.1a48f0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a48f4	c2 20		rep #$20	            REP #$20
.1a48f6	29 ff 00	and #$00ff	            AND #$00FF
.1a48f9	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a48fc	e2 20		sep #$20	            SEP #$20
.1a48fe	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4901					syntax_err
.1a4901	08		php		            PHP
.1a4902	c2 20		rep #$20	            REP #$20
.1a4904	48		pha		            PHA
.1a4905	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4908	5b		tcd		            TCD
.1a4909	68		pla		            PLA
.1a490a	28		plp		            PLP
.1a490b	e2 20		sep #$20	            SEP #$20
.1a490d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a490f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4913	c2 20		rep #$20	            REP #$20
.1a4915	29 ff 00	and #$00ff	            AND #$00FF
.1a4918	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a491b	e2 20		sep #$20	            SEP #$20
.1a491d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4920					range_err
.1a4920	08		php		            PHP
.1a4921	c2 20		rep #$20	            REP #$20
.1a4923	48		pha		            PHA
.1a4924	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4927	5b		tcd		            TCD
.1a4928	68		pla		            PLA
.1a4929	28		plp		            PLP
.1a492a	e2 20		sep #$20	            SEP #$20
.1a492c	a9 09		lda #$09	            LDA #ERR_RANGE
.1a492e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4932	c2 20		rep #$20	            REP #$20
.1a4934	29 ff 00	and #$00ff	            AND #$00FF
.1a4937	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a493a	e2 20		sep #$20	            SEP #$20
.1a493c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a493f					FN_LEFT
.1a493f	e2 20		sep #$20	            SEP #$20
.1a4941	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4943	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4946	08		php		                PHP
.1a4947	c2 30		rep #$30	            REP #$30
.1a4949	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a494c	e2 20		sep #$20	            SEP #$20
.1a494e	a5 27		lda $0827	                LDA ARGTYPE1
.1a4950	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4952	f0 03		beq $1a4957	                BEQ save_string
.1a4954	4c ab 49	jmp $1a49ab	                JMP type_mismatch           ; Type mismatch if it's not a string
.1a4957					save_string
.1a4957	c2 20		rep #$20	            REP #$20
.1a4959	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a495b	48		pha		                PHA
.1a495c	a5 23		lda $0823	                LDA ARGUMENT1
.1a495e	48		pha		                PHA
.1a495f	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a4962	e2 20		sep #$20	            SEP #$20
.1a4964	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a4966	c9 2c		cmp #$2c	                CMP #','
.1a4968	f0 03		beq $1a496d	                BEQ skip_comma
.1a496a	4c ca 49	jmp $1a49ca	                JMP syntax_err
.1a496d					skip_comma
.1a496d	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4970	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4973	e2 20		sep #$20	            SEP #$20
.1a4975	a5 27		lda $0827	                LDA ARGTYPE1
.1a4977	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4979	d0 30		bne $1a49ab	                BNE type_mismatch           ; Type mismatch if it's not an integer
.1a497b	c2 20		rep #$20	            REP #$20
.1a497d	a5 23		lda $0823	            LDA ARGUMENT1
.1a497f	85 8f		sta $088f	            STA MCOUNT
.1a4981	c2 20		rep #$20	            REP #$20
.1a4983	a9 00 00	lda #$0000	            LDA #<>0
.1a4986	85 29		sta $0829	            STA ARGUMENT2
.1a4988	a9 00 00	lda #$0000	            LDA #(0 >> 16)
.1a498b	85 2b		sta $082b	            STA ARGUMENT2+2
.1a498d	e2 20		sep #$20	            SEP #$20
.1a498f	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a4991	85 2d		sta $082d	            STA ARGTYPE2
.1a4993	c2 20		rep #$20	            REP #$20
.1a4995	68		pla		                PLA                         ; Recover the string pointer
.1a4996	85 23		sta $0823	                STA ARGUMENT1
.1a4998	68		pla		                PLA
.1a4999	85 25		sta $0825	                STA ARGUMENT1+2
.1a499b	e2 20		sep #$20	            SEP #$20
.1a499d	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a499f	85 27		sta $0827	            STA ARGTYPE1
.1a49a1	20 59 17	jsr $1a1759	            JSR STRSUBSTR
.1a49a4					done
.1a49a4	e2 20		sep #$20	            SEP #$20
.1a49a6	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a49a9	28		plp		                PLP
.1a49aa	60		rts		            RTS
.1a49ab					type_mismatch
.1a49ab	08		php		            PHP
.1a49ac	c2 20		rep #$20	            REP #$20
.1a49ae	48		pha		            PHA
.1a49af	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a49b2	5b		tcd		            TCD
.1a49b3	68		pla		            PLA
.1a49b4	28		plp		            PLP
.1a49b5	e2 20		sep #$20	            SEP #$20
.1a49b7	a9 04		lda #$04	            LDA #ERR_TYPE
.1a49b9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a49bd	c2 20		rep #$20	            REP #$20
.1a49bf	29 ff 00	and #$00ff	            AND #$00FF
.1a49c2	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a49c5	e2 20		sep #$20	            SEP #$20
.1a49c7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a49ca					syntax_err
.1a49ca	08		php		            PHP
.1a49cb	c2 20		rep #$20	            REP #$20
.1a49cd	48		pha		            PHA
.1a49ce	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a49d1	5b		tcd		            TCD
.1a49d2	68		pla		            PLA
.1a49d3	28		plp		            PLP
.1a49d4	e2 20		sep #$20	            SEP #$20
.1a49d6	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a49d8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a49dc	c2 20		rep #$20	            REP #$20
.1a49de	29 ff 00	and #$00ff	            AND #$00FF
.1a49e1	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a49e4	e2 20		sep #$20	            SEP #$20
.1a49e6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a49e9					range_err
.1a49e9	08		php		            PHP
.1a49ea	c2 20		rep #$20	            REP #$20
.1a49ec	48		pha		            PHA
.1a49ed	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a49f0	5b		tcd		            TCD
.1a49f1	68		pla		            PLA
.1a49f2	28		plp		            PLP
.1a49f3	e2 20		sep #$20	            SEP #$20
.1a49f5	a9 09		lda #$09	            LDA #ERR_RANGE
.1a49f7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a49fb	c2 20		rep #$20	            REP #$20
.1a49fd	29 ff 00	and #$00ff	            AND #$00FF
.1a4a00	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4a03	e2 20		sep #$20	            SEP #$20
.1a4a05	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4a08					FN_VAL
.1a4a08	e2 20		sep #$20	            SEP #$20
.1a4a0a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4a0c	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4a0f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4a12	c2 10		rep #$10	            REP #$10
.1a4a14	e2 20		sep #$20	            SEP #$20
.1a4a16	a5 27		lda $0827	                LDA ARGTYPE1
.1a4a18	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4a1a	d0 23		bne $1a4a3f	                BNE type_mismatch
.1a4a1c	c2 20		rep #$20	            REP #$20
.1a4a1e	a5 00		lda $0800	                LDA BIP             ; preserve BIP for later
.1a4a20	85 40		sta $0840	                STA SAVEBIP
.1a4a22	a5 02		lda $0802	                LDA BIP+2
.1a4a24	85 42		sta $0842	                STA SAVEBIP+2
.1a4a26	a5 23		lda $0823	                LDA ARGUMENT1       ; Temporarily point BIP to the string to parse
.1a4a28	85 00		sta $0800	                STA BIP
.1a4a2a	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4a2c	85 02		sta $0802	                STA BIP+2
.1a4a2e	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a4a31	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.1a4a33	85 00		sta $0800	                STA BIP
.1a4a35	a5 42		lda $0842	                LDA SAVEBIP+2
.1a4a37	85 02		sta $0802	                STA BIP+2
.1a4a39	e2 20		sep #$20	            SEP #$20
.1a4a3b	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4a3e	60		rts		            RTS
.1a4a3f					type_mismatch
.1a4a3f	08		php		            PHP
.1a4a40	c2 20		rep #$20	            REP #$20
.1a4a42	48		pha		            PHA
.1a4a43	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4a46	5b		tcd		            TCD
.1a4a47	68		pla		            PLA
.1a4a48	28		plp		            PLP
.1a4a49	e2 20		sep #$20	            SEP #$20
.1a4a4b	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4a4d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4a51	c2 20		rep #$20	            REP #$20
.1a4a53	29 ff 00	and #$00ff	            AND #$00FF
.1a4a56	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4a59	e2 20		sep #$20	            SEP #$20
.1a4a5b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4a5e					FN_STR
.1a4a5e	e2 20		sep #$20	            SEP #$20
.1a4a60	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4a62	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4a65	08		php		                PHP
.1a4a66	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4a69	c2 10		rep #$10	            REP #$10
.1a4a6b	e2 20		sep #$20	            SEP #$20
.1a4a6d	a5 27		lda $0827	                LDA ARGTYPE1
.1a4a6f	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4a71	d0 1a		bne $1a4a8d	                BNE type_mismatch
.1a4a73	20 60 15	jsr $1a1560	            JSR ITOS
.1a4a76	c2 20		rep #$20	            REP #$20
.1a4a78	a5 16		lda $0816	                LDA STRPTR          ; Prepare the return result
.1a4a7a	85 23		sta $0823	                STA ARGUMENT1
.1a4a7c	a5 18		lda $0818	                LDA STRPTR+2
.1a4a7e	85 25		sta $0825	                STA ARGUMENT1+2
.1a4a80	e2 20		sep #$20	            SEP #$20
.1a4a82	a9 02		lda #$02	                LDA #TYPE_STRING
.1a4a84	85 27		sta $0827	                STA ARGTYPE1
.1a4a86	28		plp		                PLP
.1a4a87	e2 20		sep #$20	            SEP #$20
.1a4a89	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4a8c	60		rts		            RTS
.1a4a8d					type_mismatch
.1a4a8d	08		php		            PHP
.1a4a8e	c2 20		rep #$20	            REP #$20
.1a4a90	48		pha		            PHA
.1a4a91	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4a94	5b		tcd		            TCD
.1a4a95	68		pla		            PLA
.1a4a96	28		plp		            PLP
.1a4a97	e2 20		sep #$20	            SEP #$20
.1a4a99	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4a9b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4a9f	c2 20		rep #$20	            REP #$20
.1a4aa1	29 ff 00	and #$00ff	            AND #$00FF
.1a4aa4	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4aa7	e2 20		sep #$20	            SEP #$20
.1a4aa9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4aac					FN_DEC
.1a4aac	e2 20		sep #$20	            SEP #$20
.1a4aae	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ab0	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4ab3	08		php		                PHP
.1a4ab4	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4ab7	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a4aba	c2 20		rep #$20	            REP #$20
.1a4abc	64 0c		stz $080c	                STZ SCRATCH
.1a4abe	64 0e		stz $080e	                STZ SCRATCH+2
.1a4ac0	e2 30		sep #$30	            SEP #$30
.1a4ac2	a0 00		ldy #$00	                LDY #0
.1a4ac4	b7 23		lda [$0823],y	skip_loop       LDA [ARGUMENT1],Y
.1a4ac6	c9 20		cmp #$20	                CMP #CHAR_SP
.1a4ac8	f0 04		beq $1a4ace	                BEQ skip_char
.1a4aca	c9 24		cmp #$24	                CMP #'$'
.1a4acc	d0 03		bne $1a4ad1	                BNE loop
.1a4ace	c8		iny		skip_char       INY
.1a4acf	80 f3		bra $1a4ac4	                BRA skip_loop
.1a4ad1	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y   ; Check the character
.1a4ad3	20 0c 05	jsr $1a050c	            JSR ISHEX
.1a4ad6	90 1e		bcc $1a4af6	                BCC ret_result      ; No: return what we have so far
.1a4ad8	c2 20		rep #$20	            REP #$20
.1a4ada	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4adc	26 0e		rol $080e	                ROL SCRATCH+2
.1a4ade	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4ae0	26 0e		rol $080e	                ROL SCRATCH+2
.1a4ae2	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4ae4	26 0e		rol $080e	                ROL SCRATCH+2
.1a4ae6	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4ae8	26 0e		rol $080e	                ROL SCRATCH+2
.1a4aea	e2 20		sep #$20	            SEP #$20
.1a4aec	20 2d 05	jsr $1a052d	            JSR HEX2BIN
.1a4aef	05 0c		ora $080c	                ORA SCRATCH
.1a4af1	85 0c		sta $080c	                STA SCRATCH         ; And add it to the result
.1a4af3	c8		iny		                INY
.1a4af4	80 db		bra $1a4ad1	                BRA loop            ; And try the next character
.1a4af6					ret_result
.1a4af6	c2 20		rep #$20	            REP #$20
.1a4af8	a5 0c		lda $080c	                LDA SCRATCH         ; Return the result
.1a4afa	85 23		sta $0823	                STA ARGUMENT1
.1a4afc	a5 0e		lda $080e	                LDA SCRATCH+2
.1a4afe	85 25		sta $0825	                STA ARGUMENT1+2
.1a4b00	e2 20		sep #$20	            SEP #$20
.1a4b02	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a4b04	85 27		sta $0827	                STA ARGTYPE1
.1a4b06	28		plp		                PLP
.1a4b07	e2 20		sep #$20	            SEP #$20
.1a4b09	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4b0c	60		rts		            RTS
.1a4b0d					FN_HEX
.1a4b0d	e2 20		sep #$20	            SEP #$20
.1a4b0f	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4b11	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4b14	08		php		                PHP
.1a4b15	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4b18	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a4b1b	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a4b1e	e2 30		sep #$30	            SEP #$30
.1a4b20	a0 ff		ldy #$ff	                LDY #$FF            ; Terminate the string
.1a4b22	a9 00		lda #$00	                LDA #0
.1a4b24	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4b26	88		dey		                DEY
.1a4b27	a5 23		lda $0823	loop            LDA ARGUMENT1       ; Write the low digit
.1a4b29	29 0f		and #$0f	                AND #$0F
.1a4b2b	aa		tax		                TAX
.1a4b2c	bf 00 d0 1a	lda $1ad000,x	                LDA @lHEXDIGITS,X
.1a4b30	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4b32	88		dey		                DEY
.1a4b33	a5 23		lda $0823	                LDA ARGUMENT1       ; Write the high digit
.1a4b35	29 f0		and #$f0	                AND #$F0
.1a4b37	4a		lsr a		                LSR A
.1a4b38	4a		lsr a		                LSR A
.1a4b39	4a		lsr a		                LSR A
.1a4b3a	4a		lsr a		                LSR A
.1a4b3b	aa		tax		                TAX
.1a4b3c	bf 00 d0 1a	lda $1ad000,x	                LDA @lHEXDIGITS,X
.1a4b40	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4b42	88		dey		                DEY
.1a4b43	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Shift value by one byte
.1a4b45	85 23		sta $0823	                STA ARGUMENT1
.1a4b47	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4b49	85 24		sta $0824	                STA ARGUMENT1+1
.1a4b4b	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a4b4d	85 25		sta $0825	                STA ARGUMENT1+2
.1a4b4f	a9 00		lda #$00	                LDA #0
.1a4b51	85 26		sta $0826	                STA ARGUMENT1+3
.1a4b53	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the argument 0?
.1a4b55	d0 d0		bne $1a4b27	                BNE loop            ; No: keep converting
.1a4b57	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4b59	d0 cc		bne $1a4b27	                BNE loop
.1a4b5b	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4b5d	d0 c8		bne $1a4b27	                BNE loop
.1a4b5f	98		tya		                TYA                 ; Get the index of the first free char
.1a4b60	38		sec		                SEC                 ; Add 1 to get to the first character of the string
.1a4b61	65 16		adc $0816	                ADC STRPTR          ; And add the whole thing to the temp string pointer
.1a4b63	85 23		sta $0823	                STA ARGUMENT1       ; And return it as the result
.1a4b65	a5 17		lda $0817	                LDA STRPTR+1
.1a4b67	85 24		sta $0824	                STA ARGUMENT1+1
.1a4b69	a5 18		lda $0818	                LDA STRPTR+2
.1a4b6b	85 25		sta $0825	                STA ARGUMENT1+2
.1a4b6d	a5 19		lda $0819	                LDA STRPTR+3
.1a4b6f	85 26		sta $0826	                STA ARGUMENT1+3
.1a4b71	a9 02		lda #$02	                LDA #TYPE_STRING    ; And make the type STRING
.1a4b73	85 27		sta $0827	                STA ARGTYPE1
.1a4b75	28		plp		                PLP
.1a4b76	e2 20		sep #$20	            SEP #$20
.1a4b78	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4b7b	60		rts		            RTS
.1a4b7c					type_mismatch
.1a4b7c	08		php		            PHP
.1a4b7d	c2 20		rep #$20	            REP #$20
.1a4b7f	48		pha		            PHA
.1a4b80	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4b83	5b		tcd		            TCD
.1a4b84	68		pla		            PLA
.1a4b85	28		plp		            PLP
.1a4b86	e2 20		sep #$20	            SEP #$20
.1a4b88	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4b8a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4b8e	c2 20		rep #$20	            REP #$20
.1a4b90	29 ff 00	and #$00ff	            AND #$00FF
.1a4b93	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4b96	e2 20		sep #$20	            SEP #$20
.1a4b98	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4b9b					FN_LEN
.1a4b9b	e2 20		sep #$20	            SEP #$20
.1a4b9d	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4b9f	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4ba2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4ba5	e2 20		sep #$20	            SEP #$20
.1a4ba7	a5 27		lda $0827	                LDA ARGTYPE1
.1a4ba9	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4bab	d0 1f		bne $1a4bcc	                BNE type_mismatch
.1a4bad	8b		phb		                PHB                 ; Set the data bank to the data bank of the string
.1a4bae	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4bb0	48		pha		                PHA
.1a4bb1	ab		plb		                PLB
.1a4bb2	c2 10		rep #$10	            REP #$10
.1a4bb4	a6 23		ldx $0823	                LDX ARGUMENT1       ; And point X to the string data
.1a4bb6	20 ed 15	jsr $1a15ed	            JSR STRLEN
.1a4bb9	ab		plb		                PLB                 ; Restore the old data bank
.1a4bba	84 23		sty $0823	                STY ARGUMENT1       ; Save the length to ARGUMENT1
.1a4bbc	c2 20		rep #$20	            REP #$20
.1a4bbe	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4bc0	e2 20		sep #$20	            SEP #$20
.1a4bc2	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the type to INTEGER
.1a4bc4	85 27		sta $0827	                STA ARGTYPE1
.1a4bc6	e2 20		sep #$20	            SEP #$20
.1a4bc8	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4bcb	60		rts		            RTS
.1a4bcc					type_mismatch
.1a4bcc	08		php		            PHP
.1a4bcd	c2 20		rep #$20	            REP #$20
.1a4bcf	48		pha		            PHA
.1a4bd0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4bd3	5b		tcd		            TCD
.1a4bd4	68		pla		            PLA
.1a4bd5	28		plp		            PLP
.1a4bd6	e2 20		sep #$20	            SEP #$20
.1a4bd8	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4bda	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4bde	c2 20		rep #$20	            REP #$20
.1a4be0	29 ff 00	and #$00ff	            AND #$00FF
.1a4be3	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4be6	e2 20		sep #$20	            SEP #$20
.1a4be8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4beb					FN_PEEK
.1a4beb	e2 20		sep #$20	            SEP #$20
.1a4bed	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4bef	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4bf2	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4bf5	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a4bf8	e2 20		sep #$20	            SEP #$20
.1a4bfa	a5 25		lda $0825	                LDA ARGUMENT1+2                     ; Check to see if the request is to video memory
.1a4bfc	c9 b0		cmp #$b0	                CMP #`VRAM
.1a4bfe	90 10		bcc $1a4c10	                BLT simple_peek                     ; No: just do an ordinary PEEK
.1a4c00	c9 f0		cmp #$f0	                CMP #$F0
.1a4c02	b0 0c		bcs $1a4c10	                BGE simple_peek
.1a4c04	8b		phb		                PHB                                 ; DBR := bank
.1a4c05	48		pha		                PHA
.1a4c06	ab		plb		                PLB
.1a4c07	a6 23		ldx $0823	                LDX ARGUMENT1                       ; X := address
.1a4c09	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the low byte
.1a4c0d	ab		plb		                PLB
.1a4c0e	80 04		bra $1a4c14	                BRA save_result
.1a4c10					simple_peek
.1a4c10	e2 20		sep #$20	            SEP #$20
.1a4c12	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a4c14	85 23		sta $0823	save_result     STA ARGUMENT1
.1a4c16	64 24		stz $0824	                STZ ARGUMENT1+1
.1a4c18	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4c1a	64 26		stz $0826	                STZ ARGUMENT1+3
.1a4c1c	e2 20		sep #$20	            SEP #$20
.1a4c1e	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4c21	60		rts		            RTS
.1a4c22					type_mismatch
.1a4c22	08		php		            PHP
.1a4c23	c2 20		rep #$20	            REP #$20
.1a4c25	48		pha		            PHA
.1a4c26	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4c29	5b		tcd		            TCD
.1a4c2a	68		pla		            PLA
.1a4c2b	28		plp		            PLP
.1a4c2c	e2 20		sep #$20	            SEP #$20
.1a4c2e	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4c30	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4c34	c2 20		rep #$20	            REP #$20
.1a4c36	29 ff 00	and #$00ff	            AND #$00FF
.1a4c39	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4c3c	e2 20		sep #$20	            SEP #$20
.1a4c3e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4c41					FN_PEEKL
.1a4c41	e2 20		sep #$20	            SEP #$20
.1a4c43	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4c45	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4c48	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4c4b	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a4c4e	e2 20		sep #$20	            SEP #$20
.1a4c50	a5 25		lda $0825	                LDA ARGUMENT1+2                     ; Check to see if the request is to video memory
.1a4c52	c9 b0		cmp #$b0	                CMP #`VRAM
.1a4c54	90 22		bcc $1a4c78	                BLT simple_peek                     ; No: just do an ordinary PEEK
.1a4c56	c9 f0		cmp #$f0	                CMP #$F0
.1a4c58	b0 1e		bcs $1a4c78	                BGE simple_peek
.1a4c5a	8b		phb		                PHB                                 ; DBR := bank
.1a4c5b	48		pha		                PHA
.1a4c5c	ab		plb		                PLB
.1a4c5d	a6 23		ldx $0823	                LDX ARGUMENT1                       ; X := address
.1a4c5f	da		phx		                PHX
.1a4c60	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the low byte
.1a4c64	85 0c		sta $080c	                STA SCRATCH                         ; Save the low byte
.1a4c66	fa		plx		                PLX
.1a4c67	e8		inx		                INX
.1a4c68	da		phx		                PHX
.1a4c69	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the middle byte
.1a4c6d	85 0d		sta $080d	                STA SCRATCH+1                       ; Save the middle byte
.1a4c6f	fa		plx		                PLX
.1a4c70	e8		inx		                INX
.1a4c71	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the high byte
.1a4c75	ab		plb		                PLB
.1a4c76	80 0d		bra $1a4c85	                BRA save_result
.1a4c78					simple_peek
.1a4c78	c2 20		rep #$20	            REP #$20
.1a4c7a	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a4c7c	85 0c		sta $080c	                STA SCRATCH
.1a4c7e	e2 20		sep #$20	            SEP #$20
.1a4c80	a0 02 00	ldy #$0002	                LDY #2
.1a4c83	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y
.1a4c85	85 25		sta $0825	save_result     STA ARGUMENT1+2
.1a4c87	64 26		stz $0826	                STZ ARGUMENT1+3
.1a4c89	c2 20		rep #$20	            REP #$20
.1a4c8b	a5 0c		lda $080c	                LDA SCRATCH
.1a4c8d	85 23		sta $0823	                STA ARGUMENT1
.1a4c8f	e2 20		sep #$20	            SEP #$20
.1a4c91	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4c94	60		rts		            RTS
.1a4c95					type_mismatch
.1a4c95	08		php		            PHP
.1a4c96	c2 20		rep #$20	            REP #$20
.1a4c98	48		pha		            PHA
.1a4c99	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4c9c	5b		tcd		            TCD
.1a4c9d	68		pla		            PLA
.1a4c9e	28		plp		            PLP
.1a4c9f	e2 20		sep #$20	            SEP #$20
.1a4ca1	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4ca3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4ca7	c2 20		rep #$20	            REP #$20
.1a4ca9	29 ff 00	and #$00ff	            AND #$00FF
.1a4cac	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4caf	e2 20		sep #$20	            SEP #$20
.1a4cb1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4cb4					FN_PEEKW
.1a4cb4	e2 20		sep #$20	            SEP #$20
.1a4cb6	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4cb8	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4cbb	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4cbe	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a4cc1	e2 20		sep #$20	            SEP #$20
.1a4cc3	a5 25		lda $0825	                LDA ARGUMENT1+2                     ; Check to see if the request is to video memory
.1a4cc5	c9 b0		cmp #$b0	                CMP #`VRAM
.1a4cc7	90 1d		bcc $1a4ce6	                BLT simple_peek                     ; No: just do an ordinary PEEK
.1a4cc9	c9 f0		cmp #$f0	                CMP #$F0
.1a4ccb	b0 19		bcs $1a4ce6	                BGE simple_peek
.1a4ccd	8b		phb		                PHB                                 ; DBR := bank
.1a4cce	48		pha		                PHA
.1a4ccf	ab		plb		                PLB
.1a4cd0	a6 23		ldx $0823	                LDX ARGUMENT1                       ; X := address
.1a4cd2	da		phx		                PHX
.1a4cd3	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the low byte
.1a4cd7	85 23		sta $0823	                STA ARGUMENT1                       ; Save the low byte
.1a4cd9	fa		plx		                PLX
.1a4cda	e8		inx		                INX
.1a4cdb	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the high byte
.1a4cdf	85 24		sta $0824	                STA ARGUMENT1+1
.1a4ce1	ab		plb		                PLB
.1a4ce2	c2 20		rep #$20	            REP #$20
.1a4ce4	80 06		bra $1a4cec	                BRA done
.1a4ce6					simple_peek
.1a4ce6	c2 20		rep #$20	            REP #$20
.1a4ce8	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a4cea	85 23		sta $0823	                STA ARGUMENT1
.1a4cec	64 25		stz $0825	done            STZ ARGUMENT1+2
.1a4cee	e2 20		sep #$20	            SEP #$20
.1a4cf0	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4cf3	60		rts		            RTS
.1a4cf4					type_mismatch
.1a4cf4	08		php		            PHP
.1a4cf5	c2 20		rep #$20	            REP #$20
.1a4cf7	48		pha		            PHA
.1a4cf8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4cfb	5b		tcd		            TCD
.1a4cfc	68		pla		            PLA
.1a4cfd	28		plp		            PLP
.1a4cfe	e2 20		sep #$20	            SEP #$20
.1a4d00	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4d02	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4d06	c2 20		rep #$20	            REP #$20
.1a4d08	29 ff 00	and #$00ff	            AND #$00FF
.1a4d0b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4d0e	e2 20		sep #$20	            SEP #$20
.1a4d10	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4d13					FN_CHR
.1a4d13	e2 20		sep #$20	            SEP #$20
.1a4d15	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4d17	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4d1a	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4d1d	e2 20		sep #$20	            SEP #$20
.1a4d1f	a5 27		lda $0827	                LDA ARGTYPE1
.1a4d21	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4d23	d0 24		bne $1a4d49	                BNE type_mismatch
.1a4d25	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a4d28	a5 23		lda $0823	                LDA ARGUMENT1       ; Get the numberic value
.1a4d2a	87 16		sta [$0816]	                STA [STRPTR]        ; And save it as the first character
.1a4d2c	a9 00		lda #$00	                LDA #0              ; Null terminate the string
.1a4d2e	a0 01 00	ldy #$0001	                LDY #1
.1a4d31	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4d33	c2 20		rep #$20	            REP #$20
.1a4d35	a5 16		lda $0816	                LDA STRPTR
.1a4d37	85 23		sta $0823	                STA ARGUMENT1
.1a4d39	a5 18		lda $0818	                LDA STRPTR+2
.1a4d3b	85 25		sta $0825	                STA ARGUMENT1+2
.1a4d3d	e2 20		sep #$20	            SEP #$20
.1a4d3f	a9 02		lda #$02	                LDA #TYPE_STRING
.1a4d41	85 27		sta $0827	                STA ARGTYPE1
.1a4d43	e2 20		sep #$20	            SEP #$20
.1a4d45	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4d48	60		rts		            RTS
.1a4d49					type_mismatch
.1a4d49	08		php		            PHP
.1a4d4a	c2 20		rep #$20	            REP #$20
.1a4d4c	48		pha		            PHA
.1a4d4d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d50	5b		tcd		            TCD
.1a4d51	68		pla		            PLA
.1a4d52	28		plp		            PLP
.1a4d53	e2 20		sep #$20	            SEP #$20
.1a4d55	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4d57	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4d5b	c2 20		rep #$20	            REP #$20
.1a4d5d	29 ff 00	and #$00ff	            AND #$00FF
.1a4d60	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4d63	e2 20		sep #$20	            SEP #$20
.1a4d65	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4d68					FN_ASC
.1a4d68	e2 20		sep #$20	            SEP #$20
.1a4d6a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4d6c	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4d6f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4d72	e2 20		sep #$20	            SEP #$20
.1a4d74	a5 27		lda $0827	                LDA ARGTYPE1
.1a4d76	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4d78	d0 14		bne $1a4d8e	                BNE type_mismatch
.1a4d7a	a7 23		lda [$0823]	                LDA [ARGUMENT1]     ; Get the character
.1a4d7c	85 23		sta $0823	                STA ARGUMENT1       ; Save its code to ARGUMENT1
.1a4d7e	64 24		stz $0824	                STZ ARGUMENT1+1
.1a4d80	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4d82	64 26		stz $0826	                STZ ARGUMENT1+3
.1a4d84	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the return type to integer
.1a4d86	85 27		sta $0827	                STA ARGTYPE1
.1a4d88	e2 20		sep #$20	            SEP #$20
.1a4d8a	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4d8d	60		rts		            RTS
.1a4d8e					type_mismatch
.1a4d8e	08		php		            PHP
.1a4d8f	c2 20		rep #$20	            REP #$20
.1a4d91	48		pha		            PHA
.1a4d92	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d95	5b		tcd		            TCD
.1a4d96	68		pla		            PLA
.1a4d97	28		plp		            PLP
.1a4d98	e2 20		sep #$20	            SEP #$20
.1a4d9a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4d9c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4da0	c2 20		rep #$20	            REP #$20
.1a4da2	29 ff 00	and #$00ff	            AND #$00FF
.1a4da5	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4da8	e2 20		sep #$20	            SEP #$20
.1a4daa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4dad					FN_SPC
.1a4dad	e2 20		sep #$20	            SEP #$20
.1a4daf	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4db1	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4db4	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4db7	e2 20		sep #$20	            SEP #$20
.1a4db9	a5 27		lda $0827	                LDA ARGTYPE1
.1a4dbb	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4dbd	d0 39		bne $1a4df8	                BNE type_mismatch
.1a4dbf	e2 20		sep #$20	            SEP #$20
.1a4dc1	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.1a4dc3	d0 52		bne $1a4e17	                BNE err_limit
.1a4dc5	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4dc7	d0 4e		bne $1a4e17	                BNE err_limit
.1a4dc9	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4dcb	d0 4a		bne $1a4e17	                BNE err_limit
.1a4dcd	c2 10		rep #$10	            REP #$10
.1a4dcf	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a4dd2	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.1a4dd4	e2 20		sep #$20	            SEP #$20
.1a4dd6	a9 00		lda #$00	                LDA #0
.1a4dd8	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.1a4dda	88		dey		                DEY
.1a4ddb	30 07		bmi $1a4de4	                BMI done
.1a4ddd	a9 20		lda #$20	                LDA #CHAR_SP
.1a4ddf	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.1a4de1	88		dey		                DEY
.1a4de2	10 fb		bpl $1a4ddf	                BPL loop            ; And keep writing until we're done
.1a4de4	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.1a4de6	85 27		sta $0827	                STA ARGTYPE1
.1a4de8	c2 20		rep #$20	            REP #$20
.1a4dea	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.1a4dec	85 23		sta $0823	                STA ARGUMENT1
.1a4dee	a5 18		lda $0818	                LDA STRPTR+2
.1a4df0	85 25		sta $0825	                STA ARGUMENT1+2
.1a4df2	e2 20		sep #$20	            SEP #$20
.1a4df4	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4df7	60		rts		            RTS
.1a4df8					type_mismatch
.1a4df8	08		php		            PHP
.1a4df9	c2 20		rep #$20	            REP #$20
.1a4dfb	48		pha		            PHA
.1a4dfc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4dff	5b		tcd		            TCD
.1a4e00	68		pla		            PLA
.1a4e01	28		plp		            PLP
.1a4e02	e2 20		sep #$20	            SEP #$20
.1a4e04	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4e06	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4e0a	c2 20		rep #$20	            REP #$20
.1a4e0c	29 ff 00	and #$00ff	            AND #$00FF
.1a4e0f	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4e12	e2 20		sep #$20	            SEP #$20
.1a4e14	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4e17					err_limit
.1a4e17	08		php		            PHP
.1a4e18	c2 20		rep #$20	            REP #$20
.1a4e1a	48		pha		            PHA
.1a4e1b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4e1e	5b		tcd		            TCD
.1a4e1f	68		pla		            PLA
.1a4e20	28		plp		            PLP
.1a4e21	e2 20		sep #$20	            SEP #$20
.1a4e23	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4e25	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4e29	c2 20		rep #$20	            REP #$20
.1a4e2b	29 ff 00	and #$00ff	            AND #$00FF
.1a4e2e	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4e31	e2 20		sep #$20	            SEP #$20
.1a4e33	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4e36					FN_TAB
.1a4e36	e2 20		sep #$20	            SEP #$20
.1a4e38	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4e3a	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4e3d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4e40	e2 20		sep #$20	            SEP #$20
.1a4e42	a5 27		lda $0827	                LDA ARGTYPE1
.1a4e44	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4e46	d0 39		bne $1a4e81	                BNE type_mismatch
.1a4e48	e2 20		sep #$20	            SEP #$20
.1a4e4a	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.1a4e4c	d0 52		bne $1a4ea0	                BNE err_limit
.1a4e4e	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4e50	d0 4e		bne $1a4ea0	                BNE err_limit
.1a4e52	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4e54	d0 4a		bne $1a4ea0	                BNE err_limit
.1a4e56	c2 10		rep #$10	            REP #$10
.1a4e58	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a4e5b	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.1a4e5d	e2 20		sep #$20	            SEP #$20
.1a4e5f	a9 00		lda #$00	                LDA #0
.1a4e61	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.1a4e63	88		dey		                DEY
.1a4e64	30 07		bmi $1a4e6d	                BMI done
.1a4e66	a9 09		lda #$09	                LDA #CHAR_TAB
.1a4e68	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.1a4e6a	88		dey		                DEY
.1a4e6b	10 fb		bpl $1a4e68	                BPL loop            ; And keep writing until we're done
.1a4e6d	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.1a4e6f	85 27		sta $0827	                STA ARGTYPE1
.1a4e71	c2 20		rep #$20	            REP #$20
.1a4e73	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.1a4e75	85 23		sta $0823	                STA ARGUMENT1
.1a4e77	a5 18		lda $0818	                LDA STRPTR+2
.1a4e79	85 25		sta $0825	                STA ARGUMENT1+2
.1a4e7b	e2 20		sep #$20	            SEP #$20
.1a4e7d	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4e80	60		rts		            RTS
.1a4e81					type_mismatch
.1a4e81	08		php		            PHP
.1a4e82	c2 20		rep #$20	            REP #$20
.1a4e84	48		pha		            PHA
.1a4e85	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4e88	5b		tcd		            TCD
.1a4e89	68		pla		            PLA
.1a4e8a	28		plp		            PLP
.1a4e8b	e2 20		sep #$20	            SEP #$20
.1a4e8d	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4e8f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4e93	c2 20		rep #$20	            REP #$20
.1a4e95	29 ff 00	and #$00ff	            AND #$00FF
.1a4e98	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4e9b	e2 20		sep #$20	            SEP #$20
.1a4e9d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4ea0					err_limit
.1a4ea0	08		php		            PHP
.1a4ea1	c2 20		rep #$20	            REP #$20
.1a4ea3	48		pha		            PHA
.1a4ea4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4ea7	5b		tcd		            TCD
.1a4ea8	68		pla		            PLA
.1a4ea9	28		plp		            PLP
.1a4eaa	e2 20		sep #$20	            SEP #$20
.1a4eac	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4eae	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4eb2	c2 20		rep #$20	            REP #$20
.1a4eb4	29 ff 00	and #$00ff	            AND #$00FF
.1a4eb7	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4eba	e2 20		sep #$20	            SEP #$20
.1a4ebc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4ebf					FN_ABS
.1a4ebf	e2 20		sep #$20	            SEP #$20
.1a4ec1	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ec3	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4ec6	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4ec9	e2 20		sep #$20	            SEP #$20
.1a4ecb	a5 27		lda $0827	                LDA ARGTYPE1        ; Check the type
.1a4ecd	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4ecf	f0 23		beq $1a4ef4	                BEQ abs_int         ; If integer, get the absolute value of the integer
.1a4ed1	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a4ed3	f0 3e		beq $1a4f13	                BEQ abs_float       ; If float, get the absolute value of the float
.1a4ed5					type_err
.1a4ed5	08		php		            PHP
.1a4ed6	c2 20		rep #$20	            REP #$20
.1a4ed8	48		pha		            PHA
.1a4ed9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4edc	5b		tcd		            TCD
.1a4edd	68		pla		            PLA
.1a4ede	28		plp		            PLP
.1a4edf	e2 20		sep #$20	            SEP #$20
.1a4ee1	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4ee3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4ee7	c2 20		rep #$20	            REP #$20
.1a4ee9	29 ff 00	and #$00ff	            AND #$00FF
.1a4eec	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4eef	e2 20		sep #$20	            SEP #$20
.1a4ef1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4ef4					abs_int
.1a4ef4	c2 20		rep #$20	            REP #$20
.1a4ef6	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Is it positive already?
.1a4ef8	10 21		bpl $1a4f1b	                BPL done            ; Yes: we don't need to do anythign further
.1a4efa	49 ff ff	eor #$ffff	                EOR #$FFFF          ; Otherwise, take the two's compliment
.1a4efd	85 25		sta $0825	                STA ARGUMENT1+2     ; Of ARGUMENT1
.1a4eff	a5 23		lda $0823	                LDA ARGUMENT1
.1a4f01	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a4f04	18		clc		                CLC
.1a4f05	69 01 00	adc #$0001	                ADC #1
.1a4f08	85 23		sta $0823	                STA ARGUMENT1       ; And save it back to ARGUMENT1
.1a4f0a	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4f0c	69 00 00	adc #$0000	                ADC #0
.1a4f0f	85 25		sta $0825	                STA ARGUMENT1+2
.1a4f11	80 08		bra $1a4f1b	                BRA done
.1a4f13					abs_float
.1a4f13	e2 20		sep #$20	            SEP #$20
.1a4f15	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Just clear the sign bit
.1a4f17	29 7f		and #$7f	                AND #$7F
.1a4f19	85 26		sta $0826	                STA ARGUMENT1+3
.1a4f1b					done
.1a4f1b	e2 20		sep #$20	            SEP #$20
.1a4f1d	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4f20	60		rts		            RTS
.1a4f21					FN_SGN
.1a4f21	e2 20		sep #$20	            SEP #$20
.1a4f23	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4f25	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4f28	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4f2b	e2 20		sep #$20	            SEP #$20
.1a4f2d	a5 27		lda $0827	                LDA ARGTYPE1
.1a4f2f	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4f31	d0 25		bne $1a4f58	                BNE type_mismatch
.1a4f33	c2 20		rep #$20	            REP #$20
.1a4f35	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4f37	30 12		bmi $1a4f4b	                BMI is_negative     ; Negative: return -1
.1a4f39	d0 04		bne $1a4f3f	                BNE is_positive     ; Is it not 0? Then return 1
.1a4f3b	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the lower word 0?
.1a4f3d	f0 13		beq $1a4f52	                BEQ done            ; Yes: the whole thing is zero: return 0
.1a4f3f	a9 00 00	lda #$0000	is_positive     LDA #0              ; It's positive: return 1
.1a4f42	85 25		sta $0825	                STA ARGUMENT1+2
.1a4f44	a9 01 00	lda #$0001	                LDA #1
.1a4f47	85 23		sta $0823	                STA ARGUMENT1
.1a4f49	80 07		bra $1a4f52	                BRA done
.1a4f4b	a9 ff ff	lda #$ffff	is_negative     LDA #$FFFF          ; It's negative: return -1
.1a4f4e	85 25		sta $0825	                STA ARGUMENT1+2
.1a4f50	85 23		sta $0823	                STA ARGUMENT1
.1a4f52					done
.1a4f52	e2 20		sep #$20	            SEP #$20
.1a4f54	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4f57	60		rts		            RTS
.1a4f58					type_mismatch
.1a4f58	08		php		            PHP
.1a4f59	c2 20		rep #$20	            REP #$20
.1a4f5b	48		pha		            PHA
.1a4f5c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4f5f	5b		tcd		            TCD
.1a4f60	68		pla		            PLA
.1a4f61	28		plp		            PLP
.1a4f62	e2 20		sep #$20	            SEP #$20
.1a4f64	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4f66	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4f6a	c2 20		rep #$20	            REP #$20
.1a4f6c	29 ff 00	and #$00ff	            AND #$00FF
.1a4f6f	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a4f72	e2 20		sep #$20	            SEP #$20
.1a4f74	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4f77					FN_INT
.1a4f77	e2 20		sep #$20	            SEP #$20
.1a4f79	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4f7b	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4f7e	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4f81	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a4f84					done
.1a4f84	e2 20		sep #$20	            SEP #$20
.1a4f86	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4f89	60		rts		            RTS
.1a4f8a					FN_SIN
.1a4f8a	e2 20		sep #$20	            SEP #$20
.1a4f8c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4f8e	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4f91	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4f94	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a4f97	20 48 62	jsr $1a6248	            JSR FP_SIN
.1a4f9a					done
.1a4f9a	e2 20		sep #$20	            SEP #$20
.1a4f9c	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4f9f	60		rts		            RTS
.1a4fa0					FN_COS
.1a4fa0	e2 20		sep #$20	            SEP #$20
.1a4fa2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4fa4	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4fa7	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4faa	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a4fad	20 77 62	jsr $1a6277	            JSR FP_COS
.1a4fb0					done
.1a4fb0	e2 20		sep #$20	            SEP #$20
.1a4fb2	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4fb5	60		rts		            RTS
.1a4fb6					FN_TAN
.1a4fb6	e2 20		sep #$20	            SEP #$20
.1a4fb8	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4fba	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4fbd	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4fc0	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a4fc3	20 a6 62	jsr $1a62a6	            JSR FP_TAN
.1a4fc6					done
.1a4fc6	e2 20		sep #$20	            SEP #$20
.1a4fc8	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4fcb	60		rts		            RTS
.1a4fcc					FN_LN
.1a4fcc	e2 20		sep #$20	            SEP #$20
.1a4fce	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4fd0	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4fd3	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4fd6	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a4fd9	20 d4 62	jsr $1a62d4	            JSR FP_LN
.1a4fdc					done
.1a4fdc	e2 20		sep #$20	            SEP #$20
.1a4fde	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4fe1	60		rts		            RTS
.1a4fe2					FN_ACOS
.1a4fe2	e2 20		sep #$20	            SEP #$20
.1a4fe4	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4fe6	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4fe9	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a4fec	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a4fef	20 fd 63	jsr $1a63fd	            JSR FP_ACOS
.1a4ff2					done
.1a4ff2	e2 20		sep #$20	            SEP #$20
.1a4ff4	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a4ff7	60		rts		            RTS
.1a4ff8					FN_ASIN
.1a4ff8	e2 20		sep #$20	            SEP #$20
.1a4ffa	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ffc	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a4fff	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a5002	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a5005	20 d3 63	jsr $1a63d3	            JSR FP_ASIN
.1a5008					done
.1a5008	e2 20		sep #$20	            SEP #$20
.1a500a	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a500d	60		rts		            RTS
.1a500e					FN_ATAN
.1a500e	e2 20		sep #$20	            SEP #$20
.1a5010	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a5012	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a5015	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a5018	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a501b	20 1f 64	jsr $1a641f	            JSR FP_ATAN
.1a501e					done
.1a501e	e2 20		sep #$20	            SEP #$20
.1a5020	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a5023	60		rts		            RTS
.1a5024					FN_EXP
.1a5024	e2 20		sep #$20	            SEP #$20
.1a5026	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a5028	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a502b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a502e	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a5031	20 b3 64	jsr $1a64b3	            JSR FP_EXP
.1a5034					done
.1a5034	e2 20		sep #$20	            SEP #$20
.1a5036	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a5039	60		rts		            RTS
.1a503a					FN_SQR
.1a503a	e2 20		sep #$20	            SEP #$20
.1a503c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a503e	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a5041	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a5044	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a5047	20 35 65	jsr $1a6535	            JSR FP_SQR
.1a504a					done
.1a504a	e2 20		sep #$20	            SEP #$20
.1a504c	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a504f	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\commands.s

.1a5050	00		brk #		CMD_MONITOR     BRK
.1a5051	ea		nop		                NOP
.1a5052	60		rts		            RTS
.1a5053					CMD_NEW
.1a5053	08		php		                PHP
.1a5054	0b		phd		                PHD
.1a5055	08		php		            PHP
.1a5056	c2 20		rep #$20	            REP #$20
.1a5058	48		pha		            PHA
.1a5059	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a505c	5b		tcd		            TCD
.1a505d	68		pla		            PLA
.1a505e	28		plp		            PLP
.1a505f	c2 30		rep #$30	            REP #$30
.1a5061	c2 20		rep #$20	            REP #$20
.1a5063	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a5066	85 d9		sta $08d9	            STA LASTLINE
.1a5068	e2 20		sep #$20	            SEP #$20
.1a506a	a9 16		lda #$16	            LDA #`BASIC_BOT
.1a506c	85 db		sta $08db	            STA LASTLINE+2
.1a506e	c2 30		rep #$30	            REP #$30
.1a5070	a9 00 00	lda #$0000	                LDA #0
.1a5073	a0 00 00	ldy #$0000	                LDY #LINE_LINK
.1a5076	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a5078	a0 02 00	ldy #$0002	                LDY #LINE_NUMBER
.1a507b	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a507d	a0 04 00	ldy #$0004	                LDY #LINE_TOKENS
.1a5080	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a5082	20 f3 20	jsr $1a20f3	            JSR CLRINTERP
.1a5085	2b		pld		                PLD
.1a5086	28		plp		                PLP
.1a5087	60		rts		            RTS
.1a5088					CMD_RUN
.1a5088	8b		phb		                PHB
.1a5089	08		php		                PHP
.1a508a	c2 20		rep #$20	            REP #$20
.1a508c	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT            ; Point to the first line of the program
.1a508f	85 1a		sta $081a	                STA CURLINE
.1a5091	a9 16 00	lda #$0016	                LDA #`BASIC_BOT
.1a5094	85 1c		sta $081c	                STA CURLINE + 2
.1a5096	20 f3 20	jsr $1a20f3	            JSR CLRINTERP
.1a5099	20 d3 23	jsr $1a23d3	            JSR EXECPROGRAM
.1a509c	28		plp		                PLP
.1a509d	ab		plb		                PLB
.1a509e	60		rts		            RTS
.1a509f					CMD_LIST
.1a509f	08		php		                PHP
.1a50a0	c2 20		rep #$20	            REP #$20
.1a50a2	64 55		stz $0855	                STZ MARG1               ; MARG1 is starting line number, default 0
.1a50a4	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.1a50a7	85 59		sta $0859	                STA MARG2               ; MARG2 is ending line number, default MAXINT
.1a50a9	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a50ac	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a50af	29 ff 00	and #$00ff	                AND #$00FF
.1a50b2	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.1a50b5	f0 2c		beq $1a50e3	                BEQ call_list           ; ... just list with the defaults
.1a50b7	c9 81 00	cmp #$0081	                CMP #TOK_MINUS          ; If just "- ###"...
.1a50ba	f0 1a		beq $1a50d6	                BEQ parse_endline       ; ... try to parse the end line number
.1a50bc	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a50bf	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a50c2	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG1
.1a50c4	85 55		sta $0855	                STA MARG1
.1a50c6	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a50c9	29 ff 00	and #$00ff	                AND #$00FF
.1a50cc	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.1a50cf	f0 12		beq $1a50e3	                BEQ call_list           ; ... just list with the defaults
.1a50d1	c9 81 00	cmp #$0081	                CMP #TOK_MINUS
.1a50d4	d0 2a		bne $1a5100	                BNE error               ; At this point, if not '-', it's a syntax error
.1a50d6					parse_endline
.1a50d6	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a50d9	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a50dc	20 d8 08	jsr $1a08d8	            JSR PARSEINT
.1a50df	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG2
.1a50e1	85 59		sta $0859	                STA MARG2
.1a50e3	a5 1c		lda $081c	call_list       LDA CURLINE+2           ; Save CURLINE
.1a50e5	48		pha		                PHA
.1a50e6	a5 1a		lda $081a	                LDA CURLINE
.1a50e8	48		pha		                PHA
.1a50e9	a5 02		lda $0802	                LDA BIP+2               ; Save BIP
.1a50eb	48		pha		                PHA
.1a50ec	a5 00		lda $0800	                LDA BIP
.1a50ee	48		pha		                PHA
.1a50ef	20 8b 18	jsr $1a188b	            JSR LISTPROG
.1a50f2	68		pla		                PLA
.1a50f3	85 00		sta $0800	                STA BIP
.1a50f5	68		pla		                PLA
.1a50f6	85 02		sta $0802	                STA BIP+2
.1a50f8	68		pla		                PLA
.1a50f9	85 1a		sta $081a	                STA CURLINE
.1a50fb	68		pla		                PLA
.1a50fc	85 1c		sta $081c	                STA CURLINE+2
.1a50fe	28		plp		                PLP
.1a50ff	60		rts		            RTS
.1a5100					error
.1a5100	08		php		            PHP
.1a5101	c2 20		rep #$20	            REP #$20
.1a5103	48		pha		            PHA
.1a5104	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5107	5b		tcd		            TCD
.1a5108	68		pla		            PLA
.1a5109	28		plp		            PLP
.1a510a	e2 20		sep #$20	            SEP #$20
.1a510c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a510e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5112	c2 20		rep #$20	            REP #$20
.1a5114	29 ff 00	and #$00ff	            AND #$00FF
.1a5117	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a511a	e2 20		sep #$20	            SEP #$20
.1a511c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\variables.s

>08e1					NEXTVAR         .long ?         ; Pointer to the the next available byte for variable bindings
>08e4					VARIABLES       .long ?         ; Pointer to the most recently allocated variable
>08e7					TOFIND          .long ?         ; Pointer to the variable name to find
>08ea					TOFINDTYPE      .byte ?         ; The type to find
.0000					BINDING
>0000					TYPE            .fill 1                 ; The type of the data stored in the variable
>0001					NAME            .fill VAR_NAME_SIZE     ; The name of the variable
>0009					VALUE           .fill 4                 ; The data stored in the variable
>000d					NEXT            .fill 3                 ; The pointer to the next allocated variable of this type
.1a511f					INITVARS
.1a511f	08		php		                PHP
.1a5120	08		php		            PHP
.1a5121	c2 20		rep #$20	            REP #$20
.1a5123	48		pha		            PHA
.1a5124	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5127	5b		tcd		            TCD
.1a5128	68		pla		            PLA
.1a5129	28		plp		            PLP
.1a512a	c2 20		rep #$20	            REP #$20
.1a512c	64 e4		stz $08e4	                STZ VARIABLES           ; Clear the pointer to the variables
.1a512e	64 e7		stz $08e7	                STZ TOFIND
.1a5130	e2 20		sep #$20	            SEP #$20
.1a5132	64 e6		stz $08e6	                STZ VARIABLES+2
.1a5134	64 e9		stz $08e9	                STZ TOFIND+2
.1a5136	64 ea		stz $08ea	                STZ TOFINDTYPE
.1a5138	c2 20		rep #$20	            REP #$20
.1a513a	38		sec		                SEC                     ; Compute the position of the first variable
.1a513b	a5 d9		lda $08d9	                LDA LASTLINE
.1a513d	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.1a5140	85 e1		sta $08e1	                STA NEXTVAR
.1a5142	e2 20		sep #$20	            SEP #$20
.1a5144	a5 db		lda $08db	                LDA LASTLINE+2
.1a5146	69 00		adc #$00	                ADC #0
.1a5148	85 e3		sta $08e3	                STA NEXTVAR+2
.1a514a	28		plp		                PLP
.1a514b	60		rts		            RTS
.1a514c					ISVARCHAR
.1a514c	c9 5f		cmp #$5f	                CMP #'_'            ; Check if it's an underscore
.1a514e	f0 1a		beq $1a516a	                BEQ return_true     ; Yes: return true
.1a5150	c9 3a		cmp #$3a	                CMP #'9'+1          ; Check if its in [0-9]
.1a5152	b0 04		bcs $1a5158	                BGE else1           ; No: check something else
.1a5154	c9 30		cmp #$30	                CMP #'0'
.1a5156	b0 12		bcs $1a516a	                BGE return_true     ; Yes: return true
.1a5158	c9 5b		cmp #$5b	else1           CMP #'Z'+1          ; Check if its in [A-Z]
.1a515a	b0 04		bcs $1a5160	                BGE not_upper       ; No: check lower case
.1a515c	c9 41		cmp #$41	                CMP #'A'
.1a515e	b0 0a		bcs $1a516a	                BGE return_true     ; Yes: return true
.1a5160	c9 7b		cmp #$7b	not_upper       CMP #'z'+1          ; Check if its in [a-z]
.1a5162	b0 04		bcs $1a5168	                BGE return_false    ; No: return false
.1a5164	c9 61		cmp #$61	                CMP #'a'
.1a5166	b0 02		bcs $1a516a	                BGE return_true     ; Yes: return true
.1a5168	18		clc		return_false    CLC
.1a5169	60		rts		            RTS
.1a516a	38		sec		return_true     SEC
.1a516b	60		rts		            RTS
.1a516c					VARNAMECMP
.1a516c	08		php		                PHP
.1a516d	e2 20		sep #$20	            SEP #$20
.1a516f	c2 10		rep #$10	            REP #$10
.1a5171	a0 00 00	ldy #$0000	                LDY #0
.1a5174	b7 0c		lda [$080c],y	cmp_loop        LDA [SCRATCH],Y         ; Check the character in the variable name
.1a5176	f0 0a		beq $1a5182	                BEQ is_end
.1a5178	d7 e7		cmp [$08e7],y	                CMP [TOFIND],Y          ; Compare the character to the one TOFIND
.1a517a	d0 13		bne $1a518f	                BNE return_false        ; Not equal? Then this is not a match
.1a517c	c8		iny		                INY
.1a517d	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a5180	d0 f2		bne $1a5174	                BNE cmp_loop
.1a5182	b7 e7		lda [$08e7],y	is_end          LDA [TOFIND],Y          ; Check the character in the name to find
.1a5184	20 56 05	jsr $1a0556	            JSR TOUPPERA
.1a5187	20 4c 51	jsr $1a514c	            JSR ISVARCHAR
.1a518a	b0 03		bcs $1a518f	                BCS return_false        ; YES: we do not have a match
.1a518c					return_true
.1a518c	28		plp		                PLP
.1a518d	38		sec		                SEC
.1a518e	60		rts		            RTS
.1a518f					return_false
.1a518f	28		plp		                PLP
.1a5190	18		clc		                CLC
.1a5191	60		rts		            RTS
.1a5192					VAR_FIND
.1a5192	08		php		                PHP
.1a5193	e2 20		sep #$20	            SEP #$20
.1a5195	c2 10		rep #$10	            REP #$10
.1a5197	a0 00 00	ldy #$0000	                LDY #0
.1a519a	a2 00 00	ldx #$0000	                LDX #0
.1a519d	b7 e7		lda [$08e7],y	upper_loop      LDA [TOFIND],Y          ; Get a character
.1a519f	f0 0b		beq $1a51ac	                BEQ done_upper
.1a51a1	20 56 05	jsr $1a0556	            JSR TOUPPERA
.1a51a4	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; And save it to the temp
.1a51a8	c8		iny		                INY
.1a51a9	e8		inx		                INX
.1a51aa	80 f1		bra $1a519d	                BRA upper_loop          ; Go back for another
.1a51ac	a9 00		lda #$00	done_upper      LDA #0
.1a51ae	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; NULL terminate the temporary string
.1a51b2	c2 20		rep #$20	            REP #$20
.1a51b4	a9 00 4e	lda #$4e00	                LDA #<>TEMPBUF          ; Make the temporary string the string
.1a51b7	85 e7		sta $08e7	                STA TOFIND              ; the variable name to find
.1a51b9	e2 20		sep #$20	            SEP #$20
.1a51bb	a9 00		lda #$00	                LDA #`TEMPBUF
.1a51bd	85 e9		sta $08e9	                STA TOFIND+2
.1a51bf	c2 20		rep #$20	            REP #$20
.1a51c1	a5 e4		lda $08e4	                LDA VARIABLES           ; Point INDEX to the first variable to check
.1a51c3	85 08		sta $0808	                STA INDEX
.1a51c5	d0 06		bne $1a51cd	                BNE set_index_h         ; If the low word is not 0, copy the high byte
.1a51c7	e2 20		sep #$20	            SEP #$20
.1a51c9	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a51cb	f0 4d		beq $1a521a	                BEQ not_found           ; If it is, we have no variables yet.
.1a51cd					set_index_h
.1a51cd	e2 20		sep #$20	            SEP #$20
.1a51cf	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a51d1	85 0a		sta $080a	                STA INDEX+2
.1a51d3	a5 ea		lda $08ea	check_binding   LDA TOFINDTYPE
.1a51d5	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Get the type of the variable
.1a51d8	d7 08		cmp [$0808],y	                CMP [INDEX],Y
.1a51da	d0 17		bne $1a51f3	                BNE check_next          ; If it's not a match, check the next binding
.1a51dc	c2 20		rep #$20	            REP #$20
.1a51de	18		clc		                CLC
.1a51df	a5 08		lda $0808	                LDA INDEX
.1a51e1	69 01 00	adc #$0001	                ADC #BINDING.NAME
.1a51e4	85 0c		sta $080c	                STA SCRATCH
.1a51e6	e2 20		sep #$20	            SEP #$20
.1a51e8	a5 0a		lda $080a	                LDA INDEX+2
.1a51ea	69 00		adc #$00	                ADC #0
.1a51ec	85 0e		sta $080e	                STA SCRATCH+2
.1a51ee	20 6c 51	jsr $1a516c	            JSR VARNAMECMP
.1a51f1	b0 2a		bcs $1a521d	                BCS found               ; If they match, return that we've found the variable
.1a51f3	a0 0d 00	ldy #$000d	check_next      LDY #BINDING.NEXT       ; SCRATCH := [INDEX].NEXT
.1a51f6	c2 20		rep #$20	            REP #$20
.1a51f8	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a51fa	85 0c		sta $080c	                STA SCRATCH
.1a51fc	c8		iny		                INY
.1a51fd	c8		iny		                INY
.1a51fe	e2 20		sep #$20	            SEP #$20
.1a5200	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5202	85 0e		sta $080e	                STA SCRATCH+2
.1a5204	d0 06		bne $1a520c	                BNE set_index           ; If SCRATCH == 0, the variable wasn't found
.1a5206	c2 20		rep #$20	            REP #$20
.1a5208	a5 0c		lda $080c	                LDA SCRATCH
.1a520a	f0 0e		beq $1a521a	                BEQ not_found
.1a520c					set_index
.1a520c	c2 20		rep #$20	            REP #$20
.1a520e	a5 0c		lda $080c	                LDA SCRATCH
.1a5210	85 08		sta $0808	                STA INDEX
.1a5212	e2 20		sep #$20	            SEP #$20
.1a5214	a5 0e		lda $080e	                LDA SCRATCH+2
.1a5216	85 0a		sta $080a	                STA INDEX+2
.1a5218	80 b9		bra $1a51d3	                BRA check_binding       ; And check this next variable for a match
.1a521a					not_found
.1a521a	28		plp		                PLP
.1a521b	18		clc		                CLC
.1a521c	60		rts		            RTS
.1a521d					found
.1a521d	28		plp		                PLP
.1a521e	38		sec		                SEC
.1a521f	60		rts		            RTS
.1a5220					VAR_REF
.1a5220	08		php		                PHP
.1a5221	20 92 51	jsr $1a5192	            JSR VAR_FIND
.1a5224	b0 1f		bcs $1a5245	                BCS found
.1a5226	08		php		            PHP
.1a5227	c2 20		rep #$20	            REP #$20
.1a5229	48		pha		            PHA
.1a522a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a522d	5b		tcd		            TCD
.1a522e	68		pla		            PLA
.1a522f	28		plp		            PLP
.1a5230	e2 20		sep #$20	            SEP #$20
.1a5232	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a5234	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5238	c2 20		rep #$20	            REP #$20
.1a523a	29 ff 00	and #$00ff	            AND #$00FF
.1a523d	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a5240	e2 20		sep #$20	            SEP #$20
.1a5242	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5245					found
.1a5245	c2 30		rep #$30	            REP #$30
.1a5247	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a524a	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a524c	85 23		sta $0823	                STA ARGUMENT1
.1a524e	c8		iny		                INY
.1a524f	c8		iny		                INY
.1a5250	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5252	85 25		sta $0825	                STA ARGUMENT1+2
.1a5254	e2 20		sep #$20	            SEP #$20
.1a5256	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE
.1a5259	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a525b	85 27		sta $0827	                STA ARGTYPE1
.1a525d	28		plp		done            PLP
.1a525e	60		rts		            RTS
.1a525f					VAR_ALLOC
.1a525f	08		php		                PHP
.1a5260	c2 20		rep #$20	            REP #$20
.1a5262	18		clc		                CLC                     ; Compute extent of the binding
.1a5263	a5 e1		lda $08e1	                LDA NEXTVAR
.1a5265	69 10 00	adc #$0010	                ADC #size(BINDING)
.1a5268	85 08		sta $0808	                STA INDEX
.1a526a	e2 20		sep #$20	            SEP #$20
.1a526c	a5 e3		lda $08e3	                LDA NEXTVAR+2
.1a526e	69 00		adc #$00	                ADC #0
.1a5270	85 0a		sta $080a	                STA INDEX+2
.1a5272	c5 bc		cmp $08bc	                CMP HEAP+2              ; Check to see if HEAP > INDEX
.1a5274	90 27		bcc $1a529d	                BLT has_room
.1a5276	c2 20		rep #$20	            REP #$20
.1a5278	a5 08		lda $0808	                LDA INDEX
.1a527a	c5 ba		cmp $08ba	                CMP HEAP
.1a527c	90 1f		bcc $1a529d	                BLT has_room
.1a527e	08		php		            PHP
.1a527f	c2 20		rep #$20	            REP #$20
.1a5281	48		pha		            PHA
.1a5282	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5285	5b		tcd		            TCD
.1a5286	68		pla		            PLA
.1a5287	28		plp		            PLP
.1a5288	e2 20		sep #$20	            SEP #$20
.1a528a	a9 09		lda #$09	            LDA #ERR_RANGE
.1a528c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5290	c2 20		rep #$20	            REP #$20
.1a5292	29 ff 00	and #$00ff	            AND #$00FF
.1a5295	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a5298	e2 20		sep #$20	            SEP #$20
.1a529a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a529d					has_room
.1a529d	c2 20		rep #$20	            REP #$20
.1a529f	a5 e1		lda $08e1	                LDA NEXTVAR             ; Yes: we can allocate the variable
.1a52a1	85 c0		sta $08c0	                STA CURRBLOCK           ; Point CURRBLOCK to it
.1a52a3	e2 20		sep #$20	            SEP #$20
.1a52a5	a5 e3		lda $08e3	                LDA NEXTVAR+2
.1a52a7	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a52a9	c2 20		rep #$20	            REP #$20
.1a52ab	a5 08		lda $0808	                LDA INDEX               ; And point NEXTVAR to the next possible spot
.1a52ad	85 e1		sta $08e1	                STA NEXTVAR
.1a52af	e2 20		sep #$20	            SEP #$20
.1a52b1	a5 0a		lda $080a	                LDA INDEX+2
.1a52b3	85 e3		sta $08e3	                STA NEXTVAR+2
.1a52b5	28		plp		                PLP
.1a52b6	60		rts		            RTS
.1a52b7					VAR_CREATE
.1a52b7	08		php		                PHP
.1a52b8	e2 20		sep #$20	            SEP #$20
.1a52ba	a5 27		lda $0827	                LDA ARGTYPE1            ; Validate that our types match
.1a52bc	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.1a52be	f0 33		beq $1a52f3	                BEQ chk_string          ; If so: check to see if it's a string
.1a52c0	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable type
.1a52c2	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's INTEGER
.1a52c4	d0 05		bne $1a52cb	                BNE chk_float
.1a52c6	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a52c9	80 2f		bra $1a52fa	                BRA alloc_binding       ; And bind the variable
.1a52cb	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; If it's FLOAT
.1a52cd	d0 05		bne $1a52d4	                BNE type_error
.1a52cf	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a52d2	80 26		bra $1a52fa	                BRA alloc_binding       ; And bind the variable
.1a52d4					type_error
.1a52d4	08		php		            PHP
.1a52d5	c2 20		rep #$20	            REP #$20
.1a52d7	48		pha		            PHA
.1a52d8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a52db	5b		tcd		            TCD
.1a52dc	68		pla		            PLA
.1a52dd	28		plp		            PLP
.1a52de	e2 20		sep #$20	            SEP #$20
.1a52e0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a52e2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a52e6	c2 20		rep #$20	            REP #$20
.1a52e8	29 ff 00	and #$00ff	            AND #$00FF
.1a52eb	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a52ee	e2 20		sep #$20	            SEP #$20
.1a52f0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a52f3	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING        ; Is it a string?
.1a52f5	d0 03		bne $1a52fa	                BNE alloc_binding       ; No: just go ahead and bind it
.1a52f7	20 f3 16	jsr $1a16f3	            JSR STRCPY
.1a52fa					alloc_binding
.1a52fa	c2 10		rep #$10	            REP #$10
.1a52fc	20 5f 52	jsr $1a525f	            JSR VAR_ALLOC
.1a52ff	c2 30		rep #$30	            REP #$30
.1a5301	18		clc		                CLC
.1a5302	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a5304	69 01 00	adc #$0001	                ADC #BINDING.NAME
.1a5307	85 08		sta $0808	                STA INDEX
.1a5309	e2 20		sep #$20	            SEP #$20
.1a530b	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a530d	69 00		adc #$00	                ADC #0
.1a530f	85 0a		sta $080a	                STA INDEX+2
.1a5311	a0 00 00	ldy #$0000	                LDY #0                  ; Ensure that the name field is blank
.1a5314	a9 00		lda #$00	                LDA #0
.1a5316	97 08		sta [$0808],y	blank_loop      STA [INDEX],Y
.1a5318	c8		iny		                INY
.1a5319	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a531c	d0 f8		bne $1a5316	                BNE blank_loop
.1a531e	a0 00 00	ldy #$0000	                LDY #0
.1a5321	b7 e7		lda [$08e7],y	name_loop       LDA [TOFIND],Y          ; Copy TOFIND to the NAME field
.1a5323	f0 10		beq $1a5335	                BEQ set_type
.1a5325	20 56 05	jsr $1a0556	            JSR TOUPPERA
.1a5328	20 4c 51	jsr $1a514c	            JSR ISVARCHAR
.1a532b	90 08		bcc $1a5335	                BCC set_type
.1a532d	97 08		sta [$0808],y	                STA [INDEX],Y
.1a532f	c8		iny		                INY
.1a5330	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a5333	d0 ec		bne $1a5321	                BNE name_loop
.1a5335					set_type
.1a5335	c2 20		rep #$20	            REP #$20
.1a5337	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE      ; Copy the value to the variable
.1a533a	a5 23		lda $0823	                LDA ARGUMENT1
.1a533c	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a533e	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5340	c8		iny		                INY
.1a5341	c8		iny		                INY
.1a5342	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5344	a5 e4		lda $08e4	                LDA VARIABLES           ; Point NEXT to the current top of variables
.1a5346	a0 0d 00	ldy #$000d	                LDY #BINDING.NEXT
.1a5349	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a534b	c8		iny		                INY
.1a534c	c8		iny		                INY
.1a534d	e2 20		sep #$20	            SEP #$20
.1a534f	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a5351	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5353	c2 20		rep #$20	            REP #$20
.1a5355	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a5357	85 e4		sta $08e4	                STA VARIABLES
.1a5359	e2 20		sep #$20	            SEP #$20
.1a535b	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a535d	85 e6		sta $08e6	                STA VARIABLES+2
.1a535f	e2 20		sep #$20	            SEP #$20
.1a5361	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Set the type of the variable
.1a5364	a5 27		lda $0827	                LDA ARGTYPE1
.1a5366	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5368	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is it a string?
.1a536a	f0 02		beq $1a536e	                BEQ set_ref             ; Yes: add a reference count to it
.1a536c	28		plp		done            PLP
.1a536d	60		rts		            RTS
.1a536e					set_ref
.1a536e	c2 20		rep #$20	            REP #$20
.1a5370	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the a heap allocated value
.1a5372	85 c0		sta $08c0	                STA CURRBLOCK
.1a5374	e2 20		sep #$20	            SEP #$20
.1a5376	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5378	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a537a	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a537d	20 24 13	jsr $1a1324	            JSR HEAP_ADDREF
.1a5380	80 ea		bra $1a536c	                BRA done
.1a5382					VAR_SET
.1a5382	08		php		                PHP
.1a5383	c2 30		rep #$30	            REP #$30
.1a5385	a5 e4		lda $08e4	                LDA VARIABLES          ; If VARIABLES = 0, use VAR_CREATE
.1a5387	d0 06		bne $1a538f	                BNE use_find
.1a5389	e2 20		sep #$20	            SEP #$20
.1a538b	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a538d	f0 05		beq $1a5394	                BEQ use_create
.1a538f					use_find
.1a538f	20 92 51	jsr $1a5192	            JSR VAR_FIND
.1a5392	b0 05		bcs $1a5399	                BCS found
.1a5394					use_create
.1a5394	20 b7 52	jsr $1a52b7	            JSR VAR_CREATE
.1a5397	80 4e		bra $1a53e7	                BRA done
.1a5399					found
.1a5399	e2 20		sep #$20	            SEP #$20
.1a539b	a5 27		lda $0827	                LDA ARGTYPE1            ; Do the types match?
.1a539d	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.1a539f	f0 33		beq $1a53d4	                BEQ chk_string          ; Yes: check to see if it's string
.1a53a1	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable
.1a53a3	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; Is it INTEGER?
.1a53a5	d0 05		bne $1a53ac	                BNE chk_float
.1a53a7	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a53aa	80 2c		bra $1a53d8	                BRA set_val
.1a53ac	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; Is it FLOAT?
.1a53ae	d0 05		bne $1a53b5	                BNE type_error          ; No: throw an error
.1a53b0	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a53b3	80 23		bra $1a53d8	                BRA set_val
.1a53b5					type_error
.1a53b5	08		php		            PHP
.1a53b6	c2 20		rep #$20	            REP #$20
.1a53b8	48		pha		            PHA
.1a53b9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a53bc	5b		tcd		            TCD
.1a53bd	68		pla		            PLA
.1a53be	28		plp		            PLP
.1a53bf	e2 20		sep #$20	            SEP #$20
.1a53c1	a9 04		lda #$04	            LDA #ERR_TYPE
.1a53c3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a53c7	c2 20		rep #$20	            REP #$20
.1a53c9	29 ff 00	and #$00ff	            AND #$00FF
.1a53cc	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a53cf	e2 20		sep #$20	            SEP #$20
.1a53d1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a53d4	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING
.1a53d6	f0 11		beq $1a53e9	                BEQ set_string          ; Yes: set the string value of the variable
.1a53d8					set_val
.1a53d8	c2 30		rep #$30	            REP #$30
.1a53da	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a53dd	a5 23		lda $0823	                LDA ARGUMENT1
.1a53df	97 08		sta [$0808],y	                STA [INDEX],Y
.1a53e1	c8		iny		                INY
.1a53e2	c8		iny		                INY
.1a53e3	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a53e5	97 08		sta [$0808],y	                STA [INDEX],Y
.1a53e7					done
.1a53e7	28		plp		                PLP
.1a53e8	60		rts		            RTS
.1a53e9					set_string
.1a53e9	20 f3 16	jsr $1a16f3	            JSR STRCPY
.1a53ec	a0 09 00	ldy #$0009	set_ref         LDY #BINDING.VALUE      ; Set CURRBLOCK to the current string value
.1a53ef	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a53f1	85 c0		sta $08c0	                STA CURRBLOCK
.1a53f3	c8		iny		                INY
.1a53f4	c8		iny		                INY
.1a53f5	e2 20		sep #$20	            SEP #$20
.1a53f7	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a53f9	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a53fb	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a53fe	20 43 13	jsr $1a1343	            JSR HEAP_REMREF
.1a5401	e2 20		sep #$20	            SEP #$20
.1a5403	a5 27		lda $0827	                LDA ARGTYPE1
.1a5405	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is the new value a string?
.1a5407	f0 02		beq $1a540b	                BEQ add_ref             ; Yes: add a reference to it
.1a5409	80 cd		bra $1a53d8	                BRA set_val             ; No: go back to set the value... this probably shouldn't happen
.1a540b					add_ref
.1a540b	c2 20		rep #$20	            REP #$20
.1a540d	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the new string value
.1a540f	85 c0		sta $08c0	                STA CURRBLOCK
.1a5411	e2 20		sep #$20	            SEP #$20
.1a5413	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5415	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a5417	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a541a	20 24 13	jsr $1a1324	            JSR HEAP_ADDREF
.1a541d	80 b9		bra $1a53d8	                BRA set_val
.1a541f					VAR_FINDNAME
.1a541f	08		php		                PHP
.1a5420	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a5423	e2 20		sep #$20	            SEP #$20
.1a5425	a7 00		lda [$0800]	                LDA [BIP]           ; Get the first character
.1a5427	20 e2 04	jsr $1a04e2	            JSR ISALPHA
.1a542a	90 42		bcc $1a546e	                BCC not_found
.1a542c	c2 20		rep #$20	            REP #$20
.1a542e	a5 00		lda $0800	                LDA BIP
.1a5430	85 e7		sta $08e7	                STA TOFIND
.1a5432	e2 20		sep #$20	            SEP #$20
.1a5434	a5 02		lda $0802	                LDA BIP+2
.1a5436	85 e9		sta $08e9	                STA TOFIND+2
.1a5438					loop
.1a5438	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a543b	a7 00		lda [$0800]	                LDA [BIP]
.1a543d	f0 0d		beq $1a544c	                BEQ is_float        ; If it's EOL, the variable is a float
.1a543f	c9 24		cmp #$24	                CMP #'$'            ; If it's $, the variable is a string
.1a5441	f0 14		beq $1a5457	                BEQ is_string
.1a5443	c9 25		cmp #$25	                CMP #'%'            ; If it's %, the variable is an integer
.1a5445	f0 09		beq $1a5450	                BEQ is_integer
.1a5447	20 4c 51	jsr $1a514c	            JSR ISVARCHAR
.1a544a	b0 ec		bcs $1a5438	                BCS loop            ; Check the next one
.1a544c	a9 01		lda #$01	is_float        LDA #TYPE_FLOAT     ; Otherwise it's a float
.1a544e	80 0c		bra $1a545c	                BRA set_type
.1a5450					is_integer
.1a5450	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a5453	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a5455	80 05		bra $1a545c	                BRA set_type
.1a5457					is_string
.1a5457	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a545a	a9 02		lda #$02	                LDA #TYPE_STRING
.1a545c	85 ea		sta $08ea	set_type        STA TOFINDTYPE
.1a545e	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a5461	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it "("?
.1a5463	d0 06		bne $1a546b	                BNE done            ; No: we're done... it's just a scalar variable
.1a5465	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Yes: this is an array reference
.1a5467	09 80		ora #$80	                ORA #$80            ; ... turn on the "Array of..." bit
.1a5469	85 ea		sta $08ea	                STA TOFINDTYPE
.1a546b					done
.1a546b	28		plp		                PLP
.1a546c	38		sec		                SEC
.1a546d	60		rts		            RTS
.1a546e	28		plp		not_found       PLP
.1a546f	18		clc		                CLC
.1a5470	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\integers.s

.1a5471					OP_INT_ADD
.1a5471	08		php		            PHP
.1a5472	c2 20		rep #$20	            REP #$20
.1a5474	18		clc		            CLC
.1a5475	a5 23		lda $0823	            LDA ARGUMENT1
.1a5477	65 29		adc $0829	            ADC ARGUMENT2
.1a5479	85 23		sta $0823	            STA ARGUMENT1
.1a547b	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a547d	65 2b		adc $082b	            ADC ARGUMENT2+2
.1a547f	85 25		sta $0825	            STA ARGUMENT1+2
.1a5481	28		plp		            PLP
.1a5482	60		rts		            RTS
.1a5483					OP_INT_SUB
.1a5483	08		php		            PHP
.1a5484	c2 20		rep #$20	            REP #$20
.1a5486	38		sec		            SEC
.1a5487	a5 23		lda $0823	            LDA ARGUMENT1
.1a5489	e5 29		sbc $0829	            SBC ARGUMENT2
.1a548b	85 23		sta $0823	            STA ARGUMENT1
.1a548d	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a548f	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a5491	85 25		sta $0825	            STA ARGUMENT1+2
.1a5493	28		plp		            PLP
.1a5494	60		rts		            RTS
.1a5495					OP_INT_MUL
.1a5495	08		php		            PHP
.1a5496					locals
>0001					L_SIGN      .word ?
>0003					L_RESULT    .dword ?
>0007					            .dword ?
.1a5496	c2 20		rep #$20	            REP #$20
.1a5498	3b		tsc		            TSC
.1a5499	38		sec		            SEC
.1a549a	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.1a549d	1b		tcs		            TCS
.1a549e	c2 30		rep #$30	            REP #$30
.1a54a0	a9 00 00	lda #$0000	            LDA #0                  ; Start by assuming positive numbers
.1a54a3	83 01		sta $01,s	            STA L_SIGN
.1a54a5	83 03		sta $03,s	            STA L_RESULT            ; Clear result
.1a54a7	83 05		sta $05,s	            STA L_RESULT+2
.1a54a9	83 07		sta $07,s	            STA L_RESULT+4
.1a54ab	83 09		sta $09,s	            STA L_RESULT+6
.1a54ad	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Ensure ARGUMENT1 is positive
.1a54af	10 18		bpl $1a54c9	            BPL chk_sign2
.1a54b1	a9 00 80	lda #$8000	            LDA #$8000              ; Record that ARGUMENT1 is negative
.1a54b4	83 01		sta $01,s	            STA L_SIGN
.1a54b6	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Take the two's complement of ARGUMENT1
.1a54b8	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a54bb	85 25		sta $0825	            STA ARGUMENT1+2
.1a54bd	a5 23		lda $0823	            LDA ARGUMENT1
.1a54bf	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a54c2	1a		inc a		            INC A
.1a54c3	85 23		sta $0823	            STA ARGUMENT1
.1a54c5	d0 02		bne $1a54c9	            BNE chk_sign2
.1a54c7	e6 25		inc $0825	            INC ARGUMENT1+2
.1a54c9	a5 2b		lda $082b	chk_sign2   LDA ARGUMENT2+2         ; Ensure ARGUMENT2 is positive
.1a54cb	10 1a		bpl $1a54e7	            BPL chk_over
.1a54cd	a3 01		lda $01,s	            LDA L_SIGN              ; Flip the sign
.1a54cf	49 00 80	eor #$8000	            EOR #$8000
.1a54d2	83 01		sta $01,s	            STA L_SIGN
.1a54d4	a5 2b		lda $082b	            LDA ARGUMENT2+2         ; Take the two's complement of ARGUMENT2
.1a54d6	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a54d9	85 2b		sta $082b	            STA ARGUMENT2+2
.1a54db	a5 29		lda $0829	            LDA ARGUMENT2
.1a54dd	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a54e0	1a		inc a		            INC A
.1a54e1	85 29		sta $0829	            STA ARGUMENT2
.1a54e3	d0 02		bne $1a54e7	            BNE chk_over
.1a54e5	e6 2b		inc $082b	            INC ARGUMENT2+2
.1a54e7					chk_over
.1a54e7	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a54e9	f0 04		beq $1a54ef	            BEQ do_mult
.1a54eb	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a54ed	d0 5a		bne $1a5549	            BNE overflow
.1a54ef					do_mult
.1a54ef	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*D
.1a54f1	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a54f5	a5 29		lda $0829	            LDA ARGUMENT2
.1a54f7	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a54fb	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a54ff	83 03		sta $03,s	            STA L_RESULT
.1a5501	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a5505	83 05		sta $05,s	            STA L_RESULT+2
.1a5507	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Calculate A*D << 16 + B*D
.1a5509	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a550d	a5 29		lda $0829	            LDA ARGUMENT2
.1a550f	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a5513	18		clc		            CLC
.1a5514	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a5518	63 05		adc $05,s	            ADC L_RESULT+2
.1a551a	83 05		sta $05,s	            STA L_RESULT+2
.1a551c	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a5520	63 07		adc $07,s	            ADC L_RESULT+4
.1a5522	83 07		sta $07,s	            STA L_RESULT+4
.1a5524	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*C << 16 + A*D << 16 + B*D
.1a5526	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a552a	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a552c	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a5530	18		clc		            CLC
.1a5531	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a5535	63 05		adc $05,s	            ADC L_RESULT+2
.1a5537	83 05		sta $05,s	            STA L_RESULT+2
.1a5539	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a553d	63 07		adc $07,s	            ADC L_RESULT+4
.1a553f	83 07		sta $07,s	            STA L_RESULT+4
.1a5541	a3 07		lda $07,s	            LDA L_RESULT+4
.1a5543	f0 23		beq $1a5568	            BEQ no_overflow
.1a5545	a3 09		lda $09,s	            LDA L_RESULT+6
.1a5547	f0 1f		beq $1a5568	            BEQ no_overflow
.1a5549					overflow
.1a5549	08		php		            PHP
.1a554a	c2 20		rep #$20	            REP #$20
.1a554c	48		pha		            PHA
.1a554d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5550	5b		tcd		            TCD
.1a5551	68		pla		            PLA
.1a5552	28		plp		            PLP
.1a5553	e2 20		sep #$20	            SEP #$20
.1a5555	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a5557	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a555b	c2 20		rep #$20	            REP #$20
.1a555d	29 ff 00	and #$00ff	            AND #$00FF
.1a5560	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a5563	e2 20		sep #$20	            SEP #$20
.1a5565	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5568					no_overflow
.1a5568	c2 30		rep #$30	            REP #$30
.1a556a	a3 01		lda $01,s	            LDA L_SIGN              ; Check the sign
.1a556c	10 16		bpl $1a5584	            BPL ret_result          ; If positive: just return the result
.1a556e	a3 05		lda $05,s	            LDA L_RESULT+2          ; Compute the two's complement of the result
.1a5570	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a5573	83 05		sta $05,s	            STA L_RESULT+2
.1a5575	a3 03		lda $03,s	            LDA L_RESULT
.1a5577	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a557a	1a		inc a		            INC A
.1a557b	83 03		sta $03,s	            STA L_RESULT
.1a557d	d0 05		bne $1a5584	            BNE ret_result
.1a557f	a3 05		lda $05,s	            LDA L_RESULT+2
.1a5581	1a		inc a		            INC A
.1a5582	83 05		sta $05,s	            STA L_RESULT+2
.1a5584					ret_result
.1a5584	a3 03		lda $03,s	            LDA L_RESULT
.1a5586	85 23		sta $0823	            STA ARGUMENT1
.1a5588	a3 05		lda $05,s	            LDA L_RESULT+2
.1a558a	85 25		sta $0825	            STA ARGUMENT1+2
.1a558c	c2 20		rep #$20	            REP #$20
.1a558e	3b		tsc		            TSC
.1a558f	18		clc		            CLC
.1a5590	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.1a5593	1b		tcs		            TCS
.1a5594	28		plp		            PLP
.1a5595	60		rts		            RTS
.1a5596					OP_INT_LT
.1a5596	08		php		            PHP
.1a5597	c2 20		rep #$20	            REP #$20
.1a5599	a5 23		lda $0823	            LDA ARGUMENT1
.1a559b	c5 29		cmp $0829	            CMP ARGUMENT2
.1a559d	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a559f	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a55a1	50 03		bvc $1a55a6	            BVC skip_eor
.1a55a3	49 00 80	eor #$8000	            EOR #$8000
.1a55a6	30 06		bmi $1a55ae	skip_eor    BMI ret_true
.1a55a8	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a55aa	64 25		stz $0825	            STZ ARGUMENT1+2
.1a55ac	80 07		bra $1a55b5	            BRA done
.1a55ae	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a55b1	85 23		sta $0823	            STA ARGUMENT1
.1a55b3	85 25		sta $0825	            STA ARGUMENT1+2
.1a55b5	28		plp		done        PLP
.1a55b6	60		rts		            RTS
.1a55b7					OP_INT_GT
.1a55b7	08		php		            PHP
.1a55b8	c2 20		rep #$20	            REP #$20
.1a55ba	a5 23		lda $0823	            LDA ARGUMENT1
.1a55bc	c5 29		cmp $0829	            CMP ARGUMENT2
.1a55be	d0 0c		bne $1a55cc	            BNE test_fully
.1a55c0	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a55c2	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a55c4	d0 06		bne $1a55cc	            BNE test_fully
.1a55c6	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a55c8	64 25		stz $0825	            STZ ARGUMENT1+2
.1a55ca	80 16		bra $1a55e2	            BRA done
.1a55cc	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.1a55ce	c5 23		cmp $0823	            CMP ARGUMENT1
.1a55d0	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a55d2	e5 25		sbc $0825	            SBC ARGUMENT1+2
.1a55d4	50 03		bvc $1a55d9	            BVC skip_eor
.1a55d6	49 00 80	eor #$8000	            EOR #$8000
.1a55d9	10 eb		bpl $1a55c6	skip_eor    BPL ret_false
.1a55db	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a55de	85 23		sta $0823	            STA ARGUMENT1
.1a55e0	85 25		sta $0825	            STA ARGUMENT1+2
.1a55e2	28		plp		done        PLP
.1a55e3	60		rts		            RTS
.1a55e4					OP_INT_EQ
.1a55e4	08		php		            PHP
.1a55e5	c2 20		rep #$20	            REP #$20
.1a55e7	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a55e9	c5 25		cmp $0825	            CMP ARGUMENT1+2
.1a55eb	d0 0f		bne $1a55fc	            BNE ret_false
.1a55ed	a5 29		lda $0829	            LDA ARGUMENT2
.1a55ef	c5 23		cmp $0823	            CMP ARGUMENT1
.1a55f1	d0 09		bne $1a55fc	            BNE ret_false
.1a55f3	a9 ff ff	lda #$ffff	            LDA #$FFFF
.1a55f6	85 23		sta $0823	            STA ARGUMENT1
.1a55f8	85 25		sta $0825	            STA ARGUMENT1+2
.1a55fa	80 04		bra $1a5600	            BRA done
.1a55fc	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a55fe	64 25		stz $0825	            STZ ARGUMENT1+2
.1a5600	28		plp		done        PLP
.1a5601	60		rts		            RTS
.1a5602					OP_INT_NE
.1a5602	08		php		            PHP
.1a5603	c2 20		rep #$20	            REP #$20
.1a5605	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a5607	c5 25		cmp $0825	            CMP ARGUMENT1+2
.1a5609	d0 0c		bne $1a5617	            BNE ret_true
.1a560b	a5 29		lda $0829	            LDA ARGUMENT2
.1a560d	c5 23		cmp $0823	            CMP ARGUMENT1
.1a560f	d0 06		bne $1a5617	            BNE ret_true
.1a5611	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a5613	64 25		stz $0825	            STZ ARGUMENT1+2
.1a5615	80 07		bra $1a561e	            BRA done
.1a5617	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a561a	85 23		sta $0823	            STA ARGUMENT1
.1a561c	85 25		sta $0825	            STA ARGUMENT1+2
.1a561e	28		plp		done        PLP
.1a561f	60		rts		            RTS
.1a5620					OP_INT_GTE
.1a5620	08		php		            PHP
.1a5621	c2 20		rep #$20	            REP #$20
.1a5623	a5 23		lda $0823	            LDA ARGUMENT1
.1a5625	c5 29		cmp $0829	            CMP ARGUMENT2
.1a5627	d0 0f		bne $1a5638	            BNE test_fully
.1a5629	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a562b	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a562d	d0 09		bne $1a5638	            BNE test_fully
.1a562f	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a5632	85 23		sta $0823	            STA ARGUMENT1
.1a5634	85 25		sta $0825	            STA ARGUMENT1+2
.1a5636	80 13		bra $1a564b	            BRA done
.1a5638	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.1a563a	c5 23		cmp $0823	            CMP ARGUMENT1
.1a563c	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a563e	e5 25		sbc $0825	            SBC ARGUMENT1+2
.1a5640	50 03		bvc $1a5645	            BVC skip_eor
.1a5642	49 00 80	eor #$8000	            EOR #$8000
.1a5645	30 e8		bmi $1a562f	skip_eor    BMI ret_true
.1a5647	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a5649	64 25		stz $0825	            STZ ARGUMENT1+2
.1a564b	28		plp		done        PLP
.1a564c	60		rts		            RTS
.1a564d					OP_INT_LTE
.1a564d	08		php		            PHP
.1a564e	c2 20		rep #$20	            REP #$20
.1a5650	a5 23		lda $0823	            LDA ARGUMENT1
.1a5652	c5 29		cmp $0829	            CMP ARGUMENT2
.1a5654	d0 0f		bne $1a5665	            BNE test_fully
.1a5656	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5658	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a565a	d0 09		bne $1a5665	            BNE test_fully
.1a565c	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a565f	85 23		sta $0823	            STA ARGUMENT1
.1a5661	85 25		sta $0825	            STA ARGUMENT1+2
.1a5663	80 13		bra $1a5678	            BRA done
.1a5665	a5 23		lda $0823	test_fully  LDA ARGUMENT1
.1a5667	c5 29		cmp $0829	            CMP ARGUMENT2
.1a5669	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a566b	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a566d	50 03		bvc $1a5672	            BVC skip_eor
.1a566f	49 00 80	eor #$8000	            EOR #$8000
.1a5672	30 e8		bmi $1a565c	skip_eor    BMI ret_true
.1a5674	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a5676	64 25		stz $0825	            STZ ARGUMENT1+2
.1a5678	28		plp		done        PLP
.1a5679	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\floats.s


;******  Processing file: src\C256/floats.s


;******  Processing file: src\C256/fp_math_defs.s

=$afe200				FP_MATH_CTRL0 = $AFE200         ; Read/write
=$08					FP_MATH_CTRL0_ADD = $08         ; 0: Substraction - 1: Addition
=$01					FP_CTRL0_CONV_0 = %00000001     ; Input 0 should be converted from 24.12 fixed point to floating point
=$02					FP_CTRL0_CONV_1 = %00000010     ; Input 1 should be converted from 24.12 fixed point to floating point
=$00					FP_ADD_IN0_MUX0 = %00000000     ; Adder input #0 is the output of MUX0
=$10					FP_ADD_IN0_MUX1 = %00010000     ; Adder input #0 is the output of MUX1
=$20					FP_ADD_IN0_MULT = %00100000     ; Adder input #0 is the output of the multiplier
=$30					FP_ADD_IN0_DIV  = %00110000     ; Adder input #0 is the output of the divider
=$00					FP_ADD_IN1_MUX0 = %00000000     ; Adder input #1 is the output of MUX0
=$40					FP_ADD_IN1_MUX1 = %01000000     ; Adder input #1 is the output of MUX1
=$80					FP_ADD_IN1_MULT = %10000000     ; Adder input #1 is the output of the multiplier
=$c0					FP_ADD_IN1_DIV  = %11000000     ; Adder input #1 is the output of the divider
=$afe201				FP_MATH_CTRL1 = $AFE201
=$00					FP_OUT_MULT = %00000000         ; Output is from the multiplier
=$01					FP_OUT_DIV  = %00000001         ; Output is from the divider
=$02					FP_OUT_ADD  = %00000010         ; Output is from the adder/subtracter
=$03					FP_OUT_ONE  = %00000011         ; Output is the constant '1.0'
=$afe202				FP_MATH_CTRL2 = $AFE202         ; Not Used - Reserved
=$afe203				FP_MATH_CTRL3 = $AFE203         ; Not Used - Reserved
=$afe204				FP_MATH_MULT_STAT = $AFE204     ; Status of the multiplier
=$01					FP_MULT_STAT_NAN  = $01         ; (NAN) Not a Number Status
=$02					FP_MULT_STAT_OVF  = $02         ; Overflow
=$04					FP_MULT_STAT_UDF  = $04         ; Underflow
=$08					FP_MULT_STAT_ZERO = $08         ; Zero
=$afe205				FP_MATH_DIV_STAT  = $AFE205     ; Status of the divider
=$01					FP_DIV_STAT_NAN       = $01     ; Not a number Status
=$02					FP_DIV_STAT_OVF       = $02     ; Overflow
=$04					FP_DIV_STAT_UDF       = $04     ; Underflow
=$08					FP_DIV_STAT_ZERO      = $08     ; Zero
=$10					FP_DIV_STAT_DIVBYZERO = $10     ; Division by Zero
=$afe206				FP_MATH_ADD_STAT  = $AFE206     ; Status of the adder/subtracter
=$01					FP_ADD_STAT_NAN  = $01          ; Not a number Status
=$02					FP_ADD_STAT_OVF  = $02          ; Overflow
=$04					FP_ADD_STAT_UDF  = $04          ; Underflow
=$08					FP_ADD_STAT_ZERO = $08          ; Zero
=$afe207				FP_MATH_CONV_STAT = $AFE207     ; Status of the fixed <=> float converters
=$01					FP_CONV_STAT_NAN  = $01         ; Not a number Status
=$02					FP_CONV_STAT_OVF  = $02         ; Overflow
=$04					FP_CONV_STAT_UDF  = $04         ; Underflow
=$afe208				FP_MATH_INPUT0_LL = $AFE208
=$afe209				FP_MATH_INPUT0_LH = $AFE209
=$afe20a				FP_MATH_INPUT0_HL = $AFE20A
=$afe20b				FP_MATH_INPUT0_HH = $AFE20B
=$afe20c				FP_MATH_INPUT1_LL = $AFE20C
=$afe20d				FP_MATH_INPUT1_LH = $AFE20D
=$afe20e				FP_MATH_INPUT1_HL = $AFE20E
=$afe20f				FP_MATH_INPUT1_HH = $AFE20F
=$afe208				FP_MATH_OUTPUT_FP_LL = $AFE208
=$afe209				FP_MATH_OUTPUT_FP_LH = $AFE209
=$afe20a				FP_MATH_OUTPUT_FP_HL = $AFE20A
=$afe20b				FP_MATH_OUTPUT_FP_HH = $AFE20B
=$afe20c				FP_MATH_OUTPUT_FIXED_LL = $AFE20C
=$afe20d				FP_MATH_OUTPUT_FIXED_LH = $AFE20D
=$afe20e				FP_MATH_OUTPUT_FIXED_HL = $AFE20E
=$afe20f				FP_MATH_OUTPUT_FIXED_HH = $AFE20F

;******  Return to file: src\C256/floats.s


;******  Processing file: src\C256/math_cop.s

.1a567a					UINT_DIV_A_X
.1a567a	08		php		                    PHP
.1a567b	c2 20		rep #$20	            REP #$20
.1a567d	8f 12 01 00	sta $000112	                    STA @l UNSIGNED_DIV_NUM_LO
.1a5681	8a		txa		                    TXA
.1a5682	8f 10 01 00	sta $000110	                    STA @l UNSIGNED_DIV_DEM_LO
.1a5686	af 16 01 00	lda $000116	                    LDA @l UNSIGNED_DIV_REM_LO
.1a568a	aa		tax		                    TAX
.1a568b	af 14 01 00	lda $000114	                    LDA @l UNSIGNED_DIV_QUO_LO
.1a568f	28		plp		                    PLP
.1a5690	60		rts		            RTS

;******  Return to file: src\C256/floats.s

.1a5691					FIXINT_TO_FP
.1a5691	08		php		                    PHP
.1a5692	e2 20		sep #$20	            SEP #$20
.1a5694	a9 03		lda #$03	                    LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a5696	8f 00 e2 af	sta $afe200	                    STA @l FP_MATH_CTRL0
.1a569a	a9 00		lda #$00	                    LDA #FP_OUT_MULT
.1a569c	8f 01 e2 af	sta $afe201	                    STA @l FP_MATH_CTRL1
.1a56a0	c2 20		rep #$20	            REP #$20
.1a56a2	a5 23		lda $0823	                    LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a56a4	8f 08 e2 af	sta $afe208	                    STA @l FP_MATH_INPUT0_LL
.1a56a8	a5 25		lda $0825	                    LDA ARGUMENT1+2
.1a56aa	8f 0a e2 af	sta $afe20a	                    STA @l FP_MATH_INPUT0_HL
.1a56ae	a9 00 00	lda #$0000	                    LDA #0
.1a56b1	8f 0c e2 af	sta $afe20c	                    STA @l FP_MATH_INPUT1_LL    ; ARGUMENT2 = 0100 0000 = 4096 in 20:12
.1a56b5	a9 00 01	lda #$0100	                    LDA #$0100
.1a56b8	8f 0e e2 af	sta $afe20e	                    STA @l FP_MATH_INPUT1_HL
.1a56bc	ea		nop		                    NOP
.1a56bd	ea		nop		                    NOP
.1a56be	ea		nop		                    NOP
.1a56bf	ea		nop		                    NOP
.1a56c0	ea		nop		                    NOP
.1a56c1	ea		nop		                    NOP
.1a56c2	af 08 e2 af	lda $afe208	                    LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a56c6	85 23		sta $0823	                    STA ARGUMENT1
.1a56c8	af 0a e2 af	lda $afe20a	                    LDA @l FP_MATH_OUTPUT_FP_HL
.1a56cc	85 25		sta $0825	                    STA ARGUMENT1+2
.1a56ce	a9 01 00	lda #$0001	                    LDA #TYPE_FLOAT
.1a56d1	85 27		sta $0827	                    STA ARGTYPE1
.1a56d3	28		plp		                    PLP
.1a56d4	60		rts		            RTS
.1a56d5	08		php		OP_FP_SUB       PHP
.1a56d6	e2 20		sep #$20	            SEP #$20
.1a56d8	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a56da	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a56de	80 09		bra $1a56e9	                BRA FP_ADD_SUB
.1a56e0	08		php		OP_FP_ADD       PHP
.1a56e1	e2 20		sep #$20	            SEP #$20
.1a56e3	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a56e5	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a56e9	a9 02		lda #$02	FP_ADD_SUB      LDA #FP_OUT_ADD
.1a56eb	8f 01 e2 af	sta $afe201	                STA @lFP_MATH_CTRL1
.1a56ef	c2 20		rep #$20	            REP #$20
.1a56f1	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a56f3	8f 08 e2 af	sta $afe208	                STA @lFP_MATH_INPUT0_LL
.1a56f7	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a56f9	8f 0a e2 af	sta $afe20a	                STA @lFP_MATH_INPUT0_HL
.1a56fd	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a56ff	8f 0c e2 af	sta $afe20c	                STA @lFP_MATH_INPUT1_LL
.1a5703	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a5705	8f 0e e2 af	sta $afe20e	                STA @lFP_MATH_INPUT1_HL
.1a5709	ea		nop		                NOP
.1a570a	ea		nop		                NOP
.1a570b	ea		nop		                NOP
.1a570c	e2 20		sep #$20	            SEP #$20
.1a570e	af 06 e2 af	lda $afe206	                LDA @lFP_MATH_ADD_STAT      ; Check the status of the addition
.1a5712	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.1a5714	d0 10		bne $1a5726	                BNE fp_add_error            ; If an issue was raise, process the math error
.1a5716	c2 20		rep #$20	            REP #$20
.1a5718	af 08 e2 af	lda $afe208	                LDA @lFP_MATH_OUTPUT_FP_LL  ; Retrieve the results into ARGUMENT1
.1a571c	85 23		sta $0823	                STA ARGUMENT1
.1a571e	af 0a e2 af	lda $afe20a	                LDA @lFP_MATH_OUTPUT_FP_HL
.1a5722	85 25		sta $0825	                STA ARGUMENT1+2
.1a5724	28		plp		fp_add_done     PLP
.1a5725	60		rts		            RTS
.1a5726					fp_add_error
.1a5726	20 c1 57	jsr $1a57c1	            JSR FP_MATH_ERROR
.1a5729	80 f9		bra $1a5724	                BRA fp_add_done
.1a572b	08		php		OP_FP_DIV       PHP
.1a572c	e2 20		sep #$20	            SEP #$20
.1a572e	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a5730	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5734	a9 00		lda #$00	                LDA #0
.1a5736	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a573a	c2 20		rep #$20	            REP #$20
.1a573c	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a573e	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5742	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5744	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5748	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a574a	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a574e	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a5750	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5754	ea		nop		                NOP
.1a5755	ea		nop		                NOP
.1a5756	ea		nop		                NOP
.1a5757	e2 20		sep #$20	            SEP #$20
.1a5759	af 05 e2 af	lda $afe205	                LDA @l FP_MATH_DIV_STAT     ; Check the status of the addition
.1a575d	29 17		and #$17	                AND #%00010111              ; Filter out the ZERO status
.1a575f	d0 10		bne $1a5771	                BNE fp_div_error            ; If an issue was raise, process the math error
.1a5761	c2 20		rep #$20	            REP #$20
.1a5763	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a5767	85 23		sta $0823	                STA ARGUMENT1
.1a5769	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a576d	85 25		sta $0825	                STA ARGUMENT1+2
.1a576f	28		plp		fp_div_done     PLP
.1a5770	60		rts		            RTS
.1a5771					fp_div_error
.1a5771	20 c1 57	jsr $1a57c1	            JSR FP_MATH_ERROR
.1a5774	80 f9		bra $1a576f	                BRA fp_div_done
.1a5776	08		php		OP_FP_MUL       PHP
.1a5777	e2 20		sep #$20	            SEP #$20
.1a5779	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a577b	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a577f	a9 00		lda #$00	                LDA #0
.1a5781	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a5785	c2 20		rep #$20	            REP #$20
.1a5787	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a5789	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a578d	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a578f	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5793	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a5795	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5799	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a579b	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a579f	ea		nop		                NOP
.1a57a0	ea		nop		                NOP
.1a57a1	ea		nop		                NOP
.1a57a2	e2 20		sep #$20	            SEP #$20
.1a57a4	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT    ; Check the status of the addition
.1a57a8	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.1a57aa	d0 10		bne $1a57bc	                BNE fp_mul_error            ; If an issue was raise, process the math error
.1a57ac	c2 20		rep #$20	            REP #$20
.1a57ae	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a57b2	85 23		sta $0823	                STA ARGUMENT1
.1a57b4	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a57b8	85 25		sta $0825	                STA ARGUMENT1+2
.1a57ba	28		plp		fp_mul_done     PLP
.1a57bb	60		rts		            RTS
.1a57bc					fp_mul_error
.1a57bc	20 c1 57	jsr $1a57c1	            JSR FP_MATH_ERROR
.1a57bf	80 f9		bra $1a57ba	                BRA fp_mul_done
.1a57c1					FP_MATH_ERROR
.1a57c1	e2 20		sep #$20	            SEP #$20
.1a57c3	89 01		bit #$01	                BIT #FP_ADD_STAT_NAN        ; Is there a NaN condition?
.1a57c5	f0 20		beq $1a57e7	                BEQ check_over              ; No: check for overflow
.1a57c7	00		brk #		                BRK
.1a57c8	08		php		            PHP
.1a57c9	c2 20		rep #$20	            REP #$20
.1a57cb	48		pha		            PHA
.1a57cc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a57cf	5b		tcd		            TCD
.1a57d0	68		pla		            PLA
.1a57d1	28		plp		            PLP
.1a57d2	e2 20		sep #$20	            SEP #$20
.1a57d4	a9 0c		lda #$0c	            LDA #ERR_NAN
.1a57d6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a57da	c2 20		rep #$20	            REP #$20
.1a57dc	29 ff 00	and #$00ff	            AND #$00FF
.1a57df	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a57e2	e2 20		sep #$20	            SEP #$20
.1a57e4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a57e7	89 02		bit #$02	check_over      BIT #FP_ADD_STAT_OVF        ; Is ther an overflow condition?
.1a57e9	f0 1f		beq $1a580a	                BEQ check_under             ; No: check for underflow
.1a57eb	08		php		            PHP
.1a57ec	c2 20		rep #$20	            REP #$20
.1a57ee	48		pha		            PHA
.1a57ef	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a57f2	5b		tcd		            TCD
.1a57f3	68		pla		            PLA
.1a57f4	28		plp		            PLP
.1a57f5	e2 20		sep #$20	            SEP #$20
.1a57f7	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a57f9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a57fd	c2 20		rep #$20	            REP #$20
.1a57ff	29 ff 00	and #$00ff	            AND #$00FF
.1a5802	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a5805	e2 20		sep #$20	            SEP #$20
.1a5807	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a580a	89 04		bit #$04	check_under     BIT #FP_ADD_STAT_UDF        ; Is there an underflow condition?
.1a580c	f0 1f		beq $1a582d	                BEQ done                    ; No: we should just return... this probably shouldn't happen
.1a580e	08		php		            PHP
.1a580f	c2 20		rep #$20	            REP #$20
.1a5811	48		pha		            PHA
.1a5812	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5815	5b		tcd		            TCD
.1a5816	68		pla		            PLA
.1a5817	28		plp		            PLP
.1a5818	e2 20		sep #$20	            SEP #$20
.1a581a	a9 0e		lda #$0e	            LDA #ERR_UNDERFLOW
.1a581c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5820	c2 20		rep #$20	            REP #$20
.1a5822	29 ff 00	and #$00ff	            AND #$00FF
.1a5825	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a5828	e2 20		sep #$20	            SEP #$20
.1a582a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a582d					done
.1a582d	60		rts		            RTS
.1a582e					FP_MUL10
.1a582e	08		php		                PHP
.1a582f	e2 20		sep #$20	            SEP #$20
.1a5831	a9 00		lda #$00	                LDA #FP_OUT_MULT                ; Set for multiplication
.1a5833	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5837	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1            ; Input 1 is fixed point
.1a5839	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a583d	c2 20		rep #$20	            REP #$20
.1a583f	a9 00 a0	lda #$a000	                LDA #$A000                      ; 10 is one factor
.1a5842	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5846	a9 00 00	lda #$0000	                LDA #0
.1a5849	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a584d	a5 23		lda $0823	                LDA ARGUMENT1                   ; N is the other
.1a584f	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5853	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5855	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5859	ea		nop		                NOP
.1a585a	ea		nop		                NOP
.1a585b	ea		nop		                NOP
.1a585c	e2 20		sep #$20	            SEP #$20
.1a585e	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT        ; Check the status
.1a5862	89 07		bit #$07	                BIT #FP_MULT_STAT_NAN | FP_MULT_STAT_OVF | FP_MULT_STAT_UDF
.1a5864	f0 01		beq $1a5867	                BEQ ret_result
.1a5866	00		brk #		                BRK                             ; There was an error...
.1a5867					ret_result
.1a5867	c2 20		rep #$20	            REP #$20
.1a5869	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL     ; Save result back
.1a586d	85 23		sta $0823	                STA ARGUMENT1
.1a586f	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5873	85 25		sta $0825	                STA ARGUMENT1+2
.1a5875	28		plp		                PLP
.1a5876	60		rts		            RTS
.1a5877					FP_DIV10
.1a5877	08		php		                PHP
.1a5878	e2 20		sep #$20	            SEP #$20
.1a587a	a9 01		lda #$01	                LDA #FP_OUT_DIV             ; Set for multiplication
.1a587c	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5880	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1        ; Input 1 is fixed point
.1a5882	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5886	c2 20		rep #$20	            REP #$20
.1a5888	a9 00 a0	lda #$a000	                LDA #$A000                  ; 10 is one factor
.1a588b	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a588f	a9 00 00	lda #$0000	                LDA #0
.1a5892	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5896	a5 23		lda $0823	                LDA ARGUMENT1               ; N is the other
.1a5898	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a589c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a589e	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a58a2	ea		nop		                NOP
.1a58a3	ea		nop		                NOP
.1a58a4	ea		nop		                NOP
.1a58a5	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Save result back
.1a58a9	85 23		sta $0823	                STA ARGUMENT1
.1a58ab	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a58af	85 25		sta $0825	                STA ARGUMENT1+2
.1a58b1	28		plp		                PLP
.1a58b2	60		rts		            RTS

;******  Return to file: src\floats.s

.1a58b3					FARG1EQ0
.1a58b3	08		php		                PHP
.1a58b4	c2 20		rep #$20	            REP #$20
.1a58b6	a5 23		lda $0823	                LDA ARGUMENT1
.1a58b8	d0 0a		bne $1a58c4	                BNE return_false
.1a58ba	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a58bc	29 ff 7f	and #$7fff	                AND #$7FFF              ; Mask off the sign bit
.1a58bf	d0 03		bne $1a58c4	                BNE return_false
.1a58c1	28		plp		return_true     PLP
.1a58c2	38		sec		                SEC
.1a58c3	60		rts		            RTS
.1a58c4	28		plp		return_false    PLP
.1a58c5	18		clc		                CLC
.1a58c6	60		rts		            RTS
.1a58c7					SHIFTDEC
.1a58c7	08		php		                PHP
.1a58c8	e2 20		sep #$20	            SEP #$20
.1a58ca	38		sec		                SEC                     ; Convert '0'..'9' to it's number
.1a58cb	e9 30		sbc #$30	                SBC #'0'
.1a58cd	20 7a 05	jsr $1a057a	            JSR MULINT10
.1a58d0	c2 20		rep #$20	            REP #$20
.1a58d2	29 ff 00	and #$00ff	                AND #$00FF              ; Add the number to ARGUMENT1
.1a58d5	18		clc		                CLC
.1a58d6	65 23		adc $0823	                ADC ARGUMENT1
.1a58d8	85 23		sta $0823	                STA ARGUMENT1
.1a58da	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a58dc	69 00 00	adc #$0000	                ADC #0
.1a58df	85 25		sta $0825	                STA ARGUMENT1+2
.1a58e1	28		plp		                PLP
.1a58e2	60		rts		            RTS
.1a58e3					SHIFTHEX
.1a58e3	08		php		                PHP
.1a58e4	e2 20		sep #$20	            SEP #$20
.1a58e6	c9 30		cmp #$30	                CMP #'0'                ; Process 0-9
.1a58e8	90 04		bcc $1a58ee	                BLT not_09
.1a58ea	c9 3a		cmp #$3a	                CMP #'9'+1
.1a58ec	90 1c		bcc $1a590a	                BLT is_09
.1a58ee	c9 61		cmp #$61	not_09          CMP #'a'                ; Process lowercase A-F
.1a58f0	90 04		bcc $1a58f6	                BLT not_lc
.1a58f2	c9 67		cmp #$67	                CMP #'f'+1
.1a58f4	90 0a		bcc $1a5900	                BLT is_lc
.1a58f6	c9 41		cmp #$41	not_lc          CMP #'A'                ; Process uppercase A-F
.1a58f8	90 04		bcc $1a58fe	                BLT not_uc
.1a58fa	c9 47		cmp #$47	                CMP #'F'+1
.1a58fc	90 07		bcc $1a5905	                BLT is_uc
.1a58fe	80 31		bra $1a5931	not_uc          BRA done                ; Just return if we couldn't convert... this shouldn't happen
.1a5900	38		sec		is_lc           SEC                     ; Convert 'a'-'f' to the actual number
.1a5901	e9 57		sbc #$57	                SBC #'a'-10
.1a5903	80 08		bra $1a590d	                BRA shift
.1a5905	38		sec		is_uc           SEC                     ; Convert 'A'-'F' to the actual number
.1a5906	e9 37		sbc #$37	                SBC #'A'-10
.1a5908	80 03		bra $1a590d	                BRA shift
.1a590a	38		sec		is_09           SEC                     ; Convert '0'-'9' to the actual number
.1a590b	e9 30		sbc #$30	                SBC #'0'
.1a590d					shift
.1a590d	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a590f	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5911	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5913	26 26		rol $0826	                ROL ARGUMENT1+3
.1a5915	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5917	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5919	26 25		rol $0825	                ROL ARGUMENT1+2
.1a591b	26 26		rol $0826	                ROL ARGUMENT1+3
.1a591d	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a591f	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5921	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5923	26 26		rol $0826	                ROL ARGUMENT1+3
.1a5925	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5927	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5929	26 25		rol $0825	                ROL ARGUMENT1+2
.1a592b	26 26		rol $0826	                ROL ARGUMENT1+3
.1a592d	05 23		ora $0823	                ORA ARGUMENT1           ; Add the number to it
.1a592f	85 23		sta $0823	                STA ARGUMENT1
.1a5931	28		plp		done            PLP
.1a5932	60		rts		            RTS
.1a5933					SHIFTBIN
.1a5933	08		php		                PHP
.1a5934	e2 20		sep #$20	            SEP #$20
.1a5936	c9 30		cmp #$30	                CMP #'0'                ; If the character is '0'...
.1a5938	f0 06		beq $1a5940	                BEQ shift_0             ; Shift a 0 onto ARGUMENT1
.1a593a	c9 31		cmp #$31	                CMP #'1'                ; If the character is '1'...
.1a593c	f0 0a		beq $1a5948	                BEQ shift_1             ; Shift a 1 onto ARGUMENT1
.1a593e	80 0f		bra $1a594f	                BRA done
.1a5940					shift_0
.1a5940	c2 20		rep #$20	            REP #$20
.1a5942	06 23		asl $0823	                ASL ARGUMENT1
.1a5944	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5946	80 07		bra $1a594f	                BRA done
.1a5948					shift_1
.1a5948	c2 20		rep #$20	            REP #$20
.1a594a	38		sec		                SEC
.1a594b	26 23		rol $0823	                ROL ARGUMENT1
.1a594d	26 25		rol $0825	                ROL ARGUMENT1+2
.1a594f	28		plp		done            PLP
.1a5950	60		rts		            RTS
.1a5951					FP_POW10
.1a5951	08		php		                PHP
.1a5952	e2 30		sep #$30	            SEP #$30
.1a5954	a5 61		lda $0861	                LDA MARG4
.1a5956	f0 0d		beq $1a5965	                BEQ return_1
.1a5958	aa		tax		                TAX
.1a5959	a5 69		lda $0869	                LDA MARG6
.1a595b	d0 15		bne $1a5972	                BNE do_div
.1a595d	a9 00		lda #$00	                LDA #FP_OUT_MULT                    ; We'll multiply
.1a595f	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5963	80 15		bra $1a597a	                BRA start_loop
.1a5965					return_1
.1a5965	e2 20		sep #$20	            SEP #$20
.1a5967	a9 03		lda #$03	                LDA #FP_OUT_ONE                     ; We want to return a 1.0
.1a5969	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a596d	ea		nop		                NOP
.1a596e	ea		nop		                NOP
.1a596f	ea		nop		                NOP
.1a5970	80 62		bra $1a59d4	                BRA ret_result                      ; And return the result
.1a5972					do_div
.1a5972	e2 20		sep #$20	            SEP #$20
.1a5974	a9 01		lda #$01	                LDA #FP_OUT_DIV                     ; We'll divide
.1a5976	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a597a					start_loop
.1a597a	e2 20		sep #$20	            SEP #$20
.1a597c	a9 43		lda #$43	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a597e	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.1a5982	c2 20		rep #$20	            REP #$20
.1a5984	a9 00 10	lda #$1000	                LDA #$1000                          ; Input 0 = 1.0
.1a5987	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a598b	a9 00 00	lda #$0000	                LDA #0
.1a598e	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5992					loop
.1a5992	c2 20		rep #$20	            REP #$20
.1a5994	a9 00 a0	lda #$a000	                LDA #$A000                          ; Input 1 = 10.0
.1a5997	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a599b	a9 00 00	lda #$0000	                LDA #0
.1a599e	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a59a2	ea		nop		                NOP                                 ; Wait for the operation to complete
.1a59a3	ea		nop		                NOP
.1a59a4	ea		nop		                NOP
.1a59a5	ca		dex		                DEX                                 ; Count down
.1a59a6	f0 2c		beq $1a59d4	                BEQ ret_result                      ; If 0, then we're done
.1a59a8	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; SCRATCH <-- Result
.1a59ac	8f 0c 08 00	sta $00080c	                STA @l SCRATCH
.1a59b0	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a59b4	8f 0e 08 00	sta $00080e	                STA @l SCRATCH+2
.1a59b8	e2 20		sep #$20	            SEP #$20
.1a59ba	a9 42		lda #$42	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_1
.1a59bc	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.1a59c0	c2 20		rep #$20	            REP #$20
.1a59c2	af 0c 08 00	lda $00080c	                LDA @l SCRATCH                      ; Input 0 <-- SCRATCH
.1a59c6	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a59ca	af 0e 08 00	lda $00080e	                LDA @l SCRATCH+2
.1a59ce	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a59d2	80 be		bra $1a5992	                BRA loop
.1a59d4					ret_result
.1a59d4	c2 20		rep #$20	            REP #$20
.1a59d6	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; Return the result
.1a59da	85 23		sta $0823	                STA ARGUMENT1
.1a59dc	af 0a e2 af	lda $afe20a	                LDA FP_MATH_OUTPUT_FP_HL
.1a59e0	85 25		sta $0825	                STA ARGUMENT1+2
.1a59e2	e2 20		sep #$20	            SEP #$20
.1a59e4	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a59e6	85 27		sta $0827	                STA ARGTYPE1
.1a59e8	28		plp		done            PLP
.1a59e9	60		rts		            RTS
.1a59ea					PACKFLOAT
.1a59ea	08		php		                PHP
.1a59eb	c2 20		rep #$20	            REP #$20
.1a59ed	a5 5d		lda $085d	            LDA MARG3
.1a59ef	85 23		sta $0823	            STA ARGUMENT1
.1a59f1	a5 5f		lda $085f	            LDA MARG3+2
.1a59f3	85 25		sta $0825	            STA ARGUMENT1+2
.1a59f5	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a59f8	c2 20		rep #$20	            REP #$20
.1a59fa	a5 23		lda $0823	            LDA ARGUMENT1
.1a59fc	85 29		sta $0829	            STA ARGUMENT2
.1a59fe	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5a00	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5a02	c2 20		rep #$20	            REP #$20
.1a5a04	a5 59		lda $0859	            LDA MARG2
.1a5a06	85 23		sta $0823	            STA ARGUMENT1
.1a5a08	a5 5b		lda $085b	            LDA MARG2+2
.1a5a0a	85 25		sta $0825	            STA ARGUMENT1+2
.1a5a0c	20 2b 57	jsr $1a572b	            JSR OP_FP_DIV
.1a5a0f	c2 20		rep #$20	            REP #$20
.1a5a11	a5 55		lda $0855	            LDA MARG1
.1a5a13	85 29		sta $0829	            STA ARGUMENT2
.1a5a15	a5 57		lda $0857	            LDA MARG1+2
.1a5a17	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5a19	20 e0 56	jsr $1a56e0	            JSR OP_FP_ADD
.1a5a1c	c2 20		rep #$20	            REP #$20
.1a5a1e	a5 23		lda $0823	            LDA ARGUMENT1
.1a5a20	85 29		sta $0829	            STA ARGUMENT2
.1a5a22	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5a24	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5a26	20 51 59	jsr $1a5951	            JSR FP_POW10
.1a5a29	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a5a2c	c2 20		rep #$20	            REP #$20
.1a5a2e	a5 65		lda $0865	                LDA MARG5                       ; Check to see if the float should be negative
.1a5a30	f0 07		beq $1a5a39	                BEQ set_float_type              ; If not, just set the type
.1a5a32	a5 25		lda $0825	                LDA ARGUMENT1+2                 ; If so, set the sign bit
.1a5a34	09 00 80	ora #$8000	                ORA #$8000
.1a5a37	85 25		sta $0825	                STA ARGUMENT1+2
.1a5a39					set_float_type
.1a5a39	e2 20		sep #$20	            SEP #$20
.1a5a3b	a9 01		lda #$01	                LDA #TYPE_FLOAT                 ; Set the type to float... ready for returning!
.1a5a3d	85 27		sta $0827	                STA ARGTYPE1
.1a5a3f	28		plp		                PLP
.1a5a40	60		rts		            RTS
.1a5a41					PARSENUM
.1a5a41	5a		phy		                PHY
.1a5a42	08		php		                PHP
.1a5a43	c2 30		rep #$30	            REP #$30
.1a5a45	64 23		stz $0823	                STZ ARGUMENT1       ; This will be the accumulator for building the number
.1a5a47	64 25		stz $0825	                STZ ARGUMENT1+2
.1a5a49	64 55		stz $0855	                STZ MARG1           ; This will be the integer portion of the mantissa for floats
.1a5a4b	64 57		stz $0857	                STZ MARG1+2
.1a5a4d	64 65		stz $0865	                STZ MARG5           ; MARG5 will be the negative flag for the number
.1a5a4f	64 59		stz $0859	                STZ MARG2           ; This will be the denominator of the fractional part of the mantissa
.1a5a51	64 5b		stz $085b	                STZ MARG2+2
.1a5a53	a9 01 00	lda #$0001	                LDA #1
.1a5a56	85 5d		sta $085d	                STA MARG3           ; This will be the divisor of the fractional part of the mantissa
.1a5a58	64 5f		stz $085f	                STZ MARG3+2
.1a5a5a	64 61		stz $0861	                STZ MARG4           ; This will be the exponent of a float
.1a5a5c	64 63		stz $0863	                STZ MARG4+2
.1a5a5e	64 69		stz $0869	                STZ MARG6           ; MARG6 will be the negative flag for the exponent
.1a5a60					s0
.1a5a60	e2 20		sep #$20	            SEP #$20
.1a5a62	a0 00 00	ldy #$0000	                LDY #0
.1a5a65	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the first byte
.1a5a67	c9 2b		cmp #$2b	                CMP #'+'
.1a5a69	f0 33		beq $1a5a9e	                BEQ s1_drop         ; '+' --> S1, drop
.1a5a6b	c9 2d		cmp #$2d	                CMP #'-'
.1a5a6d	f0 2b		beq $1a5a9a	                BEQ s1_negative     ; Flag that the number is negative
.1a5a6f	c9 26		cmp #$26	                CMP #'&'
.1a5a71	f0 3a		beq $1a5aad	                BEQ s2_drop         ; '&' --> S2, drop
.1a5a73	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a5a76	90 03		bcc $1a5a7b	                BCC syntax_err
.1a5a78	82 ac 00	brl $1a5b27	                BRL s7_shift        ; '0'-'9' --> S7, emit
.1a5a7b					syntax_err
.1a5a7b	08		php		            PHP
.1a5a7c	c2 20		rep #$20	            REP #$20
.1a5a7e	48		pha		            PHA
.1a5a7f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5a82	5b		tcd		            TCD
.1a5a83	68		pla		            PLA
.1a5a84	28		plp		            PLP
.1a5a85	e2 20		sep #$20	            SEP #$20
.1a5a87	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a5a89	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5a8d	c2 20		rep #$20	            REP #$20
.1a5a8f	29 ff 00	and #$00ff	            AND #$00FF
.1a5a92	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a5a95	e2 20		sep #$20	            SEP #$20
.1a5a97	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5a9a	a9 01		lda #$01	s1_negative     LDA #1              ; Set the negative flag for the mantissa
.1a5a9c	85 65		sta $0865	                STA MARG5
.1a5a9e	c8		iny		s1_drop         INY                 ; Drop the character...
.1a5a9f	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next
.1a5aa1	c9 26		cmp #$26	                CMP #'&'
.1a5aa3	f0 08		beq $1a5aad	                BEQ s2_drop         ; '&' --> S2, drop the '&'
.1a5aa5	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a5aa8	90 d1		bcc $1a5a7b	                BCC syntax_err
.1a5aaa	82 7a 00	brl $1a5b27	                BRL s7_shift        ; '0'-'9' --> S7, shift
.1a5aad	c8		iny		s2_drop         INY                 ; Drop the character
.1a5aae	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.1a5ab0	c9 68		cmp #$68	                CMP #'h'
.1a5ab2	f0 0e		beq $1a5ac2	                BEQ s3_drop         ; 'h', 'H' --> S3, drop
.1a5ab4	c9 48		cmp #$48	                CMP #'H'
.1a5ab6	f0 0a		beq $1a5ac2	                BEQ s3_drop
.1a5ab8	c9 62		cmp #$62	                CMP #'b'
.1a5aba	f0 4c		beq $1a5b08	                BEQ s5_drop         ; 'b', 'B' --> S5, drop
.1a5abc	c9 42		cmp #$42	                CMP #'B'
.1a5abe	f0 48		beq $1a5b08	                BEQ s5_drop
.1a5ac0	80 b9		bra $1a5a7b	                BRA syntax_err
.1a5ac2	c8		iny		s3_drop         INY                 ; Drop the character
.1a5ac3	b7 00		lda [$0800],y	s3              LDA [BIP],Y         ; Get the next character
.1a5ac5	20 0c 05	jsr $1a050c	            JSR ISHEX
.1a5ac8	b0 02		bcs $1a5acc	                BCS s4_shift
.1a5aca	80 af		bra $1a5a7b	                BRA syntax_err
.1a5acc					s4_shift
.1a5acc	20 e3 58	jsr $1a58e3	            JSR SHIFTHEX
.1a5acf	c8		iny		                INY
.1a5ad0	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.1a5ad2	20 0c 05	jsr $1a050c	            JSR ISHEX
.1a5ad5	b0 f5		bcs $1a5acc	                BCS s4_shift        ; '0'-'9','A'-'F' --> S4, shift
.1a5ad7					ret_integer
.1a5ad7	e2 20		sep #$20	            SEP #$20
.1a5ad9	a5 65		lda $0865	                LDA MARG5           ; check if the number should be negative
.1a5adb	f0 11		beq $1a5aee	                BEQ set_int_type    ; If not, just set the type and return
.1a5add	c2 20		rep #$20	            REP #$20
.1a5adf	38		sec		                SEC                 ; If so, negate it
.1a5ae0	a9 00 00	lda #$0000	                LDA #0
.1a5ae3	e5 23		sbc $0823	                SBC ARGUMENT1
.1a5ae5	85 23		sta $0823	                STA ARGUMENT1
.1a5ae7	a9 00 00	lda #$0000	                LDA #0
.1a5aea	e5 25		sbc $0825	                SBC ARGUMENT1+2
.1a5aec	85 25		sta $0825	                STA ARGUMENT1+2
.1a5aee					set_int_type
.1a5aee	e2 20		sep #$20	            SEP #$20
.1a5af0	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; Return an integer
.1a5af2	85 27		sta $0827	                STA ARGTYPE1
.1a5af4					stop
.1a5af4	c2 20		rep #$20	            REP #$20
.1a5af6	18		clc		                CLC
.1a5af7	98		tya		                TYA
.1a5af8	65 00		adc $0800	                ADC BIP
.1a5afa	85 00		sta $0800	                STA BIP
.1a5afc	a5 02		lda $0802	                LDA BIP+2
.1a5afe	69 00 00	adc #$0000	                ADC #0
.1a5b01	85 02		sta $0802	                STA BIP+2
.1a5b03	e2 20		sep #$20	            SEP #$20
.1a5b05	28		plp		                PLP
.1a5b06	7a		ply		                PLY
.1a5b07	60		rts		            RTS
.1a5b08	c8		iny		s5_drop         INY                     ; Drop the character
.1a5b09	b7 00		lda [$0800],y	s5              LDA [BIP],Y             ; Get the next character
.1a5b0b	c9 30		cmp #$30	                CMP #'0'
.1a5b0d	f0 07		beq $1a5b16	                BEQ s6_shift            ; '0', '1' --> S6, shift
.1a5b0f	c9 31		cmp #$31	                CMP #'1'
.1a5b11	f0 03		beq $1a5b16	                BEQ s6_shift
.1a5b13	82 65 ff	brl $1a5a7b	                BRL syntax_err
.1a5b16					s6_shift
.1a5b16	20 33 59	jsr $1a5933	            JSR SHIFTBIN
.1a5b19	c8		iny		                INY
.1a5b1a	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5b1c	c9 30		cmp #$30	                CMP #'0'                ; '0', '1' --> S6, shift
.1a5b1e	f0 f6		beq $1a5b16	                BEQ s6_shift
.1a5b20	c9 31		cmp #$31	                CMP #'1'
.1a5b22	f0 f2		beq $1a5b16	                BEQ s6_shift
.1a5b24	82 b0 ff	brl $1a5ad7	                BRL ret_integer         ; Return integer
.1a5b27					s7_shift
.1a5b27	20 c7 58	jsr $1a58c7	            JSR SHIFTDEC
.1a5b2a	c8		iny		                INY
.1a5b2b	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5b2d	c9 2e		cmp #$2e	                CMP #'.'                ; '.' --> S8, drop and preserve mantissa
.1a5b2f	f0 08		beq $1a5b39	                BEQ s8_mantissa
.1a5b31	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a5b34	b0 f1		bcs $1a5b27	                BCS s7_shift
.1a5b36	82 9e ff	brl $1a5ad7	                BRL ret_integer         ; Return integer
.1a5b39					s8_mantissa
.1a5b39	c2 20		rep #$20	            REP #$20
.1a5b3b	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a5b3e	c2 20		rep #$20	            REP #$20
.1a5b40	a5 23		lda $0823	            LDA ARGUMENT1
.1a5b42	85 55		sta $0855	            STA MARG1
.1a5b44	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5b46	85 57		sta $0857	            STA MARG1+2
.1a5b48	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the decimal
.1a5b4a	64 25		stz $0825	                STZ ARGUMENT1+2
.1a5b4c	e2 20		sep #$20	            SEP #$20
.1a5b4e	80 36		bra $1a5b86	                BRA s8_drop
.1a5b50					s8_shift
.1a5b50	20 c7 58	jsr $1a58c7	            JSR SHIFTDEC
.1a5b53	c2 20		rep #$20	            REP #$20
.1a5b55	a5 5f		lda $085f	                LDA MARG3+2             ; high 16 bits
.1a5b57	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a5b5b	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.1a5b5e	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.1a5b62	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to high 16 bits of MARG3
.1a5b66	85 5f		sta $085f	                STA MARG3+2
.1a5b68	a5 5d		lda $085d	                LDA MARG3
.1a5b6a	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a5b6e	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.1a5b71	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.1a5b75	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to MARG3
.1a5b79	85 5d		sta $085d	                STA MARG3
.1a5b7b	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.1a5b7f	18		clc		                CLC
.1a5b80	65 5f		adc $085f	                ADC MARG3+2
.1a5b82	85 5f		sta $085f	                STA MARG3+2
.1a5b84	e2 20		sep #$20	            SEP #$20
.1a5b86					s8_drop
.1a5b86	c8		iny		                INY
.1a5b87	b7 00		lda [$0800],y	                LDA [BIP],Y
.1a5b89	c9 65		cmp #$65	                CMP #'e'                ; 'E' --> S9, drop
.1a5b8b	f0 24		beq $1a5bb1	                BEQ s9_drop
.1a5b8d	c9 45		cmp #$45	                CMP #'E'
.1a5b8f	f0 20		beq $1a5bb1	                BEQ s9_drop
.1a5b91	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a5b94	b0 ba		bcs $1a5b50	                BCS s8_shift
.1a5b96	c2 20		rep #$20	            REP #$20
.1a5b98	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a5b9b	c2 20		rep #$20	            REP #$20
.1a5b9d	a5 23		lda $0823	            LDA ARGUMENT1
.1a5b9f	85 59		sta $0859	            STA MARG2
.1a5ba1	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5ba3	85 5b		sta $085b	            STA MARG2+2
.1a5ba5	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.1a5ba7	64 25		stz $0825	                STZ ARGUMENT1+2
.1a5ba9	20 ea 59	jsr $1a59ea	            JSR PACKFLOAT
.1a5bac	e2 20		sep #$20	            SEP #$20
.1a5bae	82 43 ff	brl $1a5af4	                BRL stop
.1a5bb1					s9_drop
.1a5bb1	c2 20		rep #$20	            REP #$20
.1a5bb3	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a5bb6	c2 20		rep #$20	            REP #$20
.1a5bb8	a5 23		lda $0823	            LDA ARGUMENT1
.1a5bba	85 59		sta $0859	            STA MARG2
.1a5bbc	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5bbe	85 5b		sta $085b	            STA MARG2+2
.1a5bc0	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.1a5bc2	64 25		stz $0825	                STZ ARGUMENT1+2
.1a5bc4	e2 20		sep #$20	            SEP #$20
.1a5bc6	c8		iny		                INY
.1a5bc7	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5bc9	c9 2b		cmp #$2b	                CMP #'+'
.1a5bcb	f0 10		beq $1a5bdd	                BEQ s10_drop            ; '+' --> S10, drop
.1a5bcd	c9 2d		cmp #$2d	                CMP #'-'
.1a5bcf	f0 08		beq $1a5bd9	                BEQ s10_setneg          ; '-' --> S10, set exponent is negative
.1a5bd1	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a5bd4	b0 12		bcs $1a5be8	                BCS S11_shift           ; '0'-'9' --> S11, shift
.1a5bd6	82 a2 fe	brl $1a5a7b	                BRL syntax_err
.1a5bd9					s10_setneg
.1a5bd9	a9 01		lda #$01	                LDA #1                  ; Set that the exponent should be negative
.1a5bdb	85 69		sta $0869	                STA MARG6
.1a5bdd					s10_drop
.1a5bdd	c8		iny		                INY
.1a5bde	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5be0	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a5be3	b0 03		bcs $1a5be8	                BCS s11_shift
.1a5be5	82 93 fe	brl $1a5a7b	                BRL syntax_err
.1a5be8					s11_shift
.1a5be8	20 c7 58	jsr $1a58c7	            JSR SHIFTDEC
.1a5beb	c8		iny		                INY
.1a5bec	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5bee	20 fb 04	jsr $1a04fb	            JSR ISNUMERAL
.1a5bf1	b0 f5		bcs $1a5be8	                BCS s11_shift
.1a5bf3	c2 20		rep #$20	            REP #$20
.1a5bf5	a5 23		lda $0823	            LDA ARGUMENT1
.1a5bf7	85 61		sta $0861	            STA MARG4
.1a5bf9	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5bfb	85 63		sta $0863	            STA MARG4+2
.1a5bfd	20 ea 59	jsr $1a59ea	            JSR PACKFLOAT
.1a5c00	82 f1 fe	brl $1a5af4	                BRL stop
.1a5c03					ITOF
.1a5c03	08		php		                PHP
.1a5c04	20 91 56	jsr $1a5691	            JSR FIXINT_TO_FP
.1a5c07	28		plp		done            PLP
.1a5c08	60		rts		            RTS
.1a5c09					FTOI
.1a5c09	08		php		                PHP
.1a5c0a					LOCALS
>0001					l_sign          .byte ?
>0002					l_exponent      .byte ?
>0003					l_mantissa      .dword ?
.1a5c0a	c2 20		rep #$20	            REP #$20
.1a5c0c	a9 00 5f	lda #$5f00	                LDA #<>FP_1_0
.1a5c0f	85 29		sta $0829	                STA ARGUMENT2
.1a5c11	a9 1a 00	lda #$001a	                LDA #(FP_1_0 >> 16)
.1a5c14	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5c16	e2 20		sep #$20	            SEP #$20
.1a5c18	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a5c1a	85 2d		sta $082d	                STA ARGTYPE2
.1a5c1c	c2 20		rep #$20	            REP #$20
.1a5c1e	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5c21	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5c24	d0 0c		bne $1a5c32	                BNE alloc_locals        ; No: get ready to do the full conversion
.1a5c26	a9 00 00	lda #$0000	                LDA #0
.1a5c29	8d 23 08	sta $0823	                STA @w ARGUMENT1        ; Yes: Return 0
.1a5c2c	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5c2f	82 a1 00	brl $1a5cd3	                BRL done
.1a5c32	f4 00 00	pea #$0000	alloc_locals    PEA #0                  ; Reserve space for the locals
.1a5c35	f4 00 00	pea #$0000	                PEA #0
.1a5c38	f4 00 00	pea #$0000	                PEA #0
.1a5c3b	e2 20		sep #$20	            SEP #$20
.1a5c3d	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3      ; Preserve the sign bit
.1a5c40	29 80		and #$80	                AND #$80
.1a5c42	83 01		sta $01,s	                STA l_sign
.1a5c44	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2      ; Preserve the exponent
.1a5c47	2a		rol a		                ROL A
.1a5c48	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3
.1a5c4b	2a		rol a		                ROL A
.1a5c4c	83 02		sta $02,s	                STA l_exponent
.1a5c4e	a9 00		lda #$00	save_mantissa   LDA #0                  ; Save the mantissa (with the implied 1)
.1a5c50	83 06		sta $06,s	                STA l_mantissa+3
.1a5c52	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2
.1a5c55	09 80		ora #$80	                ORA #$80
.1a5c57	83 05		sta $05,s	                STA l_mantissa+2
.1a5c59	ad 24 08	lda $0824	                LDA @w ARGUMENT1+1
.1a5c5c	83 04		sta $04,s	                STA l_mantissa+1
.1a5c5e	ad 23 08	lda $0823	                LDA @w ARGUMENT1
.1a5c61	83 03		sta $03,s	                STA l_mantissa
.1a5c63	a3 02		lda $02,s	                LDA l_exponent
.1a5c65	c9 96		cmp #$96	loop            CMP #150
.1a5c67	f0 3a		beq $1a5ca3	                BEQ adj_sign
.1a5c69	90 1f		bcc $1a5c8a	                BLT shift_right
.1a5c6b	08		php		            PHP
.1a5c6c	c2 20		rep #$20	            REP #$20
.1a5c6e	48		pha		            PHA
.1a5c6f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5c72	5b		tcd		            TCD
.1a5c73	68		pla		            PLA
.1a5c74	28		plp		            PLP
.1a5c75	e2 20		sep #$20	            SEP #$20
.1a5c77	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a5c79	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5c7d	c2 20		rep #$20	            REP #$20
.1a5c7f	29 ff 00	and #$00ff	            AND #$00FF
.1a5c82	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a5c85	e2 20		sep #$20	            SEP #$20
.1a5c87	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5c8a					shift_right
.1a5c8a	c2 20		rep #$20	            REP #$20
.1a5c8c	a3 05		lda $05,s	                LDA l_mantissa+2
.1a5c8e	4a		lsr a		                LSR A
.1a5c8f	83 05		sta $05,s	                STA l_mantissa+2
.1a5c91	a3 03		lda $03,s	                LDA l_mantissa
.1a5c93	6a		ror a		                ROR A
.1a5c94	83 03		sta $03,s	                STA l_mantissa
.1a5c96	e2 20		sep #$20	            SEP #$20
.1a5c98	a3 02		lda $02,s	                LDA l_exponent
.1a5c9a	1a		inc a		                INC A
.1a5c9b	83 02		sta $02,s	                STA l_exponent
.1a5c9d	c9 96		cmp #$96	                CMP #150
.1a5c9f	f0 02		beq $1a5ca3	                BEQ adj_sign
.1a5ca1	80 e7		bra $1a5c8a	                BRA shift_right
.1a5ca3	a3 01		lda $01,s	adj_sign        LDA l_sign
.1a5ca5	f0 1b		beq $1a5cc2	                BEQ ret_positive
.1a5ca7	c2 20		rep #$20	            REP #$20
.1a5ca9	a3 03		lda $03,s	                LDA l_mantissa
.1a5cab	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a5cae	18		clc		                CLC
.1a5caf	69 01 00	adc #$0001	                ADC #1
.1a5cb2	8d 23 08	sta $0823	                STA @w ARGUMENT1
.1a5cb5	a3 05		lda $05,s	                LDA l_mantissa+2
.1a5cb7	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a5cba	69 00 00	adc #$0000	                ADC #0
.1a5cbd	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5cc0	80 0c		bra $1a5cce	                BRA clean
.1a5cc2					ret_positive
.1a5cc2	c2 20		rep #$20	            REP #$20
.1a5cc4	a3 03		lda $03,s	                LDA l_mantissa
.1a5cc6	8d 23 08	sta $0823	                STA @w ARGUMENT1
.1a5cc9	a3 05		lda $05,s	                LDA l_mantissa+2
.1a5ccb	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5cce					clean
.1a5cce	c2 20		rep #$20	            REP #$20
.1a5cd0	68		pla		                PLA                     ; Clean up the locals
.1a5cd1	68		pla		                PLA
.1a5cd2	68		pla		                PLA
.1a5cd3					done
.1a5cd3	e2 20		sep #$20	            SEP #$20
.1a5cd5	a9 00		lda #$00	                LDA #TYPE_INTEGER       ; Set the return type to integer
.1a5cd7	8d 27 08	sta $0827	                STA @w ARGTYPE1
.1a5cda	28		plp		                PLP
.1a5cdb	60		rts		            RTS
.1a5cdc					FP_COMPARE
.1a5cdc	da		phx		                PHX
.1a5cdd	08		php		                PHP
.1a5cde	c2 20		rep #$20	            REP #$20
.1a5ce0	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save ARGUMENT1 so we don't destroy it
.1a5ce2	48		pha		                PHA
.1a5ce3	a5 23		lda $0823	                LDA ARGUMENT1
.1a5ce5	48		pha		                PHA
.1a5ce6	20 d5 56	jsr $1a56d5	            JSR OP_FP_SUB
.1a5ce9	20 b3 58	jsr $1a58b3	            JSR FARG1EQ0
.1a5cec	b0 11		bcs $1a5cff	                BCS are_equal
.1a5cee	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Check the high word
.1a5cf0	89 00 80	bit #$8000	                BIT #$8000
.1a5cf3	d0 05		bne $1a5cfa	                BNE is_lt                   ; ARGUMENT1 < ARGUMENT2
.1a5cf5	a9 01 00	lda #$0001	is_gt           LDA #1                      ; ARGUMENT1 > ARGUMENT2: return 1
.1a5cf8	80 08		bra $1a5d02	                BRA ret_result
.1a5cfa	a9 ff ff	lda #$ffff	is_lt           LDA #$FFFF                  ; ARGUMENT1 > ARGUMENT2: return -1
.1a5cfd	80 03		bra $1a5d02	                BRA ret_result
.1a5cff	a9 00 00	lda #$0000	are_equal       LDA #0                      ; Equal: return 0
.1a5d02	fa		plx		ret_result      PLX                         ; Restore ARGUMENT1
.1a5d03	86 23		stx $0823	                STX ARGUMENT1
.1a5d05	fa		plx		                PLX
.1a5d06	86 25		stx $0825	                STX ARGUMENT1+2
.1a5d08	28		plp		                PLP
.1a5d09	fa		plx		                PLX
.1a5d0a	60		rts		            RTS
.1a5d0b					OP_FP_LT
.1a5d0b	08		php		                PHP
.1a5d0c	c2 30		rep #$30	            REP #$30
.1a5d0e	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5d11	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5d14	d0 05		bne $1a5d1b	                BNE ret_false
.1a5d16	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a5d19	80 03		bra $1a5d1e	                BRA done
.1a5d1b					ret_false
.1a5d1b	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a5d1e	28		plp		done            PLP
.1a5d1f	60		rts		            RTS
.1a5d20					OP_FP_GT
.1a5d20	08		php		                PHP
.1a5d21	c2 30		rep #$30	            REP #$30
.1a5d23	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5d26	c9 01 00	cmp #$0001	                CMP #1
.1a5d29	d0 05		bne $1a5d30	                BNE ret_false
.1a5d2b	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a5d2e	80 03		bra $1a5d33	                BRA done
.1a5d30					ret_false
.1a5d30	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a5d33	28		plp		done            PLP
.1a5d34	60		rts		            RTS
.1a5d35					OP_FP_EQ
.1a5d35	08		php		                PHP
.1a5d36	c2 30		rep #$30	            REP #$30
.1a5d38	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5d3b	c9 00 00	cmp #$0000	                CMP #0
.1a5d3e	d0 05		bne $1a5d45	                BNE ret_false
.1a5d40	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a5d43	80 03		bra $1a5d48	                BRA done
.1a5d45					ret_false
.1a5d45	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a5d48	28		plp		done            PLP
.1a5d49	60		rts		            RTS
.1a5d4a					OP_FP_LTE
.1a5d4a	08		php		                PHP
.1a5d4b	c2 30		rep #$30	            REP #$30
.1a5d4d	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5d50	c9 01 00	cmp #$0001	                CMP #1
.1a5d53	f0 05		beq $1a5d5a	                BEQ ret_false
.1a5d55	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a5d58	80 03		bra $1a5d5d	                BRA done
.1a5d5a					ret_false
.1a5d5a	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a5d5d	28		plp		done            PLP
.1a5d5e	60		rts		            RTS
.1a5d5f					OP_FP_GTE
.1a5d5f	08		php		                PHP
.1a5d60	c2 30		rep #$30	            REP #$30
.1a5d62	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5d65	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5d68	f0 05		beq $1a5d6f	                BEQ ret_false
.1a5d6a	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a5d6d	80 03		bra $1a5d72	                BRA done
.1a5d6f					ret_false
.1a5d6f	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a5d72	28		plp		done            PLP
.1a5d73	60		rts		            RTS
.1a5d74					OP_FP_NE
.1a5d74	08		php		                PHP
.1a5d75	c2 30		rep #$30	            REP #$30
.1a5d77	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5d7a	c9 00 00	cmp #$0000	                CMP #0
.1a5d7d	f0 05		beq $1a5d84	                BEQ ret_false
.1a5d7f	20 2d 06	jsr $1a062d	            JSR SET_TRUE
.1a5d82	80 03		bra $1a5d87	                BRA done
.1a5d84					ret_false
.1a5d84	20 3f 06	jsr $1a063f	            JSR SET_FALSE
.1a5d87	28		plp		done            PLP
.1a5d88	60		rts		            RTS
.1a5d89					STREMIT
.1a5d89	08		php		                PHP
.1a5d8a	e2 20		sep #$20	            SEP #$20
.1a5d8c	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Append the character
.1a5d8e	c8		iny		                INY                         ; Advance the character pointer in Y
.1a5d8f	a9 00		lda #$00	                LDA #0                      ; And add the NULL
.1a5d91	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5d93	28		plp		                PLP
.1a5d94	60		rts		            RTS
.1a5d95					STREMITB
.1a5d95	da		phx		                PHX
.1a5d96	08		php		                PHP
.1a5d97	e2 20		sep #$20	            SEP #$20
.1a5d99	c9 80		cmp #$80	                CMP #$80
.1a5d9b	90 0a		bcc $1a5da7	                BLT emit_digits
.1a5d9d	48		pha		                PHA
.1a5d9e	a9 2d		lda #$2d	                LDA #'-'                    ; Print a minus sign
.1a5da0	20 89 5d	jsr $1a5d89	            JSR STREMIT
.1a5da3	68		pla		                PLA
.1a5da4	49 ff		eor #$ff	                EOR #$FF                    ; And negate it
.1a5da6	1a		inc a		                INC A
.1a5da7					emit_digits
.1a5da7	c2 30		rep #$30	            REP #$30
.1a5da9	29 ff 00	and #$00ff	                AND #$00FF
.1a5dac	c9 64 00	cmp #$0064	                CMP #100
.1a5daf	90 0e		bcc $1a5dbf	                BLT chk_tens
.1a5db1	a2 64 00	ldx #$0064	                LDX #100
.1a5db4	20 7a 56	jsr $1a567a	            JSR UINT_DIV_A_X
.1a5db7	18		clc		                CLC
.1a5db8	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.1a5dbb	20 89 5d	jsr $1a5d89	            JSR STREMIT
.1a5dbe	8a		txa		                TXA                         ; Put the remainder in A
.1a5dbf					chk_tens
.1a5dbf	a2 0a 00	ldx #$000a	                LDX #10
.1a5dc2	20 7a 56	jsr $1a567a	            JSR UINT_DIV_A_X
.1a5dc5	18		clc		                CLC
.1a5dc6	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.1a5dc9	20 89 5d	jsr $1a5d89	            JSR STREMIT
.1a5dcc	8a		txa		                TXA                         ; Put the remainder in A
.1a5dcd					ones_digit
.1a5dcd	18		clc		                CLC
.1a5dce	69 30 00	adc #$0030	                ADC #'0'                    ; Convert it to ASCII
.1a5dd1	20 89 5d	jsr $1a5d89	            JSR STREMIT
.1a5dd4	28		plp		                PLP
.1a5dd5	fa		plx		                PLX
.1a5dd6	60		rts		            RTS
.1a5dd7					STRFINDEND
.1a5dd7	08		php		                PHP
.1a5dd8	e2 20		sep #$20	            SEP #$20
.1a5dda	c2 10		rep #$10	            REP #$10
.1a5ddc	a0 00 00	ldy #$0000	                LDY #0
.1a5ddf	b7 23		lda [$0823],y	find_end        LDA [ARGUMENT1],Y           ; Scan to the end of the string
.1a5de1	f0 03		beq $1a5de6	                BEQ done
.1a5de3	c8		iny		                INY
.1a5de4	80 f9		bra $1a5ddf	                BRA find_end
.1a5de6	28		plp		done            PLP
.1a5de7	60		rts		            RTS
=6					FP_D = 6        ; Number of mantissa digits
.1a5de8					FTOS
.1a5de8	08		php		                PHP
.1a5de9	e2 20		sep #$20	            SEP #$20
.1a5deb	c2 10		rep #$10	            REP #$10
.1a5ded	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be the negative flag
.1a5df0	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be K
.1a5df3	f4 00 00	pea #$0000	                PEA #0                      ; This spot will be for the exponents
>0001					L_NEGATIVE      .word ?
>0003					L_K             .word ?
>0005					L_X1            .byte ?                     ; The binary exponent
>0006					L_EXP           .byte ?                     ; The decimal exponent
.1a5df6	20 b3 58	jsr $1a58b3	            JSR FARG1EQ0
.1a5df9	90 19		bcc $1a5e14	                BCC chk_negative
.1a5dfb	20 01 15	jsr $1a1501	            JSR TEMPSTRING
.1a5dfe	e2 20		sep #$20	            SEP #$20
.1a5e00	a0 00 00	ldy #$0000	                LDY #0
.1a5e03	a9 20		lda #$20	                LDA #' '
.1a5e05	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5e07	c8		iny		                INY
.1a5e08	a9 30		lda #$30	                LDA #'0'                    ; Return a "0"
.1a5e0a	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5e0c	c8		iny		                INY
.1a5e0d	a9 00		lda #$00	                LDA #0
.1a5e0f	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5e11	82 ce 00	brl $1a5ee2	                BRL ret_result
.1a5e14					chk_negative
.1a5e14	e2 20		sep #$20	            SEP #$20
.1a5e16	a5 26		lda $0826	                LDA ARGUMENT1+3             ; If N is negative, output a minus sign and negate N
.1a5e18	10 08		bpl $1a5e22	                BPL not_negative
.1a5e1a	29 7f		and #$7f	                AND #$7F                    ; Negate the number
.1a5e1c	85 26		sta $0826	                STA ARGUMENT1+3
.1a5e1e	a9 01		lda #$01	                LDA #1
.1a5e20	83 01		sta $01,s	                STA L_NEGATIVE              ; Set IsNegative to a TRUE value
.1a5e22					not_negative
.1a5e22	c2 20		rep #$20	            REP #$20
.1a5e24	a9 00 00	lda #$0000	                LDA #0                      ; Initialize K to 0, K is a 1-byte signed integer. (SCRATCH is K)
.1a5e27	83 03		sta $03,s	                STA L_K                     ; We're using a word here for convenience
.1a5e29	c2 20		rep #$20	            REP #$20
.1a5e2b	af fc 5e 1a	lda $1a5efc	            LDA ten_d_1
.1a5e2f	85 29		sta $0829	            STA ARGUMENT2
.1a5e31	af fe 5e 1a	lda $1a5efe	            LDA ten_d_1+2
.1a5e35	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5e37	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5e3a	89 00 80	bit #$8000	                BIT #$8000                  ; Is N < 10^(D-1)?
.1a5e3d	d0 12		bne $1a5e51	                BNE shift_up
.1a5e3f					shift_down
.1a5e3f	20 77 58	jsr $1a5877	            JSR FP_DIV10
.1a5e42	a3 03		lda $03,s	                LDA L_K
.1a5e44	1a		inc a		                INC A
.1a5e45	83 03		sta $03,s	                STA L_K                     ; Increment K
.1a5e47	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5e4a	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N < 10^(D-1)?
.1a5e4d	f0 12		beq $1a5e61	                BEQ do_digits               ; Yes: we're ready to process digits
.1a5e4f	80 ee		bra $1a5e3f	                BRA shift_down              ; No: keep dividing
.1a5e51					shift_up
.1a5e51	20 2e 58	jsr $1a582e	            JSR FP_MUL10
.1a5e54	a3 03		lda $03,s	                LDA L_K
.1a5e56	3a		dec a		                DEC A
.1a5e57	83 03		sta $03,s	                STA L_K                     ; Decrement K
.1a5e59	20 dc 5c	jsr $1a5cdc	            JSR FP_COMPARE
.1a5e5c	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N >= 10 ^ (D-1)?
.1a5e5f	f0 f0		beq $1a5e51	                BEQ shift_up                ; No: keep multiplying
.1a5e61					do_digits
.1a5e61	e2 30		sep #$30	            SEP #$30
.1a5e63	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5e65	0a		asl a		                ASL A
.1a5e66	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5e68	2a		rol a		                ROL A
.1a5e69	83 05		sta $05,s	                STA L_X1
.1a5e6b	38		sec		                SEC
.1a5e6c	a9 96		lda #$96	                LDA #150                    ; X := 150 - X1
.1a5e6e	e3 05		sbc $05,s	                SBC L_X1
.1a5e70	aa		tax		                TAX
.1a5e71	f0 0f		beq $1a5e82	                BEQ emit_digits             ; If X = 0, just emit the digits
.1a5e73	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Set the implied '1' MSB of the mantissa
.1a5e75	09 80		ora #$80	                ORA #$80
.1a5e77	85 25		sta $0825	                STA ARGUMENT1+2
.1a5e79	46 25		lsr $0825	shift_r         LSR ARGUMENT1+2             ; Shift the mantissa right
.1a5e7b	66 24		ror $0824	                ROR ARGUMENT1+1
.1a5e7d	66 23		ror $0823	                ROR ARGUMENT1
.1a5e7f	ca		dex		                DEX
.1a5e80	d0 f7		bne $1a5e79	                BNE shift_r                 ; Until X = 0
.1a5e82					emit_digits
.1a5e82	c2 10		rep #$10	            REP #$10
.1a5e84	e2 20		sep #$20	            SEP #$20
.1a5e86	64 26		stz $0826	                STZ ARGUMENT1+3             ; Blank out the MSB
.1a5e88	a9 00		lda #$00	                LDA #TYPE_INTEGER           ; Make it an integer
.1a5e8a	85 27		sta $0827	                STA ARGTYPE1
.1a5e8c	a3 01		lda $01,s	                LDA L_NEGATIVE              ; Check IsNegative
.1a5e8e	f0 11		beq $1a5ea1	                BEQ get_raw_digits          ; If FALSE, just convert the raw digits
.1a5e90	c2 20		rep #$20	            REP #$20
.1a5e92	38		sec		                SEC                         ; Make the raw integer negative
.1a5e93	a9 00 00	lda #$0000	                LDA #0
.1a5e96	e5 23		sbc $0823	                SBC ARGUMENT1
.1a5e98	85 23		sta $0823	                STA ARGUMENT1
.1a5e9a	a9 00 00	lda #$0000	                LDA #0
.1a5e9d	e5 25		sbc $0825	                SBC ARGUMENT1+2
.1a5e9f	85 25		sta $0825	                STA ARGUMENT1+2
.1a5ea1					get_raw_digits
.1a5ea1	20 60 15	jsr $1a1560	            JSR ITOS
.1a5ea4	c2 20		rep #$20	            REP #$20
.1a5ea6	a5 16		lda $0816	            LDA STRPTR
.1a5ea8	85 23		sta $0823	            STA ARGUMENT1
.1a5eaa	a5 18		lda $0818	            LDA STRPTR+2
.1a5eac	85 25		sta $0825	            STA ARGUMENT1+2
.1a5eae	20 d7 5d	jsr $1a5dd7	            JSR STRFINDEND
.1a5eb1	e2 20		sep #$20	            SEP #$20
.1a5eb3	c8		iny		                INY                         ; Move the NULL up one byte
.1a5eb4	a9 00		lda #$00	                LDA #0
.1a5eb6	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5eb8	88		dey		insert_loop     DEY                         ; Move to the character before the one we just moved
.1a5eb9	88		dey		                DEY
.1a5eba	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y           ; Get the character
.1a5ebc	c8		iny		                INY                         ; Move to the next space
.1a5ebd	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Store the character here
.1a5ebf	c0 02 00	cpy #$0002	                CPY #2                      ; Check to see if we just moved the 2nd character
.1a5ec2	d0 f4		bne $1a5eb8	                BNE insert_loop             ; If not, keep moving the characters
.1a5ec4	a9 2e		lda #$2e	                LDA #'.'                    ; Insert the '.' in the space we openned
.1a5ec6	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5ec8	e2 20		sep #$20	            SEP #$20
.1a5eca	18		clc		                CLC                         ; Compute the exponent
.1a5ecb	a3 03		lda $03,s	                LDA L_K
.1a5ecd	69 05		adc #$05	                ADC #(FP_D - 1)
.1a5ecf	83 06		sta $06,s	                STA L_EXP
.1a5ed1	f0 19		beq $1a5eec	                BEQ done                    ; If it's 0, just return the number
.1a5ed3	20 d7 5d	jsr $1a5dd7	            JSR STRFINDEND
.1a5ed6	a9 45		lda #$45	                LDA #'E'                    ; Append the "E"
.1a5ed8	20 89 5d	jsr $1a5d89	            JSR STREMIT
.1a5edb	a3 06		lda $06,s	                LDA L_EXP
.1a5edd	20 95 5d	jsr $1a5d95	            JSR STREMITB
.1a5ee0	80 0a		bra $1a5eec	                BRA done                    ; TODO: reformat integer... add E and exponent...
.1a5ee2					ret_result
.1a5ee2	c2 20		rep #$20	            REP #$20
.1a5ee4	a5 16		lda $0816	                LDA STRPTR                  ; Return the temporary string we've assembled
.1a5ee6	85 23		sta $0823	                STA ARGUMENT1
.1a5ee8	a5 18		lda $0818	                LDA STRPTR+2
.1a5eea	85 25		sta $0825	                STA ARGUMENT1+2
.1a5eec					done
.1a5eec	e2 20		sep #$20	            SEP #$20
.1a5eee	a9 02		lda #$02	                LDA #TYPE_STRING
.1a5ef0	85 27		sta $0827	                STA ARGTYPE1
.1a5ef2	c2 20		rep #$20	            REP #$20
.1a5ef4	3b		tsc		                TSC                         ; Remove the locals from the stack
.1a5ef5	18		clc		                CLC
.1a5ef6	69 06 00	adc #$0006	                ADC #6
.1a5ef9	1b		tcs		                TCS
.1a5efa	28		plp		                PLP
.1a5efb	60		rts		            RTS
>1a5efc	00 50 c3 47			ten_d_1         .dword $47c35000            ; 10^(FP_D-1), where FP_D=5
>1a5f00	00 00 80 3f			FP_1_0          .dword $3f800000    ; Floating point constant: 1.0
>1a5f04	f3 04 b5 3f			FP_SQR_2_0      .dword $3fb504f3    ; Floating point constant: sqrt(2.0)
>1a5f08	f3 04 35 3f			FP_SQR_0_5      .dword $3f3504f3    ; Floating point constant: sqrt(0.2)

;******  Return to file: src\basic816.s


;******  Processing file: src\transcendentals.s

.1a5f0c					Q_POLY_HR
.1a5f0c	e2 20		sep #$20	            SEP #$20
.1a5f0e	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5f10	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5f14	c2 20		rep #$20	            REP #$20
.1a5f16	bd 00 00	lda $0000,x	                LDA 0,X
.1a5f19	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f1d	bd 02 00	lda $0002,x	                LDA 2,X
.1a5f20	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5f24	88		dey		                DEY             ; (Y-1) more coefficients.
.1a5f25	e8		inx		loop            INX             ; point to the next coefficient
.1a5f26	e8		inx		                INX
.1a5f27	e8		inx		                INX
.1a5f28	e8		inx		                INX
.1a5f29	e2 20		sep #$20	            SEP #$20
.1a5f2b	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a5f2d	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5f31	c2 20		rep #$20	            REP #$20
.1a5f33	af 23 08 00	lda $000823	                LDA @l ARGUMENT1
.1a5f37	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5f3b	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5f3f	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5f43	ea		nop		                NOP
.1a5f44	ea		nop		                NOP
.1a5f45	ea		nop		                NOP
.1a5f46	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5f4a	48		pha		                PHA
.1a5f4b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5f4f	8f 0a e2 af	sta $afe20a	                STA FP_MATH_INPUT0_HL
.1a5f53	68		pla		                PLA
.1a5f54	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f58	e2 20		sep #$20	            SEP #$20
.1a5f5a	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a5f5c	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5f60	c2 20		rep #$20	            REP #$20
.1a5f62	bd 00 00	lda $0000,x	                LDA 0,X
.1a5f65	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5f69	bd 02 00	lda $0002,x	                LDA 2,X
.1a5f6c	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5f70	ea		nop		                NOP
.1a5f71	ea		nop		                NOP
.1a5f72	ea		nop		                NOP
.1a5f73	88		dey		                DEY
.1a5f74	f0 14		beq $1a5f8a	                BEQ done
.1a5f76	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5f7a	48		pha		                PHA
.1a5f7b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5f7f	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5f83	68		pla		                PLA
.1a5f84	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f88	80 9b		bra $1a5f25	                BRA loop
.1a5f8a	af 08 e2 af	lda $afe208	done            LDA @l FP_MATH_OUTPUT_FP_LL
.1a5f8e	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.1a5f92	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5f96	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.1a5f9a	60		rts		                RTS
.1a5f9b					Q_SQ
.1a5f9b	e2 20		sep #$20	            SEP #$20
.1a5f9d	a9 00		lda #$00	                LDA #0
.1a5f9f	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5fa3	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a5fa5	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5fa9	c2 20		rep #$20	            REP #$20
.1a5fab	a5 23		lda $0823	                LDA ARGUMENT1
.1a5fad	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5fb1	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5fb5	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5fb9	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5fbd	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5fc1	ea		nop		                NOP
.1a5fc2	ea		nop		                NOP
.1a5fc3	ea		nop		                NOP
.1a5fc4	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5fc8	85 23		sta $0823	                STA ARGUMENT1
.1a5fca	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5fce	85 25		sta $0825	                STA ARGUMENT1+2
.1a5fd0	60		rts		                RTS
.1a5fd1					Q_INV
.1a5fd1	e2 20		sep #$20	            SEP #$20
.1a5fd3	a9 00		lda #$00	                LDA #0
.1a5fd5	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5fd9	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a5fdb	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5fdf	c2 20		rep #$20	            REP #$20
.1a5fe1	a5 23		lda $0823	                LDA ARGUMENT1
.1a5fe3	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5fe7	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5feb	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5fef	af 25 66 1a	lda $1a6625	                LDA @l fp_one
.1a5ff3	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5ff7	af 27 66 1a	lda $1a6627	                LDA @l fp_one+2
.1a5ffb	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5fff	ea		nop		                NOP
.1a6000	ea		nop		                NOP
.1a6001	ea		nop		                NOP
.1a6002	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a6006	85 23		sta $0823	                STA ARGUMENT1
.1a6008	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a600c	85 25		sta $0825	                STA ARGUMENT1+2
.1a600e	60		rts		                RTS
.1a600f					Q_FP_SCALE
.1a600f	a2 00 00	ldx #$0000	                LDX #0
.1a6012	a5 23		lda $0823	loop            LDA ARGUMENT1
.1a6014	c5 29		cmp $0829	                CMP ARGUMENT2
.1a6016	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6018	e5 2b		sbc $082b	                SBC ARGUMENT2+2
.1a601a	90 1e		bcc $1a603a	                BCC done
.1a601c	a5 23		lda $0823	                LDA ARGUMENT1
.1a601e	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a6022	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6024	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a6028	ea		nop		                NOP
.1a6029	ea		nop		                NOP
.1a602a	ea		nop		                NOP
.1a602b	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a602f	85 23		sta $0823	                STA ARGUMENT1
.1a6031	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a6035	85 25		sta $0825	                STA ARGUMENT1+2
.1a6037	e8		inx		                INX
.1a6038	80 d8		bra $1a6012	                BRA loop
.1a603a					done
.1a603a	60		rts		            RTS
.1a603b					Q_FP_SCALE_TAU
.1a603b	e2 20		sep #$20	            SEP #$20
.1a603d	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a603f	10 09		bpl $1a604a	                BPL notneg
.1a6041	29 7f		and #$7f	                AND #$7F
.1a6043	85 26		sta $0826	                STA ARGUMENT1+3
.1a6045	a9 01		lda #$01	                LDA #1
.1a6047	48		pha		                PHA
.1a6048	80 03		bra $1a604d	                BRA compute
.1a604a	a9 00		lda #$00	notneg          LDA #0          ; not negative, so push 0.
.1a604c	48		pha		                PHA
.1a604d	a9 40		lda #$40	compute         LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a604f	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a6053	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a6055	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a6059	c2 30		rep #$30	            REP #$30
.1a605b	af 8d 66 1a	lda $1a668d	                LDA @l twopi
.1a605f	85 29		sta $0829	                STA ARGUMENT2
.1a6061	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6065	af 8f 66 1a	lda $1a668f	                LDA @l twopi+2
.1a6069	85 2b		sta $082b	                STA ARGUMENT2+2
.1a606b	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a606f	20 0f 60	jsr $1a600f	            JSR Q_FP_SCALE
.1a6072	e2 20		sep #$20	            SEP #$20
.1a6074	68		pla		                PLA
.1a6075	c2 20		rep #$20	            REP #$20
.1a6077	f0 1e		beq $1a6097	                BEQ done
.1a6079	a5 23		lda $0823	                LDA ARGUMENT1
.1a607b	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a607f	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6081	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a6085	ea		nop		                NOP
.1a6086	ea		nop		                NOP
.1a6087	ea		nop		                NOP
.1a6088	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a608c	85 23		sta $0823	                STA ARGUMENT1
.1a608e	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a6092	29 ff 7f	and #$7fff	                AND #$7fff
.1a6095	85 25		sta $0825	                STA ARGUMENT1+2
.1a6097					done
.1a6097	60		rts		            RTS
.1a6098					Q_FP_NORM_ANGLE
.1a6098	5a		phy		                PHY
.1a6099	a2 00 00	ldx #$0000	                LDX #0
.1a609c	a0 00 00	ldy #$0000	                LDY #0
.1a609f	a5 23		lda $0823	loop            LDA ARGUMENT1
.1a60a1	df 91 66 1a	cmp $1a6691,x	                CMP @l onepi,x
.1a60a5	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a60a7	ff 93 66 1a	sbc $1a6693,x	                SBC @l onepi+2,x
.1a60ab	90 2c		bcc $1a60d9	                BCC less
.1a60ad	bf 8d 66 1a	lda $1a668d,x	                LDA @l twopi,x
.1a60b1	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a60b5	bf 8f 66 1a	lda $1a668f,x	                LDA @l twopi+2,x
.1a60b9	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a60bd	a5 23		lda $0823	                LDA ARGUMENT1
.1a60bf	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a60c3	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a60c5	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a60c9	ea		nop		                NOP
.1a60ca	ea		nop		                NOP
.1a60cb	ea		nop		                NOP
.1a60cc	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a60d0	85 23		sta $0823	                STA ARGUMENT1
.1a60d2	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a60d6	85 25		sta $0825	                STA ARGUMENT1+2
.1a60d8	38		sec		                SEC             ; set carry to indicate a reflection
.1a60d9	98		tya		less            TYA             ; carry already cleared if we branched
.1a60da	2a		rol a		                ROL             ; shift carry into flags...
.1a60db	a8		tay		                TAY             ; and store back into y
.1a60dc	e8		inx		                INX             ; next set of values
.1a60dd	e8		inx		                INX
.1a60de	e8		inx		                INX
.1a60df	e8		inx		                INX
.1a60e0	e0 0c 00	cpx #$000c	                CPX #12         ; check if we have already looked at 3
.1a60e3	d0 ba		bne $1a609f	                BNE loop
.1a60e5	98		tya		                TYA             ; copy Y to X, as that's what we have
.1a60e6	aa		tax		                TAX
.1a60e7	7a		ply		                PLY
.1a60e8	60		rts		            RTS
.1a60e9					Q_FP_COS
.1a60e9	08		php		                PHP
.1a60ea	c2 30		rep #$30	            REP #$30
.1a60ec	48		pha		                PHA
.1a60ed	da		phx		                PHX
.1a60ee	20 9b 5f	jsr $1a5f9b	            JSR Q_SQ
.1a60f1	8b		phb		                PHB
.1a60f2	e2 20		sep #$20	            SEP #$20
.1a60f4	a9 1a		lda #$1a	                LDA #`cos_coeff
.1a60f6	48		pha		                PHA
.1a60f7	ab		plb		                PLB
.1a60f8	c2 20		rep #$20	            REP #$20
.1a60fa	a2 cd 65	ldx #$65cd	                LDX #<>cos_coeff
.1a60fd	5a		phy		                PHY
.1a60fe	a0 05 00	ldy #$0005	                LDY #5
.1a6101	20 0c 5f	jsr $1a5f0c	            JSR Q_POLY_HR
.1a6104	7a		ply		                PLY
.1a6105	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.1a6108	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a610c	ab		plb		                PLB
.1a610d	fa		plx		                PLX
.1a610e	68		pla		                PLA
.1a610f	28		plp		                PLP
.1a6110	60		rts		            RTS
.1a6111					Q_FP_SIN
.1a6111	08		php		                PHP
.1a6112	c2 30		rep #$30	            REP #$30
.1a6114	48		pha		                PHA
.1a6115	da		phx		                PHX
.1a6116	a5 23		lda $0823	                LDA ARGUMENT1
.1a6118	85 29		sta $0829	                STA ARGUMENT2
.1a611a	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a611c	85 2b		sta $082b	                STA ARGUMENT2+2
.1a611e	20 9b 5f	jsr $1a5f9b	            JSR Q_SQ
.1a6121	8b		phb		                PHB
.1a6122	e2 20		sep #$20	            SEP #$20
.1a6124	a9 1a		lda #$1a	                LDA #`sin_coeff
.1a6126	48		pha		                PHA
.1a6127	ab		plb		                PLB
.1a6128	c2 20		rep #$20	            REP #$20
.1a612a	a2 e1 65	ldx #$65e1	                LDX #<>sin_coeff
.1a612d	5a		phy		                PHY
.1a612e	a0 05 00	ldy #$0005	                LDY #5
.1a6131	20 0c 5f	jsr $1a5f0c	            JSR Q_POLY_HR
.1a6134	7a		ply		                PLY
.1a6135	ab		plb		                PLB
.1a6136	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a6139	fa		plx		                PLX
.1a613a	68		pla		                PLA
.1a613b	28		plp		                PLP
.1a613c	60		rts		            RTS
.1a613d					Q_FP_TAN
.1a613d	08		php		                PHP
.1a613e	c2 30		rep #$30	            REP #$30
.1a6140	48		pha		                PHA
.1a6141	da		phx		                PHX
.1a6142	a5 23		lda $0823	                LDA ARGUMENT1
.1a6144	85 29		sta $0829	                STA ARGUMENT2
.1a6146	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6148	85 2b		sta $082b	                STA ARGUMENT2+2
.1a614a	20 9b 5f	jsr $1a5f9b	            JSR Q_SQ
.1a614d	8b		phb		                PHB
.1a614e	e2 20		sep #$20	            SEP #$20
.1a6150	a9 1a		lda #$1a	                LDA #`tan_coeff
.1a6152	48		pha		                PHA
.1a6153	ab		plb		                PLB
.1a6154	c2 20		rep #$20	            REP #$20
.1a6156	a2 f5 65	ldx #$65f5	                LDX #<>tan_coeff
.1a6159	5a		phy		                PHY
.1a615a	a0 05 00	ldy #$0005	                LDY #5
.1a615d	20 0c 5f	jsr $1a5f0c	            JSR Q_POLY_HR
.1a6160	7a		ply		                PLY
.1a6161	ab		plb		                PLB
.1a6162	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a6165	fa		plx		                PLX
.1a6166	68		pla		                PLA
.1a6167	28		plp		                PLP
.1a6168	60		rts		            RTS
.1a6169					Q_FP_LN
.1a6169	08		php		                PHP
.1a616a	c2 30		rep #$30	            REP #$30
.1a616c	48		pha		                PHA
.1a616d	da		phx		                PHX
.1a616e	e2 20		sep #$20	            SEP #$20
.1a6170	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a6172	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a6176	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a6178	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a617c	c2 20		rep #$20	            REP #$20
.1a617e	a5 23		lda $0823	                LDA ARGUMENT1
.1a6180	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a6184	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6186	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a618a	af 25 66 1a	lda $1a6625	                LDA @l fp_one
.1a618e	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6192	af 27 66 1a	lda $1a6627	                LDA @l fp_one+2
.1a6196	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a619a	ea		nop		                NOP
.1a619b	ea		nop		                NOP
.1a619c	ea		nop		                NOP
.1a619d	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a61a1	85 0c		sta $080c	                STA SCRATCH
.1a61a3	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a61a7	85 0e		sta $080e	                STA SCRATCH+2
.1a61a9	e2 20		sep #$20	            SEP #$20
.1a61ab	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a61ad	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a61b1	c2 20		rep #$20	            REP #$20
.1a61b3	ea		nop		                NOP
.1a61b4	ea		nop		                NOP
.1a61b5	ea		nop		                NOP
.1a61b6	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a61ba	85 10		sta $0810	                STA SCRATCH2
.1a61bc	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a61c0	85 12		sta $0812	                STA SCRATCH2+2
.1a61c2	e2 20		sep #$20	            SEP #$20
.1a61c4	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a61c6	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a61ca	c2 20		rep #$20	            REP #$20
.1a61cc	a5 0c		lda $080c	                LDA SCRATCH
.1a61ce	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a61d2	a5 0e		lda $080e	                LDA SCRATCH+2
.1a61d4	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a61d8	a5 10		lda $0810	                LDA SCRATCH2
.1a61da	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a61de	a5 12		lda $0812	                LDA SCRATCH2+2
.1a61e0	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a61e4	ea		nop		                NOP
.1a61e5	ea		nop		                NOP
.1a61e6	ea		nop		                NOP
.1a61e7	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a61eb	85 23		sta $0823	                STA ARGUMENT1
.1a61ed	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a61f1	85 25		sta $0825	                STA ARGUMENT1+2
.1a61f3	e2 20		sep #$20	            SEP #$20
.1a61f5	a9 08		lda #$08	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX0
.1a61f7	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a61fb	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a61fd	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a6201	c2 20		rep #$20	            REP #$20
.1a6203	a5 23		lda $0823	                LDA ARGUMENT1
.1a6205	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a6209	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a620b	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a620f	ea		nop		                NOP
.1a6210	ea		nop		                NOP
.1a6211	ea		nop		                NOP
.1a6212	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a6216	85 29		sta $0829	                STA ARGUMENT2
.1a6218	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a621c	85 2b		sta $082b	                STA ARGUMENT2+2
.1a621e	20 9b 5f	jsr $1a5f9b	            JSR Q_SQ
.1a6221	8b		phb		                PHB
.1a6222	e2 20		sep #$20	            SEP #$20
.1a6224	a9 1a		lda #$1a	                LDA #`ln_coeff
.1a6226	48		pha		                PHA
.1a6227	ab		plb		                PLB
.1a6228	c2 20		rep #$20	            REP #$20
.1a622a	a2 09 66	ldx #$6609	                LDX #<>ln_coeff
.1a622d	5a		phy		                PHY
.1a622e	a0 08 00	ldy #$0008	                LDY #8
.1a6231	20 0c 5f	jsr $1a5f0c	            JSR Q_POLY_HR
.1a6234	7a		ply		                PLY
.1a6235	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.1a6238	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a623c	8f 2d 08 00	sta $00082d	                STA @l ARGTYPE2
.1a6240	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a6243	ab		plb		                PLB
.1a6244	fa		plx		                PLX
.1a6245	68		pla		                PLA
.1a6246	28		plp		                PLP
.1a6247	60		rts		            RTS
.1a6248					FP_SIN
.1a6248	08		php		                PHP
.1a6249	c2 30		rep #$30	            REP #$30
.1a624b	48		pha		                PHA
.1a624c	da		phx		                PHX
.1a624d	20 3b 60	jsr $1a603b	            JSR Q_FP_SCALE_TAU
.1a6250	20 98 60	jsr $1a6098	            JSR Q_FP_NORM_ANGLE
.1a6253	da		phx		                PHX
.1a6254	8a		txa		                TXA
.1a6255	29 01 00	and #$0001	                AND #1
.1a6258	d0 05		bne $1a625f	                BNE do_cos
.1a625a	20 11 61	jsr $1a6111	            JSR Q_FP_SIN
.1a625d	80 03		bra $1a6262	                BRA maybe_neg
.1a625f					do_cos
.1a625f	20 e9 60	jsr $1a60e9	            JSR Q_FP_COS
.1a6262	fa		plx		maybe_neg       PLX
.1a6263	8a		txa		                TXA
.1a6264	29 04 00	and #$0004	                AND #4
.1a6267	f0 0a		beq $1a6273	                BEQ done
.1a6269	e2 20		sep #$20	            SEP #$20
.1a626b	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a626d	09 80		ora #$80	                ORA #$80
.1a626f	85 26		sta $0826	                STA ARGUMENT1+3
.1a6271	c2 20		rep #$20	            REP #$20
.1a6273	fa		plx		done            PLX
.1a6274	68		pla		                PLA
.1a6275	28		plp		                PLP
.1a6276	60		rts		            RTS
.1a6277					FP_COS
.1a6277	08		php		                PHP
.1a6278	c2 30		rep #$30	            REP #$30
.1a627a	48		pha		                PHA
.1a627b	da		phx		                PHX
.1a627c	20 3b 60	jsr $1a603b	            JSR Q_FP_SCALE_TAU
.1a627f	20 98 60	jsr $1a6098	            JSR Q_FP_NORM_ANGLE
.1a6282	da		phx		                PHX
.1a6283	8a		txa		                TXA
.1a6284	29 01 00	and #$0001	                AND #1
.1a6287	d0 05		bne $1a628e	                BNE do_sin
.1a6289	20 e9 60	jsr $1a60e9	            JSR Q_FP_COS
.1a628c	80 03		bra $1a6291	                BRA maybe_neg
.1a628e					do_sin
.1a628e	20 11 61	jsr $1a6111	            JSR Q_FP_SIN
.1a6291	fa		plx		maybe_neg       PLX
.1a6292	8a		txa		                TXA
.1a6293	29 02 00	and #$0002	                AND #2
.1a6296	f0 0a		beq $1a62a2	                BEQ done
.1a6298	e2 20		sep #$20	            SEP #$20
.1a629a	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a629c	09 80		ora #$80	                ORA #$80
.1a629e	85 26		sta $0826	                STA ARGUMENT1+3
.1a62a0	c2 20		rep #$20	            REP #$20
.1a62a2	fa		plx		done            PLX
.1a62a3	68		pla		                PLA
.1a62a4	28		plp		                PLP
.1a62a5	60		rts		            RTS
.1a62a6					FP_TAN
.1a62a6	08		php		                PHP
.1a62a7	c2 30		rep #$30	            REP #$30
.1a62a9	48		pha		                PHA
.1a62aa	da		phx		                PHX
.1a62ab	20 3b 60	jsr $1a603b	            JSR Q_FP_SCALE_TAU
.1a62ae	20 98 60	jsr $1a6098	            JSR Q_FP_NORM_ANGLE
.1a62b1	20 3d 61	jsr $1a613d	            JSR Q_FP_TAN
.1a62b4	8a		txa		                TXA
.1a62b5	29 01 00	and #$0001	                AND #1
.1a62b8	f0 03		beq $1a62bd	                BEQ no_inv
.1a62ba	20 d1 5f	jsr $1a5fd1	            JSR Q_INV
.1a62bd	8a		txa		no_inv          TXA
.1a62be	e2 20		sep #$20	            SEP #$20
.1a62c0	4a		lsr a		                LSR
.1a62c1	4a		lsr a		                LSR
.1a62c2	69 00		adc #$00	                ADC #0
.1a62c4	29 01		and #$01	                AND #1
.1a62c6	f0 06		beq $1a62ce	                BEQ no_neg
.1a62c8	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a62ca	09 80		ora #$80	                ORA #$80
.1a62cc	85 26		sta $0826	                STA ARGUMENT1+3
.1a62ce					no_neg
.1a62ce	c2 20		rep #$20	            REP #$20
.1a62d0	fa		plx		                PLX
.1a62d1	68		pla		                PLA
.1a62d2	28		plp		                PLP
.1a62d3	60		rts		            RTS
.1a62d4					FP_LN
.1a62d4	08		php		                PHP
.1a62d5	c2 30		rep #$30	            REP #$30
.1a62d7	48		pha		                PHA
.1a62d8	da		phx		                PHX
.1a62d9	5a		phy		                PHY
.1a62da	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a62dc	10 1f		bpl $1a62fd	                BPL arg_ok
.1a62de	08		php		            PHP
.1a62df	c2 20		rep #$20	            REP #$20
.1a62e1	48		pha		            PHA
.1a62e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a62e5	5b		tcd		            TCD
.1a62e6	68		pla		            PLA
.1a62e7	28		plp		            PLP
.1a62e8	e2 20		sep #$20	            SEP #$20
.1a62ea	a9 17		lda #$17	            LDA #ERR_DOMAIN
.1a62ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a62f0	c2 20		rep #$20	            REP #$20
.1a62f2	29 ff 00	and #$00ff	            AND #$00FF
.1a62f5	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a62f8	e2 20		sep #$20	            SEP #$20
.1a62fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a62fd					arg_ok
.1a62fd	c2 30		rep #$30	            REP #$30
.1a62ff	a5 23		lda $0823	                LDA ARGUMENT1
.1a6301	cf 25 66 1a	cmp $1a6625	                CMP @l fp_one
.1a6305	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6307	cf 27 66 1a	cmp $1a6627	                CMP @l fp_one+2
.1a630b	b0 04		bcs $1a6311	                BCS gtone
.1a630d	20 d1 5f	jsr $1a5fd1	            JSR Q_INV
.1a6310	18		clc		                CLC
.1a6311	a9 00 00	lda #$0000	gtone           LDA #0
.1a6314	a8		tay		                TAY
.1a6315	2a		rol a		                ROL             ; Rotate Carry into A; 0 means negate
.1a6316	48		pha		                PHA
.1a6317	e2 20		sep #$20	            SEP #$20
.1a6319	a9 00		lda #$00	                LDA #0
.1a631b	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a631f	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a6321	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a6325	c2 20		rep #$20	            REP #$20
.1a6327	af 7d 66 1a	lda $1a667d	                LDA @l eexp64
.1a632b	85 29		sta $0829	                STA ARGUMENT2
.1a632d	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6331	af 7f 66 1a	lda $1a667f	                LDA @l eexp64+2
.1a6335	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6337	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a633b	20 0f 60	jsr $1a600f	            JSR Q_FP_SCALE
.1a633e	8a		txa		                TXA
.1a633f	f0 07		beq $1a6348	                BEQ chk16
.1a6341	0a		asl a		                ASL             ; multiply counter by 64
.1a6342	0a		asl a		                ASL
.1a6343	0a		asl a		                ASL
.1a6344	0a		asl a		                ASL
.1a6345	0a		asl a		                ASL
.1a6346	0a		asl a		                ASL
.1a6347	a8		tay		                TAY
.1a6348	af 81 66 1a	lda $1a6681	chk16           LDA @l eexp16
.1a634c	85 29		sta $0829	                STA ARGUMENT2
.1a634e	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6352	af 83 66 1a	lda $1a6683	                LDA @l eexp16+2
.1a6356	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6358	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a635c	20 0f 60	jsr $1a600f	            JSR Q_FP_SCALE
.1a635f	8a		txa		                TXA
.1a6360	f0 0b		beq $1a636d	                BEQ chk04
.1a6362	0a		asl a		                ASL             ; multiply counter by 16
.1a6363	0a		asl a		                ASL
.1a6364	0a		asl a		                ASL
.1a6365	0a		asl a		                ASL
.1a6366	85 29		sta $0829	                STA ARGUMENT2   ; and add into total
.1a6368	18		clc		                CLC
.1a6369	98		tya		                TYA
.1a636a	65 29		adc $0829	                ADC ARGUMENT2
.1a636c	a8		tay		                TAY
.1a636d	af 85 66 1a	lda $1a6685	chk04           LDA @l eexp04
.1a6371	85 29		sta $0829	                STA ARGUMENT2
.1a6373	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6377	af 87 66 1a	lda $1a6687	                LDA @l eexp04+2
.1a637b	85 2b		sta $082b	                STA ARGUMENT2+2
.1a637d	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a6381	20 0f 60	jsr $1a600f	            JSR Q_FP_SCALE
.1a6384	8a		txa		                TXA
.1a6385	f0 09		beq $1a6390	                BEQ chk01
.1a6387	0a		asl a		                ASL             ;multiply counter by 4
.1a6388	0a		asl a		                ASL
.1a6389	85 29		sta $0829	                STA ARGUMENT2   ;and add to total
.1a638b	18		clc		                CLC
.1a638c	98		tya		                TYA
.1a638d	65 29		adc $0829	                ADC ARGUMENT2
.1a638f	a8		tay		                TAY
.1a6390	af 89 66 1a	lda $1a6689	chk01           LDA @l eexp01
.1a6394	85 29		sta $0829	                STA ARGUMENT2
.1a6396	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a639a	af 8b 66 1a	lda $1a668b	                LDA @l eexp01+2
.1a639e	85 2b		sta $082b	                STA ARGUMENT2+2
.1a63a0	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a63a4	20 0f 60	jsr $1a600f	            JSR Q_FP_SCALE
.1a63a7	86 29		stx $0829	                STX ARGUMENT2   ; add counter to total
.1a63a9	18		clc		                CLC
.1a63aa	98		tya		                TYA
.1a63ab	65 29		adc $0829	                ADC ARGUMENT2
.1a63ad	a8		tay		                TAY
.1a63ae	20 69 61	jsr $1a6169	            JSR Q_FP_LN
.1a63b1	a5 23		lda $0823	                LDA ARGUMENT1
.1a63b3	85 29		sta $0829	                STA ARGUMENT2
.1a63b5	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a63b7	85 2b		sta $082b	                STA ARGUMENT2+2
.1a63b9	98		tya		                TYA
.1a63ba	85 23		sta $0823	                STA ARGUMENT1
.1a63bc	64 25		stz $0825	                STZ ARGUMENT1+2
.1a63be	20 03 5c	jsr $1a5c03	            JSR ITOF
.1a63c1	20 e0 56	jsr $1a56e0	            JSR OP_FP_ADD
.1a63c4	68		pla		                PLA
.1a63c5	d0 07		bne $1a63ce	                BNE done
.1a63c7	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a63c9	09 00 80	ora #$8000	                ORA #$8000
.1a63cc	85 25		sta $0825	                STA ARGUMENT1+2
.1a63ce	7a		ply		done            PLY
.1a63cf	fa		plx		                PLX
.1a63d0	68		pla		                PLA
.1a63d1	28		plp		                PLP
.1a63d2	60		rts		            RTS
.1a63d3					FP_ASIN
.1a63d3	08		php		                PHP
.1a63d4	c2 30		rep #$30	            REP #$30
.1a63d6	48		pha		                PHA
.1a63d7	da		phx		                PHX
.1a63d8	a5 23		lda $0823	                LDA ARGUMENT1
.1a63da	85 29		sta $0829	                STA ARGUMENT2
.1a63dc	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a63de	85 2b		sta $082b	                STA ARGUMENT2+2
.1a63e0	20 9b 5f	jsr $1a5f9b	            JSR Q_SQ
.1a63e3	8b		phb		                PHB
.1a63e4	e2 20		sep #$20	            SEP #$20
.1a63e6	a9 1a		lda #$1a	                LDA #`asin_coeff
.1a63e8	48		pha		                PHA
.1a63e9	ab		plb		                PLB
.1a63ea	c2 20		rep #$20	            REP #$20
.1a63ec	a2 2d 66	ldx #$662d	                LDX #<>asin_coeff
.1a63ef	a0 05 00	ldy #$0005	                LDY #5
.1a63f2	20 0c 5f	jsr $1a5f0c	            JSR Q_POLY_HR
.1a63f5	ab		plb		                PLB
.1a63f6	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a63f9	fa		plx		                PLX
.1a63fa	68		pla		                PLA
.1a63fb	28		plp		                PLP
.1a63fc	60		rts		            RTS
.1a63fd					FP_ACOS
.1a63fd	08		php		                PHP
.1a63fe	c2 30		rep #$30	            REP #$30
.1a6400	48		pha		                PHA
.1a6401	da		phx		                PHX
.1a6402	20 d3 63	jsr $1a63d3	            JSR FP_ASIN
.1a6405	af 95 66 1a	lda $1a6695	                LDA @l halfpi
.1a6409	85 29		sta $0829	                STA ARGUMENT2
.1a640b	af 97 66 1a	lda $1a6697	                LDA @l halfpi+2
.1a640f	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6411	20 d5 56	jsr $1a56d5	            JSR OP_FP_SUB
.1a6414	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6416	49 00 80	eor #$8000	                EOR #$8000
.1a6419	85 25		sta $0825	                STA ARGUMENT1+2
.1a641b	fa		plx		                PLX
.1a641c	68		pla		                PLA
.1a641d	28		plp		                PLP
.1a641e	60		rts		            RTS
.1a641f					FP_ATAN
.1a641f	08		php		                PHP
.1a6420	c2 30		rep #$30	            REP #$30
.1a6422	48		pha		                PHA
.1a6423	da		phx		                PHX
.1a6424	a5 23		lda $0823	                LDA ARGUMENT1
.1a6426	85 29		sta $0829	                STA ARGUMENT2
.1a6428	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a642a	85 2b		sta $082b	                STA ARGUMENT2+2
.1a642c	20 9b 5f	jsr $1a5f9b	            JSR Q_SQ
.1a642f	8b		phb		                PHB
.1a6430	e2 20		sep #$20	            SEP #$20
.1a6432	a9 1a		lda #$1a	                LDA #`atan_coeff
.1a6434	48		pha		                PHA
.1a6435	ab		plb		                PLB
.1a6436	c2 20		rep #$20	            REP #$20
.1a6438	a2 41 66	ldx #$6641	                LDX #<>atan_coeff
.1a643b	a0 05 00	ldy #$0005	                LDY #5
.1a643e	20 0c 5f	jsr $1a5f0c	            JSR Q_POLY_HR
.1a6441	ab		plb		                PLB
.1a6442	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a6445	fa		plx		                PLX
.1a6446	68		pla		                PLA
.1a6447	28		plp		                PLP
.1a6448	60		rts		            RTS
.1a6449					Q_FP_POW_INT
.1a6449	c2 20		rep #$20	            REP #$20
.1a644b	a5 23		lda $0823	            LDA ARGUMENT1
.1a644d	85 29		sta $0829	            STA ARGUMENT2
.1a644f	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a6451	85 2b		sta $082b	            STA ARGUMENT2+2
.1a6453	c2 20		rep #$20	            REP #$20
.1a6455	af 25 66 1a	lda $1a6625	            LDA @l fp_one
.1a6459	85 23		sta $0823	            STA ARGUMENT1
.1a645b	af 27 66 1a	lda $1a6627	            LDA @l fp_one+2
.1a645f	85 25		sta $0825	            STA ARGUMENT1+2
.1a6461	8a		txa		loop            TXA
.1a6462	f0 30		beq $1a6494	                BEQ done
.1a6464	4a		lsr a		                LSR
.1a6465	aa		tax		                TAX
.1a6466	90 03		bcc $1a646b	                BCC next
.1a6468	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a646b					next
.1a646b	c2 20		rep #$20	            REP #$20
.1a646d	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a646f	48		pha		            PHA
.1a6470	a5 23		lda $0823	            LDA ARGUMENT1
.1a6472	48		pha		            PHA
.1a6473	c2 20		rep #$20	            REP #$20
.1a6475	a5 29		lda $0829	            LDA ARGUMENT2
.1a6477	85 23		sta $0823	            STA ARGUMENT1
.1a6479	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a647b	85 25		sta $0825	            STA ARGUMENT1+2
.1a647d	20 9b 5f	jsr $1a5f9b	            JSR Q_SQ
.1a6480	c2 20		rep #$20	            REP #$20
.1a6482	a5 23		lda $0823	            LDA ARGUMENT1
.1a6484	85 29		sta $0829	            STA ARGUMENT2
.1a6486	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a6488	85 2b		sta $082b	            STA ARGUMENT2+2
.1a648a	c2 20		rep #$20	            REP #$20
.1a648c	68		pla		            PLA
.1a648d	85 23		sta $0823	            STA ARGUMENT1
.1a648f	68		pla		            PLA
.1a6490	85 25		sta $0825	            STA ARGUMENT1+2
.1a6492	80 cd		bra $1a6461	                BRA loop
.1a6494					done
.1a6494	60		rts		            RTS
.1a6495					Q_FP_EXP
.1a6495	08		php		                PHP
.1a6496	c2 30		rep #$30	            REP #$30
.1a6498	48		pha		                PHA
.1a6499	da		phx		                PHX
.1a649a	8b		phb		                PHB
.1a649b	e2 20		sep #$20	            SEP #$20
.1a649d	a9 1a		lda #$1a	                LDA #`exp_coeff
.1a649f	48		pha		                PHA
.1a64a0	ab		plb		                PLB
.1a64a1	c2 20		rep #$20	            REP #$20
.1a64a3	a2 55 66	ldx #$6655	                LDX #<>exp_coeff
.1a64a6	5a		phy		                PHY
.1a64a7	a0 0a 00	ldy #$000a	                LDY #10
.1a64aa	20 0c 5f	jsr $1a5f0c	            JSR Q_POLY_HR
.1a64ad	7a		ply		                PLY
.1a64ae	ab		plb		                PLB
.1a64af	fa		plx		                PLX
.1a64b0	68		pla		                PLA
.1a64b1	28		plp		                PLP
.1a64b2	60		rts		            RTS
.1a64b3					FP_EXP
.1a64b3	08		php		                PHP
.1a64b4	c2 30		rep #$30	            REP #$30
.1a64b6	48		pha		                PHA
.1a64b7	da		phx		                PHX
.1a64b8	5a		phy		                PHY
.1a64b9	a5 23		lda $0823	                LDA ARGUMENT1   ; special case for x==0
.1a64bb	05 25		ora $0825	                ORA ARGUMENT1+2
.1a64bd	d0 10		bne $1a64cf	                BNE notzero
.1a64bf	c2 20		rep #$20	            REP #$20
.1a64c1	af 25 66 1a	lda $1a6625	            LDA @l fp_one
.1a64c5	85 23		sta $0823	            STA ARGUMENT1
.1a64c7	af 27 66 1a	lda $1a6627	            LDA @l fp_one+2
.1a64cb	85 25		sta $0825	            STA ARGUMENT1+2
.1a64cd	80 61		bra $1a6530	                BRA done
.1a64cf	a5 25		lda $0825	notzero         LDA ARGUMENT1+2 ; check if negative
.1a64d1	29 00 80	and #$8000	                AND #$8000
.1a64d4	a8		tay		                TAY             ; Y != 0 -> arg was negative
.1a64d5	f0 07		beq $1a64de	                BEQ notneg
.1a64d7	a5 25		lda $0825	                LDA ARGUMENT1+2 ; negate x
.1a64d9	29 ff 7f	and #$7fff	                AND #$7FFF
.1a64dc	85 25		sta $0825	                STA ARGUMENT1+2
.1a64de					notneg
.1a64de	c2 20		rep #$20	            REP #$20
.1a64e0	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a64e2	48		pha		            PHA
.1a64e3	a5 23		lda $0823	            LDA ARGUMENT1
.1a64e5	48		pha		            PHA
.1a64e6	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a64e9	a6 23		ldx $0823	                LDX ARGUMENT1              ; INT(x) now in ARGUMENT1; low 16 bits into X
.1a64eb	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a64ee	c2 20		rep #$20	            REP #$20
.1a64f0	a5 23		lda $0823	            LDA ARGUMENT1
.1a64f2	85 29		sta $0829	            STA ARGUMENT2
.1a64f4	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a64f6	85 2b		sta $082b	            STA ARGUMENT2+2
.1a64f8	c2 20		rep #$20	            REP #$20
.1a64fa	68		pla		            PLA
.1a64fb	85 23		sta $0823	            STA ARGUMENT1
.1a64fd	68		pla		            PLA
.1a64fe	85 25		sta $0825	            STA ARGUMENT1+2
.1a6500	20 d5 56	jsr $1a56d5	            JSR OP_FP_SUB
.1a6503	20 95 64	jsr $1a6495	            JSR Q_FP_EXP
.1a6506	c2 20		rep #$20	            REP #$20
.1a6508	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a650a	48		pha		            PHA
.1a650b	a5 23		lda $0823	            LDA ARGUMENT1
.1a650d	48		pha		            PHA
.1a650e	c2 20		rep #$20	            REP #$20
.1a6510	af 89 66 1a	lda $1a6689	            LDA @leexp01
.1a6514	85 23		sta $0823	            STA ARGUMENT1
.1a6516	af 8b 66 1a	lda $1a668b	            LDA @leexp01+2
.1a651a	85 25		sta $0825	            STA ARGUMENT1+2
.1a651c	20 49 64	jsr $1a6449	            JSR Q_FP_POW_INT
.1a651f	c2 20		rep #$20	            REP #$20
.1a6521	68		pla		            PLA
.1a6522	85 29		sta $0829	            STA ARGUMENT2
.1a6524	68		pla		            PLA
.1a6525	85 2b		sta $082b	            STA ARGUMENT2+2
.1a6527	20 76 57	jsr $1a5776	            JSR OP_FP_MUL
.1a652a	98		tya		                TYA
.1a652b	f0 03		beq $1a6530	                BEQ done
.1a652d	20 d1 5f	jsr $1a5fd1	            JSR Q_INV
.1a6530	7a		ply		done            PLY
.1a6531	fa		plx		                PLX
.1a6532	68		pla		                PLA
.1a6533	28		plp		                PLP
.1a6534	60		rts		            RTS
.1a6535					FP_SQR
.1a6535	08		php		                PHP
.1a6536	c2 30		rep #$30	            REP #$30
.1a6538	48		pha		                PHA
.1a6539	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a653b	10 1f		bpl $1a655c	                BPL arg_ok
.1a653d	08		php		            PHP
.1a653e	c2 20		rep #$20	            REP #$20
.1a6540	48		pha		            PHA
.1a6541	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6544	5b		tcd		            TCD
.1a6545	68		pla		            PLA
.1a6546	28		plp		            PLP
.1a6547	e2 20		sep #$20	            SEP #$20
.1a6549	a9 17		lda #$17	            LDA #ERR_DOMAIN
.1a654b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a654f	c2 20		rep #$20	            REP #$20
.1a6551	29 ff 00	and #$00ff	            AND #$00FF
.1a6554	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6557	e2 20		sep #$20	            SEP #$20
.1a6559	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a655c					arg_ok
.1a655c	c2 30		rep #$30	            REP #$30
.1a655e	05 23		ora $0823	                ORA ARGUMENT1
.1a6560	f0 68		beq $1a65ca	                BEQ done
.1a6562	c2 20		rep #$20	            REP #$20
.1a6564	af 29 66 1a	lda $1a6629	            LDA @l fp_two
.1a6568	85 29		sta $0829	            STA ARGUMENT2
.1a656a	af 2b 66 1a	lda $1a662b	            LDA @l fp_two+2
.1a656e	85 2b		sta $082b	            STA ARGUMENT2+2
.1a6570	e2 20		sep #$20	            SEP #$20
.1a6572	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a6574	85 2d		sta $082d	                STA ARGTYPE2
.1a6576	c2 20		rep #$20	            REP #$20
.1a6578	c2 20		rep #$20	            REP #$20
.1a657a	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a657c	48		pha		            PHA
.1a657d	a5 23		lda $0823	            LDA ARGUMENT1
.1a657f	48		pha		            PHA
.1a6580					loop
.1a6580	20 2b 57	jsr $1a572b	            JSR OP_FP_DIV
.1a6583	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6585	c5 2b		cmp $082b	                CMP ARGUMENT2+2
.1a6587	d0 09		bne $1a6592	                BNE more
.1a6589	a5 23		lda $0823	                LDA ARGUMENT1
.1a658b	45 29		eor $0829	                EOR ARGUMENT2
.1a658d	29 f8 ff	and #$fff8	                AND #$FFF8
.1a6590	f0 30		beq $1a65c2	                BEQ exitloop
.1a6592					more
.1a6592	20 e0 56	jsr $1a56e0	            JSR OP_FP_ADD
.1a6595	c2 20		rep #$20	            REP #$20
.1a6597	af 29 66 1a	lda $1a6629	            LDA @l fp_two
.1a659b	85 29		sta $0829	            STA ARGUMENT2
.1a659d	af 2b 66 1a	lda $1a662b	            LDA @l fp_two+2
.1a65a1	85 2b		sta $082b	            STA ARGUMENT2+2
.1a65a3	20 2b 57	jsr $1a572b	            JSR OP_FP_DIV
.1a65a6	c2 20		rep #$20	            REP #$20
.1a65a8	a5 23		lda $0823	            LDA ARGUMENT1
.1a65aa	85 29		sta $0829	            STA ARGUMENT2
.1a65ac	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a65ae	85 2b		sta $082b	            STA ARGUMENT2+2
.1a65b0	c2 20		rep #$20	            REP #$20
.1a65b2	68		pla		            PLA
.1a65b3	85 23		sta $0823	            STA ARGUMENT1
.1a65b5	68		pla		            PLA
.1a65b6	85 25		sta $0825	            STA ARGUMENT1+2
.1a65b8	c2 20		rep #$20	            REP #$20
.1a65ba	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a65bc	48		pha		            PHA
.1a65bd	a5 23		lda $0823	            LDA ARGUMENT1
.1a65bf	48		pha		            PHA
.1a65c0	80 be		bra $1a6580	                BRA loop
.1a65c2					exitloop
.1a65c2	c2 20		rep #$20	            REP #$20
.1a65c4	68		pla		            PLA
.1a65c5	85 29		sta $0829	            STA ARGUMENT2
.1a65c7	68		pla		            PLA
.1a65c8	85 2b		sta $082b	            STA ARGUMENT2+2
.1a65ca	68		pla		done            PLA
.1a65cb	28		plp		                PLP
.1a65cc	60		rts		            RTS
.1a65cd					cos_coeff
>1a65cd	01 0d d0 37			                .dword $37D00D01
>1a65d1	61 0b b6 ba			                .dword $BAB60B61
>1a65d5	ab aa 2a 3d			                .dword $3D2AAAAB
>1a65d9	00 00 00 bf			                .dword $BF000000
>1a65dd	00 00 80 3f			                .dword $3F800000
.1a65e1					sin_coeff
>1a65e1	1d ef 38 36			                .dword $3638EF1D
>1a65e5	01 0d 50 b9			                .dword $B9500D01
>1a65e9	89 88 08 3c			                .dword $3C088889
>1a65ed	ab aa 2a be			                .dword $BE2AAAAB
>1a65f1	00 00 80 3f			                .dword $3F800000
.1a65f5					tan_coeff
>1a65f5	a4 27 b3 3c			                .dword $3CB327A4
>1a65f9	d1 0d 5d 3d			                .dword $3D5D0DD1
>1a65fd	89 88 08 3e			                .dword $3E088889
>1a6601	ab aa aa 3e			                .dword $3EAAAAAB
>1a6605	00 00 80 3f			                .dword $3F800000
.1a6609					ln_coeff
>1a6609	89 88 88 3d			                .dword $3D888889
>1a660d	d9 89 9d 3d			                .dword $3D9D89D9
>1a6611	8c 2e ba 3d			                .dword $3DBA2E8C
>1a6615	39 8e e3 3d			                .dword $3DE38E39
>1a6619	25 49 12 3e			                .dword $3E124925
>1a661d	cd cc 4c 3e			                .dword $3E4CCCCD
>1a6621	ab aa aa 3e			                .dword $3EAAAAAB
>1a6625	00 00 80 3f			fp_one          .dword $3F800000
>1a6629	00 00 00 40			fp_two          .dword $40000000
.1a662d					asin_coeff
>1a662d	8e e3 f8 3c			                .dword $3CF8E38E
>1a6631	6e db 36 3d			                .dword $3D36DB6E
>1a6635	9a 99 99 3d			                .dword $3D99999A
>1a6639	ab aa 2a 3e			                .dword $3E2AAAAB
>1a663d	00 00 80 3f			                .dword $3F800000
.1a6641					atan_coeff
>1a6641	39 8e e3 3d			                .dword $3DE38E39
>1a6645	25 49 12 be			                .dword $BE124925
>1a6649	cd cc 4c 3e			                .dword $3E4CCCCD
>1a664d	ab aa aa be			                .dword $BEAAAAAB
>1a6651	00 00 80 3f			                .dword $3F800000
.1a6655					exp_coeff
>1a6655	1d ef 38 36			        .dword $3638EF1D
>1a6659	01 0d d0 37			        .dword $37D00D01
>1a665d	01 0d 50 39			        .dword $39500D01
>1a6661	61 0b b6 3a			        .dword $3AB60B61
>1a6665	89 88 08 3c			        .dword $3C088889
>1a6669	ab aa 2a 3d			        .dword $3D2AAAAB
>1a666d	ab aa 2a 3e			        .dword $3E2AAAAB
>1a6671	00 00 00 3f			        .dword $3F000000
>1a6675	00 00 80 3f			        .dword $3F800000
>1a6679	00 00 80 3f			        .dword $3F800000
>1a667d	c1 2c a1 6d			eexp64          .dword $6DA12CC1
>1a6681	5f 97 07 4b			eexp16          .dword $4B07975F
>1a6685	81 64 5a 42			eexp04          .dword $425A6481
>1a6689	54 f8 2d 40			eexp01          .dword $402DF854
>1a668d	db 0f c9 40			twopi           .dword $40C90FDB
>1a6691	db 0f 49 40			onepi           .dword $40490FDB
>1a6695	db 0f c9 3f			halfpi          .dword $3FC90FDB
>1a6699	db 0f 49 3f			quarterpi       .dword $3F490FDB

;******  Return to file: src\basic816.s


;******  Processing file: src\arrays.s

.1a669d					ARR_ALLOC
.1a669d	08		php		                PHP
.1a669e	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a66a1	c2 20		rep #$20	            REP #$20
.1a66a3	a9 01 00	lda #$0001	                LDA #1                      ; ARGUMENT1 := 1
.1a66a6	85 23		sta $0823	                STA ARGUMENT1
.1a66a8	a9 00 00	lda #$0000	                LDA #0
.1a66ab	85 25		sta $0825	                STA ARGUMENT1+2
.1a66ad	e2 20		sep #$20	            SEP #$20
.1a66af	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.1a66b3	c2 20		rep #$20	            REP #$20
.1a66b5	29 ff 00	and #$00ff	                AND #$00FF
.1a66b8	85 8f		sta $088f	                STA MCOUNT                  ; Save it to MCOUNT for later
.1a66ba	a8		tay		                TAY                         ; Y := number of dimensions
.1a66bb	a2 01 00	ldx #$0001	                LDX #1                      ; X := index to size 0
.1a66be					size_loop
.1a66be	c2 20		rep #$20	            REP #$20
.1a66c0	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X           ; ARGUMENT2 := Ith dimension
.1a66c4	85 29		sta $0829	                STA ARGUMENT2
.1a66c6	a9 00 00	lda #$0000	                LDA #0
.1a66c9	85 2b		sta $082b	                STA ARGUMENT2+2
.1a66cb	e2 20		sep #$20	            SEP #$20
.1a66cd	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a66cf	85 2d		sta $082d	                STA ARGTYPE2
.1a66d1	c2 20		rep #$20	            REP #$20
.1a66d3	20 59 28	jsr $1a2859	            JSR OP_MULTIPLY
.1a66d6	e8		inx		                INX
.1a66d7	e8		inx		                INX
.1a66d8	88		dey		                DEY
.1a66d9	d0 e3		bne $1a66be	                BNE size_loop               ; If there are more dimensions, take the next one
.1a66db	c2 20		rep #$20	            REP #$20
.1a66dd	a9 04 00	lda #$0004	                LDA #ARGUMENT_SIZE-1        ; Size of a data item (don't include the type code)
.1a66e0	85 29		sta $0829	                STA ARGUMENT2
.1a66e2	a9 00 00	lda #$0000	                LDA #0
.1a66e5	85 2b		sta $082b	                STA ARGUMENT2+2
.1a66e7	20 59 28	jsr $1a2859	            JSR OP_MULTIPLY
.1a66ea	e2 20		sep #$20	            SEP #$20
.1a66ec	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF             ; SCRATCH := N * 2
.1a66f0	85 0c		sta $080c	                STA SCRATCH
.1a66f2	a9 00		lda #$00	                LDA #0
.1a66f4	85 0d		sta $080d	                STA SCRATCH+1
.1a66f6	c2 20		rep #$20	            REP #$20
.1a66f8	06 0c		asl $080c	                ASL SCRATCH
.1a66fa	38		sec		                SEC                         ; ARGUMENT1 := size of the complete block
.1a66fb	a5 23		lda $0823	                LDA ARGUMENT1
.1a66fd	65 0c		adc $080c	                ADC SCRATCH                 ; Size of data area + N*2 + 1 (in carry)
.1a66ff	85 23		sta $0823	                STA ARGUMENT1
.1a6701	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6703	69 00 00	adc #$0000	                ADC #0
.1a6706	85 25		sta $0825	                STA ARGUMENT1+2
.1a6708	d0 29		bne $1a6733	                BNE too_big                 ; size > 16-bit? Yes: throw an error
.1a670a	e2 20		sep #$20	            SEP #$20
.1a670c	a5 ea		lda $08ea	                LDA TOFINDTYPE              ; Get the type
.1a670e	09 80		ora #$80	                ORA #$80                    ; Flip the flag to make it an array of that type
.1a6710	a6 23		ldx $0823	                LDX ARGUMENT1               ; Get the computed size
.1a6712	20 d3 10	jsr $1a10d3	            JSR ALLOC
.1a6715	e2 20		sep #$20	            SEP #$20
.1a6717	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.1a671b	87 c0		sta [$08c0]	                STA [CURRBLOCK]             ; Write the number of dimensions to the array's preamble
.1a671d	a0 01 00	ldy #$0001	                LDY #1
.1a6720	a2 00 00	ldx #$0000	                LDX #0
.1a6723					copy_loop
.1a6723	e2 20		sep #$20	            SEP #$20
.1a6725	bf 01 4d 00	lda $004d01,x	                LDA @lARRIDXBUF+1,X         ; ARGUMENT2 := Ith dimension
.1a6729	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y           ; And write the dimension to the array's preamble
.1a672b	e4 8f		cpx $088f	                CPX MCOUNT                  ; Have we written the last byte?
.1a672d	f0 23		beq $1a6752	                BEQ null_array              ; Yes: clear the array
.1a672f	e8		inx		                INX                         ; No: move to the next byte
.1a6730	c8		iny		                INY
.1a6731	80 f0		bra $1a6723	                BRA copy_loop
.1a6733					too_big
.1a6733	08		php		            PHP
.1a6734	c2 20		rep #$20	            REP #$20
.1a6736	48		pha		            PHA
.1a6737	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a673a	5b		tcd		            TCD
.1a673b	68		pla		            PLA
.1a673c	28		plp		            PLP
.1a673d	e2 20		sep #$20	            SEP #$20
.1a673f	a9 09		lda #$09	            LDA #ERR_RANGE
.1a6741	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6745	c2 20		rep #$20	            REP #$20
.1a6747	29 ff 00	and #$00ff	            AND #$00FF
.1a674a	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a674d	e2 20		sep #$20	            SEP #$20
.1a674f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6752					null_array
.1a6752	e2 20		sep #$20	            SEP #$20
.1a6754	38		sec		                SEC                         ; INDEX := pointer to first value
.1a6755	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a6757	67 c0		adc [$08c0]	                ADC [CURRBLOCK]
.1a6759	85 08		sta $0808	                STA INDEX
.1a675b	a5 c1		lda $08c1	                LDA CURRBLOCK+1
.1a675d	69 00		adc #$00	                ADC #0
.1a675f	85 09		sta $0809	                STA INDEX+1
.1a6761	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a6763	69 00		adc #$00	                ADC #0
.1a6765	85 0a		sta $080a	                STA INDEX+2
.1a6767	64 0b		stz $080b	                STZ INDEX+3
.1a6769	c2 20		rep #$20	            REP #$20
.1a676b	a0 05 00	ldy #$0005	                LDY #HEAPOBJ.END            ; SCRATCH := pointer the the first byte after the array
.1a676e	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a6770	85 0c		sta $080c	                STA SCRATCH
.1a6772	e2 20		sep #$20	            SEP #$20
.1a6774	c8		iny		                INY
.1a6775	c8		iny		                INY
.1a6776	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a6778	85 0e		sta $080e	                STA SCRATCH+2
.1a677a	64 0f		stz $080f	                STZ SCRATCH+3
.1a677c					clr_loop
.1a677c	e2 20		sep #$20	            SEP #$20
.1a677e	a9 00		lda #$00	                LDA #0
.1a6780	87 08		sta [$0808]	                STA [INDEX]                 ; Clear the byte
.1a6782	c2 20		rep #$20	            REP #$20
.1a6784	18		clc		                CLC                         ; Increment INDEX
.1a6785	a5 08		lda $0808	                LDA INDEX
.1a6787	69 01 00	adc #$0001	                ADC #1
.1a678a	85 08		sta $0808	                STA INDEX
.1a678c	a5 0a		lda $080a	                LDA INDEX+2
.1a678e	69 00 00	adc #$0000	                ADC #0
.1a6791	85 0a		sta $080a	                STA INDEX+2
.1a6793	c5 0e		cmp $080e	                CMP SCRATCH+2               ; INDEX == SCRATCH?
.1a6795	d0 e5		bne $1a677c	                BNE clr_loop                ; No: write to this next byte
.1a6797	a5 08		lda $0808	                LDA INDEX
.1a6799	c5 0c		cmp $080c	                CMP SCRATCH
.1a679b	d0 df		bne $1a677c	                BNE clr_loop
.1a679d					done
.1a679d	28		plp		                PLP
.1a679e	60		rts		            RTS
.1a679f					ARR_CELL
.1a679f	08		php		                PHP
.1a67a0	c2 20		rep #$20	            REP #$20
.1a67a2	64 08		stz $0808	                STZ INDEX               ; INDEX := 0
.1a67a4	64 0a		stz $080a	                STZ INDEX+2
.1a67a6	e2 20		sep #$20	            SEP #$20
.1a67a8	af 00 4d 00	lda $004d00	                LDA @l ARRIDXBUF        ; MCOUNT := N (number of dimensions)
.1a67ac	85 8f		sta $088f	                STA MCOUNT
.1a67ae	64 90		stz $0890	                STZ MCOUNT+1
.1a67b0	a2 01 00	ldx #$0001	                LDX #1                  ; X := index to dimension 0
.1a67b3	e2 20		sep #$20	            SEP #$20
.1a67b5	a7 c0		lda [$08c0]	                LDA [CURRBLOCK]         ; Make sure the dimensions of the array
.1a67b7	c5 8f		cmp $088f	                CMP MCOUNT              ; ... match those requested
.1a67b9	f0 22		beq $1a67dd	                BEQ dims_match          ; Yes: the dimensions match
.1a67bb	a6 8f		ldx $088f	                LDX MCOUNT
.1a67bd	00		brk #		                BRK
.1a67be					arg_err
.1a67be	08		php		            PHP
.1a67bf	c2 20		rep #$20	            REP #$20
.1a67c1	48		pha		            PHA
.1a67c2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a67c5	5b		tcd		            TCD
.1a67c6	68		pla		            PLA
.1a67c7	28		plp		            PLP
.1a67c8	e2 20		sep #$20	            SEP #$20
.1a67ca	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a67cc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a67d0	c2 20		rep #$20	            REP #$20
.1a67d2	29 ff 00	and #$00ff	            AND #$00FF
.1a67d5	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a67d8	e2 20		sep #$20	            SEP #$20
.1a67da	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a67dd	c9 01		cmp #$01	dims_match      CMP #1                  ; Check to see if this array is one dimensional
.1a67df	f0 3a		beq $1a681b	                BEQ add_last            ; If so, just add the index of the cell to INDEX
.1a67e1	a0 01 00	ldy #$0001	                LDY #1
.1a67e4					index_loop
.1a67e4	e2 20		sep #$20	            SEP #$20
.1a67e6	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; ARGUMENT1 := I_j
.1a67ea	85 23		sta $0823	                STA ARGUMENT1
.1a67ec	64 24		stz $0824	                STZ ARGUMENT1+1
.1a67ee	64 25		stz $0825	                STZ ARGUMENT1+2
.1a67f0	64 26		stz $0826	                STZ ARGUMENT1+3
.1a67f2	b7 c0		lda [$08c0],y	                LDA [CURRBLOCK],Y       ; ARGUMENT2 := D_j
.1a67f4	85 29		sta $0829	                STA ARGUMENT2
.1a67f6	64 2a		stz $082a	                STZ ARGUMENT2+1
.1a67f8	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a67fa	64 2c		stz $082c	                STZ ARGUMENT2+3
.1a67fc	a5 23		lda $0823	                LDA ARGUMENT1
.1a67fe	c5 29		cmp $0829	                CMP ARGUMENT2           ; Is I_j >= D_j
.1a6800	b0 68		bcs $1a686a	                BGE range_err           ; Yes: throw an out-of-range error
.1a6802	20 59 28	jsr $1a2859	            JSR OP_MULTIPLY
.1a6805	c2 20		rep #$20	            REP #$20
.1a6807	18		clc		                CLC                     ; INDEX := INDEX + ARGUMENT1
.1a6808	a5 08		lda $0808	                LDA INDEX
.1a680a	65 23		adc $0823	                ADC ARGUMENT1
.1a680c	85 08		sta $0808	                STA INDEX
.1a680e	a5 0a		lda $080a	                LDA INDEX+2
.1a6810	65 25		adc $0825	                ADC ARGUMENT1+2
.1a6812	85 0a		sta $080a	                STA INDEX+2
.1a6814	e8		inx		                INX
.1a6815	e8		inx		                INX
.1a6816	c8		iny		                INY
.1a6817	c4 8f		cpy $088f	                CPY MCOUNT              ; Are we on the last index?
.1a6819	d0 c9		bne $1a67e4	                BNE index_loop          ; No: move to the next index and try again
.1a681b					add_last
.1a681b	e2 20		sep #$20	            SEP #$20
.1a681d	18		clc		                CLC
.1a681e	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; INDEX := INDEX + I_(n-1)
.1a6822	85 90		sta $0890	                STA MCOUNT+1
.1a6824	65 08		adc $0808	                ADC INDEX
.1a6826	85 08		sta $0808	                STA INDEX
.1a6828	a5 09		lda $0809	                LDA INDEX+1
.1a682a	69 00		adc #$00	                ADC #0
.1a682c	85 09		sta $0809	                STA INDEX+1
.1a682e	c2 20		rep #$20	            REP #$20
.1a6830	a5 0a		lda $080a	                LDA INDEX+2
.1a6832	69 00 00	adc #$0000	                ADC #0
.1a6835	85 0a		sta $080a	                STA INDEX+2
.1a6837	c2 20		rep #$20	            REP #$20
.1a6839	06 08		asl $0808	                ASL INDEX               ; INDEX := INDEX * 4 (size of a value)
.1a683b	26 0a		rol $080a	                ROL INDEX+2
.1a683d	06 08		asl $0808	                ASL INDEX
.1a683f	26 0a		rol $080a	                ROL INDEX+2
.1a6841	e2 20		sep #$20	            SEP #$20
.1a6843	38		sec		                SEC
.1a6844	a5 08		lda $0808	                LDA INDEX
.1a6846	65 8f		adc $088f	                ADC MCOUNT
.1a6848	85 08		sta $0808	                STA INDEX
.1a684a	a5 09		lda $0809	                LDA INDEX+1
.1a684c	69 00		adc #$00	                ADC #0
.1a684e	85 09		sta $0809	                STA INDEX+1
.1a6850	c2 20		rep #$20	            REP #$20
.1a6852	a5 0a		lda $080a	                LDA INDEX+2
.1a6854	69 00 00	adc #$0000	                ADC #0
.1a6857	85 0a		sta $080a	                STA INDEX+2
.1a6859	18		clc		                CLC                     ; INDEX := INDEX + CURRBLOCK (point to the address desired)
.1a685a	a5 08		lda $0808	                LDA INDEX
.1a685c	65 c0		adc $08c0	                ADC CURRBLOCK
.1a685e	85 08		sta $0808	                STA INDEX
.1a6860	e2 20		sep #$20	            SEP #$20
.1a6862	a5 0a		lda $080a	                LDA INDEX+2
.1a6864	65 c2		adc $08c2	                ADC CURRBLOCK+2
.1a6866	85 0a		sta $080a	                STA INDEX+2
.1a6868	28		plp		                PLP
.1a6869	60		rts		            RTS
.1a686a					range_err
.1a686a	08		php		            PHP
.1a686b	c2 20		rep #$20	            REP #$20
.1a686d	48		pha		            PHA
.1a686e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6871	5b		tcd		            TCD
.1a6872	68		pla		            PLA
.1a6873	28		plp		            PLP
.1a6874	e2 20		sep #$20	            SEP #$20
.1a6876	a9 09		lda #$09	            LDA #ERR_RANGE
.1a6878	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a687c	c2 20		rep #$20	            REP #$20
.1a687e	29 ff 00	and #$00ff	            AND #$00FF
.1a6881	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6884	e2 20		sep #$20	            SEP #$20
.1a6886	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6889					ARR_SET
.1a6889	08		php		                PHP
.1a688a	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a688d	e2 20		sep #$20	            SEP #$20
.1a688f	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.1a6892	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a6894	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.1a6896	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string array?
.1a6898	d0 05		bne $1a689f	                BNE chk_integer
.1a689a	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a689d	80 10		bra $1a68af	                BRA save_type
.1a689f	c9 00		cmp #$00	chk_integer     CMP #TYPE_INTEGER   ; Is it an integer array?
.1a68a1	d0 05		bne $1a68a8	                BNE chk_float
.1a68a3	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a68a6	80 07		bra $1a68af	                BRA save_type
.1a68a8	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT     ; Is it an float array?
.1a68aa	d0 2b		bne $1a68d7	                BNE type_mismatch   ; No: throw a type mismatch error... something strange...
.1a68ac	20 bf 07	jsr $1a07bf	            JSR ASS_ARG1_FLOAT
.1a68af	a5 27		lda $0827	save_type       LDA ARGTYPE1        ; Save the type
.1a68b1	48		pha		                PHA
.1a68b2	c2 20		rep #$20	            REP #$20
.1a68b4	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Save ARGUMENT1
.1a68b6	48		pha		                PHA
.1a68b7	a5 23		lda $0823	                LDA ARGUMENT1
.1a68b9	48		pha		                PHA
.1a68ba	20 9f 67	jsr $1a679f	            JSR ARR_CELL
.1a68bd	68		pla		                PLA                 ; Restore ARGUMENT1
.1a68be	85 23		sta $0823	                STA ARGUMENT1
.1a68c0	68		pla		                PLA
.1a68c1	85 25		sta $0825	                STA ARGUMENT1+2
.1a68c3	e2 20		sep #$20	            SEP #$20
.1a68c5	68		pla		                PLA
.1a68c6	85 27		sta $0827	                STA ARGTYPE1
.1a68c8	c2 20		rep #$20	            REP #$20
.1a68ca	a5 23		lda $0823	                LDA ARGUMENT1       ; Set the value in the cell
.1a68cc	87 08		sta [$0808]	                STA [INDEX]
.1a68ce	a0 02 00	ldy #$0002	                LDY #2
.1a68d1	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a68d3	97 08		sta [$0808],y	                STA [INDEX],Y
.1a68d5	28		plp		                PLP
.1a68d6	60		rts		            RTS
.1a68d7					type_mismatch
.1a68d7	08		php		            PHP
.1a68d8	c2 20		rep #$20	            REP #$20
.1a68da	48		pha		            PHA
.1a68db	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a68de	5b		tcd		            TCD
.1a68df	68		pla		            PLA
.1a68e0	28		plp		            PLP
.1a68e1	e2 20		sep #$20	            SEP #$20
.1a68e3	a9 04		lda #$04	            LDA #ERR_TYPE
.1a68e5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a68e9	c2 20		rep #$20	            REP #$20
.1a68eb	29 ff 00	and #$00ff	            AND #$00FF
.1a68ee	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a68f1	e2 20		sep #$20	            SEP #$20
.1a68f3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a68f6					ARR_REF
.1a68f6	08		php		                PHP
.1a68f7	20 0f 13	jsr $1a130f	            JSR HEAP_GETHED
.1a68fa	f4 00 00	pea #$0000	                PEA #0              ; Make room on the stack that ARR_CELL expects
.1a68fd	f4 00 00	pea #$0000	                PEA #0
.1a6900	e2 20		sep #$20	            SEP #$20
.1a6902	48		pha		                PHA
.1a6903	20 9f 67	jsr $1a679f	            JSR ARR_CELL
.1a6906	e2 20		sep #$20	            SEP #$20
.1a6908	68		pla		                PLA
.1a6909	c2 20		rep #$20	            REP #$20
.1a690b	68		pla		                PLA
.1a690c	68		pla		                PLA
.1a690d	c2 20		rep #$20	            REP #$20
.1a690f	a7 08		lda [$0808]	                LDA [INDEX]         ; Get the value in the cell
.1a6911	85 23		sta $0823	                STA ARGUMENT1
.1a6913	a0 02 00	ldy #$0002	                LDY #2
.1a6916	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a6918	85 25		sta $0825	                STA ARGUMENT1+2
.1a691a	e2 20		sep #$20	            SEP #$20
.1a691c	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.1a691f	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a6921	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.1a6923	85 27		sta $0827	                STA ARGTYPE1        ; Set the type of the return value
.1a6925	20 63 18	jsr $1a1863	            JSR STR_NORMAL
.1a6928	28		plp		                PLP
.1a6929	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\dos.s

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					FILESIZE            .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
>1af073					CLUSTER_BUFF    .fill 512           ; A buffer for cluster read/write operations
.1af273					FD_IN
>1af273					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>1af274					DEV                 .byte ?             ; The ID of the device holding the file
>1af275					PATH                .dword ?            ; Pointer to a NULL terminated path string
>1af279					CLUSTER             .dword ?            ; The current cluster of the file.
>1af27d					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>1af281					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>1af285					FILESIZE            .dword ?            ; The size of the file
>1af289					CREATE_DATE         .word ?             ; The creation date of the file
>1af28b					CREATE_TIME         .word ?             ; The creation time of the file
>1af28d					MODIFIED_DATE       .word ?             ; The modification date of the file
>1af28f					MODIFIED_TIME       .word ?             ; The modification time of the file
.1a692a					PR_FILESIZE
.1a692a	da		phx		                PHX
.1a692b	0b		phd		                PHD
.1a692c	08		php		                PHP
.1a692d	08		php		            PHP
.1a692e	c2 20		rep #$20	            REP #$20
.1a6930	48		pha		            PHA
.1a6931	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6934	5b		tcd		            TCD
.1a6935	68		pla		            PLA
.1a6936	28		plp		            PLP
.1a6937	c2 30		rep #$30	            REP #$30
.1a6939	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a693b	89 f0 ff	bit #$fff0	                BIT #$FFF0              ; Check to see if the amount is in MB range
.1a693e	d0 29		bne $1a6969	                BNE pr_mb               ; If so, print it in MBs
.1a6940	89 0f 00	bit #$000f	                BIT #$000F              ; Check to see if the amount is in KB range
.1a6943	d0 0c		bne $1a6951	                BNE pr_kb
.1a6945	a5 23		lda $0823	                LDA ARGUMENT1
.1a6947	89 00 fc	bit #$fc00	                BIT #$FC00
.1a694a	d0 05		bne $1a6951	                BNE pr_kb               ; If so, print it in KBs
.1a694c					pr_regular
.1a694c	20 1d 46	jsr $1a461d	            JSR PR_INTEGER
.1a694f	80 2e		bra $1a697f	                BRA done
.1a6951	a2 0a 00	ldx #$000a	pr_kb           LDX #10                 ; Shift so the amount in KB is in ARGUMENT1
.1a6954	46 25		lsr $0825	kb_shift        LSR ARGUMENT1+2
.1a6956	66 23		ror $0823	                ROR ARGUMENT1
.1a6958	ca		dex		                DEX
.1a6959	d0 f9		bne $1a6954	                BNE kb_shift
.1a695b	20 1d 46	jsr $1a461d	            JSR PR_INTEGER
.1a695e	e2 20		sep #$20	            SEP #$20
.1a6960	a9 4b		lda #$4b	                LDA #'K'
.1a6962	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6965	c2 20		rep #$20	            REP #$20
.1a6967	80 16		bra $1a697f	                BRA done
.1a6969	a2 14 00	ldx #$0014	pr_mb           LDX #20                 ; Shift so the amount in MB is in ARGUMENT1
.1a696c	46 25		lsr $0825	mb_shift        LSR ARGUMENT1+2
.1a696e	66 23		ror $0823	                ROR ARGUMENT1
.1a6970	ca		dex		                DEX
.1a6971	d0 f9		bne $1a696c	                BNE mb_shift
.1a6973	20 1d 46	jsr $1a461d	            JSR PR_INTEGER
.1a6976	e2 20		sep #$20	            SEP #$20
.1a6978	a9 4d		lda #$4d	                LDA #'M'
.1a697a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a697d	c2 20		rep #$20	            REP #$20
.1a697f	28		plp		done            PLP
.1a6980	2b		pld		                PLD
.1a6981	fa		plx		                PLX
.1a6982	60		rts		            RTS
.1a6983					CMD_DIR
.1a6983	0b		phd		                PHD
.1a6984	08		php		                PHP
.1a6985	c2 30		rep #$30	            REP #$30
.1a6987	a9 00 00	lda #$0000	                LDA #0                      ; Zero out the pagination line count
.1a698a	8f b6 08 00	sta $0008b6	                STA @l LINECOUNT
.1a698e	8f b8 08 00	sta $0008b8	                STA @l LINECOUNT+2
.1a6992	e2 20		sep #$20	            SEP #$20
.1a6994	20 7e 22	jsr $1a227e	            JSR PEEK_TOK
.1a6997	c9 00		cmp #$00	                CMP #0
.1a6999	f0 08		beq $1a69a3	                BEQ set_null                ; If none provided, set the path to empty
.1a699b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a699e	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a69a1	80 11		bra $1a69b4	                BRA set_fd
.1a69a3					set_null
.1a69a3	c2 20		rep #$20	            REP #$20
.1a69a5	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT1 to the NULL string
.1a69a8	85 23		sta $0823	                STA ARGUMENT1
.1a69aa	85 25		sta $0825	                STA ARGUMENT1+2
.1a69ac	e2 20		sep #$20	            SEP #$20
.1a69ae	a9 02		lda #$02	                LDA #TYPE_STRING
.1a69b0	85 27		sta $0827	                STA ARGTYPE1
.1a69b2	c2 20		rep #$20	            REP #$20
.1a69b4					set_fd
.1a69b4	20 e4 6a	jsr $1a6ae4	            JSR SETFILEDESC
.1a69b7	22 08 11 00	jsl $001108	                JSL FK_DIROPEN              ; Open up the directory
.1a69bb	b0 22		bcs $1a69df	                BCS pr_first
.1a69bd	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a69c0	08		php		            PHP
.1a69c1	c2 20		rep #$20	            REP #$20
.1a69c3	48		pha		            PHA
.1a69c4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a69c7	5b		tcd		            TCD
.1a69c8	68		pla		            PLA
.1a69c9	28		plp		            PLP
.1a69ca	e2 20		sep #$20	            SEP #$20
.1a69cc	a9 10		lda #$10	            LDA #ERR_DIRECTORY
.1a69ce	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a69d2	c2 20		rep #$20	            REP #$20
.1a69d4	29 ff 00	and #$00ff	            AND #$00FF
.1a69d7	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a69da	e2 20		sep #$20	            SEP #$20
.1a69dc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a69df					pr_first
.1a69df	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a69e2					pr_entry
.1a69e2	08		php		            PHP
.1a69e3	c2 20		rep #$20	            REP #$20
.1a69e5	48		pha		            PHA
.1a69e6	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a69e9	5b		tcd		            TCD
.1a69ea	68		pla		            PLA
.1a69eb	28		plp		            PLP
.1a69ec	e2 20		sep #$20	            SEP #$20
.1a69ee	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Start with the file name
.1a69f1	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the initial character of the name
.1a69f3	d0 03		bne $1a69f8	                BNE chk_unused
.1a69f5	82 a9 00	brl $1a6aa1	                BRL done                    ; If it's NULL, we're done
.1a69f8	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED     ; Is it the unusued code?
.1a69fa	d0 03		bne $1a69ff	                BNE chk_attributes
.1a69fc	82 96 00	brl $1a6a95	                BRL next_entry              ; Yes: go to the next entry
.1a69ff	a0 0b 00	ldy #$000b	chk_attributes  LDY #DIRENTRY.ATTRIBUTE
.1a6a02	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute byte
.1a6a04	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.1a6a06	f0 03		beq $1a6a0b	                BEQ chk_hidden
.1a6a08	82 a9 00	brl $1a6ab4	                BRL pr_volume               ; Print the volume label
.1a6a0b	89 02		bit #$02	chk_hidden      BIT #DOS_ATTR_HIDDEN        ; Is it a hidden file?
.1a6a0d	f0 03		beq $1a6a12	                BEQ chk_long
.1a6a0f	82 83 00	brl $1a6a95	                BRL next_entry              ; Yes: go to the next entry
.1a6a12	29 0f		and #$0f	chk_long        AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.1a6a14	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.1a6a16	d0 03		bne $1a6a1b	                BNE get_short_name
.1a6a18	82 7a 00	brl $1a6a95	                BRL next_entry              ; Yes: go to the next entry
.1a6a1b	a0 00 00	ldy #$0000	get_short_name  LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.1a6a1e	b7 18		lda [$0338],y	pr_name_loop    LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a6a20	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6a23	c8		iny		                INY                         ; Move to the next character
.1a6a24	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.1a6a27	d0 f5		bne $1a6a1e	                BNE pr_name_loop            ; No: print this new character
.1a6a29	a9 20		lda #$20	                LDA #' '                    ; Print the separator
.1a6a2b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6a2e	a0 08 00	ldy #$0008	                LDY #DIRENTRY.SHORTNAME+8   ; Move to the first of the extension characters
.1a6a31	b7 18		lda [$0338],y	pr_ext_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a6a33	20 18 00	jsr $1a0018	                JSR PRINTC                  ; Otherwise: print it.
.1a6a36	c8		iny		                INY                         ; Move to the next character
.1a6a37	c0 0b 00	cpy #$000b	                CPY #DIRENTRY.SHORTNAME+11  ; Are we at the end of the extension portion?
.1a6a3a	d0 f5		bne $1a6a31	                BNE pr_ext_loop             ; No: print this new character
.1a6a3c	a9 09		lda #$09	pr_tab1         LDA #CHAR_TAB               ; Print a TAB
.1a6a3e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6a41	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.1a6a44	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.1a6a46	89 10		bit #$10	                BIT #DOS_ATTR_DIR           ; Is it a directory?
.1a6a48	d0 1e		bne $1a6a68	                BNE pr_attr                 ; Yes: skip printing a file size
.1a6a4a	c2 20		rep #$20	            REP #$20
.1a6a4c	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.1a6a4f	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the file size
.1a6a51	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.1a6a55	c8		iny		                INY
.1a6a56	c8		iny		                INY
.1a6a57	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1a6a59	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.1a6a5d	e2 20		sep #$20	            SEP #$20
.1a6a5f	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6a61	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a6a65	20 2a 69	jsr $1a692a	            JSR PR_FILESIZE
.1a6a68	a9 09		lda #$09	pr_attr         LDA #CHAR_TAB               ; Print a TAB
.1a6a6a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6a6d	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.1a6a70	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.1a6a72	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.1a6a74	d0 1c		bne $1a6a92	                BNE end_entry               ; Yes: we're done printing this entry
.1a6a76	89 01		bit #$01	chk_read        BIT #DOS_ATTR_RO            ; Is it a read-only file?
.1a6a78	f0 05		beq $1a6a7f	                BEQ chk_system
.1a6a7a	a9 52		lda #$52	                LDA #'R'                    ; Yes: print an R
.1a6a7c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6a7f	89 04		bit #$04	chk_system      BIT #DOS_ATTR_SYSTEM        ; Is it System file?
.1a6a81	f0 05		beq $1a6a88	                BEQ chk_directory
.1a6a83	a9 53		lda #$53	                LDA #'S'                    ; Yes: print an S
.1a6a85	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6a88	89 10		bit #$10	chk_directory   BIT #DOS_ATTR_DIR           ; Is it a directory?
.1a6a8a	f0 05		beq $1a6a91	                BEQ pr_tab2
.1a6a8c	a9 44		lda #$44	                LDA #'D'                    ; Yes: print a D
.1a6a8e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6a91	ea		nop		pr_tab2         NOP
.1a6a92					end_entry
.1a6a92	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a6a95					next_entry
.1a6a95	20 ee 03	jsr $1a03ee	            JSR PAGINATE
.1a6a98	22 0c 11 00	jsl $00110c	                JSL FK_DIRNEXT
.1a6a9c	90 03		bcc $1a6aa1	                BCC done
.1a6a9e	82 41 ff	brl $1a69e2	                BRL pr_entry
.1a6aa1					done
.1a6aa1	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6aa4	08		php		            PHP
.1a6aa5	c2 20		rep #$20	            REP #$20
.1a6aa7	48		pha		            PHA
.1a6aa8	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6aab	5b		tcd		            TCD
.1a6aac	68		pla		            PLA
.1a6aad	28		plp		            PLP
.1a6aae	20 62 21	jsr $1a2162	            JSR SKIPSTMT
.1a6ab1	28		plp		                PLP
.1a6ab2	2b		pld		                PLD
.1a6ab3	60		rts		            RTS
.1a6ab4					pr_volume
.1a6ab4	08		php		            PHP
.1a6ab5	c2 20		rep #$20	            REP #$20
.1a6ab7	48		pha		            PHA
.1a6ab8	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a6abb	5b		tcd		            TCD
.1a6abc	68		pla		            PLA
.1a6abd	28		plp		            PLP
.1a6abe	e2 20		sep #$20	            SEP #$20
.1a6ac0	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.1a6ac2	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.1a6ac4	f0 cf		beq $1a6a95	                BEQ next_entry              ; Yes: skip it
.1a6ac6	a9 5b		lda #$5b	pr_lbracket     LDA #'['
.1a6ac8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6acb	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.1a6ace	b7 18		lda [$0338],y	pr_vol_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a6ad0	c9 20		cmp #$20	                CMP #CHAR_SP                ; Is it a blank?
.1a6ad2	f0 09		beq $1a6add	                BEQ pr_rbracket             ; Yes: end the name and print the dot
.1a6ad4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6ad7	c8		iny		                INY                         ; Move to the next character
.1a6ad8	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.1a6adb	d0 f1		bne $1a6ace	                BNE pr_vol_loop             ; No: print this new character
.1a6add	a9 5d		lda #$5d	pr_rbracket     LDA #']'                    ; Print a close bracket
.1a6adf	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6ae2	80 ae		bra $1a6a92	                BRA end_entry               ; And try to get the next entry
.1a6ae4					SETFILEDESC
.1a6ae4	0b		phd		                PHD
.1a6ae5	08		php		                PHP
.1a6ae6	08		php		            PHP
.1a6ae7	c2 20		rep #$20	            REP #$20
.1a6ae9	48		pha		            PHA
.1a6aea	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a6aed	5b		tcd		            TCD
.1a6aee	68		pla		            PLA
.1a6aef	28		plp		            PLP
.1a6af0	c2 30		rep #$30	            REP #$30
.1a6af2	a9 73 f2	lda #$f273	                LDA #<>FD_IN            ; Point to the file descriptor
.1a6af5	85 20		sta $0340	                STA DOS_FD_PTR
.1a6af7	a9 1a 00	lda #$001a	                LDA #`FD_IN
.1a6afa	85 22		sta $0342	                STA DOS_FD_PTR+2
.1a6afc	a0 00 00	ldy #$0000	                LDY #0                  ; Fille the file descriptor with 0
.1a6aff	e2 20		sep #$20	            SEP #$20
.1a6b01	a9 00		lda #$00	                LDA #0
.1a6b03	97 20		sta [$0340],y	zero_loop       STA [DOS_FD_PTR],Y
.1a6b05	c8		iny		                INY
.1a6b06	c0 1e 00	cpy #$001e	                CPY #SIZE(FILEDESC)
.1a6b09	d0 f8		bne $1a6b03	                BNE zero_loop
.1a6b0b	c2 20		rep #$20	            REP #$20
.1a6b0d	a9 73 f0	lda #$f073	                LDA #<>CLUSTER_BUFF     ; Point to the cluster buffer
.1a6b10	8f 81 f2 1a	sta $1af281	                STA @l FD_IN.BUFFER
.1a6b14	a9 1a 00	lda #$001a	                LDA #`CLUSTER_BUFF
.1a6b17	8f 83 f2 1a	sta $1af283	                STA @l FD_IN.BUFFER+2
.1a6b1b	af 23 08 00	lda $000823	                LDA @l ARGUMENT1        ; Point the file desriptor to the path
.1a6b1f	8f 75 f2 1a	sta $1af275	                STA @l FD_IN.PATH
.1a6b23	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a6b27	8f 77 f2 1a	sta $1af277	                STA @l FD_IN.PATH+2
.1a6b2b	28		plp		                PLP
.1a6b2c	2b		pld		                PLD
.1a6b2d	60		rts		            RTS
.1a6b2e					S_BLOAD
.1a6b2e	08		php		                PHP
.1a6b2f	c2 30		rep #$30	            REP #$30
.1a6b31	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a6b34	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6b37	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6b3a	20 e4 6a	jsr $1a6ae4	            JSR SETFILEDESC
.1a6b3d	e2 20		sep #$20	            SEP #$20
.1a6b3f	a9 2c		lda #$2c	                LDA #','
.1a6b41	85 37		sta $0837	                STA TARGETTOK
.1a6b43	20 5f 22	jsr $1a225f	            JSR OPT_TOK
.1a6b46	b0 0f		bcs $1a6b57	                BCS get_dest
.1a6b48	c2 20		rep #$20	            REP #$20
.1a6b4a	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set destination address to something "safe"
.1a6b4d	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6b51	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a6b55	80 17		bra $1a6b6e	                BRA do_load
.1a6b57					get_dest
.1a6b57	20 1d 21	jsr $1a211d	            JSR INCBIP
.1a6b5a	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6b5d	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a6b60	c2 20		rep #$20	            REP #$20
.1a6b62	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the destination address
.1a6b64	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6b68	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6b6a	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a6b6e	22 18 11 00	jsl $001118	do_load         JSL FK_LOAD                 ; Attempt to load the file
.1a6b72	b0 1f		bcs $1a6b93	                BCS done
.1a6b74	08		php		            PHP
.1a6b75	c2 20		rep #$20	            REP #$20
.1a6b77	48		pha		            PHA
.1a6b78	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6b7b	5b		tcd		            TCD
.1a6b7c	68		pla		            PLA
.1a6b7d	28		plp		            PLP
.1a6b7e	e2 20		sep #$20	            SEP #$20
.1a6b80	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6b82	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6b86	c2 20		rep #$20	            REP #$20
.1a6b88	29 ff 00	and #$00ff	            AND #$00FF
.1a6b8b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6b8e	e2 20		sep #$20	            SEP #$20
.1a6b90	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6b93	28		plp		done            PLP
.1a6b94	60		rts		            RTS
.1a6b95					SET_DOSSTAT
.1a6b95	8b		phb		                PHB
.1a6b96	0b		phd		                PHD
.1a6b97	08		php		                PHP
.1a6b98	08		php		            PHP
.1a6b99	c2 20		rep #$20	            REP #$20
.1a6b9b	48		pha		            PHA
.1a6b9c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6b9f	5b		tcd		            TCD
.1a6ba0	68		pla		            PLA
.1a6ba1	28		plp		            PLP
.1a6ba2	08		php		            PHP
.1a6ba3	e2 20		sep #$20	            SEP #$20
.1a6ba5	48		pha		            PHA
.1a6ba6	a9 00		lda #$00	            LDA #BASIC_BANK
.1a6ba8	48		pha		            PHA
.1a6ba9	ab		plb		            PLB
.1a6baa	68		pla		            PLA
.1a6bab	28		plp		            PLP
.1a6bac	e2 20		sep #$20	            SEP #$20
.1a6bae	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS           ; Get the DOS status code
.1a6bb2	85 23		sta $0823	                STA ARGUMENT1
.1a6bb4	a9 00		lda #$00	                LDA #0
.1a6bb6	85 24		sta $0824	                STA ARGUMENT1+1
.1a6bb8	85 25		sta $0825	                STA ARGUMENT1+2
.1a6bba	85 26		sta $0826	                STA ARGUMENT1+3
.1a6bbc	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6bbe	85 27		sta $0827	                STA ARGTYPE1
.1a6bc0	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (DOSSTAT)
.1a6bc2	a9 1a		lda #$1a	                LDA #`dosstat_name
.1a6bc4	85 e9		sta $08e9	                STA TOFIND+2
.1a6bc6	c2 20		rep #$20	            REP #$20
.1a6bc8	a9 f8 6b	lda #$6bf8	                LDA #<>dosstat_name
.1a6bcb	85 e7		sta $08e7	                STA TOFIND
.1a6bcd	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a6bd0	e2 20		sep #$20	            SEP #$20
.1a6bd2	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS          ; Get the BIOS status code
.1a6bd6	85 23		sta $0823	                STA ARGUMENT1
.1a6bd8	a9 00		lda #$00	                LDA #0
.1a6bda	85 24		sta $0824	                STA ARGUMENT1+1
.1a6bdc	85 25		sta $0825	                STA ARGUMENT1+2
.1a6bde	85 26		sta $0826	                STA ARGUMENT1+3
.1a6be0	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6be2	85 27		sta $0827	                STA ARGTYPE1
.1a6be4	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BIOSSTAT)
.1a6be6	a9 1a		lda #$1a	                LDA #`biosstat_name
.1a6be8	85 e9		sta $08e9	                STA TOFIND+2
.1a6bea	c2 20		rep #$20	            REP #$20
.1a6bec	a9 00 6c	lda #$6c00	                LDA #<>biosstat_name
.1a6bef	85 e7		sta $08e7	                STA TOFIND
.1a6bf1	20 82 53	jsr $1a5382	            JSR VAR_SET
.1a6bf4	28		plp		                PLP
.1a6bf5	2b		pld		                PLD
.1a6bf6	ab		plb		                PLB
.1a6bf7	60		rts		            RTS
>1a6bf8	44 4f 53 53 54 41 54 00		dosstat_name    .null "DOSSTAT"
>1a6c00	42 49 4f 53 53 54 41 54		biosstat_name   .null "BIOSSTAT"
>1a6c08	00
.1a6c09					CMD_BRUN
.1a6c09	08		php		                PHP
.1a6c0a	c2 30		rep #$30	            REP #$30
.1a6c0c	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a6c0f	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6c12	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6c15	a5 23		lda $0823	                LDA ARGUMENT1
.1a6c17	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.1a6c1b	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6c1d	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.1a6c21	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a6c24	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6c28	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a6c2c	22 24 11 00	jsl $001124	                JSL FK_RUN                  ; Attempt to run the file
.1a6c30	b0 25		bcs $1a6c57	                BCS done                    ; If we got it: try to execute it
.1a6c32	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6c35	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6c38	08		php		            PHP
.1a6c39	c2 20		rep #$20	            REP #$20
.1a6c3b	48		pha		            PHA
.1a6c3c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6c3f	5b		tcd		            TCD
.1a6c40	68		pla		            PLA
.1a6c41	28		plp		            PLP
.1a6c42	e2 20		sep #$20	            SEP #$20
.1a6c44	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6c46	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6c4a	c2 20		rep #$20	            REP #$20
.1a6c4c	29 ff 00	and #$00ff	            AND #$00FF
.1a6c4f	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6c52	e2 20		sep #$20	            SEP #$20
.1a6c54	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6c57					done
.1a6c57	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6c5a	28		plp		                PLP
.1a6c5b	60		rts		            RTS
.1a6c5c					CMD_LOAD
.1a6c5c	08		php		                PHP
.1a6c5d	c2 30		rep #$30	            REP #$30
.1a6c5f	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a6c62	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6c65	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6c68	20 e4 6a	jsr $1a6ae4	            JSR SETFILEDESC
.1a6c6b	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a6c6e	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6c72	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6c75	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2        ; Set the destination address
.1a6c79	20 53 50	jsr $1a5053	            JSR CMD_NEW
.1a6c7c	22 18 11 00	jsl $001118	                JSL FK_LOAD                 ; Attempt to load the file
.1a6c80	b0 22		bcs $1a6ca4	                BCS start_tokenize          ; If we got it: start tokenizing
.1a6c82	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6c85	08		php		            PHP
.1a6c86	c2 20		rep #$20	            REP #$20
.1a6c88	48		pha		            PHA
.1a6c89	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6c8c	5b		tcd		            TCD
.1a6c8d	68		pla		            PLA
.1a6c8e	28		plp		            PLP
.1a6c8f	e2 20		sep #$20	            SEP #$20
.1a6c91	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6c93	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6c97	c2 20		rep #$20	            REP #$20
.1a6c99	29 ff 00	and #$00ff	            AND #$00FF
.1a6c9c	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6c9f	e2 20		sep #$20	            SEP #$20
.1a6ca1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6ca4					start_tokenize
.1a6ca4	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6ca7	c2 20		rep #$20	            REP #$20
.1a6ca9	a2 12 00	ldx #$0012	                LDX #FILEDESC.FILESIZE
.1a6cac	18		clc		                CLC                         ; Set MTEMP to point to the byte after the file
.1a6cad	bf 73 f2 1a	lda $1af273,x	                LDA FD_IN,X
.1a6cb1	69 00 00	adc #$0000	                ADC #<>LOADBLOCK
.1a6cb4	85 92		sta $0892	                STA MTEMP
.1a6cb6	bf 75 f2 1a	lda $1af275,x	                LDA FD_IN+2,X
.1a6cba	69 01 00	adc #$0001	                ADC #`LOADBLOCK
.1a6cbd	85 94		sta $0894	                STA MTEMP+2
.1a6cbf	e2 20		sep #$20	            SEP #$20
.1a6cc1	a9 00		lda #$00	                LDA #0
.1a6cc3	87 92		sta [$0892]	                STA [MTEMP]                 ; Write a NULL right after the file
.1a6cc5	c2 20		rep #$20	            REP #$20
.1a6cc7	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK            ; Set MCURSOR to the begining of the loaded data
.1a6cca	85 7a		sta $087a	                STA MCURSOR
.1a6ccc	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6ccf	85 7c		sta $087c	                STA MCURSOR+2
.1a6cd1	a2 00 00	ldx #$0000	copy_line       LDX #0
.1a6cd4					copy_char
.1a6cd4	e2 20		sep #$20	            SEP #$20
.1a6cd6	a7 7a		lda [$087a]	                LDA [MCURSOR]
.1a6cd8	f0 2a		beq $1a6d04	                BEQ clean_up                ; If the character is 0, we're done
.1a6cda	c9 0d		cmp #$0d	                CMP #CHAR_CR                ; If it is new line...
.1a6cdc	f0 12		beq $1a6cf0	                BEQ do_process              ; ... we want to process the line
.1a6cde	c9 0a		cmp #$0a	                CMP #CHAR_LF                ; If it is a line feed...
.1a6ce0	f0 04		beq $1a6ce6	                BEQ next_char               ; ... we want to skip it
.1a6ce2	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X              ; Otherwise, copy the character to the input buffer
.1a6ce5	e8		inx		                INX
.1a6ce6					next_char
.1a6ce6	c2 20		rep #$20	            REP #$20
.1a6ce8	e6 7a		inc $087a	                INC MCURSOR                 ; Advance the input cursor
.1a6cea	d0 e8		bne $1a6cd4	                BNE copy_char
.1a6cec	e6 7c		inc $087c	                INC MCURSOR+2
.1a6cee	80 e4		bra $1a6cd4	                BRA copy_char
.1a6cf0					do_process
.1a6cf0	e2 20		sep #$20	            SEP #$20
.1a6cf2	a9 00		lda #$00	                LDA #0                      ; Put a 0 at the end of the input buffer
.1a6cf4	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a6cf7	20 8c 27	jsr $1a278c	            JSR PROCESS
.1a6cfa	c2 20		rep #$20	            REP #$20
.1a6cfc	e6 7a		inc $087a	                INC MCURSOR                 ; Try again with the next line
.1a6cfe	d0 d1		bne $1a6cd1	                BNE copy_line
.1a6d00	e6 7c		inc $087c	                INC MCURSOR+2
.1a6d02	80 cd		bra $1a6cd1	                BRA copy_line
.1a6d04	e0 00 00	cpx #$0000	clean_up        CPX #0                      ; Is there data in the INPUTBUF?
.1a6d07	f0 0a		beq $1a6d13	                BEQ done                    ; No: just return
.1a6d09	e2 20		sep #$20	            SEP #$20
.1a6d0b	a9 00		lda #$00	                LDA #0                      ; Make sure there is a trailing NULL
.1a6d0d	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a6d10	20 8c 27	jsr $1a278c	            JSR PROCESS
.1a6d13	28		plp		done            PLP
.1a6d14	60		rts		            RTS
.1a6d15					S_BSAVE
.1a6d15	08		php		                PHP
.1a6d16	c2 30		rep #$30	            REP #$30
.1a6d18	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a6d1b	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6d1e	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6d21	20 e4 6a	jsr $1a6ae4	            JSR SETFILEDESC
.1a6d24	e2 20		sep #$20	            SEP #$20
.1a6d26	a9 2c		lda #$2c	                LDA #','
.1a6d28	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a6d2b	c2 20		rep #$20	            REP #$20
.1a6d2d	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6d30	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a6d33	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_SRC_PTR
.1a6d35	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a6d39	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6d3b	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a6d3f	e2 20		sep #$20	            SEP #$20
.1a6d41	a9 2c		lda #$2c	                LDA #','
.1a6d43	c2 20		rep #$20	            REP #$20
.1a6d45	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a6d48	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6d4b	20 51 06	jsr $1a0651	            JSR ASS_ARG1_INT
.1a6d4e	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_END_PTR
.1a6d50	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a6d54	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6d56	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a6d5a	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                 ; Attempt to save the memory to file.
.1a6d5e	b0 22		bcs $1a6d82	                BCS done
.1a6d60	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6d63	08		php		            PHP
.1a6d64	c2 20		rep #$20	            REP #$20
.1a6d66	48		pha		            PHA
.1a6d67	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6d6a	5b		tcd		            TCD
.1a6d6b	68		pla		            PLA
.1a6d6c	28		plp		            PLP
.1a6d6d	e2 20		sep #$20	            SEP #$20
.1a6d6f	a9 12		lda #$12	            LDA #ERR_SAVE
.1a6d71	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6d75	c2 20		rep #$20	            REP #$20
.1a6d77	29 ff 00	and #$00ff	            AND #$00FF
.1a6d7a	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6d7d	e2 20		sep #$20	            SEP #$20
.1a6d7f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6d82					done
.1a6d82	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6d85	28		plp		                PLP
.1a6d86	60		rts		            RTS
.1a6d87					COPY2PATHBUF
.1a6d87	da		phx		                PHX
.1a6d88	5a		phy		                PHY
.1a6d89	08		php		                PHP
.1a6d8a	a2 00 00	ldx #$0000	                LDX #0
.1a6d8d	a0 00 00	ldy #$0000	                LDY #0
.1a6d90	e2 20		sep #$20	            SEP #$20
.1a6d92	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y           ; Copy the path to the DOS_PATH_BUFF
.1a6d94	9d 00 04	sta $0400,x	                STA DOS_PATH_BUFF,X
.1a6d97	f0 04		beq $1a6d9d	                BEQ done
.1a6d99	e8		inx		                INX
.1a6d9a	c8		iny		                INY
.1a6d9b	80 f5		bra $1a6d92	                BRA loop
.1a6d9d	28		plp		done            PLP
.1a6d9e	7a		ply		                PLY
.1a6d9f	fa		plx		                PLX
.1a6da0	60		rts		            RTS
.1a6da1					CMD_SAVE
.1a6da1	08		php		                PHP
.1a6da2	c2 30		rep #$30	            REP #$30
.1a6da4	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a6da7	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6daa	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6dad	20 e4 6a	jsr $1a6ae4	            JSR SETFILEDESC
.1a6db0	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a6db3	85 a6		sta $08a6	                STA OBUFFER
.1a6db5	e2 20		sep #$20	            SEP #$20
.1a6db7	a9 01		lda #$01	                LDA #`LOADBLOCK
.1a6db9	85 a8		sta $08a8	                STA OBUFFER+2
.1a6dbb	a9 20		lda #$20	                LDA #DEV_BUFFER             ; Set up output for the buffer
.1a6dbd	85 b4		sta $08b4	                STA BCONSOLE
.1a6dbf	c2 20		rep #$20	            REP #$20
.1a6dc1	a9 00 00	lda #$0000	                LDA #0
.1a6dc4	85 ab		sta $08ab	                STA OBUFFIDX
.1a6dc6	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a6dc9	85 a9		sta $08a9	                STA OBUFFSIZE
.1a6dcb	c2 20		rep #$20	            REP #$20
.1a6dcd	a9 00 00	lda #$0000	                LDA #0                      ; Set start line number to 0
.1a6dd0	85 55		sta $0855	                STA MARG1
.1a6dd2	85 57		sta $0857	                STA MARG1+2
.1a6dd4	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set end line number to MAXINT
.1a6dd7	85 59		sta $0859	                STA MARG2
.1a6dd9	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.1a6ddc	85 5b		sta $085b	                STA MARG2+2
.1a6dde	20 8b 18	jsr $1a188b	            JSR LISTPROG
.1a6de1	e2 20		sep #$20	            SEP #$20
.1a6de3	a9 80		lda #$80	                LDA #DEV_SCREEN             ; Restore output to the screen
.1a6de5	85 b4		sta $08b4	                STA BCONSOLE
.1a6de7	c2 20		rep #$20	            REP #$20
.1a6de9	c6 ab		dec $08ab	                DEC OBUFFIDX                ; OBUFFIDX points to the next free byte... so pull it in one
.1a6deb	18		clc		                CLC                         ; Set the range of memory to save
.1a6dec	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a6def	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a6df3	65 ab		adc $08ab	                ADC OBUFFIDX
.1a6df5	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a6df9	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6dfc	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a6e00	69 00 00	adc #$0000	                ADC #0
.1a6e03	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a6e07	22 1c 11 00	jsl $00111c	do_save         JSL FK_SAVE                 ; Attempt to save the file
.1a6e0b	b0 22		bcs $1a6e2f	                BCS done
.1a6e0d	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6e10	08		php		            PHP
.1a6e11	c2 20		rep #$20	            REP #$20
.1a6e13	48		pha		            PHA
.1a6e14	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6e17	5b		tcd		            TCD
.1a6e18	68		pla		            PLA
.1a6e19	28		plp		            PLP
.1a6e1a	e2 20		sep #$20	            SEP #$20
.1a6e1c	a9 12		lda #$12	            LDA #ERR_SAVE
.1a6e1e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6e22	c2 20		rep #$20	            REP #$20
.1a6e24	29 ff 00	and #$00ff	            AND #$00FF
.1a6e27	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6e2a	e2 20		sep #$20	            SEP #$20
.1a6e2c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6e2f					done
.1a6e2f	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6e32	28		plp		                PLP
.1a6e33	60		rts		            RTS
.1a6e34					S_DEL
.1a6e34	08		php		                PHP
.1a6e35	c2 30		rep #$30	            REP #$30
.1a6e37	20 3e 21	jsr $1a213e	            JSR SKIPWS
.1a6e3a	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6e3d	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6e40	20 87 6d	jsr $1a6d87	            JSR COPY2PATHBUF
.1a6e43	22 04 11 00	jsl $001104	path_loaded     JSL FK_DELETE               ; Try to delete the file
.1a6e47	b0 22		bcs $1a6e6b	                BCS done
.1a6e49	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6e4c	08		php		            PHP
.1a6e4d	c2 20		rep #$20	            REP #$20
.1a6e4f	48		pha		            PHA
.1a6e50	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6e53	5b		tcd		            TCD
.1a6e54	68		pla		            PLA
.1a6e55	28		plp		            PLP
.1a6e56	e2 20		sep #$20	            SEP #$20
.1a6e58	a9 13		lda #$13	            LDA #ERR_DELETE
.1a6e5a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6e5e	c2 20		rep #$20	            REP #$20
.1a6e60	29 ff 00	and #$00ff	            AND #$00FF
.1a6e63	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6e66	e2 20		sep #$20	            SEP #$20
.1a6e68	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6e6b					done
.1a6e6b	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6e6e	28		plp		                PLP
.1a6e6f	60		rts		            RTS
.1a6e70					VALIDFILECHAR
.1a6e70	da		phx		                PHX
.1a6e71	08		php		                PHP
.1a6e72	e2 20		sep #$20	            SEP #$20
.1a6e74	c9 61		cmp #$61	                CMP #'a'                    ; Is it lower case?
.1a6e76	90 08		bcc $1a6e80	                BLT chk_space
.1a6e78	c9 7b		cmp #$7b	                CMP #'z'+1
.1a6e7a	b0 04		bcs $1a6e80	                BGE chk_space
.1a6e7c	29 df		and #$df	                AND #%11011111              ; Yes: convert to upper case
.1a6e7e	80 13		bra $1a6e93	                BRA ret_valid
.1a6e80	c9 20		cmp #$20	chk_space       CMP #CHAR_SP            ; Is it a control code?
.1a6e82	90 13		bcc $1a6e97	                BLT is_invalid          ; Yes: it's invalid
.1a6e84	a2 00 00	ldx #$0000	                LDX #0                  ; See if it's in the list of invalids
.1a6e87	df 9b 6e 1a	cmp $1a6e9b,x	loop            CMP invalid_chars,X
.1a6e8b	f0 0a		beq $1a6e97	                BEQ is_invalid
.1a6e8d	e8		inx		                INX
.1a6e8e	e0 0f 00	cpx #$000f	                CPX #15                 ; # of invalid characters
.1a6e91	d0 f4		bne $1a6e87	                BNE loop
.1a6e93	28		plp		ret_valid       PLP
.1a6e94	38		sec		                SEC
.1a6e95	fa		plx		                PLX
.1a6e96	6b		rtl		                RTL
.1a6e97	28		plp		is_invalid      PLP
.1a6e98	18		clc		                CLC
.1a6e99	fa		plx		                PLX
.1a6e9a	6b		rtl		                RTL
>1a6e9b	2a 2b 2c 2f 3a 3b 3c 3d		invalid_chars   .text "*+,/:;<=>?\[]|",CHAR_DQUOTE
>1a6ea3	3e 3f 5c 5b 5d 7c 22
.1a6eaa					S_RENAME
.1a6eaa	08		php		                PHP
.1a6eab	08		php		            PHP
.1a6eac	c2 20		rep #$20	            REP #$20
.1a6eae	48		pha		            PHA
.1a6eaf	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6eb2	5b		tcd		            TCD
.1a6eb3	68		pla		            PLA
.1a6eb4	28		plp		            PLP
.1a6eb5	c2 30		rep #$30	            REP #$30
.1a6eb7	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6eba	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6ebd	20 87 6d	jsr $1a6d87	            JSR COPY2PATHBUF
.1a6ec0	22 10 11 00	jsl $001110	                JSL FK_DIRREAD              ; Try to read the file
.1a6ec4	b0 22		bcs $1a6ee8	                BCS get_new_name            ; If ok: get the new name
.1a6ec6	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6ec9	08		php		            PHP
.1a6eca	c2 20		rep #$20	            REP #$20
.1a6ecc	48		pha		            PHA
.1a6ecd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6ed0	5b		tcd		            TCD
.1a6ed1	68		pla		            PLA
.1a6ed2	28		plp		            PLP
.1a6ed3	e2 20		sep #$20	            SEP #$20
.1a6ed5	a9 14		lda #$14	            LDA #ERR_FILENOTFOUND
.1a6ed7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6edb	c2 20		rep #$20	            REP #$20
.1a6edd	29 ff 00	and #$00ff	            AND #$00FF
.1a6ee0	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6ee3	e2 20		sep #$20	            SEP #$20
.1a6ee5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6ee8					get_new_name
.1a6ee8	e2 20		sep #$20	            SEP #$20
.1a6eea	a9 2c		lda #$2c	                LDA #','
.1a6eec	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a6eef	c2 20		rep #$20	            REP #$20
.1a6ef1	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6ef4	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6ef7	ad 38 03	lda $0338	                LDA DOS_DIR_PTR
.1a6efa	85 08		sta $0808	                STA INDEX
.1a6efc	ad 3a 03	lda $033a	                LDA DOS_DIR_PTR+2
.1a6eff	85 0a		sta $080a	                STA INDEX+2
.1a6f01	e2 20		sep #$20	            SEP #$20
.1a6f03	a2 00 00	ldx #$0000	                LDX #0
.1a6f06	a9 20		lda #$20	                LDA #CHAR_SP                ; We'll use MLINEBUFF as temporary name storage
.1a6f08	95 7e		sta $087e,x	blank_loop      STA MLINEBUF,X              ; Fill it with blanks
.1a6f0a	e8		inx		                INX
.1a6f0b	e0 0b 00	cpx #$000b	                CPX #11
.1a6f0e	d0 f8		bne $1a6f08	                BNE blank_loop
.1a6f10	a2 00 00	ldx #$0000	                LDX #0
.1a6f13	a0 00 00	ldy #$0000	                LDY #0
.1a6f16	b7 23		lda [$0823],y	name_loop       LDA [ARGUMENT1],Y           ; Get the character of the new name
.1a6f18	f0 76		beq $1a6f90	                BEQ copy_short_name         ; If end-of-string: copy what we have
.1a6f1a	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.1a6f1c	f0 39		beq $1a6f57	                BEQ skip_dot                ; Yes: move on to the extension characters
.1a6f1e	22 70 6e 1a	jsl $1a6e70	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.1a6f22	b0 1f		bcs $1a6f43	                BCS save_nm_char
.1a6f24	08		php		            PHP
.1a6f25	c2 20		rep #$20	            REP #$20
.1a6f27	48		pha		            PHA
.1a6f28	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6f2b	5b		tcd		            TCD
.1a6f2c	68		pla		            PLA
.1a6f2d	28		plp		            PLP
.1a6f2e	e2 20		sep #$20	            SEP #$20
.1a6f30	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a6f32	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6f36	c2 20		rep #$20	            REP #$20
.1a6f38	29 ff 00	and #$00ff	            AND #$00FF
.1a6f3b	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6f3e	e2 20		sep #$20	            SEP #$20
.1a6f40	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6f43	95 7e		sta $087e,x	save_nm_char    STA MLINEBUF,X              ; Otherwise: copy it
.1a6f45	c8		iny		                INY
.1a6f46	e8		inx		                INX
.1a6f47	c0 08 00	cpy #$0008	                CPY #8
.1a6f4a	d0 ca		bne $1a6f16	                BNE name_loop
.1a6f4c	b7 23		lda [$0823],y	eat_name        LDA [ARGUMENT1],Y           ; Get the character
.1a6f4e	f0 40		beq $1a6f90	                BEQ copy_short_name         ; If null, we're done with the short name
.1a6f50	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.1a6f52	f0 03		beq $1a6f57	                BEQ skip_dot                ; Yes: skip over it
.1a6f54	c8		iny		                INY                         ; No: try again with the the next character
.1a6f55	80 f5		bra $1a6f4c	                BRA eat_name
.1a6f57	c8		iny		skip_dot        INY                         ; Character at Y is '.', so skip over it
.1a6f58	a2 08 00	ldx #$0008	do_ext          LDX #8
.1a6f5b	b7 23		lda [$0823],y	ext_loop        LDA [ARGUMENT1],Y           ; Get the character of the new extension
.1a6f5d	f0 31		beq $1a6f90	                BEQ copy_short_name         ; If end-of-string: copy what we have
.1a6f5f	22 70 6e 1a	jsl $1a6e70	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.1a6f63	b0 22		bcs $1a6f87	                BCS save_ext_char
.1a6f65	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6f68	08		php		            PHP
.1a6f69	c2 20		rep #$20	            REP #$20
.1a6f6b	48		pha		            PHA
.1a6f6c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6f6f	5b		tcd		            TCD
.1a6f70	68		pla		            PLA
.1a6f71	28		plp		            PLP
.1a6f72	e2 20		sep #$20	            SEP #$20
.1a6f74	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a6f76	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6f7a	c2 20		rep #$20	            REP #$20
.1a6f7c	29 ff 00	and #$00ff	            AND #$00FF
.1a6f7f	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6f82	e2 20		sep #$20	            SEP #$20
.1a6f84	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6f87	95 7e		sta $087e,x	save_ext_char   STA MLINEBUF,X              ; Otherwise: copy it
.1a6f89	c8		iny		                INY
.1a6f8a	e8		inx		                INX
.1a6f8b	c0 0c 00	cpy #$000c	                CPY #12
.1a6f8e	d0 cb		bne $1a6f5b	                BNE ext_loop
.1a6f90	a2 00 00	ldx #$0000	copy_short_name LDX #0                      ; Copy the short name we built to the directory entry
.1a6f93	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1a6f96	b5 7e		lda $087e,x	copy_loop       LDA MLINEBUF,X
.1a6f98	97 08		sta [$0808],y	                STA [INDEX],Y
.1a6f9a	e8		inx		                INX
.1a6f9b	c8		iny		                INY
.1a6f9c	c0 0b 00	cpy #$000b	                CPY #11
.1a6f9f	d0 f5		bne $1a6f96	                BNE copy_loop
.1a6fa1	22 14 11 00	jsl $001114	                JSL FK_DIRWRITE             ; Write the directory entry back
.1a6fa5	b0 22		bcs $1a6fc9	                BCS done
.1a6fa7	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6faa	08		php		            PHP
.1a6fab	c2 20		rep #$20	            REP #$20
.1a6fad	48		pha		            PHA
.1a6fae	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6fb1	5b		tcd		            TCD
.1a6fb2	68		pla		            PLA
.1a6fb3	28		plp		            PLP
.1a6fb4	e2 20		sep #$20	            SEP #$20
.1a6fb6	a9 15		lda #$15	            LDA #ERR_DIRNOTWRITE
.1a6fb8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6fbc	c2 20		rep #$20	            REP #$20
.1a6fbe	29 ff 00	and #$00ff	            AND #$00FF
.1a6fc1	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a6fc4	e2 20		sep #$20	            SEP #$20
.1a6fc6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6fc9					done
.1a6fc9	20 95 6b	jsr $1a6b95	            JSR SET_DOSSTAT
.1a6fcc	28		plp		                PLP
.1a6fcd	60		rts		            RTS
.1a6fce					S_COPY
.1a6fce	08		php		                PHP
.1a6fcf	08		php		            PHP
.1a6fd0	c2 20		rep #$20	            REP #$20
.1a6fd2	48		pha		            PHA
.1a6fd3	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6fd6	5b		tcd		            TCD
.1a6fd7	68		pla		            PLA
.1a6fd8	28		plp		            PLP
.1a6fd9	c2 30		rep #$30	            REP #$30
.1a6fdb	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6fde	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6fe1	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.1a6fe3	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.1a6fe7	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6fe9	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.1a6fed	e2 20		sep #$20	            SEP #$20
.1a6fef	a9 2c		lda #$2c	                LDA #','
.1a6ff1	20 2a 22	jsr $1a222a	            JSR EXPECT_TOK
.1a6ff4	c2 20		rep #$20	            REP #$20
.1a6ff6	20 0c 1d	jsr $1a1d0c	            JSR EVALEXPR
.1a6ff9	20 e3 06	jsr $1a06e3	            JSR ASS_ARG1_STR
.1a6ffc	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.1a6ffe	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.1a7002	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a7004	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.1a7008	22 30 11 00	jsl $001130	                JSL FK_COPY                 ; Attempt to copy the file
.1a700c	b0 1f		bcs $1a702d	                BCS done
.1a700e	08		php		            PHP
.1a700f	c2 20		rep #$20	            REP #$20
.1a7011	48		pha		            PHA
.1a7012	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a7015	5b		tcd		            TCD
.1a7016	68		pla		            PLA
.1a7017	28		plp		            PLP
.1a7018	e2 20		sep #$20	            SEP #$20
.1a701a	a9 16		lda #$16	            LDA #ERR_NOTCOPIED
.1a701c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a7020	c2 20		rep #$20	            REP #$20
.1a7022	29 ff 00	and #$00ff	            AND #$00FF
.1a7025	20 5e 1e	jsr $1a1e5e	            JSR SET_ERRERL
.1a7028	e2 20		sep #$20	            SEP #$20
.1a702a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a702d	28		plp		done            PLP
.1a702e	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\monitor.s

.1a702f	5c ec 89 1a	jmp $1a89ec	MRETURN         JML IMRETURN
.1a7033	5c 3d 88 1a	jmp $1a883d	MPARSE          JML IMPARSE
.1a7037	5c ed 89 1a	jmp $1a89ed	MPARSE1         JML IMPARSE1
.1a703b	5c 69 79 1a	jmp $1a7969	MEXECUTE        JML IMEXECUTE
.1a703f	5c c6 79 1a	jmp $1a79c6	MASSEMBLE       JML IMASSEMBLE
.1a7043	5c f9 78 1a	jmp $1a78f9	MRMODIFY        JML IMRMODIFY
.1a7047	5c 7f 78 1a	jmp $1a787f	MCOMPARE        JML IMCOMPARE
.1a704b	5c fc 7d 1a	jmp $1a7dfc	MDISASSEMBLE    JML IMDISASSEMBLE
.1a704f	5c ea 74 1a	jmp $1a74ea	MFILL           JML IMFILL
.1a7053	5c 17 78 1a	jmp $1a7817	MGO             JML IMGO
.1a7057	5c d2 77 1a	jmp $1a77d2	MJUMP           JML IMJUMP
.1a705b	5c 5c 77 1a	jmp $1a775c	MHUNT           JML IMHUNT
.1a705f	5c fb 88 1a	jmp $1a88fb	MLOAD           JML IMLOAD
.1a7063	5c f8 75 1a	jmp $1a75f8	MMEMORY         JML IMMEMORY
.1a7067	5c 48 74 1a	jmp $1a7448	MREGISTERS      JML IMREGISTERS
.1a706b	5c 76 89 1a	jmp $1a8976	MSAVE           JML IMSAVE
.1a706f	5c 26 75 1a	jmp $1a7526	MTRANSFER       JML IMTRANSFER
.1a7073	5c ef 89 1a	jmp $1a89ef	MVERIFY         JML IMVERIFY
.1a7077	5c e8 89 1a	jmp $1a89e8	MEXIT           JML IMEXIT
.1a707b	5c 15 77 1a	jmp $1a7715	MMODIFY         JML IMMODIFY
.1a707f	5c f0 89 1a	jmp $1a89f0	MDOS            JML IMDOS
.1a7083	18		clc		IMONITOR        CLC                 ; clear the carry flag
.1a7084	fb		xce		                XCE                 ; move carry to emulation flags
.1a7085	58		cli		                CLI                 ; Re-enable interrupts
.1a7086	5c 8a 70 1a	jmp $1a708a	                JML IMREADY
.1a708a					IMREADY
.1a708a	c2 30		rep #$30	            REP #$30
.1a708c	22 48 74 1a	jsl $1a7448	                JSL IMREGISTERS
.1a7090					ready_loop
.1a7090	20 08 00	jsr $1a0008	            JSR READLINE
.1a7093	20 0c 00	jsr $1a000c	            JSR SCRCOPYLINE
.1a7096	8b		phb		                PHB
.1a7097	e2 20		sep #$20	            SEP #$20
.1a7099	a9 00		lda #$00	                LDA #`INPUTBUF
.1a709b	48		pha		                PHA
.1a709c	ab		plb		                PLB
.1a709d	a2 00 4f	ldx #$4f00	                LDX #<>INPUTBUF
.1a70a0	20 65 05	jsr $1a0565	            JSR TOUPPER
.1a70a3	ab		plb		                PLB
.1a70a4	22 33 70 1a	jsl $1a7033	                JSL MPARSE          ; Parse the command
.1a70a8	22 3b 70 1a	jsl $1a703b	                JSL MEXECUTE        ; And execute the parsed command
.1a70ac	80 e2		bra $1a7090	                BRA ready_loop
.1a70ae					IMHELP
.1a70ae	08		php		                PHP
.1a70af	8b		phb		                PHB
.1a70b0	e2 20		sep #$20	            SEP #$20
.1a70b2	a9 1a		lda #$1a	                LDA #`help_text
.1a70b4	48		pha		                PHA
.1a70b5	ab		plb		                PLB
.1a70b6	c2 10		rep #$10	            REP #$10
.1a70b8	a2 c1 70	ldx #$70c1	                LDX #<>help_text
.1a70bb	20 64 04	jsr $1a0464	            JSR PRINTS
.1a70be	ab		plb		                PLB
.1a70bf	28		plp		                PLP
.1a70c0	6b		rtl		                RTL
>1a70c1	41 20 3c 73 74 61 72 74		help_text       .text "A <start> <assembly>",CHAR_CR
>1a70c9	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d
>1a70d6	20 20 41 73 73 65 6d 62		                .text "  Assemble a program",CHAR_CR,CHAR_CR
>1a70de	6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>1a70ec	43 20 3c 73 74 61 72 74		                .text "C <start1> <start2> [len (1 if blank)]",CHAR_CR
>1a70f4	31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e
>1a7104	20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d
>1a7113	20 20 43 6f 6d 70 61 72		                .text "  Compare to sections of memory",CHAR_CR,CHAR_CR
>1a711b	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>1a712b	20 6d 65 6d 6f 72 79 0d 0d
>1a7134	44 20 3c 73 74 61 72 74		                .text "D <start> [end]",CHAR_CR
>1a713c	3e 20 5b 65 6e 64 5d 0d
>1a7144	20 20 44 69 73 61 73 73		                .text "  Disassemble a program",CHAR_CR,CHAR_CR
>1a714c	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>1a715c	0d
>1a715d	46 20 3c 73 74 61 72 74		                .text "F <start> <end> <byte>",CHAR_CR
>1a7165	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d
>1a7174	20 20 46 69 6c 6c 20 61		                .text "  Fill a block of memory with a byte",CHAR_CR,CHAR_CR
>1a717c	20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>1a718c	20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>1a719a	47 20 5b 61 64 64 72 65		                .text "G [address]",CHAR_CR
>1a71a2	73 73 5d 0d
>1a71a6	20 20 53 74 61 72 74 20		                .text "  Start execution at a location",CHAR_CR,CHAR_CR
>1a71ae	65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>1a71be	6f 63 61 74 69 6f 6e 0d 0d
>1a71c7	4a 20 5b 61 64 64 72 65		                .text "J [address] - Jump to a location in memory",CHAR_CR
>1a71cf	73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20
>1a71df	6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>1a71ef	72 79 0d
>1a71f2	20 20 4a 75 6d 70 20 74		                .text "  Jump to a location in memory",CHAR_CR,CHAR_CR
>1a71fa	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>1a720a	6d 65 6d 6f 72 79 0d 0d
>1a7212	48 20 3c 73 74 61 72 74		                .text "H <start> <end> <byte> [byte]..",CHAR_CR
>1a721a	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>1a722a	62 79 74 65 5d 2e 2e 0d
>1a7232	20 20 48 75 6e 74 20 66		                .text "  Hunt for values in memory",CHAR_CR,CHAR_CR
>1a723a	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>1a724a	6f 72 79 0d 0d
>1a724f	4c 20 20 20 20 20 4c 4f		                .text "L     LOAD         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," [destination]",CHAR_CR
>1a7257	41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a7267	22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>1a7277	4d 20 3c 73 74 61 72 74		                .text "M <start> [end]",CHAR_CR
>1a727f	3e 20 5b 65 6e 64 5d 0d
>1a7287	20 20 44 75 6d 70 20 74		                .text "  Dump the value in memory",CHAR_CR,CHAR_CR
>1a728f	68 65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f
>1a729f	72 79 0d 0d
>1a72a3	52 20 2d 20 44 69 73 70		                .text "R - Display the values of the registers",CHAR_CR,CHAR_CR
>1a72ab	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>1a72bb	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>1a72cb	0d
>1a72cc	3b 20 3c 50 43 3e 20 3c		                .text "; <PC> <A> <X> <Y> <SP> <DBR> <DP> <NVMXDIZC>",CHAR_CR
>1a72d4	41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>1a72e4	3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>1a72f4	44 49 5a 43 3e 0d
>1a72fa	20 20 43 68 61 6e 67 65		                .text "  Change the contents of the registers",CHAR_CR,CHAR_CR
>1a7302	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>1a7312	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>1a7322	53 20 20 20 20 20 53 41		                .text "S     SAVE         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," <start> <end>",CHAR_CR
>1a732a	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a733a	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>1a734a	54 20 3c 73 74 61 72 74		                .text "T <start> <end> <destination>",CHAR_CR
>1a7352	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>1a7362	74 69 6f 6e 3e 0d
>1a7368	20 20 54 72 61 6e 73 66		                .text "  Transfer (copy) data within memory",CHAR_CR,CHAR_CR
>1a7370	65 72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77
>1a7380	69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a738e	57 20 3c 62 79 74 65 3e		                .text "W <byte>",CHAR_CR
>1a7396	0d
>1a7397	20 20 53 65 74 20 74 68		                .text "  Set the register width flags for the disassembler",CHAR_CR,CHAR_CR
>1a739f	65 20 72 65 67 69 73 74 65 72 20 77 69 64 74 68
>1a73af	20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20 64
>1a73bf	69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>1a73cc	58 20 2d 20 52 65 74 75		                .text "X - Return to BASIC",CHAR_CR,CHAR_CR
>1a73d4	72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>1a73e1	3e 20 3c 73 74 61 72 74		                .text "> <start> <byte> [byte]...",CHAR_CR
>1a73e9	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>1a73f9	2e 2e 0d
>1a73fc	20 20 45 64 69 74 20 64		                .text "  Edit data in memory",CHAR_CR,CHAR_CR
>1a7404	61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a7413	3f 20 2d 20 44 69 73 70		                .null "? - Display a short help screen",CHAR_CR,CHAR_CR
>1a741b	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>1a742b	20 73 63 72 65 65 6e 0d 0d 00
.1a7435					IMWIDTH
.1a7435	08		php		                PHP
.1a7436	08		php		            PHP
.1a7437	c2 20		rep #$20	            REP #$20
.1a7439	48		pha		            PHA
.1a743a	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a743d	5b		tcd		            TCD
.1a743e	68		pla		            PLA
.1a743f	28		plp		            PLP
.1a7440	e2 20		sep #$20	            SEP #$20
.1a7442	a5 0d		lda $0855	                LDA MARG1
.1a7444	85 4e		sta $0896	                STA MCPUSTAT
.1a7446	28		plp		                PLP
.1a7447	6b		rtl		                RTL
.1a7448					IMREGISTERS
.1a7448	20 3d 02	jsr $1a023d	            JSR ENSURETEXT
.1a744b	08		php		            PHP
.1a744c	e2 20		sep #$20	            SEP #$20
.1a744e	48		pha		            PHA
.1a744f	a9 1a		lda #$1a	            LDA #`mregisters_msg
.1a7451	48		pha		            PHA
.1a7452	ab		plb		            PLB
.1a7453	68		pla		            PLA
.1a7454	28		plp		            PLP
.1a7455	a2 2d 8a	ldx #$8a2d	                LDX #<>mregisters_msg
.1a7458	20 64 04	jsr $1a0464	            JSR PRINTS
.1a745b	e2 20		sep #$20	            SEP #$20
.1a745d	a9 3b		lda #$3b	                LDA #';'
.1a745f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7462	a9 20		lda #$20	                LDA #' '
.1a7464	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7467	c2 30		rep #$30	            REP #$30
.1a7469	08		php		            PHP
.1a746a	e2 20		sep #$20	            SEP #$20
.1a746c	48		pha		            PHA
.1a746d	a9 00		lda #$00	            LDA #$0
.1a746f	48		pha		            PHA
.1a7470	ab		plb		            PLB
.1a7471	68		pla		            PLA
.1a7472	28		plp		            PLP
.1a7473	a0 03 00	ldy #$0003	                LDY #3
.1a7476	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1a7479	20 e7 03	jsr $1a03e7	            JSR PRINTH
.1a747c	c2 20		rep #$20	            REP #$20
.1a747e	a9 20 00	lda #$0020	                LDA #' '
.1a7481	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7484	af 44 02 00	lda $000244	                LDA @lCPUA
.1a7488	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a748b	a9 20 00	lda #$0020	                LDA #' '
.1a748e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7491	af 46 02 00	lda $000246	                LDA @lCPUX
.1a7495	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a7498	a9 20 00	lda #$0020	                LDA #' '
.1a749b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a749e	af 48 02 00	lda $000248	                LDA @lCPUY
.1a74a2	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a74a5	a9 20 00	lda #$0020	                LDA #' '
.1a74a8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a74ab	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK
.1a74af	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a74b2	a9 20 00	lda #$0020	                LDA #' '
.1a74b5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a74b8	af 4e 02 00	lda $00024e	                LDA @lCPUDBR
.1a74bc	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a74bf	a9 20 00	lda #$0020	                LDA #' '
.1a74c2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a74c5	a9 20 00	lda #$0020	                LDA #' '
.1a74c8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a74cb	af 4c 02 00	lda $00024c	                LDA @lCPUDP
.1a74cf	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a74d2	a9 20 00	lda #$0020	                LDA #' '
.1a74d5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a74d8	08		php		                PHP
.1a74d9	e2 20		sep #$20	            SEP #$20
.1a74db	ad 4f 02	lda $024f	                LDA CPUFLAGS
.1a74de	22 46 87 1a	jsl $1a8746	                JSL MPRINTB
.1a74e2	28		plp		                PLP
.1a74e3	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a74e6	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a74e9	6b		rtl		                RTL
.1a74ea					IMFILL
.1a74ea	08		php		                PHP                 ; Save the caller's context
.1a74eb	0b		phd		                PHD
.1a74ec	08		php		            PHP
.1a74ed	c2 20		rep #$20	            REP #$20
.1a74ef	48		pha		            PHA
.1a74f0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a74f3	5b		tcd		            TCD
.1a74f4	68		pla		            PLA
.1a74f5	28		plp		            PLP
.1a74f6					do_copy
.1a74f6	e2 20		sep #$20	            SEP #$20
.1a74f8	a5 15		lda $085d	                LDA MARG3
.1a74fa	87 0d		sta [$0855]	                STA [MARG1]
.1a74fc	e2 20		sep #$20	            SEP #$20
.1a74fe	a5 0f		lda $0857	                LDA MARG1+2
.1a7500	c5 13		cmp $085b	                CMP MARG2+2
.1a7502	d0 0e		bne $1a7512	                BNE go_next         ; No: we haven't reached end address yet
.1a7504	c2 20		rep #$20	            REP #$20
.1a7506	a5 0d		lda $0855	                LDA MARG1
.1a7508	c5 11		cmp $0859	                CMP MARG2           ; Are they equal?
.1a750a	d0 06		bne $1a7512	                BNE go_next         ; No: we haven't reached end address yet
.1a750c	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a750f	2b		pld		                PLD                 ; Restore the caller's context
.1a7510	28		plp		                PLP
.1a7511	6b		rtl		                RTL
.1a7512					go_next
.1a7512	c2 20		rep #$20	            REP #$20
.1a7514	18		clc		                CLC
.1a7515	a5 0d		lda $0855	                LDA MARG1
.1a7517	69 01 00	adc #$0001	                ADC #1
.1a751a	85 0d		sta $0855	                STA MARG1
.1a751c	e2 20		sep #$20	            SEP #$20
.1a751e	a5 0e		lda $0856	                LDA MARG1+1
.1a7520	69 00		adc #$00	                ADC #0
.1a7522	85 0e		sta $0856	                STA MARG1+1
.1a7524	80 d0		bra $1a74f6	                BRA do_copy
.1a7526					IMTRANSFER
.1a7526	08		php		                PHP
.1a7527	0b		phd		                PHD
.1a7528	08		php		            PHP
.1a7529	c2 20		rep #$20	            REP #$20
.1a752b	48		pha		            PHA
.1a752c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a752f	5b		tcd		            TCD
.1a7530	68		pla		            PLA
.1a7531	28		plp		            PLP
.1a7532	e2 20		sep #$20	            SEP #$20
.1a7534	a5 0f		lda $0857	                LDA MARG1+2
.1a7536	c5 17		cmp $085f	                CMP MARG3+2
.1a7538	90 45		bcc $1a757f	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.1a753a	c2 20		rep #$20	            REP #$20
.1a753c	a5 0d		lda $0855	                LDA MARG1
.1a753e	c5 15		cmp $085d	                CMP MARG3
.1a7540	90 3d		bcc $1a757f	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.1a7542					copy_byte_down
.1a7542	e2 20		sep #$20	            SEP #$20
.1a7544	a7 0d		lda [$0855]	                LDA [MARG1]         ; Copy the byte
.1a7546	87 15		sta [$085d]	                STA [MARG3]
.1a7548	a5 0f		lda $0857	                LDA MARG1+2         ; Are the source's current and end bank bytes equal?
.1a754a	c5 13		cmp $085b	                CMP MARG2+2
.1a754c	d0 0b		bne $1a7559	                BNE inc_pointers    ; No: we're not done yet
.1a754e	c2 20		rep #$20	            REP #$20
.1a7550	a5 0d		lda $0855	                LDA MARG1           ; Are the rest of the bits equal?
.1a7552	c5 11		cmp $0859	                CMP MARG2
.1a7554	d0 03		bne $1a7559	                BNE inc_pointers    ; No: we're not done yet
.1a7556	4c dd 75	jmp $1a75dd	                JMP done            ; Yes: we've copied the last byte, exit
.1a7559					inc_pointers
.1a7559	c2 20		rep #$20	            REP #$20
.1a755b	18		clc		                CLC
.1a755c	a5 0d		lda $0855	                LDA MARG1
.1a755e	69 01 00	adc #$0001	                ADC #1
.1a7561	85 0d		sta $0855	                STA MARG1
.1a7563	e2 20		sep #$20	            SEP #$20
.1a7565	a5 0e		lda $0856	                LDA MARG1+1
.1a7567	69 00		adc #$00	                ADC #0
.1a7569	85 0e		sta $0856	                STA MARG1+1
.1a756b	c2 20		rep #$20	            REP #$20
.1a756d	18		clc		                CLC
.1a756e	a5 15		lda $085d	                LDA MARG3
.1a7570	69 01 00	adc #$0001	                ADC #1
.1a7573	85 15		sta $085d	                STA MARG3
.1a7575	e2 20		sep #$20	            SEP #$20
.1a7577	a5 16		lda $085e	                LDA MARG3+1
.1a7579	69 00		adc #$00	                ADC #0
.1a757b	85 16		sta $085e	                STA MARG3+1
.1a757d	80 c3		bra $1a7542	                BRA copy_byte_down  ; And copy that next byte over
.1a757f					copy_up
.1a757f	c2 20		rep #$20	            REP #$20
.1a7581	38		sec		                SEC
.1a7582	a5 11		lda $0859	                LDA MARG2
.1a7584	e5 0d		sbc $0855	                SBC MARG1
.1a7586	85 19		sta $0861	                STA MARG4
.1a7588	e2 20		sep #$20	            SEP #$20
.1a758a	a5 13		lda $085b	                LDA MARG2+2
.1a758c	e5 0f		sbc $0857	                SBC MARG1+2
.1a758e	85 1b		sta $0863	                STA MARG4+2
.1a7590	c2 20		rep #$20	            REP #$20
.1a7592	18		clc		                CLC
.1a7593	a5 19		lda $0861	                LDA MARG4
.1a7595	65 15		adc $085d	                ADC MARG3
.1a7597	85 15		sta $085d	                STA MARG3
.1a7599	e2 20		sep #$20	            SEP #$20
.1a759b	a5 1b		lda $0863	                LDA MARG4+2
.1a759d	65 17		adc $085f	                ADC MARG3+2
.1a759f	85 17		sta $085f	                STA MARG3+2
.1a75a1					copy_byte_up
.1a75a1	e2 20		sep #$20	            SEP #$20
.1a75a3	a7 11		lda [$0859]	                LDA [MARG2]
.1a75a5	87 15		sta [$085d]	                STA [MARG3]
.1a75a7	a5 13		lda $085b	                LDA MARG2+2         ; Are the source's current and start bank bytes equal?
.1a75a9	c5 0f		cmp $0857	                CMP MARG1+2
.1a75ab	d0 0a		bne $1a75b7	                BNE dec_pointers    ; No: we're not done yet
.1a75ad	c2 20		rep #$20	            REP #$20
.1a75af	a5 11		lda $0859	                LDA MARG2           ; Are the rest of the bits equal?
.1a75b1	c5 0d		cmp $0855	                CMP MARG1
.1a75b3	d0 02		bne $1a75b7	                BNE dec_pointers    ; No: we're not done yet
.1a75b5	80 26		bra $1a75dd	                BRA done            ; Yes: we've copied the last byte, exit
.1a75b7					dec_pointers
.1a75b7	c2 20		rep #$20	            REP #$20
.1a75b9	38		sec		                SEC
.1a75ba	a5 11		lda $0859	                LDA MARG2
.1a75bc	e9 01 00	sbc #$0001	                SBC #1
.1a75bf	85 11		sta $0859	                STA MARG2
.1a75c1	e2 20		sep #$20	            SEP #$20
.1a75c3	a5 12		lda $085a	                LDA MARG2+1
.1a75c5	e9 00		sbc #$00	                SBC #0
.1a75c7	85 12		sta $085a	                STA MARG2+1
.1a75c9	c2 20		rep #$20	            REP #$20
.1a75cb	38		sec		                SEC                 ; Decrement the current destination pointer (MARG3)
.1a75cc	a5 15		lda $085d	                LDA MARG3
.1a75ce	e9 01 00	sbc #$0001	                SBC #1
.1a75d1	85 15		sta $085d	                STA MARG3
.1a75d3	e2 20		sep #$20	            SEP #$20
.1a75d5	a5 16		lda $085e	                LDA MARG3+1
.1a75d7	e9 00		sbc #$00	                SBC #0
.1a75d9	85 16		sta $085e	                STA MARG3+1
.1a75db	80 c4		bra $1a75a1	                BRA copy_byte_up    ; And copy that next byte
.1a75dd					done
.1a75dd	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a75e0	2b		pld		                PLD
.1a75e1	28		plp		                PLP
.1a75e2	6b		rtl		                RTL
.1a75e3					IS_PRINTABLE
.1a75e3	08		php		                PHP
.1a75e4	e2 20		sep #$20	            SEP #$20
.1a75e6	c9 21		cmp #$21	                CMP #33
.1a75e8	90 0b		bcc $1a75f5	                BLT not_printable   ; 0 .. 31 are not printable
.1a75ea	c9 7f		cmp #$7f	                CMP #127
.1a75ec	90 04		bcc $1a75f2	                BLT printable       ; 32 .. 126 are printable
.1a75ee	c9 a0		cmp #$a0	                CMP #160
.1a75f0	90 03		bcc $1a75f5	                BLT not_printable   ; 127 .. 159 are not printable (assuming Latin-1)
.1a75f2	28		plp		printable       PLP
.1a75f3	38		sec		                SEC
.1a75f4	6b		rtl		                RTL
.1a75f5	28		plp		not_printable   PLP
.1a75f6	18		clc		                CLC
.1a75f7	6b		rtl		                RTL
=256					MMEMDUMPSIZE = 256  ; Default number of bytes to dump
=8					MMEMROWSIZE = 8    ; Number of bytes to dump per-row
.1a75f8					IMMEMORY
.1a75f8	08		php		                PHP
.1a75f9	8b		phb		                PHB
.1a75fa	0b		phd		                PHD
.1a75fb	08		php		            PHP
.1a75fc	c2 20		rep #$20	            REP #$20
.1a75fe	48		pha		            PHA
.1a75ff	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7602	5b		tcd		            TCD
.1a7603	68		pla		            PLA
.1a7604	28		plp		            PLP
.1a7605	e2 20		sep #$20	            SEP #$20
.1a7607	a9 00		lda #$00	                LDA #0              ; Clear the pagination line counter
.1a7609	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT
.1a760d	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a760f	c9 02		cmp #$02	                CMP #2
.1a7611	b0 16		bcs $1a7629	                BGE set_cursor      ; 2>= arguments? Use them as-is
.1a7613	c9 01		cmp #$01	                CMP #1
.1a7615	90 20		bcc $1a7637	                BLT no_args         ; No arguments passed? Use defaults
.1a7617	c2 20		rep #$20	            REP #$20
.1a7619	18		clc		                CLC
.1a761a	a5 0d		lda $0855	                LDA MARG1
.1a761c	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a761f	85 11		sta $0859	                STA MARG2
.1a7621	e2 20		sep #$20	            SEP #$20
.1a7623	a5 0f		lda $0857	                LDA MARG1+2
.1a7625	69 00		adc #$00	                ADC #0
.1a7627	85 13		sta $085b	                STA MARG2+2
.1a7629					set_cursor
.1a7629	c2 20		rep #$20	            REP #$20
.1a762b	a5 0d		lda $0855	                LDA MARG1
.1a762d	85 32		sta $087a	                STA MCURSOR
.1a762f	e2 20		sep #$20	            SEP #$20
.1a7631	a5 0f		lda $0857	                LDA MARG1+2
.1a7633	85 34		sta $087c	                STA MCURSOR+2
.1a7635	80 12		bra $1a7649	                BRA dump_line
.1a7637					no_args
.1a7637	c2 20		rep #$20	            REP #$20
.1a7639	18		clc		                CLC
.1a763a	a5 32		lda $087a	                LDA MCURSOR
.1a763c	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a763f	85 11		sta $0859	                STA MARG2
.1a7641	e2 20		sep #$20	            SEP #$20
.1a7643	a5 34		lda $087c	                LDA MCURSOR+2
.1a7645	69 00		adc #$00	                ADC #0
.1a7647	85 13		sta $085b	                STA MARG2+2
.1a7649					dump_line
.1a7649	e2 20		sep #$20	            SEP #$20
.1a764b	a0 00 00	ldy #$0000	                LDY #0
.1a764e	c2 20		rep #$20	            REP #$20
.1a7650	a5 32		lda $087a	                LDA MCURSOR             ; NOTE: the use of MARG4 here is a temporary
.1a7652	85 19		sta $0861	                STA MARG4               ; hack. the copy_loop instruction does not
.1a7654	e2 20		sep #$20	            SEP #$20
.1a7656	a5 34		lda $087c	                LDA MCURSOR+2
.1a7658	85 1b		sta $0863	                STA MARG4+2
.1a765a	e2 20		sep #$20	            SEP #$20
.1a765c	a7 19		lda [$0861]	copy_loop       LDA [MARG4]             ; TODO: Should be LDA [MCURSOR],Y, which doesn't seem to be working
.1a765e	22 e3 75 1a	jsl $1a75e3	                JSL IS_PRINTABLE        ; Is it printable?
.1a7662	b0 02		bcs $1a7666	                BCS buffer_char         ; Yes: go ahead and add it to the line buffer
.1a7664	a9 3f		lda #$3f	                LDA #'?'                ; No: replace it with dot
.1a7666	99 7e 08	sta $087e,y	buffer_char     STA #MLINEBUF,B,Y
.1a7669	c2 20		rep #$20	            REP #$20
.1a766b	18		clc		                CLC
.1a766c	a5 19		lda $0861	                LDA MARG4
.1a766e	69 01 00	adc #$0001	                ADC #1
.1a7671	85 19		sta $0861	                STA MARG4
.1a7673	e2 20		sep #$20	            SEP #$20
.1a7675	a5 1b		lda $0863	                LDA MARG4+2
.1a7677	69 00		adc #$00	                ADC #0
.1a7679	85 1b		sta $0863	                STA MARG4+2
.1a767b	c8		iny		                INY
.1a767c	c0 08 00	cpy #$0008	                CPY #MMEMROWSIZE
.1a767f	90 db		bcc $1a765c	                BLT copy_loop
.1a7681	a9 00		lda #$00	                LDA #0
.1a7683	99 7e 08	sta $087e,y	                STA #MLINEBUF,B,Y
.1a7686	a9 3e		lda #$3e	                LDA #'>'
.1a7688	20 18 00	jsr $1a0018	            JSR PRINTC
.1a768b	a9 20		lda #$20	                LDA #' '
.1a768d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7690	e2 20		sep #$20	            SEP #$20
.1a7692	a5 34		lda $087c	                LDA MCURSOR+2
.1a7694	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a7697	a9 3a		lda #$3a	                LDA #':'                ; then a colon
.1a7699	20 18 00	jsr $1a0018	            JSR PRINTC
.1a769c	c2 20		rep #$20	            REP #$20
.1a769e	a5 32		lda $087a	                LDA MCURSOR
.1a76a0	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a76a3	c2 20		rep #$20	            REP #$20
.1a76a5	a9 08 00	lda #$0008	                LDA #MMEMROWSIZE
.1a76a8	85 47		sta $088f	                STA MCOUNT
.1a76aa					prhex_loop
.1a76aa	e2 20		sep #$20	            SEP #$20
.1a76ac	a9 20		lda #$20	                LDA #' '
.1a76ae	20 18 00	jsr $1a0018	            JSR PRINTC
.1a76b1	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a76b3	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a76b6	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR        ; Point MCURSOR to the next byte
.1a76ba					check_line
.1a76ba	e2 20		sep #$20	            SEP #$20
.1a76bc	c6 47		dec $088f	                DEC MCOUNT              ; Count down the number of bytes on the row
.1a76be	d0 ea		bne $1a76aa	                BNE prhex_loop          ; If we're not at zero, keep looping over the bytes
.1a76c0	a9 20		lda #$20	                LDA #' '
.1a76c2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a76c5	a9 20		lda #$20	                LDA #' '
.1a76c7	20 18 00	jsr $1a0018	            JSR PRINTC
.1a76ca	08		php		            PHP
.1a76cb	e2 20		sep #$20	            SEP #$20
.1a76cd	48		pha		            PHA
.1a76ce	a9 00		lda #$00	            LDA #`MLINEBUF
.1a76d0	48		pha		            PHA
.1a76d1	ab		plb		            PLB
.1a76d2	68		pla		            PLA
.1a76d3	28		plp		            PLP
.1a76d4	a2 7e 08	ldx #$087e	                LDX #MLINEBUF
.1a76d7	20 64 04	jsr $1a0464	            JSR PRINTS
.1a76da	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a76dd	20 ee 03	jsr $1a03ee	            JSR PAGINATE
.1a76e0	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.1a76e2	c5 13		cmp $085b	                CMP MARG2+2
.1a76e4	90 0f		bcc $1a76f5	                BLT continue            ; No: continue
.1a76e6	c2 20		rep #$20	            REP #$20
.1a76e8	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.1a76ea	c5 11		cmp $0859	                CMP MARG2
.1a76ec	90 07		bcc $1a76f5	                BLT continue            ; Nope... keep going
.1a76ee					done
.1a76ee	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a76f1	2b		pld		                PLD
.1a76f2	ab		plb		                PLB
.1a76f3	28		plp		                PLP
.1a76f4	6b		rtl		                RTL
.1a76f5	4c 49 76	jmp $1a7649	continue        JMP dump_line
.1a76f8					M_COPY_ARGB
.1a76f8	08		php		                PHP
.1a76f9	8d 92 08	sta $0892	                STA MTEMP
.1a76fc	e2 20		sep #$20	            SEP #$20
.1a76fe	bd 00 00	lda $0000,x	loop            LDA #0,B,X
.1a7701	99 00 00	sta $0000,y	                STA #0,B,Y      ; Copy the byte
.1a7704	ad 92 08	lda $0892	                LDA MTEMP       ; Check the count of characters remaining
.1a7707	f0 0a		beq $1a7713	                BEQ done        ; If it's 0, we're done
.1a7709	c8		iny		                INY             ; Point to the next destination byte
.1a770a	e8		inx		                INX             ; Point to the next source byte (skip three bytes)
.1a770b	e8		inx		                INX
.1a770c	e8		inx		                INX
.1a770d	e8		inx		                INX
.1a770e	ce 92 08	dec $0892	                DEC MTEMP       ; Count down and see if we're done
.1a7711	80 eb		bra $1a76fe	                BRA loop
.1a7713	28		plp		done            PLP
.1a7714	6b		rtl		                RTL
.1a7715					IMMODIFY
.1a7715	08		php		                PHP
.1a7716	0b		phd		                PHD
.1a7717	8b		phb		                PHB
.1a7718	08		php		            PHP
.1a7719	c2 20		rep #$20	            REP #$20
.1a771b	48		pha		            PHA
.1a771c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a771f	5b		tcd		            TCD
.1a7720	68		pla		            PLA
.1a7721	28		plp		            PLP
.1a7722	08		php		            PHP
.1a7723	e2 20		sep #$20	            SEP #$20
.1a7725	48		pha		            PHA
.1a7726	a9 00		lda #$00	            LDA #0
.1a7728	48		pha		            PHA
.1a7729	ab		plb		            PLB
.1a772a	68		pla		            PLA
.1a772b	28		plp		            PLP
.1a772c	c2 30		rep #$30	            REP #$30
.1a772e	a5 0d		lda $0855	                LDA MARG1           ; Set MCURSOR to MARG1
.1a7730	85 32		sta $087a	                STA MCURSOR
.1a7732	a5 0f		lda $0857	                LDA MARG1+2
.1a7734	85 34		sta $087c	                STA MCURSOR+2
.1a7736	e2 20		sep #$20	            SEP #$20
.1a7738	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.1a773a	3a		dec a		                DEC A               ; (MARG_LEN - 1)
.1a773b	85 47		sta $088f	                STA MCOUNT
.1a773d	a2 59 08	ldx #$0859	                LDX #<>MARG2        ; Copy MCOUNT bytes from MARG2..MARG9
.1a7740	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF     ; to MLINEBUF
.1a7743	22 f8 76 1a	jsl $1a76f8	                JSL M_COPY_ARGB
.1a7747	a0 00 00	ldy #$0000	                LDY #0
.1a774a	b9 7e 08	lda $087e,y	loop            LDA MLINEBUF,Y      ; Copy the byte from the buffer
.1a774d	87 32		sta [$087a]	                STA [MCURSOR]       ; To the address indicated by MCURSOR
.1a774f	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR    ; Advance the cursor
.1a7753	c8		iny		                INY                 ; Go to the next buffered byte
.1a7754	c4 47		cpy $088f	                CPY MCOUNT          ; Did we just write the last one?
.1a7756	d0 f2		bne $1a774a	                BNE loop            ; No: continue writing
.1a7758	ab		plb		                PLB
.1a7759	2b		pld		                PLD
.1a775a	28		plp		                PLP
.1a775b	6b		rtl		                RTL
.1a775c					IMHUNT
.1a775c	08		php		                PHP
.1a775d	0b		phd		                PHD
.1a775e	8b		phb		                PHB
.1a775f	08		php		            PHP
.1a7760	c2 20		rep #$20	            REP #$20
.1a7762	48		pha		            PHA
.1a7763	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7766	5b		tcd		            TCD
.1a7767	68		pla		            PLA
.1a7768	28		plp		            PLP
.1a7769	08		php		            PHP
.1a776a	e2 20		sep #$20	            SEP #$20
.1a776c	48		pha		            PHA
.1a776d	a9 00		lda #$00	            LDA #0
.1a776f	48		pha		            PHA
.1a7770	ab		plb		            PLB
.1a7771	68		pla		            PLA
.1a7772	28		plp		            PLP
.1a7773	e2 20		sep #$20	            SEP #$20
.1a7775	c2 10		rep #$10	            REP #$10
.1a7777	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.1a7779	3a		dec a		                DEC A               ; (MARG_LEN - 2)
.1a777a	3a		dec a		                DEC A
.1a777b	85 47		sta $088f	                STA MCOUNT
.1a777d	a2 5d 08	ldx #$085d	                LDX #<>MARG3
.1a7780	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF
.1a7783	22 f8 76 1a	jsl $1a76f8	                JSL M_COPY_ARGB
.1a7787	c2 20		rep #$20	            REP #$20
.1a7789	a5 0d		lda $0855	                LDA MARG1           ; Copy starting address to MCURSOR
.1a778b	85 32		sta $087a	                STA MCURSOR
.1a778d	a5 0f		lda $0857	                LDA MARG1+2
.1a778f	85 34		sta $087c	                STA MCURSOR+2
.1a7791					outer_loop
.1a7791	c2 20		rep #$20	            REP #$20
.1a7793	a5 34		lda $087c	                LDA MCURSOR+2      ; If MCURSOR < MARG2, we're not done yet
.1a7795	c5 13		cmp $085b	                CMP MARG2+2
.1a7797	d0 06		bne $1a779f	                BNE not_done
.1a7799	a5 32		lda $087a	                LDA MCURSOR
.1a779b	c5 11		cmp $0859	                CMP MARG2
.1a779d	f0 2c		beq $1a77cb	                BEQ done            ; MCURSOR = MARG2: we're done
.1a779f					not_done
.1a779f	e2 20		sep #$20	            SEP #$20
.1a77a1	a0 00 00	ldy #$0000	                LDY #0
.1a77a4	b7 32		lda [$087a],y	cmp_loop        LDA [MCURSOR],Y     ; Get the byte from the memory to check
.1a77a6	d9 7e 08	cmp $087e,y	                CMP MLINEBUF,Y      ; Compare it against our pattern
.1a77a9	d0 1a		bne $1a77c5	                BNE advance         ; If not equal, we need to move on
.1a77ab	c8		iny		                INY                 ; Otherwise do we have more bytes to check?
.1a77ac	c4 47		cpy $088f	                CPY MCOUNT
.1a77ae	d0 f4		bne $1a77a4	                BNE cmp_loop        ; No: check more
.1a77b0	c2 20		rep #$20	            REP #$20
.1a77b2	a5 32		lda $087a	                LDA MCURSOR         ; Print the address
.1a77b4	85 4a		sta $0892	                STA MTEMP
.1a77b6	a5 34		lda $087c	                LDA MCURSOR+2
.1a77b8	85 4c		sta $0894	                STA MTEMP+2
.1a77ba	22 cf 81 1a	jsl $1a81cf	                JSL M_PR_ADDR
.1a77be	e2 20		sep #$20	            SEP #$20
.1a77c0	a9 20		lda #$20	                LDA #' '
.1a77c2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a77c5	22 25 87 1a	jsl $1a8725	advance         JSL M_INC_CURSOR    ; Move MCURSOR forward by one
.1a77c9	80 c6		bra $1a7791	                BRA outer_loop      ; And try to compare that to the pattern
.1a77cb					done
.1a77cb	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a77ce	ab		plb		                PLB
.1a77cf	2b		pld		                PLD
.1a77d0	28		plp		                PLP
.1a77d1	6b		rtl		                RTL
.1a77d2					IMJUMP
.1a77d2	08		php		            PHP
.1a77d3	c2 20		rep #$20	            REP #$20
.1a77d5	48		pha		            PHA
.1a77d6	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a77d9	5b		tcd		            TCD
.1a77da	68		pla		            PLA
.1a77db	28		plp		            PLP
.1a77dc	e2 20		sep #$20	            SEP #$20
.1a77de	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.1a77e0	f0 0e		beq $1a77f0	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.1a77e2	c2 30		rep #$30	            REP #$30
.1a77e4	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.1a77e6	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.1a77ea	a5 0f		lda $0857	                LDA MARG1+2
.1a77ec	8f 42 02 00	sta $000242	                STA @lCPUPBR
.1a77f0	af 46 02 00	lda $000246	MJUMPRESTORE    LDA @lCPUX          ; Restore X and Y
.1a77f4	aa		tax		                TAX
.1a77f5	af 48 02 00	lda $000248	                LDA @lCPUY
.1a77f9	a8		tay		                TAY
.1a77fa	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.1a77fe	1b		tcs		                TCS
.1a77ff	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.1a7803	5b		tcd		                TCD
.1a7804	e2 20		sep #$20	            SEP #$20
.1a7806	a9 1a		lda #$1a	                LDA #`MJUMPSTART
.1a7808	48		pha		                PHA
.1a7809	a9 78		lda #$78	                LDA #>MJUMPSTART
.1a780b	48		pha		                PHA
.1a780c	a9 12		lda #$12	                LDA #<MJUMPSTART
.1a780e	48		pha		                PHA
.1a780f	4c 49 78	jmp $1a7849	                JMP MGOSTACK        ; And push remaining registers and restart execution
.1a7812	ea		nop		MJUMPSTART      NOP                 ; RTL increments PC pulled from stack, NOP leaves space for that
.1a7813	5c 04 00 1a	jmp $1a0004	                JML MONITOR
.1a7817					IMGO
.1a7817	08		php		            PHP
.1a7818	c2 20		rep #$20	            REP #$20
.1a781a	48		pha		            PHA
.1a781b	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a781e	5b		tcd		            TCD
.1a781f	68		pla		            PLA
.1a7820	28		plp		            PLP
.1a7821	e2 20		sep #$20	            SEP #$20
.1a7823	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.1a7825	f0 c9		beq $1a77f0	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.1a7827	c2 30		rep #$30	            REP #$30
.1a7829	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.1a782b	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.1a782f	a5 0f		lda $0857	                LDA MARG1+2
.1a7831	8f 42 02 00	sta $000242	                STA @lCPUPBR
.1a7835	af 46 02 00	lda $000246	MGORESTORE      LDA @lCPUX          ; Restore X and Y
.1a7839	aa		tax		                TAX
.1a783a	af 48 02 00	lda $000248	                LDA @lCPUY
.1a783e	a8		tay		                TAY
.1a783f	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.1a7843	1b		tcs		                TCS
.1a7844	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.1a7848	5b		tcd		                TCD
.1a7849					MGOSTACK
.1a7849	e2 20		sep #$20	            SEP #$20
.1a784b	af 4e 02 00	lda $00024e	                LDA @lCPUDBR        ; Restore the data bank register
.1a784f	48		pha		                PHA
.1a7850	ab		plb		                PLB
.1a7851	a9 5c		lda #$5c	                LDA #$5C            ; Save the JSL opcode
.1a7853	8f a2 08 00	sta $0008a2	                STA @lMJUMPINST
.1a7857	af 42 02 00	lda $000242	                LDA @lCPUPBR        ; Write PBR
.1a785b	8f a5 08 00	sta $0008a5	                STA @lMJUMPADDR+2
.1a785f	af 41 02 00	lda $000241	                LDA @lCPUPC+1       ; Write PCH
.1a7863	8f a4 08 00	sta $0008a4	                STA @lMJUMPADDR+1
.1a7867	af 40 02 00	lda $000240	                LDA @lCPUPC         ; Write PCL
.1a786b	8f a3 08 00	sta $0008a3	                STA @lMJUMPADDR
.1a786f	af 4f 02 00	lda $00024f	                LDA @lCPUFLAGS      ; Push processor status
.1a7873	48		pha		                PHA
.1a7874	c2 20		rep #$20	            REP #$20
.1a7876	af 44 02 00	lda $000244	                LDA @lCPUA          ; Restore A
.1a787a	28		plp		                PLP                 ; And the status register
.1a787b	5c a2 08 00	jmp $0008a2	                JML MJUMPINST       ; And jump to the target address
.1a787f					IMCOMPARE
.1a787f	08		php		                PHP
.1a7880	0b		phd		                PHD
.1a7881	8b		phb		                PHB
.1a7882	08		php		            PHP
.1a7883	e2 20		sep #$20	            SEP #$20
.1a7885	48		pha		            PHA
.1a7886	a9 1a		lda #$1a	            LDA #`MERRARGS
.1a7888	48		pha		            PHA
.1a7889	ab		plb		            PLB
.1a788a	68		pla		            PLA
.1a788b	28		plp		            PLP
.1a788c	08		php		            PHP
.1a788d	c2 20		rep #$20	            REP #$20
.1a788f	48		pha		            PHA
.1a7890	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a7893	5b		tcd		            TCD
.1a7894	68		pla		            PLA
.1a7895	28		plp		            PLP
.1a7896	c2 10		rep #$10	            REP #$10
.1a7898	e2 20		sep #$20	            SEP #$20
.1a789a	a5 31		lda $0879	                LDA MARG_LEN                ; Check the number of arguments provided
.1a789c	c9 02		cmp #$02	                CMP #2
.1a789e	f0 0c		beq $1a78ac	                BEQ default_len             ; If 2: set MCOUNT to default of 1
.1a78a0	c9 03		cmp #$03	                CMP #3
.1a78a2	d0 11		bne $1a78b5	                BNE bad_arguments           ; Otherwise, if not 3: print an error
.1a78a4	c2 20		rep #$20	            REP #$20
.1a78a6	a5 15		lda $085d	                LDA MARG3                   ; If 3: set MCOUNT to MARG3
.1a78a8	85 47		sta $088f	                STA MCOUNT
.1a78aa	80 11		bra $1a78bd	                BRA compare
.1a78ac					default_len
.1a78ac	c2 20		rep #$20	            REP #$20
.1a78ae	a9 01 00	lda #$0001	                LDA #1                      ; No length was provided, set MCOUNT to 1
.1a78b1	85 47		sta $088f	                STA MCOUNT
.1a78b3	80 08		bra $1a78bd	                BRA compare
.1a78b5	a2 f1 89	ldx #$89f1	bad_arguments   LDX #<>MERRARGS             ; The wrong number of arguments was provided
.1a78b8	20 64 04	jsr $1a0464	            JSR PRINTS
.1a78bb	80 35		bra $1a78f2	                BRA done
.1a78bd	a5 0d		lda $0855	compare         LDA MARG1                   ; Set MTEMP to MARG1
.1a78bf	85 4a		sta $0892	                STA MTEMP
.1a78c1	a5 0f		lda $0857	                LDA MARG1+2
.1a78c3	85 4c		sta $0894	                STA MTEMP+2
.1a78c5	a0 00 00	ldy #$0000	                LDY #0
.1a78c8					loop
.1a78c8	e2 20		sep #$20	            SEP #$20
.1a78ca	a7 4a		lda [$0892]	                LDA [MTEMP]                 ; Compare the byte at MTEMP
.1a78cc	d7 11		cmp [$0859],y	                CMP [MARG2],Y               ; To the Yth byte from MARG2
.1a78ce	f0 09		beq $1a78d9	                BEQ continue                ; If they're the same, keep going
.1a78d0	22 cf 81 1a	jsl $1a81cf	mismatch        JSL M_PR_ADDR               ; If they're different, print MTEMP
.1a78d4	a9 20		lda #$20	                LDA #' '
.1a78d6	20 18 00	jsr $1a0018	            JSR PRINTC
.1a78d9					continue
.1a78d9	c2 20		rep #$20	            REP #$20
.1a78db	18		clc		                CLC                         ; Either way, increment MTEMP
.1a78dc	a5 4a		lda $0892	                LDA MTEMP
.1a78de	69 01 00	adc #$0001	                ADC #1
.1a78e1	85 4a		sta $0892	                STA MTEMP
.1a78e3	a5 4c		lda $0894	                LDA MTEMP+2
.1a78e5	69 00 00	adc #$0000	                ADC #0
.1a78e8	85 4c		sta $0894	                STA MTEMP+2
.1a78ea	c8		iny		                INY                         ; Increment Y
.1a78eb	c4 47		cpy $088f	                CPY MCOUNT                  ; Try again unless we've checked MCOUNT bytes
.1a78ed	d0 d9		bne $1a78c8	                BNE loop
.1a78ef	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a78f2					done
.1a78f2	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a78f5	ab		plb		                PLB
.1a78f6	2b		pld		                PLD
.1a78f7	28		plp		                PLP
.1a78f8	6b		rtl		                RTL
.1a78f9					IMRMODIFY
.1a78f9	08		php		                PHP
.1a78fa	0b		phd		                PHD
.1a78fb	8b		phb		                PHB
.1a78fc	08		php		            PHP
.1a78fd	e2 20		sep #$20	            SEP #$20
.1a78ff	48		pha		            PHA
.1a7900	a9 00		lda #$00	            LDA #0
.1a7902	48		pha		            PHA
.1a7903	ab		plb		            PLB
.1a7904	68		pla		            PLA
.1a7905	28		plp		            PLP
.1a7906	08		php		            PHP
.1a7907	c2 20		rep #$20	            REP #$20
.1a7909	48		pha		            PHA
.1a790a	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a790d	5b		tcd		            TCD
.1a790e	68		pla		            PLA
.1a790f	28		plp		            PLP
.1a7910	e2 20		sep #$20	            SEP #$20
.1a7912	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a7914	f0 4f		beq $1a7965	                BEQ done            ; 0? Just quit
.1a7916	a6 0d		ldx $0855	                LDX MARG1           ; Set the PC and PBR
.1a7918	8e 40 02	stx $0240	                STX #CPUPC,B
.1a791b	a6 0f		ldx $0857	                LDX MARG1+2
.1a791d	8e 42 02	stx $0242	                STX #CPUPBR,B
.1a7920	c9 01		cmp #$01	                CMP #1              ; Check the number of arguments
.1a7922	f0 41		beq $1a7965	                BEQ done            ; 1? Just quit
.1a7924	a6 11		ldx $0859	                LDX MARG2           ; Set A
.1a7926	8e 44 02	stx $0244	                STX #CPUA,B
.1a7929	c9 02		cmp #$02	                CMP #2              ; Check the number of arguments
.1a792b	f0 38		beq $1a7965	                BEQ done            ; 2? Just quit
.1a792d	a6 15		ldx $085d	                LDX MARG3           ; Set X
.1a792f	8e 46 02	stx $0246	                STX #CPUX,B
.1a7932	c9 03		cmp #$03	                CMP #3              ; Check the number of arguments
.1a7934	f0 2f		beq $1a7965	                BEQ done            ; 3? Just quit
.1a7936	a6 19		ldx $0861	                LDX MARG4           ; Set Y
.1a7938	8e 48 02	stx $0248	                STX #CPUY,B
.1a793b	c9 04		cmp #$04	                CMP #4              ; Check the number of arguments
.1a793d	f0 26		beq $1a7965	                BEQ done            ; 4? Just quit
.1a793f	a6 1d		ldx $0865	                LDX MARG5           ; Set SP
.1a7941	8e 4a 02	stx $024a	                STX #CPUSTACK,B
.1a7944	c9 05		cmp #$05	                CMP #5              ; Check the number of arguments
.1a7946	f0 1d		beq $1a7965	                BEQ done            ; 5? Just quit
.1a7948	e2 10		sep #$10	            SEP #$10
.1a794a	a6 21		ldx $0869	                LDX MARG6           ; Set DBR
.1a794c	8e 4e 02	stx $024e	                STX #CPUDBR,B
.1a794f	c9 06		cmp #$06	                CMP #6              ; Check the number of arguments
.1a7951	f0 12		beq $1a7965	                BEQ done            ; 6? Just quit
.1a7953	c2 10		rep #$10	            REP #$10
.1a7955	a6 25		ldx $086d	                LDX MARG7           ; Set DP
.1a7957	8e 4c 02	stx $024c	                STX #CPUDP,B
.1a795a	c9 07		cmp #$07	                CMP #7              ; Check the number of arguments
.1a795c	f0 07		beq $1a7965	                BEQ done            ; 7? Just quit
.1a795e	e2 10		sep #$10	            SEP #$10
.1a7960	a6 29		ldx $0871	                LDX MARG8           ; Set flags
.1a7962	8e 4f 02	stx $024f	                STX #CPUFLAGS,B
.1a7965	ab		plb		done            PLB
.1a7966	2b		pld		                PLD
.1a7967	28		plp		                PLP
.1a7968	6b		rtl		                RTL
.1a7969					IMEXECUTE
.1a7969	08		php		                PHP
.1a796a	0b		phd		                PHD
.1a796b	8b		phb		                PHB
.1a796c	08		php		            PHP
.1a796d	c2 20		rep #$20	            REP #$20
.1a796f	48		pha		            PHA
.1a7970	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7973	5b		tcd		            TCD
.1a7974	68		pla		            PLA
.1a7975	28		plp		            PLP
.1a7976	e2 20		sep #$20	            SEP #$20
.1a7978	c2 10		rep #$10	            REP #$10
.1a797a	a2 00 00	ldx #$0000	                LDX #0
.1a797d	bf 5e 8a 1a	lda $1a8a5e,x	loop            LDA @lMCOMMANDS,X
.1a7981	f0 18		beq $1a799b	                BEQ done
.1a7983	c7 08		cmp [$0850]	                CMP [MCMD]
.1a7985	f0 03		beq $1a798a	                BEQ found
.1a7987	e8		inx		                INX
.1a7988	80 f3		bra $1a797d	                BRA loop
.1a798a					found
.1a798a	c2 20		rep #$20	            REP #$20
.1a798c	8a		txa		                TXA
.1a798d	0a		asl a		                ASL A
.1a798e	aa		tax		                TAX
.1a798f	bf 9f 79 1a	lda $1a799f,x	                LDA dispatch,X
.1a7993	8f 2f 08 00	sta $00082f	                STA @lJMP16PTR
.1a7997	22 c3 79 1a	jsl $1a79c3	                JSL MDOCMD
.1a799b	ab		plb		done            PLB
.1a799c	2b		pld		                PLD
.1a799d	28		plp		                PLP
.1a799e	6b		rtl		                RTL
>1a799f	3f 70				dispatch        .word <>MASSEMBLE
>1a79a1	47 70				                .word <>MCOMPARE
>1a79a3	4b 70				                .word <>MDISASSEMBLE
>1a79a5	4f 70				                .word <>MFILL
>1a79a7	53 70				                .word <>MGO
>1a79a9	57 70				                .word <>MJUMP
>1a79ab	5b 70				                .word <>MHUNT
>1a79ad	5f 70				                .word <>MLOAD
>1a79af	63 70				                .word <>MMEMORY
>1a79b1	67 70				                .word <>MREGISTERS
>1a79b3	43 70				                .word <>MRMODIFY
>1a79b5	6b 70				                .word <>MSAVE
>1a79b7	6f 70				                .word <>MTRANSFER
>1a79b9	73 70				                .word <>MVERIFY
>1a79bb	35 74				                .word <>IMWIDTH
>1a79bd	77 70				                .word <>MEXIT
>1a79bf	7b 70				                .word <>MMODIFY
>1a79c1	ae 70				                .word <>IMHELP
.1a79c3					MDOCMD
.1a79c3	6c 2f 08	jmp ($082f)	                JMP (JMP16PTR)

;******  Processing file: src\assembler.s

=0					ADDR_DP_IND_X = 0       ; (dd,X)
=1					ADDR_DP = 1             ; dd
=2					ADDR_IMM = 2            ; #dd
=3					ADDR_ABS = 3            ; dddd
=4					ADDR_DP_IND_Y = 4       ; (dd),Y
=5					ADDR_DP_X = 5           ; dd,X
=6					ADDR_ABS_Y = 6          ; dddd,Y
=7					ADDR_ABS_X = 7          ; dddd,X
=8					ADDR_ACC = 8            ; A
=9					ADDR_SP_R = 9           ; #d,S
=10					ADDR_DP_LONG = 10       ; [dd]
=11					ADDR_ABS_LONG = 11      ; dddddd
=12					ADDR_SP_R_Y = 12        ; #dd,S,Y
=13					ADDR_DP_Y_LONG = 13     ; [dd],Y
=14					ADDR_ABS_X_LONG = 14    ; dddddd,X
=15					ADDR_DP_IND = 15        ; (dd)
=16					ADDR_ABS_X_ID = 16      ; (dddd,X)
=17					ADDR_DP_Y = 17          ; dd,Y
=18					ADDR_PC_REL = 18        ; PC relative
=19					ADDR_IMPLIED = 19       ; Implied (no operand)
=20					ADDR_XYC = 20           ; #dd, #dd
=21					ADDR_ABS_IND = 21       ; (dddd)
=22					ADDR_PC_REL_LONG = 22   ; PC relative ()
=23					ADDR_ABS_IND_LONG = 23  ; [dddd]
=$80					OP_M_EFFECT = $80       ; Flag to indicate instruction is modified by M
=$40					OP_X_EFFECT = $40       ; Flag to indicate instruction is modified by X
.1a79c6					IMASSEMBLE
.1a79c6	08		php		                PHP
.1a79c7	8b		phb		                PHB
.1a79c8	0b		phd		                PHD
.1a79c9	08		php		            PHP
.1a79ca	c2 20		rep #$20	            REP #$20
.1a79cc	48		pha		            PHA
.1a79cd	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a79d0	5b		tcd		            TCD
.1a79d1	68		pla		            PLA
.1a79d2	28		plp		            PLP
.1a79d3	e2 20		sep #$20	            SEP #$20
.1a79d5	a5 31		lda $0879	                LDA MARG_LEN            ; Do we have at least 2 arguments?
.1a79d7	c9 02		cmp #$02	                CMP #2
.1a79d9	b0 03		bcs $1a79de	                BGE has_args            ; Yes: try to assemble the line
.1a79db	4c 6c 7b	jmp $1a7b6c	                JMP done                ; No: just return
.1a79de					has_args
.1a79de	c2 20		rep #$20	            REP #$20
.1a79e0	a5 0d		lda $0855	                LDA MARG1               ; Set the monitor cursor to the address
.1a79e2	85 32		sta $087a	                STA MCURSOR
.1a79e4	a5 0f		lda $0857	                LDA MARG1+2
.1a79e6	85 34		sta $087c	                STA MCURSOR+2
.1a79e8	c2 20		rep #$20	            REP #$20
.1a79ea	22 6e 7d 1a	jsl $1a7d6e	                JSL AS_FIND_MNEMO       ; Find the address of the mnemonic
.1a79ee	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a79f1	f0 10		beq $1a7a03	                BEQ bad_mnemonic        ; If not found, print bad mnemonic error message
.1a79f3	85 54		sta $089c	                STA MMNEMONIC
.1a79f5	e2 20		sep #$20	            SEP #$20
.1a79f7	a5 31		lda $0879	                LDA MARG_LEN            ; Check the number of arguments passed
.1a79f9	c9 03		cmp #$03	                CMP #3                  ; Were all three arguments provided?
.1a79fb	f0 36		beq $1a7a33	                BEQ get_operand         ; Yes: parse the operand
.1a79fd	a9 13		lda #$13	                LDA #ADDR_IMPLIED       ; No: assume address mode is implied
.1a79ff	85 4f		sta $0897	                STA MADDR_MODE
.1a7a01	80 4c		bra $1a7a4f	                BRA get_opcode
.1a7a03					bad_mnemonic
.1a7a03	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a7a06	08		php		            PHP
.1a7a07	e2 20		sep #$20	            SEP #$20
.1a7a09	48		pha		            PHA
.1a7a0a	a9 1a		lda #$1a	            LDA #`MERRBADMNEMO
.1a7a0c	48		pha		            PHA
.1a7a0d	ab		plb		            PLB
.1a7a0e	68		pla		            PLA
.1a7a0f	28		plp		            PLP
.1a7a10	c2 10		rep #$10	            REP #$10
.1a7a12	a2 a3 7b	ldx #$7ba3	                LDX #<>MERRBADMNEMO
.1a7a15	20 64 04	jsr $1a0464	            JSR PRINTS
.1a7a18	4c 6c 7b	jmp $1a7b6c	                JMP done
.1a7a1b					bad_operand
.1a7a1b	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a7a1e	08		php		            PHP
.1a7a1f	e2 20		sep #$20	            SEP #$20
.1a7a21	48		pha		            PHA
.1a7a22	a9 1a		lda #$1a	            LDA #`MERRBADOPER
.1a7a24	48		pha		            PHA
.1a7a25	ab		plb		            PLB
.1a7a26	68		pla		            PLA
.1a7a27	28		plp		            PLP
.1a7a28	c2 10		rep #$10	            REP #$10
.1a7a2a	a2 b2 7b	ldx #$7bb2	                LDX #<>MERRBADOPER
.1a7a2d	20 64 04	jsr $1a0464	            JSR PRINTS
.1a7a30	4c 6c 7b	jmp $1a7b6c	                JMP done
.1a7a33					get_operand
.1a7a33	e2 20		sep #$20	            SEP #$20
.1a7a35	22 a4 7d 1a	jsl $1a7da4	                JSL AS_FIND_MODE        ; Find the addressing mode of the operand
.1a7a39	c9 ff		cmp #$ff	compare         CMP #$FF
.1a7a3b	f0 de		beq $1a7a1b	                BEQ bad_operand         ; If not found, print bad operand error message
.1a7a3d	85 4f		sta $0897	                STA MADDR_MODE
.1a7a3f	c9 03		cmp #$03	                CMP #ADDR_ABS           ; If mode is absolute or absolute long...
.1a7a41	f0 62		beq $1a7aa5	                BEQ check_for_pcrel     ; Check to see if the mnemonic is one of the branches
.1a7a43	c9 0b		cmp #$0b	                CMP #ADDR_ABS_LONG
.1a7a45	f0 5e		beq $1a7aa5	                BEQ check_for_pcrel
.1a7a47	c9 13		cmp #$13	                CMP #ADDR_IMPLIED       ; If mode is implied or accumulator, get the opcode
.1a7a49	f0 04		beq $1a7a4f	                BEQ get_opcode
.1a7a4b	c9 08		cmp #$08	                CMP #ADDR_ACC
.1a7a4d	f0 00		beq $1a7a4f	                BEQ get_opcode
.1a7a4f	22 9c 7c 1a	jsl $1a7c9c	get_opcode      JSL AS_FIND_OPCODE      ; Find the opcode matching the two
.1a7a53	b0 03		bcs $1a7a58	                BCS save_opcode
.1a7a55	4c 35 7b	jmp $1a7b35	                JMP bad_mode            ; If opcode not found, print bad address mode error message
.1a7a58	87 32		sta [$087a]	save_opcode     STA [MCURSOR]           ; Write the opcode to the address
.1a7a5a	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR        ; And point to the next byte
.1a7a5e	08		php		            PHP
.1a7a5f	e2 20		sep #$20	            SEP #$20
.1a7a61	48		pha		            PHA
.1a7a62	a9 00		lda #$00	            LDA #0
.1a7a64	48		pha		            PHA
.1a7a65	ab		plb		            PLB
.1a7a66	68		pla		            PLA
.1a7a67	28		plp		            PLP
.1a7a68	c2 20		rep #$20	            REP #$20
.1a7a6a	a5 32		lda $087a	                LDA MCURSOR             ; Make MTEMPPTR a pointer to the machine code we're assembling
.1a7a6c	85 56		sta $089e	                STA MTEMPPTR
.1a7a6e	a5 34		lda $087c	                LDA MCURSOR+2
.1a7a70	85 58		sta $08a0	                STA MTEMPPTR+2
.1a7a72	e2 20		sep #$20	            SEP #$20
.1a7a74	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check the address mode again
.1a7a76	c9 12		cmp #$12	                CMP #ADDR_PC_REL        ; If it's PC relative
.1a7a78	f0 6c		beq $1a7ae6	                BEQ compute_rel         ; Convert the address to an offset
.1a7a7a	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.1a7a7c	f0 68		beq $1a7ae6	                BEQ compute_rel
.1a7a7e	c9 14		cmp #$14	                CMP #ADDR_XYC           ; MVP/MVN addressing mode?
.1a7a80	f0 7c		beq $1a7afe	                BEQ emit_2
.1a7a82	29 3f		and #$3f	                AND #%00111111          ; Filter out the mode bits
.1a7a84	c9 02		cmp #$02	                CMP #ADDR_IMM           ; Is it immediate?
.1a7a86	d0 03		bne $1a7a8b	                BNE fixed_length        ; Yes: emit it as an immediate (variable length)
.1a7a88	4c 63 7b	jmp $1a7b63	                JMP emit_imm
.1a7a8b					fixed_length
.1a7a8b	c2 20		rep #$20	            REP #$20
.1a7a8d	29 ff 00	and #$00ff	                AND #$00FF
.1a7a90	aa		tax		                TAX
.1a7a91	e2 20		sep #$20	            SEP #$20
.1a7a93	bf 6b 86 1a	lda $1a866b,x	get_length      LDA ADDR_LENGTH,X       ; Get the number of bytes in the addressing mode
.1a7a97	c9 03		cmp #$03	                CMP #$03
.1a7a99	f0 57		beq $1a7af2	                BEQ emit_3
.1a7a9b	c9 02		cmp #$02	                CMP #$02
.1a7a9d	f0 5f		beq $1a7afe	                BEQ emit_2
.1a7a9f	c9 01		cmp #$01	                CMP #$01
.1a7aa1	f0 67		beq $1a7b0a	                BEQ emit_1
.1a7aa3	80 71		bra $1a7b16	                BRA next_line
.1a7aa5					check_for_pcrel
.1a7aa5	c2 20		rep #$20	            REP #$20
.1a7aa7	a5 54		lda $089c	                LDA MMNEMONIC
.1a7aa9	c9 e3 82	cmp #$82e3	                CMP #<>MN_BRA
.1a7aac	f0 26		beq $1a7ad4	                BEQ is_pcrel
.1a7aae	c9 47 83	cmp #$8347	                CMP #<>MN_BRL
.1a7ab1	f0 2a		beq $1a7add	                BEQ is_pcrel_long
.1a7ab3	c9 c7 82	cmp #$82c7	                CMP #<>MN_BCC
.1a7ab6	f0 1c		beq $1a7ad4	                BEQ is_pcrel
.1a7ab8	c9 cb 82	cmp #$82cb	                CMP #<>MN_BCS
.1a7abb	f0 17		beq $1a7ad4	                BEQ is_pcrel
.1a7abd	c9 d3 82	cmp #$82d3	                CMP #<>MN_BEQ
.1a7ac0	f0 12		beq $1a7ad4	                BEQ is_pcrel
.1a7ac2	c9 bb 82	cmp #$82bb	                CMP #<>MN_BMI
.1a7ac5	f0 0d		beq $1a7ad4	                BEQ is_pcrel
.1a7ac7	c9 cf 82	cmp #$82cf	                CMP #<>MN_BNE
.1a7aca	f0 08		beq $1a7ad4	                BEQ is_pcrel
.1a7acc	c9 b7 82	cmp #$82b7	                CMP #<>MN_BPL
.1a7acf	f0 03		beq $1a7ad4	                BEQ is_pcrel
.1a7ad1	4c 4f 7a	jmp $1a7a4f	                JMP get_opcode
.1a7ad4					is_pcrel
.1a7ad4	e2 20		sep #$20	            SEP #$20
.1a7ad6	a9 12		lda #$12	                LDA #ADDR_PC_REL
.1a7ad8	85 4f		sta $0897	                STA MADDR_MODE
.1a7ada	4c 4f 7a	jmp $1a7a4f	                JMP get_opcode
.1a7add					is_pcrel_long
.1a7add	e2 20		sep #$20	            SEP #$20
.1a7adf	a9 16		lda #$16	                LDA #ADDR_PC_REL_LONG
.1a7ae1	85 4f		sta $0897	                STA MADDR_MODE
.1a7ae3	4c 4f 7a	jmp $1a7a4f	                JMP get_opcode
.1a7ae6	22 df 7b 1a	jsl $1a7bdf	compute_rel     JSL AS_PC_OFFSET        ; Try to compute the offset
.1a7aea	90 60		bcc $1a7b4c	                BCC bad_offset          ; If failed, it's a bad offset operand
.1a7aec	c9 02		cmp #$02	emit_rel        CMP #$02                ; If the offset is two bytes
.1a7aee	f0 0e		beq $1a7afe	                BEQ emit_2              ; Emit those two bytes
.1a7af0	80 18		bra $1a7b0a	                BRA emit_1              ; Otherwise emit just the one
.1a7af2	a0 02 00	ldy #$0002	emit_3          LDY #2                  ; Write bank byte of operand
.1a7af5	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a7af8	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a7afa	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a7afe	a0 01 00	ldy #$0001	emit_2          LDY #1                  ; Write high byte of operand
.1a7b01	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a7b04	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a7b06	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a7b0a	a0 00 00	ldy #$0000	emit_1          LDY #0                  ; Write low byte of operand
.1a7b0d	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a7b10	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a7b12	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a7b16					next_line
.1a7b16	e2 20		sep #$20	            SEP #$20
.1a7b18	a9 41		lda #$41	                LDA #'A'
.1a7b1a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b1d	a9 20		lda #$20	                LDA #' '
.1a7b1f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b22	a6 32		ldx $087a	                LDX MCURSOR
.1a7b24	86 4a		stx $0892	                STX MTEMP
.1a7b26	a6 34		ldx $087c	                LDX MCURSOR+2
.1a7b28	86 4c		stx $0894	                STX MTEMP+2
.1a7b2a	22 cf 81 1a	jsl $1a81cf	                JSL M_PR_ADDR
.1a7b2e	a9 20		lda #$20	                LDA #' '
.1a7b30	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b33	80 37		bra $1a7b6c	                BRA done
.1a7b35					bad_mode
.1a7b35	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a7b38	08		php		            PHP
.1a7b39	e2 20		sep #$20	            SEP #$20
.1a7b3b	48		pha		            PHA
.1a7b3c	a9 1a		lda #$1a	            LDA #`MERRBADMODE
.1a7b3e	48		pha		            PHA
.1a7b3f	ab		plb		            PLB
.1a7b40	68		pla		            PLA
.1a7b41	28		plp		            PLP
.1a7b42	c2 10		rep #$10	            REP #$10
.1a7b44	a2 70 7b	ldx #$7b70	                LDX #<>MERRBADMODE
.1a7b47	20 64 04	jsr $1a0464	            JSR PRINTS
.1a7b4a	80 20		bra $1a7b6c	                BRA done
.1a7b4c					bad_offset
.1a7b4c	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a7b4f	08		php		            PHP
.1a7b50	e2 20		sep #$20	            SEP #$20
.1a7b52	48		pha		            PHA
.1a7b53	a9 1a		lda #$1a	            LDA #`MERRBADOFFSET
.1a7b55	48		pha		            PHA
.1a7b56	ab		plb		            PLB
.1a7b57	68		pla		            PLA
.1a7b58	28		plp		            PLP
.1a7b59	c2 10		rep #$10	            REP #$10
.1a7b5b	a2 c0 7b	ldx #$7bc0	                LDX #<>MERRBADOFFSET
.1a7b5e	20 64 04	jsr $1a0464	            JSR PRINTS
.1a7b61	80 09		bra $1a7b6c	                BRA done
.1a7b63	a5 4f		lda $0897	emit_imm        LDA MADDR_MODE          ; Check to see if long immediate was used
.1a7b65	29 c0		and #$c0	                AND #%11000000
.1a7b67	d0 95		bne $1a7afe	                BNE emit_2              ; Yes: emit two bytes
.1a7b69	4c 0a 7b	jmp $1a7b0a	                JMP emit_1              ; No: emit one byte
.1a7b6c	2b		pld		done            PLD
.1a7b6d	ab		plb		                PLB
.1a7b6e	28		plp		                PLP
.1a7b6f	6b		rtl		                RTL
>1a7b70	41 64 64 72 65 73 73 69		MERRBADMODE     .null "Addressing mode not defined for that instruction.",CHAR_CR
>1a7b78	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>1a7b88	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>1a7b98	74 72 75 63 74 69 6f 6e 2e 0d 00
>1a7ba3	42 61 64 20 6d 6e 65 6d		MERRBADMNEMO    .null "Bad mnemonic.",CHAR_CR
>1a7bab	6f 6e 69 63 2e 0d 00
>1a7bb2	42 61 64 20 6f 70 65 72		MERRBADOPER     .null "Bad operand.",CHAR_CR
>1a7bba	61 6e 64 2e 0d 00
>1a7bc0	52 65 6c 61 74 69 76 65		MERRBADOFFSET   .null "Relative offset is too large.",CHAR_CR
>1a7bc8	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>1a7bd8	61 72 67 65 2e 0d 00
.1a7bdf					AS_PC_OFFSET
.1a7bdf	08		php		                PHP
.1a7be0	0b		phd		                PHD
.1a7be1	08		php		            PHP
.1a7be2	c2 20		rep #$20	            REP #$20
.1a7be4	48		pha		            PHA
.1a7be5	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7be8	5b		tcd		            TCD
.1a7be9	68		pla		            PLA
.1a7bea	28		plp		            PLP
.1a7beb	e2 20		sep #$20	            SEP #$20
.1a7bed	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check to see if it 1 byte or 2 byte relative
.1a7bef	c9 12		cmp #$12	                CMP #ADDR_PC_REL
.1a7bf1	f0 0a		beq $1a7bfd	                BEQ is_short
.1a7bf3	c2 20		rep #$20	            REP #$20
.1a7bf5	18		clc		                CLC                     ; Branch is long. Compute where MCURSOR will be
.1a7bf6	a5 32		lda $087a	                LDA MCURSOR             ; with two branch offset bytes
.1a7bf8	69 02 00	adc #$0002	                ADC #2
.1a7bfb	80 08		bra $1a7c05	                BRA compute_cursor
.1a7bfd					is_short
.1a7bfd	c2 20		rep #$20	            REP #$20
.1a7bff	18		clc		                CLC                     ; Branch is short. Computer where MCURSOR will be
.1a7c00	a5 32		lda $087a	                LDA MCURSOR             ; with one branch offset byte
.1a7c02	69 01 00	adc #$0001	                ADC #1
.1a7c05	85 4a		sta $0892	compute_cursor  STA MTEMP
.1a7c07	a5 34		lda $087c	                LDA MCURSOR+2
.1a7c09	69 00 00	adc #$0000	                ADC #0
.1a7c0c	85 4c		sta $0894	                STA MTEMP+2
.1a7c0e	38		sec		                SEC                     ; MPARSEDNUM = MPARSEDNUM - MTEMP (MCURSOR after the instruction)
.1a7c0f	a5 50		lda $0898	                LDA MPARSEDNUM
.1a7c11	e5 4a		sbc $0892	                SBC MTEMP
.1a7c13	85 50		sta $0898	                STA MPARSEDNUM
.1a7c15	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a7c17	e5 4c		sbc $0894	                SBC MTEMP+2
.1a7c19	85 52		sta $089a	                STA MPARSEDNUM+2
.1a7c1b	e2 20		sep #$20	            SEP #$20
.1a7c1d	a5 4f		lda $0897	                LDA MADDR_MODE
.1a7c1f	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.1a7c21	f0 1e		beq $1a7c41	                BEQ check_long
.1a7c23	a5 50		lda $0898	                LDA MPARSEDNUM          ; Short offset... check if it's negative
.1a7c25	30 0c		bmi $1a7c33	                BMI check_short_neg
.1a7c27	a5 51		lda $0899	                LDA MPARSEDNUM+1        ; Positive short offset... upper two bytes
.1a7c29	d0 2a		bne $1a7c55	                BNE failure             ; Must be 0 or it's an overflow
.1a7c2b	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a7c2d	d0 26		bne $1a7c55	                BNE failure
.1a7c2f	a9 01		lda #$01	                LDA #1                  ; Short offset is 1 byte
.1a7c31	80 26		bra $1a7c59	                BRA success
.1a7c33	a5 51		lda $0899	check_short_neg LDA MPARSEDNUM+1        ; Negative short offset... upper two bytes
.1a7c35	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's an  overflow
.1a7c37	d0 1c		bne $1a7c55	                BNE failure
.1a7c39	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a7c3b	c9 ff		cmp #$ff	                CMP #$FF
.1a7c3d	d0 16		bne $1a7c55	                BNE failure
.1a7c3f	80 18		bra $1a7c59	                BRA success
.1a7c41	a5 51		lda $0899	check_long      LDA MPARSEDNUM+1        ; Long offset... check if it's negative
.1a7c43	30 06		bmi $1a7c4b	                BMI check_long_neg
.1a7c45	a5 52		lda $089a	                LDA MPARSEDNUM+2        ; Positive long offset... upper byte
.1a7c47	d0 0c		bne $1a7c55	                BNE failure             ; Must be 0 or it's an overflow
.1a7c49	80 0e		bra $1a7c59	                BRA success
.1a7c4b	a5 52		lda $089a	check_long_neg  LDA MPARSEDNUM+2        ; Negative offset... upper two bytes
.1a7c4d	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's and overflow
.1a7c4f	d0 04		bne $1a7c55	                BNE failure
.1a7c51	a9 02		lda #$02	                LDA #2                  ; Long offset is 2 bytes
.1a7c53	80 04		bra $1a7c59	                BRA success
.1a7c55	2b		pld		failure         PLD
.1a7c56	28		plp		                PLP
.1a7c57	18		clc		                CLC
.1a7c58	6b		rtl		                RTL
.1a7c59	2b		pld		success         PLD
.1a7c5a	28		plp		                PLP
.1a7c5b	38		sec		                SEC
.1a7c5c	6b		rtl		                RTL
.1a7c5d					AS_SHIFT_HEX
.1a7c5d	08		php		                PHP
.1a7c5e	0b		phd		                PHD
.1a7c5f	c2 10		rep #$10	            REP #$10
.1a7c61	da		phx		                PHX
.1a7c62	08		php		            PHP
.1a7c63	c2 20		rep #$20	            REP #$20
.1a7c65	48		pha		            PHA
.1a7c66	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7c69	5b		tcd		            TCD
.1a7c6a	68		pla		            PLA
.1a7c6b	28		plp		            PLP
.1a7c6c	e2 20		sep #$20	            SEP #$20
.1a7c6e	a2 00 00	ldx #$0000	                LDX #0
.1a7c71	df 00 d0 1a	cmp $1ad000,x	seek_loop       CMP @lHEXDIGITS,X   ; Check the passed character against the hex digits
.1a7c75	f0 08		beq $1a7c7f	                BEQ found
.1a7c77	e8		inx		                INX                 ; Go to the next hex digit
.1a7c78	e0 10 00	cpx #$0010	                CPX #$10            ; Are we out of digits?
.1a7c7b	f0 1b		beq $1a7c98	                BEQ done            ; Yes... just return
.1a7c7d	80 f2		bra $1a7c71	                BRA seek_loop
.1a7c7f					found
.1a7c7f	c2 20		rep #$20	            REP #$20
.1a7c81	06 50		asl $0898	                ASL MPARSEDNUM
.1a7c83	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7c85	06 50		asl $0898	                ASL MPARSEDNUM
.1a7c87	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7c89	06 50		asl $0898	                ASL MPARSEDNUM
.1a7c8b	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7c8d	06 50		asl $0898	                ASL MPARSEDNUM
.1a7c8f	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7c91	e2 20		sep #$20	            SEP #$20
.1a7c93	8a		txa		                TXA
.1a7c94	05 50		ora $0898	                ORA MPARSEDNUM
.1a7c96	85 50		sta $0898	                STA MPARSEDNUM
.1a7c98	fa		plx		done            PLX
.1a7c99	2b		pld		                PLD
.1a7c9a	28		plp		                PLP
.1a7c9b	6b		rtl		                RTL
.1a7c9c					AS_FIND_OPCODE
.1a7c9c	0b		phd		                PHD
.1a7c9d	8b		phb		                PHB
.1a7c9e	08		php		            PHP
.1a7c9f	c2 20		rep #$20	            REP #$20
.1a7ca1	48		pha		            PHA
.1a7ca2	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7ca5	5b		tcd		            TCD
.1a7ca6	68		pla		            PLA
.1a7ca7	28		plp		            PLP
.1a7ca8	08		php		            PHP
.1a7ca9	e2 20		sep #$20	            SEP #$20
.1a7cab	48		pha		            PHA
.1a7cac	a9 1a		lda #$1a	            LDA #`MNEMONIC_TAB
.1a7cae	48		pha		            PHA
.1a7caf	ab		plb		            PLB
.1a7cb0	68		pla		            PLA
.1a7cb1	28		plp		            PLP
.1a7cb2	e2 20		sep #$20	            SEP #$20
.1a7cb4	a5 4f		lda $0897	                LDA MADDR_MODE
.1a7cb6	29 3f		and #$3f	                AND #%00111111
.1a7cb8	85 4a		sta $0892	                STA MTEMP
.1a7cba	c2 30		rep #$30	            REP #$30
.1a7cbc	a2 00 00	ldx #$0000	                LDX #0
.1a7cbf	a0 00 00	ldy #$0000	                LDY #0
.1a7cc2	bd 69 83	lda $1a8369,x	mnemonic_loop   LDA MNEMONIC_TAB,X      ; Get the mnemonic from the opcode table
.1a7cc5	f0 1b		beq $1a7ce2	                BEQ not_found           ; If it's 0, we did not find the mnemonic
.1a7cc7	c5 54		cmp $089c	                CMP MMNEMONIC           ; Does it match the passed mnemonic?
.1a7cc9	d0 0d		bne $1a7cd8	                BNE next_opcode         ; No: go to the next opcode
.1a7ccb					check_mode
.1a7ccb	e2 20		sep #$20	            SEP #$20
.1a7ccd	b9 6b 85	lda $1a856b,y	                LDA ADDRESS_TAB,Y       ; Get the corresponding address mode
.1a7cd0	29 3f		and #$3f	                AND #%00111111          ; Filter out effect bits
.1a7cd2	c5 4a		cmp $0892	                CMP MTEMP
.1a7cd4	f0 07		beq $1a7cdd	                BEQ found               ; Yes: we found the opcode
.1a7cd6	c2 20		rep #$20	            REP #$20
.1a7cd8	e8		inx		next_opcode     INX                     ; Point to the next mnemonic in the table
.1a7cd9	e8		inx		                INX
.1a7cda	c8		iny		                INY
.1a7cdb	80 e5		bra $1a7cc2	                BRA mnemonic_loop       ; And check it
.1a7cdd	98		tya		found           TYA
.1a7cde	38		sec		                SEC                     ; Set carry to show success
.1a7cdf	ab		plb		                PLB
.1a7ce0	2b		pld		                PLD
.1a7ce1	6b		rtl		                RTL
.1a7ce2	18		clc		not_found       CLC                     ; Clear carry to show failure
.1a7ce3	ab		plb		                PLB
.1a7ce4	2b		pld		                PLD
.1a7ce5	6b		rtl		                RTL
.1a7ce6					AS_STR_MATCH
.1a7ce6	08		php		                PHP
.1a7ce7	0b		phd		                PHD
.1a7ce8	08		php		            PHP
.1a7ce9	c2 20		rep #$20	            REP #$20
.1a7ceb	48		pha		            PHA
.1a7cec	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7cef	5b		tcd		            TCD
.1a7cf0	68		pla		            PLA
.1a7cf1	28		plp		            PLP
.1a7cf2	e2 20		sep #$20	            SEP #$20
.1a7cf4	c2 10		rep #$10	            REP #$10
.1a7cf6	a0 00 00	ldy #$0000	                LDY #0
.1a7cf9	64 50		stz $0898	                STZ MPARSEDNUM      ; Set parsed number to 0 in anticipation of
.1a7cfb	64 52		stz $089a	                STZ MPARSEDNUM+2    ; hex digits in the pattern
.1a7cfd	b7 03		lda [$084b],y	match_loop      LDA [MCMP_TEXT],Y   ; Get the pattern character
.1a7cff	f0 11		beq $1a7d12	                BEQ nul_check       ; If at end of pattern, check for end of test string
.1a7d01	c9 64		cmp #$64	                CMP #'d'            ; Is it a digit?
.1a7d03	f0 19		beq $1a7d1e	                BEQ check_digit     ; Yes: do special check for hex digit
.1a7d05	48		pha		compare         PHA
.1a7d06	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.1a7d08	85 4a		sta $0892	                STA MTEMP
.1a7d0a	68		pla		                PLA
.1a7d0b	c5 4a		cmp $0892	                CMP MTEMP           ; Does it match the character to test?
.1a7d0d	d0 0b		bne $1a7d1a	                BNE return_false    ; No: return fail
.1a7d0f	c8		iny		next_char       INY                 ; Yes: test the next character
.1a7d10	80 eb		bra $1a7cfd	                BRA match_loop
.1a7d12	b7 36		lda [$087e],y	nul_check       LDA [MLINEBUF],Y    ; Check to see that we're at the end of the test string
.1a7d14	d0 04		bne $1a7d1a	                BNE return_false    ; If not: return false
.1a7d16	2b		pld		return_true     PLD
.1a7d17	28		plp		                PLP                 ; Return true
.1a7d18	38		sec		                SEC
.1a7d19	6b		rtl		                RTL
.1a7d1a	2b		pld		return_false    PLD
.1a7d1b	28		plp		                PLP                 ; Return false
.1a7d1c	18		clc		                CLC
.1a7d1d	6b		rtl		                RTL
.1a7d1e					check_digit
.1a7d1e	e2 20		sep #$20	            SEP #$20
.1a7d20	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.1a7d22	c9 3a		cmp #$3a	                CMP #'9'+1
.1a7d24	b0 04		bcs $1a7d2a	                BCS check_AF
.1a7d26	c9 30		cmp #$30	                CMP #'0'
.1a7d28	b0 14		bcs $1a7d3e	                BCS shift_digit     ; character is in [0..9]
.1a7d2a	c9 47		cmp #$47	check_AF        CMP #'F'+1
.1a7d2c	b0 04		bcs $1a7d32	                BCS check_lc        ; check lower case
.1a7d2e	c9 41		cmp #$41	                CMP #'A'
.1a7d30	b0 0c		bcs $1a7d3e	                BCS shift_digit     ; character is in [A..F]
.1a7d32	c9 67		cmp #$67	check_lc        CMP #'f'+1
.1a7d34	b0 e4		bcs $1a7d1a	                BCS return_false    ; check lower case
.1a7d36	c9 61		cmp #$61	                CMP #'a'
.1a7d38	b0 02		bcs $1a7d3c	                BCS to_upcase       ; character is in [A..F]
.1a7d3a	80 de		bra $1a7d1a	                BRA return_false    ; No match found... return false
.1a7d3c	29 df		and #$df	to_upcase       AND #%11011111      ; Convert lower case to upper case
.1a7d3e	22 5d 7c 1a	jsl $1a7c5d	shift_digit     JSL AS_SHIFT_HEX    ; Shift the digit into MPARSEDNUM
.1a7d42	80 cb		bra $1a7d0f	                BRA next_char       ; And check the next character
.1a7d44					AS_MCMP_NEXT
.1a7d44	0b		phd		                PHD
.1a7d45	08		php		            PHP
.1a7d46	c2 20		rep #$20	            REP #$20
.1a7d48	48		pha		            PHA
.1a7d49	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7d4c	5b		tcd		            TCD
.1a7d4d	68		pla		            PLA
.1a7d4e	28		plp		            PLP
.1a7d4f	a0 00 00	ldy #$0000	                LDY #0
.1a7d52	e2 20		sep #$20	            SEP #$20
.1a7d54	b7 03		lda [$084b],y	loop            LDA [MCMP_TEXT],Y   ; Check to see if we have gotten to the NUL
.1a7d56	f0 03		beq $1a7d5b	                BEQ found_nul
.1a7d58	c8		iny		                INY
.1a7d59	80 f9		bra $1a7d54	                BRA loop
.1a7d5b					found_nul
.1a7d5b	c2 20		rep #$20	            REP #$20
.1a7d5d	c8		iny		                INY                 ; Got to NUL... point to next byte
.1a7d5e	5a		phy		                PHY
.1a7d5f	68		pla		                PLA                 ; And add that index to MCMP_TEXT pointer
.1a7d60	18		clc		                CLC
.1a7d61	65 03		adc $084b	                ADC MCMP_TEXT
.1a7d63	85 03		sta $084b	                STA MCMP_TEXT
.1a7d65	a5 05		lda $084d	                LDA MCMP_TEXT+2
.1a7d67	69 00 00	adc #$0000	                ADC #0
.1a7d6a	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7d6c	2b		pld		                PLD
.1a7d6d	6b		rtl		                RTL
.1a7d6e					AS_FIND_MNEMO
.1a7d6e	0b		phd		                PHD
.1a7d6f	08		php		            PHP
.1a7d70	c2 20		rep #$20	            REP #$20
.1a7d72	48		pha		            PHA
.1a7d73	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7d76	5b		tcd		            TCD
.1a7d77	68		pla		            PLA
.1a7d78	28		plp		            PLP
.1a7d79	c2 20		rep #$20	            REP #$20
.1a7d7b	a5 11		lda $0859	                LDA MARG2                   ; Point MLINEBUF to the text
.1a7d7d	85 36		sta $087e	                STA MLINEBUF
.1a7d7f	a5 13		lda $085b	                LDA MARG2+2
.1a7d81	85 38		sta $0880	                STA MLINEBUF+2
.1a7d83	a9 f7 81	lda #$81f7	                LDA #<>MNEMONICS_TAB        ; Point to the first mnemonic
.1a7d86	85 03		sta $084b	                STA MCMP_TEXT
.1a7d88	a9 1a 00	lda #$001a	                LDA #`MNEMONICS_TAB
.1a7d8b	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7d8d	22 e6 7c 1a	jsl $1a7ce6	match_loop      JSL AS_STR_MATCH            ; Check to see if the text matches the mnemonic
.1a7d91	b0 0d		bcs $1a7da0	                BCS found_mnemonic          ; If so: return that we found it
.1a7d93	22 44 7d 1a	jsl $1a7d44	                JSL AS_MCMP_NEXT            ; Point to the next mnemonic
.1a7d97	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Check to see if it's NUL
.1a7d99	d0 f2		bne $1a7d8d	                BNE match_loop              ; If not, check this next mnemonic
.1a7d9b	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Otherwise, return -1
.1a7d9e	80 02		bra $1a7da2	                BRA done
.1a7da0	a5 03		lda $084b	found_mnemonic  LDA MCMP_TEXT               ; Found it: return the address
.1a7da2	2b		pld		done            PLD
.1a7da3	6b		rtl		                RTL
.1a7da4					AS_FIND_MODE
.1a7da4	08		php		                PHP
.1a7da5	0b		phd		                PHD
.1a7da6	08		php		            PHP
.1a7da7	c2 20		rep #$20	            REP #$20
.1a7da9	48		pha		            PHA
.1a7daa	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7dad	5b		tcd		            TCD
.1a7dae	68		pla		            PLA
.1a7daf	28		plp		            PLP
.1a7db0	c2 30		rep #$30	            REP #$30
.1a7db2	a5 15		lda $085d	                LDA MARG3                   ; Point MLINEBUF to the operand
.1a7db4	85 36		sta $087e	                STA MLINEBUF
.1a7db6	a5 17		lda $085f	                LDA MARG3+2
.1a7db8	85 38		sta $0880	                STA MLINEBUF+2
.1a7dba	a9 83 86	lda #$8683	                LDA #<>ADDR_PATTERNS        ; Point to the first address mode pattern to check
.1a7dbd	85 03		sta $084b	                STA MCMP_TEXT
.1a7dbf	a9 1a 00	lda #$001a	                LDA #`ADDR_PATTERNS
.1a7dc2	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7dc4	22 e6 7c 1a	jsl $1a7ce6	match_loop      JSL AS_STR_MATCH            ; Check to see if the pattern matches the operand
.1a7dc8	b0 22		bcs $1a7dec	                BCS is_match                ; Yes: Find address mode code
.1a7dca	22 44 7d 1a	jsl $1a7d44	                JSL AS_MCMP_NEXT            ; Point to the address mode
.1a7dce	c2 20		rep #$20	            REP #$20
.1a7dd0	18		clc		                CLC                         ; Point to the first byte of the next pattern
.1a7dd1	a5 03		lda $084b	                LDA MCMP_TEXT
.1a7dd3	69 01 00	adc #$0001	                ADC #1
.1a7dd6	85 03		sta $084b	                STA MCMP_TEXT
.1a7dd8	a5 05		lda $084d	                LDA MCMP_TEXT+2
.1a7dda	69 00 00	adc #$0000	                ADC #0
.1a7ddd	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7ddf	e2 20		sep #$20	            SEP #$20
.1a7de1	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Is the first byte 0?
.1a7de3	d0 df		bne $1a7dc4	                BNE match_loop              ; No: check this next pattern
.1a7de5	c2 20		rep #$20	            REP #$20
.1a7de7	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Yes: we didn't find a matching pattern, return -1
.1a7dea	80 0d		bra $1a7df9	                BRA done
.1a7dec	22 44 7d 1a	jsl $1a7d44	is_match        JSL AS_MCMP_NEXT            ; Point to the address mode
.1a7df0	e2 20		sep #$20	            SEP #$20
.1a7df2	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Get the corresponding address mode code (a byte)
.1a7df4	c2 20		rep #$20	            REP #$20
.1a7df6	29 ff 00	and #$00ff	                AND #$00FF
.1a7df9	2b		pld		done            PLD
.1a7dfa	28		plp		                PLP
.1a7dfb	6b		rtl		                RTL
.1a7dfc					IMDISASSEMBLE
.1a7dfc	08		php		                PHP
.1a7dfd	8b		phb		                PHB
.1a7dfe	0b		phd		                PHD
.1a7dff	08		php		            PHP
.1a7e00	c2 20		rep #$20	            REP #$20
.1a7e02	48		pha		            PHA
.1a7e03	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7e06	5b		tcd		            TCD
.1a7e07	68		pla		            PLA
.1a7e08	28		plp		            PLP
.1a7e09	e2 20		sep #$20	            SEP #$20
.1a7e0b	a9 00		lda #$00	                LDA #0
.1a7e0d	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT     ; Clear the pagination line counter
.1a7e11	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a7e13	c9 02		cmp #$02	                CMP #2
.1a7e15	b0 16		bcs $1a7e2d	                BGE set_cursor      ; 2>= arguments? Use them as-is
.1a7e17	c9 01		cmp #$01	                CMP #1
.1a7e19	90 20		bcc $1a7e3b	                BLT no_args         ; No arguments passed? Use defaults
.1a7e1b	c2 20		rep #$20	            REP #$20
.1a7e1d	18		clc		                CLC
.1a7e1e	a5 0d		lda $0855	                LDA MARG1
.1a7e20	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a7e23	85 11		sta $0859	                STA MARG2
.1a7e25	e2 20		sep #$20	            SEP #$20
.1a7e27	a5 0f		lda $0857	                LDA MARG1+2
.1a7e29	69 00		adc #$00	                ADC #0
.1a7e2b	85 13		sta $085b	                STA MARG2+2
.1a7e2d					set_cursor
.1a7e2d	c2 20		rep #$20	            REP #$20
.1a7e2f	a5 0d		lda $0855	                LDA MARG1
.1a7e31	85 32		sta $087a	                STA MCURSOR
.1a7e33	e2 20		sep #$20	            SEP #$20
.1a7e35	a5 0f		lda $0857	                LDA MARG1+2
.1a7e37	85 34		sta $087c	                STA MCURSOR+2
.1a7e39	80 12		bra $1a7e4d	                BRA dasm_loop
.1a7e3b					no_args
.1a7e3b	c2 20		rep #$20	            REP #$20
.1a7e3d	18		clc		                CLC
.1a7e3e	a5 32		lda $087a	                LDA MCURSOR
.1a7e40	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a7e43	85 11		sta $0859	                STA MARG2
.1a7e45	e2 20		sep #$20	            SEP #$20
.1a7e47	a5 34		lda $087c	                LDA MCURSOR+2
.1a7e49	69 00		adc #$00	                ADC #0
.1a7e4b	85 13		sta $085b	                STA MARG2+2
.1a7e4d	22 68 7e 1a	jsl $1a7e68	dasm_loop       JSL DS_PR_LINE
.1a7e51	e2 20		sep #$20	            SEP #$20
.1a7e53	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.1a7e55	c5 13		cmp $085b	                CMP MARG2+2
.1a7e57	90 f4		bcc $1a7e4d	                BLT dasm_loop           ; No: continue
.1a7e59	c2 20		rep #$20	            REP #$20
.1a7e5b	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.1a7e5d	c5 11		cmp $0859	                CMP MARG2
.1a7e5f	90 ec		bcc $1a7e4d	                BLT dasm_loop           ; Nope... keep going
.1a7e61					done
.1a7e61	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a7e64	2b		pld		                PLD
.1a7e65	ab		plb		                PLB
.1a7e66	28		plp		                PLP
.1a7e67	6b		rtl		                RTL
.1a7e68					DS_PR_LINE
.1a7e68	08		php		                PHP
.1a7e69	0b		phd		                PHD
.1a7e6a	e2 20		sep #$20	            SEP #$20
.1a7e6c	a9 41		lda #$41	                LDA #'A'
.1a7e6e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e71	a9 20		lda #$20	                LDA #' '
.1a7e73	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e76	08		php		            PHP
.1a7e77	c2 20		rep #$20	            REP #$20
.1a7e79	48		pha		            PHA
.1a7e7a	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a7e7d	5b		tcd		            TCD
.1a7e7e	68		pla		            PLA
.1a7e7f	28		plp		            PLP
.1a7e80	c2 20		rep #$20	            REP #$20
.1a7e82	a5 00		lda $087a	                LDA MCURSOR
.1a7e84	85 18		sta $0892	                STA MTEMP
.1a7e86	e2 20		sep #$20	            SEP #$20
.1a7e88	a5 02		lda $087c	                LDA MCURSOR+2
.1a7e8a	85 1a		sta $0894	                STA MTEMP+2
.1a7e8c	22 cf 81 1a	jsl $1a81cf	                JSL M_PR_ADDR
.1a7e90	a9 20		lda #$20	                LDA #' '
.1a7e92	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7e95	c2 20		rep #$20	            REP #$20
.1a7e97	18		clc		                CLC
.1a7e98	a5 00		lda $087a	                LDA MCURSOR
.1a7e9a	69 01 00	adc #$0001	                ADC #1
.1a7e9d	85 18		sta $0892	                STA MTEMP
.1a7e9f	e2 20		sep #$20	            SEP #$20
.1a7ea1	a5 02		lda $087c	                LDA MCURSOR+2
.1a7ea3	69 00		adc #$00	                ADC #0
.1a7ea5	85 1a		sta $0894	                STA MTEMP+2
.1a7ea7	e2 20		sep #$20	            SEP #$20
.1a7ea9	c2 10		rep #$10	            REP #$10
.1a7eab	a7 00		lda [$087a]	                LDA [MCURSOR]           ; Get the mnemonic
.1a7ead	c9 c2		cmp #$c2	                CMP #$C2                ; Is it REP?
.1a7eaf	d0 0b		bne $1a7ebc	                BNE check_sep           ; No: check to see if it is SEP
.1a7eb1	48		pha		handle_rep      PHA
.1a7eb2	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.1a7eb4	49 ff		eor #$ff	                EOR #$FF                ; Invert the bits
.1a7eb6	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Mask off the bits in the CPUSTAT
.1a7eba	80 0b		bra $1a7ec7	                BRA save_stat
.1a7ebc	c9 e2		cmp #$e2	check_sep       CMP #$E2                ; Is it SEP?
.1a7ebe	d0 0c		bne $1a7ecc	                BNE get_op_index        ; No: process the instruction regularly
.1a7ec0	48		pha		handle_sep      PHA
.1a7ec1	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.1a7ec3	0f 96 08 00	ora $000896	                ORA @lMCPUSTAT          ; Activate the bits in the CPUSTAT
.1a7ec7	8f 96 08 00	sta $000896	save_stat       STA @lMCPUSTAT          ; And save it back
.1a7ecb	68		pla		                PLA
.1a7ecc					get_op_index
.1a7ecc	c2 20		rep #$20	            REP #$20
.1a7ece	29 ff 00	and #$00ff	                AND #$00FF
.1a7ed1	0a		asl a		                ASL A
.1a7ed2	aa		tax		                TAX                     ; Get the index into the mnemonic lookup table
.1a7ed3	bf 69 83 1a	lda $1a8369,x	                LDA @lMNEMONIC_TAB,X    ; Get the mnemonic
.1a7ed7	aa		tax		                TAX
.1a7ed8	22 49 81 1a	jsl $1a8149	                JSL DS_PR_MNEMONIC      ; And print it
.1a7edc	e2 20		sep #$20	            SEP #$20
.1a7ede	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a7ee0	aa		tax		                TAX
.1a7ee1	bf 6b 85 1a	lda $1a856b,x	pr_operand      LDA @lADDRESS_TAB,X     ; Get the addressing mode for the instruction
.1a7ee5	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR        ; Advance the cursor to the next byte
.1a7ee9	22 f6 7e 1a	jsl $1a7ef6	                JSL DS_PR_OPERAND       ; And print the correct operand
.1a7eed	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a7ef0	20 ee 03	jsr $1a03ee	            JSR PAGINATE
.1a7ef3	2b		pld		                PLD
.1a7ef4	28		plp		                PLP
.1a7ef5	6b		rtl		                RTL
.1a7ef6					DS_PR_OPERAND
.1a7ef6	08		php		                PHP
.1a7ef7	e2 20		sep #$20	            SEP #$20
.1a7ef9	48		pha		                PHA             ; Save the address mode so we can get to the M and X flags
.1a7efa	29 3f		and #$3f	                AND #%00111111  ; Filter out the mode flags
.1a7efc	0a		asl a		                ASL A           ; Compute the index to the table
.1a7efd	c2 10		rep #$10	            REP #$10
.1a7eff	aa		tax		                TAX
.1a7f00	68		pla		                PLA             ; Restore A
.1a7f01	7c 04 7f	jmp ($1a7f04,x)	                JMP (dispatch,X)
>1a7f04	34 7f				dispatch        .word <>is_dp_ind_x
>1a7f06	4f 7f				                .word <>is_dp
>1a7f08	56 7f				                .word <>is_imm
>1a7f0a	7b 7f				                .word <>is_abs
>1a7f0c	82 7f				                .word <>is_dp_ind_y
>1a7f0e	9d 7f				                .word <>is_dp_x
>1a7f10	bf 7f				                .word <>is_abs_y
>1a7f12	d0 7f				                .word <>is_abs_x
>1a7f14	0d 80				                .word <>is_accumulator
>1a7f16	15 80				                .word <>is_stack_r
>1a7f18	26 80				                .word <>is_dp_long
>1a7f1a	37 80				                .word <>is_abs_long
>1a7f1c	3e 80				                .word <>is_stack_r_y
>1a7f1e	63 80				                .word <>is_dp_y_long
>1a7f20	90 80				                .word <>is_abs_x_long
>1a7f22	fc 7f				                .word <>is_dp_ind
>1a7f24	e1 7f				                .word <>is_abs_x_id
>1a7f26	ae 7f				                .word <>is_dp_y
>1a7f28	83 80				                .word <>is_pc_rel
>1a7f2a	8d 80				                .word <>is_implied
>1a7f2c	a1 80				                .word <>is_xyc
>1a7f2e	d0 80				                .word <>is_abs_ind
>1a7f30	7e 80				                .word <>is_pc_rel_long
>1a7f32	e1 80				                .word <>is_abs_ind_long
.1a7f34	a9 28		lda #$28	is_dp_ind_x     LDA #'('                ; Print (dd,X)
.1a7f36	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f39	22 f8 80 1a	jsl $1a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.1a7f3d	a9 2c		lda #$2c	                LDA #','
.1a7f3f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f42	a9 58		lda #$58	                LDA #'X'
.1a7f44	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f47	a9 29		lda #$29	                LDA #')'
.1a7f49	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f4c	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7f4f	22 f8 80 1a	jsl $1a80f8	is_dp           JSL DS_PR_OPERAND1      ; Print dd
.1a7f53	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7f56					is_imm
.1a7f56	e2 20		sep #$20	            SEP #$20
.1a7f58	48		pha		                PHA
.1a7f59	a9 23		lda #$23	                LDA #'#'
.1a7f5b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f5e	68		pla		                PLA
.1a7f5f	29 c0		and #$c0	                AND #%11000000          ; Filter so we just look at the mode bits
.1a7f61	c9 00		cmp #$00	                CMP #$00                ; Are any set to check?
.1a7f63	f0 0f		beq $1a7f74	                BEQ is_imm_short        ; No: treat it as a short always
.1a7f65	4a		lsr a		                LSR A                   ; Move the flag bits right by 2 to match
.1a7f66	4a		lsr a		                LSR A                   ; the positions of the bits in the CPU status register
.1a7f67	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Otherwise, filter the mode bit we care about
.1a7f6b	d0 07		bne $1a7f74	                BNE is_imm_short        ; If it is set, immediate operation is short
.1a7f6d	22 02 81 1a	jsl $1a8102	                JSL DS_PR_OPERAND2      ; Print dddd
.1a7f71	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7f74	22 f8 80 1a	jsl $1a80f8	is_imm_short    JSL DS_PR_OPERAND1      ; Print dd
.1a7f78	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7f7b	22 02 81 1a	jsl $1a8102	is_abs          JSL DS_PR_OPERAND2      ; Print dddd
.1a7f7f	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7f82	a9 28		lda #$28	is_dp_ind_y     LDA #'('                ; Print (dd),Y
.1a7f84	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f87	22 f8 80 1a	jsl $1a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.1a7f8b	a9 29		lda #$29	                LDA #')'
.1a7f8d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f90	a9 2c		lda #$2c	                LDA #','
.1a7f92	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f95	a9 59		lda #$59	                LDA #'Y'
.1a7f97	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7f9a	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7f9d	22 f8 80 1a	jsl $1a80f8	is_dp_x         JSL DS_PR_OPERAND1      ; Print dd,X
.1a7fa1	a9 2c		lda #$2c	                LDA #','
.1a7fa3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fa6	a9 58		lda #$58	                LDA #'X'
.1a7fa8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fab	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7fae	22 f8 80 1a	jsl $1a80f8	is_dp_y         JSL DS_PR_OPERAND1      ; Print dd,Y
.1a7fb2	a9 2c		lda #$2c	                LDA #','
.1a7fb4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fb7	a9 59		lda #$59	                LDA #'Y'
.1a7fb9	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fbc	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7fbf	22 02 81 1a	jsl $1a8102	is_abs_y        JSL DS_PR_OPERAND2      ; Print dddd,Y
.1a7fc3	a9 2c		lda #$2c	                LDA #','
.1a7fc5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fc8	a9 59		lda #$59	                LDA #'Y'
.1a7fca	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fcd	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7fd0	22 02 81 1a	jsl $1a8102	is_abs_x        JSL DS_PR_OPERAND2      ; Print dddd,X
.1a7fd4	a9 2c		lda #$2c	                LDA #','
.1a7fd6	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fd9	a9 58		lda #$58	                LDA #'X'
.1a7fdb	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fde	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7fe1	a9 28		lda #$28	is_abs_x_id     LDA #'('
.1a7fe3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fe6	22 02 81 1a	jsl $1a8102	                JSL DS_PR_OPERAND2      ; Print (dddd,X)
.1a7fea	a9 2c		lda #$2c	                LDA #','
.1a7fec	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7fef	a9 58		lda #$58	                LDA #'X'
.1a7ff1	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ff4	a9 29		lda #$29	                LDA #')'
.1a7ff6	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ff9	4c f2 80	jmp $1a80f2	                JMP done_1
.1a7ffc	a9 28		lda #$28	is_dp_ind       LDA #'('
.1a7ffe	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8001	22 f8 80 1a	jsl $1a80f8	                JSL DS_PR_OPERAND1      ; Print (dd)
.1a8005	a9 29		lda #$29	                LDA #')'
.1a8007	20 18 00	jsr $1a0018	            JSR PRINTC
.1a800a	4c f2 80	jmp $1a80f2	                JMP done_1
.1a800d	a9 41		lda #$41	is_accumulator  LDA #'A'                ; Print A
.1a800f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8012	4c f6 80	jmp $1a80f6	                JMP done
.1a8015	22 f8 80 1a	jsl $1a80f8	is_stack_r      JSL DS_PR_OPERAND1      ; Print dd,S
.1a8019	a9 2c		lda #$2c	                LDA #','
.1a801b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a801e	a9 53		lda #$53	                LDA #'S'
.1a8020	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8023	4c f2 80	jmp $1a80f2	                JMP done_1
.1a8026	a9 5b		lda #$5b	is_dp_long      LDA #'['                ; [dd]
.1a8028	20 18 00	jsr $1a0018	            JSR PRINTC
.1a802b	22 f8 80 1a	jsl $1a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.1a802f	a9 5d		lda #$5d	                LDA #']'
.1a8031	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8034	4c f2 80	jmp $1a80f2	                JMP done_1
.1a8037	22 10 81 1a	jsl $1a8110	is_abs_long     JSL DS_PR_OPERAND3      ; Print dddddd
.1a803b	4c f6 80	jmp $1a80f6	                JMP done
.1a803e	a9 28		lda #$28	is_stack_r_y    LDA #'('                ; (dd,S),Y
.1a8040	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8043	22 f8 80 1a	jsl $1a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.1a8047	a9 2c		lda #$2c	                LDA #','
.1a8049	20 18 00	jsr $1a0018	            JSR PRINTC
.1a804c	a9 53		lda #$53	                LDA #'S'
.1a804e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8051	a9 29		lda #$29	                LDA #')'
.1a8053	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8056	a9 2c		lda #$2c	                LDA #','
.1a8058	20 18 00	jsr $1a0018	            JSR PRINTC
.1a805b	a9 59		lda #$59	                LDA #'Y'
.1a805d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8060	4c f2 80	jmp $1a80f2	                JMP done_1
.1a8063	a9 5b		lda #$5b	is_dp_y_long    LDA #'['                ; [dd],Y
.1a8065	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8068	22 f8 80 1a	jsl $1a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.1a806c	a9 5d		lda #$5d	                LDA #']'
.1a806e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8071	a9 2c		lda #$2c	                LDA #','
.1a8073	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8076	a9 59		lda #$59	                LDA #'Y'
.1a8078	20 18 00	jsr $1a0018	            JSR PRINTC
.1a807b	4c f2 80	jmp $1a80f2	                JMP done_1
.1a807e	a0 02 00	ldy #$0002	is_pc_rel_long  LDY #2
.1a8081	80 03		bra $1a8086	                BRA do_pcrel
.1a8083	a0 01 00	ldy #$0001	is_pc_rel       LDY #1
.1a8086	22 76 81 1a	jsl $1a8176	do_pcrel        JSL DS_PR_PCREL
.1a808a	4c f6 80	jmp $1a80f6	                JMP done
.1a808d	4c f6 80	jmp $1a80f6	is_implied      JMP done
.1a8090	22 10 81 1a	jsl $1a8110	is_abs_x_long   JSL DS_PR_OPERAND3      ; Print dddddd
.1a8094	a9 2c		lda #$2c	                LDA #','
.1a8096	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8099	a9 58		lda #$58	                LDA #'X'
.1a809b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a809e	4c f6 80	jmp $1a80f6	                JMP done
.1a80a1	a9 23		lda #$23	is_xyc          LDA #'#'
.1a80a3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a80a6	8b		phb		                PHB                     ; Make sure the databank is pointed to our number
.1a80a7	a5 02		lda $087c	                LDA MCURSOR+2
.1a80a9	48		pha		                PHA
.1a80aa	ab		plb		                PLB
.1a80ab	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.1a80ad	e8		inx		                INX
.1a80ae	a0 01 00	ldy #$0001	                LDY #1
.1a80b1	22 e7 03 1a	jsl $1a03e7	                JSL PRINTH
.1a80b5	a9 2c		lda #$2c	                LDA #','
.1a80b7	20 18 00	jsr $1a0018	            JSR PRINTC
.1a80ba	a9 23		lda #$23	                LDA #'#'
.1a80bc	20 18 00	jsr $1a0018	            JSR PRINTC
.1a80bf	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.1a80c1	a0 01 00	ldy #$0001	                LDY #1
.1a80c4	22 e7 03 1a	jsl $1a03e7	                JSL PRINTH
.1a80c8	ab		plb		                PLB                     ; Get our old data bank back
.1a80c9	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a80cd	4c f2 80	jmp $1a80f2	                JMP done_1
.1a80d0	a9 28		lda #$28	is_abs_ind      LDA #'('
.1a80d2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a80d5	22 02 81 1a	jsl $1a8102	                JSL DS_PR_OPERAND2      ; Print (dddd)
.1a80d9	a9 29		lda #$29	                LDA #')'
.1a80db	20 18 00	jsr $1a0018	            JSR PRINTC
.1a80de	4c f2 80	jmp $1a80f2	                JMP done_1
.1a80e1	a9 5b		lda #$5b	is_abs_ind_long LDA #'['
.1a80e3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a80e6	22 02 81 1a	jsl $1a8102	                JSL DS_PR_OPERAND2      ; Print [dddd]
.1a80ea	a9 5d		lda #$5d	                LDA #']'
.1a80ec	20 18 00	jsr $1a0018	            JSR PRINTC
.1a80ef	4c f2 80	jmp $1a80f2	                JMP done_1
.1a80f2	22 25 87 1a	jsl $1a8725	done_1          JSL M_INC_CURSOR    ; Skip over a single byte operand
.1a80f6	28		plp		done            PLP
.1a80f7	6b		rtl		                RTL
.1a80f8					DS_PR_OPERAND1
.1a80f8	08		php		                PHP
.1a80f9	e2 20		sep #$20	            SEP #$20
.1a80fb	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a80fd	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a8100	28		plp		                PLP
.1a8101	6b		rtl		                RTL
.1a8102					DS_PR_OPERAND2
.1a8102	08		php		                PHP
.1a8103	c2 30		rep #$30	            REP #$30
.1a8105	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a8107	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a810a	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a810e	28		plp		                PLP
.1a810f	6b		rtl		                RTL
.1a8110					DS_PR_OPERAND3
.1a8110	08		php		                PHP
.1a8111	8b		phb		                PHB
.1a8112	0b		phd		                PHD
.1a8113	c2 30		rep #$30	            REP #$30
.1a8115	5a		phy		                PHY
.1a8116	08		php		            PHP
.1a8117	c2 20		rep #$20	            REP #$20
.1a8119	48		pha		            PHA
.1a811a	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a811d	5b		tcd		            TCD
.1a811e	68		pla		            PLA
.1a811f	28		plp		            PLP
.1a8120	08		php		            PHP
.1a8121	e2 20		sep #$20	            SEP #$20
.1a8123	48		pha		            PHA
.1a8124	a9 00		lda #$00	            LDA #`MTEMP
.1a8126	48		pha		            PHA
.1a8127	ab		plb		            PLB
.1a8128	68		pla		            PLA
.1a8129	28		plp		            PLP
.1a812a	e2 20		sep #$20	            SEP #$20
.1a812c	a0 00 00	ldy #$0000	                LDY #0
.1a812f	a7 00		lda [$087a]	copy_loop       LDA [MCURSOR]       ; Copy the address pointed to by MCURSOR
.1a8131	99 92 08	sta $0892,y	                STA MTEMP,Y         ; to MTEMP
.1a8134	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a8138	c8		iny		                INY
.1a8139	c0 03 00	cpy #$0003	                CPY #3
.1a813c	d0 f1		bne $1a812f	                BNE copy_loop
.1a813e	22 cf 81 1a	jsl $1a81cf	                JSL M_PR_ADDR       ; Print the address
.1a8142	c2 30		rep #$30	            REP #$30
.1a8144	7a		ply		                PLY
.1a8145	2b		pld		                PLD
.1a8146	ab		plb		                PLB
.1a8147	28		plp		                PLP
.1a8148	6b		rtl		                RTL
.1a8149					DS_PR_MNEMONIC
.1a8149	08		php		                PHP
.1a814a	8b		phb		                PHB
.1a814b	e2 20		sep #$20	            SEP #$20
.1a814d	c2 10		rep #$10	            REP #$10
.1a814f	08		php		            PHP
.1a8150	e2 20		sep #$20	            SEP #$20
.1a8152	48		pha		            PHA
.1a8153	a9 1a		lda #$1a	            LDA #`MN_ORA
.1a8155	48		pha		            PHA
.1a8156	ab		plb		            PLB
.1a8157	68		pla		            PLA
.1a8158	28		plp		            PLP
.1a8159	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a815c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a815f	e8		inx		                INX
.1a8160	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a8163	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8166	e8		inx		                INX
.1a8167	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a816a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a816d	e8		inx		                INX
.1a816e	a9 20		lda #$20	                LDA #' '            ; Print a space
.1a8170	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8173	ab		plb		                PLB
.1a8174	28		plp		                PLP
.1a8175	6b		rtl		                RTL
.1a8176					DS_PR_PCREL
.1a8176	08		php		                PHP
.1a8177	0b		phd		                PHD
.1a8178	08		php		            PHP
.1a8179	c2 20		rep #$20	            REP #$20
.1a817b	48		pha		            PHA
.1a817c	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a817f	5b		tcd		            TCD
.1a8180	68		pla		            PLA
.1a8181	28		plp		            PLP
.1a8182	e2 20		sep #$20	            SEP #$20
.1a8184	c0 02 00	cpy #$0002	                CPY #2
.1a8187	f0 14		beq $1a819d	                BEQ offset_2
.1a8189	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a818b	85 18		sta $0892	                STA MTEMP
.1a818d	30 06		bmi $1a8195	                BMI is_negative
.1a818f	64 19		stz $0893	                STZ MTEMP+1
.1a8191	64 1a		stz $0894	                STZ MTEMP+2
.1a8193	80 1e		bra $1a81b3	                BRA add_offset
.1a8195	a9 ff		lda #$ff	is_negative     LDA #$FF
.1a8197	85 19		sta $0893	                STA MTEMP+1
.1a8199	85 1a		sta $0894	                STA MTEMP+2
.1a819b	80 16		bra $1a81b3	                BRA add_offset
.1a819d	a7 00		lda [$087a]	offset_2        LDA [MCURSOR]
.1a819f	85 18		sta $0892	                STA MTEMP
.1a81a1	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a81a5	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a81a7	85 19		sta $0893	                STA MTEMP+1
.1a81a9	30 04		bmi $1a81af	                BMI is_negative2
.1a81ab	64 1a		stz $0894	                STZ MTEMP+2
.1a81ad	80 04		bra $1a81b3	                BRA add_offset
.1a81af	a9 ff		lda #$ff	is_negative2    LDA #$FF
.1a81b1	85 1a		sta $0894	                STA MTEMP+2
.1a81b3					add_offset
.1a81b3	c2 20		rep #$20	            REP #$20
.1a81b5	38		sec		                SEC             ; Add 1 to the offset
.1a81b6	a5 00		lda $087a	                LDA MCURSOR
.1a81b8	65 18		adc $0892	                ADC MTEMP
.1a81ba	85 18		sta $0892	                STA MTEMP
.1a81bc	e2 20		sep #$20	            SEP #$20
.1a81be	a5 02		lda $087c	                LDA MCURSOR+2
.1a81c0	65 1a		adc $0894	                ADC MTEMP+2
.1a81c2	85 1a		sta $0894	                STA MTEMP+2
.1a81c4	22 cf 81 1a	jsl $1a81cf	                JSL M_PR_ADDR
.1a81c8	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a81cc	2b		pld		                PLD
.1a81cd	28		plp		                PLP
.1a81ce	6b		rtl		                RTL
.1a81cf					M_PR_ADDR
.1a81cf	08		php		                PHP
.1a81d0	0b		phd		                PHD
.1a81d1	c2 20		rep #$20	            REP #$20
.1a81d3	48		pha		                PHA
.1a81d4	08		php		            PHP
.1a81d5	c2 20		rep #$20	            REP #$20
.1a81d7	48		pha		            PHA
.1a81d8	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a81db	5b		tcd		            TCD
.1a81dc	68		pla		            PLA
.1a81dd	28		plp		            PLP
.1a81de	e2 20		sep #$20	            SEP #$20
.1a81e0	a5 4c		lda $0894	                LDA MTEMP+2     ; Print the bank byte of the address
.1a81e2	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a81e5	e2 20		sep #$20	            SEP #$20
.1a81e7	a9 3a		lda #$3a	                LDA #':'
.1a81e9	20 18 00	jsr $1a0018	            JSR PRINTC
.1a81ec	c2 20		rep #$20	            REP #$20
.1a81ee	a5 4a		lda $0892	                LDA MTEMP       ; Print the lower 16-bits of the address
.1a81f0	20 74 04	jsr $1a0474	            JSR PRHEXW
.1a81f3	68		pla		                PLA
.1a81f4	2b		pld		                PLD
.1a81f5	28		plp		                PLP
.1a81f6	6b		rtl		                RTL
.1a81f7					MNEMONICS_TAB
.1a81f7					MN_ORA
>1a81f7	4f 52 41 00			            .null "ORA"
.1a81fb					MN_AND
>1a81fb	41 4e 44 00			            .null "AND"
.1a81ff					MN_EOR
>1a81ff	45 4f 52 00			            .null "EOR"
.1a8203					MN_ADC
>1a8203	41 44 43 00			            .null "ADC"
.1a8207					MN_STA
>1a8207	53 54 41 00			            .null "STA"
.1a820b					MN_LDA
>1a820b	4c 44 41 00			            .null "LDA"
.1a820f					MN_CMP
>1a820f	43 4d 50 00			            .null "CMP"
.1a8213					MN_SBC
>1a8213	53 42 43 00			            .null "SBC"
.1a8217					MN_ASL
>1a8217	41 53 4c 00			            .null "ASL"
.1a821b					MN_ROL
>1a821b	52 4f 4c 00			            .null "ROL"
.1a821f					MN_LSR
>1a821f	4c 53 52 00			            .null "LSR"
.1a8223					MN_ROR
>1a8223	52 4f 52 00			            .null "ROR"
.1a8227					MN_STX
>1a8227	53 54 58 00			            .null "STX"
.1a822b					MN_LDX
>1a822b	4c 44 58 00			            .null "LDX"
.1a822f					MN_DEC
>1a822f	44 45 43 00			            .null "DEC"
.1a8233					MN_INC
>1a8233	49 4e 43 00			            .null "INC"
.1a8237					MN_BIT
>1a8237	42 49 54 00			            .null "BIT"
.1a823b					MN_JMP
>1a823b	4a 4d 50 00			            .null "JMP"
.1a823f					MN_STY
>1a823f	53 54 59 00			            .null "STY"
.1a8243					MN_LDY
>1a8243	4c 44 59 00			            .null "LDY"
.1a8247					MN_CPY
>1a8247	43 50 59 00			            .null "CPY"
.1a824b					MN_CPX
>1a824b	43 50 58 00			            .null "CPX"
.1a824f					MN_BRK
>1a824f	42 52 4b 00			            .null "BRK"
.1a8253					MN_JSR
>1a8253	4a 53 52 00			            .null "JSR"
.1a8257					MN_RTI
>1a8257	52 54 49 00			            .null "RTI"
.1a825b					MN_RTS
>1a825b	52 54 53 00			            .null "RTS"
.1a825f					MN_PHP
>1a825f	50 48 50 00			            .null "PHP"
.1a8263					MN_PLP
>1a8263	50 4c 50 00			            .null "PLP"
.1a8267					MN_PHA
>1a8267	50 48 41 00			            .null "PHA"
.1a826b					MN_PLA
>1a826b	50 4c 41 00			            .null "PLA"
.1a826f					MN_DEY
>1a826f	44 45 59 00			            .null "DEY"
.1a8273					MN_TAY
>1a8273	54 41 59 00			            .null "TAY"
.1a8277					MN_INY
>1a8277	49 4e 59 00			            .null "INY"
.1a827b					MN_INX
>1a827b	49 4e 58 00			            .null "INX"
.1a827f					MN_CLC
>1a827f	43 4c 43 00			            .null "CLC"
.1a8283					MN_SEC
>1a8283	53 45 43 00			            .null "SEC"
.1a8287					MN_CLI
>1a8287	43 4c 49 00			            .null "CLI"
.1a828b					MN_SEI
>1a828b	53 45 49 00			            .null "SEI"
.1a828f					MN_TYA
>1a828f	54 59 41 00			            .null "TYA"
.1a8293					MN_CLV
>1a8293	43 4c 56 00			            .null "CLV"
.1a8297					MN_CLD
>1a8297	43 4c 44 00			            .null "CLD"
.1a829b					MN_SED
>1a829b	53 45 44 00			            .null "SED"
.1a829f					MN_TXA
>1a829f	54 58 41 00			            .null "TXA"
.1a82a3					MN_TXS
>1a82a3	54 58 53 00			            .null "TXS"
.1a82a7					MN_TAX
>1a82a7	54 41 58 00			            .null "TAX"
.1a82ab					MN_TSX
>1a82ab	54 53 58 00			            .null "TSX"
.1a82af					MN_DEX
>1a82af	44 45 58 00			            .null "DEX"
.1a82b3					MN_NOP
>1a82b3	4e 4f 50 00			            .null "NOP"
.1a82b7					MN_BPL
>1a82b7	42 50 4c 00			            .null "BPL"
.1a82bb					MN_BMI
>1a82bb	42 4d 49 00			            .null "BMI"
.1a82bf					MN_BVC
>1a82bf	42 56 43 00			            .null "BVC"
.1a82c3					MN_BVS
>1a82c3	42 56 53 00			            .null "BVS"
.1a82c7					MN_BCC
>1a82c7	42 43 43 00			            .null "BCC"
.1a82cb					MN_BCS
>1a82cb	42 43 53 00			            .null "BCS"
.1a82cf					MN_BNE
>1a82cf	42 4e 45 00			            .null "BNE"
.1a82d3					MN_BEQ
>1a82d3	42 45 51 00			            .null "BEQ"
.1a82d7					MN_TSB
>1a82d7	54 53 42 00			            .null "TSB"
.1a82db					MN_TRB
>1a82db	54 52 42 00			            .null "TRB"
.1a82df					MN_STZ
>1a82df	53 54 5a 00			            .null "STZ"
.1a82e3					MN_BRA
>1a82e3	42 52 41 00			            .null "BRA"
.1a82e7					MN_PHY
>1a82e7	50 48 59 00			            .null "PHY"
.1a82eb					MN_PLY
>1a82eb	50 4c 59 00			            .null "PLY"
.1a82ef					MN_PHX
>1a82ef	50 48 58 00			            .null "PHX"
.1a82f3					MN_PLX
>1a82f3	50 4c 58 00			            .null "PLX"
.1a82f7					MN_PHD
>1a82f7	50 48 44 00			            .null "PHD"
.1a82fb					MN_PLD
>1a82fb	50 4c 44 00			            .null "PLD"
.1a82ff					MN_PHK
>1a82ff	50 48 4b 00			            .null "PHK"
.1a8303					MN_RTL
>1a8303	52 54 4c 00			            .null "RTL"
.1a8307					MN_PHB
>1a8307	50 48 42 00			            .null "PHB"
.1a830b					MN_PLB
>1a830b	50 4c 42 00			            .null "PLB"
.1a830f					MN_WAI
>1a830f	57 41 49 00			            .null "WAI"
.1a8313					MN_XBA
>1a8313	58 42 41 00			            .null "XBA"
.1a8317					MN_TCS
>1a8317	54 43 53 00			            .null "TCS"
.1a831b					MN_TSC
>1a831b	54 53 43 00			            .null "TSC"
.1a831f					MN_TCD
>1a831f	54 43 44 00			            .null "TCD"
.1a8323					MN_TDC
>1a8323	54 44 43 00			            .null "TDC"
.1a8327					MN_TXY
>1a8327	54 58 59 00			            .null "TXY"
.1a832b					MN_TYX
>1a832b	54 59 58 00			            .null "TYX"
.1a832f					MN_STP
>1a832f	53 54 50 00			            .null "STP"
.1a8333					MN_XCE
>1a8333	58 43 45 00			            .null "XCE"
.1a8337					MN_COP
>1a8337	43 4f 50 00			            .null "COP"
.1a833b					MN_JSL
>1a833b	4a 53 4c 00			            .null "JSL"
.1a833f					MN_WDM
>1a833f	57 44 4d 00			            .null "WDM"
.1a8343					MN_PER
>1a8343	50 45 52 00			            .null "PER"
.1a8347					MN_BRL
>1a8347	42 52 4c 00			            .null "BRL"
.1a834b					MN_REP
>1a834b	52 45 50 00			            .null "REP"
.1a834f					MN_SEP
>1a834f	53 45 50 00			            .null "SEP"
.1a8353					MN_MVP
>1a8353	4d 56 50 00			            .null "MVP"
.1a8357					MN_MVN
>1a8357	4d 56 4e 00			            .null "MVN"
.1a835b					MN_PEI
>1a835b	50 45 49 00			            .null "PEI"
.1a835f					MN_PEA
>1a835f	50 45 41 00			            .null "PEA"
.1a8363					MN_JML
>1a8363	4a 4d 4c 00			            .null "JML"
>1a8367	00 00				            .byte 0, 0
>1a8369	4f 82 f7 81 37 83 f7 81		MNEMONIC_TAB    .word <>MN_BRK, <>MN_ORA, <>MN_COP, <>MN_ORA, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 0x
>1a8371	d7 82 f7 81 17 82 f7 81
>1a8379	5f 82 f7 81 17 82 f7 82		                .word <>MN_PHP, <>MN_ORA, <>MN_ASL, <>MN_PHD, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>1a8381	d7 82 f7 81 17 82 f7 81
>1a8389	b7 82 f7 81 f7 81 f7 81		                .word <>MN_BPL, <>MN_ORA, <>MN_ORA, <>MN_ORA, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 1x
>1a8391	db 82 f7 81 17 82 f7 81
>1a8399	7f 82 f7 81 33 82 17 83		                .word <>MN_CLC, <>MN_ORA, <>MN_INC, <>MN_TCS, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>1a83a1	db 82 f7 81 17 82 f7 81
>1a83a9	53 82 fb 81 3b 83 fb 81		                .word <>MN_JSR, <>MN_AND, <>MN_JSL, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 2x
>1a83b1	37 82 fb 81 1b 82 fb 81
>1a83b9	63 82 fb 81 1b 82 fb 82		                .word <>MN_PLP, <>MN_AND, <>MN_ROL, <>MN_PLD, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>1a83c1	37 82 fb 81 1b 82 fb 81
>1a83c9	bb 82 fb 81 fb 81 fb 81		                .word <>MN_BMI, <>MN_AND, <>MN_AND, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 3x
>1a83d1	37 82 fb 81 1b 82 fb 81
>1a83d9	83 82 fb 81 2f 82 1b 83		                .word <>MN_SEC, <>MN_AND, <>MN_DEC, <>MN_TSC, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>1a83e1	37 82 fb 81 1b 82 fb 81
>1a83e9	57 82 ff 81 3f 83 ff 81		                .word <>MN_RTI, <>MN_EOR, <>MN_WDM, <>MN_EOR, <>MN_MVP, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 4x
>1a83f1	53 83 ff 81 1f 82 ff 81
>1a83f9	67 82 ff 81 1f 82 ff 82		                .word <>MN_PHA, <>MN_EOR, <>MN_LSR, <>MN_PHK, <>MN_JMP, <>MN_EOR, <>MN_LSR, <>MN_EOR
>1a8401	3b 82 ff 81 1f 82 ff 81
>1a8409	bf 82 ff 81 ff 81 ff 81		                .word <>MN_BVC, <>MN_EOR, <>MN_EOR, <>MN_EOR, <>MN_MVN, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 5x
>1a8411	57 83 ff 81 1f 82 ff 81
>1a8419	87 82 ff 81 e7 82 1f 83		                .word <>MN_CLI, <>MN_EOR, <>MN_PHY, <>MN_TCD, <>MN_JML, <>MN_EOR, <>MN_LSR, <>MN_EOR
>1a8421	63 83 ff 81 1f 82 ff 81
>1a8429	5b 82 03 82 43 83 03 82		                .word <>MN_RTS, <>MN_ADC, <>MN_PER, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 6x
>1a8431	df 82 03 82 23 82 03 82
>1a8439	6b 82 03 82 23 82 03 83		                .word <>MN_PLA, <>MN_ADC, <>MN_ROR, <>MN_RTL, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>1a8441	3b 82 03 82 23 82 03 82
>1a8449	c3 82 03 82 03 82 03 82		                .word <>MN_BVS, <>MN_ADC, <>MN_ADC, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 7x
>1a8451	df 82 03 82 23 82 03 82
>1a8459	8b 82 03 82 eb 82 23 83		                .word <>MN_SEI, <>MN_ADC, <>MN_PLY, <>MN_TDC, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>1a8461	3b 82 03 82 23 82 03 82
>1a8469	e3 82 07 82 47 83 07 82		                .word <>MN_BRA, <>MN_STA, <>MN_BRL, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 8x
>1a8471	3f 82 07 82 27 82 07 82
>1a8479	6f 82 37 82 9f 82 07 83		                .word <>MN_DEY, <>MN_BIT, <>MN_TXA, <>MN_PHB, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA
>1a8481	3f 82 07 82 27 82 07 82
>1a8489	c7 82 07 82 07 82 07 82		                .word <>MN_BCC, <>MN_STA, <>MN_STA, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 9x
>1a8491	3f 82 07 82 27 82 07 82
>1a8499	8f 82 07 82 a3 82 27 83		                .word <>MN_TYA, <>MN_STA, <>MN_TXS, <>MN_TXY, <>MN_STZ, <>MN_STA, <>MN_STZ, <>MN_STA
>1a84a1	df 82 07 82 df 82 07 82
>1a84a9	43 82 0b 82 2b 82 0b 82		                .word <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Ax
>1a84b1	43 82 0b 82 2b 82 0b 82
>1a84b9	73 82 0b 82 a7 82 0b 83		                .word <>MN_TAY, <>MN_LDA, <>MN_TAX, <>MN_PLB, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>1a84c1	43 82 0b 82 2b 82 0b 82
>1a84c9	cb 82 0b 82 0b 82 0b 82		                .word <>MN_BCS, <>MN_LDA, <>MN_LDA, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Bx
>1a84d1	43 82 0b 82 2b 82 0b 82
>1a84d9	93 82 0b 82 ab 82 2b 83		                .word <>MN_CLV, <>MN_LDA, <>MN_TSX, <>MN_TYX, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>1a84e1	43 82 0b 82 2b 82 0b 82
>1a84e9	47 82 0f 82 4b 83 0f 82		                .word <>MN_CPY, <>MN_CMP, <>MN_REP, <>MN_CMP, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Cx
>1a84f1	47 82 0f 82 2f 82 0f 82
>1a84f9	77 82 0f 82 af 82 0f 83		                .word <>MN_INY, <>MN_CMP, <>MN_DEX, <>MN_WAI, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP
>1a8501	47 82 0f 82 2f 82 0f 82
>1a8509	cf 82 0f 82 0f 82 0f 82		                .word <>MN_BNE, <>MN_CMP, <>MN_CMP, <>MN_CMP, <>MN_PEI, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Dx
>1a8511	5b 83 0f 82 2f 82 0f 82
>1a8519	97 82 0f 82 ef 82 2f 83		                .word <>MN_CLD, <>MN_CMP, <>MN_PHX, <>MN_STP, <>MN_JML, <>MN_CMP, <>MN_DEC, <>MN_CMP
>1a8521	63 83 0f 82 2f 82 0f 82
>1a8529	4b 82 13 82 4f 83 13 82		                .word <>MN_CPX, <>MN_SBC, <>MN_SEP, <>MN_SBC, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Ex
>1a8531	4b 82 13 82 33 82 13 82
>1a8539	7b 82 13 82 b3 82 13 83		                .word <>MN_INX, <>MN_SBC, <>MN_NOP, <>MN_XBA, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC
>1a8541	4b 82 13 82 33 82 13 82
>1a8549	d3 82 13 82 13 82 13 82		                .word <>MN_BEQ, <>MN_SBC, <>MN_SBC, <>MN_SBC, <>MN_PEA, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Fx
>1a8551	5f 83 13 82 33 82 13 82
>1a8559	9b 82 13 82 f3 82 33 83		                .word <>MN_SED, <>MN_SBC, <>MN_PLX, <>MN_XCE, <>MN_JSR, <>MN_SBC, <>MN_INC, <>MN_SBC
>1a8561	53 82 13 82 33 82 13 82
>1a8569	00 00				                .word 0
>1a856b	13 00 02 09			ADDRESS_TAB     .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R                  ; 0x
>1a856f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8573	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a8577	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a857b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 1x
>1a857f	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8583	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>1a8587	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a858b	03 00 0b 09			                .byte ADDR_ABS, ADDR_DP_IND_X, ADDR_ABS_LONG, ADDR_SP_R                 ; 2x
>1a858f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8593	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a8597	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a859b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 3x
>1a859f	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a85a3	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>1a85a7	07 07 07 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a85ab	13 00 13 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMPLIED, ADDR_SP_R              ; 4x
>1a85af	14 01 01 0a			                .byte ADDR_XYC, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a85b3	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a85b7	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a85bb	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 5x
>1a85bf	14 05 05 0d			                .byte ADDR_XYC, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a85c3	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a85c7	0b 07 07 0b			                .byte ADDR_ABS_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_LONG
>1a85cb	13 00 16 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R          ; 6x
>1a85cf	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a85d3	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a85d7	15 03 03 0b			                .byte ADDR_ABS_IND, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a85db	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 7x
>1a85df	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a85e3	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a85e7	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a85eb	12 00 16 09			                .byte ADDR_PC_REL, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R           ; 8x
>1a85ef	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a85f3	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a85f7	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a85fb	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 9x
>1a85ff	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>1a8603	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a8607	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a860b	82 00 42 09			                .byte ADDR_IMM | OP_M_EFFECT, ADDR_DP_IND_X, ADDR_IMM | OP_X_EFFECT, ADDR_SP_R  ; Ax
>1a860f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8613	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a8617	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a861b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Bx
>1a861f	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>1a8623	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a8627	07 07 06 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_Y, ADDR_ABS_X_LONG
>1a862b	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Cx
>1a862f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8633	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a8637	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a863b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Dx
>1a863f	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8643	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a8647	17 07 07 0e			                .byte ADDR_ABS_IND_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a864b	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Ex
>1a864f	01 01 01 0f			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_IND
>1a8653	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a8657	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a865b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Fx
>1a865f	03 05 05 0d			                .byte ADDR_ABS, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8663	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a8667	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a866b	01 01 01 02 01 01 02 02		ADDR_LENGTH     .byte 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 0, 2, 2, 2, 2
>1a8673	00 01 01 03 01 01 03 01 02 01 01 00 02 02 02 02
.1a8683					ADDR_PATTERNS
>1a8683	41 00				            .null "A"
>1a8685	08				            .byte ADDR_ACC
>1a8686	64 64 3a 64 64 64 64 2c		            .null "dd:dddd,X"
>1a868e	58 00
>1a8690	0e				            .byte ADDR_ABS_X_LONG
>1a8691	64 64 3a 64 64 64 64 00		            .null "dd:dddd"
>1a8699	0b				            .byte ADDR_ABS_LONG
>1a869a	64 64 64 64 2c 58 00		            .null "dddd,X"
>1a86a1	07				            .byte ADDR_ABS_X
>1a86a2	64 64 64 64 2c 59 00		            .null "dddd,Y"
>1a86a9	06				            .byte ADDR_ABS_Y
>1a86aa	64 64 64 64 00			            .null "dddd"
>1a86af	03				            .byte ADDR_ABS
>1a86b0	64 64 2c 58 00			            .null "dd,X"
>1a86b5	05				            .byte ADDR_DP_X
>1a86b6	64 64 2c 59 00			            .null "dd,Y"
>1a86bb	11				            .byte ADDR_DP_Y
>1a86bc	64 64 2c 53 00			            .null "dd,S"
>1a86c1	09				            .byte ADDR_SP_R
>1a86c2	64 64 00			            .null "dd"
>1a86c5	01				            .byte ADDR_DP
>1a86c6	23 64 64 64 64 00		            .null "#dddd"
>1a86cc	c2				            .byte ADDR_IMM | OP_M_EFFECT | OP_X_EFFECT
>1a86cd	23 64 64 2c 23 64 64 00		            .null "#dd,#dd"
>1a86d5	14				            .byte ADDR_XYC
>1a86d6	23 64 64 00			            .null "#dd"
>1a86da	02				            .byte ADDR_IMM
>1a86db	28 64 64 2c 53 29 2c 59		            .null "(dd,S),Y"
>1a86e3	00
>1a86e4	0c				            .byte ADDR_SP_R_Y
>1a86e5	28 64 64 64 64 2c 58 29		            .null "(dddd,X)"
>1a86ed	00
>1a86ee	10				            .byte ADDR_ABS_X_ID
>1a86ef	28 64 64 64 64 29 00		            .null "(dddd)"
>1a86f6	10				            .byte ADDR_ABS_X_ID
>1a86f7	28 64 64 2c 58 29 00		            .null "(dd,X)"
>1a86fe	00				            .byte ADDR_DP_IND_X
>1a86ff	28 64 64 29 2c 59 00		            .null "(dd),Y"
>1a8706	04				            .byte ADDR_DP_IND_Y
>1a8707	28 64 64 29 00			            .null "(dd)"
>1a870c	0f				            .byte ADDR_DP_IND
>1a870d	5b 64 64 64 64 5d 00		            .null "[dddd]"
>1a8714	17				            .byte ADDR_ABS_IND_LONG
>1a8715	5b 64 64 5d 2c 59 00		            .null "[dd],Y"
>1a871c	0d				            .byte ADDR_DP_Y_LONG
>1a871d	5b 64 64 5d 00			            .null "[dd]"
>1a8722	0a				            .byte ADDR_DP_LONG
>1a8723	00 00				                .byte 0, 0

;******  Return to file: src\monitor.s

.1a8725					M_INC_CURSOR
.1a8725	08		php		                PHP
.1a8726	c2 20		rep #$20	            REP #$20
.1a8728	48		pha		                PHA
.1a8729	18		clc		                CLC
.1a872a	af 7a 08 00	lda $00087a	                LDA MCURSOR
.1a872e	69 01 00	adc #$0001	                ADC #1
.1a8731	8f 7a 08 00	sta $00087a	                STA MCURSOR
.1a8735	e2 20		sep #$20	            SEP #$20
.1a8737	af 7c 08 00	lda $00087c	                LDA MCURSOR+2
.1a873b	69 00		adc #$00	                ADC #0
.1a873d	8f 7c 08 00	sta $00087c	                STA MCURSOR+2
.1a8741	c2 20		rep #$20	            REP #$20
.1a8743	68		pla		                PLA
.1a8744	28		plp		                PLP
.1a8745	6b		rtl		                RTL
.1a8746					MPRINTB
.1a8746	08		php		                PHP
.1a8747	c2 10		rep #$10	            REP #$10
.1a8749	e2 20		sep #$20	            SEP #$20
.1a874b	da		phx		                PHX
.1a874c	a2 08 00	ldx #$0008	                LDX #8          ; Set number of bits to print to 8
.1a874f	0a		asl a		loop            ASL A           ; Shift MSB to C
.1a8750	b0 08		bcs $1a875a	                BCS is_one
.1a8752	48		pha		                PHA             ; Save value to print
.1a8753	a9 30		lda #$30	                LDA #'0'        ; Print '0'
.1a8755	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8758	80 06		bra $1a8760	                BRA continue
.1a875a	48		pha		is_one          PHA             ; Save value to print
.1a875b	a9 31		lda #$31	                LDA #'1'        ; Print '1'
.1a875d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8760	68		pla		continue        PLA
.1a8761	ca		dex		                DEX             ; Count down the bits to shift
.1a8762	d0 eb		bne $1a874f	                BNE loop        ; And try the next one if there is one
.1a8764	fa		plx		                PLX             ; Otherwise, return
.1a8765	28		plp		                PLP
.1a8766	6b		rtl		                RTL
.1a8767					MSKIPWS
.1a8767	08		php		            PHP
.1a8768	c2 20		rep #$20	            REP #$20
.1a876a	48		pha		            PHA
.1a876b	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a876e	5b		tcd		            TCD
.1a876f	68		pla		            PLA
.1a8770	28		plp		            PLP
.1a8771	e2 20		sep #$20	            SEP #$20
.1a8773	a7 32		lda [$087a]	loop            LDA [MCURSOR]       ; Check the current character
.1a8775	f0 0a		beq $1a8781	                BEQ done            ; If NULL, we're done
.1a8777	c9 20		cmp #$20	                CMP #' '            ; Is it a space?
.1a8779	d0 06		bne $1a8781	                BNE done            ; No: we're done
.1a877b	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR    ; Yes, try the next one
.1a877f	80 f2		bra $1a8773	                BRA loop
.1a8781	6b		rtl		done            RTL
.1a8782					MPARSESTR
.1a8782	08		php		                PHP
.1a8783	08		php		            PHP
.1a8784	c2 20		rep #$20	            REP #$20
.1a8786	48		pha		            PHA
.1a8787	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a878a	5b		tcd		            TCD
.1a878b	68		pla		            PLA
.1a878c	28		plp		            PLP
.1a878d	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR                ; Point to the first character of the name
.1a8791	22 67 87 1a	jsl $1a8767	                JSL MSKIPWS                     ; Skip white space
.1a8795	c2 30		rep #$30	            REP #$30
.1a8797	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.1a8799	c2 20		rep #$20	            REP #$20
.1a879b	29 ff 00	and #$00ff	                AND #$00FF
.1a879e	0a		asl a		                ASL A                           ; multiply it by forfour
.1a879f	0a		asl a		                ASL A
.1a87a0	aa		tax		                TAX                             ; ... to get the index to the argument
.1a87a1	a5 32		lda $087a	                LDA MCURSOR                     ; Set the argument to the address of the first byte
.1a87a3	95 0d		sta $0855,x	                STA MARG1,X
.1a87a5	a5 34		lda $087c	                LDA MCURSOR+2
.1a87a7	95 0f		sta $0857,x	                STA MARG1+2,X
.1a87a9	e2 20		sep #$20	            SEP #$20
.1a87ab	a7 32		lda [$087a]	loop            LDA [MCURSOR]                   ; Scan to the closing double quote
.1a87ad	f0 14		beq $1a87c3	                BEQ done                        ; If NULL... treat it as a closed argument
.1a87af	c9 22		cmp #$22	                CMP #CHAR_DQUOTE
.1a87b1	f0 06		beq $1a87b9	                BEQ close_string
.1a87b3	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a87b7	80 f2		bra $1a87ab	                BRA loop
.1a87b9	a9 00		lda #$00	close_string    LDA #0                          ; Write a NULL to close the string
.1a87bb	87 32		sta [$087a]	                STA [MCURSOR]
.1a87bd	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR                ; And point to the next byte
.1a87c1	e6 31		inc $0879	                INC MARG_LEN
.1a87c3	28		plp		done            PLP
.1a87c4	6b		rtl		                RTL
.1a87c5					MPARSEARG
.1a87c5	08		php		            PHP
.1a87c6	c2 20		rep #$20	            REP #$20
.1a87c8	48		pha		            PHA
.1a87c9	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a87cc	5b		tcd		            TCD
.1a87cd	68		pla		            PLA
.1a87ce	28		plp		            PLP
.1a87cf	e2 20		sep #$20	            SEP #$20
.1a87d1	64 4a		stz $0892	                STZ MTEMP                       ; Use MTEMP as a flag for having processed digits
.1a87d3	c2 20		rep #$20	            REP #$20
.1a87d5	64 50		stz $0898	                STZ MPARSEDNUM                  ; Clear the parsed number
.1a87d7	64 52		stz $089a	                STZ MPARSEDNUM+2
.1a87d9					pa_loop
.1a87d9	e2 20		sep #$20	            SEP #$20
.1a87db	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Get the current character
.1a87dd	c9 3a		cmp #$3a	                CMP #":"
.1a87df	f0 0d		beq $1a87ee	                BEQ pa_next_char                ; Ignore any colons
.1a87e1	20 0c 05	jsr $1a050c	            JSR ISHEX
.1a87e4	90 0e		bcc $1a87f4	                BCC finished_arg                ; No? We're done with this argument
.1a87e6	22 5d 7c 1a	jsl $1a7c5d	                JSL AS_SHIFT_HEX                ; Yes: shift it onto MPARSEDNUM
.1a87ea	a9 01		lda #$01	                LDA #1                          ; Flag that we've processed a character
.1a87ec	85 4a		sta $0892	                STA MTEMP
.1a87ee	22 25 87 1a	jsl $1a8725	pa_next_char    JSL M_INC_CURSOR                ; And try the next character
.1a87f2	80 e5		bra $1a87d9	                BRA pa_loop
.1a87f4	a5 4a		lda $0892	finished_arg    LDA MTEMP                       ; Check to see if we've processed any characters
.1a87f6	f0 16		beq $1a880e	                BEQ done                        ; No: we're done
.1a87f8	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.1a87fa	c2 20		rep #$20	            REP #$20
.1a87fc	29 ff 00	and #$00ff	                AND #$00FF
.1a87ff	0a		asl a		                ASL A                           ; multiply it by forfour
.1a8800	0a		asl a		                ASL A
.1a8801	aa		tax		                TAX                             ; ... to get the index to the argument
.1a8802	a5 50		lda $0898	                LDA MPARSEDNUM                  ; Copy the value to the argument slot
.1a8804	95 0d		sta $0855,x	                STA MARG1,X
.1a8806	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a8808	95 0f		sta $0857,x	                STA MARG1+2,X
.1a880a	e2 20		sep #$20	            SEP #$20
.1a880c	e6 31		inc $0879	                INC MARG_LEN                    ; And bump up the argument count
.1a880e	6b		rtl		done            RTL
.1a880f					MPARSEALLARG
.1a880f	e2 20		sep #$20	            SEP #$20
.1a8811	64 31		stz $0879	                STZ MARG_LEN                    ; Set the arg count to 0
.1a8813	22 67 87 1a	jsl $1a8767	parse_arg       JSL MSKIPWS                     ; Otherwise, skip white space
.1a8817	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Check the current character
.1a8819	f0 21		beq $1a883c	                BEQ done                        ; If it is NULL, we're done
.1a881b	c9 22		cmp #$22	                CMP #CHAR_DQUOTE                ; Is it a double-quote?
.1a881d	d0 06		bne $1a8825	                BNE regular_arg
.1a881f	22 82 87 1a	jsl $1a8782	                JSL MPARSESTR                   ; Yes: parse it as a string argument
.1a8823	80 0a		bra $1a882f	                BRA check_rest
.1a8825	22 c5 87 1a	jsl $1a87c5	regular_arg     JSL MPARSEARG                   ; Attempt to parse the argument
.1a8829	a5 31		lda $0879	                LDA MARG_LEN                    ; Check how many arguments we've processed
.1a882b	c9 09		cmp #$09	                CMP #9
.1a882d	b0 0d		bcs $1a883c	                BGE done                        ; If >=9, then we're done
.1a882f	a7 32		lda [$087a]	check_rest      LDA [MCURSOR]                   ; Check the current character
.1a8831	f0 09		beq $1a883c	                BEQ done                        ; If EOL: we're done
.1a8833	c9 20		cmp #$20	                CMP #' '
.1a8835	f0 dc		beq $1a8813	                BEQ parse_arg                   ; If space: try to process another argument
.1a8837	20 0c 05	jsr $1a050c	            JSR ISHEX
.1a883a	b0 d7		bcs $1a8813	                BCS parse_arg                   ; If hex digit: try to process another argument
.1a883c	6b		rtl		done            RTL
.1a883d					IMPARSE
.1a883d	08		php		                PHP
.1a883e	0b		phd		                PHD
.1a883f	08		php		            PHP
.1a8840	c2 20		rep #$20	            REP #$20
.1a8842	48		pha		            PHA
.1a8843	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a8846	5b		tcd		            TCD
.1a8847	68		pla		            PLA
.1a8848	28		plp		            PLP
.1a8849	c2 10		rep #$10	            REP #$10
.1a884b	e2 20		sep #$20	            SEP #$20
.1a884d	a2 31 00	ldx #$0031	                LDX #MARG_LEN - MONITOR_VARS    ; Clear the monitor command line parameters
.1a8850	74 00		stz $0848,x	clear_command   STZ MONITOR_VARS,X
.1a8852	ca		dex		                DEX
.1a8853	d0 fb		bne $1a8850	                BNE clear_command
.1a8855	a9 00		lda #$00	                LDA #`INPUTBUF                  ; Point the command parser to the input buffer
.1a8857	85 02		sta $084a	                STA MCMDADDR+2
.1a8859	85 34		sta $087c	                STA MCURSOR+2                   ; And point MCURSOR there too
.1a885b	c2 20		rep #$20	            REP #$20
.1a885d	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF
.1a8860	85 00		sta $0848	                STA MCMDADDR
.1a8862	85 32		sta $087a	                STA MCURSOR
.1a8864	e2 20		sep #$20	            SEP #$20
.1a8866	22 67 87 1a	jsl $1a8767	                JSL MSKIPWS                     ; Skip to the first letter of the command
.1a886a	c9 00		cmp #$00	                CMP #0                          ; Is the current character a NULL?
.1a886c	f0 38		beq $1a88a6	                BEQ done                        ; Yes: there's no command here
.1a886e	c2 20		rep #$20	            REP #$20
.1a8870	a5 32		lda $087a	                LDA MCURSOR
.1a8872	85 08		sta $0850	                STA MCMD
.1a8874	e2 20		sep #$20	            SEP #$20
.1a8876	a5 34		lda $087c	                LDA MCURSOR+2
.1a8878	85 0a		sta $0852	                STA MCMD+2
.1a887a	a2 01 00	ldx #$0001	                LDX #1
.1a887d	22 25 87 1a	jsl $1a8725	cmd_loop        JSL M_INC_CURSOR                ; Move to the next character
.1a8881	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; What is that character?
.1a8883	d0 06		bne $1a888b	                BNE cmd_space                   ; If not NULL: check for a space
.1a8885	86 0b		stx $0853	no_arguments    STX MCMD_LEN                    ; If NULL: Save the length of the command
.1a8887	64 31		stz $0879	                STZ MARG_LEN                    ; ... And the fact there are no arguments
.1a8889	80 1b		bra $1a88a6	                BRA done                        ; ... And return
.1a888b	c9 20		cmp #$20	cmd_space       CMP #' '                        ; Is it a space?
.1a888d	f0 03		beq $1a8892	                BEQ found_cmd                   ; Yes: save the length
.1a888f	e8		inx		                INX                             ; No: go to the next character
.1a8890	80 eb		bra $1a887d	                BRA cmd_loop
.1a8892	86 0b		stx $0853	found_cmd       STX MCMD_LEN                    ; Save the length of the command
.1a8894	a9 00		lda #$00	                LDA #0
.1a8896	87 32		sta [$087a]	                STA [MCURSOR]                   ; Write a NULL to the end of the command
.1a8898	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR                ; And skip to the next character
.1a889c	a7 08		lda [$0850]	                LDA [MCMD]                      ; Check the command
.1a889e	c9 41		cmp #$41	                CMP #'A'
.1a88a0	f0 07		beq $1a88a9	                BEQ parse_asm                   ; If 'A', parse the line for the assemble command
.1a88a2	22 0f 88 1a	jsl $1a880f	                JSL MPARSEALLARG
.1a88a6	2b		pld		done            PLD
.1a88a7	28		plp		                PLP
.1a88a8	6b		rtl		                RTL
.1a88a9	22 67 87 1a	jsl $1a8767	parse_asm       JSL MSKIPWS                     ; Skip to the first letter of the address
.1a88ad	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a88af	f0 f5		beq $1a88a6	                BEQ done                        ; Exit if we got the end-of-line
.1a88b1	22 c5 87 1a	jsl $1a87c5	                JSL MPARSEARG                   ; Parse the first argument as the target address
.1a88b5	22 67 87 1a	jsl $1a8767	                JSL MSKIPWS                     ; Skip to the first letter of the mnemonic
.1a88b9	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a88bb	f0 e9		beq $1a88a6	                BEQ done                        ; Exit if we got the end-of-line
.1a88bd	c2 20		rep #$20	            REP #$20
.1a88bf	a5 32		lda $087a	                LDA MCURSOR                     ; Save pointer to the start of the mnemonic
.1a88c1	85 11		sta $0859	                STA MARG2
.1a88c3	e2 20		sep #$20	            SEP #$20
.1a88c5	a5 34		lda $087c	                LDA MCURSOR+2
.1a88c7	85 13		sta $085b	                STA MARG2+2
.1a88c9	22 25 87 1a	jsl $1a8725	asm_find_sp     JSL M_INC_CURSOR                ; Find the space at the end of the mnemonic
.1a88cd	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a88cf	f0 26		beq $1a88f7	                BEQ asm_no_operand              ; If EOL: we have an instruction but no operand
.1a88d1	c9 20		cmp #$20	                CMP #' '
.1a88d3	d0 f4		bne $1a88c9	                BNE asm_find_sp
.1a88d5	a9 00		lda #$00	                LDA #0
.1a88d7	87 32		sta [$087a]	                STA [MCURSOR]                   ; Null terminate the mnemonic
.1a88d9	e6 31		inc $0879	                INC MARG_LEN                    ; Count the mnemonic as an argument
.1a88db	22 25 87 1a	jsl $1a8725	                JSL M_INC_CURSOR
.1a88df	22 67 87 1a	jsl $1a8767	                JSL MSKIPWS                     ; Skip to the addressing mode
.1a88e3	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a88e5	f0 bf		beq $1a88a6	                BEQ done                        ; If EOL: we're done
.1a88e7	c2 20		rep #$20	            REP #$20
.1a88e9	a5 32		lda $087a	                LDA MCURSOR                     ; Set the pointer to the addressing mode
.1a88eb	85 15		sta $085d	                STA MARG3
.1a88ed	e2 20		sep #$20	            SEP #$20
.1a88ef	a5 34		lda $087c	                LDA MCURSOR+2
.1a88f1	85 17		sta $085f	                STA MARG3+2
.1a88f3	e6 31		inc $0879	                INC MARG_LEN                    ; And count it as the second argument
.1a88f5	80 af		bra $1a88a6	                BRA done                        ; and return
.1a88f7	e6 31		inc $0879	asm_no_operand  INC MARG_LEN                    ; Increment the argument count
.1a88f9	80 ab		bra $1a88a6	                BRA done                        ; And quit
.1a88fb					IMLOAD
.1a88fb	08		php		                PHP
.1a88fc	c2 10		rep #$10	            REP #$10
.1a88fe	e2 20		sep #$20	            SEP #$20
.1a8900	a5 31		lda $0879	                LDA MARG_LEN
.1a8902	d0 0f		bne $1a8913	                BNE get_arguments
.1a8904	a2 f1 89	ldx #$89f1	bad_arguments   LDX #<>MERRARGS                 ; Print bad arguments error
.1a8907	a9 1a		lda #$1a	                LDA #`MERRARGS
.1a8909	48		pha		                PHA
.1a890a	ab		plb		                PLB
.1a890b	20 64 04	jsr $1a0464	            JSR PRINTS
.1a890e	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a8911	80 61		bra $1a8974	                BRA done
.1a8913					get_arguments
.1a8913	c2 20		rep #$20	            REP #$20
.1a8915	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.1a8917	8f 23 08 00	sta $000823	                STA ARGUMENT1
.1a891b	a5 0f		lda $0857	                LDA MARG1+2
.1a891d	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.1a8921	20 e4 6a	jsr $1a6ae4	            JSR SETFILEDESC
.1a8924	e2 20		sep #$20	            SEP #$20
.1a8926	a5 31		lda $0879	                LDA MARG_LEN
.1a8928	c9 01		cmp #$01	                CMP #1
.1a892a	d0 0f		bne $1a893b	                BNE get_dest
.1a892c	c2 20		rep #$20	            REP #$20
.1a892e	a9 ff ff	lda #$ffff	                LDA #$FFFF                      ; Destination address not provided...
.1a8931	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR              ; ... set it to something sane
.1a8935	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a8939	80 0e		bra $1a8949	                BRA try_load
.1a893b					get_dest
.1a893b	c2 20		rep #$20	            REP #$20
.1a893d	a5 11		lda $0859	                LDA MARG2                       ; Set the destination address from the arguments
.1a893f	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a8943	a5 13		lda $085b	                LDA MARG2+2
.1a8945	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a8949	22 18 11 00	jsl $001118	try_load        JSL FK_LOAD                     ; Try to load the file
.1a894d	b0 25		bcs $1a8974	                BCS done
.1a894f					error
.1a894f	e2 20		sep #$20	            SEP #$20
.1a8951	a2 17 8a	ldx #$8a17	                LDX #<>MCANTLOAD                ; Print bad arguments error
.1a8954	a9 1a		lda #$1a	                LDA #`MCANTLOAD
.1a8956	48		pha		                PHA
.1a8957	ab		plb		                PLB
.1a8958	20 64 04	jsr $1a0464	            JSR PRINTS
.1a895b	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.1a895f	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a8962	a9 20		lda #$20	                LDA #' '
.1a8964	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8967	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.1a896b	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a896e	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a8971	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a8974	28		plp		done            PLP
.1a8975	6b		rtl		                RTL
.1a8976					IMSAVE
.1a8976	8b		phb		                PHB
.1a8977	08		php		                PHP
.1a8978	c2 10		rep #$10	            REP #$10
.1a897a	e2 20		sep #$20	            SEP #$20
.1a897c	a5 31		lda $0879	                LDA MARG_LEN
.1a897e	c9 03		cmp #$03	                CMP #3
.1a8980	f0 0f		beq $1a8991	                BEQ get_arguments
.1a8982	a2 f1 89	ldx #$89f1	                LDX #<>MERRARGS                 ; Print bad arguments error
.1a8985	a9 1a		lda #$1a	                LDA #`MERRARGS
.1a8987	48		pha		                PHA
.1a8988	ab		plb		                PLB
.1a8989	20 64 04	jsr $1a0464	            JSR PRINTS
.1a898c	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a898f	80 54		bra $1a89e5	                BRA done
.1a8991					get_arguments
.1a8991	c2 20		rep #$20	            REP #$20
.1a8993	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.1a8995	8f 23 08 00	sta $000823	                STA ARGUMENT1
.1a8999	a5 0f		lda $0857	                LDA MARG1+2
.1a899b	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.1a899f	20 e4 6a	jsr $1a6ae4	            JSR SETFILEDESC
.1a89a2	a5 11		lda $0859	                LDA MARG2                       ; Set the starting address
.1a89a4	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a89a8	a5 13		lda $085b	                LDA MARG2+2
.1a89aa	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a89ae	a5 15		lda $085d	                LDA MARG3                       ; Set the ending address
.1a89b0	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a89b4	a5 17		lda $085f	                LDA MARG3+2
.1a89b6	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a89ba	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                     ; Save the data
.1a89be	b0 25		bcs $1a89e5	                BCS done
.1a89c0					error
.1a89c0	e2 20		sep #$20	            SEP #$20
.1a89c2	a2 01 8a	ldx #$8a01	                LDX #<>MCANTSAVE                ; Print bad arguments error
.1a89c5	a9 1a		lda #$1a	                LDA #`MCANTSAVE
.1a89c7	48		pha		                PHA
.1a89c8	ab		plb		                PLB
.1a89c9	20 64 04	jsr $1a0464	            JSR PRINTS
.1a89cc	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.1a89d0	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a89d3	a9 20		lda #$20	                LDA #' '
.1a89d5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a89d8	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.1a89dc	20 8e 04	jsr $1a048e	            JSR PRHEXB
.1a89df	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a89e2	20 d7 03	jsr $1a03d7	            JSR PRINTCR
.1a89e5	28		plp		done            PLP
.1a89e6	ab		plb		                PLB
.1a89e7	6b		rtl		                RTL
.1a89e8	5c bf 27 1a	jmp $1a27bf	IMEXIT          JML INTERACT
.1a89ec	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.1a89ed	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.1a89ee	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.1a89ef	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.1a89f0	00		brk #		IMDOS           BRK ; Execute DOS command
.1a89f1					MMESSAGES
>1a89f1	42 61 64 20 61 72 67 75		MERRARGS        .null "Bad arguments",CHAR_CR,CHAR_CR
>1a89f9	6d 65 6e 74 73 0d 0d 00
>1a8a01	55 6e 61 62 6c 65 20 74		MCANTSAVE       .null "Unable to save file: "
>1a8a09	6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>1a8a17	55 6e 61 62 6c 65 20 74		MCANTLOAD       .null "Unable to load file: "
>1a8a1f	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00
>1a8a2d	0d 20 20 50 43 20 20 20		mregisters_msg  .null $0D,"  PC     A    X    Y    SP   DBR DP   NVMXDIZC",CHAR_CR
>1a8a35	20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>1a8a45	20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>1a8a55	56 4d 58 44 49 5a 43 0d 00
>1a8a5e	41 43 44 46 47 4a 48 4c		MCOMMANDS       .null "ACDFGJHLMR;STVWX>?"
>1a8a66	4d 52 3b 53 54 56 57 58 3e 3f 00

;******  Return to file: src\basic816.s

.1a8a71	18		clc		START       CLC                 ; Go to native mode
.1a8a72	fb		xce		            XCE
.1a8a73	08		php		            PHP
.1a8a74	c2 20		rep #$20	            REP #$20
.1a8a76	48		pha		            PHA
.1a8a77	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a8a7a	5b		tcd		            TCD
.1a8a7b	68		pla		            PLA
.1a8a7c	28		plp		            PLP
.1a8a7d	08		php		            PHP
.1a8a7e	e2 20		sep #$20	            SEP #$20
.1a8a80	48		pha		            PHA
.1a8a81	a9 00		lda #$00	            LDA #BASIC_BANK
.1a8a83	48		pha		            PHA
.1a8a84	ab		plb		            PLB
.1a8a85	68		pla		            PLA
.1a8a86	28		plp		            PLP
.1a8a87	c2 30		rep #$30	            REP #$30
.1a8a89	20 b0 8a	jsr $1a8ab0	            JSR INITBASIC
.1a8a8c	a9 ff fe	lda #$feff	            LDA #STACK_END      ; Set the system stack
.1a8a8f	1b		tcs		            TCS
.1a8a90	08		php		            PHP
.1a8a91	e2 20		sep #$20	            SEP #$20
.1a8a93	48		pha		            PHA
.1a8a94	a9 1a		lda #$1a	            LDA #`GREET
.1a8a96	48		pha		            PHA
.1a8a97	ab		plb		            PLB
.1a8a98	68		pla		            PLA
.1a8a99	28		plp		            PLP
.1a8a9a	a2 77 d2	ldx #$d277	            LDX #<>GREET
.1a8a9d	20 64 04	jsr $1a0464	            JSR PRINTS
.1a8aa0	08		php		            PHP
.1a8aa1	e2 20		sep #$20	            SEP #$20
.1a8aa3	48		pha		            PHA
.1a8aa4	a9 00		lda #$00	            LDA #BASIC_BANK
.1a8aa6	48		pha		            PHA
.1a8aa7	ab		plb		            PLB
.1a8aa8	68		pla		            PLA
.1a8aa9	28		plp		            PLP
.1a8aaa	4c bf 27	jmp $1a27bf	            JMP INTERACT        ; Start accepting input from the user
.1a8aad	4c ad 8a	jmp $1a8aad	WAIT        JMP WAIT
.1a8ab0					INITBASIC
.1a8ab0	08		php		            PHP
.1a8ab1	20 34 03	jsr $1a0334	            JSR INITIO
.1a8ab4	20 53 50	jsr $1a5053	            JSR CMD_NEW
.1a8ab7	28		plp		            PLP
.1a8ab8	60		rts		            RTS
>1ad277	43 32 35 36 20 46 6f 65		GREET       .text "C256 Foenix BASIC816 "
>1ad27f	6e 69 78 20 42 41 53 49 43 38 31 36 20

;******  Processing file: src\version.s

>1ad28c	76 30 2e 32 2e 30 2d 61		.text "v0.2.0-alpha+409"
>1ad294	6c 70 68 61 2b 34 30 39

;******  Return to file: src\basic816.s

>1ad29c	0d 00				            .byte 13,0

;******  End of listing
