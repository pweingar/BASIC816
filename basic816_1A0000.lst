
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D SYSTEM=2 -D C256_SKU=2 -D UARTSUPPORT= -D UNITTEST=0 -D TRACE_LEVEL=0 --long-address --flat -b --m65816 --intel-hex -o basic816_1A0000.hex --list=basic816_1A0000.lst --labels=basic816_1A0000.lbl src\basic816.s
; Tue Apr 06 16:08:38 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					SYSTEM=2
=2					C256_SKU=2
=					UARTSUPPORT=
=0					UNITTEST=0
=0					TRACE_LEVEL=0

;******  Processing input file: src\basic816.s


;******  Processing file: src\constants.s

=2					SYSTEM_C256 = 2         ; C256 Foenix
=1					SYSTEM_C64 = 1          ; Commodore 64 with SuperCPU
=$03					CHAR_CTRL_C = $03       ; CTRL-C: used as a program interrupt key
=$07					CHAR_BELL = $07         ; Ring the console bell
=$08					CHAR_BS = $08           ; Backspace
=$09					CHAR_TAB = $09          ; TAB
=$0a					CHAR_LF = $0A           ; Linefeed
=$0d					CHAR_CR = $0D           ; Carriage Return
=$0f					CHAR_INS = $0F          ; Insert
=$1b					CHAR_ESC = $1B          ; Escape
=$22					CHAR_DQUOTE = $22       ; Double quote
=$20					CHAR_SP = $20           ; Space
=$7f					CHAR_DEL = $7F          ; Delete
=5					ARGUMENT_SIZE = 5       ; Number of bytes in an argument
=8					VAR_NAME_SIZE = 8       ; Maximum number of characters in a variable name
=0					TYPE_INTEGER = 0        ; 32-bit integer
=1					TYPE_FLOAT = 1          ; Single-precision floating point
=2					TYPE_STRING = 2         ; ASCII string
=$80					TYPE_ARR_INTEGER = $80  ; Array of 32-bit integers
=$81					TYPE_ARR_FLOAT = $81    ; Array of 32-bit floats
=$82					TYPE_ARR_STRING = $82   ; Array of strings
=$7f					TYPE_BINDING = $7F      ; A variable name binding
=$ff					TYPE_NAV = $FF          ; Not-A-Value
=0					ERR_OK = 0              ; No error
=1					ERR_BREAK = 1           ; The user pressed an interrupt key
=2					ERR_SYNTAX = 2          ; A syntax error was found on the current line
=3					ERR_MEMORY = 3          ; Out of memory
=4					ERR_TYPE = 4            ; Type mismatch error
=5					ERR_NOTFOUND = 5        ; Variable not found error
=6					ERR_NOLINE = 6          ; Line number not found
=7					ERR_STACKUNDER = 7      ; Stack underflow error
=8					ERR_STACKOVER = 8       ; Stack overflow error
=9					ERR_RANGE = 9           ; Out-of-range error
=10					ERR_ARGUMENT = 10       ; Bad argument error
=11					ERR_NOFILE = 11         ; File not found error
=12					ERR_NAN = 12            ; Floating point math resulted in something that is not a number
=13					ERR_OVERFLOW = 13       ; Math operation overflowed
=14					ERR_UNDERFLOW = 14      ; Math operation underflowed
=15					ERR_DIV0 = 15           ; Math operation involved a division by zero
=16					ERR_DIRECTORY = 16      ; Error reading the directory
=17					ERR_LOAD = 17           ; Could not load file
=18					ERR_SAVE = 18           ; Could not save a file
=19					ERR_DELETE = 19         ; Could not delete a file
=20					ERR_FILENOTFOUND = 20   ; Could not find the file
=21					ERR_DIRNOTWRITE = 21    ; Could not update the directory entry
=22					ERR_NOTCOPIED = 22      ; Could not copy the file
=23					ERR_DOMAIN = 23         ; Mathematical functions domain error

;******  Return to file: src\basic816.s


;******  Processing file: src\memorymap.s


;******  Processing file: src\C256/mmap_c256.s

=1					SYS_C256_FMX = 1        ; System SKU for C256 Foenix FMX
=2					SYS_C256_USER = 2       ; System SKU for C256 Foenix User

;******  Processing file: src\C256/page_00_inc.s

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Unsigned divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 0 Divisor ex B in A/B
=$000114				D0_RESULT        = $000114 ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Signed divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 1 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/int_math_defs.s

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B
=$af1400				SIGNED32_MULT_A     = $AF1400
=$af1404				SIGNED32_MULT_B     = $AF1404
=$af1408				SIGNED32_MULT_OUT   = $AF1408

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/vicky_def.s

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				GAMMA_CTRL_REG          = $AF0002
=$01					GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02					GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08					GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10					HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af0900				VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01					VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02					VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901				VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902				VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903				VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80					VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000

;******  Processing file: src\C256/VKYII_CFP9553_BITMAP_def.s

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_TILEMAP_def.s

=$01					TILE_Enable             = $01
=0					TILEMAP_CONTROL         = 0             ; Offset to a tile map's control register
=1					TILEMAP_START_ADDY      = 1             ; Offset to a tile map's address
=4					TILEMAP_TOTAL_X         = 4             ; Offset to a tile map's width
=6					TILEMAP_TOTAL_Y         = 6             ; Offset to a tile map's height
=8					TILEMAP_WINDOW_X        = 8             ; Offset to a tile map's X position
=10					TILEMAP_WINDOW_Y        = 10            ; Offset to a tile map's Y position
=1					TILEMAP_VISIBLE         = 1             ; Tile map is visible flag
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=2					TILESET_ADDY_H          = 2             ; Offset to high byte of tile set address
=3					TILESET_ADDY_CFG        = 3             ; Offset to the tile set address configuration
=$08					TILESET_SQUARE_256      = $08
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SDMA_def.s

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_VDMA_def.s

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$10					VDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					VDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SPRITE_def.s

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\C256/vicky_def.s


;******  Return to file: src\C256/mmap_c256.s

=$00					BASIC_BANK = $00            ; Memory bank for default purposes
=$004c00				IOBUF = $004C00             ; A buffer for I/O operations
=$004d00				ARRIDXBUF = $004D00         ; The array index buffer used for array references
=$004e00				TEMPBUF = $004E00           ; Temporary buffer for string processing, etc.
=$004f00				INPUTBUF = $004F00          ; Starting address of the line input buffer (one page)
=$005000				RETURN_BOT = $005000        ; Starting address of the return stack
=$005fff				RETURN_TOP = $005FFF        ; Ending address of the return stack
=$006000				ARGUMENT_BOT = $006000      ; Starting address of the argument stack
=$006fff				ARGUMENT_TOP = $006FFF      ; Ending address of the argument stack
=$007000				OPERATOR_BOT = $007000      ; Starting address of the operator stack
=$007fff				OPERATOR_TOP = $007FFF      ; Ending address of the operator stack
=$b00000				VRAM = $B00000              ; Start of video RAM
=$010000				LOADBLOCK = $010000         ; File loading will start here
=$360000				BASIC_BOT := $360000         ; Starting point for BASIC programs
=$37ffff				HEAP_TOP := $37FFFF          ; Starting point of the heap
=$160000				BASIC_BOT := $160000         ; Starting point for BASIC programs
=$17ffff				HEAP_TOP := $17FFFF          ; Starting point of the heap

;******  Return to file: src\memorymap.s

=$00ffe6				VBRK = $00FFE6          ; Vector for the native-mode BRK vector
=$1ad000				DATA_BLOCK = *
=$000800				GLOBAL_VARS = *
>0800					BIP         .dword ?    ; Pointer to the current byte in the current BASIC program
>0804					BIPPREV     .dword ?    ; Pointer to the previous bytein the current BASIC program
>0808					INDEX       .dword ?    ; A temporary pointer
>080c					SCRATCH     .dword ?    ; A temporary scratch variable
>0810					SCRATCH2    .dword ?    ; A temporary scratch variable
>0814					            .word  ?	; Need a few more bits for BCD conversion
>0816					STRPTR      .dword ?    ; A temporary pointer for strings
>081a					CURLINE     .dword ?    ; Pointer to the current input line needing tokenization
>081e					CURTOKLEN   .byte ?     ; Length of the text of the current token
>081f					ARGUMENTSP  .word ?     ; Pointer to the top of the argument stack
>0821					OPERATORSP  .word ?     ; Pointer to the top of the operator stack
>0823					ARGUMENT1   .dword ?    ; Argument 1 for expression calculations
>0827					ARGTYPE1    .byte ?     ; Type code for argument 1 (integer, float, string)
>0828					SIGN1       .byte ?     ; Temporary sign marker for argument 1
>0829					ARGUMENT2   .dword ?    ; Argument 2 for expression calculations
>082d					ARGTYPE2    .byte ?     ; Type code for argument 2 (integer, float, string)
>082e					SIGN2       .byte ?     ; Temporary sign marker for argument 1
>082f					JMP16PTR    .word ?     ; Pointer for 16-bit indirect jumps (within BASIC816's code base)
>0831					GOSUBDEPTH  .word ?     ; Number of GOSUBs on the stack
>0833					RETURNSP    .word ?     ; Pointer to the top of the return stack
>0835					SKIPNEST    .byte ?     ; Flag to indicate if token seeking should respect nesting (MSB set if so)
>0836					NESTING     .byte ?     ; Counter of the depth of lexical nesting for FOR/NEXT, DO/LOOP
>0837					TARGETTOK   .byte ?     ; When searching for a token, TARGETTOK is the token to find
>0838					DATABIP     .dword ?    ; Pointer to the next data element for READ statements
>083c					DATALINE    .dword ?    ; Pointer to the current line for a DATA statement
>0840					SAVEBIP     .dword ?    ; Spot to save BIP temporarily
>0844					SAVELINE    .dword ?    ; Spot to save CURLINE temporarily
=$000848				MONITOR_VARS = *
>0848					MCMDADDR    .long ?     ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
>084b					MCMP_TEXT   .long ?     ;3 Bytes Address of symbol being evaluated for COMPARE routine
>084e					MCMP_LEN    .word ?     ;2 Bytes Length of symbol being evaluated for COMPARE routine
>0850					MCMD        .long ?     ;3 Bytes Address of the current command/function string
>0853					MCMD_LEN    .word ?     ;2 Bytes Length of the current command/function string
>0855					MARG1       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command
>0859					MARG2       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>085d					MARG3       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0861					MARG4       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0865					MARG5       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0869					MARG6       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>086d					MARG7       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0871					MARG8       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0875					MARG9       .dword ?    ;4 Bytes First command argument.
>0879					MARG_LEN    .byte ?     ;1 Byte count of the number of arguments passed
>087a					MCURSOR     .dword ?    ;4 Bytes Pointer to the current memory location for disassembly, memory dump, etc.
>087e					MLINEBUF    .fill 17    ;17 Byte buffer for dumping memory (TODO: could be moved to a general string scratch area)
>088f					MCOUNT      .long ?     ;2 Byte counter
>0892					MTEMP       .dword ?    ;4 Bytes of temporary space
>0896					MCPUSTAT    .byte ?     ;1 Byte to represent what the disassembler thinks the processor MX bits are
>0897					MADDR_MODE  .byte ?     ;1 Byte address mode found by the assembler
>0898					MPARSEDNUM  .dword ?    ;4 Bytes to store a parsed number
>089c					MMNEMONIC   .word ?     ;2 Byte address of mnemonic found by the assembler
>089e					MTEMPPTR    .dword ?    ;4 Byte temporary pointer
>08a2					MJUMPINST   .byte ?     ;1 Byte JSL opcode
>08a3					MJUMPADDR   .long ?     ;3 Byte address for JSL
=$000823				MANTISSA1 = ARGUMENT1
=$000826				EXPONENT1 = ARGUMENT1+3

;******  Return to file: src\basic816.s


;******  Processing file: src\macros.s


;******  Return to file: src\basic816.s

.1a0000	5c 25 85 1a	jmp $1a8525	COLDBOOT        JML START               ; Entry point to boot up BASIC from scratch
.1a0004	5c 34 6b 1a	jmp $1a6b34	MONITOR         JML IMONITOR            ; Entry point to the machine language monitor
.1a0008	5c 96 25 1a	jmp $1a2596	READLINE        JML IREADLINE           ; Wait for the user to enter a line of text (for programming input)
.1a000c	5c 5b 01 1a	jmp $1a015b	SCRCOPYLINE     JML ISCRCPYLINE         ; Copy the line on the screen the user just input to INPUTBUF
.1a0010	5c 58 00 1a	jmp $1a0058	INPUTLINE       JML IINPUTLINE          ; Read a single line of text from the user, and copy it to TEMPBUF (for INPUT statement)
.1a0014	5c d6 00 1a	jmp $1a00d6	GETKEY          JML IGETKEY             ; Wait for a keypress by the user and return the ASCII code in A
.1a0018	5c c1 02 1a	jmp $1a02c1	PRINTC          JML IPRINTC             ; Print the character in A to the console
.1a001c	5c ff 00 1a	jmp $1a00ff	SHOWCURSOR      JML ISHOWCURSOR         ; Set cursor visibility: A=0, hide... A<>0, show.
.1a0020	5c 1a 01 1a	jmp $1a011a	CURSORXY        JML ICURSORXY           ; Set the position of the cursor to (X, Y)
.1a0024	5c 21 01 1a	jmp $1a0121	CLSCREEN        JML ICLSCREEN           ; Clear the screen

;******  Processing file: src\bios.s


;******  Processing file: src\membuffers.s

>08a6					OBUFFER     .long ?     ; Pointer to the current text memory buffer for output
>08a9					OBUFFSIZE   .word ?     ; Maximum size of output text memory buffer
>08ab					OBUFFIDX    .word ?     ; Index into the current output buffer
>08ad					IBUFFER     .long ?     ; Pointer to the current text memory buffer for input
>08b0					IBUFFSIZE   .word ?     ; Number of bytes written to the buffer
>08b2					IBUFFIDX    .word ?     ; Index into the current input buffer (next available character)
.1a0028					OBUFF_PUTC
.1a0028	0b		phd		                PHD
.1a0029	08		php		                PHP
.1a002a	08		php		            PHP
.1a002b	c2 20		rep #$20	            REP #$20
.1a002d	48		pha		            PHA
.1a002e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0031	5b		tcd		            TCD
.1a0032	68		pla		            PLA
.1a0033	28		plp		            PLP
.1a0034	e2 20		sep #$20	            SEP #$20
.1a0036	85 b5		sta $08b5	                STA SAVE_A
.1a0038	c2 20		rep #$20	            REP #$20
.1a003a	a5 a6		lda $08a6	                LDA OBUFFER
.1a003c	d0 06		bne $1a0044	                BNE has_buffer
.1a003e	e2 20		sep #$20	            SEP #$20
.1a0040	a5 a8		lda $08a8	                LDA OBUFFER+2
.1a0042	f0 11		beq $1a0055	                BEQ done
.1a0044					has_buffer
.1a0044	c2 10		rep #$10	            REP #$10
.1a0046	a4 ab		ldy $08ab	                LDY OBUFFIDX        ; Check to make sure there is room
.1a0048	c4 a9		cpy $08a9	                CPY OBUFFSIZE
.1a004a	f0 09		beq $1a0055	                BEQ done            ; If not, exit silently
.1a004c	e2 20		sep #$20	            SEP #$20
.1a004e	a5 b5		lda $08b5	                LDA SAVE_A
.1a0050	97 a6		sta [$08a6],y	                STA [OBUFFER],Y     ; Write the character to the buffer
.1a0052	c8		iny		                INY                 ; Increment the index
.1a0053	84 ab		sty $08ab	                STY OBUFFIDX
.1a0055	28		plp		done            PLP
.1a0056	2b		pld		                PLD
.1a0057	60		rts		            RTS

;******  Return to file: src\bios.s


;******  Processing file: src\C256/io_c256.s


;******  Processing file: src\C256/kernel_c256.s

=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/RTC_inc.s

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/keyboard.s


;******  Processing file: src\C256/keyboard_def.s

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04

;******  Return to file: src\C256/keyboard.s

.1a0058					IINPUTLINE
.1a0058	08		php		                PHP
.1a0059	c2 10		rep #$10	            REP #$10
.1a005b	e2 20		sep #$20	            SEP #$20
.1a005d	a9 01		lda #$01	                LDA #1              ; Show the cursor
.1a005f	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a0062	a2 00 00	ldx #$0000	                LDX #0
.1a0065	a9 00		lda #$00	                LDA #0
.1a0067	9f 00 4c 00	sta $004c00,x	zero_loop       STA @lIOBUF,X
.1a006b	e8		inx		                INX
.1a006c	e0 00 01	cpx #$0100	                CPX #$100
.1a006f	d0 f6		bne $1a0067	                BNE zero_loop
.1a0071	a2 00 00	ldx #$0000	                LDX #0
.1a0074					getchar
.1a0074	20 14 00	jsr $1a0014	            JSR GETKEY
.1a0077	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; Got a CR?
.1a0079	d0 03		bne $1a007e	                BNE not_cr
.1a007b	4c cf 00	jmp $1a00cf	                JMP endofline       ; Yes: we're done
.1a007e	c9 9d		cmp #$9d	not_cr          CMP #K_LEFT         ; Is it the left cursor?
.1a0080	d0 08		bne $1a008a	                BNE not_left
.1a0082	e0 00 00	cpx #$0000	                CPX #0              ; Are we all the way to the left?
.1a0085	f0 ed		beq $1a0074	                BEQ getchar         ; Yes: ignore it
.1a0087	ca		dex		                DEX                 ; Move the cursor back
.1a0088	80 39		bra $1a00c3	                BRA echo            ; And echo it
.1a008a	c9 1d		cmp #$1d	not_left        CMP #K_RIGHT        ; Is it the right arrow?
.1a008c	d0 0e		bne $1a009c	                BNE not_right
.1a008e	bf 00 4c 00	lda $004c00,x	                LDA @lIOBUF,X       ; Check the current character
.1a0092	f0 e0		beq $1a0074	                BEQ getchar         ; If it's already blank, we're as far right as we go
.1a0094	e0 4f 00	cpx #$004f	                CPX #79             ; Are we at the end of the line?
.1a0097	f0 db		beq $1a0074	                BEQ getchar         ; Yes: ignore it
.1a0099	e8		inx		                INX                 ; Otherwise: advance the cursor
.1a009a	80 27		bra $1a00c3	                BRA echo            ; And print the code
.1a009c	c9 08		cmp #$08	not_right       CMP #CHAR_BS        ; Is it a backspace?
.1a009e	d0 1a		bne $1a00ba	                BNE not_bs
.1a00a0	e0 00 00	cpx #$0000	                CPX #0              ; Are we at the beginning of the line?
.1a00a3	f0 cf		beq $1a0074	                BEQ getchar         ; yes: ignore the backspace
.1a00a5	da		phx		                PHX                 ; Save the cursor position
.1a00a6	bf 01 4c 00	lda $004c01,x	clr_loop        LDA @lIOBUF+1,X     ; Get the character above
.1a00aa	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the current position
.1a00ae	f0 06		beq $1a00b6	                BEQ done_clr        ; If we copied a NUL, we're done copying
.1a00b0	e8		inx		                INX                 ; Otherwise, keep copying down
.1a00b1	e0 ff 00	cpx #$00ff	                CPX #$FF            ; Until we're at the end of the buffer
.1a00b4	d0 f0		bne $1a00a6	                BNE clr_loop
.1a00b6	fa		plx		done_clr        PLX                 ; Restore the cursor position
.1a00b7	ca		dex		                DEX                 ; No: move the cursor left
.1a00b8	80 0e		bra $1a00c8	                BRA print_bs        ; And print the backspace
.1a00ba	c9 20		cmp #$20	not_bs          CMP #$20            ; Is it in range 00 -- 1F?
.1a00bc	90 b6		bcc $1a0074	                BLT getchar         ; Yes: ignore it
.1a00be	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the input buffer
.1a00c2	e8		inx		                INX                 ; Move the cursor forward
.1a00c3					echo
.1a00c3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00c6	80 ac		bra $1a0074	                BRA getchar         ; And get another...
.1a00c8	a9 08		lda #$08	print_bs        LDA #CHAR_BS        ; Backspace character...
.1a00ca	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00cd	80 a5		bra $1a0074	                BRA getchar         ; And get another...
.1a00cf	a9 00		lda #$00	endofline       LDA #0              ; Hide the cursor
.1a00d1	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a00d4	28		plp		                PLP
.1a00d5	60		rts		            RTS
.1a00d6					IGETKEY
.1a00d6	22 4c 10 00	jsl $00104c	                JSL FK_GETCHW
.1a00da	60		rts		            RTS
.1a00db					GETKEYE
.1a00db	20 14 00	jsr $1a0014	            JSR GETKEY
.1a00de	48		pha		                PHA
.1a00df	20 18 00	jsr $1a0018	            JSR PRINTC
.1a00e2	68		pla		                PLA
.1a00e3	60		rts		            RTS
=$11					K_UP = $11      ; Keypad UP
=$1d					K_RIGHT = $1D   ; Keypad Right
=$91					K_DOWN = $91    ; Keypad Down
=$9d					K_LEFT = $9D    ; Keypad Left

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/screen.s

.1a00e4					ENSURETEXT
.1a00e4	08		php		            PHP
.1a00e5	e2 20		sep #$20	            SEP #$20
.1a00e7	af 00 00 af	lda $af0000	            LDA @l MASTER_CTRL_REG_L            ; Get the current display mode
.1a00eb	89 3c		bit #$3c	            BIT #Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_TileMap_En | Mstr_Ctrl_Sprite_En
.1a00ed	f0 08		beq $1a00f7	            BEQ textonly                        ; If not, make sure text is enabled
.1a00ef					overlay
.1a00ef	09 03		ora #$03	            ORA #Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay
.1a00f1	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.1a00f5	80 06		bra $1a00fd	            BRA done
.1a00f7					textonly
.1a00f7	09 01		ora #$01	            ORA #Mstr_Ctrl_Text_Mode_En
.1a00f9	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.1a00fd	28		plp		done        PLP
.1a00fe	60		rts		            RTS
.1a00ff					ISHOWCURSOR
.1a00ff	08		php		            PHP
.1a0100	e2 20		sep #$20	            SEP #$20
.1a0102	c9 00		cmp #$00	            CMP #0
.1a0104	f0 08		beq $1a010e	            BEQ hide
.1a0106	af 10 00 af	lda $af0010	show        LDA @lVKY_TXT_CURSOR_CTRL_REG
.1a010a	09 01		ora #$01	            ORA #Vky_Cursor_Enable
.1a010c	80 06		bra $1a0114	            BRA setit
.1a010e	af 10 00 af	lda $af0010	hide        LDA @lVKY_TXT_CURSOR_CTRL_REG
.1a0112	29 fe		and #$fe	            AND #~Vky_Cursor_Enable
.1a0114	8f 10 00 af	sta $af0010	setit       STA @lVKY_TXT_CURSOR_CTRL_REG
.1a0118	28		plp		            PLP
.1a0119	60		rts		            RTS
.1a011a					ICURSORXY
.1a011a	08		php		            PHP
.1a011b	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.1a011f	28		plp		            PLP
.1a0120	60		rts		            RTS
.1a0121					ICLSCREEN
.1a0121	48		pha		            PHA
.1a0122	da		phx		            PHX
.1a0123	5a		phy		            PHY
.1a0124	0b		phd		            PHD
.1a0125	08		php		            PHP
.1a0126	e2 20		sep #$20	            SEP #$20
.1a0128	c2 10		rep #$10	            REP #$10
.1a012a	a2 00 00	ldx #$0000	            LDX #0
.1a012d	a9 20		lda #$20	loop        LDA #$20
.1a012f	9f 00 a0 af	sta $afa000,x	            STA @lCS_TEXT_MEM_PTR,X     ; Write a space in the text cell
.1a0133	af 1e 00 00	lda $00001e	            LDA @lCURCOLOR
.1a0137	9f 00 c0 af	sta $afc000,x	            STA @lCS_COLOR_MEM_PTR,X    ; Set the color to green on black
.1a013b	e8		inx		            INX                         ; Move to the next character cell
.1a013c	e0 00 20	cpx #$2000	            CPX #$2000
.1a013f	d0 ec		bne $1a012d	            BNE loop
.1a0141	08		php		            PHP
.1a0142	c2 20		rep #$20	            REP #$20
.1a0144	48		pha		            PHA
.1a0145	a9 00 00	lda #$0000	            LDA #0
.1a0148	5b		tcd		            TCD
.1a0149	68		pla		            PLA
.1a014a	28		plp		            PLP
.1a014b	a2 00 00	ldx #$0000	            LDX #0                      ; Set cursor to upper-left corner
.1a014e	a0 00 00	ldy #$0000	            LDY #0
.1a0151	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.1a0155	28		plp		            PLP
.1a0156	2b		pld		            PLD
.1a0157	7a		ply		            PLY
.1a0158	fa		plx		            PLX
.1a0159	68		pla		            PLA
.1a015a	60		rts		            RTS
.1a015b					ISCRCPYLINE
.1a015b	da		phx		            PHX
.1a015c	5a		phy		            PHY
.1a015d	0b		phd		            PHD
.1a015e	08		php		            PHP
.1a015f	08		php		            PHP
.1a0160	c2 20		rep #$20	            REP #$20
.1a0162	48		pha		            PHA
.1a0163	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0166	5b		tcd		            TCD
.1a0167	68		pla		            PLA
.1a0168	28		plp		            PLP
.1a0169	c2 30		rep #$30	            REP #$30
.1a016b	af 0c 00 00	lda $00000c	            LDA @lSCREENBEGIN       ; Set INDEX to the first byte of the text screen
.1a016f	85 08		sta $0808	            STA INDEX
.1a0171	e2 20		sep #$20	            SEP #$20
.1a0173	af 0e 00 00	lda $00000e	            LDA @lSCREENBEGIN+2
.1a0177	c2 20		rep #$20	            REP #$20
.1a0179	29 ff 00	and #$00ff	            AND #$00FF
.1a017c	85 0a		sta $080a	            STA INDEX+2
.1a017e	af 11 00 00	lda $000011	            LDA @lCOLS_PER_LINE     ; Calculate the offset to the current line
.1a0182	8f 08 01 00	sta $000108	            STA @lM1_OPERAND_A
.1a0186	af 1c 00 00	lda $00001c	            LDA @lCURSORY
.1a018a	3a		dec a		            DEC A
.1a018b	8f 0a 01 00	sta $00010a	            STA @lM1_OPERAND_B
.1a018f	18		clc		            CLC                     ; And add it to INDEX
.1a0190	a5 08		lda $0808	            LDA INDEX
.1a0192	6f 0c 01 00	adc $00010c	            ADC @lM1_RESULT
.1a0196	85 08		sta $0808	            STA INDEX
.1a0198	a5 0a		lda $080a	            LDA INDEX+2
.1a019a	69 00 00	adc #$0000	            ADC #0
.1a019d	85 0a		sta $080a	            STA INDEX+2
.1a019f	e2 20		sep #$20	            SEP #$20
.1a01a1	af 0f 00 00	lda $00000f	            LDA @lCOLS_VISIBLE
.1a01a5	85 8f		sta $088f	            STA MCOUNT
.1a01a7	a0 00 00	ldy #$0000	            LDY #0
.1a01aa	a2 00 00	ldx #$0000	            LDX #0
.1a01ad	b7 08		lda [$0808],y	copy_loop   LDA [INDEX],Y           ; Copy a byte from the screen to the input buffer
.1a01af	9f 00 4f 00	sta $004f00,x	            STA @lINPUTBUF,X
.1a01b3	e8		inx		            INX
.1a01b4	c8		iny		            INY
.1a01b5	c4 8f		cpy $088f	            CPY MCOUNT
.1a01b7	d0 f4		bne $1a01ad	            BNE copy_loop
.1a01b9	ca		dex		            DEX
.1a01ba	bf 00 4f 00	lda $004f00,x	trim_loop   LDA @lINPUTBUF,X        ; Replace spaces at the end with NULLs
.1a01be	c9 20		cmp #$20	            CMP #CHAR_SP
.1a01c0	d0 09		bne $1a01cb	            BNE done
.1a01c2	a9 00		lda #$00	            LDA #0
.1a01c4	9f 00 4f 00	sta $004f00,x	            STA @lINPUTBUF,X
.1a01c8	ca		dex		            DEX
.1a01c9	10 ef		bpl $1a01ba	            BPL trim_loop
.1a01cb	28		plp		done        PLP
.1a01cc	2b		pld		            PLD
.1a01cd	7a		ply		            PLY
.1a01ce	fa		plx		            PLX
.1a01cf	60		rts		            RTS

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/gabe_defs.s

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04					GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08					GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01					GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02					GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10					GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20					GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40					GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80					GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04					GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10					GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a				GABE_SUBVERSION_LO  = $AFE88A
=$afe88b				GABE_SUBVERSION_HI  = $AFE88B
=$afe88c				GABE_VERSION_LO     = $AFE88C
=$afe88d				GABE_VERSION_HI     = $AFE88D
=$afe88e				GABE_MODEL_LO       = $AFE88E
=$afe88f				GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\C256/io_c256.s

=32					BORDER_WIDTH = 32               ; The width of the border (when it is on)
=72					TEXT_COLS_WB = 72               ; Number of columns of text with the border enabled
=52					TEXT_ROWS_WB = 52               ; Number of rows of text with the border enabled
=80					TEXT_COLS_WOB = 80              ; Number of columns of text with no border enabled
=60					TEXT_ROWS_WOB = 60              ; Number of rows of text with no border enabled
.1a01d0					INITIO
.1a01d0	e2 20		sep #$20	            SEP #$20
.1a01d2	20 1b 02	jsr $1a021b	            JSR INITRNG
.1a01d5	a9 48		lda #$48	            LDA #TEXT_COLS_WB   ; Make sure the screen size is right
.1a01d7	8f 0f 00 00	sta $00000f	            STA @lCOLS_VISIBLE  ; TODO: remove this when the kernel is correct
.1a01db	a9 34		lda #$34	            LDA #TEXT_ROWS_WB
.1a01dd	8f 13 00 00	sta $000013	            STA @lLINES_VISIBLE
.1a01e1	a9 20		lda #$20	            LDA #BORDER_WIDTH   ; Set the border width
.1a01e3	8f 08 00 af	sta $af0008	            STA BORDER_X_SIZE
.1a01e7	8f 09 00 af	sta $af0009	            STA BORDER_Y_SIZE
.1a01eb	a2 00 00	ldx #$0000	            LDX #0              ; Clear all the sprite control shadow registers
.1a01ee	a9 00		lda #$00	            LDA #0
.1a01f0	9f 18 f0 1a	sta $1af018,x	sp_loop     STA GS_SP_CONTROL,X
.1a01f4	e8		inx		            INX
.1a01f5	e0 40 00	cpx #$0040	            CPX #SP_MAX
.1a01f8	d0 f6		bne $1a01f0	            BNE sp_loop
.1a01fa	a9 80		lda #$80	            LDA #DEV_SCREEN
.1a01fc	8f b4 08 00	sta $0008b4	            STA @lBCONSOLE
.1a0200	e2 20		sep #$20	            SEP #$20
.1a0202	a9 00		lda #$00	            LDA #0                  ; Clear the lock key flags
.1a0204	8f 89 0f 00	sta $000f89	            STA @lKEYBOARD_LOCKS
.1a0208	a9 00		lda #$00	            LDA #0
.1a020a	8f 00 02 af	sta $af0200	            STA @l TL0_CONTROL_REG
.1a020e	8f 0c 02 af	sta $af020c	            STA @l TL1_CONTROL_REG
.1a0212	8f 18 02 af	sta $af0218	            STA @l TL2_CONTROL_REG
.1a0216	8f 24 02 af	sta $af0224	            STA @l TL3_CONTROL_REG
.1a021a					done
.1a021a	60		rts		            RTS
.1a021b					INITRNG
.1a021b	08		php		            PHP
.1a021c	e2 20		sep #$20	            SEP #$20
.1a021e	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Pause updates to the clock registers
.1a0222	09 08		ora #$08	            ORA #%00001000
.1a0224	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.1a0228	af 00 08 af	lda $af0800	            LDA @l RTC_SEC          ; Set the random number generator seed
.1a022c	8f 84 e8 af	sta $afe884	            STA @l GABE_RNG_SEED_LO
.1a0230	af 02 08 af	lda $af0802	            LDA @l RTC_MIN
.1a0234	8f 85 e8 af	sta $afe885	            STA @l GABE_RNG_SEED_HI
.1a0238	a9 03		lda #$03	            LDA #GABE_RNG_CTRL_DV | GABE_RNG_CTRL_EN
.1a023a	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL    ; Load the seed into the RNG
.1a023e	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Re-enable updates to the clock registers
.1a0242	29 f7		and #$f7	            AND #%11110111
.1a0244	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.1a0248	ea		nop		            NOP                     ; Give the RNG some time... not sure if needed, really
.1a0249	ea		nop		            NOP
.1a024a	ea		nop		            NOP
.1a024b	a9 01		lda #$01	            LDA #GABE_RNG_CTRL_EN   ; Turn on the random number genertator
.1a024d	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL
.1a0251	28		plp		            PLP
.1a0252	60		rts		            RTS
.1a0253					SCREEN_PUTC
.1a0253	08		php		            PHP
.1a0254	e2 20		sep #$20	            SEP #$20
.1a0256	48		pha		            PHA
.1a0257	48		pha		            PHA
.1a0258	a9 00		lda #$00	            LDA #CHAN_CONSOLE       ; Switch to the console device
.1a025a	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a025e	68		pla		            PLA
.1a025f	22 18 10 00	jsl $001018	            JSL FK_PUTC
.1a0263	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.1a0267	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.1a0269	d0 f8		bne $1a0263	            BNE loop                ; Yes: wait until it's released
.1a026b	68		pla		            PLA
.1a026c	28		plp		            PLP
.1a026d	60		rts		            RTS
.1a026e					UART_PUTC
.1a026e	08		php		            PHP
.1a026f	e2 20		sep #$20	            SEP #$20
.1a0271	48		pha		            PHA
.1a0272	48		pha		            PHA
.1a0273	a9 01		lda #$01	            LDA #CHAN_COM1          ; Switch to COM1
.1a0275	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.1a0279	68		pla		            PLA
.1a027a	22 18 10 00	jsl $001018	            JSL FK_PUTC
.1a027e	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.1a0282	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.1a0284	d0 f8		bne $1a027e	            BNE loop                ; Yes: wait until it's released
.1a0286	68		pla		            PLA
.1a0287	28		plp		            PLP
.1a0288	60		rts		            RTS
.1a0289					PRINTCR
.1a0289	08		php		            PHP
.1a028a	c2 20		rep #$20	            REP #$20
.1a028c	48		pha		            PHA
.1a028d	e2 20		sep #$20	            SEP #$20
.1a028f	a9 0d		lda #$0d	            LDA #CHAR_CR
.1a0291	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0294	c2 20		rep #$20	            REP #$20
.1a0296	68		pla		            PLA
.1a0297	28		plp		            PLP
.1a0298	60		rts		            RTS
.1a0299					PRINTH
.1a0299	08		php		            PHP
.1a029a	22 78 10 00	jsl $001078	            JSL FK_IPRINTH
.1a029e	28		plp		            PLP
.1a029f	60		rts		            RTS

;******  Return to file: src\bios.s

=10					LINES_PER_PAGE = 10     ; The number of lines to print on a page before pausing
=$80					DEV_SCREEN = $80        ; Use the screen and keyboard for the console device
=$40					DEV_UART = $40          ; Use UART for console device
=$20					DEV_BUFFER = $20        ; Use the current text memory buffer for output or input
>08b4					BCONSOLE    .byte ?     ; Device for BASIC console
>08b5					SAVE_A      .byte ?     ; Save spot for the A register
>08b6					LINECOUNT   .byte ?     ; Counter for new lines to support pagination
.1a02a0					PAGINATE
.1a02a0	08		php		            PHP
.1a02a1	0b		phd		            PHD
.1a02a2	08		php		            PHP
.1a02a3	c2 20		rep #$20	            REP #$20
.1a02a5	48		pha		            PHA
.1a02a6	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a02a9	5b		tcd		            TCD
.1a02aa	68		pla		            PLA
.1a02ab	28		plp		            PLP
.1a02ac	e2 20		sep #$20	            SEP #$20
.1a02ae	a5 b6		lda $08b6	            LDA LINECOUNT           ; Check the line count
.1a02b0	1a		inc a		            INC A
.1a02b1	85 b6		sta $08b6	            STA LINECOUNT
.1a02b3	cf 13 00 00	cmp $000013	            CMP @l LINES_VISIBLE
.1a02b7	90 05		bcc $1a02be	            BLT done                ; If < limit, just return
.1a02b9	20 14 00	jsr $1a0014	            JSR GETKEY
.1a02bc	64 b6		stz $08b6	            STZ LINECOUNT           ; And reset the line count
.1a02be	2b		pld		done        PLD
.1a02bf	28		plp		            PLP
.1a02c0	60		rts		            RTS
.1a02c1					IPRINTC
.1a02c1	da		phx		            PHX
.1a02c2	5a		phy		            PHY
.1a02c3	0b		phd		            PHD
.1a02c4	08		php		            PHP
.1a02c5	08		php		            PHP
.1a02c6	c2 20		rep #$20	            REP #$20
.1a02c8	48		pha		            PHA
.1a02c9	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a02cc	5b		tcd		            TCD
.1a02cd	68		pla		            PLA
.1a02ce	28		plp		            PLP
.1a02cf	e2 20		sep #$20	            SEP #$20
.1a02d1	c2 10		rep #$10	            REP #$10
.1a02d3	8f b5 08 00	sta $0008b5	            STA @lSAVE_A
.1a02d7	af b4 08 00	lda $0008b4	chk_out     LDA @lBCONSOLE      ; Check to see if we should send to an output buffer
.1a02db	29 20		and #$20	            AND #DEV_BUFFER
.1a02dd	f0 07		beq $1a02e6	            BEQ check_scrn      ; No... move on to the hardware screen
.1a02df	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a02e3	20 28 00	jsr $1a0028	            JSR OBUFF_PUTC
.1a02e6	af b4 08 00	lda $0008b4	check_scrn  LDA @lBCONSOLE
.1a02ea	29 80		and #$80	            AND #DEV_SCREEN     ; Check to see if the screen is selected
.1a02ec	f0 07		beq $1a02f5	            BEQ send_uart
.1a02ee	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a02f2	20 53 02	jsr $1a0253	            JSR SCREEN_PUTC
.1a02f5	af b4 08 00	lda $0008b4	send_uart   LDA @lBCONSOLE
.1a02f9	29 40		and #$40	            AND #DEV_UART       ; Check to see if the UART is active
.1a02fb	f0 14		beq $1a0311	            BEQ done
.1a02fd	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.1a0301	20 6e 02	jsr $1a026e	            JSR UART_PUTC
.1a0304	af b5 08 00	lda $0008b5	            LDA @lSAVE_A        ; If sending a CR to the serial port
.1a0308	c9 0d		cmp #$0d	            CMP #CHAR_CR
.1a030a	d0 05		bne $1a0311	            BNE done
.1a030c	a9 0a		lda #$0a	            LDA #CHAR_LF        ; Send a linefeed after
.1a030e	20 6e 02	jsr $1a026e	            JSR UART_PUTC
.1a0311	28		plp		done        PLP
.1a0312	2b		pld		            PLD
.1a0313	7a		ply		            PLY
.1a0314	fa		plx		            PLX
.1a0315	60		rts		            RTS
.1a0316					PRINTS
.1a0316	08		php		            PHP
.1a0317	e2 20		sep #$20	            SEP #$20
.1a0319	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.1a031c	f0 06		beq $1a0324	            BEQ done
.1a031e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0321	e8		inx		            INX
.1a0322	80 f5		bra $1a0319	            BRA loop
.1a0324	28		plp		done        PLP
.1a0325	60		rts		            RTS
.1a0326					PRHEXW
.1a0326	08		php		            PHP
.1a0327	c2 20		rep #$20	            REP #$20
.1a0329	48		pha		            PHA
.1a032a	48		pha		            PHA
.1a032b	4a		lsr a		            LSR A
.1a032c	4a		lsr a		            LSR A
.1a032d	4a		lsr a		            LSR A
.1a032e	4a		lsr a		            LSR A
.1a032f	4a		lsr a		            LSR A
.1a0330	4a		lsr a		            LSR A
.1a0331	4a		lsr a		            LSR A
.1a0332	4a		lsr a		            LSR A
.1a0333	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a0336	68		pla		            PLA
.1a0337	29 ff 00	and #$00ff	            AND #$00FF
.1a033a	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a033d	68		pla		            PLA
.1a033e	28		plp		            PLP
.1a033f	60		rts		            RTS
.1a0340					PRHEXB
.1a0340	08		php		            PHP
.1a0341	c2 20		rep #$20	            REP #$20
.1a0343	48		pha		            PHA
.1a0344	e2 20		sep #$20	            SEP #$20
.1a0346	48		pha		            PHA
.1a0347	4a		lsr a		            LSR A
.1a0348	4a		lsr a		            LSR A
.1a0349	4a		lsr a		            LSR A
.1a034a	4a		lsr a		            LSR A
.1a034b	20 57 03	jsr $1a0357	            JSR PRHEXN
.1a034e	68		pla		            PLA
.1a034f	20 57 03	jsr $1a0357	            JSR PRHEXN
.1a0352	c2 20		rep #$20	            REP #$20
.1a0354	68		pla		            PLA
.1a0355	28		plp		            PLP
.1a0356	60		rts		            RTS
.1a0357					PRHEXN
.1a0357	08		php		            PHP
.1a0358	c2 30		rep #$30	            REP #$30
.1a035a	da		phx		            PHX
.1a035b	29 0f 00	and #$000f	            AND #$000F
.1a035e	aa		tax		            TAX
.1a035f	bf 00 d0 1a	lda $1ad000,x	            LDA @lHEXDIGITS,X
.1a0363	20 18 00	jsr $1a0018	            JSR PRINTC
.1a0366	fa		plx		            PLX
.1a0367	28		plp		            PLP
.1a0368	60		rts		            RTS
>1ad000	30 31 32 33 34 35 36 37		HEXDIGITS   .text "0123456789ABCDEF"
>1ad008	38 39 41 42 43 44 45 46

;******  Return to file: src\basic816.s


;******  Processing file: src\utilities.s

.1a0369					PRTRACE
.1a0369	08		php		            PHP
.1a036a	c2 30		rep #$30	            REP #$30
.1a036c	48		pha		            PHA
.1a036d	da		phx		            PHX
.1a036e	5a		phy		            PHY
.1a036f	8b		phb		            PHB
.1a0370	0b		phd		            PHD
.1a0371	c2 30		rep #$30	            REP #$30
.1a0373	a3 0b		lda $0b,s	            LDA 11,S        ; Get the return address
.1a0375	18		clc		calc_addr   CLC
.1a0376	69 03 00	adc #$0003	            ADC #3          ; Add 3 to skip over the following branch
.1a0379	aa		tax		            TAX
.1a037a	e2 20		sep #$20	            SEP #$20
.1a037c	a9 1a		lda #$1a	            LDA #`PRTRACE
.1a037e	48		pha		            PHA
.1a037f	ab		plb		            PLB
.1a0380	bd 00 00	lda $0000,x	pr_loop     LDA #0,B,X
.1a0383	f0 06		beq $1a038b	            BEQ done
.1a0385	20 53 02	jsr $1a0253	            JSR SCREEN_PUTC
.1a0388	e8		inx		            INX
.1a0389	80 f5		bra $1a0380	            BRA pr_loop
.1a038b					done
.1a038b	c2 30		rep #$30	            REP #$30
.1a038d	2b		pld		            PLD
.1a038e	ab		plb		            PLB
.1a038f	7a		ply		            PLY
.1a0390	fa		plx		            PLX
.1a0391	68		pla		            PLA
.1a0392	28		plp		            PLP
.1a0393	60		rts		            RTS
.1a0394					ISALPHA
.1a0394	08		php		            PHP
.1a0395	e2 20		sep #$20	            SEP #$20
.1a0397	c9 5b		cmp #$5b	            CMP #'Z'+1
.1a0399	b0 04		bcs $1a039f	            BGE not_upper
.1a039b	c9 41		cmp #$41	            CMP #'A'
.1a039d	b0 0b		bcs $1a03aa	            BGE is_alpha
.1a039f	c9 7b		cmp #$7b	not_upper   CMP #'z'+1
.1a03a1	b0 04		bcs $1a03a7	            BGE not_alpha
.1a03a3	c9 61		cmp #$61	            CMP #'a'
.1a03a5	b0 03		bcs $1a03aa	            BGE is_alpha
.1a03a7					not_alpha
.1a03a7	28		plp		            PLP
.1a03a8	18		clc		            CLC
.1a03a9	60		rts		            RTS
.1a03aa					is_alpha
.1a03aa	28		plp		            PLP
.1a03ab	38		sec		            SEC
.1a03ac	60		rts		            RTS
.1a03ad					ISNUMERAL
.1a03ad	08		php		            PHP
.1a03ae	e2 20		sep #$20	            SEP #$20
.1a03b0	c9 3a		cmp #$3a	            CMP #'9'+1
.1a03b2	b0 04		bcs $1a03b8	            BGE ret_false
.1a03b4	c9 30		cmp #$30	            CMP #'0'
.1a03b6	b0 03		bcs $1a03bb	            BGE ret_true
.1a03b8	28		plp		ret_false   PLP
.1a03b9	18		clc		            CLC
.1a03ba	60		rts		            RTS
.1a03bb	28		plp		ret_true    PLP
.1a03bc	38		sec		            SEC
.1a03bd	60		rts		            RTS
.1a03be					ISHEX
.1a03be	08		php		            PHP
.1a03bf	e2 20		sep #$20	            SEP #$20
.1a03c1	c9 3a		cmp #$3a	            CMP #'9'+1
.1a03c3	b0 04		bcs $1a03c9	            BGE chk_lca2f
.1a03c5	c9 30		cmp #$30	            CMP #'0'
.1a03c7	b0 13		bcs $1a03dc	            BGE ret_true
.1a03c9	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.1a03cb	b0 04		bcs $1a03d1	            BGE chk_uca2f
.1a03cd	c9 61		cmp #$61	            CMP #'a'
.1a03cf	b0 0b		bcs $1a03dc	            BGE ret_true
.1a03d1	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.1a03d3	b0 04		bcs $1a03d9	            BGE ret_false
.1a03d5	c9 41		cmp #$41	            CMP #'A'
.1a03d7	b0 03		bcs $1a03dc	            BGE ret_true
.1a03d9	28		plp		ret_false   PLP
.1a03da	18		clc		            CLC
.1a03db	60		rts		            RTS
.1a03dc	28		plp		ret_true    PLP
.1a03dd	38		sec		            SEC
.1a03de	60		rts		            RTS
.1a03df					HEX2BIN
.1a03df	08		php		            PHP
.1a03e0	e2 20		sep #$20	            SEP #$20
.1a03e2	c9 3a		cmp #$3a	            CMP #'9'+1          ; Check to see if '0'..'9'
.1a03e4	b0 04		bcs $1a03ea	            BGE chk_lca2f
.1a03e6	c9 30		cmp #$30	            CMP #'0'
.1a03e8	b0 12		bcs $1a03fc	            BGE conv_09         ; Yes: convert it
.1a03ea	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.1a03ec	b0 04		bcs $1a03f2	            BGE chk_uca2f
.1a03ee	c9 61		cmp #$61	            CMP #'a'
.1a03f0	b0 0f		bcs $1a0401	            BGE conv_lcaf
.1a03f2	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.1a03f4	b0 04		bcs $1a03fa	            BGE done
.1a03f6	c9 41		cmp #$41	            CMP #'A'
.1a03f8	b0 09		bcs $1a0403	            BGE conv_ucaf
.1a03fa	28		plp		done        PLP
.1a03fb	60		rts		            RTS
.1a03fc	38		sec		conv_09     SEC                 ; Convert digits '0'..'9'
.1a03fd	e9 30		sbc #$30	            SBC #'0'
.1a03ff	80 f9		bra $1a03fa	            BRA done
.1a0401	29 df		and #$df	conv_lcaf   AND #%11011111      ; Convert to upper case
.1a0403	38		sec		conv_ucaf   SEC
.1a0404	e9 37		sbc #$37	            SBC #'A'-10         ; Convert 'A'..'F'
.1a0406	80 f2		bra $1a03fa	            BRA done
.1a0408					TOUPPERA
.1a0408	08		php		            PHP
.1a0409	e2 20		sep #$20	            SEP #$20
.1a040b	c9 7b		cmp #$7b	            CMP #'z'+1
.1a040d	b0 06		bcs $1a0415	            BCS done
.1a040f	c9 61		cmp #$61	            CMP #'a'
.1a0411	90 02		bcc $1a0415	            BCC done
.1a0413	29 df		and #$df	            AND #%11011111
.1a0415	28		plp		done        PLP
.1a0416	60		rts		            RTS
.1a0417					TOUPPER
.1a0417	08		php		            PHP
.1a0418	e2 20		sep #$20	            SEP #$20
.1a041a	c2 10		rep #$10	            REP #$10
.1a041c	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.1a041f	f0 09		beq $1a042a	            BEQ done
.1a0421	20 08 04	jsr $1a0408	            JSR TOUPPERA
.1a0424	9d 00 00	sta $0000,x	            STA #0,B,X
.1a0427	e8		inx		continue    INX
.1a0428	80 f2		bra $1a041c	            BRA loop
.1a042a	28		plp		done        PLP
.1a042b	60		rts		            RTS
.1a042c					MULINT10
.1a042c	08		php		                PHP
.1a042d	0b		phd		                PHD
.1a042e	08		php		            PHP
.1a042f	c2 20		rep #$20	            REP #$20
.1a0431	48		pha		            PHA
.1a0432	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0435	5b		tcd		            TCD
.1a0436	68		pla		            PLA
.1a0437	28		plp		            PLP
.1a0438	c2 20		rep #$20	            REP #$20
.1a043a	48		pha		                PHA
.1a043b	06 23		asl $0823	                ASL ARGUMENT1           ; 7 -- 20 -- 74
.1a043d	26 25		rol $0825	                ROL ARGUMENT1+2         ; 7
.1a043f	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.1a0441	85 0c		sta $080c	                STA SCRATCH             ; 4
.1a0443	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.1a0445	85 0e		sta $080e	                STA SCRATCH+2           ; 4
.1a0447	06 0c		asl $080c	                ASL SCRATCH             ; 7 -- 28
.1a0449	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.1a044b	06 0c		asl $080c	                ASL SCRATCH             ; 7
.1a044d	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.1a044f	18		clc		                CLC                     ; 2 -- 26
.1a0450	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.1a0452	65 0c		adc $080c	                ADC SCRATCH             ; 4
.1a0454	85 23		sta $0823	                STA ARGUMENT1           ; 4
.1a0456	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.1a0458	65 0e		adc $080e	                ADC SCRATCH+2           ; 4
.1a045a	85 25		sta $0825	                STA ARGUMENT1+2         ; 4
.1a045c	68		pla		                PLA
.1a045d	2b		pld		                PLD
.1a045e	28		plp		                PLP
.1a045f	60		rts		            RTS
.1a0460					DIVINT10
.1a0460	08		php		                PHP
.1a0461	0b		phd		                PHD
.1a0462	08		php		            PHP
.1a0463	c2 20		rep #$20	            REP #$20
.1a0465	48		pha		            PHA
.1a0466	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0469	5b		tcd		            TCD
.1a046a	68		pla		            PLA
.1a046b	28		plp		            PLP
.1a046c	c2 20		rep #$20	            REP #$20
.1a046e	a5 23		lda $0823	                LDA ARGUMENT1
.1a0470	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.1a0474	a9 0a 00	lda #$000a	                LDA #10
.1a0477	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.1a047b	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.1a047f	85 23		sta $0823	                STA ARGUMENT1
.1a0481	64 25		stz $0825	                STZ ARGUMENT1+2
.1a0483	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.1a0487	85 29		sta $0829	                STA ARGUMENT2
.1a0489	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a048b	e2 20		sep #$20	            SEP #$20
.1a048d	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a048f	85 27		sta $0827	                STA ARGTYPE1
.1a0491	85 2d		sta $082d	                STA ARGTYPE2
.1a0493	2b		pld		                PLD
.1a0494	28		plp		                PLP
.1a0495	60		rts		            RTS
.1a0496					DIVINT100
.1a0496	08		php		                PHP
.1a0497	0b		phd		                PHD
.1a0498	08		php		            PHP
.1a0499	c2 20		rep #$20	            REP #$20
.1a049b	48		pha		            PHA
.1a049c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a049f	5b		tcd		            TCD
.1a04a0	68		pla		            PLA
.1a04a1	28		plp		            PLP
.1a04a2	c2 20		rep #$20	            REP #$20
.1a04a4	a5 23		lda $0823	                LDA ARGUMENT1
.1a04a6	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.1a04aa	a9 64 00	lda #$0064	                LDA #100
.1a04ad	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.1a04b1	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.1a04b5	85 23		sta $0823	                STA ARGUMENT1
.1a04b7	64 25		stz $0825	                STZ ARGUMENT1+2
.1a04b9	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.1a04bd	85 29		sta $0829	                STA ARGUMENT2
.1a04bf	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a04c1	e2 20		sep #$20	            SEP #$20
.1a04c3	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a04c5	85 27		sta $0827	                STA ARGTYPE1
.1a04c7	85 2d		sta $082d	                STA ARGTYPE2
.1a04c9	2b		pld		                PLD
.1a04ca	28		plp		                PLP
.1a04cb	60		rts		            RTS
.1a04cc					IS_ARG1_Z
.1a04cc	08		php		                PHP
.1a04cd	c2 20		rep #$20	            REP #$20
.1a04cf	a5 23		lda $0823	                LDA ARGUMENT1
.1a04d1	d0 08		bne $1a04db	                BNE return_false
.1a04d3	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a04d5	d0 04		bne $1a04db	                BNE return_false
.1a04d7	28		plp		return_true     PLP
.1a04d8	e2 02		sep #$02	                SEP #$02        ; Set Z
.1a04da	60		rts		            RTS
.1a04db	28		plp		return_false    PLP
.1a04dc	c2 02		rep #$02	                REP #$02        ; Clear Z
.1a04de	60		rts		            RTS
.1a04df					SET_TRUE
.1a04df	08		php		                PHP
.1a04e0	c2 30		rep #$30	            REP #$30
.1a04e2	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a04e5	85 23		sta $0823	                STA ARGUMENT1
.1a04e7	85 25		sta $0825	                STA ARGUMENT1+2
.1a04e9	e2 20		sep #$20	            SEP #$20
.1a04eb	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a04ed	85 27		sta $0827	                STA ARGTYPE1
.1a04ef	28		plp		                PLP
.1a04f0	60		rts		            RTS
.1a04f1					SET_FALSE
.1a04f1	08		php		                PHP
.1a04f2	c2 30		rep #$30	            REP #$30
.1a04f4	a9 00 00	lda #$0000	                LDA #0
.1a04f7	85 23		sta $0823	                STA ARGUMENT1
.1a04f9	85 25		sta $0825	                STA ARGUMENT1+2
.1a04fb	e2 20		sep #$20	            SEP #$20
.1a04fd	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a04ff	85 27		sta $0827	                STA ARGTYPE1
.1a0501	28		plp		                PLP
.1a0502	60		rts		            RTS
.1a0503					ASS_ARG1_INT
.1a0503	08		php		                PHP
.1a0504	e2 20		sep #$20	            SEP #$20
.1a0506	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a0508	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a050a	f0 07		beq $1a0513	                BEQ done                ; If so: just return
.1a050c	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a050e	d0 05		bne $1a0515	                BNE TYPE_ERR            ; If not: throw an error
.1a0510	20 3b 59	jsr $1a593b	            JSR FTOI
.1a0513	28		plp		done            PLP
.1a0514	60		rts		            RTS
.1a0515					TYPE_ERR
.1a0515	08		php		            PHP
.1a0516	c2 20		rep #$20	            REP #$20
.1a0518	48		pha		            PHA
.1a0519	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a051c	5b		tcd		            TCD
.1a051d	68		pla		            PLA
.1a051e	28		plp		            PLP
.1a051f	e2 20		sep #$20	            SEP #$20
.1a0521	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0523	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0527	c2 20		rep #$20	            REP #$20
.1a0529	29 ff 00	and #$00ff	            AND #$00FF
.1a052c	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a052f	e2 20		sep #$20	            SEP #$20
.1a0531	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0534					ASS_ARG2_INT
.1a0534	08		php		                PHP
.1a0535	e2 20		sep #$20	            SEP #$20
.1a0537	a5 2d		lda $082d	                LDA ARGTYPE2                ; Verify that the type is INTEGER
.1a0539	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a053b	f0 37		beq $1a0574	                BEQ done                    ; If so: just return
.1a053d	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; Check if it's a float
.1a053f	d0 35		bne $1a0576	                BNE TYPE_ERR                ; If not: throw an error
.1a0541	c2 20		rep #$20	            REP #$20
.1a0543	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0545	48		pha		            PHA
.1a0546	a5 23		lda $0823	            LDA ARGUMENT1
.1a0548	48		pha		            PHA
.1a0549	c2 20		rep #$20	            REP #$20
.1a054b	a5 29		lda $0829	            LDA ARGUMENT2
.1a054d	85 23		sta $0823	            STA ARGUMENT1
.1a054f	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a0551	85 25		sta $0825	            STA ARGUMENT1+2
.1a0553	e2 20		sep #$20	            SEP #$20
.1a0555	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.1a0557	85 27		sta $0827	            STA ARGTYPE1
.1a0559	20 3b 59	jsr $1a593b	            JSR FTOI
.1a055c	c2 20		rep #$20	            REP #$20
.1a055e	a5 23		lda $0823	            LDA ARGUMENT1
.1a0560	85 29		sta $0829	            STA ARGUMENT2
.1a0562	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a0564	85 2b		sta $082b	            STA ARGUMENT2+2
.1a0566	e2 20		sep #$20	            SEP #$20
.1a0568	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a056a	85 2d		sta $082d	            STA ARGTYPE2
.1a056c	c2 20		rep #$20	            REP #$20
.1a056e	68		pla		            PLA
.1a056f	85 23		sta $0823	            STA ARGUMENT1
.1a0571	68		pla		            PLA
.1a0572	85 25		sta $0825	            STA ARGUMENT1+2
.1a0574	28		plp		done            PLP
.1a0575	60		rts		            RTS
.1a0576					TYPE_ERR
.1a0576	08		php		            PHP
.1a0577	c2 20		rep #$20	            REP #$20
.1a0579	48		pha		            PHA
.1a057a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a057d	5b		tcd		            TCD
.1a057e	68		pla		            PLA
.1a057f	28		plp		            PLP
.1a0580	e2 20		sep #$20	            SEP #$20
.1a0582	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0584	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0588	c2 20		rep #$20	            REP #$20
.1a058a	29 ff 00	and #$00ff	            AND #$00FF
.1a058d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a0590	e2 20		sep #$20	            SEP #$20
.1a0592	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0595					ASS_ARG1_STR
.1a0595	08		php		                PHP
.1a0596	e2 20		sep #$20	            SEP #$20
.1a0598	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is STRING
.1a059a	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a059c	d0 02		bne $1a05a0	                BNE TYPE_ERR
.1a059e	28		plp		                PLP
.1a059f	60		rts		            RTS
.1a05a0					TYPE_ERR
.1a05a0	08		php		            PHP
.1a05a1	c2 20		rep #$20	            REP #$20
.1a05a3	48		pha		            PHA
.1a05a4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a05a7	5b		tcd		            TCD
.1a05a8	68		pla		            PLA
.1a05a9	28		plp		            PLP
.1a05aa	e2 20		sep #$20	            SEP #$20
.1a05ac	a9 04		lda #$04	            LDA #ERR_TYPE
.1a05ae	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a05b2	c2 20		rep #$20	            REP #$20
.1a05b4	29 ff 00	and #$00ff	            AND #$00FF
.1a05b7	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a05ba	e2 20		sep #$20	            SEP #$20
.1a05bc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a05bf					ASS_ARG1_INT16
.1a05bf	08		php		                PHP
.1a05c0	e2 20		sep #$20	            SEP #$20
.1a05c2	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a05c4	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a05c6	f0 07		beq $1a05cf	                BEQ check_range         ; If so: check the range
.1a05c8	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a05ca	d0 0b		bne $1a05d7	                BNE TYPE_ERR            ; If not: throw an error
.1a05cc	20 3b 59	jsr $1a593b	            JSR FTOI
.1a05cf					check_range
.1a05cf	c2 20		rep #$20	            REP #$20
.1a05d1	a5 25		lda $0825	                LDA ARGUMENT1+2         ; Validate it is 16-bit
.1a05d3	d0 21		bne $1a05f6	                BNE range_err
.1a05d5	28		plp		                PLP
.1a05d6	60		rts		            RTS
.1a05d7					TYPE_ERR
.1a05d7	08		php		            PHP
.1a05d8	c2 20		rep #$20	            REP #$20
.1a05da	48		pha		            PHA
.1a05db	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a05de	5b		tcd		            TCD
.1a05df	68		pla		            PLA
.1a05e0	28		plp		            PLP
.1a05e1	e2 20		sep #$20	            SEP #$20
.1a05e3	a9 04		lda #$04	            LDA #ERR_TYPE
.1a05e5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a05e9	c2 20		rep #$20	            REP #$20
.1a05eb	29 ff 00	and #$00ff	            AND #$00FF
.1a05ee	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a05f1	e2 20		sep #$20	            SEP #$20
.1a05f3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a05f6					RANGE_ERR
.1a05f6	08		php		            PHP
.1a05f7	c2 20		rep #$20	            REP #$20
.1a05f9	48		pha		            PHA
.1a05fa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a05fd	5b		tcd		            TCD
.1a05fe	68		pla		            PLA
.1a05ff	28		plp		            PLP
.1a0600	e2 20		sep #$20	            SEP #$20
.1a0602	a9 09		lda #$09	            LDA #ERR_RANGE
.1a0604	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0608	c2 20		rep #$20	            REP #$20
.1a060a	29 ff 00	and #$00ff	            AND #$00FF
.1a060d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a0610	e2 20		sep #$20	            SEP #$20
.1a0612	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0615					ASS_ARG1_BYTE
.1a0615	08		php		                PHP
.1a0616	e2 20		sep #$20	            SEP #$20
.1a0618	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.1a061a	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a061c	f0 07		beq $1a0625	                BEQ check_range         ; If so: check the range
.1a061e	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.1a0620	d0 11		bne $1a0633	                BNE TYPE_ERR            ; If not: throw an error
.1a0622	20 3b 59	jsr $1a593b	            JSR FTOI
.1a0625	a5 26		lda $0826	check_range     LDA ARGUMENT1+3         ; Validate that the value is in byte range
.1a0627	d0 29		bne $1a0652	                BNE RANGE_ERR           ; If not... throw a range error
.1a0629	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a062b	d0 25		bne $1a0652	                BNE RANGE_ERR
.1a062d	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a062f	d0 21		bne $1a0652	                BNE RANGE_ERR
.1a0631	28		plp		                PLP
.1a0632	60		rts		            RTS
.1a0633					TYPE_ERR
.1a0633	08		php		            PHP
.1a0634	c2 20		rep #$20	            REP #$20
.1a0636	48		pha		            PHA
.1a0637	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a063a	5b		tcd		            TCD
.1a063b	68		pla		            PLA
.1a063c	28		plp		            PLP
.1a063d	e2 20		sep #$20	            SEP #$20
.1a063f	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0641	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0645	c2 20		rep #$20	            REP #$20
.1a0647	29 ff 00	and #$00ff	            AND #$00FF
.1a064a	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a064d	e2 20		sep #$20	            SEP #$20
.1a064f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0652					RANGE_ERR
.1a0652	08		php		            PHP
.1a0653	c2 20		rep #$20	            REP #$20
.1a0655	48		pha		            PHA
.1a0656	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0659	5b		tcd		            TCD
.1a065a	68		pla		            PLA
.1a065b	28		plp		            PLP
.1a065c	e2 20		sep #$20	            SEP #$20
.1a065e	a9 09		lda #$09	            LDA #ERR_RANGE
.1a0660	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0664	c2 20		rep #$20	            REP #$20
.1a0666	29 ff 00	and #$00ff	            AND #$00FF
.1a0669	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a066c	e2 20		sep #$20	            SEP #$20
.1a066e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0671					ASS_ARG1_FLOAT
.1a0671	08		php		                PHP
.1a0672	e2 20		sep #$20	            SEP #$20
.1a0674	a5 27		lda $0827	                LDA ARGTYPE1            ; Check the type
.1a0676	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.1a0678	f0 26		beq $1a06a0	                BEQ done                ; Then we're done
.1a067a	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.1a067c	f0 1f		beq $1a069d	                BEQ cast                ; Then cast it to float
.1a067e					type_err
.1a067e	08		php		            PHP
.1a067f	c2 20		rep #$20	            REP #$20
.1a0681	48		pha		            PHA
.1a0682	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a0685	5b		tcd		            TCD
.1a0686	68		pla		            PLA
.1a0687	28		plp		            PLP
.1a0688	e2 20		sep #$20	            SEP #$20
.1a068a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a068c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0690	c2 20		rep #$20	            REP #$20
.1a0692	29 ff 00	and #$00ff	            AND #$00FF
.1a0695	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a0698	e2 20		sep #$20	            SEP #$20
.1a069a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a069d					cast
.1a069d	20 35 59	jsr $1a5935	            JSR ITOF
.1a06a0	28		plp		done            PLP
.1a06a1	60		rts		            RTS
.1a06a2					ASS_ARG2_FLOAT
.1a06a2	08		php		                PHP
.1a06a3	e2 20		sep #$20	            SEP #$20
.1a06a5	a5 2d		lda $082d	                LDA ARGTYPE2            ; Check the type
.1a06a7	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.1a06a9	f0 26		beq $1a06d1	                BEQ done                ; Then we're done
.1a06ab	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.1a06ad	f0 1f		beq $1a06ce	                BEQ cast                ; Then cast it to float
.1a06af					type_err
.1a06af	08		php		            PHP
.1a06b0	c2 20		rep #$20	            REP #$20
.1a06b2	48		pha		            PHA
.1a06b3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a06b6	5b		tcd		            TCD
.1a06b7	68		pla		            PLA
.1a06b8	28		plp		            PLP
.1a06b9	e2 20		sep #$20	            SEP #$20
.1a06bb	a9 04		lda #$04	            LDA #ERR_TYPE
.1a06bd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a06c1	c2 20		rep #$20	            REP #$20
.1a06c3	29 ff 00	and #$00ff	            AND #$00FF
.1a06c6	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a06c9	e2 20		sep #$20	            SEP #$20
.1a06cb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a06ce					cast
.1a06ce	20 d3 06	jsr $1a06d3	            JSR CAST_ARG2_FLOAT
.1a06d1	28		plp		done            PLP
.1a06d2	60		rts		            RTS
.1a06d3					CAST_ARG2_FLOAT
.1a06d3	c2 20		rep #$20	            REP #$20
.1a06d5	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a06d7	48		pha		            PHA
.1a06d8	a5 23		lda $0823	            LDA ARGUMENT1
.1a06da	48		pha		            PHA
.1a06db	c2 20		rep #$20	            REP #$20
.1a06dd	a5 29		lda $0829	            LDA ARGUMENT2
.1a06df	85 23		sta $0823	            STA ARGUMENT1
.1a06e1	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a06e3	85 25		sta $0825	            STA ARGUMENT1+2
.1a06e5	e2 20		sep #$20	            SEP #$20
.1a06e7	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a06e9	85 27		sta $0827	            STA ARGTYPE1
.1a06eb	20 35 59	jsr $1a5935	            JSR ITOF
.1a06ee	c2 20		rep #$20	            REP #$20
.1a06f0	a5 23		lda $0823	            LDA ARGUMENT1
.1a06f2	85 29		sta $0829	            STA ARGUMENT2
.1a06f4	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a06f6	85 2b		sta $082b	            STA ARGUMENT2+2
.1a06f8	e2 20		sep #$20	            SEP #$20
.1a06fa	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.1a06fc	85 2d		sta $082d	            STA ARGTYPE2
.1a06fe	c2 20		rep #$20	            REP #$20
.1a0700	68		pla		            PLA
.1a0701	85 23		sta $0823	            STA ARGUMENT1
.1a0703	68		pla		            PLA
.1a0704	85 25		sta $0825	            STA ARGUMENT1+2
.1a0706	60		rts		            RTS
.1a0707					ASS_ARGS_NUM
.1a0707	08		php		                PHP
.1a0708	e2 20		sep #$20	            SEP #$20
.1a070a	a5 27		lda $0827	                LDA ARGTYPE1                ; Check ARGUMENT1
.1a070c	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a070e	f0 23		beq $1a0733	                BEQ arg1_int
.1a0710	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a0712	f0 2e		beq $1a0742	                BEQ arg1_float
.1a0714					type_err
.1a0714	08		php		            PHP
.1a0715	c2 20		rep #$20	            REP #$20
.1a0717	48		pha		            PHA
.1a0718	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a071b	5b		tcd		            TCD
.1a071c	68		pla		            PLA
.1a071d	28		plp		            PLP
.1a071e	e2 20		sep #$20	            SEP #$20
.1a0720	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0722	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0726	c2 20		rep #$20	            REP #$20
.1a0728	29 ff 00	and #$00ff	            AND #$00FF
.1a072b	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a072e	e2 20		sep #$20	            SEP #$20
.1a0730	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0733	a5 2d		lda $082d	arg1_int        LDA ARGTYPE2                ; Check argument 2
.1a0735	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If integer, we're done
.1a0737	f0 16		beq $1a074f	                BEQ done
.1a0739	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If not float, throw an error
.1a073b	d0 d7		bne $1a0714	                BNE type_err
.1a073d	20 35 59	jsr $1a5935	            JSR ITOF
.1a0740	80 0d		bra $1a074f	                BRA done
.1a0742	a5 2d		lda $082d	arg1_float      LDA ARGTYPE2                ; Check argument 2
.1a0744	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If it's float
.1a0746	f0 07		beq $1a074f	                BEQ done                    ; Then we're done
.1a0748	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If it's not integer
.1a074a	d0 c8		bne $1a0714	                BNE type_err                ; Thrown an error
.1a074c	20 d3 06	jsr $1a06d3	            JSR CAST_ARG2_FLOAT
.1a074f					done
.1a074f	e2 20		sep #$20	            SEP #$20
.1a0751	a5 27		lda $0827	                LDA ARGTYPE1                ; Return the type code in A
.1a0753	28		plp		                PLP
.1a0754	60		rts		            RTS
.1a0755					ASS_ARGS_NUMSTR
.1a0755	08		php		                PHP
.1a0756	e2 20		sep #$20	            SEP #$20
.1a0758	a5 27		lda $0827	                LDA ARGTYPE1                ; Check to see if ARGUMENT1 is a string
.1a075a	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a075c	d0 25		bne $1a0783	                BNE numbers
.1a075e	a5 2d		lda $082d	                LDA ARGTYPE2                ; If ARGUMENT1 is a string, make sure ARGUMENT2 is
.1a0760	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a0762	f0 24		beq $1a0788	                BEQ done
.1a0764					TYPE_ERR
.1a0764	08		php		            PHP
.1a0765	c2 20		rep #$20	            REP #$20
.1a0767	48		pha		            PHA
.1a0768	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a076b	5b		tcd		            TCD
.1a076c	68		pla		            PLA
.1a076d	28		plp		            PLP
.1a076e	e2 20		sep #$20	            SEP #$20
.1a0770	a9 04		lda #$04	            LDA #ERR_TYPE
.1a0772	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a0776	c2 20		rep #$20	            REP #$20
.1a0778	29 ff 00	and #$00ff	            AND #$00FF
.1a077b	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a077e	e2 20		sep #$20	            SEP #$20
.1a0780	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a0783					numbers
.1a0783	20 07 07	jsr $1a0707	            JSR ASS_ARGS_NUM
.1a0786	a5 27		lda $0827	                LDA ARGTYPE1                ; Make sure A is the type
.1a0788	28		plp		done            PLP
.1a0789	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\tokens.s

.0000					TOKEN
>0000					precedence  .byte ?
>0001					length      .byte ?
>0002					name        .word <>?
>0004					eval        .word <>?
>0006					arity       .word <>?
.1a078a					PARSEINT
.1a078a	08		php		            PHP
.1a078b	0b		phd		            PHD
.1a078c	08		php		            PHP
.1a078d	c2 20		rep #$20	            REP #$20
.1a078f	48		pha		            PHA
.1a0790	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0793	5b		tcd		            TCD
.1a0794	68		pla		            PLA
.1a0795	28		plp		            PLP
.1a0796	c2 30		rep #$30	            REP #$30
.1a0798	64 23		stz $0823	            STZ ARGUMENT1       ; Default to Not-a-value
.1a079a	64 25		stz $0825	            STZ ARGUMENT1+2
.1a079c	e2 20		sep #$20	            SEP #$20
.1a079e	64 27		stz $0827	            STZ ARGTYPE1
.1a07a0	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it starts with '$'
.1a07a2	c9 26		cmp #$26	            CMP #'&'
.1a07a4	f0 44		beq $1a07ea	            BEQ check_hex       ; Yes: parse it as a hexadecimal number
.1a07a6					loop
.1a07a6	e2 20		sep #$20	            SEP #$20
.1a07a8	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.1a07aa	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a07ad	90 76		bcc $1a0825	            BCC done            ; No, we're done parsing
.1a07af	20 2c 04	jsr $1a042c	            JSR MULINT10
.1a07b2	38		sec		            SEC                 ; Convert the ASCII code to a number
.1a07b3	e9 30		sbc #$30	            SBC #'0'
.1a07b5	c2 20		rep #$20	            REP #$20
.1a07b7	29 ff 00	and #$00ff	            AND #$00FF
.1a07ba	18		clc		            CLC
.1a07bb	65 23		adc $0823	            ADC ARGUMENT1
.1a07bd	85 23		sta $0823	            STA ARGUMENT1
.1a07bf	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a07c1	69 00 00	adc #$0000	            ADC #0
.1a07c4	85 25		sta $0825	            STA ARGUMENT1+2
.1a07c6	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a07c9	80 db		bra $1a07a6	            BRA loop            ; And try to process it
.1a07cb					syntaxerr
.1a07cb	08		php		            PHP
.1a07cc	c2 20		rep #$20	            REP #$20
.1a07ce	48		pha		            PHA
.1a07cf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a07d2	5b		tcd		            TCD
.1a07d3	68		pla		            PLA
.1a07d4	28		plp		            PLP
.1a07d5	e2 20		sep #$20	            SEP #$20
.1a07d7	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a07d9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a07dd	c2 20		rep #$20	            REP #$20
.1a07df	29 ff 00	and #$00ff	            AND #$00FF
.1a07e2	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a07e5	e2 20		sep #$20	            SEP #$20
.1a07e7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a07ea					check_hex
.1a07ea	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a07ed	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.1a07ef	c9 48		cmp #$48	            CMP #'H'            ; Is it 'H'?
.1a07f1	f0 04		beq $1a07f7	            BEQ parse_hex       ; Yes: skip it and parse hex
.1a07f3	c9 68		cmp #$68	            CMP #'h'            ; Is it 'h'?
.1a07f5	d0 d4		bne $1a07cb	            BNE syntaxerr       ; No: throw an error
.1a07f7					parse_hex
.1a07f7	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a07fa					hexloop
.1a07fa	e2 20		sep #$20	            SEP #$20
.1a07fc	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.1a07fe	20 be 03	jsr $1a03be	            JSR ISHEX
.1a0801	90 22		bcc $1a0825	            BCC done            ; No, we're done parsing
.1a0803	20 df 03	jsr $1a03df	            JSR HEX2BIN
.1a0806	c2 20		rep #$20	            REP #$20
.1a0808	06 23		asl $0823	            ASL ARGUMENT1
.1a080a	26 25		rol $0825	            ROL ARGUMENT1+2
.1a080c	06 23		asl $0823	            ASL ARGUMENT1
.1a080e	26 25		rol $0825	            ROL ARGUMENT1+2
.1a0810	06 23		asl $0823	            ASL ARGUMENT1
.1a0812	26 25		rol $0825	            ROL ARGUMENT1+2
.1a0814	06 23		asl $0823	            ASL ARGUMENT1
.1a0816	26 25		rol $0825	            ROL ARGUMENT1+2
.1a0818	29 ff 00	and #$00ff	            AND #$00FF          ; Add binary number to ARGUMENT1
.1a081b	18		clc		            CLC
.1a081c	65 23		adc $0823	            ADC ARGUMENT1
.1a081e	85 23		sta $0823	            STA ARGUMENT1
.1a0820	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a0823	80 d5		bra $1a07fa	            BRA hexloop         ; And try to process it
.1a0825	2b		pld		done        PLD
.1a0826	28		plp		            PLP
.1a0827	60		rts		            RTS
.1a0828					PREVCHAR
.1a0828	08		php		            PHP
.1a0829	c2 30		rep #$30	            REP #$30
.1a082b	a5 04		lda $0804	            LDA BIPPREV
.1a082d	f0 1c		beq $1a084b	            BEQ ret_false
.1a082f	38		sec		            SEC
.1a0830	a5 04		lda $0804	            LDA BIPPREV
.1a0832	e5 1a		sbc $081a	            SBC CURLINE
.1a0834	a8		tay		            TAY
.1a0835	e2 20		sep #$20	            SEP #$20
.1a0837	b7 1a		lda [$081a],y	loop        LDA [CURLINE],Y
.1a0839	f0 10		beq $1a084b	            BEQ ret_false
.1a083b	c9 20		cmp #$20	            CMP #CHAR_SP
.1a083d	f0 06		beq $1a0845	            BEQ go_back
.1a083f	c9 09		cmp #$09	            CMP #CHAR_TAB
.1a0841	f0 02		beq $1a0845	            BEQ go_back
.1a0843	28		plp		            PLP
.1a0844	60		rts		            RTS
.1a0845	88		dey		go_back     DEY
.1a0846	c0 ff ff	cpy #$ffff	            CPY #$FFFF
.1a0849	d0 ec		bne $1a0837	            BNE loop
.1a084b					ret_false
.1a084b	a9 00		lda #$00	            LDA #0
.1a084d	60		rts		            RTS
.1a084e					TOKENIZE
.1a084e	08		php		            PHP
.1a084f	0b		phd		            PHD
.1a0850	08		php		            PHP
.1a0851	c2 20		rep #$20	            REP #$20
.1a0853	48		pha		            PHA
.1a0854	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0857	5b		tcd		            TCD
.1a0858	68		pla		            PLA
.1a0859	28		plp		            PLP
.1a085a	c2 30		rep #$30	            REP #$30
.1a085c	a5 1a		lda $081a	            LDA CURLINE
.1a085e	85 00		sta $0800	            STA BIP
.1a0860	e2 20		sep #$20	            SEP #$20
.1a0862	a5 1c		lda $081c	            LDA CURLINE+2
.1a0864	85 02		sta $0802	            STA BIP+2
.1a0866	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a0869	a7 00		lda [$0800]	            LDA [BIP]               ; Do we have a numeral?
.1a086b	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a086e	90 0c		bcc $1a087c	            BCC mv_curline          ; No: adjust CURLINE and tokenize
.1a0870	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a0873	c2 20		rep #$20	            REP #$20
.1a0875	a5 23		lda $0823	            LDA ARGUMENT1
.1a0877	85 d7		sta $08d7	            STA LINENUM
.1a0879	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a087c					mv_curline
.1a087c	c2 20		rep #$20	            REP #$20
.1a087e	a5 00		lda $0800	            LDA BIP
.1a0880	85 1a		sta $081a	            STA CURLINE
.1a0882	e2 20		sep #$20	            SEP #$20
.1a0884	a5 02		lda $0802	            LDA BIP+2
.1a0886	85 1c		sta $081c	            STA CURLINE+2
.1a0888	20 9c 08	jsr $1a089c	            JSR FINDREM
.1a088b	e2 20		sep #$20	            SEP #$20
.1a088d					loop
.1a088d	20 0d 09	jsr $1a090d	            JSR TKFINDTOKEN
.1a0890	c9 00		cmp #$00	            CMP #0                  ; Did we find a token?
.1a0892	f0 05		beq $1a0899	            BEQ done                ; No: return
.1a0894	20 bb 0a	jsr $1a0abb	            JSR TKWRITE
.1a0897	80 f4		bra $1a088d	            BRA loop                ; And try again
.1a0899	2b		pld		done        PLD
.1a089a	28		plp		            PLP
.1a089b	60		rts		            RTS
.1a089c					FINDREM
.1a089c	08		php		            PHP
.1a089d	c2 20		rep #$20	            REP #$20
.1a089f	a5 1a		lda $081a	            LDA CURLINE             ; Point BIP to the beginning of the line
.1a08a1	85 00		sta $0800	            STA BIP
.1a08a3	a5 1c		lda $081c	            LDA CURLINE+2
.1a08a5	85 02		sta $0802	            STA BIP+2
.1a08a7	a2 00 00	ldx #$0000	            LDX #0                  ; X will be a flag that we're at the beginning
.1a08aa	e2 20		sep #$20	            SEP #$20
.1a08ac	a0 00 00	ldy #$0000	loop        LDY #0
.1a08af	e0 00 00	cpx #$0000	            CPX #0                  ; If we are at the first space on the line
.1a08b2	f0 0d		beq $1a08c1	            BEQ skip_delim          ; ... skip looking for a delimiter
.1a08b4	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a08b6	f0 53		beq $1a090b	            BEQ done                ; Is it null? Then we're done
.1a08b8	c9 3a		cmp #$3a	            CMP #':'                ; Is it ":"
.1a08ba	f0 04		beq $1a08c0	            BEQ found_delim         ; Yes: we might have a REM... look for E
.1a08bc	c9 20		cmp #$20	            CMP #CHAR_SP
.1a08be	d0 33		bne $1a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a08c0	c8		iny		found_delim INY
.1a08c1	b7 00		lda [$0800],y	skip_delim  LDA [BIP],Y             ; Get the first character
.1a08c3	f0 46		beq $1a090b	            BEQ done                ; Is it null? Then we're done
.1a08c5	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.1a08c7	f0 10		beq $1a08d9	            BEQ found_R             ; Yes: we might have a REM... look for E
.1a08c9	c9 72		cmp #$72	            CMP #'r'
.1a08cb	d0 26		bne $1a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a08cd	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a08cf	f0 3a		beq $1a090b	            BEQ done                ; Is it null? Then we're done
.1a08d1	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.1a08d3	f0 04		beq $1a08d9	            BEQ found_R             ; Yes: we might have a REM... look for E
.1a08d5	c9 72		cmp #$72	            CMP #'r'
.1a08d7	d0 1a		bne $1a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a08d9	c8		iny		found_R     INY
.1a08da	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a08dc	f0 2d		beq $1a090b	            BEQ done                ; Is it null? Then we're done
.1a08de	c9 45		cmp #$45	            CMP #'E'                ; Is it "E"
.1a08e0	f0 04		beq $1a08e6	            BEQ found_E             ; Yes: we might have a REM... look for M
.1a08e2	c9 65		cmp #$65	            CMP #'e'
.1a08e4	d0 0d		bne $1a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.1a08e6	c8		iny		found_E     INY
.1a08e7	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.1a08e9	f0 20		beq $1a090b	            BEQ done                ; Is it null? Then we're done
.1a08eb	c9 4d		cmp #$4d	            CMP #'M'                ; Is it "E"
.1a08ed	f0 0a		beq $1a08f9	            BEQ found_REM           ; Yes: we might have a REM... look for M
.1a08ef	c9 6d		cmp #$6d	            CMP #'m'
.1a08f1	f0 06		beq $1a08f9	            BEQ found_REM
.1a08f3	e8		inx		next_pos    INX                     ; Indicate we're no longer at the first position
.1a08f4	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a08f7	80 b3		bra $1a08ac	            BRA loop
.1a08f9	a7 00		lda [$0800]	found_REM   LDA [BIP]               ; Get the current character
.1a08fb	c9 3a		cmp #$3a	            CMP #':'                ; Is it the delimiter?
.1a08fd	d0 03		bne $1a0902	            BNE ret_REM             ; No: go ahead and return REM at that location
.1a08ff	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a0902	a9 03		lda #$03	ret_REM     LDA #3
.1a0904	85 1e		sta $081e	            STA CURTOKLEN           ; Set the size
.1a0906	a9 91		lda #$91	            LDA #TOK_REM            ; And the token to write
.1a0908	20 bb 0a	jsr $1a0abb	            JSR TKWRITE
.1a090b	28		plp		done        PLP
.1a090c	60		rts		            RTS
.1a090d					TKFINDTOKEN
.1a090d	08		php		            PHP
.1a090e	0b		phd		            PHD
.1a090f	08		php		            PHP
.1a0910	c2 20		rep #$20	            REP #$20
.1a0912	48		pha		            PHA
.1a0913	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0916	5b		tcd		            TCD
.1a0917	68		pla		            PLA
.1a0918	28		plp		            PLP
.1a0919	e2 20		sep #$20	            SEP #$20
.1a091b	a9 7f		lda #$7f	            LDA #$7F                ; Start off looking for any size token
.1a091d	85 1e		sta $081e	            STA CURTOKLEN
.1a091f					next_size
.1a091f	c2 10		rep #$10	            REP #$10
.1a0921	20 70 0a	jsr $1a0a70	            JSR TKNEXTBIG
.1a0924	a5 1e		lda $081e	            LDA CURTOKLEN           ; Are there any keywords left?
.1a0926	d0 03		bne $1a092b	            BNE else
.1a0928	4c b0 09	jmp $1a09b0	            JMP done                ; No: return to caller
.1a092b					else
.1a092b	c2 20		rep #$20	            REP #$20
.1a092d	a5 1a		lda $081a	            LDA CURLINE
.1a092f	85 00		sta $0800	            STA BIP
.1a0931	e2 20		sep #$20	            SEP #$20
.1a0933	a5 1c		lda $081c	            LDA CURLINE+2
.1a0935	85 02		sta $0802	            STA BIP+2
.1a0937	c2 20		rep #$20	            REP #$20
.1a0939	64 04		stz $0804	            STZ BIPPREV             ; Clear BIPPREV (point to the previous character)
.1a093b	64 06		stz $0806	            STZ BIPPREV+2
.1a093d					check_len
.1a093d	e2 30		sep #$30	            SEP #$30
.1a093f	a0 00		ldy #$00	            LDY #0
.1a0941	b7 00		lda [$0800],y	nul_scan    LDA [BIP],Y
.1a0943	f0 da		beq $1a091f	            BEQ next_size
.1a0945	c9 91		cmp #$91	            CMP #TOK_REM            ; Tokenization stops at REMarks too
.1a0947	f0 d6		beq $1a091f	            BEQ next_size
.1a0949	c8		iny		            INY
.1a094a	c4 1e		cpy $081e	            CPY CURTOKLEN
.1a094c	90 f3		bcc $1a0941	            BCC nul_scan
.1a094e	c2 10		rep #$10	            REP #$10
.1a0950	a7 00		lda [$0800]	            LDA [BIP]               ; Check the current character
.1a0952	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.1a0954	d0 05		bne $1a095b	            BNE chk_keyword         ; No: check to see if we are at the start of a possible keyword
.1a0956	20 d2 09	jsr $1a09d2	            JSR SKIPQUOTED
.1a0959	80 28		bra $1a0983	            BRA go_next             ; And move on to the next character
.1a095b	a5 1e		lda $081e	chk_keyword LDA CURTOKLEN           ; If the token length is <=2
.1a095d	c9 03		cmp #$03	            CMP #3
.1a095f	90 19		bcc $1a097a	            BLT try_match           ; ... we don't need a delimiter, go ahead and convert it
.1a0961	c2 20		rep #$20	            REP #$20
.1a0963	a5 00		lda $0800	            LDA BIP                 ; Check to see if we're at the start of the line
.1a0965	c5 1a		cmp $081a	            CMP CURLINE
.1a0967	d0 08		bne $1a0971	            BNE chk_delim           ; No: we need to check for a delimiters
.1a0969	e2 20		sep #$20	            SEP #$20
.1a096b	a5 02		lda $0802	            LDA BIP+2
.1a096d	c5 1c		cmp $081c	            CMP CURLINE+2
.1a096f	f0 09		beq $1a097a	            BEQ try_match           ; Yes: this can be a keyword
.1a0971					chk_delim
.1a0971	e2 20		sep #$20	            SEP #$20
.1a0973	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.1a0975	20 7e 4e	jsr $1a4e7e	            JSR ISVARCHAR
.1a0978	b0 09		bcs $1a0983	            BCS go_next             ; Yes: we can't start a keyword here
.1a097a					try_match
.1a097a	e2 20		sep #$20	            SEP #$20
.1a097c	20 e2 09	jsr $1a09e2	            JSR TKMATCH
.1a097f	c9 00		cmp #$00	            CMP #0                  ; Did we get one?
.1a0981	d0 11		bne $1a0994	            BNE found               ; Yes: return it
.1a0983					go_next
.1a0983	c2 20		rep #$20	            REP #$20
.1a0985	a5 00		lda $0800	            LDA BIP                 ; Update BIPPREV as the point to the previous character
.1a0987	85 04		sta $0804	            STA BIPPREV
.1a0989	e2 20		sep #$20	            SEP #$20
.1a098b	a5 02		lda $0802	            LDA BIP+2
.1a098d	85 06		sta $0806	            STA BIPPREV+2
.1a098f	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a0992	80 a9		bra $1a093d	            BRA check_len           ; And try there
.1a0994					found
.1a0994	c9 81		cmp #$81	            CMP #TOK_MINUS          ; Found a token... is it minus?
.1a0996	d0 18		bne $1a09b0	            BNE done                ; Nope: go ahead and return it
.1a0998	20 28 08	jsr $1a0828	            JSR PREVCHAR
.1a099b	c9 00		cmp #$00	            CMP #0                  ; Did we get anything?
.1a099d	f0 14		beq $1a09b3	            BEQ syntax              ; No: line cannot start with minus... throw error
.1a099f	89 80		bit #$80	            BIT #$80                ; Is it a token?
.1a09a1	10 0b		bpl $1a09ae	            BPL binaryminus         ; No: leave token unchanged
.1a09a3	20 5c 0b	jsr $1a0b5c	            JSR TOKTYPE
.1a09a6	c9 30		cmp #$30	            CMP #TOK_TY_FUNC        ; Is it a function?
.1a09a8	f0 04		beq $1a09ae	            BEQ binaryminus         ; Yes: then this should be a binary minus operator
.1a09aa	a9 af		lda #$af	            LDA #TOK_NEGATIVE       ; Otherwise: this should be a unary minus (negation)
.1a09ac	80 02		bra $1a09b0	            BRA done
.1a09ae	a9 81		lda #$81	binaryminus LDA #TOK_MINUS          ; It's data... so token should be for binary minus
.1a09b0					done
.1a09b0	2b		pld		            PLD
.1a09b1	28		plp		            PLP
.1a09b2	60		rts		            RTS
.1a09b3					syntax
.1a09b3	08		php		            PHP
.1a09b4	c2 20		rep #$20	            REP #$20
.1a09b6	48		pha		            PHA
.1a09b7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a09ba	5b		tcd		            TCD
.1a09bb	68		pla		            PLA
.1a09bc	28		plp		            PLP
.1a09bd	e2 20		sep #$20	            SEP #$20
.1a09bf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a09c1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a09c5	c2 20		rep #$20	            REP #$20
.1a09c7	29 ff 00	and #$00ff	            AND #$00FF
.1a09ca	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a09cd	e2 20		sep #$20	            SEP #$20
.1a09cf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a09d2					SKIPQUOTED
.1a09d2	08		php		            PHP
.1a09d3	e2 20		sep #$20	            SEP #$20
.1a09d5					loop
.1a09d5	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a09d8	a7 00		lda [$0800]	            LDA [BIP]
.1a09da	f0 04		beq $1a09e0	            BEQ done                ; If EOL, just return
.1a09dc	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.1a09de	d0 f5		bne $1a09d5	            BNE loop                ; No: keep skipping
.1a09e0	28		plp		done        PLP
.1a09e1	60		rts		            RTS
.1a09e2					TKMATCH
.1a09e2	da		phx		            PHX
.1a09e3	5a		phy		            PHY
.1a09e4	08		php		            PHP
.1a09e5	0b		phd		            PHD
.1a09e6	08		php		            PHP
.1a09e7	c2 20		rep #$20	            REP #$20
.1a09e9	48		pha		            PHA
.1a09ea	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a09ed	5b		tcd		            TCD
.1a09ee	68		pla		            PLA
.1a09ef	28		plp		            PLP
.1a09f0	c2 20		rep #$20	            REP #$20
.1a09f2	a5 04		lda $0804	            LDA BIPPREV
.1a09f4	d0 0a		bne $1a0a00	            BNE check_prev
.1a09f6	e2 20		sep #$20	            SEP #$20
.1a09f8	a5 04		lda $0804	            LDA BIPPREV
.1a09fa	d0 04		bne $1a0a00	            BNE check_prev
.1a09fc	a9 00		lda #$00	            LDA #0
.1a09fe	80 0a		bra $1a0a0a	            BRA save_delim
.1a0a00					check_prev
.1a0a00	e2 20		sep #$20	            SEP #$20
.1a0a02	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.1a0a04	20 7e 4e	jsr $1a4e7e	            JSR ISVARCHAR
.1a0a07	a9 00		lda #$00	            LDA #0
.1a0a09	2a		rol a		            ROL A
.1a0a0a	85 28		sta $0828	save_delim  STA SIGN1               ; SIGN1 := 1 if it is a variable name character
.1a0a0c	c2 30		rep #$30	            REP #$30
.1a0a0e	a9 b0 0b	lda #$0bb0	            LDA #<>TOKENS           ; Set INDEX to point to the first token record
.1a0a11	85 08		sta $0808	            STA INDEX
.1a0a13	e2 20		sep #$20	            SEP #$20
.1a0a15	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0a17	85 0a		sta $080a	            STA INDEX+2
.1a0a19	a2 80 00	ldx #$0080	            LDX #$80                ; Set the initial token ID
.1a0a1c					token_loop
.1a0a1c	e2 20		sep #$20	            SEP #$20
.1a0a1e	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.1a0a21	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the current token
.1a0a23	f0 31		beq $1a0a56	            BEQ no_match            ; Is it 0? We're out of tokens... no match found
.1a0a25	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it the same as the size of the window?
.1a0a27	d0 32		bne $1a0a5b	            BNE next_token          ; No: try the next token
.1a0a29	c2 30		rep #$30	            REP #$30
.1a0a2b	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.1a0a2e	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the pointer to the token's name
.1a0a30	85 0c		sta $080c	            STA SCRATCH             ; Set SCRATCH to point to the token's name
.1a0a32	e2 20		sep #$20	            SEP #$20
.1a0a34	a9 1a		lda #$1a	            LDA #`DATA_BLOCK
.1a0a36	85 0e		sta $080e	            STA SCRATCH+2
.1a0a38	a5 28		lda $0828	            LDA SIGN1               ; Is previous character a variable name character?
.1a0a3a	f0 07		beq $1a0a43	            BEQ cmp_keyword         ; No: we can check for this token
.1a0a3c	a7 0c		lda [$080c]	            LDA [SCRATCH]           ; Get the token's first character
.1a0a3e	20 7e 4e	jsr $1a4e7e	            JSR ISVARCHAR
.1a0a41	b0 18		bcs $1a0a5b	            BCS next_token          ; Yes: skip this token
.1a0a43					cmp_keyword
.1a0a43	e2 10		sep #$10	            SEP #$10
.1a0a45	a0 00		ldy #$00	            LDY #0
.1a0a47	b7 00		lda [$0800],y	cmp_loop    LDA [BIP],Y             ; Get the character in the window
.1a0a49	20 08 04	jsr $1a0408	            JSR TOUPPERA
.1a0a4c	d7 0c		cmp [$080c],y	            CMP [SCRATCH],Y         ; Compare to the character in the token
.1a0a4e	d0 0b		bne $1a0a5b	            BNE next_token          ; If they don't match, try the next token
.1a0a50	c8		iny		            INY                     ; Move to the next character in the window
.1a0a51	c4 1e		cpy $081e	            CPY CURTOKLEN           ; Have we checked the whole window?
.1a0a53	90 f2		bcc $1a0a47	            BCC cmp_loop            ; No: check this next character
.1a0a55	8a		txa		            TXA                     ; Move the token ID to A
.1a0a56	2b		pld		no_match    PLD
.1a0a57	28		plp		            PLP
.1a0a58	7a		ply		            PLY
.1a0a59	fa		plx		            PLX
.1a0a5a	60		rts		            RTS
.1a0a5b					next_token
.1a0a5b	c2 30		rep #$30	            REP #$30
.1a0a5d	18		clc		            CLC
.1a0a5e	a5 08		lda $0808	            LDA INDEX
.1a0a60	69 08 00	adc #$0008	            ADC #size(TOKEN)
.1a0a63	85 08		sta $0808	            STA INDEX
.1a0a65	e2 20		sep #$20	            SEP #$20
.1a0a67	a5 0a		lda $080a	            LDA INDEX+2
.1a0a69	69 00		adc #$00	            ADC #0
.1a0a6b	85 0a		sta $080a	            STA INDEX+2
.1a0a6d	e8		inx		            INX                     ; Increment the token ID
.1a0a6e	80 ac		bra $1a0a1c	            BRA token_loop          ; And check that token
.1a0a70					TKNEXTBIG
.1a0a70	08		php		            PHP
.1a0a71	0b		phd		            PHD
.1a0a72	8b		phb		            PHB
.1a0a73	08		php		            PHP
.1a0a74	c2 20		rep #$20	            REP #$20
.1a0a76	48		pha		            PHA
.1a0a77	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0a7a	5b		tcd		            TCD
.1a0a7b	68		pla		            PLA
.1a0a7c	28		plp		            PLP
.1a0a7d	c2 30		rep #$30	            REP #$30
.1a0a7f	a9 b0 0b	lda #$0bb0	            LDA #<>TOKENS
.1a0a82	85 08		sta $0808	            STA INDEX
.1a0a84	a9 1a 00	lda #$001a	            LDA #`TOKENS
.1a0a87	85 0a		sta $080a	            STA INDEX+2
.1a0a89	64 0c		stz $080c	            STZ SCRATCH             ; Clear SCRATCH
.1a0a8b					loop
.1a0a8b	e2 20		sep #$20	            SEP #$20
.1a0a8d	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.1a0a90	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the token
.1a0a92	f0 1d		beq $1a0ab1	            BEQ done                ; If length is 0, we're done
.1a0a94	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it >= CURTOKLEN?
.1a0a96	b0 06		bcs $1a0a9e	            BGE skip                ; Yes: skip to the next token
.1a0a98	c5 0c		cmp $080c	            CMP SCRATCH             ; No: is it < SCRATCH?
.1a0a9a	90 02		bcc $1a0a9e	            BLT skip                ; Yes: skip to the next token
.1a0a9c	85 0c		sta $080c	            STA SCRATCH             ; No: it's our new longest token!
.1a0a9e					skip
.1a0a9e	c2 20		rep #$20	            REP #$20
.1a0aa0	18		clc		            CLC
.1a0aa1	a5 08		lda $0808	            LDA INDEX
.1a0aa3	69 08 00	adc #$0008	            ADC #size(TOKEN)
.1a0aa6	85 08		sta $0808	            STA INDEX
.1a0aa8	a5 0a		lda $080a	            LDA INDEX+2
.1a0aaa	69 00 00	adc #$0000	            ADC #0
.1a0aad	85 0a		sta $080a	            STA INDEX+2
.1a0aaf	80 da		bra $1a0a8b	            BRA loop                ; And go around for another pass
.1a0ab1					done
.1a0ab1	e2 20		sep #$20	            SEP #$20
.1a0ab3	a5 0c		lda $080c	            LDA SCRATCH
.1a0ab5	85 1e		sta $081e	            STA CURTOKLEN
.1a0ab7	ab		plb		            PLB
.1a0ab8	2b		pld		            PLD
.1a0ab9	28		plp		            PLP
.1a0aba	60		rts		            RTS
.1a0abb					TKWRITE
.1a0abb	08		php		            PHP
.1a0abc	0b		phd		            PHD
.1a0abd	08		php		            PHP
.1a0abe	c2 20		rep #$20	            REP #$20
.1a0ac0	48		pha		            PHA
.1a0ac1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0ac4	5b		tcd		            TCD
.1a0ac5	68		pla		            PLA
.1a0ac6	28		plp		            PLP
.1a0ac7	e2 20		sep #$20	            SEP #$20
.1a0ac9	87 00		sta [$0800]	            STA [BIP]               ; Write the token to the line
.1a0acb	c2 20		rep #$20	            REP #$20
.1a0acd	18		clc		            CLC
.1a0ace	a5 00		lda $0800	            LDA BIP
.1a0ad0	69 01 00	adc #$0001	            ADC #1
.1a0ad3	85 08		sta $0808	            STA INDEX
.1a0ad5	a5 02		lda $0802	            LDA BIP+2
.1a0ad7	69 00 00	adc #$0000	            ADC #0
.1a0ada	85 0a		sta $080a	            STA INDEX+2
.1a0adc	e2 10		sep #$10	            SEP #$10
.1a0ade	a4 1e		ldy $081e	            LDY CURTOKLEN           ; Y will be the number of characters to move down
.1a0ae0	88		dey		            DEY
.1a0ae1					copy_down
.1a0ae1	e2 20		sep #$20	            SEP #$20
.1a0ae3	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the byte to move down
.1a0ae5	87 08		sta [$0808]	            STA [INDEX]             ; Move it down
.1a0ae7	f0 13		beq $1a0afc	            BEQ done                ; We've reached the end of the line
.1a0ae9	c2 20		rep #$20	            REP #$20
.1a0aeb	18		clc		            CLC
.1a0aec	a5 08		lda $0808	            LDA INDEX
.1a0aee	69 01 00	adc #$0001	            ADC #1
.1a0af1	85 08		sta $0808	            STA INDEX
.1a0af3	a5 0a		lda $080a	            LDA INDEX+2
.1a0af5	69 00 00	adc #$0000	            ADC #0
.1a0af8	85 0a		sta $080a	            STA INDEX+2
.1a0afa	80 e5		bra $1a0ae1	            BRA copy_down
.1a0afc	2b		pld		done        PLD
.1a0afd	28		plp		            PLP
.1a0afe	60		rts		            RTS
.1a0aff					GETTOKREC
.1a0aff	08		php		            PHP
.1a0b00	c2 30		rep #$30	            REP #$30
.1a0b02	29 7f 00	and #$007f	            AND #$007F
.1a0b05	0a		asl a		            ASL A
.1a0b06	0a		asl a		            ASL A
.1a0b07	0a		asl a		            ASL A
.1a0b08	18		clc		            CLC
.1a0b09	69 b0 0b	adc #$0bb0	            ADC #<>TOKENS
.1a0b0c	aa		tax		            TAX                         ; X is now the data bank relative address of the token record
.1a0b0d	28		plp		            PLP
.1a0b0e	60		rts		            RTS
.1a0b0f					TOKPRECED
.1a0b0f	08		php		            PHP
.1a0b10	8b		phb		            PHB
.1a0b11	0b		phd		            PHD
.1a0b12	08		php		            PHP
.1a0b13	c2 20		rep #$20	            REP #$20
.1a0b15	48		pha		            PHA
.1a0b16	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0b19	5b		tcd		            TCD
.1a0b1a	68		pla		            PLA
.1a0b1b	28		plp		            PLP
.1a0b1c	08		php		            PHP
.1a0b1d	e2 20		sep #$20	            SEP #$20
.1a0b1f	48		pha		            PHA
.1a0b20	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0b22	48		pha		            PHA
.1a0b23	ab		plb		            PLB
.1a0b24	68		pla		            PLA
.1a0b25	28		plp		            PLP
.1a0b26	e2 20		sep #$20	            SEP #$20
.1a0b28	c2 10		rep #$10	            REP #$10
.1a0b2a	20 ff 0a	jsr $1a0aff	            JSR GETTOKREC
.1a0b2d	bd 00 00	lda $1a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.1a0b30	c2 20		rep #$20	            REP #$20
.1a0b32	29 0f 00	and #$000f	            AND #$000F                  ; Mask off the type code
.1a0b35	2b		pld		            PLD
.1a0b36	ab		plb		            PLB
.1a0b37	28		plp		            PLP
.1a0b38	60		rts		            RTS
.1a0b39					TOKEVAL
.1a0b39	08		php		            PHP
.1a0b3a	8b		phb		            PHB
.1a0b3b	0b		phd		            PHD
.1a0b3c	08		php		            PHP
.1a0b3d	c2 20		rep #$20	            REP #$20
.1a0b3f	48		pha		            PHA
.1a0b40	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0b43	5b		tcd		            TCD
.1a0b44	68		pla		            PLA
.1a0b45	28		plp		            PLP
.1a0b46	08		php		            PHP
.1a0b47	e2 20		sep #$20	            SEP #$20
.1a0b49	48		pha		            PHA
.1a0b4a	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0b4c	48		pha		            PHA
.1a0b4d	ab		plb		            PLB
.1a0b4e	68		pla		            PLA
.1a0b4f	28		plp		            PLP
.1a0b50	c2 30		rep #$30	            REP #$30
.1a0b52	20 ff 0a	jsr $1a0aff	            JSR GETTOKREC
.1a0b55	bd 04 00	lda $1a0004,x	            LDA #TOKEN.eval,B,X         ; Get the address of the evaluation function
.1a0b58	2b		pld		            PLD
.1a0b59	ab		plb		            PLB
.1a0b5a	28		plp		            PLP
.1a0b5b	60		rts		            RTS
.1a0b5c					TOKTYPE
.1a0b5c	08		php		            PHP
.1a0b5d	8b		phb		            PHB
.1a0b5e	0b		phd		            PHD
.1a0b5f	08		php		            PHP
.1a0b60	c2 20		rep #$20	            REP #$20
.1a0b62	48		pha		            PHA
.1a0b63	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0b66	5b		tcd		            TCD
.1a0b67	68		pla		            PLA
.1a0b68	28		plp		            PLP
.1a0b69	08		php		            PHP
.1a0b6a	e2 20		sep #$20	            SEP #$20
.1a0b6c	48		pha		            PHA
.1a0b6d	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0b6f	48		pha		            PHA
.1a0b70	ab		plb		            PLB
.1a0b71	68		pla		            PLA
.1a0b72	28		plp		            PLP
.1a0b73	e2 20		sep #$20	            SEP #$20
.1a0b75	c2 10		rep #$10	            REP #$10
.1a0b77	20 ff 0a	jsr $1a0aff	            JSR GETTOKREC
.1a0b7a	bd 00 00	lda $1a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.1a0b7d	c2 20		rep #$20	            REP #$20
.1a0b7f	29 f0 00	and #$00f0	            AND #$00F0                  ; Mask off the type code
.1a0b82	2b		pld		            PLD
.1a0b83	ab		plb		            PLB
.1a0b84	28		plp		            PLP
.1a0b85	60		rts		            RTS
.1a0b86					TOKARITY
.1a0b86	08		php		            PHP
.1a0b87	8b		phb		            PHB
.1a0b88	0b		phd		            PHD
.1a0b89	08		php		            PHP
.1a0b8a	c2 20		rep #$20	            REP #$20
.1a0b8c	48		pha		            PHA
.1a0b8d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0b90	5b		tcd		            TCD
.1a0b91	68		pla		            PLA
.1a0b92	28		plp		            PLP
.1a0b93	08		php		            PHP
.1a0b94	e2 20		sep #$20	            SEP #$20
.1a0b96	48		pha		            PHA
.1a0b97	a9 1a		lda #$1a	            LDA #`TOKENS
.1a0b99	48		pha		            PHA
.1a0b9a	ab		plb		            PLB
.1a0b9b	68		pla		            PLA
.1a0b9c	28		plp		            PLP
.1a0b9d	e2 20		sep #$20	            SEP #$20
.1a0b9f	c2 10		rep #$10	            REP #$10
.1a0ba1	20 ff 0a	jsr $1a0aff	            JSR GETTOKREC
.1a0ba4	bd 06 00	lda $1a0006,x	            LDA #TOKEN.arity,B,X        ; Get the arity
.1a0ba7	c2 20		rep #$20	            REP #$20
.1a0ba9	29 ff 00	and #$00ff	            AND #$00FF
.1a0bac	2b		pld		            PLD
.1a0bad	ab		plb		            PLB
.1a0bae	28		plp		            PLP
.1a0baf	60		rts		            RTS
=$00					TOK_EOL = $00
=$01					TOK_FUNC_OPEN = $01     ; A pseudo-token to push to the operator stack to mark
=$00					TOK_TY_OP = $00         ; The token is an operator
=$10					TOK_TY_CMD = $10        ; The token is a command (e.g. RUN, LIST, etc.)
=$20					TOK_TY_STMNT = $20      ; The token is a statement (e.g. INPUT, PRINT, DIM, etc.)
=$30					TOK_TY_FUNC = $30       ; The token is a function (e.g. SIN, COS, TAB, etc.)
=$40					TOK_TY_PUNCT = $40      ; The token is a punctuation mark (e.g. "(", ")")
=$50					TOK_TY_BYWRD = $50      ; The token is a by-word (e.g. STEP, TO, WEND, etc.)
.1a0bb0					TOKENS
=$80					TOK_PLUS = $80
>1ad010	2b 00				TOKEN_TEXT  .null "+"
>1a0bb0	03				precedence  .byte TOK_TY_OP | 3
>1a0bb1	01				length      .byte len("+")
>1a0bb2	10 d0				name        .word <>TOKEN_TEXT
>1a0bb4	fd 25				eval        .word <>OP_PLUS
>1a0bb6	02 00				arity       .word <>2
=$81					TOK_MINUS = $81
>1ad012	2d 00				TOKEN_TEXT  .null "-"
>1a0bb8	03				precedence  .byte TOK_TY_OP | 3
>1a0bb9	01				length      .byte len("-")
>1a0bba	12 d0				name        .word <>TOKEN_TEXT
>1a0bbc	3d 26				eval        .word <>OP_MINUS
>1a0bbe	02 00				arity       .word <>2
=$82					TOK_MULT = $82
>1ad014	2a 00				TOKEN_TEXT  .null "*"
>1a0bc0	02				precedence  .byte TOK_TY_OP | 2
>1a0bc1	01				length      .byte len("*")
>1a0bc2	14 d0				name        .word <>TOKEN_TEXT
>1a0bc4	74 26				eval        .word <>OP_MULTIPLY
>1a0bc6	02 00				arity       .word <>2
=$83					TOK_DIVIDE = $83
>1ad016	2f 00				TOKEN_TEXT  .null "/"
>1a0bc8	02				precedence  .byte TOK_TY_OP | 2
>1a0bc9	01				length      .byte len("/")
>1a0bca	16 d0				name        .word <>TOKEN_TEXT
>1a0bcc	ab 26				eval        .word <>OP_DIVIDE
>1a0bce	02 00				arity       .word <>2
=$84					TOK_MOD = $84
>1ad018	4d 4f 44 00			TOKEN_TEXT  .null "MOD"
>1a0bd0	02				precedence  .byte TOK_TY_OP | 2
>1a0bd1	03				length      .byte len("MOD")
>1a0bd2	18 d0				name        .word <>TOKEN_TEXT
>1a0bd4	b5 26				eval        .word <>OP_MOD
>1a0bd6	02 00				arity       .word <>2
>1ad01c	5e 00				TOKEN_TEXT  .null "^"
>1a0bd8	00				precedence  .byte TOK_TY_OP | 0
>1a0bd9	01				length      .byte len("^")
>1a0bda	1c d0				name        .word <>TOKEN_TEXT
>1a0bdc	00 00				eval        .word <>0
>1a0bde	02 00				arity       .word <>2
=$86					TOK_LE = $86
>1ad01e	3c 3d 00			TOKEN_TEXT  .null "<="
>1a0be0	04				precedence  .byte TOK_TY_OP | 4
>1a0be1	02				length      .byte len("<=")
>1a0be2	1e d0				name        .word <>TOKEN_TEXT
>1a0be4	4c 28				eval        .word <>OP_LTE
>1a0be6	02 00				arity       .word <>2
=$87					TOK_GE = $87
>1ad021	3e 3d 00			TOKEN_TEXT  .null ">="
>1a0be8	04				precedence  .byte TOK_TY_OP | 4
>1a0be9	02				length      .byte len(">=")
>1a0bea	21 d0				name        .word <>TOKEN_TEXT
>1a0bec	0c 28				eval        .word <>OP_GTE
>1a0bee	02 00				arity       .word <>2
=$88					TOK_NE = $88
>1ad024	3c 3e 00			TOKEN_TEXT  .null "<>"
>1a0bf0	04				precedence  .byte TOK_TY_OP | 4
>1a0bf1	02				length      .byte len("<>")
>1a0bf2	24 d0				name        .word <>TOKEN_TEXT
>1a0bf4	cc 27				eval        .word <>OP_NE
>1a0bf6	02 00				arity       .word <>2
>1ad027	3c 00				TOKEN_TEXT  .null "<"
>1a0bf8	04				precedence  .byte TOK_TY_OP | 4
>1a0bf9	01				length      .byte len("<")
>1a0bfa	27 d0				name        .word <>TOKEN_TEXT
>1a0bfc	0c 27				eval        .word <>OP_LT
>1a0bfe	02 00				arity       .word <>2
=$8a					TOK_EQ = $8A
>1ad029	3d 00				TOKEN_TEXT  .null "="
>1a0c00	04				precedence  .byte TOK_TY_OP | 4
>1a0c01	01				length      .byte len("=")
>1a0c02	29 d0				name        .word <>TOKEN_TEXT
>1a0c04	8c 27				eval        .word <>OP_EQ
>1a0c06	02 00				arity       .word <>2
>1ad02b	3e 00				TOKEN_TEXT  .null ">"
>1a0c08	04				precedence  .byte TOK_TY_OP | 4
>1a0c09	01				length      .byte len(">")
>1a0c0a	2b d0				name        .word <>TOKEN_TEXT
>1a0c0c	4c 27				eval        .word <>OP_GT
>1a0c0e	02 00				arity       .word <>2
>1ad02d	4e 4f 54 00			TOKEN_TEXT  .null "NOT"
>1a0c10	05				precedence  .byte TOK_TY_OP | 5
>1a0c11	03				length      .byte len("NOT")
>1a0c12	2d d0				name        .word <>TOKEN_TEXT
>1a0c14	f6 26				eval        .word <>OP_NOT
>1a0c16	01 00				arity       .word <>1
>1ad031	41 4e 44 00			TOKEN_TEXT  .null "AND"
>1a0c18	06				precedence  .byte TOK_TY_OP | 6
>1a0c19	03				length      .byte len("AND")
>1a0c1a	31 d0				name        .word <>TOKEN_TEXT
>1a0c1c	c8 26				eval        .word <>OP_AND
>1a0c1e	02 00				arity       .word <>2
>1ad035	4f 52 00			TOKEN_TEXT  .null "OR"
>1a0c20	07				precedence  .byte TOK_TY_OP | 7
>1a0c21	02				length      .byte len("OR")
>1a0c22	35 d0				name        .word <>TOKEN_TEXT
>1a0c24	df 26				eval        .word <>OP_OR
>1a0c26	02 00				arity       .word <>2
=$8f					TOK_LPAREN = $8F
>1ad038	28 00				TOKEN_TEXT  .null "("
>1a0c28	ff				precedence  .byte TOK_TY_PUNCT | $FF
>1a0c29	01				length      .byte len("(")
>1a0c2a	38 d0				name        .word <>TOKEN_TEXT
>1a0c2c	00 00				eval        .word <>0
>1a0c2e	00 00				arity       .word <>0
=$90					TOK_RPAREN = $90
>1ad03a	29 00				TOKEN_TEXT  .null ")"
>1a0c30	40				precedence  .byte TOK_TY_PUNCT | 0
>1a0c31	01				length      .byte len(")")
>1a0c32	3a d0				name        .word <>TOKEN_TEXT
>1a0c34	00 00				eval        .word <>0
>1a0c36	00 00				arity       .word <>0
=$91					TOK_REM = $91
>1ad03c	52 45 4d 00			TOKEN_TEXT  .null "REM"
>1a0c38	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c39	03				length      .byte len("REM")
>1a0c3a	3c d0				name        .word <>TOKEN_TEXT
>1a0c3c	e7 3e				eval        .word <>S_REM
>1a0c3e	00 00				arity       .word <>0
=$92					TOK_PRINT = $92
>1ad040	50 52 49 4e 54 00		TOKEN_TEXT  .null "PRINT"
>1a0c40	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c41	05				length      .byte len("PRINT")
>1a0c42	40 d0				name        .word <>TOKEN_TEXT
>1a0c44	ec 42				eval        .word <>S_PRINT
>1a0c46	00 00				arity       .word <>0
=$93					TOK_LET = $93
>1ad046	4c 45 54 00			TOKEN_TEXT  .null "LET"
>1a0c48	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c49	03				length      .byte len("LET")
>1a0c4a	46 d0				name        .word <>TOKEN_TEXT
>1a0c4c	37 42				eval        .word <>S_LET
>1a0c4e	00 00				arity       .word <>0
>1ad04a	47 4f 54 4f 00			TOKEN_TEXT  .null "GOTO"
>1a0c50	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c51	04				length      .byte len("GOTO")
>1a0c52	4a d0				name        .word <>TOKEN_TEXT
>1a0c54	d7 41				eval        .word <>S_GOTO
>1a0c56	00 00				arity       .word <>0
=$95					TOK_END = $95
>1ad04f	45 4e 44 00			TOKEN_TEXT  .null "END"
>1a0c58	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c59	03				length      .byte len("END")
>1a0c5a	4f d0				name        .word <>TOKEN_TEXT
>1a0c5c	ce 41				eval        .word <>S_END
>1a0c5e	00 00				arity       .word <>0
>1ad053	49 46 00			TOKEN_TEXT  .null "IF"
>1a0c60	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c61	02				length      .byte len("IF")
>1a0c62	53 d0				name        .word <>TOKEN_TEXT
>1a0c64	66 41				eval        .word <>S_IF
>1a0c66	00 00				arity       .word <>0
=$97					TOK_THEN = $97
>1ad056	54 48 45 4e 00			TOKEN_TEXT  .null "THEN"
>1a0c68	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0c69	04				length      .byte len("THEN")
>1a0c6a	56 d0				name        .word <>TOKEN_TEXT
>1a0c6c	00 00				eval        .word <>0
>1a0c6e	00 00				arity       .word <>0
>1ad05b	45 4c 53 45 00			TOKEN_TEXT  .null "ELSE"
>1a0c70	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0c71	04				length      .byte len("ELSE")
>1a0c72	5b d0				name        .word <>TOKEN_TEXT
>1a0c74	00 00				eval        .word <>0
>1a0c76	00 00				arity       .word <>0
>1ad060	47 4f 53 55 42 00		TOKEN_TEXT  .null "GOSUB"
>1a0c78	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c79	05				length      .byte len("GOSUB")
>1a0c7a	60 d0				name        .word <>TOKEN_TEXT
>1a0c7c	a9 40				eval        .word <>S_GOSUB
>1a0c7e	00 00				arity       .word <>0
>1ad066	52 45 54 55 52 4e 00		TOKEN_TEXT  .null "RETURN"
>1a0c80	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c81	06				length      .byte len("RETURN")
>1a0c82	66 d0				name        .word <>TOKEN_TEXT
>1a0c84	22 41				eval        .word <>S_RETURN
>1a0c86	00 00				arity       .word <>0
=$9b					TOK_FOR = $9B
>1ad06d	46 4f 52 00			TOKEN_TEXT  .null "FOR"
>1a0c88	20				precedence  .byte TOK_TY_STMNT | 0
>1a0c89	03				length      .byte len("FOR")
>1a0c8a	6d d0				name        .word <>TOKEN_TEXT
>1a0c8c	fe 3e				eval        .word <>S_FOR
>1a0c8e	00 00				arity       .word <>0
=$9c					TOK_TO = $9C
>1ad071	54 4f 00			TOKEN_TEXT  .null "TO"
>1a0c90	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0c91	02				length      .byte len("TO")
>1a0c92	71 d0				name        .word <>TOKEN_TEXT
>1a0c94	00 00				eval        .word <>0
>1a0c96	00 00				arity       .word <>0
=$9d					TOK_STEP = $9D
>1ad074	53 54 45 50 00			TOKEN_TEXT  .null "STEP"
>1a0c98	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0c99	04				length      .byte len("STEP")
>1a0c9a	74 d0				name        .word <>TOKEN_TEXT
>1a0c9c	00 00				eval        .word <>0
>1a0c9e	00 00				arity       .word <>0
=$9e					TOK_NEXT = $9E
>1ad079	4e 45 58 54 00			TOKEN_TEXT  .null "NEXT"
>1a0ca0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ca1	04				length      .byte len("NEXT")
>1a0ca2	79 d0				name        .word <>TOKEN_TEXT
>1a0ca4	f2 3f				eval        .word <>S_NEXT
>1a0ca6	00 00				arity       .word <>0
=$9f					TOK_DO = $9F
>1ad07e	44 4f 00			TOKEN_TEXT  .null "DO"
>1a0ca8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ca9	02				length      .byte len("DO")
>1a0caa	7e d0				name        .word <>TOKEN_TEXT
>1a0cac	f8 3e				eval        .word <>S_DO
>1a0cae	00 00				arity       .word <>0
=$a0					TOK_LOOP = $A0
>1ad081	4c 4f 4f 50 00			TOKEN_TEXT  .null "LOOP"
>1a0cb0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0cb1	04				length      .byte len("LOOP")
>1a0cb2	81 d0				name        .word <>TOKEN_TEXT
>1a0cb4	fb 3e				eval        .word <>S_LOOP
>1a0cb6	00 00				arity       .word <>0
>1ad086	57 48 49 4c 45 00		TOKEN_TEXT  .null "WHILE"
>1a0cb8	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0cb9	05				length      .byte len("WHILE")
>1a0cba	86 d0				name        .word <>TOKEN_TEXT
>1a0cbc	00 00				eval        .word <>0
>1a0cbe	00 00				arity       .word <>0
>1ad08c	55 4e 54 49 4c 00		TOKEN_TEXT  .null "UNTIL"
>1a0cc0	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0cc1	05				length      .byte len("UNTIL")
>1a0cc2	8c d0				name        .word <>TOKEN_TEXT
>1a0cc4	00 00				eval        .word <>0
>1a0cc6	00 00				arity       .word <>0
>1ad092	45 58 49 54 00			TOKEN_TEXT  .null "EXIT"
>1a0cc8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0cc9	04				length      .byte len("EXIT")
>1a0cca	92 d0				name        .word <>TOKEN_TEXT
>1a0ccc	f5 3e				eval        .word <>S_EXIT
>1a0cce	00 00				arity       .word <>0
>1ad097	43 4c 52 00			TOKEN_TEXT  .null "CLR"
>1a0cd0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0cd1	03				length      .byte len("CLR")
>1a0cd2	97 d0				name        .word <>TOKEN_TEXT
>1a0cd4	2d 42				eval        .word <>S_CLR
>1a0cd6	00 00				arity       .word <>0
>1ad09b	53 54 4f 50 00			TOKEN_TEXT  .null "STOP"
>1a0cd8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0cd9	04				length      .byte len("STOP")
>1a0cda	9b d0				name        .word <>TOKEN_TEXT
>1a0cdc	c8 3e				eval        .word <>S_STOP
>1a0cde	00 00				arity       .word <>0
>1ad0a0	50 4f 4b 45 00			TOKEN_TEXT  .null "POKE"
>1a0ce0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ce1	04				length      .byte len("POKE")
>1a0ce2	a0 d0				name        .word <>TOKEN_TEXT
>1a0ce4	58 3e				eval        .word <>S_POKE
>1a0ce6	00 00				arity       .word <>0
>1ad0a5	50 4f 4b 45 57 00		TOKEN_TEXT  .null "POKEW"
>1a0ce8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ce9	05				length      .byte len("POKEW")
>1a0cea	a5 d0				name        .word <>TOKEN_TEXT
>1a0cec	ee 3d				eval        .word <>S_POKEW
>1a0cee	00 00				arity       .word <>0
>1ad0ab	50 4f 4b 45 4c 00		TOKEN_TEXT  .null "POKEL"
>1a0cf0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0cf1	05				length      .byte len("POKEL")
>1a0cf2	ab d0				name        .word <>TOKEN_TEXT
>1a0cf4	7b 3d				eval        .word <>S_POKEL
>1a0cf6	00 00				arity       .word <>0
>1ad0b1	43 4c 53 00			TOKEN_TEXT  .null "CLS"
>1a0cf8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0cf9	03				length      .byte len("CLS")
>1a0cfa	b1 d0				name        .word <>TOKEN_TEXT
>1a0cfc	77 3d				eval        .word <>S_CLS
>1a0cfe	00 00				arity       .word <>0
>1ad0b5	52 45 41 44 00			TOKEN_TEXT  .null "READ"
>1a0d00	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d01	04				length      .byte len("READ")
>1a0d02	b5 d0				name        .word <>TOKEN_TEXT
>1a0d04	58 3c				eval        .word <>S_READ
>1a0d06	00 00				arity       .word <>0
=$ab					TOK_DATA = $AB
>1ad0ba	44 41 54 41 00			TOKEN_TEXT  .null "DATA"
>1a0d08	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d09	04				length      .byte len("DATA")
>1a0d0a	ba d0				name        .word <>TOKEN_TEXT
>1a0d0c	6a 3d				eval        .word <>S_DATA
>1a0d0e	00 00				arity       .word <>0
>1ad0bf	52 45 53 54 4f 52 45 00		TOKEN_TEXT  .null "RESTORE"
>1a0d10	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d11	07				length      .byte len("RESTORE")
>1a0d12	bf d0				name        .word <>TOKEN_TEXT
>1a0d14	6e 3d				eval        .word <>S_RESTORE
>1a0d16	00 00				arity       .word <>0
>1ad0c7	44 49 4d 00			TOKEN_TEXT  .null "DIM"
>1a0d18	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d19	03				length      .byte len("DIM")
>1a0d1a	c7 d0				name        .word <>TOKEN_TEXT
>1a0d1c	ab 3b				eval        .word <>S_DIM
>1a0d1e	00 00				arity       .word <>0
>1ad0cb	43 41 4c 4c 00			TOKEN_TEXT  .null "CALL"
>1a0d20	20				precedence  .byte TOK_TY_STMNT | 0
>1a0d21	04				length      .byte len("CALL")
>1a0d22	cb d0				name        .word <>TOKEN_TEXT
>1a0d24	14 3b				eval        .word <>S_CALL
>1a0d26	00 00				arity       .word <>0
=$af					TOK_NEGATIVE = $AF
>1ad0d0	2d 00				TOKEN_TEXT  .null "-"
>1a0d28	00				precedence  .byte TOK_TY_OP | 0
>1a0d29	01				length      .byte len("-")
>1a0d2a	d0 d0				name        .word <>TOKEN_TEXT
>1a0d2c	8c 28				eval        .word <>OP_NEGATIVE
>1a0d2e	01 00				arity       .word <>1
>1ad0d2	4c 45 4e 00			TOKEN_TEXT  .null "LEN"
>1a0d30	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d31	03				length      .byte len("LEN")
>1a0d32	d2 d0				name        .word <>TOKEN_TEXT
>1a0d34	e2 48				eval        .word <>FN_LEN
>1a0d36	00 00				arity       .word <>0
>1ad0d6	50 45 45 4b 00			TOKEN_TEXT  .null "PEEK"
>1a0d38	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d39	04				length      .byte len("PEEK")
>1a0d3a	d6 d0				name        .word <>TOKEN_TEXT
>1a0d3c	32 49				eval        .word <>FN_PEEK
>1a0d3e	00 00				arity       .word <>0
>1ad0db	50 45 45 4b 57 00		TOKEN_TEXT  .null "PEEKW"
>1a0d40	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d41	05				length      .byte len("PEEKW")
>1a0d42	db d0				name        .word <>TOKEN_TEXT
>1a0d44	c3 49				eval        .word <>FN_PEEKW
>1a0d46	00 00				arity       .word <>0
>1ad0e1	50 45 45 4b 4c 00		TOKEN_TEXT  .null "PEEKL"
>1a0d48	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d49	05				length      .byte len("PEEKL")
>1a0d4a	e1 d0				name        .word <>TOKEN_TEXT
>1a0d4c	75 49				eval        .word <>FN_PEEKL
>1a0d4e	00 00				arity       .word <>0
>1ad0e7	43 48 52 24 00			TOKEN_TEXT  .null "CHR$"
>1a0d50	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d51	04				length      .byte len("CHR$")
>1a0d52	e7 d0				name        .word <>TOKEN_TEXT
>1a0d54	02 4a				eval        .word <>FN_CHR
>1a0d56	00 00				arity       .word <>0
>1ad0ec	41 53 43 00			TOKEN_TEXT  .null "ASC"
>1a0d58	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d59	03				length      .byte len("ASC")
>1a0d5a	ec d0				name        .word <>TOKEN_TEXT
>1a0d5c	57 4a				eval        .word <>FN_ASC
>1a0d5e	00 00				arity       .word <>0
>1ad0f0	53 50 43 00			TOKEN_TEXT  .null "SPC"
>1a0d60	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d61	03				length      .byte len("SPC")
>1a0d62	f0 d0				name        .word <>TOKEN_TEXT
>1a0d64	9c 4a				eval        .word <>FN_SPC
>1a0d66	00 00				arity       .word <>0
>1ad0f4	54 41 42 00			TOKEN_TEXT  .null "TAB"
>1a0d68	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d69	03				length      .byte len("TAB")
>1a0d6a	f4 d0				name        .word <>TOKEN_TEXT
>1a0d6c	25 4b				eval        .word <>FN_TAB
>1a0d6e	00 00				arity       .word <>0
>1ad0f8	41 42 53 00			TOKEN_TEXT  .null "ABS"
>1a0d70	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d71	03				length      .byte len("ABS")
>1a0d72	f8 d0				name        .word <>TOKEN_TEXT
>1a0d74	ae 4b				eval        .word <>FN_ABS
>1a0d76	00 00				arity       .word <>0
>1ad0fc	53 47 4e 00			TOKEN_TEXT  .null "SGN"
>1a0d78	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d79	03				length      .byte len("SGN")
>1a0d7a	fc d0				name        .word <>TOKEN_TEXT
>1a0d7c	10 4c				eval        .word <>FN_SGN
>1a0d7e	00 00				arity       .word <>0
>1ad100	48 45 58 24 00			TOKEN_TEXT  .null "HEX$"
>1a0d80	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d81	04				length      .byte len("HEX$")
>1a0d82	00 d1				name        .word <>TOKEN_TEXT
>1a0d84	54 48				eval        .word <>FN_HEX
>1a0d86	00 00				arity       .word <>0
>1ad105	44 45 43 00			TOKEN_TEXT  .null "DEC"
>1a0d88	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d89	03				length      .byte len("DEC")
>1a0d8a	05 d1				name        .word <>TOKEN_TEXT
>1a0d8c	f3 47				eval        .word <>FN_DEC
>1a0d8e	00 00				arity       .word <>0
>1ad109	53 54 52 24 00			TOKEN_TEXT  .null "STR$"
>1a0d90	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d91	04				length      .byte len("STR$")
>1a0d92	09 d1				name        .word <>TOKEN_TEXT
>1a0d94	a5 47				eval        .word <>FN_STR
>1a0d96	00 00				arity       .word <>0
>1ad10e	56 41 4c 00			TOKEN_TEXT  .null "VAL"
>1a0d98	30				precedence  .byte TOK_TY_FUNC | 0
>1a0d99	03				length      .byte len("VAL")
>1a0d9a	0e d1				name        .word <>TOKEN_TEXT
>1a0d9c	4f 47				eval        .word <>FN_VAL
>1a0d9e	00 00				arity       .word <>0
>1ad112	4c 45 46 54 24 00		TOKEN_TEXT  .null "LEFT$"
>1a0da0	30				precedence  .byte TOK_TY_FUNC | 0
>1a0da1	05				length      .byte len("LEFT$")
>1a0da2	12 d1				name        .word <>TOKEN_TEXT
>1a0da4	86 46				eval        .word <>FN_LEFT
>1a0da6	00 00				arity       .word <>0
>1ad118	52 49 47 48 54 24 00		TOKEN_TEXT  .null "RIGHT$"
>1a0da8	30				precedence  .byte TOK_TY_FUNC | 0
>1a0da9	06				length      .byte len("RIGHT$")
>1a0daa	18 d1				name        .word <>TOKEN_TEXT
>1a0dac	a5 45				eval        .word <>FN_RIGHT
>1a0dae	00 00				arity       .word <>0
>1ad11f	4d 49 44 24 00			TOKEN_TEXT  .null "MID$"
>1a0db0	30				precedence  .byte TOK_TY_FUNC | 0
>1a0db1	04				length      .byte len("MID$")
>1a0db2	1f d1				name        .word <>TOKEN_TEXT
>1a0db4	f0 44				eval        .word <>FN_MID
>1a0db6	00 00				arity       .word <>0
>1ad124	52 55 4e 00			TOKEN_TEXT  .null "RUN"
>1a0db8	10				precedence  .byte TOK_TY_CMD | 0
>1a0db9	03				length      .byte len("RUN")
>1a0dba	24 d1				name        .word <>TOKEN_TEXT
>1a0dbc	ba 4d				eval        .word <>CMD_RUN
>1a0dbe	00 00				arity       .word <>0
>1ad128	4e 45 57 00			TOKEN_TEXT  .null "NEW"
>1a0dc0	10				precedence  .byte TOK_TY_CMD | 0
>1a0dc1	03				length      .byte len("NEW")
>1a0dc2	28 d1				name        .word <>TOKEN_TEXT
>1a0dc4	85 4d				eval        .word <>CMD_NEW
>1a0dc6	00 00				arity       .word <>0
>1ad12c	4c 4f 41 44 00			TOKEN_TEXT  .null "LOAD"
>1a0dc8	10				precedence  .byte TOK_TY_CMD | 0
>1a0dc9	04				length      .byte len("LOAD")
>1a0dca	2c d1				name        .word <>TOKEN_TEXT
>1a0dcc	0d 67				eval        .word <>CMD_LOAD
>1a0dce	00 00				arity       .word <>0
>1ad131	4c 49 53 54 00			TOKEN_TEXT  .null "LIST"
>1a0dd0	10				precedence  .byte TOK_TY_CMD | 0
>1a0dd1	04				length      .byte len("LIST")
>1a0dd2	31 d1				name        .word <>TOKEN_TEXT
>1a0dd4	d1 4d				eval        .word <>CMD_LIST
>1a0dd6	00 00				arity       .word <>0
>1ad136	44 49 52 00			TOKEN_TEXT  .null "DIR"
>1a0dd8	10				precedence  .byte TOK_TY_CMD | 0
>1a0dd9	03				length      .byte len("DIR")
>1a0dda	36 d1				name        .word <>TOKEN_TEXT
>1a0ddc	34 64				eval        .word <>CMD_DIR
>1a0dde	00 00				arity       .word <>0
>1ad13a	42 4c 4f 41 44 00		TOKEN_TEXT  .null "BLOAD"
>1a0de0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0de1	05				length      .byte len("BLOAD")
>1a0de2	3a d1				name        .word <>TOKEN_TEXT
>1a0de4	df 65				eval        .word <>S_BLOAD
>1a0de6	00 00				arity       .word <>0
>1ad140	42 52 55 4e 00			TOKEN_TEXT  .null "BRUN"
>1a0de8	10				precedence  .byte TOK_TY_CMD | 0
>1a0de9	04				length      .byte len("BRUN")
>1a0dea	40 d1				name        .word <>TOKEN_TEXT
>1a0dec	ba 66				eval        .word <>CMD_BRUN
>1a0dee	00 00				arity       .word <>0
>1ad145	42 53 41 56 45 00		TOKEN_TEXT  .null "BSAVE"
>1a0df0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0df1	05				length      .byte len("BSAVE")
>1a0df2	45 d1				name        .word <>TOKEN_TEXT
>1a0df4	c6 67				eval        .word <>S_BSAVE
>1a0df6	00 00				arity       .word <>0
>1ad14b	44 45 4c 00			TOKEN_TEXT  .null "DEL"
>1a0df8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0df9	03				length      .byte len("DEL")
>1a0dfa	4b d1				name        .word <>TOKEN_TEXT
>1a0dfc	e5 68				eval        .word <>S_DEL
>1a0dfe	00 00				arity       .word <>0
>1ad14f	53 41 56 45 00			TOKEN_TEXT  .null "SAVE"
>1a0e00	10				precedence  .byte TOK_TY_CMD | 0
>1a0e01	04				length      .byte len("SAVE")
>1a0e02	4f d1				name        .word <>TOKEN_TEXT
>1a0e04	52 68				eval        .word <>CMD_SAVE
>1a0e06	00 00				arity       .word <>0
>1ad154	52 45 4e 41 4d 45 00		TOKEN_TEXT  .null "RENAME"
>1a0e08	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e09	06				length      .byte len("RENAME")
>1a0e0a	54 d1				name        .word <>TOKEN_TEXT
>1a0e0c	5b 69				eval        .word <>S_RENAME
>1a0e0e	00 00				arity       .word <>0
>1ad15b	43 4f 50 59 00			TOKEN_TEXT  .null "COPY"
>1a0e10	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e11	04				length      .byte len("COPY")
>1a0e12	5b d1				name        .word <>TOKEN_TEXT
>1a0e14	7f 6a				eval        .word <>S_COPY
>1a0e16	00 00				arity       .word <>0
>1ad160	4d 4f 4e 49 54 4f 52 00		TOKEN_TEXT  .null "MONITOR"
>1a0e18	10				precedence  .byte TOK_TY_CMD | 0
>1a0e19	07				length      .byte len("MONITOR")
>1a0e1a	60 d1				name        .word <>TOKEN_TEXT
>1a0e1c	82 4d				eval        .word <>CMD_MONITOR
>1a0e1e	00 00				arity       .word <>0
>1ad168	47 45 54 00			TOKEN_TEXT  .null "GET"
>1a0e20	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e21	03				length      .byte len("GET")
>1a0e22	68 d1				name        .word <>TOKEN_TEXT
>1a0e24	a2 3a				eval        .word <>S_GET
>1a0e26	00 00				arity       .word <>0
>1ad16c	49 4e 50 55 54 00		TOKEN_TEXT  .null "INPUT"
>1a0e28	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e29	05				length      .byte len("INPUT")
>1a0e2a	6c d1				name        .word <>TOKEN_TEXT
>1a0e2c	d7 39				eval        .word <>S_INPUT
>1a0e2e	00 00				arity       .word <>0
>1ad172	53 45 54 42 4f 52 44 45		TOKEN_TEXT  .null "SETBORDER"
>1ad17a	52 00
>1a0e30	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e31	09				length      .byte len("SETBORDER")
>1a0e32	72 d1				name        .word <>TOKEN_TEXT
>1a0e34	4b 2a				eval        .word <>S_SETBORDER
>1a0e36	00 00				arity       .word <>0
>1ad17c	54 45 58 54 43 4f 4c 4f		TOKEN_TEXT  .null "TEXTCOLOR"
>1ad184	52 00
>1a0e38	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e39	09				length      .byte len("TEXTCOLOR")
>1a0e3a	7c d1				name        .word <>TOKEN_TEXT
>1a0e3c	d8 29				eval        .word <>S_TEXTCOLOR
>1a0e3e	00 00				arity       .word <>0
>1ad186	53 45 54 42 47 43 4f 4c		TOKEN_TEXT  .null "SETBGCOLOR"
>1ad18e	4f 52 00
>1a0e40	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e41	0a				length      .byte len("SETBGCOLOR")
>1a0e42	86 d1				name        .word <>TOKEN_TEXT
>1a0e44	08 2a				eval        .word <>S_SETBGCOLOR
>1a0e46	00 00				arity       .word <>0
>1ad191	53 45 54 44 41 54 45 00		TOKEN_TEXT  .null "SETDATE"
>1a0e48	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e49	07				length      .byte len("SETDATE")
>1a0e4a	91 d1				name        .word <>TOKEN_TEXT
>1a0e4c	45 29				eval        .word <>S_SETDATE
>1a0e4e	00 00				arity       .word <>0
>1ad199	47 45 54 44 41 54 45 24		TOKEN_TEXT  .null "GETDATE$"
>1ad1a1	00
>1a0e50	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e51	08				length      .byte len("GETDATE$")
>1a0e52	99 d1				name        .word <>TOKEN_TEXT
>1a0e54	cb 43				eval        .word <>F_GETDATE
>1a0e56	00 00				arity       .word <>0
>1ad1a2	53 45 54 54 49 4d 45 00		TOKEN_TEXT  .null "SETTIME"
>1a0e58	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e59	07				length      .byte len("SETTIME")
>1a0e5a	a2 d1				name        .word <>TOKEN_TEXT
>1a0e5c	da 28				eval        .word <>S_SETTIME
>1a0e5e	00 00				arity       .word <>0
>1ad1aa	47 45 54 54 49 4d 45 24		TOKEN_TEXT  .null "GETTIME$"
>1ad1b2	00
>1a0e60	30				precedence  .byte TOK_TY_FUNC | 0
>1a0e61	08				length      .byte len("GETTIME$")
>1a0e62	aa d1				name        .word <>TOKEN_TEXT
>1a0e64	35 44				eval        .word <>F_GETTIME
>1a0e66	00 00				arity       .word <>0
>1ad1b3	47 52 41 50 48 49 43 53		TOKEN_TEXT  .null "GRAPHICS"
>1ad1bb	00
>1a0e68	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e69	08				length      .byte len("GRAPHICS")
>1a0e6a	b3 d1				name        .word <>TOKEN_TEXT
>1a0e6c	90 2b				eval        .word <>S_GRAPHICS
>1a0e6e	00 00				arity       .word <>0
>1ad1bc	53 45 54 43 4f 4c 4f 52		TOKEN_TEXT  .null "SETCOLOR"
>1ad1c4	00
>1a0e70	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e71	08				length      .byte len("SETCOLOR")
>1a0e72	bc d1				name        .word <>TOKEN_TEXT
>1a0e74	c4 2a				eval        .word <>S_SETCOLOR
>1a0e76	00 00				arity       .word <>0
>1ad1c5	42 49 54 4d 41 50 00		TOKEN_TEXT  .null "BITMAP"
>1a0e78	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e79	06				length      .byte len("BITMAP")
>1a0e7a	c5 d1				name        .word <>TOKEN_TEXT
>1a0e7c	ca 2c				eval        .word <>S_BITMAP
>1a0e7e	00 00				arity       .word <>0
>1ad1cc	43 4c 52 42 49 54 4d 41		TOKEN_TEXT  .null "CLRBITMAP"
>1ad1d4	50 00
>1a0e80	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e81	09				length      .byte len("CLRBITMAP")
>1a0e82	cc d1				name        .word <>TOKEN_TEXT
>1a0e84	d2 2d				eval        .word <>S_CLRBITMAP
>1a0e86	00 00				arity       .word <>0
>1ad1d6	50 4c 4f 54 00			TOKEN_TEXT  .null "PLOT"
>1a0e88	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e89	04				length      .byte len("PLOT")
>1a0e8a	d6 d1				name        .word <>TOKEN_TEXT
>1a0e8c	e2 2e				eval        .word <>S_PLOT
>1a0e8e	00 00				arity       .word <>0
>1ad1db	4c 49 4e 45 00			TOKEN_TEXT  .null "LINE"
>1a0e90	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e91	04				length      .byte len("LINE")
>1a0e92	db d1				name        .word <>TOKEN_TEXT
>1a0e94	53 2f				eval        .word <>S_LINE
>1a0e96	00 00				arity       .word <>0
>1ad1e0	46 49 4c 4c 00			TOKEN_TEXT  .null "FILL"
>1a0e98	20				precedence  .byte TOK_TY_STMNT | 0
>1a0e99	04				length      .byte len("FILL")
>1a0e9a	e0 d1				name        .word <>TOKEN_TEXT
>1a0e9c	ec 2f				eval        .word <>S_FILL
>1a0e9e	00 00				arity       .word <>0
>1ad1e5	53 50 52 49 54 45 00		TOKEN_TEXT  .null "SPRITE"
>1a0ea0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ea1	06				length      .byte len("SPRITE")
>1a0ea2	e5 d1				name        .word <>TOKEN_TEXT
>1a0ea4	28 31				eval        .word <>S_SPRITE
>1a0ea6	00 00				arity       .word <>0
>1ad1ec	53 50 52 49 54 45 41 54		TOKEN_TEXT  .null "SPRITEAT"
>1ad1f4	00
>1a0ea8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ea9	08				length      .byte len("SPRITEAT")
>1a0eaa	ec d1				name        .word <>TOKEN_TEXT
>1a0eac	c4 31				eval        .word <>S_SPRITEAT
>1a0eae	00 00				arity       .word <>0
>1ad1f5	53 50 52 49 54 45 53 48		TOKEN_TEXT  .null "SPRITESHOW"
>1ad1fd	4f 57 00
>1a0eb0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0eb1	0a				length      .byte len("SPRITESHOW")
>1a0eb2	f5 d1				name        .word <>TOKEN_TEXT
>1a0eb4	10 32				eval        .word <>S_SPRITESHOW
>1a0eb6	00 00				arity       .word <>0
>1ad200	54 49 4c 45 53 45 54 00		TOKEN_TEXT  .null "TILESET"
>1a0eb8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0eb9	07				length      .byte len("TILESET")
>1a0eba	00 d2				name        .word <>TOKEN_TEXT
>1a0ebc	45 33				eval        .word <>S_TILESET
>1a0ebe	00 00				arity       .word <>0
>1ad208	54 49 4c 45 4d 41 50 00		TOKEN_TEXT  .null "TILEMAP"
>1a0ec0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ec1	07				length      .byte len("TILEMAP")
>1a0ec2	08 d2				name        .word <>TOKEN_TEXT
>1a0ec4	c3 33				eval        .word <>S_TILEMAP
>1a0ec6	00 00				arity       .word <>0
>1ad210	54 49 4c 45 53 48 4f 57		TOKEN_TEXT  .null "TILESHOW"
>1ad218	00
>1a0ec8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ec9	08				length      .byte len("TILESHOW")
>1a0eca	10 d2				name        .word <>TOKEN_TEXT
>1a0ecc	35 34				eval        .word <>S_TILESHOW
>1a0ece	00 00				arity       .word <>0
>1ad219	54 49 4c 45 41 54 00		TOKEN_TEXT  .null "TILEAT"
>1a0ed0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ed1	06				length      .byte len("TILEAT")
>1a0ed2	19 d2				name        .word <>TOKEN_TEXT
>1a0ed4	72 34				eval        .word <>S_TILEAT
>1a0ed6	00 00				arity       .word <>0
>1ad220	4d 45 4d 43 4f 50 59 00		TOKEN_TEXT  .null "MEMCOPY"
>1a0ed8	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ed9	07				length      .byte len("MEMCOPY")
>1a0eda	20 d2				name        .word <>TOKEN_TEXT
>1a0edc	a2 37				eval        .word <>S_MEMCOPY
>1a0ede	00 00				arity       .word <>0
=$e6					TOK_LINEAR = $E6
>1ad228	4c 49 4e 45 41 52 00		TOKEN_TEXT  .null "LINEAR"
>1a0ee0	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0ee1	06				length      .byte len("LINEAR")
>1a0ee2	28 d2				name        .word <>TOKEN_TEXT
>1a0ee4	00 00				eval        .word <>0
>1a0ee6	00 00				arity       .word <>0
=$e7					TOK_RECT = $E7
>1ad22f	52 45 43 54 00			TOKEN_TEXT  .null "RECT"
>1a0ee8	50				precedence  .byte TOK_TY_BYWRD | 0
>1a0ee9	04				length      .byte len("RECT")
>1a0eea	2f d2				name        .word <>TOKEN_TEXT
>1a0eec	00 00				eval        .word <>0
>1a0eee	00 00				arity       .word <>0
>1ad234	4c 4f 43 41 54 45 00		TOKEN_TEXT  .null "LOCATE"
>1a0ef0	20				precedence  .byte TOK_TY_STMNT | 0
>1a0ef1	06				length      .byte len("LOCATE")
>1a0ef2	34 d2				name        .word <>TOKEN_TEXT
>1a0ef4	b7 39				eval        .word <>S_LOCATE
>1a0ef6	00 00				arity       .word <>0
>1ad23b	49 4e 54 00			TOKEN_TEXT  .null "INT"
>1a0ef8	30				precedence  .byte TOK_TY_FUNC | 0
>1a0ef9	03				length      .byte len("INT")
>1a0efa	3b d2				name        .word <>TOKEN_TEXT
>1a0efc	66 4c				eval        .word <>FN_INT
>1a0efe	00 00				arity       .word <>0
>1ad23f	52 4e 44 00			TOKEN_TEXT  .null "RND"
>1a0f00	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f01	03				length      .byte len("RND")
>1a0f02	3f d2				name        .word <>TOKEN_TEXT
>1a0f04	9a 44				eval        .word <>FN_RND
>1a0f06	00 00				arity       .word <>0
>1ad243	53 49 4e 00			TOKEN_TEXT  .null "SIN"
>1a0f08	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f09	03				length      .byte len("SIN")
>1a0f0a	43 d2				name        .word <>TOKEN_TEXT
>1a0f0c	79 4c				eval        .word <>FN_SIN
>1a0f0e	00 00				arity       .word <>0
>1ad247	43 4f 53 00			TOKEN_TEXT  .null "COS"
>1a0f10	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f11	03				length      .byte len("COS")
>1a0f12	47 d2				name        .word <>TOKEN_TEXT
>1a0f14	ae 4c				eval        .word <>FN_COS
>1a0f16	00 00				arity       .word <>0
>1ad24b	54 41 4e 00			TOKEN_TEXT  .null "TAN"
>1a0f18	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f19	03				length      .byte len("TAN")
>1a0f1a	4b d2				name        .word <>TOKEN_TEXT
>1a0f1c	e3 4c				eval        .word <>FN_TAN
>1a0f1e	00 00				arity       .word <>0
>1ad24f	4c 4e 00			TOKEN_TEXT  .null "LN"
>1a0f20	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f21	02				length      .byte len("LN")
>1a0f22	4f d2				name        .word <>TOKEN_TEXT
>1a0f24	4d 4d				eval        .word <>FN_LN
>1a0f26	00 00				arity       .word <>0
>1ad252	53 43 41 4c 45 54 41 55		TOKEN_TEXT  .null "SCALETAU"
>1ad25a	00
>1a0f28	30				precedence  .byte TOK_TY_FUNC | 0
>1a0f29	08				length      .byte len("SCALETAU")
>1a0f2a	52 d2				name        .word <>TOKEN_TEXT
>1a0f2c	18 4d				eval        .word <>FN_SCALETAU
>1a0f2e	00 00				arity       .word <>0
>1a0f30	00 00 00 00 00 00 00 00		            .word 0, 0, 0, 0

;******  Return to file: src\basic816.s


;******  Processing file: src\heap.s

>08b7					ALLOCATED   .long ?     ; Pointer to the most recently allocated object
>08ba					HEAP        .long ?     ; Pointer to the top of the heap (next empty byte)
>08bd					FREED       .long ?     ; Pointer to a linked list of freed heap objects
>08c0					CURRBLOCK   .long ?     ; Pointer to the current heap allocated block
>08c3					CURRHEADER  .long ?     ; Pointer to the header of the current block
>08c6					CURREND     .long ?     ; Pointer to the byte immediately after the current block
>08c9					CURRFREED   .long ?     ; Pointer to the current freed block
>08cc					FREEDEND    .long ?     ; Pointer to the byte immediately after the current freed block
>08cf					LASTFREED   .long ?     ;
.0000					HEAPOBJ
>0000					TYPE        .byte ?     ; Code for the type of object allocated
>0001					COUNT       .byte ?     ; Number of references to the heap object
>0002					NEXT        .long ?     ; Pointer to the next object in the list (used when freed)
>0005					END         .long ?     ; Pointer to the next byte after the block
.1a0f38					INITHEAP
.1a0f38	08		php		            PHP
.1a0f39	0b		phd		            PHD
.1a0f3a	08		php		            PHP
.1a0f3b	c2 20		rep #$20	            REP #$20
.1a0f3d	48		pha		            PHA
.1a0f3e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0f41	5b		tcd		            TCD
.1a0f42	68		pla		            PLA
.1a0f43	28		plp		            PLP
.1a0f44	c2 30		rep #$30	            REP #$30
.1a0f46	a9 ff ff	lda #$ffff	            LDA #<>HEAP_TOP         ; Set the HEAP to the top
.1a0f49	85 ba		sta $08ba	            STA HEAP
.1a0f4b	e2 20		sep #$20	            SEP #$20
.1a0f4d	a9 17		lda #$17	            LDA #`HEAP_TOP
.1a0f4f	85 bc		sta $08bc	            STA HEAP+2
.1a0f51	c2 20		rep #$20	            REP #$20
.1a0f53	64 b7		stz $08b7	            STZ ALLOCATED           ; And clear the pointer to the allocated objects
.1a0f55	64 bd		stz $08bd	            STZ FREED               ; as well as the list of freed objects
.1a0f57	e2 20		sep #$20	            SEP #$20
.1a0f59	64 b9		stz $08b9	            STZ ALLOCATED+2
.1a0f5b	64 bf		stz $08bf	            STZ FREED+2
.1a0f5d	2b		pld		            PLD
.1a0f5e	28		plp		            PLP
.1a0f5f	60		rts		            RTS
.1a0f60					ALLOC
.1a0f60	5a		phy		            PHY
.1a0f61	08		php		            PHP
.1a0f62	e2 20		sep #$20	            SEP #$20
.1a0f64	85 ea		sta $08ea	            STA TOFINDTYPE      ; Save the type of the block to TOFINDTYPE
.1a0f66	c2 10		rep #$10	            REP #$10
.1a0f68	86 8f		stx $088f	            STX MCOUNT           ; And the length of the block needed to MCOUNT
.1a0f6a	c2 20		rep #$20	            REP #$20
.1a0f6c	a5 0e		lda $080e	            LDA SCRATCH+2
.1a0f6e	48		pha		            PHA
.1a0f6f	a5 0c		lda $080c	            LDA SCRATCH
.1a0f71	48		pha		            PHA
.1a0f72	a5 12		lda $0812	            LDA SCRATCH2+2
.1a0f74	48		pha		            PHA
.1a0f75	a5 10		lda $0810	            LDA SCRATCH2
.1a0f77	48		pha		            PHA
.1a0f78	20 10 10	jsr $1a1010	            JSR ALLOCFREED
.1a0f7b	b0 03		bcs $1a0f80	            BCS done            ; Return, if we got something back
.1a0f7d	20 94 0f	jsr $1a0f94	            JSR ALLOCHEAP
.1a0f80					done
.1a0f80	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a0f83	c2 20		rep #$20	            REP #$20
.1a0f85	68		pla		            PLA
.1a0f86	85 10		sta $0810	            STA SCRATCH2
.1a0f88	68		pla		            PLA
.1a0f89	85 12		sta $0812	            STA SCRATCH2+2
.1a0f8b	68		pla		            PLA
.1a0f8c	85 0c		sta $080c	            STA SCRATCH
.1a0f8e	68		pla		            PLA
.1a0f8f	85 0e		sta $080e	            STA SCRATCH+2
.1a0f91	28		plp		            PLP
.1a0f92	7a		ply		            PLY
.1a0f93	60		rts		            RTS
.1a0f94					ALLOCHEAP
.1a0f94	08		php		            PHP
.1a0f95	0b		phd		            PHD
.1a0f96	08		php		            PHP
.1a0f97	c2 20		rep #$20	            REP #$20
.1a0f99	48		pha		            PHA
.1a0f9a	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a0f9d	5b		tcd		            TCD
.1a0f9e	68		pla		            PLA
.1a0f9f	28		plp		            PLP
.1a0fa0	e2 20		sep #$20	            SEP #$20
.1a0fa2	a6 8f		ldx $088f	            LDX MCOUNT
.1a0fa4	ca		dex		            DEX
.1a0fa5	86 0c		stx $080c	            STX SCRATCH             ; SCRATCH := size - 1
.1a0fa7	e8		inx		            INX
.1a0fa8	c2 30		rep #$30	            REP #$30
.1a0faa	38		sec		            SEC
.1a0fab	a5 ba		lda $08ba	            LDA HEAP
.1a0fad	e5 0c		sbc $080c	            SBC SCRATCH
.1a0faf	85 c0		sta $08c0	            STA CURRBLOCK
.1a0fb1	e2 20		sep #$20	            SEP #$20
.1a0fb3	a5 bc		lda $08bc	            LDA HEAP+2
.1a0fb5	e9 00		sbc #$00	            SBC #0
.1a0fb7	85 c2		sta $08c2	            STA CURRBLOCK+2
.1a0fb9	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a0fbc	e2 20		sep #$20	            SEP #$20
.1a0fbe	a5 ea		lda $08ea	            LDA TOFINDTYPE
.1a0fc0	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE       ; Set the type of the object
.1a0fc3	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a0fc5	a9 00		lda #$00	            LDA #0                  ; Set the count to zero
.1a0fc7	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.1a0fca	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a0fcc	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a0fcf	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a0fd1	c2 20		rep #$20	            REP #$20
.1a0fd3	a9 00 00	lda #$0000	            LDA #0
.1a0fd6	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a0fd8	c2 20		rep #$20	            REP #$20
.1a0fda	18		clc		            CLC
.1a0fdb	a5 ba		lda $08ba	            LDA HEAP
.1a0fdd	69 01 00	adc #$0001	            ADC #1
.1a0fe0	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; To get the address of the next byte
.1a0fe3	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y      ; after the block
.1a0fe5	e2 20		sep #$20	            SEP #$20
.1a0fe7	c8		iny		            INY
.1a0fe8	c8		iny		            INY
.1a0fe9	a5 bc		lda $08bc	            LDA HEAP+2
.1a0feb	69 00		adc #$00	            ADC #0
.1a0fed	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a0fef	c2 20		rep #$20	            REP #$20
.1a0ff1	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a0ff3	85 b7		sta $08b7	            STA ALLOCATED
.1a0ff5	e2 20		sep #$20	            SEP #$20
.1a0ff7	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a0ff9	85 b9		sta $08b9	            STA ALLOCATED+2
.1a0ffb	c2 20		rep #$20	            REP #$20
.1a0ffd	38		sec		            SEC                     ; Move the HEAP pointer to the first free byte under the header
.1a0ffe	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1000	e9 01 00	sbc #$0001	            SBC #1
.1a1003	85 ba		sta $08ba	            STA HEAP
.1a1005	e2 20		sep #$20	            SEP #$20
.1a1007	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1009	e9 00		sbc #$00	            SBC #0
.1a100b	85 bc		sta $08bc	            STA HEAP+2
.1a100d	2b		pld		            PLD
.1a100e	28		plp		            PLP
.1a100f	60		rts		            RTS
.1a1010					ALLOCFREED
.1a1010	08		php		            PHP
.1a1011	0b		phd		            PHD
.1a1012	08		php		            PHP
.1a1013	c2 20		rep #$20	            REP #$20
.1a1015	48		pha		            PHA
.1a1016	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1019	5b		tcd		            TCD
.1a101a	68		pla		            PLA
.1a101b	28		plp		            PLP
.1a101c	c2 30		rep #$30	            REP #$30
.1a101e	c2 20		rep #$20	            REP #$20
.1a1020	a5 bd		lda $08bd	            LDA FREED
.1a1022	85 c9		sta $08c9	            STA CURRFREED
.1a1024	e2 20		sep #$20	            SEP #$20
.1a1026	a5 bf		lda $08bf	            LDA FREED+2
.1a1028	85 cb		sta $08cb	            STA CURRFREED+2
.1a102a	a5 c9		lda $08c9	loop        LDA CURRFREED           ; Has anything been freed?
.1a102c	d0 17		bne $1a1045	            BNE has_block           ; Yes: check to see if there's a big enough block
.1a102e	e2 20		sep #$20	            SEP #$20
.1a1030	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1032	d0 11		bne $1a1045	            BNE has_block           ; Yes: check to see if there's a big enough block
.1a1034	c2 20		rep #$20	            REP #$20
.1a1036	a9 00 00	lda #$0000	            LDA #<>0
.1a1039	85 cf		sta $08cf	            STA LASTFREED
.1a103b	e2 20		sep #$20	            SEP #$20
.1a103d	a9 00		lda #$00	            LDA #`0
.1a103f	85 d1		sta $08d1	            STA LASTFREED+2
.1a1041	2b		pld		ret_false   PLD                     ; Return that we didn't find anything
.1a1042	28		plp		            PLP
.1a1043	18		clc		            CLC
.1a1044	60		rts		            RTS
.1a1045					has_block
.1a1045	c2 20		rep #$20	            REP #$20
.1a1047	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.1a104a	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a104c	85 cc		sta $08cc	            STA FREEDEND
.1a104e	e2 20		sep #$20	            SEP #$20
.1a1050	c8		iny		            INY
.1a1051	c8		iny		            INY
.1a1052	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1054	85 ce		sta $08ce	            STA FREEDEND+2
.1a1056	c2 20		rep #$20	            REP #$20
.1a1058	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required
.1a1059	a5 c9		lda $08c9	            LDA CURRFREED
.1a105b	65 8f		adc $088f	            ADC MCOUNT
.1a105d	85 0c		sta $080c	            STA SCRATCH
.1a105f	e2 20		sep #$20	            SEP #$20
.1a1061	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1063	69 00		adc #$00	            ADC #0
.1a1065	85 0e		sta $080e	            STA SCRATCH+2
.1a1067	c2 20		rep #$20	            REP #$20
.1a1069	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required + size of header
.1a106a	a5 0c		lda $080c	            LDA SCRATCH                 ; (that is, it's a pointer to the byte immediately after the block desired)
.1a106c	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)
.1a106f	85 0c		sta $080c	            STA SCRATCH
.1a1071	e2 20		sep #$20	            SEP #$20
.1a1073	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1075	69 00		adc #$00	            ADC #0
.1a1077	85 0e		sta $080e	            STA SCRATCH+2
.1a1079	c2 20		rep #$20	            REP #$20
.1a107b	a5 0c		lda $080c	            LDA SCRATCH                 ; Is SCRATCH == FREEDEND?
.1a107d	c5 cc		cmp $08cc	            CMP FREEDEND
.1a107f	d0 28		bne $1a10a9	            BNE not_exact               ; No: check if this block is bigger than needed
.1a1081	e2 20		sep #$20	            SEP #$20
.1a1083	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1085	c5 ce		cmp $08ce	            CMP FREEDEND+2
.1a1087	d0 20		bne $1a10a9	            BNE not_exact
.1a1089	c2 20		rep #$20	            REP #$20
.1a108b	a5 cf		lda $08cf	            LDA LASTFREED               ; LASTFREED == 0?
.1a108d	d0 5d		bne $1a10ec	            BNE adj_last1               ; No: point LASTFREED->NEXT to skip this block
.1a108f	e2 20		sep #$20	            SEP #$20
.1a1091	a5 d1		lda $08d1	            LDA LASTFREED+2
.1a1093	d0 57		bne $1a10ec	            BNE adj_last1
.1a1095	c2 20		rep #$20	            REP #$20
.1a1097	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a109a	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a109c	85 bd		sta $08bd	            STA FREED
.1a109e	e2 20		sep #$20	            SEP #$20
.1a10a0	c8		iny		            INY
.1a10a1	c8		iny		            INY
.1a10a2	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a10a4	85 bf		sta $08bf	            STA FREED+2
.1a10a6	4c 4d 11	jmp $1a114d	            JMP init_block              ; And return CURRFREED as our reallocated memory
.1a10a9					not_exact
.1a10a9	c2 20		rep #$20	            REP #$20
.1a10ab	a5 0c		lda $080c	            LDA SCRATCH                 ; Add a buffer to the room needed
.1a10ad	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)          ; So we have room to track the memory still freed
.1a10b0	85 10		sta $0810	            STA SCRATCH2
.1a10b2	e2 20		sep #$20	            SEP #$20
.1a10b4	a5 0e		lda $080e	            LDA SCRATCH+2
.1a10b6	69 00		adc #$00	            ADC #0
.1a10b8	85 12		sta $0812	            STA SCRATCH2+2
.1a10ba	e2 20		sep #$20	            SEP #$20
.1a10bc	a5 c6		lda $08c6	            LDA CURREND                 ; Is CURREND > SCRATCH2
.1a10be	c5 10		cmp $0810	            CMP SCRATCH2
.1a10c0	b0 3e		bcs $1a1100	            BGE has_room                ; Yes: there is room in this block to allocate some memory
.1a10c2	90 08		bcc $1a10cc	            BLT try_next
.1a10c4	c2 20		rep #$20	            REP #$20
.1a10c6	a5 c6		lda $08c6	            LDA CURREND
.1a10c8	c5 10		cmp $0810	            CMP SCRATCH2
.1a10ca	b0 34		bcs $1a1100	            BGE has_room
.1a10cc					try_next
.1a10cc	c2 20		rep #$20	            REP #$20
.1a10ce	a5 c9		lda $08c9	            LDA CURRFREED
.1a10d0	85 cf		sta $08cf	            STA LASTFREED
.1a10d2	e2 20		sep #$20	            SEP #$20
.1a10d4	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a10d6	85 d1		sta $08d1	            STA LASTFREED+2
.1a10d8	c2 20		rep #$20	            REP #$20
.1a10da	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a10dd	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.1a10df	85 c9		sta $08c9	            STA CURRFREED
.1a10e1	e2 20		sep #$20	            SEP #$20
.1a10e3	c8		iny		            INY
.1a10e4	c8		iny		            INY
.1a10e5	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.1a10e7	85 cb		sta $08cb	            STA CURRFREED+2
.1a10e9	4c 2a 10	jmp $1a102a	            JMP loop                                    ; And try the next header
.1a10ec					adj_last1
.1a10ec	c2 20		rep #$20	            REP #$20
.1a10ee	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := CURRFREED->NEXT
.1a10f1	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a10f3	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a10f5	e2 20		sep #$20	            SEP #$20
.1a10f7	c8		iny		            INY
.1a10f8	c8		iny		            INY
.1a10f9	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a10fb	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a10fd	4c 4d 11	jmp $1a114d	            JMP init_block              ; And get CURRFREED ready to return
.1a1100					has_room
.1a1100	c2 20		rep #$20	            REP #$20
.1a1102	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END            ; SCRATCH->END := CURRFREED->END
.1a1105	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1107	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1109	e2 20		sep #$20	            SEP #$20
.1a110b	c8		iny		            INY
.1a110c	c8		iny		            INY
.1a110d	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a110f	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1111	c2 20		rep #$20	            REP #$20
.1a1113	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; CURREND->NEXT := CURRFREED->NEXT
.1a1116	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1118	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a111a	e2 20		sep #$20	            SEP #$20
.1a111c	c8		iny		            INY
.1a111d	c8		iny		            INY
.1a111e	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.1a1120	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.1a1122	c2 20		rep #$20	            REP #$20
.1a1124	a5 cf		lda $08cf	            LDA LASTFREED               ; Is this the first object we've examined?
.1a1126	d0 14		bne $1a113c	            BNE adj_last2               ; No: we'll need to adjust the previously examined block
.1a1128	e2 20		sep #$20	            SEP #$20
.1a112a	a5 cf		lda $08cf	            LDA LASTFREED
.1a112c	d0 0e		bne $1a113c	            BNE adj_last2
.1a112e	c2 20		rep #$20	            REP #$20
.1a1130	a5 0c		lda $080c	            LDA SCRATCH
.1a1132	85 bd		sta $08bd	            STA FREED
.1a1134	e2 20		sep #$20	            SEP #$20
.1a1136	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1138	85 bf		sta $08bf	            STA FREED+2
.1a113a	80 11		bra $1a114d	            BRA init_block              ; ... and return the block we've sliced off
.1a113c					adj_last2
.1a113c	c2 20		rep #$20	            REP #$20
.1a113e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := SCRATCH
.1a1141	a5 0c		lda $080c	            LDA SCRATCH                 ; (point the previous freed block to the newly sliced
.1a1143	97 cf		sta [$08cf],y	            STA [LASTFREED],Y           ;  off part of the current block)
.1a1145	e2 20		sep #$20	            SEP #$20
.1a1147	c8		iny		            INY
.1a1148	c8		iny		            INY
.1a1149	a5 0e		lda $080e	            LDA SCRATCH+2
.1a114b	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.1a114d					init_block
.1a114d	c2 20		rep #$20	            REP #$20
.1a114f	a5 c9		lda $08c9	            LDA CURRFREED
.1a1151	85 c3		sta $08c3	            STA CURRHEADER
.1a1153	e2 20		sep #$20	            SEP #$20
.1a1155	a5 cb		lda $08cb	            LDA CURRFREED+2
.1a1157	85 c5		sta $08c5	            STA CURRHEADER+2
.1a1159	c2 20		rep #$20	            REP #$20
.1a115b	a5 c3		lda $08c3	            LDA CURRHEADER
.1a115d	85 b7		sta $08b7	            STA ALLOCATED
.1a115f	e2 20		sep #$20	            SEP #$20
.1a1161	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1163	85 b9		sta $08b9	            STA ALLOCATED+2
.1a1165	c2 20		rep #$20	            REP #$20
.1a1167	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; Set CURRHEADER->END to the byte after the block
.1a116a	a5 0c		lda $080c	            LDA SCRATCH
.1a116c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a116e	e2 20		sep #$20	            SEP #$20
.1a1170	c8		iny		            INY
.1a1171	c8		iny		            INY
.1a1172	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1174	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1176	c2 20		rep #$20	            REP #$20
.1a1178	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Set CURRHEADER->NEXT to NULL
.1a117b	a9 00 00	lda #$0000	            LDA #0
.1a117e	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1180	e2 20		sep #$20	            SEP #$20
.1a1182	c8		iny		            INY
.1a1183	c8		iny		            INY
.1a1184	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1186	e2 20		sep #$20	            SEP #$20
.1a1188	a5 ea		lda $08ea	            LDA TOFINDTYPE          ; Get the type code back
.1a118a	e2 20		sep #$20	            SEP #$20
.1a118c	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE
.1a118f	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1191	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT      ; Set its reference count to 0
.1a1194	a9 00		lda #$00	            LDA #0
.1a1196	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1198	2b		pld		done        PLD
.1a1199	28		plp		            PLP
.1a119a	38		sec		            SEC
.1a119b	60		rts		            RTS
.1a119c					HEAP_GETHED
.1a119c	08		php		            PHP
.1a119d	c2 20		rep #$20	            REP #$20
.1a119f	38		sec		            SEC
.1a11a0	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a11a2	e9 08 00	sbc #$0008	            SBC #size(HEAPOBJ)
.1a11a5	85 c3		sta $08c3	            STA CURRHEADER
.1a11a7	e2 20		sep #$20	            SEP #$20
.1a11a9	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a11ab	e9 00		sbc #$00	            SBC #0
.1a11ad	85 c5		sta $08c5	            STA CURRHEADER+2
.1a11af	28		plp		            PLP
.1a11b0	60		rts		            RTS
.1a11b1					HEAP_ADDREF
.1a11b1	08		php		            PHP
.1a11b2	e2 20		sep #$20	            SEP #$20
.1a11b4	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a11b6	f0 04		beq $1a11bc	            BEQ chk_null
.1a11b8	c9 18		cmp #$18	            CMP #`(HEAP_TOP + 1)
.1a11ba	b0 12		bcs $1a11ce	            BGE out_of_bnds
.1a11bc					chk_null
.1a11bc	c2 20		rep #$20	            REP #$20
.1a11be	a5 c3		lda $08c3	            LDA CURRHEADER
.1a11c0	f0 0c		beq $1a11ce	            BEQ out_of_bnds
.1a11c2					is_ok
.1a11c2	e2 20		sep #$20	            SEP #$20
.1a11c4	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.1a11c7	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a11c9	1a		inc a		            INC A
.1a11ca	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a11cc	28		plp		            PLP
.1a11cd	60		rts		            RTS
.1a11ce	00		brk #		out_of_bnds BRK
.1a11cf	ea		nop		            NOP
.1a11d0					HEAP_REMREF
.1a11d0	08		php		            PHP
.1a11d1	e2 20		sep #$20	            SEP #$20
.1a11d3	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a11d5	f0 04		beq $1a11db	            BEQ chk_null
.1a11d7	c9 18		cmp #$18	            CMP #`(HEAP_TOP + 1)
.1a11d9	b0 17		bcs $1a11f2	            BGE out_of_bnds
.1a11db					chk_null
.1a11db	c2 20		rep #$20	            REP #$20
.1a11dd	a5 c3		lda $08c3	            LDA CURRHEADER
.1a11df	f0 11		beq $1a11f2	            BEQ out_of_bnds
.1a11e1	e2 20		sep #$20	            SEP #$20
.1a11e3	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT  ; Decrement the reference count
.1a11e6	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a11e8	3a		dec a		            DEC A
.1a11e9	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a11eb	d0 03		bne $1a11f0	            BNE done            ; If it's still >0, we are done
.1a11ed	20 f4 11	jsr $1a11f4	            JSR HEAP_FREE
.1a11f0	28		plp		done        PLP
.1a11f1	60		rts		            RTS
.1a11f2	00		brk #		out_of_bnds BRK
.1a11f3	ea		nop		            NOP
.1a11f4					HEAP_FREE
.1a11f4	08		php		            PHP
.1a11f5	c2 20		rep #$20	            REP #$20
.1a11f7	a5 bd		lda $08bd	            LDA FREED           ; Check to see if blocks are already on the freed list
.1a11f9	d0 21		bne $1a121c	            BNE has_objects
.1a11fb	e2 20		sep #$20	            SEP #$20
.1a11fd	a5 bf		lda $08bf	            LDA FREED+2
.1a11ff	d0 1b		bne $1a121c	            BNE has_objects
.1a1201	a5 c5		lda $08c5	            LDA CURRHEADER+2    ; No: this block is the first one
.1a1203	85 bf		sta $08bf	            STA FREED+2         ; Just make it the freed list
.1a1205	c2 20		rep #$20	            REP #$20
.1a1207	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1209	85 bd		sta $08bd	            STA FREED
.1a120b	a9 00 00	lda #$0000	            LDA #0
.1a120e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT   ; And clear its next link
.1a1211	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1213	c8		iny		            INY
.1a1214	c8		iny		            INY
.1a1215	e2 20		sep #$20	            SEP #$20
.1a1217	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1219	4c db 12	jmp $1a12db	            JMP done
.1a121c					has_objects
.1a121c	e2 20		sep #$20	            SEP #$20
.1a121e	a5 bf		lda $08bf	            LDA FREED+2
.1a1220	c5 c5		cmp $08c5	            CMP CURRHEADER+2
.1a1222	90 28		bcc $1a124c	            BLT start_scan
.1a1224	c2 20		rep #$20	            REP #$20
.1a1226	a5 bd		lda $08bd	            LDA FREED
.1a1228	c5 c3		cmp $08c3	            CMP CURRHEADER
.1a122a	90 20		bcc $1a124c	            BLT start_scan
.1a122c					ins_first
.1a122c	c2 20		rep #$20	            REP #$20
.1a122e	a5 bd		lda $08bd	            LDA FREED               ; CURRHEADER->NEXT := FREED
.1a1230	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1233	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1235	e2 20		sep #$20	            SEP #$20
.1a1237	c8		iny		            INY
.1a1238	c8		iny		            INY
.1a1239	a5 bf		lda $08bf	            LDA FREED+2
.1a123b	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a123d	c2 20		rep #$20	            REP #$20
.1a123f	a5 c3		lda $08c3	            LDA CURRHEADER
.1a1241	85 bd		sta $08bd	            STA FREED
.1a1243	e2 20		sep #$20	            SEP #$20
.1a1245	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a1247	85 bf		sta $08bf	            STA FREED+2
.1a1249	4c db 12	jmp $1a12db	            JMP done
.1a124c					start_scan
.1a124c	c2 20		rep #$20	            REP #$20
.1a124e	a5 bd		lda $08bd	            LDA FREED
.1a1250	85 08		sta $0808	            STA INDEX
.1a1252	e2 20		sep #$20	            SEP #$20
.1a1254	a5 bf		lda $08bf	            LDA FREED+2
.1a1256	85 0a		sta $080a	            STA INDEX+2
.1a1258					loop
.1a1258	e2 20		sep #$20	            SEP #$20
.1a125a	a0 04 00	ldy #$0004	            LDY #HEAPOBJ.NEXT+2
.1a125d	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a125f	c5 c8		cmp $08c8	            CMP CURREND+2
.1a1261	90 32		bcc $1a1295	            BLT go_next             ; No: check the next spot
.1a1263	d0 0b		bne $1a1270	            BNE ins_next
.1a1265	c2 20		rep #$20	            REP #$20
.1a1267	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a126a	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a126c	c5 c6		cmp $08c6	            CMP CURREND
.1a126e	90 25		bcc $1a1295	            BLT go_next             ; No: check the next spot
.1a1270					ins_next
.1a1270	c2 20		rep #$20	            REP #$20
.1a1272	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := INDEX->NEXT
.1a1275	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a1277	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1279	e2 20		sep #$20	            SEP #$20
.1a127b	c8		iny		            INY
.1a127c	c8		iny		            INY
.1a127d	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a127f	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1281	c2 20		rep #$20	            REP #$20
.1a1283	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.1a1285	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1288	97 08		sta [$0808],y	            STA [INDEX],Y
.1a128a	e2 20		sep #$20	            SEP #$20
.1a128c	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a128e	c8		iny		            INY
.1a128f	c8		iny		            INY
.1a1290	97 08		sta [$0808],y	            STA [INDEX],Y
.1a1292	4c db 12	jmp $1a12db	            JMP done
.1a1295					go_next
.1a1295	c2 20		rep #$20	            REP #$20
.1a1297	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Is INDEX->NEXT = 0
.1a129a	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a129c	d0 08		bne $1a12a6	            BNE not_at_end          ; No: load up the next object
.1a129e	e2 20		sep #$20	            SEP #$20
.1a12a0	c8		iny		            INY
.1a12a1	c8		iny		            INY
.1a12a2	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a12a4	f0 19		beq $1a12bf	            BEQ at_end
.1a12a6					not_at_end
.1a12a6	c2 20		rep #$20	            REP #$20
.1a12a8	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; INDEX := INDEX->NEXT
.1a12ab	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a12ad	85 0c		sta $080c	            STA SCRATCH
.1a12af	e2 20		sep #$20	            SEP #$20
.1a12b1	c8		iny		            INY
.1a12b2	c8		iny		            INY
.1a12b3	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a12b5	85 0a		sta $080a	            STA INDEX+2
.1a12b7	c2 20		rep #$20	            REP #$20
.1a12b9	a5 0c		lda $080c	            LDA SCRATCH
.1a12bb	85 08		sta $0808	            STA INDEX
.1a12bd	80 99		bra $1a1258	            BRA loop
.1a12bf					at_end
.1a12bf	c2 20		rep #$20	            REP #$20
.1a12c1	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.1a12c3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a12c6	97 08		sta [$0808],y	            STA [INDEX],Y
.1a12c8	e2 20		sep #$20	            SEP #$20
.1a12ca	c8		iny		            INY
.1a12cb	c8		iny		            INY
.1a12cc	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a12ce	97 08		sta [$0808],y	            STA [INDEX],Y
.1a12d0	a9 00		lda #$00	            LDA #0                  ; CURRHEADER->NEXT := 0
.1a12d2	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12d4	c2 20		rep #$20	            REP #$20
.1a12d6	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a12d9	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a12db					done
.1a12db	20 e0 12	jsr $1a12e0	            JSR COALLESCE
.1a12de	28		plp		            PLP
.1a12df	60		rts		            RTS
.1a12e0					COALLESCE
.1a12e0	08		php		            PHP
.1a12e1	c2 20		rep #$20	            REP #$20
.1a12e3	a5 bd		lda $08bd	            LDA FREED
.1a12e5	85 c3		sta $08c3	            STA CURRHEADER
.1a12e7	e2 20		sep #$20	            SEP #$20
.1a12e9	a5 bf		lda $08bf	            LDA FREED+2
.1a12eb	85 c5		sta $08c5	            STA CURRHEADER+2
.1a12ed					next_head
.1a12ed	c2 20		rep #$20	            REP #$20
.1a12ef	a5 c3		lda $08c3	            LDA CURRHEADER          ; Is CURRHEADER == 0?
.1a12f1	d0 09		bne $1a12fc	            BNE check_next          ; No: check if NEXT is contiguous
.1a12f3	e2 20		sep #$20	            SEP #$20
.1a12f5	a5 c5		lda $08c5	            LDA CURRHEADER+2
.1a12f7	d0 03		bne $1a12fc	            BNE check_next
.1a12f9	4c 83 13	jmp $1a1383	            JMP done                ; Yes: we're done
.1a12fc					check_next
.1a12fc	c2 20		rep #$20	            REP #$20
.1a12fe	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1301	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1303	85 0c		sta $080c	            STA SCRATCH
.1a1305	e2 20		sep #$20	            SEP #$20
.1a1307	c8		iny		            INY
.1a1308	c8		iny		            INY
.1a1309	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a130b	85 0e		sta $080e	            STA SCRATCH+2
.1a130d	c2 20		rep #$20	            REP #$20
.1a130f	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.1a1312	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1314	85 10		sta $0810	            STA SCRATCH2
.1a1316	e2 20		sep #$20	            SEP #$20
.1a1318	c8		iny		            INY
.1a1319	c8		iny		            INY
.1a131a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a131c	85 12		sta $0812	            STA SCRATCH2+2
.1a131e	c2 20		rep #$20	            REP #$20
.1a1320	a5 0c		lda $080c	            LDA SCRATCH
.1a1322	c5 10		cmp $0810	            CMP SCRATCH2            ; Is CURRHEADER->END = CURRHEADER->NEXT?
.1a1324	d0 08		bne $1a132e	            BNE go_next             ; No: go to the next block
.1a1326	e2 20		sep #$20	            SEP #$20
.1a1328	a5 0e		lda $080e	            LDA SCRATCH+2
.1a132a	c5 12		cmp $0812	            CMP SCRATCH2+2
.1a132c	f0 1f		beq $1a134d	            BEQ combine             ; Yes: combine the two blocks
.1a132e					go_next
.1a132e	c2 20		rep #$20	            REP #$20
.1a1330	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1333	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1335	85 0c		sta $080c	            STA SCRATCH
.1a1337	e2 20		sep #$20	            SEP #$20
.1a1339	c8		iny		            INY
.1a133a	c8		iny		            INY
.1a133b	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a133d	85 0e		sta $080e	            STA SCRATCH+2
.1a133f	c2 20		rep #$20	            REP #$20
.1a1341	a5 0c		lda $080c	            LDA SCRATCH
.1a1343	85 c3		sta $08c3	            STA CURRHEADER
.1a1345	e2 20		sep #$20	            SEP #$20
.1a1347	a5 0e		lda $080e	            LDA SCRATCH+2
.1a1349	85 c5		sta $08c5	            STA CURRHEADER+2
.1a134b	80 a0		bra $1a12ed	            BRA next_head                               ; And loop back to next_head
.1a134d					combine
.1a134d	c2 20		rep #$20	            REP #$20
.1a134f	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.1a1352	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a1354	85 0c		sta $080c	            STA SCRATCH
.1a1356	e2 20		sep #$20	            SEP #$20
.1a1358	c8		iny		            INY
.1a1359	c8		iny		            INY
.1a135a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.1a135c	85 0e		sta $080e	            STA SCRATCH+2
.1a135e	c2 20		rep #$20	            REP #$20
.1a1360	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := SCRATCH->NEXT
.1a1363	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a1365	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1367	e2 20		sep #$20	            SEP #$20
.1a1369	c8		iny		            INY
.1a136a	c8		iny		            INY
.1a136b	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a136d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a136f	c2 20		rep #$20	            REP #$20
.1a1371	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END       ; CURRHEADER->END := SCRATCH->END
.1a1374	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a1376	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1378	e2 20		sep #$20	            SEP #$20
.1a137a	c8		iny		            INY
.1a137b	c8		iny		            INY
.1a137c	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.1a137e	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.1a1380	4c fc 12	jmp $1a12fc	            JMP check_next          ; And loop back to check_next
.1a1383	28		plp		done        PLP
.1a1384	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\strings.s

.1a1385					CLRTMPSTR
.1a1385	08		php		            PHP
.1a1386	c2 20		rep #$20	            REP #$20
.1a1388	64 16		stz $0816	            STZ STRPTR
.1a138a	64 18		stz $0818	            STZ STRPTR+2
.1a138c	28		plp		            PLP
.1a138d	60		rts		            RTS
.1a138e					TEMPSTRING
.1a138e	08		php		            PHP
.1a138f	c2 30		rep #$30	            REP #$30
.1a1391	a5 16		lda $0816	            LDA STRPTR          ; Is STRPTR == 0?
.1a1393	d0 16		bne $1a13ab	            BNE add_256         ; No: add 256 to it
.1a1395	a5 18		lda $0818	            LDA STRPTR+2
.1a1397	d0 12		bne $1a13ab	            BNE add_256
.1a1399	e2 20		sep #$20	            SEP #$20
.1a139b	64 16		stz $0816	            STZ STRPTR
.1a139d	a5 e2		lda $08e2	            LDA NEXTVAR+1
.1a139f	1a		inc a		            INC A
.1a13a0	1a		inc a		            INC A
.1a13a1	85 17		sta $0817	            STA STRPTR+1
.1a13a3	a5 e3		lda $08e3	            LDA NEXTVAR+2
.1a13a5	85 18		sta $0818	            STA STRPTR+2
.1a13a7	64 19		stz $0819	            STZ STRPTR+3
.1a13a9	80 07		bra $1a13b2	            BRA chk_room
.1a13ab					add_256
.1a13ab	c2 20		rep #$20	            REP #$20
.1a13ad	a5 17		lda $0817	            LDA STRPTR+1        ; There was already a temporary string...
.1a13af	1a		inc a		            INC A               ; Leave 256 bytes for it
.1a13b0	85 17		sta $0817	            STA STRPTR+1
.1a13b2					chk_room
.1a13b2	c2 20		rep #$20	            REP #$20
.1a13b4	a5 bb		lda $08bb	            LDA HEAP+1          ; Check to make sure that STRPTR and HEAP haven't touched
.1a13b6	3a		dec a		            DEC A
.1a13b7	c5 17		cmp $0817	            CMP STRPTR+1
.1a13b9	f0 02		beq $1a13bd	            BEQ no_room         ; If they have, throw an error
.1a13bb	b0 1f		bcs $1a13dc	            BGE done
.1a13bd					no_room
.1a13bd	08		php		            PHP
.1a13be	c2 20		rep #$20	            REP #$20
.1a13c0	48		pha		            PHA
.1a13c1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a13c4	5b		tcd		            TCD
.1a13c5	68		pla		            PLA
.1a13c6	28		plp		            PLP
.1a13c7	e2 20		sep #$20	            SEP #$20
.1a13c9	a9 03		lda #$03	            LDA #ERR_MEMORY
.1a13cb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a13cf	c2 20		rep #$20	            REP #$20
.1a13d1	29 ff 00	and #$00ff	            AND #$00FF
.1a13d4	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a13d7	e2 20		sep #$20	            SEP #$20
.1a13d9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a13dc	28		plp		done        PLP
.1a13dd	60		rts		            RTS
.1a13de					ITOS_DIGIT
.1a13de	c9 00		cmp #$00	            CMP #0          ; Is it 0?
.1a13e0	d0 05		bne $1a13e7	            BNE add_digit   ; No: go ahead and add it
.1a13e2	c0 01 00	cpy #$0001	            CPY #1          ; Are we on the first digit?
.1a13e5	f0 05		beq $1a13ec	            BEQ done        ; Yes: ignore this leading 0
.1a13e7	09 30		ora #$30	add_digit   ORA #$30        ; Convert it to ASCII
.1a13e9	97 16		sta [$0816],y	            STA [STRPTR],Y  ; Save it to the string
.1a13eb	c8		iny		            INY             ; And point to the next location
.1a13ec					done
.1a13ec	60		rts		            RTS
.1a13ed					ITOS
.1a13ed	08		php		            PHP
.1a13ee	c2 30		rep #$30	            REP #$30
.1a13f0	64 0c		stz $080c	            STZ SCRATCH         ; Use scratch to store if negative
.1a13f2	a5 25		lda $0825	            LDA ARGUMENT1+2     ; Check to see if the number is negative
.1a13f4	10 1a		bpl $1a1410	            BPL start_cnvt
.1a13f6	18		clc		            CLC                 ; Yes: make ARGUMENT1 positive
.1a13f7	a5 23		lda $0823	            LDA ARGUMENT1
.1a13f9	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a13fc	69 01 00	adc #$0001	            ADC #1
.1a13ff	85 23		sta $0823	            STA ARGUMENT1
.1a1401	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1403	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a1406	69 00 00	adc #$0000	            ADC #0
.1a1409	85 25		sta $0825	            STA ARGUMENT1+2
.1a140b	a9 ff ff	lda #$ffff	            LDA #$FFFF          ; Record that the number was negative
.1a140e	85 0c		sta $080c	            STA SCRATCH
.1a1410					start_cnvt
.1a1410	64 10		stz $0810	            STZ SCRATCH2        ; SCRATCH2 will be our BCD version of the number
.1a1412	64 12		stz $0812	            STZ SCRATCH2+2
.1a1414	64 14		stz $0814	            STZ SCRATCH2+4
.1a1416	a2 1f 00	ldx #$001f	            LDX #31
.1a1419	f8		sed		            SED                 ; Yes, we're really using BCD mode
.1a141a	06 23		asl $0823	shift_loop  ASL ARGUMENT1       ; Shift ARGUMENT1 left one bit
.1a141c	26 25		rol $0825	            ROL ARGUMENT1+2
.1a141e	a5 10		lda $0810	            LDA SCRATCH2        ; SCRATCH2 := SCRATCH2 + SCRATCH2 + Carry
.1a1420	65 10		adc $0810	            ADC SCRATCH2
.1a1422	85 10		sta $0810	            STA SCRATCH2
.1a1424	a5 12		lda $0812	            LDA SCRATCH2+2
.1a1426	65 12		adc $0812	            ADC SCRATCH2+2
.1a1428	85 12		sta $0812	            STA SCRATCH2+2
.1a142a	a5 14		lda $0814	            LDA SCRATCH2+4
.1a142c	65 14		adc $0814	            ADC SCRATCH2+4
.1a142e	85 14		sta $0814	            STA SCRATCH2+4
.1a1430	ca		dex		            DEX
.1a1431	10 e7		bpl $1a141a	            BPL shift_loop      ; Loop through all 32 bits of ARGUMENT1
.1a1433	d8		cld		            CLD                 ; Switch back out of BCD mode
.1a1434	e2 20		sep #$20	            SEP #$20
.1a1436	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a1439	a0 00 00	ldy #$0000	            LDY #0              ; Y will be index into the temporary string
.1a143c	a5 0c		lda $080c	            LDA SCRATCH         ; Check to see if the number was negative
.1a143e	f0 04		beq $1a1444	            BEQ is_pos          ; No: write a leading space
.1a1440	a9 2d		lda #$2d	            LDA #'-'            ; If negative, write the minus sign
.1a1442	80 02		bra $1a1446	            BRA wr_lead
.1a1444	a9 20		lda #$20	is_pos      LDA #CHAR_SP        ; Write a leading space
.1a1446	97 16		sta [$0816],y	wr_lead     STA [STRPTR],Y
.1a1448	c8		iny		            INY
.1a1449	a2 05 00	ldx #$0005	            LDX #5
.1a144c	b5 10		lda $0810,x	ascii_loop  LDA SCRATCH2,X
.1a144e	29 f0		and #$f0	            AND #$F0
.1a1450	4a		lsr a		            LSR A
.1a1451	4a		lsr a		            LSR A
.1a1452	4a		lsr a		            LSR A
.1a1453	4a		lsr a		            LSR A
.1a1454	20 de 13	jsr $1a13de	            JSR ITOS_DIGIT
.1a1457	b5 10		lda $0810,x	            LDA SCRATCH2,X
.1a1459	29 0f		and #$0f	            AND #$0F
.1a145b	20 de 13	jsr $1a13de	            JSR ITOS_DIGIT
.1a145e	ca		dex		            DEX
.1a145f	10 eb		bpl $1a144c	            BPL ascii_loop
.1a1461	c0 01 00	cpy #$0001	            CPY #1              ; Did we write anything?
.1a1464	d0 0c		bne $1a1472	            BNE null_term       ; Yes: add a NULL to terminate
.1a1466	a9 20		lda #$20	            LDA #' '            ; No: write a " 0" to the string
.1a1468	87 16		sta [$0816]	            STA [STRPTR]
.1a146a	a0 01 00	ldy #$0001	            LDY #1
.1a146d	a9 30		lda #$30	            LDA #'0'
.1a146f	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1471	c8		iny		            INY
.1a1472	a9 00		lda #$00	null_term   LDA #0
.1a1474	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And terminate the string
.1a1476	28		plp		done        PLP
.1a1477	60		rts		            RTS
.1a1478	00		brk #		fault       BRK
.1a1479	ea		nop		            NOP
.1a147a					STRLEN
.1a147a	08		php		            PHP
.1a147b	e2 20		sep #$20	            SEP #$20
.1a147d	c2 10		rep #$10	            REP #$10
.1a147f	a0 00 00	ldy #$0000	            LDY #0
.1a1482	bd 00 00	lda $1a0000,x	loop        LDA #0,B,X
.1a1485	f0 04		beq $1a148b	            BEQ done
.1a1487	e8		inx		            INX
.1a1488	c8		iny		            INY
.1a1489	80 f7		bra $1a1482	            BRA loop
.1a148b	28		plp		done        PLP
.1a148c	60		rts		            RTS
.1a148d					STRCMP
.1a148d	08		php		            PHP
.1a148e	0b		phd		            PHD
.1a148f	08		php		            PHP
.1a1490	c2 20		rep #$20	            REP #$20
.1a1492	48		pha		            PHA
.1a1493	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1496	5b		tcd		            TCD
.1a1497	68		pla		            PLA
.1a1498	28		plp		            PLP
.1a1499	e2 20		sep #$20	            SEP #$20
.1a149b	c2 10		rep #$10	            REP #$10
.1a149d	a0 00 00	ldy #$0000	            LDY #0
.1a14a0	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Check if the character 1 is 0
.1a14a2	d0 04		bne $1a14a8	            BNE comp_mag            ; If not, check the magnitudes
.1a14a4	b7 29		lda [$0829],y	            LDA [ARGUMENT2],Y       ; If so, check if the character 2 is 0
.1a14a6	f0 25		beq $1a14cd	            BEQ are_equal           ; If so, the strings are equal
.1a14a8	b7 23		lda [$0823],y	comp_mag    LDA [ARGUMENT1],Y       ; Otherwise, get character 1 again
.1a14aa	d7 29		cmp [$0829],y	            CMP [ARGUMENT2],Y       ; And compare it to character 2
.1a14ac	90 12		bcc $1a14c0	            BLT is_less             ; Check if character 1 < character 2
.1a14ae	d0 03		bne $1a14b3	            BNE is_greater          ; Check if character 1 > character 2
.1a14b0	c8		iny		            INY                     ; Equal so far... so go to the next pair of characters
.1a14b1	80 ed		bra $1a14a0	            BRA loop
.1a14b3					is_greater
.1a14b3	c2 20		rep #$20	            REP #$20
.1a14b5	a9 01 00	lda #$0001	            LDA #1                  ; So return 1
.1a14b8	85 23		sta $0823	            STA ARGUMENT1
.1a14ba	e2 20		sep #$20	            SEP #$20
.1a14bc	64 25		stz $0825	            STZ ARGUMENT1+2
.1a14be	80 15		bra $1a14d5	            BRA done
.1a14c0					is_less
.1a14c0	c2 20		rep #$20	            REP #$20
.1a14c2	a9 ff ff	lda #$ffff	            LDA #$FFFF              ; So return -1
.1a14c5	85 23		sta $0823	            STA ARGUMENT1
.1a14c7	e2 20		sep #$20	            SEP #$20
.1a14c9	85 25		sta $0825	            STA ARGUMENT1+2
.1a14cb	80 08		bra $1a14d5	            BRA done
.1a14cd					are_equal
.1a14cd	c2 20		rep #$20	            REP #$20
.1a14cf	64 23		stz $0823	            STZ ARGUMENT1           ; So return 0
.1a14d1	e2 20		sep #$20	            SEP #$20
.1a14d3	64 25		stz $0825	            STZ ARGUMENT1+2
.1a14d5					done
.1a14d5	e2 20		sep #$20	            SEP #$20
.1a14d7	a9 00		lda #$00	            LDA #TYPE_INTEGER
.1a14d9	85 27		sta $0827	            STA ARGTYPE1
.1a14db	2b		pld		            PLD
.1a14dc	28		plp		            PLP
.1a14dd	60		rts		            RTS
.1a14de					STRCONCAT
.1a14de	08		php		            PHP
.1a14df	0b		phd		            PHD
.1a14e0	8b		phb		            PHB
.1a14e1	08		php		            PHP
.1a14e2	c2 20		rep #$20	            REP #$20
.1a14e4	48		pha		            PHA
.1a14e5	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a14e8	5b		tcd		            TCD
.1a14e9	68		pla		            PLA
.1a14ea	28		plp		            PLP
.1a14eb	e2 20		sep #$20	            SEP #$20
.1a14ed	c2 10		rep #$10	            REP #$10
.1a14ef	08		php		            PHP
.1a14f0	c2 20		rep #$20	            REP #$20
.1a14f2	48		pha		            PHA
.1a14f3	e2 20		sep #$20	            SEP #$20
.1a14f5	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a14f7	48		pha		            PHA
.1a14f8	ab		plb		            PLB
.1a14f9	c2 20		rep #$20	            REP #$20
.1a14fb	68		pla		            PLA
.1a14fc	28		plp		            PLP
.1a14fd	a6 23		ldx $0823	            LDX ARGUMENT1
.1a14ff	20 7a 14	jsr $1a147a	            JSR STRLEN
.1a1502	84 0c		sty $080c	            STY SCRATCH
.1a1504	08		php		            PHP
.1a1505	c2 20		rep #$20	            REP #$20
.1a1507	48		pha		            PHA
.1a1508	e2 20		sep #$20	            SEP #$20
.1a150a	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a150c	48		pha		            PHA
.1a150d	ab		plb		            PLB
.1a150e	c2 20		rep #$20	            REP #$20
.1a1510	68		pla		            PLA
.1a1511	28		plp		            PLP
.1a1512	a6 29		ldx $0829	            LDX ARGUMENT2
.1a1514	20 7a 14	jsr $1a147a	            JSR STRLEN
.1a1517	c2 20		rep #$20	            REP #$20
.1a1519	98		tya		            TYA
.1a151a	38		sec		            SEC                     ; X := LEN(ARGUMENT1) + LEN(ARGUMENT2) + 1
.1a151b	65 0c		adc $080c	            ADC SCRATCH
.1a151d	aa		tax		            TAX
.1a151e	e2 20		sep #$20	            SEP #$20
.1a1520	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set type to STRING
.1a1522	20 60 0f	jsr $1a0f60	            JSR ALLOC
.1a1525	c2 20		rep #$20	            REP #$20
.1a1527	a5 b7		lda $08b7	            LDA ALLOCATED           ; INDEX := pointer to the string
.1a1529	85 08		sta $0808	            STA INDEX
.1a152b	e2 20		sep #$20	            SEP #$20
.1a152d	a5 b9		lda $08b9	            LDA ALLOCATED+2
.1a152f	85 0a		sta $080a	            STA INDEX+2
.1a1531	a0 00 00	ldy #$0000	            LDY #0                  ; Set the target index to the beginning
.1a1534	08		php		            PHP
.1a1535	c2 20		rep #$20	            REP #$20
.1a1537	48		pha		            PHA
.1a1538	e2 20		sep #$20	            SEP #$20
.1a153a	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a153c	48		pha		            PHA
.1a153d	ab		plb		            PLB
.1a153e	c2 20		rep #$20	            REP #$20
.1a1540	68		pla		            PLA
.1a1541	28		plp		            PLP
.1a1542	a6 23		ldx $0823	            LDX ARGUMENT1
.1a1544	bd 00 00	lda $1a0000,x	loop1       LDA #0,B,X              ; Get the Xth byte of ARGUMENT1
.1a1547	f0 06		beq $1a154f	            BEQ copy_2              ; Is it null? Yes: move on to the next string
.1a1549	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.1a154b	e8		inx		            INX                     ; Point to the next characters
.1a154c	c8		iny		            INY
.1a154d	80 f5		bra $1a1544	            BRA loop1               ; And do again
.1a154f					copy_2
.1a154f	e2 20		sep #$20	            SEP #$20
.1a1551	08		php		            PHP
.1a1552	c2 20		rep #$20	            REP #$20
.1a1554	48		pha		            PHA
.1a1555	e2 20		sep #$20	            SEP #$20
.1a1557	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a1559	48		pha		            PHA
.1a155a	ab		plb		            PLB
.1a155b	c2 20		rep #$20	            REP #$20
.1a155d	68		pla		            PLA
.1a155e	28		plp		            PLP
.1a155f	a6 29		ldx $0829	            LDX ARGUMENT2
.1a1561	bd 00 00	lda $1a0000,x	loop2       LDA #0,B,X              ; Get the Xth byte of ARGUMENT2
.1a1564	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.1a1566	f0 04		beq $1a156c	            BEQ terminate           ; Is it null? Yes: move on to the next string
.1a1568	e8		inx		            INX                     ; Point to the next characters
.1a1569	c8		iny		            INY
.1a156a	80 f5		bra $1a1561	            BRA loop2               ; And do again
.1a156c					terminate
.1a156c	c2 20		rep #$20	            REP #$20
.1a156e	a5 08		lda $0808	            LDA INDEX               ; Set ARGUMENT1 to the new string
.1a1570	85 23		sta $0823	            STA ARGUMENT1
.1a1572	e2 20		sep #$20	            SEP #$20
.1a1574	a5 0a		lda $080a	            LDA INDEX+2
.1a1576	85 25		sta $0825	            STA ARGUMENT1+2
.1a1578	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set ARGUMENT1's type to STRING
.1a157a	85 27		sta $0827	            STA ARGTYPE1
.1a157c	ab		plb		            PLB
.1a157d	2b		pld		            PLD
.1a157e	28		plp		            PLP
.1a157f	60		rts		            RTS
.1a1580					STRCPY
.1a1580	da		phx		            PHX
.1a1581	5a		phy		            PHY
.1a1582	08		php		            PHP
.1a1583	0b		phd		            PHD
.1a1584	8b		phb		            PHB
.1a1585	08		php		            PHP
.1a1586	c2 20		rep #$20	            REP #$20
.1a1588	48		pha		            PHA
.1a1589	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a158c	5b		tcd		            TCD
.1a158d	68		pla		            PLA
.1a158e	28		plp		            PLP
.1a158f	c2 20		rep #$20	            REP #$20
.1a1591	a5 0a		lda $080a	            LDA INDEX+2
.1a1593	48		pha		            PHA
.1a1594	a5 08		lda $0808	            LDA INDEX
.1a1596	48		pha		            PHA
.1a1597	c2 30		rep #$30	            REP #$30
.1a1599	08		php		            PHP
.1a159a	c2 20		rep #$20	            REP #$20
.1a159c	48		pha		            PHA
.1a159d	e2 20		sep #$20	            SEP #$20
.1a159f	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a15a1	48		pha		            PHA
.1a15a2	ab		plb		            PLB
.1a15a3	c2 20		rep #$20	            REP #$20
.1a15a5	68		pla		            PLA
.1a15a6	28		plp		            PLP
.1a15a7	a6 23		ldx $0823	            LDX ARGUMENT1
.1a15a9	20 7a 14	jsr $1a147a	            JSR STRLEN
.1a15ac	98		tya		            TYA
.1a15ad	aa		tax		            TAX
.1a15ae	e8		inx		            INX                     ; Put length of string (plus NUL) in X
.1a15af	e2 20		sep #$20	            SEP #$20
.1a15b1	a9 02		lda #$02	            LDA #TYPE_STRING
.1a15b3	20 60 0f	jsr $1a0f60	            JSR ALLOC
.1a15b6	c2 20		rep #$20	            REP #$20
.1a15b8	a5 c0		lda $08c0	            LDA CURRBLOCK
.1a15ba	85 08		sta $0808	            STA INDEX
.1a15bc	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.1a15be	85 0a		sta $080a	            STA INDEX+2
.1a15c0	a0 00 00	ldy #$0000	            LDY #0
.1a15c3	e2 20		sep #$20	            SEP #$20
.1a15c5	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Copy the data to the allocated string
.1a15c7	97 08		sta [$0808],y	            STA [INDEX],Y
.1a15c9	f0 03		beq $1a15ce	            BEQ ret_copy
.1a15cb	c8		iny		            INY
.1a15cc	80 f7		bra $1a15c5	            BRA loop
.1a15ce					ret_copy
.1a15ce	c2 20		rep #$20	            REP #$20
.1a15d0	a5 08		lda $0808	            LDA INDEX
.1a15d2	85 23		sta $0823	            STA ARGUMENT1
.1a15d4	a5 0a		lda $080a	            LDA INDEX+2
.1a15d6	85 25		sta $0825	            STA ARGUMENT1+2
.1a15d8	c2 20		rep #$20	            REP #$20
.1a15da	68		pla		            PLA
.1a15db	85 08		sta $0808	            STA INDEX
.1a15dd	68		pla		            PLA
.1a15de	85 0a		sta $080a	            STA INDEX+2
.1a15e0	ab		plb		            PLB
.1a15e1	2b		pld		            PLD
.1a15e2	28		plp		            PLP
.1a15e3	7a		ply		            PLY
.1a15e4	fa		plx		            PLX
.1a15e5	60		rts		            RTS
.1a15e6					STRSUBSTR
.1a15e6	08		php		            PHP
.1a15e7	e2 20		sep #$20	            SEP #$20
.1a15e9	c2 10		rep #$10	            REP #$10
.1a15eb	a0 00 00	ldy #$0000	            LDY #0
.1a15ee	b7 23		lda [$0823],y	count_loop  LDA [ARGUMENT1],Y
.1a15f0	f0 05		beq $1a15f7	            BEQ counted
.1a15f2	c8		iny		            INY
.1a15f3	80 f9		bra $1a15ee	            BRA count_loop
.1a15f5	84 92		sty $0892	            STY MTEMP               ; MTEMP := length of the source string
.1a15f7					counted
.1a15f7	c2 30		rep #$30	            REP #$30
.1a15f9	c4 29		cpy $0829	            CPY ARGUMENT2           ; length of string <= index?
.1a15fb	90 13		bcc $1a1610	            BLT ret_empty           ; Yes: return empty string
.1a15fd	f0 11		beq $1a1610	            BEQ ret_empty
.1a15ff	a5 8f		lda $088f	            LDA MCOUNT              ; Is the desired count <= 0?
.1a1601	30 0d		bmi $1a1610	            BMI ret_empty
.1a1603	f0 0b		beq $1a1610	            BEQ ret_empty           ; Yes: return the empty string
.1a1605	c4 8f		cpy $088f	            CPY MCOUNT              ; Is the desired length < the length of the source?
.1a1607	b0 12		bcs $1a161b	            BGE do_slice            ; Yes: go ahead and get the substring
.1a1609	a5 29		lda $0829	            LDA ARGUMENT2           ; Is INDEX == 0?
.1a160b	d0 0e		bne $1a161b	            BNE do_slice            ; No: do a slice
.1a160d	4c 64 16	jmp $1a1664	            JMP done                ; Yes: just return the source string
.1a1610					ret_empty
.1a1610	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a1613	e2 20		sep #$20	            SEP #$20
.1a1615	a9 00		lda #$00	            LDA #0
.1a1617	87 16		sta [$0816]	            STA [STRPTR]
.1a1619	80 39		bra $1a1654	            BRA finish_copy
.1a161b					do_slice
.1a161b	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a161e	c2 30		rep #$30	            REP #$30
.1a1620	18		clc		            CLC                     ; ARGUMENT1 := ARGUMENT1 + index
.1a1621	a5 23		lda $0823	            LDA ARGUMENT1
.1a1623	65 29		adc $0829	            ADC ARGUMENT2
.1a1625	85 23		sta $0823	            STA ARGUMENT1
.1a1627	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1629	69 00 00	adc #$0000	            ADC #0
.1a162c	85 25		sta $0825	            STA ARGUMENT1+2
.1a162e	a0 00 00	ldy #$0000	            LDY #0
.1a1631					copy_loop
.1a1631	e2 20		sep #$20	            SEP #$20
.1a1633	a7 23		lda [$0823]	            LDA [ARGUMENT1]         ; Copy a character from the substring to the temporary string
.1a1635	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1637	f0 1b		beq $1a1654	            BEQ finish_copy         ; If it is a NULL, we're done
.1a1639	c2 20		rep #$20	            REP #$20
.1a163b	18		clc		            CLC                     ; Move to the next character
.1a163c	a5 23		lda $0823	            LDA ARGUMENT1
.1a163e	69 01 00	adc #$0001	            ADC #1
.1a1641	85 23		sta $0823	            STA ARGUMENT1
.1a1643	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a1645	69 00 00	adc #$0000	            ADC #0
.1a1648	85 25		sta $0825	            STA ARGUMENT1+2
.1a164a	c8		iny		            INY
.1a164b	c4 8f		cpy $088f	            CPY MCOUNT              ; Have we reached the limit to copy?
.1a164d	d0 e2		bne $1a1631	            BNE copy_loop           ; No: copy the next byte
.1a164f	a9 00 00	lda #$0000	            LDA #0                  ; Null terminate string
.1a1652	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1654					finish_copy
.1a1654	c2 20		rep #$20	            REP #$20
.1a1656	a5 16		lda $0816	            LDA STRPTR
.1a1658	85 23		sta $0823	            STA ARGUMENT1
.1a165a	a5 18		lda $0818	            LDA STRPTR+2
.1a165c	85 25		sta $0825	            STA ARGUMENT1+2
.1a165e	e2 20		sep #$20	            SEP #$20
.1a1660	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a1662	85 27		sta $0827	            STA ARGTYPE1
.1a1664					done
.1a1664	28		plp		            PLP
.1a1665	60		rts		            RTS
.1a1666					OP_STR_LT
.1a1666	08		php		            PHP
.1a1667	c2 30		rep #$30	            REP #$30
.1a1669	20 8d 14	jsr $1a148d	            JSR STRCMP
.1a166c	a5 23		lda $0823	            LDA ARGUMENT1
.1a166e	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.1a1671	d0 05		bne $1a1678	            BNE ret_false               ; No: return false
.1a1673					ret_true
.1a1673	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a1676	80 03		bra $1a167b	            BRA done
.1a1678					ret_false
.1a1678	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a167b	28		plp		done        PLP
.1a167c	60		rts		            RTS
.1a167d					OP_STR_GT
.1a167d	08		php		            PHP
.1a167e	c2 30		rep #$30	            REP #$30
.1a1680	20 8d 14	jsr $1a148d	            JSR STRCMP
.1a1683	a5 23		lda $0823	            LDA ARGUMENT1
.1a1685	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.1a1688	d0 05		bne $1a168f	            BNE ret_false               ; No: return false
.1a168a					ret_true
.1a168a	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a168d	80 03		bra $1a1692	            BRA done
.1a168f					ret_false
.1a168f	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a1692	28		plp		done        PLP
.1a1693	60		rts		            RTS
.1a1694					OP_STR_EQ
.1a1694	08		php		            PHP
.1a1695	c2 30		rep #$30	            REP #$30
.1a1697	20 8d 14	jsr $1a148d	            JSR STRCMP
.1a169a	a5 23		lda $0823	            LDA ARGUMENT1
.1a169c	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.1a169f	d0 05		bne $1a16a6	            BNE ret_false               ; No: return false
.1a16a1					ret_true
.1a16a1	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a16a4	80 03		bra $1a16a9	            BRA done
.1a16a6					ret_false
.1a16a6	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a16a9	28		plp		done        PLP
.1a16aa	60		rts		            RTS
.1a16ab					OP_STR_NE
.1a16ab	08		php		            PHP
.1a16ac	c2 30		rep #$30	            REP #$30
.1a16ae	20 8d 14	jsr $1a148d	            JSR STRCMP
.1a16b1	a5 23		lda $0823	            LDA ARGUMENT1
.1a16b3	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.1a16b6	f0 05		beq $1a16bd	            BEQ ret_false               ; Yes: return false
.1a16b8					ret_true
.1a16b8	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a16bb	80 03		bra $1a16c0	            BRA done
.1a16bd					ret_false
.1a16bd	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a16c0	28		plp		done        PLP
.1a16c1	60		rts		            RTS
.1a16c2					OP_STR_GTE
.1a16c2	08		php		            PHP
.1a16c3	c2 30		rep #$30	            REP #$30
.1a16c5	20 8d 14	jsr $1a148d	            JSR STRCMP
.1a16c8	a5 23		lda $0823	            LDA ARGUMENT1
.1a16ca	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.1a16cd	f0 05		beq $1a16d4	            BEQ ret_false               ; Yes: return false
.1a16cf					ret_true
.1a16cf	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a16d2	80 03		bra $1a16d7	            BRA done
.1a16d4					ret_false
.1a16d4	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a16d7	28		plp		done        PLP
.1a16d8	60		rts		            RTS
.1a16d9					OP_STR_LTE
.1a16d9	08		php		            PHP
.1a16da	c2 30		rep #$30	            REP #$30
.1a16dc	20 8d 14	jsr $1a148d	            JSR STRCMP
.1a16df	a5 23		lda $0823	            LDA ARGUMENT1
.1a16e1	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.1a16e4	f0 05		beq $1a16eb	            BEQ ret_false               ; Yes: return false
.1a16e6					ret_true
.1a16e6	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a16e9	80 03		bra $1a16ee	            BRA done
.1a16eb					ret_false
.1a16eb	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a16ee	28		plp		done        PLP
.1a16ef	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\listing.s

.1a16f0					LISTPROG
.1a16f0	48		pha		            PHA
.1a16f1	5a		phy		            PHY
.1a16f2	0b		phd		            PHD
.1a16f3	08		php		            PHP
.1a16f4	08		php		            PHP
.1a16f5	c2 20		rep #$20	            REP #$20
.1a16f7	48		pha		            PHA
.1a16f8	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a16fb	5b		tcd		            TCD
.1a16fc	68		pla		            PLA
.1a16fd	28		plp		            PLP
.1a16fe	c2 30		rep #$30	            REP #$30
.1a1700	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a1703	85 00		sta $0800	            STA BIP
.1a1705	85 1a		sta $081a	            STA CURLINE
.1a1707	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a170a	85 02		sta $0802	            STA BIP+2
.1a170c	85 1c		sta $081c	            STA CURLINE+2
.1a170e	ad 8a 0f	lda $0f8a	list_loop   LDA KEYFLAG         ; Check the keyboard flags
.1a1711	30 20		bmi $1a1733	            BMI throw_break     ; If MSB: user pressed an interrupt key, stop the listing
.1a1713	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.1a1716	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.1a1718	f0 0f		beq $1a1729	            BEQ done
.1a171a	c5 55		cmp $0855	            CMP MARG1
.1a171c	90 10		bcc $1a172e	            BLT skip_line
.1a171e	c5 59		cmp $0859	            CMP MARG2
.1a1720	f0 02		beq $1a1724	            BEQ print_line
.1a1722	b0 05		bcs $1a1729	            BGE done
.1a1724					print_line
.1a1724	20 52 17	jsr $1a1752	            JSR LISTLINE
.1a1727	80 e5		bra $1a170e	            BRA list_loop
.1a1729	28		plp		done        PLP
.1a172a	2b		pld		            PLD
.1a172b	7a		ply		            PLY
.1a172c	68		pla		            PLA
.1a172d	60		rts		            RTS
.1a172e					skip_line
.1a172e	20 1b 20	jsr $1a201b	            JSR NEXTLINE
.1a1731	80 db		bra $1a170e	            BRA list_loop           ; And try again
.1a1733					throw_break
.1a1733	08		php		            PHP
.1a1734	c2 20		rep #$20	            REP #$20
.1a1736	48		pha		            PHA
.1a1737	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a173a	5b		tcd		            TCD
.1a173b	68		pla		            PLA
.1a173c	28		plp		            PLP
.1a173d	e2 20		sep #$20	            SEP #$20
.1a173f	a9 01		lda #$01	            LDA #ERR_BREAK
.1a1741	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1745	c2 20		rep #$20	            REP #$20
.1a1747	29 ff 00	and #$00ff	            AND #$00FF
.1a174a	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a174d	e2 20		sep #$20	            SEP #$20
.1a174f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1752					LISTLINE
.1a1752	08		php		            PHP
.1a1753	c2 30		rep #$30	            REP #$30
.1a1755	85 23		sta $0823	            STA ARGUMENT1
.1a1757	64 25		stz $0825	            STZ ARGUMENT1+2
.1a1759	20 ed 13	jsr $1a13ed	            JSR ITOS
.1a175c	a5 16		lda $0816	            LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a175e	1a		inc a		            INC A
.1a175f	85 23		sta $0823	            STA ARGUMENT1
.1a1761	a5 18		lda $0818	            LDA STRPTR+2
.1a1763	85 25		sta $0825	            STA ARGUMENT1+2
.1a1765	20 68 43	jsr $1a4368	            JSR PR_STRING
.1a1768	18		clc		            CLC                 ; Move the BIP to the first byte of the line
.1a1769	a5 1a		lda $081a	            LDA CURLINE
.1a176b	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a176e	85 00		sta $0800	            STA BIP
.1a1770	a5 1c		lda $081c	            LDA CURLINE+2
.1a1772	69 00 00	adc #$0000	            ADC #0
.1a1775	85 02		sta $0802	            STA BIP+2
.1a1777	e2 20		sep #$20	            SEP #$20
.1a1779	a9 20		lda #$20	            LDA #CHAR_SP
.1a177b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a177e	c2 20		rep #$20	            REP #$20
.1a1780					loop
.1a1780	20 91 17	jsr $1a1791	            JSR LISTBYTE
.1a1783	90 fb		bcc $1a1780	            BCC loop
.1a1785	e2 20		sep #$20	            SEP #$20
.1a1787	a9 0d		lda #$0d	            LDA #CHAR_CR
.1a1789	20 18 00	jsr $1a0018	            JSR PRINTC
.1a178c	20 1b 20	jsr $1a201b	            JSR NEXTLINE
.1a178f	28		plp		            PLP
.1a1790	60		rts		            RTS
.1a1791					LISTBYTE
.1a1791	08		php		            PHP
.1a1792	0b		phd		            PHD
.1a1793	8b		phb		            PHB
.1a1794	08		php		            PHP
.1a1795	c2 20		rep #$20	            REP #$20
.1a1797	48		pha		            PHA
.1a1798	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a179b	5b		tcd		            TCD
.1a179c	68		pla		            PLA
.1a179d	28		plp		            PLP
.1a179e	08		php		            PHP
.1a179f	e2 20		sep #$20	            SEP #$20
.1a17a1	48		pha		            PHA
.1a17a2	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a17a4	48		pha		            PHA
.1a17a5	ab		plb		            PLB
.1a17a6	68		pla		            PLA
.1a17a7	28		plp		            PLP
.1a17a8	e2 20		sep #$20	            SEP #$20
.1a17aa	c2 10		rep #$10	            REP #$10
.1a17ac	a7 00		lda [$0800]	            LDA [BIP]           ; Get the current byte
.1a17ae	f0 3a		beq $1a17ea	            BEQ end_of_line     ; If it's 0, return with C set
.1a17b0	30 05		bmi $1a17b7	            BMI is_token        ; If it's 0x80 - 0xFF, it's a token
.1a17b2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a17b5	80 29		bra $1a17e0	            BRA done            ; And return
.1a17b7					is_token
.1a17b7	c2 20		rep #$20	            REP #$20
.1a17b9	29 7f 00	and #$007f	            AND #$007F          ; Compute the index of the token
.1a17bc	0a		asl a		            ASL A               ; In the token table
.1a17bd	0a		asl a		            ASL A
.1a17be	0a		asl a		            ASL A
.1a17bf	18		clc		            CLC
.1a17c0	69 b0 0b	adc #$0bb0	            ADC #<>TOKENS       ; Set INDEX to the address of the token
.1a17c3	85 08		sta $0808	            STA INDEX
.1a17c5	a9 1a 00	lda #$001a	            LDA #`TOKENS
.1a17c8	69 00 00	adc #$0000	            ADC #0
.1a17cb	85 0a		sta $080a	            STA INDEX+2
.1a17cd					pr_default
.1a17cd	08		php		            PHP
.1a17ce	e2 20		sep #$20	            SEP #$20
.1a17d0	48		pha		            PHA
.1a17d1	a9 1a		lda #$1a	            LDA #`TOKENS
.1a17d3	48		pha		            PHA
.1a17d4	ab		plb		            PLB
.1a17d5	68		pla		            PLA
.1a17d6	28		plp		            PLP
.1a17d7	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.1a17da	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a17dc	aa		tax		            TAX
.1a17dd	20 16 03	jsr $1a0316	            JSR PRINTS
.1a17e0					done
.1a17e0	c2 20		rep #$20	            REP #$20
.1a17e2	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a17e5	ab		plb		            PLB
.1a17e6	2b		pld		            PLD
.1a17e7	28		plp		            PLP
.1a17e8	18		clc		            CLC
.1a17e9	60		rts		            RTS
.1a17ea	ab		plb		end_of_line PLB
.1a17eb	2b		pld		            PLD
.1a17ec	28		plp		            PLP
.1a17ed	38		sec		            SEC
.1a17ee	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\eval.s

.1a17ef					INITEVALSP
.1a17ef	08		php		            PHP
.1a17f0	c2 20		rep #$20	            REP #$20
.1a17f2	a9 ff 6f	lda #$6fff	            LDA #ARGUMENT_TOP
.1a17f5	85 1f		sta $081f	            STA ARGUMENTSP
.1a17f7	a9 ff 7f	lda #$7fff	            LDA #OPERATOR_TOP
.1a17fa	85 21		sta $0821	            STA OPERATORSP
.1a17fc	a9 ff ff	lda #$ffff	            LDA #$FFFF
.1a17ff	85 23		sta $0823	            STA ARGUMENT1
.1a1801	85 25		sta $0825	            STA ARGUMENT1+2
.1a1803	85 29		sta $0829	            STA ARGUMENT2
.1a1805	85 2b		sta $082b	            STA ARGUMENT2+2
.1a1807	e2 20		sep #$20	            SEP #$20
.1a1809	85 27		sta $0827	            STA ARGTYPE1
.1a180b	85 2d		sta $082d	            STA ARGTYPE2
.1a180d	28		plp		            PLP
.1a180e	60		rts		            RTS
.1a180f					PHARGUMENT
.1a180f	08		php		            PHP
.1a1810	0b		phd		            PHD
.1a1811	8b		phb		            PHB
.1a1812	08		php		            PHP
.1a1813	c2 20		rep #$20	            REP #$20
.1a1815	48		pha		            PHA
.1a1816	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1819	5b		tcd		            TCD
.1a181a	68		pla		            PLA
.1a181b	28		plp		            PLP
.1a181c	08		php		            PHP
.1a181d	e2 20		sep #$20	            SEP #$20
.1a181f	48		pha		            PHA
.1a1820	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1822	48		pha		            PHA
.1a1823	ab		plb		            PLB
.1a1824	68		pla		            PLA
.1a1825	28		plp		            PLP
.1a1826	c2 30		rep #$30	            REP #$30
.1a1828	5a		phy		            PHY
.1a1829	a4 1f		ldy $081f	            LDY ARGUMENTSP
.1a182b	bd 00 00	lda $0000,x	            LDA #0,B,X
.1a182e	99 00 00	sta $0000,y	            STA #0,B,Y
.1a1831	bd 02 00	lda $0002,x	            LDA #2,B,X
.1a1834	99 02 00	sta $0002,y	            STA #2,B,Y
.1a1837	e2 20		sep #$20	            SEP #$20
.1a1839	bd 04 00	lda $0004,x	            LDA #4,B,X
.1a183c	99 04 00	sta $0004,y	            STA #4,B,Y
.1a183f	c2 20		rep #$20	            REP #$20
.1a1841	38		sec		            SEC
.1a1842	98		tya		            TYA
.1a1843	e9 05 00	sbc #$0005	            SBC #ARGUMENT_SIZE
.1a1846	85 1f		sta $081f	            STA ARGUMENTSP
.1a1848	7a		ply		            PLY
.1a1849	ab		plb		            PLB
.1a184a	2b		pld		            PLD
.1a184b	28		plp		            PLP
.1a184c	60		rts		            RTS
.1a184d					PLARGUMENT
.1a184d	08		php		            PHP
.1a184e	0b		phd		            PHD
.1a184f	8b		phb		            PHB
.1a1850	08		php		            PHP
.1a1851	c2 20		rep #$20	            REP #$20
.1a1853	48		pha		            PHA
.1a1854	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1857	5b		tcd		            TCD
.1a1858	68		pla		            PLA
.1a1859	28		plp		            PLP
.1a185a	08		php		            PHP
.1a185b	e2 20		sep #$20	            SEP #$20
.1a185d	48		pha		            PHA
.1a185e	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1860	48		pha		            PHA
.1a1861	ab		plb		            PLB
.1a1862	68		pla		            PLA
.1a1863	28		plp		            PLP
.1a1864	c2 30		rep #$30	            REP #$30
.1a1866	5a		phy		            PHY
.1a1867	18		clc		            CLC
.1a1868	a5 1f		lda $081f	            LDA ARGUMENTSP
.1a186a	69 05 00	adc #$0005	            ADC #ARGUMENT_SIZE
.1a186d	85 1f		sta $081f	            STA ARGUMENTSP
.1a186f	a8		tay		            TAY
.1a1870	b9 00 00	lda $0000,y	            LDA #0,B,Y
.1a1873	9d 00 00	sta $0000,x	            STA #0,B,X
.1a1876	b9 02 00	lda $0002,y	            LDA #2,B,Y
.1a1879	9d 02 00	sta $0002,x	            STA #2,B,X
.1a187c	e2 20		sep #$20	            SEP #$20
.1a187e	b9 04 00	lda $0004,y	            LDA #4,B,Y
.1a1881	9d 04 00	sta $0004,x	            STA #4,B,X
.1a1884	bd 00 00	lda $0000,x	            LDA #0,B,X
.1a1887	7a		ply		            PLY
.1a1888	ab		plb		            PLB
.1a1889	2b		pld		            PLD
.1a188a	28		plp		            PLP
.1a188b	60		rts		            RTS
.1a188c					PHOPERATOR
.1a188c	08		php		            PHP
.1a188d	0b		phd		            PHD
.1a188e	8b		phb		            PHB
.1a188f	08		php		            PHP
.1a1890	c2 20		rep #$20	            REP #$20
.1a1892	48		pha		            PHA
.1a1893	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1896	5b		tcd		            TCD
.1a1897	68		pla		            PLA
.1a1898	28		plp		            PLP
.1a1899	08		php		            PHP
.1a189a	e2 20		sep #$20	            SEP #$20
.1a189c	48		pha		            PHA
.1a189d	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a189f	48		pha		            PHA
.1a18a0	ab		plb		            PLB
.1a18a1	68		pla		            PLA
.1a18a2	28		plp		            PLP
.1a18a3	e2 20		sep #$20	            SEP #$20
.1a18a5	c2 10		rep #$10	            REP #$10
.1a18a7	5a		phy		            PHY
.1a18a8	a4 21		ldy $0821	            LDY OPERATORSP
.1a18aa	99 00 00	sta $0000,y	            STA #0,B,Y
.1a18ad	88		dey		            DEY
.1a18ae	84 21		sty $0821	            STY OPERATORSP
.1a18b0	7a		ply		done        PLY
.1a18b1	ab		plb		            PLB
.1a18b2	2b		pld		            PLD
.1a18b3	28		plp		            PLP
.1a18b4	60		rts		            RTS
.1a18b5					PLOPERATOR
.1a18b5	08		php		            PHP
.1a18b6	0b		phd		            PHD
.1a18b7	8b		phb		            PHB
.1a18b8	08		php		            PHP
.1a18b9	c2 20		rep #$20	            REP #$20
.1a18bb	48		pha		            PHA
.1a18bc	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a18bf	5b		tcd		            TCD
.1a18c0	68		pla		            PLA
.1a18c1	28		plp		            PLP
.1a18c2	08		php		            PHP
.1a18c3	e2 20		sep #$20	            SEP #$20
.1a18c5	48		pha		            PHA
.1a18c6	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a18c8	48		pha		            PHA
.1a18c9	ab		plb		            PLB
.1a18ca	68		pla		            PLA
.1a18cb	28		plp		            PLP
.1a18cc	e2 20		sep #$20	            SEP #$20
.1a18ce	c2 10		rep #$10	            REP #$10
.1a18d0	5a		phy		            PHY
.1a18d1	a4 21		ldy $0821	            LDY OPERATORSP
.1a18d3	c8		iny		            INY
.1a18d4	84 21		sty $0821	            STY OPERATORSP
.1a18d6	b9 00 00	lda $0000,y	            LDA #0,B,Y
.1a18d9	c2 20		rep #$20	            REP #$20
.1a18db	29 ff 00	and #$00ff	            AND #$00FF
.1a18de	7a		ply		            PLY
.1a18df	ab		plb		            PLB
.1a18e0	2b		pld		            PLD
.1a18e1	28		plp		            PLP
.1a18e2	60		rts		            RTS
.1a18e3					OPENPARAMS
.1a18e3	08		php		            PHP
.1a18e4	e2 20		sep #$20	            SEP #$20
.1a18e6	a9 01		lda #$01	            LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.1a18e8	20 8c 18	jsr $1a188c	            JSR PHOPERATOR
.1a18eb	28		plp		            PLP
.1a18ec	60		rts		            RTS
.1a18ed					CLOSEPARAMS
.1a18ed	5a		phy		            PHY
.1a18ee	08		php		            PHP
.1a18ef	8b		phb		            PHB
.1a18f0	08		php		            PHP
.1a18f1	e2 20		sep #$20	            SEP #$20
.1a18f3	48		pha		            PHA
.1a18f4	a9 00		lda #$00	            LDA #0
.1a18f6	48		pha		            PHA
.1a18f7	ab		plb		            PLB
.1a18f8	68		pla		            PLA
.1a18f9	28		plp		            PLP
.1a18fa	e2 20		sep #$20	            SEP #$20
.1a18fc	a4 21		ldy $0821	            LDY OPERATORSP      ; Peek at the top operator
.1a18fe	b9 01 00	lda $0001,y	            LDA #1,B,Y
.1a1901	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the marker for the start of a parameter list
.1a1903	d0 08		bne $1a190d	            BNE error           ; No: there's a problem
.1a1905	c2 20		rep #$20	            REP #$20
.1a1907	e6 21		inc $0821	            INC OPERATORSP      ; Yes: remove it from the operator stack.
.1a1909	ab		plb		            PLB
.1a190a	28		plp		            PLP
.1a190b	7a		ply		            PLY
.1a190c	60		rts		            RTS
.1a190d					error
.1a190d	08		php		            PHP
.1a190e	c2 20		rep #$20	            REP #$20
.1a1910	48		pha		            PHA
.1a1911	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1914	5b		tcd		            TCD
.1a1915	68		pla		            PLA
.1a1916	28		plp		            PLP
.1a1917	e2 20		sep #$20	            SEP #$20
.1a1919	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a191b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a191f	c2 20		rep #$20	            REP #$20
.1a1921	29 ff 00	and #$00ff	            AND #$00FF
.1a1924	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a1927	e2 20		sep #$20	            SEP #$20
.1a1929	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a192c					OPHIGHPREC
.1a192c	48		pha		            PHA
.1a192d	08		php		            PHP
.1a192e	0b		phd		            PHD
.1a192f	8b		phb		            PHB
.1a1930	08		php		            PHP
.1a1931	c2 20		rep #$20	            REP #$20
.1a1933	48		pha		            PHA
.1a1934	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1937	5b		tcd		            TCD
.1a1938	68		pla		            PLA
.1a1939	28		plp		            PLP
.1a193a	08		php		            PHP
.1a193b	e2 20		sep #$20	            SEP #$20
.1a193d	48		pha		            PHA
.1a193e	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1940	48		pha		            PHA
.1a1941	ab		plb		            PLB
.1a1942	68		pla		            PLA
.1a1943	28		plp		            PLP
.1a1944	e2 20		sep #$20	            SEP #$20
.1a1946	a4 21		ldy $0821	            LDY OPERATORSP
.1a1948	c0 ff 7f	cpy #$7fff	            CPY #OPERATOR_TOP       ; Is the stack empty?
.1a194b	f0 11		beq $1a195e	            BEQ is_false            ; Yes: return false
.1a194d	20 0f 0b	jsr $1a0b0f	            JSR TOKPRECED
.1a1950	85 0c		sta $080c	            STA SCRATCH             ; Save it for later comparison
.1a1952	b9 01 00	lda $0001,y	            LDA #1,B,Y              ; Get the operator at the top of the stack
.1a1955	20 0f 0b	jsr $1a0b0f	            JSR TOKPRECED
.1a1958	c5 0c		cmp $080c	            CMP SCRATCH             ; Compare the priorities (0 = highest priority)
.1a195a	f0 02		beq $1a195e	            BEQ is_false            ; A = SCRATCH, return false
.1a195c	90 08		bcc $1a1966	            BCC is_true             ; A < SCRATCH (A is higher priority), return false
.1a195e					is_false
.1a195e	c2 20		rep #$20	            REP #$20
.1a1960	ab		plb		            PLB
.1a1961	2b		pld		            PLD
.1a1962	28		plp		            PLP
.1a1963	68		pla		            PLA
.1a1964	18		clc		            CLC
.1a1965	60		rts		            RTS
.1a1966					is_true
.1a1966	c2 20		rep #$20	            REP #$20
.1a1968	ab		plb		            PLB                     ; A > SCRATCH (A is lower priority), return true
.1a1969	2b		pld		            PLD
.1a196a	28		plp		            PLP
.1a196b	68		pla		            PLA
.1a196c	38		sec		            SEC
.1a196d	60		rts		            RTS
.1a196e					EVALNUMBER
.1a196e	4c 8a 07	jmp $1a078a	            JMP PARSEINT
.1a1971					ARR_GETIDX
.1a1971	08		php		            PHP
.1a1972	e2 20		sep #$20	            SEP #$20
.1a1974	a9 00		lda #$00	            LDA #0
.1a1976	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF     ; Set the dimension to 0
.1a197a	a2 01 00	ldx #$0001	            LDX #1
.1a197d					eval_index
.1a197d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a1980	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a1983	c2 20		rep #$20	            REP #$20
.1a1985	a5 23		lda $0823	            LDA ARGUMENT1       ; Save the index to the array index buffer
.1a1987	9f 00 4d 00	sta $004d00,x	            STA @lARRIDXBUF,X
.1a198b	e2 20		sep #$20	            SEP #$20
.1a198d	af 00 4d 00	lda $004d00	            LDA @lARRIDXBUF     ; Increment the index count
.1a1991	1a		inc a		            INC A
.1a1992	30 3e		bmi $1a19d2	            BMI arg_err         ; If more than 127 dimensions, throw a range error
.1a1994	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF
.1a1998	e8		inx		            INX
.1a1999	e8		inx		            INX
.1a199a	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a199d	e2 20		sep #$20	            SEP #$20
.1a199f	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.1a19a1	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it ")"
.1a19a3	f0 09		beq $1a19ae	            BEQ clean_op        ; Yes: cleanup the argument stack
.1a19a5	c9 2c		cmp #$2c	            CMP #','            ; Is it a comma?
.1a19a7	d0 0a		bne $1a19b3	            BNE syntax_err      ; No: throw a syntax error
.1a19a9					skip_comma
.1a19a9	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a19ac	80 cf		bra $1a197d	            BRA eval_index      ; And grab the next index
.1a19ae					clean_op
.1a19ae	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a19b1	28		plp		            PLP
.1a19b2	60		rts		            RTS
.1a19b3					syntax_err
.1a19b3	08		php		            PHP
.1a19b4	c2 20		rep #$20	            REP #$20
.1a19b6	48		pha		            PHA
.1a19b7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a19ba	5b		tcd		            TCD
.1a19bb	68		pla		            PLA
.1a19bc	28		plp		            PLP
.1a19bd	e2 20		sep #$20	            SEP #$20
.1a19bf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a19c1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a19c5	c2 20		rep #$20	            REP #$20
.1a19c7	29 ff 00	and #$00ff	            AND #$00FF
.1a19ca	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a19cd	e2 20		sep #$20	            SEP #$20
.1a19cf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a19d2					arg_err
.1a19d2	08		php		            PHP
.1a19d3	c2 20		rep #$20	            REP #$20
.1a19d5	48		pha		            PHA
.1a19d6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a19d9	5b		tcd		            TCD
.1a19da	68		pla		            PLA
.1a19db	28		plp		            PLP
.1a19dc	e2 20		sep #$20	            SEP #$20
.1a19de	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a19e0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a19e4	c2 20		rep #$20	            REP #$20
.1a19e6	29 ff 00	and #$00ff	            AND #$00FF
.1a19e9	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a19ec	e2 20		sep #$20	            SEP #$20
.1a19ee	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a19f1					EVALREF
.1a19f1	08		php		            PHP
.1a19f2					get_name
.1a19f2	20 51 51	jsr $1a5151	            JSR VAR_FINDNAME
.1a19f5	90 23		bcc $1a1a1a	            BCC syntax_err      ; If we didn't find a name, thrown an error
.1a19f7	e2 20		sep #$20	            SEP #$20
.1a19f9	a5 ea		lda $08ea	            LDA TOFINDTYPE      ; Check the type of the variable
.1a19fb	29 80		and #$80	            AND #$80            ; Is it an array?
.1a19fd	d0 06		bne $1a1a05	            BNE is_array        ; Yes: look for the indexes
.1a19ff	20 52 4f	jsr $1a4f52	            JSR VAR_REF
.1a1a02	4c 18 1a	jmp $1a1a18	            JMP done
.1a1a05					is_array
.1a1a05	e2 20		sep #$20	            SEP #$20
.1a1a07	a9 8f		lda #$8f	            LDA #TOK_LPAREN
.1a1a09	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a1a0c	20 e3 18	jsr $1a18e3	            JSR OPENPARAMS
.1a1a0f					            PHARRIDX
.1a1a0f	20 71 19	jsr $1a1971	            JSR ARR_GETIDX
.1a1a12	20 aa 63	jsr $1a63aa	            JSR ARR_REF
.1a1a15					            PLARRIDX
.1a1a15	20 ed 18	jsr $1a18ed	            JSR CLOSEPARAMS
.1a1a18	28		plp		done        PLP
.1a1a19	60		rts		            RTS
.1a1a1a					syntax_err
.1a1a1a	08		php		            PHP
.1a1a1b	c2 20		rep #$20	            REP #$20
.1a1a1d	48		pha		            PHA
.1a1a1e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1a21	5b		tcd		            TCD
.1a1a22	68		pla		            PLA
.1a1a23	28		plp		            PLP
.1a1a24	e2 20		sep #$20	            SEP #$20
.1a1a26	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1a28	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1a2c	c2 20		rep #$20	            REP #$20
.1a1a2e	29 ff 00	and #$00ff	            AND #$00FF
.1a1a31	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a1a34	e2 20		sep #$20	            SEP #$20
.1a1a36	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1a39					EVALSTRING
.1a1a39	08		php		            PHP
.1a1a3a	0b		phd		            PHD
.1a1a3b	08		php		            PHP
.1a1a3c	c2 20		rep #$20	            REP #$20
.1a1a3e	48		pha		            PHA
.1a1a3f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1a42	5b		tcd		            TCD
.1a1a43	68		pla		            PLA
.1a1a44	28		plp		            PLP
.1a1a45	e2 20		sep #$20	            SEP #$20
.1a1a47	c2 10		rep #$10	            REP #$10
.1a1a49	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1a4c	a0 00 00	ldy #$0000	            LDY #0              ; Ywill be our length counter
.1a1a4f	b7 00		lda [$0800],y	count_loop  LDA [BIP],Y         ; Get the character
.1a1a51	f0 24		beq $1a1a77	            BEQ error           ; If it's end-of-line, throw an error
.1a1a53	c9 22		cmp #$22	            CMP #CHAR_DQUOTE    ; Is it the ending double-quote?
.1a1a55	f0 03		beq $1a1a5a	            BEQ found_end       ; Yes: Y should be the length
.1a1a57	c8		iny		            INY
.1a1a58	80 f5		bra $1a1a4f	            BRA count_loop
.1a1a5a	84 0c		sty $080c	found_end   STY SCRATCH         ; Save the length to SCRATCH
.1a1a5c	e2 20		sep #$20	            SEP #$20
.1a1a5e	a9 02		lda #$02	            LDA #TYPE_STRING    ; Set the type to allocate to STRING
.1a1a60	a6 0c		ldx $080c	            LDX SCRATCH         ; And the length to the length of the string literal
.1a1a62	e8		inx		            INX
.1a1a63	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a1a66	a0 00 00	ldy #$0000	            LDY #0
.1a1a69	c4 0c		cpy $080c	copy_loop   CPY SCRATCH         ; Have we copied all the characters?
.1a1a6b	f0 29		beq $1a1a96	            BEQ done            ; Yes: we're done
.1a1a6d	a7 00		lda [$0800]	            LDA [BIP]           ; No: get the next character
.1a1a6f	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And copy it to the allocated string
.1a1a71	c8		iny		            INY
.1a1a72	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1a75	80 f2		bra $1a1a69	            BRA copy_loop       ; And try the next character
.1a1a77					error
.1a1a77	08		php		            PHP
.1a1a78	c2 20		rep #$20	            REP #$20
.1a1a7a	48		pha		            PHA
.1a1a7b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1a7e	5b		tcd		            TCD
.1a1a7f	68		pla		            PLA
.1a1a80	28		plp		            PLP
.1a1a81	e2 20		sep #$20	            SEP #$20
.1a1a83	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1a85	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1a89	c2 20		rep #$20	            REP #$20
.1a1a8b	29 ff 00	and #$00ff	            AND #$00FF
.1a1a8e	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a1a91	e2 20		sep #$20	            SEP #$20
.1a1a93	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1a96	a9 00		lda #$00	done        LDA #0
.1a1a98	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a1a9a	c2 20		rep #$20	            REP #$20
.1a1a9c	a5 16		lda $0816	            LDA STRPTR
.1a1a9e	85 23		sta $0823	            STA ARGUMENT1
.1a1aa0	a5 18		lda $0818	            LDA STRPTR+2
.1a1aa2	85 25		sta $0825	            STA ARGUMENT1+2
.1a1aa4	a9 02 00	lda #$0002	            LDA #TYPE_STRING    ; And set the type of ARGUMENT1 to string
.1a1aa7	85 27		sta $0827	            STA ARGTYPE1
.1a1aa9	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1aac	2b		pld		            PLD
.1a1aad	28		plp		            PLP
.1a1aae	60		rts		            RTS
.1a1aaf					EVAL_FUNC
.1a1aaf	08		php		            PHP
.1a1ab0	e2 20		sep #$20	            SEP #$20
.1a1ab2	a7 00		lda [$0800]	            LDA [BIP]           ; Get the token
.1a1ab4	c2 20		rep #$20	            REP #$20
.1a1ab6	29 ff 00	and #$00ff	            AND #$00FF
.1a1ab9	20 39 0b	jsr $1a0b39	            JSR TOKEVAL
.1a1abc	85 2f		sta $082f	            STA JMP16PTR
.1a1abe	20 e3 18	jsr $1a18e3	            JSR OPENPARAMS
.1a1ac1	08		php		            PHP
.1a1ac2	e2 20		sep #$20	            SEP #$20
.1a1ac4	48		pha		            PHA
.1a1ac5	a9 00		lda #$00	            LDA #0
.1a1ac7	48		pha		            PHA
.1a1ac8	ab		plb		            PLB
.1a1ac9	68		pla		            PLA
.1a1aca	28		plp		            PLP
.1a1acb	20 d3 1a	jsr $1a1ad3	            JSR OPSTUB
.1a1ace	20 ed 18	jsr $1a18ed	            JSR CLOSEPARAMS
.1a1ad1	28		plp		            PLP
.1a1ad2	60		rts		            RTS
.1a1ad3					OPSTUB
.1a1ad3	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1ad6	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a1ad9					PROCESSOP
.1a1ad9	48		pha		            PHA
.1a1ada	08		php		            PHP
.1a1adb	0b		phd		            PHD
.1a1adc	8b		phb		            PHB
.1a1add	08		php		            PHP
.1a1ade	c2 20		rep #$20	            REP #$20
.1a1ae0	48		pha		            PHA
.1a1ae1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1ae4	5b		tcd		            TCD
.1a1ae5	68		pla		            PLA
.1a1ae6	28		plp		            PLP
.1a1ae7	c2 30		rep #$30	            REP #$30
.1a1ae9	20 b5 18	jsr $1a18b5	            JSR PLOPERATOR
.1a1aec	89 80 00	bit #$0080	            BIT #$80            ; Check if it's really a token
.1a1aef	f0 37		beq $1a1b28	            BEQ bad_token       ; No: it's a bad token
.1a1af1	48		pha		            PHA
.1a1af2	20 39 0b	jsr $1a0b39	            JSR TOKEVAL
.1a1af5	85 2f		sta $082f	            STA JMP16PTR
.1a1af7	68		pla		            PLA
.1a1af8	20 86 0b	jsr $1a0b86	            JSR TOKARITY
.1a1afb	c9 01 00	cmp #$0001	            CMP #1              ; Check the operator's arity
.1a1afe	f0 08		beq $1a1b08	            BEQ pull_arg1       ; If it's 1 just pull one argument from the stack
.1a1b00	c2 30		rep #$30	            REP #$30
.1a1b02	a2 29 08	ldx #$0829	            LDX #<>ARGUMENT2    ; Pull argument 2 from the stack
.1a1b05	20 4d 18	jsr $1a184d	            JSR PLARGUMENT
.1a1b08					pull_arg1
.1a1b08	c2 30		rep #$30	            REP #$30
.1a1b0a	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Pull argument 1 from the stack
.1a1b0d	20 4d 18	jsr $1a184d	            JSR PLARGUMENT
.1a1b10	08		php		            PHP
.1a1b11	e2 20		sep #$20	            SEP #$20
.1a1b13	48		pha		            PHA
.1a1b14	a9 00		lda #$00	            LDA #0
.1a1b16	48		pha		            PHA
.1a1b17	ab		plb		            PLB
.1a1b18	68		pla		            PLA
.1a1b19	28		plp		            PLP
.1a1b1a	20 2a 1b	jsr $1a1b2a	            JSR OPSTUB
.1a1b1d	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Get return result in argument 1
.1a1b20	20 0f 18	jsr $1a180f	            JSR PHARGUMENT
.1a1b23	ab		plb		            PLB
.1a1b24	2b		pld		            PLD
.1a1b25	28		plp		            PLP
.1a1b26	68		pla		            PLA
.1a1b27	60		rts		            RTS
.1a1b28	00		brk #		bad_token   BRK
.1a1b29	ea		nop		            NOP
.1a1b2a	6c 2f 08	jmp ($082f)	OPSTUB      JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a1b2d					EVALEXPR
.1a1b2d	08		php		            PHP
.1a1b2e	08		php		            PHP
.1a1b2f	c2 20		rep #$20	            REP #$20
.1a1b31	48		pha		            PHA
.1a1b32	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1b35	5b		tcd		            TCD
.1a1b36	68		pla		            PLA
.1a1b37	28		plp		            PLP
.1a1b38	08		php		            PHP
.1a1b39	e2 20		sep #$20	            SEP #$20
.1a1b3b	48		pha		            PHA
.1a1b3c	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a1b3e	48		pha		            PHA
.1a1b3f	ab		plb		            PLB
.1a1b40	68		pla		            PLA
.1a1b41	28		plp		            PLP
.1a1b42	c2 10		rep #$10	            REP #$10
.1a1b44	da		phx		            PHX
.1a1b45					get_char
.1a1b45	e2 20		sep #$20	            SEP #$20
.1a1b47	a7 00		lda [$0800]	            LDA [BIP]           ; Get the character
.1a1b49	d0 03		bne $1a1b4e	            BNE else1
.1a1b4b	4c f0 1b	jmp $1a1bf0	            JMP proc_stack      ; Handle end of line, if we see it
.1a1b4e	30 33		bmi $1a1b83	else1       BMI is_token        ; If MSB is set, it's a token
.1a1b50	c9 20		cmp #$20	            CMP #' '            ; Is it a space?
.1a1b52	d0 03		bne $1a1b57	            BNE else2
.1a1b54	4c ea 1b	jmp $1a1bea	            JMP next_char       ; Yes: Skip to the next character
.1a1b57	c9 3a		cmp #$3a	else2       CMP #'9'+1          ; Check to see if we have digits
.1a1b59	b0 04		bcs $1a1b5f	            BCS else3           ; No: treat as the end of the line
.1a1b5b	c9 30		cmp #$30	            CMP #'0'
.1a1b5d	b0 56		bcs $1a1bb5	            BCS is_digit
.1a1b5f	c9 26		cmp #$26	else3       CMP #'&'            ; Check for a hexadecimal prefix
.1a1b61	f0 52		beq $1a1bb5	            BEQ is_digit
.1a1b63	c9 22		cmp #$22	            CMP #'"'            ; Is it a double-quote?
.1a1b65	d0 03		bne $1a1b6a	            BNE else4
.1a1b67	4c 03 1c	jmp $1a1c03	            JMP is_string       ; Yes: process the string
.1a1b6a	c9 5b		cmp #$5b	else4       CMP #'Z'+1          ; Check to see if we have upper case alphabetics
.1a1b6c	b0 07		bcs $1a1b75	            BCS check_lc        ; No: check for lower case
.1a1b6e	c9 41		cmp #$41	            CMP #'A'
.1a1b70	90 03		bcc $1a1b75	            BCC check_lc
.1a1b72	4c 0f 1c	jmp $1a1c0f	            JMP is_alpha
.1a1b75	c9 7b		cmp #$7b	check_lc    CMP #'z'+1          ; Check to see if we have lower case alphabetics
.1a1b77	b0 07		bcs $1a1b80	            BCS else5           ; No: treat as the end of the line
.1a1b79	c9 61		cmp #$61	            CMP #'a'
.1a1b7b	90 03		bcc $1a1b80	            BCC else5
.1a1b7d	4c 0f 1c	jmp $1a1c0f	            JMP is_alpha
.1a1b80	4c f0 1b	jmp $1a1bf0	else5       JMP proc_stack
.1a1b83	c9 8f		cmp #$8f	is_token    CMP #TOK_LPAREN     ; Is it an LPAREN
.1a1b85	f0 40		beq $1a1bc7	            BEQ is_lparen       ; Yes: handle the LPAREN
.1a1b87	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it an RPAREN?
.1a1b89	f0 41		beq $1a1bcc	            BEQ is_rparen       ; Yes: handle the RPAREN
.1a1b8b	20 5c 0b	jsr $1a0b5c	            JSR TOKTYPE
.1a1b8e	c9 30		cmp #$30	            CMP #TOK_TY_FUNC    ; Is it a function?
.1a1b90	d0 0c		bne $1a1b9e	            BNE chk_op          ; No: check if it's an operator
.1a1b92	20 af 1a	jsr $1a1aaf	            JSR EVAL_FUNC
.1a1b95	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1b98	20 0f 18	jsr $1a180f	            JSR PHARGUMENT
.1a1b9b	4c 45 1b	jmp $1a1b45	            JMP get_char
.1a1b9e	c9 00		cmp #$00	chk_op      CMP #TOK_TY_OP      ; Is it an operator?
.1a1ba0	d0 4e		bne $1a1bf0	            BNE proc_stack      ; No: we're finished processing
.1a1ba2	a7 00		lda [$0800]	            LDA [BIP]           ; Yes: Get the token back
.1a1ba4	a6 21		ldx $0821	chk_prec    LDX OPERATORSP      ; Is the operator stack empty?
.1a1ba6	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.1a1ba9	f0 05		beq $1a1bb0	            BEQ push_op         ; Yes: push the operator
.1a1bab	20 2c 19	jsr $1a192c	            JSR OPHIGHPREC
.1a1bae	b0 12		bcs $1a1bc2	            BCS process1        ; No: we should process the top operator
.1a1bb0					push_op
.1a1bb0	20 8c 18	jsr $1a188c	            JSR PHOPERATOR
.1a1bb3	80 35		bra $1a1bea	            BRA next_char       ; And go to the next character
.1a1bb5					is_digit
.1a1bb5	c2 20		rep #$20	            REP #$20
.1a1bb7	20 73 57	jsr $1a5773	            JSR PARSENUM
.1a1bba	a2 23 08	ldx #$0823	got_number  LDX #<>ARGUMENT1
.1a1bbd	20 0f 18	jsr $1a180f	            JSR PHARGUMENT
.1a1bc0	80 83		bra $1a1b45	            BRA get_char
.1a1bc2					process1
.1a1bc2	20 d9 1a	jsr $1a1ad9	            JSR PROCESSOP
.1a1bc5	80 dd		bra $1a1ba4	            BRA chk_prec        ; And check what to do with the current operator
.1a1bc7					is_lparen
.1a1bc7	20 8c 18	jsr $1a188c	            JSR PHOPERATOR
.1a1bca	80 1e		bra $1a1bea	            BRA next_char
.1a1bcc					is_rparen
.1a1bcc	e2 20		sep #$20	            SEP #$20
.1a1bce	a4 21		ldy $0821	            LDY OPERATORSP      ; Is the operator stack empty?
.1a1bd0	c0 ff 7f	cpy #$7fff	            CPY #<>OPERATOR_TOP
.1a1bd3	f0 46		beq $1a1c1b	            BEQ done            ; Yes: we're done evaluating things
.1a1bd5	a4 21		ldy $0821	paren_loop  LDY OPERATORSP      ; Peek at the top operator
.1a1bd7	b9 01 00	lda $0001,y	            LDA #1,B,Y
.1a1bda	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the LPAREN of a function?
.1a1bdc	f0 3d		beq $1a1c1b	            BEQ done            ; Yes: treat it as an empty stack
.1a1bde	c9 8f		cmp #$8f	            CMP #TOK_LPAREN     ; Is it an LPAREN?
.1a1be0	f0 05		beq $1a1be7	            BEQ done_rparen     ; Yes: we're finished processing
.1a1be2	20 d9 1a	jsr $1a1ad9	            JSR PROCESSOP
.1a1be5	80 ee		bra $1a1bd5	            BRA paren_loop
.1a1be7					done_rparen
.1a1be7	20 b5 18	jsr $1a18b5	            JSR PLOPERATOR
.1a1bea					next_char
.1a1bea	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1bed	4c 45 1b	jmp $1a1b45	            JMP get_char
.1a1bf0					proc_stack
.1a1bf0	a6 21		ldx $0821	            LDX OPERATORSP      ; Is the operator stack empty?
.1a1bf2	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.1a1bf5	b0 24		bcs $1a1c1b	            BGE done            ; Yes: return to the caller
.1a1bf7	bd 01 00	lda $0001,x	            LDA #1,B,X
.1a1bfa	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is top operator a function open?
.1a1bfc	f0 1d		beq $1a1c1b	            BEQ done            ; Yes: treat as end of expression
.1a1bfe	20 d9 1a	jsr $1a1ad9	            JSR PROCESSOP
.1a1c01	80 ed		bra $1a1bf0	            BRA proc_stack
.1a1c03					is_string
.1a1c03	20 39 1a	jsr $1a1a39	            JSR EVALSTRING
.1a1c06	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1c09	20 0f 18	jsr $1a180f	            JSR PHARGUMENT
.1a1c0c	4c 45 1b	jmp $1a1b45	            JMP get_char
.1a1c0f					is_alpha
.1a1c0f	20 f1 19	jsr $1a19f1	            JSR EVALREF
.1a1c12	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.1a1c15	20 0f 18	jsr $1a180f	            JSR PHARGUMENT
.1a1c18	4c 45 1b	jmp $1a1b45	            JMP get_char
.1a1c1b	a2 23 08	ldx #$0823	done        LDX #<>ARGUMENT1    ; Make sure the result is off the stack
.1a1c1e	20 4d 18	jsr $1a184d	            JSR PLARGUMENT
.1a1c21	fa		plx		            PLX
.1a1c22	28		plp		            PLP
.1a1c23	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\returnstack.s

.1a1c24					INITRETURN
.1a1c24	08		php		                PHP
.1a1c25	0b		phd		                PHD
.1a1c26	8b		phb		                PHB
.1a1c27	08		php		            PHP
.1a1c28	e2 20		sep #$20	            SEP #$20
.1a1c2a	48		pha		            PHA
.1a1c2b	a9 00		lda #$00	            LDA #0
.1a1c2d	48		pha		            PHA
.1a1c2e	ab		plb		            PLB
.1a1c2f	68		pla		            PLA
.1a1c30	28		plp		            PLP
.1a1c31	08		php		            PHP
.1a1c32	c2 20		rep #$20	            REP #$20
.1a1c34	48		pha		            PHA
.1a1c35	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1c38	5b		tcd		            TCD
.1a1c39	68		pla		            PLA
.1a1c3a	28		plp		            PLP
.1a1c3b	c2 30		rep #$30	            REP #$30
.1a1c3d	a9 fd 5f	lda #$5ffd	                LDA #RETURN_TOP-2
.1a1c40	85 33		sta $0833	                STA RETURNSP
.1a1c42	ab		plb		                PLB
.1a1c43	2b		pld		                PLD
.1a1c44	28		plp		                PLP
.1a1c45	60		rts		            RTS
.1a1c46					PHRETURN
.1a1c46	08		php		                PHP
.1a1c47	0b		phd		                PHD
.1a1c48	08		php		            PHP
.1a1c49	c2 20		rep #$20	            REP #$20
.1a1c4b	48		pha		            PHA
.1a1c4c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1c4f	5b		tcd		            TCD
.1a1c50	68		pla		            PLA
.1a1c51	28		plp		            PLP
.1a1c52	c2 30		rep #$30	            REP #$30
.1a1c54	92 33		sta ($0833)	                STA (RETURNSP)
.1a1c56	c6 33		dec $0833	                DEC RETURNSP
.1a1c58	c6 33		dec $0833	                DEC RETURNSP
.1a1c5a	2b		pld		                PLD
.1a1c5b	28		plp		                PLP
.1a1c5c	60		rts		            RTS
.1a1c5d					PHRETURNB
.1a1c5d	08		php		                PHP
.1a1c5e	c2 30		rep #$30	            REP #$30
.1a1c60	29 ff 00	and #$00ff	                AND #$00FF
.1a1c63	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a1c66	28		plp		                PLP
.1a1c67	60		rts		            RTS
.1a1c68					PLRETURN
.1a1c68	08		php		                PHP
.1a1c69	0b		phd		                PHD
.1a1c6a	08		php		            PHP
.1a1c6b	c2 20		rep #$20	            REP #$20
.1a1c6d	48		pha		            PHA
.1a1c6e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1c71	5b		tcd		            TCD
.1a1c72	68		pla		            PLA
.1a1c73	28		plp		            PLP
.1a1c74	c2 30		rep #$30	            REP #$30
.1a1c76	e6 33		inc $0833	                INC RETURNSP
.1a1c78	e6 33		inc $0833	                INC RETURNSP
.1a1c7a	b2 33		lda ($0833)	                LDA (RETURNSP)
.1a1c7c	2b		pld		                PLD
.1a1c7d	28		plp		                PLP
.1a1c7e	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\interpreter.s

=$80					ST_RUNNING = $80            ; The interpreter is running a full program
=$00					ST_INTERACT = $00           ; The interpreter is in interactive mode
>08d2					STATE       .byte ?         ; The state of the interpreter ()
>08d3					ERROR_NUM   .byte ?         ; The type of the error
>08d4					HANDLEERR   .long ?         ; Pointer to the error handler
>08d7					LINENUM     .word ?         ; The current line number
>08d9					LASTLINE    .long ?         ; Pointer to the next free space over the BASIC program
>08dc					EXECACTION  .byte ?         ; The action the exection routines should take to get their next statement
=0					LINE_LINK = 0               ; Offset to the link to the next line
=2					LINE_NUMBER = 2             ; Offset to the line number
=4					LINE_TOKENS = 4             ; Offset to the first token
=6					LINE_MINLEN = 6             ; Minimum length of a line
=0					EXEC_CONT = 0               ; Continue advancing the current line
=1					EXEC_STOP = 1               ; Stop execution of the program
=2					EXEC_GOTO = 2               ; Transfer execution to a new CURLINE that is already set
=3					EXEC_RETURN = 3             ; Transfer execution back to a line that was on the stack
.1a1c7f					SET_ERRERL
.1a1c7f	8b		phb		                PHB
.1a1c80	0b		phd		                PHD
.1a1c81	08		php		                PHP
.1a1c82	08		php		            PHP
.1a1c83	c2 20		rep #$20	            REP #$20
.1a1c85	48		pha		            PHA
.1a1c86	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a1c89	5b		tcd		            TCD
.1a1c8a	68		pla		            PLA
.1a1c8b	28		plp		            PLP
.1a1c8c	08		php		            PHP
.1a1c8d	e2 20		sep #$20	            SEP #$20
.1a1c8f	48		pha		            PHA
.1a1c90	a9 00		lda #$00	            LDA #BASIC_BANK
.1a1c92	48		pha		            PHA
.1a1c93	ab		plb		            PLB
.1a1c94	68		pla		            PLA
.1a1c95	28		plp		            PLP
.1a1c96	c2 20		rep #$20	            REP #$20
.1a1c98	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.1a1c9a	a9 00 00	lda #$0000	                LDA #0
.1a1c9d	85 25		sta $0825	                STA ARGUMENT1+2
.1a1c9f	e2 20		sep #$20	            SEP #$20
.1a1ca1	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a1ca3	85 27		sta $0827	                STA ARGTYPE1
.1a1ca5	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.1a1ca7	a9 1a		lda #$1a	                LDA #`err_name
.1a1ca9	85 e9		sta $08e9	                STA TOFIND+2
.1a1cab	c2 20		rep #$20	            REP #$20
.1a1cad	a9 d9 1c	lda #$1cd9	                LDA #<>err_name
.1a1cb0	85 e7		sta $08e7	                STA TOFIND
.1a1cb2	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a1cb5	c2 20		rep #$20	            REP #$20
.1a1cb7	a5 d7		lda $08d7	                LDA LINENUM
.1a1cb9	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.1a1cbb	a5 d9		lda $08d9	                LDA LINENUM+2
.1a1cbd	85 25		sta $0825	                STA ARGUMENT1+2
.1a1cbf	e2 20		sep #$20	            SEP #$20
.1a1cc1	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a1cc3	85 27		sta $0827	                STA ARGTYPE1
.1a1cc5	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.1a1cc7	a9 1a		lda #$1a	                LDA #`erl_name
.1a1cc9	85 e9		sta $08e9	                STA TOFIND+2
.1a1ccb	c2 20		rep #$20	            REP #$20
.1a1ccd	a9 dd 1c	lda #$1cdd	                LDA #<>erl_name
.1a1cd0	85 e7		sta $08e7	                STA TOFIND
.1a1cd2	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a1cd5	28		plp		                PLP
.1a1cd6	2b		pld		                PLD
.1a1cd7	ab		plb		                PLB
.1a1cd8	60		rts		            RTS
>1a1cd9	45 52 52 00			err_name        .null "ERR"
>1a1cdd	45 52 4c 00			erl_name        .null "ERL"
.1a1ce1					ON_ERROR
.1a1ce1	e2 20		sep #$20	            SEP #$20
.1a1ce3	c2 10		rep #$10	            REP #$10
.1a1ce5	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a1ce8	af d3 08 00	lda $0008d3	            LDA @lERROR_NUM         ; Calculate index to the error message pointer
.1a1cec	0a		asl a		            ASL A
.1a1ced	c2 20		rep #$20	            REP #$20
.1a1cef	29 ff 00	and #$00ff	            AND #$00FF
.1a1cf2	a8		tay		            TAY
.1a1cf3	08		php		            PHP
.1a1cf4	e2 20		sep #$20	            SEP #$20
.1a1cf6	48		pha		            PHA
.1a1cf7	a9 1a		lda #$1a	            LDA #`ERRORMSG
.1a1cf9	48		pha		            PHA
.1a1cfa	ab		plb		            PLB
.1a1cfb	68		pla		            PLA
.1a1cfc	28		plp		            PLP
.1a1cfd	be 33 1d	ldx $1a1d33,y	            LDX ERRORMSG,Y
.1a1d00	20 16 03	jsr $1a0316	            JSR PRINTS
.1a1d03	c2 20		rep #$20	            REP #$20
.1a1d05	a5 d7		lda $08d7	            LDA LINENUM
.1a1d07	f0 27		beq $1a1d30	            BEQ skip_at
.1a1d09	a2 63 1d	ldx #$1d63	            LDX #<>MSG_AT           ; If so... print " AT "
.1a1d0c	20 16 03	jsr $1a0316	            JSR PRINTS
.1a1d0f	08		php		            PHP
.1a1d10	e2 20		sep #$20	            SEP #$20
.1a1d12	48		pha		            PHA
.1a1d13	a9 00		lda #$00	            LDA #BASIC_BANK
.1a1d15	48		pha		            PHA
.1a1d16	ab		plb		            PLB
.1a1d17	68		pla		            PLA
.1a1d18	28		plp		            PLP
.1a1d19	c2 20		rep #$20	            REP #$20
.1a1d1b	af d7 08 00	lda $0008d7	            LDA @lLINENUM           ; ... and then the line number
.1a1d1f	8f 23 08 00	sta $000823	            STA @lARGUMENT1
.1a1d23	a9 00 00	lda #$0000	            LDA #0
.1a1d26	8f 25 08 00	sta $000825	            STA @lARGUMENT1+2
.1a1d2a	20 88 43	jsr $1a4388	            JSR PR_INTEGER
.1a1d2d	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a1d30					skip_at
.1a1d30	4c de 25	jmp $1a25de	            JMP INTERACT
>1a1d33	67 1d				ERRORMSG    .word <>MSG_OK
>1a1d35	6a 1d				            .word <>MSG_BREAK
>1a1d37	70 1d				            .word <>MSG_SYNTAX
>1a1d39	7d 1d				            .word <>MSG_MEMORY
>1a1d3b	8b 1d				            .word <>MSG_TYPE
>1a1d3d	99 1d				            .word <>MSG_NOTFND
>1a1d3f	ac 1d				            .word <>MSG_NOLINE
>1a1d41	c2 1d				            .word <>MSG_UNDFLOW
>1a1d43	d2 1d				            .word <>MSG_OVRFLOW
>1a1d45	e1 1d				            .word <>MSG_RANGE
>1a1d47	ee 1d				            .word <>MSG_ARG
>1a1d49	ff 1d				            .word <>MSG_NOFILE
>1a1d4b	0e 1e				            .word <>MSG_NAN
>1a1d4d	1b 1e				            .word <>MSG_OVERFLOW
>1a1d4f	29 1e				            .word <>MSG_UNDERFLOW
>1a1d51	38 1e				            .word <>MSG_DIV0
>1a1d53	49 1e				            .word <>MSG_DIRECTORY
>1a1d55	62 1e				            .word <>MSG_LOAD
>1a1d57	76 1e				            .word <>MSG_SAVE
>1a1d59	8a 1e				            .word <>MSG_DELETE
>1a1d5b	a0 1e				            .word <>MSG_FILENOTFND
>1a1d5d	b4 1e				            .word <>MSG_DIRNOTWRITE
>1a1d5f	cf 1e				            .word <>MSG_NOTCOPIED
>1a1d61	e7 1e				            .word <>MSG_DOMAIN
>1a1d63	20 61 74 00			MSG_AT          .null " at"
>1a1d67	4f 4b 00			MSG_OK          .null "OK"
>1a1d6a	42 72 65 61 6b 00		MSG_BREAK       .null "Break"
>1a1d70	53 79 6e 74 61 78 20 65		MSG_SYNTAX      .null "Syntax error"
>1a1d78	72 72 6f 72 00
>1a1d7d	4f 75 74 20 6f 66 20 6d		MSG_MEMORY      .null "Out of memory"
>1a1d85	65 6d 6f 72 79 00
>1a1d8b	54 79 70 65 20 6d 69 73		MSG_TYPE        .null "Type mismatch"
>1a1d93	6d 61 74 63 68 00
>1a1d99	56 61 72 69 61 62 6c 65		MSG_NOTFND      .null "Variable not found"
>1a1da1	20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1dac	4c 69 6e 65 20 6e 75 6d		MSG_NOLINE      .null "Line number not found"
>1a1db4	62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1dc2	53 74 61 63 6b 20 75 6e		MSG_UNDFLOW     .null "Stack underflow"
>1a1dca	64 65 72 66 6c 6f 77 00
>1a1dd2	53 74 61 63 6b 20 6f 76		MSG_OVRFLOW     .null "Stack overflow"
>1a1dda	65 72 66 6c 6f 77 00
>1a1de1	4f 75 74 20 6f 66 20 72		MSG_RANGE       .null "Out of range"
>1a1de9	61 6e 67 65 00
>1a1dee	49 6c 6c 65 67 61 6c 20		MSG_ARG         .null "Illegal argument"
>1a1df6	61 72 67 75 6d 65 6e 74 00
>1a1dff	46 69 6c 65 20 6e 6f 74		MSG_NOFILE      .null "File not found"
>1a1e07	20 66 6f 75 6e 64 00
>1a1e0e	4e 6f 74 20 61 20 6e 75		MSG_NAN         .null "Not a number"
>1a1e16	6d 62 65 72 00
>1a1e1b	4d 61 74 68 20 6f 76 65		MSG_OVERFLOW    .null "Math overflow"
>1a1e23	72 66 6c 6f 77 00
>1a1e29	4d 61 74 68 20 75 6e 64		MSG_UNDERFLOW   .null "Math underflow"
>1a1e31	65 72 66 6c 6f 77 00
>1a1e38	44 69 76 69 73 69 6f 6e		MSG_DIV0        .null "Division by zero"
>1a1e40	20 62 79 20 7a 65 72 6f 00
>1a1e49	55 6e 61 62 6c 65 20 74		MSG_DIRECTORY   .null "Unable to read directory"
>1a1e51	6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>1a1e61	00
>1a1e62	55 6e 61 62 6c 65 20 74		MSG_LOAD        .null "Unable to load file"
>1a1e6a	6f 20 6c 6f 61 64 20 66 69 6c 65 00
>1a1e76	55 6e 61 62 6c 65 20 74		MSG_SAVE        .null "Unable to save file"
>1a1e7e	6f 20 73 61 76 65 20 66 69 6c 65 00
>1a1e8a	55 6e 61 62 6c 65 20 74		MSG_DELETE      .null "Unable to delete file"
>1a1e92	6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00
>1a1ea0	43 6f 75 6c 64 20 6e 6f		MSG_FILENOTFND  .null "Could not find file"
>1a1ea8	74 20 66 69 6e 64 20 66 69 6c 65 00
>1a1eb4	43 6f 75 6c 64 20 6e 6f		MSG_DIRNOTWRITE .null "Could not update directory"
>1a1ebc	74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>1a1ecc	72 79 00
>1a1ecf	43 6f 75 6c 64 20 6e 6f		MSG_NOTCOPIED   .null "Could not copy the file"
>1a1ed7	74 20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00
>1a1ee7	41 72 67 75 6d 65 6e 74		MSG_DOMAIN      .null "Argument outside domain"
>1a1eef	20 6f 75 74 73 69 64 65 20 64 6f 6d 61 69 6e 00
.1a1eff					SETINTERACT
.1a1eff	08		php		            PHP
.1a1f00	0b		phd		            PHD
.1a1f01	08		php		            PHP
.1a1f02	c2 20		rep #$20	            REP #$20
.1a1f04	48		pha		            PHA
.1a1f05	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1f08	5b		tcd		            TCD
.1a1f09	68		pla		            PLA
.1a1f0a	28		plp		            PLP
.1a1f0b	e2 20		sep #$20	            SEP #$20
.1a1f0d	a9 00		lda #$00	            LDA #ST_INTERACT
.1a1f0f	85 d2		sta $08d2	            STA STATE
.1a1f11	2b		pld		            PLD
.1a1f12	28		plp		            PLP
.1a1f13	60		rts		            RTS
.1a1f14					CLRINTERP
.1a1f14	0b		phd		            PHD
.1a1f15	08		php		            PHP
.1a1f16	08		php		            PHP
.1a1f17	c2 20		rep #$20	            REP #$20
.1a1f19	48		pha		            PHA
.1a1f1a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1f1d	5b		tcd		            TCD
.1a1f1e	68		pla		            PLA
.1a1f1f	28		plp		            PLP
.1a1f20	08		php		            PHP
.1a1f21	c2 20		rep #$20	            REP #$20
.1a1f23	a9 e1 1c	lda #$1ce1	            LDA #<>ON_ERROR
.1a1f26	8f d4 08 00	sta $0008d4	            STA @lHANDLEERR
.1a1f2a	e2 20		sep #$20	            SEP #$20
.1a1f2c	a9 1a		lda #$1a	            LDA #`ON_ERROR
.1a1f2e	8f d6 08 00	sta $0008d6	            STA @lHANDLEERR+2
.1a1f32	28		plp		            PLP
.1a1f33	20 2d 42	jsr $1a422d	            JSR S_CLR
.1a1f36	20 6e 3d	jsr $1a3d6e	            JSR S_RESTORE
.1a1f39	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the depth of the GOSUB stack
.1a1f3b	28		plp		            PLP
.1a1f3c	2b		pld		            PLD
.1a1f3d	60		rts		            RTS
.1a1f3e					INCBIP
.1a1f3e	08		php		            PHP
.1a1f3f	0b		phd		            PHD
.1a1f40	08		php		            PHP
.1a1f41	c2 20		rep #$20	            REP #$20
.1a1f43	48		pha		            PHA
.1a1f44	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1f47	5b		tcd		            TCD
.1a1f48	68		pla		            PLA
.1a1f49	28		plp		            PLP
.1a1f4a	c2 20		rep #$20	            REP #$20
.1a1f4c	18		clc		            CLC
.1a1f4d	a5 00		lda $0800	            LDA BIP
.1a1f4f	69 01 00	adc #$0001	            ADC #1
.1a1f52	85 00		sta $0800	            STA BIP
.1a1f54	e2 20		sep #$20	            SEP #$20
.1a1f56	a5 02		lda $0802	            LDA BIP+2
.1a1f58	69 00		adc #$00	            ADC #0
.1a1f5a	85 02		sta $0802	            STA BIP+2
.1a1f5c	2b		pld		            PLD
.1a1f5d	28		plp		            PLP
.1a1f5e	60		rts		            RTS
.1a1f5f					SKIPWS
.1a1f5f	08		php		            PHP
.1a1f60	0b		phd		            PHD
.1a1f61	08		php		            PHP
.1a1f62	c2 20		rep #$20	            REP #$20
.1a1f64	48		pha		            PHA
.1a1f65	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1f68	5b		tcd		            TCD
.1a1f69	68		pla		            PLA
.1a1f6a	28		plp		            PLP
.1a1f6b	e2 20		sep #$20	            SEP #$20
.1a1f6d	a7 00		lda [$0800]	loop        LDA [BIP]
.1a1f6f	f0 0f		beq $1a1f80	            BEQ done            ; If character is 0, we've reached the end of the line
.1a1f71	c9 20		cmp #$20	            CMP #CHAR_SP        ; Skip if it's a space
.1a1f73	f0 06		beq $1a1f7b	            BEQ skip_char
.1a1f75	c9 09		cmp #$09	            CMP #CHAR_TAB       ; Skip if it's a TAB
.1a1f77	f0 02		beq $1a1f7b	            BEQ skip_char
.1a1f79	80 05		bra $1a1f80	            BRA done            ; Otherwise, we're done and BIP points to a non-whitespace
.1a1f7b					skip_char
.1a1f7b	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1f7e	80 ed		bra $1a1f6d	            BRA loop
.1a1f80	2b		pld		done        PLD
.1a1f81	28		plp		            PLP
.1a1f82	60		rts		            RTS
.1a1f83					SKIPSTMT
.1a1f83	08		php		            PHP
.1a1f84	e2 20		sep #$20	            SEP #$20
.1a1f86	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the current character
.1a1f88	f0 09		beq $1a1f93	            BEQ done            ; Is it EOL? Yes, we're done
.1a1f8a	c9 3a		cmp #$3a	            CMP #':'            ; Is it a colon?
.1a1f8c	f0 05		beq $1a1f93	            BEQ done            ; Yes, we're done
.1a1f8e	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1f91	80 f3		bra $1a1f86	            BRA loop            ; and check it...
.1a1f93	28		plp		done        PLP
.1a1f94	60		rts		            RTS
.1a1f95					SKIPTOTOK
.1a1f95	08		php		            PHP
.1a1f96	e2 20		sep #$20	            SEP #$20
.1a1f98	64 36		stz $0836	            STZ NESTING
.1a1f9a	a7 00		lda [$0800]	loop        LDA [BIP]           ; Get the character
.1a1f9c	f0 19		beq $1a1fb7	            BEQ end_of_line     ; EOL? Yes: move to the next line
.1a1f9e	c5 37		cmp $0837	            CMP TARGETTOK       ; Is it the one we want?
.1a1fa0	f0 2c		beq $1a1fce	            BEQ check_depth     ; Yes: check the depth
.1a1fa2	c9 9b		cmp #$9b	            CMP #TOK_FOR        ; Is it a FOR?
.1a1fa4	f0 1e		beq $1a1fc4	            BEQ inc_nesting     ; Yes: increment NESTING
.1a1fa6	c9 9f		cmp #$9f	            CMP #TOK_DO         ; Is it a DO?
.1a1fa8	f0 1a		beq $1a1fc4	            BEQ inc_nesting     ; Yes: increment NESTING
.1a1faa	c9 9e		cmp #$9e	            CMP #TOK_NEXT       ; Is it a NEXT?
.1a1fac	f0 1a		beq $1a1fc8	            BEQ dec_nesting     ; Yes: decrement NESTING
.1a1fae	c9 a0		cmp #$a0	            CMP #TOK_LOOP       ; Is it a LOOP?
.1a1fb0	f0 16		beq $1a1fc8	            BEQ dec_nesting     ; Yes: decrement NESTING
.1a1fb2					incloop
.1a1fb2	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1fb5	80 e3		bra $1a1f9a	            BRA loop            ; and keep scanning
.1a1fb7					end_of_line
.1a1fb7	20 1b 20	jsr $1a201b	            JSR NEXTLINE
.1a1fba	c2 20		rep #$20	            REP #$20
.1a1fbc	a5 d7		lda $08d7	            LDA LINENUM         ; Check the line number
.1a1fbe	f0 1d		beq $1a1fdd	            BEQ syntax_err1     ; If it's zero, we reached the end of the program
.1a1fc0	e2 20		sep #$20	            SEP #$20
.1a1fc2	80 d6		bra $1a1f9a	            BRA loop            ; And keep scanning
.1a1fc4					inc_nesting
.1a1fc4	e6 36		inc $0836	            INC NESTING         ; Track that we have entered a lexical scope for a FOR/DO
.1a1fc6	80 ea		bra $1a1fb2	            BRA incloop
.1a1fc8					dec_nesting
.1a1fc8	c6 36		dec $0836	            DEC NESTING         ; Track that we have left a lexical scope for a FOR/DO
.1a1fca	30 30		bmi $1a1ffc	            BMI syntax_err2     ; If the depth goes <0, throw a syntax error
.1a1fcc	80 e4		bra $1a1fb2	            BRA incloop
.1a1fce					check_depth
.1a1fce	a5 35		lda $0835	            LDA SKIPNEST        ; Check to see if nesting matters
.1a1fd0	30 06		bmi $1a1fd8	            BMI found           ; No: just return that we found the token
.1a1fd2	a5 36		lda $0836	            LDA NESTING         ; Get the nesting depth
.1a1fd4	f0 02		beq $1a1fd8	            BEQ found           ; If it's zero, we found our token
.1a1fd6	80 da		bra $1a1fb2	            BRA incloop         ; Otherwise: it's a token for an enclosed FOR/DO, keep scanning
.1a1fd8					found
.1a1fd8	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a1fdb	28		plp		            PLP
.1a1fdc	60		rts		            RTS
.1a1fdd					syntax_err1
.1a1fdd	08		php		            PHP
.1a1fde	c2 20		rep #$20	            REP #$20
.1a1fe0	48		pha		            PHA
.1a1fe1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a1fe4	5b		tcd		            TCD
.1a1fe5	68		pla		            PLA
.1a1fe6	28		plp		            PLP
.1a1fe7	e2 20		sep #$20	            SEP #$20
.1a1fe9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a1feb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a1fef	c2 20		rep #$20	            REP #$20
.1a1ff1	29 ff 00	and #$00ff	            AND #$00FF
.1a1ff4	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a1ff7	e2 20		sep #$20	            SEP #$20
.1a1ff9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a1ffc					syntax_err2
.1a1ffc	08		php		            PHP
.1a1ffd	c2 20		rep #$20	            REP #$20
.1a1fff	48		pha		            PHA
.1a2000	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2003	5b		tcd		            TCD
.1a2004	68		pla		            PLA
.1a2005	28		plp		            PLP
.1a2006	e2 20		sep #$20	            SEP #$20
.1a2008	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a200a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a200e	c2 20		rep #$20	            REP #$20
.1a2010	29 ff 00	and #$00ff	            AND #$00FF
.1a2013	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2016	e2 20		sep #$20	            SEP #$20
.1a2018	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a201b					NEXTLINE
.1a201b	08		php		            PHP
.1a201c	c2 30		rep #$30	            REP #$30
.1a201e	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a2021	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the offset to the next line
.1a2023	85 0c		sta $080c	            STA SCRATCH
.1a2025	18		clc		            CLC                 ; Compute the new CURLINE
.1a2026	a5 1a		lda $081a	            LDA CURLINE         ; CURLINE := [CURLINE].LINE_LINK
.1a2028	65 0c		adc $080c	            ADC SCRATCH
.1a202a	85 1a		sta $081a	            STA CURLINE
.1a202c	a5 1c		lda $081c	            LDA CURLINE+2
.1a202e	69 00 00	adc #$0000	            ADC #0
.1a2031	85 1c		sta $081c	            STA CURLINE+2
.1a2033	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the LINENUM to the new current line's number
.1a2036	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; LINENUM := [CURLINE].LINE_NUMBER
.1a2038	85 d7		sta $08d7	            STA LINENUM
.1a203a	18		clc		            CLC                 ; Point BIP to the first character of the line
.1a203b	a5 1a		lda $081a	            LDA CURLINE         ; BIP := CURLINE + LINE_TOKENS
.1a203d	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2040	85 00		sta $0800	            STA BIP
.1a2042	a5 1c		lda $081c	            LDA CURLINE+2
.1a2044	69 00 00	adc #$0000	            ADC #0
.1a2047	85 02		sta $0802	            STA BIP+2
.1a2049	28		plp		            PLP
.1a204a	60		rts		            RTS
.1a204b					EXPECT_TOK
.1a204b	08		php		            PHP
.1a204c	e2 20		sep #$20	            SEP #$20
.1a204e	48		pha		            PHA
.1a204f	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a2052	68		pla		            PLA
.1a2053	e2 20		sep #$20	            SEP #$20
.1a2055	c7 00		cmp [$0800]	            CMP [BIP]           ; Check the character at BIP
.1a2057	d0 08		bne $1a2061	            BNE syntax_err      ; Throw a syntax error
.1a2059	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a205c	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a205f	28		plp		            PLP
.1a2060	60		rts		            RTS
.1a2061					syntax_err
.1a2061	08		php		            PHP
.1a2062	c2 20		rep #$20	            REP #$20
.1a2064	48		pha		            PHA
.1a2065	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2068	5b		tcd		            TCD
.1a2069	68		pla		            PLA
.1a206a	28		plp		            PLP
.1a206b	e2 20		sep #$20	            SEP #$20
.1a206d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a206f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2073	c2 20		rep #$20	            REP #$20
.1a2075	29 ff 00	and #$00ff	            AND #$00FF
.1a2078	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a207b	e2 20		sep #$20	            SEP #$20
.1a207d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2080					OPT_TOK
.1a2080	08		php		            PHP
.1a2081	e2 20		sep #$20	            SEP #$20
.1a2083	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a2086	e2 20		sep #$20	            SEP #$20
.1a2088	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the character at BIP
.1a208a	f0 10		beq $1a209c	            BEQ ret_false       ; If end-of-line, return false
.1a208c	c9 3a		cmp #$3a	            CMP #':'
.1a208e	f0 0c		beq $1a209c	            BEQ ret_false       ; If colon, return false
.1a2090	c5 37		cmp $0837	            CMP TARGETTOK
.1a2092	f0 05		beq $1a2099	            BEQ ret_true        ; If matches, return true
.1a2094	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a2097	80 ef		bra $1a2088	            BRA loop
.1a2099	28		plp		ret_true    PLP
.1a209a	38		sec		            SEC
.1a209b	60		rts		            RTS
.1a209c	28		plp		ret_false   PLP
.1a209d	18		clc		            CLC
.1a209e	60		rts		            RTS
.1a209f					PEEK_TOK
.1a209f	5a		phy		            PHY
.1a20a0	08		php		            PHP
.1a20a1	e2 20		sep #$20	            SEP #$20
.1a20a3	a0 00 00	ldy #$0000	            LDY #0
.1a20a6	b7 00		lda [$0800],y	loop        LDA [BIP],Y
.1a20a8	f0 0d		beq $1a20b7	            BEQ done
.1a20aa	c9 3a		cmp #$3a	            CMP #':'
.1a20ac	f0 07		beq $1a20b5	            BEQ ret_null
.1a20ae	c9 20		cmp #$20	            CMP #CHAR_SP
.1a20b0	d0 05		bne $1a20b7	            BNE done
.1a20b2	c8		iny		            INY
.1a20b3	80 f1		bra $1a20a6	            BRA loop
.1a20b5	a9 00		lda #$00	ret_null    LDA #0
.1a20b7	28		plp		done        PLP
.1a20b8	7a		ply		            PLY
.1a20b9	60		rts		            RTS
.1a20ba					EXECSTMT
.1a20ba	08		php		            PHP
.1a20bb	0b		phd		            PHD
.1a20bc	8b		phb		            PHB
.1a20bd	08		php		            PHP
.1a20be	c2 20		rep #$20	            REP #$20
.1a20c0	48		pha		            PHA
.1a20c1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a20c4	5b		tcd		            TCD
.1a20c5	68		pla		            PLA
.1a20c6	28		plp		            PLP
.1a20c7	20 ef 17	jsr $1a17ef	            JSR INITEVALSP
.1a20ca	e2 20		sep #$20	            SEP #$20
.1a20cc	a9 00		lda #$00	            LDA #EXEC_CONT      ; This will tell EXECLINE and EXECPROG to procede in a
.1a20ce	85 dc		sta $08dc	            STA EXECACTION      ; linear fashion through the program
.1a20d0	ad 8a 0f	lda $0f8a	check_break LDA KEYFLAG         ; Check the keyboard flags
.1a20d3	30 4b		bmi $1a2120	            BMI throw_break     ; If MSB: user pressed an interrupt key, stop the program
.1a20d5	a7 00		lda [$0800]	            LDA [BIP]           ; If we happen to have a colon, just skip over it.
.1a20d7	c9 3a		cmp #$3a	            CMP #':'            ; This can happen with FOR/NEXT
.1a20d9	d0 03		bne $1a20de	            BNE eat_ws
.1a20db	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a20de					eat_ws
.1a20de	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a20e1	a7 00		lda [$0800]	            LDA [BIP]
.1a20e3	d0 03		bne $1a20e8	            BNE else
.1a20e5	4c 6a 21	jmp $1a216a	            JMP done            ; If the current byte is 0, we're at the end of the line, just return
.1a20e8					else
.1a20e8	20 94 03	jsr $1a0394	            JSR ISALPHA
.1a20eb	b0 52		bcs $1a213f	            BCS is_variable     ; Yes: we may have a LET statement
.1a20ed	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it's any other non-token
.1a20ef	10 10		bpl $1a2101	            BPL error           ; Yes: it's a syntax error
.1a20f1	20 5c 0b	jsr $1a0b5c	            JSR TOKTYPE
.1a20f4	85 0c		sta $080c	            STA SCRATCH         ; Save the type for later
.1a20f6	c9 20		cmp #$20	            CMP #TOK_TY_STMNT   ; Is it a statement?
.1a20f8	d0 03		bne $1a20fd	            BNE else2
.1a20fa	4c 58 21	jmp $1a2158	            JMP ok_to_exec      ; Yes: it's ok to try to execute it
.1a20fd	a5 d2		lda $08d2	else2       LDA STATE           ; Check to see if we're in interactive mode
.1a20ff	f0 51		beq $1a2152	            BEQ is_interact
.1a2101					error
.1a2101	08		php		            PHP
.1a2102	c2 20		rep #$20	            REP #$20
.1a2104	48		pha		            PHA
.1a2105	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2108	5b		tcd		            TCD
.1a2109	68		pla		            PLA
.1a210a	28		plp		            PLP
.1a210b	e2 20		sep #$20	            SEP #$20
.1a210d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a210f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2113	c2 20		rep #$20	            REP #$20
.1a2115	29 ff 00	and #$00ff	            AND #$00FF
.1a2118	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a211b	e2 20		sep #$20	            SEP #$20
.1a211d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2120					throw_break
.1a2120	08		php		            PHP
.1a2121	c2 20		rep #$20	            REP #$20
.1a2123	48		pha		            PHA
.1a2124	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2127	5b		tcd		            TCD
.1a2128	68		pla		            PLA
.1a2129	28		plp		            PLP
.1a212a	e2 20		sep #$20	            SEP #$20
.1a212c	a9 01		lda #$01	            LDA #ERR_BREAK
.1a212e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2132	c2 20		rep #$20	            REP #$20
.1a2134	29 ff 00	and #$00ff	            AND #$00FF
.1a2137	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a213a	e2 20		sep #$20	            SEP #$20
.1a213c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a213f					is_variable
.1a213f	20 37 42	jsr $1a4237	            JSR S_LET
.1a2142	4c 6a 21	jmp $1a216a	            JMP done
.1a2145					STSTUB
.1a2145	08		php		            PHP
.1a2146	e2 20		sep #$20	            SEP #$20
.1a2148	48		pha		            PHA
.1a2149	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.1a214b	48		pha		            PHA
.1a214c	ab		plb		            PLB
.1a214d	68		pla		            PLA
.1a214e	28		plp		            PLP
.1a214f	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.1a2152	a5 0c		lda $080c	is_interact LDA SCRATCH         ; Get the token type
.1a2154	c9 10		cmp #$10	            CMP #TOK_TY_CMD     ; Is it a command?
.1a2156	d0 a9		bne $1a2101	            BNE error           ; If not, it's an error
.1a2158					ok_to_exec
.1a2158	a7 00		lda [$0800]	            LDA [BIP]           ; Get the original token again
.1a215a	20 39 0b	jsr $1a0b39	            JSR TOKEVAL
.1a215d	c2 20		rep #$20	            REP #$20
.1a215f	85 2f		sta $082f	            STA JMP16PTR        ; Store it in the jump pointer
.1a2161	20 ef 17	jsr $1a17ef	            JSR INITEVALSP
.1a2164	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a2167	20 45 21	jsr $1a2145	            JSR STSTUB
.1a216a	ab		plb		done        PLB
.1a216b	2b		pld		            PLD
.1a216c	28		plp		            PLP
.1a216d	60		rts		            RTS
.1a216e					EXECCMD
.1a216e	08		php		            PHP
.1a216f	58		cli		            CLI
.1a2170	20 ff 1e	jsr $1a1eff	            JSR SETINTERACT
.1a2173	20 24 1c	jsr $1a1c24	            JSR INITRETURN
.1a2176	e2 20		sep #$20	            SEP #$20
.1a2178	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.1a217b	c2 20		rep #$20	            REP #$20
.1a217d	a5 1a		lda $081a	            LDA CURLINE         ; Set the BASIC Instruction Pointer to the first byte of the line
.1a217f	85 00		sta $0800	            STA BIP
.1a2181	a5 1c		lda $081c	            LDA CURLINE+2
.1a2183	85 02		sta $0802	            STA BIP+2
.1a2185	4c af 21	jmp $1a21af	            JMP exec_loop
.1a2188	08		php		EXECLINE    PHP
.1a2189	c2 20		rep #$20	            REP #$20
.1a218b	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER            ; Set the current line number
.1a218e	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.1a2190	85 d7		sta $08d7	            STA LINENUM
.1a2192	20 85 13	jsr $1a1385	            JSR CLRTMPSTR
.1a2195	e2 20		sep #$20	            SEP #$20
.1a2197	a5 dc		lda $08dc	            LDA EXECACTION              ; If the last EXEC action was RETURN
.1a2199	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; BIP has already been set, so...
.1a219b	f0 12		beq $1a21af	            BEQ exec_loop               ; Skip over setting the BIP to the beginning of the line
.1a219d	c2 20		rep #$20	            REP #$20
.1a219f	18		clc		            CLC                         ; Set the BASIC Instruction Pointer to the first byte of the line
.1a21a0	a5 1a		lda $081a	            LDA CURLINE
.1a21a2	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a21a5	85 00		sta $0800	            STA BIP
.1a21a7	e2 20		sep #$20	            SEP #$20
.1a21a9	a5 1c		lda $081c	            LDA CURLINE+2
.1a21ab	69 00		adc #$00	            ADC #0
.1a21ad	85 02		sta $0802	            STA BIP+2
.1a21af					exec_loop
.1a21af	c2 20		rep #$20	            REP #$20
.1a21b1	20 ba 20	jsr $1a20ba	            JSR EXECSTMT
.1a21b4	e2 20		sep #$20	            SEP #$20
.1a21b6	a5 dc		lda $08dc	            LDA EXECACTION
.1a21b8	c9 03		cmp #$03	            CMP #EXEC_RETURN
.1a21ba	f0 f3		beq $1a21af	            BEQ exec_loop
.1a21bc	c9 00		cmp #$00	            CMP #EXEC_CONT              ; If it's not EXEC_CONT, exit to the caller
.1a21be	d0 31		bne $1a21f1	            BNE exec_done
.1a21c0	e2 20		sep #$20	            SEP #$20
.1a21c2	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a21c5	a7 00		lda [$0800]	            LDA [BIP]                   ; Get the current character in the line
.1a21c7	f0 28		beq $1a21f1	            BEQ exec_done               ; If it's NULL, we're done
.1a21c9	c9 3a		cmp #$3a	            CMP #':'                    ; If it's colon, we have more statements
.1a21cb	f0 1f		beq $1a21ec	            BEQ skip_loop               ; Skip over it and try to execute the next one
.1a21cd	08		php		            PHP
.1a21ce	c2 20		rep #$20	            REP #$20
.1a21d0	48		pha		            PHA
.1a21d1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a21d4	5b		tcd		            TCD
.1a21d5	68		pla		            PLA
.1a21d6	28		plp		            PLP
.1a21d7	e2 20		sep #$20	            SEP #$20
.1a21d9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a21db	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a21df	c2 20		rep #$20	            REP #$20
.1a21e1	29 ff 00	and #$00ff	            AND #$00FF
.1a21e4	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a21e7	e2 20		sep #$20	            SEP #$20
.1a21e9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a21ec					skip_loop
.1a21ec	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a21ef	80 be		bra $1a21af	            BRA exec_loop               ; And try to execute another statement
.1a21f1					exec_done
.1a21f1	28		plp		            PLP
.1a21f2	60		rts		            RTS
.1a21f3					EXECPROGRAM
.1a21f3	08		php		            PHP
.1a21f4	58		cli		            CLI
.1a21f5	e2 20		sep #$20	            SEP #$20
.1a21f7	a9 80		lda #$80	            LDA #ST_RUNNING
.1a21f9	85 d2		sta $08d2	            STA STATE
.1a21fb	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.1a21fe	20 24 1c	jsr $1a1c24	            JSR INITRETURN
.1a2201	c2 30		rep #$30	            REP #$30
.1a2203	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the count of GOSUBs
.1a2205	a0 02 00	ldy #$0002	exec_loop   LDY #LINE_NUMBER
.1a2208	b7 1a		lda [$081a],y	            LDA [CURLINE],Y             ; Get the line number of the current line
.1a220a	f0 29		beq $1a2235	            BEQ done                    ; If it's 0, we are finished running code (implicit END)
.1a220c	20 88 21	jsr $1a2188	            JSR EXECLINE
.1a220f	e2 20		sep #$20	            SEP #$20
.1a2211	a5 dc		lda $08dc	            LDA EXECACTION              ; Check the EXECACTION from the last line
.1a2213	c9 01		cmp #$01	            CMP #EXEC_STOP              ; Stop execution of the program?
.1a2215	f0 1e		beq $1a2235	            BEQ done
.1a2217	c9 02		cmp #$02	            CMP #EXEC_GOTO              ; Transfer execution to a new CURLINE that is already set
.1a2219	f0 ea		beq $1a2205	            BEQ exec_loop
.1a221b	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; Transfer execution to the CURLINE and BIP that is already set
.1a221d	f0 e6		beq $1a2205	            BEQ exec_loop
.1a221f	c2 20		rep #$20	            REP #$20
.1a2221	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a2224	18		clc		            CLC
.1a2225	a5 1a		lda $081a	            LDA CURLINE
.1a2227	77 1a		adc [$081a],y	            ADC [CURLINE],Y
.1a2229	85 1a		sta $081a	            STA CURLINE
.1a222b	e2 20		sep #$20	            SEP #$20
.1a222d	a5 1c		lda $081c	            LDA CURLINE+2
.1a222f	69 00		adc #$00	            ADC #0
.1a2231	85 1c		sta $081c	            STA CURLINE+2
.1a2233	80 d0		bra $1a2205	            BRA exec_loop               ; And try to execute that line
.1a2235					done
.1a2235	e2 20		sep #$20	            SEP #$20
.1a2237	a9 00		lda #$00	            LDA #ST_INTERACT            ; Set interpreter state to RUNNING
.1a2239	85 d2		sta $08d2	            STA STATE
.1a223b	28		plp		            PLP
.1a223c	60		rts		            RTS
.1a223d					FINDLINE
.1a223d	08		php		            PHP
.1a223e	c2 30		rep #$30	            REP #$30
.1a2240	c2 20		rep #$20	            REP #$20
.1a2242	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT            ; INDEX points to the first line of the program
.1a2245	85 08		sta $0808	            STA INDEX
.1a2247	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a224a	85 0a		sta $080a	            STA INDEX+2
.1a224c	c2 20		rep #$20	            REP #$20
.1a224e	a0 02 00	ldy #$0002	check_nmbrs LDY #LINE_NUMBER            ; Get the number of the possible target line
.1a2251	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a2253	f0 31		beq $1a2286	            BEQ ret_false               ; If new line number is 0, we got to the
.1a2255	c5 23		cmp $0823	            CMP ARGUMENT1               ; Compare it to the target line number
.1a2257	f0 1e		beq $1a2277	            BEQ found
.1a2259	b0 2b		bcs $1a2286	            BGE ret_false               ; If the line number > target line number, the line is not present
.1a225b					next_line
.1a225b	c2 20		rep #$20	            REP #$20
.1a225d	a0 00 00	ldy #$0000	            LDY #LINE_LINK              ; INDEX := INDEX + [INDEX].LINK
.1a2260	18		clc		            CLC
.1a2261	a5 08		lda $0808	            LDA INDEX
.1a2263	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a2265	85 0c		sta $080c	            STA SCRATCH
.1a2267	e2 20		sep #$20	            SEP #$20
.1a2269	a5 0a		lda $080a	            LDA INDEX+2
.1a226b	69 00		adc #$00	            ADC #0
.1a226d	85 0a		sta $080a	            STA INDEX+2
.1a226f	c2 20		rep #$20	            REP #$20
.1a2271	a5 0c		lda $080c	            LDA SCRATCH
.1a2273	85 08		sta $0808	            STA INDEX
.1a2275	80 d7		bra $1a224e	            BRA check_nmbrs             ; And go back to check the new line INDEX is pointing to
.1a2277					found
.1a2277	c2 20		rep #$20	            REP #$20
.1a2279	a5 08		lda $0808	            LDA INDEX
.1a227b	85 1a		sta $081a	            STA CURLINE
.1a227d	e2 20		sep #$20	            SEP #$20
.1a227f	a5 0a		lda $080a	            LDA INDEX+2
.1a2281	85 1c		sta $081c	            STA CURLINE+2
.1a2283	28		plp		ret_true    PLP                         ; Return true to indicate we've found the line
.1a2284	38		sec		            SEC
.1a2285	60		rts		            RTS
.1a2286	28		plp		ret_false   PLP
.1a2287	18		clc		            CLC
.1a2288	60		rts		            RTS
.1a2289					MVPROGDN
.1a2289	08		php		            PHP
.1a228a					mvd_loop
.1a228a	e2 20		sep #$20	            SEP #$20
.1a228c	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.1a228e	87 08		sta [$0808]	            STA [INDEX]
.1a2290	c2 20		rep #$20	            REP #$20
.1a2292	a5 0c		lda $080c	            LDA SCRATCH
.1a2294	c5 00		cmp $0800	            CMP BIP
.1a2296	d0 08		bne $1a22a0	            BNE increment
.1a2298	e2 20		sep #$20	            SEP #$20
.1a229a	a5 0e		lda $080e	            LDA SCRATCH+2
.1a229c	c5 02		cmp $0802	            CMP BIP+2
.1a229e	f0 26		beq $1a22c6	            BEQ done            ; Yes: return
.1a22a0					increment
.1a22a0	c2 20		rep #$20	            REP #$20
.1a22a2	18		clc		            CLC
.1a22a3	a5 0c		lda $080c	            LDA SCRATCH
.1a22a5	69 01 00	adc #$0001	            ADC #1
.1a22a8	85 0c		sta $080c	            STA SCRATCH
.1a22aa	e2 20		sep #$20	            SEP #$20
.1a22ac	a5 0e		lda $080e	            LDA SCRATCH+2
.1a22ae	69 00		adc #$00	            ADC #0
.1a22b0	85 0e		sta $080e	            STA SCRATCH+2
.1a22b2	c2 20		rep #$20	            REP #$20
.1a22b4	18		clc		            CLC
.1a22b5	a5 08		lda $0808	            LDA INDEX
.1a22b7	69 01 00	adc #$0001	            ADC #1
.1a22ba	85 08		sta $0808	            STA INDEX
.1a22bc	e2 20		sep #$20	            SEP #$20
.1a22be	a5 0a		lda $080a	            LDA INDEX+2
.1a22c0	69 00		adc #$00	            ADC #0
.1a22c2	85 0a		sta $080a	            STA INDEX+2
.1a22c4	80 c4		bra $1a228a	            BRA mvd_loop        ; And try again
.1a22c6	28		plp		done        PLP
.1a22c7	60		rts		            RTS
.1a22c8					MVPROGUP
.1a22c8	08		php		            PHP
.1a22c9					mvu_loop
.1a22c9	e2 20		sep #$20	            SEP #$20
.1a22cb	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.1a22cd	87 08		sta [$0808]	            STA [INDEX]
.1a22cf	c2 20		rep #$20	            REP #$20
.1a22d1	a5 0c		lda $080c	            LDA SCRATCH
.1a22d3	c5 00		cmp $0800	            CMP BIP
.1a22d5	d0 06		bne $1a22dd	            BNE decrement
.1a22d7	a5 0e		lda $080e	            LDA SCRATCH+2
.1a22d9	c5 02		cmp $0802	            CMP BIP+2
.1a22db	f0 26		beq $1a2303	            BEQ done            ; Yes: return
.1a22dd					decrement
.1a22dd	c2 20		rep #$20	            REP #$20
.1a22df	38		sec		            SEC
.1a22e0	a5 0c		lda $080c	            LDA SCRATCH
.1a22e2	e9 01 00	sbc #$0001	            SBC #1
.1a22e5	85 0c		sta $080c	            STA SCRATCH
.1a22e7	e2 20		sep #$20	            SEP #$20
.1a22e9	a5 0e		lda $080e	            LDA SCRATCH+2
.1a22eb	e9 00		sbc #$00	            SBC #0
.1a22ed	85 0e		sta $080e	            STA SCRATCH+2
.1a22ef	c2 20		rep #$20	            REP #$20
.1a22f1	38		sec		            SEC
.1a22f2	a5 08		lda $0808	            LDA INDEX
.1a22f4	e9 01 00	sbc #$0001	            SBC #1
.1a22f7	85 08		sta $0808	            STA INDEX
.1a22f9	e2 20		sep #$20	            SEP #$20
.1a22fb	a5 0a		lda $080a	            LDA INDEX+2
.1a22fd	e9 00		sbc #$00	            SBC #0
.1a22ff	85 0a		sta $080a	            STA INDEX+2
.1a2301	80 c6		bra $1a22c9	            BRA mvu_loop        ; And try again
.1a2303	28		plp		done        PLP
.1a2304	60		rts		            RTS
.1a2305					DELLINE
.1a2305	08		php		            PHP
.1a2306	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; SCRATCH := INDEX + [INDEX].LINK (address of the following line)
.1a2309	c2 20		rep #$20	            REP #$20
.1a230b	18		clc		            CLC
.1a230c	a5 08		lda $0808	            LDA INDEX
.1a230e	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a2310	85 0c		sta $080c	            STA SCRATCH
.1a2312	e2 20		sep #$20	            SEP #$20
.1a2314	a5 0a		lda $080a	            LDA INDEX+2
.1a2316	69 00		adc #$00	            ADC #0
.1a2318	85 0e		sta $080e	            STA SCRATCH+2
.1a231a	c2 20		rep #$20	            REP #$20
.1a231c	18		clc		            CLC
.1a231d	a5 d9		lda $08d9	            LDA LASTLINE
.1a231f	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2322	85 00		sta $0800	            STA BIP
.1a2324	e2 20		sep #$20	            SEP #$20
.1a2326	a5 db		lda $08db	            LDA LASTLINE+2
.1a2328	69 00		adc #$00	            ADC #0
.1a232a	85 02		sta $0802	            STA BIP+2
.1a232c	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; LASTLINE := LASTLINE - [INDEX].LINK
.1a232f	c2 20		rep #$20	            REP #$20
.1a2331	38		sec		            SEC
.1a2332	a5 d9		lda $08d9	            LDA LASTLINE
.1a2334	f7 08		sbc [$0808],y	            SBC [INDEX],Y
.1a2336	85 d9		sta $08d9	            STA LASTLINE
.1a2338	e2 20		sep #$20	            SEP #$20
.1a233a	a5 db		lda $08db	            LDA LASTLINE+2
.1a233c	e9 00		sbc #$00	            SBC #0
.1a233e	85 db		sta $08db	            STA LASTLINE+2
.1a2340	20 89 22	jsr $1a2289	            JSR MVPROGDN
.1a2343					done
.1a2343	20 2d 42	jsr $1a422d	            JSR S_CLR
.1a2346	28		plp		            PLP
.1a2347	60		rts		            RTS
.1a2348					APPLINE
.1a2348	08		php		            PHP
.1a2349	08		php		            PHP
.1a234a	c2 20		rep #$20	            REP #$20
.1a234c	48		pha		            PHA
.1a234d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a2350	5b		tcd		            TCD
.1a2351	68		pla		            PLA
.1a2352	28		plp		            PLP
.1a2353	c2 30		rep #$30	            REP #$30
.1a2355	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the line number of the new line
.1a2358	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.1a235a	18		clc		            CLC                 ; Point INDEX to the position to store the tokens
.1a235b	a5 d9		lda $08d9	            LDA LASTLINE
.1a235d	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2360	85 08		sta $0808	            STA INDEX
.1a2362	e2 20		sep #$20	            SEP #$20
.1a2364	a5 db		lda $08db	            LDA LASTLINE+2
.1a2366	69 00		adc #$00	            ADC #0
.1a2368	85 0a		sta $080a	            STA INDEX+2
.1a236a	e2 20		sep #$20	            SEP #$20
.1a236c	a0 00 00	ldy #$0000	            LDY #0
.1a236f	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Copy the tokenized line to its place in the code
.1a2371	97 08		sta [$0808],y	            STA [INDEX],Y
.1a2373	f0 03		beq $1a2378	            BEQ copy_done
.1a2375	c8		iny		            INY
.1a2376	80 f7		bra $1a236f	            BRA copy_loop
.1a2378					copy_done
.1a2378	c2 20		rep #$20	            REP #$20
.1a237a	98		tya		            TYA
.1a237b	18		clc		            CLC
.1a237c	69 05 00	adc #$0005	            ADC #LINE_TOKENS+1
.1a237f	85 0c		sta $080c	            STA SCRATCH
.1a2381	c2 20		rep #$20	            REP #$20
.1a2383	a0 00 00	ldy #$0000	            LDY #LINE_LINK      ; Set link to the offset to the next line
.1a2386	a5 0c		lda $080c	            LDA SCRATCH
.1a2388	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.1a238a	c2 20		rep #$20	            REP #$20
.1a238c	18		clc		            CLC
.1a238d	a5 d9		lda $08d9	            LDA LASTLINE
.1a238f	65 0c		adc $080c	            ADC SCRATCH
.1a2391	85 0c		sta $080c	            STA SCRATCH
.1a2393	e2 20		sep #$20	            SEP #$20
.1a2395	a5 db		lda $08db	            LDA LASTLINE+2
.1a2397	69 00		adc #$00	            ADC #0
.1a2399	85 db		sta $08db	            STA LASTLINE+2
.1a239b	c2 20		rep #$20	            REP #$20
.1a239d	a5 0c		lda $080c	            LDA SCRATCH
.1a239f	85 d9		sta $08d9	            STA LASTLINE
.1a23a1	c2 20		rep #$20	            REP #$20
.1a23a3	a0 00 00	ldy #$0000	            LDY #0
.1a23a6	a9 00 00	lda #$0000	            LDA #0
.1a23a9	97 d9		sta [$08d9],y	blank_loop  STA [LASTLINE],Y    ; Set the "line" after the last line to nulls
.1a23ab	c8		iny		            INY
.1a23ac	c0 05 00	cpy #$0005	            CPY #LINE_TOKENS+1
.1a23af	d0 f8		bne $1a23a9	            BNE blank_loop
.1a23b1	20 2d 42	jsr $1a422d	            JSR S_CLR
.1a23b4	28		plp		            PLP
.1a23b5	60		rts		            RTS
.1a23b6					FINDINSPT
.1a23b6	0b		phd		            PHD
.1a23b7	08		php		            PHP
.1a23b8	08		php		            PHP
.1a23b9	c2 20		rep #$20	            REP #$20
.1a23bb	48		pha		            PHA
.1a23bc	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a23bf	5b		tcd		            TCD
.1a23c0	68		pla		            PLA
.1a23c1	28		plp		            PLP
.1a23c2	c2 30		rep #$30	            REP #$30
.1a23c4	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a23c7	85 08		sta $0808	            STA INDEX
.1a23c9	a9 16 00	lda #$0016	            LDA #`BASIC_BOT
.1a23cc	85 0a		sta $080a	            STA INDEX+2
.1a23ce	a0 02 00	ldy #$0002	loop        LDY #LINE_NUMBER
.1a23d1	b7 08		lda [$0808],y	            LDA [INDEX],Y
.1a23d3	f0 1d		beq $1a23f2	            BEQ found_end           ; Got to end without finding it
.1a23d5	c5 d7		cmp $08d7	            CMP LINENUM
.1a23d7	f0 25		beq $1a23fe	            BEQ found_line          ; LINENUM = [INDEX].LINE_NUMBER: return we found the exact line
.1a23d9	b0 1d		bcs $1a23f8	            BGE found_spot          ; LINENUM > [INDEX].LINE_NUMBER: return we found spot to insert
.1a23db	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a23de	18		clc		            CLC                     ; Move INDEX to the next line
.1a23df	a5 08		lda $0808	            LDA INDEX
.1a23e1	77 08		adc [$0808],y	            ADC [INDEX],Y
.1a23e3	85 0c		sta $080c	            STA SCRATCH
.1a23e5	a5 0a		lda $080a	            LDA INDEX+2
.1a23e7	69 00 00	adc #$0000	            ADC #0
.1a23ea	85 0a		sta $080a	            STA INDEX+2
.1a23ec	a5 0c		lda $080c	            LDA SCRATCH
.1a23ee	85 08		sta $0808	            STA INDEX
.1a23f0	80 dc		bra $1a23ce	            BRA loop                ; And check that line
.1a23f2	a9 00 00	lda #$0000	found_end   LDA #0                  ; Return that we reached the end of the program
.1a23f5	28		plp		            PLP
.1a23f6	2b		pld		            PLD
.1a23f7	60		rts		            RTS
.1a23f8	a9 01 00	lda #$0001	found_spot  LDA #1                  ; Return that we the found the spot to insert the line
.1a23fb	28		plp		            PLP                     ; But that it wasn't already there
.1a23fc	2b		pld		            PLD
.1a23fd	60		rts		            RTS
.1a23fe	a9 02 00	lda #$0002	found_line  LDA #2                  ; Return that we found the line
.1a2401	28		plp		            PLP
.1a2402	2b		pld		            PLD
.1a2403	60		rts		            RTS
.1a2404					INSLINE
.1a2404	08		php		            PHP
.1a2405	c2 30		rep #$30	            REP #$30
.1a2407	a9 05 00	lda #$0005	            LDA #LINE_TOKENS+1  ; Set SCRATCH2 to the size of the line header with the end-of-line
.1a240a	85 10		sta $0810	            STA SCRATCH2
.1a240c	a0 00 00	ldy #$0000	            LDY #0
.1a240f					count_loop
.1a240f	e2 20		sep #$20	            SEP #$20
.1a2411	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the byte of the line
.1a2413	f0 07		beq $1a241c	            BEQ shift_prog      ; If it's end-of-line, SCRATCH2 is the length
.1a2415	c2 20		rep #$20	            REP #$20
.1a2417	e6 10		inc $0810	            INC SCRATCH2
.1a2419	c8		iny		            INY
.1a241a	80 f3		bra $1a240f	            BRA count_loop      ; Count and continue
.1a241c					shift_prog
.1a241c	c2 20		rep #$20	            REP #$20
.1a241e	a5 08		lda $0808	            LDA INDEX           ; BIP = the address of the first byte for the new line
.1a2420	85 00		sta $0800	            STA BIP
.1a2422	a5 0a		lda $080a	            LDA INDEX+2
.1a2424	85 02		sta $0802	            STA BIP+2
.1a2426	18		clc		            CLC                 ; SCRATCH = address of highest byte to copy
.1a2427	a5 d9		lda $08d9	            LDA LASTLINE
.1a2429	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a242c	85 0c		sta $080c	            STA SCRATCH
.1a242e	a5 db		lda $08db	            LDA LASTLINE+2
.1a2430	69 00 00	adc #$0000	            ADC #0
.1a2433	85 0e		sta $080e	            STA SCRATCH+2
.1a2435	18		clc		            CLC                 ; Adjust LASTLINE to its new position after the insert
.1a2436	a5 d9		lda $08d9	            LDA LASTLINE
.1a2438	65 10		adc $0810	            ADC SCRATCH2
.1a243a	85 d9		sta $08d9	            STA LASTLINE
.1a243c	a5 db		lda $08db	            LDA LASTLINE+2
.1a243e	69 00 00	adc #$0000	            ADC #0
.1a2441	85 db		sta $08db	            STA LASTLINE+2
.1a2443	18		clc		            CLC                 ; INDEX = address of the highest location to copy into
.1a2444	a5 d9		lda $08d9	            LDA LASTLINE
.1a2446	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a2449	85 08		sta $0808	            STA INDEX
.1a244b	a5 db		lda $08db	            LDA LASTLINE+2
.1a244d	69 00 00	adc #$0000	            ADC #0
.1a2450	85 0a		sta $080a	            STA INDEX+2
.1a2452	20 c8 22	jsr $1a22c8	            JSR MVPROGUP
.1a2455	c2 20		rep #$20	            REP #$20
.1a2457	a5 10		lda $0810	            LDA SCRATCH2
.1a2459	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.1a245c	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINK_LINK = length of the new line
.1a245e	a5 d7		lda $08d7	            LDA LINENUM
.1a2460	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.1a2463	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINE_NUMBER = number of the new line
.1a2465	18		clc		            CLC                 ; Point BIP to the first byte of the new line
.1a2466	a5 00		lda $0800	            LDA BIP
.1a2468	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.1a246b	85 00		sta $0800	            STA BIP
.1a246d	a5 02		lda $0802	            LDA BIP+2
.1a246f	69 00 00	adc #$0000	            ADC #0
.1a2472	85 02		sta $0802	            STA BIP+2
.1a2474	a0 00 00	ldy #$0000	            LDY #0
.1a2477	e2 20		sep #$20	            SEP #$20
.1a2479	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Get the byte of the tokenized line
.1a247b	97 00		sta [$0800],y	            STA [BIP],Y         ; Copy it to its correct location in the program
.1a247d	f0 03		beq $1a2482	            BEQ done            ; If it was end-of-line byte, we're done
.1a247f	c8		iny		            INY
.1a2480	80 f7		bra $1a2479	            BRA copy_loop       ; Otherwise, continue with the next
.1a2482					done
.1a2482	20 2d 42	jsr $1a422d	            JSR S_CLR
.1a2485	28		plp		            PLP
.1a2486	60		rts		            RTS
.1a2487					ADDLINE
.1a2487	08		php		            PHP
.1a2488	c2 30		rep #$30	            REP #$30
.1a248a	85 d7		sta $08d7	            STA LINENUM
.1a248c	20 b6 23	jsr $1a23b6	            JSR FINDINSPT
.1a248f	c9 00 00	cmp #$0000	            CMP #0
.1a2492	f0 2c		beq $1a24c0	            BEQ do_append       ; End-of-program found, add the line to the end
.1a2494	c9 01 00	cmp #$0001	            CMP #1
.1a2497	f0 22		beq $1a24bb	            BEQ do_insert       ; Spot was found: insertion required
.1a2499	c2 20		rep #$20	            REP #$20
.1a249b	a5 08		lda $0808	            LDA INDEX
.1a249d	48		pha		            PHA
.1a249e	a5 0a		lda $080a	            LDA INDEX+2
.1a24a0	48		pha		            PHA
.1a24a1	20 05 23	jsr $1a2305	            JSR DELLINE
.1a24a4	68		pla		            PLA
.1a24a5	85 0a		sta $080a	            STA INDEX+2
.1a24a7	68		pla		            PLA
.1a24a8	85 08		sta $0808	            STA INDEX
.1a24aa	a5 1a		lda $081a	            LDA CURLINE         ; Check to see if there is any non-whitespace on the line
.1a24ac	85 00		sta $0800	            STA BIP
.1a24ae	a5 1c		lda $081c	            LDA CURLINE+2
.1a24b0	85 02		sta $0802	            STA BIP+2
.1a24b2	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a24b5	e2 20		sep #$20	            SEP #$20
.1a24b7	a7 00		lda [$0800]	            LDA [BIP]
.1a24b9	f0 0a		beq $1a24c5	            BEQ done            ; If not, we're done
.1a24bb					do_insert
.1a24bb	20 04 24	jsr $1a2404	            JSR INSLINE
.1a24be	80 05		bra $1a24c5	            BRA done
.1a24c0	a5 d7		lda $08d7	do_append   LDA LINENUM
.1a24c2	20 48 23	jsr $1a2348	            JSR APPLINE
.1a24c5	28		plp		done        PLP
.1a24c6	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\repl.s

="#"					CHAR_DIR = '#'
="|"					CHAR_BRUN = '|'
.1a24c7					EXPANDLINE
.1a24c7	0b		phd		                PHD
.1a24c8	08		php		                PHP
.1a24c9	08		php		            PHP
.1a24ca	c2 20		rep #$20	            REP #$20
.1a24cc	48		pha		            PHA
.1a24cd	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a24d0	5b		tcd		            TCD
.1a24d1	68		pla		            PLA
.1a24d2	28		plp		            PLP
.1a24d3	e2 20		sep #$20	            SEP #$20
.1a24d5	c2 10		rep #$10	            REP #$10
.1a24d7	a2 00 00	ldx #$0000	                LDX #0
.1a24da	bd 00 4f	lda $4f00,x	count_loop      LDA INPUTBUF,X              ; Count the number of characters in the input
.1a24dd	f0 03		beq $1a24e2	                BEQ save_size
.1a24df	e8		inx		                INX
.1a24e0	80 f8		bra $1a24da	                BRA count_loop
.1a24e2	86 0c		stx $080c	save_size       STX SCRATCH                 ; Save the size in SCRATCH
.1a24e4	c2 30		rep #$30	            REP #$30
.1a24e6	8a		txa		                TXA
.1a24e7	c9 02 00	cmp #$0002	                CMP #2                      ; Are there arguments?
.1a24ea	90 12		bcc $1a24fe	                BLT start_copy              ; No: just replace the whole string
.1a24ec	3a		dec a		                DEC A
.1a24ed	18		clc		                CLC
.1a24ee	69 00 4f	adc #$4f00	                ADC #<>INPUTBUF
.1a24f1	aa		tax		                TAX                         ; X <-- INPUTBUF + len(INPUTBUF) - 1
.1a24f2	18		clc		                CLC                         ; Y <-- INPUTBUF + len(INPUTBUF) - 1 + len(substitution)
.1a24f3	65 8f		adc $088f	                ADC MCOUNT
.1a24f5	a8		tay		                TAY
.1a24f6	a5 0c		lda $080c	                LDA SCRATCH
.1a24f8	3a		dec a		                DEC A
.1a24f9	8b		phb		                PHB
.1a24fa	44 00 00	mvp #$00,#$00	                MVP #`INPUTBUF,#`INPUTBUF   ; Make room for the substitition
.1a24fd	ab		plb		                PLB
.1a24fe					start_copy
.1a24fe	c2 20		rep #$20	            REP #$20
.1a2500	a6 55		ldx $0855	                LDX MARG1                   ; Source is data to copy
.1a2502	a0 00 4f	ldy #$4f00	                LDY #<>INPUTBUF             ; Destination is input buffer
.1a2505	a5 8f		lda $088f	                LDA MCOUNT                  ; Number of bytes to copy
.1a2507	8b		phb		                PHB
.1a2508	54 00 1a	mvn #$1a,#$00	                MVN #`EXPANDLINE,#`INPUTBUF ; Copy the data
.1a250b	ab		plb		                PLB
.1a250c	e2 20		sep #$20	            SEP #$20
.1a250e	a5 0c		lda $080c	                LDA SCRATCH                 ; Check again to see if we need quotes
.1a2510	c9 02		cmp #$02	                CMP #2
.1a2512	90 18		bcc $1a252c	                BLT done
.1a2514	a6 8f		ldx $088f	                LDX MCOUNT                  ; If so, add a quote mark here
.1a2516	a9 22		lda #$22	                LDA #CHAR_DQUOTE
.1a2518	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a251b	e8		inx		skip_to_end     INX                         ; Move to the end of the input string
.1a251c	bd 00 4f	lda $4f00,x	                LDA INPUTBUF,X
.1a251f	d0 fa		bne $1a251b	                BNE skip_to_end
.1a2521	a9 22		lda #$22	                LDA #CHAR_DQUOTE            ; Add the quote to the end of the string
.1a2523	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a2526	a9 00		lda #$00	                LDA #0                      ; And terminate with a NULL
.1a2528	e8		inx		                INX
.1a2529	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a252c	28		plp		done            PLP
.1a252d	2b		pld		                PLD
.1a252e	60		rts		            RTS
.1a252f					PREPROCESS
.1a252f	da		phx		                PHX
.1a2530	5a		phy		                PHY
.1a2531	8b		phb		                PHB
.1a2532	0b		phd		                PHD
.1a2533	08		php		                PHP
.1a2534	08		php		            PHP
.1a2535	c2 20		rep #$20	            REP #$20
.1a2537	48		pha		            PHA
.1a2538	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a253b	5b		tcd		            TCD
.1a253c	68		pla		            PLA
.1a253d	28		plp		            PLP
.1a253e	e2 20		sep #$20	            SEP #$20
.1a2540	c2 10		rep #$10	            REP #$10
.1a2542	ad 00 4f	lda $4f00	                LDA INPUTBUF            ; Check the first character
.1a2545	c9 23		cmp #$23	                CMP #CHAR_DIR           ; Is it the DIR character?
.1a2547	f0 0a		beq $1a2553	                BEQ expand_dir          ; Yes: expand the DIR command into place
.1a2549	c9 7c		cmp #$7c	                CMP #CHAR_BRUN          ; Is it the BRUN character?
.1a254b	f0 17		beq $1a2564	                BEQ expand_brun         ; Yes: expand the BRUN command into place
.1a254d	28		plp		done            PLP
.1a254e	2b		pld		                PLD
.1a254f	ab		plb		                PLB
.1a2550	7a		ply		                PLY
.1a2551	fa		plx		                PLX
.1a2552	60		rts		            RTS
.1a2553					expand_dir
.1a2553	c2 20		rep #$20	            REP #$20
.1a2555	a9 03 00	lda #$0003	                LDA #3                  ; Set size of substitution value
.1a2558	85 8f		sta $088f	                STA MCOUNT
.1a255a	a9 75 25	lda #$2575	                LDA #<>dir_text         ; Set pointer to substitution value
.1a255d	85 55		sta $0855	                STA MARG1
.1a255f	20 c7 24	jsr $1a24c7	            JSR EXPANDLINE
.1a2562	80 e9		bra $1a254d	                BRA done
.1a2564					expand_brun
.1a2564	c2 20		rep #$20	            REP #$20
.1a2566	a9 04 00	lda #$0004	                LDA #4                  ; Set size of substitution value
.1a2569	85 8f		sta $088f	                STA MCOUNT
.1a256b	a9 79 25	lda #$2579	                LDA #<>brun_text        ; Set pointer to substitution value
.1a256e	85 55		sta $0855	                STA MARG1
.1a2570	20 c7 24	jsr $1a24c7	            JSR EXPANDLINE
.1a2573	80 d8		bra $1a254d	                BRA done
>1a2575	44 49 52 00			dir_text        .null "DIR"             ; Expansion of the DIR character
>1a2579	42 52 55 4e 00			brun_text       .null "BRUN"            ; Expansion of the BRUN character
.1a257e					PRREADY
.1a257e	8b		phb		                PHB
.1a257f	08		php		                PHP
.1a2580	20 e4 00	jsr $1a00e4	            JSR ENSURETEXT
.1a2583	08		php		            PHP
.1a2584	e2 20		sep #$20	            SEP #$20
.1a2586	48		pha		            PHA
.1a2587	a9 1a		lda #$1a	            LDA #`MPROMPT
.1a2589	48		pha		            PHA
.1a258a	ab		plb		            PLB
.1a258b	68		pla		            PLA
.1a258c	28		plp		            PLP
.1a258d	a2 5b d2	ldx #$d25b	                LDX #<>MPROMPT
.1a2590	20 16 03	jsr $1a0316	            JSR PRINTS
.1a2593	28		plp		                PLP
.1a2594	ab		plb		                PLB
.1a2595	60		rts		            RTS
.1a2596					IREADLINE
.1a2596	08		php		                PHP
.1a2597	e2 30		sep #$30	            SEP #$30
.1a2599	a9 01		lda #$01	                LDA #1
.1a259b	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a259e					read_loop
.1a259e	20 db 00	jsr $1a00db	            JSR GETKEYE
.1a25a1	f0 06		beq $1a25a9	                BEQ done
.1a25a3	c9 0d		cmp #$0d	                CMP #CHAR_CR
.1a25a5	f0 02		beq $1a25a9	                BEQ done
.1a25a7	80 f5		bra $1a259e	                BRA read_loop
.1a25a9	28		plp		done            PLP
.1a25aa	60		rts		            RTS
.1a25ab					PROCESS
.1a25ab	0b		phd		                PHD
.1a25ac	08		php		                PHP
.1a25ad	08		php		            PHP
.1a25ae	c2 20		rep #$20	            REP #$20
.1a25b0	48		pha		            PHA
.1a25b1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a25b4	5b		tcd		            TCD
.1a25b5	68		pla		            PLA
.1a25b6	28		plp		            PLP
.1a25b7	c2 30		rep #$30	            REP #$30
.1a25b9	64 d7		stz $08d7	                STZ LINENUM
.1a25bb	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF         ; Attempt to tokenize the line that was read
.1a25be	85 1a		sta $081a	                STA CURLINE
.1a25c0	a9 00 00	lda #$0000	                LDA #`CURLINE
.1a25c3	85 1c		sta $081c	                STA CURLINE+2
.1a25c5	20 4e 08	jsr $1a084e	            JSR TOKENIZE
.1a25c8	c2 20		rep #$20	            REP #$20
.1a25ca	a5 d7		lda $08d7	                LDA LINENUM             ; Did we get a line number?
.1a25cc	d0 05		bne $1a25d3	                BNE update_line         ; Yes: attempt to add it to the program
.1a25ce	20 6e 21	jsr $1a216e	            JSR EXECCMD
.1a25d1	80 07		bra $1a25da	                BRA done
.1a25d3					update_line
.1a25d3	20 87 24	jsr $1a2487	            JSR ADDLINE
.1a25d6	28		plp		no_prompt       PLP
.1a25d7	2b		pld		                PLD
.1a25d8	38		sec		                SEC
.1a25d9	60		rts		            RTS
.1a25da	28		plp		done            PLP
.1a25db	2b		pld		                PLD
.1a25dc	18		clc		                CLC
.1a25dd	60		rts		            RTS
.1a25de					INTERACT
.1a25de	c2 30		rep #$30	            REP #$30
.1a25e0	a2 ff fe	ldx #$feff	                LDX #<>STACK_END
.1a25e3	9a		txs		                TXS
.1a25e4					ready_loop
.1a25e4	20 7e 25	jsr $1a257e	            JSR PRREADY
.1a25e7					no_ready_loop
.1a25e7	20 08 00	jsr $1a0008	            JSR READLINE
.1a25ea	20 0c 00	jsr $1a000c	            JSR SCRCOPYLINE
.1a25ed	a9 00 00	lda #$0000	                LDA #0              ; Hide the cursor
.1a25f0	20 1c 00	jsr $1a001c	            JSR SHOWCURSOR
.1a25f3	20 2f 25	jsr $1a252f	            JSR PREPROCESS
.1a25f6	20 ab 25	jsr $1a25ab	            JSR PROCESS
.1a25f9	b0 ec		bcs $1a25e7	                BCS no_ready_loop
.1a25fb	80 e7		bra $1a25e4	                BRA ready_loop
>1ad25b	0d 52 45 41 44 59 0d 00		MPROMPT         .null 13,"READY",13

;******  Return to file: src\basic816.s


;******  Processing file: src\operators.s

.1a25fd					OP_PLUS
.1a25fd	08		php		            PHP
.1a25fe	e2 20		sep #$20	            SEP #$20
.1a2600	20 55 07	jsr $1a0755	            JSR ASS_ARGS_NUMSTR
.1a2603	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2605	f0 2c		beq $1a2633	            BEQ is_integer
.1a2607	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2609	f0 2d		beq $1a2638	            BEQ is_float
.1a260b	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a260d	f0 1f		beq $1a262e	            BEQ is_string
.1a260f					type_error
.1a260f	08		php		            PHP
.1a2610	c2 20		rep #$20	            REP #$20
.1a2612	48		pha		            PHA
.1a2613	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2616	5b		tcd		            TCD
.1a2617	68		pla		            PLA
.1a2618	28		plp		            PLP
.1a2619	e2 20		sep #$20	            SEP #$20
.1a261b	a9 04		lda #$04	            LDA #ERR_TYPE
.1a261d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2621	c2 20		rep #$20	            REP #$20
.1a2623	29 ff 00	and #$00ff	            AND #$00FF
.1a2626	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2629	e2 20		sep #$20	            SEP #$20
.1a262b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a262e					is_string
.1a262e	20 de 14	jsr $1a14de	            JSR STRCONCAT
.1a2631	80 08		bra $1a263b	            BRA done
.1a2633					is_integer
.1a2633	20 a3 51	jsr $1a51a3	            JSR OP_INT_ADD
.1a2636	80 03		bra $1a263b	            BRA done
.1a2638					is_float
.1a2638	20 12 54	jsr $1a5412	            JSR OP_FP_ADD
.1a263b	28		plp		done        PLP
.1a263c	60		rts		            RTS
.1a263d					OP_MINUS
.1a263d	08		php		            PHP
.1a263e	e2 20		sep #$20	            SEP #$20
.1a2640	20 07 07	jsr $1a0707	            JSR ASS_ARGS_NUM
.1a2643	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2645	f0 23		beq $1a266a	            BEQ is_integer
.1a2647	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2649	f0 24		beq $1a266f	            BEQ is_float
.1a264b					type_error
.1a264b	08		php		            PHP
.1a264c	c2 20		rep #$20	            REP #$20
.1a264e	48		pha		            PHA
.1a264f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2652	5b		tcd		            TCD
.1a2653	68		pla		            PLA
.1a2654	28		plp		            PLP
.1a2655	e2 20		sep #$20	            SEP #$20
.1a2657	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2659	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a265d	c2 20		rep #$20	            REP #$20
.1a265f	29 ff 00	and #$00ff	            AND #$00FF
.1a2662	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2665	e2 20		sep #$20	            SEP #$20
.1a2667	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a266a					is_integer
.1a266a	20 b5 51	jsr $1a51b5	            JSR OP_INT_SUB
.1a266d	80 03		bra $1a2672	            BRA done
.1a266f					is_float
.1a266f	20 07 54	jsr $1a5407	            JSR OP_FP_SUB
.1a2672	28		plp		done        PLP
.1a2673	60		rts		            RTS
.1a2674					OP_MULTIPLY
.1a2674	08		php		            PHP
.1a2675	e2 20		sep #$20	            SEP #$20
.1a2677	20 07 07	jsr $1a0707	            JSR ASS_ARGS_NUM
.1a267a	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a267c	f0 23		beq $1a26a1	            BEQ is_integer
.1a267e	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2680	f0 24		beq $1a26a6	            BEQ is_float
.1a2682					type_error
.1a2682	08		php		            PHP
.1a2683	c2 20		rep #$20	            REP #$20
.1a2685	48		pha		            PHA
.1a2686	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2689	5b		tcd		            TCD
.1a268a	68		pla		            PLA
.1a268b	28		plp		            PLP
.1a268c	e2 20		sep #$20	            SEP #$20
.1a268e	a9 04		lda #$04	            LDA #ERR_TYPE
.1a2690	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2694	c2 20		rep #$20	            REP #$20
.1a2696	29 ff 00	and #$00ff	            AND #$00FF
.1a2699	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a269c	e2 20		sep #$20	            SEP #$20
.1a269e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a26a1					is_integer
.1a26a1	20 c7 51	jsr $1a51c7	            JSR OP_INT_MUL
.1a26a4	80 03		bra $1a26a9	            BRA done
.1a26a6					is_float
.1a26a6	20 a8 54	jsr $1a54a8	            JSR OP_FP_MUL
.1a26a9	28		plp		done        PLP
.1a26aa	60		rts		            RTS
.1a26ab					OP_DIVIDE
.1a26ab	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a26ae	20 a2 06	jsr $1a06a2	            JSR ASS_ARG2_FLOAT
.1a26b1	20 5d 54	jsr $1a545d	            JSR OP_FP_DIV
.1a26b4	60		rts		            RTS
.1a26b5					OP_MOD
.1a26b5	a5 23		lda $0823	            LDA ARGUMENT1
.1a26b7	8f 1a 01 00	sta $00011a	            STA @lD1_OPERAND_B
.1a26bb	a5 29		lda $0829	            LDA ARGUMENT2
.1a26bd	8f 18 01 00	sta $000118	            STA @lD1_OPERAND_A
.1a26c1	af 1e 01 00	lda $00011e	            LDA @lD1_REMAINDER
.1a26c5	85 23		sta $0823	            STA ARGUMENT1
.1a26c7	60		rts		            RTS
.1a26c8					OP_AND
.1a26c8	08		php		            PHP
.1a26c9	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a26cc	20 34 05	jsr $1a0534	            JSR ASS_ARG2_INT
.1a26cf	c2 20		rep #$20	            REP #$20
.1a26d1	a5 23		lda $0823	            LDA ARGUMENT1
.1a26d3	25 29		and $0829	            AND ARGUMENT2
.1a26d5	85 23		sta $0823	            STA ARGUMENT1
.1a26d7	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a26d9	25 2b		and $082b	            AND ARGUMENT2+2
.1a26db	85 25		sta $0825	            STA ARGUMENT1+2
.1a26dd	28		plp		            PLP
.1a26de	60		rts		            RTS
.1a26df					OP_OR
.1a26df	08		php		            PHP
.1a26e0	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a26e3	20 34 05	jsr $1a0534	            JSR ASS_ARG2_INT
.1a26e6	c2 20		rep #$20	            REP #$20
.1a26e8	a5 23		lda $0823	            LDA ARGUMENT1
.1a26ea	05 29		ora $0829	            ORA ARGUMENT2
.1a26ec	85 23		sta $0823	            STA ARGUMENT1
.1a26ee	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a26f0	05 2b		ora $082b	            ORA ARGUMENT2+2
.1a26f2	85 25		sta $0825	            STA ARGUMENT1+2
.1a26f4	28		plp		done        PLP
.1a26f5	60		rts		            RTS
.1a26f6					OP_NOT
.1a26f6	08		php		            PHP
.1a26f7	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a26fa	c2 20		rep #$20	            REP #$20
.1a26fc	a5 23		lda $0823	            LDA ARGUMENT1
.1a26fe	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a2701	85 23		sta $0823	            STA ARGUMENT1
.1a2703	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a2705	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a2708	85 25		sta $0825	            STA ARGUMENT1+2
.1a270a	28		plp		done        PLP
.1a270b	60		rts		            RTS
.1a270c					OP_LT
.1a270c	08		php		            PHP
.1a270d	e2 20		sep #$20	            SEP #$20
.1a270f	20 55 07	jsr $1a0755	            JSR ASS_ARGS_NUMSTR
.1a2712	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2714	f0 2c		beq $1a2742	            BEQ is_integer
.1a2716	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2718	f0 2d		beq $1a2747	            BEQ is_float
.1a271a	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a271c	f0 1f		beq $1a273d	            BEQ is_string
.1a271e					type_error
.1a271e	08		php		            PHP
.1a271f	c2 20		rep #$20	            REP #$20
.1a2721	48		pha		            PHA
.1a2722	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2725	5b		tcd		            TCD
.1a2726	68		pla		            PLA
.1a2727	28		plp		            PLP
.1a2728	e2 20		sep #$20	            SEP #$20
.1a272a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a272c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2730	c2 20		rep #$20	            REP #$20
.1a2732	29 ff 00	and #$00ff	            AND #$00FF
.1a2735	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2738	e2 20		sep #$20	            SEP #$20
.1a273a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a273d					is_string
.1a273d	20 66 16	jsr $1a1666	            JSR OP_STR_LT
.1a2740	80 08		bra $1a274a	            BRA done
.1a2742					is_integer
.1a2742	20 c8 52	jsr $1a52c8	            JSR OP_INT_LT
.1a2745	80 03		bra $1a274a	            BRA done
.1a2747					is_float
.1a2747	20 3d 5a	jsr $1a5a3d	            JSR OP_FP_LT
.1a274a	28		plp		done        PLP
.1a274b	60		rts		            RTS
.1a274c					OP_GT
.1a274c	08		php		            PHP
.1a274d	e2 20		sep #$20	            SEP #$20
.1a274f	20 55 07	jsr $1a0755	            JSR ASS_ARGS_NUMSTR
.1a2752	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2754	f0 2c		beq $1a2782	            BEQ is_integer
.1a2756	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2758	f0 2d		beq $1a2787	            BEQ is_float
.1a275a	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a275c	f0 1f		beq $1a277d	            BEQ is_string
.1a275e					type_error
.1a275e	08		php		            PHP
.1a275f	c2 20		rep #$20	            REP #$20
.1a2761	48		pha		            PHA
.1a2762	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2765	5b		tcd		            TCD
.1a2766	68		pla		            PLA
.1a2767	28		plp		            PLP
.1a2768	e2 20		sep #$20	            SEP #$20
.1a276a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a276c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2770	c2 20		rep #$20	            REP #$20
.1a2772	29 ff 00	and #$00ff	            AND #$00FF
.1a2775	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2778	e2 20		sep #$20	            SEP #$20
.1a277a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a277d					is_string
.1a277d	20 7d 16	jsr $1a167d	            JSR OP_STR_GT
.1a2780	80 08		bra $1a278a	            BRA done
.1a2782					is_integer
.1a2782	20 e9 52	jsr $1a52e9	            JSR OP_INT_GT
.1a2785	80 03		bra $1a278a	            BRA done
.1a2787					is_float
.1a2787	20 52 5a	jsr $1a5a52	            JSR OP_FP_GT
.1a278a	28		plp		done        PLP
.1a278b	60		rts		            RTS
.1a278c					OP_EQ
.1a278c	08		php		            PHP
.1a278d	e2 20		sep #$20	            SEP #$20
.1a278f	20 55 07	jsr $1a0755	            JSR ASS_ARGS_NUMSTR
.1a2792	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2794	f0 2c		beq $1a27c2	            BEQ is_integer
.1a2796	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2798	f0 2d		beq $1a27c7	            BEQ is_float
.1a279a	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a279c	f0 1f		beq $1a27bd	            BEQ is_string
.1a279e					type_error
.1a279e	08		php		            PHP
.1a279f	c2 20		rep #$20	            REP #$20
.1a27a1	48		pha		            PHA
.1a27a2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a27a5	5b		tcd		            TCD
.1a27a6	68		pla		            PLA
.1a27a7	28		plp		            PLP
.1a27a8	e2 20		sep #$20	            SEP #$20
.1a27aa	a9 04		lda #$04	            LDA #ERR_TYPE
.1a27ac	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a27b0	c2 20		rep #$20	            REP #$20
.1a27b2	29 ff 00	and #$00ff	            AND #$00FF
.1a27b5	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a27b8	e2 20		sep #$20	            SEP #$20
.1a27ba	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a27bd					is_string
.1a27bd	20 94 16	jsr $1a1694	            JSR OP_STR_EQ
.1a27c0	80 08		bra $1a27ca	            BRA done
.1a27c2					is_integer
.1a27c2	20 16 53	jsr $1a5316	            JSR OP_INT_EQ
.1a27c5	80 03		bra $1a27ca	            BRA done
.1a27c7					is_float
.1a27c7	20 67 5a	jsr $1a5a67	            JSR OP_FP_EQ
.1a27ca	28		plp		done        PLP
.1a27cb	60		rts		            RTS
.1a27cc					OP_NE
.1a27cc	08		php		            PHP
.1a27cd	e2 20		sep #$20	            SEP #$20
.1a27cf	20 55 07	jsr $1a0755	            JSR ASS_ARGS_NUMSTR
.1a27d2	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a27d4	f0 2c		beq $1a2802	            BEQ is_integer
.1a27d6	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a27d8	f0 2d		beq $1a2807	            BEQ is_float
.1a27da	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a27dc	f0 1f		beq $1a27fd	            BEQ is_string
.1a27de					type_error
.1a27de	08		php		            PHP
.1a27df	c2 20		rep #$20	            REP #$20
.1a27e1	48		pha		            PHA
.1a27e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a27e5	5b		tcd		            TCD
.1a27e6	68		pla		            PLA
.1a27e7	28		plp		            PLP
.1a27e8	e2 20		sep #$20	            SEP #$20
.1a27ea	a9 04		lda #$04	            LDA #ERR_TYPE
.1a27ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a27f0	c2 20		rep #$20	            REP #$20
.1a27f2	29 ff 00	and #$00ff	            AND #$00FF
.1a27f5	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a27f8	e2 20		sep #$20	            SEP #$20
.1a27fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a27fd					is_string
.1a27fd	20 ab 16	jsr $1a16ab	            JSR OP_STR_NE
.1a2800	80 08		bra $1a280a	            BRA done
.1a2802					is_integer
.1a2802	20 34 53	jsr $1a5334	            JSR OP_INT_NE
.1a2805	80 03		bra $1a280a	            BRA done
.1a2807					is_float
.1a2807	20 a6 5a	jsr $1a5aa6	            JSR OP_FP_NE
.1a280a	28		plp		done        PLP
.1a280b	60		rts		            RTS
.1a280c					OP_GTE
.1a280c	08		php		            PHP
.1a280d	e2 20		sep #$20	            SEP #$20
.1a280f	20 55 07	jsr $1a0755	            JSR ASS_ARGS_NUMSTR
.1a2812	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2814	f0 2c		beq $1a2842	            BEQ is_integer
.1a2816	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2818	f0 2d		beq $1a2847	            BEQ is_float
.1a281a	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a281c	f0 1f		beq $1a283d	            BEQ is_string
.1a281e					type_error
.1a281e	08		php		            PHP
.1a281f	c2 20		rep #$20	            REP #$20
.1a2821	48		pha		            PHA
.1a2822	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2825	5b		tcd		            TCD
.1a2826	68		pla		            PLA
.1a2827	28		plp		            PLP
.1a2828	e2 20		sep #$20	            SEP #$20
.1a282a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a282c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2830	c2 20		rep #$20	            REP #$20
.1a2832	29 ff 00	and #$00ff	            AND #$00FF
.1a2835	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2838	e2 20		sep #$20	            SEP #$20
.1a283a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a283d					is_string
.1a283d	20 c2 16	jsr $1a16c2	            JSR OP_STR_GTE
.1a2840	80 08		bra $1a284a	            BRA done
.1a2842					is_integer
.1a2842	20 52 53	jsr $1a5352	            JSR OP_INT_GTE
.1a2845	80 03		bra $1a284a	            BRA done
.1a2847					is_float
.1a2847	20 91 5a	jsr $1a5a91	            JSR OP_FP_GTE
.1a284a	28		plp		done        PLP
.1a284b	60		rts		            RTS
.1a284c					OP_LTE
.1a284c	08		php		            PHP
.1a284d	e2 20		sep #$20	            SEP #$20
.1a284f	20 55 07	jsr $1a0755	            JSR ASS_ARGS_NUMSTR
.1a2852	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.1a2854	f0 2c		beq $1a2882	            BEQ is_integer
.1a2856	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.1a2858	f0 2d		beq $1a2887	            BEQ is_float
.1a285a	c9 02		cmp #$02	            CMP #TYPE_STRING
.1a285c	f0 1f		beq $1a287d	            BEQ is_string
.1a285e					type_error
.1a285e	08		php		            PHP
.1a285f	c2 20		rep #$20	            REP #$20
.1a2861	48		pha		            PHA
.1a2862	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2865	5b		tcd		            TCD
.1a2866	68		pla		            PLA
.1a2867	28		plp		            PLP
.1a2868	e2 20		sep #$20	            SEP #$20
.1a286a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a286c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2870	c2 20		rep #$20	            REP #$20
.1a2872	29 ff 00	and #$00ff	            AND #$00FF
.1a2875	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2878	e2 20		sep #$20	            SEP #$20
.1a287a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a287d					is_string
.1a287d	20 d9 16	jsr $1a16d9	            JSR OP_STR_LTE
.1a2880	80 08		bra $1a288a	            BRA done
.1a2882					is_integer
.1a2882	20 7f 53	jsr $1a537f	            JSR OP_INT_LTE
.1a2885	80 03		bra $1a288a	            BRA done
.1a2887					is_float
.1a2887	20 7c 5a	jsr $1a5a7c	            JSR OP_FP_LTE
.1a288a	28		plp		done        PLP
.1a288b	60		rts		            RTS
.1a288c					OP_NEGATIVE
.1a288c	08		php		                PHP
.1a288d	e2 20		sep #$20	            SEP #$20
.1a288f	a5 27		lda $0827	                LDA ARGTYPE1                ; Check the type of the argument
.1a2891	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a2893	f0 2d		beq $1a28c2	                BEQ int_negate              ; If integer: negate the integer
.1a2895	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a2897	f0 1f		beq $1a28b8	                BEQ float_negate            ; If floating point: negate the floating point
.1a2899					type_error
.1a2899	08		php		            PHP
.1a289a	c2 20		rep #$20	            REP #$20
.1a289c	48		pha		            PHA
.1a289d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a28a0	5b		tcd		            TCD
.1a28a1	68		pla		            PLA
.1a28a2	28		plp		            PLP
.1a28a3	e2 20		sep #$20	            SEP #$20
.1a28a5	a9 04		lda #$04	            LDA #ERR_TYPE
.1a28a7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a28ab	c2 20		rep #$20	            REP #$20
.1a28ad	29 ff 00	and #$00ff	            AND #$00FF
.1a28b0	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a28b3	e2 20		sep #$20	            SEP #$20
.1a28b5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a28b8					float_negate
.1a28b8	e2 20		sep #$20	            SEP #$20
.1a28ba	a5 26		lda $0826	                LDA ARGUMENT1+3             ; Flip the sign bit of the floating point number
.1a28bc	49 80		eor #$80	                EOR #$80
.1a28be	85 26		sta $0826	                STA ARGUMENT1+3
.1a28c0	80 16		bra $1a28d8	                BRA done
.1a28c2					int_negate
.1a28c2	c2 20		rep #$20	            REP #$20
.1a28c4	a5 23		lda $0823	                LDA ARGUMENT1               ; Invert ARGUMENT1
.1a28c6	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a28c9	85 23		sta $0823	                STA ARGUMENT1
.1a28cb	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a28cd	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a28d0	85 25		sta $0825	                STA ARGUMENT1+2
.1a28d2	e6 23		inc $0823	                INC ARGUMENT1               ; And increment to get two's complement
.1a28d4	d0 02		bne $1a28d8	                BNE done
.1a28d6	e6 25		inc $0825	                INC ARGUMENT1+2
.1a28d8					done
.1a28d8	28		plp		                PLP
.1a28d9	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\statements.s


;******  Processing file: src\C256/statements_c256.s

=0					GR_LUT_BLUE = 0
=1					GR_LUT_GREEN = 1
=2					GR_LUT_RED = 2
=3					GR_LUT_ALPHA = 3
=640					GR_DEFAULT_COLS = 640               ; Default number of columns in the display
=480					GR_DEFAULT_ROWS = 480               ; Default number of rows in the display
=8					GR_MAX_LUT = 8                      ; The number of LUTs Vicky supports
=64					SP_MAX = 64                         ; The number of sprites Vicky supports
=8					SP_REG_SIZE = 8                     ; The number of bytes in a sprite's register block
=0					SP_CONTROL = 0                      ; Offset of the control regsiter for a sprite
=1					SP_ADDR = 1                         ; Offset of the pixmap address for a sprite
=4					SP_X_COORD = 4                      ; Offset of the X coordinate for a sprite
=6					SP_Y_COORD = 6                      ; Offset of the Y coordinate for a sprite
=12					TILEMAP_REG_SIZE = 12               ; The number of bytes in a tile map's register set
=4					TILESET_REG_SIZE = 4                ; The number of bytes in a tile set's register set
=2					BM_MAX = 2                          ; Maximum number of bitmaps we support
=$0040					MAX_VRAM_VICKY = $0040              ; Upper limit (exclusive) bank address for VRAM in Vicky address space
=$00f0					MAX_VRAM_CPU = $00F0                ; Upper limit (exclusive) bank address for VRAM in CPU address space
=$00b0					MIN_VRAM_CPU = $00B0                ; Lower limit (inclusive) bank address for VRAM in CPU address space
>1af000					GR_BM0_ADDR     .dword ?            ; Address of bitmap 0 (from CPU's perspective)
>1af004					GR_BM1_ADDR     .dword ?            ; Address of bitmap 1 (from CPU's perspective)
>1af008					GR_BM0_VRAM     .dword ?            ; Address of bitmap 0 (relative to start of VRAM)
>1af00c					GR_BM1_VRAM     .dword ?            ; Address of bitmap 1 (relative to start of VRAM)
>1af010					GR_MAX_COLS     .word ?             ; Width the display in pixels
>1af012					GR_MAX_ROWS     .word ?             ; Height of the display in pixels
>1af014					GR_TOTAL_PIXELS .word ?             ; Total number of pixels in the display
>1af016					GR_TEMP         .word ?             ; A temporary word for graphics commands
>1af018					GS_SP_CONTROL   .fill SP_MAX        ; Shadow registers for the sprite controls
.1a28da					S_SETTIME
.1a28da	08		php		                PHP
.1a28db	e2 20		sep #$20	            SEP #$20
.1a28dd	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a28e0	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a28e3	20 60 04	jsr $1a0460	            JSR DIVINT10
.1a28e6	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a28e8	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a28e9	0a		asl a		                ASL A
.1a28ea	0a		asl a		                ASL A
.1a28eb	0a		asl a		                ASL A
.1a28ec	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a28ee	48		pha		                PHA
.1a28ef	a9 2c		lda #$2c	                LDA #','
.1a28f1	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a28f4	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a28f7	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a28fa	20 60 04	jsr $1a0460	            JSR DIVINT10
.1a28fd	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a28ff	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2900	0a		asl a		                ASL A
.1a2901	0a		asl a		                ASL A
.1a2902	0a		asl a		                ASL A
.1a2903	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2905	48		pha		                PHA
.1a2906	a9 2c		lda #$2c	                LDA #','
.1a2908	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a290b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a290e	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2911	20 60 04	jsr $1a0460	            JSR DIVINT10
.1a2914	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2916	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2917	0a		asl a		                ASL A
.1a2918	0a		asl a		                ASL A
.1a2919	0a		asl a		                ASL A
.1a291a	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a291c	48		pha		                PHA
.1a291d	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a2921	09 0c		ora #$0c	                ORA #%00001100
.1a2923	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2927	68		pla		                PLA                     ; And seconds to the RTC
.1a2928	8f 00 08 af	sta $af0800	                STA @lRTC_SEC
.1a292c	68		pla		                PLA                     ; Minutes...
.1a292d	8f 02 08 af	sta $af0802	                STA @lRTC_MIN
.1a2931	68		pla		                PLA                     ; Save the hour...
.1a2932	8f 04 08 af	sta $af0804	                STA @lRTC_HRS
.1a2936	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a293a	29 f7		and #$f7	                AND #%11110111
.1a293c	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a2940	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a2943	28		plp		                PLP
.1a2944	60		rts		            RTS
.1a2945					S_SETDATE
.1a2945	08		php		                PHP
.1a2946	e2 20		sep #$20	            SEP #$20
.1a2948	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a294b	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a294e	20 60 04	jsr $1a0460	            JSR DIVINT10
.1a2951	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2953	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2954	0a		asl a		                ASL A
.1a2955	0a		asl a		                ASL A
.1a2956	0a		asl a		                ASL A
.1a2957	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2959	48		pha		                PHA
.1a295a	a9 2c		lda #$2c	                LDA #','
.1a295c	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a295f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2962	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2965	20 60 04	jsr $1a0460	            JSR DIVINT10
.1a2968	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a296a	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a296b	0a		asl a		                ASL A
.1a296c	0a		asl a		                ASL A
.1a296d	0a		asl a		                ASL A
.1a296e	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2970	48		pha		                PHA
.1a2971	a9 2c		lda #$2c	                LDA #','
.1a2973	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2976	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2979	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a297c	20 96 04	jsr $1a0496	            JSR DIVINT100
.1a297f	c2 20		rep #$20	            REP #$20
.1a2981	a5 23		lda $0823	                LDA ARGUMENT1           ; Get the century
.1a2983	85 92		sta $0892	                STA MTEMP               ; Save it in MTEMP
.1a2985	a5 29		lda $0829	                LDA ARGUMENT2           ; Separate the 10s from the 1s digits
.1a2987	85 23		sta $0823	                STA ARGUMENT1
.1a2989	20 60 04	jsr $1a0460	            JSR DIVINT10
.1a298c	e2 20		sep #$20	            SEP #$20
.1a298e	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a2990	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a2991	0a		asl a		                ASL A
.1a2992	0a		asl a		                ASL A
.1a2993	0a		asl a		                ASL A
.1a2994	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a2996	48		pha		                PHA                     ; Save the 10s and 1s in BCD
.1a2997	c2 20		rep #$20	            REP #$20
.1a2999	a5 92		lda $0892	                LDA MTEMP               ; Separate the 100s from the 1000s digits
.1a299b	85 23		sta $0823	                STA ARGUMENT1
.1a299d	20 60 04	jsr $1a0460	            JSR DIVINT10
.1a29a0	e2 20		sep #$20	            SEP #$20
.1a29a2	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.1a29a4	0a		asl a		                ASL A                   ; Shift it 4 bits
.1a29a5	0a		asl a		                ASL A
.1a29a6	0a		asl a		                ASL A
.1a29a7	0a		asl a		                ASL A
.1a29a8	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.1a29aa	48		pha		                PHA                     ; Save the 100s and 1000s in BCD
.1a29ab	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a29af	09 0c		ora #$0c	                ORA #%00001100
.1a29b1	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a29b5	68		pla		                PLA                     ; Set the century
.1a29b6	8f 0f 08 af	sta $af080f	                STA @lRTC_CENTURY
.1a29ba	68		pla		                PLA                     ; And year to the RTC
.1a29bb	8f 0a 08 af	sta $af080a	                STA @lRTC_YEAR
.1a29bf	68		pla		                PLA                     ; Month...
.1a29c0	8f 09 08 af	sta $af0809	                STA @lRTC_MONTH
.1a29c4	68		pla		                PLA                     ; Save the day...
.1a29c5	8f 06 08 af	sta $af0806	                STA @lRTC_DAY
.1a29c9	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a29cd	29 f7		and #$f7	                AND #%11110111
.1a29cf	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.1a29d3	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a29d6	28		plp		                PLP
.1a29d7	60		rts		            RTS
.1a29d8					S_TEXTCOLOR
.1a29d8	08		php		                PHP
.1a29d9					locals
>0001					L_FOREGROUND    .byte ?
.1a29d9	e2 20		sep #$20	            SEP #$20
.1a29db	48		pha		            PHA
.1a29dc	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a29df	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a29e2	e2 20		sep #$20	            SEP #$20
.1a29e4	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the foreground position
.1a29e6	29 0f		and #$0f	                AND #$0F
.1a29e8	0a		asl a		                ASL A
.1a29e9	0a		asl a		                ASL A
.1a29ea	0a		asl a		                ASL A
.1a29eb	0a		asl a		                ASL A
.1a29ec	83 01		sta $01,s	                STA L_FOREGROUND    ; Save the foreground color
.1a29ee	a9 2c		lda #$2c	                LDA #','
.1a29f0	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a29f3	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a29f6	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a29f9	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the background position
.1a29fb	29 0f		and #$0f	                AND #$0F
.1a29fd	03 01		ora $01,s	                ORA L_FOREGROUND    ; Add in the foreground
.1a29ff	8f 1e 00 00	sta $00001e	                STA @lCURCOLOR      ; And save the new color combination
.1a2a03	e2 20		sep #$20	            SEP #$20
.1a2a05	68		pla		            PLA
.1a2a06	28		plp		                PLP
.1a2a07	60		rts		            RTS
.1a2a08					S_SETBGCOLOR
.1a2a08	08		php		                PHP
.1a2a09					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.1a2a09	c2 20		rep #$20	            REP #$20
.1a2a0b	f4 00 00	pea #$0000	            PEA #0
.1a2a0e	e2 20		sep #$20	            SEP #$20
.1a2a10	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2a13	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2a16	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.1a2a18	83 01		sta $01,s	                STA L_RED
.1a2a1a	a9 2c		lda #$2c	                LDA #','
.1a2a1c	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2a1f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2a22	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2a25	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.1a2a27	83 02		sta $02,s	                STA L_GREEN
.1a2a29	a9 2c		lda #$2c	                LDA #','
.1a2a2b	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2a2e	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2a31	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2a34	a5 23		lda $0823	                LDA ARGUMENT1               ; And set the actual color
.1a2a36	8f 0d 00 af	sta $af000d	                STA @lBACKGROUND_COLOR_B
.1a2a3a	a3 02		lda $02,s	                LDA L_GREEN
.1a2a3c	8f 0e 00 af	sta $af000e	                STA @lBACKGROUND_COLOR_G
.1a2a40	a3 01		lda $01,s	                LDA L_RED
.1a2a42	8f 0f 00 af	sta $af000f	                STA @lBACKGROUND_COLOR_R
.1a2a46	c2 20		rep #$20	            REP #$20
.1a2a48	68		pla		            PLA
.1a2a49	28		plp		                PLP
.1a2a4a	60		rts		            RTS
.1a2a4b					S_SETBORDER
.1a2a4b	08		php		                PHP
.1a2a4c					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.1a2a4c	c2 20		rep #$20	            REP #$20
.1a2a4e	f4 00 00	pea #$0000	            PEA #0
.1a2a51	e2 20		sep #$20	            SEP #$20
.1a2a53	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2a56	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2a59	a5 23		lda $0823	                LDA ARGUMENT1
.1a2a5b	f0 16		beq $1a2a73	                BEQ hide_border
.1a2a5d	a9 01		lda #$01	                LDA #Border_Ctrl_Enable     ; Enable the border
.1a2a5f	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.1a2a63	a9 20		lda #$20	                LDA #BORDER_WIDTH           ; Set the border width
.1a2a65	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.1a2a69	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.1a2a6d	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2a71	80 0a		bra $1a2a7d	                BRA get_color
.1a2a73	a9 00		lda #$00	hide_border     LDA #0                      ; Hide the border
.1a2a75	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.1a2a79	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2a7d	a9 2c		lda #$2c	get_color       LDA #','
.1a2a7f	85 37		sta $0837	                STA TARGETTOK
.1a2a81	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a2a84	90 39		bcc $1a2abf	                BCC done                    ; No: we're done
.1a2a86	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a2a89	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2a8c	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2a8f	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.1a2a91	83 01		sta $01,s	                STA L_RED
.1a2a93	a9 2c		lda #$2c	                LDA #','
.1a2a95	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2a98	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2a9b	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2a9e	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.1a2aa0	83 02		sta $02,s	                STA L_GREEN
.1a2aa2	a9 2c		lda #$2c	                LDA #','
.1a2aa4	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2aa7	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2aaa	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2aad	a5 23		lda $0823	                LDA ARGUMENT1
.1a2aaf	8f 05 00 af	sta $af0005	                STA @lBORDER_COLOR_B        ; Set the border color
.1a2ab3	a3 02		lda $02,s	                LDA L_GREEN
.1a2ab5	8f 06 00 af	sta $af0006	                STA @lBORDER_COLOR_G
.1a2ab9	a3 01		lda $01,s	                LDA L_RED
.1a2abb	8f 07 00 af	sta $af0007	                STA @lBORDER_COLOR_R
.1a2abf					done
.1a2abf	c2 20		rep #$20	            REP #$20
.1a2ac1	68		pla		            PLA
.1a2ac2	28		plp		                PLP
.1a2ac3	60		rts		            RTS
.1a2ac4					S_SETCOLOR
.1a2ac4	08		php		                PHP
.1a2ac5					locals
>0001					L_LUT           .byte ?
>0002					L_COLOR         .byte ?
>0003					L_RED           .byte ?
>0004					L_GREEN         .byte ?
>0005					L_BLUE          .byte ?
.1a2ac5	c2 20		rep #$20	            REP #$20
.1a2ac7	3b		tsc		            TSC
.1a2ac8	38		sec		            SEC
.1a2ac9	e9 05 00	sbc #$0005	            SBC #SIZE(locals)
.1a2acc	1b		tcs		            TCS
.1a2acd	e2 20		sep #$20	            SEP #$20
.1a2acf	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2ad2	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2ad5	a5 23		lda $0823	                LDA ARGUMENT1
.1a2ad7	c9 0a		cmp #$0a	                CMP #10             ; And in range
.1a2ad9	90 1f		bcc $1a2afa	                BLT save_lut
.1a2adb					bad_argument
.1a2adb	08		php		            PHP
.1a2adc	c2 20		rep #$20	            REP #$20
.1a2ade	48		pha		            PHA
.1a2adf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2ae2	5b		tcd		            TCD
.1a2ae3	68		pla		            PLA
.1a2ae4	28		plp		            PLP
.1a2ae5	e2 20		sep #$20	            SEP #$20
.1a2ae7	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a2ae9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2aed	c2 20		rep #$20	            REP #$20
.1a2aef	29 ff 00	and #$00ff	            AND #$00FF
.1a2af2	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2af5	e2 20		sep #$20	            SEP #$20
.1a2af7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2afa	83 01		sta $01,s	save_lut        STA L_LUT           ; Save as LUT
.1a2afc	a9 2c		lda #$2c	                LDA #','
.1a2afe	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2b01	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2b04	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2b07	a5 23		lda $0823	                LDA ARGUMENT1
.1a2b09	83 02		sta $02,s	                STA L_COLOR         ; Save as COLOR
.1a2b0b	a9 2c		lda #$2c	                LDA #','
.1a2b0d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2b10	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2b13	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2b16	a5 23		lda $0823	                LDA ARGUMENT1
.1a2b18	83 03		sta $03,s	                STA L_RED           ; Save as RED
.1a2b1a	a9 2c		lda #$2c	                LDA #','
.1a2b1c	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2b1f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2b22	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2b25	a5 23		lda $0823	                LDA ARGUMENT1
.1a2b27	83 04		sta $04,s	                STA L_GREEN         ; Save it as GREEN
.1a2b29	a9 2c		lda #$2c	                LDA #','
.1a2b2b	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2b2e	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2b31	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2b34	a5 23		lda $0823	                LDA ARGUMENT1
.1a2b36	83 05		sta $05,s	                STA L_BLUE          ; Save it as BLUE
.1a2b38	a9 af		lda #$af	                LDA #`GRPH_LUT0_PTR ; Get the bank Vicky is in (should always be $AF)
.1a2b3a	85 a0		sta $08a0	                STA MTEMPPTR+2      ; MTEMPPTR will be our pointer to the LUT entry
.1a2b3c	a3 01		lda $01,s	                LDA L_LUT           ; Compute the offset to the LUT address
.1a2b3e	0a		asl a		                ASL A
.1a2b3f	c2 20		rep #$20	            REP #$20
.1a2b41	29 ff 00	and #$00ff	                AND #$00FF
.1a2b44	aa		tax		                TAX                 ; Put it in X
.1a2b45	bf 7c 2b 1a	lda $1a2b7c,x	                LDA @llut_address,X ; Get the address of the LUT
.1a2b49	85 9e		sta $089e	                STA MTEMPPTR        ; Put it in MTEMPPTR
.1a2b4b	e2 20		sep #$20	            SEP #$20
.1a2b4d	a3 02		lda $02,s	                LDA L_COLOR         ; color index *= 4
.1a2b4f	c2 20		rep #$20	            REP #$20
.1a2b51	29 ff 00	and #$00ff	                AND #$00FF
.1a2b54	0a		asl a		                ASL A               ; Since each color has four bytes of data
.1a2b55	0a		asl a		                ASL A
.1a2b56	18		clc		                CLC                 ; Add the color offset to MTEMPPTR
.1a2b57	65 9e		adc $089e	                ADC MTEMPPTR
.1a2b59	85 9e		sta $089e	                STA MTEMPPTR
.1a2b5b	e2 20		sep #$20	            SEP #$20
.1a2b5d	a0 02 00	ldy #$0002	                LDY #GR_LUT_RED
.1a2b60	a3 03		lda $03,s	                LDA L_RED
.1a2b62	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the red component to the color entry
.1a2b64	a0 01 00	ldy #$0001	                LDY #GR_LUT_GREEN
.1a2b67	a3 04		lda $04,s	                LDA L_GREEN
.1a2b69	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the green component to the color entry
.1a2b6b	a0 00 00	ldy #$0000	                LDY #GR_LUT_BLUE
.1a2b6e	a3 05		lda $05,s	                LDA L_BLUE
.1a2b70	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the blue component to the color entry
.1a2b72					done
.1a2b72	c2 20		rep #$20	            REP #$20
.1a2b74	3b		tsc		            TSC
.1a2b75	18		clc		            CLC
.1a2b76	69 05 00	adc #$0005	            ADC #SIZE(locals)
.1a2b79	1b		tcs		            TCS
.1a2b7a	28		plp		                PLP
.1a2b7b	60		rts		            RTS
>1a2b7c	00 20				lut_address     .word <>GRPH_LUT0_PTR
>1a2b7e	00 24				                .word <>GRPH_LUT1_PTR
>1a2b80	00 28				                .word <>GRPH_LUT2_PTR
>1a2b82	00 2c				                .word <>GRPH_LUT3_PTR
>1a2b84	00 30				                .word <>GRPH_LUT4_PTR
>1a2b86	00 34				                .word <>GRPH_LUT5_PTR
>1a2b88	00 38				                .word <>GRPH_LUT6_PTR
>1a2b8a	00 3c				                .word <>GRPH_LUT7_PTR
>1a2b8c	40 1f				                .word <>FG_CHAR_LUT_PTR
>1a2b8e	80 1f				                .word <>BG_CHAR_LUT_PTR
.1a2b90					S_GRAPHICS
.1a2b90	da		phx		                PHX
.1a2b91	5a		phy		                PHY
.1a2b92	08		php		                PHP
.1a2b93	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2b96	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2b99	c2 20		rep #$20	            REP #$20
.1a2b9b	a5 23		lda $0823	                LDA ARGUMENT1               ; Check to see if we're setting mode to 800x600 or 400x300
.1a2b9d	89 00 01	bit #$0100	                BIT #$0100
.1a2ba0	d0 17		bne $1a2bb9	                BNE set_mode                ; Yes: go ahead and set it
.1a2ba2	af 00 00 af	lda $af0000	                LDA @l MASTER_CTRL_REG_L    ; Otherwise, check to see if we're already in 800x600 or 400x300
.1a2ba6	89 00 01	bit #$0100	                BIT #$0100
.1a2ba9	f0 0e		beq $1a2bb9	                BEQ set_mode                ; No: just go ahead and set the mode
.1a2bab	e2 20		sep #$20	            SEP #$20
.1a2bad	a9 00		lda #$00	                LDA #0                      ; Yes: toggle back to 640x480...
.1a2baf	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.1a2bb3	a9 01		lda #$01	                LDA #1                      ; And back to 800x600....
.1a2bb5	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.1a2bb9					set_mode
.1a2bb9	c2 20		rep #$20	            REP #$20
.1a2bbb	a5 23		lda $0823	                LDA ARGUMENT1
.1a2bbd	8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L    ; Set the graphics mode
.1a2bc1	e2 20		sep #$20	            SEP #$20
.1a2bc3	a5 24		lda $0824	                LDA ARGUMENT1+1             ; Get the screen size bits
.1a2bc5	c2 20		rep #$20	            REP #$20
.1a2bc7	29 03 00	and #$0003	                AND #$0003
.1a2bca	0a		asl a		                ASL A                       ; Multiply by two to get the index
.1a2bcb	aa		tax		                TAX                         ; X is index into the size tables
.1a2bcc	c2 20		rep #$20	            REP #$20
.1a2bce	bf 17 2c 1a	lda $1a2c17,x	                LDA gr_columns,X            ; Set the columns
.1a2bd2	8f 10 f0 1a	sta $1af010	                STA @lGR_MAX_COLS
.1a2bd6	bf 1f 2c 1a	lda $1a2c1f,x	                LDA gr_rows,X               ; Set the rows
.1a2bda	8f 12 f0 1a	sta $1af012	                STA @lGR_MAX_ROWS
.1a2bde	af 10 f0 1a	lda $1af010	                LDA @lGR_MAX_COLS           ; Get the current columns
.1a2be2	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.1a2be6	af 12 f0 1a	lda $1af012	                LDA @lGR_MAX_ROWS           ; Get the current rows
.1a2bea	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B
.1a2bee	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT             ; Multiply them to get the total pixels
.1a2bf2	8f 14 f0 1a	sta $1af014	                STA @lGR_TOTAL_PIXELS
.1a2bf6	e2 20		sep #$20	            SEP #$20
.1a2bf8	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.1a2bfc	8f 16 f0 1a	sta $1af016	                STA @lGR_TOTAL_PIXELS+2
.1a2c00	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.1a2c04					reset_cursor
.1a2c04	c2 20		rep #$20	            REP #$20
.1a2c06	af 1a 00 00	lda $00001a	                LDA @lCURSORX
.1a2c0a	aa		tax		                TAX
.1a2c0b	af 1c 00 00	lda $00001c	                LDA @lCURSORY
.1a2c0f	a8		tay		                TAY
.1a2c10	20 20 00	jsr $1a0020	            JSR CURSORXY
.1a2c13	28		plp		                PLP
.1a2c14	7a		ply		                PLY
.1a2c15	fa		plx		                PLX
.1a2c16	60		rts		            RTS
>1a2c17	80 02 20 03 40 01 90 01		gr_columns      .word 640,800,320,400
>1a2c1f	e0 01 58 02 f0 00 2c 01		gr_rows         .word 480,600,240,300
>1a2c27	50 00 64 00 28 00 32 00		col_count       .word 80,100,40,50
>1a2c2f	3c 00 4b 00 1e 00 32 00		row_count       .word 60,75,30,50
>1a2c37	48 00 5c 00 20 00 2a 00		colb_count      .word 72,92,32,42
>1a2c3f	34 00 43 00 16 00 34 00		rowb_count      .word 52,67,22,52
.1a2c47					BITMAP_SRAM
.1a2c47	da		phx		                PHX
.1a2c48	08		php		                PHP
.1a2c49	c2 30		rep #$30	            REP #$30
.1a2c4b	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2c4e	b0 1c		bcs $1a2c6c	                BGE range_err           ; Make sure it's within range
.1a2c50	0a		asl a		                ASL A
.1a2c51	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.1a2c52	aa		tax		                TAX
.1a2c53	bf 00 f0 1a	lda $1af000,x	                LDA @l GR_BM0_ADDR,X    ; Get the low 16-bits of the address
.1a2c57	85 9e		sta $089e	                STA MTEMPPTR
.1a2c59	bf 02 f0 1a	lda $1af002,x	                LDA @l GR_BM0_ADDR+2,X  ; Get the high bits of the address
.1a2c5d	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a2c5f	c9 f0 00	cmp #$00f0	                CMP #MAX_VRAM_CPU       ; Check to make sure address is within VRAM
.1a2c62	b0 08		bcs $1a2c6c	                BGE range_err
.1a2c64	c9 b0 00	cmp #$00b0	                CMP #MIN_VRAM_CPU
.1a2c67	90 03		bcc $1a2c6c	                BLT range_err
.1a2c69	28		plp		                PLP
.1a2c6a	fa		plx		                PLX
.1a2c6b	60		rts		            RTS
.1a2c6c					range_err
.1a2c6c	08		php		            PHP
.1a2c6d	c2 20		rep #$20	            REP #$20
.1a2c6f	48		pha		            PHA
.1a2c70	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2c73	5b		tcd		            TCD
.1a2c74	68		pla		            PLA
.1a2c75	28		plp		            PLP
.1a2c76	e2 20		sep #$20	            SEP #$20
.1a2c78	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2c7a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2c7e	c2 20		rep #$20	            REP #$20
.1a2c80	29 ff 00	and #$00ff	            AND #$00FF
.1a2c83	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2c86	e2 20		sep #$20	            SEP #$20
.1a2c88	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2c8b					BITMAP_VRAM
.1a2c8b	da		phx		                PHX
.1a2c8c	08		php		                PHP
.1a2c8d	c2 30		rep #$30	            REP #$30
.1a2c8f	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2c92	b0 17		bcs $1a2cab	                BGE range_err           ; Make sure it's within range
.1a2c94	0a		asl a		                ASL A
.1a2c95	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.1a2c96	aa		tax		                TAX
.1a2c97	bf 08 f0 1a	lda $1af008,x	                LDA @l GR_BM0_VRAM,X    ; Get the low 16-bits of the address
.1a2c9b	85 9e		sta $089e	                STA MTEMPPTR
.1a2c9d	bf 0a f0 1a	lda $1af00a,x	                LDA @l GR_BM0_VRAM+2,X  ; Get the high bits of the address
.1a2ca1	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a2ca3	c9 40 00	cmp #$0040	                CMP #MAX_VRAM_VICKY     ; Check to make sure the address is from $00:0000 - $3F:FFFF
.1a2ca6	b0 03		bcs $1a2cab	                BGE range_err           ; If not, throw a range error
.1a2ca8	28		plp		                PLP
.1a2ca9	fa		plx		                PLX
.1a2caa	60		rts		            RTS
.1a2cab					range_err
.1a2cab	08		php		            PHP
.1a2cac	c2 20		rep #$20	            REP #$20
.1a2cae	48		pha		            PHA
.1a2caf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2cb2	5b		tcd		            TCD
.1a2cb3	68		pla		            PLA
.1a2cb4	28		plp		            PLP
.1a2cb5	e2 20		sep #$20	            SEP #$20
.1a2cb7	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2cb9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2cbd	c2 20		rep #$20	            REP #$20
.1a2cbf	29 ff 00	and #$00ff	            AND #$00FF
.1a2cc2	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2cc5	e2 20		sep #$20	            SEP #$20
.1a2cc7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2cca					S_BITMAP
.1a2cca	08		php		                PHP
.1a2ccb					locals
>0001					L_PLANE         .word ?
>0003					L_VISIBLE       .byte ?
>0004					L_ADDRESS       .dword ?
.1a2ccb	c2 30		rep #$30	            REP #$30
.1a2ccd	3b		tsc		                TSC                         ; Allocate space for the locals on the stack
.1a2cce	38		sec		                SEC
.1a2ccf	e9 07 00	sbc #$0007	                SBC #SIZE(locals)
.1a2cd2	1b		tcs		                TCS
.1a2cd3	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2cd6	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2cd9	c2 20		rep #$20	            REP #$20
.1a2cdb	a5 23		lda $0823	                LDA ARGUMENT1               ; Make sure it's in range
.1a2cdd	c9 02 00	cmp #$0002	                CMP #BM_MAX
.1a2ce0	b0 59		bcs $1a2d3b	                BGE range_err               ; If not, throw an error
.1a2ce2	83 01		sta $01,s	                STA L_PLANE                 ; If so, save it to MARG1
.1a2ce4	e2 20		sep #$20	            SEP #$20
.1a2ce6	a9 2c		lda #$2c	                LDA #','
.1a2ce8	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2ceb	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2cee	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2cf1	a5 23		lda $0823	                LDA ARGUMENT1
.1a2cf3	83 03		sta $03,s	                STA L_VISIBLE
.1a2cf5	a9 2c		lda #$2c	                LDA #','
.1a2cf7	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2cfa	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2cfd	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2d00	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the number back
.1a2d02	0a		asl a		                ASL A                       ; Multiply by 8 to get the offset to the registers
.1a2d03	0a		asl a		                ASL A
.1a2d04	0a		asl a		                ASL A
.1a2d05	aa		tax		                TAX                         ; And save that offset to X
.1a2d06	a3 03		lda $03,s	                LDA L_VISIBLE               ; Check the visible flag
.1a2d08	d0 05		bne $1a2d0f	                BNE is_visible              ; If <> 0, it's visible
.1a2d0a	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the LUT #
.1a2d0c	0a		asl a		                ASL A                       ; Shift it into position for the register
.1a2d0d	80 04		bra $1a2d13	                BRA wr_bm_reg               ; And go to write it
.1a2d0f	a5 23		lda $0823	is_visible      LDA ARGUMENT1               ; Get the LUT #
.1a2d11	38		sec		                SEC
.1a2d12	2a		rol a		                ROL A                       ; And shift it into position, and set enable bit
.1a2d13	9f 00 01 af	sta $af0100,x	wr_bm_reg       STA @l BM0_CONTROL_REG,X    ; Write to the bitmap control register
.1a2d17	c2 20		rep #$20	            REP #$20
.1a2d19	a9 2c 00	lda #$002c	                LDA #','
.1a2d1c	85 37		sta $0837	                STA TARGETTOK
.1a2d1e	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a2d21	b0 37		bcs $1a2d5a	                BCS get_address             ; Yes: parse the address
.1a2d23	c2 20		rep #$20	            REP #$20
.1a2d25	08		php		            PHP
.1a2d26	c2 20		rep #$20	            REP #$20
.1a2d28	a9 00 00	lda #$0000	            LDA #<>VRAM
.1a2d2b	85 23		sta $0823	            STA ARGUMENT1
.1a2d2d	a9 b0 00	lda #$00b0	            LDA #(VRAM >> 16)
.1a2d30	85 25		sta $0825	            STA ARGUMENT1+2
.1a2d32	e2 20		sep #$20	            SEP #$20
.1a2d34	a9 00		lda #$00	            LDA #TYPE_INTEGER
.1a2d36	85 27		sta $0827	            STA ARGUMENT1+4
.1a2d38	28		plp		            PLP
.1a2d39	80 27		bra $1a2d62	                BRA set_address
.1a2d3b					range_err
.1a2d3b	08		php		            PHP
.1a2d3c	c2 20		rep #$20	            REP #$20
.1a2d3e	48		pha		            PHA
.1a2d3f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2d42	5b		tcd		            TCD
.1a2d43	68		pla		            PLA
.1a2d44	28		plp		            PLP
.1a2d45	e2 20		sep #$20	            SEP #$20
.1a2d47	a9 09		lda #$09	            LDA #ERR_RANGE
.1a2d49	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2d4d	c2 20		rep #$20	            REP #$20
.1a2d4f	29 ff 00	and #$00ff	            AND #$00FF
.1a2d52	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2d55	e2 20		sep #$20	            SEP #$20
.1a2d57	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2d5a					get_address
.1a2d5a	c2 20		rep #$20	            REP #$20
.1a2d5c	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a2d5f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2d62					set_address
.1a2d62	c2 20		rep #$20	            REP #$20
.1a2d64	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.1a2d66	0a		asl a		                ASL A                       ; Multiply by four to get the offset to the address variable
.1a2d67	0a		asl a		                ASL A
.1a2d68	aa		tax		                TAX                         ; And put it in X
.1a2d69	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the CPU-space address
.1a2d6b	9f 00 f0 1a	sta $1af000,x	                STA @l GR_BM0_ADDR,X        ; And save it to the correct GR_BM?_ADDR variable
.1a2d6f	9f 08 f0 1a	sta $1af008,x	                STA @l GR_BM0_VRAM,X
.1a2d73	83 04		sta $04,s	                STA L_ADDRESS               ; And L_ADDRESS, temporarily
.1a2d75	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a2d77	9f 02 f0 1a	sta $1af002,x	                STA @l GR_BM0_ADDR+2,X
.1a2d7b	38		sec		                SEC
.1a2d7c	e9 b0 00	sbc #$00b0	                SBC #`VRAM                  ; Rebase the upper half of the address to Vicky memory space
.1a2d7f	9f 0a f0 1a	sta $1af00a,x	                STA @l GR_BM0_VRAM+2,X
.1a2d83	83 06		sta $06,s	                STA L_ADDRESS+2             ; And to L_ADDRESS
.1a2d85	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.1a2d87	0a		asl a		                ASL A                       ; Multiply by eight to get the offset to the registers
.1a2d88	0a		asl a		                ASL A
.1a2d89	0a		asl a		                ASL A
.1a2d8a	aa		tax		                TAX                         ; And put it in X
.1a2d8b	e2 20		sep #$20	            SEP #$20
.1a2d8d	a3 04		lda $04,s	                LDA L_ADDRESS               ; Get the address in Vicky space...
.1a2d8f	9f 01 01 af	sta $af0101,x	                STA @l BM0_START_ADDY_L,X   ; Save it to the Vicky registers
.1a2d93	a3 05		lda $05,s	                LDA L_ADDRESS+1
.1a2d95	9f 02 01 af	sta $af0102,x	                STA @l BM0_START_ADDY_M,X
.1a2d99	a3 06		lda $06,s	                LDA L_ADDRESS+2
.1a2d9b	9f 03 01 af	sta $af0103,x	                STA @l BM0_START_ADDY_H,X
.1a2d9f	a9 00		lda #$00	                LDA #0                      ; Default offset to (0, 0)
.1a2da1	9f 04 01 af	sta $af0104,x	                STA @l BM0_X_OFFSET,X
.1a2da5	9f 05 01 af	sta $af0105,x	                STA @l BM0_Y_OFFSET,X
.1a2da9	c2 30		rep #$30	            REP #$30
.1a2dab	3b		tsc		                TSC                         ; Remove the space for the locals from the stack
.1a2dac	18		clc		                CLC
.1a2dad	69 07 00	adc #$0007	                ADC #SIZE(locals)
.1a2db0	1b		tcs		                TCS
.1a2db1	28		plp		                PLP
.1a2db2	60		rts		            RTS
.1a2db3					bad_address
.1a2db3	08		php		            PHP
.1a2db4	c2 20		rep #$20	            REP #$20
.1a2db6	48		pha		            PHA
.1a2db7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2dba	5b		tcd		            TCD
.1a2dbb	68		pla		            PLA
.1a2dbc	28		plp		            PLP
.1a2dbd	e2 20		sep #$20	            SEP #$20
.1a2dbf	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a2dc1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a2dc5	c2 20		rep #$20	            REP #$20
.1a2dc7	29 ff 00	and #$00ff	            AND #$00FF
.1a2dca	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a2dcd	e2 20		sep #$20	            SEP #$20
.1a2dcf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a2dd2					S_CLRBITMAP
.1a2dd2	08		php		                PHP
.1a2dd3	c2 20		rep #$20	            REP #$20
.1a2dd5	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2dd8	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2ddb	a5 23		lda $0823	                LDA ARGUMENT1
.1a2ddd	20 8b 2c	jsr $1a2c8b	            JSR BITMAP_VRAM
.1a2de0	c2 20		rep #$20	            REP #$20
.1a2de2	a5 9e		lda $089e	                LDA MTEMPPTR                ; Set the start address and the # of pixels to write
.1a2de4	8f 05 04 af	sta $af0405	                STA @lVDMA_DST_ADDY_L
.1a2de8	af 14 f0 1a	lda $1af014	                LDA @lGR_TOTAL_PIXELS       ; Set the size
.1a2dec	8f 08 04 af	sta $af0408	                STA @lVDMA_SIZE_L
.1a2df0	e2 20		sep #$20	            SEP #$20
.1a2df2	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.1a2df4	8f 07 04 af	sta $af0407	                STA @lVDMA_DST_ADDY_H
.1a2df8	af 16 f0 1a	lda $1af016	                LDA @lGR_TOTAL_PIXELS+2
.1a2dfc	8f 0a 04 af	sta $af040a	                STA @lVDMA_SIZE_H
.1a2e00	a9 00		lda #$00	                LDA #0                      ; Set the color to write
.1a2e02	8f 01 04 af	sta $af0401	                STA @lVDMA_BYTE_2_WRITE
.1a2e06	a9 85		lda #$85	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_Start_TRF
.1a2e08	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.1a2e0c	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.1a2e10	30 fa		bmi $1a2e0c	                BMI wait
.1a2e12	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.1a2e14	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.1a2e18	28		plp		done            PLP
.1a2e19	60		rts		            RTS
=$000855				COLOR = MARG1
=$000859				X0 = MARG2
=$00085d				Y0 = MARG3
=$000861				X1 = MARG4
=$000865				Y1 = MARG5
=$000869				DX = MARG6
=$00086d				DY = MARG7
=$000871				ERR = MARG8
=$000875				ERR2 = MARG9
>08dd					SX      .word ?
>08df					SY      .word ?
.1a2e1a					PLOT
.1a2e1a	08		php		                PHP
.1a2e1b	c2 20		rep #$20	            REP #$20
.1a2e1d	a5 5d		lda $085d	                LDA Y0                      ; Get the row
.1a2e1f	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.1a2e23	af 10 f0 1a	lda $1af010	                LDA @lGR_MAX_COLS
.1a2e27	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B          ; Multiply by the number of columns in the pixmap
.1a2e2b	18		clc		                CLC                         ; Add the column
.1a2e2c	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT
.1a2e30	65 59		adc $0859	                ADC X0
.1a2e32	85 0c		sta $080c	                STA SCRATCH
.1a2e34	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.1a2e38	69 00 00	adc #$0000	                ADC #0
.1a2e3b	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH is offset of pixel in the pixmap
.1a2e3d	18		clc		                CLC                         ; Add the address of the first pixel
.1a2e3e	a5 0c		lda $080c	                LDA SCRATCH
.1a2e40	65 9e		adc $089e	                ADC MTEMPPTR
.1a2e42	85 0c		sta $080c	                STA SCRATCH
.1a2e44	a5 0e		lda $080e	                LDA SCRATCH+2
.1a2e46	65 a0		adc $08a0	                ADC MTEMPPTR+2
.1a2e48	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH := pixmap + pixel offset
.1a2e4a	e2 20		sep #$20	            SEP #$20
.1a2e4c	a5 55		lda $0855	                LDA COLOR                   ; Get the color
.1a2e4e	87 0c		sta [$080c]	                STA [SCRATCH]               ; And write the color to the pixel
.1a2e50	28		plp		                PLP
.1a2e51	60		rts		            RTS
.1a2e52					LINE
.1a2e52	c2 20		rep #$20	            REP #$20
.1a2e54	a9 01 00	lda #$0001	                LDA #1                      ; Assume SX = 1
.1a2e57	85 dd		sta $08dd	                STA SX
.1a2e59	38		sec		                SEC                         ; DX := ABS(X1 - X0)
.1a2e5a	a5 61		lda $0861	                LDA X1
.1a2e5c	e5 59		sbc $0859	                SBC X0
.1a2e5e	85 69		sta $0869	                STA DX
.1a2e60	10 0b		bpl $1a2e6d	                BPL abs_Y                   ; If DX < 0 {
.1a2e62	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DX := -DX
.1a2e65	1a		inc a		                INC A
.1a2e66	85 69		sta $0869	                STA DX
.1a2e68	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SX := -1
.1a2e6b	85 dd		sta $08dd	                STA SX                      ; }
.1a2e6d	a9 01 00	lda #$0001	abs_Y           LDA #1                      ; Assume SY = 1
.1a2e70	85 df		sta $08df	                STA SY
.1a2e72	38		sec		                SEC                         ; DY := ABS(Y1 - Y0)
.1a2e73	a5 65		lda $0865	                LDA Y1
.1a2e75	e5 5d		sbc $085d	                SBC Y0
.1a2e77	85 6d		sta $086d	                STA DY
.1a2e79	10 0b		bpl $1a2e86	                BPL calc_ERR                ; If DY < 0 {
.1a2e7b	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DY := -DY
.1a2e7e	1a		inc a		                INC A
.1a2e7f	85 6d		sta $086d	                STA DY
.1a2e81	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SY := -1
.1a2e84	85 df		sta $08df	                STA SY                      ; }
.1a2e86	a5 6d		lda $086d	calc_ERR        LDA DY                      ; (DY < DX)
.1a2e88	c5 69		cmp $0869	                CMP DX
.1a2e8a	b0 04		bcs $1a2e90	                BGE else
.1a2e8c	a5 69		lda $0869	                LDA DX                      ; TRUE CASE: ERR := DX
.1a2e8e	80 06		bra $1a2e96	                BRA shiftERR
.1a2e90	a5 6d		lda $086d	else            LDA DY                      ; FALSE CASE: ERR := -DY
.1a2e92	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a2e95	1a		inc a		                INC A
.1a2e96	48		pha		shiftERR        PHA
.1a2e97	0a		asl a		                ASL A
.1a2e98	68		pla		                PLA
.1a2e99	6a		ror a		                ROR A                       ; ERR := ERR / 2
.1a2e9a	85 71		sta $0871	                STA ERR
.1a2e9c					loop
.1a2e9c	20 1a 2e	jsr $1a2e1a	            JSR PLOT
.1a2e9f	a5 59		lda $0859	                LDA X0                      ; break if X0=X1 and Y0=Y1
.1a2ea1	c5 61		cmp $0861	                CMP X1
.1a2ea3	d0 06		bne $1a2eab	                BNE calc_ERR2
.1a2ea5	a5 5d		lda $085d	                LDA Y0
.1a2ea7	c5 65		cmp $0865	                CMP Y1
.1a2ea9	f0 36		beq $1a2ee1	                BEQ done
.1a2eab	a5 71		lda $0871	calc_ERR2       LDA ERR                     ; ERR2 := ERR
.1a2ead	85 75		sta $0875	                STA ERR2
.1a2eaf	a5 69		lda $0869	                LDA DX                      ; if (ERR2 > -DX) {
.1a2eb1	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a2eb4	1a		inc a		                INC A
.1a2eb5	c5 75		cmp $0875	                CMP ERR2
.1a2eb7	10 10		bpl $1a2ec9	                BPL check_DY
.1a2eb9	f0 0e		beq $1a2ec9	                BEQ check_DY
.1a2ebb	38		sec		                SEC                         ; ERR -= DY
.1a2ebc	a5 71		lda $0871	                LDA ERR
.1a2ebe	e5 6d		sbc $086d	                SBC DY
.1a2ec0	85 71		sta $0871	                STA ERR
.1a2ec2	18		clc		                CLC                         ; X0 += SX
.1a2ec3	a5 59		lda $0859	                LDA X0
.1a2ec5	65 dd		adc $08dd	                ADC SX
.1a2ec7	85 59		sta $0859	                STA X0                      ; }
.1a2ec9	a5 75		lda $0875	check_DY        LDA ERR2                    ; if (ERR2 < DY) {
.1a2ecb	c5 6d		cmp $086d	                CMP DY
.1a2ecd	10 cd		bpl $1a2e9c	                BPL loop
.1a2ecf	f0 cb		beq $1a2e9c	                BEQ loop
.1a2ed1	18		clc		                CLC                         ; ERR += DX
.1a2ed2	a5 71		lda $0871	                LDA ERR
.1a2ed4	65 69		adc $0869	                ADC DX
.1a2ed6	85 71		sta $0871	                STA ERR
.1a2ed8	18		clc		                CLC                         ; Y0 += SY
.1a2ed9	a5 5d		lda $085d	                LDA Y0
.1a2edb	65 df		adc $08df	                ADC SY
.1a2edd	85 5d		sta $085d	                STA Y0                      ; }
.1a2edf	80 bb		bra $1a2e9c	                BRA loop                    ; }
.1a2ee1					done
.1a2ee1	60		rts		            RTS
.1a2ee2					S_PLOT
.1a2ee2	08		php		                PHP
.1a2ee3					locals
>0001					L_PLANE         .word ?
>0003					L_X             .word ?
>0005					L_Y             .word ?
.1a2ee3	c2 20		rep #$20	            REP #$20
.1a2ee5	3b		tsc		            TSC
.1a2ee6	38		sec		            SEC
.1a2ee7	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a2eea	1b		tcs		            TCS
.1a2eeb	08		php		            PHP
.1a2eec	c2 20		rep #$20	            REP #$20
.1a2eee	48		pha		            PHA
.1a2eef	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2ef2	5b		tcd		            TCD
.1a2ef3	68		pla		            PLA
.1a2ef4	28		plp		            PLP
.1a2ef5	08		php		            PHP
.1a2ef6	e2 20		sep #$20	            SEP #$20
.1a2ef8	48		pha		            PHA
.1a2ef9	a9 00		lda #$00	            LDA #0
.1a2efb	48		pha		            PHA
.1a2efc	ab		plb		            PLB
.1a2efd	68		pla		            PLA
.1a2efe	28		plp		            PLP
.1a2eff	c2 30		rep #$30	            REP #$30
.1a2f01	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2f04	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2f07	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a2f09	a9 2c 00	lda #$002c	                LDA #','
.1a2f0c	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2f0f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2f12	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2f15	a5 23		lda $0823	                LDA ARGUMENT1
.1a2f17	83 03		sta $03,s	                STA L_X                     ; Save it to X
.1a2f19	a9 2c 00	lda #$002c	                LDA #','
.1a2f1c	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2f1f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2f22	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2f25	a5 23		lda $0823	                LDA ARGUMENT1
.1a2f27	83 05		sta $05,s	                STA L_Y                     ; Save it to Y
.1a2f29	a9 2c 00	lda #$002c	                LDA #','
.1a2f2c	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2f2f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2f32	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2f35	a5 23		lda $0823	                LDA ARGUMENT1
.1a2f37	85 55		sta $0855	                STA COLOR                   ; Save it to MARG1
.1a2f39	a3 03		lda $03,s	                LDA L_X                     ; Set the (X0, Y0) coordinates
.1a2f3b	85 59		sta $0859	                STA X0
.1a2f3d	a3 05		lda $05,s	                LDA L_Y
.1a2f3f	85 5d		sta $085d	                STA Y0
.1a2f41	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a2f43	20 47 2c	jsr $1a2c47	            JSR BITMAP_SRAM
.1a2f46	20 1a 2e	jsr $1a2e1a	            JSR PLOT
.1a2f49	c2 20		rep #$20	            REP #$20
.1a2f4b	3b		tsc		            TSC
.1a2f4c	18		clc		            CLC
.1a2f4d	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a2f50	1b		tcs		            TCS
.1a2f51	28		plp		                PLP
.1a2f52	60		rts		            RTS
.1a2f53					S_LINE
.1a2f53	08		php		                PHP
.1a2f54					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
.1a2f54	c2 20		rep #$20	            REP #$20
.1a2f56	3b		tsc		            TSC
.1a2f57	38		sec		            SEC
.1a2f58	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.1a2f5b	1b		tcs		            TCS
.1a2f5c	08		php		            PHP
.1a2f5d	c2 20		rep #$20	            REP #$20
.1a2f5f	48		pha		            PHA
.1a2f60	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2f63	5b		tcd		            TCD
.1a2f64	68		pla		            PLA
.1a2f65	28		plp		            PLP
.1a2f66	08		php		            PHP
.1a2f67	e2 20		sep #$20	            SEP #$20
.1a2f69	48		pha		            PHA
.1a2f6a	a9 00		lda #$00	            LDA #0
.1a2f6c	48		pha		            PHA
.1a2f6d	ab		plb		            PLB
.1a2f6e	68		pla		            PLA
.1a2f6f	28		plp		            PLP
.1a2f70	c2 30		rep #$30	            REP #$30
.1a2f72	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2f75	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2f78	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a2f7a	a9 2c 00	lda #$002c	                LDA #','
.1a2f7d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2f80	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2f83	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2f86	a5 23		lda $0823	                LDA ARGUMENT1
.1a2f88	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.1a2f8a	a9 2c 00	lda #$002c	                LDA #','
.1a2f8d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2f90	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2f93	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2f96	a5 23		lda $0823	                LDA ARGUMENT1
.1a2f98	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.1a2f9a	a9 2c 00	lda #$002c	                LDA #','
.1a2f9d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2fa0	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2fa3	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2fa6	a5 23		lda $0823	                LDA ARGUMENT1
.1a2fa8	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.1a2faa	a9 2c 00	lda #$002c	                LDA #','
.1a2fad	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2fb0	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2fb3	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a2fb6	a5 23		lda $0823	                LDA ARGUMENT1
.1a2fb8	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.1a2fba	a9 2c 00	lda #$002c	                LDA #','
.1a2fbd	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a2fc0	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a2fc3	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a2fc6	a5 23		lda $0823	                LDA ARGUMENT1
.1a2fc8	85 55		sta $0855	                STA COLOR                   ; Save it to COLOR
.1a2fca	a3 03		lda $03,s	                LDA L_X0                    ; Set the (X0, Y0) coordinates
.1a2fcc	85 59		sta $0859	                STA X0
.1a2fce	a3 05		lda $05,s	                LDA L_Y0
.1a2fd0	85 5d		sta $085d	                STA Y0
.1a2fd2	a3 07		lda $07,s	                LDA L_X1                    ; Set the (X1, Y1) coordinates
.1a2fd4	85 61		sta $0861	                STA X1
.1a2fd6	a3 09		lda $09,s	                LDA L_Y1
.1a2fd8	85 65		sta $0865	                STA Y1
.1a2fda	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a2fdc	20 47 2c	jsr $1a2c47	            JSR BITMAP_SRAM
.1a2fdf	20 52 2e	jsr $1a2e52	            JSR LINE
.1a2fe2					done
.1a2fe2	c2 20		rep #$20	            REP #$20
.1a2fe4	3b		tsc		            TSC
.1a2fe5	18		clc		            CLC
.1a2fe6	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.1a2fe9	1b		tcs		            TCS
.1a2fea	28		plp		                PLP
.1a2feb	60		rts		            RTS
.1a2fec					S_FILL
.1a2fec	08		php		                PHP
.1a2fed					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
>000b					L_COLOR         .word ?
.1a2fed	c2 20		rep #$20	            REP #$20
.1a2fef	3b		tsc		            TSC
.1a2ff0	38		sec		            SEC
.1a2ff1	e9 0c 00	sbc #$000c	            SBC #SIZE(locals)
.1a2ff4	1b		tcs		            TCS
.1a2ff5	08		php		            PHP
.1a2ff6	c2 20		rep #$20	            REP #$20
.1a2ff8	48		pha		            PHA
.1a2ff9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a2ffc	5b		tcd		            TCD
.1a2ffd	68		pla		            PLA
.1a2ffe	28		plp		            PLP
.1a2fff	08		php		            PHP
.1a3000	e2 20		sep #$20	            SEP #$20
.1a3002	48		pha		            PHA
.1a3003	a9 00		lda #$00	            LDA #0
.1a3005	48		pha		            PHA
.1a3006	ab		plb		            PLB
.1a3007	68		pla		            PLA
.1a3008	28		plp		            PLP
.1a3009	c2 30		rep #$30	            REP #$30
.1a300b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a300e	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3011	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.1a3013	a9 2c 00	lda #$002c	                LDA #','
.1a3016	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3019	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a301c	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a301f	a5 23		lda $0823	                LDA ARGUMENT1
.1a3021	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.1a3023	a9 2c 00	lda #$002c	                LDA #','
.1a3026	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3029	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a302c	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a302f	a5 23		lda $0823	                LDA ARGUMENT1
.1a3031	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.1a3033	a9 2c 00	lda #$002c	                LDA #','
.1a3036	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3039	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a303c	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a303f	a5 23		lda $0823	                LDA ARGUMENT1
.1a3041	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.1a3043	a9 2c 00	lda #$002c	                LDA #','
.1a3046	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3049	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a304c	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a304f	a5 23		lda $0823	                LDA ARGUMENT1
.1a3051	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.1a3053	a9 2c 00	lda #$002c	                LDA #','
.1a3056	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3059	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a305c	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a305f	a5 23		lda $0823	                LDA ARGUMENT1
.1a3061	83 0b		sta $0b,s	                STA L_COLOR                 ; Save it to COLOR
.1a3063	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.1a3065	20 8b 2c	jsr $1a2c8b	            JSR BITMAP_VRAM
.1a3068	a9 07 00	lda #$0007	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_1D_2D
.1a306b	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a306f	c2 20		rep #$20	            REP #$20
.1a3071	a3 05		lda $05,s	                LDA L_Y0                    ; Get the row
.1a3073	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a3077	af 10 f0 1a	lda $1af010	                LDA @l GR_MAX_COLS
.1a307b	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B         ; Multiply by the number of columns in the pixmap
.1a307f	18		clc		                CLC                         ; Add the column
.1a3080	af 04 01 00	lda $000104	                LDA @l M0_RESULT
.1a3084	63 03		adc $03,s	                ADC L_X0
.1a3086	85 0c		sta $080c	                STA SCRATCH
.1a3088	e2 20		sep #$20	            SEP #$20
.1a308a	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.1a308e	69 00		adc #$00	                ADC #0
.1a3090	85 0e		sta $080e	                STA SCRATCH+2
.1a3092	c2 20		rep #$20	            REP #$20
.1a3094	18		clc		                CLC                         ; Set the destination address
.1a3095	a5 9e		lda $089e	                LDA MTEMPPTR
.1a3097	65 0c		adc $080c	                ADC SCRATCH
.1a3099	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.1a309d	e2 20		sep #$20	            SEP #$20
.1a309f	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.1a30a1	65 0e		adc $080e	                ADC SCRATCH+2
.1a30a3	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H
.1a30a7	c2 20		rep #$20	            REP #$20
.1a30a9	38		sec		                SEC                         ; Set the width of the FILL operation
.1a30aa	a3 07		lda $07,s	                LDA L_X1
.1a30ac	e3 03		sbc $03,s	                SBC L_X0
.1a30ae	85 0c		sta $080c	                STA SCRATCH
.1a30b0	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a30b4	38		sec		                SEC
.1a30b5	af 10 f0 1a	lda $1af010	                LDA @l GR_MAX_COLS
.1a30b9	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L    ; And the destination stride
.1a30bd	38		sec		                SEC                         ; Set the height of the FILL operation
.1a30be	a3 09		lda $09,s	                LDA L_Y1
.1a30c0	e3 05		sbc $05,s	                SBC L_Y0
.1a30c2	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a30c6	e2 20		sep #$20	            SEP #$20
.1a30c8	a3 0b		lda $0b,s	                LDA L_COLOR                 ; Set the color to write
.1a30ca	8f 01 04 af	sta $af0401	                STA @l VDMA_BYTE_2_WRITE
.1a30ce	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.1a30d2	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF
.1a30d4	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a30d8	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.1a30dc	30 fa		bmi $1a30d8	                BMI wait
.1a30de	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.1a30e0	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a30e4					done
.1a30e4	c2 20		rep #$20	            REP #$20
.1a30e6	3b		tsc		            TSC
.1a30e7	18		clc		            CLC
.1a30e8	69 0c 00	adc #$000c	            ADC #SIZE(locals)
.1a30eb	1b		tcs		            TCS
.1a30ec	28		plp		                PLP
.1a30ed	60		rts		            RTS
.1a30ee					SPADDR
.1a30ee	08		php		                PHP
.1a30ef	c2 20		rep #$20	            REP #$20
.1a30f1	c9 40 00	cmp #$0040	                CMP #SP_MAX
.1a30f4	b0 13		bcs $1a3109	                BGE error
.1a30f6	0a		asl a		                ASL A                       ; Multiply it by 8 (the size of s sprite block)
.1a30f7	0a		asl a		                ASL A
.1a30f8	0a		asl a		                ASL A
.1a30f9	18		clc		                CLC                         ; Add it to the address of the first
.1a30fa	69 00 0c	adc #$0c00	                ADC #<>SP00_CONTROL_REG     ; sprite block
.1a30fd	85 9e		sta $089e	                STA MTEMPPTR
.1a30ff	a9 af 00	lda #$00af	                LDA #`SP00_CONTROL_REG
.1a3102	69 00 00	adc #$0000	                ADC #0
.1a3105	85 a0		sta $08a0	                STA MTEMPPTR+2              ; And save that to MTEMPPTR
.1a3107	28		plp		                PLP
.1a3108	60		rts		            RTS
.1a3109					error
.1a3109	08		php		            PHP
.1a310a	c2 20		rep #$20	            REP #$20
.1a310c	48		pha		            PHA
.1a310d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3110	5b		tcd		            TCD
.1a3111	68		pla		            PLA
.1a3112	28		plp		            PLP
.1a3113	e2 20		sep #$20	            SEP #$20
.1a3115	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3117	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a311b	c2 20		rep #$20	            REP #$20
.1a311d	29 ff 00	and #$00ff	            AND #$00FF
.1a3120	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3123	e2 20		sep #$20	            SEP #$20
.1a3125	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3128					S_SPRITE
.1a3128	08		php		                PHP
.1a3129					locals
>0001					L_SPRITE        .word ?
>0003					L_LUT           .byte ?
.1a3129	c2 20		rep #$20	            REP #$20
.1a312b	3b		tsc		            TSC
.1a312c	38		sec		            SEC
.1a312d	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.1a3130	1b		tcs		            TCS
.1a3131	c2 30		rep #$30	            REP #$30
.1a3133	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3136	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3139	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a313b	a9 2c 00	lda #$002c	                LDA #','
.1a313e	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3141	e2 20		sep #$20	            SEP #$20
.1a3143	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3146	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3149	a5 23		lda $0823	                LDA ARGUMENT1
.1a314b	c9 08		cmp #$08	                CMP #GR_MAX_LUT             ; Check that it's in range
.1a314d	b0 56		bcs $1a31a5	                BGE error                   ; If not: throw an error
.1a314f	83 03		sta $03,s	                STA L_LUT                   ; Save it as lut
.1a3151	a9 2c		lda #$2c	                LDA #','
.1a3153	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3156	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3159	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a315c	c2 20		rep #$20	            REP #$20
.1a315e	38		sec		                SEC                         ; Adjust address to be in Vicky's space
.1a315f	a5 23		lda $0823	                LDA ARGUMENT1
.1a3161	e9 00 00	sbc #$0000	                SBC #<>VRAM
.1a3164	85 23		sta $0823	                STA ARGUMENT1
.1a3166	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3168	e9 b0 00	sbc #$00b0	                SBC #`VRAM
.1a316b	85 25		sta $0825	                STA ARGUMENT1+2
.1a316d	30 36		bmi $1a31a5	                BMI error                   ; If negative, throw an error
.1a316f	c2 20		rep #$20	            REP #$20
.1a3171	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a3173	aa		tax		                TAX
.1a3174	20 ee 30	jsr $1a30ee	            JSR SPADDR
.1a3177	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the lower word of the address
.1a3179	a0 01 00	ldy #$0001	                LDY #SP_ADDR
.1a317c	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a317e	e2 20		sep #$20	            SEP #$20
.1a3180	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3182	c8		iny		                INY
.1a3183	c8		iny		                INY
.1a3184	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save the upper byte of the address
.1a3186	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the sprite control register
.1a318a	29 f1		and #$f1	                AND #%11110001              ; Filter off the current LUT
.1a318c	85 0c		sta $080c	                STA SCRATCH
.1a318e	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT back
.1a3190	0a		asl a		                ASL A                       ; Sift it into the LUT position
.1a3191	29 0e		and #$0e	                AND #%00001110              ; Make sure we don't have anything wrong there
.1a3193	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with what's in the sprite's control
.1a3195	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the register's bits
.1a3197	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And the shadow register
.1a319b					done
.1a319b	c2 20		rep #$20	            REP #$20
.1a319d	3b		tsc		            TSC
.1a319e	18		clc		            CLC
.1a319f	69 03 00	adc #$0003	            ADC #SIZE(locals)
.1a31a2	1b		tcs		            TCS
.1a31a3	28		plp		                PLP
.1a31a4	60		rts		            RTS
.1a31a5					error
.1a31a5	08		php		            PHP
.1a31a6	c2 20		rep #$20	            REP #$20
.1a31a8	48		pha		            PHA
.1a31a9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a31ac	5b		tcd		            TCD
.1a31ad	68		pla		            PLA
.1a31ae	28		plp		            PLP
.1a31af	e2 20		sep #$20	            SEP #$20
.1a31b1	a9 09		lda #$09	            LDA #ERR_RANGE
.1a31b3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a31b7	c2 20		rep #$20	            REP #$20
.1a31b9	29 ff 00	and #$00ff	            AND #$00FF
.1a31bc	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a31bf	e2 20		sep #$20	            SEP #$20
.1a31c1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a31c4					S_SPRITEAT
.1a31c4	08		php		                PHP
.1a31c5					locals
>0001					L_SPRITE        .word ?
>0003					L_X             .word ?
.1a31c5	c2 20		rep #$20	            REP #$20
.1a31c7	3b		tsc		            TSC
.1a31c8	38		sec		            SEC
.1a31c9	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a31cc	1b		tcs		            TCS
.1a31cd	c2 30		rep #$30	            REP #$30
.1a31cf	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a31d2	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a31d5	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a31d7	a9 2c 00	lda #$002c	                LDA #','
.1a31da	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a31dd	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a31e0	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a31e3	a5 23		lda $0823	                LDA ARGUMENT1
.1a31e5	83 03		sta $03,s	                STA L_X                     ; Save it as X
.1a31e7	a9 2c 00	lda #$002c	                LDA #','
.1a31ea	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a31ed	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a31f0	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a31f3	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a31f5	20 ee 30	jsr $1a30ee	            JSR SPADDR
.1a31f8	a3 03		lda $03,s	                LDA L_X                     ; Get the X coordinate
.1a31fa	a0 04 00	ldy #$0004	                LDY #SP_X_COORD             ; Save the X coordinate for the sprite
.1a31fd	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a31ff	a5 23		lda $0823	                LDA ARGUMENT1
.1a3201	a0 06 00	ldy #$0006	                LDY #SP_Y_COORD             ; Save the Y coordinate for the sprite
.1a3204	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3206					done
.1a3206	c2 20		rep #$20	            REP #$20
.1a3208	3b		tsc		            TSC
.1a3209	18		clc		            CLC
.1a320a	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a320d	1b		tcs		            TCS
.1a320e	28		plp		                PLP
.1a320f	60		rts		            RTS
.1a3210					S_SPRITESHOW
.1a3210	08		php		                PHP
.1a3211					locals
>0001					L_SPRITE        .word ?
>0003					L_VISIBLE       .byte ?
.1a3211	c2 20		rep #$20	            REP #$20
.1a3213	3b		tsc		            TSC
.1a3214	38		sec		            SEC
.1a3215	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.1a3218	1b		tcs		            TCS
.1a3219	c2 30		rep #$30	            REP #$30
.1a321b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a321e	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3221	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.1a3223	a9 2c 00	lda #$002c	                LDA #','
.1a3226	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3229	e2 20		sep #$20	            SEP #$20
.1a322b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a322e	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3231	a5 23		lda $0823	                LDA ARGUMENT1
.1a3233	d0 04		bne $1a3239	                BNE is_visible
.1a3235	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 0 (not visible)
.1a3237	80 04		bra $1a323d	                BRA chk_layer
.1a3239	a9 01		lda #$01	is_visible      LDA #1
.1a323b	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 1 (visible)
.1a323d	a9 2c		lda #$2c	chk_layer       LDA #','
.1a323f	85 37		sta $0837	                STA TARGETTOK
.1a3241	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a3244	b0 20		bcs $1a3266	                BCS get_layer               ; Yes: get the layer
.1a3246					no_layer
.1a3246	c2 30		rep #$30	            REP #$30
.1a3248	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a324a	aa		tax		                TAX
.1a324b	20 ee 30	jsr $1a30ee	            JSR SPADDR
.1a324e	e2 20		sep #$20	            SEP #$20
.1a3250	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.1a3254	29 fe		and #$fe	                AND #$FE                    ; Filter out the enable bit
.1a3256	85 0c		sta $080c	                STA SCRATCH
.1a3258	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.1a325a	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.1a325c	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.1a325e	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And save it
.1a3262	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; ... and to Vicky
.1a3264	80 36		bra $1a329c	                BRA done
.1a3266					get_layer
.1a3266	c2 30		rep #$30	            REP #$30
.1a3268	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a326b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a326e	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3271	a5 23		lda $0823	                LDA ARGUMENT1
.1a3273	c9 08 00	cmp #$0008	                CMP #8                      ; Make sure it's in range
.1a3276	b0 2e		bcs $1a32a6	                BGE error                   ; If not, throw an out of range error
.1a3278	0a		asl a		                ASL A                       ; If it's ok... shift it into position
.1a3279	0a		asl a		                ASL A
.1a327a	0a		asl a		                ASL A
.1a327b	0a		asl a		                ASL A
.1a327c	85 0c		sta $080c	                STA SCRATCH                 ; And save it in SCRATCH
.1a327e	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.1a3280	aa		tax		                TAX
.1a3281	20 ee 30	jsr $1a30ee	            JSR SPADDR
.1a3284	e2 20		sep #$20	            SEP #$20
.1a3286	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.1a3288	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.1a328a	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.1a328c	85 0c		sta $080c	                STA SCRATCH
.1a328e	bf 18 f0 1a	lda $1af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.1a3292	29 8e		and #$8e	                AND #%10001110              ; Filter out the enable and layer bits
.1a3294	05 0c		ora $080c	                ORA SCRATCH                 ; Combine with the provided layer and enable
.1a3296	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the bits in Vicky
.1a3298	9f 18 f0 1a	sta $1af018,x	                STA @l GS_SP_CONTROL,X      ; And to the shadow registers
.1a329c					done
.1a329c	c2 20		rep #$20	            REP #$20
.1a329e	3b		tsc		            TSC
.1a329f	18		clc		            CLC
.1a32a0	69 03 00	adc #$0003	            ADC #SIZE(locals)
.1a32a3	1b		tcs		            TCS
.1a32a4	28		plp		                PLP
.1a32a5	60		rts		            RTS
.1a32a6					error
.1a32a6	08		php		            PHP
.1a32a7	c2 20		rep #$20	            REP #$20
.1a32a9	48		pha		            PHA
.1a32aa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a32ad	5b		tcd		            TCD
.1a32ae	68		pla		            PLA
.1a32af	28		plp		            PLP
.1a32b0	e2 20		sep #$20	            SEP #$20
.1a32b2	a9 09		lda #$09	            LDA #ERR_RANGE
.1a32b4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a32b8	c2 20		rep #$20	            REP #$20
.1a32ba	29 ff 00	and #$00ff	            AND #$00FF
.1a32bd	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a32c0	e2 20		sep #$20	            SEP #$20
.1a32c2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a32c5					TILESET_ADDR
.1a32c5	08		php		                PHP
.1a32c6	c2 20		rep #$20	            REP #$20
.1a32c8	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.1a32cb	b0 19		bcs $1a32e6	                BGE out_of_range            ; If not, throw a range error
.1a32cd	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.1a32d0	a9 04 00	lda #$0004	                LDA #TILESET_REG_SIZE       ; Multiply it by the number of bytes in a tile set register set
.1a32d3	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.1a32d6	18		clc		                CLC                         ; Add to TILESET0_ADDY_L to get the final address
.1a32d7	ad 04 01	lda $0104	                LDA @w M0_RESULT
.1a32da	69 80 02	adc #$0280	                ADC #<>TILESET0_ADDY_L
.1a32dd	85 9e		sta $089e	                STA MTEMPPTR
.1a32df	a9 af 00	lda #$00af	                LDA #`TILESET0_ADDY_L
.1a32e2	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a32e4	28		plp		                PLP
.1a32e5	60		rts		            RTS
.1a32e6					out_of_range
.1a32e6	08		php		            PHP
.1a32e7	c2 20		rep #$20	            REP #$20
.1a32e9	48		pha		            PHA
.1a32ea	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a32ed	5b		tcd		            TCD
.1a32ee	68		pla		            PLA
.1a32ef	28		plp		            PLP
.1a32f0	e2 20		sep #$20	            SEP #$20
.1a32f2	a9 09		lda #$09	            LDA #ERR_RANGE
.1a32f4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a32f8	c2 20		rep #$20	            REP #$20
.1a32fa	29 ff 00	and #$00ff	            AND #$00FF
.1a32fd	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3300	e2 20		sep #$20	            SEP #$20
.1a3302	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3305					TILEMAP_ADDR
.1a3305	08		php		                PHP
.1a3306	c2 20		rep #$20	            REP #$20
.1a3308	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.1a330b	b0 19		bcs $1a3326	                BGE out_of_range            ; If not, throw a range error
.1a330d	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.1a3310	a9 0c 00	lda #$000c	                LDA #TILEMAP_REG_SIZE       ; Multiply it by the number of bytes in a tile map register set
.1a3313	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.1a3316	18		clc		                CLC
.1a3317	ad 04 01	lda $0104	                LDA @w M0_RESULT            ; Add to TL0_CONTROL_REG to get the final address
.1a331a	69 00 02	adc #$0200	                ADC #<>TL0_CONTROL_REG
.1a331d	85 9e		sta $089e	                STA MTEMPPTR
.1a331f	a9 af 00	lda #$00af	                LDA #`TL0_CONTROL_REG
.1a3322	85 a0		sta $08a0	                STA MTEMPPTR+2
.1a3324	28		plp		                PLP
.1a3325	60		rts		            RTS
.1a3326					out_of_range
.1a3326	08		php		            PHP
.1a3327	c2 20		rep #$20	            REP #$20
.1a3329	48		pha		            PHA
.1a332a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a332d	5b		tcd		            TCD
.1a332e	68		pla		            PLA
.1a332f	28		plp		            PLP
.1a3330	e2 20		sep #$20	            SEP #$20
.1a3332	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3334	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3338	c2 20		rep #$20	            REP #$20
.1a333a	29 ff 00	and #$00ff	            AND #$00FF
.1a333d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3340	e2 20		sep #$20	            SEP #$20
.1a3342	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3345					S_TILESET
.1a3345	08		php		                PHP
.1a3346					locals
>0001					L_TILENUM       .word ?
>0003					L_LUT           .word ?
>0005					L_IS_SQUARE     .word ?
.1a3346	c2 20		rep #$20	            REP #$20
.1a3348	3b		tsc		            TSC
.1a3349	38		sec		            SEC
.1a334a	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a334d	1b		tcs		            TCS
.1a334e	c2 20		rep #$20	            REP #$20
.1a3350	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3353	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3356	a5 23		lda $0823	                LDA ARGUMENT1
.1a3358	83 01		sta $01,s	                STA L_TILENUM               ; Save it as the tile set/map number
.1a335a	a9 2c 00	lda #$002c	                LDA #','
.1a335d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3360	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3363	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3366	a5 23		lda $0823	                LDA ARGUMENT1
.1a3368	83 03		sta $03,s	                STA L_LUT                   ; Save it as LUT
.1a336a	a9 2c 00	lda #$002c	                LDA #','
.1a336d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3370	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3373	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3376	a5 23		lda $0823	                LDA ARGUMENT1
.1a3378	83 05		sta $05,s	                STA L_IS_SQUARE             ; Save it as IS_SQUARE
.1a337a	a9 2c 00	lda #$002c	                LDA #','
.1a337d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3380	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3383	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3386	a3 01		lda $01,s	                LDA L_TILENUM
.1a3388	20 c5 32	jsr $1a32c5	            JSR TILESET_ADDR
.1a338b	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the bitmap address - the address of the start of VRAM
.1a338d	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And save it to the registers
.1a338f	e2 20		sep #$20	            SEP #$20
.1a3391	38		sec		                SEC
.1a3392	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3394	e9 b0		sbc #$b0	                SBC #`VRAM
.1a3396	a0 02 00	ldy #$0002	                LDY #TILESET_ADDY_H
.1a3399	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a339b	a3 05		lda $05,s	                LDA L_IS_SQUARE             ; Check if is_square == 0?
.1a339d	d0 0d		bne $1a33ac	                BNE is_square
.1a339f					not_square
.1a339f	e2 20		sep #$20	            SEP #$20
.1a33a1	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.1a33a3	29 07		and #$07	                AND #$07                    ; Force it to be in range
.1a33a5	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.1a33a8	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.1a33aa	80 0d		bra $1a33b9	                BRA done
.1a33ac					is_square
.1a33ac	e2 20		sep #$20	            SEP #$20
.1a33ae	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.1a33b0	29 07		and #$07	                AND #$07                    ; Force it to be in range
.1a33b2	09 08		ora #$08	                ORA #TILESET_SQUARE_256     ; Turn on the 256x256 flag
.1a33b4	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.1a33b7	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.1a33b9					done
.1a33b9	c2 20		rep #$20	            REP #$20
.1a33bb	3b		tsc		            TSC
.1a33bc	18		clc		            CLC
.1a33bd	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a33c0	1b		tcs		            TCS
.1a33c1	28		plp		                PLP
.1a33c2	60		rts		            RTS
.1a33c3					S_TILEMAP
.1a33c3	08		php		                PHP
.1a33c4					locals
>0001					L_TILENUM       .word ?
>0003					L_WIDTH         .word ?
>0005					L_HEIGHT        .word ?
.1a33c4	c2 20		rep #$20	            REP #$20
.1a33c6	3b		tsc		            TSC
.1a33c7	38		sec		            SEC
.1a33c8	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.1a33cb	1b		tcs		            TCS
.1a33cc	c2 20		rep #$20	            REP #$20
.1a33ce	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a33d1	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a33d4	a5 23		lda $0823	                LDA ARGUMENT1
.1a33d6	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a33d8	a9 2c 00	lda #$002c	                LDA #','
.1a33db	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a33de	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a33e1	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a33e4	a5 23		lda $0823	                LDA ARGUMENT1
.1a33e6	83 03		sta $03,s	                STA L_WIDTH                 ; Save it as WIDTH
.1a33e8	a9 2c 00	lda #$002c	                LDA #','
.1a33eb	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a33ee	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a33f1	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a33f4	a5 23		lda $0823	                LDA ARGUMENT1
.1a33f6	83 05		sta $05,s	                STA L_HEIGHT                ; Save it as HEIGHT
.1a33f8	a9 2c 00	lda #$002c	                LDA #','
.1a33fb	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a33fe	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3401	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3404	a3 01		lda $01,s	                LDA L_TILENUM
.1a3406	20 05 33	jsr $1a3305	            JSR TILEMAP_ADDR
.1a3409	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the map address - the address of the start of VRAM
.1a340b	a0 01 00	ldy #$0001	                LDY #TILEMAP_START_ADDY
.1a340e	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; And save it to the registers
.1a3410	e2 20		sep #$20	            SEP #$20
.1a3412	38		sec		                SEC
.1a3413	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3415	e9 b0		sbc #$b0	                SBC #`VRAM
.1a3417	c8		iny		                INY
.1a3418	c8		iny		                INY
.1a3419	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a341b	c2 20		rep #$20	            REP #$20
.1a341d	a3 03		lda $03,s	                LDA L_WIDTH                 ; Set the width
.1a341f	a0 04 00	ldy #$0004	                LDY #TILEMAP_TOTAL_X
.1a3422	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a3424	a3 05		lda $05,s	                LDA L_HEIGHT                ; Set the height
.1a3426	a0 06 00	ldy #$0006	                LDY #TILEMAP_TOTAL_Y
.1a3429	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a342b					done
.1a342b	c2 20		rep #$20	            REP #$20
.1a342d	3b		tsc		            TSC
.1a342e	18		clc		            CLC
.1a342f	69 06 00	adc #$0006	            ADC #SIZE(locals)
.1a3432	1b		tcs		            TCS
.1a3433	28		plp		                PLP
.1a3434	60		rts		            RTS
.1a3435					S_TILESHOW
.1a3435	08		php		                PHP
.1a3436					locals
>0001					L_TILENUM       .word ?
.1a3436	c2 20		rep #$20	            REP #$20
.1a3438	f4 00 00	pea #$0000	            PEA #0
.1a343b	c2 20		rep #$20	            REP #$20
.1a343d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3440	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3443	a5 23		lda $0823	                LDA ARGUMENT1
.1a3445	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a3447	a9 2c 00	lda #$002c	                LDA #','
.1a344a	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a344d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3450	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3453	a3 01		lda $01,s	                LDA L_TILENUM
.1a3455	20 05 33	jsr $1a3305	            JSR TILEMAP_ADDR
.1a3458	a5 23		lda $0823	                LDA ARGUMENT1               ; CHeck the visible parameter
.1a345a	d0 06		bne $1a3462	                BNE is_visible              ; If it's <> 0, make it visible
.1a345c	e2 20		sep #$20	            SEP #$20
.1a345e	a9 00		lda #$00	                LDA #0                      ; Control value for invisible
.1a3460	80 04		bra $1a3466	                BRA set_control
.1a3462					is_visible
.1a3462	e2 20		sep #$20	            SEP #$20
.1a3464	a9 01		lda #$01	                LDA #TILEMAP_VISIBLE        ; Control value for visible
.1a3466					set_control
.1a3466	e2 20		sep #$20	            SEP #$20
.1a3468	a0 00 00	ldy #$0000	                LDY #TILEMAP_CONTROL        ; Set the control register
.1a346b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a346d					done
.1a346d	c2 20		rep #$20	            REP #$20
.1a346f	68		pla		            PLA
.1a3470	28		plp		                PLP
.1a3471	60		rts		            RTS
.1a3472					S_TILEAT
.1a3472	08		php		                PHP
.1a3473					locals
>0001					L_TILENUM       .word ?
>0003					L_X             .word ?
.1a3473	c2 20		rep #$20	            REP #$20
.1a3475	3b		tsc		            TSC
.1a3476	38		sec		            SEC
.1a3477	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.1a347a	1b		tcs		            TCS
.1a347b	c2 20		rep #$20	            REP #$20
.1a347d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3480	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a3483	a5 23		lda $0823	                LDA ARGUMENT1
.1a3485	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.1a3487	a9 2c 00	lda #$002c	                LDA #','
.1a348a	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a348d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3490	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3493	a5 23		lda $0823	                LDA ARGUMENT1
.1a3495	83 03		sta $03,s	                STA L_X                     ; Save as X
.1a3497	a9 2c 00	lda #$002c	                LDA #','
.1a349a	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a349d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a34a0	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a34a3	a3 01		lda $01,s	                LDA L_TILENUM
.1a34a5	20 05 33	jsr $1a3305	            JSR TILEMAP_ADDR
.1a34a8	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the Y position
.1a34aa	a0 0a 00	ldy #$000a	                LDY #TILEMAP_WINDOW_Y
.1a34ad	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a34af	a3 03		lda $03,s	                LDA L_X                     ; Set the X position
.1a34b1	a0 08 00	ldy #$0008	                LDY #TILEMAP_WINDOW_X
.1a34b4	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.1a34b6					done
.1a34b6	c2 20		rep #$20	            REP #$20
.1a34b8	3b		tsc		            TSC
.1a34b9	18		clc		            CLC
.1a34ba	69 04 00	adc #$0004	            ADC #SIZE(locals)
.1a34bd	1b		tcs		            TCS
.1a34be	28		plp		                PLP
.1a34bf	60		rts		            RTS
=0					DMA_LINEAR = 0                              ; Memory to copy is a continguous, linear range
=1					DMA_RECT = 1                                ; Memory to copy is a rectangular block
.0000					DMA_BLOCK
>0000					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>0001					ADDR            .long ?                     ; The starting address for the data to transfer
>0004					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>0007					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>0009					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>000b					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
=$01					DMA_SRC_2D = $01                            ; Source transfer should be 2D
=$02					DMA_DST_2D = $02                            ; Destination transfer should be 2D
=$10					DMA_SRC_SRAM = $10                          ; Flag indicating that the source is in SRAM ($00:0000 - $3F:FFFF)
=$20					DMA_DST_SRAM = $20                          ; Flag indicating that the destination is in SRAM ($00:0000 - $3F:FFFF)
>1af058					DMA_BLOCKS      .byte ?                     ; What blocks are involved
.1af059					DMA_SRC
>1af059					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>1af05a					ADDR            .long ?                     ; The starting address for the data to transfer
>1af05d					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>1af060					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>1af062					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>1af064					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.1af066					DMA_DEST
>1af066					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>1af067					ADDR            .long ?                     ; The starting address for the data to transfer
>1af06a					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>1af06d					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>1af06f					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>1af071					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.1a34c0					DO_DMA
.1a34c0	0b		phd		                PHD
.1a34c1	08		php		                PHP
.1a34c2	08		php		            PHP
.1a34c3	c2 20		rep #$20	            REP #$20
.1a34c5	48		pha		            PHA
.1a34c6	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a34c9	5b		tcd		            TCD
.1a34ca	68		pla		            PLA
.1a34cb	28		plp		            PLP
.1a34cc	e2 20		sep #$20	            SEP #$20
.1a34ce	a9 00		lda #$00	                LDA #0
.1a34d0	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS           ; Set mode to something neutral
.1a34d4	af 5c f0 1a	lda $1af05c	                LDA @l DMA_SRC.ADDR+2       ; Check the bank
.1a34d8	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.1a34da	b0 1c		bcs $1a34f8	                BGE src_vram                ; Yes: leave the DMA_BLOCK bit alone
.1a34dc	8f 24 04 af	sta $af0424	src_sram        STA @l SDMA_SRC_ADDY_H      ; Set the SDMA source address
.1a34e0	af 5b f0 1a	lda $1af05b	                LDA @l DMA_SRC.ADDR+1
.1a34e4	8f 23 04 af	sta $af0423	                STA @l SDMA_SRC_ADDY_M
.1a34e8	af 5a f0 1a	lda $1af05a	                LDA @l DMA_SRC.ADDR
.1a34ec	8f 22 04 af	sta $af0422	                STA @l SDMA_SRC_ADDY_L
.1a34f0	a9 10		lda #$10	                LDA #DMA_SRC_SRAM           ; Set the SRAM source block bit
.1a34f2	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a34f6	80 17		bra $1a350f	                BRA src_mode
.1a34f8	38		sec		src_vram        SEC                         ; Convert to VRAM relative address
.1a34f9	e9 b0		sbc #$b0	                SBC #`VRAM
.1a34fb	8f 04 04 af	sta $af0404	                STA @l VDMA_SRC_ADDY_H      ; Set the VDMA source address
.1a34ff	af 5b f0 1a	lda $1af05b	                LDA @l DMA_SRC.ADDR+1
.1a3503	8f 03 04 af	sta $af0403	                STA @l VDMA_SRC_ADDY_M
.1a3507	af 5a f0 1a	lda $1af05a	                LDA @l DMA_SRC.ADDR
.1a350b	8f 02 04 af	sta $af0402	                STA @l VDMA_SRC_ADDY_L
.1a350f	af 59 f0 1a	lda $1af059	src_mode        LDA @l DMA_SRC.MODE         ; Determine if source is 1D or 2D
.1a3513	d0 3c		bne $1a3551	                BNE src_2d
.1a3515	af 58 f0 1a	lda $1af058	src_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.1a3519	f0 1b		beq $1a3536	                BEQ src_1d_vram
.1a351b	af 5d f0 1a	lda $1af05d	src_1d_sram     LDA @l DMA_SRC.SIZE         ; It's SRAM, so set the SDMA size
.1a351f	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.1a3523	af 5e f0 1a	lda $1af05e	                LDA @l DMA_SRC.SIZE+1
.1a3527	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_M
.1a352b	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a352f	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.1a3533	82 8b 00	brl $1a35c1	                BRL set_dst                 ; Go to set up the destination
.1a3536	af 5d f0 1a	lda $1af05d	src_1d_vram     LDA @l DMA_SRC.SIZE         ; It's VRAM, so set the VDMA size
.1a353a	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.1a353e	af 5e f0 1a	lda $1af05e	                LDA @l DMA_SRC.SIZE+1
.1a3542	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_M
.1a3546	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a354a	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.1a354e	82 70 00	brl $1a35c1	                BRL set_dst                 ; Go to set up the destination
.1a3551	af 58 f0 1a	lda $1af058	src_2d          LDA @l DMA_BLOCKS
.1a3555	09 01		ora #$01	                ORA #DMA_SRC_2D             ; Set the bit to make the source a 2D transfer
.1a3557	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a355b	89 10		bit #$10	                BIT #DMA_SRC_SRAM           ; Are we writing to SRAM
.1a355d	f0 32		beq $1a3591	                BEQ src_2d_vram             ; No: set the 2d values in the VRAM source
.1a355f	af 60 f0 1a	lda $1af060	src_2d_sram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.1a3563	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.1a3567	af 61 f0 1a	lda $1af061	                LDA @l DMA_SRC.WIDTH+1
.1a356b	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.1a356f	af 62 f0 1a	lda $1af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.1a3573	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.1a3577	af 63 f0 1a	lda $1af063	                LDA @l DMA_SRC.HEIGHT+1
.1a357b	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.1a357f	af 64 f0 1a	lda $1af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.1a3583	8f 2c 04 af	sta $af042c	                STA @l SDMA_SRC_STRIDE_L
.1a3587	af 65 f0 1a	lda $1af065	                LDA @l DMA_SRC.STRIDE+1
.1a358b	8f 2d 04 af	sta $af042d	                STA @l SDMA_SRC_STRIDE_L+1
.1a358f	80 30		bra $1a35c1	                BRA set_dst
.1a3591	af 60 f0 1a	lda $1af060	src_2d_vram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.1a3595	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a3599	af 61 f0 1a	lda $1af061	                LDA @l DMA_SRC.WIDTH+1
.1a359d	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.1a35a1	af 62 f0 1a	lda $1af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.1a35a5	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a35a9	af 63 f0 1a	lda $1af063	                LDA @l DMA_SRC.HEIGHT+1
.1a35ad	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.1a35b1	af 64 f0 1a	lda $1af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.1a35b5	8f 0c 04 af	sta $af040c	                STA @l VDMA_SRC_STRIDE_L
.1a35b9	af 65 f0 1a	lda $1af065	                LDA @l DMA_SRC.STRIDE+1
.1a35bd	8f 0d 04 af	sta $af040d	                STA @l VDMA_SRC_STRIDE_L+1
.1a35c1					set_dst
.1a35c1	e2 20		sep #$20	            SEP #$20
.1a35c3	af 69 f0 1a	lda $1af069	                LDA @l DMA_DEST.ADDR+2      ; Check the bank
.1a35c7	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.1a35c9	b0 20		bcs $1a35eb	                BGE dst_vram                ; Yes: leave the DMA_BLOCK bit alone
.1a35cb	8f 27 04 af	sta $af0427	dst_sram        STA @l SDMA_DST_ADDY_H      ; Set the SDMA destination address
.1a35cf	af 68 f0 1a	lda $1af068	                LDA @l DMA_DEST.ADDR+1
.1a35d3	8f 26 04 af	sta $af0426	                STA @l SDMA_DST_ADDY_M
.1a35d7	af 67 f0 1a	lda $1af067	                LDA @l DMA_DEST.ADDR
.1a35db	8f 25 04 af	sta $af0425	                STA @l SDMA_DST_ADDY_L
.1a35df	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS
.1a35e3	09 20		ora #$20	                ORA #DMA_DST_SRAM           ; Set the bit to indicate the destination is SRAM
.1a35e5	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a35e9	80 17		bra $1a3602	                BRA dst_mode
.1a35eb	38		sec		dst_vram        SEC                         ; Convert to VRAM relative address
.1a35ec	e9 b0		sbc #$b0	                SBC #`VRAM
.1a35ee	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H      ; Set the VDMA destination address
.1a35f2	af 68 f0 1a	lda $1af068	                LDA @l DMA_DEST.ADDR+1
.1a35f6	8f 06 04 af	sta $af0406	                STA @l VDMA_DST_ADDY_M
.1a35fa	af 67 f0 1a	lda $1af067	                LDA @l DMA_DEST.ADDR
.1a35fe	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.1a3602	af 66 f0 1a	lda $1af066	dst_mode        LDA @l DMA_DEST.MODE
.1a3606	d0 3e		bne $1a3646	                BNE dst_2d                  ; If 2D, set up the 2D destination parameters
.1a3608	af 58 f0 1a	lda $1af058	dst_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.1a360c	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Is the destination SRAM?
.1a360e	f0 1b		beq $1a362b	                BEQ dst_1d_vram
.1a3610	af 6a f0 1a	lda $1af06a	dst_1d_sram     LDA @l DMA_DEST.SIZE
.1a3614	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.1a3618	af 6b f0 1a	lda $1af06b	                LDA @l DMA_DEST.SIZE+1
.1a361c	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_L+1
.1a3620	af 6c f0 1a	lda $1af06c	                LDA @l DMA_DEST.SIZE+2
.1a3624	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.1a3628	82 8b 00	brl $1a36b6	                BRL start_xfer
.1a362b	af 6a f0 1a	lda $1af06a	dst_1d_vram     LDA @l DMA_DEST.SIZE
.1a362f	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.1a3633	af 6b f0 1a	lda $1af06b	                LDA @l DMA_DEST.SIZE+1
.1a3637	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_L+1
.1a363b	af 6c f0 1a	lda $1af06c	                LDA @l DMA_DEST.SIZE+2
.1a363f	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.1a3643	82 70 00	brl $1a36b6	                BRL start_xfer
.1a3646	af 58 f0 1a	lda $1af058	dst_2d          LDA @l DMA_BLOCKS
.1a364a	09 02		ora #$02	                ORA #DMA_DST_2D             ; Set the bit to make the source a 2D transfer
.1a364c	8f 58 f0 1a	sta $1af058	                STA @l DMA_BLOCKS
.1a3650	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Are we writing to the SRAM?
.1a3652	f0 32		beq $1a3686	                BEQ dst_2d_vram             ; No: set the 2D parameters for VRAM
.1a3654	af 6d f0 1a	lda $1af06d	dst_2d_sram     LDA @l DMA_DEST.WIDTH       ; Set the SRAM width
.1a3658	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.1a365c	af 6e f0 1a	lda $1af06e	                LDA @L DMA_DEST.WIDTH+1
.1a3660	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.1a3664	af 6f f0 1a	lda $1af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the SRAM height
.1a3668	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.1a366c	af 70 f0 1a	lda $1af070	                LDA @L DMA_DEST.HEIGHT+1
.1a3670	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.1a3674	af 71 f0 1a	lda $1af071	                LDA @l DMA_DEST.STRIDE      ; Set the SRAM stride
.1a3678	8f 2e 04 af	sta $af042e	                STA @l SDMA_DST_STRIDE_L
.1a367c	af 72 f0 1a	lda $1af072	                LDA @L DMA_DEST.STRIDE+1
.1a3680	8f 2f 04 af	sta $af042f	                STA @l SDMA_DST_STRIDE_L+1
.1a3684	80 30		bra $1a36b6	                BRA start_xfer
.1a3686	af 6d f0 1a	lda $1af06d	dst_2d_vram     LDA @l DMA_DEST.WIDTH       ; Set the VRAM width
.1a368a	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.1a368e	af 6e f0 1a	lda $1af06e	                LDA @L DMA_DEST.WIDTH+1
.1a3692	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.1a3696	af 6f f0 1a	lda $1af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the VRAM height
.1a369a	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.1a369e	af 70 f0 1a	lda $1af070	                LDA @L DMA_DEST.HEIGHT+1
.1a36a2	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.1a36a6	af 71 f0 1a	lda $1af071	                LDA @l DMA_DEST.STRIDE      ; Set the VRAM stride
.1a36aa	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L
.1a36ae	af 72 f0 1a	lda $1af072	                LDA @L DMA_DEST.STRIDE+1
.1a36b2	8f 0f 04 af	sta $af040f	                STA @l VDMA_DST_STRIDE_L+1
.1a36b6	af 58 f0 1a	lda $1af058	start_xfer      LDA @l DMA_BLOCKS
.1a36ba	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.1a36bc	f0 43		beq $1a3701	                BEQ start_vdma_only
.1a36be	c9 10		cmp #$10	                CMP #DMA_SRC_SRAM
.1a36c0	f0 76		beq $1a3738	                BEQ start_s2v
.1a36c2	c9 20		cmp #$20	                CMP #DMA_DST_SRAM
.1a36c4	d0 03		bne $1a36c9	                BNE start_sdma_only
.1a36c6	82 8a 00	brl $1a3753	                BRL start_v2s
.1a36c9					start_sdma_only
.1a36c9	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.1a36cd	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.1a36cf	f0 23		beq $1a36f4	                BEQ sdma_1d_only            ; Source and Destination 1D...
.1a36d1	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.1a36d3	f0 23		beq $1a36f8	                BEQ sdma_2d_only            ; Source and Destination 2D
.1a36d5	08		php		            PHP
.1a36d6	c2 20		rep #$20	            REP #$20
.1a36d8	48		pha		            PHA
.1a36d9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a36dc	5b		tcd		            TCD
.1a36dd	68		pla		            PLA
.1a36de	28		plp		            PLP
.1a36df	e2 20		sep #$20	            SEP #$20
.1a36e1	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a36e3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a36e7	c2 20		rep #$20	            REP #$20
.1a36e9	29 ff 00	and #$00ff	            AND #$00FF
.1a36ec	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a36ef	e2 20		sep #$20	            SEP #$20
.1a36f1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a36f4	a9 01		lda #$01	sdma_1d_only    LDA #SDMA_CTRL0_Enable      ; Set the bits for 1D, SRAM->SRAM
.1a36f6	80 02		bra $1a36fa	                BRA sdma_set_ctrl
.1a36f8	a9 03		lda #$03	sdma_2d_only    LDA #SDMA_CTRL0_Enable | SDMA_CTRL0_1D_2D
.1a36fa	8f 20 04 af	sta $af0420	sdma_set_ctrl   STA @l SDMA_CTRL_REG0
.1a36fe	82 7d 00	brl $1a377e	                BRL trig_sdma               ; And trigger the SDMA
.1a3701					start_vdma_only
.1a3701	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.1a3705	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.1a3707	f0 23		beq $1a372c	                BEQ vdma_1d_only            ; Source and Destination 1D...
.1a3709	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.1a370b	f0 23		beq $1a3730	                BEQ vdma_2d_only            ; Source and Destination 2D...
.1a370d	08		php		            PHP
.1a370e	c2 20		rep #$20	            REP #$20
.1a3710	48		pha		            PHA
.1a3711	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3714	5b		tcd		            TCD
.1a3715	68		pla		            PLA
.1a3716	28		plp		            PLP
.1a3717	e2 20		sep #$20	            SEP #$20
.1a3719	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a371b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a371f	c2 20		rep #$20	            REP #$20
.1a3721	29 ff 00	and #$00ff	            AND #$00FF
.1a3724	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3727	e2 20		sep #$20	            SEP #$20
.1a3729	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a372c	a9 01		lda #$01	vdma_1d_only    LDA #VDMA_CTRL_Enable       ; Set the bits for 1D, VRAM->VRAM
.1a372e	80 02		bra $1a3732	                BRA vdma_set_ctrl
.1a3730	a9 03		lda #$03	vdma_2d_only    LDA #VDMA_CTRL_Enable | VDMA_CTRL_1D_2D
.1a3732	8f 00 04 af	sta $af0400	vdma_set_ctrl   STA @l VDMA_CONTROL_REG
.1a3736	80 34		bra $1a376c	                BRA trig_vdma               ; And trigger the VDMA
.1a3738					start_s2v
.1a3738	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.1a373c	29 01		and #$01	                AND #DMA_SRC_2D
.1a373e	0a		asl a		                ASL A
.1a373f	09 11		ora #$11	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src
.1a3741	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a3745	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.1a3749	29 02		and #$02	                AND #DMA_DST_2D
.1a374b	09 11		ora #$11	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Src
.1a374d	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3751	80 19		bra $1a376c	                BRA trig_vdma               ; And trigger the VDMA
.1a3753					start_v2s
.1a3753	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.1a3757	29 02		and #$02	                AND #DMA_DST_2D
.1a3759	09 21		ora #$21	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Dst
.1a375b	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a375f	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.1a3763	29 01		and #$01	                AND #DMA_SRC_2D
.1a3765	0a		asl a		                ASL A
.1a3766	09 21		ora #$21	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Dst
.1a3768	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a376c					trig_vdma
.1a376c	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.1a3770	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF    ; Trigger the VDMA
.1a3772	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a3776	af 58 f0 1a	lda $1af058	                LDA @l DMA_BLOCKS           ; Check if we need SDMA
.1a377a	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.1a377c	f0 0f		beq $1a378d	                BEQ wait_vdma               ; No: wait for VDMA to complete
.1a377e					trig_sdma
.1a377e	af 20 04 af	lda $af0420	                LDA @l SDMA_CTRL_REG0
.1a3782	09 80		ora #$80	                ORA #SDMA_CTRL0_Start_TRF   ; Trigger the SDMA
.1a3784	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a3788	ea		nop		                NOP                         ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1a3789	ea		nop		                NOP                         ; Before it actually gets to stop it will execute a couple more instructions
.1a378a	ea		nop		                NOP                         ; From that point on, the CPU is halted (keep that in mind)
.1a378b	ea		nop		                NOP                         ; No IRQ will be processed either during that time
.1a378c	ea		nop		                NOP
.1a378d	af 01 04 af	lda $af0401	wait_vdma       LDA @l VDMA_STATUS_REG      ; Check the VDMA status
.1a3791	89 80		bit #$80	                BIT #VDMA_STAT_VDMA_IPS     ; If the transfer is still in process...
.1a3793	d0 f8		bne $1a378d	                BNE wait_vdma               ; Wait until it stops.
.1a3795	a9 00		lda #$00	                LDA #$00                    ; Clear the TRF bits
.1a3797	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.1a379b	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.1a379f	28		plp		                PLP
.1a37a0	2b		pld		                PLD
.1a37a1	60		rts		            RTS
.1a37a2					S_MEMCOPY
.1a37a2	0b		phd		                PHD
.1a37a3	08		php		                PHP
.1a37a4	e2 20		sep #$20	            SEP #$20
.1a37a6	c2 10		rep #$10	            REP #$10
.1a37a8	a9 00		lda #$00	                LDA #0
.1a37aa	a2 00 00	ldx #$0000	                LDX #0
.1a37ad	8f 59 f0 1a	sta $1af059	clr_loop        STA @l DMA_SRC
.1a37b1	e8		inx		                INX
.1a37b2	e0 1a 00	cpx #$001a	                CPX #SIZE(DMA_BLOCK) * 2
.1a37b5	d0 f6		bne $1a37ad	                BNE clr_loop
.1a37b7	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a37ba	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.1a37bc	f0 23		beq $1a37e1	                BEQ src_linear                      ; Yes: go to process a linear source
.1a37be	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.1a37c0	f0 5e		beq $1a3820	                BEQ src_rect                        ; Yes: go to process a rectangular source
.1a37c2					syntax_err
.1a37c2	08		php		            PHP
.1a37c3	c2 20		rep #$20	            REP #$20
.1a37c5	48		pha		            PHA
.1a37c6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a37c9	5b		tcd		            TCD
.1a37ca	68		pla		            PLA
.1a37cb	28		plp		            PLP
.1a37cc	e2 20		sep #$20	            SEP #$20
.1a37ce	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a37d0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a37d4	c2 20		rep #$20	            REP #$20
.1a37d6	29 ff 00	and #$00ff	            AND #$00FF
.1a37d9	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a37dc	e2 20		sep #$20	            SEP #$20
.1a37de	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a37e1					src_linear
.1a37e1	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a37e4	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a37e7	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a37ea	c2 20		rep #$20	            REP #$20
.1a37ec	a5 23		lda $0823	            LDA ARGUMENT1
.1a37ee	8f 5a f0 1a	sta $1af05a	            STA DMA_SRC.ADDR
.1a37f2	e2 20		sep #$20	            SEP #$20
.1a37f4	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a37f6	8f 5c f0 1a	sta $1af05c	            STA DMA_SRC.ADDR+2
.1a37fa	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a37fc	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a37ff	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3802	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3805	c2 20		rep #$20	            REP #$20
.1a3807	a5 23		lda $0823	            LDA ARGUMENT1
.1a3809	8f 5d f0 1a	sta $1af05d	            STA DMA_SRC.SIZE
.1a380d	e2 20		sep #$20	            SEP #$20
.1a380f	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3811	8f 5f f0 1a	sta $1af05f	            STA DMA_SRC.SIZE+2
.1a3815	e2 20		sep #$20	            SEP #$20
.1a3817	a9 00		lda #$00	            LDA #<DMA_LINEAR
.1a3819	8f 59 f0 1a	sta $1af059	            STA DMA_SRC.MODE
.1a381d	82 74 00	brl $1a3894	                BRL process_to
.1a3820					src_rect
.1a3820	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3823	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3826	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3829	c2 20		rep #$20	            REP #$20
.1a382b	a5 23		lda $0823	            LDA ARGUMENT1
.1a382d	8f 5a f0 1a	sta $1af05a	            STA DMA_SRC.ADDR
.1a3831	e2 20		sep #$20	            SEP #$20
.1a3833	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3835	8f 5c f0 1a	sta $1af05c	            STA DMA_SRC.ADDR+2
.1a3839	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a383b	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a383e	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3841	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3844	c2 20		rep #$20	            REP #$20
.1a3846	a5 23		lda $0823	            LDA ARGUMENT1
.1a3848	8f 60 f0 1a	sta $1af060	            STA DMA_SRC.WIDTH
.1a384c	8d 00 01	sta $0100	            STA M0_OPERAND_A
.1a384f	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3852	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3855	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3858	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a385b	c2 20		rep #$20	            REP #$20
.1a385d	a5 23		lda $0823	            LDA ARGUMENT1
.1a385f	8f 62 f0 1a	sta $1af062	            STA DMA_SRC.HEIGHT
.1a3863	8d 02 01	sta $0102	            STA M0_OPERAND_B
.1a3866	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3869	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a386c	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a386f	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3872	c2 20		rep #$20	            REP #$20
.1a3874	a5 23		lda $0823	            LDA ARGUMENT1
.1a3876	8f 64 f0 1a	sta $1af064	            STA DMA_SRC.STRIDE
.1a387a	c2 20		rep #$20	            REP #$20
.1a387c	ad 04 01	lda $0104	            LDA M0_RESULT
.1a387f	8f 5d f0 1a	sta $1af05d	            STA DMA_SRC.SIZE
.1a3883	e2 20		sep #$20	            SEP #$20
.1a3885	ad 06 01	lda $0106	            LDA M0_RESULT+2
.1a3888	8f 5f f0 1a	sta $1af05f	            STA DMA_SRC.SIZE+2
.1a388c	e2 20		sep #$20	            SEP #$20
.1a388e	a9 01		lda #$01	            LDA #<DMA_RECT
.1a3890	8f 59 f0 1a	sta $1af059	            STA DMA_SRC.MODE
.1a3894					process_to
.1a3894	e2 20		sep #$20	            SEP #$20
.1a3896	a9 9c		lda #$9c	                LDA #TOK_TO
.1a3898	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a389b	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a389e	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.1a38a0	f0 23		beq $1a38c5	                BEQ dest_linear                     ; Yes: go to process a linear destination
.1a38a2	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.1a38a4	f0 5e		beq $1a3904	                BEQ dest_rect                       ; Yes: go to process a rectangular source
.1a38a6					syntax_err2
.1a38a6	08		php		            PHP
.1a38a7	c2 20		rep #$20	            REP #$20
.1a38a9	48		pha		            PHA
.1a38aa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a38ad	5b		tcd		            TCD
.1a38ae	68		pla		            PLA
.1a38af	28		plp		            PLP
.1a38b0	e2 20		sep #$20	            SEP #$20
.1a38b2	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a38b4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a38b8	c2 20		rep #$20	            REP #$20
.1a38ba	29 ff 00	and #$00ff	            AND #$00FF
.1a38bd	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a38c0	e2 20		sep #$20	            SEP #$20
.1a38c2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a38c5					dest_linear
.1a38c5	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a38c8	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a38cb	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a38ce	c2 20		rep #$20	            REP #$20
.1a38d0	a5 23		lda $0823	            LDA ARGUMENT1
.1a38d2	8f 67 f0 1a	sta $1af067	            STA DMA_DEST.ADDR
.1a38d6	e2 20		sep #$20	            SEP #$20
.1a38d8	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a38da	8f 69 f0 1a	sta $1af069	            STA DMA_DEST.ADDR+2
.1a38de	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a38e0	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a38e3	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a38e6	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a38e9	c2 20		rep #$20	            REP #$20
.1a38eb	a5 23		lda $0823	            LDA ARGUMENT1
.1a38ed	8f 6a f0 1a	sta $1af06a	            STA DMA_DEST.SIZE
.1a38f1	e2 20		sep #$20	            SEP #$20
.1a38f3	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a38f5	8f 6c f0 1a	sta $1af06c	            STA DMA_DEST.SIZE+2
.1a38f9	e2 20		sep #$20	            SEP #$20
.1a38fb	a9 00		lda #$00	            LDA #<DMA_LINEAR
.1a38fd	8f 66 f0 1a	sta $1af066	            STA DMA_DEST.MODE
.1a3901	82 74 00	brl $1a3978	                BRL verify
.1a3904					dest_rect
.1a3904	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3907	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a390a	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a390d	c2 20		rep #$20	            REP #$20
.1a390f	a5 23		lda $0823	            LDA ARGUMENT1
.1a3911	8f 67 f0 1a	sta $1af067	            STA DMA_DEST.ADDR
.1a3915	e2 20		sep #$20	            SEP #$20
.1a3917	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a3919	8f 69 f0 1a	sta $1af069	            STA DMA_DEST.ADDR+2
.1a391d	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.1a391f	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3922	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3925	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3928	c2 20		rep #$20	            REP #$20
.1a392a	a5 23		lda $0823	            LDA ARGUMENT1
.1a392c	8f 6d f0 1a	sta $1af06d	            STA DMA_DEST.WIDTH
.1a3930	8d 00 01	sta $0100	            STA M0_OPERAND_A
.1a3933	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a3936	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3939	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a393c	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a393f	c2 20		rep #$20	            REP #$20
.1a3941	a5 23		lda $0823	            LDA ARGUMENT1
.1a3943	8f 6f f0 1a	sta $1af06f	            STA DMA_DEST.HEIGHT
.1a3947	8d 02 01	sta $0102	            STA M0_OPERAND_B
.1a394a	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.1a394d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3950	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3953	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3956	c2 20		rep #$20	            REP #$20
.1a3958	a5 23		lda $0823	            LDA ARGUMENT1
.1a395a	8f 71 f0 1a	sta $1af071	            STA DMA_DEST.STRIDE
.1a395e	c2 20		rep #$20	            REP #$20
.1a3960	ad 04 01	lda $0104	            LDA M0_RESULT
.1a3963	8f 6a f0 1a	sta $1af06a	            STA DMA_DEST.SIZE
.1a3967	e2 20		sep #$20	            SEP #$20
.1a3969	ad 06 01	lda $0106	            LDA M0_RESULT+2
.1a396c	8f 6c f0 1a	sta $1af06c	            STA DMA_DEST.SIZE+2
.1a3970	e2 20		sep #$20	            SEP #$20
.1a3972	a9 01		lda #$01	            LDA #<DMA_RECT
.1a3974	8f 66 f0 1a	sta $1af066	            STA DMA_DEST.MODE
.1a3978					verify
.1a3978	c2 20		rep #$20	            REP #$20
.1a397a	af 5d f0 1a	lda $1af05d	                LDA @l DMA_SRC.SIZE
.1a397e	cf 6a f0 1a	cmp $1af06a	                CMP @l DMA_DEST.SIZE
.1a3982	d0 14		bne $1a3998	                BNE size_err
.1a3984	e2 20		sep #$20	            SEP #$20
.1a3986	af 5f f0 1a	lda $1af05f	                LDA @l DMA_SRC.SIZE+2
.1a398a	cf 6c f0 1a	cmp $1af06c	                CMP @l DMA_DEST.SIZE+2
.1a398e	d0 08		bne $1a3998	                BNE size_err
.1a3990	c2 20		rep #$20	            REP #$20
.1a3992	20 c0 34	jsr $1a34c0	            JSR DO_DMA
.1a3995	28		plp		                PLP
.1a3996	2b		pld		                PLD
.1a3997	60		rts		            RTS
.1a3998					size_err
.1a3998	08		php		            PHP
.1a3999	c2 20		rep #$20	            REP #$20
.1a399b	48		pha		            PHA
.1a399c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a399f	5b		tcd		            TCD
.1a39a0	68		pla		            PLA
.1a39a1	28		plp		            PLP
.1a39a2	e2 20		sep #$20	            SEP #$20
.1a39a4	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a39a6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a39aa	c2 20		rep #$20	            REP #$20
.1a39ac	29 ff 00	and #$00ff	            AND #$00FF
.1a39af	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a39b2	e2 20		sep #$20	            SEP #$20
.1a39b4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a39b7					S_LOCATE
.1a39b7	08		php		                PHP
.1a39b8	c2 30		rep #$30	            REP #$30
.1a39ba	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a39bd	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a39c0	a5 23		lda $0823	                LDA ARGUMENT1
.1a39c2	48		pha		                PHA                         ; Save it for later
.1a39c3	a9 2c 00	lda #$002c	                LDA #','                    ; Check for the comma separator
.1a39c6	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a39c9	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a39cc	20 15 06	jsr $1a0615	            JSR ASS_ARG1_BYTE
.1a39cf	a4 23		ldy $0823	                LDY ARGUMENT1               ; Set Y to the row
.1a39d1	fa		plx		                PLX                         ; Set X to the column
.1a39d2	20 20 00	jsr $1a0020	            JSR CURSORXY
.1a39d5	28		plp		                PLP
.1a39d6	60		rts		            RTS

;******  Return to file: src\statements.s

.1a39d7					S_INPUT
.1a39d7	08		php		                PHP
.1a39d8					varloop
.1a39d8	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a39db	e2 20		sep #$20	            SEP #$20
.1a39dd	a7 00		lda [$0800]	                LDA [BIP]
.1a39df	d0 03		bne $1a39e4	                BNE check_colon
.1a39e1	4c 7c 3a	jmp $1a3a7c	                JMP done            ; If EOL, we're done
.1a39e4	c9 3a		cmp #$3a	check_colon     CMP #':'
.1a39e6	d0 03		bne $1a39eb	                BNE check_string
.1a39e8	4c 7c 3a	jmp $1a3a7c	                JMP done            ; If colon, we're done
.1a39eb	c9 22		cmp #$22	check_string    CMP #CHAR_DQUOTE    ; Is it the start of a string?
.1a39ed	d0 0b		bne $1a39fa	                BNE check_var       ; No: then it should be a variable name
.1a39ef	20 39 1a	jsr $1a1a39	            JSR EVALSTRING
.1a39f2	20 68 43	jsr $1a4368	            JSR PR_STRING
.1a39f5	a9 3b		lda #$3b	                LDA #';'            ; Look for a semicolon
.1a39f7	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a39fa					check_var
.1a39fa	20 94 03	jsr $1a0394	            JSR ISALPHA
.1a39fd	90 41		bcc $1a3a40	                BCC syntax_err      ; No: it's a syntax error
.1a39ff	20 51 51	jsr $1a5151	            JSR VAR_FINDNAME
.1a3a02	90 3c		bcc $1a3a40	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3a04	a9 3f		lda #$3f	                LDA #"?"            ; Print a "? " to follow
.1a3a06	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3a09	a9 20		lda #$20	                LDA #CHAR_SP
.1a3a0b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3a0e	20 10 00	jsr $1a0010	            JSR INPUTLINE
.1a3a11	e2 20		sep #$20	            SEP #$20
.1a3a13	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Check the type of the variable
.1a3a15	c9 02		cmp #$02	                CMP #TYPE_STRING    ; If it's a string...
.1a3a17	f0 46		beq $1a3a5f	                BEQ in_string       ; ... go to copy the string data
.1a3a19	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; If it's an integer...
.1a3a1b	f0 62		beq $1a3a7f	                BEQ in_integer      ; ... go to parse the integer
.1a3a1d	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; If it's a float...
.1a3a1f	f0 5d		beq $1a3a7e	                BEQ in_float        ; ... go to parse the float
.1a3a21	08		php		            PHP
.1a3a22	c2 20		rep #$20	            REP #$20
.1a3a24	48		pha		            PHA
.1a3a25	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3a28	5b		tcd		            TCD
.1a3a29	68		pla		            PLA
.1a3a2a	28		plp		            PLP
.1a3a2b	e2 20		sep #$20	            SEP #$20
.1a3a2d	a9 04		lda #$04	            LDA #ERR_TYPE
.1a3a2f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3a33	c2 20		rep #$20	            REP #$20
.1a3a35	29 ff 00	and #$00ff	            AND #$00FF
.1a3a38	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3a3b	e2 20		sep #$20	            SEP #$20
.1a3a3d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3a40					syntax_err
.1a3a40	08		php		            PHP
.1a3a41	c2 20		rep #$20	            REP #$20
.1a3a43	48		pha		            PHA
.1a3a44	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3a47	5b		tcd		            TCD
.1a3a48	68		pla		            PLA
.1a3a49	28		plp		            PLP
.1a3a4a	e2 20		sep #$20	            SEP #$20
.1a3a4c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3a4e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3a52	c2 20		rep #$20	            REP #$20
.1a3a54	29 ff 00	and #$00ff	            AND #$00FF
.1a3a57	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3a5a	e2 20		sep #$20	            SEP #$20
.1a3a5c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3a5f					in_string
.1a3a5f	c2 20		rep #$20	            REP #$20
.1a3a61	a9 00 4c	lda #$4c00	                LDA #<>IOBUF
.1a3a64	85 23		sta $0823	                STA ARGUMENT1
.1a3a66	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3a69	85 25		sta $0825	                STA ARGUMENT1+2
.1a3a6b	e2 20		sep #$20	            SEP #$20
.1a3a6d	a9 02		lda #$02	                LDA #TYPE_STRING
.1a3a6f	85 27		sta $0827	                STA ARGTYPE1
.1a3a71					save_input
.1a3a71	c2 20		rep #$20	            REP #$20
.1a3a73	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a3a76	a9 0d 00	lda #$000d	                LDA #CHAR_CR        ; Print a newline
.1a3a79	20 18 00	jsr $1a0018	            JSR PRINTC
.1a3a7c	28		plp		done            PLP
.1a3a7d	60		rts		            RTS
.1a3a7e	ea		nop		in_float        NOP                 ; TODO: flesh out floating point input
.1a3a7f					in_integer
.1a3a7f	c2 20		rep #$20	            REP #$20
.1a3a81	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.1a3a83	85 40		sta $0840	                STA SAVEBIP
.1a3a85	a5 02		lda $0802	                LDA BIP+2
.1a3a87	85 42		sta $0842	                STA SAVEBIP+2
.1a3a89	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.1a3a8c	85 00		sta $0800	                STA BIP
.1a3a8e	a9 00 00	lda #$0000	                LDA #`IOBUF
.1a3a91	85 02		sta $0802	                STA BIP+2
.1a3a93	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a3a96	c2 20		rep #$20	            REP #$20
.1a3a98	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.1a3a9a	85 00		sta $0800	                STA BIP
.1a3a9c	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3a9e	85 02		sta $0802	                STA BIP+2
.1a3aa0	80 cf		bra $1a3a71	                BRA save_input
.1a3aa2					S_GET
.1a3aa2	08		php		                PHP
.1a3aa3					varloop
.1a3aa3	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3aa6	e2 20		sep #$20	            SEP #$20
.1a3aa8	a7 00		lda [$0800]	                LDA [BIP]
.1a3aaa	f0 47		beq $1a3af3	                BEQ done            ; If EOL, we're done
.1a3aac	c9 3a		cmp #$3a	                CMP #':'
.1a3aae	f0 43		beq $1a3af3	                BEQ done            ; If colon, we're done
.1a3ab0	20 94 03	jsr $1a0394	            JSR ISALPHA
.1a3ab3	90 40		bcc $1a3af5	                BCC syntax_err      ; No: it's a syntax error
.1a3ab5	20 51 51	jsr $1a5151	            JSR VAR_FINDNAME
.1a3ab8	90 3b		bcc $1a3af5	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3aba	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a3abd	20 14 00	jsr $1a0014	            JSR GETKEY
.1a3ac0	e2 20		sep #$20	            SEP #$20
.1a3ac2	a0 00 00	ldy #$0000	                LDY #0
.1a3ac5	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a3ac7	a9 00		lda #$00	                LDA #0
.1a3ac9	c8		iny		                INY
.1a3aca	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a3acc	c2 20		rep #$20	            REP #$20
.1a3ace	a5 16		lda $0816	                LDA STRPTR
.1a3ad0	85 23		sta $0823	                STA ARGUMENT1
.1a3ad2	a5 18		lda $0818	                LDA STRPTR+2
.1a3ad4	85 25		sta $0825	                STA ARGUMENT1+2
.1a3ad6	e2 20		sep #$20	            SEP #$20
.1a3ad8	a9 02		lda #$02	                LDA #TYPE_STRING
.1a3ada	85 27		sta $0827	                STA ARGTYPE1
.1a3adc	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a3adf	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3ae2	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.1a3ae4	f0 0d		beq $1a3af3	                BEQ done            ; EOL? We're done
.1a3ae6	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.1a3ae8	f0 09		beq $1a3af3	                BEQ done
.1a3aea	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3aec	d0 07		bne $1a3af5	                BNE syntax_err      ; Nope: syntax error
.1a3aee	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3af1	80 b0		bra $1a3aa3	                BRA varloop
.1a3af3	28		plp		done            PLP
.1a3af4	60		rts		            RTS
.1a3af5					syntax_err
.1a3af5	08		php		            PHP
.1a3af6	c2 20		rep #$20	            REP #$20
.1a3af8	48		pha		            PHA
.1a3af9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3afc	5b		tcd		            TCD
.1a3afd	68		pla		            PLA
.1a3afe	28		plp		            PLP
.1a3aff	e2 20		sep #$20	            SEP #$20
.1a3b01	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3b03	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3b07	c2 20		rep #$20	            REP #$20
.1a3b09	29 ff 00	and #$00ff	            AND #$00FF
.1a3b0c	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3b0f	e2 20		sep #$20	            SEP #$20
.1a3b11	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3b14					S_CALL
.1a3b14	08		php		                PHP
.1a3b15	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3b18	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a3b1b	e2 20		sep #$20	            SEP #$20
.1a3b1d	a9 5c		lda #$5c	                LDA #$5C            ; Set the opcode for JML
.1a3b1f	85 a2		sta $08a2	                STA MJUMPINST
.1a3b21	c2 20		rep #$20	            REP #$20
.1a3b23	a5 23		lda $0823	                LDA ARGUMENT1
.1a3b25	85 a3		sta $08a3	                STA MJUMPADDR
.1a3b27	e2 20		sep #$20	            SEP #$20
.1a3b29	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3b2b	85 a5		sta $08a5	                STA MJUMPADDR+2
.1a3b2d	e2 20		sep #$20	            SEP #$20
.1a3b2f	a9 2c		lda #$2c	                LDA #','
.1a3b31	85 37		sta $0837	                STA TARGETTOK
.1a3b33	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a3b36	90 41		bcc $1a3b79	                BCC launch          ; Not present... go ahead and launch
.1a3b38	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3b3b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3b3e	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3b41	c2 20		rep #$20	            REP #$20
.1a3b43	a5 23		lda $0823	                LDA ARGUMENT1
.1a3b45	85 55		sta $0855	                STA MARG1           ; Save it to MARG1
.1a3b47	e2 20		sep #$20	            SEP #$20
.1a3b49	a9 2c		lda #$2c	                LDA #','
.1a3b4b	85 37		sta $0837	                STA TARGETTOK
.1a3b4d	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a3b50	90 27		bcc $1a3b79	                BCC launch          ; Not present... go ahead and launch
.1a3b52	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3b55	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3b58	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3b5b	c2 20		rep #$20	            REP #$20
.1a3b5d	a5 23		lda $0823	                LDA ARGUMENT1
.1a3b5f	85 59		sta $0859	                STA MARG2           ; Save it to MARG2
.1a3b61	e2 20		sep #$20	            SEP #$20
.1a3b63	a9 2c		lda #$2c	                LDA #','
.1a3b65	85 37		sta $0837	                STA TARGETTOK
.1a3b67	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a3b6a	90 0d		bcc $1a3b79	                BCC launch          ; Not present... go ahead and launch
.1a3b6c	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3b6f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3b72	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3b75	c2 20		rep #$20	            REP #$20
.1a3b77	a4 23		ldy $0823	                LDY ARGUMENT1
.1a3b79	a6 59		ldx $0859	launch          LDX MARG2
.1a3b7b	a5 55		lda $0855	                LDA MARG1
.1a3b7d	0b		phd		                PHD
.1a3b7e	8b		phb		                PHB
.1a3b7f	08		php		                PHP
.1a3b80	22 a2 08 00	jsl $0008a2	                JSL MJUMPINST       ; Call the subroutine indicated
.1a3b84	28		plp		                PLP
.1a3b85	ab		plb		                PLB
.1a3b86	2b		pld		                PLD
.1a3b87	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a3b8a	28		plp		                PLP
.1a3b8b	60		rts		            RTS
.1a3b8c					type_err
.1a3b8c	08		php		            PHP
.1a3b8d	c2 20		rep #$20	            REP #$20
.1a3b8f	48		pha		            PHA
.1a3b90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3b93	5b		tcd		            TCD
.1a3b94	68		pla		            PLA
.1a3b95	28		plp		            PLP
.1a3b96	e2 20		sep #$20	            SEP #$20
.1a3b98	a9 04		lda #$04	            LDA #ERR_TYPE
.1a3b9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3b9e	c2 20		rep #$20	            REP #$20
.1a3ba0	29 ff 00	and #$00ff	            AND #$00FF
.1a3ba3	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3ba6	e2 20		sep #$20	            SEP #$20
.1a3ba8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3bab					S_DIM
.1a3bab	08		php		                PHP
.1a3bac	e2 20		sep #$20	            SEP #$20
.1a3bae	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3bb1	20 51 51	jsr $1a5151	            JSR VAR_FINDNAME
.1a3bb4	90 64		bcc $1a3c1a	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3bb6	a9 8f		lda #$8f	                LDA #TOK_LPAREN     ; Verify we have a left parenthesis
.1a3bb8	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3bbb	a9 01		lda #$01	                LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.1a3bbd	20 8c 18	jsr $1a188c	            JSR PHOPERATOR
.1a3bc0	a2 01 00	ldx #$0001	                LDX #1
.1a3bc3	a9 00		lda #$00	                LDA #0
.1a3bc5	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Set the dimension count to 0
.1a3bc9					dim_loop
.1a3bc9	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3bcc	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a3bcf	c2 20		rep #$20	            REP #$20
.1a3bd1	a5 23		lda $0823	                LDA ARGUMENT1
.1a3bd3	9f 00 4d 00	sta $004d00,x	                STA @lARRIDXBUF,X   ; And store it in the buffer
.1a3bd7	e2 20		sep #$20	            SEP #$20
.1a3bd9	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF     ; Add to the dimension count
.1a3bdd	1a		inc a		                INC A
.1a3bde	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF
.1a3be2	30 55		bmi $1a3c39	                BMI overflow        ; If > 127 throw an error
.1a3be4	e8		inx		                INX
.1a3be5	e8		inx		                INX
.1a3be6	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3be9	a7 00		lda [$0800]	                LDA [BIP]           ; Check the character
.1a3beb	c9 2c		cmp #$2c	                CMP #','            ; Is it a comma?
.1a3bed	f0 25		beq $1a3c14	                BEQ skip_comma      ; Yes: get the next dimension
.1a3bef	c9 90		cmp #$90	                CMP #TOK_RPAREN     ; No: is it a ")"?
.1a3bf1	d0 27		bne $1a3c1a	                BNE syntax_err      ; No: throw a syntax error
.1a3bf3	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3bf6	20 71 61	jsr $1a6171	            JSR ARR_ALLOC
.1a3bf9	c2 20		rep #$20	            REP #$20
.1a3bfb	a5 c0		lda $08c0	                LDA CURRBLOCK       ; Set up the pointer to the array
.1a3bfd	85 23		sta $0823	                STA ARGUMENT1
.1a3bff	e2 20		sep #$20	            SEP #$20
.1a3c01	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a3c03	85 25		sta $0825	                STA ARGUMENT1+2
.1a3c05	64 26		stz $0826	                STZ ARGUMENT1+3
.1a3c07	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Get the type of the values
.1a3c09	09 80		ora #$80	                ORA #$80            ; Make sure we change the type to array
.1a3c0b	85 ea		sta $08ea	                STA TOFINDTYPE      ; And save it back for searching
.1a3c0d	85 27		sta $0827	                STA ARGTYPE1        ; And for the value to set
.1a3c0f	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a3c12	28		plp		                PLP
.1a3c13	60		rts		            RTS
.1a3c14					skip_comma
.1a3c14	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3c17	4c c9 3b	jmp $1a3bc9	                JMP dim_loop
.1a3c1a					syntax_err
.1a3c1a	08		php		            PHP
.1a3c1b	c2 20		rep #$20	            REP #$20
.1a3c1d	48		pha		            PHA
.1a3c1e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3c21	5b		tcd		            TCD
.1a3c22	68		pla		            PLA
.1a3c23	28		plp		            PLP
.1a3c24	e2 20		sep #$20	            SEP #$20
.1a3c26	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3c28	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3c2c	c2 20		rep #$20	            REP #$20
.1a3c2e	29 ff 00	and #$00ff	            AND #$00FF
.1a3c31	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3c34	e2 20		sep #$20	            SEP #$20
.1a3c36	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3c39					overflow
.1a3c39	08		php		            PHP
.1a3c3a	c2 20		rep #$20	            REP #$20
.1a3c3c	48		pha		            PHA
.1a3c3d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3c40	5b		tcd		            TCD
.1a3c41	68		pla		            PLA
.1a3c42	28		plp		            PLP
.1a3c43	e2 20		sep #$20	            SEP #$20
.1a3c45	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a3c47	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3c4b	c2 20		rep #$20	            REP #$20
.1a3c4d	29 ff 00	and #$00ff	            AND #$00FF
.1a3c50	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3c53	e2 20		sep #$20	            SEP #$20
.1a3c55	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3c58					S_READ
.1a3c58	08		php		                PHP
.1a3c59					varloop
.1a3c59	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3c5c	e2 20		sep #$20	            SEP #$20
.1a3c5e	a7 00		lda [$0800]	                LDA [BIP]
.1a3c60	f0 28		beq $1a3c8a	                BEQ done            ; If EOL, we're done
.1a3c62	c9 3a		cmp #$3a	                CMP #':'
.1a3c64	f0 24		beq $1a3c8a	                BEQ done            ; If colon, we're done
.1a3c66	20 94 03	jsr $1a0394	            JSR ISALPHA
.1a3c69	90 21		bcc $1a3c8c	                BCC syntax_err      ; No: it's a syntax error
.1a3c6b	20 51 51	jsr $1a5151	            JSR VAR_FINDNAME
.1a3c6e	90 1c		bcc $1a3c8c	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.1a3c70	20 ab 3c	jsr $1a3cab	            JSR NEXTDATA
.1a3c73	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a3c76	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3c79	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.1a3c7b	f0 0d		beq $1a3c8a	                BEQ done            ; EOL? We're done
.1a3c7d	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.1a3c7f	f0 09		beq $1a3c8a	                BEQ done
.1a3c81	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3c83	d0 07		bne $1a3c8c	                BNE syntax_err      ; Nope: syntax error
.1a3c85	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3c88	80 cf		bra $1a3c59	                BRA varloop
.1a3c8a	28		plp		done            PLP
.1a3c8b	60		rts		            RTS
.1a3c8c					syntax_err
.1a3c8c	08		php		            PHP
.1a3c8d	c2 20		rep #$20	            REP #$20
.1a3c8f	48		pha		            PHA
.1a3c90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3c93	5b		tcd		            TCD
.1a3c94	68		pla		            PLA
.1a3c95	28		plp		            PLP
.1a3c96	e2 20		sep #$20	            SEP #$20
.1a3c98	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3c9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3c9e	c2 20		rep #$20	            REP #$20
.1a3ca0	29 ff 00	and #$00ff	            AND #$00FF
.1a3ca3	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3ca6	e2 20		sep #$20	            SEP #$20
.1a3ca8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3cab					NEXTDATA
.1a3cab	08		php		                PHP
.1a3cac	a5 02		lda $0802	                LDA BIP+2           ; Save BIP
.1a3cae	85 42		sta $0842	                STA SAVEBIP+2
.1a3cb0	a5 00		lda $0800	                LDA BIP
.1a3cb2	85 40		sta $0840	                STA SAVEBIP
.1a3cb4	a5 1c		lda $081c	                LDA CURLINE+2       ; Save CURLINE
.1a3cb6	85 46		sta $0846	                STA SAVELINE+2
.1a3cb8	a5 1a		lda $081a	                LDA CURLINE
.1a3cba	85 44		sta $0844	                STA SAVELINE
.1a3cbc	c2 20		rep #$20	            REP #$20
.1a3cbe	a5 3a		lda $083a	                LDA DATABIP+2
.1a3cc0	d0 04		bne $1a3cc6	                BNE data_set
.1a3cc2	a5 38		lda $0838	                LDA DATABIP
.1a3cc4	f0 4e		beq $1a3d14	                BEQ scan_start      ; No: scan for a DATA statement
.1a3cc6	a5 38		lda $0838	data_set        LDA DATABIP         ; Move BIP to the DATA statement
.1a3cc8	85 00		sta $0800	                STA BIP
.1a3cca	a5 3a		lda $083a	                LDA DATABIP+2
.1a3ccc	85 02		sta $0802	                STA BIP+2
.1a3cce	a5 3c		lda $083c	                LDA DATALINE        ; Set CURLINE from DATALINE
.1a3cd0	85 1a		sta $081a	                STA CURLINE
.1a3cd2	a5 3e		lda $083e	                LDA DATALINE+2
.1a3cd4	85 1c		sta $081c	                STA CURLINE+2
.1a3cd6	e2 20		sep #$20	            SEP #$20
.1a3cd8	a7 00		lda [$0800]	                LDA [BIP]           ; Check character at BIP
.1a3cda	f0 53		beq $1a3d2f	                BEQ scan_DATA       ; EOL? scan for a DATA statement
.1a3cdc	c9 3a		cmp #$3a	                CMP #':'            ; Colon?
.1a3cde	f0 4f		beq $1a3d2f	                BEQ scan_DATA       ; ... scan for a DATA statement
.1a3ce0	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.1a3ce2	d0 03		bne $1a3ce7	                BNE skip_parse      ; No: skip leading WS and try to parse
.1a3ce4	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3ce7					skip_parse
.1a3ce7	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3cea	a7 00		lda [$0800]	                LDA [BIP]
.1a3cec	c9 22		cmp #$22	                CMP #CHAR_DQUOTE    ; Is it a quote?
.1a3cee	f0 4e		beq $1a3d3e	                BEQ read_string     ; Yes: process the string
.1a3cf0	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a3cf3	b0 4e		bcs $1a3d43	                BCS read_number     ; Yes: process the number
.1a3cf5					syntax_err
.1a3cf5	08		php		            PHP
.1a3cf6	c2 20		rep #$20	            REP #$20
.1a3cf8	48		pha		            PHA
.1a3cf9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3cfc	5b		tcd		            TCD
.1a3cfd	68		pla		            PLA
.1a3cfe	28		plp		            PLP
.1a3cff	e2 20		sep #$20	            SEP #$20
.1a3d01	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3d03	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3d07	c2 20		rep #$20	            REP #$20
.1a3d09	29 ff 00	and #$00ff	            AND #$00FF
.1a3d0c	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3d0f	e2 20		sep #$20	            SEP #$20
.1a3d11	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3d14					scan_start
.1a3d14	c2 20		rep #$20	            REP #$20
.1a3d16	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT    ; Point CURLINE to the first line
.1a3d19	85 1a		sta $081a	                STA CURLINE
.1a3d1b	a9 16 00	lda #$0016	                LDA #`BASIC_BOT
.1a3d1e	85 1c		sta $081c	                STA CURLINE+2
.1a3d20	18		clc		                CLC
.1a3d21	a5 1a		lda $081a	                LDA CURLINE         ; Point BIP to the first possible token
.1a3d23	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.1a3d26	85 00		sta $0800	                STA BIP
.1a3d28	a5 1c		lda $081c	                LDA CURLINE+2
.1a3d2a	69 00 00	adc #$0000	                ADC #0
.1a3d2d	85 02		sta $0802	                STA BIP+2
.1a3d2f					scan_data
.1a3d2f	e2 20		sep #$20	            SEP #$20
.1a3d31	a9 80		lda #$80	                LDA #$80            ; We don't want to process nesting
.1a3d33	85 35		sta $0835	                STA SKIPNEST
.1a3d35	a9 ab		lda #$ab	                LDA #TOK_DATA       ; We're looking for a DATA token
.1a3d37	85 37		sta $0837	                STA TARGETTOK
.1a3d39	20 95 1f	jsr $1a1f95	            JSR SKIPTOTOK
.1a3d3c	80 a9		bra $1a3ce7	                BRA skip_parse
.1a3d3e					read_string
.1a3d3e	20 39 1a	jsr $1a1a39	            JSR EVALSTRING
.1a3d41	80 03		bra $1a3d46	                BRA done
.1a3d43					read_number
.1a3d43	20 6e 19	jsr $1a196e	            JSR EVALNUMBER
.1a3d46					done
.1a3d46	c2 20		rep #$20	            REP #$20
.1a3d48	a5 00		lda $0800	                LDA BIP             ; Save BIP to DATABIP
.1a3d4a	85 38		sta $0838	                STA DATABIP
.1a3d4c	a5 02		lda $0802	                LDA BIP+2
.1a3d4e	85 3a		sta $083a	                STA DATABIP+2
.1a3d50	a5 1a		lda $081a	                LDA CURLINE         ; Save CURLINE to DATALINE
.1a3d52	85 3c		sta $083c	                STA DATALINE
.1a3d54	a5 1c		lda $081c	                LDA CURLINE+2
.1a3d56	85 3e		sta $083e	                STA DATALINE+2
.1a3d58	a5 44		lda $0844	                LDA SAVELINE        ; Restore CURLINE
.1a3d5a	85 1a		sta $081a	                STA CURLINE
.1a3d5c	a5 46		lda $0846	                LDA SAVELINE+2
.1a3d5e	85 1c		sta $081c	                STA CURLINE+2
.1a3d60	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.1a3d62	85 00		sta $0800	                STA BIP
.1a3d64	a5 42		lda $0842	                LDA SAVEBIP+2
.1a3d66	85 02		sta $0802	                STA BIP+2
.1a3d68	28		plp		                PLP
.1a3d69	60		rts		            RTS
.1a3d6a					S_DATA
.1a3d6a	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a3d6d	60		rts		            RTS
.1a3d6e					S_RESTORE
.1a3d6e	64 38		stz $0838	                STZ DATABIP         ; Just set DATABIP to 0
.1a3d70	64 3a		stz $083a	                STZ DATABIP+2       ; The next READ will move it to the first DATA
.1a3d72	64 3c		stz $083c	                STZ DATALINE        ; Set DATALINE to 0
.1a3d74	64 3e		stz $083e	                STZ DATALINE+2
.1a3d76	60		rts		            RTS
.1a3d77					S_CLS
.1a3d77	20 24 00	jsr $1a0024	            JSR CLSCREEN
.1a3d7a	60		rts		            RTS
.1a3d7b					S_POKEL
.1a3d7b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3d7e	c2 20		rep #$20	            REP #$20
.1a3d80	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a3d82	48		pha		                PHA
.1a3d83	a5 23		lda $0823	                LDA ARGUMENT1
.1a3d85	48		pha		                PHA
.1a3d86	e2 20		sep #$20	            SEP #$20
.1a3d88	a7 00		lda [$0800]	                LDA [BIP]
.1a3d8a	c9 2c		cmp #$2c	                CMP #','
.1a3d8c	d0 22		bne $1a3db0	                BNE syntax_err
.1a3d8e	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3d91	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3d94	c2 20		rep #$20	            REP #$20
.1a3d96	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a3d98	d0 35		bne $1a3dcf	                BNE range_err
.1a3d9a	68		pla		                PLA                 ; Pull the target address from the stack
.1a3d9b	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a3d9d	68		pla		                PLA
.1a3d9e	85 0a		sta $080a	                STA INDEX+2
.1a3da0	c2 20		rep #$20	            REP #$20
.1a3da2	a5 23		lda $0823	                LDA ARGUMENT1
.1a3da4	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a3da6	e2 20		sep #$20	            SEP #$20
.1a3da8	a0 02 00	ldy #$0002	                LDY #2
.1a3dab	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3dad	97 08		sta [$0808],y	                STA [INDEX],Y
.1a3daf	60		rts		            RTS
.1a3db0					syntax_err
.1a3db0	08		php		            PHP
.1a3db1	c2 20		rep #$20	            REP #$20
.1a3db3	48		pha		            PHA
.1a3db4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3db7	5b		tcd		            TCD
.1a3db8	68		pla		            PLA
.1a3db9	28		plp		            PLP
.1a3dba	e2 20		sep #$20	            SEP #$20
.1a3dbc	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3dbe	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3dc2	c2 20		rep #$20	            REP #$20
.1a3dc4	29 ff 00	and #$00ff	            AND #$00FF
.1a3dc7	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3dca	e2 20		sep #$20	            SEP #$20
.1a3dcc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3dcf					range_err
.1a3dcf	08		php		            PHP
.1a3dd0	c2 20		rep #$20	            REP #$20
.1a3dd2	48		pha		            PHA
.1a3dd3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3dd6	5b		tcd		            TCD
.1a3dd7	68		pla		            PLA
.1a3dd8	28		plp		            PLP
.1a3dd9	e2 20		sep #$20	            SEP #$20
.1a3ddb	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3ddd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3de1	c2 20		rep #$20	            REP #$20
.1a3de3	29 ff 00	and #$00ff	            AND #$00FF
.1a3de6	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3de9	e2 20		sep #$20	            SEP #$20
.1a3deb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3dee					S_POKEW
.1a3dee	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3df1	c2 20		rep #$20	            REP #$20
.1a3df3	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a3df5	48		pha		                PHA
.1a3df6	a5 23		lda $0823	                LDA ARGUMENT1
.1a3df8	48		pha		                PHA
.1a3df9	e2 20		sep #$20	            SEP #$20
.1a3dfb	a7 00		lda [$0800]	                LDA [BIP]
.1a3dfd	c9 2c		cmp #$2c	                CMP #','
.1a3dff	d0 19		bne $1a3e1a	                BNE syntax_err
.1a3e01	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3e04	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3e07	c2 20		rep #$20	            REP #$20
.1a3e09	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3e0b	d0 2c		bne $1a3e39	                BNE range_err
.1a3e0d	68		pla		                PLA                 ; Pull the target address from the stack
.1a3e0e	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a3e10	68		pla		                PLA
.1a3e11	85 0a		sta $080a	                STA INDEX+2
.1a3e13	c2 20		rep #$20	            REP #$20
.1a3e15	a5 23		lda $0823	                LDA ARGUMENT1
.1a3e17	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a3e19	60		rts		            RTS
.1a3e1a					syntax_err
.1a3e1a	08		php		            PHP
.1a3e1b	c2 20		rep #$20	            REP #$20
.1a3e1d	48		pha		            PHA
.1a3e1e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3e21	5b		tcd		            TCD
.1a3e22	68		pla		            PLA
.1a3e23	28		plp		            PLP
.1a3e24	e2 20		sep #$20	            SEP #$20
.1a3e26	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3e28	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3e2c	c2 20		rep #$20	            REP #$20
.1a3e2e	29 ff 00	and #$00ff	            AND #$00FF
.1a3e31	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3e34	e2 20		sep #$20	            SEP #$20
.1a3e36	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3e39					range_err
.1a3e39	08		php		            PHP
.1a3e3a	c2 20		rep #$20	            REP #$20
.1a3e3c	48		pha		            PHA
.1a3e3d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3e40	5b		tcd		            TCD
.1a3e41	68		pla		            PLA
.1a3e42	28		plp		            PLP
.1a3e43	e2 20		sep #$20	            SEP #$20
.1a3e45	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3e47	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3e4b	c2 20		rep #$20	            REP #$20
.1a3e4d	29 ff 00	and #$00ff	            AND #$00FF
.1a3e50	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3e53	e2 20		sep #$20	            SEP #$20
.1a3e55	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3e58					S_POKE
.1a3e58	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3e5b	c2 20		rep #$20	            REP #$20
.1a3e5d	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.1a3e5f	48		pha		                PHA
.1a3e60	a5 23		lda $0823	                LDA ARGUMENT1
.1a3e62	48		pha		                PHA
.1a3e63	e2 20		sep #$20	            SEP #$20
.1a3e65	a7 00		lda [$0800]	                LDA [BIP]
.1a3e67	c9 2c		cmp #$2c	                CMP #','
.1a3e69	d0 1f		bne $1a3e8a	                BNE syntax_err
.1a3e6b	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3e6e	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3e71	e2 20		sep #$20	            SEP #$20
.1a3e73	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Make sure the value is from 0 - 255
.1a3e75	d0 32		bne $1a3ea9	                BNE range_err
.1a3e77	c2 20		rep #$20	            REP #$20
.1a3e79	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3e7b	d0 2c		bne $1a3ea9	                BNE range_err
.1a3e7d	68		pla		                PLA                 ; Pull the target address from the stack
.1a3e7e	85 08		sta $0808	                STA INDEX           ; and into INDEX
.1a3e80	68		pla		                PLA
.1a3e81	85 0a		sta $080a	                STA INDEX+2
.1a3e83	e2 20		sep #$20	            SEP #$20
.1a3e85	a5 23		lda $0823	                LDA ARGUMENT1
.1a3e87	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.1a3e89	60		rts		            RTS
.1a3e8a					syntax_err
.1a3e8a	08		php		            PHP
.1a3e8b	c2 20		rep #$20	            REP #$20
.1a3e8d	48		pha		            PHA
.1a3e8e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3e91	5b		tcd		            TCD
.1a3e92	68		pla		            PLA
.1a3e93	28		plp		            PLP
.1a3e94	e2 20		sep #$20	            SEP #$20
.1a3e96	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3e98	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3e9c	c2 20		rep #$20	            REP #$20
.1a3e9e	29 ff 00	and #$00ff	            AND #$00FF
.1a3ea1	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3ea4	e2 20		sep #$20	            SEP #$20
.1a3ea6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3ea9					range_err
.1a3ea9	08		php		            PHP
.1a3eaa	c2 20		rep #$20	            REP #$20
.1a3eac	48		pha		            PHA
.1a3ead	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3eb0	5b		tcd		            TCD
.1a3eb1	68		pla		            PLA
.1a3eb2	28		plp		            PLP
.1a3eb3	e2 20		sep #$20	            SEP #$20
.1a3eb5	a9 09		lda #$09	            LDA #ERR_RANGE
.1a3eb7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3ebb	c2 20		rep #$20	            REP #$20
.1a3ebd	29 ff 00	and #$00ff	            AND #$00FF
.1a3ec0	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3ec3	e2 20		sep #$20	            SEP #$20
.1a3ec5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3ec8					S_STOP
.1a3ec8	08		php		            PHP
.1a3ec9	c2 20		rep #$20	            REP #$20
.1a3ecb	48		pha		            PHA
.1a3ecc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3ecf	5b		tcd		            TCD
.1a3ed0	68		pla		            PLA
.1a3ed1	28		plp		            PLP
.1a3ed2	e2 20		sep #$20	            SEP #$20
.1a3ed4	a9 01		lda #$01	            LDA #ERR_BREAK
.1a3ed6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3eda	c2 20		rep #$20	            REP #$20
.1a3edc	29 ff 00	and #$00ff	            AND #$00FF
.1a3edf	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3ee2	e2 20		sep #$20	            SEP #$20
.1a3ee4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3ee7					S_REM
.1a3ee7	08		php		                PHP
.1a3ee8	e2 20		sep #$20	            SEP #$20
.1a3eea	a7 00		lda [$0800]	rem_loop        LDA [BIP]
.1a3eec	f0 05		beq $1a3ef3	                BEQ done
.1a3eee	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3ef1	80 f7		bra $1a3eea	                BRA rem_loop
.1a3ef3	28		plp		done            PLP
.1a3ef4	60		rts		            RTS
.1a3ef5					S_EXIT
.1a3ef5	08		php		                PHP
.1a3ef6	28		plp		                PLP
.1a3ef7	60		rts		            RTS
.1a3ef8					S_DO
.1a3ef8	08		php		                PHP
.1a3ef9	28		plp		                PLP
.1a3efa	60		rts		            RTS
.0000					DO_RECORD
>0000					BIP             .dword  ?
>0004					CURLINE         .dword  ?
.1a3efb					S_LOOP
.1a3efb	08		php		                PHP
.1a3efc	28		plp		                PLP
.1a3efd	60		rts		            RTS
.1a3efe					S_FOR
.1a3efe	08		php		                PHP
.1a3eff	c2 20		rep #$20	            REP #$20
.1a3f01	a5 1c		lda $081c	                LDA CURLINE+2
.1a3f03	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f06	a5 1a		lda $081a	                LDA CURLINE
.1a3f08	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f0b	a5 02		lda $0802	                LDA BIP+2           ; Save current BIP
.1a3f0d	48		pha		                PHA
.1a3f0e	a5 00		lda $0800	                LDA BIP
.1a3f10	48		pha		                PHA
.1a3f11	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a3f14	a5 02		lda $0802	                LDA BIP+2           ; Save the BIP for the next statement to the RETURN stack
.1a3f16	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f19	a5 00		lda $0800	                LDA BIP
.1a3f1b	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f1e	68		pla		                PLA                 ; Restore the original BIP
.1a3f1f	85 00		sta $0800	                STA BIP
.1a3f21	68		pla		                PLA
.1a3f22	85 02		sta $0802	                STA BIP+2
.1a3f24	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3f27					get_name
.1a3f27	20 51 51	jsr $1a5151	            JSR VAR_FINDNAME
.1a3f2a	b0 1f		bcs $1a3f4b	                BCS push_name       ; If we didn't find a name, thrown an error
.1a3f2c	08		php		            PHP
.1a3f2d	c2 20		rep #$20	            REP #$20
.1a3f2f	48		pha		            PHA
.1a3f30	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3f33	5b		tcd		            TCD
.1a3f34	68		pla		            PLA
.1a3f35	28		plp		            PLP
.1a3f36	e2 20		sep #$20	            SEP #$20
.1a3f38	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a3f3a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3f3e	c2 20		rep #$20	            REP #$20
.1a3f40	29 ff 00	and #$00ff	            AND #$00FF
.1a3f43	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3f46	e2 20		sep #$20	            SEP #$20
.1a3f48	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a3f4b					push_name
.1a3f4b	e2 20		sep #$20	            SEP #$20
.1a3f4d	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; To the return stack
.1a3f4f	20 5d 1c	jsr $1a1c5d	            JSR PHRETURNB
.1a3f52	a5 e9		lda $08e9	                LDA TOFIND+2
.1a3f54	20 5d 1c	jsr $1a1c5d	            JSR PHRETURNB
.1a3f57	c2 20		rep #$20	            REP #$20
.1a3f59	a5 e7		lda $08e7	                LDA TOFIND
.1a3f5b	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f5e					else
.1a3f5e	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a3f61	e2 20		sep #$20	            SEP #$20
.1a3f63	a7 00		lda [$0800]	                LDA [BIP]
.1a3f65	c9 8a		cmp #$8a	                CMP #TOK_EQ
.1a3f67	d0 6a		bne $1a3fd3	                BNE syntax_err      ; If not found: signal an syntax error
.1a3f69	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Verify type of variable
.1a3f6b	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; Is it integer?
.1a3f6d	f0 04		beq $1a3f73	                BEQ process_initial ; Yes: it's ok
.1a3f6f	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; Is it floating point?
.1a3f71	f0 00		beq $1a3f73	                BEQ process_initial ; Yes: it's ok
.1a3f73					process_initial
.1a3f73	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3f76	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3f79	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a3f7c	e2 20		sep #$20	            SEP #$20
.1a3f7e	a9 9c		lda #$9c	                LDA #TOK_TO         ; Expect the next token to be TO
.1a3f80	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a3f83	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3f86	c2 20		rep #$20	            REP #$20
.1a3f88	a5 27		lda $0827	                LDA ARGTYPE1
.1a3f8a	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f8d	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3f8f	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f92	a5 23		lda $0823	                LDA ARGUMENT1
.1a3f94	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3f97	e2 20		sep #$20	            SEP #$20
.1a3f99	a9 9d		lda #$9d	                LDA #TOK_STEP
.1a3f9b	85 37		sta $0837	                STA TARGETTOK
.1a3f9d	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a3fa0	90 1b		bcc $1a3fbd	                BCC default_inc     ; Not found: set a default increment of 1
.1a3fa2	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a3fa5	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a3fa8	e2 20		sep #$20	            SEP #$20
.1a3faa	a5 27		lda $0827	                LDA ARGTYPE1        ; Push the result as the increment
.1a3fac	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3faf	c2 20		rep #$20	            REP #$20
.1a3fb1	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a3fb3	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3fb6	a5 23		lda $0823	                LDA ARGUMENT1
.1a3fb8	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3fbb	80 14		bra $1a3fd1	                BRA done
.1a3fbd					default_inc
.1a3fbd	c2 20		rep #$20	            REP #$20
.1a3fbf	a9 00 00	lda #$0000	                LDA #TYPE_INTEGER
.1a3fc2	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3fc5	a9 00 00	lda #$0000	                LDA #0
.1a3fc8	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3fcb	a9 01 00	lda #$0001	                LDA #1
.1a3fce	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a3fd1	28		plp		done            PLP
.1a3fd2	60		rts		            RTS
.1a3fd3					syntax_err
.1a3fd3	08		php		            PHP
.1a3fd4	c2 20		rep #$20	            REP #$20
.1a3fd6	48		pha		            PHA
.1a3fd7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a3fda	5b		tcd		            TCD
.1a3fdb	68		pla		            PLA
.1a3fdc	28		plp		            PLP
.1a3fdd	e2 20		sep #$20	            SEP #$20
.1a3fdf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a3fe1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a3fe5	c2 20		rep #$20	            REP #$20
.1a3fe7	29 ff 00	and #$00ff	            AND #$00FF
.1a3fea	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a3fed	e2 20		sep #$20	            SEP #$20
.1a3fef	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.0000					FOR_RECORD
>0000					INCREMENT       .dword  ?
>0004					INCTYPE         .word   ?
>0006					FINAL           .dword  ?
>000a					FINALTYPE       .word   ?
>000c					VARIBLE         .dword  ?
>0010					VARTYPE         .word   ?
>0012					BIP             .dword  ?
>0016					CURLINE         .dword  ?
.1a3ff2					S_NEXT
.1a3ff2	08		php		                PHP
.1a3ff3	8b		phb		                PHB
.1a3ff4	08		php		            PHP
.1a3ff5	e2 20		sep #$20	            SEP #$20
.1a3ff7	48		pha		            PHA
.1a3ff8	a9 00		lda #$00	            LDA #0
.1a3ffa	48		pha		            PHA
.1a3ffb	ab		plb		            PLB
.1a3ffc	68		pla		            PLA
.1a3ffd	28		plp		            PLP
.1a3ffe	08		php		            PHP
.1a3fff	c2 20		rep #$20	            REP #$20
.1a4001	48		pha		            PHA
.1a4002	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a4005	5b		tcd		            TCD
.1a4006	68		pla		            PLA
.1a4007	28		plp		            PLP
.1a4008	c2 30		rep #$30	            REP #$30
.1a400a	a4 33		ldy $0833	                LDY RETURNSP                    ; Y := pointer to first byte of the FOR record
.1a400c	c8		iny		                INY                             ; RETURNSP points to the first free slot, so move up 2 bytes
.1a400d	c8		iny		                INY
.1a400e	c2 20		rep #$20	            REP #$20
.1a4010	b9 0c 00	lda $000c,y	                LDA #FOR_RECORD.VARIBLE,B,Y     ; TOFIND := FOR_RECORD.VARIABLE
.1a4013	85 e7		sta $08e7	                STA TOFIND
.1a4015	b9 0e 00	lda $000e,y	                LDA #FOR_RECORD.VARIBLE+2,B,Y
.1a4018	e2 20		sep #$20	            SEP #$20
.1a401a	85 e9		sta $08e9	                STA TOFIND+2
.1a401c	b9 10 00	lda $0010,y	                LDA #FOR_RECORD.VARTYPE,B,Y
.1a401f	85 ea		sta $08ea	                STA TOFINDTYPE
.1a4021	c2 20		rep #$20	            REP #$20
.1a4023	5a		phy		                PHY
.1a4024	20 52 4f	jsr $1a4f52	            JSR VAR_REF
.1a4027	7a		ply		                PLY
.1a4028	c2 20		rep #$20	            REP #$20
.1a402a	b9 00 00	lda $0000,y	                LDA #FOR_RECORD.INCREMENT,B,Y   ; ARGUMENT2 := FOR_RECORD.INCREMENT
.1a402d	85 29		sta $0829	                STA ARGUMENT2
.1a402f	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y
.1a4032	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4034	e2 20		sep #$20	            SEP #$20
.1a4036	b9 04 00	lda $0004,y	                LDA #FOR_RECORD.INCTYPE,B,Y
.1a4039	85 2d		sta $082d	                STA ARGTYPE2
.1a403b	c2 20		rep #$20	            REP #$20
.1a403d	5a		phy		                PHY
.1a403e	20 fd 25	jsr $1a25fd	            JSR OP_PLUS
.1a4041	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a4044	7a		ply		                PLY
.1a4045	c2 20		rep #$20	            REP #$20
.1a4047	b9 06 00	lda $0006,y	                LDA #FOR_RECORD.FINAL,B,Y       ; ARGUMENT2 := FOR_RECORD.FINAL
.1a404a	85 29		sta $0829	                STA ARGUMENT2
.1a404c	b9 08 00	lda $0008,y	                LDA #FOR_RECORD.FINAL+2,B,Y
.1a404f	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4051	e2 20		sep #$20	            SEP #$20
.1a4053	b9 0a 00	lda $000a,y	                LDA #FOR_RECORD.FINALTYPE,B,Y
.1a4056	85 2d		sta $082d	                STA ARGTYPE2
.1a4058	c2 20		rep #$20	            REP #$20
.1a405a	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y ; Check the increment's sign
.1a405d	30 0a		bmi $1a4069	                BMI going_down
.1a405f					going_up
.1a405f	20 4c 28	jsr $1a284c	            JSR OP_LTE
.1a4062	20 cc 04	jsr $1a04cc	            JSR IS_ARG1_Z
.1a4065	f0 28		beq $1a408f	                BEQ end_loop                    ; No: end the loop
.1a4067	80 08		bra $1a4071	                BRA loop_back                   ; Yes: loop back
.1a4069					going_down
.1a4069	20 0c 28	jsr $1a280c	            JSR OP_GTE
.1a406c	20 cc 04	jsr $1a04cc	            JSR IS_ARG1_Z
.1a406f	f0 1e		beq $1a408f	                BEQ end_loop                    ; No: end the loop
.1a4071					loop_back
.1a4071	c2 20		rep #$20	            REP #$20
.1a4073	b9 12 00	lda $0012,y	                LDA #FOR_RECORD.BIP,B,Y
.1a4076	85 00		sta $0800	                STA BIP
.1a4078	b9 14 00	lda $0014,y	                LDA #FOR_RECORD.BIP+2,B,Y
.1a407b	85 02		sta $0802	                STA BIP+2
.1a407d	b9 16 00	lda $0016,y	                LDA #FOR_RECORD.CURLINE,B,Y     ; CURLINE := FOR_RECORD.CURLINE
.1a4080	85 1a		sta $081a	                STA CURLINE
.1a4082	b9 18 00	lda $0018,y	                LDA #FOR_RECORD.CURLINE+2,B,Y
.1a4085	85 1c		sta $081c	                STA CURLINE+2
.1a4087	e2 20		sep #$20	            SEP #$20
.1a4089	a9 03		lda #$03	                LDA #EXEC_RETURN
.1a408b	85 dc		sta $08dc	                STA EXECACTION
.1a408d	80 17		bra $1a40a6	                BRA done
.1a408f					end_loop
.1a408f	a2 23 08	ldx #$0823	                LDX #ARGUMENT1
.1a4092	20 4d 18	jsr $1a184d	            JSR PLARGUMENT
.1a4095	c2 20		rep #$20	            REP #$20
.1a4097	18		clc		                CLC
.1a4098	a5 33		lda $0833	                LDA RETURNSP
.1a409a	69 1a 00	adc #$001a	                ADC #size(FOR_RECORD)           ; Move pointer by number of bytes in a FOR record
.1a409d	85 33		sta $0833	                STA RETURNSP
.1a409f	a5 35		lda $0835	                LDA RETURNSP+2
.1a40a1	69 00 00	adc #$0000	                ADC #0
.1a40a4	85 35		sta $0835	                STA RETURNSP+2
.1a40a6	ab		plb		done            PLB
.1a40a7	28		plp		                PLP
.1a40a8	60		rts		            RTS
.1a40a9					S_GOSUB
.1a40a9	08		php		                PHP
.1a40aa	a5 1a		lda $081a	                LDA CURLINE                 ; Save the current line for later
.1a40ac	48		pha		                PHA
.1a40ad	a5 1c		lda $081c	                LDA CURLINE+2
.1a40af	48		pha		                PHA
.1a40b0	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a40b3	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a40b6	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.1a40b8	f0 26		beq $1a40e0	                BEQ syntax_err              ; If 0, no number was found... syntax error
.1a40ba	20 3d 22	jsr $1a223d	            JSR FINDLINE
.1a40bd	90 42		bcc $1a4101	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a40bf	e2 20		sep #$20	            SEP #$20
.1a40c1	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a40c3	85 dc		sta $08dc	                STA EXECACTION
.1a40c5	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a40c8	c2 20		rep #$20	            REP #$20
.1a40ca	68		pla		                PLA                         ; Save the old value of CURLINE to the RETURN stack
.1a40cb	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a40ce	68		pla		                PLA
.1a40cf	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a40d2	a5 02		lda $0802	                LDA BIP+2                   ; Save the BASIC Instruction Pointer to the RETURN stack
.1a40d4	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a40d7	a5 00		lda $0800	                LDA BIP
.1a40d9	20 46 1c	jsr $1a1c46	            JSR PHRETURN
.1a40dc	e6 31		inc $0831	                INC GOSUBDEPTH              ; Increase the count of GOSUBs on the stack
.1a40de	28		plp		                PLP
.1a40df	60		rts		            RTS
.1a40e0	68		pla		syntax_err      PLA
.1a40e1	68		pla		                PLA
.1a40e2	08		php		            PHP
.1a40e3	c2 20		rep #$20	            REP #$20
.1a40e5	48		pha		            PHA
.1a40e6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a40e9	5b		tcd		            TCD
.1a40ea	68		pla		            PLA
.1a40eb	28		plp		            PLP
.1a40ec	e2 20		sep #$20	            SEP #$20
.1a40ee	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a40f0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a40f4	c2 20		rep #$20	            REP #$20
.1a40f6	29 ff 00	and #$00ff	            AND #$00FF
.1a40f9	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a40fc	e2 20		sep #$20	            SEP #$20
.1a40fe	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4101	68		pla		not_found       PLA
.1a4102	68		pla		                PLA
.1a4103	08		php		            PHP
.1a4104	c2 20		rep #$20	            REP #$20
.1a4106	48		pha		            PHA
.1a4107	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a410a	5b		tcd		            TCD
.1a410b	68		pla		            PLA
.1a410c	28		plp		            PLP
.1a410d	e2 20		sep #$20	            SEP #$20
.1a410f	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a4111	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4115	c2 20		rep #$20	            REP #$20
.1a4117	29 ff 00	and #$00ff	            AND #$00FF
.1a411a	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a411d	e2 20		sep #$20	            SEP #$20
.1a411f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4122					S_RETURN
.1a4122	08		php		                PHP
.1a4123	c2 30		rep #$30	            REP #$30
.1a4125	a5 31		lda $0831	                LDA GOSUBDEPTH              ; Check that there is at least on GOSUB on the stack
.1a4127	f0 1e		beq $1a4147	                BEQ underflow               ; No? It's a stack underflow error
.1a4129	20 68 1c	jsr $1a1c68	            JSR PLRETURN
.1a412c	85 00		sta $0800	                STA BIP
.1a412e	20 68 1c	jsr $1a1c68	            JSR PLRETURN
.1a4131	85 02		sta $0802	                STA BIP+2
.1a4133	20 68 1c	jsr $1a1c68	            JSR PLRETURN
.1a4136	85 1a		sta $081a	                STA CURLINE
.1a4138	20 68 1c	jsr $1a1c68	            JSR PLRETURN
.1a413b	85 1c		sta $081c	                STA CURLINE+2
.1a413d	c6 31		dec $0831	                DEC GOSUBDEPTH              ; Indicate we've popped that GOSUB off the stack
.1a413f	e2 20		sep #$20	            SEP #$20
.1a4141	a9 03		lda #$03	                LDA #EXEC_RETURN
.1a4143	85 dc		sta $08dc	                STA EXECACTION
.1a4145	28		plp		                PLP
.1a4146	60		rts		            RTS
.1a4147					underflow
.1a4147	08		php		            PHP
.1a4148	c2 20		rep #$20	            REP #$20
.1a414a	48		pha		            PHA
.1a414b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a414e	5b		tcd		            TCD
.1a414f	68		pla		            PLA
.1a4150	28		plp		            PLP
.1a4151	e2 20		sep #$20	            SEP #$20
.1a4153	a9 07		lda #$07	            LDA #ERR_STACKUNDER
.1a4155	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4159	c2 20		rep #$20	            REP #$20
.1a415b	29 ff 00	and #$00ff	            AND #$00FF
.1a415e	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4161	e2 20		sep #$20	            SEP #$20
.1a4163	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4166					S_IF
.1a4166	08		php		                PHP
.1a4167	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a416a	20 cc 04	jsr $1a04cc	            JSR IS_ARG1_Z
.1a416d	f0 1c		beq $1a418b	                BEQ is_false                ; If so, handle the FALSE case
.1a416f	e2 20		sep #$20	            SEP #$20
.1a4171	a9 97		lda #$97	                LDA #TOK_THEN               ; Verify that the next token is THEN and eat it
.1a4173	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4176	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a4179	20 cc 04	jsr $1a04cc	            JSR IS_ARG1_Z
.1a417c	f0 12		beq $1a4190	                BEQ syntax_err              ; If not, we have a syntax error
.1a417e	20 3d 22	jsr $1a223d	            JSR FINDLINE
.1a4181	90 2c		bcc $1a41af	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a4183	e2 20		sep #$20	            SEP #$20
.1a4185	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a4187	85 dc		sta $08dc	                STA EXECACTION
.1a4189	80 03		bra $1a418e	                BRA done
.1a418b					is_false
.1a418b	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a418e	28		plp		done            PLP
.1a418f	60		rts		            RTS
.1a4190					syntax_err
.1a4190	08		php		            PHP
.1a4191	c2 20		rep #$20	            REP #$20
.1a4193	48		pha		            PHA
.1a4194	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4197	5b		tcd		            TCD
.1a4198	68		pla		            PLA
.1a4199	28		plp		            PLP
.1a419a	e2 20		sep #$20	            SEP #$20
.1a419c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a419e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a41a2	c2 20		rep #$20	            REP #$20
.1a41a4	29 ff 00	and #$00ff	            AND #$00FF
.1a41a7	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a41aa	e2 20		sep #$20	            SEP #$20
.1a41ac	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a41af					not_found
.1a41af	08		php		            PHP
.1a41b0	c2 20		rep #$20	            REP #$20
.1a41b2	48		pha		            PHA
.1a41b3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a41b6	5b		tcd		            TCD
.1a41b7	68		pla		            PLA
.1a41b8	28		plp		            PLP
.1a41b9	e2 20		sep #$20	            SEP #$20
.1a41bb	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a41bd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a41c1	c2 20		rep #$20	            REP #$20
.1a41c3	29 ff 00	and #$00ff	            AND #$00FF
.1a41c6	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a41c9	e2 20		sep #$20	            SEP #$20
.1a41cb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a41ce					S_END
.1a41ce	08		php		                PHP
.1a41cf	e2 20		sep #$20	            SEP #$20
.1a41d1	a9 01		lda #$01	                LDA #EXEC_STOP
.1a41d3	85 dc		sta $08dc	                STA EXECACTION
.1a41d5	28		plp		                PLP
.1a41d6	60		rts		            RTS
.1a41d7					S_GOTO
.1a41d7	08		php		                PHP
.1a41d8	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a41db	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a41de	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.1a41e0	f0 0d		beq $1a41ef	                BEQ syntax_err              ; If 0, no number was found... syntax error
.1a41e2	20 3d 22	jsr $1a223d	            JSR FINDLINE
.1a41e5	90 27		bcc $1a420e	                BCC not_found               ; If not found... LINE NOT FOUND error
.1a41e7	e2 20		sep #$20	            SEP #$20
.1a41e9	a9 02		lda #$02	                LDA #EXEC_GOTO
.1a41eb	85 dc		sta $08dc	                STA EXECACTION
.1a41ed	28		plp		                PLP
.1a41ee	60		rts		            RTS
.1a41ef					syntax_err
.1a41ef	08		php		            PHP
.1a41f0	c2 20		rep #$20	            REP #$20
.1a41f2	48		pha		            PHA
.1a41f3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a41f6	5b		tcd		            TCD
.1a41f7	68		pla		            PLA
.1a41f8	28		plp		            PLP
.1a41f9	e2 20		sep #$20	            SEP #$20
.1a41fb	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a41fd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4201	c2 20		rep #$20	            REP #$20
.1a4203	29 ff 00	and #$00ff	            AND #$00FF
.1a4206	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4209	e2 20		sep #$20	            SEP #$20
.1a420b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a420e					not_found
.1a420e	08		php		            PHP
.1a420f	c2 20		rep #$20	            REP #$20
.1a4211	48		pha		            PHA
.1a4212	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4215	5b		tcd		            TCD
.1a4216	68		pla		            PLA
.1a4217	28		plp		            PLP
.1a4218	e2 20		sep #$20	            SEP #$20
.1a421a	a9 06		lda #$06	            LDA #ERR_NOLINE
.1a421c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4220	c2 20		rep #$20	            REP #$20
.1a4222	29 ff 00	and #$00ff	            AND #$00FF
.1a4225	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4228	e2 20		sep #$20	            SEP #$20
.1a422a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a422d					S_CLR
.1a422d	20 ef 17	jsr $1a17ef	            JSR INITEVALSP
.1a4230	20 38 0f	jsr $1a0f38	            JSR INITHEAP
.1a4233	20 51 4e	jsr $1a4e51	            JSR INITVARS
.1a4236	60		rts		            RTS
.1a4237					S_LET
.1a4237	08		php		                PHP
.1a4238	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.1a423a	10 03		bpl $1a423f	                BPL get_name        ; If it's not a token, try to find the variable name
.1a423c	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a423f					get_name
.1a423f	20 51 51	jsr $1a5151	            JSR VAR_FINDNAME
.1a4242	b0 03		bcs $1a4247	                BCS check_array     ; If we didn't find a name, thrown an error
.1a4244	4c ae 42	jmp $1a42ae	                JMP syntax_err
.1a4247					check_array
.1a4247	e2 20		sep #$20	            SEP #$20
.1a4249	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a424c	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it a "("
.1a424e	d0 0e		bne $1a425e	                BNE get_value       ; No: it's a scalar assignment, look for the "="
.1a4250	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4252	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4255	a9 00		lda #$00	                LDA #0
.1a4257	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Blank out the array index buffer
.1a425b	20 71 19	jsr $1a1971	            JSR ARR_GETIDX
.1a425e					get_value
.1a425e	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a4261	e2 20		sep #$20	            SEP #$20
.1a4263	a7 00		lda [$0800]	                LDA [BIP]
.1a4265	c9 8a		cmp #$8a	                CMP #TOK_EQ
.1a4267	f0 03		beq $1a426c	                BEQ found_eq        ; If not found: signal an syntax error
.1a4269	4c ae 42	jmp $1a42ae	                JMP syntax_err
.1a426c					found_eq
.1a426c	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a426f	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Save the variable name for later
.1a4271	48		pha		                PHA                 ; (it will get over-written by variable references)
.1a4272	a5 e9		lda $08e9	                LDA TOFIND+2
.1a4274	48		pha		                PHA
.1a4275	a5 e8		lda $08e8	                LDA TOFIND+1
.1a4277	48		pha		                PHA
.1a4278	a5 e7		lda $08e7	                LDA TOFIND
.1a427a	48		pha		                PHA
.1a427b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a427e	68		pla		                PLA                 ; Restore the variable name
.1a427f	85 e7		sta $08e7	                STA TOFIND
.1a4281	68		pla		                PLA
.1a4282	85 e8		sta $08e8	                STA TOFIND+1
.1a4284	68		pla		                PLA
.1a4285	85 e9		sta $08e9	                STA TOFIND+2
.1a4287	68		pla		                PLA
.1a4288	85 ea		sta $08ea	                STA TOFINDTYPE
.1a428a	29 80		and #$80	                AND #$80            ; Is it an array we're setting?
.1a428c	f0 1b		beq $1a42a9	                BEQ set_scalar      ; No: do a scalar variable set
.1a428e	20 c4 4e	jsr $1a4ec4	            JSR VAR_FIND
.1a4291	90 3a		bcc $1a42cd	                BCC notfound_err
.1a4293	c2 20		rep #$20	            REP #$20
.1a4295	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a4298	b7 08		lda [$0808],y	                LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.1a429a	85 c0		sta $08c0	                STA CURRBLOCK
.1a429c	e2 20		sep #$20	            SEP #$20
.1a429e	c8		iny		                INY
.1a429f	c8		iny		                INY
.1a42a0	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a42a2	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a42a4	20 52 63	jsr $1a6352	            JSR ARR_SET
.1a42a7	80 03		bra $1a42ac	                BRA done            ; and we're finished!
.1a42a9					set_scalar
.1a42a9	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a42ac					done
.1a42ac	28		plp		                PLP
.1a42ad	60		rts		            RTS
.1a42ae					syntax_err
.1a42ae	08		php		            PHP
.1a42af	c2 20		rep #$20	            REP #$20
.1a42b1	48		pha		            PHA
.1a42b2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a42b5	5b		tcd		            TCD
.1a42b6	68		pla		            PLA
.1a42b7	28		plp		            PLP
.1a42b8	e2 20		sep #$20	            SEP #$20
.1a42ba	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a42bc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a42c0	c2 20		rep #$20	            REP #$20
.1a42c2	29 ff 00	and #$00ff	            AND #$00FF
.1a42c5	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a42c8	e2 20		sep #$20	            SEP #$20
.1a42ca	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a42cd					notfound_err
.1a42cd	08		php		            PHP
.1a42ce	c2 20		rep #$20	            REP #$20
.1a42d0	48		pha		            PHA
.1a42d1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a42d4	5b		tcd		            TCD
.1a42d5	68		pla		            PLA
.1a42d6	28		plp		            PLP
.1a42d7	e2 20		sep #$20	            SEP #$20
.1a42d9	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a42db	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a42df	c2 20		rep #$20	            REP #$20
.1a42e1	29 ff 00	and #$00ff	            AND #$00FF
.1a42e4	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a42e7	e2 20		sep #$20	            SEP #$20
.1a42e9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a42ec					S_PRINT
.1a42ec	08		php		                PHP
.1a42ed	e2 20		sep #$20	            SEP #$20
.1a42ef	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a42f2	c9 00		cmp #$00	                CMP #0              ; Is it EOL or :?
.1a42f4	f0 6d		beq $1a4363	                BEQ pr_nl_exit      ; Yes: just print return
.1a42f6					pr_loop
.1a42f6	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a42f9	e2 20		sep #$20	            SEP #$20
.1a42fb	a5 27		lda $0827	                LDA ARGTYPE1        ; Get the type of the result
.1a42fd	c9 ff		cmp #$ff	                CMP #TYPE_NAV       ; Is is NAV?
.1a42ff	f0 1b		beq $1a431c	                BEQ check_nl        ; Yes: we are probably just printing a newline
.1a4301	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string?
.1a4303	d0 05		bne $1a430a	                BNE check_int       ; No: check to see if it's an integer
.1a4305	20 68 43	jsr $1a4368	            JSR PR_STRING
.1a4308	80 12		bra $1a431c	                BRA check_nl
.1a430a	c9 00		cmp #$00	check_int       CMP #TYPE_INTEGER   ; Is it an integer?
.1a430c	d0 05		bne $1a4313	                BNE check_float     ; No: check to see if it is a float
.1a430e	20 88 43	jsr $1a4388	            JSR PR_INTEGER
.1a4311	80 09		bra $1a431c	                BRA check_nl
.1a4313	c9 01		cmp #$01	check_float     CMP #TYPE_FLOAT     ; Is it a float?
.1a4315	d0 4f		bne $1a4366	                BNE done            ; No: just quit
.1a4317	20 9b 43	jsr $1a439b	            JSR PR_FLOAT
.1a431a	80 00		bra $1a431c	                BRA check_nl
.1a431c					check_nl
.1a431c	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a431f	a7 00		lda [$0800]	                LDA [BIP]
.1a4321	f0 40		beq $1a4363	                BEQ pr_nl_exit      ; If it's nul, print a newline and return
.1a4323	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.1a4325	f0 3c		beq $1a4363	                BEQ pr_nl_exit      ; print a newline and return
.1a4327	c9 2c		cmp #$2c	                CMP #','            ; If it's a comma
.1a4329	f0 23		beq $1a434e	                BEQ pr_comma        ; Print a TAB and try another expression
.1a432b	c9 3b		cmp #$3b	                CMP #';'            ; If it's a semicolon...
.1a432d	f0 24		beq $1a4353	                BEQ is_more         ; Print nothing, and try another expression
.1a432f	08		php		            PHP
.1a4330	c2 20		rep #$20	            REP #$20
.1a4332	48		pha		            PHA
.1a4333	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4336	5b		tcd		            TCD
.1a4337	68		pla		            PLA
.1a4338	28		plp		            PLP
.1a4339	e2 20		sep #$20	            SEP #$20
.1a433b	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a433d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4341	c2 20		rep #$20	            REP #$20
.1a4343	29 ff 00	and #$00ff	            AND #$00FF
.1a4346	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4349	e2 20		sep #$20	            SEP #$20
.1a434b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a434e	a9 09		lda #$09	pr_comma        LDA #CHAR_TAB       ; Print a TAB
.1a4350	20 18 00	jsr $1a0018	            JSR PRINTC
.1a4353					is_more
.1a4353	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4356	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a4359	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.1a435b	f0 09		beq $1a4366	                BEQ done            ; If it's NULL, return without printing a newline
.1a435d	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.1a435f	f0 05		beq $1a4366	                BEQ done            ; ... return without printing a newline
.1a4361	80 93		bra $1a42f6	                BRA pr_loop         ; Otherwise, we should have another expression, try to handle it
.1a4363					pr_nl_exit
.1a4363	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a4366	28		plp		done            PLP
.1a4367	60		rts		            RTS
.1a4368					PR_STRING
.1a4368	08		php		                PHP
.1a4369	8b		phb		                PHB
.1a436a	08		php		            PHP
.1a436b	c2 20		rep #$20	            REP #$20
.1a436d	48		pha		            PHA
.1a436e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a4371	5b		tcd		            TCD
.1a4372	68		pla		            PLA
.1a4373	28		plp		            PLP
.1a4374	e2 20		sep #$20	            SEP #$20
.1a4376	c2 10		rep #$10	            REP #$10
.1a4378	a0 00 00	ldy #$0000	                LDY #0
.1a437b	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y
.1a437d	f0 06		beq $1a4385	                BEQ done
.1a437f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a4382	c8		iny		                INY
.1a4383	80 f6		bra $1a437b	                BRA loop
.1a4385	ab		plb		done            PLB
.1a4386	28		plp		                PLP
.1a4387	60		rts		            RTS
.1a4388					PR_INTEGER
.1a4388	08		php		                PHP
.1a4389	c2 20		rep #$20	            REP #$20
.1a438b	20 ed 13	jsr $1a13ed	            JSR ITOS
.1a438e	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a4390	85 23		sta $0823	                STA ARGUMENT1
.1a4392	a5 18		lda $0818	                LDA STRPTR+2
.1a4394	85 25		sta $0825	                STA ARGUMENT1+2
.1a4396	20 68 43	jsr $1a4368	            JSR PR_STRING
.1a4399	28		plp		                PLP
.1a439a	60		rts		            RTS
.1a439b					PR_FLOAT
.1a439b	08		php		                PHP
.1a439c	20 1a 5b	jsr $1a5b1a	            JSR FTOS
.1a439f	c2 20		rep #$20	            REP #$20
.1a43a1	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.1a43a3	85 23		sta $0823	                STA ARGUMENT1
.1a43a5	a5 18		lda $0818	                LDA STRPTR+2
.1a43a7	85 25		sta $0825	                STA ARGUMENT1+2
.1a43a9	20 68 43	jsr $1a4368	            JSR PR_STRING
.1a43ac	28		plp		                PLP
.1a43ad	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\functions.s


;******  Processing file: src\C256/functions_c256.s

.1a43ae					BCD2STR
.1a43ae	08		php		            PHP
.1a43af	e2 20		sep #$20	            SEP #$20
.1a43b1	85 b5		sta $08b5	            STA SAVE_A
.1a43b3	4a		lsr a		            LSR A
.1a43b4	4a		lsr a		            LSR A
.1a43b5	4a		lsr a		            LSR A
.1a43b6	4a		lsr a		            LSR A
.1a43b7	29 0f		and #$0f	            AND #$0F
.1a43b9	18		clc		            CLC
.1a43ba	69 30		adc #$30	            ADC #'0'
.1a43bc	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a43be	c8		iny		            INY
.1a43bf	a5 b5		lda $08b5	            LDA SAVE_A
.1a43c1	29 0f		and #$0f	            AND #$0F
.1a43c3	18		clc		            CLC
.1a43c4	69 30		adc #$30	            ADC #'0'
.1a43c6	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a43c8	c8		iny		            INY
.1a43c9	28		plp		            PLP
.1a43ca	60		rts		            RTS
.1a43cb					F_GETDATE
.1a43cb	e2 20		sep #$20	            SEP #$20
.1a43cd	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a43cf	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a43d2	08		php		            PHP
.1a43d3	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a43d6	e2 20		sep #$20	            SEP #$20
.1a43d8	c2 10		rep #$10	            REP #$10
.1a43da	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a43de	09 08		ora #$08	            ORA #%00001000
.1a43e0	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a43e4	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a43e7	a0 00 00	ldy #$0000	            LDY #0
.1a43ea	af 06 08 af	lda $af0806	            LDA @lRTC_DAY           ; Write the day of the month
.1a43ee	20 ae 43	jsr $1a43ae	            JSR BCD2STR
.1a43f1	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.1a43f3	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a43f5	c8		iny		            INY
.1a43f6	af 09 08 af	lda $af0809	            LDA @lRTC_MONTH         ; Write the month
.1a43fa	20 ae 43	jsr $1a43ae	            JSR BCD2STR
.1a43fd	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.1a43ff	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4401	c8		iny		            INY
.1a4402	af 0f 08 af	lda $af080f	            LDA @lRTC_CENTURY       ; Write the year
.1a4406	20 ae 43	jsr $1a43ae	            JSR BCD2STR
.1a4409	af 0a 08 af	lda $af080a	            LDA @lRTC_YEAR          ; Write the year
.1a440d	20 ae 43	jsr $1a43ae	            JSR BCD2STR
.1a4410	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.1a4412	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4414	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a4418	29 f7		and #$f7	            AND #%11110111
.1a441a	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a441e	c2 20		rep #$20	            REP #$20
.1a4420	a5 16		lda $0816	            LDA STRPTR
.1a4422	85 23		sta $0823	            STA ARGUMENT1
.1a4424	a5 18		lda $0818	            LDA STRPTR+2
.1a4426	85 25		sta $0825	            STA ARGUMENT1+2
.1a4428	e2 20		sep #$20	            SEP #$20
.1a442a	a9 02		lda #$02	            LDA #TYPE_STRING
.1a442c	85 27		sta $0827	            STA ARGTYPE1
.1a442e	28		plp		            PLP
.1a442f	e2 20		sep #$20	            SEP #$20
.1a4431	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4434	60		rts		            RTS
.1a4435					F_GETTIME
.1a4435	e2 20		sep #$20	            SEP #$20
.1a4437	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4439	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a443c	08		php		            PHP
.1a443d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4440	e2 20		sep #$20	            SEP #$20
.1a4442	c2 10		rep #$10	            REP #$10
.1a4444	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.1a4448	09 08		ora #$08	            ORA #%00001000
.1a444a	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a444e	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a4451	a0 00 00	ldy #$0000	            LDY #0
.1a4454	af 04 08 af	lda $af0804	            LDA @lRTC_HRS           ; Write the hour
.1a4458	29 7f		and #$7f	            AND #$7F                ; Trim out the AM/PM indicator
.1a445a	20 ae 43	jsr $1a43ae	            JSR BCD2STR
.1a445d	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.1a445f	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4461	c8		iny		            INY
.1a4462	af 02 08 af	lda $af0802	            LDA @lRTC_MIN           ; Write the minute
.1a4466	20 ae 43	jsr $1a43ae	            JSR BCD2STR
.1a4469	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.1a446b	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a446d	c8		iny		            INY
.1a446e	af 00 08 af	lda $af0800	            LDA @lRTC_SEC           ; Write the second
.1a4472	20 ae 43	jsr $1a43ae	            JSR BCD2STR
.1a4475	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.1a4477	97 16		sta [$0816],y	            STA [STRPTR],Y
.1a4479	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.1a447d	29 f7		and #$f7	            AND #%11110111
.1a447f	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.1a4483	c2 20		rep #$20	            REP #$20
.1a4485	a5 16		lda $0816	            LDA STRPTR
.1a4487	85 23		sta $0823	            STA ARGUMENT1
.1a4489	a5 18		lda $0818	            LDA STRPTR+2
.1a448b	85 25		sta $0825	            STA ARGUMENT1+2
.1a448d	e2 20		sep #$20	            SEP #$20
.1a448f	a9 02		lda #$02	            LDA #TYPE_STRING
.1a4491	85 27		sta $0827	            STA ARGTYPE1
.1a4493	28		plp		            PLP
.1a4494	e2 20		sep #$20	            SEP #$20
.1a4496	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4499	60		rts		            RTS
.1a449a					FN_RND
.1a449a	e2 20		sep #$20	            SEP #$20
.1a449c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a449e	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a44a1	08		php		            PHP
.1a44a2	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a44a5	e2 20		sep #$20	            SEP #$20
.1a44a7	a9 01		lda #$01	            LDA #TYPE_FLOAT             ; We'll return a floating point number
.1a44a9	85 27		sta $0827	            STA ARGTYPE1
.1a44ab	a9 03		lda #$03	            LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a44ad	8f 00 e2 af	sta $afe200	            STA @l FP_MATH_CTRL0        ; Expect fixed point numbers
.1a44b1	a9 01		lda #$01	            LDA #FP_OUT_DIV             ; Set us to do a division
.1a44b3	8f 01 e2 af	sta $afe201	            STA @l FP_MATH_CTRL1
.1a44b7	c2 30		rep #$30	            REP #$30
.1a44b9	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get a random 16-bits
.1a44bd	8f 08 e2 af	sta $afe208	            STA @l FP_MATH_INPUT0_LL    ; Send them to the FP unit
.1a44c1	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get another random 16-bits
.1a44c5	29 ff 7f	and #$7fff	            AND #$7FFF                  ; Make sure it's positive
.1a44c8	8f 0a e2 af	sta $afe20a	            STA @l FP_MATH_INPUT0_LL+2  ; Send them to the FP unit
.1a44cc	a9 ff ff	lda #$ffff	            LDA #$FFFF                  ; Get the maximum value
.1a44cf	8f 0c e2 af	sta $afe20c	            STA @l FP_MATH_INPUT1_LL    ; Send it to the FP unit
.1a44d3	a9 ff 7f	lda #$7fff	            LDA #$7FFF
.1a44d6	8f 0e e2 af	sta $afe20e	            STA @l FP_MATH_INPUT1_LL+2
.1a44da	ea		nop		            NOP
.1a44db	ea		nop		            NOP
.1a44dc	ea		nop		            NOP
.1a44dd	af 08 e2 af	lda $afe208	            LDA @l FP_MATH_OUTPUT_FP_LL     ; Get the normalized result
.1a44e1	85 23		sta $0823	            STA ARGUMENT1
.1a44e3	af 0a e2 af	lda $afe20a	            LDA @l FP_MATH_OUTPUT_FP_LL+2
.1a44e7	85 25		sta $0825	            STA ARGUMENT1+2
.1a44e9	28		plp		            PLP
.1a44ea	e2 20		sep #$20	            SEP #$20
.1a44ec	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a44ef	60		rts		            RTS

;******  Return to file: src\functions.s

.1a44f0					FN_MID
.1a44f0	e2 20		sep #$20	            SEP #$20
.1a44f2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a44f4	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a44f7	08		php		                PHP
.1a44f8	c2 30		rep #$30	            REP #$30
.1a44fa	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a44fd	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a4500					save_string
.1a4500	c2 20		rep #$20	            REP #$20
.1a4502	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a4504	48		pha		                PHA
.1a4505	a5 23		lda $0823	                LDA ARGUMENT1
.1a4507	48		pha		                PHA
.1a4508	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a450b	e2 20		sep #$20	            SEP #$20
.1a450d	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a450f	c9 2c		cmp #$2c	                CMP #','
.1a4511	f0 03		beq $1a4516	                BEQ skip_comma1
.1a4513	4c 67 45	jmp $1a4567	                JMP syntax_err
.1a4516					skip_comma1
.1a4516	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4519	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a451c	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a451f	c2 20		rep #$20	            REP #$20
.1a4521	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the index
.1a4523	48		pha		                PHA
.1a4524	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a4527	e2 20		sep #$20	            SEP #$20
.1a4529	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a452b	c9 2c		cmp #$2c	                CMP #','
.1a452d	f0 03		beq $1a4532	                BEQ skip_comma2
.1a452f	4c 67 45	jmp $1a4567	                JMP syntax_err
.1a4532					skip_comma2
.1a4532	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4535	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4538	20 bf 05	jsr $1a05bf	            JSR ASS_ARG1_INT16
.1a453b	c2 20		rep #$20	            REP #$20
.1a453d	a5 23		lda $0823	            LDA ARGUMENT1
.1a453f	85 8f		sta $088f	            STA MCOUNT
.1a4541	e2 20		sep #$20	            SEP #$20
.1a4543	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a4545	85 91		sta $0891	            STA MCOUNT+2
.1a4547	c2 20		rep #$20	            REP #$20
.1a4549	68		pla		                PLA                         ; Restore index
.1a454a	85 29		sta $0829	                STA ARGUMENT2               ; ... to ARGUMENT2
.1a454c	a9 00 00	lda #$0000	                LDA #0
.1a454f	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4551	68		pla		                PLA                         ; Restore string
.1a4552	85 23		sta $0823	                STA ARGUMENT1               ; ... to ARGUMENT1
.1a4554	68		pla		                PLA
.1a4555	85 25		sta $0825	                STA ARGUMENT1+2
.1a4557	e2 20		sep #$20	            SEP #$20
.1a4559	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a455b	85 27		sta $0827	            STA ARGTYPE1
.1a455d	20 e6 15	jsr $1a15e6	            JSR STRSUBSTR
.1a4560					done
.1a4560	e2 20		sep #$20	            SEP #$20
.1a4562	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4565	28		plp		                PLP
.1a4566	60		rts		            RTS
.1a4567					syntax_err
.1a4567	08		php		            PHP
.1a4568	c2 20		rep #$20	            REP #$20
.1a456a	48		pha		            PHA
.1a456b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a456e	5b		tcd		            TCD
.1a456f	68		pla		            PLA
.1a4570	28		plp		            PLP
.1a4571	e2 20		sep #$20	            SEP #$20
.1a4573	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4575	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4579	c2 20		rep #$20	            REP #$20
.1a457b	29 ff 00	and #$00ff	            AND #$00FF
.1a457e	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4581	e2 20		sep #$20	            SEP #$20
.1a4583	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4586					range_err
.1a4586	08		php		            PHP
.1a4587	c2 20		rep #$20	            REP #$20
.1a4589	48		pha		            PHA
.1a458a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a458d	5b		tcd		            TCD
.1a458e	68		pla		            PLA
.1a458f	28		plp		            PLP
.1a4590	e2 20		sep #$20	            SEP #$20
.1a4592	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4594	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4598	c2 20		rep #$20	            REP #$20
.1a459a	29 ff 00	and #$00ff	            AND #$00FF
.1a459d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a45a0	e2 20		sep #$20	            SEP #$20
.1a45a2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a45a5					FN_RIGHT
.1a45a5	e2 20		sep #$20	            SEP #$20
.1a45a7	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a45a9	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a45ac	08		php		                PHP
.1a45ad	c2 30		rep #$30	            REP #$30
.1a45af	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a45b2	e2 20		sep #$20	            SEP #$20
.1a45b4	a5 27		lda $0827	                LDA ARGTYPE1
.1a45b6	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a45b8	f0 03		beq $1a45bd	                BEQ save_string
.1a45ba	4c 29 46	jmp $1a4629	                JMP type_mismatch           ; Type mismatch if it's not a string
.1a45bd					save_string
.1a45bd	c2 20		rep #$20	            REP #$20
.1a45bf	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a45c1	48		pha		                PHA
.1a45c2	a5 23		lda $0823	                LDA ARGUMENT1
.1a45c4	48		pha		                PHA
.1a45c5	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a45c8	e2 20		sep #$20	            SEP #$20
.1a45ca	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a45cc	c9 2c		cmp #$2c	                CMP #','
.1a45ce	f0 03		beq $1a45d3	                BEQ skip_comma
.1a45d0	4c 48 46	jmp $1a4648	                JMP syntax_err
.1a45d3					skip_comma
.1a45d3	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a45d6	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a45d9	e2 20		sep #$20	            SEP #$20
.1a45db	a5 27		lda $0827	                LDA ARGTYPE1
.1a45dd	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a45df	d0 48		bne $1a4629	                BNE type_mismatch           ; Type mismatch if it's not an integer
.1a45e1	c2 20		rep #$20	            REP #$20
.1a45e3	a5 23		lda $0823	            LDA ARGUMENT1
.1a45e5	85 8f		sta $088f	            STA MCOUNT
.1a45e7	c2 20		rep #$20	            REP #$20
.1a45e9	68		pla		                PLA                         ; Recover the string pointer
.1a45ea	85 23		sta $0823	                STA ARGUMENT1
.1a45ec	68		pla		                PLA
.1a45ed	85 25		sta $0825	                STA ARGUMENT1+2
.1a45ef	e2 20		sep #$20	            SEP #$20
.1a45f1	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a45f3	85 27		sta $0827	            STA ARGTYPE1
.1a45f5	e2 20		sep #$20	            SEP #$20
.1a45f7	a0 00 00	ldy #$0000	                LDY #0
.1a45fa	b7 23		lda [$0823],y	count_loop      LDA [ARGUMENT1],Y
.1a45fc	f0 03		beq $1a4601	                BEQ count_done
.1a45fe	c8		iny		                INY
.1a45ff	80 f9		bra $1a45fa	                BRA count_loop
.1a4601					count_done
.1a4601	c2 20		rep #$20	            REP #$20
.1a4603	98		tya		                TYA                         ; ARGUMENT2 := LENGTH - MCOUNT
.1a4604	38		sec		                SEC
.1a4605	e5 8f		sbc $088f	                SBC MCOUNT
.1a4607	30 09		bmi $1a4612	                BMI index0                  ; if ARGUMENT2 < 0, set ARGUMENT2 := 0
.1a4609	85 29		sta $0829	                STA ARGUMENT2
.1a460b	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT2[23..16] := 0
.1a460e	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4610	80 07		bra $1a4619	                BRA slice
.1a4612	a9 00 00	lda #$0000	index0          LDA #0                      ; 0 is the floor for the index
.1a4615	85 29		sta $0829	                STA ARGUMENT2
.1a4617	85 2b		sta $082b	                STA ARGUMENT2+2
.1a4619					slice
.1a4619	e2 20		sep #$20	            SEP #$20
.1a461b	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a461d	85 2d		sta $082d	            STA ARGTYPE2
.1a461f	20 e6 15	jsr $1a15e6	            JSR STRSUBSTR
.1a4622					done
.1a4622	e2 20		sep #$20	            SEP #$20
.1a4624	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4627	28		plp		                PLP
.1a4628	60		rts		            RTS
.1a4629					type_mismatch
.1a4629	08		php		            PHP
.1a462a	c2 20		rep #$20	            REP #$20
.1a462c	48		pha		            PHA
.1a462d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4630	5b		tcd		            TCD
.1a4631	68		pla		            PLA
.1a4632	28		plp		            PLP
.1a4633	e2 20		sep #$20	            SEP #$20
.1a4635	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4637	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a463b	c2 20		rep #$20	            REP #$20
.1a463d	29 ff 00	and #$00ff	            AND #$00FF
.1a4640	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4643	e2 20		sep #$20	            SEP #$20
.1a4645	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4648					syntax_err
.1a4648	08		php		            PHP
.1a4649	c2 20		rep #$20	            REP #$20
.1a464b	48		pha		            PHA
.1a464c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a464f	5b		tcd		            TCD
.1a4650	68		pla		            PLA
.1a4651	28		plp		            PLP
.1a4652	e2 20		sep #$20	            SEP #$20
.1a4654	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4656	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a465a	c2 20		rep #$20	            REP #$20
.1a465c	29 ff 00	and #$00ff	            AND #$00FF
.1a465f	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4662	e2 20		sep #$20	            SEP #$20
.1a4664	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4667					range_err
.1a4667	08		php		            PHP
.1a4668	c2 20		rep #$20	            REP #$20
.1a466a	48		pha		            PHA
.1a466b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a466e	5b		tcd		            TCD
.1a466f	68		pla		            PLA
.1a4670	28		plp		            PLP
.1a4671	e2 20		sep #$20	            SEP #$20
.1a4673	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4675	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4679	c2 20		rep #$20	            REP #$20
.1a467b	29 ff 00	and #$00ff	            AND #$00FF
.1a467e	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4681	e2 20		sep #$20	            SEP #$20
.1a4683	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4686					FN_LEFT
.1a4686	e2 20		sep #$20	            SEP #$20
.1a4688	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a468a	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a468d	08		php		                PHP
.1a468e	c2 30		rep #$30	            REP #$30
.1a4690	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4693	e2 20		sep #$20	            SEP #$20
.1a4695	a5 27		lda $0827	                LDA ARGTYPE1
.1a4697	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4699	f0 03		beq $1a469e	                BEQ save_string
.1a469b	4c f2 46	jmp $1a46f2	                JMP type_mismatch           ; Type mismatch if it's not a string
.1a469e					save_string
.1a469e	c2 20		rep #$20	            REP #$20
.1a46a0	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.1a46a2	48		pha		                PHA
.1a46a3	a5 23		lda $0823	                LDA ARGUMENT1
.1a46a5	48		pha		                PHA
.1a46a6	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a46a9	e2 20		sep #$20	            SEP #$20
.1a46ab	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.1a46ad	c9 2c		cmp #$2c	                CMP #','
.1a46af	f0 03		beq $1a46b4	                BEQ skip_comma
.1a46b1	4c 11 47	jmp $1a4711	                JMP syntax_err
.1a46b4					skip_comma
.1a46b4	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a46b7	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a46ba	e2 20		sep #$20	            SEP #$20
.1a46bc	a5 27		lda $0827	                LDA ARGTYPE1
.1a46be	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a46c0	d0 30		bne $1a46f2	                BNE type_mismatch           ; Type mismatch if it's not an integer
.1a46c2	c2 20		rep #$20	            REP #$20
.1a46c4	a5 23		lda $0823	            LDA ARGUMENT1
.1a46c6	85 8f		sta $088f	            STA MCOUNT
.1a46c8	c2 20		rep #$20	            REP #$20
.1a46ca	a9 00 00	lda #$0000	            LDA #<>0
.1a46cd	85 29		sta $0829	            STA ARGUMENT2
.1a46cf	a9 00 00	lda #$0000	            LDA #(0 >> 16)
.1a46d2	85 2b		sta $082b	            STA ARGUMENT2+2
.1a46d4	e2 20		sep #$20	            SEP #$20
.1a46d6	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.1a46d8	85 2d		sta $082d	            STA ARGTYPE2
.1a46da	c2 20		rep #$20	            REP #$20
.1a46dc	68		pla		                PLA                         ; Recover the string pointer
.1a46dd	85 23		sta $0823	                STA ARGUMENT1
.1a46df	68		pla		                PLA
.1a46e0	85 25		sta $0825	                STA ARGUMENT1+2
.1a46e2	e2 20		sep #$20	            SEP #$20
.1a46e4	a9 02		lda #$02	            LDA #<TYPE_STRING
.1a46e6	85 27		sta $0827	            STA ARGTYPE1
.1a46e8	20 e6 15	jsr $1a15e6	            JSR STRSUBSTR
.1a46eb					done
.1a46eb	e2 20		sep #$20	            SEP #$20
.1a46ed	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a46f0	28		plp		                PLP
.1a46f1	60		rts		            RTS
.1a46f2					type_mismatch
.1a46f2	08		php		            PHP
.1a46f3	c2 20		rep #$20	            REP #$20
.1a46f5	48		pha		            PHA
.1a46f6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a46f9	5b		tcd		            TCD
.1a46fa	68		pla		            PLA
.1a46fb	28		plp		            PLP
.1a46fc	e2 20		sep #$20	            SEP #$20
.1a46fe	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4700	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4704	c2 20		rep #$20	            REP #$20
.1a4706	29 ff 00	and #$00ff	            AND #$00FF
.1a4709	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a470c	e2 20		sep #$20	            SEP #$20
.1a470e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4711					syntax_err
.1a4711	08		php		            PHP
.1a4712	c2 20		rep #$20	            REP #$20
.1a4714	48		pha		            PHA
.1a4715	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4718	5b		tcd		            TCD
.1a4719	68		pla		            PLA
.1a471a	28		plp		            PLP
.1a471b	e2 20		sep #$20	            SEP #$20
.1a471d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a471f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4723	c2 20		rep #$20	            REP #$20
.1a4725	29 ff 00	and #$00ff	            AND #$00FF
.1a4728	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a472b	e2 20		sep #$20	            SEP #$20
.1a472d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4730					range_err
.1a4730	08		php		            PHP
.1a4731	c2 20		rep #$20	            REP #$20
.1a4733	48		pha		            PHA
.1a4734	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4737	5b		tcd		            TCD
.1a4738	68		pla		            PLA
.1a4739	28		plp		            PLP
.1a473a	e2 20		sep #$20	            SEP #$20
.1a473c	a9 09		lda #$09	            LDA #ERR_RANGE
.1a473e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4742	c2 20		rep #$20	            REP #$20
.1a4744	29 ff 00	and #$00ff	            AND #$00FF
.1a4747	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a474a	e2 20		sep #$20	            SEP #$20
.1a474c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a474f					FN_VAL
.1a474f	e2 20		sep #$20	            SEP #$20
.1a4751	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4753	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4756	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4759	c2 10		rep #$10	            REP #$10
.1a475b	e2 20		sep #$20	            SEP #$20
.1a475d	a5 27		lda $0827	                LDA ARGTYPE1
.1a475f	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4761	d0 23		bne $1a4786	                BNE type_mismatch
.1a4763	c2 20		rep #$20	            REP #$20
.1a4765	a5 00		lda $0800	                LDA BIP             ; preserve BIP for later
.1a4767	85 40		sta $0840	                STA SAVEBIP
.1a4769	a5 02		lda $0802	                LDA BIP+2
.1a476b	85 42		sta $0842	                STA SAVEBIP+2
.1a476d	a5 23		lda $0823	                LDA ARGUMENT1       ; Temporarily point BIP to the string to parse
.1a476f	85 00		sta $0800	                STA BIP
.1a4771	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4773	85 02		sta $0802	                STA BIP+2
.1a4775	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a4778	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.1a477a	85 00		sta $0800	                STA BIP
.1a477c	a5 42		lda $0842	                LDA SAVEBIP+2
.1a477e	85 02		sta $0802	                STA BIP+2
.1a4780	e2 20		sep #$20	            SEP #$20
.1a4782	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4785	60		rts		            RTS
.1a4786					type_mismatch
.1a4786	08		php		            PHP
.1a4787	c2 20		rep #$20	            REP #$20
.1a4789	48		pha		            PHA
.1a478a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a478d	5b		tcd		            TCD
.1a478e	68		pla		            PLA
.1a478f	28		plp		            PLP
.1a4790	e2 20		sep #$20	            SEP #$20
.1a4792	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4794	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4798	c2 20		rep #$20	            REP #$20
.1a479a	29 ff 00	and #$00ff	            AND #$00FF
.1a479d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a47a0	e2 20		sep #$20	            SEP #$20
.1a47a2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a47a5					FN_STR
.1a47a5	e2 20		sep #$20	            SEP #$20
.1a47a7	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a47a9	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a47ac	08		php		                PHP
.1a47ad	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a47b0	c2 10		rep #$10	            REP #$10
.1a47b2	e2 20		sep #$20	            SEP #$20
.1a47b4	a5 27		lda $0827	                LDA ARGTYPE1
.1a47b6	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a47b8	d0 1a		bne $1a47d4	                BNE type_mismatch
.1a47ba	20 ed 13	jsr $1a13ed	            JSR ITOS
.1a47bd	c2 20		rep #$20	            REP #$20
.1a47bf	a5 16		lda $0816	                LDA STRPTR          ; Prepare the return result
.1a47c1	85 23		sta $0823	                STA ARGUMENT1
.1a47c3	a5 18		lda $0818	                LDA STRPTR+2
.1a47c5	85 25		sta $0825	                STA ARGUMENT1+2
.1a47c7	e2 20		sep #$20	            SEP #$20
.1a47c9	a9 02		lda #$02	                LDA #TYPE_STRING
.1a47cb	85 27		sta $0827	                STA ARGTYPE1
.1a47cd	28		plp		                PLP
.1a47ce	e2 20		sep #$20	            SEP #$20
.1a47d0	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a47d3	60		rts		            RTS
.1a47d4					type_mismatch
.1a47d4	08		php		            PHP
.1a47d5	c2 20		rep #$20	            REP #$20
.1a47d7	48		pha		            PHA
.1a47d8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a47db	5b		tcd		            TCD
.1a47dc	68		pla		            PLA
.1a47dd	28		plp		            PLP
.1a47de	e2 20		sep #$20	            SEP #$20
.1a47e0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a47e2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a47e6	c2 20		rep #$20	            REP #$20
.1a47e8	29 ff 00	and #$00ff	            AND #$00FF
.1a47eb	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a47ee	e2 20		sep #$20	            SEP #$20
.1a47f0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a47f3					FN_DEC
.1a47f3	e2 20		sep #$20	            SEP #$20
.1a47f5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a47f7	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a47fa	08		php		                PHP
.1a47fb	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a47fe	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a4801	c2 20		rep #$20	            REP #$20
.1a4803	64 0c		stz $080c	                STZ SCRATCH
.1a4805	64 0e		stz $080e	                STZ SCRATCH+2
.1a4807	e2 30		sep #$30	            SEP #$30
.1a4809	a0 00		ldy #$00	                LDY #0
.1a480b	b7 23		lda [$0823],y	skip_loop       LDA [ARGUMENT1],Y
.1a480d	c9 20		cmp #$20	                CMP #CHAR_SP
.1a480f	f0 04		beq $1a4815	                BEQ skip_char
.1a4811	c9 24		cmp #$24	                CMP #'$'
.1a4813	d0 03		bne $1a4818	                BNE loop
.1a4815	c8		iny		skip_char       INY
.1a4816	80 f3		bra $1a480b	                BRA skip_loop
.1a4818	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y   ; Check the character
.1a481a	20 be 03	jsr $1a03be	            JSR ISHEX
.1a481d	90 1e		bcc $1a483d	                BCC ret_result      ; No: return what we have so far
.1a481f	c2 20		rep #$20	            REP #$20
.1a4821	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4823	26 0e		rol $080e	                ROL SCRATCH+2
.1a4825	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a4827	26 0e		rol $080e	                ROL SCRATCH+2
.1a4829	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a482b	26 0e		rol $080e	                ROL SCRATCH+2
.1a482d	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.1a482f	26 0e		rol $080e	                ROL SCRATCH+2
.1a4831	e2 20		sep #$20	            SEP #$20
.1a4833	20 df 03	jsr $1a03df	            JSR HEX2BIN
.1a4836	05 0c		ora $080c	                ORA SCRATCH
.1a4838	85 0c		sta $080c	                STA SCRATCH         ; And add it to the result
.1a483a	c8		iny		                INY
.1a483b	80 db		bra $1a4818	                BRA loop            ; And try the next character
.1a483d					ret_result
.1a483d	c2 20		rep #$20	            REP #$20
.1a483f	a5 0c		lda $080c	                LDA SCRATCH         ; Return the result
.1a4841	85 23		sta $0823	                STA ARGUMENT1
.1a4843	a5 0e		lda $080e	                LDA SCRATCH+2
.1a4845	85 25		sta $0825	                STA ARGUMENT1+2
.1a4847	e2 20		sep #$20	            SEP #$20
.1a4849	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a484b	85 27		sta $0827	                STA ARGTYPE1
.1a484d	28		plp		                PLP
.1a484e	e2 20		sep #$20	            SEP #$20
.1a4850	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4853	60		rts		            RTS
.1a4854					FN_HEX
.1a4854	e2 20		sep #$20	            SEP #$20
.1a4856	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4858	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a485b	08		php		                PHP
.1a485c	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a485f	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a4862	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a4865	e2 30		sep #$30	            SEP #$30
.1a4867	a0 ff		ldy #$ff	                LDY #$FF            ; Terminate the string
.1a4869	a9 00		lda #$00	                LDA #0
.1a486b	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a486d	88		dey		                DEY
.1a486e	a5 23		lda $0823	loop            LDA ARGUMENT1       ; Write the low digit
.1a4870	29 0f		and #$0f	                AND #$0F
.1a4872	aa		tax		                TAX
.1a4873	bf 00 d0 1a	lda $1ad000,x	                LDA @lHEXDIGITS,X
.1a4877	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4879	88		dey		                DEY
.1a487a	a5 23		lda $0823	                LDA ARGUMENT1       ; Write the high digit
.1a487c	29 f0		and #$f0	                AND #$F0
.1a487e	4a		lsr a		                LSR A
.1a487f	4a		lsr a		                LSR A
.1a4880	4a		lsr a		                LSR A
.1a4881	4a		lsr a		                LSR A
.1a4882	aa		tax		                TAX
.1a4883	bf 00 d0 1a	lda $1ad000,x	                LDA @lHEXDIGITS,X
.1a4887	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4889	88		dey		                DEY
.1a488a	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Shift value by one byte
.1a488c	85 23		sta $0823	                STA ARGUMENT1
.1a488e	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4890	85 24		sta $0824	                STA ARGUMENT1+1
.1a4892	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a4894	85 25		sta $0825	                STA ARGUMENT1+2
.1a4896	a9 00		lda #$00	                LDA #0
.1a4898	85 26		sta $0826	                STA ARGUMENT1+3
.1a489a	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the argument 0?
.1a489c	d0 d0		bne $1a486e	                BNE loop            ; No: keep converting
.1a489e	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a48a0	d0 cc		bne $1a486e	                BNE loop
.1a48a2	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a48a4	d0 c8		bne $1a486e	                BNE loop
.1a48a6	98		tya		                TYA                 ; Get the index of the first free char
.1a48a7	38		sec		                SEC                 ; Add 1 to get to the first character of the string
.1a48a8	65 16		adc $0816	                ADC STRPTR          ; And add the whole thing to the temp string pointer
.1a48aa	85 23		sta $0823	                STA ARGUMENT1       ; And return it as the result
.1a48ac	a5 17		lda $0817	                LDA STRPTR+1
.1a48ae	85 24		sta $0824	                STA ARGUMENT1+1
.1a48b0	a5 18		lda $0818	                LDA STRPTR+2
.1a48b2	85 25		sta $0825	                STA ARGUMENT1+2
.1a48b4	a5 19		lda $0819	                LDA STRPTR+3
.1a48b6	85 26		sta $0826	                STA ARGUMENT1+3
.1a48b8	a9 02		lda #$02	                LDA #TYPE_STRING    ; And make the type STRING
.1a48ba	85 27		sta $0827	                STA ARGTYPE1
.1a48bc	28		plp		                PLP
.1a48bd	e2 20		sep #$20	            SEP #$20
.1a48bf	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a48c2	60		rts		            RTS
.1a48c3					type_mismatch
.1a48c3	08		php		            PHP
.1a48c4	c2 20		rep #$20	            REP #$20
.1a48c6	48		pha		            PHA
.1a48c7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a48ca	5b		tcd		            TCD
.1a48cb	68		pla		            PLA
.1a48cc	28		plp		            PLP
.1a48cd	e2 20		sep #$20	            SEP #$20
.1a48cf	a9 04		lda #$04	            LDA #ERR_TYPE
.1a48d1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a48d5	c2 20		rep #$20	            REP #$20
.1a48d7	29 ff 00	and #$00ff	            AND #$00FF
.1a48da	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a48dd	e2 20		sep #$20	            SEP #$20
.1a48df	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a48e2					FN_LEN
.1a48e2	e2 20		sep #$20	            SEP #$20
.1a48e4	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a48e6	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a48e9	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a48ec	e2 20		sep #$20	            SEP #$20
.1a48ee	a5 27		lda $0827	                LDA ARGTYPE1
.1a48f0	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a48f2	d0 1f		bne $1a4913	                BNE type_mismatch
.1a48f4	8b		phb		                PHB                 ; Set the data bank to the data bank of the string
.1a48f5	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a48f7	48		pha		                PHA
.1a48f8	ab		plb		                PLB
.1a48f9	c2 10		rep #$10	            REP #$10
.1a48fb	a6 23		ldx $0823	                LDX ARGUMENT1       ; And point X to the string data
.1a48fd	20 7a 14	jsr $1a147a	            JSR STRLEN
.1a4900	ab		plb		                PLB                 ; Restore the old data bank
.1a4901	84 23		sty $0823	                STY ARGUMENT1       ; Save the length to ARGUMENT1
.1a4903	c2 20		rep #$20	            REP #$20
.1a4905	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4907	e2 20		sep #$20	            SEP #$20
.1a4909	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the type to INTEGER
.1a490b	85 27		sta $0827	                STA ARGTYPE1
.1a490d	e2 20		sep #$20	            SEP #$20
.1a490f	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4912	60		rts		            RTS
.1a4913					type_mismatch
.1a4913	08		php		            PHP
.1a4914	c2 20		rep #$20	            REP #$20
.1a4916	48		pha		            PHA
.1a4917	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a491a	5b		tcd		            TCD
.1a491b	68		pla		            PLA
.1a491c	28		plp		            PLP
.1a491d	e2 20		sep #$20	            SEP #$20
.1a491f	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4921	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4925	c2 20		rep #$20	            REP #$20
.1a4927	29 ff 00	and #$00ff	            AND #$00FF
.1a492a	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a492d	e2 20		sep #$20	            SEP #$20
.1a492f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4932					FN_PEEK
.1a4932	e2 20		sep #$20	            SEP #$20
.1a4934	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4936	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4939	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a493c	e2 20		sep #$20	            SEP #$20
.1a493e	a5 27		lda $0827	                LDA ARGTYPE1
.1a4940	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4942	d0 12		bne $1a4956	                BNE type_mismatch
.1a4944	e2 20		sep #$20	            SEP #$20
.1a4946	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a4948	85 23		sta $0823	                STA ARGUMENT1
.1a494a	64 24		stz $0824	                STZ ARGUMENT1+1
.1a494c	64 25		stz $0825	                STZ ARGUMENT1+2
.1a494e	64 30		stz $0830	                STZ ARGUMENT1+13
.1a4950	e2 20		sep #$20	            SEP #$20
.1a4952	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4955	60		rts		            RTS
.1a4956					type_mismatch
.1a4956	08		php		            PHP
.1a4957	c2 20		rep #$20	            REP #$20
.1a4959	48		pha		            PHA
.1a495a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a495d	5b		tcd		            TCD
.1a495e	68		pla		            PLA
.1a495f	28		plp		            PLP
.1a4960	e2 20		sep #$20	            SEP #$20
.1a4962	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4964	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4968	c2 20		rep #$20	            REP #$20
.1a496a	29 ff 00	and #$00ff	            AND #$00FF
.1a496d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4970	e2 20		sep #$20	            SEP #$20
.1a4972	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4975					FN_PEEKL
.1a4975	e2 20		sep #$20	            SEP #$20
.1a4977	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4979	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a497c	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a497f	e2 20		sep #$20	            SEP #$20
.1a4981	a5 27		lda $0827	                LDA ARGTYPE1
.1a4983	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4985	d0 1d		bne $1a49a4	                BNE type_mismatch
.1a4987	c2 20		rep #$20	            REP #$20
.1a4989	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a498b	85 0c		sta $080c	                STA SCRATCH
.1a498d	e2 20		sep #$20	            SEP #$20
.1a498f	a0 02 00	ldy #$0002	                LDY #2
.1a4992	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y
.1a4994	85 25		sta $0825	                STA ARGUMENT1+2
.1a4996	64 26		stz $0826	                STZ ARGUMENT1+3
.1a4998	c2 20		rep #$20	            REP #$20
.1a499a	a5 0c		lda $080c	                LDA SCRATCH
.1a499c	85 23		sta $0823	                STA ARGUMENT1
.1a499e	e2 20		sep #$20	            SEP #$20
.1a49a0	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a49a3	60		rts		            RTS
.1a49a4					type_mismatch
.1a49a4	08		php		            PHP
.1a49a5	c2 20		rep #$20	            REP #$20
.1a49a7	48		pha		            PHA
.1a49a8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a49ab	5b		tcd		            TCD
.1a49ac	68		pla		            PLA
.1a49ad	28		plp		            PLP
.1a49ae	e2 20		sep #$20	            SEP #$20
.1a49b0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a49b2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a49b6	c2 20		rep #$20	            REP #$20
.1a49b8	29 ff 00	and #$00ff	            AND #$00FF
.1a49bb	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a49be	e2 20		sep #$20	            SEP #$20
.1a49c0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a49c3					FN_PEEKW
.1a49c3	e2 20		sep #$20	            SEP #$20
.1a49c5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a49c7	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a49ca	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a49cd	e2 20		sep #$20	            SEP #$20
.1a49cf	a5 27		lda $0827	                LDA ARGTYPE1
.1a49d1	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a49d3	d0 0e		bne $1a49e3	                BNE type_mismatch
.1a49d5	c2 20		rep #$20	            REP #$20
.1a49d7	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.1a49d9	85 23		sta $0823	                STA ARGUMENT1
.1a49db	64 25		stz $0825	                STZ ARGUMENT1+2
.1a49dd	e2 20		sep #$20	            SEP #$20
.1a49df	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a49e2	60		rts		            RTS
.1a49e3					type_mismatch
.1a49e3	08		php		            PHP
.1a49e4	c2 20		rep #$20	            REP #$20
.1a49e6	48		pha		            PHA
.1a49e7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a49ea	5b		tcd		            TCD
.1a49eb	68		pla		            PLA
.1a49ec	28		plp		            PLP
.1a49ed	e2 20		sep #$20	            SEP #$20
.1a49ef	a9 04		lda #$04	            LDA #ERR_TYPE
.1a49f1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a49f5	c2 20		rep #$20	            REP #$20
.1a49f7	29 ff 00	and #$00ff	            AND #$00FF
.1a49fa	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a49fd	e2 20		sep #$20	            SEP #$20
.1a49ff	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4a02					FN_CHR
.1a4a02	e2 20		sep #$20	            SEP #$20
.1a4a04	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4a06	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4a09	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4a0c	e2 20		sep #$20	            SEP #$20
.1a4a0e	a5 27		lda $0827	                LDA ARGTYPE1
.1a4a10	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4a12	d0 24		bne $1a4a38	                BNE type_mismatch
.1a4a14	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a4a17	a5 23		lda $0823	                LDA ARGUMENT1       ; Get the numberic value
.1a4a19	87 16		sta [$0816]	                STA [STRPTR]        ; And save it as the first character
.1a4a1b	a9 00		lda #$00	                LDA #0              ; Null terminate the string
.1a4a1d	a0 01 00	ldy #$0001	                LDY #1
.1a4a20	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a4a22	c2 20		rep #$20	            REP #$20
.1a4a24	a5 16		lda $0816	                LDA STRPTR
.1a4a26	85 23		sta $0823	                STA ARGUMENT1
.1a4a28	a5 18		lda $0818	                LDA STRPTR+2
.1a4a2a	85 25		sta $0825	                STA ARGUMENT1+2
.1a4a2c	e2 20		sep #$20	            SEP #$20
.1a4a2e	a9 02		lda #$02	                LDA #TYPE_STRING
.1a4a30	85 27		sta $0827	                STA ARGTYPE1
.1a4a32	e2 20		sep #$20	            SEP #$20
.1a4a34	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4a37	60		rts		            RTS
.1a4a38					type_mismatch
.1a4a38	08		php		            PHP
.1a4a39	c2 20		rep #$20	            REP #$20
.1a4a3b	48		pha		            PHA
.1a4a3c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4a3f	5b		tcd		            TCD
.1a4a40	68		pla		            PLA
.1a4a41	28		plp		            PLP
.1a4a42	e2 20		sep #$20	            SEP #$20
.1a4a44	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4a46	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4a4a	c2 20		rep #$20	            REP #$20
.1a4a4c	29 ff 00	and #$00ff	            AND #$00FF
.1a4a4f	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4a52	e2 20		sep #$20	            SEP #$20
.1a4a54	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4a57					FN_ASC
.1a4a57	e2 20		sep #$20	            SEP #$20
.1a4a59	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4a5b	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4a5e	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4a61	e2 20		sep #$20	            SEP #$20
.1a4a63	a5 27		lda $0827	                LDA ARGTYPE1
.1a4a65	c9 02		cmp #$02	                CMP #TYPE_STRING
.1a4a67	d0 14		bne $1a4a7d	                BNE type_mismatch
.1a4a69	a7 23		lda [$0823]	                LDA [ARGUMENT1]     ; Get the character
.1a4a6b	85 23		sta $0823	                STA ARGUMENT1       ; Save its code to ARGUMENT1
.1a4a6d	64 24		stz $0824	                STZ ARGUMENT1+1
.1a4a6f	64 25		stz $0825	                STZ ARGUMENT1+2
.1a4a71	64 26		stz $0826	                STZ ARGUMENT1+3
.1a4a73	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the return type to integer
.1a4a75	85 27		sta $0827	                STA ARGTYPE1
.1a4a77	e2 20		sep #$20	            SEP #$20
.1a4a79	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4a7c	60		rts		            RTS
.1a4a7d					type_mismatch
.1a4a7d	08		php		            PHP
.1a4a7e	c2 20		rep #$20	            REP #$20
.1a4a80	48		pha		            PHA
.1a4a81	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4a84	5b		tcd		            TCD
.1a4a85	68		pla		            PLA
.1a4a86	28		plp		            PLP
.1a4a87	e2 20		sep #$20	            SEP #$20
.1a4a89	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4a8b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4a8f	c2 20		rep #$20	            REP #$20
.1a4a91	29 ff 00	and #$00ff	            AND #$00FF
.1a4a94	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4a97	e2 20		sep #$20	            SEP #$20
.1a4a99	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4a9c					FN_SPC
.1a4a9c	e2 20		sep #$20	            SEP #$20
.1a4a9e	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4aa0	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4aa3	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4aa6	e2 20		sep #$20	            SEP #$20
.1a4aa8	a5 27		lda $0827	                LDA ARGTYPE1
.1a4aaa	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4aac	d0 39		bne $1a4ae7	                BNE type_mismatch
.1a4aae	e2 20		sep #$20	            SEP #$20
.1a4ab0	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.1a4ab2	d0 52		bne $1a4b06	                BNE err_limit
.1a4ab4	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4ab6	d0 4e		bne $1a4b06	                BNE err_limit
.1a4ab8	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4aba	d0 4a		bne $1a4b06	                BNE err_limit
.1a4abc	c2 10		rep #$10	            REP #$10
.1a4abe	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a4ac1	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.1a4ac3	e2 20		sep #$20	            SEP #$20
.1a4ac5	a9 00		lda #$00	                LDA #0
.1a4ac7	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.1a4ac9	88		dey		                DEY
.1a4aca	30 07		bmi $1a4ad3	                BMI done
.1a4acc	a9 20		lda #$20	                LDA #CHAR_SP
.1a4ace	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.1a4ad0	88		dey		                DEY
.1a4ad1	10 fb		bpl $1a4ace	                BPL loop            ; And keep writing until we're done
.1a4ad3	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.1a4ad5	85 27		sta $0827	                STA ARGTYPE1
.1a4ad7	c2 20		rep #$20	            REP #$20
.1a4ad9	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.1a4adb	85 23		sta $0823	                STA ARGUMENT1
.1a4add	a5 18		lda $0818	                LDA STRPTR+2
.1a4adf	85 25		sta $0825	                STA ARGUMENT1+2
.1a4ae1	e2 20		sep #$20	            SEP #$20
.1a4ae3	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4ae6	60		rts		            RTS
.1a4ae7					type_mismatch
.1a4ae7	08		php		            PHP
.1a4ae8	c2 20		rep #$20	            REP #$20
.1a4aea	48		pha		            PHA
.1a4aeb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4aee	5b		tcd		            TCD
.1a4aef	68		pla		            PLA
.1a4af0	28		plp		            PLP
.1a4af1	e2 20		sep #$20	            SEP #$20
.1a4af3	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4af5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4af9	c2 20		rep #$20	            REP #$20
.1a4afb	29 ff 00	and #$00ff	            AND #$00FF
.1a4afe	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4b01	e2 20		sep #$20	            SEP #$20
.1a4b03	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4b06					err_limit
.1a4b06	08		php		            PHP
.1a4b07	c2 20		rep #$20	            REP #$20
.1a4b09	48		pha		            PHA
.1a4b0a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4b0d	5b		tcd		            TCD
.1a4b0e	68		pla		            PLA
.1a4b0f	28		plp		            PLP
.1a4b10	e2 20		sep #$20	            SEP #$20
.1a4b12	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4b14	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4b18	c2 20		rep #$20	            REP #$20
.1a4b1a	29 ff 00	and #$00ff	            AND #$00FF
.1a4b1d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4b20	e2 20		sep #$20	            SEP #$20
.1a4b22	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4b25					FN_TAB
.1a4b25	e2 20		sep #$20	            SEP #$20
.1a4b27	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4b29	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4b2c	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4b2f	e2 20		sep #$20	            SEP #$20
.1a4b31	a5 27		lda $0827	                LDA ARGTYPE1
.1a4b33	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4b35	d0 39		bne $1a4b70	                BNE type_mismatch
.1a4b37	e2 20		sep #$20	            SEP #$20
.1a4b39	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.1a4b3b	d0 52		bne $1a4b8f	                BNE err_limit
.1a4b3d	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4b3f	d0 4e		bne $1a4b8f	                BNE err_limit
.1a4b41	a5 24		lda $0824	                LDA ARGUMENT1+1
.1a4b43	d0 4a		bne $1a4b8f	                BNE err_limit
.1a4b45	c2 10		rep #$10	            REP #$10
.1a4b47	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a4b4a	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.1a4b4c	e2 20		sep #$20	            SEP #$20
.1a4b4e	a9 00		lda #$00	                LDA #0
.1a4b50	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.1a4b52	88		dey		                DEY
.1a4b53	30 07		bmi $1a4b5c	                BMI done
.1a4b55	a9 09		lda #$09	                LDA #CHAR_TAB
.1a4b57	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.1a4b59	88		dey		                DEY
.1a4b5a	10 fb		bpl $1a4b57	                BPL loop            ; And keep writing until we're done
.1a4b5c	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.1a4b5e	85 27		sta $0827	                STA ARGTYPE1
.1a4b60	c2 20		rep #$20	            REP #$20
.1a4b62	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.1a4b64	85 23		sta $0823	                STA ARGUMENT1
.1a4b66	a5 18		lda $0818	                LDA STRPTR+2
.1a4b68	85 25		sta $0825	                STA ARGUMENT1+2
.1a4b6a	e2 20		sep #$20	            SEP #$20
.1a4b6c	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4b6f	60		rts		            RTS
.1a4b70					type_mismatch
.1a4b70	08		php		            PHP
.1a4b71	c2 20		rep #$20	            REP #$20
.1a4b73	48		pha		            PHA
.1a4b74	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4b77	5b		tcd		            TCD
.1a4b78	68		pla		            PLA
.1a4b79	28		plp		            PLP
.1a4b7a	e2 20		sep #$20	            SEP #$20
.1a4b7c	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4b7e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4b82	c2 20		rep #$20	            REP #$20
.1a4b84	29 ff 00	and #$00ff	            AND #$00FF
.1a4b87	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4b8a	e2 20		sep #$20	            SEP #$20
.1a4b8c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4b8f					err_limit
.1a4b8f	08		php		            PHP
.1a4b90	c2 20		rep #$20	            REP #$20
.1a4b92	48		pha		            PHA
.1a4b93	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4b96	5b		tcd		            TCD
.1a4b97	68		pla		            PLA
.1a4b98	28		plp		            PLP
.1a4b99	e2 20		sep #$20	            SEP #$20
.1a4b9b	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4b9d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4ba1	c2 20		rep #$20	            REP #$20
.1a4ba3	29 ff 00	and #$00ff	            AND #$00FF
.1a4ba6	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4ba9	e2 20		sep #$20	            SEP #$20
.1a4bab	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4bae					FN_ABS
.1a4bae	e2 20		sep #$20	            SEP #$20
.1a4bb0	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4bb2	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4bb5	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4bb8	e2 20		sep #$20	            SEP #$20
.1a4bba	a5 27		lda $0827	                LDA ARGTYPE1        ; Check the type
.1a4bbc	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4bbe	f0 23		beq $1a4be3	                BEQ abs_int         ; If integer, get the absolute value of the integer
.1a4bc0	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.1a4bc2	f0 3e		beq $1a4c02	                BEQ abs_float       ; If float, get the absolute value of the float
.1a4bc4					type_err
.1a4bc4	08		php		            PHP
.1a4bc5	c2 20		rep #$20	            REP #$20
.1a4bc7	48		pha		            PHA
.1a4bc8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4bcb	5b		tcd		            TCD
.1a4bcc	68		pla		            PLA
.1a4bcd	28		plp		            PLP
.1a4bce	e2 20		sep #$20	            SEP #$20
.1a4bd0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4bd2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4bd6	c2 20		rep #$20	            REP #$20
.1a4bd8	29 ff 00	and #$00ff	            AND #$00FF
.1a4bdb	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4bde	e2 20		sep #$20	            SEP #$20
.1a4be0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4be3					abs_int
.1a4be3	c2 20		rep #$20	            REP #$20
.1a4be5	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Is it positive already?
.1a4be7	10 21		bpl $1a4c0a	                BPL done            ; Yes: we don't need to do anythign further
.1a4be9	49 ff ff	eor #$ffff	                EOR #$FFFF          ; Otherwise, take the two's compliment
.1a4bec	85 25		sta $0825	                STA ARGUMENT1+2     ; Of ARGUMENT1
.1a4bee	a5 23		lda $0823	                LDA ARGUMENT1
.1a4bf0	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a4bf3	18		clc		                CLC
.1a4bf4	69 01 00	adc #$0001	                ADC #1
.1a4bf7	85 23		sta $0823	                STA ARGUMENT1       ; And save it back to ARGUMENT1
.1a4bf9	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4bfb	69 00 00	adc #$0000	                ADC #0
.1a4bfe	85 25		sta $0825	                STA ARGUMENT1+2
.1a4c00	80 08		bra $1a4c0a	                BRA done
.1a4c02					abs_float
.1a4c02	e2 20		sep #$20	            SEP #$20
.1a4c04	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Just clear the sign bit
.1a4c06	29 7f		and #$7f	                AND #$7F
.1a4c08	85 26		sta $0826	                STA ARGUMENT1+3
.1a4c0a					done
.1a4c0a	e2 20		sep #$20	            SEP #$20
.1a4c0c	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4c0f	60		rts		            RTS
.1a4c10					FN_SGN
.1a4c10	e2 20		sep #$20	            SEP #$20
.1a4c12	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4c14	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4c17	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4c1a	e2 20		sep #$20	            SEP #$20
.1a4c1c	a5 27		lda $0827	                LDA ARGTYPE1
.1a4c1e	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.1a4c20	d0 25		bne $1a4c47	                BNE type_mismatch
.1a4c22	c2 20		rep #$20	            REP #$20
.1a4c24	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a4c26	30 12		bmi $1a4c3a	                BMI is_negative     ; Negative: return -1
.1a4c28	d0 04		bne $1a4c2e	                BNE is_positive     ; Is it not 0? Then return 1
.1a4c2a	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the lower word 0?
.1a4c2c	f0 13		beq $1a4c41	                BEQ done            ; Yes: the whole thing is zero: return 0
.1a4c2e	a9 00 00	lda #$0000	is_positive     LDA #0              ; It's positive: return 1
.1a4c31	85 25		sta $0825	                STA ARGUMENT1+2
.1a4c33	a9 01 00	lda #$0001	                LDA #1
.1a4c36	85 23		sta $0823	                STA ARGUMENT1
.1a4c38	80 07		bra $1a4c41	                BRA done
.1a4c3a	a9 ff ff	lda #$ffff	is_negative     LDA #$FFFF          ; It's negative: return -1
.1a4c3d	85 25		sta $0825	                STA ARGUMENT1+2
.1a4c3f	85 23		sta $0823	                STA ARGUMENT1
.1a4c41					done
.1a4c41	e2 20		sep #$20	            SEP #$20
.1a4c43	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4c46	60		rts		            RTS
.1a4c47					type_mismatch
.1a4c47	08		php		            PHP
.1a4c48	c2 20		rep #$20	            REP #$20
.1a4c4a	48		pha		            PHA
.1a4c4b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4c4e	5b		tcd		            TCD
.1a4c4f	68		pla		            PLA
.1a4c50	28		plp		            PLP
.1a4c51	e2 20		sep #$20	            SEP #$20
.1a4c53	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4c55	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4c59	c2 20		rep #$20	            REP #$20
.1a4c5b	29 ff 00	and #$00ff	            AND #$00FF
.1a4c5e	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4c61	e2 20		sep #$20	            SEP #$20
.1a4c63	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4c66					FN_INT
.1a4c66	e2 20		sep #$20	            SEP #$20
.1a4c68	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4c6a	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4c6d	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4c70	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a4c73					done
.1a4c73	e2 20		sep #$20	            SEP #$20
.1a4c75	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4c78	60		rts		            RTS
.1a4c79					FN_SIN
.1a4c79	e2 20		sep #$20	            SEP #$20
.1a4c7b	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4c7d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4c80	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4c83	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a4c86	20 76 5f	jsr $1a5f76	            JSR FP_SIN
.1a4c89					done
.1a4c89	e2 20		sep #$20	            SEP #$20
.1a4c8b	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4c8e	60		rts		            RTS
.1a4c8f					type_mismatch
.1a4c8f	08		php		            PHP
.1a4c90	c2 20		rep #$20	            REP #$20
.1a4c92	48		pha		            PHA
.1a4c93	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4c96	5b		tcd		            TCD
.1a4c97	68		pla		            PLA
.1a4c98	28		plp		            PLP
.1a4c99	e2 20		sep #$20	            SEP #$20
.1a4c9b	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4c9d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4ca1	c2 20		rep #$20	            REP #$20
.1a4ca3	29 ff 00	and #$00ff	            AND #$00FF
.1a4ca6	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4ca9	e2 20		sep #$20	            SEP #$20
.1a4cab	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4cae					FN_COS
.1a4cae	e2 20		sep #$20	            SEP #$20
.1a4cb0	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4cb2	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4cb5	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4cb8	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a4cbb	20 a5 5f	jsr $1a5fa5	            JSR FP_COS
.1a4cbe					done
.1a4cbe	e2 20		sep #$20	            SEP #$20
.1a4cc0	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4cc3	60		rts		            RTS
.1a4cc4					type_mismatch
.1a4cc4	08		php		            PHP
.1a4cc5	c2 20		rep #$20	            REP #$20
.1a4cc7	48		pha		            PHA
.1a4cc8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4ccb	5b		tcd		            TCD
.1a4ccc	68		pla		            PLA
.1a4ccd	28		plp		            PLP
.1a4cce	e2 20		sep #$20	            SEP #$20
.1a4cd0	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4cd2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4cd6	c2 20		rep #$20	            REP #$20
.1a4cd8	29 ff 00	and #$00ff	            AND #$00FF
.1a4cdb	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4cde	e2 20		sep #$20	            SEP #$20
.1a4ce0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4ce3					FN_TAN
.1a4ce3	e2 20		sep #$20	            SEP #$20
.1a4ce5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4ce7	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4cea	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4ced	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a4cf0	20 d4 5f	jsr $1a5fd4	            JSR FP_TAN
.1a4cf3					done
.1a4cf3	e2 20		sep #$20	            SEP #$20
.1a4cf5	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4cf8	60		rts		            RTS
.1a4cf9					type_mismatch
.1a4cf9	08		php		            PHP
.1a4cfa	c2 20		rep #$20	            REP #$20
.1a4cfc	48		pha		            PHA
.1a4cfd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d00	5b		tcd		            TCD
.1a4d01	68		pla		            PLA
.1a4d02	28		plp		            PLP
.1a4d03	e2 20		sep #$20	            SEP #$20
.1a4d05	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4d07	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4d0b	c2 20		rep #$20	            REP #$20
.1a4d0d	29 ff 00	and #$00ff	            AND #$00FF
.1a4d10	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4d13	e2 20		sep #$20	            SEP #$20
.1a4d15	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4d18					FN_SCALETAU
.1a4d18	e2 20		sep #$20	            SEP #$20
.1a4d1a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4d1c	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4d1f	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4d22	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a4d25	20 1f 5e	jsr $1a5e1f	            JSR FP_SCALE
.1a4d28					done
.1a4d28	e2 20		sep #$20	            SEP #$20
.1a4d2a	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4d2d	60		rts		            RTS
.1a4d2e					type_mismatch
.1a4d2e	08		php		            PHP
.1a4d2f	c2 20		rep #$20	            REP #$20
.1a4d31	48		pha		            PHA
.1a4d32	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d35	5b		tcd		            TCD
.1a4d36	68		pla		            PLA
.1a4d37	28		plp		            PLP
.1a4d38	e2 20		sep #$20	            SEP #$20
.1a4d3a	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4d3c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4d40	c2 20		rep #$20	            REP #$20
.1a4d42	29 ff 00	and #$00ff	            AND #$00FF
.1a4d45	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4d48	e2 20		sep #$20	            SEP #$20
.1a4d4a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4d4d					FN_LN
.1a4d4d	e2 20		sep #$20	            SEP #$20
.1a4d4f	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.1a4d51	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4d54	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a4d57	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a4d5a	20 02 60	jsr $1a6002	            JSR FP_LN
.1a4d5d					done
.1a4d5d	e2 20		sep #$20	            SEP #$20
.1a4d5f	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a4d62	60		rts		            RTS
.1a4d63					type_mismatch
.1a4d63	08		php		            PHP
.1a4d64	c2 20		rep #$20	            REP #$20
.1a4d66	48		pha		            PHA
.1a4d67	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4d6a	5b		tcd		            TCD
.1a4d6b	68		pla		            PLA
.1a4d6c	28		plp		            PLP
.1a4d6d	e2 20		sep #$20	            SEP #$20
.1a4d6f	a9 04		lda #$04	            LDA #ERR_TYPE
.1a4d71	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4d75	c2 20		rep #$20	            REP #$20
.1a4d77	29 ff 00	and #$00ff	            AND #$00FF
.1a4d7a	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4d7d	e2 20		sep #$20	            SEP #$20
.1a4d7f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\commands.s

.1a4d82	00		brk #		CMD_MONITOR     BRK
.1a4d83	ea		nop		                NOP
.1a4d84	60		rts		            RTS
.1a4d85					CMD_NEW
.1a4d85	08		php		                PHP
.1a4d86	0b		phd		                PHD
.1a4d87	08		php		            PHP
.1a4d88	c2 20		rep #$20	            REP #$20
.1a4d8a	48		pha		            PHA
.1a4d8b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a4d8e	5b		tcd		            TCD
.1a4d8f	68		pla		            PLA
.1a4d90	28		plp		            PLP
.1a4d91	c2 30		rep #$30	            REP #$30
.1a4d93	c2 20		rep #$20	            REP #$20
.1a4d95	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.1a4d98	85 d9		sta $08d9	            STA LASTLINE
.1a4d9a	e2 20		sep #$20	            SEP #$20
.1a4d9c	a9 16		lda #$16	            LDA #`BASIC_BOT
.1a4d9e	85 db		sta $08db	            STA LASTLINE+2
.1a4da0	c2 30		rep #$30	            REP #$30
.1a4da2	a9 00 00	lda #$0000	                LDA #0
.1a4da5	a0 00 00	ldy #$0000	                LDY #LINE_LINK
.1a4da8	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a4daa	a0 02 00	ldy #$0002	                LDY #LINE_NUMBER
.1a4dad	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a4daf	a0 04 00	ldy #$0004	                LDY #LINE_TOKENS
.1a4db2	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.1a4db4	20 14 1f	jsr $1a1f14	            JSR CLRINTERP
.1a4db7	2b		pld		                PLD
.1a4db8	28		plp		                PLP
.1a4db9	60		rts		            RTS
.1a4dba					CMD_RUN
.1a4dba	8b		phb		                PHB
.1a4dbb	08		php		                PHP
.1a4dbc	c2 20		rep #$20	            REP #$20
.1a4dbe	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT            ; Point to the first line of the program
.1a4dc1	85 1a		sta $081a	                STA CURLINE
.1a4dc3	a9 16 00	lda #$0016	                LDA #`BASIC_BOT
.1a4dc6	85 1c		sta $081c	                STA CURLINE + 2
.1a4dc8	20 14 1f	jsr $1a1f14	            JSR CLRINTERP
.1a4dcb	20 f3 21	jsr $1a21f3	            JSR EXECPROGRAM
.1a4dce	28		plp		                PLP
.1a4dcf	ab		plb		                PLB
.1a4dd0	60		rts		            RTS
.1a4dd1					CMD_LIST
.1a4dd1	08		php		                PHP
.1a4dd2	c2 20		rep #$20	            REP #$20
.1a4dd4	64 55		stz $0855	                STZ MARG1               ; MARG1 is starting line number, default 0
.1a4dd6	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.1a4dd9	85 59		sta $0859	                STA MARG2               ; MARG2 is ending line number, default MAXINT
.1a4ddb	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a4dde	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a4de1	29 ff 00	and #$00ff	                AND #$00FF
.1a4de4	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.1a4de7	f0 2c		beq $1a4e15	                BEQ call_list           ; ... just list with the defaults
.1a4de9	c9 81 00	cmp #$0081	                CMP #TOK_MINUS          ; If just "- ###"...
.1a4dec	f0 1a		beq $1a4e08	                BEQ parse_endline       ; ... try to parse the end line number
.1a4dee	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a4df1	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a4df4	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG1
.1a4df6	85 55		sta $0855	                STA MARG1
.1a4df8	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a4dfb	29 ff 00	and #$00ff	                AND #$00FF
.1a4dfe	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.1a4e01	f0 12		beq $1a4e15	                BEQ call_list           ; ... just list with the defaults
.1a4e03	c9 81 00	cmp #$0081	                CMP #TOK_MINUS
.1a4e06	d0 2a		bne $1a4e32	                BNE error               ; At this point, if not '-', it's a syntax error
.1a4e08					parse_endline
.1a4e08	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a4e0b	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a4e0e	20 8a 07	jsr $1a078a	            JSR PARSEINT
.1a4e11	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG2
.1a4e13	85 59		sta $0859	                STA MARG2
.1a4e15	a5 1c		lda $081c	call_list       LDA CURLINE+2           ; Save CURLINE
.1a4e17	48		pha		                PHA
.1a4e18	a5 1a		lda $081a	                LDA CURLINE
.1a4e1a	48		pha		                PHA
.1a4e1b	a5 02		lda $0802	                LDA BIP+2               ; Save BIP
.1a4e1d	48		pha		                PHA
.1a4e1e	a5 00		lda $0800	                LDA BIP
.1a4e20	48		pha		                PHA
.1a4e21	20 f0 16	jsr $1a16f0	            JSR LISTPROG
.1a4e24	68		pla		                PLA
.1a4e25	85 00		sta $0800	                STA BIP
.1a4e27	68		pla		                PLA
.1a4e28	85 02		sta $0802	                STA BIP+2
.1a4e2a	68		pla		                PLA
.1a4e2b	85 1a		sta $081a	                STA CURLINE
.1a4e2d	68		pla		                PLA
.1a4e2e	85 1c		sta $081c	                STA CURLINE+2
.1a4e30	28		plp		                PLP
.1a4e31	60		rts		            RTS
.1a4e32					error
.1a4e32	08		php		            PHP
.1a4e33	c2 20		rep #$20	            REP #$20
.1a4e35	48		pha		            PHA
.1a4e36	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4e39	5b		tcd		            TCD
.1a4e3a	68		pla		            PLA
.1a4e3b	28		plp		            PLP
.1a4e3c	e2 20		sep #$20	            SEP #$20
.1a4e3e	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a4e40	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4e44	c2 20		rep #$20	            REP #$20
.1a4e46	29 ff 00	and #$00ff	            AND #$00FF
.1a4e49	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4e4c	e2 20		sep #$20	            SEP #$20
.1a4e4e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\variables.s

>08e1					NEXTVAR         .long ?         ; Pointer to the the next available byte for variable bindings
>08e4					VARIABLES       .long ?         ; Pointer to the most recently allocated variable
>08e7					TOFIND          .long ?         ; Pointer to the variable name to find
>08ea					TOFINDTYPE      .byte ?         ; The type to find
.0000					BINDING
>0000					TYPE            .fill 1                 ; The type of the data stored in the variable
>0001					NAME            .fill VAR_NAME_SIZE     ; The name of the variable
>0009					VALUE           .fill 4                 ; The data stored in the variable
>000d					NEXT            .fill 3                 ; The pointer to the next allocated variable of this type
.1a4e51					INITVARS
.1a4e51	08		php		                PHP
.1a4e52	08		php		            PHP
.1a4e53	c2 20		rep #$20	            REP #$20
.1a4e55	48		pha		            PHA
.1a4e56	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4e59	5b		tcd		            TCD
.1a4e5a	68		pla		            PLA
.1a4e5b	28		plp		            PLP
.1a4e5c	c2 20		rep #$20	            REP #$20
.1a4e5e	64 e4		stz $08e4	                STZ VARIABLES           ; Clear the pointer to the variables
.1a4e60	64 e7		stz $08e7	                STZ TOFIND
.1a4e62	e2 20		sep #$20	            SEP #$20
.1a4e64	64 e6		stz $08e6	                STZ VARIABLES+2
.1a4e66	64 e9		stz $08e9	                STZ TOFIND+2
.1a4e68	64 ea		stz $08ea	                STZ TOFINDTYPE
.1a4e6a	c2 20		rep #$20	            REP #$20
.1a4e6c	38		sec		                SEC                     ; Compute the position of the first variable
.1a4e6d	a5 d9		lda $08d9	                LDA LASTLINE
.1a4e6f	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.1a4e72	85 e1		sta $08e1	                STA NEXTVAR
.1a4e74	e2 20		sep #$20	            SEP #$20
.1a4e76	a5 db		lda $08db	                LDA LASTLINE+2
.1a4e78	69 00		adc #$00	                ADC #0
.1a4e7a	85 e3		sta $08e3	                STA NEXTVAR+2
.1a4e7c	28		plp		                PLP
.1a4e7d	60		rts		            RTS
.1a4e7e					ISVARCHAR
.1a4e7e	c9 5f		cmp #$5f	                CMP #'_'            ; Check if it's an underscore
.1a4e80	f0 1a		beq $1a4e9c	                BEQ return_true     ; Yes: return true
.1a4e82	c9 3a		cmp #$3a	                CMP #'9'+1          ; Check if its in [0-9]
.1a4e84	b0 04		bcs $1a4e8a	                BGE else1           ; No: check something else
.1a4e86	c9 30		cmp #$30	                CMP #'0'
.1a4e88	b0 12		bcs $1a4e9c	                BGE return_true     ; Yes: return true
.1a4e8a	c9 5b		cmp #$5b	else1           CMP #'Z'+1          ; Check if its in [A-Z]
.1a4e8c	b0 04		bcs $1a4e92	                BGE not_upper       ; No: check lower case
.1a4e8e	c9 41		cmp #$41	                CMP #'A'
.1a4e90	b0 0a		bcs $1a4e9c	                BGE return_true     ; Yes: return true
.1a4e92	c9 7b		cmp #$7b	not_upper       CMP #'z'+1          ; Check if its in [a-z]
.1a4e94	b0 04		bcs $1a4e9a	                BGE return_false    ; No: return false
.1a4e96	c9 61		cmp #$61	                CMP #'a'
.1a4e98	b0 02		bcs $1a4e9c	                BGE return_true     ; Yes: return true
.1a4e9a	18		clc		return_false    CLC
.1a4e9b	60		rts		            RTS
.1a4e9c	38		sec		return_true     SEC
.1a4e9d	60		rts		            RTS
.1a4e9e					VARNAMECMP
.1a4e9e	08		php		                PHP
.1a4e9f	e2 20		sep #$20	            SEP #$20
.1a4ea1	c2 10		rep #$10	            REP #$10
.1a4ea3	a0 00 00	ldy #$0000	                LDY #0
.1a4ea6	b7 0c		lda [$080c],y	cmp_loop        LDA [SCRATCH],Y         ; Check the character in the variable name
.1a4ea8	f0 0a		beq $1a4eb4	                BEQ is_end
.1a4eaa	d7 e7		cmp [$08e7],y	                CMP [TOFIND],Y          ; Compare the character to the one TOFIND
.1a4eac	d0 13		bne $1a4ec1	                BNE return_false        ; Not equal? Then this is not a match
.1a4eae	c8		iny		                INY
.1a4eaf	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a4eb2	d0 f2		bne $1a4ea6	                BNE cmp_loop
.1a4eb4	b7 e7		lda [$08e7],y	is_end          LDA [TOFIND],Y          ; Check the character in the name to find
.1a4eb6	20 08 04	jsr $1a0408	            JSR TOUPPERA
.1a4eb9	20 7e 4e	jsr $1a4e7e	            JSR ISVARCHAR
.1a4ebc	b0 03		bcs $1a4ec1	                BCS return_false        ; YES: we do not have a match
.1a4ebe					return_true
.1a4ebe	28		plp		                PLP
.1a4ebf	38		sec		                SEC
.1a4ec0	60		rts		            RTS
.1a4ec1					return_false
.1a4ec1	28		plp		                PLP
.1a4ec2	18		clc		                CLC
.1a4ec3	60		rts		            RTS
.1a4ec4					VAR_FIND
.1a4ec4	08		php		                PHP
.1a4ec5	e2 20		sep #$20	            SEP #$20
.1a4ec7	c2 10		rep #$10	            REP #$10
.1a4ec9	a0 00 00	ldy #$0000	                LDY #0
.1a4ecc	a2 00 00	ldx #$0000	                LDX #0
.1a4ecf	b7 e7		lda [$08e7],y	upper_loop      LDA [TOFIND],Y          ; Get a character
.1a4ed1	f0 0b		beq $1a4ede	                BEQ done_upper
.1a4ed3	20 08 04	jsr $1a0408	            JSR TOUPPERA
.1a4ed6	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; And save it to the temp
.1a4eda	c8		iny		                INY
.1a4edb	e8		inx		                INX
.1a4edc	80 f1		bra $1a4ecf	                BRA upper_loop          ; Go back for another
.1a4ede	a9 00		lda #$00	done_upper      LDA #0
.1a4ee0	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; NULL terminate the temporary string
.1a4ee4	c2 20		rep #$20	            REP #$20
.1a4ee6	a9 00 4e	lda #$4e00	                LDA #<>TEMPBUF          ; Make the temporary string the string
.1a4ee9	85 e7		sta $08e7	                STA TOFIND              ; the variable name to find
.1a4eeb	e2 20		sep #$20	            SEP #$20
.1a4eed	a9 00		lda #$00	                LDA #`TEMPBUF
.1a4eef	85 e9		sta $08e9	                STA TOFIND+2
.1a4ef1	c2 20		rep #$20	            REP #$20
.1a4ef3	a5 e4		lda $08e4	                LDA VARIABLES           ; Point INDEX to the first variable to check
.1a4ef5	85 08		sta $0808	                STA INDEX
.1a4ef7	d0 06		bne $1a4eff	                BNE set_index_h         ; If the low word is not 0, copy the high byte
.1a4ef9	e2 20		sep #$20	            SEP #$20
.1a4efb	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a4efd	f0 4d		beq $1a4f4c	                BEQ not_found           ; If it is, we have no variables yet.
.1a4eff					set_index_h
.1a4eff	e2 20		sep #$20	            SEP #$20
.1a4f01	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a4f03	85 0a		sta $080a	                STA INDEX+2
.1a4f05	a5 ea		lda $08ea	check_binding   LDA TOFINDTYPE
.1a4f07	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Get the type of the variable
.1a4f0a	d7 08		cmp [$0808],y	                CMP [INDEX],Y
.1a4f0c	d0 17		bne $1a4f25	                BNE check_next          ; If it's not a match, check the next binding
.1a4f0e	c2 20		rep #$20	            REP #$20
.1a4f10	18		clc		                CLC
.1a4f11	a5 08		lda $0808	                LDA INDEX
.1a4f13	69 01 00	adc #$0001	                ADC #BINDING.NAME
.1a4f16	85 0c		sta $080c	                STA SCRATCH
.1a4f18	e2 20		sep #$20	            SEP #$20
.1a4f1a	a5 0a		lda $080a	                LDA INDEX+2
.1a4f1c	69 00		adc #$00	                ADC #0
.1a4f1e	85 0e		sta $080e	                STA SCRATCH+2
.1a4f20	20 9e 4e	jsr $1a4e9e	            JSR VARNAMECMP
.1a4f23	b0 2a		bcs $1a4f4f	                BCS found               ; If they match, return that we've found the variable
.1a4f25	a0 0d 00	ldy #$000d	check_next      LDY #BINDING.NEXT       ; SCRATCH := [INDEX].NEXT
.1a4f28	c2 20		rep #$20	            REP #$20
.1a4f2a	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a4f2c	85 0c		sta $080c	                STA SCRATCH
.1a4f2e	c8		iny		                INY
.1a4f2f	c8		iny		                INY
.1a4f30	e2 20		sep #$20	            SEP #$20
.1a4f32	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a4f34	85 0e		sta $080e	                STA SCRATCH+2
.1a4f36	d0 06		bne $1a4f3e	                BNE set_index           ; If SCRATCH == 0, the variable wasn't found
.1a4f38	c2 20		rep #$20	            REP #$20
.1a4f3a	a5 0c		lda $080c	                LDA SCRATCH
.1a4f3c	f0 0e		beq $1a4f4c	                BEQ not_found
.1a4f3e					set_index
.1a4f3e	c2 20		rep #$20	            REP #$20
.1a4f40	a5 0c		lda $080c	                LDA SCRATCH
.1a4f42	85 08		sta $0808	                STA INDEX
.1a4f44	e2 20		sep #$20	            SEP #$20
.1a4f46	a5 0e		lda $080e	                LDA SCRATCH+2
.1a4f48	85 0a		sta $080a	                STA INDEX+2
.1a4f4a	80 b9		bra $1a4f05	                BRA check_binding       ; And check this next variable for a match
.1a4f4c					not_found
.1a4f4c	28		plp		                PLP
.1a4f4d	18		clc		                CLC
.1a4f4e	60		rts		            RTS
.1a4f4f					found
.1a4f4f	28		plp		                PLP
.1a4f50	38		sec		                SEC
.1a4f51	60		rts		            RTS
.1a4f52					VAR_REF
.1a4f52	08		php		                PHP
.1a4f53	20 c4 4e	jsr $1a4ec4	            JSR VAR_FIND
.1a4f56	b0 1f		bcs $1a4f77	                BCS found
.1a4f58	08		php		            PHP
.1a4f59	c2 20		rep #$20	            REP #$20
.1a4f5b	48		pha		            PHA
.1a4f5c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4f5f	5b		tcd		            TCD
.1a4f60	68		pla		            PLA
.1a4f61	28		plp		            PLP
.1a4f62	e2 20		sep #$20	            SEP #$20
.1a4f64	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.1a4f66	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4f6a	c2 20		rep #$20	            REP #$20
.1a4f6c	29 ff 00	and #$00ff	            AND #$00FF
.1a4f6f	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4f72	e2 20		sep #$20	            SEP #$20
.1a4f74	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4f77					found
.1a4f77	c2 30		rep #$30	            REP #$30
.1a4f79	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a4f7c	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a4f7e	85 23		sta $0823	                STA ARGUMENT1
.1a4f80	c8		iny		                INY
.1a4f81	c8		iny		                INY
.1a4f82	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a4f84	85 25		sta $0825	                STA ARGUMENT1+2
.1a4f86	e2 20		sep #$20	            SEP #$20
.1a4f88	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE
.1a4f8b	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a4f8d	85 27		sta $0827	                STA ARGTYPE1
.1a4f8f	28		plp		done            PLP
.1a4f90	60		rts		            RTS
.1a4f91					VAR_ALLOC
.1a4f91	08		php		                PHP
.1a4f92	c2 20		rep #$20	            REP #$20
.1a4f94	18		clc		                CLC                     ; Compute extent of the binding
.1a4f95	a5 e1		lda $08e1	                LDA NEXTVAR
.1a4f97	69 10 00	adc #$0010	                ADC #size(BINDING)
.1a4f9a	85 08		sta $0808	                STA INDEX
.1a4f9c	e2 20		sep #$20	            SEP #$20
.1a4f9e	a5 e3		lda $08e3	                LDA NEXTVAR+2
.1a4fa0	69 00		adc #$00	                ADC #0
.1a4fa2	85 0a		sta $080a	                STA INDEX+2
.1a4fa4	c5 bc		cmp $08bc	                CMP HEAP+2              ; Check to see if HEAP > INDEX
.1a4fa6	90 27		bcc $1a4fcf	                BLT has_room
.1a4fa8	c2 20		rep #$20	            REP #$20
.1a4faa	a5 08		lda $0808	                LDA INDEX
.1a4fac	c5 ba		cmp $08ba	                CMP HEAP
.1a4fae	90 1f		bcc $1a4fcf	                BLT has_room
.1a4fb0	08		php		            PHP
.1a4fb1	c2 20		rep #$20	            REP #$20
.1a4fb3	48		pha		            PHA
.1a4fb4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a4fb7	5b		tcd		            TCD
.1a4fb8	68		pla		            PLA
.1a4fb9	28		plp		            PLP
.1a4fba	e2 20		sep #$20	            SEP #$20
.1a4fbc	a9 09		lda #$09	            LDA #ERR_RANGE
.1a4fbe	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a4fc2	c2 20		rep #$20	            REP #$20
.1a4fc4	29 ff 00	and #$00ff	            AND #$00FF
.1a4fc7	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a4fca	e2 20		sep #$20	            SEP #$20
.1a4fcc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a4fcf					has_room
.1a4fcf	c2 20		rep #$20	            REP #$20
.1a4fd1	a5 e1		lda $08e1	                LDA NEXTVAR             ; Yes: we can allocate the variable
.1a4fd3	85 c0		sta $08c0	                STA CURRBLOCK           ; Point CURRBLOCK to it
.1a4fd5	e2 20		sep #$20	            SEP #$20
.1a4fd7	a5 e3		lda $08e3	                LDA NEXTVAR+2
.1a4fd9	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a4fdb	c2 20		rep #$20	            REP #$20
.1a4fdd	a5 08		lda $0808	                LDA INDEX               ; And point NEXTVAR to the next possible spot
.1a4fdf	85 e1		sta $08e1	                STA NEXTVAR
.1a4fe1	e2 20		sep #$20	            SEP #$20
.1a4fe3	a5 0a		lda $080a	                LDA INDEX+2
.1a4fe5	85 e3		sta $08e3	                STA NEXTVAR+2
.1a4fe7	28		plp		                PLP
.1a4fe8	60		rts		            RTS
.1a4fe9					VAR_CREATE
.1a4fe9	08		php		                PHP
.1a4fea	e2 20		sep #$20	            SEP #$20
.1a4fec	a5 27		lda $0827	                LDA ARGTYPE1            ; Validate that our types match
.1a4fee	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.1a4ff0	f0 33		beq $1a5025	                BEQ chk_string          ; If so: check to see if it's a string
.1a4ff2	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable type
.1a4ff4	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's INTEGER
.1a4ff6	d0 05		bne $1a4ffd	                BNE chk_float
.1a4ff8	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a4ffb	80 2f		bra $1a502c	                BRA alloc_binding       ; And bind the variable
.1a4ffd	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; If it's FLOAT
.1a4fff	d0 05		bne $1a5006	                BNE type_error
.1a5001	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a5004	80 26		bra $1a502c	                BRA alloc_binding       ; And bind the variable
.1a5006					type_error
.1a5006	08		php		            PHP
.1a5007	c2 20		rep #$20	            REP #$20
.1a5009	48		pha		            PHA
.1a500a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a500d	5b		tcd		            TCD
.1a500e	68		pla		            PLA
.1a500f	28		plp		            PLP
.1a5010	e2 20		sep #$20	            SEP #$20
.1a5012	a9 04		lda #$04	            LDA #ERR_TYPE
.1a5014	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5018	c2 20		rep #$20	            REP #$20
.1a501a	29 ff 00	and #$00ff	            AND #$00FF
.1a501d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a5020	e2 20		sep #$20	            SEP #$20
.1a5022	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5025	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING        ; Is it a string?
.1a5027	d0 03		bne $1a502c	                BNE alloc_binding       ; No: just go ahead and bind it
.1a5029	20 80 15	jsr $1a1580	            JSR STRCPY
.1a502c					alloc_binding
.1a502c	c2 10		rep #$10	            REP #$10
.1a502e	20 91 4f	jsr $1a4f91	            JSR VAR_ALLOC
.1a5031	c2 30		rep #$30	            REP #$30
.1a5033	18		clc		                CLC
.1a5034	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a5036	69 01 00	adc #$0001	                ADC #BINDING.NAME
.1a5039	85 08		sta $0808	                STA INDEX
.1a503b	e2 20		sep #$20	            SEP #$20
.1a503d	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a503f	69 00		adc #$00	                ADC #0
.1a5041	85 0a		sta $080a	                STA INDEX+2
.1a5043	a0 00 00	ldy #$0000	                LDY #0                  ; Ensure that the name field is blank
.1a5046	a9 00		lda #$00	                LDA #0
.1a5048	97 08		sta [$0808],y	blank_loop      STA [INDEX],Y
.1a504a	c8		iny		                INY
.1a504b	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a504e	d0 f8		bne $1a5048	                BNE blank_loop
.1a5050	a0 00 00	ldy #$0000	                LDY #0
.1a5053	b7 e7		lda [$08e7],y	name_loop       LDA [TOFIND],Y          ; Copy TOFIND to the NAME field
.1a5055	f0 10		beq $1a5067	                BEQ set_type
.1a5057	20 08 04	jsr $1a0408	            JSR TOUPPERA
.1a505a	20 7e 4e	jsr $1a4e7e	            JSR ISVARCHAR
.1a505d	90 08		bcc $1a5067	                BCC set_type
.1a505f	97 08		sta [$0808],y	                STA [INDEX],Y
.1a5061	c8		iny		                INY
.1a5062	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.1a5065	d0 ec		bne $1a5053	                BNE name_loop
.1a5067					set_type
.1a5067	c2 20		rep #$20	            REP #$20
.1a5069	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE      ; Copy the value to the variable
.1a506c	a5 23		lda $0823	                LDA ARGUMENT1
.1a506e	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5070	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5072	c8		iny		                INY
.1a5073	c8		iny		                INY
.1a5074	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5076	a5 e4		lda $08e4	                LDA VARIABLES           ; Point NEXT to the current top of variables
.1a5078	a0 0d 00	ldy #$000d	                LDY #BINDING.NEXT
.1a507b	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a507d	c8		iny		                INY
.1a507e	c8		iny		                INY
.1a507f	e2 20		sep #$20	            SEP #$20
.1a5081	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a5083	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a5085	c2 20		rep #$20	            REP #$20
.1a5087	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a5089	85 e4		sta $08e4	                STA VARIABLES
.1a508b	e2 20		sep #$20	            SEP #$20
.1a508d	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a508f	85 e6		sta $08e6	                STA VARIABLES+2
.1a5091	e2 20		sep #$20	            SEP #$20
.1a5093	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Set the type of the variable
.1a5096	a5 27		lda $0827	                LDA ARGTYPE1
.1a5098	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.1a509a	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is it a string?
.1a509c	f0 02		beq $1a50a0	                BEQ set_ref             ; Yes: add a reference count to it
.1a509e	28		plp		done            PLP
.1a509f	60		rts		            RTS
.1a50a0					set_ref
.1a50a0	c2 20		rep #$20	            REP #$20
.1a50a2	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the a heap allocated value
.1a50a4	85 c0		sta $08c0	                STA CURRBLOCK
.1a50a6	e2 20		sep #$20	            SEP #$20
.1a50a8	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a50aa	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a50ac	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a50af	20 b1 11	jsr $1a11b1	            JSR HEAP_ADDREF
.1a50b2	80 ea		bra $1a509e	                BRA done
.1a50b4					VAR_SET
.1a50b4	08		php		                PHP
.1a50b5	c2 30		rep #$30	            REP #$30
.1a50b7	a5 e4		lda $08e4	                LDA VARIABLES          ; If VARIABLES = 0, use VAR_CREATE
.1a50b9	d0 06		bne $1a50c1	                BNE use_find
.1a50bb	e2 20		sep #$20	            SEP #$20
.1a50bd	a5 e6		lda $08e6	                LDA VARIABLES+2
.1a50bf	f0 05		beq $1a50c6	                BEQ use_create
.1a50c1					use_find
.1a50c1	20 c4 4e	jsr $1a4ec4	            JSR VAR_FIND
.1a50c4	b0 05		bcs $1a50cb	                BCS found
.1a50c6					use_create
.1a50c6	20 e9 4f	jsr $1a4fe9	            JSR VAR_CREATE
.1a50c9	80 4e		bra $1a5119	                BRA done
.1a50cb					found
.1a50cb	e2 20		sep #$20	            SEP #$20
.1a50cd	a5 27		lda $0827	                LDA ARGTYPE1            ; Do the types match?
.1a50cf	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.1a50d1	f0 33		beq $1a5106	                BEQ chk_string          ; Yes: check to see if it's string
.1a50d3	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable
.1a50d5	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; Is it INTEGER?
.1a50d7	d0 05		bne $1a50de	                BNE chk_float
.1a50d9	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a50dc	80 2c		bra $1a510a	                BRA set_val
.1a50de	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; Is it FLOAT?
.1a50e0	d0 05		bne $1a50e7	                BNE type_error          ; No: throw an error
.1a50e2	20 71 06	jsr $1a0671	            JSR ASS_ARG1_FLOAT
.1a50e5	80 23		bra $1a510a	                BRA set_val
.1a50e7					type_error
.1a50e7	08		php		            PHP
.1a50e8	c2 20		rep #$20	            REP #$20
.1a50ea	48		pha		            PHA
.1a50eb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a50ee	5b		tcd		            TCD
.1a50ef	68		pla		            PLA
.1a50f0	28		plp		            PLP
.1a50f1	e2 20		sep #$20	            SEP #$20
.1a50f3	a9 04		lda #$04	            LDA #ERR_TYPE
.1a50f5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a50f9	c2 20		rep #$20	            REP #$20
.1a50fb	29 ff 00	and #$00ff	            AND #$00FF
.1a50fe	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a5101	e2 20		sep #$20	            SEP #$20
.1a5103	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5106	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING
.1a5108	f0 11		beq $1a511b	                BEQ set_string          ; Yes: set the string value of the variable
.1a510a					set_val
.1a510a	c2 30		rep #$30	            REP #$30
.1a510c	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.1a510f	a5 23		lda $0823	                LDA ARGUMENT1
.1a5111	97 08		sta [$0808],y	                STA [INDEX],Y
.1a5113	c8		iny		                INY
.1a5114	c8		iny		                INY
.1a5115	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5117	97 08		sta [$0808],y	                STA [INDEX],Y
.1a5119					done
.1a5119	28		plp		                PLP
.1a511a	60		rts		            RTS
.1a511b					set_string
.1a511b	20 80 15	jsr $1a1580	            JSR STRCPY
.1a511e	a0 09 00	ldy #$0009	set_ref         LDY #BINDING.VALUE      ; Set CURRBLOCK to the current string value
.1a5121	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a5123	85 c0		sta $08c0	                STA CURRBLOCK
.1a5125	c8		iny		                INY
.1a5126	c8		iny		                INY
.1a5127	e2 20		sep #$20	            SEP #$20
.1a5129	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a512b	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a512d	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a5130	20 d0 11	jsr $1a11d0	            JSR HEAP_REMREF
.1a5133	e2 20		sep #$20	            SEP #$20
.1a5135	a5 27		lda $0827	                LDA ARGTYPE1
.1a5137	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is the new value a string?
.1a5139	f0 02		beq $1a513d	                BEQ add_ref             ; Yes: add a reference to it
.1a513b	80 cd		bra $1a510a	                BRA set_val             ; No: go back to set the value... this probably shouldn't happen
.1a513d					add_ref
.1a513d	c2 20		rep #$20	            REP #$20
.1a513f	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the new string value
.1a5141	85 c0		sta $08c0	                STA CURRBLOCK
.1a5143	e2 20		sep #$20	            SEP #$20
.1a5145	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5147	85 c2		sta $08c2	                STA CURRBLOCK+2
.1a5149	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a514c	20 b1 11	jsr $1a11b1	            JSR HEAP_ADDREF
.1a514f	80 b9		bra $1a510a	                BRA set_val
.1a5151					VAR_FINDNAME
.1a5151	08		php		                PHP
.1a5152	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a5155	e2 20		sep #$20	            SEP #$20
.1a5157	a7 00		lda [$0800]	                LDA [BIP]           ; Get the first character
.1a5159	20 94 03	jsr $1a0394	            JSR ISALPHA
.1a515c	90 42		bcc $1a51a0	                BCC not_found
.1a515e	c2 20		rep #$20	            REP #$20
.1a5160	a5 00		lda $0800	                LDA BIP
.1a5162	85 e7		sta $08e7	                STA TOFIND
.1a5164	e2 20		sep #$20	            SEP #$20
.1a5166	a5 02		lda $0802	                LDA BIP+2
.1a5168	85 e9		sta $08e9	                STA TOFIND+2
.1a516a					loop
.1a516a	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a516d	a7 00		lda [$0800]	                LDA [BIP]
.1a516f	f0 0d		beq $1a517e	                BEQ is_float        ; If it's EOL, the variable is a float
.1a5171	c9 24		cmp #$24	                CMP #'$'            ; If it's $, the variable is a string
.1a5173	f0 14		beq $1a5189	                BEQ is_string
.1a5175	c9 25		cmp #$25	                CMP #'%'            ; If it's %, the variable is an integer
.1a5177	f0 09		beq $1a5182	                BEQ is_integer
.1a5179	20 7e 4e	jsr $1a4e7e	            JSR ISVARCHAR
.1a517c	b0 ec		bcs $1a516a	                BCS loop            ; Check the next one
.1a517e	a9 01		lda #$01	is_float        LDA #TYPE_FLOAT     ; Otherwise it's a float
.1a5180	80 0c		bra $1a518e	                BRA set_type
.1a5182					is_integer
.1a5182	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a5185	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a5187	80 05		bra $1a518e	                BRA set_type
.1a5189					is_string
.1a5189	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a518c	a9 02		lda #$02	                LDA #TYPE_STRING
.1a518e	85 ea		sta $08ea	set_type        STA TOFINDTYPE
.1a5190	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a5193	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it "("?
.1a5195	d0 06		bne $1a519d	                BNE done            ; No: we're done... it's just a scalar variable
.1a5197	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Yes: this is an array reference
.1a5199	09 80		ora #$80	                ORA #$80            ; ... turn on the "Array of..." bit
.1a519b	85 ea		sta $08ea	                STA TOFINDTYPE
.1a519d					done
.1a519d	28		plp		                PLP
.1a519e	38		sec		                SEC
.1a519f	60		rts		            RTS
.1a51a0	28		plp		not_found       PLP
.1a51a1	18		clc		                CLC
.1a51a2	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\integers.s

.1a51a3					OP_INT_ADD
.1a51a3	08		php		            PHP
.1a51a4	c2 20		rep #$20	            REP #$20
.1a51a6	18		clc		            CLC
.1a51a7	a5 23		lda $0823	            LDA ARGUMENT1
.1a51a9	65 29		adc $0829	            ADC ARGUMENT2
.1a51ab	85 23		sta $0823	            STA ARGUMENT1
.1a51ad	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a51af	65 2b		adc $082b	            ADC ARGUMENT2+2
.1a51b1	85 25		sta $0825	            STA ARGUMENT1+2
.1a51b3	28		plp		            PLP
.1a51b4	60		rts		            RTS
.1a51b5					OP_INT_SUB
.1a51b5	08		php		            PHP
.1a51b6	c2 20		rep #$20	            REP #$20
.1a51b8	38		sec		            SEC
.1a51b9	a5 23		lda $0823	            LDA ARGUMENT1
.1a51bb	e5 29		sbc $0829	            SBC ARGUMENT2
.1a51bd	85 23		sta $0823	            STA ARGUMENT1
.1a51bf	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a51c1	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a51c3	85 25		sta $0825	            STA ARGUMENT1+2
.1a51c5	28		plp		            PLP
.1a51c6	60		rts		            RTS
.1a51c7					OP_INT_MUL
.1a51c7	08		php		            PHP
.1a51c8					locals
>0001					L_SIGN      .word ?
>0003					L_RESULT    .dword ?
>0007					            .dword ?
.1a51c8	c2 20		rep #$20	            REP #$20
.1a51ca	3b		tsc		            TSC
.1a51cb	38		sec		            SEC
.1a51cc	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.1a51cf	1b		tcs		            TCS
.1a51d0	c2 30		rep #$30	            REP #$30
.1a51d2	a9 00 00	lda #$0000	            LDA #0                  ; Start by assuming positive numbers
.1a51d5	83 01		sta $01,s	            STA L_SIGN
.1a51d7	83 03		sta $03,s	            STA L_RESULT            ; Clear result
.1a51d9	83 05		sta $05,s	            STA L_RESULT+2
.1a51db	83 07		sta $07,s	            STA L_RESULT+4
.1a51dd	83 09		sta $09,s	            STA L_RESULT+6
.1a51df	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Ensure ARGUMENT1 is positive
.1a51e1	10 18		bpl $1a51fb	            BPL chk_sign2
.1a51e3	a9 00 80	lda #$8000	            LDA #$8000              ; Record that ARGUMENT1 is negative
.1a51e6	83 01		sta $01,s	            STA L_SIGN
.1a51e8	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Take the two's complement of ARGUMENT1
.1a51ea	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a51ed	85 25		sta $0825	            STA ARGUMENT1+2
.1a51ef	a5 23		lda $0823	            LDA ARGUMENT1
.1a51f1	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a51f4	1a		inc a		            INC A
.1a51f5	85 23		sta $0823	            STA ARGUMENT1
.1a51f7	d0 02		bne $1a51fb	            BNE chk_sign2
.1a51f9	e6 25		inc $0825	            INC ARGUMENT1+2
.1a51fb	a5 2b		lda $082b	chk_sign2   LDA ARGUMENT2+2         ; Ensure ARGUMENT2 is positive
.1a51fd	10 1a		bpl $1a5219	            BPL chk_over
.1a51ff	a3 01		lda $01,s	            LDA L_SIGN              ; Flip the sign
.1a5201	49 00 80	eor #$8000	            EOR #$8000
.1a5204	83 01		sta $01,s	            STA L_SIGN
.1a5206	a5 2b		lda $082b	            LDA ARGUMENT2+2         ; Take the two's complement of ARGUMENT2
.1a5208	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a520b	85 2b		sta $082b	            STA ARGUMENT2+2
.1a520d	a5 29		lda $0829	            LDA ARGUMENT2
.1a520f	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a5212	1a		inc a		            INC A
.1a5213	85 29		sta $0829	            STA ARGUMENT2
.1a5215	d0 02		bne $1a5219	            BNE chk_over
.1a5217	e6 2b		inc $082b	            INC ARGUMENT2+2
.1a5219					chk_over
.1a5219	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a521b	f0 04		beq $1a5221	            BEQ do_mult
.1a521d	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a521f	d0 5a		bne $1a527b	            BNE overflow
.1a5221					do_mult
.1a5221	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*D
.1a5223	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a5227	a5 29		lda $0829	            LDA ARGUMENT2
.1a5229	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a522d	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a5231	83 03		sta $03,s	            STA L_RESULT
.1a5233	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a5237	83 05		sta $05,s	            STA L_RESULT+2
.1a5239	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Calculate A*D << 16 + B*D
.1a523b	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a523f	a5 29		lda $0829	            LDA ARGUMENT2
.1a5241	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a5245	18		clc		            CLC
.1a5246	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a524a	63 05		adc $05,s	            ADC L_RESULT+2
.1a524c	83 05		sta $05,s	            STA L_RESULT+2
.1a524e	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a5252	63 07		adc $07,s	            ADC L_RESULT+4
.1a5254	83 07		sta $07,s	            STA L_RESULT+4
.1a5256	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*C << 16 + A*D << 16 + B*D
.1a5258	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.1a525c	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a525e	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.1a5262	18		clc		            CLC
.1a5263	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.1a5267	63 05		adc $05,s	            ADC L_RESULT+2
.1a5269	83 05		sta $05,s	            STA L_RESULT+2
.1a526b	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.1a526f	63 07		adc $07,s	            ADC L_RESULT+4
.1a5271	83 07		sta $07,s	            STA L_RESULT+4
.1a5273	a3 07		lda $07,s	            LDA L_RESULT+4
.1a5275	f0 23		beq $1a529a	            BEQ no_overflow
.1a5277	a3 09		lda $09,s	            LDA L_RESULT+6
.1a5279	f0 1f		beq $1a529a	            BEQ no_overflow
.1a527b					overflow
.1a527b	08		php		            PHP
.1a527c	c2 20		rep #$20	            REP #$20
.1a527e	48		pha		            PHA
.1a527f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5282	5b		tcd		            TCD
.1a5283	68		pla		            PLA
.1a5284	28		plp		            PLP
.1a5285	e2 20		sep #$20	            SEP #$20
.1a5287	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a5289	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a528d	c2 20		rep #$20	            REP #$20
.1a528f	29 ff 00	and #$00ff	            AND #$00FF
.1a5292	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a5295	e2 20		sep #$20	            SEP #$20
.1a5297	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a529a					no_overflow
.1a529a	c2 30		rep #$30	            REP #$30
.1a529c	a3 01		lda $01,s	            LDA L_SIGN              ; Check the sign
.1a529e	10 16		bpl $1a52b6	            BPL ret_result          ; If positive: just return the result
.1a52a0	a3 05		lda $05,s	            LDA L_RESULT+2          ; Compute the two's complement of the result
.1a52a2	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a52a5	83 05		sta $05,s	            STA L_RESULT+2
.1a52a7	a3 03		lda $03,s	            LDA L_RESULT
.1a52a9	49 ff ff	eor #$ffff	            EOR #$FFFF
.1a52ac	1a		inc a		            INC A
.1a52ad	83 03		sta $03,s	            STA L_RESULT
.1a52af	d0 05		bne $1a52b6	            BNE ret_result
.1a52b1	a3 05		lda $05,s	            LDA L_RESULT+2
.1a52b3	1a		inc a		            INC A
.1a52b4	83 05		sta $05,s	            STA L_RESULT+2
.1a52b6					ret_result
.1a52b6	a3 03		lda $03,s	            LDA L_RESULT
.1a52b8	85 23		sta $0823	            STA ARGUMENT1
.1a52ba	a3 05		lda $05,s	            LDA L_RESULT+2
.1a52bc	85 25		sta $0825	            STA ARGUMENT1+2
.1a52be	c2 20		rep #$20	            REP #$20
.1a52c0	3b		tsc		            TSC
.1a52c1	18		clc		            CLC
.1a52c2	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.1a52c5	1b		tcs		            TCS
.1a52c6	28		plp		            PLP
.1a52c7	60		rts		            RTS
.1a52c8					OP_INT_LT
.1a52c8	08		php		            PHP
.1a52c9	c2 20		rep #$20	            REP #$20
.1a52cb	a5 23		lda $0823	            LDA ARGUMENT1
.1a52cd	c5 29		cmp $0829	            CMP ARGUMENT2
.1a52cf	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a52d1	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a52d3	50 03		bvc $1a52d8	            BVC skip_eor
.1a52d5	49 00 80	eor #$8000	            EOR #$8000
.1a52d8	30 06		bmi $1a52e0	skip_eor    BMI ret_true
.1a52da	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a52dc	64 25		stz $0825	            STZ ARGUMENT1+2
.1a52de	80 07		bra $1a52e7	            BRA done
.1a52e0	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a52e3	85 23		sta $0823	            STA ARGUMENT1
.1a52e5	85 25		sta $0825	            STA ARGUMENT1+2
.1a52e7	28		plp		done        PLP
.1a52e8	60		rts		            RTS
.1a52e9					OP_INT_GT
.1a52e9	08		php		            PHP
.1a52ea	c2 20		rep #$20	            REP #$20
.1a52ec	a5 23		lda $0823	            LDA ARGUMENT1
.1a52ee	c5 29		cmp $0829	            CMP ARGUMENT2
.1a52f0	d0 0c		bne $1a52fe	            BNE test_fully
.1a52f2	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a52f4	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a52f6	d0 06		bne $1a52fe	            BNE test_fully
.1a52f8	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a52fa	64 25		stz $0825	            STZ ARGUMENT1+2
.1a52fc	80 16		bra $1a5314	            BRA done
.1a52fe	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.1a5300	c5 23		cmp $0823	            CMP ARGUMENT1
.1a5302	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a5304	e5 25		sbc $0825	            SBC ARGUMENT1+2
.1a5306	50 03		bvc $1a530b	            BVC skip_eor
.1a5308	49 00 80	eor #$8000	            EOR #$8000
.1a530b	10 eb		bpl $1a52f8	skip_eor    BPL ret_false
.1a530d	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a5310	85 23		sta $0823	            STA ARGUMENT1
.1a5312	85 25		sta $0825	            STA ARGUMENT1+2
.1a5314	28		plp		done        PLP
.1a5315	60		rts		            RTS
.1a5316					OP_INT_EQ
.1a5316	08		php		            PHP
.1a5317	c2 20		rep #$20	            REP #$20
.1a5319	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a531b	c5 25		cmp $0825	            CMP ARGUMENT1+2
.1a531d	d0 0f		bne $1a532e	            BNE ret_false
.1a531f	a5 29		lda $0829	            LDA ARGUMENT2
.1a5321	c5 23		cmp $0823	            CMP ARGUMENT1
.1a5323	d0 09		bne $1a532e	            BNE ret_false
.1a5325	a9 ff ff	lda #$ffff	            LDA #$FFFF
.1a5328	85 23		sta $0823	            STA ARGUMENT1
.1a532a	85 25		sta $0825	            STA ARGUMENT1+2
.1a532c	80 04		bra $1a5332	            BRA done
.1a532e	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a5330	64 25		stz $0825	            STZ ARGUMENT1+2
.1a5332	28		plp		done        PLP
.1a5333	60		rts		            RTS
.1a5334					OP_INT_NE
.1a5334	08		php		            PHP
.1a5335	c2 20		rep #$20	            REP #$20
.1a5337	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a5339	c5 25		cmp $0825	            CMP ARGUMENT1+2
.1a533b	d0 0c		bne $1a5349	            BNE ret_true
.1a533d	a5 29		lda $0829	            LDA ARGUMENT2
.1a533f	c5 23		cmp $0823	            CMP ARGUMENT1
.1a5341	d0 06		bne $1a5349	            BNE ret_true
.1a5343	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a5345	64 25		stz $0825	            STZ ARGUMENT1+2
.1a5347	80 07		bra $1a5350	            BRA done
.1a5349	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a534c	85 23		sta $0823	            STA ARGUMENT1
.1a534e	85 25		sta $0825	            STA ARGUMENT1+2
.1a5350	28		plp		done        PLP
.1a5351	60		rts		            RTS
.1a5352					OP_INT_GTE
.1a5352	08		php		            PHP
.1a5353	c2 20		rep #$20	            REP #$20
.1a5355	a5 23		lda $0823	            LDA ARGUMENT1
.1a5357	c5 29		cmp $0829	            CMP ARGUMENT2
.1a5359	d0 0f		bne $1a536a	            BNE test_fully
.1a535b	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a535d	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a535f	d0 09		bne $1a536a	            BNE test_fully
.1a5361	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a5364	85 23		sta $0823	            STA ARGUMENT1
.1a5366	85 25		sta $0825	            STA ARGUMENT1+2
.1a5368	80 13		bra $1a537d	            BRA done
.1a536a	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.1a536c	c5 23		cmp $0823	            CMP ARGUMENT1
.1a536e	a5 2b		lda $082b	            LDA ARGUMENT2+2
.1a5370	e5 25		sbc $0825	            SBC ARGUMENT1+2
.1a5372	50 03		bvc $1a5377	            BVC skip_eor
.1a5374	49 00 80	eor #$8000	            EOR #$8000
.1a5377	30 e8		bmi $1a5361	skip_eor    BMI ret_true
.1a5379	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a537b	64 25		stz $0825	            STZ ARGUMENT1+2
.1a537d	28		plp		done        PLP
.1a537e	60		rts		            RTS
.1a537f					OP_INT_LTE
.1a537f	08		php		            PHP
.1a5380	c2 20		rep #$20	            REP #$20
.1a5382	a5 23		lda $0823	            LDA ARGUMENT1
.1a5384	c5 29		cmp $0829	            CMP ARGUMENT2
.1a5386	d0 0f		bne $1a5397	            BNE test_fully
.1a5388	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a538a	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.1a538c	d0 09		bne $1a5397	            BNE test_fully
.1a538e	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.1a5391	85 23		sta $0823	            STA ARGUMENT1
.1a5393	85 25		sta $0825	            STA ARGUMENT1+2
.1a5395	80 13		bra $1a53aa	            BRA done
.1a5397	a5 23		lda $0823	test_fully  LDA ARGUMENT1
.1a5399	c5 29		cmp $0829	            CMP ARGUMENT2
.1a539b	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a539d	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.1a539f	50 03		bvc $1a53a4	            BVC skip_eor
.1a53a1	49 00 80	eor #$8000	            EOR #$8000
.1a53a4	30 e8		bmi $1a538e	skip_eor    BMI ret_true
.1a53a6	64 23		stz $0823	ret_false   STZ ARGUMENT1
.1a53a8	64 25		stz $0825	            STZ ARGUMENT1+2
.1a53aa	28		plp		done        PLP
.1a53ab	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\floats.s


;******  Processing file: src\C256/floats.s


;******  Processing file: src\C256/fp_math_defs.s

=$afe200				FP_MATH_CTRL0 = $AFE200         ; Read/write
=$08					FP_MATH_CTRL0_ADD = $08         ; 0: Substraction - 1: Addition
=$01					FP_CTRL0_CONV_0 = %00000001     ; Input 0 should be converted from 24.12 fixed point to floating point
=$02					FP_CTRL0_CONV_1 = %00000010     ; Input 1 should be converted from 24.12 fixed point to floating point
=$00					FP_ADD_IN0_MUX0 = %00000000     ; Adder input #0 is the output of MUX0
=$10					FP_ADD_IN0_MUX1 = %00010000     ; Adder input #0 is the output of MUX1
=$20					FP_ADD_IN0_MULT = %00100000     ; Adder input #0 is the output of the multiplier
=$30					FP_ADD_IN0_DIV  = %00110000     ; Adder input #0 is the output of the divider
=$00					FP_ADD_IN1_MUX0 = %00000000     ; Adder input #1 is the output of MUX0
=$40					FP_ADD_IN1_MUX1 = %01000000     ; Adder input #1 is the output of MUX1
=$80					FP_ADD_IN1_MULT = %10000000     ; Adder input #1 is the output of the multiplier
=$c0					FP_ADD_IN1_DIV  = %11000000     ; Adder input #1 is the output of the divider
=$afe201				FP_MATH_CTRL1 = $AFE201
=$00					FP_OUT_MULT = %00000000         ; Output is from the multiplier
=$01					FP_OUT_DIV  = %00000001         ; Output is from the divider
=$02					FP_OUT_ADD  = %00000010         ; Output is from the adder/subtracter
=$03					FP_OUT_ONE  = %00000011         ; Output is the constant '1.0'
=$afe202				FP_MATH_CTRL2 = $AFE202         ; Not Used - Reserved
=$afe203				FP_MATH_CTRL3 = $AFE203         ; Not Used - Reserved
=$afe204				FP_MATH_MULT_STAT = $AFE204     ; Status of the multiplier
=$01					FP_MULT_STAT_NAN  = $01         ; (NAN) Not a Number Status
=$02					FP_MULT_STAT_OVF  = $02         ; Overflow
=$04					FP_MULT_STAT_UDF  = $04         ; Underflow
=$08					FP_MULT_STAT_ZERO = $08         ; Zero
=$afe205				FP_MATH_DIV_STAT  = $AFE205     ; Status of the divider
=$01					FP_DIV_STAT_NAN       = $01     ; Not a number Status
=$02					FP_DIV_STAT_OVF       = $02     ; Overflow
=$04					FP_DIV_STAT_UDF       = $04     ; Underflow
=$08					FP_DIV_STAT_ZERO      = $08     ; Zero
=$10					FP_DIV_STAT_DIVBYZERO = $10     ; Division by Zero
=$afe206				FP_MATH_ADD_STAT  = $AFE206     ; Status of the adder/subtracter
=$01					FP_ADD_STAT_NAN  = $01          ; Not a number Status
=$02					FP_ADD_STAT_OVF  = $02          ; Overflow
=$04					FP_ADD_STAT_UDF  = $04          ; Underflow
=$08					FP_ADD_STAT_ZERO = $08          ; Zero
=$afe207				FP_MATH_CONV_STAT = $AFE207     ; Status of the fixed <=> float converters
=$01					FP_CONV_STAT_NAN  = $01         ; Not a number Status
=$02					FP_CONV_STAT_OVF  = $02         ; Overflow
=$04					FP_CONV_STAT_UDF  = $04         ; Underflow
=$afe208				FP_MATH_INPUT0_LL = $AFE208
=$afe209				FP_MATH_INPUT0_LH = $AFE209
=$afe20a				FP_MATH_INPUT0_HL = $AFE20A
=$afe20b				FP_MATH_INPUT0_HH = $AFE20B
=$afe20c				FP_MATH_INPUT1_LL = $AFE20C
=$afe20d				FP_MATH_INPUT1_LH = $AFE20D
=$afe20e				FP_MATH_INPUT1_HL = $AFE20E
=$afe20f				FP_MATH_INPUT1_HH = $AFE20F
=$afe208				FP_MATH_OUTPUT_FP_LL = $AFE208
=$afe209				FP_MATH_OUTPUT_FP_LH = $AFE209
=$afe20a				FP_MATH_OUTPUT_FP_HL = $AFE20A
=$afe20b				FP_MATH_OUTPUT_FP_HH = $AFE20B
=$afe20c				FP_MATH_OUTPUT_FIXED_LL = $AFE20C
=$afe20d				FP_MATH_OUTPUT_FIXED_LH = $AFE20D
=$afe20e				FP_MATH_OUTPUT_FIXED_HL = $AFE20E
=$afe20f				FP_MATH_OUTPUT_FIXED_HH = $AFE20F

;******  Return to file: src\C256/floats.s


;******  Processing file: src\C256/math_cop.s

.1a53ac					UINT_DIV_A_X
.1a53ac	08		php		                    PHP
.1a53ad	c2 20		rep #$20	            REP #$20
.1a53af	8f 12 01 00	sta $000112	                    STA @l UNSIGNED_DIV_NUM_LO
.1a53b3	8a		txa		                    TXA
.1a53b4	8f 10 01 00	sta $000110	                    STA @l UNSIGNED_DIV_DEM_LO
.1a53b8	af 16 01 00	lda $000116	                    LDA @l UNSIGNED_DIV_REM_LO
.1a53bc	aa		tax		                    TAX
.1a53bd	af 14 01 00	lda $000114	                    LDA @l UNSIGNED_DIV_QUO_LO
.1a53c1	28		plp		                    PLP
.1a53c2	60		rts		            RTS

;******  Return to file: src\C256/floats.s

.1a53c3					FIXINT_TO_FP
.1a53c3	08		php		                    PHP
.1a53c4	e2 20		sep #$20	            SEP #$20
.1a53c6	a9 03		lda #$03	                    LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a53c8	8f 00 e2 af	sta $afe200	                    STA @l FP_MATH_CTRL0
.1a53cc	a9 00		lda #$00	                    LDA #FP_OUT_MULT
.1a53ce	8f 01 e2 af	sta $afe201	                    STA @l FP_MATH_CTRL1
.1a53d2	c2 20		rep #$20	            REP #$20
.1a53d4	a5 23		lda $0823	                    LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a53d6	8f 08 e2 af	sta $afe208	                    STA @l FP_MATH_INPUT0_LL
.1a53da	a5 25		lda $0825	                    LDA ARGUMENT1+2
.1a53dc	8f 0a e2 af	sta $afe20a	                    STA @l FP_MATH_INPUT0_HL
.1a53e0	a9 00 00	lda #$0000	                    LDA #0
.1a53e3	8f 0c e2 af	sta $afe20c	                    STA @l FP_MATH_INPUT1_LL    ; ARGUMENT2 = 0100 0000 = 4096 in 20:12
.1a53e7	a9 00 01	lda #$0100	                    LDA #$0100
.1a53ea	8f 0e e2 af	sta $afe20e	                    STA @l FP_MATH_INPUT1_HL
.1a53ee	ea		nop		                    NOP
.1a53ef	ea		nop		                    NOP
.1a53f0	ea		nop		                    NOP
.1a53f1	ea		nop		                    NOP
.1a53f2	ea		nop		                    NOP
.1a53f3	ea		nop		                    NOP
.1a53f4	af 08 e2 af	lda $afe208	                    LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a53f8	85 23		sta $0823	                    STA ARGUMENT1
.1a53fa	af 0a e2 af	lda $afe20a	                    LDA @l FP_MATH_OUTPUT_FP_HL
.1a53fe	85 25		sta $0825	                    STA ARGUMENT1+2
.1a5400	a9 01 00	lda #$0001	                    LDA #TYPE_FLOAT
.1a5403	85 27		sta $0827	                    STA ARGTYPE1
.1a5405	28		plp		                    PLP
.1a5406	60		rts		            RTS
.1a5407	08		php		OP_FP_SUB       PHP
.1a5408	e2 20		sep #$20	            SEP #$20
.1a540a	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a540c	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a5410	80 09		bra $1a541b	                BRA FP_ADD_SUB
.1a5412	08		php		OP_FP_ADD       PHP
.1a5413	e2 20		sep #$20	            SEP #$20
.1a5415	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5417	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a541b	a9 02		lda #$02	FP_ADD_SUB      LDA #FP_OUT_ADD
.1a541d	8f 01 e2 af	sta $afe201	                STA @lFP_MATH_CTRL1
.1a5421	c2 20		rep #$20	            REP #$20
.1a5423	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a5425	8f 08 e2 af	sta $afe208	                STA @lFP_MATH_INPUT0_LL
.1a5429	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a542b	8f 0a e2 af	sta $afe20a	                STA @lFP_MATH_INPUT0_HL
.1a542f	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a5431	8f 0c e2 af	sta $afe20c	                STA @lFP_MATH_INPUT1_LL
.1a5435	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a5437	8f 0e e2 af	sta $afe20e	                STA @lFP_MATH_INPUT1_HL
.1a543b	ea		nop		                NOP
.1a543c	ea		nop		                NOP
.1a543d	ea		nop		                NOP
.1a543e	e2 20		sep #$20	            SEP #$20
.1a5440	af 06 e2 af	lda $afe206	                LDA @lFP_MATH_ADD_STAT      ; Check the status of the addition
.1a5444	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.1a5446	d0 10		bne $1a5458	                BNE fp_add_error            ; If an issue was raise, process the math error
.1a5448	c2 20		rep #$20	            REP #$20
.1a544a	af 08 e2 af	lda $afe208	                LDA @lFP_MATH_OUTPUT_FP_LL  ; Retrieve the results into ARGUMENT1
.1a544e	85 23		sta $0823	                STA ARGUMENT1
.1a5450	af 0a e2 af	lda $afe20a	                LDA @lFP_MATH_OUTPUT_FP_HL
.1a5454	85 25		sta $0825	                STA ARGUMENT1+2
.1a5456	28		plp		fp_add_done     PLP
.1a5457	60		rts		            RTS
.1a5458					fp_add_error
.1a5458	20 f3 54	jsr $1a54f3	            JSR FP_MATH_ERROR
.1a545b	80 f9		bra $1a5456	                BRA fp_add_done
.1a545d	08		php		OP_FP_DIV       PHP
.1a545e	e2 20		sep #$20	            SEP #$20
.1a5460	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a5462	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5466	a9 00		lda #$00	                LDA #0
.1a5468	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a546c	c2 20		rep #$20	            REP #$20
.1a546e	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a5470	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5474	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5476	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a547a	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a547c	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5480	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a5482	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5486	ea		nop		                NOP
.1a5487	ea		nop		                NOP
.1a5488	ea		nop		                NOP
.1a5489	e2 20		sep #$20	            SEP #$20
.1a548b	af 05 e2 af	lda $afe205	                LDA @l FP_MATH_DIV_STAT     ; Check the status of the addition
.1a548f	29 17		and #$17	                AND #%00010111              ; Filter out the ZERO status
.1a5491	d0 10		bne $1a54a3	                BNE fp_div_error            ; If an issue was raise, process the math error
.1a5493	c2 20		rep #$20	            REP #$20
.1a5495	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a5499	85 23		sta $0823	                STA ARGUMENT1
.1a549b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a549f	85 25		sta $0825	                STA ARGUMENT1+2
.1a54a1	28		plp		fp_div_done     PLP
.1a54a2	60		rts		            RTS
.1a54a3					fp_div_error
.1a54a3	20 f3 54	jsr $1a54f3	            JSR FP_MATH_ERROR
.1a54a6	80 f9		bra $1a54a1	                BRA fp_div_done
.1a54a8	08		php		OP_FP_MUL       PHP
.1a54a9	e2 20		sep #$20	            SEP #$20
.1a54ab	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a54ad	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a54b1	a9 00		lda #$00	                LDA #0
.1a54b3	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.1a54b7	c2 20		rep #$20	            REP #$20
.1a54b9	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.1a54bb	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a54bf	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a54c1	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a54c5	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.1a54c7	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a54cb	a5 2b		lda $082b	                LDA ARGUMENT2+2
.1a54cd	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a54d1	ea		nop		                NOP
.1a54d2	ea		nop		                NOP
.1a54d3	ea		nop		                NOP
.1a54d4	e2 20		sep #$20	            SEP #$20
.1a54d6	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT    ; Check the status of the addition
.1a54da	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.1a54dc	d0 10		bne $1a54ee	                BNE fp_mul_error            ; If an issue was raise, process the math error
.1a54de	c2 20		rep #$20	            REP #$20
.1a54e0	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.1a54e4	85 23		sta $0823	                STA ARGUMENT1
.1a54e6	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a54ea	85 25		sta $0825	                STA ARGUMENT1+2
.1a54ec	28		plp		fp_mul_done     PLP
.1a54ed	60		rts		            RTS
.1a54ee					fp_mul_error
.1a54ee	20 f3 54	jsr $1a54f3	            JSR FP_MATH_ERROR
.1a54f1	80 f9		bra $1a54ec	                BRA fp_mul_done
.1a54f3					FP_MATH_ERROR
.1a54f3	e2 20		sep #$20	            SEP #$20
.1a54f5	89 01		bit #$01	                BIT #FP_ADD_STAT_NAN        ; Is there a NaN condition?
.1a54f7	f0 20		beq $1a5519	                BEQ check_over              ; No: check for overflow
.1a54f9	00		brk #		                BRK
.1a54fa	08		php		            PHP
.1a54fb	c2 20		rep #$20	            REP #$20
.1a54fd	48		pha		            PHA
.1a54fe	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5501	5b		tcd		            TCD
.1a5502	68		pla		            PLA
.1a5503	28		plp		            PLP
.1a5504	e2 20		sep #$20	            SEP #$20
.1a5506	a9 0c		lda #$0c	            LDA #ERR_NAN
.1a5508	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a550c	c2 20		rep #$20	            REP #$20
.1a550e	29 ff 00	and #$00ff	            AND #$00FF
.1a5511	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a5514	e2 20		sep #$20	            SEP #$20
.1a5516	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a5519	89 02		bit #$02	check_over      BIT #FP_ADD_STAT_OVF        ; Is ther an overflow condition?
.1a551b	f0 1f		beq $1a553c	                BEQ check_under             ; No: check for underflow
.1a551d	08		php		            PHP
.1a551e	c2 20		rep #$20	            REP #$20
.1a5520	48		pha		            PHA
.1a5521	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5524	5b		tcd		            TCD
.1a5525	68		pla		            PLA
.1a5526	28		plp		            PLP
.1a5527	e2 20		sep #$20	            SEP #$20
.1a5529	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a552b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a552f	c2 20		rep #$20	            REP #$20
.1a5531	29 ff 00	and #$00ff	            AND #$00FF
.1a5534	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a5537	e2 20		sep #$20	            SEP #$20
.1a5539	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a553c	89 04		bit #$04	check_under     BIT #FP_ADD_STAT_UDF        ; Is there an underflow condition?
.1a553e	f0 1f		beq $1a555f	                BEQ done                    ; No: we should just return... this probably shouldn't happen
.1a5540	08		php		            PHP
.1a5541	c2 20		rep #$20	            REP #$20
.1a5543	48		pha		            PHA
.1a5544	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a5547	5b		tcd		            TCD
.1a5548	68		pla		            PLA
.1a5549	28		plp		            PLP
.1a554a	e2 20		sep #$20	            SEP #$20
.1a554c	a9 0e		lda #$0e	            LDA #ERR_UNDERFLOW
.1a554e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a5552	c2 20		rep #$20	            REP #$20
.1a5554	29 ff 00	and #$00ff	            AND #$00FF
.1a5557	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a555a	e2 20		sep #$20	            SEP #$20
.1a555c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a555f					done
.1a555f	60		rts		            RTS
.1a5560					FP_MUL10
.1a5560	08		php		                PHP
.1a5561	e2 20		sep #$20	            SEP #$20
.1a5563	a9 00		lda #$00	                LDA #FP_OUT_MULT                ; Set for multiplication
.1a5565	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5569	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1            ; Input 1 is fixed point
.1a556b	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a556f	c2 20		rep #$20	            REP #$20
.1a5571	a9 00 a0	lda #$a000	                LDA #$A000                      ; 10 is one factor
.1a5574	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5578	a9 00 00	lda #$0000	                LDA #0
.1a557b	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a557f	a5 23		lda $0823	                LDA ARGUMENT1                   ; N is the other
.1a5581	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5585	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5587	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a558b	ea		nop		                NOP
.1a558c	ea		nop		                NOP
.1a558d	ea		nop		                NOP
.1a558e	e2 20		sep #$20	            SEP #$20
.1a5590	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT        ; Check the status
.1a5594	89 07		bit #$07	                BIT #FP_MULT_STAT_NAN | FP_MULT_STAT_OVF | FP_MULT_STAT_UDF
.1a5596	f0 01		beq $1a5599	                BEQ ret_result
.1a5598	00		brk #		                BRK                             ; There was an error...
.1a5599					ret_result
.1a5599	c2 20		rep #$20	            REP #$20
.1a559b	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL     ; Save result back
.1a559f	85 23		sta $0823	                STA ARGUMENT1
.1a55a1	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a55a5	85 25		sta $0825	                STA ARGUMENT1+2
.1a55a7	28		plp		                PLP
.1a55a8	60		rts		            RTS
.1a55a9					FP_DIV10
.1a55a9	08		php		                PHP
.1a55aa	e2 20		sep #$20	            SEP #$20
.1a55ac	a9 01		lda #$01	                LDA #FP_OUT_DIV             ; Set for multiplication
.1a55ae	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a55b2	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1        ; Input 1 is fixed point
.1a55b4	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a55b8	c2 20		rep #$20	            REP #$20
.1a55ba	a9 00 a0	lda #$a000	                LDA #$A000                  ; 10 is one factor
.1a55bd	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a55c1	a9 00 00	lda #$0000	                LDA #0
.1a55c4	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a55c8	a5 23		lda $0823	                LDA ARGUMENT1               ; N is the other
.1a55ca	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a55ce	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a55d0	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a55d4	ea		nop		                NOP
.1a55d5	ea		nop		                NOP
.1a55d6	ea		nop		                NOP
.1a55d7	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Save result back
.1a55db	85 23		sta $0823	                STA ARGUMENT1
.1a55dd	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a55e1	85 25		sta $0825	                STA ARGUMENT1+2
.1a55e3	28		plp		                PLP
.1a55e4	60		rts		            RTS

;******  Return to file: src\floats.s

.1a55e5					FARG1EQ0
.1a55e5	08		php		                PHP
.1a55e6	c2 20		rep #$20	            REP #$20
.1a55e8	a5 23		lda $0823	                LDA ARGUMENT1
.1a55ea	d0 0a		bne $1a55f6	                BNE return_false
.1a55ec	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a55ee	29 ff 7f	and #$7fff	                AND #$7FFF              ; Mask off the sign bit
.1a55f1	d0 03		bne $1a55f6	                BNE return_false
.1a55f3	28		plp		return_true     PLP
.1a55f4	38		sec		                SEC
.1a55f5	60		rts		            RTS
.1a55f6	28		plp		return_false    PLP
.1a55f7	18		clc		                CLC
.1a55f8	60		rts		            RTS
.1a55f9					SHIFTDEC
.1a55f9	08		php		                PHP
.1a55fa	e2 20		sep #$20	            SEP #$20
.1a55fc	38		sec		                SEC                     ; Convert '0'..'9' to it's number
.1a55fd	e9 30		sbc #$30	                SBC #'0'
.1a55ff	20 2c 04	jsr $1a042c	            JSR MULINT10
.1a5602	c2 20		rep #$20	            REP #$20
.1a5604	29 ff 00	and #$00ff	                AND #$00FF              ; Add the number to ARGUMENT1
.1a5607	18		clc		                CLC
.1a5608	65 23		adc $0823	                ADC ARGUMENT1
.1a560a	85 23		sta $0823	                STA ARGUMENT1
.1a560c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a560e	69 00 00	adc #$0000	                ADC #0
.1a5611	85 25		sta $0825	                STA ARGUMENT1+2
.1a5613	28		plp		                PLP
.1a5614	60		rts		            RTS
.1a5615					SHIFTHEX
.1a5615	08		php		                PHP
.1a5616	e2 20		sep #$20	            SEP #$20
.1a5618	c9 30		cmp #$30	                CMP #'0'                ; Process 0-9
.1a561a	90 04		bcc $1a5620	                BLT not_09
.1a561c	c9 3a		cmp #$3a	                CMP #'9'+1
.1a561e	90 1c		bcc $1a563c	                BLT is_09
.1a5620	c9 61		cmp #$61	not_09          CMP #'a'                ; Process lowercase A-F
.1a5622	90 04		bcc $1a5628	                BLT not_lc
.1a5624	c9 67		cmp #$67	                CMP #'f'+1
.1a5626	90 0a		bcc $1a5632	                BLT is_lc
.1a5628	c9 41		cmp #$41	not_lc          CMP #'A'                ; Process uppercase A-F
.1a562a	90 04		bcc $1a5630	                BLT not_uc
.1a562c	c9 47		cmp #$47	                CMP #'F'+1
.1a562e	90 07		bcc $1a5637	                BLT is_uc
.1a5630	80 31		bra $1a5663	not_uc          BRA done                ; Just return if we couldn't convert... this shouldn't happen
.1a5632	38		sec		is_lc           SEC                     ; Convert 'a'-'f' to the actual number
.1a5633	e9 57		sbc #$57	                SBC #'a'-10
.1a5635	80 08		bra $1a563f	                BRA shift
.1a5637	38		sec		is_uc           SEC                     ; Convert 'A'-'F' to the actual number
.1a5638	e9 37		sbc #$37	                SBC #'A'-10
.1a563a	80 03		bra $1a563f	                BRA shift
.1a563c	38		sec		is_09           SEC                     ; Convert '0'-'9' to the actual number
.1a563d	e9 30		sbc #$30	                SBC #'0'
.1a563f					shift
.1a563f	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5641	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5643	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5645	26 26		rol $0826	                ROL ARGUMENT1+3
.1a5647	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5649	26 24		rol $0824	                ROL ARGUMENT1+1
.1a564b	26 25		rol $0825	                ROL ARGUMENT1+2
.1a564d	26 26		rol $0826	                ROL ARGUMENT1+3
.1a564f	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5651	26 24		rol $0824	                ROL ARGUMENT1+1
.1a5653	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5655	26 26		rol $0826	                ROL ARGUMENT1+3
.1a5657	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.1a5659	26 24		rol $0824	                ROL ARGUMENT1+1
.1a565b	26 25		rol $0825	                ROL ARGUMENT1+2
.1a565d	26 26		rol $0826	                ROL ARGUMENT1+3
.1a565f	05 23		ora $0823	                ORA ARGUMENT1           ; Add the number to it
.1a5661	85 23		sta $0823	                STA ARGUMENT1
.1a5663	28		plp		done            PLP
.1a5664	60		rts		            RTS
.1a5665					SHIFTBIN
.1a5665	08		php		                PHP
.1a5666	e2 20		sep #$20	            SEP #$20
.1a5668	c9 30		cmp #$30	                CMP #'0'                ; If the character is '0'...
.1a566a	f0 06		beq $1a5672	                BEQ shift_0             ; Shift a 0 onto ARGUMENT1
.1a566c	c9 31		cmp #$31	                CMP #'1'                ; If the character is '1'...
.1a566e	f0 0a		beq $1a567a	                BEQ shift_1             ; Shift a 1 onto ARGUMENT1
.1a5670	80 0f		bra $1a5681	                BRA done
.1a5672					shift_0
.1a5672	c2 20		rep #$20	            REP #$20
.1a5674	06 23		asl $0823	                ASL ARGUMENT1
.1a5676	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5678	80 07		bra $1a5681	                BRA done
.1a567a					shift_1
.1a567a	c2 20		rep #$20	            REP #$20
.1a567c	38		sec		                SEC
.1a567d	26 23		rol $0823	                ROL ARGUMENT1
.1a567f	26 25		rol $0825	                ROL ARGUMENT1+2
.1a5681	28		plp		done            PLP
.1a5682	60		rts		            RTS
.1a5683					FP_POW10
.1a5683	08		php		                PHP
.1a5684	e2 30		sep #$30	            SEP #$30
.1a5686	a5 61		lda $0861	                LDA MARG4
.1a5688	f0 0d		beq $1a5697	                BEQ return_1
.1a568a	aa		tax		                TAX
.1a568b	a5 69		lda $0869	                LDA MARG6
.1a568d	d0 15		bne $1a56a4	                BNE do_div
.1a568f	a9 00		lda #$00	                LDA #FP_OUT_MULT                    ; We'll multiply
.1a5691	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5695	80 15		bra $1a56ac	                BRA start_loop
.1a5697					return_1
.1a5697	e2 20		sep #$20	            SEP #$20
.1a5699	a9 03		lda #$03	                LDA #FP_OUT_ONE                     ; We want to return a 1.0
.1a569b	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a569f	ea		nop		                NOP
.1a56a0	ea		nop		                NOP
.1a56a1	ea		nop		                NOP
.1a56a2	80 62		bra $1a5706	                BRA ret_result                      ; And return the result
.1a56a4					do_div
.1a56a4	e2 20		sep #$20	            SEP #$20
.1a56a6	a9 01		lda #$01	                LDA #FP_OUT_DIV                     ; We'll divide
.1a56a8	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a56ac					start_loop
.1a56ac	e2 20		sep #$20	            SEP #$20
.1a56ae	a9 43		lda #$43	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.1a56b0	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.1a56b4	c2 20		rep #$20	            REP #$20
.1a56b6	a9 00 10	lda #$1000	                LDA #$1000                          ; Input 0 = 1.0
.1a56b9	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a56bd	a9 00 00	lda #$0000	                LDA #0
.1a56c0	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a56c4					loop
.1a56c4	c2 20		rep #$20	            REP #$20
.1a56c6	a9 00 a0	lda #$a000	                LDA #$A000                          ; Input 1 = 10.0
.1a56c9	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a56cd	a9 00 00	lda #$0000	                LDA #0
.1a56d0	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a56d4	ea		nop		                NOP                                 ; Wait for the operation to complete
.1a56d5	ea		nop		                NOP
.1a56d6	ea		nop		                NOP
.1a56d7	ca		dex		                DEX                                 ; Count down
.1a56d8	f0 2c		beq $1a5706	                BEQ ret_result                      ; If 0, then we're done
.1a56da	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; SCRATCH <-- Result
.1a56de	8f 0c 08 00	sta $00080c	                STA @l SCRATCH
.1a56e2	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a56e6	8f 0e 08 00	sta $00080e	                STA @l SCRATCH+2
.1a56ea	e2 20		sep #$20	            SEP #$20
.1a56ec	a9 42		lda #$42	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_1
.1a56ee	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.1a56f2	c2 20		rep #$20	            REP #$20
.1a56f4	af 0c 08 00	lda $00080c	                LDA @l SCRATCH                      ; Input 0 <-- SCRATCH
.1a56f8	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a56fc	af 0e 08 00	lda $00080e	                LDA @l SCRATCH+2
.1a5700	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5704	80 be		bra $1a56c4	                BRA loop
.1a5706					ret_result
.1a5706	c2 20		rep #$20	            REP #$20
.1a5708	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; Return the result
.1a570c	85 23		sta $0823	                STA ARGUMENT1
.1a570e	af 0a e2 af	lda $afe20a	                LDA FP_MATH_OUTPUT_FP_HL
.1a5712	85 25		sta $0825	                STA ARGUMENT1+2
.1a5714	e2 20		sep #$20	            SEP #$20
.1a5716	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a5718	85 27		sta $0827	                STA ARGTYPE1
.1a571a	28		plp		done            PLP
.1a571b	60		rts		            RTS
.1a571c					PACKFLOAT
.1a571c	08		php		                PHP
.1a571d	c2 20		rep #$20	            REP #$20
.1a571f	a5 5d		lda $085d	            LDA MARG3
.1a5721	85 23		sta $0823	            STA ARGUMENT1
.1a5723	a5 5f		lda $085f	            LDA MARG3+2
.1a5725	85 25		sta $0825	            STA ARGUMENT1+2
.1a5727	20 35 59	jsr $1a5935	            JSR ITOF
.1a572a	c2 20		rep #$20	            REP #$20
.1a572c	a5 23		lda $0823	            LDA ARGUMENT1
.1a572e	85 29		sta $0829	            STA ARGUMENT2
.1a5730	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5732	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5734	c2 20		rep #$20	            REP #$20
.1a5736	a5 59		lda $0859	            LDA MARG2
.1a5738	85 23		sta $0823	            STA ARGUMENT1
.1a573a	a5 5b		lda $085b	            LDA MARG2+2
.1a573c	85 25		sta $0825	            STA ARGUMENT1+2
.1a573e	20 5d 54	jsr $1a545d	            JSR OP_FP_DIV
.1a5741	c2 20		rep #$20	            REP #$20
.1a5743	a5 55		lda $0855	            LDA MARG1
.1a5745	85 29		sta $0829	            STA ARGUMENT2
.1a5747	a5 57		lda $0857	            LDA MARG1+2
.1a5749	85 2b		sta $082b	            STA ARGUMENT2+2
.1a574b	20 12 54	jsr $1a5412	            JSR OP_FP_ADD
.1a574e	c2 20		rep #$20	            REP #$20
.1a5750	a5 23		lda $0823	            LDA ARGUMENT1
.1a5752	85 29		sta $0829	            STA ARGUMENT2
.1a5754	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5756	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5758	20 83 56	jsr $1a5683	            JSR FP_POW10
.1a575b	20 a8 54	jsr $1a54a8	            JSR OP_FP_MUL
.1a575e	c2 20		rep #$20	            REP #$20
.1a5760	a5 65		lda $0865	                LDA MARG5                       ; Check to see if the float should be negative
.1a5762	f0 07		beq $1a576b	                BEQ set_float_type              ; If not, just set the type
.1a5764	a5 25		lda $0825	                LDA ARGUMENT1+2                 ; If so, set the sign bit
.1a5766	09 00 80	ora #$8000	                ORA #$8000
.1a5769	85 25		sta $0825	                STA ARGUMENT1+2
.1a576b					set_float_type
.1a576b	e2 20		sep #$20	            SEP #$20
.1a576d	a9 01		lda #$01	                LDA #TYPE_FLOAT                 ; Set the type to float... ready for returning!
.1a576f	85 27		sta $0827	                STA ARGTYPE1
.1a5771	28		plp		                PLP
.1a5772	60		rts		            RTS
.1a5773					PARSENUM
.1a5773	5a		phy		                PHY
.1a5774	08		php		                PHP
.1a5775	c2 30		rep #$30	            REP #$30
.1a5777	64 23		stz $0823	                STZ ARGUMENT1       ; This will be the accumulator for building the number
.1a5779	64 25		stz $0825	                STZ ARGUMENT1+2
.1a577b	64 55		stz $0855	                STZ MARG1           ; This will be the integer portion of the mantissa for floats
.1a577d	64 57		stz $0857	                STZ MARG1+2
.1a577f	64 65		stz $0865	                STZ MARG5           ; MARG5 will be the negative flag for the number
.1a5781	64 59		stz $0859	                STZ MARG2           ; This will be the denominator of the fractional part of the mantissa
.1a5783	64 5b		stz $085b	                STZ MARG2+2
.1a5785	a9 01 00	lda #$0001	                LDA #1
.1a5788	85 5d		sta $085d	                STA MARG3           ; This will be the divisor of the fractional part of the mantissa
.1a578a	64 5f		stz $085f	                STZ MARG3+2
.1a578c	64 61		stz $0861	                STZ MARG4           ; This will be the exponent of a float
.1a578e	64 63		stz $0863	                STZ MARG4+2
.1a5790	64 69		stz $0869	                STZ MARG6           ; MARG6 will be the negative flag for the exponent
.1a5792					s0
.1a5792	e2 20		sep #$20	            SEP #$20
.1a5794	a0 00 00	ldy #$0000	                LDY #0
.1a5797	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the first byte
.1a5799	c9 2b		cmp #$2b	                CMP #'+'
.1a579b	f0 33		beq $1a57d0	                BEQ s1_drop         ; '+' --> S1, drop
.1a579d	c9 2d		cmp #$2d	                CMP #'-'
.1a579f	f0 2b		beq $1a57cc	                BEQ s1_negative     ; Flag that the number is negative
.1a57a1	c9 26		cmp #$26	                CMP #'&'
.1a57a3	f0 3a		beq $1a57df	                BEQ s2_drop         ; '&' --> S2, drop
.1a57a5	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a57a8	90 03		bcc $1a57ad	                BCC syntax_err
.1a57aa	82 ac 00	brl $1a5859	                BRL s7_shift        ; '0'-'9' --> S7, emit
.1a57ad					syntax_err
.1a57ad	08		php		            PHP
.1a57ae	c2 20		rep #$20	            REP #$20
.1a57b0	48		pha		            PHA
.1a57b1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a57b4	5b		tcd		            TCD
.1a57b5	68		pla		            PLA
.1a57b6	28		plp		            PLP
.1a57b7	e2 20		sep #$20	            SEP #$20
.1a57b9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.1a57bb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a57bf	c2 20		rep #$20	            REP #$20
.1a57c1	29 ff 00	and #$00ff	            AND #$00FF
.1a57c4	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a57c7	e2 20		sep #$20	            SEP #$20
.1a57c9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a57cc	a9 01		lda #$01	s1_negative     LDA #1              ; Set the negative flag for the mantissa
.1a57ce	85 65		sta $0865	                STA MARG5
.1a57d0	c8		iny		s1_drop         INY                 ; Drop the character...
.1a57d1	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next
.1a57d3	c9 26		cmp #$26	                CMP #'&'
.1a57d5	f0 08		beq $1a57df	                BEQ s2_drop         ; '&' --> S2, drop the '&'
.1a57d7	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a57da	90 d1		bcc $1a57ad	                BCC syntax_err
.1a57dc	82 7a 00	brl $1a5859	                BRL s7_shift        ; '0'-'9' --> S7, shift
.1a57df	c8		iny		s2_drop         INY                 ; Drop the character
.1a57e0	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.1a57e2	c9 68		cmp #$68	                CMP #'h'
.1a57e4	f0 0e		beq $1a57f4	                BEQ s3_drop         ; 'h', 'H' --> S3, drop
.1a57e6	c9 48		cmp #$48	                CMP #'H'
.1a57e8	f0 0a		beq $1a57f4	                BEQ s3_drop
.1a57ea	c9 62		cmp #$62	                CMP #'b'
.1a57ec	f0 4c		beq $1a583a	                BEQ s5_drop         ; 'b', 'B' --> S5, drop
.1a57ee	c9 42		cmp #$42	                CMP #'B'
.1a57f0	f0 48		beq $1a583a	                BEQ s5_drop
.1a57f2	80 b9		bra $1a57ad	                BRA syntax_err
.1a57f4	c8		iny		s3_drop         INY                 ; Drop the character
.1a57f5	b7 00		lda [$0800],y	s3              LDA [BIP],Y         ; Get the next character
.1a57f7	20 be 03	jsr $1a03be	            JSR ISHEX
.1a57fa	b0 02		bcs $1a57fe	                BCS s4_shift
.1a57fc	80 af		bra $1a57ad	                BRA syntax_err
.1a57fe					s4_shift
.1a57fe	20 15 56	jsr $1a5615	            JSR SHIFTHEX
.1a5801	c8		iny		                INY
.1a5802	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.1a5804	20 be 03	jsr $1a03be	            JSR ISHEX
.1a5807	b0 f5		bcs $1a57fe	                BCS s4_shift        ; '0'-'9','A'-'F' --> S4, shift
.1a5809					ret_integer
.1a5809	e2 20		sep #$20	            SEP #$20
.1a580b	a5 65		lda $0865	                LDA MARG5           ; check if the number should be negative
.1a580d	f0 11		beq $1a5820	                BEQ set_int_type    ; If not, just set the type and return
.1a580f	c2 20		rep #$20	            REP #$20
.1a5811	38		sec		                SEC                 ; If so, negate it
.1a5812	a9 00 00	lda #$0000	                LDA #0
.1a5815	e5 23		sbc $0823	                SBC ARGUMENT1
.1a5817	85 23		sta $0823	                STA ARGUMENT1
.1a5819	a9 00 00	lda #$0000	                LDA #0
.1a581c	e5 25		sbc $0825	                SBC ARGUMENT1+2
.1a581e	85 25		sta $0825	                STA ARGUMENT1+2
.1a5820					set_int_type
.1a5820	e2 20		sep #$20	            SEP #$20
.1a5822	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; Return an integer
.1a5824	85 27		sta $0827	                STA ARGTYPE1
.1a5826					stop
.1a5826	c2 20		rep #$20	            REP #$20
.1a5828	18		clc		                CLC
.1a5829	98		tya		                TYA
.1a582a	65 00		adc $0800	                ADC BIP
.1a582c	85 00		sta $0800	                STA BIP
.1a582e	a5 02		lda $0802	                LDA BIP+2
.1a5830	69 00 00	adc #$0000	                ADC #0
.1a5833	85 02		sta $0802	                STA BIP+2
.1a5835	e2 20		sep #$20	            SEP #$20
.1a5837	28		plp		                PLP
.1a5838	7a		ply		                PLY
.1a5839	60		rts		            RTS
.1a583a	c8		iny		s5_drop         INY                     ; Drop the character
.1a583b	b7 00		lda [$0800],y	s5              LDA [BIP],Y             ; Get the next character
.1a583d	c9 30		cmp #$30	                CMP #'0'
.1a583f	f0 07		beq $1a5848	                BEQ s6_shift            ; '0', '1' --> S6, shift
.1a5841	c9 31		cmp #$31	                CMP #'1'
.1a5843	f0 03		beq $1a5848	                BEQ s6_shift
.1a5845	82 65 ff	brl $1a57ad	                BRL syntax_err
.1a5848					s6_shift
.1a5848	20 65 56	jsr $1a5665	            JSR SHIFTBIN
.1a584b	c8		iny		                INY
.1a584c	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a584e	c9 30		cmp #$30	                CMP #'0'                ; '0', '1' --> S6, shift
.1a5850	f0 f6		beq $1a5848	                BEQ s6_shift
.1a5852	c9 31		cmp #$31	                CMP #'1'
.1a5854	f0 f2		beq $1a5848	                BEQ s6_shift
.1a5856	82 b0 ff	brl $1a5809	                BRL ret_integer         ; Return integer
.1a5859					s7_shift
.1a5859	20 f9 55	jsr $1a55f9	            JSR SHIFTDEC
.1a585c	c8		iny		                INY
.1a585d	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a585f	c9 2e		cmp #$2e	                CMP #'.'                ; '.' --> S8, drop and preserve mantissa
.1a5861	f0 08		beq $1a586b	                BEQ s8_mantissa
.1a5863	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a5866	b0 f1		bcs $1a5859	                BCS s7_shift
.1a5868	82 9e ff	brl $1a5809	                BRL ret_integer         ; Return integer
.1a586b					s8_mantissa
.1a586b	c2 20		rep #$20	            REP #$20
.1a586d	20 35 59	jsr $1a5935	            JSR ITOF
.1a5870	c2 20		rep #$20	            REP #$20
.1a5872	a5 23		lda $0823	            LDA ARGUMENT1
.1a5874	85 55		sta $0855	            STA MARG1
.1a5876	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a5878	85 57		sta $0857	            STA MARG1+2
.1a587a	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the decimal
.1a587c	64 25		stz $0825	                STZ ARGUMENT1+2
.1a587e	e2 20		sep #$20	            SEP #$20
.1a5880	80 36		bra $1a58b8	                BRA s8_drop
.1a5882					s8_shift
.1a5882	20 f9 55	jsr $1a55f9	            JSR SHIFTDEC
.1a5885	c2 20		rep #$20	            REP #$20
.1a5887	a5 5f		lda $085f	                LDA MARG3+2             ; high 16 bits
.1a5889	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a588d	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.1a5890	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.1a5894	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to high 16 bits of MARG3
.1a5898	85 5f		sta $085f	                STA MARG3+2
.1a589a	a5 5d		lda $085d	                LDA MARG3
.1a589c	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.1a58a0	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.1a58a3	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.1a58a7	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to MARG3
.1a58ab	85 5d		sta $085d	                STA MARG3
.1a58ad	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.1a58b1	18		clc		                CLC
.1a58b2	65 5f		adc $085f	                ADC MARG3+2
.1a58b4	85 5f		sta $085f	                STA MARG3+2
.1a58b6	e2 20		sep #$20	            SEP #$20
.1a58b8					s8_drop
.1a58b8	c8		iny		                INY
.1a58b9	b7 00		lda [$0800],y	                LDA [BIP],Y
.1a58bb	c9 65		cmp #$65	                CMP #'e'                ; 'E' --> S9, drop
.1a58bd	f0 24		beq $1a58e3	                BEQ s9_drop
.1a58bf	c9 45		cmp #$45	                CMP #'E'
.1a58c1	f0 20		beq $1a58e3	                BEQ s9_drop
.1a58c3	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a58c6	b0 ba		bcs $1a5882	                BCS s8_shift
.1a58c8	c2 20		rep #$20	            REP #$20
.1a58ca	20 35 59	jsr $1a5935	            JSR ITOF
.1a58cd	c2 20		rep #$20	            REP #$20
.1a58cf	a5 23		lda $0823	            LDA ARGUMENT1
.1a58d1	85 59		sta $0859	            STA MARG2
.1a58d3	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a58d5	85 5b		sta $085b	            STA MARG2+2
.1a58d7	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.1a58d9	64 25		stz $0825	                STZ ARGUMENT1+2
.1a58db	20 1c 57	jsr $1a571c	            JSR PACKFLOAT
.1a58de	e2 20		sep #$20	            SEP #$20
.1a58e0	82 43 ff	brl $1a5826	                BRL stop
.1a58e3					s9_drop
.1a58e3	c2 20		rep #$20	            REP #$20
.1a58e5	20 35 59	jsr $1a5935	            JSR ITOF
.1a58e8	c2 20		rep #$20	            REP #$20
.1a58ea	a5 23		lda $0823	            LDA ARGUMENT1
.1a58ec	85 59		sta $0859	            STA MARG2
.1a58ee	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a58f0	85 5b		sta $085b	            STA MARG2+2
.1a58f2	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.1a58f4	64 25		stz $0825	                STZ ARGUMENT1+2
.1a58f6	e2 20		sep #$20	            SEP #$20
.1a58f8	c8		iny		                INY
.1a58f9	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a58fb	c9 2b		cmp #$2b	                CMP #'+'
.1a58fd	f0 10		beq $1a590f	                BEQ s10_drop            ; '+' --> S10, drop
.1a58ff	c9 2d		cmp #$2d	                CMP #'-'
.1a5901	f0 08		beq $1a590b	                BEQ s10_setneg          ; '-' --> S10, set exponent is negative
.1a5903	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a5906	b0 12		bcs $1a591a	                BCS S11_shift           ; '0'-'9' --> S11, shift
.1a5908	82 a2 fe	brl $1a57ad	                BRL syntax_err
.1a590b					s10_setneg
.1a590b	a9 01		lda #$01	                LDA #1                  ; Set that the exponent should be negative
.1a590d	85 69		sta $0869	                STA MARG6
.1a590f					s10_drop
.1a590f	c8		iny		                INY
.1a5910	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5912	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a5915	b0 03		bcs $1a591a	                BCS s11_shift
.1a5917	82 93 fe	brl $1a57ad	                BRL syntax_err
.1a591a					s11_shift
.1a591a	20 f9 55	jsr $1a55f9	            JSR SHIFTDEC
.1a591d	c8		iny		                INY
.1a591e	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.1a5920	20 ad 03	jsr $1a03ad	            JSR ISNUMERAL
.1a5923	b0 f5		bcs $1a591a	                BCS s11_shift
.1a5925	c2 20		rep #$20	            REP #$20
.1a5927	a5 23		lda $0823	            LDA ARGUMENT1
.1a5929	85 61		sta $0861	            STA MARG4
.1a592b	a5 25		lda $0825	            LDA ARGUMENT1+2
.1a592d	85 63		sta $0863	            STA MARG4+2
.1a592f	20 1c 57	jsr $1a571c	            JSR PACKFLOAT
.1a5932	82 f1 fe	brl $1a5826	                BRL stop
.1a5935					ITOF
.1a5935	08		php		                PHP
.1a5936	20 c3 53	jsr $1a53c3	            JSR FIXINT_TO_FP
.1a5939	28		plp		done            PLP
.1a593a	60		rts		            RTS
.1a593b					FTOI
.1a593b	08		php		                PHP
.1a593c					LOCALS
>0001					l_sign          .byte ?
>0002					l_exponent      .byte ?
>0003					l_mantissa      .dword ?
.1a593c	c2 20		rep #$20	            REP #$20
.1a593e	a9 32 5c	lda #$5c32	                LDA #<>FP_1_0
.1a5941	85 29		sta $0829	                STA ARGUMENT2
.1a5943	a9 1a 00	lda #$001a	                LDA #(FP_1_0 >> 16)
.1a5946	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5948	e2 20		sep #$20	            SEP #$20
.1a594a	a9 01		lda #$01	                LDA #TYPE_FLOAT
.1a594c	85 2d		sta $082d	                STA ARGTYPE2
.1a594e	c2 20		rep #$20	            REP #$20
.1a5950	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5953	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5956	d0 0c		bne $1a5964	                BNE alloc_locals        ; No: get ready to do the full conversion
.1a5958	a9 00 00	lda #$0000	                LDA #0
.1a595b	8d 23 08	sta $0823	                STA @w ARGUMENT1        ; Yes: Return 0
.1a595e	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5961	82 a1 00	brl $1a5a05	                BRL done
.1a5964	f4 00 00	pea #$0000	alloc_locals    PEA #0                  ; Reserve space for the locals
.1a5967	f4 00 00	pea #$0000	                PEA #0
.1a596a	f4 00 00	pea #$0000	                PEA #0
.1a596d	e2 20		sep #$20	            SEP #$20
.1a596f	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3      ; Preserve the sign bit
.1a5972	29 80		and #$80	                AND #$80
.1a5974	83 01		sta $01,s	                STA l_sign
.1a5976	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2      ; Preserve the exponent
.1a5979	2a		rol a		                ROL A
.1a597a	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3
.1a597d	2a		rol a		                ROL A
.1a597e	83 02		sta $02,s	                STA l_exponent
.1a5980	a9 00		lda #$00	save_mantissa   LDA #0                  ; Save the mantissa (with the implied 1)
.1a5982	83 06		sta $06,s	                STA l_mantissa+3
.1a5984	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2
.1a5987	09 80		ora #$80	                ORA #$80
.1a5989	83 05		sta $05,s	                STA l_mantissa+2
.1a598b	ad 24 08	lda $0824	                LDA @w ARGUMENT1+1
.1a598e	83 04		sta $04,s	                STA l_mantissa+1
.1a5990	ad 23 08	lda $0823	                LDA @w ARGUMENT1
.1a5993	83 03		sta $03,s	                STA l_mantissa
.1a5995	a3 02		lda $02,s	                LDA l_exponent
.1a5997	c9 96		cmp #$96	loop            CMP #150
.1a5999	f0 3a		beq $1a59d5	                BEQ adj_sign
.1a599b	90 1f		bcc $1a59bc	                BLT shift_right
.1a599d	08		php		            PHP
.1a599e	c2 20		rep #$20	            REP #$20
.1a59a0	48		pha		            PHA
.1a59a1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a59a4	5b		tcd		            TCD
.1a59a5	68		pla		            PLA
.1a59a6	28		plp		            PLP
.1a59a7	e2 20		sep #$20	            SEP #$20
.1a59a9	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.1a59ab	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a59af	c2 20		rep #$20	            REP #$20
.1a59b1	29 ff 00	and #$00ff	            AND #$00FF
.1a59b4	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a59b7	e2 20		sep #$20	            SEP #$20
.1a59b9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a59bc					shift_right
.1a59bc	c2 20		rep #$20	            REP #$20
.1a59be	a3 05		lda $05,s	                LDA l_mantissa+2
.1a59c0	4a		lsr a		                LSR A
.1a59c1	83 05		sta $05,s	                STA l_mantissa+2
.1a59c3	a3 03		lda $03,s	                LDA l_mantissa
.1a59c5	6a		ror a		                ROR A
.1a59c6	83 03		sta $03,s	                STA l_mantissa
.1a59c8	e2 20		sep #$20	            SEP #$20
.1a59ca	a3 02		lda $02,s	                LDA l_exponent
.1a59cc	1a		inc a		                INC A
.1a59cd	83 02		sta $02,s	                STA l_exponent
.1a59cf	c9 96		cmp #$96	                CMP #150
.1a59d1	f0 02		beq $1a59d5	                BEQ adj_sign
.1a59d3	80 e7		bra $1a59bc	                BRA shift_right
.1a59d5	a3 01		lda $01,s	adj_sign        LDA l_sign
.1a59d7	f0 1b		beq $1a59f4	                BEQ ret_positive
.1a59d9	c2 20		rep #$20	            REP #$20
.1a59db	a3 03		lda $03,s	                LDA l_mantissa
.1a59dd	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a59e0	18		clc		                CLC
.1a59e1	69 01 00	adc #$0001	                ADC #1
.1a59e4	8d 23 08	sta $0823	                STA @w ARGUMENT1
.1a59e7	a3 05		lda $05,s	                LDA l_mantissa+2
.1a59e9	49 ff ff	eor #$ffff	                EOR #$FFFF
.1a59ec	69 00 00	adc #$0000	                ADC #0
.1a59ef	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a59f2	80 0c		bra $1a5a00	                BRA clean
.1a59f4					ret_positive
.1a59f4	c2 20		rep #$20	            REP #$20
.1a59f6	a3 03		lda $03,s	                LDA l_mantissa
.1a59f8	8d 23 08	sta $0823	                STA @w ARGUMENT1
.1a59fb	a3 05		lda $05,s	                LDA l_mantissa+2
.1a59fd	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.1a5a00					clean
.1a5a00	c2 20		rep #$20	            REP #$20
.1a5a02	68		pla		                PLA                     ; Clean up the locals
.1a5a03	68		pla		                PLA
.1a5a04	68		pla		                PLA
.1a5a05					done
.1a5a05	e2 20		sep #$20	            SEP #$20
.1a5a07	a9 00		lda #$00	                LDA #TYPE_INTEGER       ; Set the return type to integer
.1a5a09	8d 27 08	sta $0827	                STA @w ARGTYPE1
.1a5a0c	28		plp		                PLP
.1a5a0d	60		rts		            RTS
.1a5a0e					FP_COMPARE
.1a5a0e	da		phx		                PHX
.1a5a0f	08		php		                PHP
.1a5a10	c2 20		rep #$20	            REP #$20
.1a5a12	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save ARGUMENT1 so we don't destroy it
.1a5a14	48		pha		                PHA
.1a5a15	a5 23		lda $0823	                LDA ARGUMENT1
.1a5a17	48		pha		                PHA
.1a5a18	20 07 54	jsr $1a5407	            JSR OP_FP_SUB
.1a5a1b	20 e5 55	jsr $1a55e5	            JSR FARG1EQ0
.1a5a1e	b0 11		bcs $1a5a31	                BCS are_equal
.1a5a20	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Check the high word
.1a5a22	89 00 80	bit #$8000	                BIT #$8000
.1a5a25	d0 05		bne $1a5a2c	                BNE is_lt                   ; ARGUMENT1 < ARGUMENT2
.1a5a27	a9 01 00	lda #$0001	is_gt           LDA #1                      ; ARGUMENT1 > ARGUMENT2: return 1
.1a5a2a	80 08		bra $1a5a34	                BRA ret_result
.1a5a2c	a9 ff ff	lda #$ffff	is_lt           LDA #$FFFF                  ; ARGUMENT1 > ARGUMENT2: return -1
.1a5a2f	80 03		bra $1a5a34	                BRA ret_result
.1a5a31	a9 00 00	lda #$0000	are_equal       LDA #0                      ; Equal: return 0
.1a5a34	fa		plx		ret_result      PLX                         ; Restore ARGUMENT1
.1a5a35	86 23		stx $0823	                STX ARGUMENT1
.1a5a37	fa		plx		                PLX
.1a5a38	86 25		stx $0825	                STX ARGUMENT1+2
.1a5a3a	28		plp		                PLP
.1a5a3b	fa		plx		                PLX
.1a5a3c	60		rts		            RTS
.1a5a3d					OP_FP_LT
.1a5a3d	08		php		                PHP
.1a5a3e	c2 30		rep #$30	            REP #$30
.1a5a40	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5a43	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5a46	d0 05		bne $1a5a4d	                BNE ret_false
.1a5a48	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a5a4b	80 03		bra $1a5a50	                BRA done
.1a5a4d					ret_false
.1a5a4d	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a5a50	28		plp		done            PLP
.1a5a51	60		rts		            RTS
.1a5a52					OP_FP_GT
.1a5a52	08		php		                PHP
.1a5a53	c2 30		rep #$30	            REP #$30
.1a5a55	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5a58	c9 01 00	cmp #$0001	                CMP #1
.1a5a5b	d0 05		bne $1a5a62	                BNE ret_false
.1a5a5d	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a5a60	80 03		bra $1a5a65	                BRA done
.1a5a62					ret_false
.1a5a62	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a5a65	28		plp		done            PLP
.1a5a66	60		rts		            RTS
.1a5a67					OP_FP_EQ
.1a5a67	08		php		                PHP
.1a5a68	c2 30		rep #$30	            REP #$30
.1a5a6a	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5a6d	c9 00 00	cmp #$0000	                CMP #0
.1a5a70	d0 05		bne $1a5a77	                BNE ret_false
.1a5a72	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a5a75	80 03		bra $1a5a7a	                BRA done
.1a5a77					ret_false
.1a5a77	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a5a7a	28		plp		done            PLP
.1a5a7b	60		rts		            RTS
.1a5a7c					OP_FP_LTE
.1a5a7c	08		php		                PHP
.1a5a7d	c2 30		rep #$30	            REP #$30
.1a5a7f	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5a82	c9 01 00	cmp #$0001	                CMP #1
.1a5a85	f0 05		beq $1a5a8c	                BEQ ret_false
.1a5a87	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a5a8a	80 03		bra $1a5a8f	                BRA done
.1a5a8c					ret_false
.1a5a8c	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a5a8f	28		plp		done            PLP
.1a5a90	60		rts		            RTS
.1a5a91					OP_FP_GTE
.1a5a91	08		php		                PHP
.1a5a92	c2 30		rep #$30	            REP #$30
.1a5a94	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5a97	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a5a9a	f0 05		beq $1a5aa1	                BEQ ret_false
.1a5a9c	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a5a9f	80 03		bra $1a5aa4	                BRA done
.1a5aa1					ret_false
.1a5aa1	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a5aa4	28		plp		done            PLP
.1a5aa5	60		rts		            RTS
.1a5aa6					OP_FP_NE
.1a5aa6	08		php		                PHP
.1a5aa7	c2 30		rep #$30	            REP #$30
.1a5aa9	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5aac	c9 00 00	cmp #$0000	                CMP #0
.1a5aaf	f0 05		beq $1a5ab6	                BEQ ret_false
.1a5ab1	20 df 04	jsr $1a04df	            JSR SET_TRUE
.1a5ab4	80 03		bra $1a5ab9	                BRA done
.1a5ab6					ret_false
.1a5ab6	20 f1 04	jsr $1a04f1	            JSR SET_FALSE
.1a5ab9	28		plp		done            PLP
.1a5aba	60		rts		            RTS
.1a5abb					STREMIT
.1a5abb	08		php		                PHP
.1a5abc	e2 20		sep #$20	            SEP #$20
.1a5abe	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Append the character
.1a5ac0	c8		iny		                INY                         ; Advance the character pointer in Y
.1a5ac1	a9 00		lda #$00	                LDA #0                      ; And add the NULL
.1a5ac3	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5ac5	28		plp		                PLP
.1a5ac6	60		rts		            RTS
.1a5ac7					STREMITB
.1a5ac7	da		phx		                PHX
.1a5ac8	08		php		                PHP
.1a5ac9	e2 20		sep #$20	            SEP #$20
.1a5acb	c9 80		cmp #$80	                CMP #$80
.1a5acd	90 0a		bcc $1a5ad9	                BLT emit_digits
.1a5acf	48		pha		                PHA
.1a5ad0	a9 2d		lda #$2d	                LDA #'-'                    ; Print a minus sign
.1a5ad2	20 bb 5a	jsr $1a5abb	            JSR STREMIT
.1a5ad5	68		pla		                PLA
.1a5ad6	49 ff		eor #$ff	                EOR #$FF                    ; And negate it
.1a5ad8	1a		inc a		                INC A
.1a5ad9					emit_digits
.1a5ad9	c2 30		rep #$30	            REP #$30
.1a5adb	29 ff 00	and #$00ff	                AND #$00FF
.1a5ade	c9 64 00	cmp #$0064	                CMP #100
.1a5ae1	90 0e		bcc $1a5af1	                BLT chk_tens
.1a5ae3	a2 64 00	ldx #$0064	                LDX #100
.1a5ae6	20 ac 53	jsr $1a53ac	            JSR UINT_DIV_A_X
.1a5ae9	18		clc		                CLC
.1a5aea	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.1a5aed	20 bb 5a	jsr $1a5abb	            JSR STREMIT
.1a5af0	8a		txa		                TXA                         ; Put the remainder in A
.1a5af1					chk_tens
.1a5af1	a2 0a 00	ldx #$000a	                LDX #10
.1a5af4	20 ac 53	jsr $1a53ac	            JSR UINT_DIV_A_X
.1a5af7	18		clc		                CLC
.1a5af8	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.1a5afb	20 bb 5a	jsr $1a5abb	            JSR STREMIT
.1a5afe	8a		txa		                TXA                         ; Put the remainder in A
.1a5aff					ones_digit
.1a5aff	18		clc		                CLC
.1a5b00	69 30 00	adc #$0030	                ADC #'0'                    ; Convert it to ASCII
.1a5b03	20 bb 5a	jsr $1a5abb	            JSR STREMIT
.1a5b06	28		plp		                PLP
.1a5b07	fa		plx		                PLX
.1a5b08	60		rts		            RTS
.1a5b09					STRFINDEND
.1a5b09	08		php		                PHP
.1a5b0a	e2 20		sep #$20	            SEP #$20
.1a5b0c	c2 10		rep #$10	            REP #$10
.1a5b0e	a0 00 00	ldy #$0000	                LDY #0
.1a5b11	b7 23		lda [$0823],y	find_end        LDA [ARGUMENT1],Y           ; Scan to the end of the string
.1a5b13	f0 03		beq $1a5b18	                BEQ done
.1a5b15	c8		iny		                INY
.1a5b16	80 f9		bra $1a5b11	                BRA find_end
.1a5b18	28		plp		done            PLP
.1a5b19	60		rts		            RTS
=6					FP_D = 6        ; Number of mantissa digits
.1a5b1a					FTOS
.1a5b1a	08		php		                PHP
.1a5b1b	e2 20		sep #$20	            SEP #$20
.1a5b1d	c2 10		rep #$10	            REP #$10
.1a5b1f	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be the negative flag
.1a5b22	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be K
.1a5b25	f4 00 00	pea #$0000	                PEA #0                      ; This spot will be for the exponents
>0001					L_NEGATIVE      .word ?
>0003					L_K             .word ?
>0005					L_X1            .byte ?                     ; The binary exponent
>0006					L_EXP           .byte ?                     ; The decimal exponent
.1a5b28	20 e5 55	jsr $1a55e5	            JSR FARG1EQ0
.1a5b2b	90 19		bcc $1a5b46	                BCC chk_negative
.1a5b2d	20 8e 13	jsr $1a138e	            JSR TEMPSTRING
.1a5b30	e2 20		sep #$20	            SEP #$20
.1a5b32	a0 00 00	ldy #$0000	                LDY #0
.1a5b35	a9 20		lda #$20	                LDA #' '
.1a5b37	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5b39	c8		iny		                INY
.1a5b3a	a9 30		lda #$30	                LDA #'0'                    ; Return a "0"
.1a5b3c	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5b3e	c8		iny		                INY
.1a5b3f	a9 00		lda #$00	                LDA #0
.1a5b41	97 16		sta [$0816],y	                STA [STRPTR],Y
.1a5b43	82 ce 00	brl $1a5c14	                BRL ret_result
.1a5b46					chk_negative
.1a5b46	e2 20		sep #$20	            SEP #$20
.1a5b48	a5 26		lda $0826	                LDA ARGUMENT1+3             ; If N is negative, output a minus sign and negate N
.1a5b4a	10 08		bpl $1a5b54	                BPL not_negative
.1a5b4c	29 7f		and #$7f	                AND #$7F                    ; Negate the number
.1a5b4e	85 26		sta $0826	                STA ARGUMENT1+3
.1a5b50	a9 01		lda #$01	                LDA #1
.1a5b52	83 01		sta $01,s	                STA L_NEGATIVE              ; Set IsNegative to a TRUE value
.1a5b54					not_negative
.1a5b54	c2 20		rep #$20	            REP #$20
.1a5b56	a9 00 00	lda #$0000	                LDA #0                      ; Initialize K to 0, K is a 1-byte signed integer. (SCRATCH is K)
.1a5b59	83 03		sta $03,s	                STA L_K                     ; We're using a word here for convenience
.1a5b5b	c2 20		rep #$20	            REP #$20
.1a5b5d	af 2e 5c 1a	lda $1a5c2e	            LDA ten_d_1
.1a5b61	85 29		sta $0829	            STA ARGUMENT2
.1a5b63	af 30 5c 1a	lda $1a5c30	            LDA ten_d_1+2
.1a5b67	85 2b		sta $082b	            STA ARGUMENT2+2
.1a5b69	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5b6c	89 00 80	bit #$8000	                BIT #$8000                  ; Is N < 10^(D-1)?
.1a5b6f	d0 12		bne $1a5b83	                BNE shift_up
.1a5b71					shift_down
.1a5b71	20 a9 55	jsr $1a55a9	            JSR FP_DIV10
.1a5b74	a3 03		lda $03,s	                LDA L_K
.1a5b76	1a		inc a		                INC A
.1a5b77	83 03		sta $03,s	                STA L_K                     ; Increment K
.1a5b79	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5b7c	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N < 10^(D-1)?
.1a5b7f	f0 12		beq $1a5b93	                BEQ do_digits               ; Yes: we're ready to process digits
.1a5b81	80 ee		bra $1a5b71	                BRA shift_down              ; No: keep dividing
.1a5b83					shift_up
.1a5b83	20 60 55	jsr $1a5560	            JSR FP_MUL10
.1a5b86	a3 03		lda $03,s	                LDA L_K
.1a5b88	3a		dec a		                DEC A
.1a5b89	83 03		sta $03,s	                STA L_K                     ; Decrement K
.1a5b8b	20 0e 5a	jsr $1a5a0e	            JSR FP_COMPARE
.1a5b8e	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N >= 10 ^ (D-1)?
.1a5b91	f0 f0		beq $1a5b83	                BEQ shift_up                ; No: keep multiplying
.1a5b93					do_digits
.1a5b93	e2 30		sep #$30	            SEP #$30
.1a5b95	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5b97	0a		asl a		                ASL A
.1a5b98	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5b9a	2a		rol a		                ROL A
.1a5b9b	83 05		sta $05,s	                STA L_X1
.1a5b9d	38		sec		                SEC
.1a5b9e	a9 96		lda #$96	                LDA #150                    ; X := 150 - X1
.1a5ba0	e3 05		sbc $05,s	                SBC L_X1
.1a5ba2	aa		tax		                TAX
.1a5ba3	f0 0f		beq $1a5bb4	                BEQ emit_digits             ; If X = 0, just emit the digits
.1a5ba5	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Set the implied '1' MSB of the mantissa
.1a5ba7	09 80		ora #$80	                ORA #$80
.1a5ba9	85 25		sta $0825	                STA ARGUMENT1+2
.1a5bab	46 25		lsr $0825	shift_r         LSR ARGUMENT1+2             ; Shift the mantissa right
.1a5bad	66 24		ror $0824	                ROR ARGUMENT1+1
.1a5baf	66 23		ror $0823	                ROR ARGUMENT1
.1a5bb1	ca		dex		                DEX
.1a5bb2	d0 f7		bne $1a5bab	                BNE shift_r                 ; Until X = 0
.1a5bb4					emit_digits
.1a5bb4	c2 10		rep #$10	            REP #$10
.1a5bb6	e2 20		sep #$20	            SEP #$20
.1a5bb8	64 26		stz $0826	                STZ ARGUMENT1+3             ; Blank out the MSB
.1a5bba	a9 00		lda #$00	                LDA #TYPE_INTEGER           ; Make it an integer
.1a5bbc	85 27		sta $0827	                STA ARGTYPE1
.1a5bbe	a3 01		lda $01,s	                LDA L_NEGATIVE              ; Check IsNegative
.1a5bc0	f0 11		beq $1a5bd3	                BEQ get_raw_digits          ; If FALSE, just convert the raw digits
.1a5bc2	c2 20		rep #$20	            REP #$20
.1a5bc4	38		sec		                SEC                         ; Make the raw integer negative
.1a5bc5	a9 00 00	lda #$0000	                LDA #0
.1a5bc8	e5 23		sbc $0823	                SBC ARGUMENT1
.1a5bca	85 23		sta $0823	                STA ARGUMENT1
.1a5bcc	a9 00 00	lda #$0000	                LDA #0
.1a5bcf	e5 25		sbc $0825	                SBC ARGUMENT1+2
.1a5bd1	85 25		sta $0825	                STA ARGUMENT1+2
.1a5bd3					get_raw_digits
.1a5bd3	20 ed 13	jsr $1a13ed	            JSR ITOS
.1a5bd6	c2 20		rep #$20	            REP #$20
.1a5bd8	a5 16		lda $0816	            LDA STRPTR
.1a5bda	85 23		sta $0823	            STA ARGUMENT1
.1a5bdc	a5 18		lda $0818	            LDA STRPTR+2
.1a5bde	85 25		sta $0825	            STA ARGUMENT1+2
.1a5be0	20 09 5b	jsr $1a5b09	            JSR STRFINDEND
.1a5be3	e2 20		sep #$20	            SEP #$20
.1a5be5	c8		iny		                INY                         ; Move the NULL up one byte
.1a5be6	a9 00		lda #$00	                LDA #0
.1a5be8	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5bea	88		dey		insert_loop     DEY                         ; Move to the character before the one we just moved
.1a5beb	88		dey		                DEY
.1a5bec	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y           ; Get the character
.1a5bee	c8		iny		                INY                         ; Move to the next space
.1a5bef	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Store the character here
.1a5bf1	c0 02 00	cpy #$0002	                CPY #2                      ; Check to see if we just moved the 2nd character
.1a5bf4	d0 f4		bne $1a5bea	                BNE insert_loop             ; If not, keep moving the characters
.1a5bf6	a9 2e		lda #$2e	                LDA #'.'                    ; Insert the '.' in the space we openned
.1a5bf8	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.1a5bfa	e2 20		sep #$20	            SEP #$20
.1a5bfc	18		clc		                CLC                         ; Compute the exponent
.1a5bfd	a3 03		lda $03,s	                LDA L_K
.1a5bff	69 05		adc #$05	                ADC #(FP_D - 1)
.1a5c01	83 06		sta $06,s	                STA L_EXP
.1a5c03	f0 19		beq $1a5c1e	                BEQ done                    ; If it's 0, just return the number
.1a5c05	20 09 5b	jsr $1a5b09	            JSR STRFINDEND
.1a5c08	a9 45		lda #$45	                LDA #'E'                    ; Append the "E"
.1a5c0a	20 bb 5a	jsr $1a5abb	            JSR STREMIT
.1a5c0d	a3 06		lda $06,s	                LDA L_EXP
.1a5c0f	20 c7 5a	jsr $1a5ac7	            JSR STREMITB
.1a5c12	80 0a		bra $1a5c1e	                BRA done                    ; TODO: reformat integer... add E and exponent...
.1a5c14					ret_result
.1a5c14	c2 20		rep #$20	            REP #$20
.1a5c16	a5 16		lda $0816	                LDA STRPTR                  ; Return the temporary string we've assembled
.1a5c18	85 23		sta $0823	                STA ARGUMENT1
.1a5c1a	a5 18		lda $0818	                LDA STRPTR+2
.1a5c1c	85 25		sta $0825	                STA ARGUMENT1+2
.1a5c1e					done
.1a5c1e	e2 20		sep #$20	            SEP #$20
.1a5c20	a9 02		lda #$02	                LDA #TYPE_STRING
.1a5c22	85 27		sta $0827	                STA ARGTYPE1
.1a5c24	c2 20		rep #$20	            REP #$20
.1a5c26	3b		tsc		                TSC                         ; Remove the locals from the stack
.1a5c27	18		clc		                CLC
.1a5c28	69 06 00	adc #$0006	                ADC #6
.1a5c2b	1b		tcs		                TCS
.1a5c2c	28		plp		                PLP
.1a5c2d	60		rts		            RTS
>1a5c2e	00 50 c3 47			ten_d_1         .dword $47c35000            ; 10^(FP_D-1), where FP_D=5
>1a5c32	00 00 80 3f			FP_1_0          .dword $3f800000    ; Floating point constant: 1.0
>1a5c36	f3 04 b5 3f			FP_SQR_2_0      .dword $3fb504f3    ; Floating point constant: sqrt(2.0)
>1a5c3a	f3 04 35 3f			FP_SQR_0_5      .dword $3f3504f3    ; Floating point constant: sqrt(0.2)

;******  Return to file: src\basic816.s


;******  Processing file: src\transcendentals.s

.1a5c3e					Q_POLY_HR
.1a5c3e	5a		phy		                PHY
.1a5c3f	e2 20		sep #$20	            SEP #$20
.1a5c41	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5c43	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5c47	c2 20		rep #$20	            REP #$20
.1a5c49	bd 00 00	lda $0000,x	                LDA 0,X
.1a5c4c	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5c50	bd 02 00	lda $0002,x	                LDA 2,X
.1a5c53	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5c57	a0 04 00	ldy #$0004	                LDY #4          ; 4 more coefficients.
.1a5c5a	e8		inx		loop            INX             ; point to the next coefficient
.1a5c5b	e8		inx		                INX
.1a5c5c	e8		inx		                INX
.1a5c5d	e8		inx		                INX
.1a5c5e	e2 20		sep #$20	            SEP #$20
.1a5c60	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a5c62	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5c66	c2 20		rep #$20	            REP #$20
.1a5c68	af 23 08 00	lda $000823	                LDA @l ARGUMENT1
.1a5c6c	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5c70	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5c74	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5c78	ea		nop		                NOP
.1a5c79	ea		nop		                NOP
.1a5c7a	ea		nop		                NOP
.1a5c7b	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5c7f	48		pha		                PHA
.1a5c80	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5c84	8f 0a e2 af	sta $afe20a	                STA FP_MATH_INPUT0_HL
.1a5c88	68		pla		                PLA
.1a5c89	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5c8d	e2 20		sep #$20	            SEP #$20
.1a5c8f	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a5c91	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5c95	c2 20		rep #$20	            REP #$20
.1a5c97	bd 00 00	lda $0000,x	                LDA 0,X
.1a5c9a	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5c9e	bd 02 00	lda $0002,x	                LDA 2,X
.1a5ca1	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5ca5	ea		nop		                NOP
.1a5ca6	ea		nop		                NOP
.1a5ca7	ea		nop		                NOP
.1a5ca8	88		dey		                DEY
.1a5ca9	f0 14		beq $1a5cbf	                BEQ done
.1a5cab	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5caf	48		pha		                PHA
.1a5cb0	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5cb4	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5cb8	68		pla		                PLA
.1a5cb9	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5cbd	80 9b		bra $1a5c5a	                BRA loop
.1a5cbf	af 08 e2 af	lda $afe208	done            LDA @l FP_MATH_OUTPUT_FP_LL
.1a5cc3	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.1a5cc7	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5ccb	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.1a5ccf	7a		ply		                PLY
.1a5cd0	60		rts		                RTS
.1a5cd1					Q_SQ
.1a5cd1	e2 20		sep #$20	            SEP #$20
.1a5cd3	a9 00		lda #$00	                LDA #0
.1a5cd5	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5cd9	a9 00		lda #$00	                LDA #FP_OUT_MULT
.1a5cdb	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5cdf	c2 20		rep #$20	            REP #$20
.1a5ce1	a5 23		lda $0823	                LDA ARGUMENT1
.1a5ce3	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5ce7	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5ceb	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5cef	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5cf3	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5cf7	ea		nop		                NOP
.1a5cf8	ea		nop		                NOP
.1a5cf9	ea		nop		                NOP
.1a5cfa	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5cfe	85 23		sta $0823	                STA ARGUMENT1
.1a5d00	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5d04	85 25		sta $0825	                STA ARGUMENT1+2
.1a5d06	60		rts		                RTS
.1a5d07					Q_INV
.1a5d07	e2 20		sep #$20	            SEP #$20
.1a5d09	a9 00		lda #$00	                LDA #0
.1a5d0b	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5d0f	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a5d11	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5d15	c2 20		rep #$20	            REP #$20
.1a5d17	a5 23		lda $0823	                LDA ARGUMENT1
.1a5d19	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5d1d	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a5d21	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5d25	af 4d 61 1a	lda $1a614d	                LDA @l fp_one
.1a5d29	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5d2d	af 4f 61 1a	lda $1a614f	                LDA @l fp_one+2
.1a5d31	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5d35	ea		nop		                NOP
.1a5d36	ea		nop		                NOP
.1a5d37	ea		nop		                NOP
.1a5d38	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5d3c	85 23		sta $0823	                STA ARGUMENT1
.1a5d3e	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5d42	85 25		sta $0825	                STA ARGUMENT1+2
.1a5d44	60		rts		                RTS
.1a5d45					Q_FP_SCALE
.1a5d45	a2 00 00	ldx #$0000	                LDX #0
.1a5d48	a5 23		lda $0823	loop            LDA ARGUMENT1
.1a5d4a	c5 29		cmp $0829	                CMP ARGUMENT2
.1a5d4c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5d4e	e5 2b		sbc $082b	                SBC ARGUMENT2+2
.1a5d50	90 1e		bcc $1a5d70	                BCC done
.1a5d52	a5 23		lda $0823	                LDA ARGUMENT1
.1a5d54	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5d58	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5d5a	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5d5e	ea		nop		                NOP
.1a5d5f	ea		nop		                NOP
.1a5d60	ea		nop		                NOP
.1a5d61	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5d65	85 23		sta $0823	                STA ARGUMENT1
.1a5d67	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5d6b	85 25		sta $0825	                STA ARGUMENT1+2
.1a5d6d	e8		inx		                INX
.1a5d6e	80 d8		bra $1a5d48	                BRA loop
.1a5d70					done
.1a5d70	60		rts		            RTS
.1a5d71					Q_FP_SCALE_TAU
.1a5d71	e2 20		sep #$20	            SEP #$20
.1a5d73	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5d75	10 09		bpl $1a5d80	                BPL notneg
.1a5d77	29 7f		and #$7f	                AND #$7F
.1a5d79	85 26		sta $0826	                STA ARGUMENT1+3
.1a5d7b	a9 01		lda #$01	                LDA #1
.1a5d7d	48		pha		                PHA
.1a5d7e	80 03		bra $1a5d83	                BRA compute
.1a5d80	a9 00		lda #$00	notneg          LDA #0          ; not negative, so push 0.
.1a5d82	48		pha		                PHA
.1a5d83	a9 40		lda #$40	compute         LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5d85	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5d89	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a5d8b	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5d8f	c2 30		rep #$30	            REP #$30
.1a5d91	af 61 61 1a	lda $1a6161	                LDA @l twopi
.1a5d95	85 29		sta $0829	                STA ARGUMENT2
.1a5d97	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5d9b	af 63 61 1a	lda $1a6163	                LDA @l twopi+2
.1a5d9f	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5da1	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5da5	20 45 5d	jsr $1a5d45	            JSR Q_FP_SCALE
.1a5da8	e2 20		sep #$20	            SEP #$20
.1a5daa	68		pla		                PLA
.1a5dab	c2 20		rep #$20	            REP #$20
.1a5dad	f0 1e		beq $1a5dcd	                BEQ done
.1a5daf	a5 23		lda $0823	                LDA ARGUMENT1
.1a5db1	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5db5	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5db7	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5dbb	ea		nop		                NOP
.1a5dbc	ea		nop		                NOP
.1a5dbd	ea		nop		                NOP
.1a5dbe	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5dc2	85 23		sta $0823	                STA ARGUMENT1
.1a5dc4	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5dc8	29 ff 7f	and #$7fff	                AND #$7fff
.1a5dcb	85 25		sta $0825	                STA ARGUMENT1+2
.1a5dcd					done
.1a5dcd	60		rts		            RTS
.1a5dce					Q_FP_NORM_ANGLE
.1a5dce	5a		phy		                PHY
.1a5dcf	a2 00 00	ldx #$0000	                LDX #0
.1a5dd2	a0 00 00	ldy #$0000	                LDY #0
.1a5dd5	a5 23		lda $0823	loop            LDA ARGUMENT1
.1a5dd7	df 65 61 1a	cmp $1a6165,x	                CMP @l onepi,x
.1a5ddb	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5ddd	ff 67 61 1a	sbc $1a6167,x	                SBC @l onepi+2,x
.1a5de1	90 2c		bcc $1a5e0f	                BCC less
.1a5de3	bf 61 61 1a	lda $1a6161,x	                LDA @l twopi,x
.1a5de7	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5deb	bf 63 61 1a	lda $1a6163,x	                LDA @l twopi+2,x
.1a5def	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5df3	a5 23		lda $0823	                LDA ARGUMENT1
.1a5df5	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5df9	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5dfb	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5dff	ea		nop		                NOP
.1a5e00	ea		nop		                NOP
.1a5e01	ea		nop		                NOP
.1a5e02	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5e06	85 23		sta $0823	                STA ARGUMENT1
.1a5e08	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5e0c	85 25		sta $0825	                STA ARGUMENT1+2
.1a5e0e	38		sec		                SEC             ; set carry to indicate a reflection
.1a5e0f	98		tya		less            TYA             ; carry already cleared if we branched
.1a5e10	2a		rol a		                ROL             ; shift carry into flags...
.1a5e11	a8		tay		                TAY             ; and store back into y
.1a5e12	e8		inx		                INX             ; next set of values
.1a5e13	e8		inx		                INX
.1a5e14	e8		inx		                INX
.1a5e15	e8		inx		                INX
.1a5e16	e0 0c 00	cpx #$000c	                CPX #12         ; check if we have already looked at 3
.1a5e19	d0 ba		bne $1a5dd5	                BNE loop
.1a5e1b	98		tya		                TYA             ; copy Y to X, as that's what we have
.1a5e1c	aa		tax		                TAX
.1a5e1d	7a		ply		                PLY
.1a5e1e	60		rts		            RTS
.1a5e1f					FP_SCALE
.1a5e1f	08		php		                PHP
.1a5e20	c2 30		rep #$30	            REP #$30
.1a5e22	48		pha		                PHA
.1a5e23	da		phx		                PHX
.1a5e24	20 71 5d	jsr $1a5d71	            JSR Q_FP_SCALE_TAU
.1a5e27	fa		plx		                PLX
.1a5e28	7a		ply		                PLY
.1a5e29	28		plp		                PLP
.1a5e2a	60		rts		            RTS
.1a5e2b					Q_FP_COS
.1a5e2b	08		php		                PHP
.1a5e2c	c2 30		rep #$30	            REP #$30
.1a5e2e	48		pha		                PHA
.1a5e2f	da		phx		                PHX
.1a5e30	20 d1 5c	jsr $1a5cd1	            JSR Q_SQ
.1a5e33	8b		phb		                PHB
.1a5e34	e2 20		sep #$20	            SEP #$20
.1a5e36	a9 1a		lda #$1a	                LDA #`cos_coeff
.1a5e38	48		pha		                PHA
.1a5e39	ab		plb		                PLB
.1a5e3a	c2 20		rep #$20	            REP #$20
.1a5e3c	a2 01 61	ldx #$6101	                LDX #<>cos_coeff
.1a5e3f	20 3e 5c	jsr $1a5c3e	            JSR Q_POLY_HR
.1a5e42	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.1a5e45	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a5e49	ab		plb		                PLB
.1a5e4a	fa		plx		                PLX
.1a5e4b	68		pla		                PLA
.1a5e4c	28		plp		                PLP
.1a5e4d	60		rts		            RTS
.1a5e4e					Q_FP_SIN
.1a5e4e	08		php		                PHP
.1a5e4f	c2 30		rep #$30	            REP #$30
.1a5e51	48		pha		                PHA
.1a5e52	da		phx		                PHX
.1a5e53	a5 23		lda $0823	                LDA ARGUMENT1
.1a5e55	85 29		sta $0829	                STA ARGUMENT2
.1a5e57	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5e59	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5e5b	20 d1 5c	jsr $1a5cd1	            JSR Q_SQ
.1a5e5e	8b		phb		                PHB
.1a5e5f	e2 20		sep #$20	            SEP #$20
.1a5e61	a9 1a		lda #$1a	                LDA #`sin_coeff
.1a5e63	48		pha		                PHA
.1a5e64	ab		plb		                PLB
.1a5e65	c2 20		rep #$20	            REP #$20
.1a5e67	a2 15 61	ldx #$6115	                LDX #<>sin_coeff
.1a5e6a	20 3e 5c	jsr $1a5c3e	            JSR Q_POLY_HR
.1a5e6d	ab		plb		                PLB
.1a5e6e	20 a8 54	jsr $1a54a8	            JSR OP_FP_MUL
.1a5e71	fa		plx		                PLX
.1a5e72	68		pla		                PLA
.1a5e73	28		plp		                PLP
.1a5e74	60		rts		            RTS
.1a5e75					Q_FP_TAN
.1a5e75	08		php		                PHP
.1a5e76	c2 30		rep #$30	            REP #$30
.1a5e78	48		pha		                PHA
.1a5e79	da		phx		                PHX
.1a5e7a	a5 23		lda $0823	                LDA ARGUMENT1
.1a5e7c	85 29		sta $0829	                STA ARGUMENT2
.1a5e7e	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5e80	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5e82	20 d1 5c	jsr $1a5cd1	            JSR Q_SQ
.1a5e85	8b		phb		                PHB
.1a5e86	e2 20		sep #$20	            SEP #$20
.1a5e88	a9 1a		lda #$1a	                LDA #`tan_coeff
.1a5e8a	48		pha		                PHA
.1a5e8b	ab		plb		                PLB
.1a5e8c	c2 20		rep #$20	            REP #$20
.1a5e8e	a2 29 61	ldx #$6129	                LDX #<>tan_coeff
.1a5e91	20 3e 5c	jsr $1a5c3e	            JSR Q_POLY_HR
.1a5e94	ab		plb		                PLB
.1a5e95	20 a8 54	jsr $1a54a8	            JSR OP_FP_MUL
.1a5e98	fa		plx		                PLX
.1a5e99	68		pla		                PLA
.1a5e9a	28		plp		                PLP
.1a5e9b	60		rts		            RTS
.1a5e9c					Q_FP_LN
.1a5e9c	08		php		                PHP
.1a5e9d	c2 30		rep #$30	            REP #$30
.1a5e9f	48		pha		                PHA
.1a5ea0	da		phx		                PHX
.1a5ea1	e2 20		sep #$20	            SEP #$20
.1a5ea3	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5ea5	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5ea9	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a5eab	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5eaf	c2 20		rep #$20	            REP #$20
.1a5eb1	a5 23		lda $0823	                LDA ARGUMENT1
.1a5eb3	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5eb7	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5eb9	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5ebd	af 4d 61 1a	lda $1a614d	                LDA @l fp_one
.1a5ec1	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5ec5	af 4f 61 1a	lda $1a614f	                LDA @l fp_one+2
.1a5ec9	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5ecd	ea		nop		                NOP
.1a5ece	ea		nop		                NOP
.1a5ecf	ea		nop		                NOP
.1a5ed0	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5ed4	85 0c		sta $080c	                STA SCRATCH
.1a5ed6	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5eda	85 0e		sta $080e	                STA SCRATCH+2
.1a5edc	e2 20		sep #$20	            SEP #$20
.1a5ede	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.1a5ee0	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5ee4	c2 20		rep #$20	            REP #$20
.1a5ee6	ea		nop		                NOP
.1a5ee7	ea		nop		                NOP
.1a5ee8	ea		nop		                NOP
.1a5ee9	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5eed	85 10		sta $0810	                STA SCRATCH2
.1a5eef	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5ef3	85 12		sta $0812	                STA SCRATCH2+2
.1a5ef5	e2 20		sep #$20	            SEP #$20
.1a5ef7	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a5ef9	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5efd	c2 20		rep #$20	            REP #$20
.1a5eff	a5 0c		lda $080c	                LDA SCRATCH
.1a5f01	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f05	a5 0e		lda $080e	                LDA SCRATCH+2
.1a5f07	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5f0b	a5 10		lda $0810	                LDA SCRATCH2
.1a5f0d	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a5f11	a5 12		lda $0812	                LDA SCRATCH2+2
.1a5f13	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a5f17	ea		nop		                NOP
.1a5f18	ea		nop		                NOP
.1a5f19	ea		nop		                NOP
.1a5f1a	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5f1e	85 23		sta $0823	                STA ARGUMENT1
.1a5f20	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5f24	85 25		sta $0825	                STA ARGUMENT1+2
.1a5f26	e2 20		sep #$20	            SEP #$20
.1a5f28	a9 08		lda #$08	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX0
.1a5f2a	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a5f2e	a9 02		lda #$02	                LDA #FP_OUT_ADD
.1a5f30	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a5f34	c2 20		rep #$20	            REP #$20
.1a5f36	a5 23		lda $0823	                LDA ARGUMENT1
.1a5f38	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.1a5f3c	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a5f3e	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.1a5f42	ea		nop		                NOP
.1a5f43	ea		nop		                NOP
.1a5f44	ea		nop		                NOP
.1a5f45	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.1a5f49	85 29		sta $0829	                STA ARGUMENT2
.1a5f4b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.1a5f4f	85 2b		sta $082b	                STA ARGUMENT2+2
.1a5f51	20 d1 5c	jsr $1a5cd1	            JSR Q_SQ
.1a5f54	8b		phb		                PHB
.1a5f55	e2 20		sep #$20	            SEP #$20
.1a5f57	a9 1a		lda #$1a	                LDA #`ln_coeff
.1a5f59	48		pha		                PHA
.1a5f5a	ab		plb		                PLB
.1a5f5b	c2 20		rep #$20	            REP #$20
.1a5f5d	a2 3d 61	ldx #$613d	                LDX #<>ln_coeff
.1a5f60	20 3e 5c	jsr $1a5c3e	            JSR Q_POLY_HR
.1a5f63	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.1a5f66	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a5f6a	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a5f6e	20 a8 54	jsr $1a54a8	            JSR OP_FP_MUL
.1a5f71	ab		plb		                PLB
.1a5f72	fa		plx		                PLX
.1a5f73	68		pla		                PLA
.1a5f74	28		plp		                PLP
.1a5f75	60		rts		            RTS
.1a5f76					FP_SIN
.1a5f76	08		php		                PHP
.1a5f77	c2 30		rep #$30	            REP #$30
.1a5f79	48		pha		                PHA
.1a5f7a	da		phx		                PHX
.1a5f7b	20 71 5d	jsr $1a5d71	            JSR Q_FP_SCALE_TAU
.1a5f7e	20 ce 5d	jsr $1a5dce	            JSR Q_FP_NORM_ANGLE
.1a5f81	da		phx		                PHX
.1a5f82	8a		txa		                TXA
.1a5f83	29 01 00	and #$0001	                AND #1
.1a5f86	d0 05		bne $1a5f8d	                BNE do_cos
.1a5f88	20 4e 5e	jsr $1a5e4e	            JSR Q_FP_SIN
.1a5f8b	80 03		bra $1a5f90	                BRA maybe_neg
.1a5f8d					do_cos
.1a5f8d	20 2b 5e	jsr $1a5e2b	            JSR Q_FP_COS
.1a5f90	fa		plx		maybe_neg       PLX
.1a5f91	8a		txa		                TXA
.1a5f92	29 04 00	and #$0004	                AND #4
.1a5f95	f0 0a		beq $1a5fa1	                BEQ done
.1a5f97	e2 20		sep #$20	            SEP #$20
.1a5f99	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5f9b	09 80		ora #$80	                ORA #$80
.1a5f9d	85 26		sta $0826	                STA ARGUMENT1+3
.1a5f9f	c2 20		rep #$20	            REP #$20
.1a5fa1	fa		plx		done            PLX
.1a5fa2	68		pla		                PLA
.1a5fa3	28		plp		                PLP
.1a5fa4	60		rts		            RTS
.1a5fa5					FP_COS
.1a5fa5	08		php		                PHP
.1a5fa6	c2 30		rep #$30	            REP #$30
.1a5fa8	48		pha		                PHA
.1a5fa9	da		phx		                PHX
.1a5faa	20 71 5d	jsr $1a5d71	            JSR Q_FP_SCALE_TAU
.1a5fad	20 ce 5d	jsr $1a5dce	            JSR Q_FP_NORM_ANGLE
.1a5fb0	da		phx		                PHX
.1a5fb1	8a		txa		                TXA
.1a5fb2	29 01 00	and #$0001	                AND #1
.1a5fb5	d0 05		bne $1a5fbc	                BNE do_sin
.1a5fb7	20 2b 5e	jsr $1a5e2b	            JSR Q_FP_COS
.1a5fba	80 03		bra $1a5fbf	                BRA maybe_neg
.1a5fbc					do_sin
.1a5fbc	20 4e 5e	jsr $1a5e4e	            JSR Q_FP_SIN
.1a5fbf	fa		plx		maybe_neg       PLX
.1a5fc0	8a		txa		                TXA
.1a5fc1	29 02 00	and #$0002	                AND #2
.1a5fc4	f0 0a		beq $1a5fd0	                BEQ done
.1a5fc6	e2 20		sep #$20	            SEP #$20
.1a5fc8	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5fca	09 80		ora #$80	                ORA #$80
.1a5fcc	85 26		sta $0826	                STA ARGUMENT1+3
.1a5fce	c2 20		rep #$20	            REP #$20
.1a5fd0	fa		plx		done            PLX
.1a5fd1	68		pla		                PLA
.1a5fd2	28		plp		                PLP
.1a5fd3	60		rts		            RTS
.1a5fd4					FP_TAN
.1a5fd4	08		php		                PHP
.1a5fd5	c2 30		rep #$30	            REP #$30
.1a5fd7	48		pha		                PHA
.1a5fd8	da		phx		                PHX
.1a5fd9	20 71 5d	jsr $1a5d71	            JSR Q_FP_SCALE_TAU
.1a5fdc	20 ce 5d	jsr $1a5dce	            JSR Q_FP_NORM_ANGLE
.1a5fdf	20 75 5e	jsr $1a5e75	            JSR Q_FP_TAN
.1a5fe2	8a		txa		                TXA
.1a5fe3	29 01 00	and #$0001	                AND #1
.1a5fe6	f0 03		beq $1a5feb	                BEQ no_inv
.1a5fe8	20 07 5d	jsr $1a5d07	            JSR Q_INV
.1a5feb	8a		txa		no_inv          TXA
.1a5fec	e2 20		sep #$20	            SEP #$20
.1a5fee	4a		lsr a		                LSR
.1a5fef	4a		lsr a		                LSR
.1a5ff0	69 00		adc #$00	                ADC #0
.1a5ff2	29 01		and #$01	                AND #1
.1a5ff4	f0 06		beq $1a5ffc	                BEQ no_neg
.1a5ff6	a5 26		lda $0826	                LDA ARGUMENT1+3
.1a5ff8	09 80		ora #$80	                ORA #$80
.1a5ffa	85 26		sta $0826	                STA ARGUMENT1+3
.1a5ffc					no_neg
.1a5ffc	c2 20		rep #$20	            REP #$20
.1a5ffe	fa		plx		                PLX
.1a5fff	68		pla		                PLA
.1a6000	28		plp		                PLP
.1a6001	60		rts		            RTS
.1a6002					FP_LN
.1a6002	08		php		                PHP
.1a6003	c2 30		rep #$30	            REP #$30
.1a6005	48		pha		                PHA
.1a6006	da		phx		                PHX
.1a6007	5a		phy		                PHY
.1a6008	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a600a	10 1f		bpl $1a602b	                BPL arg_ok
.1a600c	08		php		            PHP
.1a600d	c2 20		rep #$20	            REP #$20
.1a600f	48		pha		            PHA
.1a6010	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6013	5b		tcd		            TCD
.1a6014	68		pla		            PLA
.1a6015	28		plp		            PLP
.1a6016	e2 20		sep #$20	            SEP #$20
.1a6018	a9 17		lda #$17	            LDA #ERR_DOMAIN
.1a601a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a601e	c2 20		rep #$20	            REP #$20
.1a6020	29 ff 00	and #$00ff	            AND #$00FF
.1a6023	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6026	e2 20		sep #$20	            SEP #$20
.1a6028	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a602b					arg_ok
.1a602b	c2 30		rep #$30	            REP #$30
.1a602d	a5 23		lda $0823	                LDA ARGUMENT1
.1a602f	cf 4d 61 1a	cmp $1a614d	                CMP @l fp_one
.1a6033	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6035	cf 4f 61 1a	cmp $1a614f	                CMP @l fp_one+2
.1a6039	b0 04		bcs $1a603f	                BCS gtone
.1a603b	20 07 5d	jsr $1a5d07	            JSR Q_INV
.1a603e	18		clc		                CLC
.1a603f	a9 00 00	lda #$0000	gtone           LDA #0
.1a6042	a8		tay		                TAY
.1a6043	2a		rol a		                ROL             ; Rotate Carry into A; 0 means negate
.1a6044	48		pha		                PHA
.1a6045	e2 20		sep #$20	            SEP #$20
.1a6047	a9 00		lda #$00	                LDA #0
.1a6049	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.1a604d	a9 01		lda #$01	                LDA #FP_OUT_DIV
.1a604f	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.1a6053	c2 20		rep #$20	            REP #$20
.1a6055	af 51 61 1a	lda $1a6151	                LDA @l eexp64
.1a6059	85 29		sta $0829	                STA ARGUMENT2
.1a605b	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a605f	af 53 61 1a	lda $1a6153	                LDA @l eexp64+2
.1a6063	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6065	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a6069	20 45 5d	jsr $1a5d45	            JSR Q_FP_SCALE
.1a606c	8a		txa		                TXA
.1a606d	f0 07		beq $1a6076	                BEQ chk16
.1a606f	0a		asl a		                ASL             ; multiply counter by 64
.1a6070	0a		asl a		                ASL
.1a6071	0a		asl a		                ASL
.1a6072	0a		asl a		                ASL
.1a6073	0a		asl a		                ASL
.1a6074	0a		asl a		                ASL
.1a6075	a8		tay		                TAY
.1a6076	af 55 61 1a	lda $1a6155	chk16           LDA @l eexp16
.1a607a	85 29		sta $0829	                STA ARGUMENT2
.1a607c	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a6080	af 57 61 1a	lda $1a6157	                LDA @l eexp16+2
.1a6084	85 2b		sta $082b	                STA ARGUMENT2+2
.1a6086	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a608a	20 45 5d	jsr $1a5d45	            JSR Q_FP_SCALE
.1a608d	8a		txa		                TXA
.1a608e	f0 0b		beq $1a609b	                BEQ chk04
.1a6090	0a		asl a		                ASL             ; multiply counter by 16
.1a6091	0a		asl a		                ASL
.1a6092	0a		asl a		                ASL
.1a6093	0a		asl a		                ASL
.1a6094	85 29		sta $0829	                STA ARGUMENT2   ; and add into total
.1a6096	18		clc		                CLC
.1a6097	98		tya		                TYA
.1a6098	65 29		adc $0829	                ADC ARGUMENT2
.1a609a	a8		tay		                TAY
.1a609b	af 59 61 1a	lda $1a6159	chk04           LDA @l eexp04
.1a609f	85 29		sta $0829	                STA ARGUMENT2
.1a60a1	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a60a5	af 5b 61 1a	lda $1a615b	                LDA @l eexp04+2
.1a60a9	85 2b		sta $082b	                STA ARGUMENT2+2
.1a60ab	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a60af	20 45 5d	jsr $1a5d45	            JSR Q_FP_SCALE
.1a60b2	8a		txa		                TXA
.1a60b3	f0 09		beq $1a60be	                BEQ chk01
.1a60b5	0a		asl a		                ASL             ;multiply counter by 4
.1a60b6	0a		asl a		                ASL
.1a60b7	85 29		sta $0829	                STA ARGUMENT2   ;and add to total
.1a60b9	18		clc		                CLC
.1a60ba	98		tya		                TYA
.1a60bb	65 29		adc $0829	                ADC ARGUMENT2
.1a60bd	a8		tay		                TAY
.1a60be	af 5d 61 1a	lda $1a615d	chk01           LDA @l eexp01
.1a60c2	85 29		sta $0829	                STA ARGUMENT2
.1a60c4	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.1a60c8	af 5f 61 1a	lda $1a615f	                LDA @l eexp01+2
.1a60cc	85 2b		sta $082b	                STA ARGUMENT2+2
.1a60ce	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.1a60d2	20 45 5d	jsr $1a5d45	            JSR Q_FP_SCALE
.1a60d5	86 29		stx $0829	                STX ARGUMENT2   ; add counter to total
.1a60d7	18		clc		                CLC
.1a60d8	98		tya		                TYA
.1a60d9	65 29		adc $0829	                ADC ARGUMENT2
.1a60db	a8		tay		                TAY
.1a60dc	20 9c 5e	jsr $1a5e9c	            JSR Q_FP_LN
.1a60df	a5 23		lda $0823	                LDA ARGUMENT1
.1a60e1	85 29		sta $0829	                STA ARGUMENT2
.1a60e3	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a60e5	85 2b		sta $082b	                STA ARGUMENT2+2
.1a60e7	98		tya		                TYA
.1a60e8	85 23		sta $0823	                STA ARGUMENT1
.1a60ea	64 25		stz $0825	                STZ ARGUMENT1+2
.1a60ec	20 35 59	jsr $1a5935	            JSR ITOF
.1a60ef	20 12 54	jsr $1a5412	            JSR OP_FP_ADD
.1a60f2	68		pla		                PLA
.1a60f3	d0 07		bne $1a60fc	                BNE done
.1a60f5	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a60f7	09 00 80	ora #$8000	                ORA #$8000
.1a60fa	85 25		sta $0825	                STA ARGUMENT1+2
.1a60fc	7a		ply		done            PLY
.1a60fd	fa		plx		                PLX
.1a60fe	68		pla		                PLA
.1a60ff	28		plp		                PLP
.1a6100	60		rts		            RTS
.1a6101					cos_coeff
>1a6101	01 0d d0 37			                .dword $37D00D01
>1a6105	61 0b b6 ba			                .dword $BAB60B61
>1a6109	ab aa 2a 3d			                .dword $3D2AAAAB
>1a610d	00 00 00 bf			                .dword $BF000000
>1a6111	00 00 80 3f			                .dword $3F800000
.1a6115					sin_coeff
>1a6115	1d ef 38 36			                .dword $3638EF1D
>1a6119	01 0d 50 b9			                .dword $B9500D01
>1a611d	89 88 08 3c			                .dword $3C088889
>1a6121	ab aa 2a be			                .dword $BE2AAAAB
>1a6125	00 00 80 3f			                .dword $3F800000
.1a6129					tan_coeff
>1a6129	a4 27 b3 3c			                .dword $3CB327A4
>1a612d	d1 0d 5d 3d			                .dword $3D5D0DD1
>1a6131	89 88 08 3e			                .dword $3E088889
>1a6135	ab aa aa 3e			                .dword $3EAAAAAB
>1a6139	00 00 80 3f			                .dword $3F800000
>1a613d	39 8e e3 3d			ln_coeff        .dword $3DE38E39
>1a6141	25 49 12 3e			                .dword $3E124925
>1a6145	cd cc 4c 3e			                .dword $3E4CCCCD
>1a6149	ab aa aa 3e			                .dword $3EAAAAAB
>1a614d	00 00 80 3f			fp_one          .dword $3F800000
>1a6151	c1 2c a1 6d			eexp64          .dword $6DA12CC1
>1a6155	5f 97 07 4b			eexp16          .dword $4B07975F
>1a6159	81 64 5a 42			eexp04          .dword $425A6481
>1a615d	54 f8 2d 40			eexp01          .dword $402DF854
>1a6161	db 0f c9 40			twopi           .dword $40C90FDB
>1a6165	db 0f 49 40			onepi           .dword $40490FDB
>1a6169	db 0f c9 3f			halfpi          .dword $3FC90FDB
>1a616d	db 0f 49 3f			quarterpi       .dword $3F490FDB

;******  Return to file: src\basic816.s


;******  Processing file: src\arrays.s

.1a6171					ARR_ALLOC
.1a6171	08		php		                PHP
.1a6172	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a6175	c2 20		rep #$20	            REP #$20
.1a6177	a9 01 00	lda #$0001	                LDA #1                      ; ARGUMENT1 := 1
.1a617a	85 23		sta $0823	                STA ARGUMENT1
.1a617c	a9 00 00	lda #$0000	                LDA #0
.1a617f	85 25		sta $0825	                STA ARGUMENT1+2
.1a6181	e2 20		sep #$20	            SEP #$20
.1a6183	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.1a6187	c2 20		rep #$20	            REP #$20
.1a6189	29 ff 00	and #$00ff	                AND #$00FF
.1a618c	85 8f		sta $088f	                STA MCOUNT                  ; Save it to MCOUNT for later
.1a618e	a8		tay		                TAY                         ; Y := number of dimensions
.1a618f	a2 01 00	ldx #$0001	                LDX #1                      ; X := index to size 0
.1a6192					size_loop
.1a6192	c2 20		rep #$20	            REP #$20
.1a6194	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X           ; ARGUMENT2 := Ith dimension
.1a6198	85 29		sta $0829	                STA ARGUMENT2
.1a619a	a9 00 00	lda #$0000	                LDA #0
.1a619d	85 2b		sta $082b	                STA ARGUMENT2+2
.1a619f	20 74 26	jsr $1a2674	            JSR OP_MULTIPLY
.1a61a2	e8		inx		                INX
.1a61a3	e8		inx		                INX
.1a61a4	88		dey		                DEY
.1a61a5	d0 eb		bne $1a6192	                BNE size_loop               ; If there are more dimensions, take the next one
.1a61a7	c2 20		rep #$20	            REP #$20
.1a61a9	a9 04 00	lda #$0004	                LDA #ARGUMENT_SIZE-1        ; Size of a data item (don't include the type code)
.1a61ac	85 29		sta $0829	                STA ARGUMENT2
.1a61ae	a9 00 00	lda #$0000	                LDA #0
.1a61b1	85 2b		sta $082b	                STA ARGUMENT2+2
.1a61b3	20 74 26	jsr $1a2674	            JSR OP_MULTIPLY
.1a61b6	e2 20		sep #$20	            SEP #$20
.1a61b8	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF             ; SCRATCH := N * 2
.1a61bc	85 0c		sta $080c	                STA SCRATCH
.1a61be	a9 00		lda #$00	                LDA #0
.1a61c0	85 0d		sta $080d	                STA SCRATCH+1
.1a61c2	c2 20		rep #$20	            REP #$20
.1a61c4	06 0c		asl $080c	                ASL SCRATCH
.1a61c6	38		sec		                SEC                         ; ARGUMENT1 := size of the complete block
.1a61c7	a5 23		lda $0823	                LDA ARGUMENT1
.1a61c9	65 0c		adc $080c	                ADC SCRATCH                 ; Size of data area + N*2 + 1 (in carry)
.1a61cb	85 23		sta $0823	                STA ARGUMENT1
.1a61cd	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a61cf	69 00 00	adc #$0000	                ADC #0
.1a61d2	85 25		sta $0825	                STA ARGUMENT1+2
.1a61d4	d0 29		bne $1a61ff	                BNE too_big                 ; size > 16-bit? Yes: throw an error
.1a61d6	e2 20		sep #$20	            SEP #$20
.1a61d8	a5 ea		lda $08ea	                LDA TOFINDTYPE              ; Get the type
.1a61da	09 80		ora #$80	                ORA #$80                    ; Flip the flag to make it an array of that type
.1a61dc	a6 23		ldx $0823	                LDX ARGUMENT1               ; Get the computed size
.1a61de	20 60 0f	jsr $1a0f60	            JSR ALLOC
.1a61e1	e2 20		sep #$20	            SEP #$20
.1a61e3	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.1a61e7	87 c0		sta [$08c0]	                STA [CURRBLOCK]             ; Write the number of dimensions to the array's preamble
.1a61e9	a0 01 00	ldy #$0001	                LDY #1
.1a61ec	a2 00 00	ldx #$0000	                LDX #0
.1a61ef					copy_loop
.1a61ef	e2 20		sep #$20	            SEP #$20
.1a61f1	bf 01 4d 00	lda $004d01,x	                LDA @lARRIDXBUF+1,X         ; ARGUMENT2 := Ith dimension
.1a61f5	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y           ; And write the dimension to the array's preamble
.1a61f7	e4 8f		cpx $088f	                CPX MCOUNT                  ; Have we written the last byte?
.1a61f9	f0 23		beq $1a621e	                BEQ null_array              ; Yes: clear the array
.1a61fb	e8		inx		                INX                         ; No: move to the next byte
.1a61fc	c8		iny		                INY
.1a61fd	80 f0		bra $1a61ef	                BRA copy_loop
.1a61ff					too_big
.1a61ff	08		php		            PHP
.1a6200	c2 20		rep #$20	            REP #$20
.1a6202	48		pha		            PHA
.1a6203	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6206	5b		tcd		            TCD
.1a6207	68		pla		            PLA
.1a6208	28		plp		            PLP
.1a6209	e2 20		sep #$20	            SEP #$20
.1a620b	a9 09		lda #$09	            LDA #ERR_RANGE
.1a620d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6211	c2 20		rep #$20	            REP #$20
.1a6213	29 ff 00	and #$00ff	            AND #$00FF
.1a6216	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6219	e2 20		sep #$20	            SEP #$20
.1a621b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a621e					null_array
.1a621e	e2 20		sep #$20	            SEP #$20
.1a6220	38		sec		                SEC                         ; INDEX := pointer to first value
.1a6221	a5 c0		lda $08c0	                LDA CURRBLOCK
.1a6223	67 c0		adc [$08c0]	                ADC [CURRBLOCK]
.1a6225	85 08		sta $0808	                STA INDEX
.1a6227	a5 c1		lda $08c1	                LDA CURRBLOCK+1
.1a6229	69 00		adc #$00	                ADC #0
.1a622b	85 09		sta $0809	                STA INDEX+1
.1a622d	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.1a622f	69 00		adc #$00	                ADC #0
.1a6231	85 0a		sta $080a	                STA INDEX+2
.1a6233	64 0b		stz $080b	                STZ INDEX+3
.1a6235	c2 20		rep #$20	            REP #$20
.1a6237	a0 05 00	ldy #$0005	                LDY #HEAPOBJ.END            ; SCRATCH := pointer the the first byte after the array
.1a623a	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a623c	85 0c		sta $080c	                STA SCRATCH
.1a623e	e2 20		sep #$20	            SEP #$20
.1a6240	c8		iny		                INY
.1a6241	c8		iny		                INY
.1a6242	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a6244	85 0e		sta $080e	                STA SCRATCH+2
.1a6246	64 0f		stz $080f	                STZ SCRATCH+3
.1a6248					clr_loop
.1a6248	e2 20		sep #$20	            SEP #$20
.1a624a	a9 00		lda #$00	                LDA #0
.1a624c	87 08		sta [$0808]	                STA [INDEX]                 ; Clear the byte
.1a624e	c2 20		rep #$20	            REP #$20
.1a6250	18		clc		                CLC                         ; Increment INDEX
.1a6251	a5 08		lda $0808	                LDA INDEX
.1a6253	69 01 00	adc #$0001	                ADC #1
.1a6256	85 08		sta $0808	                STA INDEX
.1a6258	a5 0a		lda $080a	                LDA INDEX+2
.1a625a	69 00 00	adc #$0000	                ADC #0
.1a625d	85 0a		sta $080a	                STA INDEX+2
.1a625f	c5 0e		cmp $080e	                CMP SCRATCH+2               ; INDEX == SCRATCH?
.1a6261	d0 e5		bne $1a6248	                BNE clr_loop                ; No: write to this next byte
.1a6263	a5 08		lda $0808	                LDA INDEX
.1a6265	c5 0c		cmp $080c	                CMP SCRATCH
.1a6267	d0 df		bne $1a6248	                BNE clr_loop
.1a6269					done
.1a6269	28		plp		                PLP
.1a626a	60		rts		            RTS
.1a626b					ARR_CELL
.1a626b	08		php		                PHP
.1a626c	c2 20		rep #$20	            REP #$20
.1a626e	64 08		stz $0808	                STZ INDEX               ; INDEX := 0
.1a6270	64 0a		stz $080a	                STZ INDEX+2
.1a6272	e2 20		sep #$20	            SEP #$20
.1a6274	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF         ; MCOUNT := N (number of dimensions)
.1a6278	85 8f		sta $088f	                STA MCOUNT
.1a627a	64 90		stz $0890	                STZ MCOUNT+1
.1a627c	a2 01 00	ldx #$0001	                LDX #1                  ; X := index to dimension 0
.1a627f	e2 20		sep #$20	            SEP #$20
.1a6281	a7 c0		lda [$08c0]	                LDA [CURRBLOCK]         ; Make sure the dimensions of the array
.1a6283	c5 8f		cmp $088f	                CMP MCOUNT              ; ... match those requested
.1a6285	f0 1f		beq $1a62a6	                BEQ dims_match          ; Yes: the dimensions match
.1a6287					arg_err
.1a6287	08		php		            PHP
.1a6288	c2 20		rep #$20	            REP #$20
.1a628a	48		pha		            PHA
.1a628b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a628e	5b		tcd		            TCD
.1a628f	68		pla		            PLA
.1a6290	28		plp		            PLP
.1a6291	e2 20		sep #$20	            SEP #$20
.1a6293	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a6295	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6299	c2 20		rep #$20	            REP #$20
.1a629b	29 ff 00	and #$00ff	            AND #$00FF
.1a629e	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a62a1	e2 20		sep #$20	            SEP #$20
.1a62a3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a62a6	c9 01		cmp #$01	dims_match      CMP #1                  ; Check to see if this array is one dimensional
.1a62a8	f0 3a		beq $1a62e4	                BEQ add_last            ; If so, just add the index of the cell to INDEX
.1a62aa	a0 01 00	ldy #$0001	                LDY #1
.1a62ad					index_loop
.1a62ad	e2 20		sep #$20	            SEP #$20
.1a62af	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; ARGUMENT1 := I_j
.1a62b3	85 23		sta $0823	                STA ARGUMENT1
.1a62b5	64 24		stz $0824	                STZ ARGUMENT1+1
.1a62b7	64 25		stz $0825	                STZ ARGUMENT1+2
.1a62b9	64 26		stz $0826	                STZ ARGUMENT1+3
.1a62bb	b7 c0		lda [$08c0],y	                LDA [CURRBLOCK],Y       ; ARGUMENT2 := D_j
.1a62bd	85 29		sta $0829	                STA ARGUMENT2
.1a62bf	64 2a		stz $082a	                STZ ARGUMENT2+1
.1a62c1	64 2b		stz $082b	                STZ ARGUMENT2+2
.1a62c3	64 2c		stz $082c	                STZ ARGUMENT2+3
.1a62c5	a5 23		lda $0823	                LDA ARGUMENT1
.1a62c7	c5 29		cmp $0829	                CMP ARGUMENT2           ; Is I_j >= D_j
.1a62c9	b0 68		bcs $1a6333	                BGE range_err           ; Yes: throw an out-of-range error
.1a62cb	20 74 26	jsr $1a2674	            JSR OP_MULTIPLY
.1a62ce	c2 20		rep #$20	            REP #$20
.1a62d0	18		clc		                CLC                     ; INDEX := INDEX + ARGUMENT1
.1a62d1	a5 08		lda $0808	                LDA INDEX
.1a62d3	65 23		adc $0823	                ADC ARGUMENT1
.1a62d5	85 08		sta $0808	                STA INDEX
.1a62d7	a5 0a		lda $080a	                LDA INDEX+2
.1a62d9	65 25		adc $0825	                ADC ARGUMENT1+2
.1a62db	85 0a		sta $080a	                STA INDEX+2
.1a62dd	e8		inx		                INX
.1a62de	e8		inx		                INX
.1a62df	c8		iny		                INY
.1a62e0	c4 8f		cpy $088f	                CPY MCOUNT              ; Are we on the last index?
.1a62e2	d0 c9		bne $1a62ad	                BNE index_loop          ; No: move to the next index and try again
.1a62e4					add_last
.1a62e4	e2 20		sep #$20	            SEP #$20
.1a62e6	18		clc		                CLC
.1a62e7	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; INDEX := INDEX + I_(n-1)
.1a62eb	85 90		sta $0890	                STA MCOUNT+1
.1a62ed	65 08		adc $0808	                ADC INDEX
.1a62ef	85 08		sta $0808	                STA INDEX
.1a62f1	a5 09		lda $0809	                LDA INDEX+1
.1a62f3	69 00		adc #$00	                ADC #0
.1a62f5	85 09		sta $0809	                STA INDEX+1
.1a62f7	c2 20		rep #$20	            REP #$20
.1a62f9	a5 0a		lda $080a	                LDA INDEX+2
.1a62fb	69 00 00	adc #$0000	                ADC #0
.1a62fe	85 0a		sta $080a	                STA INDEX+2
.1a6300	c2 20		rep #$20	            REP #$20
.1a6302	06 08		asl $0808	                ASL INDEX               ; INDEX := INDEX * 4 (size of a value)
.1a6304	26 0a		rol $080a	                ROL INDEX+2
.1a6306	06 08		asl $0808	                ASL INDEX
.1a6308	26 0a		rol $080a	                ROL INDEX+2
.1a630a	e2 20		sep #$20	            SEP #$20
.1a630c	38		sec		                SEC
.1a630d	a5 08		lda $0808	                LDA INDEX
.1a630f	65 8f		adc $088f	                ADC MCOUNT
.1a6311	85 08		sta $0808	                STA INDEX
.1a6313	a5 09		lda $0809	                LDA INDEX+1
.1a6315	69 00		adc #$00	                ADC #0
.1a6317	85 09		sta $0809	                STA INDEX+1
.1a6319	c2 20		rep #$20	            REP #$20
.1a631b	a5 0a		lda $080a	                LDA INDEX+2
.1a631d	69 00 00	adc #$0000	                ADC #0
.1a6320	85 0a		sta $080a	                STA INDEX+2
.1a6322	18		clc		                CLC                     ; INDEX := INDEX + CURRBLOCK (point to the address desired)
.1a6323	a5 08		lda $0808	                LDA INDEX
.1a6325	65 c0		adc $08c0	                ADC CURRBLOCK
.1a6327	85 08		sta $0808	                STA INDEX
.1a6329	e2 20		sep #$20	            SEP #$20
.1a632b	a5 0a		lda $080a	                LDA INDEX+2
.1a632d	65 c2		adc $08c2	                ADC CURRBLOCK+2
.1a632f	85 0a		sta $080a	                STA INDEX+2
.1a6331	28		plp		                PLP
.1a6332	60		rts		            RTS
.1a6333					range_err
.1a6333	08		php		            PHP
.1a6334	c2 20		rep #$20	            REP #$20
.1a6336	48		pha		            PHA
.1a6337	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a633a	5b		tcd		            TCD
.1a633b	68		pla		            PLA
.1a633c	28		plp		            PLP
.1a633d	e2 20		sep #$20	            SEP #$20
.1a633f	a9 09		lda #$09	            LDA #ERR_RANGE
.1a6341	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6345	c2 20		rep #$20	            REP #$20
.1a6347	29 ff 00	and #$00ff	            AND #$00FF
.1a634a	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a634d	e2 20		sep #$20	            SEP #$20
.1a634f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6352					ARR_SET
.1a6352	08		php		                PHP
.1a6353	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a6356	e2 20		sep #$20	            SEP #$20
.1a6358	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.1a635b	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a635d	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.1a635f	c5 27		cmp $0827	                CMP ARGTYPE1        ; is it the same as the argument?
.1a6361	d0 28		bne $1a638b	                BNE type_mismatch   ; No: throw a type mismatch error
.1a6363	a5 27		lda $0827	                LDA ARGTYPE1        ; Save the type
.1a6365	48		pha		                PHA
.1a6366	c2 20		rep #$20	            REP #$20
.1a6368	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Save ARGUMENT1
.1a636a	48		pha		                PHA
.1a636b	a5 23		lda $0823	                LDA ARGUMENT1
.1a636d	48		pha		                PHA
.1a636e	20 6b 62	jsr $1a626b	            JSR ARR_CELL
.1a6371	68		pla		                PLA                 ; Restore ARGUMENT1
.1a6372	85 23		sta $0823	                STA ARGUMENT1
.1a6374	68		pla		                PLA
.1a6375	85 25		sta $0825	                STA ARGUMENT1+2
.1a6377	e2 20		sep #$20	            SEP #$20
.1a6379	68		pla		                PLA
.1a637a	85 27		sta $0827	                STA ARGTYPE1
.1a637c	c2 20		rep #$20	            REP #$20
.1a637e	a5 23		lda $0823	                LDA ARGUMENT1       ; Set the value in the cell
.1a6380	87 08		sta [$0808]	                STA [INDEX]
.1a6382	a0 02 00	ldy #$0002	                LDY #2
.1a6385	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6387	97 08		sta [$0808],y	                STA [INDEX],Y
.1a6389	28		plp		                PLP
.1a638a	60		rts		            RTS
.1a638b					type_mismatch
.1a638b	08		php		            PHP
.1a638c	c2 20		rep #$20	            REP #$20
.1a638e	48		pha		            PHA
.1a638f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6392	5b		tcd		            TCD
.1a6393	68		pla		            PLA
.1a6394	28		plp		            PLP
.1a6395	e2 20		sep #$20	            SEP #$20
.1a6397	a9 04		lda #$04	            LDA #ERR_TYPE
.1a6399	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a639d	c2 20		rep #$20	            REP #$20
.1a639f	29 ff 00	and #$00ff	            AND #$00FF
.1a63a2	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a63a5	e2 20		sep #$20	            SEP #$20
.1a63a7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a63aa					ARR_REF
.1a63aa	08		php		                PHP
.1a63ab	20 9c 11	jsr $1a119c	            JSR HEAP_GETHED
.1a63ae	f4 00 00	pea #$0000	                PEA #0              ; Make room on the stack that ARR_CELL expects
.1a63b1	f4 00 00	pea #$0000	                PEA #0
.1a63b4	e2 20		sep #$20	            SEP #$20
.1a63b6	48		pha		                PHA
.1a63b7	20 6b 62	jsr $1a626b	            JSR ARR_CELL
.1a63ba	e2 20		sep #$20	            SEP #$20
.1a63bc	68		pla		                PLA
.1a63bd	c2 20		rep #$20	            REP #$20
.1a63bf	68		pla		                PLA
.1a63c0	68		pla		                PLA
.1a63c1	c2 20		rep #$20	            REP #$20
.1a63c3	a7 08		lda [$0808]	                LDA [INDEX]         ; Get the value in the cell
.1a63c5	85 23		sta $0823	                STA ARGUMENT1
.1a63c7	a0 02 00	ldy #$0002	                LDY #2
.1a63ca	b7 08		lda [$0808],y	                LDA [INDEX],Y
.1a63cc	85 25		sta $0825	                STA ARGUMENT1+2
.1a63ce	e2 20		sep #$20	            SEP #$20
.1a63d0	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.1a63d3	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.1a63d5	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.1a63d7	85 27		sta $0827	                STA ARGTYPE1        ; Set the type of the return value
.1a63d9	28		plp		                PLP
.1a63da	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\dos.s

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					FILESIZE            .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
>1af073					CLUSTER_BUFF    .fill 512           ; A buffer for cluster read/write operations
.1af273					FD_IN
>1af273					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>1af274					DEV                 .byte ?             ; The ID of the device holding the file
>1af275					PATH                .dword ?            ; Pointer to a NULL terminated path string
>1af279					CLUSTER             .dword ?            ; The current cluster of the file.
>1af27d					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>1af281					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>1af285					FILESIZE            .dword ?            ; The size of the file
>1af289					CREATE_DATE         .word ?             ; The creation date of the file
>1af28b					CREATE_TIME         .word ?             ; The creation time of the file
>1af28d					MODIFIED_DATE       .word ?             ; The modification date of the file
>1af28f					MODIFIED_TIME       .word ?             ; The modification time of the file
.1a63db					PR_FILESIZE
.1a63db	da		phx		                PHX
.1a63dc	0b		phd		                PHD
.1a63dd	08		php		                PHP
.1a63de	08		php		            PHP
.1a63df	c2 20		rep #$20	            REP #$20
.1a63e1	48		pha		            PHA
.1a63e2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a63e5	5b		tcd		            TCD
.1a63e6	68		pla		            PLA
.1a63e7	28		plp		            PLP
.1a63e8	c2 30		rep #$30	            REP #$30
.1a63ea	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a63ec	89 f0 ff	bit #$fff0	                BIT #$FFF0              ; Check to see if the amount is in MB range
.1a63ef	d0 29		bne $1a641a	                BNE pr_mb               ; If so, print it in MBs
.1a63f1	89 0f 00	bit #$000f	                BIT #$000F              ; Check to see if the amount is in KB range
.1a63f4	d0 0c		bne $1a6402	                BNE pr_kb
.1a63f6	a5 23		lda $0823	                LDA ARGUMENT1
.1a63f8	89 00 fc	bit #$fc00	                BIT #$FC00
.1a63fb	d0 05		bne $1a6402	                BNE pr_kb               ; If so, print it in KBs
.1a63fd					pr_regular
.1a63fd	20 88 43	jsr $1a4388	            JSR PR_INTEGER
.1a6400	80 2e		bra $1a6430	                BRA done
.1a6402	a2 0a 00	ldx #$000a	pr_kb           LDX #10                 ; Shift so the amount in KB is in ARGUMENT1
.1a6405	46 25		lsr $0825	kb_shift        LSR ARGUMENT1+2
.1a6407	66 23		ror $0823	                ROR ARGUMENT1
.1a6409	ca		dex		                DEX
.1a640a	d0 f9		bne $1a6405	                BNE kb_shift
.1a640c	20 88 43	jsr $1a4388	            JSR PR_INTEGER
.1a640f	e2 20		sep #$20	            SEP #$20
.1a6411	a9 4b		lda #$4b	                LDA #'K'
.1a6413	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6416	c2 20		rep #$20	            REP #$20
.1a6418	80 16		bra $1a6430	                BRA done
.1a641a	a2 14 00	ldx #$0014	pr_mb           LDX #20                 ; Shift so the amount in MB is in ARGUMENT1
.1a641d	46 25		lsr $0825	mb_shift        LSR ARGUMENT1+2
.1a641f	66 23		ror $0823	                ROR ARGUMENT1
.1a6421	ca		dex		                DEX
.1a6422	d0 f9		bne $1a641d	                BNE mb_shift
.1a6424	20 88 43	jsr $1a4388	            JSR PR_INTEGER
.1a6427	e2 20		sep #$20	            SEP #$20
.1a6429	a9 4d		lda #$4d	                LDA #'M'
.1a642b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a642e	c2 20		rep #$20	            REP #$20
.1a6430	28		plp		done            PLP
.1a6431	2b		pld		                PLD
.1a6432	fa		plx		                PLX
.1a6433	60		rts		            RTS
.1a6434					CMD_DIR
.1a6434	0b		phd		                PHD
.1a6435	08		php		                PHP
.1a6436	c2 30		rep #$30	            REP #$30
.1a6438	a9 00 00	lda #$0000	                LDA #0                      ; Zero out the pagination line count
.1a643b	8f b6 08 00	sta $0008b6	                STA @l LINECOUNT
.1a643f	8f b8 08 00	sta $0008b8	                STA @l LINECOUNT+2
.1a6443	e2 20		sep #$20	            SEP #$20
.1a6445	20 9f 20	jsr $1a209f	            JSR PEEK_TOK
.1a6448	c9 00		cmp #$00	                CMP #0
.1a644a	f0 08		beq $1a6454	                BEQ set_null                ; If none provided, set the path to empty
.1a644c	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a644f	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a6452	80 11		bra $1a6465	                BRA set_fd
.1a6454					set_null
.1a6454	c2 20		rep #$20	            REP #$20
.1a6456	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT1 to the NULL string
.1a6459	85 23		sta $0823	                STA ARGUMENT1
.1a645b	85 25		sta $0825	                STA ARGUMENT1+2
.1a645d	e2 20		sep #$20	            SEP #$20
.1a645f	a9 02		lda #$02	                LDA #TYPE_STRING
.1a6461	85 27		sta $0827	                STA ARGTYPE1
.1a6463	c2 20		rep #$20	            REP #$20
.1a6465					set_fd
.1a6465	20 95 65	jsr $1a6595	            JSR SETFILEDESC
.1a6468	22 08 11 00	jsl $001108	                JSL FK_DIROPEN              ; Open up the directory
.1a646c	b0 22		bcs $1a6490	                BCS pr_first
.1a646e	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6471	08		php		            PHP
.1a6472	c2 20		rep #$20	            REP #$20
.1a6474	48		pha		            PHA
.1a6475	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6478	5b		tcd		            TCD
.1a6479	68		pla		            PLA
.1a647a	28		plp		            PLP
.1a647b	e2 20		sep #$20	            SEP #$20
.1a647d	a9 10		lda #$10	            LDA #ERR_DIRECTORY
.1a647f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6483	c2 20		rep #$20	            REP #$20
.1a6485	29 ff 00	and #$00ff	            AND #$00FF
.1a6488	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a648b	e2 20		sep #$20	            SEP #$20
.1a648d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6490					pr_first
.1a6490	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a6493					pr_entry
.1a6493	08		php		            PHP
.1a6494	c2 20		rep #$20	            REP #$20
.1a6496	48		pha		            PHA
.1a6497	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a649a	5b		tcd		            TCD
.1a649b	68		pla		            PLA
.1a649c	28		plp		            PLP
.1a649d	e2 20		sep #$20	            SEP #$20
.1a649f	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Start with the file name
.1a64a2	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the initial character of the name
.1a64a4	d0 03		bne $1a64a9	                BNE chk_unused
.1a64a6	82 a9 00	brl $1a6552	                BRL done                    ; If it's NULL, we're done
.1a64a9	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED     ; Is it the unusued code?
.1a64ab	d0 03		bne $1a64b0	                BNE chk_attributes
.1a64ad	82 96 00	brl $1a6546	                BRL next_entry              ; Yes: go to the next entry
.1a64b0	a0 0b 00	ldy #$000b	chk_attributes  LDY #DIRENTRY.ATTRIBUTE
.1a64b3	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute byte
.1a64b5	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.1a64b7	f0 03		beq $1a64bc	                BEQ chk_hidden
.1a64b9	82 a9 00	brl $1a6565	                BRL pr_volume               ; Print the volume label
.1a64bc	89 02		bit #$02	chk_hidden      BIT #DOS_ATTR_HIDDEN        ; Is it a hidden file?
.1a64be	f0 03		beq $1a64c3	                BEQ chk_long
.1a64c0	82 83 00	brl $1a6546	                BRL next_entry              ; Yes: go to the next entry
.1a64c3	29 0f		and #$0f	chk_long        AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.1a64c5	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.1a64c7	d0 03		bne $1a64cc	                BNE get_short_name
.1a64c9	82 7a 00	brl $1a6546	                BRL next_entry              ; Yes: go to the next entry
.1a64cc	a0 00 00	ldy #$0000	get_short_name  LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.1a64cf	b7 18		lda [$0338],y	pr_name_loop    LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a64d1	20 18 00	jsr $1a0018	            JSR PRINTC
.1a64d4	c8		iny		                INY                         ; Move to the next character
.1a64d5	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.1a64d8	d0 f5		bne $1a64cf	                BNE pr_name_loop            ; No: print this new character
.1a64da	a9 20		lda #$20	                LDA #' '                    ; Print the separator
.1a64dc	20 18 00	jsr $1a0018	            JSR PRINTC
.1a64df	a0 08 00	ldy #$0008	                LDY #DIRENTRY.SHORTNAME+8   ; Move to the first of the extension characters
.1a64e2	b7 18		lda [$0338],y	pr_ext_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a64e4	20 18 00	jsr $1a0018	                JSR PRINTC                  ; Otherwise: print it.
.1a64e7	c8		iny		                INY                         ; Move to the next character
.1a64e8	c0 0b 00	cpy #$000b	                CPY #DIRENTRY.SHORTNAME+11  ; Are we at the end of the extension portion?
.1a64eb	d0 f5		bne $1a64e2	                BNE pr_ext_loop             ; No: print this new character
.1a64ed	a9 09		lda #$09	pr_tab1         LDA #CHAR_TAB               ; Print a TAB
.1a64ef	20 18 00	jsr $1a0018	            JSR PRINTC
.1a64f2	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.1a64f5	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.1a64f7	89 10		bit #$10	                BIT #DOS_ATTR_DIR           ; Is it a directory?
.1a64f9	d0 1e		bne $1a6519	                BNE pr_attr                 ; Yes: skip printing a file size
.1a64fb	c2 20		rep #$20	            REP #$20
.1a64fd	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.1a6500	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the file size
.1a6502	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.1a6506	c8		iny		                INY
.1a6507	c8		iny		                INY
.1a6508	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1a650a	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.1a650e	e2 20		sep #$20	            SEP #$20
.1a6510	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6512	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.1a6516	20 db 63	jsr $1a63db	            JSR PR_FILESIZE
.1a6519	a9 09		lda #$09	pr_attr         LDA #CHAR_TAB               ; Print a TAB
.1a651b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a651e	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.1a6521	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.1a6523	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.1a6525	d0 1c		bne $1a6543	                BNE end_entry               ; Yes: we're done printing this entry
.1a6527	89 01		bit #$01	chk_read        BIT #DOS_ATTR_RO            ; Is it a read-only file?
.1a6529	f0 05		beq $1a6530	                BEQ chk_system
.1a652b	a9 52		lda #$52	                LDA #'R'                    ; Yes: print an R
.1a652d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6530	89 04		bit #$04	chk_system      BIT #DOS_ATTR_SYSTEM        ; Is it System file?
.1a6532	f0 05		beq $1a6539	                BEQ chk_directory
.1a6534	a9 53		lda #$53	                LDA #'S'                    ; Yes: print an S
.1a6536	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6539	89 10		bit #$10	chk_directory   BIT #DOS_ATTR_DIR           ; Is it a directory?
.1a653b	f0 05		beq $1a6542	                BEQ pr_tab2
.1a653d	a9 44		lda #$44	                LDA #'D'                    ; Yes: print a D
.1a653f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6542	ea		nop		pr_tab2         NOP
.1a6543					end_entry
.1a6543	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a6546					next_entry
.1a6546	20 a0 02	jsr $1a02a0	            JSR PAGINATE
.1a6549	22 0c 11 00	jsl $00110c	                JSL FK_DIRNEXT
.1a654d	90 03		bcc $1a6552	                BCC done
.1a654f	82 41 ff	brl $1a6493	                BRL pr_entry
.1a6552					done
.1a6552	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6555	08		php		            PHP
.1a6556	c2 20		rep #$20	            REP #$20
.1a6558	48		pha		            PHA
.1a6559	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a655c	5b		tcd		            TCD
.1a655d	68		pla		            PLA
.1a655e	28		plp		            PLP
.1a655f	20 83 1f	jsr $1a1f83	            JSR SKIPSTMT
.1a6562	28		plp		                PLP
.1a6563	2b		pld		                PLD
.1a6564	60		rts		            RTS
.1a6565					pr_volume
.1a6565	08		php		            PHP
.1a6566	c2 20		rep #$20	            REP #$20
.1a6568	48		pha		            PHA
.1a6569	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a656c	5b		tcd		            TCD
.1a656d	68		pla		            PLA
.1a656e	28		plp		            PLP
.1a656f	e2 20		sep #$20	            SEP #$20
.1a6571	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.1a6573	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.1a6575	f0 cf		beq $1a6546	                BEQ next_entry              ; Yes: skip it
.1a6577	a9 5b		lda #$5b	pr_lbracket     LDA #'['
.1a6579	20 18 00	jsr $1a0018	            JSR PRINTC
.1a657c	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.1a657f	b7 18		lda [$0338],y	pr_vol_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.1a6581	c9 20		cmp #$20	                CMP #CHAR_SP                ; Is it a blank?
.1a6583	f0 09		beq $1a658e	                BEQ pr_rbracket             ; Yes: end the name and print the dot
.1a6585	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6588	c8		iny		                INY                         ; Move to the next character
.1a6589	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.1a658c	d0 f1		bne $1a657f	                BNE pr_vol_loop             ; No: print this new character
.1a658e	a9 5d		lda #$5d	pr_rbracket     LDA #']'                    ; Print a close bracket
.1a6590	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6593	80 ae		bra $1a6543	                BRA end_entry               ; And try to get the next entry
.1a6595					SETFILEDESC
.1a6595	0b		phd		                PHD
.1a6596	08		php		                PHP
.1a6597	08		php		            PHP
.1a6598	c2 20		rep #$20	            REP #$20
.1a659a	48		pha		            PHA
.1a659b	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.1a659e	5b		tcd		            TCD
.1a659f	68		pla		            PLA
.1a65a0	28		plp		            PLP
.1a65a1	c2 30		rep #$30	            REP #$30
.1a65a3	a9 73 f2	lda #$f273	                LDA #<>FD_IN            ; Point to the file descriptor
.1a65a6	85 20		sta $0340	                STA DOS_FD_PTR
.1a65a8	a9 1a 00	lda #$001a	                LDA #`FD_IN
.1a65ab	85 22		sta $0342	                STA DOS_FD_PTR+2
.1a65ad	a0 00 00	ldy #$0000	                LDY #0                  ; Fille the file descriptor with 0
.1a65b0	e2 20		sep #$20	            SEP #$20
.1a65b2	a9 00		lda #$00	                LDA #0
.1a65b4	97 20		sta [$0340],y	zero_loop       STA [DOS_FD_PTR],Y
.1a65b6	c8		iny		                INY
.1a65b7	c0 1e 00	cpy #$001e	                CPY #SIZE(FILEDESC)
.1a65ba	d0 f8		bne $1a65b4	                BNE zero_loop
.1a65bc	c2 20		rep #$20	            REP #$20
.1a65be	a9 73 f0	lda #$f073	                LDA #<>CLUSTER_BUFF     ; Point to the cluster buffer
.1a65c1	8f 81 f2 1a	sta $1af281	                STA @l FD_IN.BUFFER
.1a65c5	a9 1a 00	lda #$001a	                LDA #`CLUSTER_BUFF
.1a65c8	8f 83 f2 1a	sta $1af283	                STA @l FD_IN.BUFFER+2
.1a65cc	af 23 08 00	lda $000823	                LDA @l ARGUMENT1        ; Point the file desriptor to the path
.1a65d0	8f 75 f2 1a	sta $1af275	                STA @l FD_IN.PATH
.1a65d4	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.1a65d8	8f 77 f2 1a	sta $1af277	                STA @l FD_IN.PATH+2
.1a65dc	28		plp		                PLP
.1a65dd	2b		pld		                PLD
.1a65de	60		rts		            RTS
.1a65df					S_BLOAD
.1a65df	08		php		                PHP
.1a65e0	c2 30		rep #$30	            REP #$30
.1a65e2	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a65e5	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a65e8	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a65eb	20 95 65	jsr $1a6595	            JSR SETFILEDESC
.1a65ee	e2 20		sep #$20	            SEP #$20
.1a65f0	a9 2c		lda #$2c	                LDA #','
.1a65f2	85 37		sta $0837	                STA TARGETTOK
.1a65f4	20 80 20	jsr $1a2080	            JSR OPT_TOK
.1a65f7	b0 0f		bcs $1a6608	                BCS get_dest
.1a65f9	c2 20		rep #$20	            REP #$20
.1a65fb	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set destination address to something "safe"
.1a65fe	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6602	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a6606	80 17		bra $1a661f	                BRA do_load
.1a6608					get_dest
.1a6608	20 3e 1f	jsr $1a1f3e	            JSR INCBIP
.1a660b	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a660e	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a6611	c2 20		rep #$20	            REP #$20
.1a6613	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the destination address
.1a6615	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6619	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a661b	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a661f	22 18 11 00	jsl $001118	do_load         JSL FK_LOAD                 ; Attempt to load the file
.1a6623	b0 1f		bcs $1a6644	                BCS done
.1a6625	08		php		            PHP
.1a6626	c2 20		rep #$20	            REP #$20
.1a6628	48		pha		            PHA
.1a6629	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a662c	5b		tcd		            TCD
.1a662d	68		pla		            PLA
.1a662e	28		plp		            PLP
.1a662f	e2 20		sep #$20	            SEP #$20
.1a6631	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6633	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6637	c2 20		rep #$20	            REP #$20
.1a6639	29 ff 00	and #$00ff	            AND #$00FF
.1a663c	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a663f	e2 20		sep #$20	            SEP #$20
.1a6641	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6644	28		plp		done            PLP
.1a6645	60		rts		            RTS
.1a6646					SET_DOSSTAT
.1a6646	8b		phb		                PHB
.1a6647	0b		phd		                PHD
.1a6648	08		php		                PHP
.1a6649	08		php		            PHP
.1a664a	c2 20		rep #$20	            REP #$20
.1a664c	48		pha		            PHA
.1a664d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6650	5b		tcd		            TCD
.1a6651	68		pla		            PLA
.1a6652	28		plp		            PLP
.1a6653	08		php		            PHP
.1a6654	e2 20		sep #$20	            SEP #$20
.1a6656	48		pha		            PHA
.1a6657	a9 00		lda #$00	            LDA #BASIC_BANK
.1a6659	48		pha		            PHA
.1a665a	ab		plb		            PLB
.1a665b	68		pla		            PLA
.1a665c	28		plp		            PLP
.1a665d	e2 20		sep #$20	            SEP #$20
.1a665f	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS           ; Get the DOS status code
.1a6663	85 23		sta $0823	                STA ARGUMENT1
.1a6665	a9 00		lda #$00	                LDA #0
.1a6667	85 24		sta $0824	                STA ARGUMENT1+1
.1a6669	85 25		sta $0825	                STA ARGUMENT1+2
.1a666b	85 26		sta $0826	                STA ARGUMENT1+3
.1a666d	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a666f	85 27		sta $0827	                STA ARGTYPE1
.1a6671	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (DOSSTAT)
.1a6673	a9 1a		lda #$1a	                LDA #`dosstat_name
.1a6675	85 e9		sta $08e9	                STA TOFIND+2
.1a6677	c2 20		rep #$20	            REP #$20
.1a6679	a9 a9 66	lda #$66a9	                LDA #<>dosstat_name
.1a667c	85 e7		sta $08e7	                STA TOFIND
.1a667e	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a6681	e2 20		sep #$20	            SEP #$20
.1a6683	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS          ; Get the BIOS status code
.1a6687	85 23		sta $0823	                STA ARGUMENT1
.1a6689	a9 00		lda #$00	                LDA #0
.1a668b	85 24		sta $0824	                STA ARGUMENT1+1
.1a668d	85 25		sta $0825	                STA ARGUMENT1+2
.1a668f	85 26		sta $0826	                STA ARGUMENT1+3
.1a6691	a9 00		lda #$00	                LDA #TYPE_INTEGER
.1a6693	85 27		sta $0827	                STA ARGTYPE1
.1a6695	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BIOSSTAT)
.1a6697	a9 1a		lda #$1a	                LDA #`biosstat_name
.1a6699	85 e9		sta $08e9	                STA TOFIND+2
.1a669b	c2 20		rep #$20	            REP #$20
.1a669d	a9 b1 66	lda #$66b1	                LDA #<>biosstat_name
.1a66a0	85 e7		sta $08e7	                STA TOFIND
.1a66a2	20 b4 50	jsr $1a50b4	            JSR VAR_SET
.1a66a5	28		plp		                PLP
.1a66a6	2b		pld		                PLD
.1a66a7	ab		plb		                PLB
.1a66a8	60		rts		            RTS
>1a66a9	44 4f 53 53 54 41 54 00		dosstat_name    .null "DOSSTAT"
>1a66b1	42 49 4f 53 53 54 41 54		biosstat_name   .null "BIOSSTAT"
>1a66b9	00
.1a66ba					CMD_BRUN
.1a66ba	08		php		                PHP
.1a66bb	c2 30		rep #$30	            REP #$30
.1a66bd	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a66c0	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a66c3	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a66c6	a5 23		lda $0823	                LDA ARGUMENT1
.1a66c8	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.1a66cc	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a66ce	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.1a66d2	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a66d5	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a66d9	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a66dd	22 24 11 00	jsl $001124	                JSL FK_RUN                  ; Attempt to run the file
.1a66e1	b0 25		bcs $1a6708	                BCS done                    ; If we got it: try to execute it
.1a66e3	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a66e6	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a66e9	08		php		            PHP
.1a66ea	c2 20		rep #$20	            REP #$20
.1a66ec	48		pha		            PHA
.1a66ed	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a66f0	5b		tcd		            TCD
.1a66f1	68		pla		            PLA
.1a66f2	28		plp		            PLP
.1a66f3	e2 20		sep #$20	            SEP #$20
.1a66f5	a9 11		lda #$11	            LDA #ERR_LOAD
.1a66f7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a66fb	c2 20		rep #$20	            REP #$20
.1a66fd	29 ff 00	and #$00ff	            AND #$00FF
.1a6700	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6703	e2 20		sep #$20	            SEP #$20
.1a6705	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6708					done
.1a6708	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a670b	28		plp		                PLP
.1a670c	60		rts		            RTS
.1a670d					CMD_LOAD
.1a670d	08		php		                PHP
.1a670e	c2 30		rep #$30	            REP #$30
.1a6710	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a6713	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a6716	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a6719	20 95 65	jsr $1a6595	            JSR SETFILEDESC
.1a671c	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a671f	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a6723	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6726	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2        ; Set the destination address
.1a672a	20 85 4d	jsr $1a4d85	            JSR CMD_NEW
.1a672d	22 18 11 00	jsl $001118	                JSL FK_LOAD                 ; Attempt to load the file
.1a6731	b0 22		bcs $1a6755	                BCS start_tokenize          ; If we got it: start tokenizing
.1a6733	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6736	08		php		            PHP
.1a6737	c2 20		rep #$20	            REP #$20
.1a6739	48		pha		            PHA
.1a673a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a673d	5b		tcd		            TCD
.1a673e	68		pla		            PLA
.1a673f	28		plp		            PLP
.1a6740	e2 20		sep #$20	            SEP #$20
.1a6742	a9 11		lda #$11	            LDA #ERR_LOAD
.1a6744	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6748	c2 20		rep #$20	            REP #$20
.1a674a	29 ff 00	and #$00ff	            AND #$00FF
.1a674d	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6750	e2 20		sep #$20	            SEP #$20
.1a6752	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6755					start_tokenize
.1a6755	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6758	c2 20		rep #$20	            REP #$20
.1a675a	a2 12 00	ldx #$0012	                LDX #FILEDESC.FILESIZE
.1a675d	18		clc		                CLC                         ; Set MTEMP to point to the byte after the file
.1a675e	bf 73 f2 1a	lda $1af273,x	                LDA FD_IN,X
.1a6762	69 00 00	adc #$0000	                ADC #<>LOADBLOCK
.1a6765	85 92		sta $0892	                STA MTEMP
.1a6767	bf 75 f2 1a	lda $1af275,x	                LDA FD_IN+2,X
.1a676b	69 01 00	adc #$0001	                ADC #`LOADBLOCK
.1a676e	85 94		sta $0894	                STA MTEMP+2
.1a6770	e2 20		sep #$20	            SEP #$20
.1a6772	a9 00		lda #$00	                LDA #0
.1a6774	87 92		sta [$0892]	                STA [MTEMP]                 ; Write a NULL right after the file
.1a6776	c2 20		rep #$20	            REP #$20
.1a6778	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK            ; Set MCURSOR to the begining of the loaded data
.1a677b	85 7a		sta $087a	                STA MCURSOR
.1a677d	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a6780	85 7c		sta $087c	                STA MCURSOR+2
.1a6782	a2 00 00	ldx #$0000	copy_line       LDX #0
.1a6785					copy_char
.1a6785	e2 20		sep #$20	            SEP #$20
.1a6787	a7 7a		lda [$087a]	                LDA [MCURSOR]
.1a6789	f0 2a		beq $1a67b5	                BEQ clean_up                ; If the character is 0, we're done
.1a678b	c9 0d		cmp #$0d	                CMP #CHAR_CR                ; If it is new line...
.1a678d	f0 12		beq $1a67a1	                BEQ do_process              ; ... we want to process the line
.1a678f	c9 0a		cmp #$0a	                CMP #CHAR_LF                ; If it is a line feed...
.1a6791	f0 04		beq $1a6797	                BEQ next_char               ; ... we want to skip it
.1a6793	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X              ; Otherwise, copy the character to the input buffer
.1a6796	e8		inx		                INX
.1a6797					next_char
.1a6797	c2 20		rep #$20	            REP #$20
.1a6799	e6 7a		inc $087a	                INC MCURSOR                 ; Advance the input cursor
.1a679b	d0 e8		bne $1a6785	                BNE copy_char
.1a679d	e6 7c		inc $087c	                INC MCURSOR+2
.1a679f	80 e4		bra $1a6785	                BRA copy_char
.1a67a1					do_process
.1a67a1	e2 20		sep #$20	            SEP #$20
.1a67a3	a9 00		lda #$00	                LDA #0                      ; Put a 0 at the end of the input buffer
.1a67a5	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a67a8	20 ab 25	jsr $1a25ab	            JSR PROCESS
.1a67ab	c2 20		rep #$20	            REP #$20
.1a67ad	e6 7a		inc $087a	                INC MCURSOR                 ; Try again with the next line
.1a67af	d0 d1		bne $1a6782	                BNE copy_line
.1a67b1	e6 7c		inc $087c	                INC MCURSOR+2
.1a67b3	80 cd		bra $1a6782	                BRA copy_line
.1a67b5	e0 00 00	cpx #$0000	clean_up        CPX #0                      ; Is there data in the INPUTBUF?
.1a67b8	f0 0a		beq $1a67c4	                BEQ done                    ; No: just return
.1a67ba	e2 20		sep #$20	            SEP #$20
.1a67bc	a9 00		lda #$00	                LDA #0                      ; Make sure there is a trailing NULL
.1a67be	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.1a67c1	20 ab 25	jsr $1a25ab	            JSR PROCESS
.1a67c4	28		plp		done            PLP
.1a67c5	60		rts		            RTS
.1a67c6					S_BSAVE
.1a67c6	08		php		                PHP
.1a67c7	c2 30		rep #$30	            REP #$30
.1a67c9	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a67cc	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a67cf	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a67d2	20 95 65	jsr $1a6595	            JSR SETFILEDESC
.1a67d5	e2 20		sep #$20	            SEP #$20
.1a67d7	a9 2c		lda #$2c	                LDA #','
.1a67d9	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a67dc	c2 20		rep #$20	            REP #$20
.1a67de	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a67e1	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a67e4	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_SRC_PTR
.1a67e6	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a67ea	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a67ec	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a67f0	e2 20		sep #$20	            SEP #$20
.1a67f2	a9 2c		lda #$2c	                LDA #','
.1a67f4	c2 20		rep #$20	            REP #$20
.1a67f6	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a67f9	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a67fc	20 03 05	jsr $1a0503	            JSR ASS_ARG1_INT
.1a67ff	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_END_PTR
.1a6801	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a6805	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6807	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a680b	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                 ; Attempt to save the memory to file.
.1a680f	b0 22		bcs $1a6833	                BCS done
.1a6811	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6814	08		php		            PHP
.1a6815	c2 20		rep #$20	            REP #$20
.1a6817	48		pha		            PHA
.1a6818	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a681b	5b		tcd		            TCD
.1a681c	68		pla		            PLA
.1a681d	28		plp		            PLP
.1a681e	e2 20		sep #$20	            SEP #$20
.1a6820	a9 12		lda #$12	            LDA #ERR_SAVE
.1a6822	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6826	c2 20		rep #$20	            REP #$20
.1a6828	29 ff 00	and #$00ff	            AND #$00FF
.1a682b	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a682e	e2 20		sep #$20	            SEP #$20
.1a6830	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6833					done
.1a6833	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6836	28		plp		                PLP
.1a6837	60		rts		            RTS
.1a6838					COPY2PATHBUF
.1a6838	da		phx		                PHX
.1a6839	5a		phy		                PHY
.1a683a	08		php		                PHP
.1a683b	a2 00 00	ldx #$0000	                LDX #0
.1a683e	a0 00 00	ldy #$0000	                LDY #0
.1a6841	e2 20		sep #$20	            SEP #$20
.1a6843	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y           ; Copy the path to the DOS_PATH_BUFF
.1a6845	9d 00 04	sta $0400,x	                STA DOS_PATH_BUFF,X
.1a6848	f0 04		beq $1a684e	                BEQ done
.1a684a	e8		inx		                INX
.1a684b	c8		iny		                INY
.1a684c	80 f5		bra $1a6843	                BRA loop
.1a684e	28		plp		done            PLP
.1a684f	7a		ply		                PLY
.1a6850	fa		plx		                PLX
.1a6851	60		rts		            RTS
.1a6852					CMD_SAVE
.1a6852	08		php		                PHP
.1a6853	c2 30		rep #$30	            REP #$30
.1a6855	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a6858	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a685b	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a685e	20 95 65	jsr $1a6595	            JSR SETFILEDESC
.1a6861	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a6864	85 a6		sta $08a6	                STA OBUFFER
.1a6866	e2 20		sep #$20	            SEP #$20
.1a6868	a9 01		lda #$01	                LDA #`LOADBLOCK
.1a686a	85 a8		sta $08a8	                STA OBUFFER+2
.1a686c	a9 20		lda #$20	                LDA #DEV_BUFFER             ; Set up output for the buffer
.1a686e	85 b4		sta $08b4	                STA BCONSOLE
.1a6870	c2 20		rep #$20	            REP #$20
.1a6872	a9 00 00	lda #$0000	                LDA #0
.1a6875	85 ab		sta $08ab	                STA OBUFFIDX
.1a6877	a9 ff ff	lda #$ffff	                LDA #$FFFF
.1a687a	85 a9		sta $08a9	                STA OBUFFSIZE
.1a687c	c2 20		rep #$20	            REP #$20
.1a687e	a9 00 00	lda #$0000	                LDA #0                      ; Set start line number to 0
.1a6881	85 55		sta $0855	                STA MARG1
.1a6883	85 57		sta $0857	                STA MARG1+2
.1a6885	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set end line number to MAXINT
.1a6888	85 59		sta $0859	                STA MARG2
.1a688a	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.1a688d	85 5b		sta $085b	                STA MARG2+2
.1a688f	20 f0 16	jsr $1a16f0	            JSR LISTPROG
.1a6892	e2 20		sep #$20	            SEP #$20
.1a6894	a9 80		lda #$80	                LDA #DEV_SCREEN             ; Restore output to the screen
.1a6896	85 b4		sta $08b4	                STA BCONSOLE
.1a6898	c2 20		rep #$20	            REP #$20
.1a689a	c6 ab		dec $08ab	                DEC OBUFFIDX                ; OBUFFIDX points to the next free byte... so pull it in one
.1a689c	18		clc		                CLC                         ; Set the range of memory to save
.1a689d	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.1a68a0	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a68a4	65 ab		adc $08ab	                ADC OBUFFIDX
.1a68a6	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a68aa	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.1a68ad	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a68b1	69 00 00	adc #$0000	                ADC #0
.1a68b4	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a68b8	22 1c 11 00	jsl $00111c	do_save         JSL FK_SAVE                 ; Attempt to save the file
.1a68bc	b0 22		bcs $1a68e0	                BCS done
.1a68be	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a68c1	08		php		            PHP
.1a68c2	c2 20		rep #$20	            REP #$20
.1a68c4	48		pha		            PHA
.1a68c5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a68c8	5b		tcd		            TCD
.1a68c9	68		pla		            PLA
.1a68ca	28		plp		            PLP
.1a68cb	e2 20		sep #$20	            SEP #$20
.1a68cd	a9 12		lda #$12	            LDA #ERR_SAVE
.1a68cf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a68d3	c2 20		rep #$20	            REP #$20
.1a68d5	29 ff 00	and #$00ff	            AND #$00FF
.1a68d8	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a68db	e2 20		sep #$20	            SEP #$20
.1a68dd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a68e0					done
.1a68e0	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a68e3	28		plp		                PLP
.1a68e4	60		rts		            RTS
.1a68e5					S_DEL
.1a68e5	08		php		                PHP
.1a68e6	c2 30		rep #$30	            REP #$30
.1a68e8	20 5f 1f	jsr $1a1f5f	            JSR SKIPWS
.1a68eb	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a68ee	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a68f1	20 38 68	jsr $1a6838	            JSR COPY2PATHBUF
.1a68f4	22 04 11 00	jsl $001104	path_loaded     JSL FK_DELETE               ; Try to delete the file
.1a68f8	b0 22		bcs $1a691c	                BCS done
.1a68fa	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a68fd	08		php		            PHP
.1a68fe	c2 20		rep #$20	            REP #$20
.1a6900	48		pha		            PHA
.1a6901	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6904	5b		tcd		            TCD
.1a6905	68		pla		            PLA
.1a6906	28		plp		            PLP
.1a6907	e2 20		sep #$20	            SEP #$20
.1a6909	a9 13		lda #$13	            LDA #ERR_DELETE
.1a690b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a690f	c2 20		rep #$20	            REP #$20
.1a6911	29 ff 00	and #$00ff	            AND #$00FF
.1a6914	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6917	e2 20		sep #$20	            SEP #$20
.1a6919	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a691c					done
.1a691c	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a691f	28		plp		                PLP
.1a6920	60		rts		            RTS
.1a6921					VALIDFILECHAR
.1a6921	da		phx		                PHX
.1a6922	08		php		                PHP
.1a6923	e2 20		sep #$20	            SEP #$20
.1a6925	c9 61		cmp #$61	                CMP #'a'                    ; Is it lower case?
.1a6927	90 08		bcc $1a6931	                BLT chk_space
.1a6929	c9 7b		cmp #$7b	                CMP #'z'+1
.1a692b	b0 04		bcs $1a6931	                BGE chk_space
.1a692d	29 df		and #$df	                AND #%11011111              ; Yes: convert to upper case
.1a692f	80 13		bra $1a6944	                BRA ret_valid
.1a6931	c9 20		cmp #$20	chk_space       CMP #CHAR_SP            ; Is it a control code?
.1a6933	90 13		bcc $1a6948	                BLT is_invalid          ; Yes: it's invalid
.1a6935	a2 00 00	ldx #$0000	                LDX #0                  ; See if it's in the list of invalids
.1a6938	df 4c 69 1a	cmp $1a694c,x	loop            CMP invalid_chars,X
.1a693c	f0 0a		beq $1a6948	                BEQ is_invalid
.1a693e	e8		inx		                INX
.1a693f	e0 0f 00	cpx #$000f	                CPX #15                 ; # of invalid characters
.1a6942	d0 f4		bne $1a6938	                BNE loop
.1a6944	28		plp		ret_valid       PLP
.1a6945	38		sec		                SEC
.1a6946	fa		plx		                PLX
.1a6947	6b		rtl		                RTL
.1a6948	28		plp		is_invalid      PLP
.1a6949	18		clc		                CLC
.1a694a	fa		plx		                PLX
.1a694b	6b		rtl		                RTL
>1a694c	2a 2b 2c 2f 3a 3b 3c 3d		invalid_chars   .text "*+,/:;<=>?\[]|",CHAR_DQUOTE
>1a6954	3e 3f 5c 5b 5d 7c 22
.1a695b					S_RENAME
.1a695b	08		php		                PHP
.1a695c	08		php		            PHP
.1a695d	c2 20		rep #$20	            REP #$20
.1a695f	48		pha		            PHA
.1a6960	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6963	5b		tcd		            TCD
.1a6964	68		pla		            PLA
.1a6965	28		plp		            PLP
.1a6966	c2 30		rep #$30	            REP #$30
.1a6968	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a696b	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a696e	20 38 68	jsr $1a6838	            JSR COPY2PATHBUF
.1a6971	22 10 11 00	jsl $001110	                JSL FK_DIRREAD              ; Try to read the file
.1a6975	b0 22		bcs $1a6999	                BCS get_new_name            ; If ok: get the new name
.1a6977	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a697a	08		php		            PHP
.1a697b	c2 20		rep #$20	            REP #$20
.1a697d	48		pha		            PHA
.1a697e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6981	5b		tcd		            TCD
.1a6982	68		pla		            PLA
.1a6983	28		plp		            PLP
.1a6984	e2 20		sep #$20	            SEP #$20
.1a6986	a9 14		lda #$14	            LDA #ERR_FILENOTFOUND
.1a6988	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a698c	c2 20		rep #$20	            REP #$20
.1a698e	29 ff 00	and #$00ff	            AND #$00FF
.1a6991	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6994	e2 20		sep #$20	            SEP #$20
.1a6996	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6999					get_new_name
.1a6999	e2 20		sep #$20	            SEP #$20
.1a699b	a9 2c		lda #$2c	                LDA #','
.1a699d	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a69a0	c2 20		rep #$20	            REP #$20
.1a69a2	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a69a5	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a69a8	ad 38 03	lda $0338	                LDA DOS_DIR_PTR
.1a69ab	85 08		sta $0808	                STA INDEX
.1a69ad	ad 3a 03	lda $033a	                LDA DOS_DIR_PTR+2
.1a69b0	85 0a		sta $080a	                STA INDEX+2
.1a69b2	e2 20		sep #$20	            SEP #$20
.1a69b4	a2 00 00	ldx #$0000	                LDX #0
.1a69b7	a9 20		lda #$20	                LDA #CHAR_SP                ; We'll use MLINEBUFF as temporary name storage
.1a69b9	95 7e		sta $087e,x	blank_loop      STA MLINEBUF,X              ; Fill it with blanks
.1a69bb	e8		inx		                INX
.1a69bc	e0 0b 00	cpx #$000b	                CPX #11
.1a69bf	d0 f8		bne $1a69b9	                BNE blank_loop
.1a69c1	a2 00 00	ldx #$0000	                LDX #0
.1a69c4	a0 00 00	ldy #$0000	                LDY #0
.1a69c7	b7 23		lda [$0823],y	name_loop       LDA [ARGUMENT1],Y           ; Get the character of the new name
.1a69c9	f0 76		beq $1a6a41	                BEQ copy_short_name         ; If end-of-string: copy what we have
.1a69cb	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.1a69cd	f0 39		beq $1a6a08	                BEQ skip_dot                ; Yes: move on to the extension characters
.1a69cf	22 21 69 1a	jsl $1a6921	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.1a69d3	b0 1f		bcs $1a69f4	                BCS save_nm_char
.1a69d5	08		php		            PHP
.1a69d6	c2 20		rep #$20	            REP #$20
.1a69d8	48		pha		            PHA
.1a69d9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a69dc	5b		tcd		            TCD
.1a69dd	68		pla		            PLA
.1a69de	28		plp		            PLP
.1a69df	e2 20		sep #$20	            SEP #$20
.1a69e1	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a69e3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a69e7	c2 20		rep #$20	            REP #$20
.1a69e9	29 ff 00	and #$00ff	            AND #$00FF
.1a69ec	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a69ef	e2 20		sep #$20	            SEP #$20
.1a69f1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a69f4	95 7e		sta $087e,x	save_nm_char    STA MLINEBUF,X              ; Otherwise: copy it
.1a69f6	c8		iny		                INY
.1a69f7	e8		inx		                INX
.1a69f8	c0 08 00	cpy #$0008	                CPY #8
.1a69fb	d0 ca		bne $1a69c7	                BNE name_loop
.1a69fd	b7 23		lda [$0823],y	eat_name        LDA [ARGUMENT1],Y           ; Get the character
.1a69ff	f0 40		beq $1a6a41	                BEQ copy_short_name         ; If null, we're done with the short name
.1a6a01	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.1a6a03	f0 03		beq $1a6a08	                BEQ skip_dot                ; Yes: skip over it
.1a6a05	c8		iny		                INY                         ; No: try again with the the next character
.1a6a06	80 f5		bra $1a69fd	                BRA eat_name
.1a6a08	c8		iny		skip_dot        INY                         ; Character at Y is '.', so skip over it
.1a6a09	a2 08 00	ldx #$0008	do_ext          LDX #8
.1a6a0c	b7 23		lda [$0823],y	ext_loop        LDA [ARGUMENT1],Y           ; Get the character of the new extension
.1a6a0e	f0 31		beq $1a6a41	                BEQ copy_short_name         ; If end-of-string: copy what we have
.1a6a10	22 21 69 1a	jsl $1a6921	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.1a6a14	b0 22		bcs $1a6a38	                BCS save_ext_char
.1a6a16	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6a19	08		php		            PHP
.1a6a1a	c2 20		rep #$20	            REP #$20
.1a6a1c	48		pha		            PHA
.1a6a1d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6a20	5b		tcd		            TCD
.1a6a21	68		pla		            PLA
.1a6a22	28		plp		            PLP
.1a6a23	e2 20		sep #$20	            SEP #$20
.1a6a25	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.1a6a27	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6a2b	c2 20		rep #$20	            REP #$20
.1a6a2d	29 ff 00	and #$00ff	            AND #$00FF
.1a6a30	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6a33	e2 20		sep #$20	            SEP #$20
.1a6a35	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6a38	95 7e		sta $087e,x	save_ext_char   STA MLINEBUF,X              ; Otherwise: copy it
.1a6a3a	c8		iny		                INY
.1a6a3b	e8		inx		                INX
.1a6a3c	c0 0c 00	cpy #$000c	                CPY #12
.1a6a3f	d0 cb		bne $1a6a0c	                BNE ext_loop
.1a6a41	a2 00 00	ldx #$0000	copy_short_name LDX #0                      ; Copy the short name we built to the directory entry
.1a6a44	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1a6a47	b5 7e		lda $087e,x	copy_loop       LDA MLINEBUF,X
.1a6a49	97 08		sta [$0808],y	                STA [INDEX],Y
.1a6a4b	e8		inx		                INX
.1a6a4c	c8		iny		                INY
.1a6a4d	c0 0b 00	cpy #$000b	                CPY #11
.1a6a50	d0 f5		bne $1a6a47	                BNE copy_loop
.1a6a52	22 14 11 00	jsl $001114	                JSL FK_DIRWRITE             ; Write the directory entry back
.1a6a56	b0 22		bcs $1a6a7a	                BCS done
.1a6a58	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6a5b	08		php		            PHP
.1a6a5c	c2 20		rep #$20	            REP #$20
.1a6a5e	48		pha		            PHA
.1a6a5f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6a62	5b		tcd		            TCD
.1a6a63	68		pla		            PLA
.1a6a64	28		plp		            PLP
.1a6a65	e2 20		sep #$20	            SEP #$20
.1a6a67	a9 15		lda #$15	            LDA #ERR_DIRNOTWRITE
.1a6a69	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6a6d	c2 20		rep #$20	            REP #$20
.1a6a6f	29 ff 00	and #$00ff	            AND #$00FF
.1a6a72	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6a75	e2 20		sep #$20	            SEP #$20
.1a6a77	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6a7a					done
.1a6a7a	20 46 66	jsr $1a6646	            JSR SET_DOSSTAT
.1a6a7d	28		plp		                PLP
.1a6a7e	60		rts		            RTS
.1a6a7f					S_COPY
.1a6a7f	08		php		                PHP
.1a6a80	08		php		            PHP
.1a6a81	c2 20		rep #$20	            REP #$20
.1a6a83	48		pha		            PHA
.1a6a84	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a6a87	5b		tcd		            TCD
.1a6a88	68		pla		            PLA
.1a6a89	28		plp		            PLP
.1a6a8a	c2 30		rep #$30	            REP #$30
.1a6a8c	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a6a8f	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a6a92	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.1a6a94	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.1a6a98	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6a9a	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.1a6a9e	e2 20		sep #$20	            SEP #$20
.1a6aa0	a9 2c		lda #$2c	                LDA #','
.1a6aa2	20 4b 20	jsr $1a204b	            JSR EXPECT_TOK
.1a6aa5	c2 20		rep #$20	            REP #$20
.1a6aa7	20 2d 1b	jsr $1a1b2d	            JSR EVALEXPR
.1a6aaa	20 95 05	jsr $1a0595	            JSR ASS_ARG1_STR
.1a6aad	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.1a6aaf	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.1a6ab3	a5 25		lda $0825	                LDA ARGUMENT1+2
.1a6ab5	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.1a6ab9	22 30 11 00	jsl $001130	                JSL FK_COPY                 ; Attempt to copy the file
.1a6abd	b0 1f		bcs $1a6ade	                BCS done
.1a6abf	08		php		            PHP
.1a6ac0	c2 20		rep #$20	            REP #$20
.1a6ac2	48		pha		            PHA
.1a6ac3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.1a6ac6	5b		tcd		            TCD
.1a6ac7	68		pla		            PLA
.1a6ac8	28		plp		            PLP
.1a6ac9	e2 20		sep #$20	            SEP #$20
.1a6acb	a9 16		lda #$16	            LDA #ERR_NOTCOPIED
.1a6acd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.1a6ad1	c2 20		rep #$20	            REP #$20
.1a6ad3	29 ff 00	and #$00ff	            AND #$00FF
.1a6ad6	20 7f 1c	jsr $1a1c7f	            JSR SET_ERRERL
.1a6ad9	e2 20		sep #$20	            SEP #$20
.1a6adb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.1a6ade	28		plp		done            PLP
.1a6adf	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\monitor.s

.1a6ae0	5c a0 84 1a	jmp $1a84a0	MRETURN         JML IMRETURN
.1a6ae4	5c f1 82 1a	jmp $1a82f1	MPARSE          JML IMPARSE
.1a6ae8	5c a1 84 1a	jmp $1a84a1	MPARSE1         JML IMPARSE1
.1a6aec	5c 1d 74 1a	jmp $1a741d	MEXECUTE        JML IMEXECUTE
.1a6af0	5c 7a 74 1a	jmp $1a747a	MASSEMBLE       JML IMASSEMBLE
.1a6af4	5c ad 73 1a	jmp $1a73ad	MRMODIFY        JML IMRMODIFY
.1a6af8	5c 33 73 1a	jmp $1a7333	MCOMPARE        JML IMCOMPARE
.1a6afc	5c b0 78 1a	jmp $1a78b0	MDISASSEMBLE    JML IMDISASSEMBLE
.1a6b00	5c 9e 6f 1a	jmp $1a6f9e	MFILL           JML IMFILL
.1a6b04	5c cb 72 1a	jmp $1a72cb	MGO             JML IMGO
.1a6b08	5c 86 72 1a	jmp $1a7286	MJUMP           JML IMJUMP
.1a6b0c	5c 10 72 1a	jmp $1a7210	MHUNT           JML IMHUNT
.1a6b10	5c af 83 1a	jmp $1a83af	MLOAD           JML IMLOAD
.1a6b14	5c ac 70 1a	jmp $1a70ac	MMEMORY         JML IMMEMORY
.1a6b18	5c ff 6e 1a	jmp $1a6eff	MREGISTERS      JML IMREGISTERS
.1a6b1c	5c 2a 84 1a	jmp $1a842a	MSAVE           JML IMSAVE
.1a6b20	5c da 6f 1a	jmp $1a6fda	MTRANSFER       JML IMTRANSFER
.1a6b24	5c a3 84 1a	jmp $1a84a3	MVERIFY         JML IMVERIFY
.1a6b28	5c 9c 84 1a	jmp $1a849c	MEXIT           JML IMEXIT
.1a6b2c	5c c9 71 1a	jmp $1a71c9	MMODIFY         JML IMMODIFY
.1a6b30	5c a4 84 1a	jmp $1a84a4	MDOS            JML IMDOS
.1a6b34	18		clc		IMONITOR        CLC                 ; clear the carry flag
.1a6b35	fb		xce		                XCE                 ; move carry to emulation flags
.1a6b36	c2 20		rep #$20	            REP #$20
.1a6b38	a9 ff fe	lda #$feff	                LDA #STACK_END      ; Reset the stack
.1a6b3b	1b		tcs		                TAS
.1a6b3c	58		cli		                CLI                 ; Re-enable interrupts
.1a6b3d	5c 41 6b 1a	jmp $1a6b41	                JML IMREADY
.1a6b41					IMREADY
.1a6b41	c2 30		rep #$30	            REP #$30
.1a6b43	22 ff 6e 1a	jsl $1a6eff	                JSL IMREGISTERS
.1a6b47					ready_loop
.1a6b47	20 08 00	jsr $1a0008	            JSR READLINE
.1a6b4a	20 0c 00	jsr $1a000c	            JSR SCRCOPYLINE
.1a6b4d	8b		phb		                PHB
.1a6b4e	e2 20		sep #$20	            SEP #$20
.1a6b50	a9 00		lda #$00	                LDA #`INPUTBUF
.1a6b52	48		pha		                PHA
.1a6b53	ab		plb		                PLB
.1a6b54	a2 00 4f	ldx #$4f00	                LDX #<>INPUTBUF
.1a6b57	20 17 04	jsr $1a0417	            JSR TOUPPER
.1a6b5a	ab		plb		                PLB
.1a6b5b	22 e4 6a 1a	jsl $1a6ae4	                JSL MPARSE          ; Parse the command
.1a6b5f	22 ec 6a 1a	jsl $1a6aec	                JSL MEXECUTE        ; And execute the parsed command
.1a6b63	80 e2		bra $1a6b47	                BRA ready_loop
.1a6b65					IMHELP
.1a6b65	08		php		                PHP
.1a6b66	8b		phb		                PHB
.1a6b67	e2 20		sep #$20	            SEP #$20
.1a6b69	a9 1a		lda #$1a	                LDA #`help_text
.1a6b6b	48		pha		                PHA
.1a6b6c	ab		plb		                PLB
.1a6b6d	c2 10		rep #$10	            REP #$10
.1a6b6f	a2 78 6b	ldx #$6b78	                LDX #<>help_text
.1a6b72	20 16 03	jsr $1a0316	            JSR PRINTS
.1a6b75	ab		plb		                PLB
.1a6b76	28		plp		                PLP
.1a6b77	6b		rtl		                RTL
>1a6b78	41 20 3c 73 74 61 72 74		help_text       .text "A <start> <assembly>",CHAR_CR
>1a6b80	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d
>1a6b8d	20 20 41 73 73 65 6d 62		                .text "  Assemble a program",CHAR_CR,CHAR_CR
>1a6b95	6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>1a6ba3	43 20 3c 73 74 61 72 74		                .text "C <start1> <start2> [len (1 if blank)]",CHAR_CR
>1a6bab	31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e
>1a6bbb	20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d
>1a6bca	20 20 43 6f 6d 70 61 72		                .text "  Compare to sections of memory",CHAR_CR,CHAR_CR
>1a6bd2	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>1a6be2	20 6d 65 6d 6f 72 79 0d 0d
>1a6beb	44 20 3c 73 74 61 72 74		                .text "D <start> [end]",CHAR_CR
>1a6bf3	3e 20 5b 65 6e 64 5d 0d
>1a6bfb	20 20 44 69 73 61 73 73		                .text "  Disassemble a program",CHAR_CR,CHAR_CR
>1a6c03	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>1a6c13	0d
>1a6c14	46 20 3c 73 74 61 72 74		                .text "F <start> <end> <byte>",CHAR_CR
>1a6c1c	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d
>1a6c2b	20 20 46 69 6c 6c 20 61		                .text "  Fill a block of memory with a byte",CHAR_CR,CHAR_CR
>1a6c33	20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>1a6c43	20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>1a6c51	47 20 5b 61 64 64 72 65		                .text "G [address]",CHAR_CR
>1a6c59	73 73 5d 0d
>1a6c5d	20 20 53 74 61 72 74 20		                .text "  Start execution at a location",CHAR_CR,CHAR_CR
>1a6c65	65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>1a6c75	6f 63 61 74 69 6f 6e 0d 0d
>1a6c7e	4a 20 5b 61 64 64 72 65		                .text "J [address] - Jump to a location in memory",CHAR_CR
>1a6c86	73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20
>1a6c96	6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>1a6ca6	72 79 0d
>1a6ca9	20 20 4a 75 6d 70 20 74		                .text "  Jump to a location in memory",CHAR_CR,CHAR_CR
>1a6cb1	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>1a6cc1	6d 65 6d 6f 72 79 0d 0d
>1a6cc9	48 20 3c 73 74 61 72 74		                .text "H <start> <end> <byte> [byte]..",CHAR_CR
>1a6cd1	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>1a6ce1	62 79 74 65 5d 2e 2e 0d
>1a6ce9	20 20 48 75 6e 74 20 66		                .text "  Hunt for values in memory",CHAR_CR,CHAR_CR
>1a6cf1	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>1a6d01	6f 72 79 0d 0d
>1a6d06	4c 20 20 20 20 20 4c 4f		                .text "L     LOAD         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," [destination]",CHAR_CR
>1a6d0e	41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a6d1e	22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>1a6d2e	4d 20 3c 73 74 61 72 74		                .text "M <start> [end]",CHAR_CR
>1a6d36	3e 20 5b 65 6e 64 5d 0d
>1a6d3e	20 20 44 75 6d 70 20 74		                .text "  Dump the value in memory",CHAR_CR,CHAR_CR
>1a6d46	68 65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f
>1a6d56	72 79 0d 0d
>1a6d5a	52 20 2d 20 44 69 73 70		                .text "R - Display the values of the registers",CHAR_CR,CHAR_CR
>1a6d62	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>1a6d72	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>1a6d82	0d
>1a6d83	3b 20 3c 50 43 3e 20 3c		                .text "; <PC> <A> <X> <Y> <SP> <DBR> <DP> <NVMXDIZC>",CHAR_CR
>1a6d8b	41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>1a6d9b	3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>1a6dab	44 49 5a 43 3e 0d
>1a6db1	20 20 43 68 61 6e 67 65		                .text "  Change the contents of the registers",CHAR_CR,CHAR_CR
>1a6db9	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>1a6dc9	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>1a6dd9	53 20 20 20 20 20 53 41		                .text "S     SAVE         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," <start> <end>",CHAR_CR
>1a6de1	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a6df1	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>1a6e01	54 20 3c 73 74 61 72 74		                .text "T <start> <end> <destination>",CHAR_CR
>1a6e09	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>1a6e19	74 69 6f 6e 3e 0d
>1a6e1f	20 20 54 72 61 6e 73 66		                .text "  Transfer (copy) data within memory",CHAR_CR,CHAR_CR
>1a6e27	65 72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77
>1a6e37	69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a6e45	57 20 3c 62 79 74 65 3e		                .text "W <byte>",CHAR_CR
>1a6e4d	0d
>1a6e4e	20 20 53 65 74 20 74 68		                .text "  Set the register width flags for the disassembler",CHAR_CR,CHAR_CR
>1a6e56	65 20 72 65 67 69 73 74 65 72 20 77 69 64 74 68
>1a6e66	20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20 64
>1a6e76	69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>1a6e83	58 20 2d 20 52 65 74 75		                .text "X - Return to BASIC",CHAR_CR,CHAR_CR
>1a6e8b	72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>1a6e98	3e 20 3c 73 74 61 72 74		                .text "> <start> <byte> [byte]...",CHAR_CR
>1a6ea0	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>1a6eb0	2e 2e 0d
>1a6eb3	20 20 45 64 69 74 20 64		                .text "  Edit data in memory",CHAR_CR,CHAR_CR
>1a6ebb	61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a6eca	3f 20 2d 20 44 69 73 70		                .null "? - Display a short help screen",CHAR_CR,CHAR_CR
>1a6ed2	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>1a6ee2	20 73 63 72 65 65 6e 0d 0d 00
.1a6eec					IMWIDTH
.1a6eec	08		php		                PHP
.1a6eed	08		php		            PHP
.1a6eee	c2 20		rep #$20	            REP #$20
.1a6ef0	48		pha		            PHA
.1a6ef1	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a6ef4	5b		tcd		            TCD
.1a6ef5	68		pla		            PLA
.1a6ef6	28		plp		            PLP
.1a6ef7	e2 20		sep #$20	            SEP #$20
.1a6ef9	a5 0d		lda $0855	                LDA MARG1
.1a6efb	85 4e		sta $0896	                STA MCPUSTAT
.1a6efd	28		plp		                PLP
.1a6efe	6b		rtl		                RTL
.1a6eff					IMREGISTERS
.1a6eff	20 e4 00	jsr $1a00e4	            JSR ENSURETEXT
.1a6f02	08		php		            PHP
.1a6f03	e2 20		sep #$20	            SEP #$20
.1a6f05	48		pha		            PHA
.1a6f06	a9 1a		lda #$1a	            LDA #`mregisters_msg
.1a6f08	48		pha		            PHA
.1a6f09	ab		plb		            PLB
.1a6f0a	68		pla		            PLA
.1a6f0b	28		plp		            PLP
.1a6f0c	a2 e1 84	ldx #$84e1	                LDX #<>mregisters_msg
.1a6f0f	20 16 03	jsr $1a0316	            JSR PRINTS
.1a6f12	e2 20		sep #$20	            SEP #$20
.1a6f14	a9 3b		lda #$3b	                LDA #';'
.1a6f16	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f19	a9 20		lda #$20	                LDA #' '
.1a6f1b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f1e	c2 30		rep #$30	            REP #$30
.1a6f20	08		php		            PHP
.1a6f21	e2 20		sep #$20	            SEP #$20
.1a6f23	48		pha		            PHA
.1a6f24	a9 00		lda #$00	            LDA #$0
.1a6f26	48		pha		            PHA
.1a6f27	ab		plb		            PLB
.1a6f28	68		pla		            PLA
.1a6f29	28		plp		            PLP
.1a6f2a	a0 03 00	ldy #$0003	                LDY #3
.1a6f2d	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1a6f30	20 99 02	jsr $1a0299	            JSR PRINTH
.1a6f33	c2 20		rep #$20	            REP #$20
.1a6f35	a9 20 00	lda #$0020	                LDA #' '
.1a6f38	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f3b	af 44 02 00	lda $000244	                LDA @lCPUA
.1a6f3f	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a6f42	a9 20 00	lda #$0020	                LDA #' '
.1a6f45	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f48	af 46 02 00	lda $000246	                LDA @lCPUX
.1a6f4c	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a6f4f	a9 20 00	lda #$0020	                LDA #' '
.1a6f52	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f55	af 48 02 00	lda $000248	                LDA @lCPUY
.1a6f59	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a6f5c	a9 20 00	lda #$0020	                LDA #' '
.1a6f5f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f62	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK
.1a6f66	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a6f69	a9 20 00	lda #$0020	                LDA #' '
.1a6f6c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f6f	af 4e 02 00	lda $00024e	                LDA @lCPUDBR
.1a6f73	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a6f76	a9 20 00	lda #$0020	                LDA #' '
.1a6f79	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f7c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f7f	af 4c 02 00	lda $00024c	                LDA @lCPUDP
.1a6f83	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a6f86	a9 20 00	lda #$0020	                LDA #' '
.1a6f89	20 18 00	jsr $1a0018	            JSR PRINTC
.1a6f8c	08		php		                PHP
.1a6f8d	e2 20		sep #$20	            SEP #$20
.1a6f8f	ad 4f 02	lda $024f	                LDA CPUFLAGS
.1a6f92	22 fa 81 1a	jsl $1a81fa	                JSL MPRINTB
.1a6f96	28		plp		                PLP
.1a6f97	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a6f9a	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a6f9d	6b		rtl		                RTL
.1a6f9e					IMFILL
.1a6f9e	08		php		                PHP                 ; Save the caller's context
.1a6f9f	0b		phd		                PHD
.1a6fa0	08		php		            PHP
.1a6fa1	c2 20		rep #$20	            REP #$20
.1a6fa3	48		pha		            PHA
.1a6fa4	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a6fa7	5b		tcd		            TCD
.1a6fa8	68		pla		            PLA
.1a6fa9	28		plp		            PLP
.1a6faa					do_copy
.1a6faa	e2 20		sep #$20	            SEP #$20
.1a6fac	a5 15		lda $085d	                LDA MARG3
.1a6fae	87 0d		sta [$0855]	                STA [MARG1]
.1a6fb0	e2 20		sep #$20	            SEP #$20
.1a6fb2	a5 0f		lda $0857	                LDA MARG1+2
.1a6fb4	c5 13		cmp $085b	                CMP MARG2+2
.1a6fb6	d0 0e		bne $1a6fc6	                BNE go_next         ; No: we haven't reached end address yet
.1a6fb8	c2 20		rep #$20	            REP #$20
.1a6fba	a5 0d		lda $0855	                LDA MARG1
.1a6fbc	c5 11		cmp $0859	                CMP MARG2           ; Are they equal?
.1a6fbe	d0 06		bne $1a6fc6	                BNE go_next         ; No: we haven't reached end address yet
.1a6fc0	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a6fc3	2b		pld		                PLD                 ; Restore the caller's context
.1a6fc4	28		plp		                PLP
.1a6fc5	6b		rtl		                RTL
.1a6fc6					go_next
.1a6fc6	c2 20		rep #$20	            REP #$20
.1a6fc8	18		clc		                CLC
.1a6fc9	a5 0d		lda $0855	                LDA MARG1
.1a6fcb	69 01 00	adc #$0001	                ADC #1
.1a6fce	85 0d		sta $0855	                STA MARG1
.1a6fd0	e2 20		sep #$20	            SEP #$20
.1a6fd2	a5 0e		lda $0856	                LDA MARG1+1
.1a6fd4	69 00		adc #$00	                ADC #0
.1a6fd6	85 0e		sta $0856	                STA MARG1+1
.1a6fd8	80 d0		bra $1a6faa	                BRA do_copy
.1a6fda					IMTRANSFER
.1a6fda	08		php		                PHP
.1a6fdb	0b		phd		                PHD
.1a6fdc	08		php		            PHP
.1a6fdd	c2 20		rep #$20	            REP #$20
.1a6fdf	48		pha		            PHA
.1a6fe0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a6fe3	5b		tcd		            TCD
.1a6fe4	68		pla		            PLA
.1a6fe5	28		plp		            PLP
.1a6fe6	e2 20		sep #$20	            SEP #$20
.1a6fe8	a5 0f		lda $0857	                LDA MARG1+2
.1a6fea	c5 17		cmp $085f	                CMP MARG3+2
.1a6fec	90 45		bcc $1a7033	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.1a6fee	c2 20		rep #$20	            REP #$20
.1a6ff0	a5 0d		lda $0855	                LDA MARG1
.1a6ff2	c5 15		cmp $085d	                CMP MARG3
.1a6ff4	90 3d		bcc $1a7033	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.1a6ff6					copy_byte_down
.1a6ff6	e2 20		sep #$20	            SEP #$20
.1a6ff8	a7 0d		lda [$0855]	                LDA [MARG1]         ; Copy the byte
.1a6ffa	87 15		sta [$085d]	                STA [MARG3]
.1a6ffc	a5 0f		lda $0857	                LDA MARG1+2         ; Are the source's current and end bank bytes equal?
.1a6ffe	c5 13		cmp $085b	                CMP MARG2+2
.1a7000	d0 0b		bne $1a700d	                BNE inc_pointers    ; No: we're not done yet
.1a7002	c2 20		rep #$20	            REP #$20
.1a7004	a5 0d		lda $0855	                LDA MARG1           ; Are the rest of the bits equal?
.1a7006	c5 11		cmp $0859	                CMP MARG2
.1a7008	d0 03		bne $1a700d	                BNE inc_pointers    ; No: we're not done yet
.1a700a	4c 91 70	jmp $1a7091	                JMP done            ; Yes: we've copied the last byte, exit
.1a700d					inc_pointers
.1a700d	c2 20		rep #$20	            REP #$20
.1a700f	18		clc		                CLC
.1a7010	a5 0d		lda $0855	                LDA MARG1
.1a7012	69 01 00	adc #$0001	                ADC #1
.1a7015	85 0d		sta $0855	                STA MARG1
.1a7017	e2 20		sep #$20	            SEP #$20
.1a7019	a5 0e		lda $0856	                LDA MARG1+1
.1a701b	69 00		adc #$00	                ADC #0
.1a701d	85 0e		sta $0856	                STA MARG1+1
.1a701f	c2 20		rep #$20	            REP #$20
.1a7021	18		clc		                CLC
.1a7022	a5 15		lda $085d	                LDA MARG3
.1a7024	69 01 00	adc #$0001	                ADC #1
.1a7027	85 15		sta $085d	                STA MARG3
.1a7029	e2 20		sep #$20	            SEP #$20
.1a702b	a5 16		lda $085e	                LDA MARG3+1
.1a702d	69 00		adc #$00	                ADC #0
.1a702f	85 16		sta $085e	                STA MARG3+1
.1a7031	80 c3		bra $1a6ff6	                BRA copy_byte_down  ; And copy that next byte over
.1a7033					copy_up
.1a7033	c2 20		rep #$20	            REP #$20
.1a7035	38		sec		                SEC
.1a7036	a5 11		lda $0859	                LDA MARG2
.1a7038	e5 0d		sbc $0855	                SBC MARG1
.1a703a	85 19		sta $0861	                STA MARG4
.1a703c	e2 20		sep #$20	            SEP #$20
.1a703e	a5 13		lda $085b	                LDA MARG2+2
.1a7040	e5 0f		sbc $0857	                SBC MARG1+2
.1a7042	85 1b		sta $0863	                STA MARG4+2
.1a7044	c2 20		rep #$20	            REP #$20
.1a7046	18		clc		                CLC
.1a7047	a5 19		lda $0861	                LDA MARG4
.1a7049	65 15		adc $085d	                ADC MARG3
.1a704b	85 15		sta $085d	                STA MARG3
.1a704d	e2 20		sep #$20	            SEP #$20
.1a704f	a5 1b		lda $0863	                LDA MARG4+2
.1a7051	65 17		adc $085f	                ADC MARG3+2
.1a7053	85 17		sta $085f	                STA MARG3+2
.1a7055					copy_byte_up
.1a7055	e2 20		sep #$20	            SEP #$20
.1a7057	a7 11		lda [$0859]	                LDA [MARG2]
.1a7059	87 15		sta [$085d]	                STA [MARG3]
.1a705b	a5 13		lda $085b	                LDA MARG2+2         ; Are the source's current and start bank bytes equal?
.1a705d	c5 0f		cmp $0857	                CMP MARG1+2
.1a705f	d0 0a		bne $1a706b	                BNE dec_pointers    ; No: we're not done yet
.1a7061	c2 20		rep #$20	            REP #$20
.1a7063	a5 11		lda $0859	                LDA MARG2           ; Are the rest of the bits equal?
.1a7065	c5 0d		cmp $0855	                CMP MARG1
.1a7067	d0 02		bne $1a706b	                BNE dec_pointers    ; No: we're not done yet
.1a7069	80 26		bra $1a7091	                BRA done            ; Yes: we've copied the last byte, exit
.1a706b					dec_pointers
.1a706b	c2 20		rep #$20	            REP #$20
.1a706d	38		sec		                SEC
.1a706e	a5 11		lda $0859	                LDA MARG2
.1a7070	e9 01 00	sbc #$0001	                SBC #1
.1a7073	85 11		sta $0859	                STA MARG2
.1a7075	e2 20		sep #$20	            SEP #$20
.1a7077	a5 12		lda $085a	                LDA MARG2+1
.1a7079	e9 00		sbc #$00	                SBC #0
.1a707b	85 12		sta $085a	                STA MARG2+1
.1a707d	c2 20		rep #$20	            REP #$20
.1a707f	38		sec		                SEC                 ; Decrement the current destination pointer (MARG3)
.1a7080	a5 15		lda $085d	                LDA MARG3
.1a7082	e9 01 00	sbc #$0001	                SBC #1
.1a7085	85 15		sta $085d	                STA MARG3
.1a7087	e2 20		sep #$20	            SEP #$20
.1a7089	a5 16		lda $085e	                LDA MARG3+1
.1a708b	e9 00		sbc #$00	                SBC #0
.1a708d	85 16		sta $085e	                STA MARG3+1
.1a708f	80 c4		bra $1a7055	                BRA copy_byte_up    ; And copy that next byte
.1a7091					done
.1a7091	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a7094	2b		pld		                PLD
.1a7095	28		plp		                PLP
.1a7096	6b		rtl		                RTL
.1a7097					IS_PRINTABLE
.1a7097	08		php		                PHP
.1a7098	e2 20		sep #$20	            SEP #$20
.1a709a	c9 21		cmp #$21	                CMP #33
.1a709c	90 0b		bcc $1a70a9	                BLT not_printable   ; 0 .. 31 are not printable
.1a709e	c9 7f		cmp #$7f	                CMP #127
.1a70a0	90 04		bcc $1a70a6	                BLT printable       ; 32 .. 126 are printable
.1a70a2	c9 a0		cmp #$a0	                CMP #160
.1a70a4	90 03		bcc $1a70a9	                BLT not_printable   ; 127 .. 159 are not printable (assuming Latin-1)
.1a70a6	28		plp		printable       PLP
.1a70a7	38		sec		                SEC
.1a70a8	6b		rtl		                RTL
.1a70a9	28		plp		not_printable   PLP
.1a70aa	18		clc		                CLC
.1a70ab	6b		rtl		                RTL
=256					MMEMDUMPSIZE = 256  ; Default number of bytes to dump
=8					MMEMROWSIZE = 8    ; Number of bytes to dump per-row
.1a70ac					IMMEMORY
.1a70ac	08		php		                PHP
.1a70ad	8b		phb		                PHB
.1a70ae	0b		phd		                PHD
.1a70af	08		php		            PHP
.1a70b0	c2 20		rep #$20	            REP #$20
.1a70b2	48		pha		            PHA
.1a70b3	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a70b6	5b		tcd		            TCD
.1a70b7	68		pla		            PLA
.1a70b8	28		plp		            PLP
.1a70b9	e2 20		sep #$20	            SEP #$20
.1a70bb	a9 00		lda #$00	                LDA #0              ; Clear the pagination line counter
.1a70bd	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT
.1a70c1	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a70c3	c9 02		cmp #$02	                CMP #2
.1a70c5	b0 16		bcs $1a70dd	                BGE set_cursor      ; 2>= arguments? Use them as-is
.1a70c7	c9 01		cmp #$01	                CMP #1
.1a70c9	90 20		bcc $1a70eb	                BLT no_args         ; No arguments passed? Use defaults
.1a70cb	c2 20		rep #$20	            REP #$20
.1a70cd	18		clc		                CLC
.1a70ce	a5 0d		lda $0855	                LDA MARG1
.1a70d0	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a70d3	85 11		sta $0859	                STA MARG2
.1a70d5	e2 20		sep #$20	            SEP #$20
.1a70d7	a5 0f		lda $0857	                LDA MARG1+2
.1a70d9	69 00		adc #$00	                ADC #0
.1a70db	85 13		sta $085b	                STA MARG2+2
.1a70dd					set_cursor
.1a70dd	c2 20		rep #$20	            REP #$20
.1a70df	a5 0d		lda $0855	                LDA MARG1
.1a70e1	85 32		sta $087a	                STA MCURSOR
.1a70e3	e2 20		sep #$20	            SEP #$20
.1a70e5	a5 0f		lda $0857	                LDA MARG1+2
.1a70e7	85 34		sta $087c	                STA MCURSOR+2
.1a70e9	80 12		bra $1a70fd	                BRA dump_line
.1a70eb					no_args
.1a70eb	c2 20		rep #$20	            REP #$20
.1a70ed	18		clc		                CLC
.1a70ee	a5 32		lda $087a	                LDA MCURSOR
.1a70f0	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a70f3	85 11		sta $0859	                STA MARG2
.1a70f5	e2 20		sep #$20	            SEP #$20
.1a70f7	a5 34		lda $087c	                LDA MCURSOR+2
.1a70f9	69 00		adc #$00	                ADC #0
.1a70fb	85 13		sta $085b	                STA MARG2+2
.1a70fd					dump_line
.1a70fd	e2 20		sep #$20	            SEP #$20
.1a70ff	a0 00 00	ldy #$0000	                LDY #0
.1a7102	c2 20		rep #$20	            REP #$20
.1a7104	a5 32		lda $087a	                LDA MCURSOR             ; NOTE: the use of MARG4 here is a temporary
.1a7106	85 19		sta $0861	                STA MARG4               ; hack. the copy_loop instruction does not
.1a7108	e2 20		sep #$20	            SEP #$20
.1a710a	a5 34		lda $087c	                LDA MCURSOR+2
.1a710c	85 1b		sta $0863	                STA MARG4+2
.1a710e	e2 20		sep #$20	            SEP #$20
.1a7110	a7 19		lda [$0861]	copy_loop       LDA [MARG4]             ; TODO: Should be LDA [MCURSOR],Y, which doesn't seem to be working
.1a7112	22 97 70 1a	jsl $1a7097	                JSL IS_PRINTABLE        ; Is it printable?
.1a7116	b0 02		bcs $1a711a	                BCS buffer_char         ; Yes: go ahead and add it to the line buffer
.1a7118	a9 3f		lda #$3f	                LDA #'?'                ; No: replace it with dot
.1a711a	99 7e 08	sta $087e,y	buffer_char     STA #MLINEBUF,B,Y
.1a711d	c2 20		rep #$20	            REP #$20
.1a711f	18		clc		                CLC
.1a7120	a5 19		lda $0861	                LDA MARG4
.1a7122	69 01 00	adc #$0001	                ADC #1
.1a7125	85 19		sta $0861	                STA MARG4
.1a7127	e2 20		sep #$20	            SEP #$20
.1a7129	a5 1b		lda $0863	                LDA MARG4+2
.1a712b	69 00		adc #$00	                ADC #0
.1a712d	85 1b		sta $0863	                STA MARG4+2
.1a712f	c8		iny		                INY
.1a7130	c0 08 00	cpy #$0008	                CPY #MMEMROWSIZE
.1a7133	90 db		bcc $1a7110	                BLT copy_loop
.1a7135	a9 00		lda #$00	                LDA #0
.1a7137	99 7e 08	sta $087e,y	                STA #MLINEBUF,B,Y
.1a713a	a9 3e		lda #$3e	                LDA #'>'
.1a713c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a713f	a9 20		lda #$20	                LDA #' '
.1a7141	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7144	e2 20		sep #$20	            SEP #$20
.1a7146	a5 34		lda $087c	                LDA MCURSOR+2
.1a7148	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a714b	a9 3a		lda #$3a	                LDA #':'                ; then a colon
.1a714d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7150	c2 20		rep #$20	            REP #$20
.1a7152	a5 32		lda $087a	                LDA MCURSOR
.1a7154	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a7157	c2 20		rep #$20	            REP #$20
.1a7159	a9 08 00	lda #$0008	                LDA #MMEMROWSIZE
.1a715c	85 47		sta $088f	                STA MCOUNT
.1a715e					prhex_loop
.1a715e	e2 20		sep #$20	            SEP #$20
.1a7160	a9 20		lda #$20	                LDA #' '
.1a7162	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7165	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a7167	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a716a	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR        ; Point MCURSOR to the next byte
.1a716e					check_line
.1a716e	e2 20		sep #$20	            SEP #$20
.1a7170	c6 47		dec $088f	                DEC MCOUNT              ; Count down the number of bytes on the row
.1a7172	d0 ea		bne $1a715e	                BNE prhex_loop          ; If we're not at zero, keep looping over the bytes
.1a7174	a9 20		lda #$20	                LDA #' '
.1a7176	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7179	a9 20		lda #$20	                LDA #' '
.1a717b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a717e	08		php		            PHP
.1a717f	e2 20		sep #$20	            SEP #$20
.1a7181	48		pha		            PHA
.1a7182	a9 00		lda #$00	            LDA #`MLINEBUF
.1a7184	48		pha		            PHA
.1a7185	ab		plb		            PLB
.1a7186	68		pla		            PLA
.1a7187	28		plp		            PLP
.1a7188	a2 7e 08	ldx #$087e	                LDX #MLINEBUF
.1a718b	20 16 03	jsr $1a0316	            JSR PRINTS
.1a718e	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a7191	20 a0 02	jsr $1a02a0	            JSR PAGINATE
.1a7194	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.1a7196	c5 13		cmp $085b	                CMP MARG2+2
.1a7198	90 0f		bcc $1a71a9	                BLT continue            ; No: continue
.1a719a	c2 20		rep #$20	            REP #$20
.1a719c	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.1a719e	c5 11		cmp $0859	                CMP MARG2
.1a71a0	90 07		bcc $1a71a9	                BLT continue            ; Nope... keep going
.1a71a2					done
.1a71a2	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a71a5	2b		pld		                PLD
.1a71a6	ab		plb		                PLB
.1a71a7	28		plp		                PLP
.1a71a8	6b		rtl		                RTL
.1a71a9	4c fd 70	jmp $1a70fd	continue        JMP dump_line
.1a71ac					M_COPY_ARGB
.1a71ac	08		php		                PHP
.1a71ad	8d 92 08	sta $0892	                STA MTEMP
.1a71b0	e2 20		sep #$20	            SEP #$20
.1a71b2	bd 00 00	lda $0000,x	loop            LDA #0,B,X
.1a71b5	99 00 00	sta $0000,y	                STA #0,B,Y      ; Copy the byte
.1a71b8	ad 92 08	lda $0892	                LDA MTEMP       ; Check the count of characters remaining
.1a71bb	f0 0a		beq $1a71c7	                BEQ done        ; If it's 0, we're done
.1a71bd	c8		iny		                INY             ; Point to the next destination byte
.1a71be	e8		inx		                INX             ; Point to the next source byte (skip three bytes)
.1a71bf	e8		inx		                INX
.1a71c0	e8		inx		                INX
.1a71c1	e8		inx		                INX
.1a71c2	ce 92 08	dec $0892	                DEC MTEMP       ; Count down and see if we're done
.1a71c5	80 eb		bra $1a71b2	                BRA loop
.1a71c7	28		plp		done            PLP
.1a71c8	6b		rtl		                RTL
.1a71c9					IMMODIFY
.1a71c9	08		php		                PHP
.1a71ca	0b		phd		                PHD
.1a71cb	8b		phb		                PHB
.1a71cc	08		php		            PHP
.1a71cd	c2 20		rep #$20	            REP #$20
.1a71cf	48		pha		            PHA
.1a71d0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a71d3	5b		tcd		            TCD
.1a71d4	68		pla		            PLA
.1a71d5	28		plp		            PLP
.1a71d6	08		php		            PHP
.1a71d7	e2 20		sep #$20	            SEP #$20
.1a71d9	48		pha		            PHA
.1a71da	a9 00		lda #$00	            LDA #0
.1a71dc	48		pha		            PHA
.1a71dd	ab		plb		            PLB
.1a71de	68		pla		            PLA
.1a71df	28		plp		            PLP
.1a71e0	c2 30		rep #$30	            REP #$30
.1a71e2	a5 0d		lda $0855	                LDA MARG1           ; Set MCURSOR to MARG1
.1a71e4	85 32		sta $087a	                STA MCURSOR
.1a71e6	a5 0f		lda $0857	                LDA MARG1+2
.1a71e8	85 34		sta $087c	                STA MCURSOR+2
.1a71ea	e2 20		sep #$20	            SEP #$20
.1a71ec	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.1a71ee	3a		dec a		                DEC A               ; (MARG_LEN - 1)
.1a71ef	85 47		sta $088f	                STA MCOUNT
.1a71f1	a2 59 08	ldx #$0859	                LDX #<>MARG2        ; Copy MCOUNT bytes from MARG2..MARG9
.1a71f4	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF     ; to MLINEBUF
.1a71f7	22 ac 71 1a	jsl $1a71ac	                JSL M_COPY_ARGB
.1a71fb	a0 00 00	ldy #$0000	                LDY #0
.1a71fe	b9 7e 08	lda $087e,y	loop            LDA MLINEBUF,Y      ; Copy the byte from the buffer
.1a7201	87 32		sta [$087a]	                STA [MCURSOR]       ; To the address indicated by MCURSOR
.1a7203	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR    ; Advance the cursor
.1a7207	c8		iny		                INY                 ; Go to the next buffered byte
.1a7208	c4 47		cpy $088f	                CPY MCOUNT          ; Did we just write the last one?
.1a720a	d0 f2		bne $1a71fe	                BNE loop            ; No: continue writing
.1a720c	ab		plb		                PLB
.1a720d	2b		pld		                PLD
.1a720e	28		plp		                PLP
.1a720f	6b		rtl		                RTL
.1a7210					IMHUNT
.1a7210	08		php		                PHP
.1a7211	0b		phd		                PHD
.1a7212	8b		phb		                PHB
.1a7213	08		php		            PHP
.1a7214	c2 20		rep #$20	            REP #$20
.1a7216	48		pha		            PHA
.1a7217	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a721a	5b		tcd		            TCD
.1a721b	68		pla		            PLA
.1a721c	28		plp		            PLP
.1a721d	08		php		            PHP
.1a721e	e2 20		sep #$20	            SEP #$20
.1a7220	48		pha		            PHA
.1a7221	a9 00		lda #$00	            LDA #0
.1a7223	48		pha		            PHA
.1a7224	ab		plb		            PLB
.1a7225	68		pla		            PLA
.1a7226	28		plp		            PLP
.1a7227	e2 20		sep #$20	            SEP #$20
.1a7229	c2 10		rep #$10	            REP #$10
.1a722b	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.1a722d	3a		dec a		                DEC A               ; (MARG_LEN - 2)
.1a722e	3a		dec a		                DEC A
.1a722f	85 47		sta $088f	                STA MCOUNT
.1a7231	a2 5d 08	ldx #$085d	                LDX #<>MARG3
.1a7234	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF
.1a7237	22 ac 71 1a	jsl $1a71ac	                JSL M_COPY_ARGB
.1a723b	c2 20		rep #$20	            REP #$20
.1a723d	a5 0d		lda $0855	                LDA MARG1           ; Copy starting address to MCURSOR
.1a723f	85 32		sta $087a	                STA MCURSOR
.1a7241	a5 0f		lda $0857	                LDA MARG1+2
.1a7243	85 34		sta $087c	                STA MCURSOR+2
.1a7245					outer_loop
.1a7245	c2 20		rep #$20	            REP #$20
.1a7247	a5 34		lda $087c	                LDA MCURSOR+2      ; If MCURSOR < MARG2, we're not done yet
.1a7249	c5 13		cmp $085b	                CMP MARG2+2
.1a724b	d0 06		bne $1a7253	                BNE not_done
.1a724d	a5 32		lda $087a	                LDA MCURSOR
.1a724f	c5 11		cmp $0859	                CMP MARG2
.1a7251	f0 2c		beq $1a727f	                BEQ done            ; MCURSOR = MARG2: we're done
.1a7253					not_done
.1a7253	e2 20		sep #$20	            SEP #$20
.1a7255	a0 00 00	ldy #$0000	                LDY #0
.1a7258	b7 32		lda [$087a],y	cmp_loop        LDA [MCURSOR],Y     ; Get the byte from the memory to check
.1a725a	d9 7e 08	cmp $087e,y	                CMP MLINEBUF,Y      ; Compare it against our pattern
.1a725d	d0 1a		bne $1a7279	                BNE advance         ; If not equal, we need to move on
.1a725f	c8		iny		                INY                 ; Otherwise do we have more bytes to check?
.1a7260	c4 47		cpy $088f	                CPY MCOUNT
.1a7262	d0 f4		bne $1a7258	                BNE cmp_loop        ; No: check more
.1a7264	c2 20		rep #$20	            REP #$20
.1a7266	a5 32		lda $087a	                LDA MCURSOR         ; Print the address
.1a7268	85 4a		sta $0892	                STA MTEMP
.1a726a	a5 34		lda $087c	                LDA MCURSOR+2
.1a726c	85 4c		sta $0894	                STA MTEMP+2
.1a726e	22 83 7c 1a	jsl $1a7c83	                JSL M_PR_ADDR
.1a7272	e2 20		sep #$20	            SEP #$20
.1a7274	a9 20		lda #$20	                LDA #' '
.1a7276	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7279	22 d9 81 1a	jsl $1a81d9	advance         JSL M_INC_CURSOR    ; Move MCURSOR forward by one
.1a727d	80 c6		bra $1a7245	                BRA outer_loop      ; And try to compare that to the pattern
.1a727f					done
.1a727f	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a7282	ab		plb		                PLB
.1a7283	2b		pld		                PLD
.1a7284	28		plp		                PLP
.1a7285	6b		rtl		                RTL
.1a7286					IMJUMP
.1a7286	08		php		            PHP
.1a7287	c2 20		rep #$20	            REP #$20
.1a7289	48		pha		            PHA
.1a728a	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a728d	5b		tcd		            TCD
.1a728e	68		pla		            PLA
.1a728f	28		plp		            PLP
.1a7290	e2 20		sep #$20	            SEP #$20
.1a7292	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.1a7294	f0 0e		beq $1a72a4	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.1a7296	c2 30		rep #$30	            REP #$30
.1a7298	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.1a729a	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.1a729e	a5 0f		lda $0857	                LDA MARG1+2
.1a72a0	8f 42 02 00	sta $000242	                STA @lCPUPBR
.1a72a4	af 46 02 00	lda $000246	MJUMPRESTORE    LDA @lCPUX          ; Restore X and Y
.1a72a8	aa		tax		                TAX
.1a72a9	af 48 02 00	lda $000248	                LDA @lCPUY
.1a72ad	a8		tay		                TAY
.1a72ae	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.1a72b2	1b		tcs		                TCS
.1a72b3	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.1a72b7	5b		tcd		                TCD
.1a72b8	e2 20		sep #$20	            SEP #$20
.1a72ba	a9 1a		lda #$1a	                LDA #`MJUMPSTART
.1a72bc	48		pha		                PHA
.1a72bd	a9 72		lda #$72	                LDA #>MJUMPSTART
.1a72bf	48		pha		                PHA
.1a72c0	a9 c6		lda #$c6	                LDA #<MJUMPSTART
.1a72c2	48		pha		                PHA
.1a72c3	4c fd 72	jmp $1a72fd	                JMP MGOSTACK        ; And push remaining registers and restart execution
.1a72c6	ea		nop		MJUMPSTART      NOP                 ; RTL increments PC pulled from stack, NOP leaves space for that
.1a72c7	5c 04 00 1a	jmp $1a0004	                JML MONITOR
.1a72cb					IMGO
.1a72cb	08		php		            PHP
.1a72cc	c2 20		rep #$20	            REP #$20
.1a72ce	48		pha		            PHA
.1a72cf	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a72d2	5b		tcd		            TCD
.1a72d3	68		pla		            PLA
.1a72d4	28		plp		            PLP
.1a72d5	e2 20		sep #$20	            SEP #$20
.1a72d7	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.1a72d9	f0 c9		beq $1a72a4	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.1a72db	c2 30		rep #$30	            REP #$30
.1a72dd	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.1a72df	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.1a72e3	a5 0f		lda $0857	                LDA MARG1+2
.1a72e5	8f 42 02 00	sta $000242	                STA @lCPUPBR
.1a72e9	af 46 02 00	lda $000246	MGORESTORE      LDA @lCPUX          ; Restore X and Y
.1a72ed	aa		tax		                TAX
.1a72ee	af 48 02 00	lda $000248	                LDA @lCPUY
.1a72f2	a8		tay		                TAY
.1a72f3	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.1a72f7	1b		tcs		                TCS
.1a72f8	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.1a72fc	5b		tcd		                TCD
.1a72fd					MGOSTACK
.1a72fd	e2 20		sep #$20	            SEP #$20
.1a72ff	af 4e 02 00	lda $00024e	                LDA @lCPUDBR        ; Restore the data bank register
.1a7303	48		pha		                PHA
.1a7304	ab		plb		                PLB
.1a7305	a9 5c		lda #$5c	                LDA #$5C            ; Save the JSL opcode
.1a7307	8f a2 08 00	sta $0008a2	                STA @lMJUMPINST
.1a730b	af 42 02 00	lda $000242	                LDA @lCPUPBR        ; Write PBR
.1a730f	8f a5 08 00	sta $0008a5	                STA @lMJUMPADDR+2
.1a7313	af 41 02 00	lda $000241	                LDA @lCPUPC+1       ; Write PCH
.1a7317	8f a4 08 00	sta $0008a4	                STA @lMJUMPADDR+1
.1a731b	af 40 02 00	lda $000240	                LDA @lCPUPC         ; Write PCL
.1a731f	8f a3 08 00	sta $0008a3	                STA @lMJUMPADDR
.1a7323	af 4f 02 00	lda $00024f	                LDA @lCPUFLAGS      ; Push processor status
.1a7327	48		pha		                PHA
.1a7328	c2 20		rep #$20	            REP #$20
.1a732a	af 44 02 00	lda $000244	                LDA @lCPUA          ; Restore A
.1a732e	28		plp		                PLP                 ; And the status register
.1a732f	5c a2 08 00	jmp $0008a2	                JML MJUMPINST       ; And jump to the target address
.1a7333					IMCOMPARE
.1a7333	08		php		                PHP
.1a7334	0b		phd		                PHD
.1a7335	8b		phb		                PHB
.1a7336	08		php		            PHP
.1a7337	e2 20		sep #$20	            SEP #$20
.1a7339	48		pha		            PHA
.1a733a	a9 1a		lda #$1a	            LDA #`MERRARGS
.1a733c	48		pha		            PHA
.1a733d	ab		plb		            PLB
.1a733e	68		pla		            PLA
.1a733f	28		plp		            PLP
.1a7340	08		php		            PHP
.1a7341	c2 20		rep #$20	            REP #$20
.1a7343	48		pha		            PHA
.1a7344	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a7347	5b		tcd		            TCD
.1a7348	68		pla		            PLA
.1a7349	28		plp		            PLP
.1a734a	c2 10		rep #$10	            REP #$10
.1a734c	e2 20		sep #$20	            SEP #$20
.1a734e	a5 31		lda $0879	                LDA MARG_LEN                ; Check the number of arguments provided
.1a7350	c9 02		cmp #$02	                CMP #2
.1a7352	f0 0c		beq $1a7360	                BEQ default_len             ; If 2: set MCOUNT to default of 1
.1a7354	c9 03		cmp #$03	                CMP #3
.1a7356	d0 11		bne $1a7369	                BNE bad_arguments           ; Otherwise, if not 3: print an error
.1a7358	c2 20		rep #$20	            REP #$20
.1a735a	a5 15		lda $085d	                LDA MARG3                   ; If 3: set MCOUNT to MARG3
.1a735c	85 47		sta $088f	                STA MCOUNT
.1a735e	80 11		bra $1a7371	                BRA compare
.1a7360					default_len
.1a7360	c2 20		rep #$20	            REP #$20
.1a7362	a9 01 00	lda #$0001	                LDA #1                      ; No length was provided, set MCOUNT to 1
.1a7365	85 47		sta $088f	                STA MCOUNT
.1a7367	80 08		bra $1a7371	                BRA compare
.1a7369	a2 a5 84	ldx #$84a5	bad_arguments   LDX #<>MERRARGS             ; The wrong number of arguments was provided
.1a736c	20 16 03	jsr $1a0316	            JSR PRINTS
.1a736f	80 35		bra $1a73a6	                BRA done
.1a7371	a5 0d		lda $0855	compare         LDA MARG1                   ; Set MTEMP to MARG1
.1a7373	85 4a		sta $0892	                STA MTEMP
.1a7375	a5 0f		lda $0857	                LDA MARG1+2
.1a7377	85 4c		sta $0894	                STA MTEMP+2
.1a7379	a0 00 00	ldy #$0000	                LDY #0
.1a737c					loop
.1a737c	e2 20		sep #$20	            SEP #$20
.1a737e	a7 4a		lda [$0892]	                LDA [MTEMP]                 ; Compare the byte at MTEMP
.1a7380	d7 11		cmp [$0859],y	                CMP [MARG2],Y               ; To the Yth byte from MARG2
.1a7382	f0 09		beq $1a738d	                BEQ continue                ; If they're the same, keep going
.1a7384	22 83 7c 1a	jsl $1a7c83	mismatch        JSL M_PR_ADDR               ; If they're different, print MTEMP
.1a7388	a9 20		lda #$20	                LDA #' '
.1a738a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a738d					continue
.1a738d	c2 20		rep #$20	            REP #$20
.1a738f	18		clc		                CLC                         ; Either way, increment MTEMP
.1a7390	a5 4a		lda $0892	                LDA MTEMP
.1a7392	69 01 00	adc #$0001	                ADC #1
.1a7395	85 4a		sta $0892	                STA MTEMP
.1a7397	a5 4c		lda $0894	                LDA MTEMP+2
.1a7399	69 00 00	adc #$0000	                ADC #0
.1a739c	85 4c		sta $0894	                STA MTEMP+2
.1a739e	c8		iny		                INY                         ; Increment Y
.1a739f	c4 47		cpy $088f	                CPY MCOUNT                  ; Try again unless we've checked MCOUNT bytes
.1a73a1	d0 d9		bne $1a737c	                BNE loop
.1a73a3	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a73a6					done
.1a73a6	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a73a9	ab		plb		                PLB
.1a73aa	2b		pld		                PLD
.1a73ab	28		plp		                PLP
.1a73ac	6b		rtl		                RTL
.1a73ad					IMRMODIFY
.1a73ad	08		php		                PHP
.1a73ae	0b		phd		                PHD
.1a73af	8b		phb		                PHB
.1a73b0	08		php		            PHP
.1a73b1	e2 20		sep #$20	            SEP #$20
.1a73b3	48		pha		            PHA
.1a73b4	a9 00		lda #$00	            LDA #0
.1a73b6	48		pha		            PHA
.1a73b7	ab		plb		            PLB
.1a73b8	68		pla		            PLA
.1a73b9	28		plp		            PLP
.1a73ba	08		php		            PHP
.1a73bb	c2 20		rep #$20	            REP #$20
.1a73bd	48		pha		            PHA
.1a73be	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a73c1	5b		tcd		            TCD
.1a73c2	68		pla		            PLA
.1a73c3	28		plp		            PLP
.1a73c4	e2 20		sep #$20	            SEP #$20
.1a73c6	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a73c8	f0 4f		beq $1a7419	                BEQ done            ; 0? Just quit
.1a73ca	a6 0d		ldx $0855	                LDX MARG1           ; Set the PC and PBR
.1a73cc	8e 40 02	stx $0240	                STX #CPUPC,B
.1a73cf	a6 0f		ldx $0857	                LDX MARG1+2
.1a73d1	8e 42 02	stx $0242	                STX #CPUPBR,B
.1a73d4	c9 01		cmp #$01	                CMP #1              ; Check the number of arguments
.1a73d6	f0 41		beq $1a7419	                BEQ done            ; 1? Just quit
.1a73d8	a6 11		ldx $0859	                LDX MARG2           ; Set A
.1a73da	8e 44 02	stx $0244	                STX #CPUA,B
.1a73dd	c9 02		cmp #$02	                CMP #2              ; Check the number of arguments
.1a73df	f0 38		beq $1a7419	                BEQ done            ; 2? Just quit
.1a73e1	a6 15		ldx $085d	                LDX MARG3           ; Set X
.1a73e3	8e 46 02	stx $0246	                STX #CPUX,B
.1a73e6	c9 03		cmp #$03	                CMP #3              ; Check the number of arguments
.1a73e8	f0 2f		beq $1a7419	                BEQ done            ; 3? Just quit
.1a73ea	a6 19		ldx $0861	                LDX MARG4           ; Set Y
.1a73ec	8e 48 02	stx $0248	                STX #CPUY,B
.1a73ef	c9 04		cmp #$04	                CMP #4              ; Check the number of arguments
.1a73f1	f0 26		beq $1a7419	                BEQ done            ; 4? Just quit
.1a73f3	a6 1d		ldx $0865	                LDX MARG5           ; Set SP
.1a73f5	8e 4a 02	stx $024a	                STX #CPUSTACK,B
.1a73f8	c9 05		cmp #$05	                CMP #5              ; Check the number of arguments
.1a73fa	f0 1d		beq $1a7419	                BEQ done            ; 5? Just quit
.1a73fc	e2 10		sep #$10	            SEP #$10
.1a73fe	a6 21		ldx $0869	                LDX MARG6           ; Set DBR
.1a7400	8e 4e 02	stx $024e	                STX #CPUDBR,B
.1a7403	c9 06		cmp #$06	                CMP #6              ; Check the number of arguments
.1a7405	f0 12		beq $1a7419	                BEQ done            ; 6? Just quit
.1a7407	c2 10		rep #$10	            REP #$10
.1a7409	a6 25		ldx $086d	                LDX MARG7           ; Set DP
.1a740b	8e 4c 02	stx $024c	                STX #CPUDP,B
.1a740e	c9 07		cmp #$07	                CMP #7              ; Check the number of arguments
.1a7410	f0 07		beq $1a7419	                BEQ done            ; 7? Just quit
.1a7412	e2 10		sep #$10	            SEP #$10
.1a7414	a6 29		ldx $0871	                LDX MARG8           ; Set flags
.1a7416	8e 4f 02	stx $024f	                STX #CPUFLAGS,B
.1a7419	ab		plb		done            PLB
.1a741a	2b		pld		                PLD
.1a741b	28		plp		                PLP
.1a741c	6b		rtl		                RTL
.1a741d					IMEXECUTE
.1a741d	08		php		                PHP
.1a741e	0b		phd		                PHD
.1a741f	8b		phb		                PHB
.1a7420	08		php		            PHP
.1a7421	c2 20		rep #$20	            REP #$20
.1a7423	48		pha		            PHA
.1a7424	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7427	5b		tcd		            TCD
.1a7428	68		pla		            PLA
.1a7429	28		plp		            PLP
.1a742a	e2 20		sep #$20	            SEP #$20
.1a742c	c2 10		rep #$10	            REP #$10
.1a742e	a2 00 00	ldx #$0000	                LDX #0
.1a7431	bf 12 85 1a	lda $1a8512,x	loop            LDA @lMCOMMANDS,X
.1a7435	f0 18		beq $1a744f	                BEQ done
.1a7437	c7 08		cmp [$0850]	                CMP [MCMD]
.1a7439	f0 03		beq $1a743e	                BEQ found
.1a743b	e8		inx		                INX
.1a743c	80 f3		bra $1a7431	                BRA loop
.1a743e					found
.1a743e	c2 20		rep #$20	            REP #$20
.1a7440	8a		txa		                TXA
.1a7441	0a		asl a		                ASL A
.1a7442	aa		tax		                TAX
.1a7443	bf 53 74 1a	lda $1a7453,x	                LDA dispatch,X
.1a7447	8f 2f 08 00	sta $00082f	                STA @lJMP16PTR
.1a744b	22 77 74 1a	jsl $1a7477	                JSL MDOCMD
.1a744f	ab		plb		done            PLB
.1a7450	2b		pld		                PLD
.1a7451	28		plp		                PLP
.1a7452	6b		rtl		                RTL
>1a7453	f0 6a				dispatch        .word <>MASSEMBLE
>1a7455	f8 6a				                .word <>MCOMPARE
>1a7457	fc 6a				                .word <>MDISASSEMBLE
>1a7459	00 6b				                .word <>MFILL
>1a745b	04 6b				                .word <>MGO
>1a745d	08 6b				                .word <>MJUMP
>1a745f	0c 6b				                .word <>MHUNT
>1a7461	10 6b				                .word <>MLOAD
>1a7463	14 6b				                .word <>MMEMORY
>1a7465	18 6b				                .word <>MREGISTERS
>1a7467	f4 6a				                .word <>MRMODIFY
>1a7469	1c 6b				                .word <>MSAVE
>1a746b	20 6b				                .word <>MTRANSFER
>1a746d	24 6b				                .word <>MVERIFY
>1a746f	ec 6e				                .word <>IMWIDTH
>1a7471	28 6b				                .word <>MEXIT
>1a7473	2c 6b				                .word <>MMODIFY
>1a7475	65 6b				                .word <>IMHELP
.1a7477					MDOCMD
.1a7477	6c 2f 08	jmp ($082f)	                JMP (JMP16PTR)

;******  Processing file: src\assembler.s

=0					ADDR_DP_IND_X = 0       ; (dd,X)
=1					ADDR_DP = 1             ; dd
=2					ADDR_IMM = 2            ; #dd
=3					ADDR_ABS = 3            ; dddd
=4					ADDR_DP_IND_Y = 4       ; (dd),Y
=5					ADDR_DP_X = 5           ; dd,X
=6					ADDR_ABS_Y = 6          ; dddd,Y
=7					ADDR_ABS_X = 7          ; dddd,X
=8					ADDR_ACC = 8            ; A
=9					ADDR_SP_R = 9           ; #d,S
=10					ADDR_DP_LONG = 10       ; [dd]
=11					ADDR_ABS_LONG = 11      ; dddddd
=12					ADDR_SP_R_Y = 12        ; #dd,S,Y
=13					ADDR_DP_Y_LONG = 13     ; [dd],Y
=14					ADDR_ABS_X_LONG = 14    ; dddddd,X
=15					ADDR_DP_IND = 15        ; (dd)
=16					ADDR_ABS_X_ID = 16      ; (dddd,X)
=17					ADDR_DP_Y = 17          ; dd,Y
=18					ADDR_PC_REL = 18        ; PC relative
=19					ADDR_IMPLIED = 19       ; Implied (no operand)
=20					ADDR_XYC = 20           ; #dd, #dd
=21					ADDR_ABS_IND = 21       ; (dddd)
=22					ADDR_PC_REL_LONG = 22   ; PC relative ()
=23					ADDR_ABS_IND_LONG = 23  ; [dddd]
=$80					OP_M_EFFECT = $80       ; Flag to indicate instruction is modified by M
=$40					OP_X_EFFECT = $40       ; Flag to indicate instruction is modified by X
.1a747a					IMASSEMBLE
.1a747a	08		php		                PHP
.1a747b	8b		phb		                PHB
.1a747c	0b		phd		                PHD
.1a747d	08		php		            PHP
.1a747e	c2 20		rep #$20	            REP #$20
.1a7480	48		pha		            PHA
.1a7481	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7484	5b		tcd		            TCD
.1a7485	68		pla		            PLA
.1a7486	28		plp		            PLP
.1a7487	e2 20		sep #$20	            SEP #$20
.1a7489	a5 31		lda $0879	                LDA MARG_LEN            ; Do we have at least 2 arguments?
.1a748b	c9 02		cmp #$02	                CMP #2
.1a748d	b0 03		bcs $1a7492	                BGE has_args            ; Yes: try to assemble the line
.1a748f	4c 20 76	jmp $1a7620	                JMP done                ; No: just return
.1a7492					has_args
.1a7492	c2 20		rep #$20	            REP #$20
.1a7494	a5 0d		lda $0855	                LDA MARG1               ; Set the monitor cursor to the address
.1a7496	85 32		sta $087a	                STA MCURSOR
.1a7498	a5 0f		lda $0857	                LDA MARG1+2
.1a749a	85 34		sta $087c	                STA MCURSOR+2
.1a749c	c2 20		rep #$20	            REP #$20
.1a749e	22 22 78 1a	jsl $1a7822	                JSL AS_FIND_MNEMO       ; Find the address of the mnemonic
.1a74a2	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.1a74a5	f0 10		beq $1a74b7	                BEQ bad_mnemonic        ; If not found, print bad mnemonic error message
.1a74a7	85 54		sta $089c	                STA MMNEMONIC
.1a74a9	e2 20		sep #$20	            SEP #$20
.1a74ab	a5 31		lda $0879	                LDA MARG_LEN            ; Check the number of arguments passed
.1a74ad	c9 03		cmp #$03	                CMP #3                  ; Were all three arguments provided?
.1a74af	f0 36		beq $1a74e7	                BEQ get_operand         ; Yes: parse the operand
.1a74b1	a9 13		lda #$13	                LDA #ADDR_IMPLIED       ; No: assume address mode is implied
.1a74b3	85 4f		sta $0897	                STA MADDR_MODE
.1a74b5	80 4c		bra $1a7503	                BRA get_opcode
.1a74b7					bad_mnemonic
.1a74b7	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a74ba	08		php		            PHP
.1a74bb	e2 20		sep #$20	            SEP #$20
.1a74bd	48		pha		            PHA
.1a74be	a9 1a		lda #$1a	            LDA #`MERRBADMNEMO
.1a74c0	48		pha		            PHA
.1a74c1	ab		plb		            PLB
.1a74c2	68		pla		            PLA
.1a74c3	28		plp		            PLP
.1a74c4	c2 10		rep #$10	            REP #$10
.1a74c6	a2 57 76	ldx #$7657	                LDX #<>MERRBADMNEMO
.1a74c9	20 16 03	jsr $1a0316	            JSR PRINTS
.1a74cc	4c 20 76	jmp $1a7620	                JMP done
.1a74cf					bad_operand
.1a74cf	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a74d2	08		php		            PHP
.1a74d3	e2 20		sep #$20	            SEP #$20
.1a74d5	48		pha		            PHA
.1a74d6	a9 1a		lda #$1a	            LDA #`MERRBADOPER
.1a74d8	48		pha		            PHA
.1a74d9	ab		plb		            PLB
.1a74da	68		pla		            PLA
.1a74db	28		plp		            PLP
.1a74dc	c2 10		rep #$10	            REP #$10
.1a74de	a2 66 76	ldx #$7666	                LDX #<>MERRBADOPER
.1a74e1	20 16 03	jsr $1a0316	            JSR PRINTS
.1a74e4	4c 20 76	jmp $1a7620	                JMP done
.1a74e7					get_operand
.1a74e7	e2 20		sep #$20	            SEP #$20
.1a74e9	22 58 78 1a	jsl $1a7858	                JSL AS_FIND_MODE        ; Find the addressing mode of the operand
.1a74ed	c9 ff		cmp #$ff	compare         CMP #$FF
.1a74ef	f0 de		beq $1a74cf	                BEQ bad_operand         ; If not found, print bad operand error message
.1a74f1	85 4f		sta $0897	                STA MADDR_MODE
.1a74f3	c9 03		cmp #$03	                CMP #ADDR_ABS           ; If mode is absolute or absolute long...
.1a74f5	f0 62		beq $1a7559	                BEQ check_for_pcrel     ; Check to see if the mnemonic is one of the branches
.1a74f7	c9 0b		cmp #$0b	                CMP #ADDR_ABS_LONG
.1a74f9	f0 5e		beq $1a7559	                BEQ check_for_pcrel
.1a74fb	c9 13		cmp #$13	                CMP #ADDR_IMPLIED       ; If mode is implied or accumulator, get the opcode
.1a74fd	f0 04		beq $1a7503	                BEQ get_opcode
.1a74ff	c9 08		cmp #$08	                CMP #ADDR_ACC
.1a7501	f0 00		beq $1a7503	                BEQ get_opcode
.1a7503	22 50 77 1a	jsl $1a7750	get_opcode      JSL AS_FIND_OPCODE      ; Find the opcode matching the two
.1a7507	b0 03		bcs $1a750c	                BCS save_opcode
.1a7509	4c e9 75	jmp $1a75e9	                JMP bad_mode            ; If opcode not found, print bad address mode error message
.1a750c	87 32		sta [$087a]	save_opcode     STA [MCURSOR]           ; Write the opcode to the address
.1a750e	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR        ; And point to the next byte
.1a7512	08		php		            PHP
.1a7513	e2 20		sep #$20	            SEP #$20
.1a7515	48		pha		            PHA
.1a7516	a9 00		lda #$00	            LDA #0
.1a7518	48		pha		            PHA
.1a7519	ab		plb		            PLB
.1a751a	68		pla		            PLA
.1a751b	28		plp		            PLP
.1a751c	c2 20		rep #$20	            REP #$20
.1a751e	a5 32		lda $087a	                LDA MCURSOR             ; Make MTEMPPTR a pointer to the machine code we're assembling
.1a7520	85 56		sta $089e	                STA MTEMPPTR
.1a7522	a5 34		lda $087c	                LDA MCURSOR+2
.1a7524	85 58		sta $08a0	                STA MTEMPPTR+2
.1a7526	e2 20		sep #$20	            SEP #$20
.1a7528	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check the address mode again
.1a752a	c9 12		cmp #$12	                CMP #ADDR_PC_REL        ; If it's PC relative
.1a752c	f0 6c		beq $1a759a	                BEQ compute_rel         ; Convert the address to an offset
.1a752e	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.1a7530	f0 68		beq $1a759a	                BEQ compute_rel
.1a7532	c9 14		cmp #$14	                CMP #ADDR_XYC           ; MVP/MVN addressing mode?
.1a7534	f0 7c		beq $1a75b2	                BEQ emit_2
.1a7536	29 3f		and #$3f	                AND #%00111111          ; Filter out the mode bits
.1a7538	c9 02		cmp #$02	                CMP #ADDR_IMM           ; Is it immediate?
.1a753a	d0 03		bne $1a753f	                BNE fixed_length        ; Yes: emit it as an immediate (variable length)
.1a753c	4c 17 76	jmp $1a7617	                JMP emit_imm
.1a753f					fixed_length
.1a753f	c2 20		rep #$20	            REP #$20
.1a7541	29 ff 00	and #$00ff	                AND #$00FF
.1a7544	aa		tax		                TAX
.1a7545	e2 20		sep #$20	            SEP #$20
.1a7547	bf 1f 81 1a	lda $1a811f,x	get_length      LDA ADDR_LENGTH,X       ; Get the number of bytes in the addressing mode
.1a754b	c9 03		cmp #$03	                CMP #$03
.1a754d	f0 57		beq $1a75a6	                BEQ emit_3
.1a754f	c9 02		cmp #$02	                CMP #$02
.1a7551	f0 5f		beq $1a75b2	                BEQ emit_2
.1a7553	c9 01		cmp #$01	                CMP #$01
.1a7555	f0 67		beq $1a75be	                BEQ emit_1
.1a7557	80 71		bra $1a75ca	                BRA next_line
.1a7559					check_for_pcrel
.1a7559	c2 20		rep #$20	            REP #$20
.1a755b	a5 54		lda $089c	                LDA MMNEMONIC
.1a755d	c9 97 7d	cmp #$7d97	                CMP #<>MN_BRA
.1a7560	f0 26		beq $1a7588	                BEQ is_pcrel
.1a7562	c9 fb 7d	cmp #$7dfb	                CMP #<>MN_BRL
.1a7565	f0 2a		beq $1a7591	                BEQ is_pcrel_long
.1a7567	c9 7b 7d	cmp #$7d7b	                CMP #<>MN_BCC
.1a756a	f0 1c		beq $1a7588	                BEQ is_pcrel
.1a756c	c9 7f 7d	cmp #$7d7f	                CMP #<>MN_BCS
.1a756f	f0 17		beq $1a7588	                BEQ is_pcrel
.1a7571	c9 87 7d	cmp #$7d87	                CMP #<>MN_BEQ
.1a7574	f0 12		beq $1a7588	                BEQ is_pcrel
.1a7576	c9 6f 7d	cmp #$7d6f	                CMP #<>MN_BMI
.1a7579	f0 0d		beq $1a7588	                BEQ is_pcrel
.1a757b	c9 83 7d	cmp #$7d83	                CMP #<>MN_BNE
.1a757e	f0 08		beq $1a7588	                BEQ is_pcrel
.1a7580	c9 6b 7d	cmp #$7d6b	                CMP #<>MN_BPL
.1a7583	f0 03		beq $1a7588	                BEQ is_pcrel
.1a7585	4c 03 75	jmp $1a7503	                JMP get_opcode
.1a7588					is_pcrel
.1a7588	e2 20		sep #$20	            SEP #$20
.1a758a	a9 12		lda #$12	                LDA #ADDR_PC_REL
.1a758c	85 4f		sta $0897	                STA MADDR_MODE
.1a758e	4c 03 75	jmp $1a7503	                JMP get_opcode
.1a7591					is_pcrel_long
.1a7591	e2 20		sep #$20	            SEP #$20
.1a7593	a9 16		lda #$16	                LDA #ADDR_PC_REL_LONG
.1a7595	85 4f		sta $0897	                STA MADDR_MODE
.1a7597	4c 03 75	jmp $1a7503	                JMP get_opcode
.1a759a	22 93 76 1a	jsl $1a7693	compute_rel     JSL AS_PC_OFFSET        ; Try to compute the offset
.1a759e	90 60		bcc $1a7600	                BCC bad_offset          ; If failed, it's a bad offset operand
.1a75a0	c9 02		cmp #$02	emit_rel        CMP #$02                ; If the offset is two bytes
.1a75a2	f0 0e		beq $1a75b2	                BEQ emit_2              ; Emit those two bytes
.1a75a4	80 18		bra $1a75be	                BRA emit_1              ; Otherwise emit just the one
.1a75a6	a0 02 00	ldy #$0002	emit_3          LDY #2                  ; Write bank byte of operand
.1a75a9	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a75ac	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a75ae	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a75b2	a0 01 00	ldy #$0001	emit_2          LDY #1                  ; Write high byte of operand
.1a75b5	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a75b8	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a75ba	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a75be	a0 00 00	ldy #$0000	emit_1          LDY #0                  ; Write low byte of operand
.1a75c1	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.1a75c4	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.1a75c6	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a75ca					next_line
.1a75ca	e2 20		sep #$20	            SEP #$20
.1a75cc	a9 41		lda #$41	                LDA #'A'
.1a75ce	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75d1	a9 20		lda #$20	                LDA #' '
.1a75d3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75d6	a6 32		ldx $087a	                LDX MCURSOR
.1a75d8	86 4a		stx $0892	                STX MTEMP
.1a75da	a6 34		ldx $087c	                LDX MCURSOR+2
.1a75dc	86 4c		stx $0894	                STX MTEMP+2
.1a75de	22 83 7c 1a	jsl $1a7c83	                JSL M_PR_ADDR
.1a75e2	a9 20		lda #$20	                LDA #' '
.1a75e4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a75e7	80 37		bra $1a7620	                BRA done
.1a75e9					bad_mode
.1a75e9	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a75ec	08		php		            PHP
.1a75ed	e2 20		sep #$20	            SEP #$20
.1a75ef	48		pha		            PHA
.1a75f0	a9 1a		lda #$1a	            LDA #`MERRBADMODE
.1a75f2	48		pha		            PHA
.1a75f3	ab		plb		            PLB
.1a75f4	68		pla		            PLA
.1a75f5	28		plp		            PLP
.1a75f6	c2 10		rep #$10	            REP #$10
.1a75f8	a2 24 76	ldx #$7624	                LDX #<>MERRBADMODE
.1a75fb	20 16 03	jsr $1a0316	            JSR PRINTS
.1a75fe	80 20		bra $1a7620	                BRA done
.1a7600					bad_offset
.1a7600	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a7603	08		php		            PHP
.1a7604	e2 20		sep #$20	            SEP #$20
.1a7606	48		pha		            PHA
.1a7607	a9 1a		lda #$1a	            LDA #`MERRBADOFFSET
.1a7609	48		pha		            PHA
.1a760a	ab		plb		            PLB
.1a760b	68		pla		            PLA
.1a760c	28		plp		            PLP
.1a760d	c2 10		rep #$10	            REP #$10
.1a760f	a2 74 76	ldx #$7674	                LDX #<>MERRBADOFFSET
.1a7612	20 16 03	jsr $1a0316	            JSR PRINTS
.1a7615	80 09		bra $1a7620	                BRA done
.1a7617	a5 4f		lda $0897	emit_imm        LDA MADDR_MODE          ; Check to see if long immediate was used
.1a7619	29 c0		and #$c0	                AND #%11000000
.1a761b	d0 95		bne $1a75b2	                BNE emit_2              ; Yes: emit two bytes
.1a761d	4c be 75	jmp $1a75be	                JMP emit_1              ; No: emit one byte
.1a7620	2b		pld		done            PLD
.1a7621	ab		plb		                PLB
.1a7622	28		plp		                PLP
.1a7623	6b		rtl		                RTL
>1a7624	41 64 64 72 65 73 73 69		MERRBADMODE     .null "Addressing mode not defined for that instruction.",CHAR_CR
>1a762c	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>1a763c	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>1a764c	74 72 75 63 74 69 6f 6e 2e 0d 00
>1a7657	42 61 64 20 6d 6e 65 6d		MERRBADMNEMO    .null "Bad mnemonic.",CHAR_CR
>1a765f	6f 6e 69 63 2e 0d 00
>1a7666	42 61 64 20 6f 70 65 72		MERRBADOPER     .null "Bad operand.",CHAR_CR
>1a766e	61 6e 64 2e 0d 00
>1a7674	52 65 6c 61 74 69 76 65		MERRBADOFFSET   .null "Relative offset is too large.",CHAR_CR
>1a767c	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>1a768c	61 72 67 65 2e 0d 00
.1a7693					AS_PC_OFFSET
.1a7693	08		php		                PHP
.1a7694	0b		phd		                PHD
.1a7695	08		php		            PHP
.1a7696	c2 20		rep #$20	            REP #$20
.1a7698	48		pha		            PHA
.1a7699	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a769c	5b		tcd		            TCD
.1a769d	68		pla		            PLA
.1a769e	28		plp		            PLP
.1a769f	e2 20		sep #$20	            SEP #$20
.1a76a1	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check to see if it 1 byte or 2 byte relative
.1a76a3	c9 12		cmp #$12	                CMP #ADDR_PC_REL
.1a76a5	f0 0a		beq $1a76b1	                BEQ is_short
.1a76a7	c2 20		rep #$20	            REP #$20
.1a76a9	18		clc		                CLC                     ; Branch is long. Compute where MCURSOR will be
.1a76aa	a5 32		lda $087a	                LDA MCURSOR             ; with two branch offset bytes
.1a76ac	69 02 00	adc #$0002	                ADC #2
.1a76af	80 08		bra $1a76b9	                BRA compute_cursor
.1a76b1					is_short
.1a76b1	c2 20		rep #$20	            REP #$20
.1a76b3	18		clc		                CLC                     ; Branch is short. Computer where MCURSOR will be
.1a76b4	a5 32		lda $087a	                LDA MCURSOR             ; with one branch offset byte
.1a76b6	69 01 00	adc #$0001	                ADC #1
.1a76b9	85 4a		sta $0892	compute_cursor  STA MTEMP
.1a76bb	a5 34		lda $087c	                LDA MCURSOR+2
.1a76bd	69 00 00	adc #$0000	                ADC #0
.1a76c0	85 4c		sta $0894	                STA MTEMP+2
.1a76c2	38		sec		                SEC                     ; MPARSEDNUM = MPARSEDNUM - MTEMP (MCURSOR after the instruction)
.1a76c3	a5 50		lda $0898	                LDA MPARSEDNUM
.1a76c5	e5 4a		sbc $0892	                SBC MTEMP
.1a76c7	85 50		sta $0898	                STA MPARSEDNUM
.1a76c9	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a76cb	e5 4c		sbc $0894	                SBC MTEMP+2
.1a76cd	85 52		sta $089a	                STA MPARSEDNUM+2
.1a76cf	e2 20		sep #$20	            SEP #$20
.1a76d1	a5 4f		lda $0897	                LDA MADDR_MODE
.1a76d3	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.1a76d5	f0 1e		beq $1a76f5	                BEQ check_long
.1a76d7	a5 50		lda $0898	                LDA MPARSEDNUM          ; Short offset... check if it's negative
.1a76d9	30 0c		bmi $1a76e7	                BMI check_short_neg
.1a76db	a5 51		lda $0899	                LDA MPARSEDNUM+1        ; Positive short offset... upper two bytes
.1a76dd	d0 2a		bne $1a7709	                BNE failure             ; Must be 0 or it's an overflow
.1a76df	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a76e1	d0 26		bne $1a7709	                BNE failure
.1a76e3	a9 01		lda #$01	                LDA #1                  ; Short offset is 1 byte
.1a76e5	80 26		bra $1a770d	                BRA success
.1a76e7	a5 51		lda $0899	check_short_neg LDA MPARSEDNUM+1        ; Negative short offset... upper two bytes
.1a76e9	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's an  overflow
.1a76eb	d0 1c		bne $1a7709	                BNE failure
.1a76ed	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a76ef	c9 ff		cmp #$ff	                CMP #$FF
.1a76f1	d0 16		bne $1a7709	                BNE failure
.1a76f3	80 18		bra $1a770d	                BRA success
.1a76f5	a5 51		lda $0899	check_long      LDA MPARSEDNUM+1        ; Long offset... check if it's negative
.1a76f7	30 06		bmi $1a76ff	                BMI check_long_neg
.1a76f9	a5 52		lda $089a	                LDA MPARSEDNUM+2        ; Positive long offset... upper byte
.1a76fb	d0 0c		bne $1a7709	                BNE failure             ; Must be 0 or it's an overflow
.1a76fd	80 0e		bra $1a770d	                BRA success
.1a76ff	a5 52		lda $089a	check_long_neg  LDA MPARSEDNUM+2        ; Negative offset... upper two bytes
.1a7701	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's and overflow
.1a7703	d0 04		bne $1a7709	                BNE failure
.1a7705	a9 02		lda #$02	                LDA #2                  ; Long offset is 2 bytes
.1a7707	80 04		bra $1a770d	                BRA success
.1a7709	2b		pld		failure         PLD
.1a770a	28		plp		                PLP
.1a770b	18		clc		                CLC
.1a770c	6b		rtl		                RTL
.1a770d	2b		pld		success         PLD
.1a770e	28		plp		                PLP
.1a770f	38		sec		                SEC
.1a7710	6b		rtl		                RTL
.1a7711					AS_SHIFT_HEX
.1a7711	08		php		                PHP
.1a7712	0b		phd		                PHD
.1a7713	c2 10		rep #$10	            REP #$10
.1a7715	da		phx		                PHX
.1a7716	08		php		            PHP
.1a7717	c2 20		rep #$20	            REP #$20
.1a7719	48		pha		            PHA
.1a771a	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a771d	5b		tcd		            TCD
.1a771e	68		pla		            PLA
.1a771f	28		plp		            PLP
.1a7720	e2 20		sep #$20	            SEP #$20
.1a7722	a2 00 00	ldx #$0000	                LDX #0
.1a7725	df 00 d0 1a	cmp $1ad000,x	seek_loop       CMP @lHEXDIGITS,X   ; Check the passed character against the hex digits
.1a7729	f0 08		beq $1a7733	                BEQ found
.1a772b	e8		inx		                INX                 ; Go to the next hex digit
.1a772c	e0 10 00	cpx #$0010	                CPX #$10            ; Are we out of digits?
.1a772f	f0 1b		beq $1a774c	                BEQ done            ; Yes... just return
.1a7731	80 f2		bra $1a7725	                BRA seek_loop
.1a7733					found
.1a7733	c2 20		rep #$20	            REP #$20
.1a7735	06 50		asl $0898	                ASL MPARSEDNUM
.1a7737	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7739	06 50		asl $0898	                ASL MPARSEDNUM
.1a773b	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a773d	06 50		asl $0898	                ASL MPARSEDNUM
.1a773f	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7741	06 50		asl $0898	                ASL MPARSEDNUM
.1a7743	26 52		rol $089a	                ROL MPARSEDNUM+2
.1a7745	e2 20		sep #$20	            SEP #$20
.1a7747	8a		txa		                TXA
.1a7748	05 50		ora $0898	                ORA MPARSEDNUM
.1a774a	85 50		sta $0898	                STA MPARSEDNUM
.1a774c	fa		plx		done            PLX
.1a774d	2b		pld		                PLD
.1a774e	28		plp		                PLP
.1a774f	6b		rtl		                RTL
.1a7750					AS_FIND_OPCODE
.1a7750	0b		phd		                PHD
.1a7751	8b		phb		                PHB
.1a7752	08		php		            PHP
.1a7753	c2 20		rep #$20	            REP #$20
.1a7755	48		pha		            PHA
.1a7756	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7759	5b		tcd		            TCD
.1a775a	68		pla		            PLA
.1a775b	28		plp		            PLP
.1a775c	08		php		            PHP
.1a775d	e2 20		sep #$20	            SEP #$20
.1a775f	48		pha		            PHA
.1a7760	a9 1a		lda #$1a	            LDA #`MNEMONIC_TAB
.1a7762	48		pha		            PHA
.1a7763	ab		plb		            PLB
.1a7764	68		pla		            PLA
.1a7765	28		plp		            PLP
.1a7766	e2 20		sep #$20	            SEP #$20
.1a7768	a5 4f		lda $0897	                LDA MADDR_MODE
.1a776a	29 3f		and #$3f	                AND #%00111111
.1a776c	85 4a		sta $0892	                STA MTEMP
.1a776e	c2 30		rep #$30	            REP #$30
.1a7770	a2 00 00	ldx #$0000	                LDX #0
.1a7773	a0 00 00	ldy #$0000	                LDY #0
.1a7776	bd 1d 7e	lda $1a7e1d,x	mnemonic_loop   LDA MNEMONIC_TAB,X      ; Get the mnemonic from the opcode table
.1a7779	f0 1b		beq $1a7796	                BEQ not_found           ; If it's 0, we did not find the mnemonic
.1a777b	c5 54		cmp $089c	                CMP MMNEMONIC           ; Does it match the passed mnemonic?
.1a777d	d0 0d		bne $1a778c	                BNE next_opcode         ; No: go to the next opcode
.1a777f					check_mode
.1a777f	e2 20		sep #$20	            SEP #$20
.1a7781	b9 1f 80	lda $1a801f,y	                LDA ADDRESS_TAB,Y       ; Get the corresponding address mode
.1a7784	29 3f		and #$3f	                AND #%00111111          ; Filter out effect bits
.1a7786	c5 4a		cmp $0892	                CMP MTEMP
.1a7788	f0 07		beq $1a7791	                BEQ found               ; Yes: we found the opcode
.1a778a	c2 20		rep #$20	            REP #$20
.1a778c	e8		inx		next_opcode     INX                     ; Point to the next mnemonic in the table
.1a778d	e8		inx		                INX
.1a778e	c8		iny		                INY
.1a778f	80 e5		bra $1a7776	                BRA mnemonic_loop       ; And check it
.1a7791	98		tya		found           TYA
.1a7792	38		sec		                SEC                     ; Set carry to show success
.1a7793	ab		plb		                PLB
.1a7794	2b		pld		                PLD
.1a7795	6b		rtl		                RTL
.1a7796	18		clc		not_found       CLC                     ; Clear carry to show failure
.1a7797	ab		plb		                PLB
.1a7798	2b		pld		                PLD
.1a7799	6b		rtl		                RTL
.1a779a					AS_STR_MATCH
.1a779a	08		php		                PHP
.1a779b	0b		phd		                PHD
.1a779c	08		php		            PHP
.1a779d	c2 20		rep #$20	            REP #$20
.1a779f	48		pha		            PHA
.1a77a0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a77a3	5b		tcd		            TCD
.1a77a4	68		pla		            PLA
.1a77a5	28		plp		            PLP
.1a77a6	e2 20		sep #$20	            SEP #$20
.1a77a8	c2 10		rep #$10	            REP #$10
.1a77aa	a0 00 00	ldy #$0000	                LDY #0
.1a77ad	64 50		stz $0898	                STZ MPARSEDNUM      ; Set parsed number to 0 in anticipation of
.1a77af	64 52		stz $089a	                STZ MPARSEDNUM+2    ; hex digits in the pattern
.1a77b1	b7 03		lda [$084b],y	match_loop      LDA [MCMP_TEXT],Y   ; Get the pattern character
.1a77b3	f0 11		beq $1a77c6	                BEQ nul_check       ; If at end of pattern, check for end of test string
.1a77b5	c9 64		cmp #$64	                CMP #'d'            ; Is it a digit?
.1a77b7	f0 19		beq $1a77d2	                BEQ check_digit     ; Yes: do special check for hex digit
.1a77b9	48		pha		compare         PHA
.1a77ba	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.1a77bc	85 4a		sta $0892	                STA MTEMP
.1a77be	68		pla		                PLA
.1a77bf	c5 4a		cmp $0892	                CMP MTEMP           ; Does it match the character to test?
.1a77c1	d0 0b		bne $1a77ce	                BNE return_false    ; No: return fail
.1a77c3	c8		iny		next_char       INY                 ; Yes: test the next character
.1a77c4	80 eb		bra $1a77b1	                BRA match_loop
.1a77c6	b7 36		lda [$087e],y	nul_check       LDA [MLINEBUF],Y    ; Check to see that we're at the end of the test string
.1a77c8	d0 04		bne $1a77ce	                BNE return_false    ; If not: return false
.1a77ca	2b		pld		return_true     PLD
.1a77cb	28		plp		                PLP                 ; Return true
.1a77cc	38		sec		                SEC
.1a77cd	6b		rtl		                RTL
.1a77ce	2b		pld		return_false    PLD
.1a77cf	28		plp		                PLP                 ; Return false
.1a77d0	18		clc		                CLC
.1a77d1	6b		rtl		                RTL
.1a77d2					check_digit
.1a77d2	e2 20		sep #$20	            SEP #$20
.1a77d4	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.1a77d6	c9 3a		cmp #$3a	                CMP #'9'+1
.1a77d8	b0 04		bcs $1a77de	                BCS check_AF
.1a77da	c9 30		cmp #$30	                CMP #'0'
.1a77dc	b0 14		bcs $1a77f2	                BCS shift_digit     ; character is in [0..9]
.1a77de	c9 47		cmp #$47	check_AF        CMP #'F'+1
.1a77e0	b0 04		bcs $1a77e6	                BCS check_lc        ; check lower case
.1a77e2	c9 41		cmp #$41	                CMP #'A'
.1a77e4	b0 0c		bcs $1a77f2	                BCS shift_digit     ; character is in [A..F]
.1a77e6	c9 67		cmp #$67	check_lc        CMP #'f'+1
.1a77e8	b0 e4		bcs $1a77ce	                BCS return_false    ; check lower case
.1a77ea	c9 61		cmp #$61	                CMP #'a'
.1a77ec	b0 02		bcs $1a77f0	                BCS to_upcase       ; character is in [A..F]
.1a77ee	80 de		bra $1a77ce	                BRA return_false    ; No match found... return false
.1a77f0	29 df		and #$df	to_upcase       AND #%11011111      ; Convert lower case to upper case
.1a77f2	22 11 77 1a	jsl $1a7711	shift_digit     JSL AS_SHIFT_HEX    ; Shift the digit into MPARSEDNUM
.1a77f6	80 cb		bra $1a77c3	                BRA next_char       ; And check the next character
.1a77f8					AS_MCMP_NEXT
.1a77f8	0b		phd		                PHD
.1a77f9	08		php		            PHP
.1a77fa	c2 20		rep #$20	            REP #$20
.1a77fc	48		pha		            PHA
.1a77fd	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7800	5b		tcd		            TCD
.1a7801	68		pla		            PLA
.1a7802	28		plp		            PLP
.1a7803	a0 00 00	ldy #$0000	                LDY #0
.1a7806	e2 20		sep #$20	            SEP #$20
.1a7808	b7 03		lda [$084b],y	loop            LDA [MCMP_TEXT],Y   ; Check to see if we have gotten to the NUL
.1a780a	f0 03		beq $1a780f	                BEQ found_nul
.1a780c	c8		iny		                INY
.1a780d	80 f9		bra $1a7808	                BRA loop
.1a780f					found_nul
.1a780f	c2 20		rep #$20	            REP #$20
.1a7811	c8		iny		                INY                 ; Got to NUL... point to next byte
.1a7812	5a		phy		                PHY
.1a7813	68		pla		                PLA                 ; And add that index to MCMP_TEXT pointer
.1a7814	18		clc		                CLC
.1a7815	65 03		adc $084b	                ADC MCMP_TEXT
.1a7817	85 03		sta $084b	                STA MCMP_TEXT
.1a7819	a5 05		lda $084d	                LDA MCMP_TEXT+2
.1a781b	69 00 00	adc #$0000	                ADC #0
.1a781e	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7820	2b		pld		                PLD
.1a7821	6b		rtl		                RTL
.1a7822					AS_FIND_MNEMO
.1a7822	0b		phd		                PHD
.1a7823	08		php		            PHP
.1a7824	c2 20		rep #$20	            REP #$20
.1a7826	48		pha		            PHA
.1a7827	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a782a	5b		tcd		            TCD
.1a782b	68		pla		            PLA
.1a782c	28		plp		            PLP
.1a782d	c2 20		rep #$20	            REP #$20
.1a782f	a5 11		lda $0859	                LDA MARG2                   ; Point MLINEBUF to the text
.1a7831	85 36		sta $087e	                STA MLINEBUF
.1a7833	a5 13		lda $085b	                LDA MARG2+2
.1a7835	85 38		sta $0880	                STA MLINEBUF+2
.1a7837	a9 ab 7c	lda #$7cab	                LDA #<>MNEMONICS_TAB        ; Point to the first mnemonic
.1a783a	85 03		sta $084b	                STA MCMP_TEXT
.1a783c	a9 1a 00	lda #$001a	                LDA #`MNEMONICS_TAB
.1a783f	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7841	22 9a 77 1a	jsl $1a779a	match_loop      JSL AS_STR_MATCH            ; Check to see if the text matches the mnemonic
.1a7845	b0 0d		bcs $1a7854	                BCS found_mnemonic          ; If so: return that we found it
.1a7847	22 f8 77 1a	jsl $1a77f8	                JSL AS_MCMP_NEXT            ; Point to the next mnemonic
.1a784b	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Check to see if it's NUL
.1a784d	d0 f2		bne $1a7841	                BNE match_loop              ; If not, check this next mnemonic
.1a784f	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Otherwise, return -1
.1a7852	80 02		bra $1a7856	                BRA done
.1a7854	a5 03		lda $084b	found_mnemonic  LDA MCMP_TEXT               ; Found it: return the address
.1a7856	2b		pld		done            PLD
.1a7857	6b		rtl		                RTL
.1a7858					AS_FIND_MODE
.1a7858	08		php		                PHP
.1a7859	0b		phd		                PHD
.1a785a	08		php		            PHP
.1a785b	c2 20		rep #$20	            REP #$20
.1a785d	48		pha		            PHA
.1a785e	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7861	5b		tcd		            TCD
.1a7862	68		pla		            PLA
.1a7863	28		plp		            PLP
.1a7864	c2 30		rep #$30	            REP #$30
.1a7866	a5 15		lda $085d	                LDA MARG3                   ; Point MLINEBUF to the operand
.1a7868	85 36		sta $087e	                STA MLINEBUF
.1a786a	a5 17		lda $085f	                LDA MARG3+2
.1a786c	85 38		sta $0880	                STA MLINEBUF+2
.1a786e	a9 37 81	lda #$8137	                LDA #<>ADDR_PATTERNS        ; Point to the first address mode pattern to check
.1a7871	85 03		sta $084b	                STA MCMP_TEXT
.1a7873	a9 1a 00	lda #$001a	                LDA #`ADDR_PATTERNS
.1a7876	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7878	22 9a 77 1a	jsl $1a779a	match_loop      JSL AS_STR_MATCH            ; Check to see if the pattern matches the operand
.1a787c	b0 22		bcs $1a78a0	                BCS is_match                ; Yes: Find address mode code
.1a787e	22 f8 77 1a	jsl $1a77f8	                JSL AS_MCMP_NEXT            ; Point to the address mode
.1a7882	c2 20		rep #$20	            REP #$20
.1a7884	18		clc		                CLC                         ; Point to the first byte of the next pattern
.1a7885	a5 03		lda $084b	                LDA MCMP_TEXT
.1a7887	69 01 00	adc #$0001	                ADC #1
.1a788a	85 03		sta $084b	                STA MCMP_TEXT
.1a788c	a5 05		lda $084d	                LDA MCMP_TEXT+2
.1a788e	69 00 00	adc #$0000	                ADC #0
.1a7891	85 05		sta $084d	                STA MCMP_TEXT+2
.1a7893	e2 20		sep #$20	            SEP #$20
.1a7895	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Is the first byte 0?
.1a7897	d0 df		bne $1a7878	                BNE match_loop              ; No: check this next pattern
.1a7899	c2 20		rep #$20	            REP #$20
.1a789b	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Yes: we didn't find a matching pattern, return -1
.1a789e	80 0d		bra $1a78ad	                BRA done
.1a78a0	22 f8 77 1a	jsl $1a77f8	is_match        JSL AS_MCMP_NEXT            ; Point to the address mode
.1a78a4	e2 20		sep #$20	            SEP #$20
.1a78a6	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Get the corresponding address mode code (a byte)
.1a78a8	c2 20		rep #$20	            REP #$20
.1a78aa	29 ff 00	and #$00ff	                AND #$00FF
.1a78ad	2b		pld		done            PLD
.1a78ae	28		plp		                PLP
.1a78af	6b		rtl		                RTL
.1a78b0					IMDISASSEMBLE
.1a78b0	08		php		                PHP
.1a78b1	8b		phb		                PHB
.1a78b2	0b		phd		                PHD
.1a78b3	08		php		            PHP
.1a78b4	c2 20		rep #$20	            REP #$20
.1a78b6	48		pha		            PHA
.1a78b7	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a78ba	5b		tcd		            TCD
.1a78bb	68		pla		            PLA
.1a78bc	28		plp		            PLP
.1a78bd	e2 20		sep #$20	            SEP #$20
.1a78bf	a9 00		lda #$00	                LDA #0
.1a78c1	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT     ; Clear the pagination line counter
.1a78c5	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.1a78c7	c9 02		cmp #$02	                CMP #2
.1a78c9	b0 16		bcs $1a78e1	                BGE set_cursor      ; 2>= arguments? Use them as-is
.1a78cb	c9 01		cmp #$01	                CMP #1
.1a78cd	90 20		bcc $1a78ef	                BLT no_args         ; No arguments passed? Use defaults
.1a78cf	c2 20		rep #$20	            REP #$20
.1a78d1	18		clc		                CLC
.1a78d2	a5 0d		lda $0855	                LDA MARG1
.1a78d4	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a78d7	85 11		sta $0859	                STA MARG2
.1a78d9	e2 20		sep #$20	            SEP #$20
.1a78db	a5 0f		lda $0857	                LDA MARG1+2
.1a78dd	69 00		adc #$00	                ADC #0
.1a78df	85 13		sta $085b	                STA MARG2+2
.1a78e1					set_cursor
.1a78e1	c2 20		rep #$20	            REP #$20
.1a78e3	a5 0d		lda $0855	                LDA MARG1
.1a78e5	85 32		sta $087a	                STA MCURSOR
.1a78e7	e2 20		sep #$20	            SEP #$20
.1a78e9	a5 0f		lda $0857	                LDA MARG1+2
.1a78eb	85 34		sta $087c	                STA MCURSOR+2
.1a78ed	80 12		bra $1a7901	                BRA dasm_loop
.1a78ef					no_args
.1a78ef	c2 20		rep #$20	            REP #$20
.1a78f1	18		clc		                CLC
.1a78f2	a5 32		lda $087a	                LDA MCURSOR
.1a78f4	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.1a78f7	85 11		sta $0859	                STA MARG2
.1a78f9	e2 20		sep #$20	            SEP #$20
.1a78fb	a5 34		lda $087c	                LDA MCURSOR+2
.1a78fd	69 00		adc #$00	                ADC #0
.1a78ff	85 13		sta $085b	                STA MARG2+2
.1a7901	22 1c 79 1a	jsl $1a791c	dasm_loop       JSL DS_PR_LINE
.1a7905	e2 20		sep #$20	            SEP #$20
.1a7907	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.1a7909	c5 13		cmp $085b	                CMP MARG2+2
.1a790b	90 f4		bcc $1a7901	                BLT dasm_loop           ; No: continue
.1a790d	c2 20		rep #$20	            REP #$20
.1a790f	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.1a7911	c5 11		cmp $0859	                CMP MARG2
.1a7913	90 ec		bcc $1a7901	                BLT dasm_loop           ; Nope... keep going
.1a7915					done
.1a7915	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a7918	2b		pld		                PLD
.1a7919	ab		plb		                PLB
.1a791a	28		plp		                PLP
.1a791b	6b		rtl		                RTL
.1a791c					DS_PR_LINE
.1a791c	08		php		                PHP
.1a791d	0b		phd		                PHD
.1a791e	e2 20		sep #$20	            SEP #$20
.1a7920	a9 41		lda #$41	                LDA #'A'
.1a7922	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7925	a9 20		lda #$20	                LDA #' '
.1a7927	20 18 00	jsr $1a0018	            JSR PRINTC
.1a792a	08		php		            PHP
.1a792b	c2 20		rep #$20	            REP #$20
.1a792d	48		pha		            PHA
.1a792e	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a7931	5b		tcd		            TCD
.1a7932	68		pla		            PLA
.1a7933	28		plp		            PLP
.1a7934	c2 20		rep #$20	            REP #$20
.1a7936	a5 00		lda $087a	                LDA MCURSOR
.1a7938	85 18		sta $0892	                STA MTEMP
.1a793a	e2 20		sep #$20	            SEP #$20
.1a793c	a5 02		lda $087c	                LDA MCURSOR+2
.1a793e	85 1a		sta $0894	                STA MTEMP+2
.1a7940	22 83 7c 1a	jsl $1a7c83	                JSL M_PR_ADDR
.1a7944	a9 20		lda #$20	                LDA #' '
.1a7946	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7949	c2 20		rep #$20	            REP #$20
.1a794b	18		clc		                CLC
.1a794c	a5 00		lda $087a	                LDA MCURSOR
.1a794e	69 01 00	adc #$0001	                ADC #1
.1a7951	85 18		sta $0892	                STA MTEMP
.1a7953	e2 20		sep #$20	            SEP #$20
.1a7955	a5 02		lda $087c	                LDA MCURSOR+2
.1a7957	69 00		adc #$00	                ADC #0
.1a7959	85 1a		sta $0894	                STA MTEMP+2
.1a795b	e2 20		sep #$20	            SEP #$20
.1a795d	c2 10		rep #$10	            REP #$10
.1a795f	a7 00		lda [$087a]	                LDA [MCURSOR]           ; Get the mnemonic
.1a7961	c9 c2		cmp #$c2	                CMP #$C2                ; Is it REP?
.1a7963	d0 0b		bne $1a7970	                BNE check_sep           ; No: check to see if it is SEP
.1a7965	48		pha		handle_rep      PHA
.1a7966	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.1a7968	49 ff		eor #$ff	                EOR #$FF                ; Invert the bits
.1a796a	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Mask off the bits in the CPUSTAT
.1a796e	80 0b		bra $1a797b	                BRA save_stat
.1a7970	c9 e2		cmp #$e2	check_sep       CMP #$E2                ; Is it SEP?
.1a7972	d0 0c		bne $1a7980	                BNE get_op_index        ; No: process the instruction regularly
.1a7974	48		pha		handle_sep      PHA
.1a7975	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.1a7977	0f 96 08 00	ora $000896	                ORA @lMCPUSTAT          ; Activate the bits in the CPUSTAT
.1a797b	8f 96 08 00	sta $000896	save_stat       STA @lMCPUSTAT          ; And save it back
.1a797f	68		pla		                PLA
.1a7980					get_op_index
.1a7980	c2 20		rep #$20	            REP #$20
.1a7982	29 ff 00	and #$00ff	                AND #$00FF
.1a7985	0a		asl a		                ASL A
.1a7986	aa		tax		                TAX                     ; Get the index into the mnemonic lookup table
.1a7987	bf 1d 7e 1a	lda $1a7e1d,x	                LDA @lMNEMONIC_TAB,X    ; Get the mnemonic
.1a798b	aa		tax		                TAX
.1a798c	22 fd 7b 1a	jsl $1a7bfd	                JSL DS_PR_MNEMONIC      ; And print it
.1a7990	e2 20		sep #$20	            SEP #$20
.1a7992	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a7994	aa		tax		                TAX
.1a7995	bf 1f 80 1a	lda $1a801f,x	pr_operand      LDA @lADDRESS_TAB,X     ; Get the addressing mode for the instruction
.1a7999	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR        ; Advance the cursor to the next byte
.1a799d	22 aa 79 1a	jsl $1a79aa	                JSL DS_PR_OPERAND       ; And print the correct operand
.1a79a1	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a79a4	20 a0 02	jsr $1a02a0	            JSR PAGINATE
.1a79a7	2b		pld		                PLD
.1a79a8	28		plp		                PLP
.1a79a9	6b		rtl		                RTL
.1a79aa					DS_PR_OPERAND
.1a79aa	08		php		                PHP
.1a79ab	e2 20		sep #$20	            SEP #$20
.1a79ad	48		pha		                PHA             ; Save the address mode so we can get to the M and X flags
.1a79ae	29 3f		and #$3f	                AND #%00111111  ; Filter out the mode flags
.1a79b0	0a		asl a		                ASL A           ; Compute the index to the table
.1a79b1	c2 10		rep #$10	            REP #$10
.1a79b3	aa		tax		                TAX
.1a79b4	68		pla		                PLA             ; Restore A
.1a79b5	7c b8 79	jmp ($1a79b8,x)	                JMP (dispatch,X)
>1a79b8	e8 79				dispatch        .word <>is_dp_ind_x
>1a79ba	03 7a				                .word <>is_dp
>1a79bc	0a 7a				                .word <>is_imm
>1a79be	2f 7a				                .word <>is_abs
>1a79c0	36 7a				                .word <>is_dp_ind_y
>1a79c2	51 7a				                .word <>is_dp_x
>1a79c4	73 7a				                .word <>is_abs_y
>1a79c6	84 7a				                .word <>is_abs_x
>1a79c8	c1 7a				                .word <>is_accumulator
>1a79ca	c9 7a				                .word <>is_stack_r
>1a79cc	da 7a				                .word <>is_dp_long
>1a79ce	eb 7a				                .word <>is_abs_long
>1a79d0	f2 7a				                .word <>is_stack_r_y
>1a79d2	17 7b				                .word <>is_dp_y_long
>1a79d4	44 7b				                .word <>is_abs_x_long
>1a79d6	b0 7a				                .word <>is_dp_ind
>1a79d8	95 7a				                .word <>is_abs_x_id
>1a79da	62 7a				                .word <>is_dp_y
>1a79dc	37 7b				                .word <>is_pc_rel
>1a79de	41 7b				                .word <>is_implied
>1a79e0	55 7b				                .word <>is_xyc
>1a79e2	84 7b				                .word <>is_abs_ind
>1a79e4	32 7b				                .word <>is_pc_rel_long
>1a79e6	95 7b				                .word <>is_abs_ind_long
.1a79e8	a9 28		lda #$28	is_dp_ind_x     LDA #'('                ; Print (dd,X)
.1a79ea	20 18 00	jsr $1a0018	            JSR PRINTC
.1a79ed	22 ac 7b 1a	jsl $1a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.1a79f1	a9 2c		lda #$2c	                LDA #','
.1a79f3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a79f6	a9 58		lda #$58	                LDA #'X'
.1a79f8	20 18 00	jsr $1a0018	            JSR PRINTC
.1a79fb	a9 29		lda #$29	                LDA #')'
.1a79fd	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a00	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a03	22 ac 7b 1a	jsl $1a7bac	is_dp           JSL DS_PR_OPERAND1      ; Print dd
.1a7a07	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a0a					is_imm
.1a7a0a	e2 20		sep #$20	            SEP #$20
.1a7a0c	48		pha		                PHA
.1a7a0d	a9 23		lda #$23	                LDA #'#'
.1a7a0f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a12	68		pla		                PLA
.1a7a13	29 c0		and #$c0	                AND #%11000000          ; Filter so we just look at the mode bits
.1a7a15	c9 00		cmp #$00	                CMP #$00                ; Are any set to check?
.1a7a17	f0 0f		beq $1a7a28	                BEQ is_imm_short        ; No: treat it as a short always
.1a7a19	4a		lsr a		                LSR A                   ; Move the flag bits right by 2 to match
.1a7a1a	4a		lsr a		                LSR A                   ; the positions of the bits in the CPU status register
.1a7a1b	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Otherwise, filter the mode bit we care about
.1a7a1f	d0 07		bne $1a7a28	                BNE is_imm_short        ; If it is set, immediate operation is short
.1a7a21	22 b6 7b 1a	jsl $1a7bb6	                JSL DS_PR_OPERAND2      ; Print dddd
.1a7a25	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a28	22 ac 7b 1a	jsl $1a7bac	is_imm_short    JSL DS_PR_OPERAND1      ; Print dd
.1a7a2c	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a2f	22 b6 7b 1a	jsl $1a7bb6	is_abs          JSL DS_PR_OPERAND2      ; Print dddd
.1a7a33	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a36	a9 28		lda #$28	is_dp_ind_y     LDA #'('                ; Print (dd),Y
.1a7a38	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a3b	22 ac 7b 1a	jsl $1a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.1a7a3f	a9 29		lda #$29	                LDA #')'
.1a7a41	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a44	a9 2c		lda #$2c	                LDA #','
.1a7a46	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a49	a9 59		lda #$59	                LDA #'Y'
.1a7a4b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a4e	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a51	22 ac 7b 1a	jsl $1a7bac	is_dp_x         JSL DS_PR_OPERAND1      ; Print dd,X
.1a7a55	a9 2c		lda #$2c	                LDA #','
.1a7a57	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a5a	a9 58		lda #$58	                LDA #'X'
.1a7a5c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a5f	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a62	22 ac 7b 1a	jsl $1a7bac	is_dp_y         JSL DS_PR_OPERAND1      ; Print dd,Y
.1a7a66	a9 2c		lda #$2c	                LDA #','
.1a7a68	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a6b	a9 59		lda #$59	                LDA #'Y'
.1a7a6d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a70	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a73	22 b6 7b 1a	jsl $1a7bb6	is_abs_y        JSL DS_PR_OPERAND2      ; Print dddd,Y
.1a7a77	a9 2c		lda #$2c	                LDA #','
.1a7a79	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a7c	a9 59		lda #$59	                LDA #'Y'
.1a7a7e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a81	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a84	22 b6 7b 1a	jsl $1a7bb6	is_abs_x        JSL DS_PR_OPERAND2      ; Print dddd,X
.1a7a88	a9 2c		lda #$2c	                LDA #','
.1a7a8a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a8d	a9 58		lda #$58	                LDA #'X'
.1a7a8f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a92	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7a95	a9 28		lda #$28	is_abs_x_id     LDA #'('
.1a7a97	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7a9a	22 b6 7b 1a	jsl $1a7bb6	                JSL DS_PR_OPERAND2      ; Print (dddd,X)
.1a7a9e	a9 2c		lda #$2c	                LDA #','
.1a7aa0	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7aa3	a9 58		lda #$58	                LDA #'X'
.1a7aa5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7aa8	a9 29		lda #$29	                LDA #')'
.1a7aaa	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7aad	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7ab0	a9 28		lda #$28	is_dp_ind       LDA #'('
.1a7ab2	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ab5	22 ac 7b 1a	jsl $1a7bac	                JSL DS_PR_OPERAND1      ; Print (dd)
.1a7ab9	a9 29		lda #$29	                LDA #')'
.1a7abb	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7abe	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7ac1	a9 41		lda #$41	is_accumulator  LDA #'A'                ; Print A
.1a7ac3	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ac6	4c aa 7b	jmp $1a7baa	                JMP done
.1a7ac9	22 ac 7b 1a	jsl $1a7bac	is_stack_r      JSL DS_PR_OPERAND1      ; Print dd,S
.1a7acd	a9 2c		lda #$2c	                LDA #','
.1a7acf	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ad2	a9 53		lda #$53	                LDA #'S'
.1a7ad4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ad7	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7ada	a9 5b		lda #$5b	is_dp_long      LDA #'['                ; [dd]
.1a7adc	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7adf	22 ac 7b 1a	jsl $1a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.1a7ae3	a9 5d		lda #$5d	                LDA #']'
.1a7ae5	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ae8	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7aeb	22 c4 7b 1a	jsl $1a7bc4	is_abs_long     JSL DS_PR_OPERAND3      ; Print dddddd
.1a7aef	4c aa 7b	jmp $1a7baa	                JMP done
.1a7af2	a9 28		lda #$28	is_stack_r_y    LDA #'('                ; (dd,S),Y
.1a7af4	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7af7	22 ac 7b 1a	jsl $1a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.1a7afb	a9 2c		lda #$2c	                LDA #','
.1a7afd	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b00	a9 53		lda #$53	                LDA #'S'
.1a7b02	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b05	a9 29		lda #$29	                LDA #')'
.1a7b07	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b0a	a9 2c		lda #$2c	                LDA #','
.1a7b0c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b0f	a9 59		lda #$59	                LDA #'Y'
.1a7b11	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b14	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7b17	a9 5b		lda #$5b	is_dp_y_long    LDA #'['                ; [dd],Y
.1a7b19	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b1c	22 ac 7b 1a	jsl $1a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.1a7b20	a9 5d		lda #$5d	                LDA #']'
.1a7b22	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b25	a9 2c		lda #$2c	                LDA #','
.1a7b27	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b2a	a9 59		lda #$59	                LDA #'Y'
.1a7b2c	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b2f	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7b32	a0 02 00	ldy #$0002	is_pc_rel_long  LDY #2
.1a7b35	80 03		bra $1a7b3a	                BRA do_pcrel
.1a7b37	a0 01 00	ldy #$0001	is_pc_rel       LDY #1
.1a7b3a	22 2a 7c 1a	jsl $1a7c2a	do_pcrel        JSL DS_PR_PCREL
.1a7b3e	4c aa 7b	jmp $1a7baa	                JMP done
.1a7b41	4c aa 7b	jmp $1a7baa	is_implied      JMP done
.1a7b44	22 c4 7b 1a	jsl $1a7bc4	is_abs_x_long   JSL DS_PR_OPERAND3      ; Print dddddd
.1a7b48	a9 2c		lda #$2c	                LDA #','
.1a7b4a	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b4d	a9 58		lda #$58	                LDA #'X'
.1a7b4f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b52	4c aa 7b	jmp $1a7baa	                JMP done
.1a7b55	a9 23		lda #$23	is_xyc          LDA #'#'
.1a7b57	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b5a	8b		phb		                PHB                     ; Make sure the databank is pointed to our number
.1a7b5b	a5 02		lda $087c	                LDA MCURSOR+2
.1a7b5d	48		pha		                PHA
.1a7b5e	ab		plb		                PLB
.1a7b5f	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.1a7b61	e8		inx		                INX
.1a7b62	a0 01 00	ldy #$0001	                LDY #1
.1a7b65	22 99 02 1a	jsl $1a0299	                JSL PRINTH
.1a7b69	a9 2c		lda #$2c	                LDA #','
.1a7b6b	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b6e	a9 23		lda #$23	                LDA #'#'
.1a7b70	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b73	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.1a7b75	a0 01 00	ldy #$0001	                LDY #1
.1a7b78	22 99 02 1a	jsl $1a0299	                JSL PRINTH
.1a7b7c	ab		plb		                PLB                     ; Get our old data bank back
.1a7b7d	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a7b81	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7b84	a9 28		lda #$28	is_abs_ind      LDA #'('
.1a7b86	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b89	22 b6 7b 1a	jsl $1a7bb6	                JSL DS_PR_OPERAND2      ; Print (dddd)
.1a7b8d	a9 29		lda #$29	                LDA #')'
.1a7b8f	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b92	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7b95	a9 5b		lda #$5b	is_abs_ind_long LDA #'['
.1a7b97	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7b9a	22 b6 7b 1a	jsl $1a7bb6	                JSL DS_PR_OPERAND2      ; Print [dddd]
.1a7b9e	a9 5d		lda #$5d	                LDA #']'
.1a7ba0	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ba3	4c a6 7b	jmp $1a7ba6	                JMP done_1
.1a7ba6	22 d9 81 1a	jsl $1a81d9	done_1          JSL M_INC_CURSOR    ; Skip over a single byte operand
.1a7baa	28		plp		done            PLP
.1a7bab	6b		rtl		                RTL
.1a7bac					DS_PR_OPERAND1
.1a7bac	08		php		                PHP
.1a7bad	e2 20		sep #$20	            SEP #$20
.1a7baf	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a7bb1	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a7bb4	28		plp		                PLP
.1a7bb5	6b		rtl		                RTL
.1a7bb6					DS_PR_OPERAND2
.1a7bb6	08		php		                PHP
.1a7bb7	c2 30		rep #$30	            REP #$30
.1a7bb9	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a7bbb	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a7bbe	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a7bc2	28		plp		                PLP
.1a7bc3	6b		rtl		                RTL
.1a7bc4					DS_PR_OPERAND3
.1a7bc4	08		php		                PHP
.1a7bc5	8b		phb		                PHB
.1a7bc6	0b		phd		                PHD
.1a7bc7	c2 30		rep #$30	            REP #$30
.1a7bc9	5a		phy		                PHY
.1a7bca	08		php		            PHP
.1a7bcb	c2 20		rep #$20	            REP #$20
.1a7bcd	48		pha		            PHA
.1a7bce	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a7bd1	5b		tcd		            TCD
.1a7bd2	68		pla		            PLA
.1a7bd3	28		plp		            PLP
.1a7bd4	08		php		            PHP
.1a7bd5	e2 20		sep #$20	            SEP #$20
.1a7bd7	48		pha		            PHA
.1a7bd8	a9 00		lda #$00	            LDA #`MTEMP
.1a7bda	48		pha		            PHA
.1a7bdb	ab		plb		            PLB
.1a7bdc	68		pla		            PLA
.1a7bdd	28		plp		            PLP
.1a7bde	e2 20		sep #$20	            SEP #$20
.1a7be0	a0 00 00	ldy #$0000	                LDY #0
.1a7be3	a7 00		lda [$087a]	copy_loop       LDA [MCURSOR]       ; Copy the address pointed to by MCURSOR
.1a7be5	99 92 08	sta $0892,y	                STA MTEMP,Y         ; to MTEMP
.1a7be8	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a7bec	c8		iny		                INY
.1a7bed	c0 03 00	cpy #$0003	                CPY #3
.1a7bf0	d0 f1		bne $1a7be3	                BNE copy_loop
.1a7bf2	22 83 7c 1a	jsl $1a7c83	                JSL M_PR_ADDR       ; Print the address
.1a7bf6	c2 30		rep #$30	            REP #$30
.1a7bf8	7a		ply		                PLY
.1a7bf9	2b		pld		                PLD
.1a7bfa	ab		plb		                PLB
.1a7bfb	28		plp		                PLP
.1a7bfc	6b		rtl		                RTL
.1a7bfd					DS_PR_MNEMONIC
.1a7bfd	08		php		                PHP
.1a7bfe	8b		phb		                PHB
.1a7bff	e2 20		sep #$20	            SEP #$20
.1a7c01	c2 10		rep #$10	            REP #$10
.1a7c03	08		php		            PHP
.1a7c04	e2 20		sep #$20	            SEP #$20
.1a7c06	48		pha		            PHA
.1a7c07	a9 1a		lda #$1a	            LDA #`MN_ORA
.1a7c09	48		pha		            PHA
.1a7c0a	ab		plb		            PLB
.1a7c0b	68		pla		            PLA
.1a7c0c	28		plp		            PLP
.1a7c0d	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a7c10	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7c13	e8		inx		                INX
.1a7c14	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a7c17	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7c1a	e8		inx		                INX
.1a7c1b	bd 00 00	lda $1a0000,x	                LDA #0,B,X
.1a7c1e	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7c21	e8		inx		                INX
.1a7c22	a9 20		lda #$20	                LDA #' '            ; Print a space
.1a7c24	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7c27	ab		plb		                PLB
.1a7c28	28		plp		                PLP
.1a7c29	6b		rtl		                RTL
.1a7c2a					DS_PR_PCREL
.1a7c2a	08		php		                PHP
.1a7c2b	0b		phd		                PHD
.1a7c2c	08		php		            PHP
.1a7c2d	c2 20		rep #$20	            REP #$20
.1a7c2f	48		pha		            PHA
.1a7c30	a9 7a 08	lda #$087a	            LDA #MCURSOR
.1a7c33	5b		tcd		            TCD
.1a7c34	68		pla		            PLA
.1a7c35	28		plp		            PLP
.1a7c36	e2 20		sep #$20	            SEP #$20
.1a7c38	c0 02 00	cpy #$0002	                CPY #2
.1a7c3b	f0 14		beq $1a7c51	                BEQ offset_2
.1a7c3d	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a7c3f	85 18		sta $0892	                STA MTEMP
.1a7c41	30 06		bmi $1a7c49	                BMI is_negative
.1a7c43	64 19		stz $0893	                STZ MTEMP+1
.1a7c45	64 1a		stz $0894	                STZ MTEMP+2
.1a7c47	80 1e		bra $1a7c67	                BRA add_offset
.1a7c49	a9 ff		lda #$ff	is_negative     LDA #$FF
.1a7c4b	85 19		sta $0893	                STA MTEMP+1
.1a7c4d	85 1a		sta $0894	                STA MTEMP+2
.1a7c4f	80 16		bra $1a7c67	                BRA add_offset
.1a7c51	a7 00		lda [$087a]	offset_2        LDA [MCURSOR]
.1a7c53	85 18		sta $0892	                STA MTEMP
.1a7c55	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a7c59	a7 00		lda [$087a]	                LDA [MCURSOR]
.1a7c5b	85 19		sta $0893	                STA MTEMP+1
.1a7c5d	30 04		bmi $1a7c63	                BMI is_negative2
.1a7c5f	64 1a		stz $0894	                STZ MTEMP+2
.1a7c61	80 04		bra $1a7c67	                BRA add_offset
.1a7c63	a9 ff		lda #$ff	is_negative2    LDA #$FF
.1a7c65	85 1a		sta $0894	                STA MTEMP+2
.1a7c67					add_offset
.1a7c67	c2 20		rep #$20	            REP #$20
.1a7c69	38		sec		                SEC             ; Add 1 to the offset
.1a7c6a	a5 00		lda $087a	                LDA MCURSOR
.1a7c6c	65 18		adc $0892	                ADC MTEMP
.1a7c6e	85 18		sta $0892	                STA MTEMP
.1a7c70	e2 20		sep #$20	            SEP #$20
.1a7c72	a5 02		lda $087c	                LDA MCURSOR+2
.1a7c74	65 1a		adc $0894	                ADC MTEMP+2
.1a7c76	85 1a		sta $0894	                STA MTEMP+2
.1a7c78	22 83 7c 1a	jsl $1a7c83	                JSL M_PR_ADDR
.1a7c7c	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a7c80	2b		pld		                PLD
.1a7c81	28		plp		                PLP
.1a7c82	6b		rtl		                RTL
.1a7c83					M_PR_ADDR
.1a7c83	08		php		                PHP
.1a7c84	0b		phd		                PHD
.1a7c85	c2 20		rep #$20	            REP #$20
.1a7c87	48		pha		                PHA
.1a7c88	08		php		            PHP
.1a7c89	c2 20		rep #$20	            REP #$20
.1a7c8b	48		pha		            PHA
.1a7c8c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a7c8f	5b		tcd		            TCD
.1a7c90	68		pla		            PLA
.1a7c91	28		plp		            PLP
.1a7c92	e2 20		sep #$20	            SEP #$20
.1a7c94	a5 4c		lda $0894	                LDA MTEMP+2     ; Print the bank byte of the address
.1a7c96	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a7c99	e2 20		sep #$20	            SEP #$20
.1a7c9b	a9 3a		lda #$3a	                LDA #':'
.1a7c9d	20 18 00	jsr $1a0018	            JSR PRINTC
.1a7ca0	c2 20		rep #$20	            REP #$20
.1a7ca2	a5 4a		lda $0892	                LDA MTEMP       ; Print the lower 16-bits of the address
.1a7ca4	20 26 03	jsr $1a0326	            JSR PRHEXW
.1a7ca7	68		pla		                PLA
.1a7ca8	2b		pld		                PLD
.1a7ca9	28		plp		                PLP
.1a7caa	6b		rtl		                RTL
.1a7cab					MNEMONICS_TAB
.1a7cab					MN_ORA
>1a7cab	4f 52 41 00			            .null "ORA"
.1a7caf					MN_AND
>1a7caf	41 4e 44 00			            .null "AND"
.1a7cb3					MN_EOR
>1a7cb3	45 4f 52 00			            .null "EOR"
.1a7cb7					MN_ADC
>1a7cb7	41 44 43 00			            .null "ADC"
.1a7cbb					MN_STA
>1a7cbb	53 54 41 00			            .null "STA"
.1a7cbf					MN_LDA
>1a7cbf	4c 44 41 00			            .null "LDA"
.1a7cc3					MN_CMP
>1a7cc3	43 4d 50 00			            .null "CMP"
.1a7cc7					MN_SBC
>1a7cc7	53 42 43 00			            .null "SBC"
.1a7ccb					MN_ASL
>1a7ccb	41 53 4c 00			            .null "ASL"
.1a7ccf					MN_ROL
>1a7ccf	52 4f 4c 00			            .null "ROL"
.1a7cd3					MN_LSR
>1a7cd3	4c 53 52 00			            .null "LSR"
.1a7cd7					MN_ROR
>1a7cd7	52 4f 52 00			            .null "ROR"
.1a7cdb					MN_STX
>1a7cdb	53 54 58 00			            .null "STX"
.1a7cdf					MN_LDX
>1a7cdf	4c 44 58 00			            .null "LDX"
.1a7ce3					MN_DEC
>1a7ce3	44 45 43 00			            .null "DEC"
.1a7ce7					MN_INC
>1a7ce7	49 4e 43 00			            .null "INC"
.1a7ceb					MN_BIT
>1a7ceb	42 49 54 00			            .null "BIT"
.1a7cef					MN_JMP
>1a7cef	4a 4d 50 00			            .null "JMP"
.1a7cf3					MN_STY
>1a7cf3	53 54 59 00			            .null "STY"
.1a7cf7					MN_LDY
>1a7cf7	4c 44 59 00			            .null "LDY"
.1a7cfb					MN_CPY
>1a7cfb	43 50 59 00			            .null "CPY"
.1a7cff					MN_CPX
>1a7cff	43 50 58 00			            .null "CPX"
.1a7d03					MN_BRK
>1a7d03	42 52 4b 00			            .null "BRK"
.1a7d07					MN_JSR
>1a7d07	4a 53 52 00			            .null "JSR"
.1a7d0b					MN_RTI
>1a7d0b	52 54 49 00			            .null "RTI"
.1a7d0f					MN_RTS
>1a7d0f	52 54 53 00			            .null "RTS"
.1a7d13					MN_PHP
>1a7d13	50 48 50 00			            .null "PHP"
.1a7d17					MN_PLP
>1a7d17	50 4c 50 00			            .null "PLP"
.1a7d1b					MN_PHA
>1a7d1b	50 48 41 00			            .null "PHA"
.1a7d1f					MN_PLA
>1a7d1f	50 4c 41 00			            .null "PLA"
.1a7d23					MN_DEY
>1a7d23	44 45 59 00			            .null "DEY"
.1a7d27					MN_TAY
>1a7d27	54 41 59 00			            .null "TAY"
.1a7d2b					MN_INY
>1a7d2b	49 4e 59 00			            .null "INY"
.1a7d2f					MN_INX
>1a7d2f	49 4e 58 00			            .null "INX"
.1a7d33					MN_CLC
>1a7d33	43 4c 43 00			            .null "CLC"
.1a7d37					MN_SEC
>1a7d37	53 45 43 00			            .null "SEC"
.1a7d3b					MN_CLI
>1a7d3b	43 4c 49 00			            .null "CLI"
.1a7d3f					MN_SEI
>1a7d3f	53 45 49 00			            .null "SEI"
.1a7d43					MN_TYA
>1a7d43	54 59 41 00			            .null "TYA"
.1a7d47					MN_CLV
>1a7d47	43 4c 56 00			            .null "CLV"
.1a7d4b					MN_CLD
>1a7d4b	43 4c 44 00			            .null "CLD"
.1a7d4f					MN_SED
>1a7d4f	53 45 44 00			            .null "SED"
.1a7d53					MN_TXA
>1a7d53	54 58 41 00			            .null "TXA"
.1a7d57					MN_TXS
>1a7d57	54 58 53 00			            .null "TXS"
.1a7d5b					MN_TAX
>1a7d5b	54 41 58 00			            .null "TAX"
.1a7d5f					MN_TSX
>1a7d5f	54 53 58 00			            .null "TSX"
.1a7d63					MN_DEX
>1a7d63	44 45 58 00			            .null "DEX"
.1a7d67					MN_NOP
>1a7d67	4e 4f 50 00			            .null "NOP"
.1a7d6b					MN_BPL
>1a7d6b	42 50 4c 00			            .null "BPL"
.1a7d6f					MN_BMI
>1a7d6f	42 4d 49 00			            .null "BMI"
.1a7d73					MN_BVC
>1a7d73	42 56 43 00			            .null "BVC"
.1a7d77					MN_BVS
>1a7d77	42 56 53 00			            .null "BVS"
.1a7d7b					MN_BCC
>1a7d7b	42 43 43 00			            .null "BCC"
.1a7d7f					MN_BCS
>1a7d7f	42 43 53 00			            .null "BCS"
.1a7d83					MN_BNE
>1a7d83	42 4e 45 00			            .null "BNE"
.1a7d87					MN_BEQ
>1a7d87	42 45 51 00			            .null "BEQ"
.1a7d8b					MN_TSB
>1a7d8b	54 53 42 00			            .null "TSB"
.1a7d8f					MN_TRB
>1a7d8f	54 52 42 00			            .null "TRB"
.1a7d93					MN_STZ
>1a7d93	53 54 5a 00			            .null "STZ"
.1a7d97					MN_BRA
>1a7d97	42 52 41 00			            .null "BRA"
.1a7d9b					MN_PHY
>1a7d9b	50 48 59 00			            .null "PHY"
.1a7d9f					MN_PLY
>1a7d9f	50 4c 59 00			            .null "PLY"
.1a7da3					MN_PHX
>1a7da3	50 48 58 00			            .null "PHX"
.1a7da7					MN_PLX
>1a7da7	50 4c 58 00			            .null "PLX"
.1a7dab					MN_PHD
>1a7dab	50 48 44 00			            .null "PHD"
.1a7daf					MN_PLD
>1a7daf	50 4c 44 00			            .null "PLD"
.1a7db3					MN_PHK
>1a7db3	50 48 4b 00			            .null "PHK"
.1a7db7					MN_RTL
>1a7db7	52 54 4c 00			            .null "RTL"
.1a7dbb					MN_PHB
>1a7dbb	50 48 42 00			            .null "PHB"
.1a7dbf					MN_PLB
>1a7dbf	50 4c 42 00			            .null "PLB"
.1a7dc3					MN_WAI
>1a7dc3	57 41 49 00			            .null "WAI"
.1a7dc7					MN_XBA
>1a7dc7	58 42 41 00			            .null "XBA"
.1a7dcb					MN_TCS
>1a7dcb	54 43 53 00			            .null "TCS"
.1a7dcf					MN_TSC
>1a7dcf	54 53 43 00			            .null "TSC"
.1a7dd3					MN_TCD
>1a7dd3	54 43 44 00			            .null "TCD"
.1a7dd7					MN_TDC
>1a7dd7	54 44 43 00			            .null "TDC"
.1a7ddb					MN_TXY
>1a7ddb	54 58 59 00			            .null "TXY"
.1a7ddf					MN_TYX
>1a7ddf	54 59 58 00			            .null "TYX"
.1a7de3					MN_STP
>1a7de3	53 54 50 00			            .null "STP"
.1a7de7					MN_XCE
>1a7de7	58 43 45 00			            .null "XCE"
.1a7deb					MN_COP
>1a7deb	43 4f 50 00			            .null "COP"
.1a7def					MN_JSL
>1a7def	4a 53 4c 00			            .null "JSL"
.1a7df3					MN_WDM
>1a7df3	57 44 4d 00			            .null "WDM"
.1a7df7					MN_PER
>1a7df7	50 45 52 00			            .null "PER"
.1a7dfb					MN_BRL
>1a7dfb	42 52 4c 00			            .null "BRL"
.1a7dff					MN_REP
>1a7dff	52 45 50 00			            .null "REP"
.1a7e03					MN_SEP
>1a7e03	53 45 50 00			            .null "SEP"
.1a7e07					MN_MVP
>1a7e07	4d 56 50 00			            .null "MVP"
.1a7e0b					MN_MVN
>1a7e0b	4d 56 4e 00			            .null "MVN"
.1a7e0f					MN_PEI
>1a7e0f	50 45 49 00			            .null "PEI"
.1a7e13					MN_PEA
>1a7e13	50 45 41 00			            .null "PEA"
.1a7e17					MN_JML
>1a7e17	4a 4d 4c 00			            .null "JML"
>1a7e1b	00 00				            .byte 0, 0
>1a7e1d	03 7d ab 7c eb 7d ab 7c		MNEMONIC_TAB    .word <>MN_BRK, <>MN_ORA, <>MN_COP, <>MN_ORA, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 0x
>1a7e25	8b 7d ab 7c cb 7c ab 7c
>1a7e2d	13 7d ab 7c cb 7c ab 7d		                .word <>MN_PHP, <>MN_ORA, <>MN_ASL, <>MN_PHD, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>1a7e35	8b 7d ab 7c cb 7c ab 7c
>1a7e3d	6b 7d ab 7c ab 7c ab 7c		                .word <>MN_BPL, <>MN_ORA, <>MN_ORA, <>MN_ORA, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 1x
>1a7e45	8f 7d ab 7c cb 7c ab 7c
>1a7e4d	33 7d ab 7c e7 7c cb 7d		                .word <>MN_CLC, <>MN_ORA, <>MN_INC, <>MN_TCS, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>1a7e55	8f 7d ab 7c cb 7c ab 7c
>1a7e5d	07 7d af 7c ef 7d af 7c		                .word <>MN_JSR, <>MN_AND, <>MN_JSL, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 2x
>1a7e65	eb 7c af 7c cf 7c af 7c
>1a7e6d	17 7d af 7c cf 7c af 7d		                .word <>MN_PLP, <>MN_AND, <>MN_ROL, <>MN_PLD, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>1a7e75	eb 7c af 7c cf 7c af 7c
>1a7e7d	6f 7d af 7c af 7c af 7c		                .word <>MN_BMI, <>MN_AND, <>MN_AND, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 3x
>1a7e85	eb 7c af 7c cf 7c af 7c
>1a7e8d	37 7d af 7c e3 7c cf 7d		                .word <>MN_SEC, <>MN_AND, <>MN_DEC, <>MN_TSC, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>1a7e95	eb 7c af 7c cf 7c af 7c
>1a7e9d	0b 7d b3 7c f3 7d b3 7c		                .word <>MN_RTI, <>MN_EOR, <>MN_WDM, <>MN_EOR, <>MN_MVP, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 4x
>1a7ea5	07 7e b3 7c d3 7c b3 7c
>1a7ead	1b 7d b3 7c d3 7c b3 7d		                .word <>MN_PHA, <>MN_EOR, <>MN_LSR, <>MN_PHK, <>MN_JMP, <>MN_EOR, <>MN_LSR, <>MN_EOR
>1a7eb5	ef 7c b3 7c d3 7c b3 7c
>1a7ebd	73 7d b3 7c b3 7c b3 7c		                .word <>MN_BVC, <>MN_EOR, <>MN_EOR, <>MN_EOR, <>MN_MVN, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 5x
>1a7ec5	0b 7e b3 7c d3 7c b3 7c
>1a7ecd	3b 7d b3 7c 9b 7d d3 7d		                .word <>MN_CLI, <>MN_EOR, <>MN_PHY, <>MN_TCD, <>MN_JML, <>MN_EOR, <>MN_LSR, <>MN_EOR
>1a7ed5	17 7e b3 7c d3 7c b3 7c
>1a7edd	0f 7d b7 7c f7 7d b7 7c		                .word <>MN_RTS, <>MN_ADC, <>MN_PER, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 6x
>1a7ee5	93 7d b7 7c d7 7c b7 7c
>1a7eed	1f 7d b7 7c d7 7c b7 7d		                .word <>MN_PLA, <>MN_ADC, <>MN_ROR, <>MN_RTL, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>1a7ef5	ef 7c b7 7c d7 7c b7 7c
>1a7efd	77 7d b7 7c b7 7c b7 7c		                .word <>MN_BVS, <>MN_ADC, <>MN_ADC, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 7x
>1a7f05	93 7d b7 7c d7 7c b7 7c
>1a7f0d	3f 7d b7 7c 9f 7d d7 7d		                .word <>MN_SEI, <>MN_ADC, <>MN_PLY, <>MN_TDC, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>1a7f15	ef 7c b7 7c d7 7c b7 7c
>1a7f1d	97 7d bb 7c fb 7d bb 7c		                .word <>MN_BRA, <>MN_STA, <>MN_BRL, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 8x
>1a7f25	f3 7c bb 7c db 7c bb 7c
>1a7f2d	23 7d eb 7c 53 7d bb 7d		                .word <>MN_DEY, <>MN_BIT, <>MN_TXA, <>MN_PHB, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA
>1a7f35	f3 7c bb 7c db 7c bb 7c
>1a7f3d	7b 7d bb 7c bb 7c bb 7c		                .word <>MN_BCC, <>MN_STA, <>MN_STA, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 9x
>1a7f45	f3 7c bb 7c db 7c bb 7c
>1a7f4d	43 7d bb 7c 57 7d db 7d		                .word <>MN_TYA, <>MN_STA, <>MN_TXS, <>MN_TXY, <>MN_STZ, <>MN_STA, <>MN_STZ, <>MN_STA
>1a7f55	93 7d bb 7c 93 7d bb 7c
>1a7f5d	f7 7c bf 7c df 7c bf 7c		                .word <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Ax
>1a7f65	f7 7c bf 7c df 7c bf 7c
>1a7f6d	27 7d bf 7c 5b 7d bf 7d		                .word <>MN_TAY, <>MN_LDA, <>MN_TAX, <>MN_PLB, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>1a7f75	f7 7c bf 7c df 7c bf 7c
>1a7f7d	7f 7d bf 7c bf 7c bf 7c		                .word <>MN_BCS, <>MN_LDA, <>MN_LDA, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Bx
>1a7f85	f7 7c bf 7c df 7c bf 7c
>1a7f8d	47 7d bf 7c 5f 7d df 7d		                .word <>MN_CLV, <>MN_LDA, <>MN_TSX, <>MN_TYX, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>1a7f95	f7 7c bf 7c df 7c bf 7c
>1a7f9d	fb 7c c3 7c ff 7d c3 7c		                .word <>MN_CPY, <>MN_CMP, <>MN_REP, <>MN_CMP, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Cx
>1a7fa5	fb 7c c3 7c e3 7c c3 7c
>1a7fad	2b 7d c3 7c 63 7d c3 7d		                .word <>MN_INY, <>MN_CMP, <>MN_DEX, <>MN_WAI, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP
>1a7fb5	fb 7c c3 7c e3 7c c3 7c
>1a7fbd	83 7d c3 7c c3 7c c3 7c		                .word <>MN_BNE, <>MN_CMP, <>MN_CMP, <>MN_CMP, <>MN_PEI, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Dx
>1a7fc5	0f 7e c3 7c e3 7c c3 7c
>1a7fcd	4b 7d c3 7c a3 7d e3 7d		                .word <>MN_CLD, <>MN_CMP, <>MN_PHX, <>MN_STP, <>MN_JML, <>MN_CMP, <>MN_DEC, <>MN_CMP
>1a7fd5	17 7e c3 7c e3 7c c3 7c
>1a7fdd	ff 7c c7 7c 03 7e c7 7c		                .word <>MN_CPX, <>MN_SBC, <>MN_SEP, <>MN_SBC, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Ex
>1a7fe5	ff 7c c7 7c e7 7c c7 7c
>1a7fed	2f 7d c7 7c 67 7d c7 7d		                .word <>MN_INX, <>MN_SBC, <>MN_NOP, <>MN_XBA, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC
>1a7ff5	ff 7c c7 7c e7 7c c7 7c
>1a7ffd	87 7d c7 7c c7 7c c7 7c		                .word <>MN_BEQ, <>MN_SBC, <>MN_SBC, <>MN_SBC, <>MN_PEA, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Fx
>1a8005	13 7e c7 7c e7 7c c7 7c
>1a800d	4f 7d c7 7c a7 7d e7 7d		                .word <>MN_SED, <>MN_SBC, <>MN_PLX, <>MN_XCE, <>MN_JSR, <>MN_SBC, <>MN_INC, <>MN_SBC
>1a8015	07 7d c7 7c e7 7c c7 7c
>1a801d	00 00				                .word 0
>1a801f	13 00 02 09			ADDRESS_TAB     .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R                  ; 0x
>1a8023	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8027	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a802b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a802f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 1x
>1a8033	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8037	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>1a803b	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a803f	03 00 0b 09			                .byte ADDR_ABS, ADDR_DP_IND_X, ADDR_ABS_LONG, ADDR_SP_R                 ; 2x
>1a8043	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8047	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a804b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a804f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 3x
>1a8053	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8057	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>1a805b	07 07 07 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a805f	13 00 13 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMPLIED, ADDR_SP_R              ; 4x
>1a8063	14 01 01 0a			                .byte ADDR_XYC, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8067	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a806b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a806f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 5x
>1a8073	14 05 05 0d			                .byte ADDR_XYC, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8077	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a807b	0b 07 07 0b			                .byte ADDR_ABS_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_LONG
>1a807f	13 00 16 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R          ; 6x
>1a8083	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a8087	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>1a808b	15 03 03 0b			                .byte ADDR_ABS_IND, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a808f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 7x
>1a8093	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8097	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a809b	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a809f	12 00 16 09			                .byte ADDR_PC_REL, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R           ; 8x
>1a80a3	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a80a7	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a80ab	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a80af	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 9x
>1a80b3	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>1a80b7	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a80bb	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a80bf	82 00 42 09			                .byte ADDR_IMM | OP_M_EFFECT, ADDR_DP_IND_X, ADDR_IMM | OP_X_EFFECT, ADDR_SP_R  ; Ax
>1a80c3	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a80c7	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a80cb	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a80cf	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Bx
>1a80d3	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>1a80d7	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a80db	07 07 06 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_Y, ADDR_ABS_X_LONG
>1a80df	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Cx
>1a80e3	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>1a80e7	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a80eb	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a80ef	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Dx
>1a80f3	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a80f7	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a80fb	17 07 07 0e			                .byte ADDR_ABS_IND_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a80ff	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Ex
>1a8103	01 01 01 0f			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_IND
>1a8107	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>1a810b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>1a810f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Fx
>1a8113	03 05 05 0d			                .byte ADDR_ABS, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>1a8117	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>1a811b	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>1a811f	01 01 01 02 01 01 02 02		ADDR_LENGTH     .byte 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 0, 2, 2, 2, 2
>1a8127	00 01 01 03 01 01 03 01 02 01 01 00 02 02 02 02
.1a8137					ADDR_PATTERNS
>1a8137	41 00				            .null "A"
>1a8139	08				            .byte ADDR_ACC
>1a813a	64 64 3a 64 64 64 64 2c		            .null "dd:dddd,X"
>1a8142	58 00
>1a8144	0e				            .byte ADDR_ABS_X_LONG
>1a8145	64 64 3a 64 64 64 64 00		            .null "dd:dddd"
>1a814d	0b				            .byte ADDR_ABS_LONG
>1a814e	64 64 64 64 2c 58 00		            .null "dddd,X"
>1a8155	07				            .byte ADDR_ABS_X
>1a8156	64 64 64 64 2c 59 00		            .null "dddd,Y"
>1a815d	06				            .byte ADDR_ABS_Y
>1a815e	64 64 64 64 00			            .null "dddd"
>1a8163	03				            .byte ADDR_ABS
>1a8164	64 64 2c 58 00			            .null "dd,X"
>1a8169	05				            .byte ADDR_DP_X
>1a816a	64 64 2c 59 00			            .null "dd,Y"
>1a816f	11				            .byte ADDR_DP_Y
>1a8170	64 64 2c 53 00			            .null "dd,S"
>1a8175	09				            .byte ADDR_SP_R
>1a8176	64 64 00			            .null "dd"
>1a8179	01				            .byte ADDR_DP
>1a817a	23 64 64 64 64 00		            .null "#dddd"
>1a8180	c2				            .byte ADDR_IMM | OP_M_EFFECT | OP_X_EFFECT
>1a8181	23 64 64 2c 23 64 64 00		            .null "#dd,#dd"
>1a8189	14				            .byte ADDR_XYC
>1a818a	23 64 64 00			            .null "#dd"
>1a818e	02				            .byte ADDR_IMM
>1a818f	28 64 64 2c 53 29 2c 59		            .null "(dd,S),Y"
>1a8197	00
>1a8198	0c				            .byte ADDR_SP_R_Y
>1a8199	28 64 64 64 64 2c 58 29		            .null "(dddd,X)"
>1a81a1	00
>1a81a2	10				            .byte ADDR_ABS_X_ID
>1a81a3	28 64 64 64 64 29 00		            .null "(dddd)"
>1a81aa	10				            .byte ADDR_ABS_X_ID
>1a81ab	28 64 64 2c 58 29 00		            .null "(dd,X)"
>1a81b2	00				            .byte ADDR_DP_IND_X
>1a81b3	28 64 64 29 2c 59 00		            .null "(dd),Y"
>1a81ba	04				            .byte ADDR_DP_IND_Y
>1a81bb	28 64 64 29 00			            .null "(dd)"
>1a81c0	0f				            .byte ADDR_DP_IND
>1a81c1	5b 64 64 64 64 5d 00		            .null "[dddd]"
>1a81c8	17				            .byte ADDR_ABS_IND_LONG
>1a81c9	5b 64 64 5d 2c 59 00		            .null "[dd],Y"
>1a81d0	0d				            .byte ADDR_DP_Y_LONG
>1a81d1	5b 64 64 5d 00			            .null "[dd]"
>1a81d6	0a				            .byte ADDR_DP_LONG
>1a81d7	00 00				                .byte 0, 0

;******  Return to file: src\monitor.s

.1a81d9					M_INC_CURSOR
.1a81d9	08		php		                PHP
.1a81da	c2 20		rep #$20	            REP #$20
.1a81dc	48		pha		                PHA
.1a81dd	18		clc		                CLC
.1a81de	af 7a 08 00	lda $00087a	                LDA MCURSOR
.1a81e2	69 01 00	adc #$0001	                ADC #1
.1a81e5	8f 7a 08 00	sta $00087a	                STA MCURSOR
.1a81e9	e2 20		sep #$20	            SEP #$20
.1a81eb	af 7c 08 00	lda $00087c	                LDA MCURSOR+2
.1a81ef	69 00		adc #$00	                ADC #0
.1a81f1	8f 7c 08 00	sta $00087c	                STA MCURSOR+2
.1a81f5	c2 20		rep #$20	            REP #$20
.1a81f7	68		pla		                PLA
.1a81f8	28		plp		                PLP
.1a81f9	6b		rtl		                RTL
.1a81fa					MPRINTB
.1a81fa	08		php		                PHP
.1a81fb	c2 10		rep #$10	            REP #$10
.1a81fd	e2 20		sep #$20	            SEP #$20
.1a81ff	da		phx		                PHX
.1a8200	a2 08 00	ldx #$0008	                LDX #8          ; Set number of bits to print to 8
.1a8203	0a		asl a		loop            ASL A           ; Shift MSB to C
.1a8204	b0 08		bcs $1a820e	                BCS is_one
.1a8206	48		pha		                PHA             ; Save value to print
.1a8207	a9 30		lda #$30	                LDA #'0'        ; Print '0'
.1a8209	20 18 00	jsr $1a0018	            JSR PRINTC
.1a820c	80 06		bra $1a8214	                BRA continue
.1a820e	48		pha		is_one          PHA             ; Save value to print
.1a820f	a9 31		lda #$31	                LDA #'1'        ; Print '1'
.1a8211	20 18 00	jsr $1a0018	            JSR PRINTC
.1a8214	68		pla		continue        PLA
.1a8215	ca		dex		                DEX             ; Count down the bits to shift
.1a8216	d0 eb		bne $1a8203	                BNE loop        ; And try the next one if there is one
.1a8218	fa		plx		                PLX             ; Otherwise, return
.1a8219	28		plp		                PLP
.1a821a	6b		rtl		                RTL
.1a821b					MSKIPWS
.1a821b	08		php		            PHP
.1a821c	c2 20		rep #$20	            REP #$20
.1a821e	48		pha		            PHA
.1a821f	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a8222	5b		tcd		            TCD
.1a8223	68		pla		            PLA
.1a8224	28		plp		            PLP
.1a8225	e2 20		sep #$20	            SEP #$20
.1a8227	a7 32		lda [$087a]	loop            LDA [MCURSOR]       ; Check the current character
.1a8229	f0 0a		beq $1a8235	                BEQ done            ; If NULL, we're done
.1a822b	c9 20		cmp #$20	                CMP #' '            ; Is it a space?
.1a822d	d0 06		bne $1a8235	                BNE done            ; No: we're done
.1a822f	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR    ; Yes, try the next one
.1a8233	80 f2		bra $1a8227	                BRA loop
.1a8235	6b		rtl		done            RTL
.1a8236					MPARSESTR
.1a8236	08		php		                PHP
.1a8237	08		php		            PHP
.1a8238	c2 20		rep #$20	            REP #$20
.1a823a	48		pha		            PHA
.1a823b	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a823e	5b		tcd		            TCD
.1a823f	68		pla		            PLA
.1a8240	28		plp		            PLP
.1a8241	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR                ; Point to the first character of the name
.1a8245	22 1b 82 1a	jsl $1a821b	                JSL MSKIPWS                     ; Skip white space
.1a8249	c2 30		rep #$30	            REP #$30
.1a824b	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.1a824d	c2 20		rep #$20	            REP #$20
.1a824f	29 ff 00	and #$00ff	                AND #$00FF
.1a8252	0a		asl a		                ASL A                           ; multiply it by forfour
.1a8253	0a		asl a		                ASL A
.1a8254	aa		tax		                TAX                             ; ... to get the index to the argument
.1a8255	a5 32		lda $087a	                LDA MCURSOR                     ; Set the argument to the address of the first byte
.1a8257	95 0d		sta $0855,x	                STA MARG1,X
.1a8259	a5 34		lda $087c	                LDA MCURSOR+2
.1a825b	95 0f		sta $0857,x	                STA MARG1+2,X
.1a825d	e2 20		sep #$20	            SEP #$20
.1a825f	a7 32		lda [$087a]	loop            LDA [MCURSOR]                   ; Scan to the closing double quote
.1a8261	f0 14		beq $1a8277	                BEQ done                        ; If NULL... treat it as a closed argument
.1a8263	c9 22		cmp #$22	                CMP #CHAR_DQUOTE
.1a8265	f0 06		beq $1a826d	                BEQ close_string
.1a8267	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a826b	80 f2		bra $1a825f	                BRA loop
.1a826d	a9 00		lda #$00	close_string    LDA #0                          ; Write a NULL to close the string
.1a826f	87 32		sta [$087a]	                STA [MCURSOR]
.1a8271	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR                ; And point to the next byte
.1a8275	e6 31		inc $0879	                INC MARG_LEN
.1a8277	28		plp		done            PLP
.1a8278	6b		rtl		                RTL
.1a8279					MPARSEARG
.1a8279	08		php		            PHP
.1a827a	c2 20		rep #$20	            REP #$20
.1a827c	48		pha		            PHA
.1a827d	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.1a8280	5b		tcd		            TCD
.1a8281	68		pla		            PLA
.1a8282	28		plp		            PLP
.1a8283	e2 20		sep #$20	            SEP #$20
.1a8285	64 4a		stz $0892	                STZ MTEMP                       ; Use MTEMP as a flag for having processed digits
.1a8287	c2 20		rep #$20	            REP #$20
.1a8289	64 50		stz $0898	                STZ MPARSEDNUM                  ; Clear the parsed number
.1a828b	64 52		stz $089a	                STZ MPARSEDNUM+2
.1a828d					pa_loop
.1a828d	e2 20		sep #$20	            SEP #$20
.1a828f	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Get the current character
.1a8291	c9 3a		cmp #$3a	                CMP #":"
.1a8293	f0 0d		beq $1a82a2	                BEQ pa_next_char                ; Ignore any colons
.1a8295	20 be 03	jsr $1a03be	            JSR ISHEX
.1a8298	90 0e		bcc $1a82a8	                BCC finished_arg                ; No? We're done with this argument
.1a829a	22 11 77 1a	jsl $1a7711	                JSL AS_SHIFT_HEX                ; Yes: shift it onto MPARSEDNUM
.1a829e	a9 01		lda #$01	                LDA #1                          ; Flag that we've processed a character
.1a82a0	85 4a		sta $0892	                STA MTEMP
.1a82a2	22 d9 81 1a	jsl $1a81d9	pa_next_char    JSL M_INC_CURSOR                ; And try the next character
.1a82a6	80 e5		bra $1a828d	                BRA pa_loop
.1a82a8	a5 4a		lda $0892	finished_arg    LDA MTEMP                       ; Check to see if we've processed any characters
.1a82aa	f0 16		beq $1a82c2	                BEQ done                        ; No: we're done
.1a82ac	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.1a82ae	c2 20		rep #$20	            REP #$20
.1a82b0	29 ff 00	and #$00ff	                AND #$00FF
.1a82b3	0a		asl a		                ASL A                           ; multiply it by forfour
.1a82b4	0a		asl a		                ASL A
.1a82b5	aa		tax		                TAX                             ; ... to get the index to the argument
.1a82b6	a5 50		lda $0898	                LDA MPARSEDNUM                  ; Copy the value to the argument slot
.1a82b8	95 0d		sta $0855,x	                STA MARG1,X
.1a82ba	a5 52		lda $089a	                LDA MPARSEDNUM+2
.1a82bc	95 0f		sta $0857,x	                STA MARG1+2,X
.1a82be	e2 20		sep #$20	            SEP #$20
.1a82c0	e6 31		inc $0879	                INC MARG_LEN                    ; And bump up the argument count
.1a82c2	6b		rtl		done            RTL
.1a82c3					MPARSEALLARG
.1a82c3	e2 20		sep #$20	            SEP #$20
.1a82c5	64 31		stz $0879	                STZ MARG_LEN                    ; Set the arg count to 0
.1a82c7	22 1b 82 1a	jsl $1a821b	parse_arg       JSL MSKIPWS                     ; Otherwise, skip white space
.1a82cb	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Check the current character
.1a82cd	f0 21		beq $1a82f0	                BEQ done                        ; If it is NULL, we're done
.1a82cf	c9 22		cmp #$22	                CMP #CHAR_DQUOTE                ; Is it a double-quote?
.1a82d1	d0 06		bne $1a82d9	                BNE regular_arg
.1a82d3	22 36 82 1a	jsl $1a8236	                JSL MPARSESTR                   ; Yes: parse it as a string argument
.1a82d7	80 0a		bra $1a82e3	                BRA check_rest
.1a82d9	22 79 82 1a	jsl $1a8279	regular_arg     JSL MPARSEARG                   ; Attempt to parse the argument
.1a82dd	a5 31		lda $0879	                LDA MARG_LEN                    ; Check how many arguments we've processed
.1a82df	c9 09		cmp #$09	                CMP #9
.1a82e1	b0 0d		bcs $1a82f0	                BGE done                        ; If >=9, then we're done
.1a82e3	a7 32		lda [$087a]	check_rest      LDA [MCURSOR]                   ; Check the current character
.1a82e5	f0 09		beq $1a82f0	                BEQ done                        ; If EOL: we're done
.1a82e7	c9 20		cmp #$20	                CMP #' '
.1a82e9	f0 dc		beq $1a82c7	                BEQ parse_arg                   ; If space: try to process another argument
.1a82eb	20 be 03	jsr $1a03be	            JSR ISHEX
.1a82ee	b0 d7		bcs $1a82c7	                BCS parse_arg                   ; If hex digit: try to process another argument
.1a82f0	6b		rtl		done            RTL
.1a82f1					IMPARSE
.1a82f1	08		php		                PHP
.1a82f2	0b		phd		                PHD
.1a82f3	08		php		            PHP
.1a82f4	c2 20		rep #$20	            REP #$20
.1a82f6	48		pha		            PHA
.1a82f7	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.1a82fa	5b		tcd		            TCD
.1a82fb	68		pla		            PLA
.1a82fc	28		plp		            PLP
.1a82fd	c2 10		rep #$10	            REP #$10
.1a82ff	e2 20		sep #$20	            SEP #$20
.1a8301	a2 31 00	ldx #$0031	                LDX #MARG_LEN - MONITOR_VARS    ; Clear the monitor command line parameters
.1a8304	74 00		stz $0848,x	clear_command   STZ MONITOR_VARS,X
.1a8306	ca		dex		                DEX
.1a8307	d0 fb		bne $1a8304	                BNE clear_command
.1a8309	a9 00		lda #$00	                LDA #`INPUTBUF                  ; Point the command parser to the input buffer
.1a830b	85 02		sta $084a	                STA MCMDADDR+2
.1a830d	85 34		sta $087c	                STA MCURSOR+2                   ; And point MCURSOR there too
.1a830f	c2 20		rep #$20	            REP #$20
.1a8311	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF
.1a8314	85 00		sta $0848	                STA MCMDADDR
.1a8316	85 32		sta $087a	                STA MCURSOR
.1a8318	e2 20		sep #$20	            SEP #$20
.1a831a	22 1b 82 1a	jsl $1a821b	                JSL MSKIPWS                     ; Skip to the first letter of the command
.1a831e	c9 00		cmp #$00	                CMP #0                          ; Is the current character a NULL?
.1a8320	f0 38		beq $1a835a	                BEQ done                        ; Yes: there's no command here
.1a8322	c2 20		rep #$20	            REP #$20
.1a8324	a5 32		lda $087a	                LDA MCURSOR
.1a8326	85 08		sta $0850	                STA MCMD
.1a8328	e2 20		sep #$20	            SEP #$20
.1a832a	a5 34		lda $087c	                LDA MCURSOR+2
.1a832c	85 0a		sta $0852	                STA MCMD+2
.1a832e	a2 01 00	ldx #$0001	                LDX #1
.1a8331	22 d9 81 1a	jsl $1a81d9	cmd_loop        JSL M_INC_CURSOR                ; Move to the next character
.1a8335	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; What is that character?
.1a8337	d0 06		bne $1a833f	                BNE cmd_space                   ; If not NULL: check for a space
.1a8339	86 0b		stx $0853	no_arguments    STX MCMD_LEN                    ; If NULL: Save the length of the command
.1a833b	64 31		stz $0879	                STZ MARG_LEN                    ; ... And the fact there are no arguments
.1a833d	80 1b		bra $1a835a	                BRA done                        ; ... And return
.1a833f	c9 20		cmp #$20	cmd_space       CMP #' '                        ; Is it a space?
.1a8341	f0 03		beq $1a8346	                BEQ found_cmd                   ; Yes: save the length
.1a8343	e8		inx		                INX                             ; No: go to the next character
.1a8344	80 eb		bra $1a8331	                BRA cmd_loop
.1a8346	86 0b		stx $0853	found_cmd       STX MCMD_LEN                    ; Save the length of the command
.1a8348	a9 00		lda #$00	                LDA #0
.1a834a	87 32		sta [$087a]	                STA [MCURSOR]                   ; Write a NULL to the end of the command
.1a834c	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR                ; And skip to the next character
.1a8350	a7 08		lda [$0850]	                LDA [MCMD]                      ; Check the command
.1a8352	c9 41		cmp #$41	                CMP #'A'
.1a8354	f0 07		beq $1a835d	                BEQ parse_asm                   ; If 'A', parse the line for the assemble command
.1a8356	22 c3 82 1a	jsl $1a82c3	                JSL MPARSEALLARG
.1a835a	2b		pld		done            PLD
.1a835b	28		plp		                PLP
.1a835c	6b		rtl		                RTL
.1a835d	22 1b 82 1a	jsl $1a821b	parse_asm       JSL MSKIPWS                     ; Skip to the first letter of the address
.1a8361	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a8363	f0 f5		beq $1a835a	                BEQ done                        ; Exit if we got the end-of-line
.1a8365	22 79 82 1a	jsl $1a8279	                JSL MPARSEARG                   ; Parse the first argument as the target address
.1a8369	22 1b 82 1a	jsl $1a821b	                JSL MSKIPWS                     ; Skip to the first letter of the mnemonic
.1a836d	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a836f	f0 e9		beq $1a835a	                BEQ done                        ; Exit if we got the end-of-line
.1a8371	c2 20		rep #$20	            REP #$20
.1a8373	a5 32		lda $087a	                LDA MCURSOR                     ; Save pointer to the start of the mnemonic
.1a8375	85 11		sta $0859	                STA MARG2
.1a8377	e2 20		sep #$20	            SEP #$20
.1a8379	a5 34		lda $087c	                LDA MCURSOR+2
.1a837b	85 13		sta $085b	                STA MARG2+2
.1a837d	22 d9 81 1a	jsl $1a81d9	asm_find_sp     JSL M_INC_CURSOR                ; Find the space at the end of the mnemonic
.1a8381	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a8383	f0 26		beq $1a83ab	                BEQ asm_no_operand              ; If EOL: we have an instruction but no operand
.1a8385	c9 20		cmp #$20	                CMP #' '
.1a8387	d0 f4		bne $1a837d	                BNE asm_find_sp
.1a8389	a9 00		lda #$00	                LDA #0
.1a838b	87 32		sta [$087a]	                STA [MCURSOR]                   ; Null terminate the mnemonic
.1a838d	e6 31		inc $0879	                INC MARG_LEN                    ; Count the mnemonic as an argument
.1a838f	22 d9 81 1a	jsl $1a81d9	                JSL M_INC_CURSOR
.1a8393	22 1b 82 1a	jsl $1a821b	                JSL MSKIPWS                     ; Skip to the addressing mode
.1a8397	a7 32		lda [$087a]	                LDA [MCURSOR]
.1a8399	f0 bf		beq $1a835a	                BEQ done                        ; If EOL: we're done
.1a839b	c2 20		rep #$20	            REP #$20
.1a839d	a5 32		lda $087a	                LDA MCURSOR                     ; Set the pointer to the addressing mode
.1a839f	85 15		sta $085d	                STA MARG3
.1a83a1	e2 20		sep #$20	            SEP #$20
.1a83a3	a5 34		lda $087c	                LDA MCURSOR+2
.1a83a5	85 17		sta $085f	                STA MARG3+2
.1a83a7	e6 31		inc $0879	                INC MARG_LEN                    ; And count it as the second argument
.1a83a9	80 af		bra $1a835a	                BRA done                        ; and return
.1a83ab	e6 31		inc $0879	asm_no_operand  INC MARG_LEN                    ; Increment the argument count
.1a83ad	80 ab		bra $1a835a	                BRA done                        ; And quit
.1a83af					IMLOAD
.1a83af	08		php		                PHP
.1a83b0	c2 10		rep #$10	            REP #$10
.1a83b2	e2 20		sep #$20	            SEP #$20
.1a83b4	a5 31		lda $0879	                LDA MARG_LEN
.1a83b6	d0 0f		bne $1a83c7	                BNE get_arguments
.1a83b8	a2 a5 84	ldx #$84a5	bad_arguments   LDX #<>MERRARGS                 ; Print bad arguments error
.1a83bb	a9 1a		lda #$1a	                LDA #`MERRARGS
.1a83bd	48		pha		                PHA
.1a83be	ab		plb		                PLB
.1a83bf	20 16 03	jsr $1a0316	            JSR PRINTS
.1a83c2	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a83c5	80 61		bra $1a8428	                BRA done
.1a83c7					get_arguments
.1a83c7	c2 20		rep #$20	            REP #$20
.1a83c9	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.1a83cb	8f 23 08 00	sta $000823	                STA ARGUMENT1
.1a83cf	a5 0f		lda $0857	                LDA MARG1+2
.1a83d1	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.1a83d5	20 95 65	jsr $1a6595	            JSR SETFILEDESC
.1a83d8	e2 20		sep #$20	            SEP #$20
.1a83da	a5 31		lda $0879	                LDA MARG_LEN
.1a83dc	c9 01		cmp #$01	                CMP #1
.1a83de	d0 0f		bne $1a83ef	                BNE get_dest
.1a83e0	c2 20		rep #$20	            REP #$20
.1a83e2	a9 ff ff	lda #$ffff	                LDA #$FFFF                      ; Destination address not provided...
.1a83e5	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR              ; ... set it to something sane
.1a83e9	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a83ed	80 0e		bra $1a83fd	                BRA try_load
.1a83ef					get_dest
.1a83ef	c2 20		rep #$20	            REP #$20
.1a83f1	a5 11		lda $0859	                LDA MARG2                       ; Set the destination address from the arguments
.1a83f3	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1a83f7	a5 13		lda $085b	                LDA MARG2+2
.1a83f9	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1a83fd	22 18 11 00	jsl $001118	try_load        JSL FK_LOAD                     ; Try to load the file
.1a8401	b0 25		bcs $1a8428	                BCS done
.1a8403					error
.1a8403	e2 20		sep #$20	            SEP #$20
.1a8405	a2 cb 84	ldx #$84cb	                LDX #<>MCANTLOAD                ; Print bad arguments error
.1a8408	a9 1a		lda #$1a	                LDA #`MCANTLOAD
.1a840a	48		pha		                PHA
.1a840b	ab		plb		                PLB
.1a840c	20 16 03	jsr $1a0316	            JSR PRINTS
.1a840f	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.1a8413	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a8416	a9 20		lda #$20	                LDA #' '
.1a8418	20 18 00	jsr $1a0018	            JSR PRINTC
.1a841b	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.1a841f	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a8422	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a8425	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a8428	28		plp		done            PLP
.1a8429	6b		rtl		                RTL
.1a842a					IMSAVE
.1a842a	8b		phb		                PHB
.1a842b	08		php		                PHP
.1a842c	c2 10		rep #$10	            REP #$10
.1a842e	e2 20		sep #$20	            SEP #$20
.1a8430	a5 31		lda $0879	                LDA MARG_LEN
.1a8432	c9 03		cmp #$03	                CMP #3
.1a8434	f0 0f		beq $1a8445	                BEQ get_arguments
.1a8436	a2 a5 84	ldx #$84a5	                LDX #<>MERRARGS                 ; Print bad arguments error
.1a8439	a9 1a		lda #$1a	                LDA #`MERRARGS
.1a843b	48		pha		                PHA
.1a843c	ab		plb		                PLB
.1a843d	20 16 03	jsr $1a0316	            JSR PRINTS
.1a8440	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a8443	80 54		bra $1a8499	                BRA done
.1a8445					get_arguments
.1a8445	c2 20		rep #$20	            REP #$20
.1a8447	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.1a8449	8f 23 08 00	sta $000823	                STA ARGUMENT1
.1a844d	a5 0f		lda $0857	                LDA MARG1+2
.1a844f	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.1a8453	20 95 65	jsr $1a6595	            JSR SETFILEDESC
.1a8456	a5 11		lda $0859	                LDA MARG2                       ; Set the starting address
.1a8458	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.1a845c	a5 13		lda $085b	                LDA MARG2+2
.1a845e	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.1a8462	a5 15		lda $085d	                LDA MARG3                       ; Set the ending address
.1a8464	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.1a8468	a5 17		lda $085f	                LDA MARG3+2
.1a846a	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.1a846e	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                     ; Save the data
.1a8472	b0 25		bcs $1a8499	                BCS done
.1a8474					error
.1a8474	e2 20		sep #$20	            SEP #$20
.1a8476	a2 b5 84	ldx #$84b5	                LDX #<>MCANTSAVE                ; Print bad arguments error
.1a8479	a9 1a		lda #$1a	                LDA #`MCANTSAVE
.1a847b	48		pha		                PHA
.1a847c	ab		plb		                PLB
.1a847d	20 16 03	jsr $1a0316	            JSR PRINTS
.1a8480	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.1a8484	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a8487	a9 20		lda #$20	                LDA #' '
.1a8489	20 18 00	jsr $1a0018	            JSR PRINTC
.1a848c	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.1a8490	20 40 03	jsr $1a0340	            JSR PRHEXB
.1a8493	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a8496	20 89 02	jsr $1a0289	            JSR PRINTCR
.1a8499	28		plp		done            PLP
.1a849a	ab		plb		                PLB
.1a849b	6b		rtl		                RTL
.1a849c	5c de 25 1a	jmp $1a25de	IMEXIT          JML INTERACT
.1a84a0	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.1a84a1	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.1a84a2	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.1a84a3	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.1a84a4	00		brk #		IMDOS           BRK ; Execute DOS command
.1a84a5					MMESSAGES
>1a84a5	42 61 64 20 61 72 67 75		MERRARGS        .null "Bad arguments",CHAR_CR,CHAR_CR
>1a84ad	6d 65 6e 74 73 0d 0d 00
>1a84b5	55 6e 61 62 6c 65 20 74		MCANTSAVE       .null "Unable to save file: "
>1a84bd	6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>1a84cb	55 6e 61 62 6c 65 20 74		MCANTLOAD       .null "Unable to load file: "
>1a84d3	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00
>1a84e1	0d 20 20 50 43 20 20 20		mregisters_msg  .null $0D,"  PC     A    X    Y    SP   DBR DP   NVMXDIZC",CHAR_CR
>1a84e9	20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>1a84f9	20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>1a8509	56 4d 58 44 49 5a 43 0d 00
>1a8512	41 43 44 46 47 4a 48 4c		MCOMMANDS       .null "ACDFGJHLMR;STVWX>?"
>1a851a	4d 52 3b 53 54 56 57 58 3e 3f 00

;******  Return to file: src\basic816.s

.1a8525	18		clc		START       CLC                 ; Go to native mode
.1a8526	fb		xce		            XCE
.1a8527	08		php		            PHP
.1a8528	c2 20		rep #$20	            REP #$20
.1a852a	48		pha		            PHA
.1a852b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.1a852e	5b		tcd		            TCD
.1a852f	68		pla		            PLA
.1a8530	28		plp		            PLP
.1a8531	08		php		            PHP
.1a8532	e2 20		sep #$20	            SEP #$20
.1a8534	48		pha		            PHA
.1a8535	a9 00		lda #$00	            LDA #BASIC_BANK
.1a8537	48		pha		            PHA
.1a8538	ab		plb		            PLB
.1a8539	68		pla		            PLA
.1a853a	28		plp		            PLP
.1a853b	c2 30		rep #$30	            REP #$30
.1a853d	20 64 85	jsr $1a8564	            JSR INITBASIC
.1a8540	a9 ff fe	lda #$feff	            LDA #STACK_END      ; Set the system stack
.1a8543	1b		tcs		            TCS
.1a8544	08		php		            PHP
.1a8545	e2 20		sep #$20	            SEP #$20
.1a8547	48		pha		            PHA
.1a8548	a9 1a		lda #$1a	            LDA #`GREET
.1a854a	48		pha		            PHA
.1a854b	ab		plb		            PLB
.1a854c	68		pla		            PLA
.1a854d	28		plp		            PLP
.1a854e	a2 63 d2	ldx #$d263	            LDX #<>GREET
.1a8551	20 16 03	jsr $1a0316	            JSR PRINTS
.1a8554	08		php		            PHP
.1a8555	e2 20		sep #$20	            SEP #$20
.1a8557	48		pha		            PHA
.1a8558	a9 00		lda #$00	            LDA #BASIC_BANK
.1a855a	48		pha		            PHA
.1a855b	ab		plb		            PLB
.1a855c	68		pla		            PLA
.1a855d	28		plp		            PLP
.1a855e	4c de 25	jmp $1a25de	            JMP INTERACT        ; Start accepting input from the user
.1a8561	4c 61 85	jmp $1a8561	WAIT        JMP WAIT
.1a8564					INITBASIC
.1a8564	08		php		            PHP
.1a8565	20 d0 01	jsr $1a01d0	            JSR INITIO
.1a8568	20 85 4d	jsr $1a4d85	            JSR CMD_NEW
.1a856b	28		plp		            PLP
.1a856c	60		rts		            RTS
>1ad263	43 32 35 36 20 46 6f 65		GREET       .text "C256 Foenix BASIC816 "
>1ad26b	6e 69 78 20 42 41 53 49 43 38 31 36 20

;******  Processing file: src\version.s

>1ad278	76 30 2e 32 2e 30 2d 61		.text "v0.2.0-alpha+251"
>1ad280	6c 70 68 61 2b 32 35 31

;******  Return to file: src\basic816.s

>1ad288	0d 00				            .byte 13,0

;******  End of listing
