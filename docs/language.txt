Notes on the BASIC Implementation
=================================


## Commands

**CATALOG** ["path"] -- Print the file catalog of the provided path
**CONT** -- Continue execution after a **STOP** statement.
**DELETE** "path" -- delete the file at path
**LIST** [line1 [- [line2]] -- Print the BASIC source code. If no lines are provided, print all the program.
                               If only line1 is provided, print only that line. If line1 - is provided, print
                               starting from line1. If both line1 and line2 are provided, print from line1 to line2.
**LOAD** "path" [, address] -- Load the requested file from the designated path to the specified address
**MONITOR** -- Start the machine language monitor.
**NEW** -- Clear the current program from memory and set up BASIC to accept a new one.
**RUN** -- Start execution of a program
**SAVE** "path" -- Save the program to the file path.

## Statements
**CLOSE** <file number>
**CLR** -- Trigger garbage collection of BASIC memory.
**CMD** <file number>[, <command>] -- Send a command to the open file
**DATA** <constant>... -- Store information for later use
**DEF FN** <name> ( <variable> ) = <expr> -- define a user function
**DIM** <variable> ( <subscripts> )... -- Define an array.
**END** -- End execution of the program
**FOR** <variable> = <start> TO <limit> [STEP <increment>] <statements> **NEXT** -- Set up a loop with variable going from
    start to limit by increment.
**GET** <variable> -- Read the value for a variable from the keyboard
**GET#** <file number>, <variable> -- Read a character from an input file
**GOSUB** <line> -- Call a subroutine starting at line.
**GOTO** <line> -- Jump to line
**IF** <test> **THEN** <true case> [**ELSE** <false case>] **ENDIF** -- Evaluate <text>. If it is true, execute the <true case>
    otherwise, execute the <false case>. Both <true case> and <false case> can be a set of statements or a line number. If it
    is just a line number, it is equivalent to a GOTO statement to that line.
**INPUT** ["prompt";] <variable> -- Print the prompt ("?" if not provided), wait for key entry and assign the result to variable.
**INPUT#** <file number>, <variable> [, <variable>]... -- Read a line from the input file and attempt to assign fields to the
    variables listed. Fields are separated by comma, colon, or semicolon.
**LET** <variable> = <expr> -- Evaluate expr and assign the result to variable.
**ON** <variable> GOTO <line number> [, <line number>]...
**OPEN** <file number> [, "path"]
**POKE** <address>,<value>
**PRINT** [<variable> [,|; <variable>]...]
**PRINT#** <file number> [,<variable> [,|; <variable>]...]
**READ** <variable> [, <variable>...]
**REM** <comment>
**RESTORE**
**RETURN**
**STOP**
**SYS** <address>
**REPEAT** <statements> UNTIL <condition>
**WHILE** <condition> DO <statements> *WEND*

## Functions