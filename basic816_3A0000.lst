
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D SYSTEM=2 -D C256_SKU=1 -D UARTSUPPORT= -D UNITTEST=0 -D TRACE_LEVEL=0 --long-address --flat -b --m65816 --intel-hex -o basic816_3A0000.hex --list=basic816_3A0000.lst --labels=basic816_3A0000.lbl src\basic816.s
; Tue May 04 15:30:10 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					SYSTEM=2
=1					C256_SKU=1
=					UARTSUPPORT=
=0					UNITTEST=0
=0					TRACE_LEVEL=0

;******  Processing input file: src\basic816.s


;******  Processing file: src\constants.s

=2					SYSTEM_C256 = 2         ; C256 Foenix
=1					SYSTEM_C64 = 1          ; Commodore 64 with SuperCPU
=$03					CHAR_CTRL_C = $03       ; CTRL-C: used as a program interrupt key
=$07					CHAR_BELL = $07         ; Ring the console bell
=$08					CHAR_BS = $08           ; Backspace
=$09					CHAR_TAB = $09          ; TAB
=$0a					CHAR_LF = $0A           ; Linefeed
=$0d					CHAR_CR = $0D           ; Carriage Return
=$0f					CHAR_INS = $0F          ; Insert
=$1b					CHAR_ESC = $1B          ; Escape
=$22					CHAR_DQUOTE = $22       ; Double quote
=$20					CHAR_SP = $20           ; Space
=$7f					CHAR_DEL = $7F          ; Delete
=5					ARGUMENT_SIZE = 5       ; Number of bytes in an argument
=8					VAR_NAME_SIZE = 8       ; Maximum number of characters in a variable name
=0					TYPE_INTEGER = 0        ; 32-bit integer
=1					TYPE_FLOAT = 1          ; Single-precision floating point
=2					TYPE_STRING = 2         ; ASCII string
=$80					TYPE_ARR_INTEGER = $80  ; Array of 32-bit integers
=$81					TYPE_ARR_FLOAT = $81    ; Array of 32-bit floats
=$82					TYPE_ARR_STRING = $82   ; Array of strings
=$7f					TYPE_BINDING = $7F      ; A variable name binding
=$ff					TYPE_NAV = $FF          ; Not-A-Value
=0					ERR_OK = 0              ; No error
=1					ERR_BREAK = 1           ; The user pressed an interrupt key
=2					ERR_SYNTAX = 2          ; A syntax error was found on the current line
=3					ERR_MEMORY = 3          ; Out of memory
=4					ERR_TYPE = 4            ; Type mismatch error
=5					ERR_NOTFOUND = 5        ; Variable not found error
=6					ERR_NOLINE = 6          ; Line number not found
=7					ERR_STACKUNDER = 7      ; Stack underflow error
=8					ERR_STACKOVER = 8       ; Stack overflow error
=9					ERR_RANGE = 9           ; Out-of-range error
=10					ERR_ARGUMENT = 10       ; Bad argument error
=11					ERR_NOFILE = 11         ; File not found error
=12					ERR_NAN = 12            ; Floating point math resulted in something that is not a number
=13					ERR_OVERFLOW = 13       ; Math operation overflowed
=14					ERR_UNDERFLOW = 14      ; Math operation underflowed
=15					ERR_DIV0 = 15           ; Math operation involved a division by zero
=16					ERR_DIRECTORY = 16      ; Error reading the directory
=17					ERR_LOAD = 17           ; Could not load file
=18					ERR_SAVE = 18           ; Could not save a file
=19					ERR_DELETE = 19         ; Could not delete a file
=20					ERR_FILENOTFOUND = 20   ; Could not find the file
=21					ERR_DIRNOTWRITE = 21    ; Could not update the directory entry
=22					ERR_NOTCOPIED = 22      ; Could not copy the file
=23					ERR_DOMAIN = 23         ; Mathematical functions domain error

;******  Return to file: src\basic816.s


;******  Processing file: src\memorymap.s


;******  Processing file: src\C256/mmap_c256.s

=1					SYS_C256_FMX = 1        ; System SKU for C256 Foenix FMX
=2					SYS_C256_USER = 2       ; System SKU for C256 Foenix User

;******  Processing file: src\C256/page_00_inc.s

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Unsigned divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 0 Divisor ex B in A/B
=$000114				D0_RESULT        = $000114 ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Signed divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 1 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/int_math_defs.s

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B
=$af1400				SIGNED32_MULT_A     = $AF1400
=$af1404				SIGNED32_MULT_B     = $AF1404
=$af1408				SIGNED32_MULT_OUT   = $AF1408

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/vicky_def.s

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				GAMMA_CTRL_REG          = $AF0002
=$01					GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02					GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08					GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10					HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af0900				VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01					VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02					VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901				VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902				VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903				VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80					VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000

;******  Processing file: src\C256/VKYII_CFP9553_BITMAP_def.s

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_TILEMAP_def.s

=$01					TILE_Enable             = $01
=0					TILEMAP_CONTROL         = 0             ; Offset to a tile map's control register
=1					TILEMAP_START_ADDY      = 1             ; Offset to a tile map's address
=4					TILEMAP_TOTAL_X         = 4             ; Offset to a tile map's width
=6					TILEMAP_TOTAL_Y         = 6             ; Offset to a tile map's height
=8					TILEMAP_WINDOW_X        = 8             ; Offset to a tile map's X position
=10					TILEMAP_WINDOW_Y        = 10            ; Offset to a tile map's Y position
=1					TILEMAP_VISIBLE         = 1             ; Tile map is visible flag
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=2					TILESET_ADDY_H          = 2             ; Offset to high byte of tile set address
=3					TILESET_ADDY_CFG        = 3             ; Offset to the tile set address configuration
=$08					TILESET_SQUARE_256      = $08
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SDMA_def.s

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_VDMA_def.s

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$10					VDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					VDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SPRITE_def.s

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\C256/vicky_def.s


;******  Return to file: src\C256/mmap_c256.s

=$00					BASIC_BANK = $00            ; Memory bank for default purposes
=$004c00				IOBUF = $004C00             ; A buffer for I/O operations
=$004d00				ARRIDXBUF = $004D00         ; The array index buffer used for array references
=$004e00				TEMPBUF = $004E00           ; Temporary buffer for string processing, etc.
=$004f00				INPUTBUF = $004F00          ; Starting address of the line input buffer (one page)
=$005000				RETURN_BOT = $005000        ; Starting address of the return stack
=$005fff				RETURN_TOP = $005FFF        ; Ending address of the return stack
=$006000				ARGUMENT_BOT = $006000      ; Starting address of the argument stack
=$006fff				ARGUMENT_TOP = $006FFF      ; Ending address of the argument stack
=$007000				OPERATOR_BOT = $007000      ; Starting address of the operator stack
=$007fff				OPERATOR_TOP = $007FFF      ; Ending address of the operator stack
=$b00000				VRAM = $B00000              ; Start of video RAM
=$010000				LOADBLOCK = $010000         ; File loading will start here
=$360000				BASIC_BOT := $360000         ; Starting point for BASIC programs
=$37ffff				HEAP_TOP := $37FFFF          ; Starting point of the heap

;******  Return to file: src\memorymap.s

=$00ffe6				VBRK = $00FFE6          ; Vector for the native-mode BRK vector
=$3ad000				DATA_BLOCK = *
=$000800				GLOBAL_VARS = *
>0800					BIP         .dword ?    ; Pointer to the current byte in the current BASIC program
>0804					BIPPREV     .dword ?    ; Pointer to the previous bytein the current BASIC program
>0808					INDEX       .dword ?    ; A temporary pointer
>080c					SCRATCH     .dword ?    ; A temporary scratch variable
>0810					SCRATCH2    .dword ?    ; A temporary scratch variable
>0814					            .word  ?	; Need a few more bits for BCD conversion
>0816					STRPTR      .dword ?    ; A temporary pointer for strings
>081a					CURLINE     .dword ?    ; Pointer to the current input line needing tokenization
>081e					CURTOKLEN   .byte ?     ; Length of the text of the current token
>081f					ARGUMENTSP  .word ?     ; Pointer to the top of the argument stack
>0821					OPERATORSP  .word ?     ; Pointer to the top of the operator stack
>0823					ARGUMENT1   .dword ?    ; Argument 1 for expression calculations
>0827					ARGTYPE1    .byte ?     ; Type code for argument 1 (integer, float, string)
>0828					SIGN1       .byte ?     ; Temporary sign marker for argument 1
>0829					ARGUMENT2   .dword ?    ; Argument 2 for expression calculations
>082d					ARGTYPE2    .byte ?     ; Type code for argument 2 (integer, float, string)
>082e					SIGN2       .byte ?     ; Temporary sign marker for argument 1
>082f					JMP16PTR    .word ?     ; Pointer for 16-bit indirect jumps (within BASIC816's code base)
>0831					GOSUBDEPTH  .word ?     ; Number of GOSUBs on the stack
>0833					RETURNSP    .word ?     ; Pointer to the top of the return stack
>0835					SKIPNEST    .byte ?     ; Flag to indicate if token seeking should respect nesting (MSB set if so)
>0836					NESTING     .byte ?     ; Counter of the depth of lexical nesting for FOR/NEXT, DO/LOOP
>0837					TARGETTOK   .byte ?     ; When searching for a token, TARGETTOK is the token to find
>0838					DATABIP     .dword ?    ; Pointer to the next data element for READ statements
>083c					DATALINE    .dword ?    ; Pointer to the current line for a DATA statement
>0840					SAVEBIP     .dword ?    ; Spot to save BIP temporarily
>0844					SAVELINE    .dword ?    ; Spot to save CURLINE temporarily
=$000848				MONITOR_VARS = *
>0848					MCMDADDR    .long ?     ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
>084b					MCMP_TEXT   .long ?     ;3 Bytes Address of symbol being evaluated for COMPARE routine
>084e					MCMP_LEN    .word ?     ;2 Bytes Length of symbol being evaluated for COMPARE routine
>0850					MCMD        .long ?     ;3 Bytes Address of the current command/function string
>0853					MCMD_LEN    .word ?     ;2 Bytes Length of the current command/function string
>0855					MARG1       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command
>0859					MARG2       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>085d					MARG3       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0861					MARG4       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0865					MARG5       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0869					MARG6       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>086d					MARG7       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0871					MARG8       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0875					MARG9       .dword ?    ;4 Bytes First command argument.
>0879					MARG_LEN    .byte ?     ;1 Byte count of the number of arguments passed
>087a					MCURSOR     .dword ?    ;4 Bytes Pointer to the current memory location for disassembly, memory dump, etc.
>087e					MLINEBUF    .fill 17    ;17 Byte buffer for dumping memory (TODO: could be moved to a general string scratch area)
>088f					MCOUNT      .long ?     ;2 Byte counter
>0892					MTEMP       .dword ?    ;4 Bytes of temporary space
>0896					MCPUSTAT    .byte ?     ;1 Byte to represent what the disassembler thinks the processor MX bits are
>0897					MADDR_MODE  .byte ?     ;1 Byte address mode found by the assembler
>0898					MPARSEDNUM  .dword ?    ;4 Bytes to store a parsed number
>089c					MMNEMONIC   .word ?     ;2 Byte address of mnemonic found by the assembler
>089e					MTEMPPTR    .dword ?    ;4 Byte temporary pointer
>08a2					MJUMPINST   .byte ?     ;1 Byte JSL opcode
>08a3					MJUMPADDR   .long ?     ;3 Byte address for JSL
=$000823				MANTISSA1 = ARGUMENT1
=$000826				EXPONENT1 = ARGUMENT1+3

;******  Return to file: src\basic816.s


;******  Processing file: src\macros.s


;******  Return to file: src\basic816.s

.3a0000	5c fe 87 3a	jmp $3a87fe	COLDBOOT        JML START               ; Entry point to boot up BASIC from scratch
.3a0004	5c 0d 6e 3a	jmp $3a6e0d	MONITOR         JML IMONITOR            ; Entry point to the machine language monitor
.3a0008	5c ef 25 3a	jmp $3a25ef	READLINE        JML IREADLINE           ; Wait for the user to enter a line of text (for programming input)
.3a000c	5c 94 01 3a	jmp $3a0194	SCRCOPYLINE     JML ISCRCPYLINE         ; Copy the line on the screen the user just input to INPUTBUF
.3a0010	5c 58 00 3a	jmp $3a0058	INPUTLINE       JML IINPUTLINE          ; Read a single line of text from the user, and copy it to TEMPBUF (for INPUT statement)
.3a0014	5c d6 00 3a	jmp $3a00d6	GETKEY          JML IGETKEY             ; Wait for a keypress by the user and return the ASCII code in A
.3a0018	5c fa 02 3a	jmp $3a02fa	PRINTC          JML IPRINTC             ; Print the character in A to the console
.3a001c	5c 38 01 3a	jmp $3a0138	SHOWCURSOR      JML ISHOWCURSOR         ; Set cursor visibility: A=0, hide... A<>0, show.
.3a0020	5c 53 01 3a	jmp $3a0153	CURSORXY        JML ICURSORXY           ; Set the position of the cursor to (X, Y)
.3a0024	5c 5a 01 3a	jmp $3a015a	CLSCREEN        JML ICLSCREEN           ; Clear the screen

;******  Processing file: src\bios.s


;******  Processing file: src\membuffers.s

>08a6					OBUFFER     .long ?     ; Pointer to the current text memory buffer for output
>08a9					OBUFFSIZE   .word ?     ; Maximum size of output text memory buffer
>08ab					OBUFFIDX    .word ?     ; Index into the current output buffer
>08ad					IBUFFER     .long ?     ; Pointer to the current text memory buffer for input
>08b0					IBUFFSIZE   .word ?     ; Number of bytes written to the buffer
>08b2					IBUFFIDX    .word ?     ; Index into the current input buffer (next available character)
.3a0028					OBUFF_PUTC
.3a0028	0b		phd		                PHD
.3a0029	08		php		                PHP
.3a002a	08		php		            PHP
.3a002b	c2 20		rep #$20	            REP #$20
.3a002d	48		pha		            PHA
.3a002e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0031	5b		tcd		            TCD
.3a0032	68		pla		            PLA
.3a0033	28		plp		            PLP
.3a0034	e2 20		sep #$20	            SEP #$20
.3a0036	85 b5		sta $08b5	                STA SAVE_A
.3a0038	c2 20		rep #$20	            REP #$20
.3a003a	a5 a6		lda $08a6	                LDA OBUFFER
.3a003c	d0 06		bne $3a0044	                BNE has_buffer
.3a003e	e2 20		sep #$20	            SEP #$20
.3a0040	a5 a8		lda $08a8	                LDA OBUFFER+2
.3a0042	f0 11		beq $3a0055	                BEQ done
.3a0044					has_buffer
.3a0044	c2 10		rep #$10	            REP #$10
.3a0046	a4 ab		ldy $08ab	                LDY OBUFFIDX        ; Check to make sure there is room
.3a0048	c4 a9		cpy $08a9	                CPY OBUFFSIZE
.3a004a	f0 09		beq $3a0055	                BEQ done            ; If not, exit silently
.3a004c	e2 20		sep #$20	            SEP #$20
.3a004e	a5 b5		lda $08b5	                LDA SAVE_A
.3a0050	97 a6		sta [$08a6],y	                STA [OBUFFER],Y     ; Write the character to the buffer
.3a0052	c8		iny		                INY                 ; Increment the index
.3a0053	84 ab		sty $08ab	                STY OBUFFIDX
.3a0055	28		plp		done            PLP
.3a0056	2b		pld		                PLD
.3a0057	60		rts		            RTS

;******  Return to file: src\bios.s


;******  Processing file: src\C256/io_c256.s


;******  Processing file: src\C256/kernel_c256.s

=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001080				FK_PRINTAH          = $001080 ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/RTC_inc.s

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/keyboard.s


;******  Processing file: src\C256/keyboard_def.s

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04

;******  Return to file: src\C256/keyboard.s

.3a0058					IINPUTLINE
.3a0058	08		php		                PHP
.3a0059	c2 10		rep #$10	            REP #$10
.3a005b	e2 20		sep #$20	            SEP #$20
.3a005d	a9 01		lda #$01	                LDA #1              ; Show the cursor
.3a005f	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a0062	a2 00 00	ldx #$0000	                LDX #0
.3a0065	a9 00		lda #$00	                LDA #0
.3a0067	9f 00 4c 00	sta $004c00,x	zero_loop       STA @lIOBUF,X
.3a006b	e8		inx		                INX
.3a006c	e0 00 01	cpx #$0100	                CPX #$100
.3a006f	d0 f6		bne $3a0067	                BNE zero_loop
.3a0071	a2 00 00	ldx #$0000	                LDX #0
.3a0074					getchar
.3a0074	20 14 00	jsr $3a0014	            JSR GETKEY
.3a0077	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; Got a CR?
.3a0079	d0 03		bne $3a007e	                BNE not_cr
.3a007b	4c cf 00	jmp $3a00cf	                JMP endofline       ; Yes: we're done
.3a007e	c9 9d		cmp #$9d	not_cr          CMP #K_LEFT         ; Is it the left cursor?
.3a0080	d0 08		bne $3a008a	                BNE not_left
.3a0082	e0 00 00	cpx #$0000	                CPX #0              ; Are we all the way to the left?
.3a0085	f0 ed		beq $3a0074	                BEQ getchar         ; Yes: ignore it
.3a0087	ca		dex		                DEX                 ; Move the cursor back
.3a0088	80 39		bra $3a00c3	                BRA echo            ; And echo it
.3a008a	c9 1d		cmp #$1d	not_left        CMP #K_RIGHT        ; Is it the right arrow?
.3a008c	d0 0e		bne $3a009c	                BNE not_right
.3a008e	bf 00 4c 00	lda $004c00,x	                LDA @lIOBUF,X       ; Check the current character
.3a0092	f0 e0		beq $3a0074	                BEQ getchar         ; If it's already blank, we're as far right as we go
.3a0094	e0 4f 00	cpx #$004f	                CPX #79             ; Are we at the end of the line?
.3a0097	f0 db		beq $3a0074	                BEQ getchar         ; Yes: ignore it
.3a0099	e8		inx		                INX                 ; Otherwise: advance the cursor
.3a009a	80 27		bra $3a00c3	                BRA echo            ; And print the code
.3a009c	c9 08		cmp #$08	not_right       CMP #CHAR_BS        ; Is it a backspace?
.3a009e	d0 1a		bne $3a00ba	                BNE not_bs
.3a00a0	e0 00 00	cpx #$0000	                CPX #0              ; Are we at the beginning of the line?
.3a00a3	f0 cf		beq $3a0074	                BEQ getchar         ; yes: ignore the backspace
.3a00a5	da		phx		                PHX                 ; Save the cursor position
.3a00a6	bf 01 4c 00	lda $004c01,x	clr_loop        LDA @lIOBUF+1,X     ; Get the character above
.3a00aa	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the current position
.3a00ae	f0 06		beq $3a00b6	                BEQ done_clr        ; If we copied a NUL, we're done copying
.3a00b0	e8		inx		                INX                 ; Otherwise, keep copying down
.3a00b1	e0 ff 00	cpx #$00ff	                CPX #$FF            ; Until we're at the end of the buffer
.3a00b4	d0 f0		bne $3a00a6	                BNE clr_loop
.3a00b6	fa		plx		done_clr        PLX                 ; Restore the cursor position
.3a00b7	ca		dex		                DEX                 ; No: move the cursor left
.3a00b8	80 0e		bra $3a00c8	                BRA print_bs        ; And print the backspace
.3a00ba	c9 20		cmp #$20	not_bs          CMP #$20            ; Is it in range 00 -- 1F?
.3a00bc	90 b6		bcc $3a0074	                BLT getchar         ; Yes: ignore it
.3a00be	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the input buffer
.3a00c2	e8		inx		                INX                 ; Move the cursor forward
.3a00c3					echo
.3a00c3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00c6	80 ac		bra $3a0074	                BRA getchar         ; And get another...
.3a00c8	a9 08		lda #$08	print_bs        LDA #CHAR_BS        ; Backspace character...
.3a00ca	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00cd	80 a5		bra $3a0074	                BRA getchar         ; And get another...
.3a00cf	a9 00		lda #$00	endofline       LDA #0              ; Hide the cursor
.3a00d1	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a00d4	28		plp		                PLP
.3a00d5	60		rts		            RTS
.3a00d6					IGETKEY
.3a00d6	22 4c 10 00	jsl $00104c	                JSL FK_GETCHW
.3a00da	60		rts		            RTS
.3a00db					GETKEYE
.3a00db	08		php		                PHP
.3a00dc	e2 20		sep #$20	            SEP #$20
.3a00de					loop
.3a00de	20 14 00	jsr $3a0014	            JSR GETKEY
.3a00e1	c9 11		cmp #$11	                CMP #K_UP
.3a00e3	f0 17		beq $3a00fc	                BEQ csr_up
.3a00e5	c9 91		cmp #$91	                CMP #K_DOWN
.3a00e7	f0 17		beq $3a0100	                BEQ csr_down
.3a00e9	c9 9d		cmp #$9d	                CMP #K_LEFT
.3a00eb	f0 1b		beq $3a0108	                BEQ csr_left
.3a00ed	c9 1d		cmp #$1d	                CMP #K_RIGHT
.3a00ef	f0 13		beq $3a0104	                BEQ csr_right
.3a00f1	c9 80		cmp #$80	                CMP #128                ; Temporary: skip anything outside ASCII
.3a00f3	b0 e9		bcs $3a00de	                BGE loop
.3a00f5	48		pha		                PHA
.3a00f6	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00f9	68		pla		                PLA
.3a00fa	28		plp		done            PLP
.3a00fb	60		rts		            RTS
.3a00fc	a9 41		lda #$41	csr_up          LDA #'A'
.3a00fe	80 0a		bra $3a010a	                BRA pr_ansi
.3a0100	a9 42		lda #$42	csr_down        LDA #'B'
.3a0102	80 06		bra $3a010a	                BRA pr_ansi
.3a0104	a9 43		lda #$43	csr_right       LDA #'C'
.3a0106	80 02		bra $3a010a	                BRA pr_ansi
.3a0108	a9 44		lda #$44	csr_left        LDA #'D'
.3a010a	48		pha		pr_ansi         PHA
.3a010b	a9 1b		lda #$1b	                LDA #CHAR_ESC
.3a010d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0110	a9 5b		lda #$5b	                LDA #'['
.3a0112	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0115	68		pla		                PLA
.3a0116	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0119	a9 00		lda #$00	                LDA #0
.3a011b	80 dd		bra $3a00fa	                BRA done
=$11					K_UP = $11      ; Keypad UP
=$1d					K_RIGHT = $1D   ; Keypad Right
=$91					K_DOWN = $91    ; Keypad Down
=$9d					K_LEFT = $9D    ; Keypad Left

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/screen.s

.3a011d					ENSURETEXT
.3a011d	08		php		            PHP
.3a011e	e2 20		sep #$20	            SEP #$20
.3a0120	af 00 00 af	lda $af0000	            LDA @l MASTER_CTRL_REG_L            ; Get the current display mode
.3a0124	89 3c		bit #$3c	            BIT #Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_TileMap_En | Mstr_Ctrl_Sprite_En
.3a0126	f0 08		beq $3a0130	            BEQ textonly                        ; If not, make sure text is enabled
.3a0128					overlay
.3a0128	09 03		ora #$03	            ORA #Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay
.3a012a	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.3a012e	80 06		bra $3a0136	            BRA done
.3a0130					textonly
.3a0130	09 01		ora #$01	            ORA #Mstr_Ctrl_Text_Mode_En
.3a0132	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.3a0136	28		plp		done        PLP
.3a0137	60		rts		            RTS
.3a0138					ISHOWCURSOR
.3a0138	08		php		            PHP
.3a0139	e2 20		sep #$20	            SEP #$20
.3a013b	c9 00		cmp #$00	            CMP #0
.3a013d	f0 08		beq $3a0147	            BEQ hide
.3a013f	af 10 00 af	lda $af0010	show        LDA @lVKY_TXT_CURSOR_CTRL_REG
.3a0143	09 01		ora #$01	            ORA #Vky_Cursor_Enable
.3a0145	80 06		bra $3a014d	            BRA setit
.3a0147	af 10 00 af	lda $af0010	hide        LDA @lVKY_TXT_CURSOR_CTRL_REG
.3a014b	29 fe		and #$fe	            AND #~Vky_Cursor_Enable
.3a014d	8f 10 00 af	sta $af0010	setit       STA @lVKY_TXT_CURSOR_CTRL_REG
.3a0151	28		plp		            PLP
.3a0152	60		rts		            RTS
.3a0153					ICURSORXY
.3a0153	08		php		            PHP
.3a0154	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.3a0158	28		plp		            PLP
.3a0159	60		rts		            RTS
.3a015a					ICLSCREEN
.3a015a	48		pha		            PHA
.3a015b	da		phx		            PHX
.3a015c	5a		phy		            PHY
.3a015d	0b		phd		            PHD
.3a015e	08		php		            PHP
.3a015f	e2 20		sep #$20	            SEP #$20
.3a0161	c2 10		rep #$10	            REP #$10
.3a0163	a2 00 00	ldx #$0000	            LDX #0
.3a0166	a9 20		lda #$20	loop        LDA #$20
.3a0168	9f 00 a0 af	sta $afa000,x	            STA @lCS_TEXT_MEM_PTR,X     ; Write a space in the text cell
.3a016c	af 1e 00 00	lda $00001e	            LDA @lCURCOLOR
.3a0170	9f 00 c0 af	sta $afc000,x	            STA @lCS_COLOR_MEM_PTR,X    ; Set the color to green on black
.3a0174	e8		inx		            INX                         ; Move to the next character cell
.3a0175	e0 00 20	cpx #$2000	            CPX #$2000
.3a0178	d0 ec		bne $3a0166	            BNE loop
.3a017a	08		php		            PHP
.3a017b	c2 20		rep #$20	            REP #$20
.3a017d	48		pha		            PHA
.3a017e	a9 00 00	lda #$0000	            LDA #0
.3a0181	5b		tcd		            TCD
.3a0182	68		pla		            PLA
.3a0183	28		plp		            PLP
.3a0184	a2 00 00	ldx #$0000	            LDX #0                      ; Set cursor to upper-left corner
.3a0187	a0 00 00	ldy #$0000	            LDY #0
.3a018a	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.3a018e	28		plp		            PLP
.3a018f	2b		pld		            PLD
.3a0190	7a		ply		            PLY
.3a0191	fa		plx		            PLX
.3a0192	68		pla		            PLA
.3a0193	60		rts		            RTS
.3a0194					ISCRCPYLINE
.3a0194	da		phx		            PHX
.3a0195	5a		phy		            PHY
.3a0196	0b		phd		            PHD
.3a0197	08		php		            PHP
.3a0198	08		php		            PHP
.3a0199	c2 20		rep #$20	            REP #$20
.3a019b	48		pha		            PHA
.3a019c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a019f	5b		tcd		            TCD
.3a01a0	68		pla		            PLA
.3a01a1	28		plp		            PLP
.3a01a2	c2 30		rep #$30	            REP #$30
.3a01a4	af 0c 00 00	lda $00000c	            LDA @lSCREENBEGIN       ; Set INDEX to the first byte of the text screen
.3a01a8	85 08		sta $0808	            STA INDEX
.3a01aa	e2 20		sep #$20	            SEP #$20
.3a01ac	af 0e 00 00	lda $00000e	            LDA @lSCREENBEGIN+2
.3a01b0	c2 20		rep #$20	            REP #$20
.3a01b2	29 ff 00	and #$00ff	            AND #$00FF
.3a01b5	85 0a		sta $080a	            STA INDEX+2
.3a01b7	af 11 00 00	lda $000011	            LDA @lCOLS_PER_LINE     ; Calculate the offset to the current line
.3a01bb	8f 08 01 00	sta $000108	            STA @lM1_OPERAND_A
.3a01bf	af 1c 00 00	lda $00001c	            LDA @lCURSORY
.3a01c3	3a		dec a		            DEC A
.3a01c4	8f 0a 01 00	sta $00010a	            STA @lM1_OPERAND_B
.3a01c8	18		clc		            CLC                     ; And add it to INDEX
.3a01c9	a5 08		lda $0808	            LDA INDEX
.3a01cb	6f 0c 01 00	adc $00010c	            ADC @lM1_RESULT
.3a01cf	85 08		sta $0808	            STA INDEX
.3a01d1	a5 0a		lda $080a	            LDA INDEX+2
.3a01d3	69 00 00	adc #$0000	            ADC #0
.3a01d6	85 0a		sta $080a	            STA INDEX+2
.3a01d8	e2 20		sep #$20	            SEP #$20
.3a01da	af 0f 00 00	lda $00000f	            LDA @lCOLS_VISIBLE
.3a01de	85 8f		sta $088f	            STA MCOUNT
.3a01e0	a0 00 00	ldy #$0000	            LDY #0
.3a01e3	a2 00 00	ldx #$0000	            LDX #0
.3a01e6	b7 08		lda [$0808],y	copy_loop   LDA [INDEX],Y           ; Copy a byte from the screen to the input buffer
.3a01e8	9f 00 4f 00	sta $004f00,x	            STA @lINPUTBUF,X
.3a01ec	e8		inx		            INX
.3a01ed	c8		iny		            INY
.3a01ee	c4 8f		cpy $088f	            CPY MCOUNT
.3a01f0	d0 f4		bne $3a01e6	            BNE copy_loop
.3a01f2	ca		dex		            DEX
.3a01f3	bf 00 4f 00	lda $004f00,x	trim_loop   LDA @lINPUTBUF,X        ; Replace spaces at the end with NULLs
.3a01f7	c9 20		cmp #$20	            CMP #CHAR_SP
.3a01f9	d0 09		bne $3a0204	            BNE done
.3a01fb	a9 00		lda #$00	            LDA #0
.3a01fd	9f 00 4f 00	sta $004f00,x	            STA @lINPUTBUF,X
.3a0201	ca		dex		            DEX
.3a0202	10 ef		bpl $3a01f3	            BPL trim_loop
.3a0204	28		plp		done        PLP
.3a0205	2b		pld		            PLD
.3a0206	7a		ply		            PLY
.3a0207	fa		plx		            PLX
.3a0208	60		rts		            RTS

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/gabe_defs.s

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04					GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08					GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01					GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02					GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10					GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20					GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40					GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80					GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04					GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10					GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a				GABE_SUBVERSION_LO  = $AFE88A
=$afe88b				GABE_SUBVERSION_HI  = $AFE88B
=$afe88c				GABE_VERSION_LO     = $AFE88C
=$afe88d				GABE_VERSION_HI     = $AFE88D
=$afe88e				GABE_MODEL_LO       = $AFE88E
=$afe88f				GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\C256/io_c256.s

=32					BORDER_WIDTH = 32               ; The width of the border (when it is on)
=72					TEXT_COLS_WB = 72               ; Number of columns of text with the border enabled
=52					TEXT_ROWS_WB = 52               ; Number of rows of text with the border enabled
=80					TEXT_COLS_WOB = 80              ; Number of columns of text with no border enabled
=60					TEXT_ROWS_WOB = 60              ; Number of rows of text with no border enabled
.3a0209					INITIO
.3a0209	e2 20		sep #$20	            SEP #$20
.3a020b	20 54 02	jsr $3a0254	            JSR INITRNG
.3a020e	a9 48		lda #$48	            LDA #TEXT_COLS_WB   ; Make sure the screen size is right
.3a0210	8f 0f 00 00	sta $00000f	            STA @lCOLS_VISIBLE  ; TODO: remove this when the kernel is correct
.3a0214	a9 34		lda #$34	            LDA #TEXT_ROWS_WB
.3a0216	8f 13 00 00	sta $000013	            STA @lLINES_VISIBLE
.3a021a	a9 20		lda #$20	            LDA #BORDER_WIDTH   ; Set the border width
.3a021c	8f 08 00 af	sta $af0008	            STA BORDER_X_SIZE
.3a0220	8f 09 00 af	sta $af0009	            STA BORDER_Y_SIZE
.3a0224	a2 00 00	ldx #$0000	            LDX #0              ; Clear all the sprite control shadow registers
.3a0227	a9 00		lda #$00	            LDA #0
.3a0229	9f 18 f0 3a	sta $3af018,x	sp_loop     STA GS_SP_CONTROL,X
.3a022d	e8		inx		            INX
.3a022e	e0 40 00	cpx #$0040	            CPX #SP_MAX
.3a0231	d0 f6		bne $3a0229	            BNE sp_loop
.3a0233	a9 80		lda #$80	            LDA #DEV_SCREEN
.3a0235	8f b4 08 00	sta $0008b4	            STA @lBCONSOLE
.3a0239	e2 20		sep #$20	            SEP #$20
.3a023b	a9 00		lda #$00	            LDA #0                  ; Clear the lock key flags
.3a023d	8f 89 0f 00	sta $000f89	            STA @lKEYBOARD_LOCKS
.3a0241	a9 00		lda #$00	            LDA #0
.3a0243	8f 00 02 af	sta $af0200	            STA @l TL0_CONTROL_REG
.3a0247	8f 0c 02 af	sta $af020c	            STA @l TL1_CONTROL_REG
.3a024b	8f 18 02 af	sta $af0218	            STA @l TL2_CONTROL_REG
.3a024f	8f 24 02 af	sta $af0224	            STA @l TL3_CONTROL_REG
.3a0253					done
.3a0253	60		rts		            RTS
.3a0254					INITRNG
.3a0254	08		php		            PHP
.3a0255	e2 20		sep #$20	            SEP #$20
.3a0257	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Pause updates to the clock registers
.3a025b	09 08		ora #$08	            ORA #%00001000
.3a025d	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.3a0261	af 00 08 af	lda $af0800	            LDA @l RTC_SEC          ; Set the random number generator seed
.3a0265	8f 84 e8 af	sta $afe884	            STA @l GABE_RNG_SEED_LO
.3a0269	af 02 08 af	lda $af0802	            LDA @l RTC_MIN
.3a026d	8f 85 e8 af	sta $afe885	            STA @l GABE_RNG_SEED_HI
.3a0271	a9 03		lda #$03	            LDA #GABE_RNG_CTRL_DV | GABE_RNG_CTRL_EN
.3a0273	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL    ; Load the seed into the RNG
.3a0277	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Re-enable updates to the clock registers
.3a027b	29 f7		and #$f7	            AND #%11110111
.3a027d	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.3a0281	ea		nop		            NOP                     ; Give the RNG some time... not sure if needed, really
.3a0282	ea		nop		            NOP
.3a0283	ea		nop		            NOP
.3a0284	a9 01		lda #$01	            LDA #GABE_RNG_CTRL_EN   ; Turn on the random number genertator
.3a0286	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL
.3a028a	28		plp		            PLP
.3a028b	60		rts		            RTS
.3a028c					SCREEN_PUTC
.3a028c	08		php		            PHP
.3a028d	e2 20		sep #$20	            SEP #$20
.3a028f	48		pha		            PHA
.3a0290	48		pha		            PHA
.3a0291	a9 00		lda #$00	            LDA #CHAN_CONSOLE       ; Switch to the console device
.3a0293	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.3a0297	68		pla		            PLA
.3a0298	22 18 10 00	jsl $001018	            JSL FK_PUTC
.3a029c	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.3a02a0	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.3a02a2	d0 f8		bne $3a029c	            BNE loop                ; Yes: wait until it's released
.3a02a4	68		pla		            PLA
.3a02a5	28		plp		            PLP
.3a02a6	60		rts		            RTS
.3a02a7					UART_PUTC
.3a02a7	08		php		            PHP
.3a02a8	e2 20		sep #$20	            SEP #$20
.3a02aa	48		pha		            PHA
.3a02ab	48		pha		            PHA
.3a02ac	a9 01		lda #$01	            LDA #CHAN_COM1          ; Switch to COM1
.3a02ae	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.3a02b2	68		pla		            PLA
.3a02b3	22 18 10 00	jsl $001018	            JSL FK_PUTC
.3a02b7	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.3a02bb	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.3a02bd	d0 f8		bne $3a02b7	            BNE loop                ; Yes: wait until it's released
.3a02bf	68		pla		            PLA
.3a02c0	28		plp		            PLP
.3a02c1	60		rts		            RTS
.3a02c2					PRINTCR
.3a02c2	08		php		            PHP
.3a02c3	c2 20		rep #$20	            REP #$20
.3a02c5	48		pha		            PHA
.3a02c6	e2 20		sep #$20	            SEP #$20
.3a02c8	a9 0d		lda #$0d	            LDA #CHAR_CR
.3a02ca	20 18 00	jsr $3a0018	            JSR PRINTC
.3a02cd	c2 20		rep #$20	            REP #$20
.3a02cf	68		pla		            PLA
.3a02d0	28		plp		            PLP
.3a02d1	60		rts		            RTS
.3a02d2					PRINTH
.3a02d2	08		php		            PHP
.3a02d3	22 78 10 00	jsl $001078	            JSL FK_IPRINTH
.3a02d7	28		plp		            PLP
.3a02d8	60		rts		            RTS

;******  Return to file: src\bios.s

=10					LINES_PER_PAGE = 10     ; The number of lines to print on a page before pausing
=$80					DEV_SCREEN = $80        ; Use the screen and keyboard for the console device
=$40					DEV_UART = $40          ; Use UART for console device
=$20					DEV_BUFFER = $20        ; Use the current text memory buffer for output or input
>08b4					BCONSOLE    .byte ?     ; Device for BASIC console
>08b5					SAVE_A      .byte ?     ; Save spot for the A register
>08b6					LINECOUNT   .byte ?     ; Counter for new lines to support pagination
.3a02d9					PAGINATE
.3a02d9	08		php		            PHP
.3a02da	0b		phd		            PHD
.3a02db	08		php		            PHP
.3a02dc	c2 20		rep #$20	            REP #$20
.3a02de	48		pha		            PHA
.3a02df	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a02e2	5b		tcd		            TCD
.3a02e3	68		pla		            PLA
.3a02e4	28		plp		            PLP
.3a02e5	e2 20		sep #$20	            SEP #$20
.3a02e7	a5 b6		lda $08b6	            LDA LINECOUNT           ; Check the line count
.3a02e9	1a		inc a		            INC A
.3a02ea	85 b6		sta $08b6	            STA LINECOUNT
.3a02ec	cf 13 00 00	cmp $000013	            CMP @l LINES_VISIBLE
.3a02f0	90 05		bcc $3a02f7	            BLT done                ; If < limit, just return
.3a02f2	20 14 00	jsr $3a0014	            JSR GETKEY
.3a02f5	64 b6		stz $08b6	            STZ LINECOUNT           ; And reset the line count
.3a02f7	2b		pld		done        PLD
.3a02f8	28		plp		            PLP
.3a02f9	60		rts		            RTS
.3a02fa					IPRINTC
.3a02fa	da		phx		            PHX
.3a02fb	5a		phy		            PHY
.3a02fc	0b		phd		            PHD
.3a02fd	08		php		            PHP
.3a02fe	08		php		            PHP
.3a02ff	c2 20		rep #$20	            REP #$20
.3a0301	48		pha		            PHA
.3a0302	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0305	5b		tcd		            TCD
.3a0306	68		pla		            PLA
.3a0307	28		plp		            PLP
.3a0308	e2 20		sep #$20	            SEP #$20
.3a030a	c2 10		rep #$10	            REP #$10
.3a030c	8f b5 08 00	sta $0008b5	            STA @lSAVE_A
.3a0310	af b4 08 00	lda $0008b4	chk_out     LDA @lBCONSOLE      ; Check to see if we should send to an output buffer
.3a0314	29 20		and #$20	            AND #DEV_BUFFER
.3a0316	f0 07		beq $3a031f	            BEQ check_scrn      ; No... move on to the hardware screen
.3a0318	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a031c	20 28 00	jsr $3a0028	            JSR OBUFF_PUTC
.3a031f	af b4 08 00	lda $0008b4	check_scrn  LDA @lBCONSOLE
.3a0323	29 80		and #$80	            AND #DEV_SCREEN     ; Check to see if the screen is selected
.3a0325	f0 07		beq $3a032e	            BEQ send_uart
.3a0327	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a032b	20 8c 02	jsr $3a028c	            JSR SCREEN_PUTC
.3a032e	af b4 08 00	lda $0008b4	send_uart   LDA @lBCONSOLE
.3a0332	29 40		and #$40	            AND #DEV_UART       ; Check to see if the UART is active
.3a0334	f0 14		beq $3a034a	            BEQ done
.3a0336	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a033a	20 a7 02	jsr $3a02a7	            JSR UART_PUTC
.3a033d	af b5 08 00	lda $0008b5	            LDA @lSAVE_A        ; If sending a CR to the serial port
.3a0341	c9 0d		cmp #$0d	            CMP #CHAR_CR
.3a0343	d0 05		bne $3a034a	            BNE done
.3a0345	a9 0a		lda #$0a	            LDA #CHAR_LF        ; Send a linefeed after
.3a0347	20 a7 02	jsr $3a02a7	            JSR UART_PUTC
.3a034a	28		plp		done        PLP
.3a034b	2b		pld		            PLD
.3a034c	7a		ply		            PLY
.3a034d	fa		plx		            PLX
.3a034e	60		rts		            RTS
.3a034f					PRINTS
.3a034f	08		php		            PHP
.3a0350	e2 20		sep #$20	            SEP #$20
.3a0352	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.3a0355	f0 06		beq $3a035d	            BEQ done
.3a0357	20 18 00	jsr $3a0018	            JSR PRINTC
.3a035a	e8		inx		            INX
.3a035b	80 f5		bra $3a0352	            BRA loop
.3a035d	28		plp		done        PLP
.3a035e	60		rts		            RTS
.3a035f					PRHEXW
.3a035f	08		php		            PHP
.3a0360	c2 20		rep #$20	            REP #$20
.3a0362	48		pha		            PHA
.3a0363	48		pha		            PHA
.3a0364	4a		lsr a		            LSR A
.3a0365	4a		lsr a		            LSR A
.3a0366	4a		lsr a		            LSR A
.3a0367	4a		lsr a		            LSR A
.3a0368	4a		lsr a		            LSR A
.3a0369	4a		lsr a		            LSR A
.3a036a	4a		lsr a		            LSR A
.3a036b	4a		lsr a		            LSR A
.3a036c	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a036f	68		pla		            PLA
.3a0370	29 ff 00	and #$00ff	            AND #$00FF
.3a0373	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a0376	68		pla		            PLA
.3a0377	28		plp		            PLP
.3a0378	60		rts		            RTS
.3a0379					PRHEXB
.3a0379	08		php		            PHP
.3a037a	c2 20		rep #$20	            REP #$20
.3a037c	48		pha		            PHA
.3a037d	e2 20		sep #$20	            SEP #$20
.3a037f	48		pha		            PHA
.3a0380	4a		lsr a		            LSR A
.3a0381	4a		lsr a		            LSR A
.3a0382	4a		lsr a		            LSR A
.3a0383	4a		lsr a		            LSR A
.3a0384	20 90 03	jsr $3a0390	            JSR PRHEXN
.3a0387	68		pla		            PLA
.3a0388	20 90 03	jsr $3a0390	            JSR PRHEXN
.3a038b	c2 20		rep #$20	            REP #$20
.3a038d	68		pla		            PLA
.3a038e	28		plp		            PLP
.3a038f	60		rts		            RTS
.3a0390					PRHEXN
.3a0390	08		php		            PHP
.3a0391	c2 30		rep #$30	            REP #$30
.3a0393	da		phx		            PHX
.3a0394	29 0f 00	and #$000f	            AND #$000F
.3a0397	aa		tax		            TAX
.3a0398	bf 00 d0 3a	lda $3ad000,x	            LDA @lHEXDIGITS,X
.3a039c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a039f	fa		plx		            PLX
.3a03a0	28		plp		            PLP
.3a03a1	60		rts		            RTS
>3ad000	30 31 32 33 34 35 36 37		HEXDIGITS   .text "0123456789ABCDEF"
>3ad008	38 39 41 42 43 44 45 46

;******  Return to file: src\basic816.s


;******  Processing file: src\utilities.s

.3a03a2					PRTRACE
.3a03a2	08		php		            PHP
.3a03a3	c2 30		rep #$30	            REP #$30
.3a03a5	48		pha		            PHA
.3a03a6	da		phx		            PHX
.3a03a7	5a		phy		            PHY
.3a03a8	8b		phb		            PHB
.3a03a9	0b		phd		            PHD
.3a03aa	c2 30		rep #$30	            REP #$30
.3a03ac	a3 0b		lda $0b,s	            LDA 11,S        ; Get the return address
.3a03ae	18		clc		calc_addr   CLC
.3a03af	69 03 00	adc #$0003	            ADC #3          ; Add 3 to skip over the following branch
.3a03b2	aa		tax		            TAX
.3a03b3	e2 20		sep #$20	            SEP #$20
.3a03b5	a9 3a		lda #$3a	            LDA #`PRTRACE
.3a03b7	48		pha		            PHA
.3a03b8	ab		plb		            PLB
.3a03b9	bd 00 00	lda $0000,x	pr_loop     LDA #0,B,X
.3a03bc	f0 06		beq $3a03c4	            BEQ done
.3a03be	20 8c 02	jsr $3a028c	            JSR SCREEN_PUTC
.3a03c1	e8		inx		            INX
.3a03c2	80 f5		bra $3a03b9	            BRA pr_loop
.3a03c4					done
.3a03c4	c2 30		rep #$30	            REP #$30
.3a03c6	2b		pld		            PLD
.3a03c7	ab		plb		            PLB
.3a03c8	7a		ply		            PLY
.3a03c9	fa		plx		            PLX
.3a03ca	68		pla		            PLA
.3a03cb	28		plp		            PLP
.3a03cc	60		rts		            RTS
.3a03cd					ISALPHA
.3a03cd	08		php		            PHP
.3a03ce	e2 20		sep #$20	            SEP #$20
.3a03d0	c9 5b		cmp #$5b	            CMP #'Z'+1
.3a03d2	b0 04		bcs $3a03d8	            BGE not_upper
.3a03d4	c9 41		cmp #$41	            CMP #'A'
.3a03d6	b0 0b		bcs $3a03e3	            BGE is_alpha
.3a03d8	c9 7b		cmp #$7b	not_upper   CMP #'z'+1
.3a03da	b0 04		bcs $3a03e0	            BGE not_alpha
.3a03dc	c9 61		cmp #$61	            CMP #'a'
.3a03de	b0 03		bcs $3a03e3	            BGE is_alpha
.3a03e0					not_alpha
.3a03e0	28		plp		            PLP
.3a03e1	18		clc		            CLC
.3a03e2	60		rts		            RTS
.3a03e3					is_alpha
.3a03e3	28		plp		            PLP
.3a03e4	38		sec		            SEC
.3a03e5	60		rts		            RTS
.3a03e6					ISNUMERAL
.3a03e6	08		php		            PHP
.3a03e7	e2 20		sep #$20	            SEP #$20
.3a03e9	c9 3a		cmp #$3a	            CMP #'9'+1
.3a03eb	b0 04		bcs $3a03f1	            BGE ret_false
.3a03ed	c9 30		cmp #$30	            CMP #'0'
.3a03ef	b0 03		bcs $3a03f4	            BGE ret_true
.3a03f1	28		plp		ret_false   PLP
.3a03f2	18		clc		            CLC
.3a03f3	60		rts		            RTS
.3a03f4	28		plp		ret_true    PLP
.3a03f5	38		sec		            SEC
.3a03f6	60		rts		            RTS
.3a03f7					ISHEX
.3a03f7	08		php		            PHP
.3a03f8	e2 20		sep #$20	            SEP #$20
.3a03fa	c9 3a		cmp #$3a	            CMP #'9'+1
.3a03fc	b0 04		bcs $3a0402	            BGE chk_lca2f
.3a03fe	c9 30		cmp #$30	            CMP #'0'
.3a0400	b0 13		bcs $3a0415	            BGE ret_true
.3a0402	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.3a0404	b0 04		bcs $3a040a	            BGE chk_uca2f
.3a0406	c9 61		cmp #$61	            CMP #'a'
.3a0408	b0 0b		bcs $3a0415	            BGE ret_true
.3a040a	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.3a040c	b0 04		bcs $3a0412	            BGE ret_false
.3a040e	c9 41		cmp #$41	            CMP #'A'
.3a0410	b0 03		bcs $3a0415	            BGE ret_true
.3a0412	28		plp		ret_false   PLP
.3a0413	18		clc		            CLC
.3a0414	60		rts		            RTS
.3a0415	28		plp		ret_true    PLP
.3a0416	38		sec		            SEC
.3a0417	60		rts		            RTS
.3a0418					HEX2BIN
.3a0418	08		php		            PHP
.3a0419	e2 20		sep #$20	            SEP #$20
.3a041b	c9 3a		cmp #$3a	            CMP #'9'+1          ; Check to see if '0'..'9'
.3a041d	b0 04		bcs $3a0423	            BGE chk_lca2f
.3a041f	c9 30		cmp #$30	            CMP #'0'
.3a0421	b0 12		bcs $3a0435	            BGE conv_09         ; Yes: convert it
.3a0423	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.3a0425	b0 04		bcs $3a042b	            BGE chk_uca2f
.3a0427	c9 61		cmp #$61	            CMP #'a'
.3a0429	b0 0f		bcs $3a043a	            BGE conv_lcaf
.3a042b	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.3a042d	b0 04		bcs $3a0433	            BGE done
.3a042f	c9 41		cmp #$41	            CMP #'A'
.3a0431	b0 09		bcs $3a043c	            BGE conv_ucaf
.3a0433	28		plp		done        PLP
.3a0434	60		rts		            RTS
.3a0435	38		sec		conv_09     SEC                 ; Convert digits '0'..'9'
.3a0436	e9 30		sbc #$30	            SBC #'0'
.3a0438	80 f9		bra $3a0433	            BRA done
.3a043a	29 df		and #$df	conv_lcaf   AND #%11011111      ; Convert to upper case
.3a043c	38		sec		conv_ucaf   SEC
.3a043d	e9 37		sbc #$37	            SBC #'A'-10         ; Convert 'A'..'F'
.3a043f	80 f2		bra $3a0433	            BRA done
.3a0441					TOUPPERA
.3a0441	08		php		            PHP
.3a0442	e2 20		sep #$20	            SEP #$20
.3a0444	c9 7b		cmp #$7b	            CMP #'z'+1
.3a0446	b0 06		bcs $3a044e	            BCS done
.3a0448	c9 61		cmp #$61	            CMP #'a'
.3a044a	90 02		bcc $3a044e	            BCC done
.3a044c	29 df		and #$df	            AND #%11011111
.3a044e	28		plp		done        PLP
.3a044f	60		rts		            RTS
.3a0450					TOUPPER
.3a0450	08		php		            PHP
.3a0451	e2 20		sep #$20	            SEP #$20
.3a0453	c2 10		rep #$10	            REP #$10
.3a0455	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.3a0458	f0 09		beq $3a0463	            BEQ done
.3a045a	20 41 04	jsr $3a0441	            JSR TOUPPERA
.3a045d	9d 00 00	sta $0000,x	            STA #0,B,X
.3a0460	e8		inx		continue    INX
.3a0461	80 f2		bra $3a0455	            BRA loop
.3a0463	28		plp		done        PLP
.3a0464	60		rts		            RTS
.3a0465					MULINT10
.3a0465	08		php		                PHP
.3a0466	0b		phd		                PHD
.3a0467	08		php		            PHP
.3a0468	c2 20		rep #$20	            REP #$20
.3a046a	48		pha		            PHA
.3a046b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a046e	5b		tcd		            TCD
.3a046f	68		pla		            PLA
.3a0470	28		plp		            PLP
.3a0471	c2 20		rep #$20	            REP #$20
.3a0473	48		pha		                PHA
.3a0474	06 23		asl $0823	                ASL ARGUMENT1           ; 7 -- 20 -- 74
.3a0476	26 25		rol $0825	                ROL ARGUMENT1+2         ; 7
.3a0478	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.3a047a	85 0c		sta $080c	                STA SCRATCH             ; 4
.3a047c	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.3a047e	85 0e		sta $080e	                STA SCRATCH+2           ; 4
.3a0480	06 0c		asl $080c	                ASL SCRATCH             ; 7 -- 28
.3a0482	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.3a0484	06 0c		asl $080c	                ASL SCRATCH             ; 7
.3a0486	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.3a0488	18		clc		                CLC                     ; 2 -- 26
.3a0489	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.3a048b	65 0c		adc $080c	                ADC SCRATCH             ; 4
.3a048d	85 23		sta $0823	                STA ARGUMENT1           ; 4
.3a048f	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.3a0491	65 0e		adc $080e	                ADC SCRATCH+2           ; 4
.3a0493	85 25		sta $0825	                STA ARGUMENT1+2         ; 4
.3a0495	68		pla		                PLA
.3a0496	2b		pld		                PLD
.3a0497	28		plp		                PLP
.3a0498	60		rts		            RTS
.3a0499					DIVINT10
.3a0499	08		php		                PHP
.3a049a	0b		phd		                PHD
.3a049b	08		php		            PHP
.3a049c	c2 20		rep #$20	            REP #$20
.3a049e	48		pha		            PHA
.3a049f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a04a2	5b		tcd		            TCD
.3a04a3	68		pla		            PLA
.3a04a4	28		plp		            PLP
.3a04a5	c2 20		rep #$20	            REP #$20
.3a04a7	a5 23		lda $0823	                LDA ARGUMENT1
.3a04a9	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.3a04ad	a9 0a 00	lda #$000a	                LDA #10
.3a04b0	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.3a04b4	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.3a04b8	85 23		sta $0823	                STA ARGUMENT1
.3a04ba	64 25		stz $0825	                STZ ARGUMENT1+2
.3a04bc	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.3a04c0	85 29		sta $0829	                STA ARGUMENT2
.3a04c2	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a04c4	e2 20		sep #$20	            SEP #$20
.3a04c6	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a04c8	85 27		sta $0827	                STA ARGTYPE1
.3a04ca	85 2d		sta $082d	                STA ARGTYPE2
.3a04cc	2b		pld		                PLD
.3a04cd	28		plp		                PLP
.3a04ce	60		rts		            RTS
.3a04cf					DIVINT100
.3a04cf	08		php		                PHP
.3a04d0	0b		phd		                PHD
.3a04d1	08		php		            PHP
.3a04d2	c2 20		rep #$20	            REP #$20
.3a04d4	48		pha		            PHA
.3a04d5	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a04d8	5b		tcd		            TCD
.3a04d9	68		pla		            PLA
.3a04da	28		plp		            PLP
.3a04db	c2 20		rep #$20	            REP #$20
.3a04dd	a5 23		lda $0823	                LDA ARGUMENT1
.3a04df	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.3a04e3	a9 64 00	lda #$0064	                LDA #100
.3a04e6	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.3a04ea	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.3a04ee	85 23		sta $0823	                STA ARGUMENT1
.3a04f0	64 25		stz $0825	                STZ ARGUMENT1+2
.3a04f2	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.3a04f6	85 29		sta $0829	                STA ARGUMENT2
.3a04f8	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a04fa	e2 20		sep #$20	            SEP #$20
.3a04fc	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a04fe	85 27		sta $0827	                STA ARGTYPE1
.3a0500	85 2d		sta $082d	                STA ARGTYPE2
.3a0502	2b		pld		                PLD
.3a0503	28		plp		                PLP
.3a0504	60		rts		            RTS
.3a0505					IS_ARG1_Z
.3a0505	08		php		                PHP
.3a0506	c2 20		rep #$20	            REP #$20
.3a0508	a5 23		lda $0823	                LDA ARGUMENT1
.3a050a	d0 08		bne $3a0514	                BNE return_false
.3a050c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a050e	d0 04		bne $3a0514	                BNE return_false
.3a0510	28		plp		return_true     PLP
.3a0511	e2 02		sep #$02	                SEP #$02        ; Set Z
.3a0513	60		rts		            RTS
.3a0514	28		plp		return_false    PLP
.3a0515	c2 02		rep #$02	                REP #$02        ; Clear Z
.3a0517	60		rts		            RTS
.3a0518					SET_TRUE
.3a0518	08		php		                PHP
.3a0519	c2 30		rep #$30	            REP #$30
.3a051b	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a051e	85 23		sta $0823	                STA ARGUMENT1
.3a0520	85 25		sta $0825	                STA ARGUMENT1+2
.3a0522	e2 20		sep #$20	            SEP #$20
.3a0524	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a0526	85 27		sta $0827	                STA ARGTYPE1
.3a0528	28		plp		                PLP
.3a0529	60		rts		            RTS
.3a052a					SET_FALSE
.3a052a	08		php		                PHP
.3a052b	c2 30		rep #$30	            REP #$30
.3a052d	a9 00 00	lda #$0000	                LDA #0
.3a0530	85 23		sta $0823	                STA ARGUMENT1
.3a0532	85 25		sta $0825	                STA ARGUMENT1+2
.3a0534	e2 20		sep #$20	            SEP #$20
.3a0536	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a0538	85 27		sta $0827	                STA ARGTYPE1
.3a053a	28		plp		                PLP
.3a053b	60		rts		            RTS
.3a053c					ASS_ARG1_INT
.3a053c	08		php		                PHP
.3a053d	e2 20		sep #$20	            SEP #$20
.3a053f	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a0541	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a0543	f0 07		beq $3a054c	                BEQ done                ; If so: just return
.3a0545	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a0547	d0 05		bne $3a054e	                BNE TYPE_ERR            ; If not: throw an error
.3a0549	20 b6 59	jsr $3a59b6	            JSR FTOI
.3a054c	28		plp		done            PLP
.3a054d	60		rts		            RTS
.3a054e					TYPE_ERR
.3a054e	08		php		            PHP
.3a054f	c2 20		rep #$20	            REP #$20
.3a0551	48		pha		            PHA
.3a0552	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0555	5b		tcd		            TCD
.3a0556	68		pla		            PLA
.3a0557	28		plp		            PLP
.3a0558	e2 20		sep #$20	            SEP #$20
.3a055a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a055c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0560	c2 20		rep #$20	            REP #$20
.3a0562	29 ff 00	and #$00ff	            AND #$00FF
.3a0565	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a0568	e2 20		sep #$20	            SEP #$20
.3a056a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a056d					ASS_ARG2_INT
.3a056d	08		php		                PHP
.3a056e	e2 20		sep #$20	            SEP #$20
.3a0570	a5 2d		lda $082d	                LDA ARGTYPE2                ; Verify that the type is INTEGER
.3a0572	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a0574	f0 37		beq $3a05ad	                BEQ done                    ; If so: just return
.3a0576	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; Check if it's a float
.3a0578	d0 35		bne $3a05af	                BNE TYPE_ERR                ; If not: throw an error
.3a057a	c2 20		rep #$20	            REP #$20
.3a057c	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a057e	48		pha		            PHA
.3a057f	a5 23		lda $0823	            LDA ARGUMENT1
.3a0581	48		pha		            PHA
.3a0582	c2 20		rep #$20	            REP #$20
.3a0584	a5 29		lda $0829	            LDA ARGUMENT2
.3a0586	85 23		sta $0823	            STA ARGUMENT1
.3a0588	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a058a	85 25		sta $0825	            STA ARGUMENT1+2
.3a058c	e2 20		sep #$20	            SEP #$20
.3a058e	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.3a0590	85 27		sta $0827	            STA ARGTYPE1
.3a0592	20 b6 59	jsr $3a59b6	            JSR FTOI
.3a0595	c2 20		rep #$20	            REP #$20
.3a0597	a5 23		lda $0823	            LDA ARGUMENT1
.3a0599	85 29		sta $0829	            STA ARGUMENT2
.3a059b	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a059d	85 2b		sta $082b	            STA ARGUMENT2+2
.3a059f	e2 20		sep #$20	            SEP #$20
.3a05a1	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a05a3	85 2d		sta $082d	            STA ARGTYPE2
.3a05a5	c2 20		rep #$20	            REP #$20
.3a05a7	68		pla		            PLA
.3a05a8	85 23		sta $0823	            STA ARGUMENT1
.3a05aa	68		pla		            PLA
.3a05ab	85 25		sta $0825	            STA ARGUMENT1+2
.3a05ad	28		plp		done            PLP
.3a05ae	60		rts		            RTS
.3a05af					TYPE_ERR
.3a05af	08		php		            PHP
.3a05b0	c2 20		rep #$20	            REP #$20
.3a05b2	48		pha		            PHA
.3a05b3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a05b6	5b		tcd		            TCD
.3a05b7	68		pla		            PLA
.3a05b8	28		plp		            PLP
.3a05b9	e2 20		sep #$20	            SEP #$20
.3a05bb	a9 04		lda #$04	            LDA #ERR_TYPE
.3a05bd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a05c1	c2 20		rep #$20	            REP #$20
.3a05c3	29 ff 00	and #$00ff	            AND #$00FF
.3a05c6	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a05c9	e2 20		sep #$20	            SEP #$20
.3a05cb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a05ce					ASS_ARG1_STR
.3a05ce	08		php		                PHP
.3a05cf	e2 20		sep #$20	            SEP #$20
.3a05d1	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is STRING
.3a05d3	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a05d5	d0 02		bne $3a05d9	                BNE TYPE_ERR
.3a05d7	28		plp		                PLP
.3a05d8	60		rts		            RTS
.3a05d9					TYPE_ERR
.3a05d9	08		php		            PHP
.3a05da	c2 20		rep #$20	            REP #$20
.3a05dc	48		pha		            PHA
.3a05dd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a05e0	5b		tcd		            TCD
.3a05e1	68		pla		            PLA
.3a05e2	28		plp		            PLP
.3a05e3	e2 20		sep #$20	            SEP #$20
.3a05e5	a9 04		lda #$04	            LDA #ERR_TYPE
.3a05e7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a05eb	c2 20		rep #$20	            REP #$20
.3a05ed	29 ff 00	and #$00ff	            AND #$00FF
.3a05f0	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a05f3	e2 20		sep #$20	            SEP #$20
.3a05f5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a05f8					ASS_ARG1_INT16
.3a05f8	08		php		                PHP
.3a05f9	e2 20		sep #$20	            SEP #$20
.3a05fb	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a05fd	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a05ff	f0 07		beq $3a0608	                BEQ check_range         ; If so: check the range
.3a0601	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a0603	d0 0b		bne $3a0610	                BNE TYPE_ERR            ; If not: throw an error
.3a0605	20 b6 59	jsr $3a59b6	            JSR FTOI
.3a0608					check_range
.3a0608	c2 20		rep #$20	            REP #$20
.3a060a	a5 25		lda $0825	                LDA ARGUMENT1+2         ; Validate it is 16-bit
.3a060c	d0 21		bne $3a062f	                BNE range_err
.3a060e	28		plp		                PLP
.3a060f	60		rts		            RTS
.3a0610					TYPE_ERR
.3a0610	08		php		            PHP
.3a0611	c2 20		rep #$20	            REP #$20
.3a0613	48		pha		            PHA
.3a0614	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0617	5b		tcd		            TCD
.3a0618	68		pla		            PLA
.3a0619	28		plp		            PLP
.3a061a	e2 20		sep #$20	            SEP #$20
.3a061c	a9 04		lda #$04	            LDA #ERR_TYPE
.3a061e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0622	c2 20		rep #$20	            REP #$20
.3a0624	29 ff 00	and #$00ff	            AND #$00FF
.3a0627	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a062a	e2 20		sep #$20	            SEP #$20
.3a062c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a062f					RANGE_ERR
.3a062f	08		php		            PHP
.3a0630	c2 20		rep #$20	            REP #$20
.3a0632	48		pha		            PHA
.3a0633	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0636	5b		tcd		            TCD
.3a0637	68		pla		            PLA
.3a0638	28		plp		            PLP
.3a0639	e2 20		sep #$20	            SEP #$20
.3a063b	a9 09		lda #$09	            LDA #ERR_RANGE
.3a063d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0641	c2 20		rep #$20	            REP #$20
.3a0643	29 ff 00	and #$00ff	            AND #$00FF
.3a0646	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a0649	e2 20		sep #$20	            SEP #$20
.3a064b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a064e					ASS_ARG1_BYTE
.3a064e	08		php		                PHP
.3a064f	e2 20		sep #$20	            SEP #$20
.3a0651	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a0653	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a0655	f0 07		beq $3a065e	                BEQ check_range         ; If so: check the range
.3a0657	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a0659	d0 11		bne $3a066c	                BNE TYPE_ERR            ; If not: throw an error
.3a065b	20 b6 59	jsr $3a59b6	            JSR FTOI
.3a065e	a5 26		lda $0826	check_range     LDA ARGUMENT1+3         ; Validate that the value is in byte range
.3a0660	d0 29		bne $3a068b	                BNE RANGE_ERR           ; If not... throw a range error
.3a0662	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a0664	d0 25		bne $3a068b	                BNE RANGE_ERR
.3a0666	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a0668	d0 21		bne $3a068b	                BNE RANGE_ERR
.3a066a	28		plp		                PLP
.3a066b	60		rts		            RTS
.3a066c					TYPE_ERR
.3a066c	08		php		            PHP
.3a066d	c2 20		rep #$20	            REP #$20
.3a066f	48		pha		            PHA
.3a0670	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0673	5b		tcd		            TCD
.3a0674	68		pla		            PLA
.3a0675	28		plp		            PLP
.3a0676	e2 20		sep #$20	            SEP #$20
.3a0678	a9 04		lda #$04	            LDA #ERR_TYPE
.3a067a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a067e	c2 20		rep #$20	            REP #$20
.3a0680	29 ff 00	and #$00ff	            AND #$00FF
.3a0683	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a0686	e2 20		sep #$20	            SEP #$20
.3a0688	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a068b					RANGE_ERR
.3a068b	08		php		            PHP
.3a068c	c2 20		rep #$20	            REP #$20
.3a068e	48		pha		            PHA
.3a068f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0692	5b		tcd		            TCD
.3a0693	68		pla		            PLA
.3a0694	28		plp		            PLP
.3a0695	e2 20		sep #$20	            SEP #$20
.3a0697	a9 09		lda #$09	            LDA #ERR_RANGE
.3a0699	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a069d	c2 20		rep #$20	            REP #$20
.3a069f	29 ff 00	and #$00ff	            AND #$00FF
.3a06a2	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a06a5	e2 20		sep #$20	            SEP #$20
.3a06a7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a06aa					ASS_ARG1_FLOAT
.3a06aa	08		php		                PHP
.3a06ab	e2 20		sep #$20	            SEP #$20
.3a06ad	a5 27		lda $0827	                LDA ARGTYPE1            ; Check the type
.3a06af	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.3a06b1	f0 26		beq $3a06d9	                BEQ done                ; Then we're done
.3a06b3	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.3a06b5	f0 1f		beq $3a06d6	                BEQ cast                ; Then cast it to float
.3a06b7					type_err
.3a06b7	08		php		            PHP
.3a06b8	c2 20		rep #$20	            REP #$20
.3a06ba	48		pha		            PHA
.3a06bb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a06be	5b		tcd		            TCD
.3a06bf	68		pla		            PLA
.3a06c0	28		plp		            PLP
.3a06c1	e2 20		sep #$20	            SEP #$20
.3a06c3	a9 04		lda #$04	            LDA #ERR_TYPE
.3a06c5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a06c9	c2 20		rep #$20	            REP #$20
.3a06cb	29 ff 00	and #$00ff	            AND #$00FF
.3a06ce	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a06d1	e2 20		sep #$20	            SEP #$20
.3a06d3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a06d6					cast
.3a06d6	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a06d9	28		plp		done            PLP
.3a06da	60		rts		            RTS
.3a06db					ASS_ARG2_FLOAT
.3a06db	08		php		                PHP
.3a06dc	e2 20		sep #$20	            SEP #$20
.3a06de	a5 2d		lda $082d	                LDA ARGTYPE2            ; Check the type
.3a06e0	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.3a06e2	f0 26		beq $3a070a	                BEQ done                ; Then we're done
.3a06e4	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.3a06e6	f0 1f		beq $3a0707	                BEQ cast                ; Then cast it to float
.3a06e8					type_err
.3a06e8	08		php		            PHP
.3a06e9	c2 20		rep #$20	            REP #$20
.3a06eb	48		pha		            PHA
.3a06ec	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a06ef	5b		tcd		            TCD
.3a06f0	68		pla		            PLA
.3a06f1	28		plp		            PLP
.3a06f2	e2 20		sep #$20	            SEP #$20
.3a06f4	a9 04		lda #$04	            LDA #ERR_TYPE
.3a06f6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a06fa	c2 20		rep #$20	            REP #$20
.3a06fc	29 ff 00	and #$00ff	            AND #$00FF
.3a06ff	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a0702	e2 20		sep #$20	            SEP #$20
.3a0704	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0707					cast
.3a0707	20 0c 07	jsr $3a070c	            JSR CAST_ARG2_FLOAT
.3a070a	28		plp		done            PLP
.3a070b	60		rts		            RTS
.3a070c					CAST_ARG2_FLOAT
.3a070c	c2 20		rep #$20	            REP #$20
.3a070e	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a0710	48		pha		            PHA
.3a0711	a5 23		lda $0823	            LDA ARGUMENT1
.3a0713	48		pha		            PHA
.3a0714	c2 20		rep #$20	            REP #$20
.3a0716	a5 29		lda $0829	            LDA ARGUMENT2
.3a0718	85 23		sta $0823	            STA ARGUMENT1
.3a071a	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a071c	85 25		sta $0825	            STA ARGUMENT1+2
.3a071e	e2 20		sep #$20	            SEP #$20
.3a0720	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a0722	85 27		sta $0827	            STA ARGTYPE1
.3a0724	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a0727	c2 20		rep #$20	            REP #$20
.3a0729	a5 23		lda $0823	            LDA ARGUMENT1
.3a072b	85 29		sta $0829	            STA ARGUMENT2
.3a072d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a072f	85 2b		sta $082b	            STA ARGUMENT2+2
.3a0731	e2 20		sep #$20	            SEP #$20
.3a0733	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.3a0735	85 2d		sta $082d	            STA ARGTYPE2
.3a0737	c2 20		rep #$20	            REP #$20
.3a0739	68		pla		            PLA
.3a073a	85 23		sta $0823	            STA ARGUMENT1
.3a073c	68		pla		            PLA
.3a073d	85 25		sta $0825	            STA ARGUMENT1+2
.3a073f	60		rts		            RTS
.3a0740					ASS_ARGS_NUM
.3a0740	08		php		                PHP
.3a0741	e2 20		sep #$20	            SEP #$20
.3a0743	a5 27		lda $0827	                LDA ARGTYPE1                ; Check ARGUMENT1
.3a0745	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a0747	f0 23		beq $3a076c	                BEQ arg1_int
.3a0749	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a074b	f0 2e		beq $3a077b	                BEQ arg1_float
.3a074d					type_err
.3a074d	08		php		            PHP
.3a074e	c2 20		rep #$20	            REP #$20
.3a0750	48		pha		            PHA
.3a0751	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0754	5b		tcd		            TCD
.3a0755	68		pla		            PLA
.3a0756	28		plp		            PLP
.3a0757	e2 20		sep #$20	            SEP #$20
.3a0759	a9 04		lda #$04	            LDA #ERR_TYPE
.3a075b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a075f	c2 20		rep #$20	            REP #$20
.3a0761	29 ff 00	and #$00ff	            AND #$00FF
.3a0764	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a0767	e2 20		sep #$20	            SEP #$20
.3a0769	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a076c	a5 2d		lda $082d	arg1_int        LDA ARGTYPE2                ; Check argument 2
.3a076e	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If integer, we're done
.3a0770	f0 16		beq $3a0788	                BEQ done
.3a0772	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If not float, throw an error
.3a0774	d0 d7		bne $3a074d	                BNE type_err
.3a0776	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a0779	80 0d		bra $3a0788	                BRA done
.3a077b	a5 2d		lda $082d	arg1_float      LDA ARGTYPE2                ; Check argument 2
.3a077d	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If it's float
.3a077f	f0 07		beq $3a0788	                BEQ done                    ; Then we're done
.3a0781	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If it's not integer
.3a0783	d0 c8		bne $3a074d	                BNE type_err                ; Thrown an error
.3a0785	20 0c 07	jsr $3a070c	            JSR CAST_ARG2_FLOAT
.3a0788					done
.3a0788	e2 20		sep #$20	            SEP #$20
.3a078a	a5 27		lda $0827	                LDA ARGTYPE1                ; Return the type code in A
.3a078c	28		plp		                PLP
.3a078d	60		rts		            RTS
.3a078e					ASS_ARGS_NUMSTR
.3a078e	08		php		                PHP
.3a078f	e2 20		sep #$20	            SEP #$20
.3a0791	a5 27		lda $0827	                LDA ARGTYPE1                ; Check to see if ARGUMENT1 is a string
.3a0793	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a0795	d0 25		bne $3a07bc	                BNE numbers
.3a0797	a5 2d		lda $082d	                LDA ARGTYPE2                ; If ARGUMENT1 is a string, make sure ARGUMENT2 is
.3a0799	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a079b	f0 24		beq $3a07c1	                BEQ done
.3a079d					TYPE_ERR
.3a079d	08		php		            PHP
.3a079e	c2 20		rep #$20	            REP #$20
.3a07a0	48		pha		            PHA
.3a07a1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a07a4	5b		tcd		            TCD
.3a07a5	68		pla		            PLA
.3a07a6	28		plp		            PLP
.3a07a7	e2 20		sep #$20	            SEP #$20
.3a07a9	a9 04		lda #$04	            LDA #ERR_TYPE
.3a07ab	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a07af	c2 20		rep #$20	            REP #$20
.3a07b1	29 ff 00	and #$00ff	            AND #$00FF
.3a07b4	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a07b7	e2 20		sep #$20	            SEP #$20
.3a07b9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a07bc					numbers
.3a07bc	20 40 07	jsr $3a0740	            JSR ASS_ARGS_NUM
.3a07bf	a5 27		lda $0827	                LDA ARGTYPE1                ; Make sure A is the type
.3a07c1	28		plp		done            PLP
.3a07c2	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\tokens.s

.0000					TOKEN
>0000					precedence  .byte ?
>0001					length      .byte ?
>0002					name        .word <>?
>0004					eval        .word <>?
>0006					arity       .word <>?
.3a07c3					PARSEINT
.3a07c3	08		php		            PHP
.3a07c4	0b		phd		            PHD
.3a07c5	08		php		            PHP
.3a07c6	c2 20		rep #$20	            REP #$20
.3a07c8	48		pha		            PHA
.3a07c9	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a07cc	5b		tcd		            TCD
.3a07cd	68		pla		            PLA
.3a07ce	28		plp		            PLP
.3a07cf	c2 30		rep #$30	            REP #$30
.3a07d1	64 23		stz $0823	            STZ ARGUMENT1       ; Default to Not-a-value
.3a07d3	64 25		stz $0825	            STZ ARGUMENT1+2
.3a07d5	e2 20		sep #$20	            SEP #$20
.3a07d7	64 27		stz $0827	            STZ ARGTYPE1
.3a07d9	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it starts with '$'
.3a07db	c9 26		cmp #$26	            CMP #'&'
.3a07dd	f0 44		beq $3a0823	            BEQ check_hex       ; Yes: parse it as a hexadecimal number
.3a07df					loop
.3a07df	e2 20		sep #$20	            SEP #$20
.3a07e1	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.3a07e3	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a07e6	90 76		bcc $3a085e	            BCC done            ; No, we're done parsing
.3a07e8	20 65 04	jsr $3a0465	            JSR MULINT10
.3a07eb	38		sec		            SEC                 ; Convert the ASCII code to a number
.3a07ec	e9 30		sbc #$30	            SBC #'0'
.3a07ee	c2 20		rep #$20	            REP #$20
.3a07f0	29 ff 00	and #$00ff	            AND #$00FF
.3a07f3	18		clc		            CLC
.3a07f4	65 23		adc $0823	            ADC ARGUMENT1
.3a07f6	85 23		sta $0823	            STA ARGUMENT1
.3a07f8	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a07fa	69 00 00	adc #$0000	            ADC #0
.3a07fd	85 25		sta $0825	            STA ARGUMENT1+2
.3a07ff	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a0802	80 db		bra $3a07df	            BRA loop            ; And try to process it
.3a0804					syntaxerr
.3a0804	08		php		            PHP
.3a0805	c2 20		rep #$20	            REP #$20
.3a0807	48		pha		            PHA
.3a0808	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a080b	5b		tcd		            TCD
.3a080c	68		pla		            PLA
.3a080d	28		plp		            PLP
.3a080e	e2 20		sep #$20	            SEP #$20
.3a0810	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a0812	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0816	c2 20		rep #$20	            REP #$20
.3a0818	29 ff 00	and #$00ff	            AND #$00FF
.3a081b	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a081e	e2 20		sep #$20	            SEP #$20
.3a0820	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0823					check_hex
.3a0823	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a0826	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.3a0828	c9 48		cmp #$48	            CMP #'H'            ; Is it 'H'?
.3a082a	f0 04		beq $3a0830	            BEQ parse_hex       ; Yes: skip it and parse hex
.3a082c	c9 68		cmp #$68	            CMP #'h'            ; Is it 'h'?
.3a082e	d0 d4		bne $3a0804	            BNE syntaxerr       ; No: throw an error
.3a0830					parse_hex
.3a0830	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a0833					hexloop
.3a0833	e2 20		sep #$20	            SEP #$20
.3a0835	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.3a0837	20 f7 03	jsr $3a03f7	            JSR ISHEX
.3a083a	90 22		bcc $3a085e	            BCC done            ; No, we're done parsing
.3a083c	20 18 04	jsr $3a0418	            JSR HEX2BIN
.3a083f	c2 20		rep #$20	            REP #$20
.3a0841	06 23		asl $0823	            ASL ARGUMENT1
.3a0843	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0845	06 23		asl $0823	            ASL ARGUMENT1
.3a0847	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0849	06 23		asl $0823	            ASL ARGUMENT1
.3a084b	26 25		rol $0825	            ROL ARGUMENT1+2
.3a084d	06 23		asl $0823	            ASL ARGUMENT1
.3a084f	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0851	29 ff 00	and #$00ff	            AND #$00FF          ; Add binary number to ARGUMENT1
.3a0854	18		clc		            CLC
.3a0855	65 23		adc $0823	            ADC ARGUMENT1
.3a0857	85 23		sta $0823	            STA ARGUMENT1
.3a0859	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a085c	80 d5		bra $3a0833	            BRA hexloop         ; And try to process it
.3a085e	2b		pld		done        PLD
.3a085f	28		plp		            PLP
.3a0860	60		rts		            RTS
.3a0861					PREVCHAR
.3a0861	08		php		            PHP
.3a0862	c2 30		rep #$30	            REP #$30
.3a0864	a5 04		lda $0804	            LDA BIPPREV
.3a0866	f0 1c		beq $3a0884	            BEQ ret_false
.3a0868	38		sec		            SEC
.3a0869	a5 04		lda $0804	            LDA BIPPREV
.3a086b	e5 1a		sbc $081a	            SBC CURLINE
.3a086d	a8		tay		            TAY
.3a086e	e2 20		sep #$20	            SEP #$20
.3a0870	b7 1a		lda [$081a],y	loop        LDA [CURLINE],Y
.3a0872	f0 10		beq $3a0884	            BEQ ret_false
.3a0874	c9 20		cmp #$20	            CMP #CHAR_SP
.3a0876	f0 06		beq $3a087e	            BEQ go_back
.3a0878	c9 09		cmp #$09	            CMP #CHAR_TAB
.3a087a	f0 02		beq $3a087e	            BEQ go_back
.3a087c	28		plp		            PLP
.3a087d	60		rts		            RTS
.3a087e	88		dey		go_back     DEY
.3a087f	c0 ff ff	cpy #$ffff	            CPY #$FFFF
.3a0882	d0 ec		bne $3a0870	            BNE loop
.3a0884					ret_false
.3a0884	a9 00		lda #$00	            LDA #0
.3a0886	60		rts		            RTS
.3a0887					TOKENIZE
.3a0887	08		php		            PHP
.3a0888	0b		phd		            PHD
.3a0889	08		php		            PHP
.3a088a	c2 20		rep #$20	            REP #$20
.3a088c	48		pha		            PHA
.3a088d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0890	5b		tcd		            TCD
.3a0891	68		pla		            PLA
.3a0892	28		plp		            PLP
.3a0893	c2 30		rep #$30	            REP #$30
.3a0895	a5 1a		lda $081a	            LDA CURLINE
.3a0897	85 00		sta $0800	            STA BIP
.3a0899	e2 20		sep #$20	            SEP #$20
.3a089b	a5 1c		lda $081c	            LDA CURLINE+2
.3a089d	85 02		sta $0802	            STA BIP+2
.3a089f	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a08a2	a7 00		lda [$0800]	            LDA [BIP]               ; Do we have a numeral?
.3a08a4	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a08a7	90 0c		bcc $3a08b5	            BCC mv_curline          ; No: adjust CURLINE and tokenize
.3a08a9	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a08ac	c2 20		rep #$20	            REP #$20
.3a08ae	a5 23		lda $0823	            LDA ARGUMENT1
.3a08b0	85 d7		sta $08d7	            STA LINENUM
.3a08b2	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a08b5					mv_curline
.3a08b5	c2 20		rep #$20	            REP #$20
.3a08b7	a5 00		lda $0800	            LDA BIP
.3a08b9	85 1a		sta $081a	            STA CURLINE
.3a08bb	e2 20		sep #$20	            SEP #$20
.3a08bd	a5 02		lda $0802	            LDA BIP+2
.3a08bf	85 1c		sta $081c	            STA CURLINE+2
.3a08c1	20 d5 08	jsr $3a08d5	            JSR FINDREM
.3a08c4	e2 20		sep #$20	            SEP #$20
.3a08c6					loop
.3a08c6	20 46 09	jsr $3a0946	            JSR TKFINDTOKEN
.3a08c9	c9 00		cmp #$00	            CMP #0                  ; Did we find a token?
.3a08cb	f0 05		beq $3a08d2	            BEQ done                ; No: return
.3a08cd	20 f4 0a	jsr $3a0af4	            JSR TKWRITE
.3a08d0	80 f4		bra $3a08c6	            BRA loop                ; And try again
.3a08d2	2b		pld		done        PLD
.3a08d3	28		plp		            PLP
.3a08d4	60		rts		            RTS
.3a08d5					FINDREM
.3a08d5	08		php		            PHP
.3a08d6	c2 20		rep #$20	            REP #$20
.3a08d8	a5 1a		lda $081a	            LDA CURLINE             ; Point BIP to the beginning of the line
.3a08da	85 00		sta $0800	            STA BIP
.3a08dc	a5 1c		lda $081c	            LDA CURLINE+2
.3a08de	85 02		sta $0802	            STA BIP+2
.3a08e0	a2 00 00	ldx #$0000	            LDX #0                  ; X will be a flag that we're at the beginning
.3a08e3	e2 20		sep #$20	            SEP #$20
.3a08e5	a0 00 00	ldy #$0000	loop        LDY #0
.3a08e8	e0 00 00	cpx #$0000	            CPX #0                  ; If we are at the first space on the line
.3a08eb	f0 0d		beq $3a08fa	            BEQ skip_delim          ; ... skip looking for a delimiter
.3a08ed	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a08ef	f0 53		beq $3a0944	            BEQ done                ; Is it null? Then we're done
.3a08f1	c9 3a		cmp #$3a	            CMP #':'                ; Is it ":"
.3a08f3	f0 04		beq $3a08f9	            BEQ found_delim         ; Yes: we might have a REM... look for E
.3a08f5	c9 20		cmp #$20	            CMP #CHAR_SP
.3a08f7	d0 33		bne $3a092c	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a08f9	c8		iny		found_delim INY
.3a08fa	b7 00		lda [$0800],y	skip_delim  LDA [BIP],Y             ; Get the first character
.3a08fc	f0 46		beq $3a0944	            BEQ done                ; Is it null? Then we're done
.3a08fe	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.3a0900	f0 10		beq $3a0912	            BEQ found_R             ; Yes: we might have a REM... look for E
.3a0902	c9 72		cmp #$72	            CMP #'r'
.3a0904	d0 26		bne $3a092c	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a0906	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a0908	f0 3a		beq $3a0944	            BEQ done                ; Is it null? Then we're done
.3a090a	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.3a090c	f0 04		beq $3a0912	            BEQ found_R             ; Yes: we might have a REM... look for E
.3a090e	c9 72		cmp #$72	            CMP #'r'
.3a0910	d0 1a		bne $3a092c	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a0912	c8		iny		found_R     INY
.3a0913	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a0915	f0 2d		beq $3a0944	            BEQ done                ; Is it null? Then we're done
.3a0917	c9 45		cmp #$45	            CMP #'E'                ; Is it "E"
.3a0919	f0 04		beq $3a091f	            BEQ found_E             ; Yes: we might have a REM... look for M
.3a091b	c9 65		cmp #$65	            CMP #'e'
.3a091d	d0 0d		bne $3a092c	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a091f	c8		iny		found_E     INY
.3a0920	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a0922	f0 20		beq $3a0944	            BEQ done                ; Is it null? Then we're done
.3a0924	c9 4d		cmp #$4d	            CMP #'M'                ; Is it "E"
.3a0926	f0 0a		beq $3a0932	            BEQ found_REM           ; Yes: we might have a REM... look for M
.3a0928	c9 6d		cmp #$6d	            CMP #'m'
.3a092a	f0 06		beq $3a0932	            BEQ found_REM
.3a092c	e8		inx		next_pos    INX                     ; Indicate we're no longer at the first position
.3a092d	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a0930	80 b3		bra $3a08e5	            BRA loop
.3a0932	a7 00		lda [$0800]	found_REM   LDA [BIP]               ; Get the current character
.3a0934	c9 3a		cmp #$3a	            CMP #':'                ; Is it the delimiter?
.3a0936	d0 03		bne $3a093b	            BNE ret_REM             ; No: go ahead and return REM at that location
.3a0938	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a093b	a9 03		lda #$03	ret_REM     LDA #3
.3a093d	85 1e		sta $081e	            STA CURTOKLEN           ; Set the size
.3a093f	a9 91		lda #$91	            LDA #TOK_REM            ; And the token to write
.3a0941	20 f4 0a	jsr $3a0af4	            JSR TKWRITE
.3a0944	28		plp		done        PLP
.3a0945	60		rts		            RTS
.3a0946					TKFINDTOKEN
.3a0946	08		php		            PHP
.3a0947	0b		phd		            PHD
.3a0948	08		php		            PHP
.3a0949	c2 20		rep #$20	            REP #$20
.3a094b	48		pha		            PHA
.3a094c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a094f	5b		tcd		            TCD
.3a0950	68		pla		            PLA
.3a0951	28		plp		            PLP
.3a0952	e2 20		sep #$20	            SEP #$20
.3a0954	a9 7f		lda #$7f	            LDA #$7F                ; Start off looking for any size token
.3a0956	85 1e		sta $081e	            STA CURTOKLEN
.3a0958					next_size
.3a0958	c2 10		rep #$10	            REP #$10
.3a095a	20 a9 0a	jsr $3a0aa9	            JSR TKNEXTBIG
.3a095d	a5 1e		lda $081e	            LDA CURTOKLEN           ; Are there any keywords left?
.3a095f	d0 03		bne $3a0964	            BNE else
.3a0961	4c e9 09	jmp $3a09e9	            JMP done                ; No: return to caller
.3a0964					else
.3a0964	c2 20		rep #$20	            REP #$20
.3a0966	a5 1a		lda $081a	            LDA CURLINE
.3a0968	85 00		sta $0800	            STA BIP
.3a096a	e2 20		sep #$20	            SEP #$20
.3a096c	a5 1c		lda $081c	            LDA CURLINE+2
.3a096e	85 02		sta $0802	            STA BIP+2
.3a0970	c2 20		rep #$20	            REP #$20
.3a0972	64 04		stz $0804	            STZ BIPPREV             ; Clear BIPPREV (point to the previous character)
.3a0974	64 06		stz $0806	            STZ BIPPREV+2
.3a0976					check_len
.3a0976	e2 30		sep #$30	            SEP #$30
.3a0978	a0 00		ldy #$00	            LDY #0
.3a097a	b7 00		lda [$0800],y	nul_scan    LDA [BIP],Y
.3a097c	f0 da		beq $3a0958	            BEQ next_size
.3a097e	c9 91		cmp #$91	            CMP #TOK_REM            ; Tokenization stops at REMarks too
.3a0980	f0 d6		beq $3a0958	            BEQ next_size
.3a0982	c8		iny		            INY
.3a0983	c4 1e		cpy $081e	            CPY CURTOKLEN
.3a0985	90 f3		bcc $3a097a	            BCC nul_scan
.3a0987	c2 10		rep #$10	            REP #$10
.3a0989	a7 00		lda [$0800]	            LDA [BIP]               ; Check the current character
.3a098b	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.3a098d	d0 05		bne $3a0994	            BNE chk_keyword         ; No: check to see if we are at the start of a possible keyword
.3a098f	20 0b 0a	jsr $3a0a0b	            JSR SKIPQUOTED
.3a0992	80 28		bra $3a09bc	            BRA go_next             ; And move on to the next character
.3a0994	a5 1e		lda $081e	chk_keyword LDA CURTOKLEN           ; If the token length is <=2
.3a0996	c9 03		cmp #$03	            CMP #3
.3a0998	90 19		bcc $3a09b3	            BLT try_match           ; ... we don't need a delimiter, go ahead and convert it
.3a099a	c2 20		rep #$20	            REP #$20
.3a099c	a5 00		lda $0800	            LDA BIP                 ; Check to see if we're at the start of the line
.3a099e	c5 1a		cmp $081a	            CMP CURLINE
.3a09a0	d0 08		bne $3a09aa	            BNE chk_delim           ; No: we need to check for a delimiters
.3a09a2	e2 20		sep #$20	            SEP #$20
.3a09a4	a5 02		lda $0802	            LDA BIP+2
.3a09a6	c5 1c		cmp $081c	            CMP CURLINE+2
.3a09a8	f0 09		beq $3a09b3	            BEQ try_match           ; Yes: this can be a keyword
.3a09aa					chk_delim
.3a09aa	e2 20		sep #$20	            SEP #$20
.3a09ac	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.3a09ae	20 f9 4e	jsr $3a4ef9	            JSR ISVARCHAR
.3a09b1	b0 09		bcs $3a09bc	            BCS go_next             ; Yes: we can't start a keyword here
.3a09b3					try_match
.3a09b3	e2 20		sep #$20	            SEP #$20
.3a09b5	20 1b 0a	jsr $3a0a1b	            JSR TKMATCH
.3a09b8	c9 00		cmp #$00	            CMP #0                  ; Did we get one?
.3a09ba	d0 11		bne $3a09cd	            BNE found               ; Yes: return it
.3a09bc					go_next
.3a09bc	c2 20		rep #$20	            REP #$20
.3a09be	a5 00		lda $0800	            LDA BIP                 ; Update BIPPREV as the point to the previous character
.3a09c0	85 04		sta $0804	            STA BIPPREV
.3a09c2	e2 20		sep #$20	            SEP #$20
.3a09c4	a5 02		lda $0802	            LDA BIP+2
.3a09c6	85 06		sta $0806	            STA BIPPREV+2
.3a09c8	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a09cb	80 a9		bra $3a0976	            BRA check_len           ; And try there
.3a09cd					found
.3a09cd	c9 81		cmp #$81	            CMP #TOK_MINUS          ; Found a token... is it minus?
.3a09cf	d0 18		bne $3a09e9	            BNE done                ; Nope: go ahead and return it
.3a09d1	20 61 08	jsr $3a0861	            JSR PREVCHAR
.3a09d4	c9 00		cmp #$00	            CMP #0                  ; Did we get anything?
.3a09d6	f0 14		beq $3a09ec	            BEQ syntax              ; No: line cannot start with minus... throw error
.3a09d8	89 80		bit #$80	            BIT #$80                ; Is it a token?
.3a09da	10 0b		bpl $3a09e7	            BPL binaryminus         ; No: leave token unchanged
.3a09dc	20 95 0b	jsr $3a0b95	            JSR TOKTYPE
.3a09df	c9 30		cmp #$30	            CMP #TOK_TY_FUNC        ; Is it a function?
.3a09e1	f0 04		beq $3a09e7	            BEQ binaryminus         ; Yes: then this should be a binary minus operator
.3a09e3	a9 af		lda #$af	            LDA #TOK_NEGATIVE       ; Otherwise: this should be a unary minus (negation)
.3a09e5	80 02		bra $3a09e9	            BRA done
.3a09e7	a9 81		lda #$81	binaryminus LDA #TOK_MINUS          ; It's data... so token should be for binary minus
.3a09e9					done
.3a09e9	2b		pld		            PLD
.3a09ea	28		plp		            PLP
.3a09eb	60		rts		            RTS
.3a09ec					syntax
.3a09ec	08		php		            PHP
.3a09ed	c2 20		rep #$20	            REP #$20
.3a09ef	48		pha		            PHA
.3a09f0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a09f3	5b		tcd		            TCD
.3a09f4	68		pla		            PLA
.3a09f5	28		plp		            PLP
.3a09f6	e2 20		sep #$20	            SEP #$20
.3a09f8	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a09fa	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a09fe	c2 20		rep #$20	            REP #$20
.3a0a00	29 ff 00	and #$00ff	            AND #$00FF
.3a0a03	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a0a06	e2 20		sep #$20	            SEP #$20
.3a0a08	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0a0b					SKIPQUOTED
.3a0a0b	08		php		            PHP
.3a0a0c	e2 20		sep #$20	            SEP #$20
.3a0a0e					loop
.3a0a0e	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a0a11	a7 00		lda [$0800]	            LDA [BIP]
.3a0a13	f0 04		beq $3a0a19	            BEQ done                ; If EOL, just return
.3a0a15	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.3a0a17	d0 f5		bne $3a0a0e	            BNE loop                ; No: keep skipping
.3a0a19	28		plp		done        PLP
.3a0a1a	60		rts		            RTS
.3a0a1b					TKMATCH
.3a0a1b	da		phx		            PHX
.3a0a1c	5a		phy		            PHY
.3a0a1d	08		php		            PHP
.3a0a1e	0b		phd		            PHD
.3a0a1f	08		php		            PHP
.3a0a20	c2 20		rep #$20	            REP #$20
.3a0a22	48		pha		            PHA
.3a0a23	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0a26	5b		tcd		            TCD
.3a0a27	68		pla		            PLA
.3a0a28	28		plp		            PLP
.3a0a29	c2 20		rep #$20	            REP #$20
.3a0a2b	a5 04		lda $0804	            LDA BIPPREV
.3a0a2d	d0 0a		bne $3a0a39	            BNE check_prev
.3a0a2f	e2 20		sep #$20	            SEP #$20
.3a0a31	a5 04		lda $0804	            LDA BIPPREV
.3a0a33	d0 04		bne $3a0a39	            BNE check_prev
.3a0a35	a9 00		lda #$00	            LDA #0
.3a0a37	80 0a		bra $3a0a43	            BRA save_delim
.3a0a39					check_prev
.3a0a39	e2 20		sep #$20	            SEP #$20
.3a0a3b	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.3a0a3d	20 f9 4e	jsr $3a4ef9	            JSR ISVARCHAR
.3a0a40	a9 00		lda #$00	            LDA #0
.3a0a42	2a		rol a		            ROL A
.3a0a43	85 28		sta $0828	save_delim  STA SIGN1               ; SIGN1 := 1 if it is a variable name character
.3a0a45	c2 30		rep #$30	            REP #$30
.3a0a47	a9 e9 0b	lda #$0be9	            LDA #<>TOKENS           ; Set INDEX to point to the first token record
.3a0a4a	85 08		sta $0808	            STA INDEX
.3a0a4c	e2 20		sep #$20	            SEP #$20
.3a0a4e	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0a50	85 0a		sta $080a	            STA INDEX+2
.3a0a52	a2 80 00	ldx #$0080	            LDX #$80                ; Set the initial token ID
.3a0a55					token_loop
.3a0a55	e2 20		sep #$20	            SEP #$20
.3a0a57	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.3a0a5a	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the current token
.3a0a5c	f0 31		beq $3a0a8f	            BEQ no_match            ; Is it 0? We're out of tokens... no match found
.3a0a5e	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it the same as the size of the window?
.3a0a60	d0 32		bne $3a0a94	            BNE next_token          ; No: try the next token
.3a0a62	c2 30		rep #$30	            REP #$30
.3a0a64	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.3a0a67	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the pointer to the token's name
.3a0a69	85 0c		sta $080c	            STA SCRATCH             ; Set SCRATCH to point to the token's name
.3a0a6b	e2 20		sep #$20	            SEP #$20
.3a0a6d	a9 3a		lda #$3a	            LDA #`DATA_BLOCK
.3a0a6f	85 0e		sta $080e	            STA SCRATCH+2
.3a0a71	a5 28		lda $0828	            LDA SIGN1               ; Is previous character a variable name character?
.3a0a73	f0 07		beq $3a0a7c	            BEQ cmp_keyword         ; No: we can check for this token
.3a0a75	a7 0c		lda [$080c]	            LDA [SCRATCH]           ; Get the token's first character
.3a0a77	20 f9 4e	jsr $3a4ef9	            JSR ISVARCHAR
.3a0a7a	b0 18		bcs $3a0a94	            BCS next_token          ; Yes: skip this token
.3a0a7c					cmp_keyword
.3a0a7c	e2 10		sep #$10	            SEP #$10
.3a0a7e	a0 00		ldy #$00	            LDY #0
.3a0a80	b7 00		lda [$0800],y	cmp_loop    LDA [BIP],Y             ; Get the character in the window
.3a0a82	20 41 04	jsr $3a0441	            JSR TOUPPERA
.3a0a85	d7 0c		cmp [$080c],y	            CMP [SCRATCH],Y         ; Compare to the character in the token
.3a0a87	d0 0b		bne $3a0a94	            BNE next_token          ; If they don't match, try the next token
.3a0a89	c8		iny		            INY                     ; Move to the next character in the window
.3a0a8a	c4 1e		cpy $081e	            CPY CURTOKLEN           ; Have we checked the whole window?
.3a0a8c	90 f2		bcc $3a0a80	            BCC cmp_loop            ; No: check this next character
.3a0a8e	8a		txa		            TXA                     ; Move the token ID to A
.3a0a8f	2b		pld		no_match    PLD
.3a0a90	28		plp		            PLP
.3a0a91	7a		ply		            PLY
.3a0a92	fa		plx		            PLX
.3a0a93	60		rts		            RTS
.3a0a94					next_token
.3a0a94	c2 30		rep #$30	            REP #$30
.3a0a96	18		clc		            CLC
.3a0a97	a5 08		lda $0808	            LDA INDEX
.3a0a99	69 08 00	adc #$0008	            ADC #size(TOKEN)
.3a0a9c	85 08		sta $0808	            STA INDEX
.3a0a9e	e2 20		sep #$20	            SEP #$20
.3a0aa0	a5 0a		lda $080a	            LDA INDEX+2
.3a0aa2	69 00		adc #$00	            ADC #0
.3a0aa4	85 0a		sta $080a	            STA INDEX+2
.3a0aa6	e8		inx		            INX                     ; Increment the token ID
.3a0aa7	80 ac		bra $3a0a55	            BRA token_loop          ; And check that token
.3a0aa9					TKNEXTBIG
.3a0aa9	08		php		            PHP
.3a0aaa	0b		phd		            PHD
.3a0aab	8b		phb		            PHB
.3a0aac	08		php		            PHP
.3a0aad	c2 20		rep #$20	            REP #$20
.3a0aaf	48		pha		            PHA
.3a0ab0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0ab3	5b		tcd		            TCD
.3a0ab4	68		pla		            PLA
.3a0ab5	28		plp		            PLP
.3a0ab6	c2 30		rep #$30	            REP #$30
.3a0ab8	a9 e9 0b	lda #$0be9	            LDA #<>TOKENS
.3a0abb	85 08		sta $0808	            STA INDEX
.3a0abd	a9 3a 00	lda #$003a	            LDA #`TOKENS
.3a0ac0	85 0a		sta $080a	            STA INDEX+2
.3a0ac2	64 0c		stz $080c	            STZ SCRATCH             ; Clear SCRATCH
.3a0ac4					loop
.3a0ac4	e2 20		sep #$20	            SEP #$20
.3a0ac6	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.3a0ac9	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the token
.3a0acb	f0 1d		beq $3a0aea	            BEQ done                ; If length is 0, we're done
.3a0acd	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it >= CURTOKLEN?
.3a0acf	b0 06		bcs $3a0ad7	            BGE skip                ; Yes: skip to the next token
.3a0ad1	c5 0c		cmp $080c	            CMP SCRATCH             ; No: is it < SCRATCH?
.3a0ad3	90 02		bcc $3a0ad7	            BLT skip                ; Yes: skip to the next token
.3a0ad5	85 0c		sta $080c	            STA SCRATCH             ; No: it's our new longest token!
.3a0ad7					skip
.3a0ad7	c2 20		rep #$20	            REP #$20
.3a0ad9	18		clc		            CLC
.3a0ada	a5 08		lda $0808	            LDA INDEX
.3a0adc	69 08 00	adc #$0008	            ADC #size(TOKEN)
.3a0adf	85 08		sta $0808	            STA INDEX
.3a0ae1	a5 0a		lda $080a	            LDA INDEX+2
.3a0ae3	69 00 00	adc #$0000	            ADC #0
.3a0ae6	85 0a		sta $080a	            STA INDEX+2
.3a0ae8	80 da		bra $3a0ac4	            BRA loop                ; And go around for another pass
.3a0aea					done
.3a0aea	e2 20		sep #$20	            SEP #$20
.3a0aec	a5 0c		lda $080c	            LDA SCRATCH
.3a0aee	85 1e		sta $081e	            STA CURTOKLEN
.3a0af0	ab		plb		            PLB
.3a0af1	2b		pld		            PLD
.3a0af2	28		plp		            PLP
.3a0af3	60		rts		            RTS
.3a0af4					TKWRITE
.3a0af4	08		php		            PHP
.3a0af5	0b		phd		            PHD
.3a0af6	08		php		            PHP
.3a0af7	c2 20		rep #$20	            REP #$20
.3a0af9	48		pha		            PHA
.3a0afa	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0afd	5b		tcd		            TCD
.3a0afe	68		pla		            PLA
.3a0aff	28		plp		            PLP
.3a0b00	e2 20		sep #$20	            SEP #$20
.3a0b02	87 00		sta [$0800]	            STA [BIP]               ; Write the token to the line
.3a0b04	c2 20		rep #$20	            REP #$20
.3a0b06	18		clc		            CLC
.3a0b07	a5 00		lda $0800	            LDA BIP
.3a0b09	69 01 00	adc #$0001	            ADC #1
.3a0b0c	85 08		sta $0808	            STA INDEX
.3a0b0e	a5 02		lda $0802	            LDA BIP+2
.3a0b10	69 00 00	adc #$0000	            ADC #0
.3a0b13	85 0a		sta $080a	            STA INDEX+2
.3a0b15	e2 10		sep #$10	            SEP #$10
.3a0b17	a4 1e		ldy $081e	            LDY CURTOKLEN           ; Y will be the number of characters to move down
.3a0b19	88		dey		            DEY
.3a0b1a					copy_down
.3a0b1a	e2 20		sep #$20	            SEP #$20
.3a0b1c	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the byte to move down
.3a0b1e	87 08		sta [$0808]	            STA [INDEX]             ; Move it down
.3a0b20	f0 13		beq $3a0b35	            BEQ done                ; We've reached the end of the line
.3a0b22	c2 20		rep #$20	            REP #$20
.3a0b24	18		clc		            CLC
.3a0b25	a5 08		lda $0808	            LDA INDEX
.3a0b27	69 01 00	adc #$0001	            ADC #1
.3a0b2a	85 08		sta $0808	            STA INDEX
.3a0b2c	a5 0a		lda $080a	            LDA INDEX+2
.3a0b2e	69 00 00	adc #$0000	            ADC #0
.3a0b31	85 0a		sta $080a	            STA INDEX+2
.3a0b33	80 e5		bra $3a0b1a	            BRA copy_down
.3a0b35	2b		pld		done        PLD
.3a0b36	28		plp		            PLP
.3a0b37	60		rts		            RTS
.3a0b38					GETTOKREC
.3a0b38	08		php		            PHP
.3a0b39	c2 30		rep #$30	            REP #$30
.3a0b3b	29 7f 00	and #$007f	            AND #$007F
.3a0b3e	0a		asl a		            ASL A
.3a0b3f	0a		asl a		            ASL A
.3a0b40	0a		asl a		            ASL A
.3a0b41	18		clc		            CLC
.3a0b42	69 e9 0b	adc #$0be9	            ADC #<>TOKENS
.3a0b45	aa		tax		            TAX                         ; X is now the data bank relative address of the token record
.3a0b46	28		plp		            PLP
.3a0b47	60		rts		            RTS
.3a0b48					TOKPRECED
.3a0b48	08		php		            PHP
.3a0b49	8b		phb		            PHB
.3a0b4a	0b		phd		            PHD
.3a0b4b	08		php		            PHP
.3a0b4c	c2 20		rep #$20	            REP #$20
.3a0b4e	48		pha		            PHA
.3a0b4f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b52	5b		tcd		            TCD
.3a0b53	68		pla		            PLA
.3a0b54	28		plp		            PLP
.3a0b55	08		php		            PHP
.3a0b56	e2 20		sep #$20	            SEP #$20
.3a0b58	48		pha		            PHA
.3a0b59	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0b5b	48		pha		            PHA
.3a0b5c	ab		plb		            PLB
.3a0b5d	68		pla		            PLA
.3a0b5e	28		plp		            PLP
.3a0b5f	e2 20		sep #$20	            SEP #$20
.3a0b61	c2 10		rep #$10	            REP #$10
.3a0b63	20 38 0b	jsr $3a0b38	            JSR GETTOKREC
.3a0b66	bd 00 00	lda $3a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.3a0b69	c2 20		rep #$20	            REP #$20
.3a0b6b	29 0f 00	and #$000f	            AND #$000F                  ; Mask off the type code
.3a0b6e	2b		pld		            PLD
.3a0b6f	ab		plb		            PLB
.3a0b70	28		plp		            PLP
.3a0b71	60		rts		            RTS
.3a0b72					TOKEVAL
.3a0b72	08		php		            PHP
.3a0b73	8b		phb		            PHB
.3a0b74	0b		phd		            PHD
.3a0b75	08		php		            PHP
.3a0b76	c2 20		rep #$20	            REP #$20
.3a0b78	48		pha		            PHA
.3a0b79	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b7c	5b		tcd		            TCD
.3a0b7d	68		pla		            PLA
.3a0b7e	28		plp		            PLP
.3a0b7f	08		php		            PHP
.3a0b80	e2 20		sep #$20	            SEP #$20
.3a0b82	48		pha		            PHA
.3a0b83	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0b85	48		pha		            PHA
.3a0b86	ab		plb		            PLB
.3a0b87	68		pla		            PLA
.3a0b88	28		plp		            PLP
.3a0b89	c2 30		rep #$30	            REP #$30
.3a0b8b	20 38 0b	jsr $3a0b38	            JSR GETTOKREC
.3a0b8e	bd 04 00	lda $3a0004,x	            LDA #TOKEN.eval,B,X         ; Get the address of the evaluation function
.3a0b91	2b		pld		            PLD
.3a0b92	ab		plb		            PLB
.3a0b93	28		plp		            PLP
.3a0b94	60		rts		            RTS
.3a0b95					TOKTYPE
.3a0b95	08		php		            PHP
.3a0b96	8b		phb		            PHB
.3a0b97	0b		phd		            PHD
.3a0b98	08		php		            PHP
.3a0b99	c2 20		rep #$20	            REP #$20
.3a0b9b	48		pha		            PHA
.3a0b9c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b9f	5b		tcd		            TCD
.3a0ba0	68		pla		            PLA
.3a0ba1	28		plp		            PLP
.3a0ba2	08		php		            PHP
.3a0ba3	e2 20		sep #$20	            SEP #$20
.3a0ba5	48		pha		            PHA
.3a0ba6	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0ba8	48		pha		            PHA
.3a0ba9	ab		plb		            PLB
.3a0baa	68		pla		            PLA
.3a0bab	28		plp		            PLP
.3a0bac	e2 20		sep #$20	            SEP #$20
.3a0bae	c2 10		rep #$10	            REP #$10
.3a0bb0	20 38 0b	jsr $3a0b38	            JSR GETTOKREC
.3a0bb3	bd 00 00	lda $3a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.3a0bb6	c2 20		rep #$20	            REP #$20
.3a0bb8	29 f0 00	and #$00f0	            AND #$00F0                  ; Mask off the type code
.3a0bbb	2b		pld		            PLD
.3a0bbc	ab		plb		            PLB
.3a0bbd	28		plp		            PLP
.3a0bbe	60		rts		            RTS
.3a0bbf					TOKARITY
.3a0bbf	08		php		            PHP
.3a0bc0	8b		phb		            PHB
.3a0bc1	0b		phd		            PHD
.3a0bc2	08		php		            PHP
.3a0bc3	c2 20		rep #$20	            REP #$20
.3a0bc5	48		pha		            PHA
.3a0bc6	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0bc9	5b		tcd		            TCD
.3a0bca	68		pla		            PLA
.3a0bcb	28		plp		            PLP
.3a0bcc	08		php		            PHP
.3a0bcd	e2 20		sep #$20	            SEP #$20
.3a0bcf	48		pha		            PHA
.3a0bd0	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0bd2	48		pha		            PHA
.3a0bd3	ab		plb		            PLB
.3a0bd4	68		pla		            PLA
.3a0bd5	28		plp		            PLP
.3a0bd6	e2 20		sep #$20	            SEP #$20
.3a0bd8	c2 10		rep #$10	            REP #$10
.3a0bda	20 38 0b	jsr $3a0b38	            JSR GETTOKREC
.3a0bdd	bd 06 00	lda $3a0006,x	            LDA #TOKEN.arity,B,X        ; Get the arity
.3a0be0	c2 20		rep #$20	            REP #$20
.3a0be2	29 ff 00	and #$00ff	            AND #$00FF
.3a0be5	2b		pld		            PLD
.3a0be6	ab		plb		            PLB
.3a0be7	28		plp		            PLP
.3a0be8	60		rts		            RTS
=$00					TOK_EOL = $00
=$01					TOK_FUNC_OPEN = $01     ; A pseudo-token to push to the operator stack to mark
=$00					TOK_TY_OP = $00         ; The token is an operator
=$10					TOK_TY_CMD = $10        ; The token is a command (e.g. RUN, LIST, etc.)
=$20					TOK_TY_STMNT = $20      ; The token is a statement (e.g. INPUT, PRINT, DIM, etc.)
=$30					TOK_TY_FUNC = $30       ; The token is a function (e.g. SIN, COS, TAB, etc.)
=$40					TOK_TY_PUNCT = $40      ; The token is a punctuation mark (e.g. "(", ")")
=$50					TOK_TY_BYWRD = $50      ; The token is a by-word (e.g. STEP, TO, WEND, etc.)
.3a0be9					TOKENS
=$80					TOK_PLUS = $80
>3ad010	2b 00				TOKEN_TEXT  .null "+"
>3a0be9	03				precedence  .byte TOK_TY_OP | 3
>3a0bea	01				length      .byte len("+")
>3a0beb	10 d0				name        .word <>TOKEN_TEXT
>3a0bed	56 26				eval        .word <>OP_PLUS
>3a0bef	02 00				arity       .word <>2
=$81					TOK_MINUS = $81
>3ad012	2d 00				TOKEN_TEXT  .null "-"
>3a0bf1	03				precedence  .byte TOK_TY_OP | 3
>3a0bf2	01				length      .byte len("-")
>3a0bf3	12 d0				name        .word <>TOKEN_TEXT
>3a0bf5	96 26				eval        .word <>OP_MINUS
>3a0bf7	02 00				arity       .word <>2
=$82					TOK_MULT = $82
>3ad014	2a 00				TOKEN_TEXT  .null "*"
>3a0bf9	02				precedence  .byte TOK_TY_OP | 2
>3a0bfa	01				length      .byte len("*")
>3a0bfb	14 d0				name        .word <>TOKEN_TEXT
>3a0bfd	cd 26				eval        .word <>OP_MULTIPLY
>3a0bff	02 00				arity       .word <>2
=$83					TOK_DIVIDE = $83
>3ad016	2f 00				TOKEN_TEXT  .null "/"
>3a0c01	02				precedence  .byte TOK_TY_OP | 2
>3a0c02	01				length      .byte len("/")
>3a0c03	16 d0				name        .word <>TOKEN_TEXT
>3a0c05	04 27				eval        .word <>OP_DIVIDE
>3a0c07	02 00				arity       .word <>2
=$84					TOK_MOD = $84
>3ad018	4d 4f 44 00			TOKEN_TEXT  .null "MOD"
>3a0c09	02				precedence  .byte TOK_TY_OP | 2
>3a0c0a	03				length      .byte len("MOD")
>3a0c0b	18 d0				name        .word <>TOKEN_TEXT
>3a0c0d	0e 27				eval        .word <>OP_MOD
>3a0c0f	02 00				arity       .word <>2
>3ad01c	5e 00				TOKEN_TEXT  .null "^"
>3a0c11	00				precedence  .byte TOK_TY_OP | 0
>3a0c12	01				length      .byte len("^")
>3a0c13	1c d0				name        .word <>TOKEN_TEXT
>3a0c15	21 27				eval        .word <>OP_POW
>3a0c17	02 00				arity       .word <>2
=$86					TOK_LE = $86
>3ad01e	3c 3d 00			TOKEN_TEXT  .null "<="
>3a0c19	04				precedence  .byte TOK_TY_OP | 4
>3a0c1a	02				length      .byte len("<=")
>3a0c1b	1e d0				name        .word <>TOKEN_TEXT
>3a0c1d	df 28				eval        .word <>OP_LTE
>3a0c1f	02 00				arity       .word <>2
=$87					TOK_GE = $87
>3ad021	3e 3d 00			TOKEN_TEXT  .null ">="
>3a0c21	04				precedence  .byte TOK_TY_OP | 4
>3a0c22	02				length      .byte len(">=")
>3a0c23	21 d0				name        .word <>TOKEN_TEXT
>3a0c25	9f 28				eval        .word <>OP_GTE
>3a0c27	02 00				arity       .word <>2
=$88					TOK_NE = $88
>3ad024	3c 3e 00			TOKEN_TEXT  .null "<>"
>3a0c29	04				precedence  .byte TOK_TY_OP | 4
>3a0c2a	02				length      .byte len("<>")
>3a0c2b	24 d0				name        .word <>TOKEN_TEXT
>3a0c2d	5f 28				eval        .word <>OP_NE
>3a0c2f	02 00				arity       .word <>2
>3ad027	3c 00				TOKEN_TEXT  .null "<"
>3a0c31	04				precedence  .byte TOK_TY_OP | 4
>3a0c32	01				length      .byte len("<")
>3a0c33	27 d0				name        .word <>TOKEN_TEXT
>3a0c35	9f 27				eval        .word <>OP_LT
>3a0c37	02 00				arity       .word <>2
=$8a					TOK_EQ = $8A
>3ad029	3d 00				TOKEN_TEXT  .null "="
>3a0c39	04				precedence  .byte TOK_TY_OP | 4
>3a0c3a	01				length      .byte len("=")
>3a0c3b	29 d0				name        .word <>TOKEN_TEXT
>3a0c3d	1f 28				eval        .word <>OP_EQ
>3a0c3f	02 00				arity       .word <>2
>3ad02b	3e 00				TOKEN_TEXT  .null ">"
>3a0c41	04				precedence  .byte TOK_TY_OP | 4
>3a0c42	01				length      .byte len(">")
>3a0c43	2b d0				name        .word <>TOKEN_TEXT
>3a0c45	df 27				eval        .word <>OP_GT
>3a0c47	02 00				arity       .word <>2
>3ad02d	4e 4f 54 00			TOKEN_TEXT  .null "NOT"
>3a0c49	05				precedence  .byte TOK_TY_OP | 5
>3a0c4a	03				length      .byte len("NOT")
>3a0c4b	2d d0				name        .word <>TOKEN_TEXT
>3a0c4d	89 27				eval        .word <>OP_NOT
>3a0c4f	01 00				arity       .word <>1
>3ad031	41 4e 44 00			TOKEN_TEXT  .null "AND"
>3a0c51	06				precedence  .byte TOK_TY_OP | 6
>3a0c52	03				length      .byte len("AND")
>3a0c53	31 d0				name        .word <>TOKEN_TEXT
>3a0c55	5b 27				eval        .word <>OP_AND
>3a0c57	02 00				arity       .word <>2
>3ad035	4f 52 00			TOKEN_TEXT  .null "OR"
>3a0c59	07				precedence  .byte TOK_TY_OP | 7
>3a0c5a	02				length      .byte len("OR")
>3a0c5b	35 d0				name        .word <>TOKEN_TEXT
>3a0c5d	72 27				eval        .word <>OP_OR
>3a0c5f	02 00				arity       .word <>2
=$8f					TOK_LPAREN = $8F
>3ad038	28 00				TOKEN_TEXT  .null "("
>3a0c61	ff				precedence  .byte TOK_TY_PUNCT | $FF
>3a0c62	01				length      .byte len("(")
>3a0c63	38 d0				name        .word <>TOKEN_TEXT
>3a0c65	00 00				eval        .word <>0
>3a0c67	00 00				arity       .word <>0
=$90					TOK_RPAREN = $90
>3ad03a	29 00				TOKEN_TEXT  .null ")"
>3a0c69	40				precedence  .byte TOK_TY_PUNCT | 0
>3a0c6a	01				length      .byte len(")")
>3a0c6b	3a d0				name        .word <>TOKEN_TEXT
>3a0c6d	00 00				eval        .word <>0
>3a0c6f	00 00				arity       .word <>0
=$91					TOK_REM = $91
>3ad03c	52 45 4d 00			TOKEN_TEXT  .null "REM"
>3a0c71	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c72	03				length      .byte len("REM")
>3a0c73	3c d0				name        .word <>TOKEN_TEXT
>3a0c75	a5 3f				eval        .word <>S_REM
>3a0c77	00 00				arity       .word <>0
=$92					TOK_PRINT = $92
>3ad040	50 52 49 4e 54 00		TOKEN_TEXT  .null "PRINT"
>3a0c79	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c7a	05				length      .byte len("PRINT")
>3a0c7b	40 d0				name        .word <>TOKEN_TEXT
>3a0c7d	aa 43				eval        .word <>S_PRINT
>3a0c7f	00 00				arity       .word <>0
=$93					TOK_LET = $93
>3ad046	4c 45 54 00			TOKEN_TEXT  .null "LET"
>3a0c81	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c82	03				length      .byte len("LET")
>3a0c83	46 d0				name        .word <>TOKEN_TEXT
>3a0c85	f5 42				eval        .word <>S_LET
>3a0c87	00 00				arity       .word <>0
>3ad04a	47 4f 54 4f 00			TOKEN_TEXT  .null "GOTO"
>3a0c89	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c8a	04				length      .byte len("GOTO")
>3a0c8b	4a d0				name        .word <>TOKEN_TEXT
>3a0c8d	95 42				eval        .word <>S_GOTO
>3a0c8f	00 00				arity       .word <>0
=$95					TOK_END = $95
>3ad04f	45 4e 44 00			TOKEN_TEXT  .null "END"
>3a0c91	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c92	03				length      .byte len("END")
>3a0c93	4f d0				name        .word <>TOKEN_TEXT
>3a0c95	8c 42				eval        .word <>S_END
>3a0c97	00 00				arity       .word <>0
>3ad053	49 46 00			TOKEN_TEXT  .null "IF"
>3a0c99	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c9a	02				length      .byte len("IF")
>3a0c9b	53 d0				name        .word <>TOKEN_TEXT
>3a0c9d	24 42				eval        .word <>S_IF
>3a0c9f	00 00				arity       .word <>0
=$97					TOK_THEN = $97
>3ad056	54 48 45 4e 00			TOKEN_TEXT  .null "THEN"
>3a0ca1	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0ca2	04				length      .byte len("THEN")
>3a0ca3	56 d0				name        .word <>TOKEN_TEXT
>3a0ca5	00 00				eval        .word <>0
>3a0ca7	00 00				arity       .word <>0
>3ad05b	45 4c 53 45 00			TOKEN_TEXT  .null "ELSE"
>3a0ca9	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0caa	04				length      .byte len("ELSE")
>3a0cab	5b d0				name        .word <>TOKEN_TEXT
>3a0cad	00 00				eval        .word <>0
>3a0caf	00 00				arity       .word <>0
>3ad060	47 4f 53 55 42 00		TOKEN_TEXT  .null "GOSUB"
>3a0cb1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cb2	05				length      .byte len("GOSUB")
>3a0cb3	60 d0				name        .word <>TOKEN_TEXT
>3a0cb5	67 41				eval        .word <>S_GOSUB
>3a0cb7	00 00				arity       .word <>0
>3ad066	52 45 54 55 52 4e 00		TOKEN_TEXT  .null "RETURN"
>3a0cb9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cba	06				length      .byte len("RETURN")
>3a0cbb	66 d0				name        .word <>TOKEN_TEXT
>3a0cbd	e0 41				eval        .word <>S_RETURN
>3a0cbf	00 00				arity       .word <>0
=$9b					TOK_FOR = $9B
>3ad06d	46 4f 52 00			TOKEN_TEXT  .null "FOR"
>3a0cc1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cc2	03				length      .byte len("FOR")
>3a0cc3	6d d0				name        .word <>TOKEN_TEXT
>3a0cc5	bc 3f				eval        .word <>S_FOR
>3a0cc7	00 00				arity       .word <>0
=$9c					TOK_TO = $9C
>3ad071	54 4f 00			TOKEN_TEXT  .null "TO"
>3a0cc9	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0cca	02				length      .byte len("TO")
>3a0ccb	71 d0				name        .word <>TOKEN_TEXT
>3a0ccd	00 00				eval        .word <>0
>3a0ccf	00 00				arity       .word <>0
=$9d					TOK_STEP = $9D
>3ad074	53 54 45 50 00			TOKEN_TEXT  .null "STEP"
>3a0cd1	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0cd2	04				length      .byte len("STEP")
>3a0cd3	74 d0				name        .word <>TOKEN_TEXT
>3a0cd5	00 00				eval        .word <>0
>3a0cd7	00 00				arity       .word <>0
=$9e					TOK_NEXT = $9E
>3ad079	4e 45 58 54 00			TOKEN_TEXT  .null "NEXT"
>3a0cd9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cda	04				length      .byte len("NEXT")
>3a0cdb	79 d0				name        .word <>TOKEN_TEXT
>3a0cdd	b0 40				eval        .word <>S_NEXT
>3a0cdf	00 00				arity       .word <>0
=$9f					TOK_DO = $9F
>3ad07e	44 4f 00			TOKEN_TEXT  .null "DO"
>3a0ce1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ce2	02				length      .byte len("DO")
>3a0ce3	7e d0				name        .word <>TOKEN_TEXT
>3a0ce5	b6 3f				eval        .word <>S_DO
>3a0ce7	00 00				arity       .word <>0
=$a0					TOK_LOOP = $A0
>3ad081	4c 4f 4f 50 00			TOKEN_TEXT  .null "LOOP"
>3a0ce9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cea	04				length      .byte len("LOOP")
>3a0ceb	81 d0				name        .word <>TOKEN_TEXT
>3a0ced	b9 3f				eval        .word <>S_LOOP
>3a0cef	00 00				arity       .word <>0
>3ad086	57 48 49 4c 45 00		TOKEN_TEXT  .null "WHILE"
>3a0cf1	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0cf2	05				length      .byte len("WHILE")
>3a0cf3	86 d0				name        .word <>TOKEN_TEXT
>3a0cf5	00 00				eval        .word <>0
>3a0cf7	00 00				arity       .word <>0
>3ad08c	55 4e 54 49 4c 00		TOKEN_TEXT  .null "UNTIL"
>3a0cf9	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0cfa	05				length      .byte len("UNTIL")
>3a0cfb	8c d0				name        .word <>TOKEN_TEXT
>3a0cfd	00 00				eval        .word <>0
>3a0cff	00 00				arity       .word <>0
>3ad092	45 58 49 54 00			TOKEN_TEXT  .null "EXIT"
>3a0d01	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d02	04				length      .byte len("EXIT")
>3a0d03	92 d0				name        .word <>TOKEN_TEXT
>3a0d05	b3 3f				eval        .word <>S_EXIT
>3a0d07	00 00				arity       .word <>0
>3ad097	43 4c 52 00			TOKEN_TEXT  .null "CLR"
>3a0d09	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d0a	03				length      .byte len("CLR")
>3a0d0b	97 d0				name        .word <>TOKEN_TEXT
>3a0d0d	eb 42				eval        .word <>S_CLR
>3a0d0f	00 00				arity       .word <>0
>3ad09b	53 54 4f 50 00			TOKEN_TEXT  .null "STOP"
>3a0d11	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d12	04				length      .byte len("STOP")
>3a0d13	9b d0				name        .word <>TOKEN_TEXT
>3a0d15	86 3f				eval        .word <>S_STOP
>3a0d17	00 00				arity       .word <>0
>3ad0a0	50 4f 4b 45 00			TOKEN_TEXT  .null "POKE"
>3a0d19	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d1a	04				length      .byte len("POKE")
>3a0d1b	a0 d0				name        .word <>TOKEN_TEXT
>3a0d1d	16 3f				eval        .word <>S_POKE
>3a0d1f	00 00				arity       .word <>0
>3ad0a5	50 4f 4b 45 57 00		TOKEN_TEXT  .null "POKEW"
>3a0d21	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d22	05				length      .byte len("POKEW")
>3a0d23	a5 d0				name        .word <>TOKEN_TEXT
>3a0d25	ac 3e				eval        .word <>S_POKEW
>3a0d27	00 00				arity       .word <>0
>3ad0ab	50 4f 4b 45 4c 00		TOKEN_TEXT  .null "POKEL"
>3a0d29	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d2a	05				length      .byte len("POKEL")
>3a0d2b	ab d0				name        .word <>TOKEN_TEXT
>3a0d2d	39 3e				eval        .word <>S_POKEL
>3a0d2f	00 00				arity       .word <>0
>3ad0b1	43 4c 53 00			TOKEN_TEXT  .null "CLS"
>3a0d31	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d32	03				length      .byte len("CLS")
>3a0d33	b1 d0				name        .word <>TOKEN_TEXT
>3a0d35	35 3e				eval        .word <>S_CLS
>3a0d37	00 00				arity       .word <>0
>3ad0b5	52 45 41 44 00			TOKEN_TEXT  .null "READ"
>3a0d39	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d3a	04				length      .byte len("READ")
>3a0d3b	b5 d0				name        .word <>TOKEN_TEXT
>3a0d3d	16 3d				eval        .word <>S_READ
>3a0d3f	00 00				arity       .word <>0
=$ab					TOK_DATA = $AB
>3ad0ba	44 41 54 41 00			TOKEN_TEXT  .null "DATA"
>3a0d41	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d42	04				length      .byte len("DATA")
>3a0d43	ba d0				name        .word <>TOKEN_TEXT
>3a0d45	28 3e				eval        .word <>S_DATA
>3a0d47	00 00				arity       .word <>0
>3ad0bf	52 45 53 54 4f 52 45 00		TOKEN_TEXT  .null "RESTORE"
>3a0d49	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d4a	07				length      .byte len("RESTORE")
>3a0d4b	bf d0				name        .word <>TOKEN_TEXT
>3a0d4d	2c 3e				eval        .word <>S_RESTORE
>3a0d4f	00 00				arity       .word <>0
>3ad0c7	44 49 4d 00			TOKEN_TEXT  .null "DIM"
>3a0d51	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d52	03				length      .byte len("DIM")
>3a0d53	c7 d0				name        .word <>TOKEN_TEXT
>3a0d55	69 3c				eval        .word <>S_DIM
>3a0d57	00 00				arity       .word <>0
>3ad0cb	43 41 4c 4c 00			TOKEN_TEXT  .null "CALL"
>3a0d59	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d5a	04				length      .byte len("CALL")
>3a0d5b	cb d0				name        .word <>TOKEN_TEXT
>3a0d5d	d2 3b				eval        .word <>S_CALL
>3a0d5f	00 00				arity       .word <>0
=$af					TOK_NEGATIVE = $AF
>3ad0d0	2d 00				TOKEN_TEXT  .null "-"
>3a0d61	00				precedence  .byte TOK_TY_OP | 0
>3a0d62	01				length      .byte len("-")
>3a0d63	d0 d0				name        .word <>TOKEN_TEXT
>3a0d65	1f 29				eval        .word <>OP_NEGATIVE
>3a0d67	01 00				arity       .word <>1
>3ad0d2	4c 45 4e 00			TOKEN_TEXT  .null "LEN"
>3a0d69	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d6a	03				length      .byte len("LEN")
>3a0d6b	d2 d0				name        .word <>TOKEN_TEXT
>3a0d6d	a0 49				eval        .word <>FN_LEN
>3a0d6f	00 00				arity       .word <>0
>3ad0d6	50 45 45 4b 00			TOKEN_TEXT  .null "PEEK"
>3a0d71	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d72	04				length      .byte len("PEEK")
>3a0d73	d6 d0				name        .word <>TOKEN_TEXT
>3a0d75	f0 49				eval        .word <>FN_PEEK
>3a0d77	00 00				arity       .word <>0
>3ad0db	50 45 45 4b 57 00		TOKEN_TEXT  .null "PEEKW"
>3a0d79	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d7a	05				length      .byte len("PEEKW")
>3a0d7b	db d0				name        .word <>TOKEN_TEXT
>3a0d7d	81 4a				eval        .word <>FN_PEEKW
>3a0d7f	00 00				arity       .word <>0
>3ad0e1	50 45 45 4b 4c 00		TOKEN_TEXT  .null "PEEKL"
>3a0d81	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d82	05				length      .byte len("PEEKL")
>3a0d83	e1 d0				name        .word <>TOKEN_TEXT
>3a0d85	33 4a				eval        .word <>FN_PEEKL
>3a0d87	00 00				arity       .word <>0
>3ad0e7	43 48 52 24 00			TOKEN_TEXT  .null "CHR$"
>3a0d89	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d8a	04				length      .byte len("CHR$")
>3a0d8b	e7 d0				name        .word <>TOKEN_TEXT
>3a0d8d	c0 4a				eval        .word <>FN_CHR
>3a0d8f	00 00				arity       .word <>0
>3ad0ec	41 53 43 00			TOKEN_TEXT  .null "ASC"
>3a0d91	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d92	03				length      .byte len("ASC")
>3a0d93	ec d0				name        .word <>TOKEN_TEXT
>3a0d95	15 4b				eval        .word <>FN_ASC
>3a0d97	00 00				arity       .word <>0
>3ad0f0	53 50 43 00			TOKEN_TEXT  .null "SPC"
>3a0d99	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d9a	03				length      .byte len("SPC")
>3a0d9b	f0 d0				name        .word <>TOKEN_TEXT
>3a0d9d	5a 4b				eval        .word <>FN_SPC
>3a0d9f	00 00				arity       .word <>0
>3ad0f4	54 41 42 00			TOKEN_TEXT  .null "TAB"
>3a0da1	30				precedence  .byte TOK_TY_FUNC | 0
>3a0da2	03				length      .byte len("TAB")
>3a0da3	f4 d0				name        .word <>TOKEN_TEXT
>3a0da5	e3 4b				eval        .word <>FN_TAB
>3a0da7	00 00				arity       .word <>0
>3ad0f8	41 42 53 00			TOKEN_TEXT  .null "ABS"
>3a0da9	30				precedence  .byte TOK_TY_FUNC | 0
>3a0daa	03				length      .byte len("ABS")
>3a0dab	f8 d0				name        .word <>TOKEN_TEXT
>3a0dad	6c 4c				eval        .word <>FN_ABS
>3a0daf	00 00				arity       .word <>0
>3ad0fc	53 47 4e 00			TOKEN_TEXT  .null "SGN"
>3a0db1	30				precedence  .byte TOK_TY_FUNC | 0
>3a0db2	03				length      .byte len("SGN")
>3a0db3	fc d0				name        .word <>TOKEN_TEXT
>3a0db5	ce 4c				eval        .word <>FN_SGN
>3a0db7	00 00				arity       .word <>0
>3ad100	48 45 58 24 00			TOKEN_TEXT  .null "HEX$"
>3a0db9	30				precedence  .byte TOK_TY_FUNC | 0
>3a0dba	04				length      .byte len("HEX$")
>3a0dbb	00 d1				name        .word <>TOKEN_TEXT
>3a0dbd	12 49				eval        .word <>FN_HEX
>3a0dbf	00 00				arity       .word <>0
>3ad105	44 45 43 00			TOKEN_TEXT  .null "DEC"
>3a0dc1	30				precedence  .byte TOK_TY_FUNC | 0
>3a0dc2	03				length      .byte len("DEC")
>3a0dc3	05 d1				name        .word <>TOKEN_TEXT
>3a0dc5	b1 48				eval        .word <>FN_DEC
>3a0dc7	00 00				arity       .word <>0
>3ad109	53 54 52 24 00			TOKEN_TEXT  .null "STR$"
>3a0dc9	30				precedence  .byte TOK_TY_FUNC | 0
>3a0dca	04				length      .byte len("STR$")
>3a0dcb	09 d1				name        .word <>TOKEN_TEXT
>3a0dcd	63 48				eval        .word <>FN_STR
>3a0dcf	00 00				arity       .word <>0
>3ad10e	56 41 4c 00			TOKEN_TEXT  .null "VAL"
>3a0dd1	30				precedence  .byte TOK_TY_FUNC | 0
>3a0dd2	03				length      .byte len("VAL")
>3a0dd3	0e d1				name        .word <>TOKEN_TEXT
>3a0dd5	0d 48				eval        .word <>FN_VAL
>3a0dd7	00 00				arity       .word <>0
>3ad112	4c 45 46 54 24 00		TOKEN_TEXT  .null "LEFT$"
>3a0dd9	30				precedence  .byte TOK_TY_FUNC | 0
>3a0dda	05				length      .byte len("LEFT$")
>3a0ddb	12 d1				name        .word <>TOKEN_TEXT
>3a0ddd	44 47				eval        .word <>FN_LEFT
>3a0ddf	00 00				arity       .word <>0
>3ad118	52 49 47 48 54 24 00		TOKEN_TEXT  .null "RIGHT$"
>3a0de1	30				precedence  .byte TOK_TY_FUNC | 0
>3a0de2	06				length      .byte len("RIGHT$")
>3a0de3	18 d1				name        .word <>TOKEN_TEXT
>3a0de5	63 46				eval        .word <>FN_RIGHT
>3a0de7	00 00				arity       .word <>0
>3ad11f	4d 49 44 24 00			TOKEN_TEXT  .null "MID$"
>3a0de9	30				precedence  .byte TOK_TY_FUNC | 0
>3a0dea	04				length      .byte len("MID$")
>3a0deb	1f d1				name        .word <>TOKEN_TEXT
>3a0ded	ae 45				eval        .word <>FN_MID
>3a0def	00 00				arity       .word <>0
>3ad124	52 55 4e 00			TOKEN_TEXT  .null "RUN"
>3a0df1	10				precedence  .byte TOK_TY_CMD | 0
>3a0df2	03				length      .byte len("RUN")
>3a0df3	24 d1				name        .word <>TOKEN_TEXT
>3a0df5	35 4e				eval        .word <>CMD_RUN
>3a0df7	00 00				arity       .word <>0
>3ad128	4e 45 57 00			TOKEN_TEXT  .null "NEW"
>3a0df9	10				precedence  .byte TOK_TY_CMD | 0
>3a0dfa	03				length      .byte len("NEW")
>3a0dfb	28 d1				name        .word <>TOKEN_TEXT
>3a0dfd	00 4e				eval        .word <>CMD_NEW
>3a0dff	00 00				arity       .word <>0
>3ad12c	4c 4f 41 44 00			TOKEN_TEXT  .null "LOAD"
>3a0e01	10				precedence  .byte TOK_TY_CMD | 0
>3a0e02	04				length      .byte len("LOAD")
>3a0e03	2c d1				name        .word <>TOKEN_TEXT
>3a0e05	e6 69				eval        .word <>CMD_LOAD
>3a0e07	00 00				arity       .word <>0
>3ad131	4c 49 53 54 00			TOKEN_TEXT  .null "LIST"
>3a0e09	10				precedence  .byte TOK_TY_CMD | 0
>3a0e0a	04				length      .byte len("LIST")
>3a0e0b	31 d1				name        .word <>TOKEN_TEXT
>3a0e0d	4c 4e				eval        .word <>CMD_LIST
>3a0e0f	00 00				arity       .word <>0
>3ad136	44 49 52 00			TOKEN_TEXT  .null "DIR"
>3a0e11	10				precedence  .byte TOK_TY_CMD | 0
>3a0e12	03				length      .byte len("DIR")
>3a0e13	36 d1				name        .word <>TOKEN_TEXT
>3a0e15	0d 67				eval        .word <>CMD_DIR
>3a0e17	00 00				arity       .word <>0
>3ad13a	42 4c 4f 41 44 00		TOKEN_TEXT  .null "BLOAD"
>3a0e19	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e1a	05				length      .byte len("BLOAD")
>3a0e1b	3a d1				name        .word <>TOKEN_TEXT
>3a0e1d	b8 68				eval        .word <>S_BLOAD
>3a0e1f	00 00				arity       .word <>0
>3ad140	42 52 55 4e 00			TOKEN_TEXT  .null "BRUN"
>3a0e21	10				precedence  .byte TOK_TY_CMD | 0
>3a0e22	04				length      .byte len("BRUN")
>3a0e23	40 d1				name        .word <>TOKEN_TEXT
>3a0e25	93 69				eval        .word <>CMD_BRUN
>3a0e27	00 00				arity       .word <>0
>3ad145	42 53 41 56 45 00		TOKEN_TEXT  .null "BSAVE"
>3a0e29	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e2a	05				length      .byte len("BSAVE")
>3a0e2b	45 d1				name        .word <>TOKEN_TEXT
>3a0e2d	9f 6a				eval        .word <>S_BSAVE
>3a0e2f	00 00				arity       .word <>0
>3ad14b	44 45 4c 00			TOKEN_TEXT  .null "DEL"
>3a0e31	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e32	03				length      .byte len("DEL")
>3a0e33	4b d1				name        .word <>TOKEN_TEXT
>3a0e35	be 6b				eval        .word <>S_DEL
>3a0e37	00 00				arity       .word <>0
>3ad14f	53 41 56 45 00			TOKEN_TEXT  .null "SAVE"
>3a0e39	10				precedence  .byte TOK_TY_CMD | 0
>3a0e3a	04				length      .byte len("SAVE")
>3a0e3b	4f d1				name        .word <>TOKEN_TEXT
>3a0e3d	2b 6b				eval        .word <>CMD_SAVE
>3a0e3f	00 00				arity       .word <>0
>3ad154	52 45 4e 41 4d 45 00		TOKEN_TEXT  .null "RENAME"
>3a0e41	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e42	06				length      .byte len("RENAME")
>3a0e43	54 d1				name        .word <>TOKEN_TEXT
>3a0e45	34 6c				eval        .word <>S_RENAME
>3a0e47	00 00				arity       .word <>0
>3ad15b	43 4f 50 59 00			TOKEN_TEXT  .null "COPY"
>3a0e49	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e4a	04				length      .byte len("COPY")
>3a0e4b	5b d1				name        .word <>TOKEN_TEXT
>3a0e4d	58 6d				eval        .word <>S_COPY
>3a0e4f	00 00				arity       .word <>0
>3ad160	4d 4f 4e 49 54 4f 52 00		TOKEN_TEXT  .null "MONITOR"
>3a0e51	10				precedence  .byte TOK_TY_CMD | 0
>3a0e52	07				length      .byte len("MONITOR")
>3a0e53	60 d1				name        .word <>TOKEN_TEXT
>3a0e55	fd 4d				eval        .word <>CMD_MONITOR
>3a0e57	00 00				arity       .word <>0
>3ad168	47 45 54 00			TOKEN_TEXT  .null "GET"
>3a0e59	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e5a	03				length      .byte len("GET")
>3a0e5b	68 d1				name        .word <>TOKEN_TEXT
>3a0e5d	60 3b				eval        .word <>S_GET
>3a0e5f	00 00				arity       .word <>0
>3ad16c	49 4e 50 55 54 00		TOKEN_TEXT  .null "INPUT"
>3a0e61	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e62	05				length      .byte len("INPUT")
>3a0e63	6c d1				name        .word <>TOKEN_TEXT
>3a0e65	70 3a				eval        .word <>S_INPUT
>3a0e67	00 00				arity       .word <>0
>3ad172	53 45 54 42 4f 52 44 45		TOKEN_TEXT  .null "SETBORDER"
>3ad17a	52 00
>3a0e69	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e6a	09				length      .byte len("SETBORDER")
>3a0e6b	72 d1				name        .word <>TOKEN_TEXT
>3a0e6d	de 2a				eval        .word <>S_SETBORDER
>3a0e6f	00 00				arity       .word <>0
>3ad17c	54 45 58 54 43 4f 4c 4f		TOKEN_TEXT  .null "TEXTCOLOR"
>3ad184	52 00
>3a0e71	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e72	09				length      .byte len("TEXTCOLOR")
>3a0e73	7c d1				name        .word <>TOKEN_TEXT
>3a0e75	6b 2a				eval        .word <>S_TEXTCOLOR
>3a0e77	00 00				arity       .word <>0
>3ad186	53 45 54 42 47 43 4f 4c		TOKEN_TEXT  .null "SETBGCOLOR"
>3ad18e	4f 52 00
>3a0e79	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e7a	0a				length      .byte len("SETBGCOLOR")
>3a0e7b	86 d1				name        .word <>TOKEN_TEXT
>3a0e7d	9b 2a				eval        .word <>S_SETBGCOLOR
>3a0e7f	00 00				arity       .word <>0
>3ad191	53 45 54 44 41 54 45 00		TOKEN_TEXT  .null "SETDATE"
>3a0e81	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e82	07				length      .byte len("SETDATE")
>3a0e83	91 d1				name        .word <>TOKEN_TEXT
>3a0e85	d8 29				eval        .word <>S_SETDATE
>3a0e87	00 00				arity       .word <>0
>3ad199	47 45 54 44 41 54 45 24		TOKEN_TEXT  .null "GETDATE$"
>3ad1a1	00
>3a0e89	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e8a	08				length      .byte len("GETDATE$")
>3a0e8b	99 d1				name        .word <>TOKEN_TEXT
>3a0e8d	89 44				eval        .word <>F_GETDATE
>3a0e8f	00 00				arity       .word <>0
>3ad1a2	53 45 54 54 49 4d 45 00		TOKEN_TEXT  .null "SETTIME"
>3a0e91	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e92	07				length      .byte len("SETTIME")
>3a0e93	a2 d1				name        .word <>TOKEN_TEXT
>3a0e95	6d 29				eval        .word <>S_SETTIME
>3a0e97	00 00				arity       .word <>0
>3ad1aa	47 45 54 54 49 4d 45 24		TOKEN_TEXT  .null "GETTIME$"
>3ad1b2	00
>3a0e99	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e9a	08				length      .byte len("GETTIME$")
>3a0e9b	aa d1				name        .word <>TOKEN_TEXT
>3a0e9d	f3 44				eval        .word <>F_GETTIME
>3a0e9f	00 00				arity       .word <>0
>3ad1b3	47 52 41 50 48 49 43 53		TOKEN_TEXT  .null "GRAPHICS"
>3ad1bb	00
>3a0ea1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ea2	08				length      .byte len("GRAPHICS")
>3a0ea3	b3 d1				name        .word <>TOKEN_TEXT
>3a0ea5	23 2c				eval        .word <>S_GRAPHICS
>3a0ea7	00 00				arity       .word <>0
>3ad1bc	53 45 54 43 4f 4c 4f 52		TOKEN_TEXT  .null "SETCOLOR"
>3ad1c4	00
>3a0ea9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eaa	08				length      .byte len("SETCOLOR")
>3a0eab	bc d1				name        .word <>TOKEN_TEXT
>3a0ead	57 2b				eval        .word <>S_SETCOLOR
>3a0eaf	00 00				arity       .word <>0
>3ad1c5	42 49 54 4d 41 50 00		TOKEN_TEXT  .null "BITMAP"
>3a0eb1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eb2	06				length      .byte len("BITMAP")
>3a0eb3	c5 d1				name        .word <>TOKEN_TEXT
>3a0eb5	5d 2d				eval        .word <>S_BITMAP
>3a0eb7	00 00				arity       .word <>0
>3ad1cc	43 4c 52 42 49 54 4d 41		TOKEN_TEXT  .null "CLRBITMAP"
>3ad1d4	50 00
>3a0eb9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eba	09				length      .byte len("CLRBITMAP")
>3a0ebb	cc d1				name        .word <>TOKEN_TEXT
>3a0ebd	65 2e				eval        .word <>S_CLRBITMAP
>3a0ebf	00 00				arity       .word <>0
>3ad1d6	50 4c 4f 54 00			TOKEN_TEXT  .null "PLOT"
>3a0ec1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ec2	04				length      .byte len("PLOT")
>3a0ec3	d6 d1				name        .word <>TOKEN_TEXT
>3a0ec5	75 2f				eval        .word <>S_PLOT
>3a0ec7	00 00				arity       .word <>0
>3ad1db	4c 49 4e 45 00			TOKEN_TEXT  .null "LINE"
>3a0ec9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eca	04				length      .byte len("LINE")
>3a0ecb	db d1				name        .word <>TOKEN_TEXT
>3a0ecd	e6 2f				eval        .word <>S_LINE
>3a0ecf	00 00				arity       .word <>0
>3ad1e0	46 49 4c 4c 00			TOKEN_TEXT  .null "FILL"
>3a0ed1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ed2	04				length      .byte len("FILL")
>3a0ed3	e0 d1				name        .word <>TOKEN_TEXT
>3a0ed5	7f 30				eval        .word <>S_FILL
>3a0ed7	00 00				arity       .word <>0
>3ad1e5	53 50 52 49 54 45 00		TOKEN_TEXT  .null "SPRITE"
>3a0ed9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eda	06				length      .byte len("SPRITE")
>3a0edb	e5 d1				name        .word <>TOKEN_TEXT
>3a0edd	bb 31				eval        .word <>S_SPRITE
>3a0edf	00 00				arity       .word <>0
>3ad1ec	53 50 52 49 54 45 41 54		TOKEN_TEXT  .null "SPRITEAT"
>3ad1f4	00
>3a0ee1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ee2	08				length      .byte len("SPRITEAT")
>3a0ee3	ec d1				name        .word <>TOKEN_TEXT
>3a0ee5	59 32				eval        .word <>S_SPRITEAT
>3a0ee7	00 00				arity       .word <>0
>3ad1f5	53 50 52 49 54 45 53 48		TOKEN_TEXT  .null "SPRITESHOW"
>3ad1fd	4f 57 00
>3a0ee9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eea	0a				length      .byte len("SPRITESHOW")
>3a0eeb	f5 d1				name        .word <>TOKEN_TEXT
>3a0eed	a7 32				eval        .word <>S_SPRITESHOW
>3a0eef	00 00				arity       .word <>0
>3ad200	54 49 4c 45 53 45 54 00		TOKEN_TEXT  .null "TILESET"
>3a0ef1	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ef2	07				length      .byte len("TILESET")
>3a0ef3	00 d2				name        .word <>TOKEN_TEXT
>3a0ef5	de 33				eval        .word <>S_TILESET
>3a0ef7	00 00				arity       .word <>0
>3ad208	54 49 4c 45 4d 41 50 00		TOKEN_TEXT  .null "TILEMAP"
>3a0ef9	20				precedence  .byte TOK_TY_STMNT | 0
>3a0efa	07				length      .byte len("TILEMAP")
>3a0efb	08 d2				name        .word <>TOKEN_TEXT
>3a0efd	5c 34				eval        .word <>S_TILEMAP
>3a0eff	00 00				arity       .word <>0
>3ad210	54 49 4c 45 53 48 4f 57		TOKEN_TEXT  .null "TILESHOW"
>3ad218	00
>3a0f01	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f02	08				length      .byte len("TILESHOW")
>3a0f03	10 d2				name        .word <>TOKEN_TEXT
>3a0f05	ce 34				eval        .word <>S_TILESHOW
>3a0f07	00 00				arity       .word <>0
>3ad219	54 49 4c 45 41 54 00		TOKEN_TEXT  .null "TILEAT"
>3a0f09	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f0a	06				length      .byte len("TILEAT")
>3a0f0b	19 d2				name        .word <>TOKEN_TEXT
>3a0f0d	0b 35				eval        .word <>S_TILEAT
>3a0f0f	00 00				arity       .word <>0
>3ad220	4d 45 4d 43 4f 50 59 00		TOKEN_TEXT  .null "MEMCOPY"
>3a0f11	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f12	07				length      .byte len("MEMCOPY")
>3a0f13	20 d2				name        .word <>TOKEN_TEXT
>3a0f15	3b 38				eval        .word <>S_MEMCOPY
>3a0f17	00 00				arity       .word <>0
=$e6					TOK_LINEAR = $E6
>3ad228	4c 49 4e 45 41 52 00		TOKEN_TEXT  .null "LINEAR"
>3a0f19	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0f1a	06				length      .byte len("LINEAR")
>3a0f1b	28 d2				name        .word <>TOKEN_TEXT
>3a0f1d	00 00				eval        .word <>0
>3a0f1f	00 00				arity       .word <>0
=$e7					TOK_RECT = $E7
>3ad22f	52 45 43 54 00			TOKEN_TEXT  .null "RECT"
>3a0f21	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0f22	04				length      .byte len("RECT")
>3a0f23	2f d2				name        .word <>TOKEN_TEXT
>3a0f25	00 00				eval        .word <>0
>3a0f27	00 00				arity       .word <>0
>3ad234	4c 4f 43 41 54 45 00		TOKEN_TEXT  .null "LOCATE"
>3a0f29	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f2a	06				length      .byte len("LOCATE")
>3a0f2b	34 d2				name        .word <>TOKEN_TEXT
>3a0f2d	50 3a				eval        .word <>S_LOCATE
>3a0f2f	00 00				arity       .word <>0
>3ad23b	49 4e 54 00			TOKEN_TEXT  .null "INT"
>3a0f31	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f32	03				length      .byte len("INT")
>3a0f33	3b d2				name        .word <>TOKEN_TEXT
>3a0f35	24 4d				eval        .word <>FN_INT
>3a0f37	00 00				arity       .word <>0
>3ad23f	52 4e 44 00			TOKEN_TEXT  .null "RND"
>3a0f39	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f3a	03				length      .byte len("RND")
>3a0f3b	3f d2				name        .word <>TOKEN_TEXT
>3a0f3d	58 45				eval        .word <>FN_RND
>3a0f3f	00 00				arity       .word <>0
>3ad243	53 49 4e 00			TOKEN_TEXT  .null "SIN"
>3a0f41	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f42	03				length      .byte len("SIN")
>3a0f43	43 d2				name        .word <>TOKEN_TEXT
>3a0f45	37 4d				eval        .word <>FN_SIN
>3a0f47	00 00				arity       .word <>0
>3ad247	43 4f 53 00			TOKEN_TEXT  .null "COS"
>3a0f49	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f4a	03				length      .byte len("COS")
>3a0f4b	47 d2				name        .word <>TOKEN_TEXT
>3a0f4d	4d 4d				eval        .word <>FN_COS
>3a0f4f	00 00				arity       .word <>0
>3ad24b	54 41 4e 00			TOKEN_TEXT  .null "TAN"
>3a0f51	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f52	03				length      .byte len("TAN")
>3a0f53	4b d2				name        .word <>TOKEN_TEXT
>3a0f55	63 4d				eval        .word <>FN_TAN
>3a0f57	00 00				arity       .word <>0
>3ad24f	4c 4e 00			TOKEN_TEXT  .null "LN"
>3a0f59	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f5a	02				length      .byte len("LN")
>3a0f5b	4f d2				name        .word <>TOKEN_TEXT
>3a0f5d	79 4d				eval        .word <>FN_LN
>3a0f5f	00 00				arity       .word <>0
>3ad252	41 43 4f 53 00			TOKEN_TEXT  .null "ACOS"
>3a0f61	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f62	04				length      .byte len("ACOS")
>3a0f63	52 d2				name        .word <>TOKEN_TEXT
>3a0f65	8f 4d				eval        .word <>FN_ACOS
>3a0f67	00 00				arity       .word <>0
>3ad257	41 53 49 4e 00			TOKEN_TEXT  .null "ASIN"
>3a0f69	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f6a	04				length      .byte len("ASIN")
>3a0f6b	57 d2				name        .word <>TOKEN_TEXT
>3a0f6d	a5 4d				eval        .word <>FN_ASIN
>3a0f6f	00 00				arity       .word <>0
>3ad25c	41 54 41 4e 00			TOKEN_TEXT  .null "ATAN"
>3a0f71	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f72	04				length      .byte len("ATAN")
>3a0f73	5c d2				name        .word <>TOKEN_TEXT
>3a0f75	bb 4d				eval        .word <>FN_ATAN
>3a0f77	00 00				arity       .word <>0
>3ad261	45 58 50 00			TOKEN_TEXT  .null "EXP"
>3a0f79	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f7a	03				length      .byte len("EXP")
>3a0f7b	61 d2				name        .word <>TOKEN_TEXT
>3a0f7d	d1 4d				eval        .word <>FN_EXP
>3a0f7f	00 00				arity       .word <>0
>3ad265	53 51 52 00			TOKEN_TEXT  .null "SQR"
>3a0f81	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f82	03				length      .byte len("SQR")
>3a0f83	65 d2				name        .word <>TOKEN_TEXT
>3a0f85	e7 4d				eval        .word <>FN_SQR
>3a0f87	00 00				arity       .word <>0
>3a0f89	00 00 00 00 00 00 00 00		            .word 0, 0, 0, 0

;******  Return to file: src\basic816.s


;******  Processing file: src\heap.s

>08b7					ALLOCATED   .long ?     ; Pointer to the most recently allocated object
>08ba					HEAP        .long ?     ; Pointer to the top of the heap (next empty byte)
>08bd					FREED       .long ?     ; Pointer to a linked list of freed heap objects
>08c0					CURRBLOCK   .long ?     ; Pointer to the current heap allocated block
>08c3					CURRHEADER  .long ?     ; Pointer to the header of the current block
>08c6					CURREND     .long ?     ; Pointer to the byte immediately after the current block
>08c9					CURRFREED   .long ?     ; Pointer to the current freed block
>08cc					FREEDEND    .long ?     ; Pointer to the byte immediately after the current freed block
>08cf					LASTFREED   .long ?     ;
.0000					HEAPOBJ
>0000					TYPE        .byte ?     ; Code for the type of object allocated
>0001					COUNT       .byte ?     ; Number of references to the heap object
>0002					NEXT        .long ?     ; Pointer to the next object in the list (used when freed)
>0005					END         .long ?     ; Pointer to the next byte after the block
.3a0f91					INITHEAP
.3a0f91	08		php		            PHP
.3a0f92	0b		phd		            PHD
.3a0f93	08		php		            PHP
.3a0f94	c2 20		rep #$20	            REP #$20
.3a0f96	48		pha		            PHA
.3a0f97	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0f9a	5b		tcd		            TCD
.3a0f9b	68		pla		            PLA
.3a0f9c	28		plp		            PLP
.3a0f9d	c2 30		rep #$30	            REP #$30
.3a0f9f	a9 ff ff	lda #$ffff	            LDA #<>HEAP_TOP         ; Set the HEAP to the top
.3a0fa2	85 ba		sta $08ba	            STA HEAP
.3a0fa4	e2 20		sep #$20	            SEP #$20
.3a0fa6	a9 37		lda #$37	            LDA #`HEAP_TOP
.3a0fa8	85 bc		sta $08bc	            STA HEAP+2
.3a0faa	c2 20		rep #$20	            REP #$20
.3a0fac	64 b7		stz $08b7	            STZ ALLOCATED           ; And clear the pointer to the allocated objects
.3a0fae	64 bd		stz $08bd	            STZ FREED               ; as well as the list of freed objects
.3a0fb0	e2 20		sep #$20	            SEP #$20
.3a0fb2	64 b9		stz $08b9	            STZ ALLOCATED+2
.3a0fb4	64 bf		stz $08bf	            STZ FREED+2
.3a0fb6	2b		pld		            PLD
.3a0fb7	28		plp		            PLP
.3a0fb8	60		rts		            RTS
.3a0fb9					ALLOC
.3a0fb9	5a		phy		            PHY
.3a0fba	08		php		            PHP
.3a0fbb	e2 20		sep #$20	            SEP #$20
.3a0fbd	85 ea		sta $08ea	            STA TOFINDTYPE      ; Save the type of the block to TOFINDTYPE
.3a0fbf	c2 10		rep #$10	            REP #$10
.3a0fc1	86 8f		stx $088f	            STX MCOUNT           ; And the length of the block needed to MCOUNT
.3a0fc3	c2 20		rep #$20	            REP #$20
.3a0fc5	a5 0e		lda $080e	            LDA SCRATCH+2
.3a0fc7	48		pha		            PHA
.3a0fc8	a5 0c		lda $080c	            LDA SCRATCH
.3a0fca	48		pha		            PHA
.3a0fcb	a5 12		lda $0812	            LDA SCRATCH2+2
.3a0fcd	48		pha		            PHA
.3a0fce	a5 10		lda $0810	            LDA SCRATCH2
.3a0fd0	48		pha		            PHA
.3a0fd1	20 69 10	jsr $3a1069	            JSR ALLOCFREED
.3a0fd4	b0 03		bcs $3a0fd9	            BCS done            ; Return, if we got something back
.3a0fd6	20 ed 0f	jsr $3a0fed	            JSR ALLOCHEAP
.3a0fd9					done
.3a0fd9	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a0fdc	c2 20		rep #$20	            REP #$20
.3a0fde	68		pla		            PLA
.3a0fdf	85 10		sta $0810	            STA SCRATCH2
.3a0fe1	68		pla		            PLA
.3a0fe2	85 12		sta $0812	            STA SCRATCH2+2
.3a0fe4	68		pla		            PLA
.3a0fe5	85 0c		sta $080c	            STA SCRATCH
.3a0fe7	68		pla		            PLA
.3a0fe8	85 0e		sta $080e	            STA SCRATCH+2
.3a0fea	28		plp		            PLP
.3a0feb	7a		ply		            PLY
.3a0fec	60		rts		            RTS
.3a0fed					ALLOCHEAP
.3a0fed	08		php		            PHP
.3a0fee	0b		phd		            PHD
.3a0fef	08		php		            PHP
.3a0ff0	c2 20		rep #$20	            REP #$20
.3a0ff2	48		pha		            PHA
.3a0ff3	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0ff6	5b		tcd		            TCD
.3a0ff7	68		pla		            PLA
.3a0ff8	28		plp		            PLP
.3a0ff9	e2 20		sep #$20	            SEP #$20
.3a0ffb	a6 8f		ldx $088f	            LDX MCOUNT
.3a0ffd	ca		dex		            DEX
.3a0ffe	86 0c		stx $080c	            STX SCRATCH             ; SCRATCH := size - 1
.3a1000	e8		inx		            INX
.3a1001	c2 30		rep #$30	            REP #$30
.3a1003	38		sec		            SEC
.3a1004	a5 ba		lda $08ba	            LDA HEAP
.3a1006	e5 0c		sbc $080c	            SBC SCRATCH
.3a1008	85 c0		sta $08c0	            STA CURRBLOCK
.3a100a	e2 20		sep #$20	            SEP #$20
.3a100c	a5 bc		lda $08bc	            LDA HEAP+2
.3a100e	e9 00		sbc #$00	            SBC #0
.3a1010	85 c2		sta $08c2	            STA CURRBLOCK+2
.3a1012	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a1015	e2 20		sep #$20	            SEP #$20
.3a1017	a5 ea		lda $08ea	            LDA TOFINDTYPE
.3a1019	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE       ; Set the type of the object
.3a101c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a101e	a9 00		lda #$00	            LDA #0                  ; Set the count to zero
.3a1020	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.3a1023	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1025	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1028	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a102a	c2 20		rep #$20	            REP #$20
.3a102c	a9 00 00	lda #$0000	            LDA #0
.3a102f	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1031	c2 20		rep #$20	            REP #$20
.3a1033	18		clc		            CLC
.3a1034	a5 ba		lda $08ba	            LDA HEAP
.3a1036	69 01 00	adc #$0001	            ADC #1
.3a1039	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; To get the address of the next byte
.3a103c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y      ; after the block
.3a103e	e2 20		sep #$20	            SEP #$20
.3a1040	c8		iny		            INY
.3a1041	c8		iny		            INY
.3a1042	a5 bc		lda $08bc	            LDA HEAP+2
.3a1044	69 00		adc #$00	            ADC #0
.3a1046	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1048	c2 20		rep #$20	            REP #$20
.3a104a	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a104c	85 b7		sta $08b7	            STA ALLOCATED
.3a104e	e2 20		sep #$20	            SEP #$20
.3a1050	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a1052	85 b9		sta $08b9	            STA ALLOCATED+2
.3a1054	c2 20		rep #$20	            REP #$20
.3a1056	38		sec		            SEC                     ; Move the HEAP pointer to the first free byte under the header
.3a1057	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1059	e9 01 00	sbc #$0001	            SBC #1
.3a105c	85 ba		sta $08ba	            STA HEAP
.3a105e	e2 20		sep #$20	            SEP #$20
.3a1060	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1062	e9 00		sbc #$00	            SBC #0
.3a1064	85 bc		sta $08bc	            STA HEAP+2
.3a1066	2b		pld		            PLD
.3a1067	28		plp		            PLP
.3a1068	60		rts		            RTS
.3a1069					ALLOCFREED
.3a1069	08		php		            PHP
.3a106a	0b		phd		            PHD
.3a106b	08		php		            PHP
.3a106c	c2 20		rep #$20	            REP #$20
.3a106e	48		pha		            PHA
.3a106f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1072	5b		tcd		            TCD
.3a1073	68		pla		            PLA
.3a1074	28		plp		            PLP
.3a1075	c2 30		rep #$30	            REP #$30
.3a1077	c2 20		rep #$20	            REP #$20
.3a1079	a5 bd		lda $08bd	            LDA FREED
.3a107b	85 c9		sta $08c9	            STA CURRFREED
.3a107d	e2 20		sep #$20	            SEP #$20
.3a107f	a5 bf		lda $08bf	            LDA FREED+2
.3a1081	85 cb		sta $08cb	            STA CURRFREED+2
.3a1083	a5 c9		lda $08c9	loop        LDA CURRFREED           ; Has anything been freed?
.3a1085	d0 17		bne $3a109e	            BNE has_block           ; Yes: check to see if there's a big enough block
.3a1087	e2 20		sep #$20	            SEP #$20
.3a1089	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a108b	d0 11		bne $3a109e	            BNE has_block           ; Yes: check to see if there's a big enough block
.3a108d	c2 20		rep #$20	            REP #$20
.3a108f	a9 00 00	lda #$0000	            LDA #<>0
.3a1092	85 cf		sta $08cf	            STA LASTFREED
.3a1094	e2 20		sep #$20	            SEP #$20
.3a1096	a9 00		lda #$00	            LDA #`0
.3a1098	85 d1		sta $08d1	            STA LASTFREED+2
.3a109a	2b		pld		ret_false   PLD                     ; Return that we didn't find anything
.3a109b	28		plp		            PLP
.3a109c	18		clc		            CLC
.3a109d	60		rts		            RTS
.3a109e					has_block
.3a109e	c2 20		rep #$20	            REP #$20
.3a10a0	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.3a10a3	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a10a5	85 cc		sta $08cc	            STA FREEDEND
.3a10a7	e2 20		sep #$20	            SEP #$20
.3a10a9	c8		iny		            INY
.3a10aa	c8		iny		            INY
.3a10ab	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a10ad	85 ce		sta $08ce	            STA FREEDEND+2
.3a10af	c2 20		rep #$20	            REP #$20
.3a10b1	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required
.3a10b2	a5 c9		lda $08c9	            LDA CURRFREED
.3a10b4	65 8f		adc $088f	            ADC MCOUNT
.3a10b6	85 0c		sta $080c	            STA SCRATCH
.3a10b8	e2 20		sep #$20	            SEP #$20
.3a10ba	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a10bc	69 00		adc #$00	            ADC #0
.3a10be	85 0e		sta $080e	            STA SCRATCH+2
.3a10c0	c2 20		rep #$20	            REP #$20
.3a10c2	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required + size of header
.3a10c3	a5 0c		lda $080c	            LDA SCRATCH                 ; (that is, it's a pointer to the byte immediately after the block desired)
.3a10c5	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)
.3a10c8	85 0c		sta $080c	            STA SCRATCH
.3a10ca	e2 20		sep #$20	            SEP #$20
.3a10cc	a5 0e		lda $080e	            LDA SCRATCH+2
.3a10ce	69 00		adc #$00	            ADC #0
.3a10d0	85 0e		sta $080e	            STA SCRATCH+2
.3a10d2	c2 20		rep #$20	            REP #$20
.3a10d4	a5 0c		lda $080c	            LDA SCRATCH                 ; Is SCRATCH == FREEDEND?
.3a10d6	c5 cc		cmp $08cc	            CMP FREEDEND
.3a10d8	d0 28		bne $3a1102	            BNE not_exact               ; No: check if this block is bigger than needed
.3a10da	e2 20		sep #$20	            SEP #$20
.3a10dc	a5 0e		lda $080e	            LDA SCRATCH+2
.3a10de	c5 ce		cmp $08ce	            CMP FREEDEND+2
.3a10e0	d0 20		bne $3a1102	            BNE not_exact
.3a10e2	c2 20		rep #$20	            REP #$20
.3a10e4	a5 cf		lda $08cf	            LDA LASTFREED               ; LASTFREED == 0?
.3a10e6	d0 5d		bne $3a1145	            BNE adj_last1               ; No: point LASTFREED->NEXT to skip this block
.3a10e8	e2 20		sep #$20	            SEP #$20
.3a10ea	a5 d1		lda $08d1	            LDA LASTFREED+2
.3a10ec	d0 57		bne $3a1145	            BNE adj_last1
.3a10ee	c2 20		rep #$20	            REP #$20
.3a10f0	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a10f3	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a10f5	85 bd		sta $08bd	            STA FREED
.3a10f7	e2 20		sep #$20	            SEP #$20
.3a10f9	c8		iny		            INY
.3a10fa	c8		iny		            INY
.3a10fb	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a10fd	85 bf		sta $08bf	            STA FREED+2
.3a10ff	4c a6 11	jmp $3a11a6	            JMP init_block              ; And return CURRFREED as our reallocated memory
.3a1102					not_exact
.3a1102	c2 20		rep #$20	            REP #$20
.3a1104	a5 0c		lda $080c	            LDA SCRATCH                 ; Add a buffer to the room needed
.3a1106	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)          ; So we have room to track the memory still freed
.3a1109	85 10		sta $0810	            STA SCRATCH2
.3a110b	e2 20		sep #$20	            SEP #$20
.3a110d	a5 0e		lda $080e	            LDA SCRATCH+2
.3a110f	69 00		adc #$00	            ADC #0
.3a1111	85 12		sta $0812	            STA SCRATCH2+2
.3a1113	e2 20		sep #$20	            SEP #$20
.3a1115	a5 c6		lda $08c6	            LDA CURREND                 ; Is CURREND > SCRATCH2
.3a1117	c5 10		cmp $0810	            CMP SCRATCH2
.3a1119	b0 3e		bcs $3a1159	            BGE has_room                ; Yes: there is room in this block to allocate some memory
.3a111b	90 08		bcc $3a1125	            BLT try_next
.3a111d	c2 20		rep #$20	            REP #$20
.3a111f	a5 c6		lda $08c6	            LDA CURREND
.3a1121	c5 10		cmp $0810	            CMP SCRATCH2
.3a1123	b0 34		bcs $3a1159	            BGE has_room
.3a1125					try_next
.3a1125	c2 20		rep #$20	            REP #$20
.3a1127	a5 c9		lda $08c9	            LDA CURRFREED
.3a1129	85 cf		sta $08cf	            STA LASTFREED
.3a112b	e2 20		sep #$20	            SEP #$20
.3a112d	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a112f	85 d1		sta $08d1	            STA LASTFREED+2
.3a1131	c2 20		rep #$20	            REP #$20
.3a1133	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1136	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.3a1138	85 c9		sta $08c9	            STA CURRFREED
.3a113a	e2 20		sep #$20	            SEP #$20
.3a113c	c8		iny		            INY
.3a113d	c8		iny		            INY
.3a113e	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.3a1140	85 cb		sta $08cb	            STA CURRFREED+2
.3a1142	4c 83 10	jmp $3a1083	            JMP loop                                    ; And try the next header
.3a1145					adj_last1
.3a1145	c2 20		rep #$20	            REP #$20
.3a1147	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := CURRFREED->NEXT
.3a114a	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a114c	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a114e	e2 20		sep #$20	            SEP #$20
.3a1150	c8		iny		            INY
.3a1151	c8		iny		            INY
.3a1152	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1154	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a1156	4c a6 11	jmp $3a11a6	            JMP init_block              ; And get CURRFREED ready to return
.3a1159					has_room
.3a1159	c2 20		rep #$20	            REP #$20
.3a115b	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END            ; SCRATCH->END := CURRFREED->END
.3a115e	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1160	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a1162	e2 20		sep #$20	            SEP #$20
.3a1164	c8		iny		            INY
.3a1165	c8		iny		            INY
.3a1166	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1168	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a116a	c2 20		rep #$20	            REP #$20
.3a116c	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; CURREND->NEXT := CURRFREED->NEXT
.3a116f	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1171	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a1173	e2 20		sep #$20	            SEP #$20
.3a1175	c8		iny		            INY
.3a1176	c8		iny		            INY
.3a1177	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1179	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a117b	c2 20		rep #$20	            REP #$20
.3a117d	a5 cf		lda $08cf	            LDA LASTFREED               ; Is this the first object we've examined?
.3a117f	d0 14		bne $3a1195	            BNE adj_last2               ; No: we'll need to adjust the previously examined block
.3a1181	e2 20		sep #$20	            SEP #$20
.3a1183	a5 cf		lda $08cf	            LDA LASTFREED
.3a1185	d0 0e		bne $3a1195	            BNE adj_last2
.3a1187	c2 20		rep #$20	            REP #$20
.3a1189	a5 0c		lda $080c	            LDA SCRATCH
.3a118b	85 bd		sta $08bd	            STA FREED
.3a118d	e2 20		sep #$20	            SEP #$20
.3a118f	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1191	85 bf		sta $08bf	            STA FREED+2
.3a1193	80 11		bra $3a11a6	            BRA init_block              ; ... and return the block we've sliced off
.3a1195					adj_last2
.3a1195	c2 20		rep #$20	            REP #$20
.3a1197	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := SCRATCH
.3a119a	a5 0c		lda $080c	            LDA SCRATCH                 ; (point the previous freed block to the newly sliced
.3a119c	97 cf		sta [$08cf],y	            STA [LASTFREED],Y           ;  off part of the current block)
.3a119e	e2 20		sep #$20	            SEP #$20
.3a11a0	c8		iny		            INY
.3a11a1	c8		iny		            INY
.3a11a2	a5 0e		lda $080e	            LDA SCRATCH+2
.3a11a4	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a11a6					init_block
.3a11a6	c2 20		rep #$20	            REP #$20
.3a11a8	a5 c9		lda $08c9	            LDA CURRFREED
.3a11aa	85 c3		sta $08c3	            STA CURRHEADER
.3a11ac	e2 20		sep #$20	            SEP #$20
.3a11ae	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a11b0	85 c5		sta $08c5	            STA CURRHEADER+2
.3a11b2	c2 20		rep #$20	            REP #$20
.3a11b4	a5 c3		lda $08c3	            LDA CURRHEADER
.3a11b6	85 b7		sta $08b7	            STA ALLOCATED
.3a11b8	e2 20		sep #$20	            SEP #$20
.3a11ba	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a11bc	85 b9		sta $08b9	            STA ALLOCATED+2
.3a11be	c2 20		rep #$20	            REP #$20
.3a11c0	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; Set CURRHEADER->END to the byte after the block
.3a11c3	a5 0c		lda $080c	            LDA SCRATCH
.3a11c5	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11c7	e2 20		sep #$20	            SEP #$20
.3a11c9	c8		iny		            INY
.3a11ca	c8		iny		            INY
.3a11cb	a5 0e		lda $080e	            LDA SCRATCH+2
.3a11cd	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11cf	c2 20		rep #$20	            REP #$20
.3a11d1	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Set CURRHEADER->NEXT to NULL
.3a11d4	a9 00 00	lda #$0000	            LDA #0
.3a11d7	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11d9	e2 20		sep #$20	            SEP #$20
.3a11db	c8		iny		            INY
.3a11dc	c8		iny		            INY
.3a11dd	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11df	e2 20		sep #$20	            SEP #$20
.3a11e1	a5 ea		lda $08ea	            LDA TOFINDTYPE          ; Get the type code back
.3a11e3	e2 20		sep #$20	            SEP #$20
.3a11e5	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE
.3a11e8	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11ea	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT      ; Set its reference count to 0
.3a11ed	a9 00		lda #$00	            LDA #0
.3a11ef	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11f1	2b		pld		done        PLD
.3a11f2	28		plp		            PLP
.3a11f3	38		sec		            SEC
.3a11f4	60		rts		            RTS
.3a11f5					HEAP_GETHED
.3a11f5	08		php		            PHP
.3a11f6	c2 20		rep #$20	            REP #$20
.3a11f8	38		sec		            SEC
.3a11f9	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a11fb	e9 08 00	sbc #$0008	            SBC #size(HEAPOBJ)
.3a11fe	85 c3		sta $08c3	            STA CURRHEADER
.3a1200	e2 20		sep #$20	            SEP #$20
.3a1202	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a1204	e9 00		sbc #$00	            SBC #0
.3a1206	85 c5		sta $08c5	            STA CURRHEADER+2
.3a1208	28		plp		            PLP
.3a1209	60		rts		            RTS
.3a120a					HEAP_ADDREF
.3a120a	08		php		            PHP
.3a120b	e2 20		sep #$20	            SEP #$20
.3a120d	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a120f	f0 04		beq $3a1215	            BEQ chk_null
.3a1211	c9 38		cmp #$38	            CMP #`(HEAP_TOP + 1)
.3a1213	b0 12		bcs $3a1227	            BGE out_of_bnds
.3a1215					chk_null
.3a1215	c2 20		rep #$20	            REP #$20
.3a1217	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1219	f0 0c		beq $3a1227	            BEQ out_of_bnds
.3a121b					is_ok
.3a121b	e2 20		sep #$20	            SEP #$20
.3a121d	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.3a1220	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1222	1a		inc a		            INC A
.3a1223	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1225	28		plp		            PLP
.3a1226	60		rts		            RTS
.3a1227	00		brk #		out_of_bnds BRK
.3a1228	ea		nop		            NOP
.3a1229					HEAP_REMREF
.3a1229	08		php		            PHP
.3a122a	e2 20		sep #$20	            SEP #$20
.3a122c	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a122e	f0 04		beq $3a1234	            BEQ chk_null
.3a1230	c9 38		cmp #$38	            CMP #`(HEAP_TOP + 1)
.3a1232	b0 17		bcs $3a124b	            BGE out_of_bnds
.3a1234					chk_null
.3a1234	c2 20		rep #$20	            REP #$20
.3a1236	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1238	f0 11		beq $3a124b	            BEQ out_of_bnds
.3a123a	e2 20		sep #$20	            SEP #$20
.3a123c	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT  ; Decrement the reference count
.3a123f	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1241	3a		dec a		            DEC A
.3a1242	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1244	d0 03		bne $3a1249	            BNE done            ; If it's still >0, we are done
.3a1246	20 4d 12	jsr $3a124d	            JSR HEAP_FREE
.3a1249	28		plp		done        PLP
.3a124a	60		rts		            RTS
.3a124b	00		brk #		out_of_bnds BRK
.3a124c	ea		nop		            NOP
.3a124d					HEAP_FREE
.3a124d	08		php		            PHP
.3a124e	c2 20		rep #$20	            REP #$20
.3a1250	a5 bd		lda $08bd	            LDA FREED           ; Check to see if blocks are already on the freed list
.3a1252	d0 21		bne $3a1275	            BNE has_objects
.3a1254	e2 20		sep #$20	            SEP #$20
.3a1256	a5 bf		lda $08bf	            LDA FREED+2
.3a1258	d0 1b		bne $3a1275	            BNE has_objects
.3a125a	a5 c5		lda $08c5	            LDA CURRHEADER+2    ; No: this block is the first one
.3a125c	85 bf		sta $08bf	            STA FREED+2         ; Just make it the freed list
.3a125e	c2 20		rep #$20	            REP #$20
.3a1260	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1262	85 bd		sta $08bd	            STA FREED
.3a1264	a9 00 00	lda #$0000	            LDA #0
.3a1267	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT   ; And clear its next link
.3a126a	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a126c	c8		iny		            INY
.3a126d	c8		iny		            INY
.3a126e	e2 20		sep #$20	            SEP #$20
.3a1270	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1272	4c 34 13	jmp $3a1334	            JMP done
.3a1275					has_objects
.3a1275	e2 20		sep #$20	            SEP #$20
.3a1277	a5 bf		lda $08bf	            LDA FREED+2
.3a1279	c5 c5		cmp $08c5	            CMP CURRHEADER+2
.3a127b	90 28		bcc $3a12a5	            BLT start_scan
.3a127d	c2 20		rep #$20	            REP #$20
.3a127f	a5 bd		lda $08bd	            LDA FREED
.3a1281	c5 c3		cmp $08c3	            CMP CURRHEADER
.3a1283	90 20		bcc $3a12a5	            BLT start_scan
.3a1285					ins_first
.3a1285	c2 20		rep #$20	            REP #$20
.3a1287	a5 bd		lda $08bd	            LDA FREED               ; CURRHEADER->NEXT := FREED
.3a1289	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a128c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a128e	e2 20		sep #$20	            SEP #$20
.3a1290	c8		iny		            INY
.3a1291	c8		iny		            INY
.3a1292	a5 bf		lda $08bf	            LDA FREED+2
.3a1294	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1296	c2 20		rep #$20	            REP #$20
.3a1298	a5 c3		lda $08c3	            LDA CURRHEADER
.3a129a	85 bd		sta $08bd	            STA FREED
.3a129c	e2 20		sep #$20	            SEP #$20
.3a129e	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a12a0	85 bf		sta $08bf	            STA FREED+2
.3a12a2	4c 34 13	jmp $3a1334	            JMP done
.3a12a5					start_scan
.3a12a5	c2 20		rep #$20	            REP #$20
.3a12a7	a5 bd		lda $08bd	            LDA FREED
.3a12a9	85 08		sta $0808	            STA INDEX
.3a12ab	e2 20		sep #$20	            SEP #$20
.3a12ad	a5 bf		lda $08bf	            LDA FREED+2
.3a12af	85 0a		sta $080a	            STA INDEX+2
.3a12b1					loop
.3a12b1	e2 20		sep #$20	            SEP #$20
.3a12b3	a0 04 00	ldy #$0004	            LDY #HEAPOBJ.NEXT+2
.3a12b6	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12b8	c5 c8		cmp $08c8	            CMP CURREND+2
.3a12ba	90 32		bcc $3a12ee	            BLT go_next             ; No: check the next spot
.3a12bc	d0 0b		bne $3a12c9	            BNE ins_next
.3a12be	c2 20		rep #$20	            REP #$20
.3a12c0	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a12c3	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12c5	c5 c6		cmp $08c6	            CMP CURREND
.3a12c7	90 25		bcc $3a12ee	            BLT go_next             ; No: check the next spot
.3a12c9					ins_next
.3a12c9	c2 20		rep #$20	            REP #$20
.3a12cb	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := INDEX->NEXT
.3a12ce	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12d0	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12d2	e2 20		sep #$20	            SEP #$20
.3a12d4	c8		iny		            INY
.3a12d5	c8		iny		            INY
.3a12d6	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12d8	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12da	c2 20		rep #$20	            REP #$20
.3a12dc	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.3a12de	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a12e1	97 08		sta [$0808],y	            STA [INDEX],Y
.3a12e3	e2 20		sep #$20	            SEP #$20
.3a12e5	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a12e7	c8		iny		            INY
.3a12e8	c8		iny		            INY
.3a12e9	97 08		sta [$0808],y	            STA [INDEX],Y
.3a12eb	4c 34 13	jmp $3a1334	            JMP done
.3a12ee					go_next
.3a12ee	c2 20		rep #$20	            REP #$20
.3a12f0	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Is INDEX->NEXT = 0
.3a12f3	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12f5	d0 08		bne $3a12ff	            BNE not_at_end          ; No: load up the next object
.3a12f7	e2 20		sep #$20	            SEP #$20
.3a12f9	c8		iny		            INY
.3a12fa	c8		iny		            INY
.3a12fb	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12fd	f0 19		beq $3a1318	            BEQ at_end
.3a12ff					not_at_end
.3a12ff	c2 20		rep #$20	            REP #$20
.3a1301	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; INDEX := INDEX->NEXT
.3a1304	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1306	85 0c		sta $080c	            STA SCRATCH
.3a1308	e2 20		sep #$20	            SEP #$20
.3a130a	c8		iny		            INY
.3a130b	c8		iny		            INY
.3a130c	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a130e	85 0a		sta $080a	            STA INDEX+2
.3a1310	c2 20		rep #$20	            REP #$20
.3a1312	a5 0c		lda $080c	            LDA SCRATCH
.3a1314	85 08		sta $0808	            STA INDEX
.3a1316	80 99		bra $3a12b1	            BRA loop
.3a1318					at_end
.3a1318	c2 20		rep #$20	            REP #$20
.3a131a	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.3a131c	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a131f	97 08		sta [$0808],y	            STA [INDEX],Y
.3a1321	e2 20		sep #$20	            SEP #$20
.3a1323	c8		iny		            INY
.3a1324	c8		iny		            INY
.3a1325	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1327	97 08		sta [$0808],y	            STA [INDEX],Y
.3a1329	a9 00		lda #$00	            LDA #0                  ; CURRHEADER->NEXT := 0
.3a132b	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a132d	c2 20		rep #$20	            REP #$20
.3a132f	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1332	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1334					done
.3a1334	20 39 13	jsr $3a1339	            JSR COALLESCE
.3a1337	28		plp		            PLP
.3a1338	60		rts		            RTS
.3a1339					COALLESCE
.3a1339	08		php		            PHP
.3a133a	c2 20		rep #$20	            REP #$20
.3a133c	a5 bd		lda $08bd	            LDA FREED
.3a133e	85 c3		sta $08c3	            STA CURRHEADER
.3a1340	e2 20		sep #$20	            SEP #$20
.3a1342	a5 bf		lda $08bf	            LDA FREED+2
.3a1344	85 c5		sta $08c5	            STA CURRHEADER+2
.3a1346					next_head
.3a1346	c2 20		rep #$20	            REP #$20
.3a1348	a5 c3		lda $08c3	            LDA CURRHEADER          ; Is CURRHEADER == 0?
.3a134a	d0 09		bne $3a1355	            BNE check_next          ; No: check if NEXT is contiguous
.3a134c	e2 20		sep #$20	            SEP #$20
.3a134e	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1350	d0 03		bne $3a1355	            BNE check_next
.3a1352	4c dc 13	jmp $3a13dc	            JMP done                ; Yes: we're done
.3a1355					check_next
.3a1355	c2 20		rep #$20	            REP #$20
.3a1357	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a135a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a135c	85 0c		sta $080c	            STA SCRATCH
.3a135e	e2 20		sep #$20	            SEP #$20
.3a1360	c8		iny		            INY
.3a1361	c8		iny		            INY
.3a1362	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1364	85 0e		sta $080e	            STA SCRATCH+2
.3a1366	c2 20		rep #$20	            REP #$20
.3a1368	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.3a136b	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a136d	85 10		sta $0810	            STA SCRATCH2
.3a136f	e2 20		sep #$20	            SEP #$20
.3a1371	c8		iny		            INY
.3a1372	c8		iny		            INY
.3a1373	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1375	85 12		sta $0812	            STA SCRATCH2+2
.3a1377	c2 20		rep #$20	            REP #$20
.3a1379	a5 0c		lda $080c	            LDA SCRATCH
.3a137b	c5 10		cmp $0810	            CMP SCRATCH2            ; Is CURRHEADER->END = CURRHEADER->NEXT?
.3a137d	d0 08		bne $3a1387	            BNE go_next             ; No: go to the next block
.3a137f	e2 20		sep #$20	            SEP #$20
.3a1381	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1383	c5 12		cmp $0812	            CMP SCRATCH2+2
.3a1385	f0 1f		beq $3a13a6	            BEQ combine             ; Yes: combine the two blocks
.3a1387					go_next
.3a1387	c2 20		rep #$20	            REP #$20
.3a1389	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a138c	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a138e	85 0c		sta $080c	            STA SCRATCH
.3a1390	e2 20		sep #$20	            SEP #$20
.3a1392	c8		iny		            INY
.3a1393	c8		iny		            INY
.3a1394	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1396	85 0e		sta $080e	            STA SCRATCH+2
.3a1398	c2 20		rep #$20	            REP #$20
.3a139a	a5 0c		lda $080c	            LDA SCRATCH
.3a139c	85 c3		sta $08c3	            STA CURRHEADER
.3a139e	e2 20		sep #$20	            SEP #$20
.3a13a0	a5 0e		lda $080e	            LDA SCRATCH+2
.3a13a2	85 c5		sta $08c5	            STA CURRHEADER+2
.3a13a4	80 a0		bra $3a1346	            BRA next_head                               ; And loop back to next_head
.3a13a6					combine
.3a13a6	c2 20		rep #$20	            REP #$20
.3a13a8	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a13ab	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a13ad	85 0c		sta $080c	            STA SCRATCH
.3a13af	e2 20		sep #$20	            SEP #$20
.3a13b1	c8		iny		            INY
.3a13b2	c8		iny		            INY
.3a13b3	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a13b5	85 0e		sta $080e	            STA SCRATCH+2
.3a13b7	c2 20		rep #$20	            REP #$20
.3a13b9	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := SCRATCH->NEXT
.3a13bc	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a13be	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13c0	e2 20		sep #$20	            SEP #$20
.3a13c2	c8		iny		            INY
.3a13c3	c8		iny		            INY
.3a13c4	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a13c6	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13c8	c2 20		rep #$20	            REP #$20
.3a13ca	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END       ; CURRHEADER->END := SCRATCH->END
.3a13cd	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a13cf	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13d1	e2 20		sep #$20	            SEP #$20
.3a13d3	c8		iny		            INY
.3a13d4	c8		iny		            INY
.3a13d5	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a13d7	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13d9	4c 55 13	jmp $3a1355	            JMP check_next          ; And loop back to check_next
.3a13dc	28		plp		done        PLP
.3a13dd	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\strings.s

.3a13de					CLRTMPSTR
.3a13de	08		php		            PHP
.3a13df	c2 20		rep #$20	            REP #$20
.3a13e1	64 16		stz $0816	            STZ STRPTR
.3a13e3	64 18		stz $0818	            STZ STRPTR+2
.3a13e5	28		plp		            PLP
.3a13e6	60		rts		            RTS
.3a13e7					TEMPSTRING
.3a13e7	08		php		            PHP
.3a13e8	c2 30		rep #$30	            REP #$30
.3a13ea	a5 16		lda $0816	            LDA STRPTR          ; Is STRPTR == 0?
.3a13ec	d0 16		bne $3a1404	            BNE add_256         ; No: add 256 to it
.3a13ee	a5 18		lda $0818	            LDA STRPTR+2
.3a13f0	d0 12		bne $3a1404	            BNE add_256
.3a13f2	e2 20		sep #$20	            SEP #$20
.3a13f4	64 16		stz $0816	            STZ STRPTR
.3a13f6	a5 e2		lda $08e2	            LDA NEXTVAR+1
.3a13f8	1a		inc a		            INC A
.3a13f9	1a		inc a		            INC A
.3a13fa	85 17		sta $0817	            STA STRPTR+1
.3a13fc	a5 e3		lda $08e3	            LDA NEXTVAR+2
.3a13fe	85 18		sta $0818	            STA STRPTR+2
.3a1400	64 19		stz $0819	            STZ STRPTR+3
.3a1402	80 07		bra $3a140b	            BRA chk_room
.3a1404					add_256
.3a1404	c2 20		rep #$20	            REP #$20
.3a1406	a5 17		lda $0817	            LDA STRPTR+1        ; There was already a temporary string...
.3a1408	1a		inc a		            INC A               ; Leave 256 bytes for it
.3a1409	85 17		sta $0817	            STA STRPTR+1
.3a140b					chk_room
.3a140b	c2 20		rep #$20	            REP #$20
.3a140d	a5 bb		lda $08bb	            LDA HEAP+1          ; Check to make sure that STRPTR and HEAP haven't touched
.3a140f	3a		dec a		            DEC A
.3a1410	c5 17		cmp $0817	            CMP STRPTR+1
.3a1412	f0 02		beq $3a1416	            BEQ no_room         ; If they have, throw an error
.3a1414	b0 1f		bcs $3a1435	            BGE done
.3a1416					no_room
.3a1416	08		php		            PHP
.3a1417	c2 20		rep #$20	            REP #$20
.3a1419	48		pha		            PHA
.3a141a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a141d	5b		tcd		            TCD
.3a141e	68		pla		            PLA
.3a141f	28		plp		            PLP
.3a1420	e2 20		sep #$20	            SEP #$20
.3a1422	a9 03		lda #$03	            LDA #ERR_MEMORY
.3a1424	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1428	c2 20		rep #$20	            REP #$20
.3a142a	29 ff 00	and #$00ff	            AND #$00FF
.3a142d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a1430	e2 20		sep #$20	            SEP #$20
.3a1432	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1435	28		plp		done        PLP
.3a1436	60		rts		            RTS
.3a1437					ITOS_DIGIT
.3a1437	c9 00		cmp #$00	            CMP #0          ; Is it 0?
.3a1439	d0 05		bne $3a1440	            BNE add_digit   ; No: go ahead and add it
.3a143b	c0 01 00	cpy #$0001	            CPY #1          ; Are we on the first digit?
.3a143e	f0 05		beq $3a1445	            BEQ done        ; Yes: ignore this leading 0
.3a1440	09 30		ora #$30	add_digit   ORA #$30        ; Convert it to ASCII
.3a1442	97 16		sta [$0816],y	            STA [STRPTR],Y  ; Save it to the string
.3a1444	c8		iny		            INY             ; And point to the next location
.3a1445					done
.3a1445	60		rts		            RTS
.3a1446					ITOS
.3a1446	08		php		            PHP
.3a1447	c2 30		rep #$30	            REP #$30
.3a1449	64 0c		stz $080c	            STZ SCRATCH         ; Use scratch to store if negative
.3a144b	a5 25		lda $0825	            LDA ARGUMENT1+2     ; Check to see if the number is negative
.3a144d	10 1a		bpl $3a1469	            BPL start_cnvt
.3a144f	18		clc		            CLC                 ; Yes: make ARGUMENT1 positive
.3a1450	a5 23		lda $0823	            LDA ARGUMENT1
.3a1452	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a1455	69 01 00	adc #$0001	            ADC #1
.3a1458	85 23		sta $0823	            STA ARGUMENT1
.3a145a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a145c	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a145f	69 00 00	adc #$0000	            ADC #0
.3a1462	85 25		sta $0825	            STA ARGUMENT1+2
.3a1464	a9 ff ff	lda #$ffff	            LDA #$FFFF          ; Record that the number was negative
.3a1467	85 0c		sta $080c	            STA SCRATCH
.3a1469					start_cnvt
.3a1469	64 10		stz $0810	            STZ SCRATCH2        ; SCRATCH2 will be our BCD version of the number
.3a146b	64 12		stz $0812	            STZ SCRATCH2+2
.3a146d	64 14		stz $0814	            STZ SCRATCH2+4
.3a146f	a2 1f 00	ldx #$001f	            LDX #31
.3a1472	f8		sed		            SED                 ; Yes, we're really using BCD mode
.3a1473	06 23		asl $0823	shift_loop  ASL ARGUMENT1       ; Shift ARGUMENT1 left one bit
.3a1475	26 25		rol $0825	            ROL ARGUMENT1+2
.3a1477	a5 10		lda $0810	            LDA SCRATCH2        ; SCRATCH2 := SCRATCH2 + SCRATCH2 + Carry
.3a1479	65 10		adc $0810	            ADC SCRATCH2
.3a147b	85 10		sta $0810	            STA SCRATCH2
.3a147d	a5 12		lda $0812	            LDA SCRATCH2+2
.3a147f	65 12		adc $0812	            ADC SCRATCH2+2
.3a1481	85 12		sta $0812	            STA SCRATCH2+2
.3a1483	a5 14		lda $0814	            LDA SCRATCH2+4
.3a1485	65 14		adc $0814	            ADC SCRATCH2+4
.3a1487	85 14		sta $0814	            STA SCRATCH2+4
.3a1489	ca		dex		            DEX
.3a148a	10 e7		bpl $3a1473	            BPL shift_loop      ; Loop through all 32 bits of ARGUMENT1
.3a148c	d8		cld		            CLD                 ; Switch back out of BCD mode
.3a148d	e2 20		sep #$20	            SEP #$20
.3a148f	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a1492	a0 00 00	ldy #$0000	            LDY #0              ; Y will be index into the temporary string
.3a1495	a5 0c		lda $080c	            LDA SCRATCH         ; Check to see if the number was negative
.3a1497	f0 04		beq $3a149d	            BEQ is_pos          ; No: write a leading space
.3a1499	a9 2d		lda #$2d	            LDA #'-'            ; If negative, write the minus sign
.3a149b	80 02		bra $3a149f	            BRA wr_lead
.3a149d	a9 20		lda #$20	is_pos      LDA #CHAR_SP        ; Write a leading space
.3a149f	97 16		sta [$0816],y	wr_lead     STA [STRPTR],Y
.3a14a1	c8		iny		            INY
.3a14a2	a2 05 00	ldx #$0005	            LDX #5
.3a14a5	b5 10		lda $0810,x	ascii_loop  LDA SCRATCH2,X
.3a14a7	29 f0		and #$f0	            AND #$F0
.3a14a9	4a		lsr a		            LSR A
.3a14aa	4a		lsr a		            LSR A
.3a14ab	4a		lsr a		            LSR A
.3a14ac	4a		lsr a		            LSR A
.3a14ad	20 37 14	jsr $3a1437	            JSR ITOS_DIGIT
.3a14b0	b5 10		lda $0810,x	            LDA SCRATCH2,X
.3a14b2	29 0f		and #$0f	            AND #$0F
.3a14b4	20 37 14	jsr $3a1437	            JSR ITOS_DIGIT
.3a14b7	ca		dex		            DEX
.3a14b8	10 eb		bpl $3a14a5	            BPL ascii_loop
.3a14ba	c0 01 00	cpy #$0001	            CPY #1              ; Did we write anything?
.3a14bd	d0 0c		bne $3a14cb	            BNE null_term       ; Yes: add a NULL to terminate
.3a14bf	a9 20		lda #$20	            LDA #' '            ; No: write a " 0" to the string
.3a14c1	87 16		sta [$0816]	            STA [STRPTR]
.3a14c3	a0 01 00	ldy #$0001	            LDY #1
.3a14c6	a9 30		lda #$30	            LDA #'0'
.3a14c8	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a14ca	c8		iny		            INY
.3a14cb	a9 00		lda #$00	null_term   LDA #0
.3a14cd	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And terminate the string
.3a14cf	28		plp		done        PLP
.3a14d0	60		rts		            RTS
.3a14d1	00		brk #		fault       BRK
.3a14d2	ea		nop		            NOP
.3a14d3					STRLEN
.3a14d3	08		php		            PHP
.3a14d4	e2 20		sep #$20	            SEP #$20
.3a14d6	c2 10		rep #$10	            REP #$10
.3a14d8	a0 00 00	ldy #$0000	            LDY #0
.3a14db	bd 00 00	lda $3a0000,x	loop        LDA #0,B,X
.3a14de	f0 04		beq $3a14e4	            BEQ done
.3a14e0	e8		inx		            INX
.3a14e1	c8		iny		            INY
.3a14e2	80 f7		bra $3a14db	            BRA loop
.3a14e4	28		plp		done        PLP
.3a14e5	60		rts		            RTS
.3a14e6					STRCMP
.3a14e6	08		php		            PHP
.3a14e7	0b		phd		            PHD
.3a14e8	08		php		            PHP
.3a14e9	c2 20		rep #$20	            REP #$20
.3a14eb	48		pha		            PHA
.3a14ec	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a14ef	5b		tcd		            TCD
.3a14f0	68		pla		            PLA
.3a14f1	28		plp		            PLP
.3a14f2	e2 20		sep #$20	            SEP #$20
.3a14f4	c2 10		rep #$10	            REP #$10
.3a14f6	a0 00 00	ldy #$0000	            LDY #0
.3a14f9	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Check if the character 1 is 0
.3a14fb	d0 04		bne $3a1501	            BNE comp_mag            ; If not, check the magnitudes
.3a14fd	b7 29		lda [$0829],y	            LDA [ARGUMENT2],Y       ; If so, check if the character 2 is 0
.3a14ff	f0 25		beq $3a1526	            BEQ are_equal           ; If so, the strings are equal
.3a1501	b7 23		lda [$0823],y	comp_mag    LDA [ARGUMENT1],Y       ; Otherwise, get character 1 again
.3a1503	d7 29		cmp [$0829],y	            CMP [ARGUMENT2],Y       ; And compare it to character 2
.3a1505	90 12		bcc $3a1519	            BLT is_less             ; Check if character 1 < character 2
.3a1507	d0 03		bne $3a150c	            BNE is_greater          ; Check if character 1 > character 2
.3a1509	c8		iny		            INY                     ; Equal so far... so go to the next pair of characters
.3a150a	80 ed		bra $3a14f9	            BRA loop
.3a150c					is_greater
.3a150c	c2 20		rep #$20	            REP #$20
.3a150e	a9 01 00	lda #$0001	            LDA #1                  ; So return 1
.3a1511	85 23		sta $0823	            STA ARGUMENT1
.3a1513	e2 20		sep #$20	            SEP #$20
.3a1515	64 25		stz $0825	            STZ ARGUMENT1+2
.3a1517	80 15		bra $3a152e	            BRA done
.3a1519					is_less
.3a1519	c2 20		rep #$20	            REP #$20
.3a151b	a9 ff ff	lda #$ffff	            LDA #$FFFF              ; So return -1
.3a151e	85 23		sta $0823	            STA ARGUMENT1
.3a1520	e2 20		sep #$20	            SEP #$20
.3a1522	85 25		sta $0825	            STA ARGUMENT1+2
.3a1524	80 08		bra $3a152e	            BRA done
.3a1526					are_equal
.3a1526	c2 20		rep #$20	            REP #$20
.3a1528	64 23		stz $0823	            STZ ARGUMENT1           ; So return 0
.3a152a	e2 20		sep #$20	            SEP #$20
.3a152c	64 25		stz $0825	            STZ ARGUMENT1+2
.3a152e					done
.3a152e	e2 20		sep #$20	            SEP #$20
.3a1530	a9 00		lda #$00	            LDA #TYPE_INTEGER
.3a1532	85 27		sta $0827	            STA ARGTYPE1
.3a1534	2b		pld		            PLD
.3a1535	28		plp		            PLP
.3a1536	60		rts		            RTS
.3a1537					STRCONCAT
.3a1537	08		php		            PHP
.3a1538	0b		phd		            PHD
.3a1539	8b		phb		            PHB
.3a153a	08		php		            PHP
.3a153b	c2 20		rep #$20	            REP #$20
.3a153d	48		pha		            PHA
.3a153e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1541	5b		tcd		            TCD
.3a1542	68		pla		            PLA
.3a1543	28		plp		            PLP
.3a1544	e2 20		sep #$20	            SEP #$20
.3a1546	c2 10		rep #$10	            REP #$10
.3a1548	08		php		            PHP
.3a1549	c2 20		rep #$20	            REP #$20
.3a154b	48		pha		            PHA
.3a154c	e2 20		sep #$20	            SEP #$20
.3a154e	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1550	48		pha		            PHA
.3a1551	ab		plb		            PLB
.3a1552	c2 20		rep #$20	            REP #$20
.3a1554	68		pla		            PLA
.3a1555	28		plp		            PLP
.3a1556	a6 23		ldx $0823	            LDX ARGUMENT1
.3a1558	20 d3 14	jsr $3a14d3	            JSR STRLEN
.3a155b	84 0c		sty $080c	            STY SCRATCH
.3a155d	08		php		            PHP
.3a155e	c2 20		rep #$20	            REP #$20
.3a1560	48		pha		            PHA
.3a1561	e2 20		sep #$20	            SEP #$20
.3a1563	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a1565	48		pha		            PHA
.3a1566	ab		plb		            PLB
.3a1567	c2 20		rep #$20	            REP #$20
.3a1569	68		pla		            PLA
.3a156a	28		plp		            PLP
.3a156b	a6 29		ldx $0829	            LDX ARGUMENT2
.3a156d	20 d3 14	jsr $3a14d3	            JSR STRLEN
.3a1570	c2 20		rep #$20	            REP #$20
.3a1572	98		tya		            TYA
.3a1573	38		sec		            SEC                     ; X := LEN(ARGUMENT1) + LEN(ARGUMENT2) + 1
.3a1574	65 0c		adc $080c	            ADC SCRATCH
.3a1576	aa		tax		            TAX
.3a1577	e2 20		sep #$20	            SEP #$20
.3a1579	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set type to STRING
.3a157b	20 b9 0f	jsr $3a0fb9	            JSR ALLOC
.3a157e	c2 20		rep #$20	            REP #$20
.3a1580	a5 b7		lda $08b7	            LDA ALLOCATED           ; INDEX := pointer to the string
.3a1582	85 08		sta $0808	            STA INDEX
.3a1584	e2 20		sep #$20	            SEP #$20
.3a1586	a5 b9		lda $08b9	            LDA ALLOCATED+2
.3a1588	85 0a		sta $080a	            STA INDEX+2
.3a158a	a0 00 00	ldy #$0000	            LDY #0                  ; Set the target index to the beginning
.3a158d	08		php		            PHP
.3a158e	c2 20		rep #$20	            REP #$20
.3a1590	48		pha		            PHA
.3a1591	e2 20		sep #$20	            SEP #$20
.3a1593	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1595	48		pha		            PHA
.3a1596	ab		plb		            PLB
.3a1597	c2 20		rep #$20	            REP #$20
.3a1599	68		pla		            PLA
.3a159a	28		plp		            PLP
.3a159b	a6 23		ldx $0823	            LDX ARGUMENT1
.3a159d	bd 00 00	lda $3a0000,x	loop1       LDA #0,B,X              ; Get the Xth byte of ARGUMENT1
.3a15a0	f0 06		beq $3a15a8	            BEQ copy_2              ; Is it null? Yes: move on to the next string
.3a15a2	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.3a15a4	e8		inx		            INX                     ; Point to the next characters
.3a15a5	c8		iny		            INY
.3a15a6	80 f5		bra $3a159d	            BRA loop1               ; And do again
.3a15a8					copy_2
.3a15a8	e2 20		sep #$20	            SEP #$20
.3a15aa	08		php		            PHP
.3a15ab	c2 20		rep #$20	            REP #$20
.3a15ad	48		pha		            PHA
.3a15ae	e2 20		sep #$20	            SEP #$20
.3a15b0	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a15b2	48		pha		            PHA
.3a15b3	ab		plb		            PLB
.3a15b4	c2 20		rep #$20	            REP #$20
.3a15b6	68		pla		            PLA
.3a15b7	28		plp		            PLP
.3a15b8	a6 29		ldx $0829	            LDX ARGUMENT2
.3a15ba	bd 00 00	lda $3a0000,x	loop2       LDA #0,B,X              ; Get the Xth byte of ARGUMENT2
.3a15bd	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.3a15bf	f0 04		beq $3a15c5	            BEQ terminate           ; Is it null? Yes: move on to the next string
.3a15c1	e8		inx		            INX                     ; Point to the next characters
.3a15c2	c8		iny		            INY
.3a15c3	80 f5		bra $3a15ba	            BRA loop2               ; And do again
.3a15c5					terminate
.3a15c5	c2 20		rep #$20	            REP #$20
.3a15c7	a5 08		lda $0808	            LDA INDEX               ; Set ARGUMENT1 to the new string
.3a15c9	85 23		sta $0823	            STA ARGUMENT1
.3a15cb	e2 20		sep #$20	            SEP #$20
.3a15cd	a5 0a		lda $080a	            LDA INDEX+2
.3a15cf	85 25		sta $0825	            STA ARGUMENT1+2
.3a15d1	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set ARGUMENT1's type to STRING
.3a15d3	85 27		sta $0827	            STA ARGTYPE1
.3a15d5	ab		plb		            PLB
.3a15d6	2b		pld		            PLD
.3a15d7	28		plp		            PLP
.3a15d8	60		rts		            RTS
.3a15d9					STRCPY
.3a15d9	da		phx		            PHX
.3a15da	5a		phy		            PHY
.3a15db	08		php		            PHP
.3a15dc	0b		phd		            PHD
.3a15dd	8b		phb		            PHB
.3a15de	08		php		            PHP
.3a15df	c2 20		rep #$20	            REP #$20
.3a15e1	48		pha		            PHA
.3a15e2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a15e5	5b		tcd		            TCD
.3a15e6	68		pla		            PLA
.3a15e7	28		plp		            PLP
.3a15e8	c2 20		rep #$20	            REP #$20
.3a15ea	a5 0a		lda $080a	            LDA INDEX+2
.3a15ec	48		pha		            PHA
.3a15ed	a5 08		lda $0808	            LDA INDEX
.3a15ef	48		pha		            PHA
.3a15f0	c2 30		rep #$30	            REP #$30
.3a15f2	08		php		            PHP
.3a15f3	c2 20		rep #$20	            REP #$20
.3a15f5	48		pha		            PHA
.3a15f6	e2 20		sep #$20	            SEP #$20
.3a15f8	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a15fa	48		pha		            PHA
.3a15fb	ab		plb		            PLB
.3a15fc	c2 20		rep #$20	            REP #$20
.3a15fe	68		pla		            PLA
.3a15ff	28		plp		            PLP
.3a1600	a6 23		ldx $0823	            LDX ARGUMENT1
.3a1602	20 d3 14	jsr $3a14d3	            JSR STRLEN
.3a1605	98		tya		            TYA
.3a1606	aa		tax		            TAX
.3a1607	e8		inx		            INX                     ; Put length of string (plus NUL) in X
.3a1608	e2 20		sep #$20	            SEP #$20
.3a160a	a9 02		lda #$02	            LDA #TYPE_STRING
.3a160c	20 b9 0f	jsr $3a0fb9	            JSR ALLOC
.3a160f	c2 20		rep #$20	            REP #$20
.3a1611	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a1613	85 08		sta $0808	            STA INDEX
.3a1615	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a1617	85 0a		sta $080a	            STA INDEX+2
.3a1619	a0 00 00	ldy #$0000	            LDY #0
.3a161c	e2 20		sep #$20	            SEP #$20
.3a161e	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Copy the data to the allocated string
.3a1620	97 08		sta [$0808],y	            STA [INDEX],Y
.3a1622	f0 03		beq $3a1627	            BEQ ret_copy
.3a1624	c8		iny		            INY
.3a1625	80 f7		bra $3a161e	            BRA loop
.3a1627					ret_copy
.3a1627	c2 20		rep #$20	            REP #$20
.3a1629	a5 08		lda $0808	            LDA INDEX
.3a162b	85 23		sta $0823	            STA ARGUMENT1
.3a162d	a5 0a		lda $080a	            LDA INDEX+2
.3a162f	85 25		sta $0825	            STA ARGUMENT1+2
.3a1631	c2 20		rep #$20	            REP #$20
.3a1633	68		pla		            PLA
.3a1634	85 08		sta $0808	            STA INDEX
.3a1636	68		pla		            PLA
.3a1637	85 0a		sta $080a	            STA INDEX+2
.3a1639	ab		plb		            PLB
.3a163a	2b		pld		            PLD
.3a163b	28		plp		            PLP
.3a163c	7a		ply		            PLY
.3a163d	fa		plx		            PLX
.3a163e	60		rts		            RTS
.3a163f					STRSUBSTR
.3a163f	08		php		            PHP
.3a1640	e2 20		sep #$20	            SEP #$20
.3a1642	c2 10		rep #$10	            REP #$10
.3a1644	a0 00 00	ldy #$0000	            LDY #0
.3a1647	b7 23		lda [$0823],y	count_loop  LDA [ARGUMENT1],Y
.3a1649	f0 05		beq $3a1650	            BEQ counted
.3a164b	c8		iny		            INY
.3a164c	80 f9		bra $3a1647	            BRA count_loop
.3a164e	84 92		sty $0892	            STY MTEMP               ; MTEMP := length of the source string
.3a1650					counted
.3a1650	c2 30		rep #$30	            REP #$30
.3a1652	c4 29		cpy $0829	            CPY ARGUMENT2           ; length of string <= index?
.3a1654	90 13		bcc $3a1669	            BLT ret_empty           ; Yes: return empty string
.3a1656	f0 11		beq $3a1669	            BEQ ret_empty
.3a1658	a5 8f		lda $088f	            LDA MCOUNT              ; Is the desired count <= 0?
.3a165a	30 0d		bmi $3a1669	            BMI ret_empty
.3a165c	f0 0b		beq $3a1669	            BEQ ret_empty           ; Yes: return the empty string
.3a165e	c4 8f		cpy $088f	            CPY MCOUNT              ; Is the desired length < the length of the source?
.3a1660	b0 12		bcs $3a1674	            BGE do_slice            ; Yes: go ahead and get the substring
.3a1662	a5 29		lda $0829	            LDA ARGUMENT2           ; Is INDEX == 0?
.3a1664	d0 0e		bne $3a1674	            BNE do_slice            ; No: do a slice
.3a1666	4c bd 16	jmp $3a16bd	            JMP done                ; Yes: just return the source string
.3a1669					ret_empty
.3a1669	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a166c	e2 20		sep #$20	            SEP #$20
.3a166e	a9 00		lda #$00	            LDA #0
.3a1670	87 16		sta [$0816]	            STA [STRPTR]
.3a1672	80 39		bra $3a16ad	            BRA finish_copy
.3a1674					do_slice
.3a1674	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a1677	c2 30		rep #$30	            REP #$30
.3a1679	18		clc		            CLC                     ; ARGUMENT1 := ARGUMENT1 + index
.3a167a	a5 23		lda $0823	            LDA ARGUMENT1
.3a167c	65 29		adc $0829	            ADC ARGUMENT2
.3a167e	85 23		sta $0823	            STA ARGUMENT1
.3a1680	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1682	69 00 00	adc #$0000	            ADC #0
.3a1685	85 25		sta $0825	            STA ARGUMENT1+2
.3a1687	a0 00 00	ldy #$0000	            LDY #0
.3a168a					copy_loop
.3a168a	e2 20		sep #$20	            SEP #$20
.3a168c	a7 23		lda [$0823]	            LDA [ARGUMENT1]         ; Copy a character from the substring to the temporary string
.3a168e	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a1690	f0 1b		beq $3a16ad	            BEQ finish_copy         ; If it is a NULL, we're done
.3a1692	c2 20		rep #$20	            REP #$20
.3a1694	18		clc		            CLC                     ; Move to the next character
.3a1695	a5 23		lda $0823	            LDA ARGUMENT1
.3a1697	69 01 00	adc #$0001	            ADC #1
.3a169a	85 23		sta $0823	            STA ARGUMENT1
.3a169c	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a169e	69 00 00	adc #$0000	            ADC #0
.3a16a1	85 25		sta $0825	            STA ARGUMENT1+2
.3a16a3	c8		iny		            INY
.3a16a4	c4 8f		cpy $088f	            CPY MCOUNT              ; Have we reached the limit to copy?
.3a16a6	d0 e2		bne $3a168a	            BNE copy_loop           ; No: copy the next byte
.3a16a8	a9 00 00	lda #$0000	            LDA #0                  ; Null terminate string
.3a16ab	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a16ad					finish_copy
.3a16ad	c2 20		rep #$20	            REP #$20
.3a16af	a5 16		lda $0816	            LDA STRPTR
.3a16b1	85 23		sta $0823	            STA ARGUMENT1
.3a16b3	a5 18		lda $0818	            LDA STRPTR+2
.3a16b5	85 25		sta $0825	            STA ARGUMENT1+2
.3a16b7	e2 20		sep #$20	            SEP #$20
.3a16b9	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a16bb	85 27		sta $0827	            STA ARGTYPE1
.3a16bd					done
.3a16bd	28		plp		            PLP
.3a16be	60		rts		            RTS
.3a16bf					OP_STR_LT
.3a16bf	08		php		            PHP
.3a16c0	c2 30		rep #$30	            REP #$30
.3a16c2	20 e6 14	jsr $3a14e6	            JSR STRCMP
.3a16c5	a5 23		lda $0823	            LDA ARGUMENT1
.3a16c7	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.3a16ca	d0 05		bne $3a16d1	            BNE ret_false               ; No: return false
.3a16cc					ret_true
.3a16cc	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a16cf	80 03		bra $3a16d4	            BRA done
.3a16d1					ret_false
.3a16d1	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a16d4	28		plp		done        PLP
.3a16d5	60		rts		            RTS
.3a16d6					OP_STR_GT
.3a16d6	08		php		            PHP
.3a16d7	c2 30		rep #$30	            REP #$30
.3a16d9	20 e6 14	jsr $3a14e6	            JSR STRCMP
.3a16dc	a5 23		lda $0823	            LDA ARGUMENT1
.3a16de	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.3a16e1	d0 05		bne $3a16e8	            BNE ret_false               ; No: return false
.3a16e3					ret_true
.3a16e3	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a16e6	80 03		bra $3a16eb	            BRA done
.3a16e8					ret_false
.3a16e8	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a16eb	28		plp		done        PLP
.3a16ec	60		rts		            RTS
.3a16ed					OP_STR_EQ
.3a16ed	08		php		            PHP
.3a16ee	c2 30		rep #$30	            REP #$30
.3a16f0	20 e6 14	jsr $3a14e6	            JSR STRCMP
.3a16f3	a5 23		lda $0823	            LDA ARGUMENT1
.3a16f5	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.3a16f8	d0 05		bne $3a16ff	            BNE ret_false               ; No: return false
.3a16fa					ret_true
.3a16fa	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a16fd	80 03		bra $3a1702	            BRA done
.3a16ff					ret_false
.3a16ff	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a1702	28		plp		done        PLP
.3a1703	60		rts		            RTS
.3a1704					OP_STR_NE
.3a1704	08		php		            PHP
.3a1705	c2 30		rep #$30	            REP #$30
.3a1707	20 e6 14	jsr $3a14e6	            JSR STRCMP
.3a170a	a5 23		lda $0823	            LDA ARGUMENT1
.3a170c	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.3a170f	f0 05		beq $3a1716	            BEQ ret_false               ; Yes: return false
.3a1711					ret_true
.3a1711	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a1714	80 03		bra $3a1719	            BRA done
.3a1716					ret_false
.3a1716	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a1719	28		plp		done        PLP
.3a171a	60		rts		            RTS
.3a171b					OP_STR_GTE
.3a171b	08		php		            PHP
.3a171c	c2 30		rep #$30	            REP #$30
.3a171e	20 e6 14	jsr $3a14e6	            JSR STRCMP
.3a1721	a5 23		lda $0823	            LDA ARGUMENT1
.3a1723	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.3a1726	f0 05		beq $3a172d	            BEQ ret_false               ; Yes: return false
.3a1728					ret_true
.3a1728	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a172b	80 03		bra $3a1730	            BRA done
.3a172d					ret_false
.3a172d	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a1730	28		plp		done        PLP
.3a1731	60		rts		            RTS
.3a1732					OP_STR_LTE
.3a1732	08		php		            PHP
.3a1733	c2 30		rep #$30	            REP #$30
.3a1735	20 e6 14	jsr $3a14e6	            JSR STRCMP
.3a1738	a5 23		lda $0823	            LDA ARGUMENT1
.3a173a	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.3a173d	f0 05		beq $3a1744	            BEQ ret_false               ; Yes: return false
.3a173f					ret_true
.3a173f	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a1742	80 03		bra $3a1747	            BRA done
.3a1744					ret_false
.3a1744	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a1747	28		plp		done        PLP
.3a1748	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\listing.s

.3a1749					LISTPROG
.3a1749	48		pha		            PHA
.3a174a	5a		phy		            PHY
.3a174b	0b		phd		            PHD
.3a174c	08		php		            PHP
.3a174d	08		php		            PHP
.3a174e	c2 20		rep #$20	            REP #$20
.3a1750	48		pha		            PHA
.3a1751	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1754	5b		tcd		            TCD
.3a1755	68		pla		            PLA
.3a1756	28		plp		            PLP
.3a1757	c2 30		rep #$30	            REP #$30
.3a1759	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a175c	85 00		sta $0800	            STA BIP
.3a175e	85 1a		sta $081a	            STA CURLINE
.3a1760	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a1763	85 02		sta $0802	            STA BIP+2
.3a1765	85 1c		sta $081c	            STA CURLINE+2
.3a1767	ad 8a 0f	lda $0f8a	list_loop   LDA KEYFLAG         ; Check the keyboard flags
.3a176a	30 20		bmi $3a178c	            BMI throw_break     ; If MSB: user pressed an interrupt key, stop the listing
.3a176c	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.3a176f	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.3a1771	f0 0f		beq $3a1782	            BEQ done
.3a1773	c5 55		cmp $0855	            CMP MARG1
.3a1775	90 10		bcc $3a1787	            BLT skip_line
.3a1777	c5 59		cmp $0859	            CMP MARG2
.3a1779	f0 02		beq $3a177d	            BEQ print_line
.3a177b	b0 05		bcs $3a1782	            BGE done
.3a177d					print_line
.3a177d	20 ab 17	jsr $3a17ab	            JSR LISTLINE
.3a1780	80 e5		bra $3a1767	            BRA list_loop
.3a1782	28		plp		done        PLP
.3a1783	2b		pld		            PLD
.3a1784	7a		ply		            PLY
.3a1785	68		pla		            PLA
.3a1786	60		rts		            RTS
.3a1787					skip_line
.3a1787	20 74 20	jsr $3a2074	            JSR NEXTLINE
.3a178a	80 db		bra $3a1767	            BRA list_loop           ; And try again
.3a178c					throw_break
.3a178c	08		php		            PHP
.3a178d	c2 20		rep #$20	            REP #$20
.3a178f	48		pha		            PHA
.3a1790	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1793	5b		tcd		            TCD
.3a1794	68		pla		            PLA
.3a1795	28		plp		            PLP
.3a1796	e2 20		sep #$20	            SEP #$20
.3a1798	a9 01		lda #$01	            LDA #ERR_BREAK
.3a179a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a179e	c2 20		rep #$20	            REP #$20
.3a17a0	29 ff 00	and #$00ff	            AND #$00FF
.3a17a3	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a17a6	e2 20		sep #$20	            SEP #$20
.3a17a8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a17ab					LISTLINE
.3a17ab	08		php		            PHP
.3a17ac	c2 30		rep #$30	            REP #$30
.3a17ae	85 23		sta $0823	            STA ARGUMENT1
.3a17b0	64 25		stz $0825	            STZ ARGUMENT1+2
.3a17b2	20 46 14	jsr $3a1446	            JSR ITOS
.3a17b5	a5 16		lda $0816	            LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a17b7	1a		inc a		            INC A
.3a17b8	85 23		sta $0823	            STA ARGUMENT1
.3a17ba	a5 18		lda $0818	            LDA STRPTR+2
.3a17bc	85 25		sta $0825	            STA ARGUMENT1+2
.3a17be	20 26 44	jsr $3a4426	            JSR PR_STRING
.3a17c1	18		clc		            CLC                 ; Move the BIP to the first byte of the line
.3a17c2	a5 1a		lda $081a	            LDA CURLINE
.3a17c4	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a17c7	85 00		sta $0800	            STA BIP
.3a17c9	a5 1c		lda $081c	            LDA CURLINE+2
.3a17cb	69 00 00	adc #$0000	            ADC #0
.3a17ce	85 02		sta $0802	            STA BIP+2
.3a17d0	e2 20		sep #$20	            SEP #$20
.3a17d2	a9 20		lda #$20	            LDA #CHAR_SP
.3a17d4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a17d7	c2 20		rep #$20	            REP #$20
.3a17d9					loop
.3a17d9	20 ea 17	jsr $3a17ea	            JSR LISTBYTE
.3a17dc	90 fb		bcc $3a17d9	            BCC loop
.3a17de	e2 20		sep #$20	            SEP #$20
.3a17e0	a9 0d		lda #$0d	            LDA #CHAR_CR
.3a17e2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a17e5	20 74 20	jsr $3a2074	            JSR NEXTLINE
.3a17e8	28		plp		            PLP
.3a17e9	60		rts		            RTS
.3a17ea					LISTBYTE
.3a17ea	08		php		            PHP
.3a17eb	0b		phd		            PHD
.3a17ec	8b		phb		            PHB
.3a17ed	08		php		            PHP
.3a17ee	c2 20		rep #$20	            REP #$20
.3a17f0	48		pha		            PHA
.3a17f1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a17f4	5b		tcd		            TCD
.3a17f5	68		pla		            PLA
.3a17f6	28		plp		            PLP
.3a17f7	08		php		            PHP
.3a17f8	e2 20		sep #$20	            SEP #$20
.3a17fa	48		pha		            PHA
.3a17fb	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a17fd	48		pha		            PHA
.3a17fe	ab		plb		            PLB
.3a17ff	68		pla		            PLA
.3a1800	28		plp		            PLP
.3a1801	e2 20		sep #$20	            SEP #$20
.3a1803	c2 10		rep #$10	            REP #$10
.3a1805	a7 00		lda [$0800]	            LDA [BIP]           ; Get the current byte
.3a1807	f0 3a		beq $3a1843	            BEQ end_of_line     ; If it's 0, return with C set
.3a1809	30 05		bmi $3a1810	            BMI is_token        ; If it's 0x80 - 0xFF, it's a token
.3a180b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a180e	80 29		bra $3a1839	            BRA done            ; And return
.3a1810					is_token
.3a1810	c2 20		rep #$20	            REP #$20
.3a1812	29 7f 00	and #$007f	            AND #$007F          ; Compute the index of the token
.3a1815	0a		asl a		            ASL A               ; In the token table
.3a1816	0a		asl a		            ASL A
.3a1817	0a		asl a		            ASL A
.3a1818	18		clc		            CLC
.3a1819	69 e9 0b	adc #$0be9	            ADC #<>TOKENS       ; Set INDEX to the address of the token
.3a181c	85 08		sta $0808	            STA INDEX
.3a181e	a9 3a 00	lda #$003a	            LDA #`TOKENS
.3a1821	69 00 00	adc #$0000	            ADC #0
.3a1824	85 0a		sta $080a	            STA INDEX+2
.3a1826					pr_default
.3a1826	08		php		            PHP
.3a1827	e2 20		sep #$20	            SEP #$20
.3a1829	48		pha		            PHA
.3a182a	a9 3a		lda #$3a	            LDA #`TOKENS
.3a182c	48		pha		            PHA
.3a182d	ab		plb		            PLB
.3a182e	68		pla		            PLA
.3a182f	28		plp		            PLP
.3a1830	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.3a1833	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1835	aa		tax		            TAX
.3a1836	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a1839					done
.3a1839	c2 20		rep #$20	            REP #$20
.3a183b	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a183e	ab		plb		            PLB
.3a183f	2b		pld		            PLD
.3a1840	28		plp		            PLP
.3a1841	18		clc		            CLC
.3a1842	60		rts		            RTS
.3a1843	ab		plb		end_of_line PLB
.3a1844	2b		pld		            PLD
.3a1845	28		plp		            PLP
.3a1846	38		sec		            SEC
.3a1847	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\eval.s

.3a1848					INITEVALSP
.3a1848	08		php		            PHP
.3a1849	c2 20		rep #$20	            REP #$20
.3a184b	a9 ff 6f	lda #$6fff	            LDA #ARGUMENT_TOP
.3a184e	85 1f		sta $081f	            STA ARGUMENTSP
.3a1850	a9 ff 7f	lda #$7fff	            LDA #OPERATOR_TOP
.3a1853	85 21		sta $0821	            STA OPERATORSP
.3a1855	a9 ff ff	lda #$ffff	            LDA #$FFFF
.3a1858	85 23		sta $0823	            STA ARGUMENT1
.3a185a	85 25		sta $0825	            STA ARGUMENT1+2
.3a185c	85 29		sta $0829	            STA ARGUMENT2
.3a185e	85 2b		sta $082b	            STA ARGUMENT2+2
.3a1860	e2 20		sep #$20	            SEP #$20
.3a1862	85 27		sta $0827	            STA ARGTYPE1
.3a1864	85 2d		sta $082d	            STA ARGTYPE2
.3a1866	28		plp		            PLP
.3a1867	60		rts		            RTS
.3a1868					PHARGUMENT
.3a1868	08		php		            PHP
.3a1869	0b		phd		            PHD
.3a186a	8b		phb		            PHB
.3a186b	08		php		            PHP
.3a186c	c2 20		rep #$20	            REP #$20
.3a186e	48		pha		            PHA
.3a186f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1872	5b		tcd		            TCD
.3a1873	68		pla		            PLA
.3a1874	28		plp		            PLP
.3a1875	08		php		            PHP
.3a1876	e2 20		sep #$20	            SEP #$20
.3a1878	48		pha		            PHA
.3a1879	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a187b	48		pha		            PHA
.3a187c	ab		plb		            PLB
.3a187d	68		pla		            PLA
.3a187e	28		plp		            PLP
.3a187f	c2 30		rep #$30	            REP #$30
.3a1881	5a		phy		            PHY
.3a1882	a4 1f		ldy $081f	            LDY ARGUMENTSP
.3a1884	bd 00 00	lda $0000,x	            LDA #0,B,X
.3a1887	99 00 00	sta $0000,y	            STA #0,B,Y
.3a188a	bd 02 00	lda $0002,x	            LDA #2,B,X
.3a188d	99 02 00	sta $0002,y	            STA #2,B,Y
.3a1890	e2 20		sep #$20	            SEP #$20
.3a1892	bd 04 00	lda $0004,x	            LDA #4,B,X
.3a1895	99 04 00	sta $0004,y	            STA #4,B,Y
.3a1898	c2 20		rep #$20	            REP #$20
.3a189a	38		sec		            SEC
.3a189b	98		tya		            TYA
.3a189c	e9 05 00	sbc #$0005	            SBC #ARGUMENT_SIZE
.3a189f	85 1f		sta $081f	            STA ARGUMENTSP
.3a18a1	7a		ply		            PLY
.3a18a2	ab		plb		            PLB
.3a18a3	2b		pld		            PLD
.3a18a4	28		plp		            PLP
.3a18a5	60		rts		            RTS
.3a18a6					PLARGUMENT
.3a18a6	08		php		            PHP
.3a18a7	0b		phd		            PHD
.3a18a8	8b		phb		            PHB
.3a18a9	08		php		            PHP
.3a18aa	c2 20		rep #$20	            REP #$20
.3a18ac	48		pha		            PHA
.3a18ad	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a18b0	5b		tcd		            TCD
.3a18b1	68		pla		            PLA
.3a18b2	28		plp		            PLP
.3a18b3	08		php		            PHP
.3a18b4	e2 20		sep #$20	            SEP #$20
.3a18b6	48		pha		            PHA
.3a18b7	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a18b9	48		pha		            PHA
.3a18ba	ab		plb		            PLB
.3a18bb	68		pla		            PLA
.3a18bc	28		plp		            PLP
.3a18bd	c2 30		rep #$30	            REP #$30
.3a18bf	5a		phy		            PHY
.3a18c0	18		clc		            CLC
.3a18c1	a5 1f		lda $081f	            LDA ARGUMENTSP
.3a18c3	69 05 00	adc #$0005	            ADC #ARGUMENT_SIZE
.3a18c6	85 1f		sta $081f	            STA ARGUMENTSP
.3a18c8	a8		tay		            TAY
.3a18c9	b9 00 00	lda $0000,y	            LDA #0,B,Y
.3a18cc	9d 00 00	sta $0000,x	            STA #0,B,X
.3a18cf	b9 02 00	lda $0002,y	            LDA #2,B,Y
.3a18d2	9d 02 00	sta $0002,x	            STA #2,B,X
.3a18d5	e2 20		sep #$20	            SEP #$20
.3a18d7	b9 04 00	lda $0004,y	            LDA #4,B,Y
.3a18da	9d 04 00	sta $0004,x	            STA #4,B,X
.3a18dd	bd 00 00	lda $0000,x	            LDA #0,B,X
.3a18e0	7a		ply		            PLY
.3a18e1	ab		plb		            PLB
.3a18e2	2b		pld		            PLD
.3a18e3	28		plp		            PLP
.3a18e4	60		rts		            RTS
.3a18e5					PHOPERATOR
.3a18e5	08		php		            PHP
.3a18e6	0b		phd		            PHD
.3a18e7	8b		phb		            PHB
.3a18e8	08		php		            PHP
.3a18e9	c2 20		rep #$20	            REP #$20
.3a18eb	48		pha		            PHA
.3a18ec	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a18ef	5b		tcd		            TCD
.3a18f0	68		pla		            PLA
.3a18f1	28		plp		            PLP
.3a18f2	08		php		            PHP
.3a18f3	e2 20		sep #$20	            SEP #$20
.3a18f5	48		pha		            PHA
.3a18f6	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a18f8	48		pha		            PHA
.3a18f9	ab		plb		            PLB
.3a18fa	68		pla		            PLA
.3a18fb	28		plp		            PLP
.3a18fc	e2 20		sep #$20	            SEP #$20
.3a18fe	c2 10		rep #$10	            REP #$10
.3a1900	5a		phy		            PHY
.3a1901	a4 21		ldy $0821	            LDY OPERATORSP
.3a1903	99 00 00	sta $0000,y	            STA #0,B,Y
.3a1906	88		dey		            DEY
.3a1907	84 21		sty $0821	            STY OPERATORSP
.3a1909	7a		ply		done        PLY
.3a190a	ab		plb		            PLB
.3a190b	2b		pld		            PLD
.3a190c	28		plp		            PLP
.3a190d	60		rts		            RTS
.3a190e					PLOPERATOR
.3a190e	08		php		            PHP
.3a190f	0b		phd		            PHD
.3a1910	8b		phb		            PHB
.3a1911	08		php		            PHP
.3a1912	c2 20		rep #$20	            REP #$20
.3a1914	48		pha		            PHA
.3a1915	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1918	5b		tcd		            TCD
.3a1919	68		pla		            PLA
.3a191a	28		plp		            PLP
.3a191b	08		php		            PHP
.3a191c	e2 20		sep #$20	            SEP #$20
.3a191e	48		pha		            PHA
.3a191f	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1921	48		pha		            PHA
.3a1922	ab		plb		            PLB
.3a1923	68		pla		            PLA
.3a1924	28		plp		            PLP
.3a1925	e2 20		sep #$20	            SEP #$20
.3a1927	c2 10		rep #$10	            REP #$10
.3a1929	5a		phy		            PHY
.3a192a	a4 21		ldy $0821	            LDY OPERATORSP
.3a192c	c8		iny		            INY
.3a192d	84 21		sty $0821	            STY OPERATORSP
.3a192f	b9 00 00	lda $0000,y	            LDA #0,B,Y
.3a1932	c2 20		rep #$20	            REP #$20
.3a1934	29 ff 00	and #$00ff	            AND #$00FF
.3a1937	7a		ply		            PLY
.3a1938	ab		plb		            PLB
.3a1939	2b		pld		            PLD
.3a193a	28		plp		            PLP
.3a193b	60		rts		            RTS
.3a193c					OPENPARAMS
.3a193c	08		php		            PHP
.3a193d	e2 20		sep #$20	            SEP #$20
.3a193f	a9 01		lda #$01	            LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.3a1941	20 e5 18	jsr $3a18e5	            JSR PHOPERATOR
.3a1944	28		plp		            PLP
.3a1945	60		rts		            RTS
.3a1946					CLOSEPARAMS
.3a1946	5a		phy		            PHY
.3a1947	08		php		            PHP
.3a1948	8b		phb		            PHB
.3a1949	08		php		            PHP
.3a194a	e2 20		sep #$20	            SEP #$20
.3a194c	48		pha		            PHA
.3a194d	a9 00		lda #$00	            LDA #0
.3a194f	48		pha		            PHA
.3a1950	ab		plb		            PLB
.3a1951	68		pla		            PLA
.3a1952	28		plp		            PLP
.3a1953	e2 20		sep #$20	            SEP #$20
.3a1955	a4 21		ldy $0821	            LDY OPERATORSP      ; Peek at the top operator
.3a1957	b9 01 00	lda $0001,y	            LDA #1,B,Y
.3a195a	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the marker for the start of a parameter list
.3a195c	d0 08		bne $3a1966	            BNE error           ; No: there's a problem
.3a195e	c2 20		rep #$20	            REP #$20
.3a1960	e6 21		inc $0821	            INC OPERATORSP      ; Yes: remove it from the operator stack.
.3a1962	ab		plb		            PLB
.3a1963	28		plp		            PLP
.3a1964	7a		ply		            PLY
.3a1965	60		rts		            RTS
.3a1966					error
.3a1966	08		php		            PHP
.3a1967	c2 20		rep #$20	            REP #$20
.3a1969	48		pha		            PHA
.3a196a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a196d	5b		tcd		            TCD
.3a196e	68		pla		            PLA
.3a196f	28		plp		            PLP
.3a1970	e2 20		sep #$20	            SEP #$20
.3a1972	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1974	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1978	c2 20		rep #$20	            REP #$20
.3a197a	29 ff 00	and #$00ff	            AND #$00FF
.3a197d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a1980	e2 20		sep #$20	            SEP #$20
.3a1982	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1985					OPHIGHPREC
.3a1985	48		pha		            PHA
.3a1986	08		php		            PHP
.3a1987	0b		phd		            PHD
.3a1988	8b		phb		            PHB
.3a1989	08		php		            PHP
.3a198a	c2 20		rep #$20	            REP #$20
.3a198c	48		pha		            PHA
.3a198d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1990	5b		tcd		            TCD
.3a1991	68		pla		            PLA
.3a1992	28		plp		            PLP
.3a1993	08		php		            PHP
.3a1994	e2 20		sep #$20	            SEP #$20
.3a1996	48		pha		            PHA
.3a1997	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1999	48		pha		            PHA
.3a199a	ab		plb		            PLB
.3a199b	68		pla		            PLA
.3a199c	28		plp		            PLP
.3a199d	e2 20		sep #$20	            SEP #$20
.3a199f	a4 21		ldy $0821	            LDY OPERATORSP
.3a19a1	c0 ff 7f	cpy #$7fff	            CPY #OPERATOR_TOP       ; Is the stack empty?
.3a19a4	f0 11		beq $3a19b7	            BEQ is_false            ; Yes: return false
.3a19a6	20 48 0b	jsr $3a0b48	            JSR TOKPRECED
.3a19a9	85 0c		sta $080c	            STA SCRATCH             ; Save it for later comparison
.3a19ab	b9 01 00	lda $0001,y	            LDA #1,B,Y              ; Get the operator at the top of the stack
.3a19ae	20 48 0b	jsr $3a0b48	            JSR TOKPRECED
.3a19b1	c5 0c		cmp $080c	            CMP SCRATCH             ; Compare the priorities (0 = highest priority)
.3a19b3	f0 02		beq $3a19b7	            BEQ is_false            ; A = SCRATCH, return false
.3a19b5	90 08		bcc $3a19bf	            BCC is_true             ; A < SCRATCH (A is higher priority), return false
.3a19b7					is_false
.3a19b7	c2 20		rep #$20	            REP #$20
.3a19b9	ab		plb		            PLB
.3a19ba	2b		pld		            PLD
.3a19bb	28		plp		            PLP
.3a19bc	68		pla		            PLA
.3a19bd	18		clc		            CLC
.3a19be	60		rts		            RTS
.3a19bf					is_true
.3a19bf	c2 20		rep #$20	            REP #$20
.3a19c1	ab		plb		            PLB                     ; A > SCRATCH (A is lower priority), return true
.3a19c2	2b		pld		            PLD
.3a19c3	28		plp		            PLP
.3a19c4	68		pla		            PLA
.3a19c5	38		sec		            SEC
.3a19c6	60		rts		            RTS
.3a19c7					EVALNUMBER
.3a19c7	4c c3 07	jmp $3a07c3	            JMP PARSEINT
.3a19ca					ARR_GETIDX
.3a19ca	08		php		            PHP
.3a19cb	e2 20		sep #$20	            SEP #$20
.3a19cd	a9 00		lda #$00	            LDA #0
.3a19cf	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF     ; Set the dimension to 0
.3a19d3	a2 01 00	ldx #$0001	            LDX #1
.3a19d6					eval_index
.3a19d6	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a19d9	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a19dc	c2 20		rep #$20	            REP #$20
.3a19de	a5 23		lda $0823	            LDA ARGUMENT1       ; Save the index to the array index buffer
.3a19e0	9f 00 4d 00	sta $004d00,x	            STA @lARRIDXBUF,X
.3a19e4	e2 20		sep #$20	            SEP #$20
.3a19e6	af 00 4d 00	lda $004d00	            LDA @lARRIDXBUF     ; Increment the index count
.3a19ea	1a		inc a		            INC A
.3a19eb	30 3e		bmi $3a1a2b	            BMI arg_err         ; If more than 127 dimensions, throw a range error
.3a19ed	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF
.3a19f1	e8		inx		            INX
.3a19f2	e8		inx		            INX
.3a19f3	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a19f6	e2 20		sep #$20	            SEP #$20
.3a19f8	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.3a19fa	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it ")"
.3a19fc	f0 09		beq $3a1a07	            BEQ clean_op        ; Yes: cleanup the argument stack
.3a19fe	c9 2c		cmp #$2c	            CMP #','            ; Is it a comma?
.3a1a00	d0 0a		bne $3a1a0c	            BNE syntax_err      ; No: throw a syntax error
.3a1a02					skip_comma
.3a1a02	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1a05	80 cf		bra $3a19d6	            BRA eval_index      ; And grab the next index
.3a1a07					clean_op
.3a1a07	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1a0a	28		plp		            PLP
.3a1a0b	60		rts		            RTS
.3a1a0c					syntax_err
.3a1a0c	08		php		            PHP
.3a1a0d	c2 20		rep #$20	            REP #$20
.3a1a0f	48		pha		            PHA
.3a1a10	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1a13	5b		tcd		            TCD
.3a1a14	68		pla		            PLA
.3a1a15	28		plp		            PLP
.3a1a16	e2 20		sep #$20	            SEP #$20
.3a1a18	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1a1a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1a1e	c2 20		rep #$20	            REP #$20
.3a1a20	29 ff 00	and #$00ff	            AND #$00FF
.3a1a23	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a1a26	e2 20		sep #$20	            SEP #$20
.3a1a28	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1a2b					arg_err
.3a1a2b	08		php		            PHP
.3a1a2c	c2 20		rep #$20	            REP #$20
.3a1a2e	48		pha		            PHA
.3a1a2f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1a32	5b		tcd		            TCD
.3a1a33	68		pla		            PLA
.3a1a34	28		plp		            PLP
.3a1a35	e2 20		sep #$20	            SEP #$20
.3a1a37	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a1a39	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1a3d	c2 20		rep #$20	            REP #$20
.3a1a3f	29 ff 00	and #$00ff	            AND #$00FF
.3a1a42	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a1a45	e2 20		sep #$20	            SEP #$20
.3a1a47	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1a4a					EVALREF
.3a1a4a	08		php		            PHP
.3a1a4b					get_name
.3a1a4b	20 cc 51	jsr $3a51cc	            JSR VAR_FINDNAME
.3a1a4e	90 23		bcc $3a1a73	            BCC syntax_err      ; If we didn't find a name, thrown an error
.3a1a50	e2 20		sep #$20	            SEP #$20
.3a1a52	a5 ea		lda $08ea	            LDA TOFINDTYPE      ; Check the type of the variable
.3a1a54	29 80		and #$80	            AND #$80            ; Is it an array?
.3a1a56	d0 06		bne $3a1a5e	            BNE is_array        ; Yes: look for the indexes
.3a1a58	20 cd 4f	jsr $3a4fcd	            JSR VAR_REF
.3a1a5b	4c 71 1a	jmp $3a1a71	            JMP done
.3a1a5e					is_array
.3a1a5e	e2 20		sep #$20	            SEP #$20
.3a1a60	a9 8f		lda #$8f	            LDA #TOK_LPAREN
.3a1a62	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a1a65	20 3c 19	jsr $3a193c	            JSR OPENPARAMS
.3a1a68					            PHARRIDX
.3a1a68	20 ca 19	jsr $3a19ca	            JSR ARR_GETIDX
.3a1a6b	20 83 66	jsr $3a6683	            JSR ARR_REF
.3a1a6e					            PLARRIDX
.3a1a6e	20 46 19	jsr $3a1946	            JSR CLOSEPARAMS
.3a1a71	28		plp		done        PLP
.3a1a72	60		rts		            RTS
.3a1a73					syntax_err
.3a1a73	08		php		            PHP
.3a1a74	c2 20		rep #$20	            REP #$20
.3a1a76	48		pha		            PHA
.3a1a77	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1a7a	5b		tcd		            TCD
.3a1a7b	68		pla		            PLA
.3a1a7c	28		plp		            PLP
.3a1a7d	e2 20		sep #$20	            SEP #$20
.3a1a7f	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1a81	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1a85	c2 20		rep #$20	            REP #$20
.3a1a87	29 ff 00	and #$00ff	            AND #$00FF
.3a1a8a	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a1a8d	e2 20		sep #$20	            SEP #$20
.3a1a8f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1a92					EVALSTRING
.3a1a92	08		php		            PHP
.3a1a93	0b		phd		            PHD
.3a1a94	08		php		            PHP
.3a1a95	c2 20		rep #$20	            REP #$20
.3a1a97	48		pha		            PHA
.3a1a98	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1a9b	5b		tcd		            TCD
.3a1a9c	68		pla		            PLA
.3a1a9d	28		plp		            PLP
.3a1a9e	e2 20		sep #$20	            SEP #$20
.3a1aa0	c2 10		rep #$10	            REP #$10
.3a1aa2	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1aa5	a0 00 00	ldy #$0000	            LDY #0              ; Ywill be our length counter
.3a1aa8	b7 00		lda [$0800],y	count_loop  LDA [BIP],Y         ; Get the character
.3a1aaa	f0 24		beq $3a1ad0	            BEQ error           ; If it's end-of-line, throw an error
.3a1aac	c9 22		cmp #$22	            CMP #CHAR_DQUOTE    ; Is it the ending double-quote?
.3a1aae	f0 03		beq $3a1ab3	            BEQ found_end       ; Yes: Y should be the length
.3a1ab0	c8		iny		            INY
.3a1ab1	80 f5		bra $3a1aa8	            BRA count_loop
.3a1ab3	84 0c		sty $080c	found_end   STY SCRATCH         ; Save the length to SCRATCH
.3a1ab5	e2 20		sep #$20	            SEP #$20
.3a1ab7	a9 02		lda #$02	            LDA #TYPE_STRING    ; Set the type to allocate to STRING
.3a1ab9	a6 0c		ldx $080c	            LDX SCRATCH         ; And the length to the length of the string literal
.3a1abb	e8		inx		            INX
.3a1abc	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a1abf	a0 00 00	ldy #$0000	            LDY #0
.3a1ac2	c4 0c		cpy $080c	copy_loop   CPY SCRATCH         ; Have we copied all the characters?
.3a1ac4	f0 29		beq $3a1aef	            BEQ done            ; Yes: we're done
.3a1ac6	a7 00		lda [$0800]	            LDA [BIP]           ; No: get the next character
.3a1ac8	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And copy it to the allocated string
.3a1aca	c8		iny		            INY
.3a1acb	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1ace	80 f2		bra $3a1ac2	            BRA copy_loop       ; And try the next character
.3a1ad0					error
.3a1ad0	08		php		            PHP
.3a1ad1	c2 20		rep #$20	            REP #$20
.3a1ad3	48		pha		            PHA
.3a1ad4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1ad7	5b		tcd		            TCD
.3a1ad8	68		pla		            PLA
.3a1ad9	28		plp		            PLP
.3a1ada	e2 20		sep #$20	            SEP #$20
.3a1adc	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1ade	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1ae2	c2 20		rep #$20	            REP #$20
.3a1ae4	29 ff 00	and #$00ff	            AND #$00FF
.3a1ae7	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a1aea	e2 20		sep #$20	            SEP #$20
.3a1aec	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1aef	a9 00		lda #$00	done        LDA #0
.3a1af1	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a1af3	c2 20		rep #$20	            REP #$20
.3a1af5	a5 16		lda $0816	            LDA STRPTR
.3a1af7	85 23		sta $0823	            STA ARGUMENT1
.3a1af9	a5 18		lda $0818	            LDA STRPTR+2
.3a1afb	85 25		sta $0825	            STA ARGUMENT1+2
.3a1afd	a9 02 00	lda #$0002	            LDA #TYPE_STRING    ; And set the type of ARGUMENT1 to string
.3a1b00	85 27		sta $0827	            STA ARGTYPE1
.3a1b02	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1b05	2b		pld		            PLD
.3a1b06	28		plp		            PLP
.3a1b07	60		rts		            RTS
.3a1b08					EVAL_FUNC
.3a1b08	08		php		            PHP
.3a1b09	e2 20		sep #$20	            SEP #$20
.3a1b0b	a7 00		lda [$0800]	            LDA [BIP]           ; Get the token
.3a1b0d	c2 20		rep #$20	            REP #$20
.3a1b0f	29 ff 00	and #$00ff	            AND #$00FF
.3a1b12	20 72 0b	jsr $3a0b72	            JSR TOKEVAL
.3a1b15	85 2f		sta $082f	            STA JMP16PTR
.3a1b17	20 3c 19	jsr $3a193c	            JSR OPENPARAMS
.3a1b1a	08		php		            PHP
.3a1b1b	e2 20		sep #$20	            SEP #$20
.3a1b1d	48		pha		            PHA
.3a1b1e	a9 00		lda #$00	            LDA #0
.3a1b20	48		pha		            PHA
.3a1b21	ab		plb		            PLB
.3a1b22	68		pla		            PLA
.3a1b23	28		plp		            PLP
.3a1b24	20 2c 1b	jsr $3a1b2c	            JSR OPSTUB
.3a1b27	20 46 19	jsr $3a1946	            JSR CLOSEPARAMS
.3a1b2a	28		plp		            PLP
.3a1b2b	60		rts		            RTS
.3a1b2c					OPSTUB
.3a1b2c	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1b2f	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a1b32					PROCESSOP
.3a1b32	48		pha		            PHA
.3a1b33	08		php		            PHP
.3a1b34	0b		phd		            PHD
.3a1b35	8b		phb		            PHB
.3a1b36	08		php		            PHP
.3a1b37	c2 20		rep #$20	            REP #$20
.3a1b39	48		pha		            PHA
.3a1b3a	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1b3d	5b		tcd		            TCD
.3a1b3e	68		pla		            PLA
.3a1b3f	28		plp		            PLP
.3a1b40	c2 30		rep #$30	            REP #$30
.3a1b42	20 0e 19	jsr $3a190e	            JSR PLOPERATOR
.3a1b45	89 80 00	bit #$0080	            BIT #$80            ; Check if it's really a token
.3a1b48	f0 37		beq $3a1b81	            BEQ bad_token       ; No: it's a bad token
.3a1b4a	48		pha		            PHA
.3a1b4b	20 72 0b	jsr $3a0b72	            JSR TOKEVAL
.3a1b4e	85 2f		sta $082f	            STA JMP16PTR
.3a1b50	68		pla		            PLA
.3a1b51	20 bf 0b	jsr $3a0bbf	            JSR TOKARITY
.3a1b54	c9 01 00	cmp #$0001	            CMP #1              ; Check the operator's arity
.3a1b57	f0 08		beq $3a1b61	            BEQ pull_arg1       ; If it's 1 just pull one argument from the stack
.3a1b59	c2 30		rep #$30	            REP #$30
.3a1b5b	a2 29 08	ldx #$0829	            LDX #<>ARGUMENT2    ; Pull argument 2 from the stack
.3a1b5e	20 a6 18	jsr $3a18a6	            JSR PLARGUMENT
.3a1b61					pull_arg1
.3a1b61	c2 30		rep #$30	            REP #$30
.3a1b63	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Pull argument 1 from the stack
.3a1b66	20 a6 18	jsr $3a18a6	            JSR PLARGUMENT
.3a1b69	08		php		            PHP
.3a1b6a	e2 20		sep #$20	            SEP #$20
.3a1b6c	48		pha		            PHA
.3a1b6d	a9 00		lda #$00	            LDA #0
.3a1b6f	48		pha		            PHA
.3a1b70	ab		plb		            PLB
.3a1b71	68		pla		            PLA
.3a1b72	28		plp		            PLP
.3a1b73	20 83 1b	jsr $3a1b83	            JSR OPSTUB
.3a1b76	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Get return result in argument 1
.3a1b79	20 68 18	jsr $3a1868	            JSR PHARGUMENT
.3a1b7c	ab		plb		            PLB
.3a1b7d	2b		pld		            PLD
.3a1b7e	28		plp		            PLP
.3a1b7f	68		pla		            PLA
.3a1b80	60		rts		            RTS
.3a1b81	00		brk #		bad_token   BRK
.3a1b82	ea		nop		            NOP
.3a1b83	6c 2f 08	jmp ($082f)	OPSTUB      JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a1b86					EVALEXPR
.3a1b86	08		php		            PHP
.3a1b87	08		php		            PHP
.3a1b88	c2 20		rep #$20	            REP #$20
.3a1b8a	48		pha		            PHA
.3a1b8b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1b8e	5b		tcd		            TCD
.3a1b8f	68		pla		            PLA
.3a1b90	28		plp		            PLP
.3a1b91	08		php		            PHP
.3a1b92	e2 20		sep #$20	            SEP #$20
.3a1b94	48		pha		            PHA
.3a1b95	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1b97	48		pha		            PHA
.3a1b98	ab		plb		            PLB
.3a1b99	68		pla		            PLA
.3a1b9a	28		plp		            PLP
.3a1b9b	c2 10		rep #$10	            REP #$10
.3a1b9d	da		phx		            PHX
.3a1b9e					get_char
.3a1b9e	e2 20		sep #$20	            SEP #$20
.3a1ba0	a7 00		lda [$0800]	            LDA [BIP]           ; Get the character
.3a1ba2	d0 03		bne $3a1ba7	            BNE else1
.3a1ba4	4c 49 1c	jmp $3a1c49	            JMP proc_stack      ; Handle end of line, if we see it
.3a1ba7	30 33		bmi $3a1bdc	else1       BMI is_token        ; If MSB is set, it's a token
.3a1ba9	c9 20		cmp #$20	            CMP #' '            ; Is it a space?
.3a1bab	d0 03		bne $3a1bb0	            BNE else2
.3a1bad	4c 43 1c	jmp $3a1c43	            JMP next_char       ; Yes: Skip to the next character
.3a1bb0	c9 3a		cmp #$3a	else2       CMP #'9'+1          ; Check to see if we have digits
.3a1bb2	b0 04		bcs $3a1bb8	            BCS else3           ; No: treat as the end of the line
.3a1bb4	c9 30		cmp #$30	            CMP #'0'
.3a1bb6	b0 56		bcs $3a1c0e	            BCS is_digit
.3a1bb8	c9 26		cmp #$26	else3       CMP #'&'            ; Check for a hexadecimal prefix
.3a1bba	f0 52		beq $3a1c0e	            BEQ is_digit
.3a1bbc	c9 22		cmp #$22	            CMP #'"'            ; Is it a double-quote?
.3a1bbe	d0 03		bne $3a1bc3	            BNE else4
.3a1bc0	4c 5c 1c	jmp $3a1c5c	            JMP is_string       ; Yes: process the string
.3a1bc3	c9 5b		cmp #$5b	else4       CMP #'Z'+1          ; Check to see if we have upper case alphabetics
.3a1bc5	b0 07		bcs $3a1bce	            BCS check_lc        ; No: check for lower case
.3a1bc7	c9 41		cmp #$41	            CMP #'A'
.3a1bc9	90 03		bcc $3a1bce	            BCC check_lc
.3a1bcb	4c 68 1c	jmp $3a1c68	            JMP is_alpha
.3a1bce	c9 7b		cmp #$7b	check_lc    CMP #'z'+1          ; Check to see if we have lower case alphabetics
.3a1bd0	b0 07		bcs $3a1bd9	            BCS else5           ; No: treat as the end of the line
.3a1bd2	c9 61		cmp #$61	            CMP #'a'
.3a1bd4	90 03		bcc $3a1bd9	            BCC else5
.3a1bd6	4c 68 1c	jmp $3a1c68	            JMP is_alpha
.3a1bd9	4c 49 1c	jmp $3a1c49	else5       JMP proc_stack
.3a1bdc	c9 8f		cmp #$8f	is_token    CMP #TOK_LPAREN     ; Is it an LPAREN
.3a1bde	f0 40		beq $3a1c20	            BEQ is_lparen       ; Yes: handle the LPAREN
.3a1be0	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it an RPAREN?
.3a1be2	f0 41		beq $3a1c25	            BEQ is_rparen       ; Yes: handle the RPAREN
.3a1be4	20 95 0b	jsr $3a0b95	            JSR TOKTYPE
.3a1be7	c9 30		cmp #$30	            CMP #TOK_TY_FUNC    ; Is it a function?
.3a1be9	d0 0c		bne $3a1bf7	            BNE chk_op          ; No: check if it's an operator
.3a1beb	20 08 1b	jsr $3a1b08	            JSR EVAL_FUNC
.3a1bee	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1bf1	20 68 18	jsr $3a1868	            JSR PHARGUMENT
.3a1bf4	4c 9e 1b	jmp $3a1b9e	            JMP get_char
.3a1bf7	c9 00		cmp #$00	chk_op      CMP #TOK_TY_OP      ; Is it an operator?
.3a1bf9	d0 4e		bne $3a1c49	            BNE proc_stack      ; No: we're finished processing
.3a1bfb	a7 00		lda [$0800]	            LDA [BIP]           ; Yes: Get the token back
.3a1bfd	a6 21		ldx $0821	chk_prec    LDX OPERATORSP      ; Is the operator stack empty?
.3a1bff	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.3a1c02	f0 05		beq $3a1c09	            BEQ push_op         ; Yes: push the operator
.3a1c04	20 85 19	jsr $3a1985	            JSR OPHIGHPREC
.3a1c07	b0 12		bcs $3a1c1b	            BCS process1        ; No: we should process the top operator
.3a1c09					push_op
.3a1c09	20 e5 18	jsr $3a18e5	            JSR PHOPERATOR
.3a1c0c	80 35		bra $3a1c43	            BRA next_char       ; And go to the next character
.3a1c0e					is_digit
.3a1c0e	c2 20		rep #$20	            REP #$20
.3a1c10	20 ee 57	jsr $3a57ee	            JSR PARSENUM
.3a1c13	a2 23 08	ldx #$0823	got_number  LDX #<>ARGUMENT1
.3a1c16	20 68 18	jsr $3a1868	            JSR PHARGUMENT
.3a1c19	80 83		bra $3a1b9e	            BRA get_char
.3a1c1b					process1
.3a1c1b	20 32 1b	jsr $3a1b32	            JSR PROCESSOP
.3a1c1e	80 dd		bra $3a1bfd	            BRA chk_prec        ; And check what to do with the current operator
.3a1c20					is_lparen
.3a1c20	20 e5 18	jsr $3a18e5	            JSR PHOPERATOR
.3a1c23	80 1e		bra $3a1c43	            BRA next_char
.3a1c25					is_rparen
.3a1c25	e2 20		sep #$20	            SEP #$20
.3a1c27	a4 21		ldy $0821	            LDY OPERATORSP      ; Is the operator stack empty?
.3a1c29	c0 ff 7f	cpy #$7fff	            CPY #<>OPERATOR_TOP
.3a1c2c	f0 46		beq $3a1c74	            BEQ done            ; Yes: we're done evaluating things
.3a1c2e	a4 21		ldy $0821	paren_loop  LDY OPERATORSP      ; Peek at the top operator
.3a1c30	b9 01 00	lda $0001,y	            LDA #1,B,Y
.3a1c33	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the LPAREN of a function?
.3a1c35	f0 3d		beq $3a1c74	            BEQ done            ; Yes: treat it as an empty stack
.3a1c37	c9 8f		cmp #$8f	            CMP #TOK_LPAREN     ; Is it an LPAREN?
.3a1c39	f0 05		beq $3a1c40	            BEQ done_rparen     ; Yes: we're finished processing
.3a1c3b	20 32 1b	jsr $3a1b32	            JSR PROCESSOP
.3a1c3e	80 ee		bra $3a1c2e	            BRA paren_loop
.3a1c40					done_rparen
.3a1c40	20 0e 19	jsr $3a190e	            JSR PLOPERATOR
.3a1c43					next_char
.3a1c43	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1c46	4c 9e 1b	jmp $3a1b9e	            JMP get_char
.3a1c49					proc_stack
.3a1c49	a6 21		ldx $0821	            LDX OPERATORSP      ; Is the operator stack empty?
.3a1c4b	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.3a1c4e	b0 24		bcs $3a1c74	            BGE done            ; Yes: return to the caller
.3a1c50	bd 01 00	lda $0001,x	            LDA #1,B,X
.3a1c53	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is top operator a function open?
.3a1c55	f0 1d		beq $3a1c74	            BEQ done            ; Yes: treat as end of expression
.3a1c57	20 32 1b	jsr $3a1b32	            JSR PROCESSOP
.3a1c5a	80 ed		bra $3a1c49	            BRA proc_stack
.3a1c5c					is_string
.3a1c5c	20 92 1a	jsr $3a1a92	            JSR EVALSTRING
.3a1c5f	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1c62	20 68 18	jsr $3a1868	            JSR PHARGUMENT
.3a1c65	4c 9e 1b	jmp $3a1b9e	            JMP get_char
.3a1c68					is_alpha
.3a1c68	20 4a 1a	jsr $3a1a4a	            JSR EVALREF
.3a1c6b	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1c6e	20 68 18	jsr $3a1868	            JSR PHARGUMENT
.3a1c71	4c 9e 1b	jmp $3a1b9e	            JMP get_char
.3a1c74	a2 23 08	ldx #$0823	done        LDX #<>ARGUMENT1    ; Make sure the result is off the stack
.3a1c77	20 a6 18	jsr $3a18a6	            JSR PLARGUMENT
.3a1c7a	fa		plx		            PLX
.3a1c7b	28		plp		            PLP
.3a1c7c	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\returnstack.s

.3a1c7d					INITRETURN
.3a1c7d	08		php		                PHP
.3a1c7e	0b		phd		                PHD
.3a1c7f	8b		phb		                PHB
.3a1c80	08		php		            PHP
.3a1c81	e2 20		sep #$20	            SEP #$20
.3a1c83	48		pha		            PHA
.3a1c84	a9 00		lda #$00	            LDA #0
.3a1c86	48		pha		            PHA
.3a1c87	ab		plb		            PLB
.3a1c88	68		pla		            PLA
.3a1c89	28		plp		            PLP
.3a1c8a	08		php		            PHP
.3a1c8b	c2 20		rep #$20	            REP #$20
.3a1c8d	48		pha		            PHA
.3a1c8e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1c91	5b		tcd		            TCD
.3a1c92	68		pla		            PLA
.3a1c93	28		plp		            PLP
.3a1c94	c2 30		rep #$30	            REP #$30
.3a1c96	a9 fd 5f	lda #$5ffd	                LDA #RETURN_TOP-2
.3a1c99	85 33		sta $0833	                STA RETURNSP
.3a1c9b	ab		plb		                PLB
.3a1c9c	2b		pld		                PLD
.3a1c9d	28		plp		                PLP
.3a1c9e	60		rts		            RTS
.3a1c9f					PHRETURN
.3a1c9f	08		php		                PHP
.3a1ca0	0b		phd		                PHD
.3a1ca1	08		php		            PHP
.3a1ca2	c2 20		rep #$20	            REP #$20
.3a1ca4	48		pha		            PHA
.3a1ca5	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1ca8	5b		tcd		            TCD
.3a1ca9	68		pla		            PLA
.3a1caa	28		plp		            PLP
.3a1cab	c2 30		rep #$30	            REP #$30
.3a1cad	92 33		sta ($0833)	                STA (RETURNSP)
.3a1caf	c6 33		dec $0833	                DEC RETURNSP
.3a1cb1	c6 33		dec $0833	                DEC RETURNSP
.3a1cb3	2b		pld		                PLD
.3a1cb4	28		plp		                PLP
.3a1cb5	60		rts		            RTS
.3a1cb6					PHRETURNB
.3a1cb6	08		php		                PHP
.3a1cb7	c2 30		rep #$30	            REP #$30
.3a1cb9	29 ff 00	and #$00ff	                AND #$00FF
.3a1cbc	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a1cbf	28		plp		                PLP
.3a1cc0	60		rts		            RTS
.3a1cc1					PLRETURN
.3a1cc1	08		php		                PHP
.3a1cc2	0b		phd		                PHD
.3a1cc3	08		php		            PHP
.3a1cc4	c2 20		rep #$20	            REP #$20
.3a1cc6	48		pha		            PHA
.3a1cc7	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1cca	5b		tcd		            TCD
.3a1ccb	68		pla		            PLA
.3a1ccc	28		plp		            PLP
.3a1ccd	c2 30		rep #$30	            REP #$30
.3a1ccf	e6 33		inc $0833	                INC RETURNSP
.3a1cd1	e6 33		inc $0833	                INC RETURNSP
.3a1cd3	b2 33		lda ($0833)	                LDA (RETURNSP)
.3a1cd5	2b		pld		                PLD
.3a1cd6	28		plp		                PLP
.3a1cd7	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\interpreter.s

=$80					ST_RUNNING = $80            ; The interpreter is running a full program
=$00					ST_INTERACT = $00           ; The interpreter is in interactive mode
>08d2					STATE       .byte ?         ; The state of the interpreter ()
>08d3					ERROR_NUM   .byte ?         ; The type of the error
>08d4					HANDLEERR   .long ?         ; Pointer to the error handler
>08d7					LINENUM     .word ?         ; The current line number
>08d9					LASTLINE    .long ?         ; Pointer to the next free space over the BASIC program
>08dc					EXECACTION  .byte ?         ; The action the exection routines should take to get their next statement
=0					LINE_LINK = 0               ; Offset to the link to the next line
=2					LINE_NUMBER = 2             ; Offset to the line number
=4					LINE_TOKENS = 4             ; Offset to the first token
=6					LINE_MINLEN = 6             ; Minimum length of a line
=0					EXEC_CONT = 0               ; Continue advancing the current line
=1					EXEC_STOP = 1               ; Stop execution of the program
=2					EXEC_GOTO = 2               ; Transfer execution to a new CURLINE that is already set
=3					EXEC_RETURN = 3             ; Transfer execution back to a line that was on the stack
.3a1cd8					SET_ERRERL
.3a1cd8	8b		phb		                PHB
.3a1cd9	0b		phd		                PHD
.3a1cda	08		php		                PHP
.3a1cdb	08		php		            PHP
.3a1cdc	c2 20		rep #$20	            REP #$20
.3a1cde	48		pha		            PHA
.3a1cdf	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1ce2	5b		tcd		            TCD
.3a1ce3	68		pla		            PLA
.3a1ce4	28		plp		            PLP
.3a1ce5	08		php		            PHP
.3a1ce6	e2 20		sep #$20	            SEP #$20
.3a1ce8	48		pha		            PHA
.3a1ce9	a9 00		lda #$00	            LDA #BASIC_BANK
.3a1ceb	48		pha		            PHA
.3a1cec	ab		plb		            PLB
.3a1ced	68		pla		            PLA
.3a1cee	28		plp		            PLP
.3a1cef	c2 20		rep #$20	            REP #$20
.3a1cf1	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.3a1cf3	a9 00 00	lda #$0000	                LDA #0
.3a1cf6	85 25		sta $0825	                STA ARGUMENT1+2
.3a1cf8	e2 20		sep #$20	            SEP #$20
.3a1cfa	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a1cfc	85 27		sta $0827	                STA ARGTYPE1
.3a1cfe	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.3a1d00	a9 3a		lda #$3a	                LDA #`err_name
.3a1d02	85 e9		sta $08e9	                STA TOFIND+2
.3a1d04	c2 20		rep #$20	            REP #$20
.3a1d06	a9 32 1d	lda #$1d32	                LDA #<>err_name
.3a1d09	85 e7		sta $08e7	                STA TOFIND
.3a1d0b	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a1d0e	c2 20		rep #$20	            REP #$20
.3a1d10	a5 d7		lda $08d7	                LDA LINENUM
.3a1d12	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.3a1d14	a5 d9		lda $08d9	                LDA LINENUM+2
.3a1d16	85 25		sta $0825	                STA ARGUMENT1+2
.3a1d18	e2 20		sep #$20	            SEP #$20
.3a1d1a	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a1d1c	85 27		sta $0827	                STA ARGTYPE1
.3a1d1e	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.3a1d20	a9 3a		lda #$3a	                LDA #`erl_name
.3a1d22	85 e9		sta $08e9	                STA TOFIND+2
.3a1d24	c2 20		rep #$20	            REP #$20
.3a1d26	a9 36 1d	lda #$1d36	                LDA #<>erl_name
.3a1d29	85 e7		sta $08e7	                STA TOFIND
.3a1d2b	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a1d2e	28		plp		                PLP
.3a1d2f	2b		pld		                PLD
.3a1d30	ab		plb		                PLB
.3a1d31	60		rts		            RTS
>3a1d32	45 52 52 00			err_name        .null "ERR"
>3a1d36	45 52 4c 00			erl_name        .null "ERL"
.3a1d3a					ON_ERROR
.3a1d3a	e2 20		sep #$20	            SEP #$20
.3a1d3c	c2 10		rep #$10	            REP #$10
.3a1d3e	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a1d41	af d3 08 00	lda $0008d3	            LDA @lERROR_NUM         ; Calculate index to the error message pointer
.3a1d45	0a		asl a		            ASL A
.3a1d46	c2 20		rep #$20	            REP #$20
.3a1d48	29 ff 00	and #$00ff	            AND #$00FF
.3a1d4b	a8		tay		            TAY
.3a1d4c	08		php		            PHP
.3a1d4d	e2 20		sep #$20	            SEP #$20
.3a1d4f	48		pha		            PHA
.3a1d50	a9 3a		lda #$3a	            LDA #`ERRORMSG
.3a1d52	48		pha		            PHA
.3a1d53	ab		plb		            PLB
.3a1d54	68		pla		            PLA
.3a1d55	28		plp		            PLP
.3a1d56	be 8c 1d	ldx $3a1d8c,y	            LDX ERRORMSG,Y
.3a1d59	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a1d5c	c2 20		rep #$20	            REP #$20
.3a1d5e	a5 d7		lda $08d7	            LDA LINENUM
.3a1d60	f0 27		beq $3a1d89	            BEQ skip_at
.3a1d62	a2 bc 1d	ldx #$1dbc	            LDX #<>MSG_AT           ; If so... print " AT "
.3a1d65	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a1d68	08		php		            PHP
.3a1d69	e2 20		sep #$20	            SEP #$20
.3a1d6b	48		pha		            PHA
.3a1d6c	a9 00		lda #$00	            LDA #BASIC_BANK
.3a1d6e	48		pha		            PHA
.3a1d6f	ab		plb		            PLB
.3a1d70	68		pla		            PLA
.3a1d71	28		plp		            PLP
.3a1d72	c2 20		rep #$20	            REP #$20
.3a1d74	af d7 08 00	lda $0008d7	            LDA @lLINENUM           ; ... and then the line number
.3a1d78	8f 23 08 00	sta $000823	            STA @lARGUMENT1
.3a1d7c	a9 00 00	lda #$0000	            LDA #0
.3a1d7f	8f 25 08 00	sta $000825	            STA @lARGUMENT1+2
.3a1d83	20 46 44	jsr $3a4446	            JSR PR_INTEGER
.3a1d86	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a1d89					skip_at
.3a1d89	4c 37 26	jmp $3a2637	            JMP INTERACT
>3a1d8c	c0 1d				ERRORMSG    .word <>MSG_OK
>3a1d8e	c3 1d				            .word <>MSG_BREAK
>3a1d90	c9 1d				            .word <>MSG_SYNTAX
>3a1d92	d6 1d				            .word <>MSG_MEMORY
>3a1d94	e4 1d				            .word <>MSG_TYPE
>3a1d96	f2 1d				            .word <>MSG_NOTFND
>3a1d98	05 1e				            .word <>MSG_NOLINE
>3a1d9a	1b 1e				            .word <>MSG_UNDFLOW
>3a1d9c	2b 1e				            .word <>MSG_OVRFLOW
>3a1d9e	3a 1e				            .word <>MSG_RANGE
>3a1da0	47 1e				            .word <>MSG_ARG
>3a1da2	58 1e				            .word <>MSG_NOFILE
>3a1da4	67 1e				            .word <>MSG_NAN
>3a1da6	74 1e				            .word <>MSG_OVERFLOW
>3a1da8	82 1e				            .word <>MSG_UNDERFLOW
>3a1daa	91 1e				            .word <>MSG_DIV0
>3a1dac	a2 1e				            .word <>MSG_DIRECTORY
>3a1dae	bb 1e				            .word <>MSG_LOAD
>3a1db0	cf 1e				            .word <>MSG_SAVE
>3a1db2	e3 1e				            .word <>MSG_DELETE
>3a1db4	f9 1e				            .word <>MSG_FILENOTFND
>3a1db6	0d 1f				            .word <>MSG_DIRNOTWRITE
>3a1db8	28 1f				            .word <>MSG_NOTCOPIED
>3a1dba	40 1f				            .word <>MSG_DOMAIN
>3a1dbc	20 61 74 00			MSG_AT          .null " at"
>3a1dc0	4f 4b 00			MSG_OK          .null "OK"
>3a1dc3	42 72 65 61 6b 00		MSG_BREAK       .null "Break"
>3a1dc9	53 79 6e 74 61 78 20 65		MSG_SYNTAX      .null "Syntax error"
>3a1dd1	72 72 6f 72 00
>3a1dd6	4f 75 74 20 6f 66 20 6d		MSG_MEMORY      .null "Out of memory"
>3a1dde	65 6d 6f 72 79 00
>3a1de4	54 79 70 65 20 6d 69 73		MSG_TYPE        .null "Type mismatch"
>3a1dec	6d 61 74 63 68 00
>3a1df2	56 61 72 69 61 62 6c 65		MSG_NOTFND      .null "Variable not found"
>3a1dfa	20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1e05	4c 69 6e 65 20 6e 75 6d		MSG_NOLINE      .null "Line number not found"
>3a1e0d	62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1e1b	53 74 61 63 6b 20 75 6e		MSG_UNDFLOW     .null "Stack underflow"
>3a1e23	64 65 72 66 6c 6f 77 00
>3a1e2b	53 74 61 63 6b 20 6f 76		MSG_OVRFLOW     .null "Stack overflow"
>3a1e33	65 72 66 6c 6f 77 00
>3a1e3a	4f 75 74 20 6f 66 20 72		MSG_RANGE       .null "Out of range"
>3a1e42	61 6e 67 65 00
>3a1e47	49 6c 6c 65 67 61 6c 20		MSG_ARG         .null "Illegal argument"
>3a1e4f	61 72 67 75 6d 65 6e 74 00
>3a1e58	46 69 6c 65 20 6e 6f 74		MSG_NOFILE      .null "File not found"
>3a1e60	20 66 6f 75 6e 64 00
>3a1e67	4e 6f 74 20 61 20 6e 75		MSG_NAN         .null "Not a number"
>3a1e6f	6d 62 65 72 00
>3a1e74	4d 61 74 68 20 6f 76 65		MSG_OVERFLOW    .null "Math overflow"
>3a1e7c	72 66 6c 6f 77 00
>3a1e82	4d 61 74 68 20 75 6e 64		MSG_UNDERFLOW   .null "Math underflow"
>3a1e8a	65 72 66 6c 6f 77 00
>3a1e91	44 69 76 69 73 69 6f 6e		MSG_DIV0        .null "Division by zero"
>3a1e99	20 62 79 20 7a 65 72 6f 00
>3a1ea2	55 6e 61 62 6c 65 20 74		MSG_DIRECTORY   .null "Unable to read directory"
>3a1eaa	6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>3a1eba	00
>3a1ebb	55 6e 61 62 6c 65 20 74		MSG_LOAD        .null "Unable to load file"
>3a1ec3	6f 20 6c 6f 61 64 20 66 69 6c 65 00
>3a1ecf	55 6e 61 62 6c 65 20 74		MSG_SAVE        .null "Unable to save file"
>3a1ed7	6f 20 73 61 76 65 20 66 69 6c 65 00
>3a1ee3	55 6e 61 62 6c 65 20 74		MSG_DELETE      .null "Unable to delete file"
>3a1eeb	6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00
>3a1ef9	43 6f 75 6c 64 20 6e 6f		MSG_FILENOTFND  .null "Could not find file"
>3a1f01	74 20 66 69 6e 64 20 66 69 6c 65 00
>3a1f0d	43 6f 75 6c 64 20 6e 6f		MSG_DIRNOTWRITE .null "Could not update directory"
>3a1f15	74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>3a1f25	72 79 00
>3a1f28	43 6f 75 6c 64 20 6e 6f		MSG_NOTCOPIED   .null "Could not copy the file"
>3a1f30	74 20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00
>3a1f40	41 72 67 75 6d 65 6e 74		MSG_DOMAIN      .null "Argument outside domain"
>3a1f48	20 6f 75 74 73 69 64 65 20 64 6f 6d 61 69 6e 00
.3a1f58					SETINTERACT
.3a1f58	08		php		            PHP
.3a1f59	0b		phd		            PHD
.3a1f5a	08		php		            PHP
.3a1f5b	c2 20		rep #$20	            REP #$20
.3a1f5d	48		pha		            PHA
.3a1f5e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1f61	5b		tcd		            TCD
.3a1f62	68		pla		            PLA
.3a1f63	28		plp		            PLP
.3a1f64	e2 20		sep #$20	            SEP #$20
.3a1f66	a9 00		lda #$00	            LDA #ST_INTERACT
.3a1f68	85 d2		sta $08d2	            STA STATE
.3a1f6a	2b		pld		            PLD
.3a1f6b	28		plp		            PLP
.3a1f6c	60		rts		            RTS
.3a1f6d					CLRINTERP
.3a1f6d	0b		phd		            PHD
.3a1f6e	08		php		            PHP
.3a1f6f	08		php		            PHP
.3a1f70	c2 20		rep #$20	            REP #$20
.3a1f72	48		pha		            PHA
.3a1f73	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1f76	5b		tcd		            TCD
.3a1f77	68		pla		            PLA
.3a1f78	28		plp		            PLP
.3a1f79	08		php		            PHP
.3a1f7a	c2 20		rep #$20	            REP #$20
.3a1f7c	a9 3a 1d	lda #$1d3a	            LDA #<>ON_ERROR
.3a1f7f	8f d4 08 00	sta $0008d4	            STA @lHANDLEERR
.3a1f83	e2 20		sep #$20	            SEP #$20
.3a1f85	a9 3a		lda #$3a	            LDA #`ON_ERROR
.3a1f87	8f d6 08 00	sta $0008d6	            STA @lHANDLEERR+2
.3a1f8b	28		plp		            PLP
.3a1f8c	20 eb 42	jsr $3a42eb	            JSR S_CLR
.3a1f8f	20 2c 3e	jsr $3a3e2c	            JSR S_RESTORE
.3a1f92	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the depth of the GOSUB stack
.3a1f94	28		plp		            PLP
.3a1f95	2b		pld		            PLD
.3a1f96	60		rts		            RTS
.3a1f97					INCBIP
.3a1f97	08		php		            PHP
.3a1f98	0b		phd		            PHD
.3a1f99	08		php		            PHP
.3a1f9a	c2 20		rep #$20	            REP #$20
.3a1f9c	48		pha		            PHA
.3a1f9d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1fa0	5b		tcd		            TCD
.3a1fa1	68		pla		            PLA
.3a1fa2	28		plp		            PLP
.3a1fa3	c2 20		rep #$20	            REP #$20
.3a1fa5	18		clc		            CLC
.3a1fa6	a5 00		lda $0800	            LDA BIP
.3a1fa8	69 01 00	adc #$0001	            ADC #1
.3a1fab	85 00		sta $0800	            STA BIP
.3a1fad	e2 20		sep #$20	            SEP #$20
.3a1faf	a5 02		lda $0802	            LDA BIP+2
.3a1fb1	69 00		adc #$00	            ADC #0
.3a1fb3	85 02		sta $0802	            STA BIP+2
.3a1fb5	2b		pld		            PLD
.3a1fb6	28		plp		            PLP
.3a1fb7	60		rts		            RTS
.3a1fb8					SKIPWS
.3a1fb8	08		php		            PHP
.3a1fb9	0b		phd		            PHD
.3a1fba	08		php		            PHP
.3a1fbb	c2 20		rep #$20	            REP #$20
.3a1fbd	48		pha		            PHA
.3a1fbe	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1fc1	5b		tcd		            TCD
.3a1fc2	68		pla		            PLA
.3a1fc3	28		plp		            PLP
.3a1fc4	e2 20		sep #$20	            SEP #$20
.3a1fc6	a7 00		lda [$0800]	loop        LDA [BIP]
.3a1fc8	f0 0f		beq $3a1fd9	            BEQ done            ; If character is 0, we've reached the end of the line
.3a1fca	c9 20		cmp #$20	            CMP #CHAR_SP        ; Skip if it's a space
.3a1fcc	f0 06		beq $3a1fd4	            BEQ skip_char
.3a1fce	c9 09		cmp #$09	            CMP #CHAR_TAB       ; Skip if it's a TAB
.3a1fd0	f0 02		beq $3a1fd4	            BEQ skip_char
.3a1fd2	80 05		bra $3a1fd9	            BRA done            ; Otherwise, we're done and BIP points to a non-whitespace
.3a1fd4					skip_char
.3a1fd4	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1fd7	80 ed		bra $3a1fc6	            BRA loop
.3a1fd9	2b		pld		done        PLD
.3a1fda	28		plp		            PLP
.3a1fdb	60		rts		            RTS
.3a1fdc					SKIPSTMT
.3a1fdc	08		php		            PHP
.3a1fdd	e2 20		sep #$20	            SEP #$20
.3a1fdf	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the current character
.3a1fe1	f0 09		beq $3a1fec	            BEQ done            ; Is it EOL? Yes, we're done
.3a1fe3	c9 3a		cmp #$3a	            CMP #':'            ; Is it a colon?
.3a1fe5	f0 05		beq $3a1fec	            BEQ done            ; Yes, we're done
.3a1fe7	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a1fea	80 f3		bra $3a1fdf	            BRA loop            ; and check it...
.3a1fec	28		plp		done        PLP
.3a1fed	60		rts		            RTS
.3a1fee					SKIPTOTOK
.3a1fee	08		php		            PHP
.3a1fef	e2 20		sep #$20	            SEP #$20
.3a1ff1	64 36		stz $0836	            STZ NESTING
.3a1ff3	a7 00		lda [$0800]	loop        LDA [BIP]           ; Get the character
.3a1ff5	f0 19		beq $3a2010	            BEQ end_of_line     ; EOL? Yes: move to the next line
.3a1ff7	c5 37		cmp $0837	            CMP TARGETTOK       ; Is it the one we want?
.3a1ff9	f0 2c		beq $3a2027	            BEQ check_depth     ; Yes: check the depth
.3a1ffb	c9 9b		cmp #$9b	            CMP #TOK_FOR        ; Is it a FOR?
.3a1ffd	f0 1e		beq $3a201d	            BEQ inc_nesting     ; Yes: increment NESTING
.3a1fff	c9 9f		cmp #$9f	            CMP #TOK_DO         ; Is it a DO?
.3a2001	f0 1a		beq $3a201d	            BEQ inc_nesting     ; Yes: increment NESTING
.3a2003	c9 9e		cmp #$9e	            CMP #TOK_NEXT       ; Is it a NEXT?
.3a2005	f0 1a		beq $3a2021	            BEQ dec_nesting     ; Yes: decrement NESTING
.3a2007	c9 a0		cmp #$a0	            CMP #TOK_LOOP       ; Is it a LOOP?
.3a2009	f0 16		beq $3a2021	            BEQ dec_nesting     ; Yes: decrement NESTING
.3a200b					incloop
.3a200b	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a200e	80 e3		bra $3a1ff3	            BRA loop            ; and keep scanning
.3a2010					end_of_line
.3a2010	20 74 20	jsr $3a2074	            JSR NEXTLINE
.3a2013	c2 20		rep #$20	            REP #$20
.3a2015	a5 d7		lda $08d7	            LDA LINENUM         ; Check the line number
.3a2017	f0 1d		beq $3a2036	            BEQ syntax_err1     ; If it's zero, we reached the end of the program
.3a2019	e2 20		sep #$20	            SEP #$20
.3a201b	80 d6		bra $3a1ff3	            BRA loop            ; And keep scanning
.3a201d					inc_nesting
.3a201d	e6 36		inc $0836	            INC NESTING         ; Track that we have entered a lexical scope for a FOR/DO
.3a201f	80 ea		bra $3a200b	            BRA incloop
.3a2021					dec_nesting
.3a2021	c6 36		dec $0836	            DEC NESTING         ; Track that we have left a lexical scope for a FOR/DO
.3a2023	30 30		bmi $3a2055	            BMI syntax_err2     ; If the depth goes <0, throw a syntax error
.3a2025	80 e4		bra $3a200b	            BRA incloop
.3a2027					check_depth
.3a2027	a5 35		lda $0835	            LDA SKIPNEST        ; Check to see if nesting matters
.3a2029	30 06		bmi $3a2031	            BMI found           ; No: just return that we found the token
.3a202b	a5 36		lda $0836	            LDA NESTING         ; Get the nesting depth
.3a202d	f0 02		beq $3a2031	            BEQ found           ; If it's zero, we found our token
.3a202f	80 da		bra $3a200b	            BRA incloop         ; Otherwise: it's a token for an enclosed FOR/DO, keep scanning
.3a2031					found
.3a2031	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a2034	28		plp		            PLP
.3a2035	60		rts		            RTS
.3a2036					syntax_err1
.3a2036	08		php		            PHP
.3a2037	c2 20		rep #$20	            REP #$20
.3a2039	48		pha		            PHA
.3a203a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a203d	5b		tcd		            TCD
.3a203e	68		pla		            PLA
.3a203f	28		plp		            PLP
.3a2040	e2 20		sep #$20	            SEP #$20
.3a2042	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a2044	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2048	c2 20		rep #$20	            REP #$20
.3a204a	29 ff 00	and #$00ff	            AND #$00FF
.3a204d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2050	e2 20		sep #$20	            SEP #$20
.3a2052	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2055					syntax_err2
.3a2055	08		php		            PHP
.3a2056	c2 20		rep #$20	            REP #$20
.3a2058	48		pha		            PHA
.3a2059	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a205c	5b		tcd		            TCD
.3a205d	68		pla		            PLA
.3a205e	28		plp		            PLP
.3a205f	e2 20		sep #$20	            SEP #$20
.3a2061	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a2063	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2067	c2 20		rep #$20	            REP #$20
.3a2069	29 ff 00	and #$00ff	            AND #$00FF
.3a206c	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a206f	e2 20		sep #$20	            SEP #$20
.3a2071	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2074					NEXTLINE
.3a2074	08		php		            PHP
.3a2075	c2 30		rep #$30	            REP #$30
.3a2077	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a207a	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the offset to the next line
.3a207c	85 0c		sta $080c	            STA SCRATCH
.3a207e	18		clc		            CLC                 ; Compute the new CURLINE
.3a207f	a5 1a		lda $081a	            LDA CURLINE         ; CURLINE := [CURLINE].LINE_LINK
.3a2081	65 0c		adc $080c	            ADC SCRATCH
.3a2083	85 1a		sta $081a	            STA CURLINE
.3a2085	a5 1c		lda $081c	            LDA CURLINE+2
.3a2087	69 00 00	adc #$0000	            ADC #0
.3a208a	85 1c		sta $081c	            STA CURLINE+2
.3a208c	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the LINENUM to the new current line's number
.3a208f	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; LINENUM := [CURLINE].LINE_NUMBER
.3a2091	85 d7		sta $08d7	            STA LINENUM
.3a2093	18		clc		            CLC                 ; Point BIP to the first character of the line
.3a2094	a5 1a		lda $081a	            LDA CURLINE         ; BIP := CURLINE + LINE_TOKENS
.3a2096	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2099	85 00		sta $0800	            STA BIP
.3a209b	a5 1c		lda $081c	            LDA CURLINE+2
.3a209d	69 00 00	adc #$0000	            ADC #0
.3a20a0	85 02		sta $0802	            STA BIP+2
.3a20a2	28		plp		            PLP
.3a20a3	60		rts		            RTS
.3a20a4					EXPECT_TOK
.3a20a4	08		php		            PHP
.3a20a5	e2 20		sep #$20	            SEP #$20
.3a20a7	48		pha		            PHA
.3a20a8	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a20ab	68		pla		            PLA
.3a20ac	e2 20		sep #$20	            SEP #$20
.3a20ae	c7 00		cmp [$0800]	            CMP [BIP]           ; Check the character at BIP
.3a20b0	d0 08		bne $3a20ba	            BNE syntax_err      ; Throw a syntax error
.3a20b2	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a20b5	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a20b8	28		plp		            PLP
.3a20b9	60		rts		            RTS
.3a20ba					syntax_err
.3a20ba	08		php		            PHP
.3a20bb	c2 20		rep #$20	            REP #$20
.3a20bd	48		pha		            PHA
.3a20be	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a20c1	5b		tcd		            TCD
.3a20c2	68		pla		            PLA
.3a20c3	28		plp		            PLP
.3a20c4	e2 20		sep #$20	            SEP #$20
.3a20c6	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a20c8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a20cc	c2 20		rep #$20	            REP #$20
.3a20ce	29 ff 00	and #$00ff	            AND #$00FF
.3a20d1	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a20d4	e2 20		sep #$20	            SEP #$20
.3a20d6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a20d9					OPT_TOK
.3a20d9	08		php		            PHP
.3a20da	e2 20		sep #$20	            SEP #$20
.3a20dc	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a20df	e2 20		sep #$20	            SEP #$20
.3a20e1	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the character at BIP
.3a20e3	f0 10		beq $3a20f5	            BEQ ret_false       ; If end-of-line, return false
.3a20e5	c9 3a		cmp #$3a	            CMP #':'
.3a20e7	f0 0c		beq $3a20f5	            BEQ ret_false       ; If colon, return false
.3a20e9	c5 37		cmp $0837	            CMP TARGETTOK
.3a20eb	f0 05		beq $3a20f2	            BEQ ret_true        ; If matches, return true
.3a20ed	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a20f0	80 ef		bra $3a20e1	            BRA loop
.3a20f2	28		plp		ret_true    PLP
.3a20f3	38		sec		            SEC
.3a20f4	60		rts		            RTS
.3a20f5	28		plp		ret_false   PLP
.3a20f6	18		clc		            CLC
.3a20f7	60		rts		            RTS
.3a20f8					PEEK_TOK
.3a20f8	5a		phy		            PHY
.3a20f9	08		php		            PHP
.3a20fa	e2 20		sep #$20	            SEP #$20
.3a20fc	a0 00 00	ldy #$0000	            LDY #0
.3a20ff	b7 00		lda [$0800],y	loop        LDA [BIP],Y
.3a2101	f0 0d		beq $3a2110	            BEQ done
.3a2103	c9 3a		cmp #$3a	            CMP #':'
.3a2105	f0 07		beq $3a210e	            BEQ ret_null
.3a2107	c9 20		cmp #$20	            CMP #CHAR_SP
.3a2109	d0 05		bne $3a2110	            BNE done
.3a210b	c8		iny		            INY
.3a210c	80 f1		bra $3a20ff	            BRA loop
.3a210e	a9 00		lda #$00	ret_null    LDA #0
.3a2110	28		plp		done        PLP
.3a2111	7a		ply		            PLY
.3a2112	60		rts		            RTS
.3a2113					EXECSTMT
.3a2113	08		php		            PHP
.3a2114	0b		phd		            PHD
.3a2115	8b		phb		            PHB
.3a2116	08		php		            PHP
.3a2117	c2 20		rep #$20	            REP #$20
.3a2119	48		pha		            PHA
.3a211a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a211d	5b		tcd		            TCD
.3a211e	68		pla		            PLA
.3a211f	28		plp		            PLP
.3a2120	20 48 18	jsr $3a1848	            JSR INITEVALSP
.3a2123	e2 20		sep #$20	            SEP #$20
.3a2125	a9 00		lda #$00	            LDA #EXEC_CONT      ; This will tell EXECLINE and EXECPROG to procede in a
.3a2127	85 dc		sta $08dc	            STA EXECACTION      ; linear fashion through the program
.3a2129	ad 8a 0f	lda $0f8a	check_break LDA KEYFLAG         ; Check the keyboard flags
.3a212c	30 4b		bmi $3a2179	            BMI throw_break     ; If MSB: user pressed an interrupt key, stop the program
.3a212e	a7 00		lda [$0800]	            LDA [BIP]           ; If we happen to have a colon, just skip over it.
.3a2130	c9 3a		cmp #$3a	            CMP #':'            ; This can happen with FOR/NEXT
.3a2132	d0 03		bne $3a2137	            BNE eat_ws
.3a2134	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a2137					eat_ws
.3a2137	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a213a	a7 00		lda [$0800]	            LDA [BIP]
.3a213c	d0 03		bne $3a2141	            BNE else
.3a213e	4c c3 21	jmp $3a21c3	            JMP done            ; If the current byte is 0, we're at the end of the line, just return
.3a2141					else
.3a2141	20 cd 03	jsr $3a03cd	            JSR ISALPHA
.3a2144	b0 52		bcs $3a2198	            BCS is_variable     ; Yes: we may have a LET statement
.3a2146	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it's any other non-token
.3a2148	10 10		bpl $3a215a	            BPL error           ; Yes: it's a syntax error
.3a214a	20 95 0b	jsr $3a0b95	            JSR TOKTYPE
.3a214d	85 0c		sta $080c	            STA SCRATCH         ; Save the type for later
.3a214f	c9 20		cmp #$20	            CMP #TOK_TY_STMNT   ; Is it a statement?
.3a2151	d0 03		bne $3a2156	            BNE else2
.3a2153	4c b1 21	jmp $3a21b1	            JMP ok_to_exec      ; Yes: it's ok to try to execute it
.3a2156	a5 d2		lda $08d2	else2       LDA STATE           ; Check to see if we're in interactive mode
.3a2158	f0 51		beq $3a21ab	            BEQ is_interact
.3a215a					error
.3a215a	08		php		            PHP
.3a215b	c2 20		rep #$20	            REP #$20
.3a215d	48		pha		            PHA
.3a215e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2161	5b		tcd		            TCD
.3a2162	68		pla		            PLA
.3a2163	28		plp		            PLP
.3a2164	e2 20		sep #$20	            SEP #$20
.3a2166	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a2168	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a216c	c2 20		rep #$20	            REP #$20
.3a216e	29 ff 00	and #$00ff	            AND #$00FF
.3a2171	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2174	e2 20		sep #$20	            SEP #$20
.3a2176	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2179					throw_break
.3a2179	08		php		            PHP
.3a217a	c2 20		rep #$20	            REP #$20
.3a217c	48		pha		            PHA
.3a217d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2180	5b		tcd		            TCD
.3a2181	68		pla		            PLA
.3a2182	28		plp		            PLP
.3a2183	e2 20		sep #$20	            SEP #$20
.3a2185	a9 01		lda #$01	            LDA #ERR_BREAK
.3a2187	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a218b	c2 20		rep #$20	            REP #$20
.3a218d	29 ff 00	and #$00ff	            AND #$00FF
.3a2190	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2193	e2 20		sep #$20	            SEP #$20
.3a2195	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2198					is_variable
.3a2198	20 f5 42	jsr $3a42f5	            JSR S_LET
.3a219b	4c c3 21	jmp $3a21c3	            JMP done
.3a219e					STSTUB
.3a219e	08		php		            PHP
.3a219f	e2 20		sep #$20	            SEP #$20
.3a21a1	48		pha		            PHA
.3a21a2	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a21a4	48		pha		            PHA
.3a21a5	ab		plb		            PLB
.3a21a6	68		pla		            PLA
.3a21a7	28		plp		            PLP
.3a21a8	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a21ab	a5 0c		lda $080c	is_interact LDA SCRATCH         ; Get the token type
.3a21ad	c9 10		cmp #$10	            CMP #TOK_TY_CMD     ; Is it a command?
.3a21af	d0 a9		bne $3a215a	            BNE error           ; If not, it's an error
.3a21b1					ok_to_exec
.3a21b1	a7 00		lda [$0800]	            LDA [BIP]           ; Get the original token again
.3a21b3	20 72 0b	jsr $3a0b72	            JSR TOKEVAL
.3a21b6	c2 20		rep #$20	            REP #$20
.3a21b8	85 2f		sta $082f	            STA JMP16PTR        ; Store it in the jump pointer
.3a21ba	20 48 18	jsr $3a1848	            JSR INITEVALSP
.3a21bd	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a21c0	20 9e 21	jsr $3a219e	            JSR STSTUB
.3a21c3	ab		plb		done        PLB
.3a21c4	2b		pld		            PLD
.3a21c5	28		plp		            PLP
.3a21c6	60		rts		            RTS
.3a21c7					EXECCMD
.3a21c7	08		php		            PHP
.3a21c8	58		cli		            CLI
.3a21c9	20 58 1f	jsr $3a1f58	            JSR SETINTERACT
.3a21cc	20 7d 1c	jsr $3a1c7d	            JSR INITRETURN
.3a21cf	e2 20		sep #$20	            SEP #$20
.3a21d1	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.3a21d4	c2 20		rep #$20	            REP #$20
.3a21d6	a5 1a		lda $081a	            LDA CURLINE         ; Set the BASIC Instruction Pointer to the first byte of the line
.3a21d8	85 00		sta $0800	            STA BIP
.3a21da	a5 1c		lda $081c	            LDA CURLINE+2
.3a21dc	85 02		sta $0802	            STA BIP+2
.3a21de	4c 08 22	jmp $3a2208	            JMP exec_loop
.3a21e1	08		php		EXECLINE    PHP
.3a21e2	c2 20		rep #$20	            REP #$20
.3a21e4	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER            ; Set the current line number
.3a21e7	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.3a21e9	85 d7		sta $08d7	            STA LINENUM
.3a21eb	20 de 13	jsr $3a13de	            JSR CLRTMPSTR
.3a21ee	e2 20		sep #$20	            SEP #$20
.3a21f0	a5 dc		lda $08dc	            LDA EXECACTION              ; If the last EXEC action was RETURN
.3a21f2	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; BIP has already been set, so...
.3a21f4	f0 12		beq $3a2208	            BEQ exec_loop               ; Skip over setting the BIP to the beginning of the line
.3a21f6	c2 20		rep #$20	            REP #$20
.3a21f8	18		clc		            CLC                         ; Set the BASIC Instruction Pointer to the first byte of the line
.3a21f9	a5 1a		lda $081a	            LDA CURLINE
.3a21fb	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a21fe	85 00		sta $0800	            STA BIP
.3a2200	e2 20		sep #$20	            SEP #$20
.3a2202	a5 1c		lda $081c	            LDA CURLINE+2
.3a2204	69 00		adc #$00	            ADC #0
.3a2206	85 02		sta $0802	            STA BIP+2
.3a2208					exec_loop
.3a2208	c2 20		rep #$20	            REP #$20
.3a220a	20 13 21	jsr $3a2113	            JSR EXECSTMT
.3a220d	e2 20		sep #$20	            SEP #$20
.3a220f	a5 dc		lda $08dc	            LDA EXECACTION
.3a2211	c9 03		cmp #$03	            CMP #EXEC_RETURN
.3a2213	f0 f3		beq $3a2208	            BEQ exec_loop
.3a2215	c9 00		cmp #$00	            CMP #EXEC_CONT              ; If it's not EXEC_CONT, exit to the caller
.3a2217	d0 31		bne $3a224a	            BNE exec_done
.3a2219	e2 20		sep #$20	            SEP #$20
.3a221b	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a221e	a7 00		lda [$0800]	            LDA [BIP]                   ; Get the current character in the line
.3a2220	f0 28		beq $3a224a	            BEQ exec_done               ; If it's NULL, we're done
.3a2222	c9 3a		cmp #$3a	            CMP #':'                    ; If it's colon, we have more statements
.3a2224	f0 1f		beq $3a2245	            BEQ skip_loop               ; Skip over it and try to execute the next one
.3a2226	08		php		            PHP
.3a2227	c2 20		rep #$20	            REP #$20
.3a2229	48		pha		            PHA
.3a222a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a222d	5b		tcd		            TCD
.3a222e	68		pla		            PLA
.3a222f	28		plp		            PLP
.3a2230	e2 20		sep #$20	            SEP #$20
.3a2232	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a2234	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2238	c2 20		rep #$20	            REP #$20
.3a223a	29 ff 00	and #$00ff	            AND #$00FF
.3a223d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2240	e2 20		sep #$20	            SEP #$20
.3a2242	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2245					skip_loop
.3a2245	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a2248	80 be		bra $3a2208	            BRA exec_loop               ; And try to execute another statement
.3a224a					exec_done
.3a224a	28		plp		            PLP
.3a224b	60		rts		            RTS
.3a224c					EXECPROGRAM
.3a224c	08		php		            PHP
.3a224d	58		cli		            CLI
.3a224e	e2 20		sep #$20	            SEP #$20
.3a2250	a9 80		lda #$80	            LDA #ST_RUNNING
.3a2252	85 d2		sta $08d2	            STA STATE
.3a2254	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.3a2257	20 7d 1c	jsr $3a1c7d	            JSR INITRETURN
.3a225a	c2 30		rep #$30	            REP #$30
.3a225c	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the count of GOSUBs
.3a225e	a0 02 00	ldy #$0002	exec_loop   LDY #LINE_NUMBER
.3a2261	b7 1a		lda [$081a],y	            LDA [CURLINE],Y             ; Get the line number of the current line
.3a2263	f0 29		beq $3a228e	            BEQ done                    ; If it's 0, we are finished running code (implicit END)
.3a2265	20 e1 21	jsr $3a21e1	            JSR EXECLINE
.3a2268	e2 20		sep #$20	            SEP #$20
.3a226a	a5 dc		lda $08dc	            LDA EXECACTION              ; Check the EXECACTION from the last line
.3a226c	c9 01		cmp #$01	            CMP #EXEC_STOP              ; Stop execution of the program?
.3a226e	f0 1e		beq $3a228e	            BEQ done
.3a2270	c9 02		cmp #$02	            CMP #EXEC_GOTO              ; Transfer execution to a new CURLINE that is already set
.3a2272	f0 ea		beq $3a225e	            BEQ exec_loop
.3a2274	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; Transfer execution to the CURLINE and BIP that is already set
.3a2276	f0 e6		beq $3a225e	            BEQ exec_loop
.3a2278	c2 20		rep #$20	            REP #$20
.3a227a	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a227d	18		clc		            CLC
.3a227e	a5 1a		lda $081a	            LDA CURLINE
.3a2280	77 1a		adc [$081a],y	            ADC [CURLINE],Y
.3a2282	85 1a		sta $081a	            STA CURLINE
.3a2284	e2 20		sep #$20	            SEP #$20
.3a2286	a5 1c		lda $081c	            LDA CURLINE+2
.3a2288	69 00		adc #$00	            ADC #0
.3a228a	85 1c		sta $081c	            STA CURLINE+2
.3a228c	80 d0		bra $3a225e	            BRA exec_loop               ; And try to execute that line
.3a228e					done
.3a228e	e2 20		sep #$20	            SEP #$20
.3a2290	a9 00		lda #$00	            LDA #ST_INTERACT            ; Set interpreter state to RUNNING
.3a2292	85 d2		sta $08d2	            STA STATE
.3a2294	28		plp		            PLP
.3a2295	60		rts		            RTS
.3a2296					FINDLINE
.3a2296	08		php		            PHP
.3a2297	c2 30		rep #$30	            REP #$30
.3a2299	c2 20		rep #$20	            REP #$20
.3a229b	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT            ; INDEX points to the first line of the program
.3a229e	85 08		sta $0808	            STA INDEX
.3a22a0	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a22a3	85 0a		sta $080a	            STA INDEX+2
.3a22a5	c2 20		rep #$20	            REP #$20
.3a22a7	a0 02 00	ldy #$0002	check_nmbrs LDY #LINE_NUMBER            ; Get the number of the possible target line
.3a22aa	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a22ac	f0 31		beq $3a22df	            BEQ ret_false               ; If new line number is 0, we got to the
.3a22ae	c5 23		cmp $0823	            CMP ARGUMENT1               ; Compare it to the target line number
.3a22b0	f0 1e		beq $3a22d0	            BEQ found
.3a22b2	b0 2b		bcs $3a22df	            BGE ret_false               ; If the line number > target line number, the line is not present
.3a22b4					next_line
.3a22b4	c2 20		rep #$20	            REP #$20
.3a22b6	a0 00 00	ldy #$0000	            LDY #LINE_LINK              ; INDEX := INDEX + [INDEX].LINK
.3a22b9	18		clc		            CLC
.3a22ba	a5 08		lda $0808	            LDA INDEX
.3a22bc	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a22be	85 0c		sta $080c	            STA SCRATCH
.3a22c0	e2 20		sep #$20	            SEP #$20
.3a22c2	a5 0a		lda $080a	            LDA INDEX+2
.3a22c4	69 00		adc #$00	            ADC #0
.3a22c6	85 0a		sta $080a	            STA INDEX+2
.3a22c8	c2 20		rep #$20	            REP #$20
.3a22ca	a5 0c		lda $080c	            LDA SCRATCH
.3a22cc	85 08		sta $0808	            STA INDEX
.3a22ce	80 d7		bra $3a22a7	            BRA check_nmbrs             ; And go back to check the new line INDEX is pointing to
.3a22d0					found
.3a22d0	c2 20		rep #$20	            REP #$20
.3a22d2	a5 08		lda $0808	            LDA INDEX
.3a22d4	85 1a		sta $081a	            STA CURLINE
.3a22d6	e2 20		sep #$20	            SEP #$20
.3a22d8	a5 0a		lda $080a	            LDA INDEX+2
.3a22da	85 1c		sta $081c	            STA CURLINE+2
.3a22dc	28		plp		ret_true    PLP                         ; Return true to indicate we've found the line
.3a22dd	38		sec		            SEC
.3a22de	60		rts		            RTS
.3a22df	28		plp		ret_false   PLP
.3a22e0	18		clc		            CLC
.3a22e1	60		rts		            RTS
.3a22e2					MVPROGDN
.3a22e2	08		php		            PHP
.3a22e3					mvd_loop
.3a22e3	e2 20		sep #$20	            SEP #$20
.3a22e5	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.3a22e7	87 08		sta [$0808]	            STA [INDEX]
.3a22e9	c2 20		rep #$20	            REP #$20
.3a22eb	a5 0c		lda $080c	            LDA SCRATCH
.3a22ed	c5 00		cmp $0800	            CMP BIP
.3a22ef	d0 08		bne $3a22f9	            BNE increment
.3a22f1	e2 20		sep #$20	            SEP #$20
.3a22f3	a5 0e		lda $080e	            LDA SCRATCH+2
.3a22f5	c5 02		cmp $0802	            CMP BIP+2
.3a22f7	f0 26		beq $3a231f	            BEQ done            ; Yes: return
.3a22f9					increment
.3a22f9	c2 20		rep #$20	            REP #$20
.3a22fb	18		clc		            CLC
.3a22fc	a5 0c		lda $080c	            LDA SCRATCH
.3a22fe	69 01 00	adc #$0001	            ADC #1
.3a2301	85 0c		sta $080c	            STA SCRATCH
.3a2303	e2 20		sep #$20	            SEP #$20
.3a2305	a5 0e		lda $080e	            LDA SCRATCH+2
.3a2307	69 00		adc #$00	            ADC #0
.3a2309	85 0e		sta $080e	            STA SCRATCH+2
.3a230b	c2 20		rep #$20	            REP #$20
.3a230d	18		clc		            CLC
.3a230e	a5 08		lda $0808	            LDA INDEX
.3a2310	69 01 00	adc #$0001	            ADC #1
.3a2313	85 08		sta $0808	            STA INDEX
.3a2315	e2 20		sep #$20	            SEP #$20
.3a2317	a5 0a		lda $080a	            LDA INDEX+2
.3a2319	69 00		adc #$00	            ADC #0
.3a231b	85 0a		sta $080a	            STA INDEX+2
.3a231d	80 c4		bra $3a22e3	            BRA mvd_loop        ; And try again
.3a231f	28		plp		done        PLP
.3a2320	60		rts		            RTS
.3a2321					MVPROGUP
.3a2321	08		php		            PHP
.3a2322					mvu_loop
.3a2322	e2 20		sep #$20	            SEP #$20
.3a2324	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.3a2326	87 08		sta [$0808]	            STA [INDEX]
.3a2328	c2 20		rep #$20	            REP #$20
.3a232a	a5 0c		lda $080c	            LDA SCRATCH
.3a232c	c5 00		cmp $0800	            CMP BIP
.3a232e	d0 06		bne $3a2336	            BNE decrement
.3a2330	a5 0e		lda $080e	            LDA SCRATCH+2
.3a2332	c5 02		cmp $0802	            CMP BIP+2
.3a2334	f0 26		beq $3a235c	            BEQ done            ; Yes: return
.3a2336					decrement
.3a2336	c2 20		rep #$20	            REP #$20
.3a2338	38		sec		            SEC
.3a2339	a5 0c		lda $080c	            LDA SCRATCH
.3a233b	e9 01 00	sbc #$0001	            SBC #1
.3a233e	85 0c		sta $080c	            STA SCRATCH
.3a2340	e2 20		sep #$20	            SEP #$20
.3a2342	a5 0e		lda $080e	            LDA SCRATCH+2
.3a2344	e9 00		sbc #$00	            SBC #0
.3a2346	85 0e		sta $080e	            STA SCRATCH+2
.3a2348	c2 20		rep #$20	            REP #$20
.3a234a	38		sec		            SEC
.3a234b	a5 08		lda $0808	            LDA INDEX
.3a234d	e9 01 00	sbc #$0001	            SBC #1
.3a2350	85 08		sta $0808	            STA INDEX
.3a2352	e2 20		sep #$20	            SEP #$20
.3a2354	a5 0a		lda $080a	            LDA INDEX+2
.3a2356	e9 00		sbc #$00	            SBC #0
.3a2358	85 0a		sta $080a	            STA INDEX+2
.3a235a	80 c6		bra $3a2322	            BRA mvu_loop        ; And try again
.3a235c	28		plp		done        PLP
.3a235d	60		rts		            RTS
.3a235e					DELLINE
.3a235e	08		php		            PHP
.3a235f	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; SCRATCH := INDEX + [INDEX].LINK (address of the following line)
.3a2362	c2 20		rep #$20	            REP #$20
.3a2364	18		clc		            CLC
.3a2365	a5 08		lda $0808	            LDA INDEX
.3a2367	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a2369	85 0c		sta $080c	            STA SCRATCH
.3a236b	e2 20		sep #$20	            SEP #$20
.3a236d	a5 0a		lda $080a	            LDA INDEX+2
.3a236f	69 00		adc #$00	            ADC #0
.3a2371	85 0e		sta $080e	            STA SCRATCH+2
.3a2373	c2 20		rep #$20	            REP #$20
.3a2375	18		clc		            CLC
.3a2376	a5 d9		lda $08d9	            LDA LASTLINE
.3a2378	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a237b	85 00		sta $0800	            STA BIP
.3a237d	e2 20		sep #$20	            SEP #$20
.3a237f	a5 db		lda $08db	            LDA LASTLINE+2
.3a2381	69 00		adc #$00	            ADC #0
.3a2383	85 02		sta $0802	            STA BIP+2
.3a2385	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; LASTLINE := LASTLINE - [INDEX].LINK
.3a2388	c2 20		rep #$20	            REP #$20
.3a238a	38		sec		            SEC
.3a238b	a5 d9		lda $08d9	            LDA LASTLINE
.3a238d	f7 08		sbc [$0808],y	            SBC [INDEX],Y
.3a238f	85 d9		sta $08d9	            STA LASTLINE
.3a2391	e2 20		sep #$20	            SEP #$20
.3a2393	a5 db		lda $08db	            LDA LASTLINE+2
.3a2395	e9 00		sbc #$00	            SBC #0
.3a2397	85 db		sta $08db	            STA LASTLINE+2
.3a2399	20 e2 22	jsr $3a22e2	            JSR MVPROGDN
.3a239c					done
.3a239c	20 eb 42	jsr $3a42eb	            JSR S_CLR
.3a239f	28		plp		            PLP
.3a23a0	60		rts		            RTS
.3a23a1					APPLINE
.3a23a1	08		php		            PHP
.3a23a2	08		php		            PHP
.3a23a3	c2 20		rep #$20	            REP #$20
.3a23a5	48		pha		            PHA
.3a23a6	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a23a9	5b		tcd		            TCD
.3a23aa	68		pla		            PLA
.3a23ab	28		plp		            PLP
.3a23ac	c2 30		rep #$30	            REP #$30
.3a23ae	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the line number of the new line
.3a23b1	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.3a23b3	18		clc		            CLC                 ; Point INDEX to the position to store the tokens
.3a23b4	a5 d9		lda $08d9	            LDA LASTLINE
.3a23b6	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a23b9	85 08		sta $0808	            STA INDEX
.3a23bb	e2 20		sep #$20	            SEP #$20
.3a23bd	a5 db		lda $08db	            LDA LASTLINE+2
.3a23bf	69 00		adc #$00	            ADC #0
.3a23c1	85 0a		sta $080a	            STA INDEX+2
.3a23c3	e2 20		sep #$20	            SEP #$20
.3a23c5	a0 00 00	ldy #$0000	            LDY #0
.3a23c8	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Copy the tokenized line to its place in the code
.3a23ca	97 08		sta [$0808],y	            STA [INDEX],Y
.3a23cc	f0 03		beq $3a23d1	            BEQ copy_done
.3a23ce	c8		iny		            INY
.3a23cf	80 f7		bra $3a23c8	            BRA copy_loop
.3a23d1					copy_done
.3a23d1	c2 20		rep #$20	            REP #$20
.3a23d3	98		tya		            TYA
.3a23d4	18		clc		            CLC
.3a23d5	69 05 00	adc #$0005	            ADC #LINE_TOKENS+1
.3a23d8	85 0c		sta $080c	            STA SCRATCH
.3a23da	c2 20		rep #$20	            REP #$20
.3a23dc	a0 00 00	ldy #$0000	            LDY #LINE_LINK      ; Set link to the offset to the next line
.3a23df	a5 0c		lda $080c	            LDA SCRATCH
.3a23e1	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.3a23e3	c2 20		rep #$20	            REP #$20
.3a23e5	18		clc		            CLC
.3a23e6	a5 d9		lda $08d9	            LDA LASTLINE
.3a23e8	65 0c		adc $080c	            ADC SCRATCH
.3a23ea	85 0c		sta $080c	            STA SCRATCH
.3a23ec	e2 20		sep #$20	            SEP #$20
.3a23ee	a5 db		lda $08db	            LDA LASTLINE+2
.3a23f0	69 00		adc #$00	            ADC #0
.3a23f2	85 db		sta $08db	            STA LASTLINE+2
.3a23f4	c2 20		rep #$20	            REP #$20
.3a23f6	a5 0c		lda $080c	            LDA SCRATCH
.3a23f8	85 d9		sta $08d9	            STA LASTLINE
.3a23fa	c2 20		rep #$20	            REP #$20
.3a23fc	a0 00 00	ldy #$0000	            LDY #0
.3a23ff	a9 00 00	lda #$0000	            LDA #0
.3a2402	97 d9		sta [$08d9],y	blank_loop  STA [LASTLINE],Y    ; Set the "line" after the last line to nulls
.3a2404	c8		iny		            INY
.3a2405	c0 05 00	cpy #$0005	            CPY #LINE_TOKENS+1
.3a2408	d0 f8		bne $3a2402	            BNE blank_loop
.3a240a	20 eb 42	jsr $3a42eb	            JSR S_CLR
.3a240d	28		plp		            PLP
.3a240e	60		rts		            RTS
.3a240f					FINDINSPT
.3a240f	0b		phd		            PHD
.3a2410	08		php		            PHP
.3a2411	08		php		            PHP
.3a2412	c2 20		rep #$20	            REP #$20
.3a2414	48		pha		            PHA
.3a2415	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a2418	5b		tcd		            TCD
.3a2419	68		pla		            PLA
.3a241a	28		plp		            PLP
.3a241b	c2 30		rep #$30	            REP #$30
.3a241d	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a2420	85 08		sta $0808	            STA INDEX
.3a2422	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a2425	85 0a		sta $080a	            STA INDEX+2
.3a2427	a0 02 00	ldy #$0002	loop        LDY #LINE_NUMBER
.3a242a	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a242c	f0 1d		beq $3a244b	            BEQ found_end           ; Got to end without finding it
.3a242e	c5 d7		cmp $08d7	            CMP LINENUM
.3a2430	f0 25		beq $3a2457	            BEQ found_line          ; LINENUM = [INDEX].LINE_NUMBER: return we found the exact line
.3a2432	b0 1d		bcs $3a2451	            BGE found_spot          ; LINENUM > [INDEX].LINE_NUMBER: return we found spot to insert
.3a2434	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a2437	18		clc		            CLC                     ; Move INDEX to the next line
.3a2438	a5 08		lda $0808	            LDA INDEX
.3a243a	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a243c	85 0c		sta $080c	            STA SCRATCH
.3a243e	a5 0a		lda $080a	            LDA INDEX+2
.3a2440	69 00 00	adc #$0000	            ADC #0
.3a2443	85 0a		sta $080a	            STA INDEX+2
.3a2445	a5 0c		lda $080c	            LDA SCRATCH
.3a2447	85 08		sta $0808	            STA INDEX
.3a2449	80 dc		bra $3a2427	            BRA loop                ; And check that line
.3a244b	a9 00 00	lda #$0000	found_end   LDA #0                  ; Return that we reached the end of the program
.3a244e	28		plp		            PLP
.3a244f	2b		pld		            PLD
.3a2450	60		rts		            RTS
.3a2451	a9 01 00	lda #$0001	found_spot  LDA #1                  ; Return that we the found the spot to insert the line
.3a2454	28		plp		            PLP                     ; But that it wasn't already there
.3a2455	2b		pld		            PLD
.3a2456	60		rts		            RTS
.3a2457	a9 02 00	lda #$0002	found_line  LDA #2                  ; Return that we found the line
.3a245a	28		plp		            PLP
.3a245b	2b		pld		            PLD
.3a245c	60		rts		            RTS
.3a245d					INSLINE
.3a245d	08		php		            PHP
.3a245e	c2 30		rep #$30	            REP #$30
.3a2460	a9 05 00	lda #$0005	            LDA #LINE_TOKENS+1  ; Set SCRATCH2 to the size of the line header with the end-of-line
.3a2463	85 10		sta $0810	            STA SCRATCH2
.3a2465	a0 00 00	ldy #$0000	            LDY #0
.3a2468					count_loop
.3a2468	e2 20		sep #$20	            SEP #$20
.3a246a	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the byte of the line
.3a246c	f0 07		beq $3a2475	            BEQ shift_prog      ; If it's end-of-line, SCRATCH2 is the length
.3a246e	c2 20		rep #$20	            REP #$20
.3a2470	e6 10		inc $0810	            INC SCRATCH2
.3a2472	c8		iny		            INY
.3a2473	80 f3		bra $3a2468	            BRA count_loop      ; Count and continue
.3a2475					shift_prog
.3a2475	c2 20		rep #$20	            REP #$20
.3a2477	a5 08		lda $0808	            LDA INDEX           ; BIP = the address of the first byte for the new line
.3a2479	85 00		sta $0800	            STA BIP
.3a247b	a5 0a		lda $080a	            LDA INDEX+2
.3a247d	85 02		sta $0802	            STA BIP+2
.3a247f	18		clc		            CLC                 ; SCRATCH = address of highest byte to copy
.3a2480	a5 d9		lda $08d9	            LDA LASTLINE
.3a2482	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2485	85 0c		sta $080c	            STA SCRATCH
.3a2487	a5 db		lda $08db	            LDA LASTLINE+2
.3a2489	69 00 00	adc #$0000	            ADC #0
.3a248c	85 0e		sta $080e	            STA SCRATCH+2
.3a248e	18		clc		            CLC                 ; Adjust LASTLINE to its new position after the insert
.3a248f	a5 d9		lda $08d9	            LDA LASTLINE
.3a2491	65 10		adc $0810	            ADC SCRATCH2
.3a2493	85 d9		sta $08d9	            STA LASTLINE
.3a2495	a5 db		lda $08db	            LDA LASTLINE+2
.3a2497	69 00 00	adc #$0000	            ADC #0
.3a249a	85 db		sta $08db	            STA LASTLINE+2
.3a249c	18		clc		            CLC                 ; INDEX = address of the highest location to copy into
.3a249d	a5 d9		lda $08d9	            LDA LASTLINE
.3a249f	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a24a2	85 08		sta $0808	            STA INDEX
.3a24a4	a5 db		lda $08db	            LDA LASTLINE+2
.3a24a6	69 00 00	adc #$0000	            ADC #0
.3a24a9	85 0a		sta $080a	            STA INDEX+2
.3a24ab	20 21 23	jsr $3a2321	            JSR MVPROGUP
.3a24ae	c2 20		rep #$20	            REP #$20
.3a24b0	a5 10		lda $0810	            LDA SCRATCH2
.3a24b2	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a24b5	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINK_LINK = length of the new line
.3a24b7	a5 d7		lda $08d7	            LDA LINENUM
.3a24b9	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.3a24bc	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINE_NUMBER = number of the new line
.3a24be	18		clc		            CLC                 ; Point BIP to the first byte of the new line
.3a24bf	a5 00		lda $0800	            LDA BIP
.3a24c1	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a24c4	85 00		sta $0800	            STA BIP
.3a24c6	a5 02		lda $0802	            LDA BIP+2
.3a24c8	69 00 00	adc #$0000	            ADC #0
.3a24cb	85 02		sta $0802	            STA BIP+2
.3a24cd	a0 00 00	ldy #$0000	            LDY #0
.3a24d0	e2 20		sep #$20	            SEP #$20
.3a24d2	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Get the byte of the tokenized line
.3a24d4	97 00		sta [$0800],y	            STA [BIP],Y         ; Copy it to its correct location in the program
.3a24d6	f0 03		beq $3a24db	            BEQ done            ; If it was end-of-line byte, we're done
.3a24d8	c8		iny		            INY
.3a24d9	80 f7		bra $3a24d2	            BRA copy_loop       ; Otherwise, continue with the next
.3a24db					done
.3a24db	20 eb 42	jsr $3a42eb	            JSR S_CLR
.3a24de	28		plp		            PLP
.3a24df	60		rts		            RTS
.3a24e0					ADDLINE
.3a24e0	08		php		            PHP
.3a24e1	c2 30		rep #$30	            REP #$30
.3a24e3	85 d7		sta $08d7	            STA LINENUM
.3a24e5	20 0f 24	jsr $3a240f	            JSR FINDINSPT
.3a24e8	c9 00 00	cmp #$0000	            CMP #0
.3a24eb	f0 2c		beq $3a2519	            BEQ do_append       ; End-of-program found, add the line to the end
.3a24ed	c9 01 00	cmp #$0001	            CMP #1
.3a24f0	f0 22		beq $3a2514	            BEQ do_insert       ; Spot was found: insertion required
.3a24f2	c2 20		rep #$20	            REP #$20
.3a24f4	a5 08		lda $0808	            LDA INDEX
.3a24f6	48		pha		            PHA
.3a24f7	a5 0a		lda $080a	            LDA INDEX+2
.3a24f9	48		pha		            PHA
.3a24fa	20 5e 23	jsr $3a235e	            JSR DELLINE
.3a24fd	68		pla		            PLA
.3a24fe	85 0a		sta $080a	            STA INDEX+2
.3a2500	68		pla		            PLA
.3a2501	85 08		sta $0808	            STA INDEX
.3a2503	a5 1a		lda $081a	            LDA CURLINE         ; Check to see if there is any non-whitespace on the line
.3a2505	85 00		sta $0800	            STA BIP
.3a2507	a5 1c		lda $081c	            LDA CURLINE+2
.3a2509	85 02		sta $0802	            STA BIP+2
.3a250b	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a250e	e2 20		sep #$20	            SEP #$20
.3a2510	a7 00		lda [$0800]	            LDA [BIP]
.3a2512	f0 0a		beq $3a251e	            BEQ done            ; If not, we're done
.3a2514					do_insert
.3a2514	20 5d 24	jsr $3a245d	            JSR INSLINE
.3a2517	80 05		bra $3a251e	            BRA done
.3a2519	a5 d7		lda $08d7	do_append   LDA LINENUM
.3a251b	20 a1 23	jsr $3a23a1	            JSR APPLINE
.3a251e	28		plp		done        PLP
.3a251f	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\repl.s

="#"					CHAR_DIR = '#'
="|"					CHAR_BRUN = '|'
.3a2520					EXPANDLINE
.3a2520	0b		phd		                PHD
.3a2521	08		php		                PHP
.3a2522	08		php		            PHP
.3a2523	c2 20		rep #$20	            REP #$20
.3a2525	48		pha		            PHA
.3a2526	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a2529	5b		tcd		            TCD
.3a252a	68		pla		            PLA
.3a252b	28		plp		            PLP
.3a252c	e2 20		sep #$20	            SEP #$20
.3a252e	c2 10		rep #$10	            REP #$10
.3a2530	a2 00 00	ldx #$0000	                LDX #0
.3a2533	bd 00 4f	lda $4f00,x	count_loop      LDA INPUTBUF,X              ; Count the number of characters in the input
.3a2536	f0 03		beq $3a253b	                BEQ save_size
.3a2538	e8		inx		                INX
.3a2539	80 f8		bra $3a2533	                BRA count_loop
.3a253b	86 0c		stx $080c	save_size       STX SCRATCH                 ; Save the size in SCRATCH
.3a253d	c2 30		rep #$30	            REP #$30
.3a253f	8a		txa		                TXA
.3a2540	c9 02 00	cmp #$0002	                CMP #2                      ; Are there arguments?
.3a2543	90 12		bcc $3a2557	                BLT start_copy              ; No: just replace the whole string
.3a2545	3a		dec a		                DEC A
.3a2546	18		clc		                CLC
.3a2547	69 00 4f	adc #$4f00	                ADC #<>INPUTBUF
.3a254a	aa		tax		                TAX                         ; X <-- INPUTBUF + len(INPUTBUF) - 1
.3a254b	18		clc		                CLC                         ; Y <-- INPUTBUF + len(INPUTBUF) - 1 + len(substitution)
.3a254c	65 8f		adc $088f	                ADC MCOUNT
.3a254e	a8		tay		                TAY
.3a254f	a5 0c		lda $080c	                LDA SCRATCH
.3a2551	3a		dec a		                DEC A
.3a2552	8b		phb		                PHB
.3a2553	44 00 00	mvp #$00,#$00	                MVP #`INPUTBUF,#`INPUTBUF   ; Make room for the substitition
.3a2556	ab		plb		                PLB
.3a2557					start_copy
.3a2557	c2 20		rep #$20	            REP #$20
.3a2559	a6 55		ldx $0855	                LDX MARG1                   ; Source is data to copy
.3a255b	a0 00 4f	ldy #$4f00	                LDY #<>INPUTBUF             ; Destination is input buffer
.3a255e	a5 8f		lda $088f	                LDA MCOUNT                  ; Number of bytes to copy
.3a2560	8b		phb		                PHB
.3a2561	54 00 3a	mvn #$3a,#$00	                MVN #`EXPANDLINE,#`INPUTBUF ; Copy the data
.3a2564	ab		plb		                PLB
.3a2565	e2 20		sep #$20	            SEP #$20
.3a2567	a5 0c		lda $080c	                LDA SCRATCH                 ; Check again to see if we need quotes
.3a2569	c9 02		cmp #$02	                CMP #2
.3a256b	90 18		bcc $3a2585	                BLT done
.3a256d	a6 8f		ldx $088f	                LDX MCOUNT                  ; If so, add a quote mark here
.3a256f	a9 22		lda #$22	                LDA #CHAR_DQUOTE
.3a2571	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a2574	e8		inx		skip_to_end     INX                         ; Move to the end of the input string
.3a2575	bd 00 4f	lda $4f00,x	                LDA INPUTBUF,X
.3a2578	d0 fa		bne $3a2574	                BNE skip_to_end
.3a257a	a9 22		lda #$22	                LDA #CHAR_DQUOTE            ; Add the quote to the end of the string
.3a257c	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a257f	a9 00		lda #$00	                LDA #0                      ; And terminate with a NULL
.3a2581	e8		inx		                INX
.3a2582	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a2585	28		plp		done            PLP
.3a2586	2b		pld		                PLD
.3a2587	60		rts		            RTS
.3a2588					PREPROCESS
.3a2588	da		phx		                PHX
.3a2589	5a		phy		                PHY
.3a258a	8b		phb		                PHB
.3a258b	0b		phd		                PHD
.3a258c	08		php		                PHP
.3a258d	08		php		            PHP
.3a258e	c2 20		rep #$20	            REP #$20
.3a2590	48		pha		            PHA
.3a2591	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a2594	5b		tcd		            TCD
.3a2595	68		pla		            PLA
.3a2596	28		plp		            PLP
.3a2597	e2 20		sep #$20	            SEP #$20
.3a2599	c2 10		rep #$10	            REP #$10
.3a259b	ad 00 4f	lda $4f00	                LDA INPUTBUF            ; Check the first character
.3a259e	c9 23		cmp #$23	                CMP #CHAR_DIR           ; Is it the DIR character?
.3a25a0	f0 0a		beq $3a25ac	                BEQ expand_dir          ; Yes: expand the DIR command into place
.3a25a2	c9 7c		cmp #$7c	                CMP #CHAR_BRUN          ; Is it the BRUN character?
.3a25a4	f0 17		beq $3a25bd	                BEQ expand_brun         ; Yes: expand the BRUN command into place
.3a25a6	28		plp		done            PLP
.3a25a7	2b		pld		                PLD
.3a25a8	ab		plb		                PLB
.3a25a9	7a		ply		                PLY
.3a25aa	fa		plx		                PLX
.3a25ab	60		rts		            RTS
.3a25ac					expand_dir
.3a25ac	c2 20		rep #$20	            REP #$20
.3a25ae	a9 03 00	lda #$0003	                LDA #3                  ; Set size of substitution value
.3a25b1	85 8f		sta $088f	                STA MCOUNT
.3a25b3	a9 ce 25	lda #$25ce	                LDA #<>dir_text         ; Set pointer to substitution value
.3a25b6	85 55		sta $0855	                STA MARG1
.3a25b8	20 20 25	jsr $3a2520	            JSR EXPANDLINE
.3a25bb	80 e9		bra $3a25a6	                BRA done
.3a25bd					expand_brun
.3a25bd	c2 20		rep #$20	            REP #$20
.3a25bf	a9 04 00	lda #$0004	                LDA #4                  ; Set size of substitution value
.3a25c2	85 8f		sta $088f	                STA MCOUNT
.3a25c4	a9 d2 25	lda #$25d2	                LDA #<>brun_text        ; Set pointer to substitution value
.3a25c7	85 55		sta $0855	                STA MARG1
.3a25c9	20 20 25	jsr $3a2520	            JSR EXPANDLINE
.3a25cc	80 d8		bra $3a25a6	                BRA done
>3a25ce	44 49 52 00			dir_text        .null "DIR"             ; Expansion of the DIR character
>3a25d2	42 52 55 4e 00			brun_text       .null "BRUN"            ; Expansion of the BRUN character
.3a25d7					PRREADY
.3a25d7	8b		phb		                PHB
.3a25d8	08		php		                PHP
.3a25d9	20 1d 01	jsr $3a011d	            JSR ENSURETEXT
.3a25dc	08		php		            PHP
.3a25dd	e2 20		sep #$20	            SEP #$20
.3a25df	48		pha		            PHA
.3a25e0	a9 3a		lda #$3a	            LDA #`MPROMPT
.3a25e2	48		pha		            PHA
.3a25e3	ab		plb		            PLB
.3a25e4	68		pla		            PLA
.3a25e5	28		plp		            PLP
.3a25e6	a2 69 d2	ldx #$d269	                LDX #<>MPROMPT
.3a25e9	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a25ec	28		plp		                PLP
.3a25ed	ab		plb		                PLB
.3a25ee	60		rts		            RTS
.3a25ef					IREADLINE
.3a25ef	08		php		                PHP
.3a25f0	e2 30		sep #$30	            SEP #$30
.3a25f2	a9 01		lda #$01	                LDA #1
.3a25f4	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a25f7					read_loop
.3a25f7	20 db 00	jsr $3a00db	            JSR GETKEYE
.3a25fa	f0 06		beq $3a2602	                BEQ done
.3a25fc	c9 0d		cmp #$0d	                CMP #CHAR_CR
.3a25fe	f0 02		beq $3a2602	                BEQ done
.3a2600	80 f5		bra $3a25f7	                BRA read_loop
.3a2602	28		plp		done            PLP
.3a2603	60		rts		            RTS
.3a2604					PROCESS
.3a2604	0b		phd		                PHD
.3a2605	08		php		                PHP
.3a2606	08		php		            PHP
.3a2607	c2 20		rep #$20	            REP #$20
.3a2609	48		pha		            PHA
.3a260a	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a260d	5b		tcd		            TCD
.3a260e	68		pla		            PLA
.3a260f	28		plp		            PLP
.3a2610	c2 30		rep #$30	            REP #$30
.3a2612	64 d7		stz $08d7	                STZ LINENUM
.3a2614	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF         ; Attempt to tokenize the line that was read
.3a2617	85 1a		sta $081a	                STA CURLINE
.3a2619	a9 00 00	lda #$0000	                LDA #`CURLINE
.3a261c	85 1c		sta $081c	                STA CURLINE+2
.3a261e	20 87 08	jsr $3a0887	            JSR TOKENIZE
.3a2621	c2 20		rep #$20	            REP #$20
.3a2623	a5 d7		lda $08d7	                LDA LINENUM             ; Did we get a line number?
.3a2625	d0 05		bne $3a262c	                BNE update_line         ; Yes: attempt to add it to the program
.3a2627	20 c7 21	jsr $3a21c7	            JSR EXECCMD
.3a262a	80 07		bra $3a2633	                BRA done
.3a262c					update_line
.3a262c	20 e0 24	jsr $3a24e0	            JSR ADDLINE
.3a262f	28		plp		no_prompt       PLP
.3a2630	2b		pld		                PLD
.3a2631	38		sec		                SEC
.3a2632	60		rts		            RTS
.3a2633	28		plp		done            PLP
.3a2634	2b		pld		                PLD
.3a2635	18		clc		                CLC
.3a2636	60		rts		            RTS
.3a2637					INTERACT
.3a2637	c2 30		rep #$30	            REP #$30
.3a2639	a2 ff fe	ldx #$feff	                LDX #<>STACK_END
.3a263c	9a		txs		                TXS
.3a263d					ready_loop
.3a263d	20 d7 25	jsr $3a25d7	            JSR PRREADY
.3a2640					no_ready_loop
.3a2640	20 08 00	jsr $3a0008	            JSR READLINE
.3a2643	20 0c 00	jsr $3a000c	            JSR SCRCOPYLINE
.3a2646	a9 00 00	lda #$0000	                LDA #0              ; Hide the cursor
.3a2649	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a264c	20 88 25	jsr $3a2588	            JSR PREPROCESS
.3a264f	20 04 26	jsr $3a2604	            JSR PROCESS
.3a2652	b0 ec		bcs $3a2640	                BCS no_ready_loop
.3a2654	80 e7		bra $3a263d	                BRA ready_loop
>3ad269	0d 52 45 41 44 59 0d 00		MPROMPT         .null 13,"READY",13

;******  Return to file: src\basic816.s


;******  Processing file: src\operators.s

.3a2656					OP_PLUS
.3a2656	08		php		            PHP
.3a2657	e2 20		sep #$20	            SEP #$20
.3a2659	20 8e 07	jsr $3a078e	            JSR ASS_ARGS_NUMSTR
.3a265c	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a265e	f0 2c		beq $3a268c	            BEQ is_integer
.3a2660	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2662	f0 2d		beq $3a2691	            BEQ is_float
.3a2664	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a2666	f0 1f		beq $3a2687	            BEQ is_string
.3a2668					type_error
.3a2668	08		php		            PHP
.3a2669	c2 20		rep #$20	            REP #$20
.3a266b	48		pha		            PHA
.3a266c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a266f	5b		tcd		            TCD
.3a2670	68		pla		            PLA
.3a2671	28		plp		            PLP
.3a2672	e2 20		sep #$20	            SEP #$20
.3a2674	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2676	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a267a	c2 20		rep #$20	            REP #$20
.3a267c	29 ff 00	and #$00ff	            AND #$00FF
.3a267f	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2682	e2 20		sep #$20	            SEP #$20
.3a2684	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2687					is_string
.3a2687	20 37 15	jsr $3a1537	            JSR STRCONCAT
.3a268a	80 08		bra $3a2694	            BRA done
.3a268c					is_integer
.3a268c	20 1e 52	jsr $3a521e	            JSR OP_INT_ADD
.3a268f	80 03		bra $3a2694	            BRA done
.3a2691					is_float
.3a2691	20 8d 54	jsr $3a548d	            JSR OP_FP_ADD
.3a2694	28		plp		done        PLP
.3a2695	60		rts		            RTS
.3a2696					OP_MINUS
.3a2696	08		php		            PHP
.3a2697	e2 20		sep #$20	            SEP #$20
.3a2699	20 40 07	jsr $3a0740	            JSR ASS_ARGS_NUM
.3a269c	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a269e	f0 23		beq $3a26c3	            BEQ is_integer
.3a26a0	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a26a2	f0 24		beq $3a26c8	            BEQ is_float
.3a26a4					type_error
.3a26a4	08		php		            PHP
.3a26a5	c2 20		rep #$20	            REP #$20
.3a26a7	48		pha		            PHA
.3a26a8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a26ab	5b		tcd		            TCD
.3a26ac	68		pla		            PLA
.3a26ad	28		plp		            PLP
.3a26ae	e2 20		sep #$20	            SEP #$20
.3a26b0	a9 04		lda #$04	            LDA #ERR_TYPE
.3a26b2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a26b6	c2 20		rep #$20	            REP #$20
.3a26b8	29 ff 00	and #$00ff	            AND #$00FF
.3a26bb	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a26be	e2 20		sep #$20	            SEP #$20
.3a26c0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a26c3					is_integer
.3a26c3	20 30 52	jsr $3a5230	            JSR OP_INT_SUB
.3a26c6	80 03		bra $3a26cb	            BRA done
.3a26c8					is_float
.3a26c8	20 82 54	jsr $3a5482	            JSR OP_FP_SUB
.3a26cb	28		plp		done        PLP
.3a26cc	60		rts		            RTS
.3a26cd					OP_MULTIPLY
.3a26cd	08		php		            PHP
.3a26ce	e2 20		sep #$20	            SEP #$20
.3a26d0	20 40 07	jsr $3a0740	            JSR ASS_ARGS_NUM
.3a26d3	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a26d5	f0 23		beq $3a26fa	            BEQ is_integer
.3a26d7	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a26d9	f0 24		beq $3a26ff	            BEQ is_float
.3a26db					type_error
.3a26db	08		php		            PHP
.3a26dc	c2 20		rep #$20	            REP #$20
.3a26de	48		pha		            PHA
.3a26df	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a26e2	5b		tcd		            TCD
.3a26e3	68		pla		            PLA
.3a26e4	28		plp		            PLP
.3a26e5	e2 20		sep #$20	            SEP #$20
.3a26e7	a9 04		lda #$04	            LDA #ERR_TYPE
.3a26e9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a26ed	c2 20		rep #$20	            REP #$20
.3a26ef	29 ff 00	and #$00ff	            AND #$00FF
.3a26f2	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a26f5	e2 20		sep #$20	            SEP #$20
.3a26f7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a26fa					is_integer
.3a26fa	20 42 52	jsr $3a5242	            JSR OP_INT_MUL
.3a26fd	80 03		bra $3a2702	            BRA done
.3a26ff					is_float
.3a26ff	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a2702	28		plp		done        PLP
.3a2703	60		rts		            RTS
.3a2704					OP_DIVIDE
.3a2704	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a2707	20 db 06	jsr $3a06db	            JSR ASS_ARG2_FLOAT
.3a270a	20 d8 54	jsr $3a54d8	            JSR OP_FP_DIV
.3a270d	60		rts		            RTS
.3a270e					OP_MOD
.3a270e	a5 23		lda $0823	            LDA ARGUMENT1
.3a2710	8f 1a 01 00	sta $00011a	            STA @lD1_OPERAND_B
.3a2714	a5 29		lda $0829	            LDA ARGUMENT2
.3a2716	8f 18 01 00	sta $000118	            STA @lD1_OPERAND_A
.3a271a	af 1e 01 00	lda $00011e	            LDA @lD1_REMAINDER
.3a271e	85 23		sta $0823	            STA ARGUMENT1
.3a2720	60		rts		            RTS
.3a2721					OP_POW
.3a2721	08		php		            PHP
.3a2722	c2 30		rep #$30	            REP #$30
.3a2724	48		pha		            PHA
.3a2725	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a2728	a5 2d		lda $082d	            LDA ARGTYPE2
.3a272a	c9 00 00	cmp #$0000	            CMP #TYPE_INTEGER
.3a272d	d0 0d		bne $3a273c	            BNE flt_exp
.3a272f	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a2731	d0 09		bne $3a273c	            BNE flt_exp
.3a2733	da		phx		            PHX
.3a2734	a6 29		ldx $0829	            LDX ARGUMENT2
.3a2736	20 f6 61	jsr $3a61f6	            JSR Q_FP_POW_INT
.3a2739	fa		plx		            PLX
.3a273a	80 1c		bra $3a2758	            BRA done
.3a273c					flt_exp
.3a273c	20 db 06	jsr $3a06db	            JSR ASS_ARG2_FLOAT
.3a273f	c2 20		rep #$20	            REP #$20
.3a2741	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a2743	48		pha		            PHA
.3a2744	a5 29		lda $0829	            LDA ARGUMENT2
.3a2746	48		pha		            PHA
.3a2747	20 81 60	jsr $3a6081	            JSR FP_LN
.3a274a	c2 20		rep #$20	            REP #$20
.3a274c	68		pla		            PLA
.3a274d	85 29		sta $0829	            STA ARGUMENT2
.3a274f	68		pla		            PLA
.3a2750	85 2b		sta $082b	            STA ARGUMENT2+2
.3a2752	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a2755	20 60 62	jsr $3a6260	            JSR FP_EXP
.3a2758	68		pla		done        PLA
.3a2759	28		plp		            PLP
.3a275a	60		rts		            RTS
.3a275b					OP_AND
.3a275b	08		php		            PHP
.3a275c	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a275f	20 6d 05	jsr $3a056d	            JSR ASS_ARG2_INT
.3a2762	c2 20		rep #$20	            REP #$20
.3a2764	a5 23		lda $0823	            LDA ARGUMENT1
.3a2766	25 29		and $0829	            AND ARGUMENT2
.3a2768	85 23		sta $0823	            STA ARGUMENT1
.3a276a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a276c	25 2b		and $082b	            AND ARGUMENT2+2
.3a276e	85 25		sta $0825	            STA ARGUMENT1+2
.3a2770	28		plp		            PLP
.3a2771	60		rts		            RTS
.3a2772					OP_OR
.3a2772	08		php		            PHP
.3a2773	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a2776	20 6d 05	jsr $3a056d	            JSR ASS_ARG2_INT
.3a2779	c2 20		rep #$20	            REP #$20
.3a277b	a5 23		lda $0823	            LDA ARGUMENT1
.3a277d	05 29		ora $0829	            ORA ARGUMENT2
.3a277f	85 23		sta $0823	            STA ARGUMENT1
.3a2781	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a2783	05 2b		ora $082b	            ORA ARGUMENT2+2
.3a2785	85 25		sta $0825	            STA ARGUMENT1+2
.3a2787	28		plp		done        PLP
.3a2788	60		rts		            RTS
.3a2789					OP_NOT
.3a2789	08		php		            PHP
.3a278a	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a278d	c2 20		rep #$20	            REP #$20
.3a278f	a5 23		lda $0823	            LDA ARGUMENT1
.3a2791	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a2794	85 23		sta $0823	            STA ARGUMENT1
.3a2796	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a2798	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a279b	85 25		sta $0825	            STA ARGUMENT1+2
.3a279d	28		plp		done        PLP
.3a279e	60		rts		            RTS
.3a279f					OP_LT
.3a279f	08		php		            PHP
.3a27a0	e2 20		sep #$20	            SEP #$20
.3a27a2	20 8e 07	jsr $3a078e	            JSR ASS_ARGS_NUMSTR
.3a27a5	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a27a7	f0 2c		beq $3a27d5	            BEQ is_integer
.3a27a9	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a27ab	f0 2d		beq $3a27da	            BEQ is_float
.3a27ad	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a27af	f0 1f		beq $3a27d0	            BEQ is_string
.3a27b1					type_error
.3a27b1	08		php		            PHP
.3a27b2	c2 20		rep #$20	            REP #$20
.3a27b4	48		pha		            PHA
.3a27b5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a27b8	5b		tcd		            TCD
.3a27b9	68		pla		            PLA
.3a27ba	28		plp		            PLP
.3a27bb	e2 20		sep #$20	            SEP #$20
.3a27bd	a9 04		lda #$04	            LDA #ERR_TYPE
.3a27bf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a27c3	c2 20		rep #$20	            REP #$20
.3a27c5	29 ff 00	and #$00ff	            AND #$00FF
.3a27c8	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a27cb	e2 20		sep #$20	            SEP #$20
.3a27cd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a27d0					is_string
.3a27d0	20 bf 16	jsr $3a16bf	            JSR OP_STR_LT
.3a27d3	80 08		bra $3a27dd	            BRA done
.3a27d5					is_integer
.3a27d5	20 43 53	jsr $3a5343	            JSR OP_INT_LT
.3a27d8	80 03		bra $3a27dd	            BRA done
.3a27da					is_float
.3a27da	20 b8 5a	jsr $3a5ab8	            JSR OP_FP_LT
.3a27dd	28		plp		done        PLP
.3a27de	60		rts		            RTS
.3a27df					OP_GT
.3a27df	08		php		            PHP
.3a27e0	e2 20		sep #$20	            SEP #$20
.3a27e2	20 8e 07	jsr $3a078e	            JSR ASS_ARGS_NUMSTR
.3a27e5	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a27e7	f0 2c		beq $3a2815	            BEQ is_integer
.3a27e9	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a27eb	f0 2d		beq $3a281a	            BEQ is_float
.3a27ed	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a27ef	f0 1f		beq $3a2810	            BEQ is_string
.3a27f1					type_error
.3a27f1	08		php		            PHP
.3a27f2	c2 20		rep #$20	            REP #$20
.3a27f4	48		pha		            PHA
.3a27f5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a27f8	5b		tcd		            TCD
.3a27f9	68		pla		            PLA
.3a27fa	28		plp		            PLP
.3a27fb	e2 20		sep #$20	            SEP #$20
.3a27fd	a9 04		lda #$04	            LDA #ERR_TYPE
.3a27ff	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2803	c2 20		rep #$20	            REP #$20
.3a2805	29 ff 00	and #$00ff	            AND #$00FF
.3a2808	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a280b	e2 20		sep #$20	            SEP #$20
.3a280d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2810					is_string
.3a2810	20 d6 16	jsr $3a16d6	            JSR OP_STR_GT
.3a2813	80 08		bra $3a281d	            BRA done
.3a2815					is_integer
.3a2815	20 64 53	jsr $3a5364	            JSR OP_INT_GT
.3a2818	80 03		bra $3a281d	            BRA done
.3a281a					is_float
.3a281a	20 cd 5a	jsr $3a5acd	            JSR OP_FP_GT
.3a281d	28		plp		done        PLP
.3a281e	60		rts		            RTS
.3a281f					OP_EQ
.3a281f	08		php		            PHP
.3a2820	e2 20		sep #$20	            SEP #$20
.3a2822	20 8e 07	jsr $3a078e	            JSR ASS_ARGS_NUMSTR
.3a2825	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2827	f0 2c		beq $3a2855	            BEQ is_integer
.3a2829	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a282b	f0 2d		beq $3a285a	            BEQ is_float
.3a282d	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a282f	f0 1f		beq $3a2850	            BEQ is_string
.3a2831					type_error
.3a2831	08		php		            PHP
.3a2832	c2 20		rep #$20	            REP #$20
.3a2834	48		pha		            PHA
.3a2835	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2838	5b		tcd		            TCD
.3a2839	68		pla		            PLA
.3a283a	28		plp		            PLP
.3a283b	e2 20		sep #$20	            SEP #$20
.3a283d	a9 04		lda #$04	            LDA #ERR_TYPE
.3a283f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2843	c2 20		rep #$20	            REP #$20
.3a2845	29 ff 00	and #$00ff	            AND #$00FF
.3a2848	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a284b	e2 20		sep #$20	            SEP #$20
.3a284d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2850					is_string
.3a2850	20 ed 16	jsr $3a16ed	            JSR OP_STR_EQ
.3a2853	80 08		bra $3a285d	            BRA done
.3a2855					is_integer
.3a2855	20 91 53	jsr $3a5391	            JSR OP_INT_EQ
.3a2858	80 03		bra $3a285d	            BRA done
.3a285a					is_float
.3a285a	20 e2 5a	jsr $3a5ae2	            JSR OP_FP_EQ
.3a285d	28		plp		done        PLP
.3a285e	60		rts		            RTS
.3a285f					OP_NE
.3a285f	08		php		            PHP
.3a2860	e2 20		sep #$20	            SEP #$20
.3a2862	20 8e 07	jsr $3a078e	            JSR ASS_ARGS_NUMSTR
.3a2865	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2867	f0 2c		beq $3a2895	            BEQ is_integer
.3a2869	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a286b	f0 2d		beq $3a289a	            BEQ is_float
.3a286d	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a286f	f0 1f		beq $3a2890	            BEQ is_string
.3a2871					type_error
.3a2871	08		php		            PHP
.3a2872	c2 20		rep #$20	            REP #$20
.3a2874	48		pha		            PHA
.3a2875	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2878	5b		tcd		            TCD
.3a2879	68		pla		            PLA
.3a287a	28		plp		            PLP
.3a287b	e2 20		sep #$20	            SEP #$20
.3a287d	a9 04		lda #$04	            LDA #ERR_TYPE
.3a287f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2883	c2 20		rep #$20	            REP #$20
.3a2885	29 ff 00	and #$00ff	            AND #$00FF
.3a2888	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a288b	e2 20		sep #$20	            SEP #$20
.3a288d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2890					is_string
.3a2890	20 04 17	jsr $3a1704	            JSR OP_STR_NE
.3a2893	80 08		bra $3a289d	            BRA done
.3a2895					is_integer
.3a2895	20 af 53	jsr $3a53af	            JSR OP_INT_NE
.3a2898	80 03		bra $3a289d	            BRA done
.3a289a					is_float
.3a289a	20 21 5b	jsr $3a5b21	            JSR OP_FP_NE
.3a289d	28		plp		done        PLP
.3a289e	60		rts		            RTS
.3a289f					OP_GTE
.3a289f	08		php		            PHP
.3a28a0	e2 20		sep #$20	            SEP #$20
.3a28a2	20 8e 07	jsr $3a078e	            JSR ASS_ARGS_NUMSTR
.3a28a5	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a28a7	f0 2c		beq $3a28d5	            BEQ is_integer
.3a28a9	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a28ab	f0 2d		beq $3a28da	            BEQ is_float
.3a28ad	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a28af	f0 1f		beq $3a28d0	            BEQ is_string
.3a28b1					type_error
.3a28b1	08		php		            PHP
.3a28b2	c2 20		rep #$20	            REP #$20
.3a28b4	48		pha		            PHA
.3a28b5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a28b8	5b		tcd		            TCD
.3a28b9	68		pla		            PLA
.3a28ba	28		plp		            PLP
.3a28bb	e2 20		sep #$20	            SEP #$20
.3a28bd	a9 04		lda #$04	            LDA #ERR_TYPE
.3a28bf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a28c3	c2 20		rep #$20	            REP #$20
.3a28c5	29 ff 00	and #$00ff	            AND #$00FF
.3a28c8	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a28cb	e2 20		sep #$20	            SEP #$20
.3a28cd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a28d0					is_string
.3a28d0	20 1b 17	jsr $3a171b	            JSR OP_STR_GTE
.3a28d3	80 08		bra $3a28dd	            BRA done
.3a28d5					is_integer
.3a28d5	20 cd 53	jsr $3a53cd	            JSR OP_INT_GTE
.3a28d8	80 03		bra $3a28dd	            BRA done
.3a28da					is_float
.3a28da	20 0c 5b	jsr $3a5b0c	            JSR OP_FP_GTE
.3a28dd	28		plp		done        PLP
.3a28de	60		rts		            RTS
.3a28df					OP_LTE
.3a28df	08		php		            PHP
.3a28e0	e2 20		sep #$20	            SEP #$20
.3a28e2	20 8e 07	jsr $3a078e	            JSR ASS_ARGS_NUMSTR
.3a28e5	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a28e7	f0 2c		beq $3a2915	            BEQ is_integer
.3a28e9	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a28eb	f0 2d		beq $3a291a	            BEQ is_float
.3a28ed	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a28ef	f0 1f		beq $3a2910	            BEQ is_string
.3a28f1					type_error
.3a28f1	08		php		            PHP
.3a28f2	c2 20		rep #$20	            REP #$20
.3a28f4	48		pha		            PHA
.3a28f5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a28f8	5b		tcd		            TCD
.3a28f9	68		pla		            PLA
.3a28fa	28		plp		            PLP
.3a28fb	e2 20		sep #$20	            SEP #$20
.3a28fd	a9 04		lda #$04	            LDA #ERR_TYPE
.3a28ff	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2903	c2 20		rep #$20	            REP #$20
.3a2905	29 ff 00	and #$00ff	            AND #$00FF
.3a2908	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a290b	e2 20		sep #$20	            SEP #$20
.3a290d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2910					is_string
.3a2910	20 32 17	jsr $3a1732	            JSR OP_STR_LTE
.3a2913	80 08		bra $3a291d	            BRA done
.3a2915					is_integer
.3a2915	20 fa 53	jsr $3a53fa	            JSR OP_INT_LTE
.3a2918	80 03		bra $3a291d	            BRA done
.3a291a					is_float
.3a291a	20 f7 5a	jsr $3a5af7	            JSR OP_FP_LTE
.3a291d	28		plp		done        PLP
.3a291e	60		rts		            RTS
.3a291f					OP_NEGATIVE
.3a291f	08		php		                PHP
.3a2920	e2 20		sep #$20	            SEP #$20
.3a2922	a5 27		lda $0827	                LDA ARGTYPE1                ; Check the type of the argument
.3a2924	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a2926	f0 2d		beq $3a2955	                BEQ int_negate              ; If integer: negate the integer
.3a2928	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a292a	f0 1f		beq $3a294b	                BEQ float_negate            ; If floating point: negate the floating point
.3a292c					type_error
.3a292c	08		php		            PHP
.3a292d	c2 20		rep #$20	            REP #$20
.3a292f	48		pha		            PHA
.3a2930	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2933	5b		tcd		            TCD
.3a2934	68		pla		            PLA
.3a2935	28		plp		            PLP
.3a2936	e2 20		sep #$20	            SEP #$20
.3a2938	a9 04		lda #$04	            LDA #ERR_TYPE
.3a293a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a293e	c2 20		rep #$20	            REP #$20
.3a2940	29 ff 00	and #$00ff	            AND #$00FF
.3a2943	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2946	e2 20		sep #$20	            SEP #$20
.3a2948	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a294b					float_negate
.3a294b	e2 20		sep #$20	            SEP #$20
.3a294d	a5 26		lda $0826	                LDA ARGUMENT1+3             ; Flip the sign bit of the floating point number
.3a294f	49 80		eor #$80	                EOR #$80
.3a2951	85 26		sta $0826	                STA ARGUMENT1+3
.3a2953	80 16		bra $3a296b	                BRA done
.3a2955					int_negate
.3a2955	c2 20		rep #$20	            REP #$20
.3a2957	a5 23		lda $0823	                LDA ARGUMENT1               ; Invert ARGUMENT1
.3a2959	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a295c	85 23		sta $0823	                STA ARGUMENT1
.3a295e	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a2960	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a2963	85 25		sta $0825	                STA ARGUMENT1+2
.3a2965	e6 23		inc $0823	                INC ARGUMENT1               ; And increment to get two's complement
.3a2967	d0 02		bne $3a296b	                BNE done
.3a2969	e6 25		inc $0825	                INC ARGUMENT1+2
.3a296b					done
.3a296b	28		plp		                PLP
.3a296c	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\statements.s


;******  Processing file: src\C256/statements_c256.s

=0					GR_LUT_BLUE = 0
=1					GR_LUT_GREEN = 1
=2					GR_LUT_RED = 2
=3					GR_LUT_ALPHA = 3
=640					GR_DEFAULT_COLS = 640               ; Default number of columns in the display
=480					GR_DEFAULT_ROWS = 480               ; Default number of rows in the display
=8					GR_MAX_LUT = 8                      ; The number of LUTs Vicky supports
=64					SP_MAX = 64                         ; The number of sprites Vicky supports
=8					SP_REG_SIZE = 8                     ; The number of bytes in a sprite's register block
=0					SP_CONTROL = 0                      ; Offset of the control regsiter for a sprite
=1					SP_ADDR = 1                         ; Offset of the pixmap address for a sprite
=4					SP_X_COORD = 4                      ; Offset of the X coordinate for a sprite
=6					SP_Y_COORD = 6                      ; Offset of the Y coordinate for a sprite
=12					TILEMAP_REG_SIZE = 12               ; The number of bytes in a tile map's register set
=4					TILESET_REG_SIZE = 4                ; The number of bytes in a tile set's register set
=2					BM_MAX = 2                          ; Maximum number of bitmaps we support
=$0040					MAX_VRAM_VICKY = $0040              ; Upper limit (exclusive) bank address for VRAM in Vicky address space
=$00f0					MAX_VRAM_CPU = $00F0                ; Upper limit (exclusive) bank address for VRAM in CPU address space
=$00b0					MIN_VRAM_CPU = $00B0                ; Lower limit (inclusive) bank address for VRAM in CPU address space
>3af000					GR_BM0_ADDR     .dword ?            ; Address of bitmap 0 (from CPU's perspective)
>3af004					GR_BM1_ADDR     .dword ?            ; Address of bitmap 1 (from CPU's perspective)
>3af008					GR_BM0_VRAM     .dword ?            ; Address of bitmap 0 (relative to start of VRAM)
>3af00c					GR_BM1_VRAM     .dword ?            ; Address of bitmap 1 (relative to start of VRAM)
>3af010					GR_MAX_COLS     .word ?             ; Width the display in pixels
>3af012					GR_MAX_ROWS     .word ?             ; Height of the display in pixels
>3af014					GR_TOTAL_PIXELS .word ?             ; Total number of pixels in the display
>3af016					GR_TEMP         .word ?             ; A temporary word for graphics commands
>3af018					GS_SP_CONTROL   .fill SP_MAX        ; Shadow registers for the sprite controls
.3a296d					S_SETTIME
.3a296d	08		php		                PHP
.3a296e	e2 20		sep #$20	            SEP #$20
.3a2970	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2973	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2976	20 99 04	jsr $3a0499	            JSR DIVINT10
.3a2979	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a297b	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a297c	0a		asl a		                ASL A
.3a297d	0a		asl a		                ASL A
.3a297e	0a		asl a		                ASL A
.3a297f	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2981	48		pha		                PHA
.3a2982	a9 2c		lda #$2c	                LDA #','
.3a2984	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2987	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a298a	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a298d	20 99 04	jsr $3a0499	            JSR DIVINT10
.3a2990	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2992	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2993	0a		asl a		                ASL A
.3a2994	0a		asl a		                ASL A
.3a2995	0a		asl a		                ASL A
.3a2996	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2998	48		pha		                PHA
.3a2999	a9 2c		lda #$2c	                LDA #','
.3a299b	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a299e	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a29a1	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a29a4	20 99 04	jsr $3a0499	            JSR DIVINT10
.3a29a7	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a29a9	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a29aa	0a		asl a		                ASL A
.3a29ab	0a		asl a		                ASL A
.3a29ac	0a		asl a		                ASL A
.3a29ad	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a29af	48		pha		                PHA
.3a29b0	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a29b4	09 0c		ora #$0c	                ORA #%00001100
.3a29b6	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a29ba	68		pla		                PLA                     ; And seconds to the RTC
.3a29bb	8f 00 08 af	sta $af0800	                STA @lRTC_SEC
.3a29bf	68		pla		                PLA                     ; Minutes...
.3a29c0	8f 02 08 af	sta $af0802	                STA @lRTC_MIN
.3a29c4	68		pla		                PLA                     ; Save the hour...
.3a29c5	8f 04 08 af	sta $af0804	                STA @lRTC_HRS
.3a29c9	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a29cd	29 f7		and #$f7	                AND #%11110111
.3a29cf	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a29d3	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a29d6	28		plp		                PLP
.3a29d7	60		rts		            RTS
.3a29d8					S_SETDATE
.3a29d8	08		php		                PHP
.3a29d9	e2 20		sep #$20	            SEP #$20
.3a29db	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a29de	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a29e1	20 99 04	jsr $3a0499	            JSR DIVINT10
.3a29e4	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a29e6	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a29e7	0a		asl a		                ASL A
.3a29e8	0a		asl a		                ASL A
.3a29e9	0a		asl a		                ASL A
.3a29ea	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a29ec	48		pha		                PHA
.3a29ed	a9 2c		lda #$2c	                LDA #','
.3a29ef	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a29f2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a29f5	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a29f8	20 99 04	jsr $3a0499	            JSR DIVINT10
.3a29fb	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a29fd	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a29fe	0a		asl a		                ASL A
.3a29ff	0a		asl a		                ASL A
.3a2a00	0a		asl a		                ASL A
.3a2a01	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2a03	48		pha		                PHA
.3a2a04	a9 2c		lda #$2c	                LDA #','
.3a2a06	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2a09	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2a0c	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a2a0f	20 cf 04	jsr $3a04cf	            JSR DIVINT100
.3a2a12	c2 20		rep #$20	            REP #$20
.3a2a14	a5 23		lda $0823	                LDA ARGUMENT1           ; Get the century
.3a2a16	85 92		sta $0892	                STA MTEMP               ; Save it in MTEMP
.3a2a18	a5 29		lda $0829	                LDA ARGUMENT2           ; Separate the 10s from the 1s digits
.3a2a1a	85 23		sta $0823	                STA ARGUMENT1
.3a2a1c	20 99 04	jsr $3a0499	            JSR DIVINT10
.3a2a1f	e2 20		sep #$20	            SEP #$20
.3a2a21	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2a23	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2a24	0a		asl a		                ASL A
.3a2a25	0a		asl a		                ASL A
.3a2a26	0a		asl a		                ASL A
.3a2a27	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2a29	48		pha		                PHA                     ; Save the 10s and 1s in BCD
.3a2a2a	c2 20		rep #$20	            REP #$20
.3a2a2c	a5 92		lda $0892	                LDA MTEMP               ; Separate the 100s from the 1000s digits
.3a2a2e	85 23		sta $0823	                STA ARGUMENT1
.3a2a30	20 99 04	jsr $3a0499	            JSR DIVINT10
.3a2a33	e2 20		sep #$20	            SEP #$20
.3a2a35	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2a37	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2a38	0a		asl a		                ASL A
.3a2a39	0a		asl a		                ASL A
.3a2a3a	0a		asl a		                ASL A
.3a2a3b	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2a3d	48		pha		                PHA                     ; Save the 100s and 1000s in BCD
.3a2a3e	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a2a42	09 0c		ora #$0c	                ORA #%00001100
.3a2a44	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2a48	68		pla		                PLA                     ; Set the century
.3a2a49	8f 0f 08 af	sta $af080f	                STA @lRTC_CENTURY
.3a2a4d	68		pla		                PLA                     ; And year to the RTC
.3a2a4e	8f 0a 08 af	sta $af080a	                STA @lRTC_YEAR
.3a2a52	68		pla		                PLA                     ; Month...
.3a2a53	8f 09 08 af	sta $af0809	                STA @lRTC_MONTH
.3a2a57	68		pla		                PLA                     ; Save the day...
.3a2a58	8f 06 08 af	sta $af0806	                STA @lRTC_DAY
.3a2a5c	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a2a60	29 f7		and #$f7	                AND #%11110111
.3a2a62	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2a66	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a2a69	28		plp		                PLP
.3a2a6a	60		rts		            RTS
.3a2a6b					S_TEXTCOLOR
.3a2a6b	08		php		                PHP
.3a2a6c					locals
>0001					L_FOREGROUND    .byte ?
.3a2a6c	e2 20		sep #$20	            SEP #$20
.3a2a6e	48		pha		            PHA
.3a2a6f	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2a72	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2a75	e2 20		sep #$20	            SEP #$20
.3a2a77	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the foreground position
.3a2a79	29 0f		and #$0f	                AND #$0F
.3a2a7b	0a		asl a		                ASL A
.3a2a7c	0a		asl a		                ASL A
.3a2a7d	0a		asl a		                ASL A
.3a2a7e	0a		asl a		                ASL A
.3a2a7f	83 01		sta $01,s	                STA L_FOREGROUND    ; Save the foreground color
.3a2a81	a9 2c		lda #$2c	                LDA #','
.3a2a83	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2a86	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2a89	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2a8c	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the background position
.3a2a8e	29 0f		and #$0f	                AND #$0F
.3a2a90	03 01		ora $01,s	                ORA L_FOREGROUND    ; Add in the foreground
.3a2a92	8f 1e 00 00	sta $00001e	                STA @lCURCOLOR      ; And save the new color combination
.3a2a96	e2 20		sep #$20	            SEP #$20
.3a2a98	68		pla		            PLA
.3a2a99	28		plp		                PLP
.3a2a9a	60		rts		            RTS
.3a2a9b					S_SETBGCOLOR
.3a2a9b	08		php		                PHP
.3a2a9c					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.3a2a9c	c2 20		rep #$20	            REP #$20
.3a2a9e	f4 00 00	pea #$0000	            PEA #0
.3a2aa1	e2 20		sep #$20	            SEP #$20
.3a2aa3	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2aa6	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2aa9	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.3a2aab	83 01		sta $01,s	                STA L_RED
.3a2aad	a9 2c		lda #$2c	                LDA #','
.3a2aaf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2ab2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2ab5	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2ab8	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.3a2aba	83 02		sta $02,s	                STA L_GREEN
.3a2abc	a9 2c		lda #$2c	                LDA #','
.3a2abe	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2ac1	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2ac4	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2ac7	a5 23		lda $0823	                LDA ARGUMENT1               ; And set the actual color
.3a2ac9	8f 0d 00 af	sta $af000d	                STA @lBACKGROUND_COLOR_B
.3a2acd	a3 02		lda $02,s	                LDA L_GREEN
.3a2acf	8f 0e 00 af	sta $af000e	                STA @lBACKGROUND_COLOR_G
.3a2ad3	a3 01		lda $01,s	                LDA L_RED
.3a2ad5	8f 0f 00 af	sta $af000f	                STA @lBACKGROUND_COLOR_R
.3a2ad9	c2 20		rep #$20	            REP #$20
.3a2adb	68		pla		            PLA
.3a2adc	28		plp		                PLP
.3a2add	60		rts		            RTS
.3a2ade					S_SETBORDER
.3a2ade	08		php		                PHP
.3a2adf					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.3a2adf	c2 20		rep #$20	            REP #$20
.3a2ae1	f4 00 00	pea #$0000	            PEA #0
.3a2ae4	e2 20		sep #$20	            SEP #$20
.3a2ae6	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2ae9	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a2aec	a5 23		lda $0823	                LDA ARGUMENT1
.3a2aee	f0 16		beq $3a2b06	                BEQ hide_border
.3a2af0	a9 01		lda #$01	                LDA #Border_Ctrl_Enable     ; Enable the border
.3a2af2	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.3a2af6	a9 20		lda #$20	                LDA #BORDER_WIDTH           ; Set the border width
.3a2af8	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.3a2afc	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.3a2b00	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2b04	80 0a		bra $3a2b10	                BRA get_color
.3a2b06	a9 00		lda #$00	hide_border     LDA #0                      ; Hide the border
.3a2b08	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.3a2b0c	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2b10	a9 2c		lda #$2c	get_color       LDA #','
.3a2b12	85 37		sta $0837	                STA TARGETTOK
.3a2b14	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a2b17	90 39		bcc $3a2b52	                BCC done                    ; No: we're done
.3a2b19	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a2b1c	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2b1f	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2b22	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.3a2b24	83 01		sta $01,s	                STA L_RED
.3a2b26	a9 2c		lda #$2c	                LDA #','
.3a2b28	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2b2b	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2b2e	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2b31	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.3a2b33	83 02		sta $02,s	                STA L_GREEN
.3a2b35	a9 2c		lda #$2c	                LDA #','
.3a2b37	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2b3a	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2b3d	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2b40	a5 23		lda $0823	                LDA ARGUMENT1
.3a2b42	8f 05 00 af	sta $af0005	                STA @lBORDER_COLOR_B        ; Set the border color
.3a2b46	a3 02		lda $02,s	                LDA L_GREEN
.3a2b48	8f 06 00 af	sta $af0006	                STA @lBORDER_COLOR_G
.3a2b4c	a3 01		lda $01,s	                LDA L_RED
.3a2b4e	8f 07 00 af	sta $af0007	                STA @lBORDER_COLOR_R
.3a2b52					done
.3a2b52	c2 20		rep #$20	            REP #$20
.3a2b54	68		pla		            PLA
.3a2b55	28		plp		                PLP
.3a2b56	60		rts		            RTS
.3a2b57					S_SETCOLOR
.3a2b57	08		php		                PHP
.3a2b58					locals
>0001					L_LUT           .byte ?
>0002					L_COLOR         .byte ?
>0003					L_RED           .byte ?
>0004					L_GREEN         .byte ?
>0005					L_BLUE          .byte ?
.3a2b58	c2 20		rep #$20	            REP #$20
.3a2b5a	3b		tsc		            TSC
.3a2b5b	38		sec		            SEC
.3a2b5c	e9 05 00	sbc #$0005	            SBC #SIZE(locals)
.3a2b5f	1b		tcs		            TCS
.3a2b60	e2 20		sep #$20	            SEP #$20
.3a2b62	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2b65	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2b68	a5 23		lda $0823	                LDA ARGUMENT1
.3a2b6a	c9 0a		cmp #$0a	                CMP #10             ; And in range
.3a2b6c	90 1f		bcc $3a2b8d	                BLT save_lut
.3a2b6e					bad_argument
.3a2b6e	08		php		            PHP
.3a2b6f	c2 20		rep #$20	            REP #$20
.3a2b71	48		pha		            PHA
.3a2b72	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2b75	5b		tcd		            TCD
.3a2b76	68		pla		            PLA
.3a2b77	28		plp		            PLP
.3a2b78	e2 20		sep #$20	            SEP #$20
.3a2b7a	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a2b7c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2b80	c2 20		rep #$20	            REP #$20
.3a2b82	29 ff 00	and #$00ff	            AND #$00FF
.3a2b85	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2b88	e2 20		sep #$20	            SEP #$20
.3a2b8a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2b8d	83 01		sta $01,s	save_lut        STA L_LUT           ; Save as LUT
.3a2b8f	a9 2c		lda #$2c	                LDA #','
.3a2b91	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2b94	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2b97	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2b9a	a5 23		lda $0823	                LDA ARGUMENT1
.3a2b9c	83 02		sta $02,s	                STA L_COLOR         ; Save as COLOR
.3a2b9e	a9 2c		lda #$2c	                LDA #','
.3a2ba0	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2ba3	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2ba6	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2ba9	a5 23		lda $0823	                LDA ARGUMENT1
.3a2bab	83 03		sta $03,s	                STA L_RED           ; Save as RED
.3a2bad	a9 2c		lda #$2c	                LDA #','
.3a2baf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2bb2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2bb5	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2bb8	a5 23		lda $0823	                LDA ARGUMENT1
.3a2bba	83 04		sta $04,s	                STA L_GREEN         ; Save it as GREEN
.3a2bbc	a9 2c		lda #$2c	                LDA #','
.3a2bbe	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2bc1	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2bc4	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2bc7	a5 23		lda $0823	                LDA ARGUMENT1
.3a2bc9	83 05		sta $05,s	                STA L_BLUE          ; Save it as BLUE
.3a2bcb	a9 af		lda #$af	                LDA #`GRPH_LUT0_PTR ; Get the bank Vicky is in (should always be $AF)
.3a2bcd	85 a0		sta $08a0	                STA MTEMPPTR+2      ; MTEMPPTR will be our pointer to the LUT entry
.3a2bcf	a3 01		lda $01,s	                LDA L_LUT           ; Compute the offset to the LUT address
.3a2bd1	0a		asl a		                ASL A
.3a2bd2	c2 20		rep #$20	            REP #$20
.3a2bd4	29 ff 00	and #$00ff	                AND #$00FF
.3a2bd7	aa		tax		                TAX                 ; Put it in X
.3a2bd8	bf 0f 2c 3a	lda $3a2c0f,x	                LDA @llut_address,X ; Get the address of the LUT
.3a2bdc	85 9e		sta $089e	                STA MTEMPPTR        ; Put it in MTEMPPTR
.3a2bde	e2 20		sep #$20	            SEP #$20
.3a2be0	a3 02		lda $02,s	                LDA L_COLOR         ; color index *= 4
.3a2be2	c2 20		rep #$20	            REP #$20
.3a2be4	29 ff 00	and #$00ff	                AND #$00FF
.3a2be7	0a		asl a		                ASL A               ; Since each color has four bytes of data
.3a2be8	0a		asl a		                ASL A
.3a2be9	18		clc		                CLC                 ; Add the color offset to MTEMPPTR
.3a2bea	65 9e		adc $089e	                ADC MTEMPPTR
.3a2bec	85 9e		sta $089e	                STA MTEMPPTR
.3a2bee	e2 20		sep #$20	            SEP #$20
.3a2bf0	a0 02 00	ldy #$0002	                LDY #GR_LUT_RED
.3a2bf3	a3 03		lda $03,s	                LDA L_RED
.3a2bf5	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the red component to the color entry
.3a2bf7	a0 01 00	ldy #$0001	                LDY #GR_LUT_GREEN
.3a2bfa	a3 04		lda $04,s	                LDA L_GREEN
.3a2bfc	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the green component to the color entry
.3a2bfe	a0 00 00	ldy #$0000	                LDY #GR_LUT_BLUE
.3a2c01	a3 05		lda $05,s	                LDA L_BLUE
.3a2c03	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the blue component to the color entry
.3a2c05					done
.3a2c05	c2 20		rep #$20	            REP #$20
.3a2c07	3b		tsc		            TSC
.3a2c08	18		clc		            CLC
.3a2c09	69 05 00	adc #$0005	            ADC #SIZE(locals)
.3a2c0c	1b		tcs		            TCS
.3a2c0d	28		plp		                PLP
.3a2c0e	60		rts		            RTS
>3a2c0f	00 20				lut_address     .word <>GRPH_LUT0_PTR
>3a2c11	00 24				                .word <>GRPH_LUT1_PTR
>3a2c13	00 28				                .word <>GRPH_LUT2_PTR
>3a2c15	00 2c				                .word <>GRPH_LUT3_PTR
>3a2c17	00 30				                .word <>GRPH_LUT4_PTR
>3a2c19	00 34				                .word <>GRPH_LUT5_PTR
>3a2c1b	00 38				                .word <>GRPH_LUT6_PTR
>3a2c1d	00 3c				                .word <>GRPH_LUT7_PTR
>3a2c1f	40 1f				                .word <>FG_CHAR_LUT_PTR
>3a2c21	80 1f				                .word <>BG_CHAR_LUT_PTR
.3a2c23					S_GRAPHICS
.3a2c23	da		phx		                PHX
.3a2c24	5a		phy		                PHY
.3a2c25	08		php		                PHP
.3a2c26	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2c29	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a2c2c	c2 20		rep #$20	            REP #$20
.3a2c2e	a5 23		lda $0823	                LDA ARGUMENT1               ; Check to see if we're setting mode to 800x600 or 400x300
.3a2c30	89 00 01	bit #$0100	                BIT #$0100
.3a2c33	d0 17		bne $3a2c4c	                BNE set_mode                ; Yes: go ahead and set it
.3a2c35	af 00 00 af	lda $af0000	                LDA @l MASTER_CTRL_REG_L    ; Otherwise, check to see if we're already in 800x600 or 400x300
.3a2c39	89 00 01	bit #$0100	                BIT #$0100
.3a2c3c	f0 0e		beq $3a2c4c	                BEQ set_mode                ; No: just go ahead and set the mode
.3a2c3e	e2 20		sep #$20	            SEP #$20
.3a2c40	a9 00		lda #$00	                LDA #0                      ; Yes: toggle back to 640x480...
.3a2c42	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.3a2c46	a9 01		lda #$01	                LDA #1                      ; And back to 800x600....
.3a2c48	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.3a2c4c					set_mode
.3a2c4c	c2 20		rep #$20	            REP #$20
.3a2c4e	a5 23		lda $0823	                LDA ARGUMENT1
.3a2c50	8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L    ; Set the graphics mode
.3a2c54	e2 20		sep #$20	            SEP #$20
.3a2c56	a5 24		lda $0824	                LDA ARGUMENT1+1             ; Get the screen size bits
.3a2c58	c2 20		rep #$20	            REP #$20
.3a2c5a	29 03 00	and #$0003	                AND #$0003
.3a2c5d	0a		asl a		                ASL A                       ; Multiply by two to get the index
.3a2c5e	aa		tax		                TAX                         ; X is index into the size tables
.3a2c5f	c2 20		rep #$20	            REP #$20
.3a2c61	bf aa 2c 3a	lda $3a2caa,x	                LDA gr_columns,X            ; Set the columns
.3a2c65	8f 10 f0 3a	sta $3af010	                STA @lGR_MAX_COLS
.3a2c69	bf b2 2c 3a	lda $3a2cb2,x	                LDA gr_rows,X               ; Set the rows
.3a2c6d	8f 12 f0 3a	sta $3af012	                STA @lGR_MAX_ROWS
.3a2c71	af 10 f0 3a	lda $3af010	                LDA @lGR_MAX_COLS           ; Get the current columns
.3a2c75	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.3a2c79	af 12 f0 3a	lda $3af012	                LDA @lGR_MAX_ROWS           ; Get the current rows
.3a2c7d	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B
.3a2c81	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT             ; Multiply them to get the total pixels
.3a2c85	8f 14 f0 3a	sta $3af014	                STA @lGR_TOTAL_PIXELS
.3a2c89	e2 20		sep #$20	            SEP #$20
.3a2c8b	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.3a2c8f	8f 16 f0 3a	sta $3af016	                STA @lGR_TOTAL_PIXELS+2
.3a2c93	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2c97					reset_cursor
.3a2c97	c2 20		rep #$20	            REP #$20
.3a2c99	af 1a 00 00	lda $00001a	                LDA @lCURSORX
.3a2c9d	aa		tax		                TAX
.3a2c9e	af 1c 00 00	lda $00001c	                LDA @lCURSORY
.3a2ca2	a8		tay		                TAY
.3a2ca3	20 20 00	jsr $3a0020	            JSR CURSORXY
.3a2ca6	28		plp		                PLP
.3a2ca7	7a		ply		                PLY
.3a2ca8	fa		plx		                PLX
.3a2ca9	60		rts		            RTS
>3a2caa	80 02 20 03 40 01 90 01		gr_columns      .word 640,800,320,400
>3a2cb2	e0 01 58 02 f0 00 2c 01		gr_rows         .word 480,600,240,300
>3a2cba	50 00 64 00 28 00 32 00		col_count       .word 80,100,40,50
>3a2cc2	3c 00 4b 00 1e 00 32 00		row_count       .word 60,75,30,50
>3a2cca	48 00 5c 00 20 00 2a 00		colb_count      .word 72,92,32,42
>3a2cd2	34 00 43 00 16 00 34 00		rowb_count      .word 52,67,22,52
.3a2cda					BITMAP_SRAM
.3a2cda	da		phx		                PHX
.3a2cdb	08		php		                PHP
.3a2cdc	c2 30		rep #$30	            REP #$30
.3a2cde	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2ce1	b0 1c		bcs $3a2cff	                BGE range_err           ; Make sure it's within range
.3a2ce3	0a		asl a		                ASL A
.3a2ce4	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.3a2ce5	aa		tax		                TAX
.3a2ce6	bf 00 f0 3a	lda $3af000,x	                LDA @l GR_BM0_ADDR,X    ; Get the low 16-bits of the address
.3a2cea	85 9e		sta $089e	                STA MTEMPPTR
.3a2cec	bf 02 f0 3a	lda $3af002,x	                LDA @l GR_BM0_ADDR+2,X  ; Get the high bits of the address
.3a2cf0	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a2cf2	c9 f0 00	cmp #$00f0	                CMP #MAX_VRAM_CPU       ; Check to make sure address is within VRAM
.3a2cf5	b0 08		bcs $3a2cff	                BGE range_err
.3a2cf7	c9 b0 00	cmp #$00b0	                CMP #MIN_VRAM_CPU
.3a2cfa	90 03		bcc $3a2cff	                BLT range_err
.3a2cfc	28		plp		                PLP
.3a2cfd	fa		plx		                PLX
.3a2cfe	60		rts		            RTS
.3a2cff					range_err
.3a2cff	08		php		            PHP
.3a2d00	c2 20		rep #$20	            REP #$20
.3a2d02	48		pha		            PHA
.3a2d03	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2d06	5b		tcd		            TCD
.3a2d07	68		pla		            PLA
.3a2d08	28		plp		            PLP
.3a2d09	e2 20		sep #$20	            SEP #$20
.3a2d0b	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2d0d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2d11	c2 20		rep #$20	            REP #$20
.3a2d13	29 ff 00	and #$00ff	            AND #$00FF
.3a2d16	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2d19	e2 20		sep #$20	            SEP #$20
.3a2d1b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2d1e					BITMAP_VRAM
.3a2d1e	da		phx		                PHX
.3a2d1f	08		php		                PHP
.3a2d20	c2 30		rep #$30	            REP #$30
.3a2d22	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2d25	b0 17		bcs $3a2d3e	                BGE range_err           ; Make sure it's within range
.3a2d27	0a		asl a		                ASL A
.3a2d28	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.3a2d29	aa		tax		                TAX
.3a2d2a	bf 08 f0 3a	lda $3af008,x	                LDA @l GR_BM0_VRAM,X    ; Get the low 16-bits of the address
.3a2d2e	85 9e		sta $089e	                STA MTEMPPTR
.3a2d30	bf 0a f0 3a	lda $3af00a,x	                LDA @l GR_BM0_VRAM+2,X  ; Get the high bits of the address
.3a2d34	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a2d36	c9 40 00	cmp #$0040	                CMP #MAX_VRAM_VICKY     ; Check to make sure the address is from $00:0000 - $3F:FFFF
.3a2d39	b0 03		bcs $3a2d3e	                BGE range_err           ; If not, throw a range error
.3a2d3b	28		plp		                PLP
.3a2d3c	fa		plx		                PLX
.3a2d3d	60		rts		            RTS
.3a2d3e					range_err
.3a2d3e	08		php		            PHP
.3a2d3f	c2 20		rep #$20	            REP #$20
.3a2d41	48		pha		            PHA
.3a2d42	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2d45	5b		tcd		            TCD
.3a2d46	68		pla		            PLA
.3a2d47	28		plp		            PLP
.3a2d48	e2 20		sep #$20	            SEP #$20
.3a2d4a	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2d4c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2d50	c2 20		rep #$20	            REP #$20
.3a2d52	29 ff 00	and #$00ff	            AND #$00FF
.3a2d55	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2d58	e2 20		sep #$20	            SEP #$20
.3a2d5a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2d5d					S_BITMAP
.3a2d5d	08		php		                PHP
.3a2d5e					locals
>0001					L_PLANE         .word ?
>0003					L_VISIBLE       .byte ?
>0004					L_ADDRESS       .dword ?
.3a2d5e	c2 30		rep #$30	            REP #$30
.3a2d60	3b		tsc		                TSC                         ; Allocate space for the locals on the stack
.3a2d61	38		sec		                SEC
.3a2d62	e9 07 00	sbc #$0007	                SBC #SIZE(locals)
.3a2d65	1b		tcs		                TCS
.3a2d66	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2d69	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2d6c	c2 20		rep #$20	            REP #$20
.3a2d6e	a5 23		lda $0823	                LDA ARGUMENT1               ; Make sure it's in range
.3a2d70	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2d73	b0 59		bcs $3a2dce	                BGE range_err               ; If not, throw an error
.3a2d75	83 01		sta $01,s	                STA L_PLANE                 ; If so, save it to MARG1
.3a2d77	e2 20		sep #$20	            SEP #$20
.3a2d79	a9 2c		lda #$2c	                LDA #','
.3a2d7b	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2d7e	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2d81	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2d84	a5 23		lda $0823	                LDA ARGUMENT1
.3a2d86	83 03		sta $03,s	                STA L_VISIBLE
.3a2d88	a9 2c		lda #$2c	                LDA #','
.3a2d8a	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2d8d	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2d90	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2d93	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the number back
.3a2d95	0a		asl a		                ASL A                       ; Multiply by 8 to get the offset to the registers
.3a2d96	0a		asl a		                ASL A
.3a2d97	0a		asl a		                ASL A
.3a2d98	aa		tax		                TAX                         ; And save that offset to X
.3a2d99	a3 03		lda $03,s	                LDA L_VISIBLE               ; Check the visible flag
.3a2d9b	d0 05		bne $3a2da2	                BNE is_visible              ; If <> 0, it's visible
.3a2d9d	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the LUT #
.3a2d9f	0a		asl a		                ASL A                       ; Shift it into position for the register
.3a2da0	80 04		bra $3a2da6	                BRA wr_bm_reg               ; And go to write it
.3a2da2	a5 23		lda $0823	is_visible      LDA ARGUMENT1               ; Get the LUT #
.3a2da4	38		sec		                SEC
.3a2da5	2a		rol a		                ROL A                       ; And shift it into position, and set enable bit
.3a2da6	9f 00 01 af	sta $af0100,x	wr_bm_reg       STA @l BM0_CONTROL_REG,X    ; Write to the bitmap control register
.3a2daa	c2 20		rep #$20	            REP #$20
.3a2dac	a9 2c 00	lda #$002c	                LDA #','
.3a2daf	85 37		sta $0837	                STA TARGETTOK
.3a2db1	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a2db4	b0 37		bcs $3a2ded	                BCS get_address             ; Yes: parse the address
.3a2db6	c2 20		rep #$20	            REP #$20
.3a2db8	08		php		            PHP
.3a2db9	c2 20		rep #$20	            REP #$20
.3a2dbb	a9 00 00	lda #$0000	            LDA #<>VRAM
.3a2dbe	85 23		sta $0823	            STA ARGUMENT1
.3a2dc0	a9 b0 00	lda #$00b0	            LDA #(VRAM >> 16)
.3a2dc3	85 25		sta $0825	            STA ARGUMENT1+2
.3a2dc5	e2 20		sep #$20	            SEP #$20
.3a2dc7	a9 00		lda #$00	            LDA #TYPE_INTEGER
.3a2dc9	85 27		sta $0827	            STA ARGUMENT1+4
.3a2dcb	28		plp		            PLP
.3a2dcc	80 27		bra $3a2df5	                BRA set_address
.3a2dce					range_err
.3a2dce	08		php		            PHP
.3a2dcf	c2 20		rep #$20	            REP #$20
.3a2dd1	48		pha		            PHA
.3a2dd2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2dd5	5b		tcd		            TCD
.3a2dd6	68		pla		            PLA
.3a2dd7	28		plp		            PLP
.3a2dd8	e2 20		sep #$20	            SEP #$20
.3a2dda	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2ddc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2de0	c2 20		rep #$20	            REP #$20
.3a2de2	29 ff 00	and #$00ff	            AND #$00FF
.3a2de5	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2de8	e2 20		sep #$20	            SEP #$20
.3a2dea	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2ded					get_address
.3a2ded	c2 20		rep #$20	            REP #$20
.3a2def	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a2df2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2df5					set_address
.3a2df5	c2 20		rep #$20	            REP #$20
.3a2df7	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.3a2df9	0a		asl a		                ASL A                       ; Multiply by four to get the offset to the address variable
.3a2dfa	0a		asl a		                ASL A
.3a2dfb	aa		tax		                TAX                         ; And put it in X
.3a2dfc	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the CPU-space address
.3a2dfe	9f 00 f0 3a	sta $3af000,x	                STA @l GR_BM0_ADDR,X        ; And save it to the correct GR_BM?_ADDR variable
.3a2e02	9f 08 f0 3a	sta $3af008,x	                STA @l GR_BM0_VRAM,X
.3a2e06	83 04		sta $04,s	                STA L_ADDRESS               ; And L_ADDRESS, temporarily
.3a2e08	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a2e0a	9f 02 f0 3a	sta $3af002,x	                STA @l GR_BM0_ADDR+2,X
.3a2e0e	38		sec		                SEC
.3a2e0f	e9 b0 00	sbc #$00b0	                SBC #`VRAM                  ; Rebase the upper half of the address to Vicky memory space
.3a2e12	9f 0a f0 3a	sta $3af00a,x	                STA @l GR_BM0_VRAM+2,X
.3a2e16	83 06		sta $06,s	                STA L_ADDRESS+2             ; And to L_ADDRESS
.3a2e18	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.3a2e1a	0a		asl a		                ASL A                       ; Multiply by eight to get the offset to the registers
.3a2e1b	0a		asl a		                ASL A
.3a2e1c	0a		asl a		                ASL A
.3a2e1d	aa		tax		                TAX                         ; And put it in X
.3a2e1e	e2 20		sep #$20	            SEP #$20
.3a2e20	a3 04		lda $04,s	                LDA L_ADDRESS               ; Get the address in Vicky space...
.3a2e22	9f 01 01 af	sta $af0101,x	                STA @l BM0_START_ADDY_L,X   ; Save it to the Vicky registers
.3a2e26	a3 05		lda $05,s	                LDA L_ADDRESS+1
.3a2e28	9f 02 01 af	sta $af0102,x	                STA @l BM0_START_ADDY_M,X
.3a2e2c	a3 06		lda $06,s	                LDA L_ADDRESS+2
.3a2e2e	9f 03 01 af	sta $af0103,x	                STA @l BM0_START_ADDY_H,X
.3a2e32	a9 00		lda #$00	                LDA #0                      ; Default offset to (0, 0)
.3a2e34	9f 04 01 af	sta $af0104,x	                STA @l BM0_X_OFFSET,X
.3a2e38	9f 05 01 af	sta $af0105,x	                STA @l BM0_Y_OFFSET,X
.3a2e3c	c2 30		rep #$30	            REP #$30
.3a2e3e	3b		tsc		                TSC                         ; Remove the space for the locals from the stack
.3a2e3f	18		clc		                CLC
.3a2e40	69 07 00	adc #$0007	                ADC #SIZE(locals)
.3a2e43	1b		tcs		                TCS
.3a2e44	28		plp		                PLP
.3a2e45	60		rts		            RTS
.3a2e46					bad_address
.3a2e46	08		php		            PHP
.3a2e47	c2 20		rep #$20	            REP #$20
.3a2e49	48		pha		            PHA
.3a2e4a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2e4d	5b		tcd		            TCD
.3a2e4e	68		pla		            PLA
.3a2e4f	28		plp		            PLP
.3a2e50	e2 20		sep #$20	            SEP #$20
.3a2e52	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a2e54	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2e58	c2 20		rep #$20	            REP #$20
.3a2e5a	29 ff 00	and #$00ff	            AND #$00FF
.3a2e5d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a2e60	e2 20		sep #$20	            SEP #$20
.3a2e62	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2e65					S_CLRBITMAP
.3a2e65	08		php		                PHP
.3a2e66	c2 20		rep #$20	            REP #$20
.3a2e68	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2e6b	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2e6e	a5 23		lda $0823	                LDA ARGUMENT1
.3a2e70	20 1e 2d	jsr $3a2d1e	            JSR BITMAP_VRAM
.3a2e73	c2 20		rep #$20	            REP #$20
.3a2e75	a5 9e		lda $089e	                LDA MTEMPPTR                ; Set the start address and the # of pixels to write
.3a2e77	8f 05 04 af	sta $af0405	                STA @lVDMA_DST_ADDY_L
.3a2e7b	af 14 f0 3a	lda $3af014	                LDA @lGR_TOTAL_PIXELS       ; Set the size
.3a2e7f	8f 08 04 af	sta $af0408	                STA @lVDMA_SIZE_L
.3a2e83	e2 20		sep #$20	            SEP #$20
.3a2e85	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.3a2e87	8f 07 04 af	sta $af0407	                STA @lVDMA_DST_ADDY_H
.3a2e8b	af 16 f0 3a	lda $3af016	                LDA @lGR_TOTAL_PIXELS+2
.3a2e8f	8f 0a 04 af	sta $af040a	                STA @lVDMA_SIZE_H
.3a2e93	a9 00		lda #$00	                LDA #0                      ; Set the color to write
.3a2e95	8f 01 04 af	sta $af0401	                STA @lVDMA_BYTE_2_WRITE
.3a2e99	a9 85		lda #$85	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_Start_TRF
.3a2e9b	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.3a2e9f	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.3a2ea3	30 fa		bmi $3a2e9f	                BMI wait
.3a2ea5	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.3a2ea7	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.3a2eab	28		plp		done            PLP
.3a2eac	60		rts		            RTS
=$000855				COLOR = MARG1
=$000859				X0 = MARG2
=$00085d				Y0 = MARG3
=$000861				X1 = MARG4
=$000865				Y1 = MARG5
=$000869				DX = MARG6
=$00086d				DY = MARG7
=$000871				ERR = MARG8
=$000875				ERR2 = MARG9
>08dd					SX      .word ?
>08df					SY      .word ?
.3a2ead					PLOT
.3a2ead	08		php		                PHP
.3a2eae	c2 20		rep #$20	            REP #$20
.3a2eb0	a5 5d		lda $085d	                LDA Y0                      ; Get the row
.3a2eb2	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.3a2eb6	af 10 f0 3a	lda $3af010	                LDA @lGR_MAX_COLS
.3a2eba	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B          ; Multiply by the number of columns in the pixmap
.3a2ebe	18		clc		                CLC                         ; Add the column
.3a2ebf	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT
.3a2ec3	65 59		adc $0859	                ADC X0
.3a2ec5	85 0c		sta $080c	                STA SCRATCH
.3a2ec7	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.3a2ecb	69 00 00	adc #$0000	                ADC #0
.3a2ece	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH is offset of pixel in the pixmap
.3a2ed0	18		clc		                CLC                         ; Add the address of the first pixel
.3a2ed1	a5 0c		lda $080c	                LDA SCRATCH
.3a2ed3	65 9e		adc $089e	                ADC MTEMPPTR
.3a2ed5	85 0c		sta $080c	                STA SCRATCH
.3a2ed7	a5 0e		lda $080e	                LDA SCRATCH+2
.3a2ed9	65 a0		adc $08a0	                ADC MTEMPPTR+2
.3a2edb	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH := pixmap + pixel offset
.3a2edd	e2 20		sep #$20	            SEP #$20
.3a2edf	a5 55		lda $0855	                LDA COLOR                   ; Get the color
.3a2ee1	87 0c		sta [$080c]	                STA [SCRATCH]               ; And write the color to the pixel
.3a2ee3	28		plp		                PLP
.3a2ee4	60		rts		            RTS
.3a2ee5					LINE
.3a2ee5	c2 20		rep #$20	            REP #$20
.3a2ee7	a9 01 00	lda #$0001	                LDA #1                      ; Assume SX = 1
.3a2eea	85 dd		sta $08dd	                STA SX
.3a2eec	38		sec		                SEC                         ; DX := ABS(X1 - X0)
.3a2eed	a5 61		lda $0861	                LDA X1
.3a2eef	e5 59		sbc $0859	                SBC X0
.3a2ef1	85 69		sta $0869	                STA DX
.3a2ef3	10 0b		bpl $3a2f00	                BPL abs_Y                   ; If DX < 0 {
.3a2ef5	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DX := -DX
.3a2ef8	1a		inc a		                INC A
.3a2ef9	85 69		sta $0869	                STA DX
.3a2efb	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SX := -1
.3a2efe	85 dd		sta $08dd	                STA SX                      ; }
.3a2f00	a9 01 00	lda #$0001	abs_Y           LDA #1                      ; Assume SY = 1
.3a2f03	85 df		sta $08df	                STA SY
.3a2f05	38		sec		                SEC                         ; DY := ABS(Y1 - Y0)
.3a2f06	a5 65		lda $0865	                LDA Y1
.3a2f08	e5 5d		sbc $085d	                SBC Y0
.3a2f0a	85 6d		sta $086d	                STA DY
.3a2f0c	10 0b		bpl $3a2f19	                BPL calc_ERR                ; If DY < 0 {
.3a2f0e	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DY := -DY
.3a2f11	1a		inc a		                INC A
.3a2f12	85 6d		sta $086d	                STA DY
.3a2f14	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SY := -1
.3a2f17	85 df		sta $08df	                STA SY                      ; }
.3a2f19	a5 6d		lda $086d	calc_ERR        LDA DY                      ; (DY < DX)
.3a2f1b	c5 69		cmp $0869	                CMP DX
.3a2f1d	b0 04		bcs $3a2f23	                BGE else
.3a2f1f	a5 69		lda $0869	                LDA DX                      ; TRUE CASE: ERR := DX
.3a2f21	80 06		bra $3a2f29	                BRA shiftERR
.3a2f23	a5 6d		lda $086d	else            LDA DY                      ; FALSE CASE: ERR := -DY
.3a2f25	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a2f28	1a		inc a		                INC A
.3a2f29	48		pha		shiftERR        PHA
.3a2f2a	0a		asl a		                ASL A
.3a2f2b	68		pla		                PLA
.3a2f2c	6a		ror a		                ROR A                       ; ERR := ERR / 2
.3a2f2d	85 71		sta $0871	                STA ERR
.3a2f2f					loop
.3a2f2f	20 ad 2e	jsr $3a2ead	            JSR PLOT
.3a2f32	a5 59		lda $0859	                LDA X0                      ; break if X0=X1 and Y0=Y1
.3a2f34	c5 61		cmp $0861	                CMP X1
.3a2f36	d0 06		bne $3a2f3e	                BNE calc_ERR2
.3a2f38	a5 5d		lda $085d	                LDA Y0
.3a2f3a	c5 65		cmp $0865	                CMP Y1
.3a2f3c	f0 36		beq $3a2f74	                BEQ done
.3a2f3e	a5 71		lda $0871	calc_ERR2       LDA ERR                     ; ERR2 := ERR
.3a2f40	85 75		sta $0875	                STA ERR2
.3a2f42	a5 69		lda $0869	                LDA DX                      ; if (ERR2 > -DX) {
.3a2f44	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a2f47	1a		inc a		                INC A
.3a2f48	c5 75		cmp $0875	                CMP ERR2
.3a2f4a	10 10		bpl $3a2f5c	                BPL check_DY
.3a2f4c	f0 0e		beq $3a2f5c	                BEQ check_DY
.3a2f4e	38		sec		                SEC                         ; ERR -= DY
.3a2f4f	a5 71		lda $0871	                LDA ERR
.3a2f51	e5 6d		sbc $086d	                SBC DY
.3a2f53	85 71		sta $0871	                STA ERR
.3a2f55	18		clc		                CLC                         ; X0 += SX
.3a2f56	a5 59		lda $0859	                LDA X0
.3a2f58	65 dd		adc $08dd	                ADC SX
.3a2f5a	85 59		sta $0859	                STA X0                      ; }
.3a2f5c	a5 75		lda $0875	check_DY        LDA ERR2                    ; if (ERR2 < DY) {
.3a2f5e	c5 6d		cmp $086d	                CMP DY
.3a2f60	10 cd		bpl $3a2f2f	                BPL loop
.3a2f62	f0 cb		beq $3a2f2f	                BEQ loop
.3a2f64	18		clc		                CLC                         ; ERR += DX
.3a2f65	a5 71		lda $0871	                LDA ERR
.3a2f67	65 69		adc $0869	                ADC DX
.3a2f69	85 71		sta $0871	                STA ERR
.3a2f6b	18		clc		                CLC                         ; Y0 += SY
.3a2f6c	a5 5d		lda $085d	                LDA Y0
.3a2f6e	65 df		adc $08df	                ADC SY
.3a2f70	85 5d		sta $085d	                STA Y0                      ; }
.3a2f72	80 bb		bra $3a2f2f	                BRA loop                    ; }
.3a2f74					done
.3a2f74	60		rts		            RTS
.3a2f75					S_PLOT
.3a2f75	08		php		                PHP
.3a2f76					locals
>0001					L_PLANE         .word ?
>0003					L_X             .word ?
>0005					L_Y             .word ?
.3a2f76	c2 20		rep #$20	            REP #$20
.3a2f78	3b		tsc		            TSC
.3a2f79	38		sec		            SEC
.3a2f7a	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a2f7d	1b		tcs		            TCS
.3a2f7e	08		php		            PHP
.3a2f7f	c2 20		rep #$20	            REP #$20
.3a2f81	48		pha		            PHA
.3a2f82	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2f85	5b		tcd		            TCD
.3a2f86	68		pla		            PLA
.3a2f87	28		plp		            PLP
.3a2f88	08		php		            PHP
.3a2f89	e2 20		sep #$20	            SEP #$20
.3a2f8b	48		pha		            PHA
.3a2f8c	a9 00		lda #$00	            LDA #0
.3a2f8e	48		pha		            PHA
.3a2f8f	ab		plb		            PLB
.3a2f90	68		pla		            PLA
.3a2f91	28		plp		            PLP
.3a2f92	c2 30		rep #$30	            REP #$30
.3a2f94	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2f97	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2f9a	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a2f9c	a9 2c 00	lda #$002c	                LDA #','
.3a2f9f	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2fa2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2fa5	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a2fa8	a5 23		lda $0823	                LDA ARGUMENT1
.3a2faa	83 03		sta $03,s	                STA L_X                     ; Save it to X
.3a2fac	a9 2c 00	lda #$002c	                LDA #','
.3a2faf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2fb2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2fb5	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a2fb8	a5 23		lda $0823	                LDA ARGUMENT1
.3a2fba	83 05		sta $05,s	                STA L_Y                     ; Save it to Y
.3a2fbc	a9 2c 00	lda #$002c	                LDA #','
.3a2fbf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a2fc2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a2fc5	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a2fc8	a5 23		lda $0823	                LDA ARGUMENT1
.3a2fca	85 55		sta $0855	                STA COLOR                   ; Save it to MARG1
.3a2fcc	a3 03		lda $03,s	                LDA L_X                     ; Set the (X0, Y0) coordinates
.3a2fce	85 59		sta $0859	                STA X0
.3a2fd0	a3 05		lda $05,s	                LDA L_Y
.3a2fd2	85 5d		sta $085d	                STA Y0
.3a2fd4	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a2fd6	20 da 2c	jsr $3a2cda	            JSR BITMAP_SRAM
.3a2fd9	20 ad 2e	jsr $3a2ead	            JSR PLOT
.3a2fdc	c2 20		rep #$20	            REP #$20
.3a2fde	3b		tsc		            TSC
.3a2fdf	18		clc		            CLC
.3a2fe0	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a2fe3	1b		tcs		            TCS
.3a2fe4	28		plp		                PLP
.3a2fe5	60		rts		            RTS
.3a2fe6					S_LINE
.3a2fe6	08		php		                PHP
.3a2fe7					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
.3a2fe7	c2 20		rep #$20	            REP #$20
.3a2fe9	3b		tsc		            TSC
.3a2fea	38		sec		            SEC
.3a2feb	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.3a2fee	1b		tcs		            TCS
.3a2fef	08		php		            PHP
.3a2ff0	c2 20		rep #$20	            REP #$20
.3a2ff2	48		pha		            PHA
.3a2ff3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2ff6	5b		tcd		            TCD
.3a2ff7	68		pla		            PLA
.3a2ff8	28		plp		            PLP
.3a2ff9	08		php		            PHP
.3a2ffa	e2 20		sep #$20	            SEP #$20
.3a2ffc	48		pha		            PHA
.3a2ffd	a9 00		lda #$00	            LDA #0
.3a2fff	48		pha		            PHA
.3a3000	ab		plb		            PLB
.3a3001	68		pla		            PLA
.3a3002	28		plp		            PLP
.3a3003	c2 30		rep #$30	            REP #$30
.3a3005	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3008	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a300b	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a300d	a9 2c 00	lda #$002c	                LDA #','
.3a3010	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3013	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3016	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3019	a5 23		lda $0823	                LDA ARGUMENT1
.3a301b	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.3a301d	a9 2c 00	lda #$002c	                LDA #','
.3a3020	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3023	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3026	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3029	a5 23		lda $0823	                LDA ARGUMENT1
.3a302b	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.3a302d	a9 2c 00	lda #$002c	                LDA #','
.3a3030	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3033	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3036	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3039	a5 23		lda $0823	                LDA ARGUMENT1
.3a303b	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.3a303d	a9 2c 00	lda #$002c	                LDA #','
.3a3040	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3043	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3046	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3049	a5 23		lda $0823	                LDA ARGUMENT1
.3a304b	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.3a304d	a9 2c 00	lda #$002c	                LDA #','
.3a3050	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3053	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3056	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a3059	a5 23		lda $0823	                LDA ARGUMENT1
.3a305b	85 55		sta $0855	                STA COLOR                   ; Save it to COLOR
.3a305d	a3 03		lda $03,s	                LDA L_X0                    ; Set the (X0, Y0) coordinates
.3a305f	85 59		sta $0859	                STA X0
.3a3061	a3 05		lda $05,s	                LDA L_Y0
.3a3063	85 5d		sta $085d	                STA Y0
.3a3065	a3 07		lda $07,s	                LDA L_X1                    ; Set the (X1, Y1) coordinates
.3a3067	85 61		sta $0861	                STA X1
.3a3069	a3 09		lda $09,s	                LDA L_Y1
.3a306b	85 65		sta $0865	                STA Y1
.3a306d	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a306f	20 da 2c	jsr $3a2cda	            JSR BITMAP_SRAM
.3a3072	20 e5 2e	jsr $3a2ee5	            JSR LINE
.3a3075					done
.3a3075	c2 20		rep #$20	            REP #$20
.3a3077	3b		tsc		            TSC
.3a3078	18		clc		            CLC
.3a3079	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.3a307c	1b		tcs		            TCS
.3a307d	28		plp		                PLP
.3a307e	60		rts		            RTS
.3a307f					S_FILL
.3a307f	08		php		                PHP
.3a3080					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
>000b					L_COLOR         .word ?
.3a3080	c2 20		rep #$20	            REP #$20
.3a3082	3b		tsc		            TSC
.3a3083	38		sec		            SEC
.3a3084	e9 0c 00	sbc #$000c	            SBC #SIZE(locals)
.3a3087	1b		tcs		            TCS
.3a3088	08		php		            PHP
.3a3089	c2 20		rep #$20	            REP #$20
.3a308b	48		pha		            PHA
.3a308c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a308f	5b		tcd		            TCD
.3a3090	68		pla		            PLA
.3a3091	28		plp		            PLP
.3a3092	08		php		            PHP
.3a3093	e2 20		sep #$20	            SEP #$20
.3a3095	48		pha		            PHA
.3a3096	a9 00		lda #$00	            LDA #0
.3a3098	48		pha		            PHA
.3a3099	ab		plb		            PLB
.3a309a	68		pla		            PLA
.3a309b	28		plp		            PLP
.3a309c	c2 30		rep #$30	            REP #$30
.3a309e	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a30a1	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a30a4	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a30a6	a9 2c 00	lda #$002c	                LDA #','
.3a30a9	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a30ac	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a30af	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a30b2	a5 23		lda $0823	                LDA ARGUMENT1
.3a30b4	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.3a30b6	a9 2c 00	lda #$002c	                LDA #','
.3a30b9	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a30bc	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a30bf	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a30c2	a5 23		lda $0823	                LDA ARGUMENT1
.3a30c4	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.3a30c6	a9 2c 00	lda #$002c	                LDA #','
.3a30c9	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a30cc	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a30cf	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a30d2	a5 23		lda $0823	                LDA ARGUMENT1
.3a30d4	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.3a30d6	a9 2c 00	lda #$002c	                LDA #','
.3a30d9	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a30dc	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a30df	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a30e2	a5 23		lda $0823	                LDA ARGUMENT1
.3a30e4	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.3a30e6	a9 2c 00	lda #$002c	                LDA #','
.3a30e9	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a30ec	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a30ef	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a30f2	a5 23		lda $0823	                LDA ARGUMENT1
.3a30f4	83 0b		sta $0b,s	                STA L_COLOR                 ; Save it to COLOR
.3a30f6	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a30f8	20 1e 2d	jsr $3a2d1e	            JSR BITMAP_VRAM
.3a30fb	a9 07 00	lda #$0007	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_1D_2D
.3a30fe	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3102	c2 20		rep #$20	            REP #$20
.3a3104	a3 05		lda $05,s	                LDA L_Y0                    ; Get the row
.3a3106	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a310a	af 10 f0 3a	lda $3af010	                LDA @l GR_MAX_COLS
.3a310e	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B         ; Multiply by the number of columns in the pixmap
.3a3112	18		clc		                CLC                         ; Add the column
.3a3113	af 04 01 00	lda $000104	                LDA @l M0_RESULT
.3a3117	63 03		adc $03,s	                ADC L_X0
.3a3119	85 0c		sta $080c	                STA SCRATCH
.3a311b	e2 20		sep #$20	            SEP #$20
.3a311d	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.3a3121	69 00		adc #$00	                ADC #0
.3a3123	85 0e		sta $080e	                STA SCRATCH+2
.3a3125	c2 20		rep #$20	            REP #$20
.3a3127	18		clc		                CLC                         ; Set the destination address
.3a3128	a5 9e		lda $089e	                LDA MTEMPPTR
.3a312a	65 0c		adc $080c	                ADC SCRATCH
.3a312c	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.3a3130	e2 20		sep #$20	            SEP #$20
.3a3132	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.3a3134	65 0e		adc $080e	                ADC SCRATCH+2
.3a3136	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H
.3a313a	c2 20		rep #$20	            REP #$20
.3a313c	38		sec		                SEC                         ; Set the width of the FILL operation
.3a313d	a3 07		lda $07,s	                LDA L_X1
.3a313f	e3 03		sbc $03,s	                SBC L_X0
.3a3141	85 0c		sta $080c	                STA SCRATCH
.3a3143	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a3147	38		sec		                SEC
.3a3148	af 10 f0 3a	lda $3af010	                LDA @l GR_MAX_COLS
.3a314c	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L    ; And the destination stride
.3a3150	38		sec		                SEC                         ; Set the height of the FILL operation
.3a3151	a3 09		lda $09,s	                LDA L_Y1
.3a3153	e3 05		sbc $05,s	                SBC L_Y0
.3a3155	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a3159	e2 20		sep #$20	            SEP #$20
.3a315b	a3 0b		lda $0b,s	                LDA L_COLOR                 ; Set the color to write
.3a315d	8f 01 04 af	sta $af0401	                STA @l VDMA_BYTE_2_WRITE
.3a3161	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.3a3165	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF
.3a3167	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a316b	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.3a316f	30 fa		bmi $3a316b	                BMI wait
.3a3171	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.3a3173	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3177					done
.3a3177	c2 20		rep #$20	            REP #$20
.3a3179	3b		tsc		            TSC
.3a317a	18		clc		            CLC
.3a317b	69 0c 00	adc #$000c	            ADC #SIZE(locals)
.3a317e	1b		tcs		            TCS
.3a317f	28		plp		                PLP
.3a3180	60		rts		            RTS
.3a3181					SPADDR
.3a3181	08		php		                PHP
.3a3182	c2 20		rep #$20	            REP #$20
.3a3184	c9 40 00	cmp #$0040	                CMP #SP_MAX
.3a3187	b0 13		bcs $3a319c	                BGE error
.3a3189	0a		asl a		                ASL A                       ; Multiply it by 8 (the size of s sprite block)
.3a318a	0a		asl a		                ASL A
.3a318b	0a		asl a		                ASL A
.3a318c	18		clc		                CLC                         ; Add it to the address of the first
.3a318d	69 00 0c	adc #$0c00	                ADC #<>SP00_CONTROL_REG     ; sprite block
.3a3190	85 9e		sta $089e	                STA MTEMPPTR
.3a3192	a9 af 00	lda #$00af	                LDA #`SP00_CONTROL_REG
.3a3195	69 00 00	adc #$0000	                ADC #0
.3a3198	85 a0		sta $08a0	                STA MTEMPPTR+2              ; And save that to MTEMPPTR
.3a319a	28		plp		                PLP
.3a319b	60		rts		            RTS
.3a319c					error
.3a319c	08		php		            PHP
.3a319d	c2 20		rep #$20	            REP #$20
.3a319f	48		pha		            PHA
.3a31a0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a31a3	5b		tcd		            TCD
.3a31a4	68		pla		            PLA
.3a31a5	28		plp		            PLP
.3a31a6	e2 20		sep #$20	            SEP #$20
.3a31a8	a9 09		lda #$09	            LDA #ERR_RANGE
.3a31aa	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a31ae	c2 20		rep #$20	            REP #$20
.3a31b0	29 ff 00	and #$00ff	            AND #$00FF
.3a31b3	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a31b6	e2 20		sep #$20	            SEP #$20
.3a31b8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a31bb					S_SPRITE
.3a31bb	08		php		                PHP
.3a31bc					locals
>0001					L_SPRITE        .word ?
>0003					L_LUT           .byte ?
.3a31bc	c2 20		rep #$20	            REP #$20
.3a31be	3b		tsc		            TSC
.3a31bf	38		sec		            SEC
.3a31c0	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.3a31c3	1b		tcs		            TCS
.3a31c4	c2 30		rep #$30	            REP #$30
.3a31c6	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a31c9	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a31cc	a5 23		lda $0823	                LDA ARGUMENT1
.3a31ce	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a31d0	a9 2c 00	lda #$002c	                LDA #','
.3a31d3	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a31d6	e2 20		sep #$20	            SEP #$20
.3a31d8	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a31db	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a31de	a5 23		lda $0823	                LDA ARGUMENT1
.3a31e0	c9 08		cmp #$08	                CMP #GR_MAX_LUT             ; Check that it's in range
.3a31e2	b0 56		bcs $3a323a	                BGE error                   ; If not: throw an error
.3a31e4	83 03		sta $03,s	                STA L_LUT                   ; Save it as lut
.3a31e6	a9 2c		lda #$2c	                LDA #','
.3a31e8	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a31eb	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a31ee	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a31f1	c2 20		rep #$20	            REP #$20
.3a31f3	38		sec		                SEC                         ; Adjust address to be in Vicky's space
.3a31f4	a5 23		lda $0823	                LDA ARGUMENT1
.3a31f6	e9 00 00	sbc #$0000	                SBC #<>VRAM
.3a31f9	85 23		sta $0823	                STA ARGUMENT1
.3a31fb	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a31fd	e9 b0 00	sbc #$00b0	                SBC #`VRAM
.3a3200	85 25		sta $0825	                STA ARGUMENT1+2
.3a3202	30 36		bmi $3a323a	                BMI error                   ; If negative, throw an error
.3a3204	c2 20		rep #$20	            REP #$20
.3a3206	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a3208	aa		tax		                TAX
.3a3209	20 81 31	jsr $3a3181	            JSR SPADDR
.3a320c	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the lower word of the address
.3a320e	a0 01 00	ldy #$0001	                LDY #SP_ADDR
.3a3211	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3213	e2 20		sep #$20	            SEP #$20
.3a3215	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3217	c8		iny		                INY
.3a3218	c8		iny		                INY
.3a3219	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save the upper byte of the address
.3a321b	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the sprite control register
.3a321f	29 f1		and #$f1	                AND #%11110001              ; Filter off the current LUT
.3a3221	85 0c		sta $080c	                STA SCRATCH
.3a3223	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT back
.3a3225	0a		asl a		                ASL A                       ; Sift it into the LUT position
.3a3226	29 0e		and #$0e	                AND #%00001110              ; Make sure we don't have anything wrong there
.3a3228	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with what's in the sprite's control
.3a322a	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the register's bits
.3a322c	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And the shadow register
.3a3230					done
.3a3230	c2 20		rep #$20	            REP #$20
.3a3232	3b		tsc		            TSC
.3a3233	18		clc		            CLC
.3a3234	69 03 00	adc #$0003	            ADC #SIZE(locals)
.3a3237	1b		tcs		            TCS
.3a3238	28		plp		                PLP
.3a3239	60		rts		            RTS
.3a323a					error
.3a323a	08		php		            PHP
.3a323b	c2 20		rep #$20	            REP #$20
.3a323d	48		pha		            PHA
.3a323e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3241	5b		tcd		            TCD
.3a3242	68		pla		            PLA
.3a3243	28		plp		            PLP
.3a3244	e2 20		sep #$20	            SEP #$20
.3a3246	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3248	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a324c	c2 20		rep #$20	            REP #$20
.3a324e	29 ff 00	and #$00ff	            AND #$00FF
.3a3251	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3254	e2 20		sep #$20	            SEP #$20
.3a3256	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3259					S_SPRITEAT
.3a3259	08		php		                PHP
.3a325a					locals
>0001					L_SPRITE        .word ?
>0003					L_X             .word ?
.3a325a	c2 20		rep #$20	            REP #$20
.3a325c	3b		tsc		            TSC
.3a325d	38		sec		            SEC
.3a325e	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.3a3261	1b		tcs		            TCS
.3a3262	c2 30		rep #$30	            REP #$30
.3a3264	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3267	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a326a	a5 23		lda $0823	                LDA ARGUMENT1
.3a326c	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a326e	a9 2c 00	lda #$002c	                LDA #','
.3a3271	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3274	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3277	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a327a	a5 23		lda $0823	                LDA ARGUMENT1
.3a327c	83 03		sta $03,s	                STA L_X                     ; Save it as X
.3a327e	a9 2c 00	lda #$002c	                LDA #','
.3a3281	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3284	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3287	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a328a	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a328c	20 81 31	jsr $3a3181	            JSR SPADDR
.3a328f	a3 03		lda $03,s	                LDA L_X                     ; Get the X coordinate
.3a3291	a0 04 00	ldy #$0004	                LDY #SP_X_COORD             ; Save the X coordinate for the sprite
.3a3294	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3296	a5 23		lda $0823	                LDA ARGUMENT1
.3a3298	a0 06 00	ldy #$0006	                LDY #SP_Y_COORD             ; Save the Y coordinate for the sprite
.3a329b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a329d					done
.3a329d	c2 20		rep #$20	            REP #$20
.3a329f	3b		tsc		            TSC
.3a32a0	18		clc		            CLC
.3a32a1	69 04 00	adc #$0004	            ADC #SIZE(locals)
.3a32a4	1b		tcs		            TCS
.3a32a5	28		plp		                PLP
.3a32a6	60		rts		            RTS
.3a32a7					S_SPRITESHOW
.3a32a7	08		php		                PHP
.3a32a8					locals
>0001					L_SPRITE        .word ?
>0003					L_VISIBLE       .byte ?
.3a32a8	c2 20		rep #$20	            REP #$20
.3a32aa	3b		tsc		            TSC
.3a32ab	38		sec		            SEC
.3a32ac	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.3a32af	1b		tcs		            TCS
.3a32b0	c2 30		rep #$30	            REP #$30
.3a32b2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a32b5	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a32b8	a5 23		lda $0823	                LDA ARGUMENT1
.3a32ba	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a32bc	a9 2c 00	lda #$002c	                LDA #','
.3a32bf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a32c2	e2 20		sep #$20	            SEP #$20
.3a32c4	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a32c7	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a32ca	a5 23		lda $0823	                LDA ARGUMENT1
.3a32cc	d0 04		bne $3a32d2	                BNE is_visible
.3a32ce	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 0 (not visible)
.3a32d0	80 04		bra $3a32d6	                BRA chk_layer
.3a32d2	a9 01		lda #$01	is_visible      LDA #1
.3a32d4	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 1 (visible)
.3a32d6	a9 2c		lda #$2c	chk_layer       LDA #','
.3a32d8	85 37		sta $0837	                STA TARGETTOK
.3a32da	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a32dd	b0 20		bcs $3a32ff	                BCS get_layer               ; Yes: get the layer
.3a32df					no_layer
.3a32df	c2 30		rep #$30	            REP #$30
.3a32e1	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a32e3	aa		tax		                TAX
.3a32e4	20 81 31	jsr $3a3181	            JSR SPADDR
.3a32e7	e2 20		sep #$20	            SEP #$20
.3a32e9	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.3a32ed	29 fe		and #$fe	                AND #$FE                    ; Filter out the enable bit
.3a32ef	85 0c		sta $080c	                STA SCRATCH
.3a32f1	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.3a32f3	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.3a32f5	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.3a32f7	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And save it
.3a32fb	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; ... and to Vicky
.3a32fd	80 36		bra $3a3335	                BRA done
.3a32ff					get_layer
.3a32ff	c2 30		rep #$30	            REP #$30
.3a3301	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3304	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3307	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a330a	a5 23		lda $0823	                LDA ARGUMENT1
.3a330c	c9 08 00	cmp #$0008	                CMP #8                      ; Make sure it's in range
.3a330f	b0 2e		bcs $3a333f	                BGE error                   ; If not, throw an out of range error
.3a3311	0a		asl a		                ASL A                       ; If it's ok... shift it into position
.3a3312	0a		asl a		                ASL A
.3a3313	0a		asl a		                ASL A
.3a3314	0a		asl a		                ASL A
.3a3315	85 0c		sta $080c	                STA SCRATCH                 ; And save it in SCRATCH
.3a3317	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a3319	aa		tax		                TAX
.3a331a	20 81 31	jsr $3a3181	            JSR SPADDR
.3a331d	e2 20		sep #$20	            SEP #$20
.3a331f	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.3a3321	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.3a3323	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.3a3325	85 0c		sta $080c	                STA SCRATCH
.3a3327	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.3a332b	29 8e		and #$8e	                AND #%10001110              ; Filter out the enable and layer bits
.3a332d	05 0c		ora $080c	                ORA SCRATCH                 ; Combine with the provided layer and enable
.3a332f	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the bits in Vicky
.3a3331	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And to the shadow registers
.3a3335					done
.3a3335	c2 20		rep #$20	            REP #$20
.3a3337	3b		tsc		            TSC
.3a3338	18		clc		            CLC
.3a3339	69 03 00	adc #$0003	            ADC #SIZE(locals)
.3a333c	1b		tcs		            TCS
.3a333d	28		plp		                PLP
.3a333e	60		rts		            RTS
.3a333f					error
.3a333f	08		php		            PHP
.3a3340	c2 20		rep #$20	            REP #$20
.3a3342	48		pha		            PHA
.3a3343	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3346	5b		tcd		            TCD
.3a3347	68		pla		            PLA
.3a3348	28		plp		            PLP
.3a3349	e2 20		sep #$20	            SEP #$20
.3a334b	a9 09		lda #$09	            LDA #ERR_RANGE
.3a334d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3351	c2 20		rep #$20	            REP #$20
.3a3353	29 ff 00	and #$00ff	            AND #$00FF
.3a3356	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3359	e2 20		sep #$20	            SEP #$20
.3a335b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a335e					TILESET_ADDR
.3a335e	08		php		                PHP
.3a335f	c2 20		rep #$20	            REP #$20
.3a3361	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.3a3364	b0 19		bcs $3a337f	                BGE out_of_range            ; If not, throw a range error
.3a3366	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.3a3369	a9 04 00	lda #$0004	                LDA #TILESET_REG_SIZE       ; Multiply it by the number of bytes in a tile set register set
.3a336c	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.3a336f	18		clc		                CLC                         ; Add to TILESET0_ADDY_L to get the final address
.3a3370	ad 04 01	lda $0104	                LDA @w M0_RESULT
.3a3373	69 80 02	adc #$0280	                ADC #<>TILESET0_ADDY_L
.3a3376	85 9e		sta $089e	                STA MTEMPPTR
.3a3378	a9 af 00	lda #$00af	                LDA #`TILESET0_ADDY_L
.3a337b	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a337d	28		plp		                PLP
.3a337e	60		rts		            RTS
.3a337f					out_of_range
.3a337f	08		php		            PHP
.3a3380	c2 20		rep #$20	            REP #$20
.3a3382	48		pha		            PHA
.3a3383	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3386	5b		tcd		            TCD
.3a3387	68		pla		            PLA
.3a3388	28		plp		            PLP
.3a3389	e2 20		sep #$20	            SEP #$20
.3a338b	a9 09		lda #$09	            LDA #ERR_RANGE
.3a338d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3391	c2 20		rep #$20	            REP #$20
.3a3393	29 ff 00	and #$00ff	            AND #$00FF
.3a3396	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3399	e2 20		sep #$20	            SEP #$20
.3a339b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a339e					TILEMAP_ADDR
.3a339e	08		php		                PHP
.3a339f	c2 20		rep #$20	            REP #$20
.3a33a1	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.3a33a4	b0 19		bcs $3a33bf	                BGE out_of_range            ; If not, throw a range error
.3a33a6	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.3a33a9	a9 0c 00	lda #$000c	                LDA #TILEMAP_REG_SIZE       ; Multiply it by the number of bytes in a tile map register set
.3a33ac	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.3a33af	18		clc		                CLC
.3a33b0	ad 04 01	lda $0104	                LDA @w M0_RESULT            ; Add to TL0_CONTROL_REG to get the final address
.3a33b3	69 00 02	adc #$0200	                ADC #<>TL0_CONTROL_REG
.3a33b6	85 9e		sta $089e	                STA MTEMPPTR
.3a33b8	a9 af 00	lda #$00af	                LDA #`TL0_CONTROL_REG
.3a33bb	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a33bd	28		plp		                PLP
.3a33be	60		rts		            RTS
.3a33bf					out_of_range
.3a33bf	08		php		            PHP
.3a33c0	c2 20		rep #$20	            REP #$20
.3a33c2	48		pha		            PHA
.3a33c3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a33c6	5b		tcd		            TCD
.3a33c7	68		pla		            PLA
.3a33c8	28		plp		            PLP
.3a33c9	e2 20		sep #$20	            SEP #$20
.3a33cb	a9 09		lda #$09	            LDA #ERR_RANGE
.3a33cd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a33d1	c2 20		rep #$20	            REP #$20
.3a33d3	29 ff 00	and #$00ff	            AND #$00FF
.3a33d6	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a33d9	e2 20		sep #$20	            SEP #$20
.3a33db	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a33de					S_TILESET
.3a33de	08		php		                PHP
.3a33df					locals
>0001					L_TILENUM       .word ?
>0003					L_LUT           .word ?
>0005					L_IS_SQUARE     .word ?
.3a33df	c2 20		rep #$20	            REP #$20
.3a33e1	3b		tsc		            TSC
.3a33e2	38		sec		            SEC
.3a33e3	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a33e6	1b		tcs		            TCS
.3a33e7	c2 20		rep #$20	            REP #$20
.3a33e9	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a33ec	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a33ef	a5 23		lda $0823	                LDA ARGUMENT1
.3a33f1	83 01		sta $01,s	                STA L_TILENUM               ; Save it as the tile set/map number
.3a33f3	a9 2c 00	lda #$002c	                LDA #','
.3a33f6	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a33f9	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a33fc	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a33ff	a5 23		lda $0823	                LDA ARGUMENT1
.3a3401	83 03		sta $03,s	                STA L_LUT                   ; Save it as LUT
.3a3403	a9 2c 00	lda #$002c	                LDA #','
.3a3406	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3409	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a340c	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a340f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3411	83 05		sta $05,s	                STA L_IS_SQUARE             ; Save it as IS_SQUARE
.3a3413	a9 2c 00	lda #$002c	                LDA #','
.3a3416	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3419	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a341c	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a341f	a3 01		lda $01,s	                LDA L_TILENUM
.3a3421	20 5e 33	jsr $3a335e	            JSR TILESET_ADDR
.3a3424	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the bitmap address - the address of the start of VRAM
.3a3426	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And save it to the registers
.3a3428	e2 20		sep #$20	            SEP #$20
.3a342a	38		sec		                SEC
.3a342b	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a342d	e9 b0		sbc #$b0	                SBC #`VRAM
.3a342f	a0 02 00	ldy #$0002	                LDY #TILESET_ADDY_H
.3a3432	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3434	a3 05		lda $05,s	                LDA L_IS_SQUARE             ; Check if is_square == 0?
.3a3436	d0 0d		bne $3a3445	                BNE is_square
.3a3438					not_square
.3a3438	e2 20		sep #$20	            SEP #$20
.3a343a	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.3a343c	29 07		and #$07	                AND #$07                    ; Force it to be in range
.3a343e	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.3a3441	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.3a3443	80 0d		bra $3a3452	                BRA done
.3a3445					is_square
.3a3445	e2 20		sep #$20	            SEP #$20
.3a3447	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.3a3449	29 07		and #$07	                AND #$07                    ; Force it to be in range
.3a344b	09 08		ora #$08	                ORA #TILESET_SQUARE_256     ; Turn on the 256x256 flag
.3a344d	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.3a3450	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.3a3452					done
.3a3452	c2 20		rep #$20	            REP #$20
.3a3454	3b		tsc		            TSC
.3a3455	18		clc		            CLC
.3a3456	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a3459	1b		tcs		            TCS
.3a345a	28		plp		                PLP
.3a345b	60		rts		            RTS
.3a345c					S_TILEMAP
.3a345c	08		php		                PHP
.3a345d					locals
>0001					L_TILENUM       .word ?
>0003					L_WIDTH         .word ?
>0005					L_HEIGHT        .word ?
.3a345d	c2 20		rep #$20	            REP #$20
.3a345f	3b		tsc		            TSC
.3a3460	38		sec		            SEC
.3a3461	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a3464	1b		tcs		            TCS
.3a3465	c2 20		rep #$20	            REP #$20
.3a3467	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a346a	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a346d	a5 23		lda $0823	                LDA ARGUMENT1
.3a346f	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a3471	a9 2c 00	lda #$002c	                LDA #','
.3a3474	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3477	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a347a	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a347d	a5 23		lda $0823	                LDA ARGUMENT1
.3a347f	83 03		sta $03,s	                STA L_WIDTH                 ; Save it as WIDTH
.3a3481	a9 2c 00	lda #$002c	                LDA #','
.3a3484	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3487	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a348a	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a348d	a5 23		lda $0823	                LDA ARGUMENT1
.3a348f	83 05		sta $05,s	                STA L_HEIGHT                ; Save it as HEIGHT
.3a3491	a9 2c 00	lda #$002c	                LDA #','
.3a3494	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3497	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a349a	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a349d	a3 01		lda $01,s	                LDA L_TILENUM
.3a349f	20 9e 33	jsr $3a339e	            JSR TILEMAP_ADDR
.3a34a2	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the map address - the address of the start of VRAM
.3a34a4	a0 01 00	ldy #$0001	                LDY #TILEMAP_START_ADDY
.3a34a7	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; And save it to the registers
.3a34a9	e2 20		sep #$20	            SEP #$20
.3a34ab	38		sec		                SEC
.3a34ac	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a34ae	e9 b0		sbc #$b0	                SBC #`VRAM
.3a34b0	c8		iny		                INY
.3a34b1	c8		iny		                INY
.3a34b2	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a34b4	c2 20		rep #$20	            REP #$20
.3a34b6	a3 03		lda $03,s	                LDA L_WIDTH                 ; Set the width
.3a34b8	a0 04 00	ldy #$0004	                LDY #TILEMAP_TOTAL_X
.3a34bb	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a34bd	a3 05		lda $05,s	                LDA L_HEIGHT                ; Set the height
.3a34bf	a0 06 00	ldy #$0006	                LDY #TILEMAP_TOTAL_Y
.3a34c2	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a34c4					done
.3a34c4	c2 20		rep #$20	            REP #$20
.3a34c6	3b		tsc		            TSC
.3a34c7	18		clc		            CLC
.3a34c8	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a34cb	1b		tcs		            TCS
.3a34cc	28		plp		                PLP
.3a34cd	60		rts		            RTS
.3a34ce					S_TILESHOW
.3a34ce	08		php		                PHP
.3a34cf					locals
>0001					L_TILENUM       .word ?
.3a34cf	c2 20		rep #$20	            REP #$20
.3a34d1	f4 00 00	pea #$0000	            PEA #0
.3a34d4	c2 20		rep #$20	            REP #$20
.3a34d6	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a34d9	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a34dc	a5 23		lda $0823	                LDA ARGUMENT1
.3a34de	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a34e0	a9 2c 00	lda #$002c	                LDA #','
.3a34e3	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a34e6	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a34e9	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a34ec	a3 01		lda $01,s	                LDA L_TILENUM
.3a34ee	20 9e 33	jsr $3a339e	            JSR TILEMAP_ADDR
.3a34f1	a5 23		lda $0823	                LDA ARGUMENT1               ; CHeck the visible parameter
.3a34f3	d0 06		bne $3a34fb	                BNE is_visible              ; If it's <> 0, make it visible
.3a34f5	e2 20		sep #$20	            SEP #$20
.3a34f7	a9 00		lda #$00	                LDA #0                      ; Control value for invisible
.3a34f9	80 04		bra $3a34ff	                BRA set_control
.3a34fb					is_visible
.3a34fb	e2 20		sep #$20	            SEP #$20
.3a34fd	a9 01		lda #$01	                LDA #TILEMAP_VISIBLE        ; Control value for visible
.3a34ff					set_control
.3a34ff	e2 20		sep #$20	            SEP #$20
.3a3501	a0 00 00	ldy #$0000	                LDY #TILEMAP_CONTROL        ; Set the control register
.3a3504	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3506					done
.3a3506	c2 20		rep #$20	            REP #$20
.3a3508	68		pla		            PLA
.3a3509	28		plp		                PLP
.3a350a	60		rts		            RTS
.3a350b					S_TILEAT
.3a350b	08		php		                PHP
.3a350c					locals
>0001					L_TILENUM       .word ?
>0003					L_X             .word ?
.3a350c	c2 20		rep #$20	            REP #$20
.3a350e	3b		tsc		            TSC
.3a350f	38		sec		            SEC
.3a3510	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.3a3513	1b		tcs		            TCS
.3a3514	c2 20		rep #$20	            REP #$20
.3a3516	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3519	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a351c	a5 23		lda $0823	                LDA ARGUMENT1
.3a351e	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a3520	a9 2c 00	lda #$002c	                LDA #','
.3a3523	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3526	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3529	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a352c	a5 23		lda $0823	                LDA ARGUMENT1
.3a352e	83 03		sta $03,s	                STA L_X                     ; Save as X
.3a3530	a9 2c 00	lda #$002c	                LDA #','
.3a3533	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3536	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3539	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a353c	a3 01		lda $01,s	                LDA L_TILENUM
.3a353e	20 9e 33	jsr $3a339e	            JSR TILEMAP_ADDR
.3a3541	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the Y position
.3a3543	a0 0a 00	ldy #$000a	                LDY #TILEMAP_WINDOW_Y
.3a3546	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3548	a3 03		lda $03,s	                LDA L_X                     ; Set the X position
.3a354a	a0 08 00	ldy #$0008	                LDY #TILEMAP_WINDOW_X
.3a354d	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a354f					done
.3a354f	c2 20		rep #$20	            REP #$20
.3a3551	3b		tsc		            TSC
.3a3552	18		clc		            CLC
.3a3553	69 04 00	adc #$0004	            ADC #SIZE(locals)
.3a3556	1b		tcs		            TCS
.3a3557	28		plp		                PLP
.3a3558	60		rts		            RTS
=0					DMA_LINEAR = 0                              ; Memory to copy is a continguous, linear range
=1					DMA_RECT = 1                                ; Memory to copy is a rectangular block
.0000					DMA_BLOCK
>0000					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>0001					ADDR            .long ?                     ; The starting address for the data to transfer
>0004					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>0007					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>0009					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>000b					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
=$01					DMA_SRC_2D = $01                            ; Source transfer should be 2D
=$02					DMA_DST_2D = $02                            ; Destination transfer should be 2D
=$10					DMA_SRC_SRAM = $10                          ; Flag indicating that the source is in SRAM ($00:0000 - $3F:FFFF)
=$20					DMA_DST_SRAM = $20                          ; Flag indicating that the destination is in SRAM ($00:0000 - $3F:FFFF)
>3af058					DMA_BLOCKS      .byte ?                     ; What blocks are involved
.3af059					DMA_SRC
>3af059					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>3af05a					ADDR            .long ?                     ; The starting address for the data to transfer
>3af05d					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>3af060					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>3af062					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>3af064					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.3af066					DMA_DEST
>3af066					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>3af067					ADDR            .long ?                     ; The starting address for the data to transfer
>3af06a					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>3af06d					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>3af06f					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>3af071					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.3a3559					DO_DMA
.3a3559	0b		phd		                PHD
.3a355a	08		php		                PHP
.3a355b	08		php		            PHP
.3a355c	c2 20		rep #$20	            REP #$20
.3a355e	48		pha		            PHA
.3a355f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a3562	5b		tcd		            TCD
.3a3563	68		pla		            PLA
.3a3564	28		plp		            PLP
.3a3565	e2 20		sep #$20	            SEP #$20
.3a3567	a9 00		lda #$00	                LDA #0
.3a3569	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS           ; Set mode to something neutral
.3a356d	af 5c f0 3a	lda $3af05c	                LDA @l DMA_SRC.ADDR+2       ; Check the bank
.3a3571	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.3a3573	b0 1c		bcs $3a3591	                BGE src_vram                ; Yes: leave the DMA_BLOCK bit alone
.3a3575	8f 24 04 af	sta $af0424	src_sram        STA @l SDMA_SRC_ADDY_H      ; Set the SDMA source address
.3a3579	af 5b f0 3a	lda $3af05b	                LDA @l DMA_SRC.ADDR+1
.3a357d	8f 23 04 af	sta $af0423	                STA @l SDMA_SRC_ADDY_M
.3a3581	af 5a f0 3a	lda $3af05a	                LDA @l DMA_SRC.ADDR
.3a3585	8f 22 04 af	sta $af0422	                STA @l SDMA_SRC_ADDY_L
.3a3589	a9 10		lda #$10	                LDA #DMA_SRC_SRAM           ; Set the SRAM source block bit
.3a358b	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a358f	80 17		bra $3a35a8	                BRA src_mode
.3a3591	38		sec		src_vram        SEC                         ; Convert to VRAM relative address
.3a3592	e9 b0		sbc #$b0	                SBC #`VRAM
.3a3594	8f 04 04 af	sta $af0404	                STA @l VDMA_SRC_ADDY_H      ; Set the VDMA source address
.3a3598	af 5b f0 3a	lda $3af05b	                LDA @l DMA_SRC.ADDR+1
.3a359c	8f 03 04 af	sta $af0403	                STA @l VDMA_SRC_ADDY_M
.3a35a0	af 5a f0 3a	lda $3af05a	                LDA @l DMA_SRC.ADDR
.3a35a4	8f 02 04 af	sta $af0402	                STA @l VDMA_SRC_ADDY_L
.3a35a8	af 59 f0 3a	lda $3af059	src_mode        LDA @l DMA_SRC.MODE         ; Determine if source is 1D or 2D
.3a35ac	d0 3c		bne $3a35ea	                BNE src_2d
.3a35ae	af 58 f0 3a	lda $3af058	src_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.3a35b2	f0 1b		beq $3a35cf	                BEQ src_1d_vram
.3a35b4	af 5d f0 3a	lda $3af05d	src_1d_sram     LDA @l DMA_SRC.SIZE         ; It's SRAM, so set the SDMA size
.3a35b8	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.3a35bc	af 5e f0 3a	lda $3af05e	                LDA @l DMA_SRC.SIZE+1
.3a35c0	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_M
.3a35c4	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a35c8	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.3a35cc	82 8b 00	brl $3a365a	                BRL set_dst                 ; Go to set up the destination
.3a35cf	af 5d f0 3a	lda $3af05d	src_1d_vram     LDA @l DMA_SRC.SIZE         ; It's VRAM, so set the VDMA size
.3a35d3	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.3a35d7	af 5e f0 3a	lda $3af05e	                LDA @l DMA_SRC.SIZE+1
.3a35db	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_M
.3a35df	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a35e3	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.3a35e7	82 70 00	brl $3a365a	                BRL set_dst                 ; Go to set up the destination
.3a35ea	af 58 f0 3a	lda $3af058	src_2d          LDA @l DMA_BLOCKS
.3a35ee	09 01		ora #$01	                ORA #DMA_SRC_2D             ; Set the bit to make the source a 2D transfer
.3a35f0	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a35f4	89 10		bit #$10	                BIT #DMA_SRC_SRAM           ; Are we writing to SRAM
.3a35f6	f0 32		beq $3a362a	                BEQ src_2d_vram             ; No: set the 2d values in the VRAM source
.3a35f8	af 60 f0 3a	lda $3af060	src_2d_sram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.3a35fc	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.3a3600	af 61 f0 3a	lda $3af061	                LDA @l DMA_SRC.WIDTH+1
.3a3604	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.3a3608	af 62 f0 3a	lda $3af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.3a360c	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.3a3610	af 63 f0 3a	lda $3af063	                LDA @l DMA_SRC.HEIGHT+1
.3a3614	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.3a3618	af 64 f0 3a	lda $3af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.3a361c	8f 2c 04 af	sta $af042c	                STA @l SDMA_SRC_STRIDE_L
.3a3620	af 65 f0 3a	lda $3af065	                LDA @l DMA_SRC.STRIDE+1
.3a3624	8f 2d 04 af	sta $af042d	                STA @l SDMA_SRC_STRIDE_L+1
.3a3628	80 30		bra $3a365a	                BRA set_dst
.3a362a	af 60 f0 3a	lda $3af060	src_2d_vram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.3a362e	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a3632	af 61 f0 3a	lda $3af061	                LDA @l DMA_SRC.WIDTH+1
.3a3636	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.3a363a	af 62 f0 3a	lda $3af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.3a363e	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a3642	af 63 f0 3a	lda $3af063	                LDA @l DMA_SRC.HEIGHT+1
.3a3646	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.3a364a	af 64 f0 3a	lda $3af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.3a364e	8f 0c 04 af	sta $af040c	                STA @l VDMA_SRC_STRIDE_L
.3a3652	af 65 f0 3a	lda $3af065	                LDA @l DMA_SRC.STRIDE+1
.3a3656	8f 0d 04 af	sta $af040d	                STA @l VDMA_SRC_STRIDE_L+1
.3a365a					set_dst
.3a365a	e2 20		sep #$20	            SEP #$20
.3a365c	af 69 f0 3a	lda $3af069	                LDA @l DMA_DEST.ADDR+2      ; Check the bank
.3a3660	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.3a3662	b0 20		bcs $3a3684	                BGE dst_vram                ; Yes: leave the DMA_BLOCK bit alone
.3a3664	8f 27 04 af	sta $af0427	dst_sram        STA @l SDMA_DST_ADDY_H      ; Set the SDMA destination address
.3a3668	af 68 f0 3a	lda $3af068	                LDA @l DMA_DEST.ADDR+1
.3a366c	8f 26 04 af	sta $af0426	                STA @l SDMA_DST_ADDY_M
.3a3670	af 67 f0 3a	lda $3af067	                LDA @l DMA_DEST.ADDR
.3a3674	8f 25 04 af	sta $af0425	                STA @l SDMA_DST_ADDY_L
.3a3678	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS
.3a367c	09 20		ora #$20	                ORA #DMA_DST_SRAM           ; Set the bit to indicate the destination is SRAM
.3a367e	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a3682	80 17		bra $3a369b	                BRA dst_mode
.3a3684	38		sec		dst_vram        SEC                         ; Convert to VRAM relative address
.3a3685	e9 b0		sbc #$b0	                SBC #`VRAM
.3a3687	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H      ; Set the VDMA destination address
.3a368b	af 68 f0 3a	lda $3af068	                LDA @l DMA_DEST.ADDR+1
.3a368f	8f 06 04 af	sta $af0406	                STA @l VDMA_DST_ADDY_M
.3a3693	af 67 f0 3a	lda $3af067	                LDA @l DMA_DEST.ADDR
.3a3697	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.3a369b	af 66 f0 3a	lda $3af066	dst_mode        LDA @l DMA_DEST.MODE
.3a369f	d0 3e		bne $3a36df	                BNE dst_2d                  ; If 2D, set up the 2D destination parameters
.3a36a1	af 58 f0 3a	lda $3af058	dst_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.3a36a5	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Is the destination SRAM?
.3a36a7	f0 1b		beq $3a36c4	                BEQ dst_1d_vram
.3a36a9	af 6a f0 3a	lda $3af06a	dst_1d_sram     LDA @l DMA_DEST.SIZE
.3a36ad	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.3a36b1	af 6b f0 3a	lda $3af06b	                LDA @l DMA_DEST.SIZE+1
.3a36b5	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_L+1
.3a36b9	af 6c f0 3a	lda $3af06c	                LDA @l DMA_DEST.SIZE+2
.3a36bd	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.3a36c1	82 8b 00	brl $3a374f	                BRL start_xfer
.3a36c4	af 6a f0 3a	lda $3af06a	dst_1d_vram     LDA @l DMA_DEST.SIZE
.3a36c8	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.3a36cc	af 6b f0 3a	lda $3af06b	                LDA @l DMA_DEST.SIZE+1
.3a36d0	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_L+1
.3a36d4	af 6c f0 3a	lda $3af06c	                LDA @l DMA_DEST.SIZE+2
.3a36d8	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.3a36dc	82 70 00	brl $3a374f	                BRL start_xfer
.3a36df	af 58 f0 3a	lda $3af058	dst_2d          LDA @l DMA_BLOCKS
.3a36e3	09 02		ora #$02	                ORA #DMA_DST_2D             ; Set the bit to make the source a 2D transfer
.3a36e5	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a36e9	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Are we writing to the SRAM?
.3a36eb	f0 32		beq $3a371f	                BEQ dst_2d_vram             ; No: set the 2D parameters for VRAM
.3a36ed	af 6d f0 3a	lda $3af06d	dst_2d_sram     LDA @l DMA_DEST.WIDTH       ; Set the SRAM width
.3a36f1	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.3a36f5	af 6e f0 3a	lda $3af06e	                LDA @L DMA_DEST.WIDTH+1
.3a36f9	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.3a36fd	af 6f f0 3a	lda $3af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the SRAM height
.3a3701	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.3a3705	af 70 f0 3a	lda $3af070	                LDA @L DMA_DEST.HEIGHT+1
.3a3709	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.3a370d	af 71 f0 3a	lda $3af071	                LDA @l DMA_DEST.STRIDE      ; Set the SRAM stride
.3a3711	8f 2e 04 af	sta $af042e	                STA @l SDMA_DST_STRIDE_L
.3a3715	af 72 f0 3a	lda $3af072	                LDA @L DMA_DEST.STRIDE+1
.3a3719	8f 2f 04 af	sta $af042f	                STA @l SDMA_DST_STRIDE_L+1
.3a371d	80 30		bra $3a374f	                BRA start_xfer
.3a371f	af 6d f0 3a	lda $3af06d	dst_2d_vram     LDA @l DMA_DEST.WIDTH       ; Set the VRAM width
.3a3723	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a3727	af 6e f0 3a	lda $3af06e	                LDA @L DMA_DEST.WIDTH+1
.3a372b	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.3a372f	af 6f f0 3a	lda $3af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the VRAM height
.3a3733	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a3737	af 70 f0 3a	lda $3af070	                LDA @L DMA_DEST.HEIGHT+1
.3a373b	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.3a373f	af 71 f0 3a	lda $3af071	                LDA @l DMA_DEST.STRIDE      ; Set the VRAM stride
.3a3743	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L
.3a3747	af 72 f0 3a	lda $3af072	                LDA @L DMA_DEST.STRIDE+1
.3a374b	8f 0f 04 af	sta $af040f	                STA @l VDMA_DST_STRIDE_L+1
.3a374f	af 58 f0 3a	lda $3af058	start_xfer      LDA @l DMA_BLOCKS
.3a3753	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.3a3755	f0 43		beq $3a379a	                BEQ start_vdma_only
.3a3757	c9 10		cmp #$10	                CMP #DMA_SRC_SRAM
.3a3759	f0 76		beq $3a37d1	                BEQ start_s2v
.3a375b	c9 20		cmp #$20	                CMP #DMA_DST_SRAM
.3a375d	d0 03		bne $3a3762	                BNE start_sdma_only
.3a375f	82 8a 00	brl $3a37ec	                BRL start_v2s
.3a3762					start_sdma_only
.3a3762	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.3a3766	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.3a3768	f0 23		beq $3a378d	                BEQ sdma_1d_only            ; Source and Destination 1D...
.3a376a	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.3a376c	f0 23		beq $3a3791	                BEQ sdma_2d_only            ; Source and Destination 2D
.3a376e	08		php		            PHP
.3a376f	c2 20		rep #$20	            REP #$20
.3a3771	48		pha		            PHA
.3a3772	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3775	5b		tcd		            TCD
.3a3776	68		pla		            PLA
.3a3777	28		plp		            PLP
.3a3778	e2 20		sep #$20	            SEP #$20
.3a377a	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a377c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3780	c2 20		rep #$20	            REP #$20
.3a3782	29 ff 00	and #$00ff	            AND #$00FF
.3a3785	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3788	e2 20		sep #$20	            SEP #$20
.3a378a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a378d	a9 01		lda #$01	sdma_1d_only    LDA #SDMA_CTRL0_Enable      ; Set the bits for 1D, SRAM->SRAM
.3a378f	80 02		bra $3a3793	                BRA sdma_set_ctrl
.3a3791	a9 03		lda #$03	sdma_2d_only    LDA #SDMA_CTRL0_Enable | SDMA_CTRL0_1D_2D
.3a3793	8f 20 04 af	sta $af0420	sdma_set_ctrl   STA @l SDMA_CTRL_REG0
.3a3797	82 7d 00	brl $3a3817	                BRL trig_sdma               ; And trigger the SDMA
.3a379a					start_vdma_only
.3a379a	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.3a379e	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.3a37a0	f0 23		beq $3a37c5	                BEQ vdma_1d_only            ; Source and Destination 1D...
.3a37a2	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.3a37a4	f0 23		beq $3a37c9	                BEQ vdma_2d_only            ; Source and Destination 2D...
.3a37a6	08		php		            PHP
.3a37a7	c2 20		rep #$20	            REP #$20
.3a37a9	48		pha		            PHA
.3a37aa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a37ad	5b		tcd		            TCD
.3a37ae	68		pla		            PLA
.3a37af	28		plp		            PLP
.3a37b0	e2 20		sep #$20	            SEP #$20
.3a37b2	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a37b4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a37b8	c2 20		rep #$20	            REP #$20
.3a37ba	29 ff 00	and #$00ff	            AND #$00FF
.3a37bd	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a37c0	e2 20		sep #$20	            SEP #$20
.3a37c2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a37c5	a9 01		lda #$01	vdma_1d_only    LDA #VDMA_CTRL_Enable       ; Set the bits for 1D, VRAM->VRAM
.3a37c7	80 02		bra $3a37cb	                BRA vdma_set_ctrl
.3a37c9	a9 03		lda #$03	vdma_2d_only    LDA #VDMA_CTRL_Enable | VDMA_CTRL_1D_2D
.3a37cb	8f 00 04 af	sta $af0400	vdma_set_ctrl   STA @l VDMA_CONTROL_REG
.3a37cf	80 34		bra $3a3805	                BRA trig_vdma               ; And trigger the VDMA
.3a37d1					start_s2v
.3a37d1	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.3a37d5	29 01		and #$01	                AND #DMA_SRC_2D
.3a37d7	0a		asl a		                ASL A
.3a37d8	09 11		ora #$11	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src
.3a37da	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a37de	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.3a37e2	29 02		and #$02	                AND #DMA_DST_2D
.3a37e4	09 11		ora #$11	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Src
.3a37e6	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a37ea	80 19		bra $3a3805	                BRA trig_vdma               ; And trigger the VDMA
.3a37ec					start_v2s
.3a37ec	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.3a37f0	29 02		and #$02	                AND #DMA_DST_2D
.3a37f2	09 21		ora #$21	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Dst
.3a37f4	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a37f8	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.3a37fc	29 01		and #$01	                AND #DMA_SRC_2D
.3a37fe	0a		asl a		                ASL A
.3a37ff	09 21		ora #$21	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Dst
.3a3801	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3805					trig_vdma
.3a3805	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.3a3809	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF    ; Trigger the VDMA
.3a380b	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a380f	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check if we need SDMA
.3a3813	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.3a3815	f0 0f		beq $3a3826	                BEQ wait_vdma               ; No: wait for VDMA to complete
.3a3817					trig_sdma
.3a3817	af 20 04 af	lda $af0420	                LDA @l SDMA_CTRL_REG0
.3a381b	09 80		ora #$80	                ORA #SDMA_CTRL0_Start_TRF   ; Trigger the SDMA
.3a381d	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a3821	ea		nop		                NOP                         ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3a3822	ea		nop		                NOP                         ; Before it actually gets to stop it will execute a couple more instructions
.3a3823	ea		nop		                NOP                         ; From that point on, the CPU is halted (keep that in mind)
.3a3824	ea		nop		                NOP                         ; No IRQ will be processed either during that time
.3a3825	ea		nop		                NOP
.3a3826	af 01 04 af	lda $af0401	wait_vdma       LDA @l VDMA_STATUS_REG      ; Check the VDMA status
.3a382a	89 80		bit #$80	                BIT #VDMA_STAT_VDMA_IPS     ; If the transfer is still in process...
.3a382c	d0 f8		bne $3a3826	                BNE wait_vdma               ; Wait until it stops.
.3a382e	a9 00		lda #$00	                LDA #$00                    ; Clear the TRF bits
.3a3830	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a3834	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3838	28		plp		                PLP
.3a3839	2b		pld		                PLD
.3a383a	60		rts		            RTS
.3a383b					S_MEMCOPY
.3a383b	0b		phd		                PHD
.3a383c	08		php		                PHP
.3a383d	e2 20		sep #$20	            SEP #$20
.3a383f	c2 10		rep #$10	            REP #$10
.3a3841	a9 00		lda #$00	                LDA #0
.3a3843	a2 00 00	ldx #$0000	                LDX #0
.3a3846	8f 59 f0 3a	sta $3af059	clr_loop        STA @l DMA_SRC
.3a384a	e8		inx		                INX
.3a384b	e0 1a 00	cpx #$001a	                CPX #SIZE(DMA_BLOCK) * 2
.3a384e	d0 f6		bne $3a3846	                BNE clr_loop
.3a3850	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a3853	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.3a3855	f0 23		beq $3a387a	                BEQ src_linear                      ; Yes: go to process a linear source
.3a3857	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.3a3859	f0 5e		beq $3a38b9	                BEQ src_rect                        ; Yes: go to process a rectangular source
.3a385b					syntax_err
.3a385b	08		php		            PHP
.3a385c	c2 20		rep #$20	            REP #$20
.3a385e	48		pha		            PHA
.3a385f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3862	5b		tcd		            TCD
.3a3863	68		pla		            PLA
.3a3864	28		plp		            PLP
.3a3865	e2 20		sep #$20	            SEP #$20
.3a3867	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3869	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a386d	c2 20		rep #$20	            REP #$20
.3a386f	29 ff 00	and #$00ff	            AND #$00FF
.3a3872	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3875	e2 20		sep #$20	            SEP #$20
.3a3877	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a387a					src_linear
.3a387a	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a387d	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3880	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3883	c2 20		rep #$20	            REP #$20
.3a3885	a5 23		lda $0823	            LDA ARGUMENT1
.3a3887	8f 5a f0 3a	sta $3af05a	            STA DMA_SRC.ADDR
.3a388b	e2 20		sep #$20	            SEP #$20
.3a388d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a388f	8f 5c f0 3a	sta $3af05c	            STA DMA_SRC.ADDR+2
.3a3893	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a3895	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3898	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a389b	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a389e	c2 20		rep #$20	            REP #$20
.3a38a0	a5 23		lda $0823	            LDA ARGUMENT1
.3a38a2	8f 5d f0 3a	sta $3af05d	            STA DMA_SRC.SIZE
.3a38a6	e2 20		sep #$20	            SEP #$20
.3a38a8	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a38aa	8f 5f f0 3a	sta $3af05f	            STA DMA_SRC.SIZE+2
.3a38ae	e2 20		sep #$20	            SEP #$20
.3a38b0	a9 00		lda #$00	            LDA #<DMA_LINEAR
.3a38b2	8f 59 f0 3a	sta $3af059	            STA DMA_SRC.MODE
.3a38b6	82 74 00	brl $3a392d	                BRL process_to
.3a38b9					src_rect
.3a38b9	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a38bc	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a38bf	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a38c2	c2 20		rep #$20	            REP #$20
.3a38c4	a5 23		lda $0823	            LDA ARGUMENT1
.3a38c6	8f 5a f0 3a	sta $3af05a	            STA DMA_SRC.ADDR
.3a38ca	e2 20		sep #$20	            SEP #$20
.3a38cc	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a38ce	8f 5c f0 3a	sta $3af05c	            STA DMA_SRC.ADDR+2
.3a38d2	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a38d4	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a38d7	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a38da	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a38dd	c2 20		rep #$20	            REP #$20
.3a38df	a5 23		lda $0823	            LDA ARGUMENT1
.3a38e1	8f 60 f0 3a	sta $3af060	            STA DMA_SRC.WIDTH
.3a38e5	8d 00 01	sta $0100	            STA M0_OPERAND_A
.3a38e8	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a38eb	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a38ee	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a38f1	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a38f4	c2 20		rep #$20	            REP #$20
.3a38f6	a5 23		lda $0823	            LDA ARGUMENT1
.3a38f8	8f 62 f0 3a	sta $3af062	            STA DMA_SRC.HEIGHT
.3a38fc	8d 02 01	sta $0102	            STA M0_OPERAND_B
.3a38ff	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3902	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3905	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3908	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a390b	c2 20		rep #$20	            REP #$20
.3a390d	a5 23		lda $0823	            LDA ARGUMENT1
.3a390f	8f 64 f0 3a	sta $3af064	            STA DMA_SRC.STRIDE
.3a3913	c2 20		rep #$20	            REP #$20
.3a3915	ad 04 01	lda $0104	            LDA M0_RESULT
.3a3918	8f 5d f0 3a	sta $3af05d	            STA DMA_SRC.SIZE
.3a391c	e2 20		sep #$20	            SEP #$20
.3a391e	ad 06 01	lda $0106	            LDA M0_RESULT+2
.3a3921	8f 5f f0 3a	sta $3af05f	            STA DMA_SRC.SIZE+2
.3a3925	e2 20		sep #$20	            SEP #$20
.3a3927	a9 01		lda #$01	            LDA #<DMA_RECT
.3a3929	8f 59 f0 3a	sta $3af059	            STA DMA_SRC.MODE
.3a392d					process_to
.3a392d	e2 20		sep #$20	            SEP #$20
.3a392f	a9 9c		lda #$9c	                LDA #TOK_TO
.3a3931	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3934	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a3937	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.3a3939	f0 23		beq $3a395e	                BEQ dest_linear                     ; Yes: go to process a linear destination
.3a393b	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.3a393d	f0 5e		beq $3a399d	                BEQ dest_rect                       ; Yes: go to process a rectangular source
.3a393f					syntax_err2
.3a393f	08		php		            PHP
.3a3940	c2 20		rep #$20	            REP #$20
.3a3942	48		pha		            PHA
.3a3943	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3946	5b		tcd		            TCD
.3a3947	68		pla		            PLA
.3a3948	28		plp		            PLP
.3a3949	e2 20		sep #$20	            SEP #$20
.3a394b	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a394d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3951	c2 20		rep #$20	            REP #$20
.3a3953	29 ff 00	and #$00ff	            AND #$00FF
.3a3956	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3959	e2 20		sep #$20	            SEP #$20
.3a395b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a395e					dest_linear
.3a395e	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3961	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3964	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3967	c2 20		rep #$20	            REP #$20
.3a3969	a5 23		lda $0823	            LDA ARGUMENT1
.3a396b	8f 67 f0 3a	sta $3af067	            STA DMA_DEST.ADDR
.3a396f	e2 20		sep #$20	            SEP #$20
.3a3971	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3973	8f 69 f0 3a	sta $3af069	            STA DMA_DEST.ADDR+2
.3a3977	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a3979	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a397c	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a397f	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3982	c2 20		rep #$20	            REP #$20
.3a3984	a5 23		lda $0823	            LDA ARGUMENT1
.3a3986	8f 6a f0 3a	sta $3af06a	            STA DMA_DEST.SIZE
.3a398a	e2 20		sep #$20	            SEP #$20
.3a398c	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a398e	8f 6c f0 3a	sta $3af06c	            STA DMA_DEST.SIZE+2
.3a3992	e2 20		sep #$20	            SEP #$20
.3a3994	a9 00		lda #$00	            LDA #<DMA_LINEAR
.3a3996	8f 66 f0 3a	sta $3af066	            STA DMA_DEST.MODE
.3a399a	82 74 00	brl $3a3a11	                BRL verify
.3a399d					dest_rect
.3a399d	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a39a0	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a39a3	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a39a6	c2 20		rep #$20	            REP #$20
.3a39a8	a5 23		lda $0823	            LDA ARGUMENT1
.3a39aa	8f 67 f0 3a	sta $3af067	            STA DMA_DEST.ADDR
.3a39ae	e2 20		sep #$20	            SEP #$20
.3a39b0	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a39b2	8f 69 f0 3a	sta $3af069	            STA DMA_DEST.ADDR+2
.3a39b6	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a39b8	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a39bb	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a39be	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a39c1	c2 20		rep #$20	            REP #$20
.3a39c3	a5 23		lda $0823	            LDA ARGUMENT1
.3a39c5	8f 6d f0 3a	sta $3af06d	            STA DMA_DEST.WIDTH
.3a39c9	8d 00 01	sta $0100	            STA M0_OPERAND_A
.3a39cc	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a39cf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a39d2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a39d5	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a39d8	c2 20		rep #$20	            REP #$20
.3a39da	a5 23		lda $0823	            LDA ARGUMENT1
.3a39dc	8f 6f f0 3a	sta $3af06f	            STA DMA_DEST.HEIGHT
.3a39e0	8d 02 01	sta $0102	            STA M0_OPERAND_B
.3a39e3	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a39e6	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a39e9	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a39ec	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a39ef	c2 20		rep #$20	            REP #$20
.3a39f1	a5 23		lda $0823	            LDA ARGUMENT1
.3a39f3	8f 71 f0 3a	sta $3af071	            STA DMA_DEST.STRIDE
.3a39f7	c2 20		rep #$20	            REP #$20
.3a39f9	ad 04 01	lda $0104	            LDA M0_RESULT
.3a39fc	8f 6a f0 3a	sta $3af06a	            STA DMA_DEST.SIZE
.3a3a00	e2 20		sep #$20	            SEP #$20
.3a3a02	ad 06 01	lda $0106	            LDA M0_RESULT+2
.3a3a05	8f 6c f0 3a	sta $3af06c	            STA DMA_DEST.SIZE+2
.3a3a09	e2 20		sep #$20	            SEP #$20
.3a3a0b	a9 01		lda #$01	            LDA #<DMA_RECT
.3a3a0d	8f 66 f0 3a	sta $3af066	            STA DMA_DEST.MODE
.3a3a11					verify
.3a3a11	c2 20		rep #$20	            REP #$20
.3a3a13	af 5d f0 3a	lda $3af05d	                LDA @l DMA_SRC.SIZE
.3a3a17	cf 6a f0 3a	cmp $3af06a	                CMP @l DMA_DEST.SIZE
.3a3a1b	d0 14		bne $3a3a31	                BNE size_err
.3a3a1d	e2 20		sep #$20	            SEP #$20
.3a3a1f	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a3a23	cf 6c f0 3a	cmp $3af06c	                CMP @l DMA_DEST.SIZE+2
.3a3a27	d0 08		bne $3a3a31	                BNE size_err
.3a3a29	c2 20		rep #$20	            REP #$20
.3a3a2b	20 59 35	jsr $3a3559	            JSR DO_DMA
.3a3a2e	28		plp		                PLP
.3a3a2f	2b		pld		                PLD
.3a3a30	60		rts		            RTS
.3a3a31					size_err
.3a3a31	08		php		            PHP
.3a3a32	c2 20		rep #$20	            REP #$20
.3a3a34	48		pha		            PHA
.3a3a35	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3a38	5b		tcd		            TCD
.3a3a39	68		pla		            PLA
.3a3a3a	28		plp		            PLP
.3a3a3b	e2 20		sep #$20	            SEP #$20
.3a3a3d	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a3a3f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3a43	c2 20		rep #$20	            REP #$20
.3a3a45	29 ff 00	and #$00ff	            AND #$00FF
.3a3a48	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3a4b	e2 20		sep #$20	            SEP #$20
.3a3a4d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3a50					S_LOCATE
.3a3a50	08		php		                PHP
.3a3a51	c2 30		rep #$30	            REP #$30
.3a3a53	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3a56	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a3a59	a5 23		lda $0823	                LDA ARGUMENT1
.3a3a5b	48		pha		                PHA                         ; Save it for later
.3a3a5c	a9 2c 00	lda #$002c	                LDA #','                    ; Check for the comma separator
.3a3a5f	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3a62	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3a65	20 4e 06	jsr $3a064e	            JSR ASS_ARG1_BYTE
.3a3a68	a4 23		ldy $0823	                LDY ARGUMENT1               ; Set Y to the row
.3a3a6a	fa		plx		                PLX                         ; Set X to the column
.3a3a6b	20 20 00	jsr $3a0020	            JSR CURSORXY
.3a3a6e	28		plp		                PLP
.3a3a6f	60		rts		            RTS

;******  Return to file: src\statements.s

.3a3a70					S_INPUT
.3a3a70	08		php		                PHP
.3a3a71					varloop
.3a3a71	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3a74	e2 20		sep #$20	            SEP #$20
.3a3a76	a7 00		lda [$0800]	                LDA [BIP]
.3a3a78	d0 03		bne $3a3a7d	                BNE check_colon
.3a3a7a	4c 18 3b	jmp $3a3b18	                JMP done            ; If EOL, we're done
.3a3a7d	c9 3a		cmp #$3a	check_colon     CMP #':'
.3a3a7f	d0 03		bne $3a3a84	                BNE check_string
.3a3a81	4c 18 3b	jmp $3a3b18	                JMP done            ; If colon, we're done
.3a3a84	c9 22		cmp #$22	check_string    CMP #CHAR_DQUOTE    ; Is it the start of a string?
.3a3a86	d0 0b		bne $3a3a93	                BNE check_var       ; No: then it should be a variable name
.3a3a88	20 92 1a	jsr $3a1a92	            JSR EVALSTRING
.3a3a8b	20 26 44	jsr $3a4426	            JSR PR_STRING
.3a3a8e	a9 3b		lda #$3b	                LDA #';'            ; Look for a semicolon
.3a3a90	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3a93					check_var
.3a3a93	20 cd 03	jsr $3a03cd	            JSR ISALPHA
.3a3a96	90 44		bcc $3a3adc	                BCC syntax_err      ; No: it's a syntax error
.3a3a98	20 cc 51	jsr $3a51cc	            JSR VAR_FINDNAME
.3a3a9b	90 3f		bcc $3a3adc	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3a9d	a9 3f		lda #$3f	                LDA #"?"            ; Print a "? " to follow
.3a3a9f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3aa2	a9 20		lda #$20	                LDA #CHAR_SP
.3a3aa4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3aa7	20 10 00	jsr $3a0010	            JSR INPUTLINE
.3a3aaa	e2 20		sep #$20	            SEP #$20
.3a3aac	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Check the type of the variable
.3a3aae	c9 02		cmp #$02	                CMP #TYPE_STRING    ; If it's a string...
.3a3ab0	f0 49		beq $3a3afb	                BEQ in_string       ; ... go to copy the string data
.3a3ab2	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; If it's an integer...
.3a3ab4	d0 03		bne $3a3ab9	                BNE chk_float
.3a3ab6	82 84 00	brl $3a3b3d	                BRL in_integer      ; ... go to parse the integer
.3a3ab9	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT     ; If it's a float...
.3a3abb	f0 5d		beq $3a3b1a	                BEQ in_float        ; ... go to parse the float
.3a3abd	08		php		            PHP
.3a3abe	c2 20		rep #$20	            REP #$20
.3a3ac0	48		pha		            PHA
.3a3ac1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3ac4	5b		tcd		            TCD
.3a3ac5	68		pla		            PLA
.3a3ac6	28		plp		            PLP
.3a3ac7	e2 20		sep #$20	            SEP #$20
.3a3ac9	a9 04		lda #$04	            LDA #ERR_TYPE
.3a3acb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3acf	c2 20		rep #$20	            REP #$20
.3a3ad1	29 ff 00	and #$00ff	            AND #$00FF
.3a3ad4	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3ad7	e2 20		sep #$20	            SEP #$20
.3a3ad9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3adc					syntax_err
.3a3adc	08		php		            PHP
.3a3add	c2 20		rep #$20	            REP #$20
.3a3adf	48		pha		            PHA
.3a3ae0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3ae3	5b		tcd		            TCD
.3a3ae4	68		pla		            PLA
.3a3ae5	28		plp		            PLP
.3a3ae6	e2 20		sep #$20	            SEP #$20
.3a3ae8	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3aea	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3aee	c2 20		rep #$20	            REP #$20
.3a3af0	29 ff 00	and #$00ff	            AND #$00FF
.3a3af3	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3af6	e2 20		sep #$20	            SEP #$20
.3a3af8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3afb					in_string
.3a3afb	c2 20		rep #$20	            REP #$20
.3a3afd	a9 00 4c	lda #$4c00	                LDA #<>IOBUF
.3a3b00	85 23		sta $0823	                STA ARGUMENT1
.3a3b02	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3b05	85 25		sta $0825	                STA ARGUMENT1+2
.3a3b07	e2 20		sep #$20	            SEP #$20
.3a3b09	a9 02		lda #$02	                LDA #TYPE_STRING
.3a3b0b	85 27		sta $0827	                STA ARGTYPE1
.3a3b0d					save_input
.3a3b0d	c2 20		rep #$20	            REP #$20
.3a3b0f	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a3b12	a9 0d 00	lda #$000d	                LDA #CHAR_CR        ; Print a newline
.3a3b15	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3b18	28		plp		done            PLP
.3a3b19	60		rts		            RTS
.3a3b1a					in_float
.3a3b1a	c2 20		rep #$20	            REP #$20
.3a3b1c	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.3a3b1e	85 40		sta $0840	                STA SAVEBIP
.3a3b20	a5 02		lda $0802	                LDA BIP+2
.3a3b22	85 42		sta $0842	                STA SAVEBIP+2
.3a3b24	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.3a3b27	85 00		sta $0800	                STA BIP
.3a3b29	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3b2c	85 02		sta $0802	                STA BIP+2
.3a3b2e	20 ee 57	jsr $3a57ee	            JSR PARSENUM
.3a3b31	c2 20		rep #$20	            REP #$20
.3a3b33	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.3a3b35	85 00		sta $0800	                STA BIP
.3a3b37	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3b39	85 02		sta $0802	                STA BIP+2
.3a3b3b	80 d0		bra $3a3b0d	                BRA save_input
.3a3b3d					in_integer
.3a3b3d	c2 20		rep #$20	            REP #$20
.3a3b3f	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.3a3b41	85 40		sta $0840	                STA SAVEBIP
.3a3b43	a5 02		lda $0802	                LDA BIP+2
.3a3b45	85 42		sta $0842	                STA SAVEBIP+2
.3a3b47	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.3a3b4a	85 00		sta $0800	                STA BIP
.3a3b4c	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3b4f	85 02		sta $0802	                STA BIP+2
.3a3b51	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a3b54	c2 20		rep #$20	            REP #$20
.3a3b56	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.3a3b58	85 00		sta $0800	                STA BIP
.3a3b5a	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3b5c	85 02		sta $0802	                STA BIP+2
.3a3b5e	80 ad		bra $3a3b0d	                BRA save_input
.3a3b60					S_GET
.3a3b60	08		php		                PHP
.3a3b61					varloop
.3a3b61	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3b64	e2 20		sep #$20	            SEP #$20
.3a3b66	a7 00		lda [$0800]	                LDA [BIP]
.3a3b68	f0 47		beq $3a3bb1	                BEQ done            ; If EOL, we're done
.3a3b6a	c9 3a		cmp #$3a	                CMP #':'
.3a3b6c	f0 43		beq $3a3bb1	                BEQ done            ; If colon, we're done
.3a3b6e	20 cd 03	jsr $3a03cd	            JSR ISALPHA
.3a3b71	90 40		bcc $3a3bb3	                BCC syntax_err      ; No: it's a syntax error
.3a3b73	20 cc 51	jsr $3a51cc	            JSR VAR_FINDNAME
.3a3b76	90 3b		bcc $3a3bb3	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3b78	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a3b7b	20 14 00	jsr $3a0014	            JSR GETKEY
.3a3b7e	e2 20		sep #$20	            SEP #$20
.3a3b80	a0 00 00	ldy #$0000	                LDY #0
.3a3b83	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a3b85	a9 00		lda #$00	                LDA #0
.3a3b87	c8		iny		                INY
.3a3b88	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a3b8a	c2 20		rep #$20	            REP #$20
.3a3b8c	a5 16		lda $0816	                LDA STRPTR
.3a3b8e	85 23		sta $0823	                STA ARGUMENT1
.3a3b90	a5 18		lda $0818	                LDA STRPTR+2
.3a3b92	85 25		sta $0825	                STA ARGUMENT1+2
.3a3b94	e2 20		sep #$20	            SEP #$20
.3a3b96	a9 02		lda #$02	                LDA #TYPE_STRING
.3a3b98	85 27		sta $0827	                STA ARGTYPE1
.3a3b9a	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a3b9d	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3ba0	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.3a3ba2	f0 0d		beq $3a3bb1	                BEQ done            ; EOL? We're done
.3a3ba4	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.3a3ba6	f0 09		beq $3a3bb1	                BEQ done
.3a3ba8	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3baa	d0 07		bne $3a3bb3	                BNE syntax_err      ; Nope: syntax error
.3a3bac	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3baf	80 b0		bra $3a3b61	                BRA varloop
.3a3bb1	28		plp		done            PLP
.3a3bb2	60		rts		            RTS
.3a3bb3					syntax_err
.3a3bb3	08		php		            PHP
.3a3bb4	c2 20		rep #$20	            REP #$20
.3a3bb6	48		pha		            PHA
.3a3bb7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3bba	5b		tcd		            TCD
.3a3bbb	68		pla		            PLA
.3a3bbc	28		plp		            PLP
.3a3bbd	e2 20		sep #$20	            SEP #$20
.3a3bbf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3bc1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3bc5	c2 20		rep #$20	            REP #$20
.3a3bc7	29 ff 00	and #$00ff	            AND #$00FF
.3a3bca	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3bcd	e2 20		sep #$20	            SEP #$20
.3a3bcf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3bd2					S_CALL
.3a3bd2	08		php		                PHP
.3a3bd3	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3bd6	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a3bd9	e2 20		sep #$20	            SEP #$20
.3a3bdb	a9 5c		lda #$5c	                LDA #$5C            ; Set the opcode for JML
.3a3bdd	85 a2		sta $08a2	                STA MJUMPINST
.3a3bdf	c2 20		rep #$20	            REP #$20
.3a3be1	a5 23		lda $0823	                LDA ARGUMENT1
.3a3be3	85 a3		sta $08a3	                STA MJUMPADDR
.3a3be5	e2 20		sep #$20	            SEP #$20
.3a3be7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3be9	85 a5		sta $08a5	                STA MJUMPADDR+2
.3a3beb	e2 20		sep #$20	            SEP #$20
.3a3bed	a9 2c		lda #$2c	                LDA #','
.3a3bef	85 37		sta $0837	                STA TARGETTOK
.3a3bf1	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a3bf4	90 41		bcc $3a3c37	                BCC launch          ; Not present... go ahead and launch
.3a3bf6	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3bf9	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3bfc	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a3bff	c2 20		rep #$20	            REP #$20
.3a3c01	a5 23		lda $0823	                LDA ARGUMENT1
.3a3c03	85 55		sta $0855	                STA MARG1           ; Save it to MARG1
.3a3c05	e2 20		sep #$20	            SEP #$20
.3a3c07	a9 2c		lda #$2c	                LDA #','
.3a3c09	85 37		sta $0837	                STA TARGETTOK
.3a3c0b	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a3c0e	90 27		bcc $3a3c37	                BCC launch          ; Not present... go ahead and launch
.3a3c10	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3c13	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3c16	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a3c19	c2 20		rep #$20	            REP #$20
.3a3c1b	a5 23		lda $0823	                LDA ARGUMENT1
.3a3c1d	85 59		sta $0859	                STA MARG2           ; Save it to MARG2
.3a3c1f	e2 20		sep #$20	            SEP #$20
.3a3c21	a9 2c		lda #$2c	                LDA #','
.3a3c23	85 37		sta $0837	                STA TARGETTOK
.3a3c25	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a3c28	90 0d		bcc $3a3c37	                BCC launch          ; Not present... go ahead and launch
.3a3c2a	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3c2d	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3c30	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a3c33	c2 20		rep #$20	            REP #$20
.3a3c35	a4 23		ldy $0823	                LDY ARGUMENT1
.3a3c37	a6 59		ldx $0859	launch          LDX MARG2
.3a3c39	a5 55		lda $0855	                LDA MARG1
.3a3c3b	0b		phd		                PHD
.3a3c3c	8b		phb		                PHB
.3a3c3d	08		php		                PHP
.3a3c3e	22 a2 08 00	jsl $0008a2	                JSL MJUMPINST       ; Call the subroutine indicated
.3a3c42	28		plp		                PLP
.3a3c43	ab		plb		                PLB
.3a3c44	2b		pld		                PLD
.3a3c45	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a3c48	28		plp		                PLP
.3a3c49	60		rts		            RTS
.3a3c4a					type_err
.3a3c4a	08		php		            PHP
.3a3c4b	c2 20		rep #$20	            REP #$20
.3a3c4d	48		pha		            PHA
.3a3c4e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3c51	5b		tcd		            TCD
.3a3c52	68		pla		            PLA
.3a3c53	28		plp		            PLP
.3a3c54	e2 20		sep #$20	            SEP #$20
.3a3c56	a9 04		lda #$04	            LDA #ERR_TYPE
.3a3c58	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3c5c	c2 20		rep #$20	            REP #$20
.3a3c5e	29 ff 00	and #$00ff	            AND #$00FF
.3a3c61	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3c64	e2 20		sep #$20	            SEP #$20
.3a3c66	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3c69					S_DIM
.3a3c69	08		php		                PHP
.3a3c6a	e2 20		sep #$20	            SEP #$20
.3a3c6c	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3c6f	20 cc 51	jsr $3a51cc	            JSR VAR_FINDNAME
.3a3c72	90 64		bcc $3a3cd8	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3c74	a9 8f		lda #$8f	                LDA #TOK_LPAREN     ; Verify we have a left parenthesis
.3a3c76	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a3c79	a9 01		lda #$01	                LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.3a3c7b	20 e5 18	jsr $3a18e5	            JSR PHOPERATOR
.3a3c7e	a2 01 00	ldx #$0001	                LDX #1
.3a3c81	a9 00		lda #$00	                LDA #0
.3a3c83	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Set the dimension count to 0
.3a3c87					dim_loop
.3a3c87	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3c8a	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a3c8d	c2 20		rep #$20	            REP #$20
.3a3c8f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3c91	9f 00 4d 00	sta $004d00,x	                STA @lARRIDXBUF,X   ; And store it in the buffer
.3a3c95	e2 20		sep #$20	            SEP #$20
.3a3c97	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF     ; Add to the dimension count
.3a3c9b	1a		inc a		                INC A
.3a3c9c	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF
.3a3ca0	30 55		bmi $3a3cf7	                BMI overflow        ; If > 127 throw an error
.3a3ca2	e8		inx		                INX
.3a3ca3	e8		inx		                INX
.3a3ca4	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3ca7	a7 00		lda [$0800]	                LDA [BIP]           ; Check the character
.3a3ca9	c9 2c		cmp #$2c	                CMP #','            ; Is it a comma?
.3a3cab	f0 25		beq $3a3cd2	                BEQ skip_comma      ; Yes: get the next dimension
.3a3cad	c9 90		cmp #$90	                CMP #TOK_RPAREN     ; No: is it a ")"?
.3a3caf	d0 27		bne $3a3cd8	                BNE syntax_err      ; No: throw a syntax error
.3a3cb1	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3cb4	20 4a 64	jsr $3a644a	            JSR ARR_ALLOC
.3a3cb7	c2 20		rep #$20	            REP #$20
.3a3cb9	a5 c0		lda $08c0	                LDA CURRBLOCK       ; Set up the pointer to the array
.3a3cbb	85 23		sta $0823	                STA ARGUMENT1
.3a3cbd	e2 20		sep #$20	            SEP #$20
.3a3cbf	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a3cc1	85 25		sta $0825	                STA ARGUMENT1+2
.3a3cc3	64 26		stz $0826	                STZ ARGUMENT1+3
.3a3cc5	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Get the type of the values
.3a3cc7	09 80		ora #$80	                ORA #$80            ; Make sure we change the type to array
.3a3cc9	85 ea		sta $08ea	                STA TOFINDTYPE      ; And save it back for searching
.3a3ccb	85 27		sta $0827	                STA ARGTYPE1        ; And for the value to set
.3a3ccd	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a3cd0	28		plp		                PLP
.3a3cd1	60		rts		            RTS
.3a3cd2					skip_comma
.3a3cd2	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3cd5	4c 87 3c	jmp $3a3c87	                JMP dim_loop
.3a3cd8					syntax_err
.3a3cd8	08		php		            PHP
.3a3cd9	c2 20		rep #$20	            REP #$20
.3a3cdb	48		pha		            PHA
.3a3cdc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3cdf	5b		tcd		            TCD
.3a3ce0	68		pla		            PLA
.3a3ce1	28		plp		            PLP
.3a3ce2	e2 20		sep #$20	            SEP #$20
.3a3ce4	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3ce6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3cea	c2 20		rep #$20	            REP #$20
.3a3cec	29 ff 00	and #$00ff	            AND #$00FF
.3a3cef	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3cf2	e2 20		sep #$20	            SEP #$20
.3a3cf4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3cf7					overflow
.3a3cf7	08		php		            PHP
.3a3cf8	c2 20		rep #$20	            REP #$20
.3a3cfa	48		pha		            PHA
.3a3cfb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3cfe	5b		tcd		            TCD
.3a3cff	68		pla		            PLA
.3a3d00	28		plp		            PLP
.3a3d01	e2 20		sep #$20	            SEP #$20
.3a3d03	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a3d05	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3d09	c2 20		rep #$20	            REP #$20
.3a3d0b	29 ff 00	and #$00ff	            AND #$00FF
.3a3d0e	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3d11	e2 20		sep #$20	            SEP #$20
.3a3d13	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3d16					S_READ
.3a3d16	08		php		                PHP
.3a3d17					varloop
.3a3d17	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3d1a	e2 20		sep #$20	            SEP #$20
.3a3d1c	a7 00		lda [$0800]	                LDA [BIP]
.3a3d1e	f0 28		beq $3a3d48	                BEQ done            ; If EOL, we're done
.3a3d20	c9 3a		cmp #$3a	                CMP #':'
.3a3d22	f0 24		beq $3a3d48	                BEQ done            ; If colon, we're done
.3a3d24	20 cd 03	jsr $3a03cd	            JSR ISALPHA
.3a3d27	90 21		bcc $3a3d4a	                BCC syntax_err      ; No: it's a syntax error
.3a3d29	20 cc 51	jsr $3a51cc	            JSR VAR_FINDNAME
.3a3d2c	90 1c		bcc $3a3d4a	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3d2e	20 69 3d	jsr $3a3d69	            JSR NEXTDATA
.3a3d31	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a3d34	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3d37	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.3a3d39	f0 0d		beq $3a3d48	                BEQ done            ; EOL? We're done
.3a3d3b	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.3a3d3d	f0 09		beq $3a3d48	                BEQ done
.3a3d3f	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3d41	d0 07		bne $3a3d4a	                BNE syntax_err      ; Nope: syntax error
.3a3d43	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3d46	80 cf		bra $3a3d17	                BRA varloop
.3a3d48	28		plp		done            PLP
.3a3d49	60		rts		            RTS
.3a3d4a					syntax_err
.3a3d4a	08		php		            PHP
.3a3d4b	c2 20		rep #$20	            REP #$20
.3a3d4d	48		pha		            PHA
.3a3d4e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3d51	5b		tcd		            TCD
.3a3d52	68		pla		            PLA
.3a3d53	28		plp		            PLP
.3a3d54	e2 20		sep #$20	            SEP #$20
.3a3d56	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3d58	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3d5c	c2 20		rep #$20	            REP #$20
.3a3d5e	29 ff 00	and #$00ff	            AND #$00FF
.3a3d61	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3d64	e2 20		sep #$20	            SEP #$20
.3a3d66	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3d69					NEXTDATA
.3a3d69	08		php		                PHP
.3a3d6a	a5 02		lda $0802	                LDA BIP+2           ; Save BIP
.3a3d6c	85 42		sta $0842	                STA SAVEBIP+2
.3a3d6e	a5 00		lda $0800	                LDA BIP
.3a3d70	85 40		sta $0840	                STA SAVEBIP
.3a3d72	a5 1c		lda $081c	                LDA CURLINE+2       ; Save CURLINE
.3a3d74	85 46		sta $0846	                STA SAVELINE+2
.3a3d76	a5 1a		lda $081a	                LDA CURLINE
.3a3d78	85 44		sta $0844	                STA SAVELINE
.3a3d7a	c2 20		rep #$20	            REP #$20
.3a3d7c	a5 3a		lda $083a	                LDA DATABIP+2
.3a3d7e	d0 04		bne $3a3d84	                BNE data_set
.3a3d80	a5 38		lda $0838	                LDA DATABIP
.3a3d82	f0 4e		beq $3a3dd2	                BEQ scan_start      ; No: scan for a DATA statement
.3a3d84	a5 38		lda $0838	data_set        LDA DATABIP         ; Move BIP to the DATA statement
.3a3d86	85 00		sta $0800	                STA BIP
.3a3d88	a5 3a		lda $083a	                LDA DATABIP+2
.3a3d8a	85 02		sta $0802	                STA BIP+2
.3a3d8c	a5 3c		lda $083c	                LDA DATALINE        ; Set CURLINE from DATALINE
.3a3d8e	85 1a		sta $081a	                STA CURLINE
.3a3d90	a5 3e		lda $083e	                LDA DATALINE+2
.3a3d92	85 1c		sta $081c	                STA CURLINE+2
.3a3d94	e2 20		sep #$20	            SEP #$20
.3a3d96	a7 00		lda [$0800]	                LDA [BIP]           ; Check character at BIP
.3a3d98	f0 53		beq $3a3ded	                BEQ scan_DATA       ; EOL? scan for a DATA statement
.3a3d9a	c9 3a		cmp #$3a	                CMP #':'            ; Colon?
.3a3d9c	f0 4f		beq $3a3ded	                BEQ scan_DATA       ; ... scan for a DATA statement
.3a3d9e	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3da0	d0 03		bne $3a3da5	                BNE skip_parse      ; No: skip leading WS and try to parse
.3a3da2	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3da5					skip_parse
.3a3da5	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3da8	a7 00		lda [$0800]	                LDA [BIP]
.3a3daa	c9 22		cmp #$22	                CMP #CHAR_DQUOTE    ; Is it a quote?
.3a3dac	f0 4e		beq $3a3dfc	                BEQ read_string     ; Yes: process the string
.3a3dae	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a3db1	b0 4e		bcs $3a3e01	                BCS read_number     ; Yes: process the number
.3a3db3					syntax_err
.3a3db3	08		php		            PHP
.3a3db4	c2 20		rep #$20	            REP #$20
.3a3db6	48		pha		            PHA
.3a3db7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3dba	5b		tcd		            TCD
.3a3dbb	68		pla		            PLA
.3a3dbc	28		plp		            PLP
.3a3dbd	e2 20		sep #$20	            SEP #$20
.3a3dbf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3dc1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3dc5	c2 20		rep #$20	            REP #$20
.3a3dc7	29 ff 00	and #$00ff	            AND #$00FF
.3a3dca	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3dcd	e2 20		sep #$20	            SEP #$20
.3a3dcf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3dd2					scan_start
.3a3dd2	c2 20		rep #$20	            REP #$20
.3a3dd4	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT    ; Point CURLINE to the first line
.3a3dd7	85 1a		sta $081a	                STA CURLINE
.3a3dd9	a9 36 00	lda #$0036	                LDA #`BASIC_BOT
.3a3ddc	85 1c		sta $081c	                STA CURLINE+2
.3a3dde	18		clc		                CLC
.3a3ddf	a5 1a		lda $081a	                LDA CURLINE         ; Point BIP to the first possible token
.3a3de1	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.3a3de4	85 00		sta $0800	                STA BIP
.3a3de6	a5 1c		lda $081c	                LDA CURLINE+2
.3a3de8	69 00 00	adc #$0000	                ADC #0
.3a3deb	85 02		sta $0802	                STA BIP+2
.3a3ded					scan_data
.3a3ded	e2 20		sep #$20	            SEP #$20
.3a3def	a9 80		lda #$80	                LDA #$80            ; We don't want to process nesting
.3a3df1	85 35		sta $0835	                STA SKIPNEST
.3a3df3	a9 ab		lda #$ab	                LDA #TOK_DATA       ; We're looking for a DATA token
.3a3df5	85 37		sta $0837	                STA TARGETTOK
.3a3df7	20 ee 1f	jsr $3a1fee	            JSR SKIPTOTOK
.3a3dfa	80 a9		bra $3a3da5	                BRA skip_parse
.3a3dfc					read_string
.3a3dfc	20 92 1a	jsr $3a1a92	            JSR EVALSTRING
.3a3dff	80 03		bra $3a3e04	                BRA done
.3a3e01					read_number
.3a3e01	20 c7 19	jsr $3a19c7	            JSR EVALNUMBER
.3a3e04					done
.3a3e04	c2 20		rep #$20	            REP #$20
.3a3e06	a5 00		lda $0800	                LDA BIP             ; Save BIP to DATABIP
.3a3e08	85 38		sta $0838	                STA DATABIP
.3a3e0a	a5 02		lda $0802	                LDA BIP+2
.3a3e0c	85 3a		sta $083a	                STA DATABIP+2
.3a3e0e	a5 1a		lda $081a	                LDA CURLINE         ; Save CURLINE to DATALINE
.3a3e10	85 3c		sta $083c	                STA DATALINE
.3a3e12	a5 1c		lda $081c	                LDA CURLINE+2
.3a3e14	85 3e		sta $083e	                STA DATALINE+2
.3a3e16	a5 44		lda $0844	                LDA SAVELINE        ; Restore CURLINE
.3a3e18	85 1a		sta $081a	                STA CURLINE
.3a3e1a	a5 46		lda $0846	                LDA SAVELINE+2
.3a3e1c	85 1c		sta $081c	                STA CURLINE+2
.3a3e1e	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.3a3e20	85 00		sta $0800	                STA BIP
.3a3e22	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3e24	85 02		sta $0802	                STA BIP+2
.3a3e26	28		plp		                PLP
.3a3e27	60		rts		            RTS
.3a3e28					S_DATA
.3a3e28	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a3e2b	60		rts		            RTS
.3a3e2c					S_RESTORE
.3a3e2c	64 38		stz $0838	                STZ DATABIP         ; Just set DATABIP to 0
.3a3e2e	64 3a		stz $083a	                STZ DATABIP+2       ; The next READ will move it to the first DATA
.3a3e30	64 3c		stz $083c	                STZ DATALINE        ; Set DATALINE to 0
.3a3e32	64 3e		stz $083e	                STZ DATALINE+2
.3a3e34	60		rts		            RTS
.3a3e35					S_CLS
.3a3e35	20 24 00	jsr $3a0024	            JSR CLSCREEN
.3a3e38	60		rts		            RTS
.3a3e39					S_POKEL
.3a3e39	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3e3c	c2 20		rep #$20	            REP #$20
.3a3e3e	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a3e40	48		pha		                PHA
.3a3e41	a5 23		lda $0823	                LDA ARGUMENT1
.3a3e43	48		pha		                PHA
.3a3e44	e2 20		sep #$20	            SEP #$20
.3a3e46	a7 00		lda [$0800]	                LDA [BIP]
.3a3e48	c9 2c		cmp #$2c	                CMP #','
.3a3e4a	d0 22		bne $3a3e6e	                BNE syntax_err
.3a3e4c	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3e4f	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3e52	c2 20		rep #$20	            REP #$20
.3a3e54	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a3e56	d0 35		bne $3a3e8d	                BNE range_err
.3a3e58	68		pla		                PLA                 ; Pull the target address from the stack
.3a3e59	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a3e5b	68		pla		                PLA
.3a3e5c	85 0a		sta $080a	                STA INDEX+2
.3a3e5e	c2 20		rep #$20	            REP #$20
.3a3e60	a5 23		lda $0823	                LDA ARGUMENT1
.3a3e62	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a3e64	e2 20		sep #$20	            SEP #$20
.3a3e66	a0 02 00	ldy #$0002	                LDY #2
.3a3e69	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3e6b	97 08		sta [$0808],y	                STA [INDEX],Y
.3a3e6d	60		rts		            RTS
.3a3e6e					syntax_err
.3a3e6e	08		php		            PHP
.3a3e6f	c2 20		rep #$20	            REP #$20
.3a3e71	48		pha		            PHA
.3a3e72	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3e75	5b		tcd		            TCD
.3a3e76	68		pla		            PLA
.3a3e77	28		plp		            PLP
.3a3e78	e2 20		sep #$20	            SEP #$20
.3a3e7a	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3e7c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3e80	c2 20		rep #$20	            REP #$20
.3a3e82	29 ff 00	and #$00ff	            AND #$00FF
.3a3e85	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3e88	e2 20		sep #$20	            SEP #$20
.3a3e8a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3e8d					range_err
.3a3e8d	08		php		            PHP
.3a3e8e	c2 20		rep #$20	            REP #$20
.3a3e90	48		pha		            PHA
.3a3e91	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3e94	5b		tcd		            TCD
.3a3e95	68		pla		            PLA
.3a3e96	28		plp		            PLP
.3a3e97	e2 20		sep #$20	            SEP #$20
.3a3e99	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3e9b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3e9f	c2 20		rep #$20	            REP #$20
.3a3ea1	29 ff 00	and #$00ff	            AND #$00FF
.3a3ea4	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3ea7	e2 20		sep #$20	            SEP #$20
.3a3ea9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3eac					S_POKEW
.3a3eac	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3eaf	c2 20		rep #$20	            REP #$20
.3a3eb1	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a3eb3	48		pha		                PHA
.3a3eb4	a5 23		lda $0823	                LDA ARGUMENT1
.3a3eb6	48		pha		                PHA
.3a3eb7	e2 20		sep #$20	            SEP #$20
.3a3eb9	a7 00		lda [$0800]	                LDA [BIP]
.3a3ebb	c9 2c		cmp #$2c	                CMP #','
.3a3ebd	d0 19		bne $3a3ed8	                BNE syntax_err
.3a3ebf	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3ec2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3ec5	c2 20		rep #$20	            REP #$20
.3a3ec7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3ec9	d0 2c		bne $3a3ef7	                BNE range_err
.3a3ecb	68		pla		                PLA                 ; Pull the target address from the stack
.3a3ecc	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a3ece	68		pla		                PLA
.3a3ecf	85 0a		sta $080a	                STA INDEX+2
.3a3ed1	c2 20		rep #$20	            REP #$20
.3a3ed3	a5 23		lda $0823	                LDA ARGUMENT1
.3a3ed5	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a3ed7	60		rts		            RTS
.3a3ed8					syntax_err
.3a3ed8	08		php		            PHP
.3a3ed9	c2 20		rep #$20	            REP #$20
.3a3edb	48		pha		            PHA
.3a3edc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3edf	5b		tcd		            TCD
.3a3ee0	68		pla		            PLA
.3a3ee1	28		plp		            PLP
.3a3ee2	e2 20		sep #$20	            SEP #$20
.3a3ee4	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3ee6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3eea	c2 20		rep #$20	            REP #$20
.3a3eec	29 ff 00	and #$00ff	            AND #$00FF
.3a3eef	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3ef2	e2 20		sep #$20	            SEP #$20
.3a3ef4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3ef7					range_err
.3a3ef7	08		php		            PHP
.3a3ef8	c2 20		rep #$20	            REP #$20
.3a3efa	48		pha		            PHA
.3a3efb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3efe	5b		tcd		            TCD
.3a3eff	68		pla		            PLA
.3a3f00	28		plp		            PLP
.3a3f01	e2 20		sep #$20	            SEP #$20
.3a3f03	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3f05	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3f09	c2 20		rep #$20	            REP #$20
.3a3f0b	29 ff 00	and #$00ff	            AND #$00FF
.3a3f0e	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3f11	e2 20		sep #$20	            SEP #$20
.3a3f13	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3f16					S_POKE
.3a3f16	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3f19	c2 20		rep #$20	            REP #$20
.3a3f1b	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a3f1d	48		pha		                PHA
.3a3f1e	a5 23		lda $0823	                LDA ARGUMENT1
.3a3f20	48		pha		                PHA
.3a3f21	e2 20		sep #$20	            SEP #$20
.3a3f23	a7 00		lda [$0800]	                LDA [BIP]
.3a3f25	c9 2c		cmp #$2c	                CMP #','
.3a3f27	d0 1f		bne $3a3f48	                BNE syntax_err
.3a3f29	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3f2c	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a3f2f	e2 20		sep #$20	            SEP #$20
.3a3f31	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Make sure the value is from 0 - 255
.3a3f33	d0 32		bne $3a3f67	                BNE range_err
.3a3f35	c2 20		rep #$20	            REP #$20
.3a3f37	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3f39	d0 2c		bne $3a3f67	                BNE range_err
.3a3f3b	68		pla		                PLA                 ; Pull the target address from the stack
.3a3f3c	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a3f3e	68		pla		                PLA
.3a3f3f	85 0a		sta $080a	                STA INDEX+2
.3a3f41	e2 20		sep #$20	            SEP #$20
.3a3f43	a5 23		lda $0823	                LDA ARGUMENT1
.3a3f45	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a3f47	60		rts		            RTS
.3a3f48					syntax_err
.3a3f48	08		php		            PHP
.3a3f49	c2 20		rep #$20	            REP #$20
.3a3f4b	48		pha		            PHA
.3a3f4c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3f4f	5b		tcd		            TCD
.3a3f50	68		pla		            PLA
.3a3f51	28		plp		            PLP
.3a3f52	e2 20		sep #$20	            SEP #$20
.3a3f54	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3f56	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3f5a	c2 20		rep #$20	            REP #$20
.3a3f5c	29 ff 00	and #$00ff	            AND #$00FF
.3a3f5f	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3f62	e2 20		sep #$20	            SEP #$20
.3a3f64	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3f67					range_err
.3a3f67	08		php		            PHP
.3a3f68	c2 20		rep #$20	            REP #$20
.3a3f6a	48		pha		            PHA
.3a3f6b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3f6e	5b		tcd		            TCD
.3a3f6f	68		pla		            PLA
.3a3f70	28		plp		            PLP
.3a3f71	e2 20		sep #$20	            SEP #$20
.3a3f73	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3f75	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3f79	c2 20		rep #$20	            REP #$20
.3a3f7b	29 ff 00	and #$00ff	            AND #$00FF
.3a3f7e	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3f81	e2 20		sep #$20	            SEP #$20
.3a3f83	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3f86					S_STOP
.3a3f86	08		php		            PHP
.3a3f87	c2 20		rep #$20	            REP #$20
.3a3f89	48		pha		            PHA
.3a3f8a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3f8d	5b		tcd		            TCD
.3a3f8e	68		pla		            PLA
.3a3f8f	28		plp		            PLP
.3a3f90	e2 20		sep #$20	            SEP #$20
.3a3f92	a9 01		lda #$01	            LDA #ERR_BREAK
.3a3f94	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3f98	c2 20		rep #$20	            REP #$20
.3a3f9a	29 ff 00	and #$00ff	            AND #$00FF
.3a3f9d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a3fa0	e2 20		sep #$20	            SEP #$20
.3a3fa2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3fa5					S_REM
.3a3fa5	08		php		                PHP
.3a3fa6	e2 20		sep #$20	            SEP #$20
.3a3fa8	a7 00		lda [$0800]	rem_loop        LDA [BIP]
.3a3faa	f0 05		beq $3a3fb1	                BEQ done
.3a3fac	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a3faf	80 f7		bra $3a3fa8	                BRA rem_loop
.3a3fb1	28		plp		done            PLP
.3a3fb2	60		rts		            RTS
.3a3fb3					S_EXIT
.3a3fb3	08		php		                PHP
.3a3fb4	28		plp		                PLP
.3a3fb5	60		rts		            RTS
.3a3fb6					S_DO
.3a3fb6	08		php		                PHP
.3a3fb7	28		plp		                PLP
.3a3fb8	60		rts		            RTS
.0000					DO_RECORD
>0000					BIP             .dword  ?
>0004					CURLINE         .dword  ?
.3a3fb9					S_LOOP
.3a3fb9	08		php		                PHP
.3a3fba	28		plp		                PLP
.3a3fbb	60		rts		            RTS
.3a3fbc					S_FOR
.3a3fbc	08		php		                PHP
.3a3fbd	c2 20		rep #$20	            REP #$20
.3a3fbf	a5 1c		lda $081c	                LDA CURLINE+2
.3a3fc1	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a3fc4	a5 1a		lda $081a	                LDA CURLINE
.3a3fc6	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a3fc9	a5 02		lda $0802	                LDA BIP+2           ; Save current BIP
.3a3fcb	48		pha		                PHA
.3a3fcc	a5 00		lda $0800	                LDA BIP
.3a3fce	48		pha		                PHA
.3a3fcf	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a3fd2	a5 02		lda $0802	                LDA BIP+2           ; Save the BIP for the next statement to the RETURN stack
.3a3fd4	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a3fd7	a5 00		lda $0800	                LDA BIP
.3a3fd9	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a3fdc	68		pla		                PLA                 ; Restore the original BIP
.3a3fdd	85 00		sta $0800	                STA BIP
.3a3fdf	68		pla		                PLA
.3a3fe0	85 02		sta $0802	                STA BIP+2
.3a3fe2	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a3fe5					get_name
.3a3fe5	20 cc 51	jsr $3a51cc	            JSR VAR_FINDNAME
.3a3fe8	b0 1f		bcs $3a4009	                BCS push_name       ; If we didn't find a name, thrown an error
.3a3fea	08		php		            PHP
.3a3feb	c2 20		rep #$20	            REP #$20
.3a3fed	48		pha		            PHA
.3a3fee	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3ff1	5b		tcd		            TCD
.3a3ff2	68		pla		            PLA
.3a3ff3	28		plp		            PLP
.3a3ff4	e2 20		sep #$20	            SEP #$20
.3a3ff6	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a3ff8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3ffc	c2 20		rep #$20	            REP #$20
.3a3ffe	29 ff 00	and #$00ff	            AND #$00FF
.3a4001	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4004	e2 20		sep #$20	            SEP #$20
.3a4006	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4009					push_name
.3a4009	e2 20		sep #$20	            SEP #$20
.3a400b	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; To the return stack
.3a400d	20 b6 1c	jsr $3a1cb6	            JSR PHRETURNB
.3a4010	a5 e9		lda $08e9	                LDA TOFIND+2
.3a4012	20 b6 1c	jsr $3a1cb6	            JSR PHRETURNB
.3a4015	c2 20		rep #$20	            REP #$20
.3a4017	a5 e7		lda $08e7	                LDA TOFIND
.3a4019	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a401c					else
.3a401c	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a401f	e2 20		sep #$20	            SEP #$20
.3a4021	a7 00		lda [$0800]	                LDA [BIP]
.3a4023	c9 8a		cmp #$8a	                CMP #TOK_EQ
.3a4025	d0 6a		bne $3a4091	                BNE syntax_err      ; If not found: signal an syntax error
.3a4027	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Verify type of variable
.3a4029	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; Is it integer?
.3a402b	f0 04		beq $3a4031	                BEQ process_initial ; Yes: it's ok
.3a402d	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; Is it floating point?
.3a402f	f0 00		beq $3a4031	                BEQ process_initial ; Yes: it's ok
.3a4031					process_initial
.3a4031	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4034	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4037	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a403a	e2 20		sep #$20	            SEP #$20
.3a403c	a9 9c		lda #$9c	                LDA #TOK_TO         ; Expect the next token to be TO
.3a403e	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4041	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4044	c2 20		rep #$20	            REP #$20
.3a4046	a5 27		lda $0827	                LDA ARGTYPE1
.3a4048	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a404b	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a404d	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4050	a5 23		lda $0823	                LDA ARGUMENT1
.3a4052	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4055	e2 20		sep #$20	            SEP #$20
.3a4057	a9 9d		lda #$9d	                LDA #TOK_STEP
.3a4059	85 37		sta $0837	                STA TARGETTOK
.3a405b	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a405e	90 1b		bcc $3a407b	                BCC default_inc     ; Not found: set a default increment of 1
.3a4060	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4063	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4066	e2 20		sep #$20	            SEP #$20
.3a4068	a5 27		lda $0827	                LDA ARGTYPE1        ; Push the result as the increment
.3a406a	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a406d	c2 20		rep #$20	            REP #$20
.3a406f	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4071	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4074	a5 23		lda $0823	                LDA ARGUMENT1
.3a4076	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4079	80 14		bra $3a408f	                BRA done
.3a407b					default_inc
.3a407b	c2 20		rep #$20	            REP #$20
.3a407d	a9 00 00	lda #$0000	                LDA #TYPE_INTEGER
.3a4080	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4083	a9 00 00	lda #$0000	                LDA #0
.3a4086	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4089	a9 01 00	lda #$0001	                LDA #1
.3a408c	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a408f	28		plp		done            PLP
.3a4090	60		rts		            RTS
.3a4091					syntax_err
.3a4091	08		php		            PHP
.3a4092	c2 20		rep #$20	            REP #$20
.3a4094	48		pha		            PHA
.3a4095	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4098	5b		tcd		            TCD
.3a4099	68		pla		            PLA
.3a409a	28		plp		            PLP
.3a409b	e2 20		sep #$20	            SEP #$20
.3a409d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a409f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a40a3	c2 20		rep #$20	            REP #$20
.3a40a5	29 ff 00	and #$00ff	            AND #$00FF
.3a40a8	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a40ab	e2 20		sep #$20	            SEP #$20
.3a40ad	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.0000					FOR_RECORD
>0000					INCREMENT       .dword  ?
>0004					INCTYPE         .word   ?
>0006					FINAL           .dword  ?
>000a					FINALTYPE       .word   ?
>000c					VARIBLE         .dword  ?
>0010					VARTYPE         .word   ?
>0012					BIP             .dword  ?
>0016					CURLINE         .dword  ?
.3a40b0					S_NEXT
.3a40b0	08		php		                PHP
.3a40b1	8b		phb		                PHB
.3a40b2	08		php		            PHP
.3a40b3	e2 20		sep #$20	            SEP #$20
.3a40b5	48		pha		            PHA
.3a40b6	a9 00		lda #$00	            LDA #0
.3a40b8	48		pha		            PHA
.3a40b9	ab		plb		            PLB
.3a40ba	68		pla		            PLA
.3a40bb	28		plp		            PLP
.3a40bc	08		php		            PHP
.3a40bd	c2 20		rep #$20	            REP #$20
.3a40bf	48		pha		            PHA
.3a40c0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a40c3	5b		tcd		            TCD
.3a40c4	68		pla		            PLA
.3a40c5	28		plp		            PLP
.3a40c6	c2 30		rep #$30	            REP #$30
.3a40c8	a4 33		ldy $0833	                LDY RETURNSP                    ; Y := pointer to first byte of the FOR record
.3a40ca	c8		iny		                INY                             ; RETURNSP points to the first free slot, so move up 2 bytes
.3a40cb	c8		iny		                INY
.3a40cc	c2 20		rep #$20	            REP #$20
.3a40ce	b9 0c 00	lda $000c,y	                LDA #FOR_RECORD.VARIBLE,B,Y     ; TOFIND := FOR_RECORD.VARIABLE
.3a40d1	85 e7		sta $08e7	                STA TOFIND
.3a40d3	b9 0e 00	lda $000e,y	                LDA #FOR_RECORD.VARIBLE+2,B,Y
.3a40d6	e2 20		sep #$20	            SEP #$20
.3a40d8	85 e9		sta $08e9	                STA TOFIND+2
.3a40da	b9 10 00	lda $0010,y	                LDA #FOR_RECORD.VARTYPE,B,Y
.3a40dd	85 ea		sta $08ea	                STA TOFINDTYPE
.3a40df	c2 20		rep #$20	            REP #$20
.3a40e1	5a		phy		                PHY
.3a40e2	20 cd 4f	jsr $3a4fcd	            JSR VAR_REF
.3a40e5	7a		ply		                PLY
.3a40e6	c2 20		rep #$20	            REP #$20
.3a40e8	b9 00 00	lda $0000,y	                LDA #FOR_RECORD.INCREMENT,B,Y   ; ARGUMENT2 := FOR_RECORD.INCREMENT
.3a40eb	85 29		sta $0829	                STA ARGUMENT2
.3a40ed	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y
.3a40f0	85 2b		sta $082b	                STA ARGUMENT2+2
.3a40f2	e2 20		sep #$20	            SEP #$20
.3a40f4	b9 04 00	lda $0004,y	                LDA #FOR_RECORD.INCTYPE,B,Y
.3a40f7	85 2d		sta $082d	                STA ARGTYPE2
.3a40f9	c2 20		rep #$20	            REP #$20
.3a40fb	5a		phy		                PHY
.3a40fc	20 56 26	jsr $3a2656	            JSR OP_PLUS
.3a40ff	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a4102	7a		ply		                PLY
.3a4103	c2 20		rep #$20	            REP #$20
.3a4105	b9 06 00	lda $0006,y	                LDA #FOR_RECORD.FINAL,B,Y       ; ARGUMENT2 := FOR_RECORD.FINAL
.3a4108	85 29		sta $0829	                STA ARGUMENT2
.3a410a	b9 08 00	lda $0008,y	                LDA #FOR_RECORD.FINAL+2,B,Y
.3a410d	85 2b		sta $082b	                STA ARGUMENT2+2
.3a410f	e2 20		sep #$20	            SEP #$20
.3a4111	b9 0a 00	lda $000a,y	                LDA #FOR_RECORD.FINALTYPE,B,Y
.3a4114	85 2d		sta $082d	                STA ARGTYPE2
.3a4116	c2 20		rep #$20	            REP #$20
.3a4118	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y ; Check the increment's sign
.3a411b	30 0a		bmi $3a4127	                BMI going_down
.3a411d					going_up
.3a411d	20 df 28	jsr $3a28df	            JSR OP_LTE
.3a4120	20 05 05	jsr $3a0505	            JSR IS_ARG1_Z
.3a4123	f0 28		beq $3a414d	                BEQ end_loop                    ; No: end the loop
.3a4125	80 08		bra $3a412f	                BRA loop_back                   ; Yes: loop back
.3a4127					going_down
.3a4127	20 9f 28	jsr $3a289f	            JSR OP_GTE
.3a412a	20 05 05	jsr $3a0505	            JSR IS_ARG1_Z
.3a412d	f0 1e		beq $3a414d	                BEQ end_loop                    ; No: end the loop
.3a412f					loop_back
.3a412f	c2 20		rep #$20	            REP #$20
.3a4131	b9 12 00	lda $0012,y	                LDA #FOR_RECORD.BIP,B,Y
.3a4134	85 00		sta $0800	                STA BIP
.3a4136	b9 14 00	lda $0014,y	                LDA #FOR_RECORD.BIP+2,B,Y
.3a4139	85 02		sta $0802	                STA BIP+2
.3a413b	b9 16 00	lda $0016,y	                LDA #FOR_RECORD.CURLINE,B,Y     ; CURLINE := FOR_RECORD.CURLINE
.3a413e	85 1a		sta $081a	                STA CURLINE
.3a4140	b9 18 00	lda $0018,y	                LDA #FOR_RECORD.CURLINE+2,B,Y
.3a4143	85 1c		sta $081c	                STA CURLINE+2
.3a4145	e2 20		sep #$20	            SEP #$20
.3a4147	a9 03		lda #$03	                LDA #EXEC_RETURN
.3a4149	85 dc		sta $08dc	                STA EXECACTION
.3a414b	80 17		bra $3a4164	                BRA done
.3a414d					end_loop
.3a414d	a2 23 08	ldx #$0823	                LDX #ARGUMENT1
.3a4150	20 a6 18	jsr $3a18a6	            JSR PLARGUMENT
.3a4153	c2 20		rep #$20	            REP #$20
.3a4155	18		clc		                CLC
.3a4156	a5 33		lda $0833	                LDA RETURNSP
.3a4158	69 1a 00	adc #$001a	                ADC #size(FOR_RECORD)           ; Move pointer by number of bytes in a FOR record
.3a415b	85 33		sta $0833	                STA RETURNSP
.3a415d	a5 35		lda $0835	                LDA RETURNSP+2
.3a415f	69 00 00	adc #$0000	                ADC #0
.3a4162	85 35		sta $0835	                STA RETURNSP+2
.3a4164	ab		plb		done            PLB
.3a4165	28		plp		                PLP
.3a4166	60		rts		            RTS
.3a4167					S_GOSUB
.3a4167	08		php		                PHP
.3a4168	a5 1a		lda $081a	                LDA CURLINE                 ; Save the current line for later
.3a416a	48		pha		                PHA
.3a416b	a5 1c		lda $081c	                LDA CURLINE+2
.3a416d	48		pha		                PHA
.3a416e	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a4171	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a4174	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.3a4176	f0 26		beq $3a419e	                BEQ syntax_err              ; If 0, no number was found... syntax error
.3a4178	20 96 22	jsr $3a2296	            JSR FINDLINE
.3a417b	90 42		bcc $3a41bf	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a417d	e2 20		sep #$20	            SEP #$20
.3a417f	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a4181	85 dc		sta $08dc	                STA EXECACTION
.3a4183	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a4186	c2 20		rep #$20	            REP #$20
.3a4188	68		pla		                PLA                         ; Save the old value of CURLINE to the RETURN stack
.3a4189	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a418c	68		pla		                PLA
.3a418d	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4190	a5 02		lda $0802	                LDA BIP+2                   ; Save the BASIC Instruction Pointer to the RETURN stack
.3a4192	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a4195	a5 00		lda $0800	                LDA BIP
.3a4197	20 9f 1c	jsr $3a1c9f	            JSR PHRETURN
.3a419a	e6 31		inc $0831	                INC GOSUBDEPTH              ; Increase the count of GOSUBs on the stack
.3a419c	28		plp		                PLP
.3a419d	60		rts		            RTS
.3a419e	68		pla		syntax_err      PLA
.3a419f	68		pla		                PLA
.3a41a0	08		php		            PHP
.3a41a1	c2 20		rep #$20	            REP #$20
.3a41a3	48		pha		            PHA
.3a41a4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a41a7	5b		tcd		            TCD
.3a41a8	68		pla		            PLA
.3a41a9	28		plp		            PLP
.3a41aa	e2 20		sep #$20	            SEP #$20
.3a41ac	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a41ae	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a41b2	c2 20		rep #$20	            REP #$20
.3a41b4	29 ff 00	and #$00ff	            AND #$00FF
.3a41b7	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a41ba	e2 20		sep #$20	            SEP #$20
.3a41bc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a41bf	68		pla		not_found       PLA
.3a41c0	68		pla		                PLA
.3a41c1	08		php		            PHP
.3a41c2	c2 20		rep #$20	            REP #$20
.3a41c4	48		pha		            PHA
.3a41c5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a41c8	5b		tcd		            TCD
.3a41c9	68		pla		            PLA
.3a41ca	28		plp		            PLP
.3a41cb	e2 20		sep #$20	            SEP #$20
.3a41cd	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a41cf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a41d3	c2 20		rep #$20	            REP #$20
.3a41d5	29 ff 00	and #$00ff	            AND #$00FF
.3a41d8	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a41db	e2 20		sep #$20	            SEP #$20
.3a41dd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a41e0					S_RETURN
.3a41e0	08		php		                PHP
.3a41e1	c2 30		rep #$30	            REP #$30
.3a41e3	a5 31		lda $0831	                LDA GOSUBDEPTH              ; Check that there is at least on GOSUB on the stack
.3a41e5	f0 1e		beq $3a4205	                BEQ underflow               ; No? It's a stack underflow error
.3a41e7	20 c1 1c	jsr $3a1cc1	            JSR PLRETURN
.3a41ea	85 00		sta $0800	                STA BIP
.3a41ec	20 c1 1c	jsr $3a1cc1	            JSR PLRETURN
.3a41ef	85 02		sta $0802	                STA BIP+2
.3a41f1	20 c1 1c	jsr $3a1cc1	            JSR PLRETURN
.3a41f4	85 1a		sta $081a	                STA CURLINE
.3a41f6	20 c1 1c	jsr $3a1cc1	            JSR PLRETURN
.3a41f9	85 1c		sta $081c	                STA CURLINE+2
.3a41fb	c6 31		dec $0831	                DEC GOSUBDEPTH              ; Indicate we've popped that GOSUB off the stack
.3a41fd	e2 20		sep #$20	            SEP #$20
.3a41ff	a9 03		lda #$03	                LDA #EXEC_RETURN
.3a4201	85 dc		sta $08dc	                STA EXECACTION
.3a4203	28		plp		                PLP
.3a4204	60		rts		            RTS
.3a4205					underflow
.3a4205	08		php		            PHP
.3a4206	c2 20		rep #$20	            REP #$20
.3a4208	48		pha		            PHA
.3a4209	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a420c	5b		tcd		            TCD
.3a420d	68		pla		            PLA
.3a420e	28		plp		            PLP
.3a420f	e2 20		sep #$20	            SEP #$20
.3a4211	a9 07		lda #$07	            LDA #ERR_STACKUNDER
.3a4213	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4217	c2 20		rep #$20	            REP #$20
.3a4219	29 ff 00	and #$00ff	            AND #$00FF
.3a421c	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a421f	e2 20		sep #$20	            SEP #$20
.3a4221	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4224					S_IF
.3a4224	08		php		                PHP
.3a4225	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4228	20 05 05	jsr $3a0505	            JSR IS_ARG1_Z
.3a422b	f0 1c		beq $3a4249	                BEQ is_false                ; If so, handle the FALSE case
.3a422d	e2 20		sep #$20	            SEP #$20
.3a422f	a9 97		lda #$97	                LDA #TOK_THEN               ; Verify that the next token is THEN and eat it
.3a4231	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4234	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a4237	20 05 05	jsr $3a0505	            JSR IS_ARG1_Z
.3a423a	f0 12		beq $3a424e	                BEQ syntax_err              ; If not, we have a syntax error
.3a423c	20 96 22	jsr $3a2296	            JSR FINDLINE
.3a423f	90 2c		bcc $3a426d	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a4241	e2 20		sep #$20	            SEP #$20
.3a4243	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a4245	85 dc		sta $08dc	                STA EXECACTION
.3a4247	80 03		bra $3a424c	                BRA done
.3a4249					is_false
.3a4249	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a424c	28		plp		done            PLP
.3a424d	60		rts		            RTS
.3a424e					syntax_err
.3a424e	08		php		            PHP
.3a424f	c2 20		rep #$20	            REP #$20
.3a4251	48		pha		            PHA
.3a4252	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4255	5b		tcd		            TCD
.3a4256	68		pla		            PLA
.3a4257	28		plp		            PLP
.3a4258	e2 20		sep #$20	            SEP #$20
.3a425a	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a425c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4260	c2 20		rep #$20	            REP #$20
.3a4262	29 ff 00	and #$00ff	            AND #$00FF
.3a4265	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4268	e2 20		sep #$20	            SEP #$20
.3a426a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a426d					not_found
.3a426d	08		php		            PHP
.3a426e	c2 20		rep #$20	            REP #$20
.3a4270	48		pha		            PHA
.3a4271	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4274	5b		tcd		            TCD
.3a4275	68		pla		            PLA
.3a4276	28		plp		            PLP
.3a4277	e2 20		sep #$20	            SEP #$20
.3a4279	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a427b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a427f	c2 20		rep #$20	            REP #$20
.3a4281	29 ff 00	and #$00ff	            AND #$00FF
.3a4284	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4287	e2 20		sep #$20	            SEP #$20
.3a4289	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a428c					S_END
.3a428c	08		php		                PHP
.3a428d	e2 20		sep #$20	            SEP #$20
.3a428f	a9 01		lda #$01	                LDA #EXEC_STOP
.3a4291	85 dc		sta $08dc	                STA EXECACTION
.3a4293	28		plp		                PLP
.3a4294	60		rts		            RTS
.3a4295					S_GOTO
.3a4295	08		php		                PHP
.3a4296	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a4299	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a429c	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.3a429e	f0 0d		beq $3a42ad	                BEQ syntax_err              ; If 0, no number was found... syntax error
.3a42a0	20 96 22	jsr $3a2296	            JSR FINDLINE
.3a42a3	90 27		bcc $3a42cc	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a42a5	e2 20		sep #$20	            SEP #$20
.3a42a7	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a42a9	85 dc		sta $08dc	                STA EXECACTION
.3a42ab	28		plp		                PLP
.3a42ac	60		rts		            RTS
.3a42ad					syntax_err
.3a42ad	08		php		            PHP
.3a42ae	c2 20		rep #$20	            REP #$20
.3a42b0	48		pha		            PHA
.3a42b1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a42b4	5b		tcd		            TCD
.3a42b5	68		pla		            PLA
.3a42b6	28		plp		            PLP
.3a42b7	e2 20		sep #$20	            SEP #$20
.3a42b9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a42bb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a42bf	c2 20		rep #$20	            REP #$20
.3a42c1	29 ff 00	and #$00ff	            AND #$00FF
.3a42c4	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a42c7	e2 20		sep #$20	            SEP #$20
.3a42c9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a42cc					not_found
.3a42cc	08		php		            PHP
.3a42cd	c2 20		rep #$20	            REP #$20
.3a42cf	48		pha		            PHA
.3a42d0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a42d3	5b		tcd		            TCD
.3a42d4	68		pla		            PLA
.3a42d5	28		plp		            PLP
.3a42d6	e2 20		sep #$20	            SEP #$20
.3a42d8	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a42da	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a42de	c2 20		rep #$20	            REP #$20
.3a42e0	29 ff 00	and #$00ff	            AND #$00FF
.3a42e3	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a42e6	e2 20		sep #$20	            SEP #$20
.3a42e8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a42eb					S_CLR
.3a42eb	20 48 18	jsr $3a1848	            JSR INITEVALSP
.3a42ee	20 91 0f	jsr $3a0f91	            JSR INITHEAP
.3a42f1	20 cc 4e	jsr $3a4ecc	            JSR INITVARS
.3a42f4	60		rts		            RTS
.3a42f5					S_LET
.3a42f5	08		php		                PHP
.3a42f6	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.3a42f8	10 03		bpl $3a42fd	                BPL get_name        ; If it's not a token, try to find the variable name
.3a42fa	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a42fd					get_name
.3a42fd	20 cc 51	jsr $3a51cc	            JSR VAR_FINDNAME
.3a4300	b0 03		bcs $3a4305	                BCS check_array     ; If we didn't find a name, thrown an error
.3a4302	4c 6c 43	jmp $3a436c	                JMP syntax_err
.3a4305					check_array
.3a4305	e2 20		sep #$20	            SEP #$20
.3a4307	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a430a	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it a "("
.3a430c	d0 0e		bne $3a431c	                BNE get_value       ; No: it's a scalar assignment, look for the "="
.3a430e	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4310	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4313	a9 00		lda #$00	                LDA #0
.3a4315	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Blank out the array index buffer
.3a4319	20 ca 19	jsr $3a19ca	            JSR ARR_GETIDX
.3a431c					get_value
.3a431c	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a431f	e2 20		sep #$20	            SEP #$20
.3a4321	a7 00		lda [$0800]	                LDA [BIP]
.3a4323	c9 8a		cmp #$8a	                CMP #TOK_EQ
.3a4325	f0 03		beq $3a432a	                BEQ found_eq        ; If not found: signal an syntax error
.3a4327	4c 6c 43	jmp $3a436c	                JMP syntax_err
.3a432a					found_eq
.3a432a	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a432d	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Save the variable name for later
.3a432f	48		pha		                PHA                 ; (it will get over-written by variable references)
.3a4330	a5 e9		lda $08e9	                LDA TOFIND+2
.3a4332	48		pha		                PHA
.3a4333	a5 e8		lda $08e8	                LDA TOFIND+1
.3a4335	48		pha		                PHA
.3a4336	a5 e7		lda $08e7	                LDA TOFIND
.3a4338	48		pha		                PHA
.3a4339	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a433c	68		pla		                PLA                 ; Restore the variable name
.3a433d	85 e7		sta $08e7	                STA TOFIND
.3a433f	68		pla		                PLA
.3a4340	85 e8		sta $08e8	                STA TOFIND+1
.3a4342	68		pla		                PLA
.3a4343	85 e9		sta $08e9	                STA TOFIND+2
.3a4345	68		pla		                PLA
.3a4346	85 ea		sta $08ea	                STA TOFINDTYPE
.3a4348	29 80		and #$80	                AND #$80            ; Is it an array we're setting?
.3a434a	f0 1b		beq $3a4367	                BEQ set_scalar      ; No: do a scalar variable set
.3a434c	20 3f 4f	jsr $3a4f3f	            JSR VAR_FIND
.3a434f	90 3a		bcc $3a438b	                BCC notfound_err
.3a4351	c2 20		rep #$20	            REP #$20
.3a4353	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a4356	b7 08		lda [$0808],y	                LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.3a4358	85 c0		sta $08c0	                STA CURRBLOCK
.3a435a	e2 20		sep #$20	            SEP #$20
.3a435c	c8		iny		                INY
.3a435d	c8		iny		                INY
.3a435e	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4360	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a4362	20 2b 66	jsr $3a662b	            JSR ARR_SET
.3a4365	80 03		bra $3a436a	                BRA done            ; and we're finished!
.3a4367					set_scalar
.3a4367	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a436a					done
.3a436a	28		plp		                PLP
.3a436b	60		rts		            RTS
.3a436c					syntax_err
.3a436c	08		php		            PHP
.3a436d	c2 20		rep #$20	            REP #$20
.3a436f	48		pha		            PHA
.3a4370	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4373	5b		tcd		            TCD
.3a4374	68		pla		            PLA
.3a4375	28		plp		            PLP
.3a4376	e2 20		sep #$20	            SEP #$20
.3a4378	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a437a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a437e	c2 20		rep #$20	            REP #$20
.3a4380	29 ff 00	and #$00ff	            AND #$00FF
.3a4383	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4386	e2 20		sep #$20	            SEP #$20
.3a4388	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a438b					notfound_err
.3a438b	08		php		            PHP
.3a438c	c2 20		rep #$20	            REP #$20
.3a438e	48		pha		            PHA
.3a438f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4392	5b		tcd		            TCD
.3a4393	68		pla		            PLA
.3a4394	28		plp		            PLP
.3a4395	e2 20		sep #$20	            SEP #$20
.3a4397	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a4399	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a439d	c2 20		rep #$20	            REP #$20
.3a439f	29 ff 00	and #$00ff	            AND #$00FF
.3a43a2	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a43a5	e2 20		sep #$20	            SEP #$20
.3a43a7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a43aa					S_PRINT
.3a43aa	08		php		                PHP
.3a43ab	e2 20		sep #$20	            SEP #$20
.3a43ad	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a43b0	c9 00		cmp #$00	                CMP #0              ; Is it EOL or :?
.3a43b2	f0 6d		beq $3a4421	                BEQ pr_nl_exit      ; Yes: just print return
.3a43b4					pr_loop
.3a43b4	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a43b7	e2 20		sep #$20	            SEP #$20
.3a43b9	a5 27		lda $0827	                LDA ARGTYPE1        ; Get the type of the result
.3a43bb	c9 ff		cmp #$ff	                CMP #TYPE_NAV       ; Is is NAV?
.3a43bd	f0 1b		beq $3a43da	                BEQ check_nl        ; Yes: we are probably just printing a newline
.3a43bf	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string?
.3a43c1	d0 05		bne $3a43c8	                BNE check_int       ; No: check to see if it's an integer
.3a43c3	20 26 44	jsr $3a4426	            JSR PR_STRING
.3a43c6	80 12		bra $3a43da	                BRA check_nl
.3a43c8	c9 00		cmp #$00	check_int       CMP #TYPE_INTEGER   ; Is it an integer?
.3a43ca	d0 05		bne $3a43d1	                BNE check_float     ; No: check to see if it is a float
.3a43cc	20 46 44	jsr $3a4446	            JSR PR_INTEGER
.3a43cf	80 09		bra $3a43da	                BRA check_nl
.3a43d1	c9 01		cmp #$01	check_float     CMP #TYPE_FLOAT     ; Is it a float?
.3a43d3	d0 4f		bne $3a4424	                BNE done            ; No: just quit
.3a43d5	20 59 44	jsr $3a4459	            JSR PR_FLOAT
.3a43d8	80 00		bra $3a43da	                BRA check_nl
.3a43da					check_nl
.3a43da	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a43dd	a7 00		lda [$0800]	                LDA [BIP]
.3a43df	f0 40		beq $3a4421	                BEQ pr_nl_exit      ; If it's nul, print a newline and return
.3a43e1	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.3a43e3	f0 3c		beq $3a4421	                BEQ pr_nl_exit      ; print a newline and return
.3a43e5	c9 2c		cmp #$2c	                CMP #','            ; If it's a comma
.3a43e7	f0 23		beq $3a440c	                BEQ pr_comma        ; Print a TAB and try another expression
.3a43e9	c9 3b		cmp #$3b	                CMP #';'            ; If it's a semicolon...
.3a43eb	f0 24		beq $3a4411	                BEQ is_more         ; Print nothing, and try another expression
.3a43ed	08		php		            PHP
.3a43ee	c2 20		rep #$20	            REP #$20
.3a43f0	48		pha		            PHA
.3a43f1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a43f4	5b		tcd		            TCD
.3a43f5	68		pla		            PLA
.3a43f6	28		plp		            PLP
.3a43f7	e2 20		sep #$20	            SEP #$20
.3a43f9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a43fb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a43ff	c2 20		rep #$20	            REP #$20
.3a4401	29 ff 00	and #$00ff	            AND #$00FF
.3a4404	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4407	e2 20		sep #$20	            SEP #$20
.3a4409	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a440c	a9 09		lda #$09	pr_comma        LDA #CHAR_TAB       ; Print a TAB
.3a440e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a4411					is_more
.3a4411	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4414	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a4417	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.3a4419	f0 09		beq $3a4424	                BEQ done            ; If it's NULL, return without printing a newline
.3a441b	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.3a441d	f0 05		beq $3a4424	                BEQ done            ; ... return without printing a newline
.3a441f	80 93		bra $3a43b4	                BRA pr_loop         ; Otherwise, we should have another expression, try to handle it
.3a4421					pr_nl_exit
.3a4421	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a4424	28		plp		done            PLP
.3a4425	60		rts		            RTS
.3a4426					PR_STRING
.3a4426	08		php		                PHP
.3a4427	8b		phb		                PHB
.3a4428	08		php		            PHP
.3a4429	c2 20		rep #$20	            REP #$20
.3a442b	48		pha		            PHA
.3a442c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a442f	5b		tcd		            TCD
.3a4430	68		pla		            PLA
.3a4431	28		plp		            PLP
.3a4432	e2 20		sep #$20	            SEP #$20
.3a4434	c2 10		rep #$10	            REP #$10
.3a4436	a0 00 00	ldy #$0000	                LDY #0
.3a4439	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y
.3a443b	f0 06		beq $3a4443	                BEQ done
.3a443d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a4440	c8		iny		                INY
.3a4441	80 f6		bra $3a4439	                BRA loop
.3a4443	ab		plb		done            PLB
.3a4444	28		plp		                PLP
.3a4445	60		rts		            RTS
.3a4446					PR_INTEGER
.3a4446	08		php		                PHP
.3a4447	c2 20		rep #$20	            REP #$20
.3a4449	20 46 14	jsr $3a1446	            JSR ITOS
.3a444c	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a444e	85 23		sta $0823	                STA ARGUMENT1
.3a4450	a5 18		lda $0818	                LDA STRPTR+2
.3a4452	85 25		sta $0825	                STA ARGUMENT1+2
.3a4454	20 26 44	jsr $3a4426	            JSR PR_STRING
.3a4457	28		plp		                PLP
.3a4458	60		rts		            RTS
.3a4459					PR_FLOAT
.3a4459	08		php		                PHP
.3a445a	20 95 5b	jsr $3a5b95	            JSR FTOS
.3a445d	c2 20		rep #$20	            REP #$20
.3a445f	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a4461	85 23		sta $0823	                STA ARGUMENT1
.3a4463	a5 18		lda $0818	                LDA STRPTR+2
.3a4465	85 25		sta $0825	                STA ARGUMENT1+2
.3a4467	20 26 44	jsr $3a4426	            JSR PR_STRING
.3a446a	28		plp		                PLP
.3a446b	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\functions.s


;******  Processing file: src\C256/functions_c256.s

.3a446c					BCD2STR
.3a446c	08		php		            PHP
.3a446d	e2 20		sep #$20	            SEP #$20
.3a446f	85 b5		sta $08b5	            STA SAVE_A
.3a4471	4a		lsr a		            LSR A
.3a4472	4a		lsr a		            LSR A
.3a4473	4a		lsr a		            LSR A
.3a4474	4a		lsr a		            LSR A
.3a4475	29 0f		and #$0f	            AND #$0F
.3a4477	18		clc		            CLC
.3a4478	69 30		adc #$30	            ADC #'0'
.3a447a	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a447c	c8		iny		            INY
.3a447d	a5 b5		lda $08b5	            LDA SAVE_A
.3a447f	29 0f		and #$0f	            AND #$0F
.3a4481	18		clc		            CLC
.3a4482	69 30		adc #$30	            ADC #'0'
.3a4484	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4486	c8		iny		            INY
.3a4487	28		plp		            PLP
.3a4488	60		rts		            RTS
.3a4489					F_GETDATE
.3a4489	e2 20		sep #$20	            SEP #$20
.3a448b	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a448d	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4490	08		php		            PHP
.3a4491	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4494	e2 20		sep #$20	            SEP #$20
.3a4496	c2 10		rep #$10	            REP #$10
.3a4498	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a449c	09 08		ora #$08	            ORA #%00001000
.3a449e	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a44a2	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a44a5	a0 00 00	ldy #$0000	            LDY #0
.3a44a8	af 06 08 af	lda $af0806	            LDA @lRTC_DAY           ; Write the day of the month
.3a44ac	20 6c 44	jsr $3a446c	            JSR BCD2STR
.3a44af	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.3a44b1	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a44b3	c8		iny		            INY
.3a44b4	af 09 08 af	lda $af0809	            LDA @lRTC_MONTH         ; Write the month
.3a44b8	20 6c 44	jsr $3a446c	            JSR BCD2STR
.3a44bb	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.3a44bd	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a44bf	c8		iny		            INY
.3a44c0	af 0f 08 af	lda $af080f	            LDA @lRTC_CENTURY       ; Write the year
.3a44c4	20 6c 44	jsr $3a446c	            JSR BCD2STR
.3a44c7	af 0a 08 af	lda $af080a	            LDA @lRTC_YEAR          ; Write the year
.3a44cb	20 6c 44	jsr $3a446c	            JSR BCD2STR
.3a44ce	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.3a44d0	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a44d2	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a44d6	29 f7		and #$f7	            AND #%11110111
.3a44d8	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a44dc	c2 20		rep #$20	            REP #$20
.3a44de	a5 16		lda $0816	            LDA STRPTR
.3a44e0	85 23		sta $0823	            STA ARGUMENT1
.3a44e2	a5 18		lda $0818	            LDA STRPTR+2
.3a44e4	85 25		sta $0825	            STA ARGUMENT1+2
.3a44e6	e2 20		sep #$20	            SEP #$20
.3a44e8	a9 02		lda #$02	            LDA #TYPE_STRING
.3a44ea	85 27		sta $0827	            STA ARGTYPE1
.3a44ec	28		plp		            PLP
.3a44ed	e2 20		sep #$20	            SEP #$20
.3a44ef	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a44f2	60		rts		            RTS
.3a44f3					F_GETTIME
.3a44f3	e2 20		sep #$20	            SEP #$20
.3a44f5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a44f7	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a44fa	08		php		            PHP
.3a44fb	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a44fe	e2 20		sep #$20	            SEP #$20
.3a4500	c2 10		rep #$10	            REP #$10
.3a4502	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a4506	09 08		ora #$08	            ORA #%00001000
.3a4508	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a450c	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a450f	a0 00 00	ldy #$0000	            LDY #0
.3a4512	af 04 08 af	lda $af0804	            LDA @lRTC_HRS           ; Write the hour
.3a4516	29 7f		and #$7f	            AND #$7F                ; Trim out the AM/PM indicator
.3a4518	20 6c 44	jsr $3a446c	            JSR BCD2STR
.3a451b	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.3a451d	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a451f	c8		iny		            INY
.3a4520	af 02 08 af	lda $af0802	            LDA @lRTC_MIN           ; Write the minute
.3a4524	20 6c 44	jsr $3a446c	            JSR BCD2STR
.3a4527	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.3a4529	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a452b	c8		iny		            INY
.3a452c	af 00 08 af	lda $af0800	            LDA @lRTC_SEC           ; Write the second
.3a4530	20 6c 44	jsr $3a446c	            JSR BCD2STR
.3a4533	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.3a4535	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4537	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a453b	29 f7		and #$f7	            AND #%11110111
.3a453d	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a4541	c2 20		rep #$20	            REP #$20
.3a4543	a5 16		lda $0816	            LDA STRPTR
.3a4545	85 23		sta $0823	            STA ARGUMENT1
.3a4547	a5 18		lda $0818	            LDA STRPTR+2
.3a4549	85 25		sta $0825	            STA ARGUMENT1+2
.3a454b	e2 20		sep #$20	            SEP #$20
.3a454d	a9 02		lda #$02	            LDA #TYPE_STRING
.3a454f	85 27		sta $0827	            STA ARGTYPE1
.3a4551	28		plp		            PLP
.3a4552	e2 20		sep #$20	            SEP #$20
.3a4554	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4557	60		rts		            RTS
.3a4558					FN_RND
.3a4558	e2 20		sep #$20	            SEP #$20
.3a455a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a455c	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a455f	08		php		            PHP
.3a4560	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4563	e2 20		sep #$20	            SEP #$20
.3a4565	a9 01		lda #$01	            LDA #TYPE_FLOAT             ; We'll return a floating point number
.3a4567	85 27		sta $0827	            STA ARGTYPE1
.3a4569	a9 03		lda #$03	            LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a456b	8f 00 e2 af	sta $afe200	            STA @l FP_MATH_CTRL0        ; Expect fixed point numbers
.3a456f	a9 01		lda #$01	            LDA #FP_OUT_DIV             ; Set us to do a division
.3a4571	8f 01 e2 af	sta $afe201	            STA @l FP_MATH_CTRL1
.3a4575	c2 30		rep #$30	            REP #$30
.3a4577	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get a random 16-bits
.3a457b	8f 08 e2 af	sta $afe208	            STA @l FP_MATH_INPUT0_LL    ; Send them to the FP unit
.3a457f	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get another random 16-bits
.3a4583	29 ff 7f	and #$7fff	            AND #$7FFF                  ; Make sure it's positive
.3a4586	8f 0a e2 af	sta $afe20a	            STA @l FP_MATH_INPUT0_LL+2  ; Send them to the FP unit
.3a458a	a9 ff ff	lda #$ffff	            LDA #$FFFF                  ; Get the maximum value
.3a458d	8f 0c e2 af	sta $afe20c	            STA @l FP_MATH_INPUT1_LL    ; Send it to the FP unit
.3a4591	a9 ff 7f	lda #$7fff	            LDA #$7FFF
.3a4594	8f 0e e2 af	sta $afe20e	            STA @l FP_MATH_INPUT1_LL+2
.3a4598	ea		nop		            NOP
.3a4599	ea		nop		            NOP
.3a459a	ea		nop		            NOP
.3a459b	af 08 e2 af	lda $afe208	            LDA @l FP_MATH_OUTPUT_FP_LL     ; Get the normalized result
.3a459f	85 23		sta $0823	            STA ARGUMENT1
.3a45a1	af 0a e2 af	lda $afe20a	            LDA @l FP_MATH_OUTPUT_FP_LL+2
.3a45a5	85 25		sta $0825	            STA ARGUMENT1+2
.3a45a7	28		plp		            PLP
.3a45a8	e2 20		sep #$20	            SEP #$20
.3a45aa	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a45ad	60		rts		            RTS

;******  Return to file: src\functions.s

.3a45ae					FN_MID
.3a45ae	e2 20		sep #$20	            SEP #$20
.3a45b0	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a45b2	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a45b5	08		php		                PHP
.3a45b6	c2 30		rep #$30	            REP #$30
.3a45b8	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a45bb	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a45be					save_string
.3a45be	c2 20		rep #$20	            REP #$20
.3a45c0	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a45c2	48		pha		                PHA
.3a45c3	a5 23		lda $0823	                LDA ARGUMENT1
.3a45c5	48		pha		                PHA
.3a45c6	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a45c9	e2 20		sep #$20	            SEP #$20
.3a45cb	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a45cd	c9 2c		cmp #$2c	                CMP #','
.3a45cf	f0 03		beq $3a45d4	                BEQ skip_comma1
.3a45d1	4c 25 46	jmp $3a4625	                JMP syntax_err
.3a45d4					skip_comma1
.3a45d4	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a45d7	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a45da	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a45dd	c2 20		rep #$20	            REP #$20
.3a45df	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the index
.3a45e1	48		pha		                PHA
.3a45e2	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a45e5	e2 20		sep #$20	            SEP #$20
.3a45e7	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a45e9	c9 2c		cmp #$2c	                CMP #','
.3a45eb	f0 03		beq $3a45f0	                BEQ skip_comma2
.3a45ed	4c 25 46	jmp $3a4625	                JMP syntax_err
.3a45f0					skip_comma2
.3a45f0	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a45f3	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a45f6	20 f8 05	jsr $3a05f8	            JSR ASS_ARG1_INT16
.3a45f9	c2 20		rep #$20	            REP #$20
.3a45fb	a5 23		lda $0823	            LDA ARGUMENT1
.3a45fd	85 8f		sta $088f	            STA MCOUNT
.3a45ff	e2 20		sep #$20	            SEP #$20
.3a4601	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a4603	85 91		sta $0891	            STA MCOUNT+2
.3a4605	c2 20		rep #$20	            REP #$20
.3a4607	68		pla		                PLA                         ; Restore index
.3a4608	85 29		sta $0829	                STA ARGUMENT2               ; ... to ARGUMENT2
.3a460a	a9 00 00	lda #$0000	                LDA #0
.3a460d	85 2b		sta $082b	                STA ARGUMENT2+2
.3a460f	68		pla		                PLA                         ; Restore string
.3a4610	85 23		sta $0823	                STA ARGUMENT1               ; ... to ARGUMENT1
.3a4612	68		pla		                PLA
.3a4613	85 25		sta $0825	                STA ARGUMENT1+2
.3a4615	e2 20		sep #$20	            SEP #$20
.3a4617	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a4619	85 27		sta $0827	            STA ARGTYPE1
.3a461b	20 3f 16	jsr $3a163f	            JSR STRSUBSTR
.3a461e					done
.3a461e	e2 20		sep #$20	            SEP #$20
.3a4620	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4623	28		plp		                PLP
.3a4624	60		rts		            RTS
.3a4625					syntax_err
.3a4625	08		php		            PHP
.3a4626	c2 20		rep #$20	            REP #$20
.3a4628	48		pha		            PHA
.3a4629	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a462c	5b		tcd		            TCD
.3a462d	68		pla		            PLA
.3a462e	28		plp		            PLP
.3a462f	e2 20		sep #$20	            SEP #$20
.3a4631	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4633	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4637	c2 20		rep #$20	            REP #$20
.3a4639	29 ff 00	and #$00ff	            AND #$00FF
.3a463c	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a463f	e2 20		sep #$20	            SEP #$20
.3a4641	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4644					range_err
.3a4644	08		php		            PHP
.3a4645	c2 20		rep #$20	            REP #$20
.3a4647	48		pha		            PHA
.3a4648	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a464b	5b		tcd		            TCD
.3a464c	68		pla		            PLA
.3a464d	28		plp		            PLP
.3a464e	e2 20		sep #$20	            SEP #$20
.3a4650	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4652	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4656	c2 20		rep #$20	            REP #$20
.3a4658	29 ff 00	and #$00ff	            AND #$00FF
.3a465b	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a465e	e2 20		sep #$20	            SEP #$20
.3a4660	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4663					FN_RIGHT
.3a4663	e2 20		sep #$20	            SEP #$20
.3a4665	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4667	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a466a	08		php		                PHP
.3a466b	c2 30		rep #$30	            REP #$30
.3a466d	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4670	e2 20		sep #$20	            SEP #$20
.3a4672	a5 27		lda $0827	                LDA ARGTYPE1
.3a4674	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4676	f0 03		beq $3a467b	                BEQ save_string
.3a4678	4c e7 46	jmp $3a46e7	                JMP type_mismatch           ; Type mismatch if it's not a string
.3a467b					save_string
.3a467b	c2 20		rep #$20	            REP #$20
.3a467d	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a467f	48		pha		                PHA
.3a4680	a5 23		lda $0823	                LDA ARGUMENT1
.3a4682	48		pha		                PHA
.3a4683	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a4686	e2 20		sep #$20	            SEP #$20
.3a4688	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a468a	c9 2c		cmp #$2c	                CMP #','
.3a468c	f0 03		beq $3a4691	                BEQ skip_comma
.3a468e	4c 06 47	jmp $3a4706	                JMP syntax_err
.3a4691					skip_comma
.3a4691	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4694	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4697	e2 20		sep #$20	            SEP #$20
.3a4699	a5 27		lda $0827	                LDA ARGTYPE1
.3a469b	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a469d	d0 48		bne $3a46e7	                BNE type_mismatch           ; Type mismatch if it's not an integer
.3a469f	c2 20		rep #$20	            REP #$20
.3a46a1	a5 23		lda $0823	            LDA ARGUMENT1
.3a46a3	85 8f		sta $088f	            STA MCOUNT
.3a46a5	c2 20		rep #$20	            REP #$20
.3a46a7	68		pla		                PLA                         ; Recover the string pointer
.3a46a8	85 23		sta $0823	                STA ARGUMENT1
.3a46aa	68		pla		                PLA
.3a46ab	85 25		sta $0825	                STA ARGUMENT1+2
.3a46ad	e2 20		sep #$20	            SEP #$20
.3a46af	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a46b1	85 27		sta $0827	            STA ARGTYPE1
.3a46b3	e2 20		sep #$20	            SEP #$20
.3a46b5	a0 00 00	ldy #$0000	                LDY #0
.3a46b8	b7 23		lda [$0823],y	count_loop      LDA [ARGUMENT1],Y
.3a46ba	f0 03		beq $3a46bf	                BEQ count_done
.3a46bc	c8		iny		                INY
.3a46bd	80 f9		bra $3a46b8	                BRA count_loop
.3a46bf					count_done
.3a46bf	c2 20		rep #$20	            REP #$20
.3a46c1	98		tya		                TYA                         ; ARGUMENT2 := LENGTH - MCOUNT
.3a46c2	38		sec		                SEC
.3a46c3	e5 8f		sbc $088f	                SBC MCOUNT
.3a46c5	30 09		bmi $3a46d0	                BMI index0                  ; if ARGUMENT2 < 0, set ARGUMENT2 := 0
.3a46c7	85 29		sta $0829	                STA ARGUMENT2
.3a46c9	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT2[23..16] := 0
.3a46cc	85 2b		sta $082b	                STA ARGUMENT2+2
.3a46ce	80 07		bra $3a46d7	                BRA slice
.3a46d0	a9 00 00	lda #$0000	index0          LDA #0                      ; 0 is the floor for the index
.3a46d3	85 29		sta $0829	                STA ARGUMENT2
.3a46d5	85 2b		sta $082b	                STA ARGUMENT2+2
.3a46d7					slice
.3a46d7	e2 20		sep #$20	            SEP #$20
.3a46d9	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a46db	85 2d		sta $082d	            STA ARGTYPE2
.3a46dd	20 3f 16	jsr $3a163f	            JSR STRSUBSTR
.3a46e0					done
.3a46e0	e2 20		sep #$20	            SEP #$20
.3a46e2	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a46e5	28		plp		                PLP
.3a46e6	60		rts		            RTS
.3a46e7					type_mismatch
.3a46e7	08		php		            PHP
.3a46e8	c2 20		rep #$20	            REP #$20
.3a46ea	48		pha		            PHA
.3a46eb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a46ee	5b		tcd		            TCD
.3a46ef	68		pla		            PLA
.3a46f0	28		plp		            PLP
.3a46f1	e2 20		sep #$20	            SEP #$20
.3a46f3	a9 04		lda #$04	            LDA #ERR_TYPE
.3a46f5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a46f9	c2 20		rep #$20	            REP #$20
.3a46fb	29 ff 00	and #$00ff	            AND #$00FF
.3a46fe	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4701	e2 20		sep #$20	            SEP #$20
.3a4703	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4706					syntax_err
.3a4706	08		php		            PHP
.3a4707	c2 20		rep #$20	            REP #$20
.3a4709	48		pha		            PHA
.3a470a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a470d	5b		tcd		            TCD
.3a470e	68		pla		            PLA
.3a470f	28		plp		            PLP
.3a4710	e2 20		sep #$20	            SEP #$20
.3a4712	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4714	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4718	c2 20		rep #$20	            REP #$20
.3a471a	29 ff 00	and #$00ff	            AND #$00FF
.3a471d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4720	e2 20		sep #$20	            SEP #$20
.3a4722	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4725					range_err
.3a4725	08		php		            PHP
.3a4726	c2 20		rep #$20	            REP #$20
.3a4728	48		pha		            PHA
.3a4729	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a472c	5b		tcd		            TCD
.3a472d	68		pla		            PLA
.3a472e	28		plp		            PLP
.3a472f	e2 20		sep #$20	            SEP #$20
.3a4731	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4733	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4737	c2 20		rep #$20	            REP #$20
.3a4739	29 ff 00	and #$00ff	            AND #$00FF
.3a473c	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a473f	e2 20		sep #$20	            SEP #$20
.3a4741	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4744					FN_LEFT
.3a4744	e2 20		sep #$20	            SEP #$20
.3a4746	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4748	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a474b	08		php		                PHP
.3a474c	c2 30		rep #$30	            REP #$30
.3a474e	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4751	e2 20		sep #$20	            SEP #$20
.3a4753	a5 27		lda $0827	                LDA ARGTYPE1
.3a4755	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4757	f0 03		beq $3a475c	                BEQ save_string
.3a4759	4c b0 47	jmp $3a47b0	                JMP type_mismatch           ; Type mismatch if it's not a string
.3a475c					save_string
.3a475c	c2 20		rep #$20	            REP #$20
.3a475e	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a4760	48		pha		                PHA
.3a4761	a5 23		lda $0823	                LDA ARGUMENT1
.3a4763	48		pha		                PHA
.3a4764	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a4767	e2 20		sep #$20	            SEP #$20
.3a4769	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a476b	c9 2c		cmp #$2c	                CMP #','
.3a476d	f0 03		beq $3a4772	                BEQ skip_comma
.3a476f	4c cf 47	jmp $3a47cf	                JMP syntax_err
.3a4772					skip_comma
.3a4772	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4775	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4778	e2 20		sep #$20	            SEP #$20
.3a477a	a5 27		lda $0827	                LDA ARGTYPE1
.3a477c	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a477e	d0 30		bne $3a47b0	                BNE type_mismatch           ; Type mismatch if it's not an integer
.3a4780	c2 20		rep #$20	            REP #$20
.3a4782	a5 23		lda $0823	            LDA ARGUMENT1
.3a4784	85 8f		sta $088f	            STA MCOUNT
.3a4786	c2 20		rep #$20	            REP #$20
.3a4788	a9 00 00	lda #$0000	            LDA #<>0
.3a478b	85 29		sta $0829	            STA ARGUMENT2
.3a478d	a9 00 00	lda #$0000	            LDA #(0 >> 16)
.3a4790	85 2b		sta $082b	            STA ARGUMENT2+2
.3a4792	e2 20		sep #$20	            SEP #$20
.3a4794	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a4796	85 2d		sta $082d	            STA ARGTYPE2
.3a4798	c2 20		rep #$20	            REP #$20
.3a479a	68		pla		                PLA                         ; Recover the string pointer
.3a479b	85 23		sta $0823	                STA ARGUMENT1
.3a479d	68		pla		                PLA
.3a479e	85 25		sta $0825	                STA ARGUMENT1+2
.3a47a0	e2 20		sep #$20	            SEP #$20
.3a47a2	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a47a4	85 27		sta $0827	            STA ARGTYPE1
.3a47a6	20 3f 16	jsr $3a163f	            JSR STRSUBSTR
.3a47a9					done
.3a47a9	e2 20		sep #$20	            SEP #$20
.3a47ab	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a47ae	28		plp		                PLP
.3a47af	60		rts		            RTS
.3a47b0					type_mismatch
.3a47b0	08		php		            PHP
.3a47b1	c2 20		rep #$20	            REP #$20
.3a47b3	48		pha		            PHA
.3a47b4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a47b7	5b		tcd		            TCD
.3a47b8	68		pla		            PLA
.3a47b9	28		plp		            PLP
.3a47ba	e2 20		sep #$20	            SEP #$20
.3a47bc	a9 04		lda #$04	            LDA #ERR_TYPE
.3a47be	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a47c2	c2 20		rep #$20	            REP #$20
.3a47c4	29 ff 00	and #$00ff	            AND #$00FF
.3a47c7	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a47ca	e2 20		sep #$20	            SEP #$20
.3a47cc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a47cf					syntax_err
.3a47cf	08		php		            PHP
.3a47d0	c2 20		rep #$20	            REP #$20
.3a47d2	48		pha		            PHA
.3a47d3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a47d6	5b		tcd		            TCD
.3a47d7	68		pla		            PLA
.3a47d8	28		plp		            PLP
.3a47d9	e2 20		sep #$20	            SEP #$20
.3a47db	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a47dd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a47e1	c2 20		rep #$20	            REP #$20
.3a47e3	29 ff 00	and #$00ff	            AND #$00FF
.3a47e6	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a47e9	e2 20		sep #$20	            SEP #$20
.3a47eb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a47ee					range_err
.3a47ee	08		php		            PHP
.3a47ef	c2 20		rep #$20	            REP #$20
.3a47f1	48		pha		            PHA
.3a47f2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a47f5	5b		tcd		            TCD
.3a47f6	68		pla		            PLA
.3a47f7	28		plp		            PLP
.3a47f8	e2 20		sep #$20	            SEP #$20
.3a47fa	a9 09		lda #$09	            LDA #ERR_RANGE
.3a47fc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4800	c2 20		rep #$20	            REP #$20
.3a4802	29 ff 00	and #$00ff	            AND #$00FF
.3a4805	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4808	e2 20		sep #$20	            SEP #$20
.3a480a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a480d					FN_VAL
.3a480d	e2 20		sep #$20	            SEP #$20
.3a480f	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4811	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4814	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4817	c2 10		rep #$10	            REP #$10
.3a4819	e2 20		sep #$20	            SEP #$20
.3a481b	a5 27		lda $0827	                LDA ARGTYPE1
.3a481d	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a481f	d0 23		bne $3a4844	                BNE type_mismatch
.3a4821	c2 20		rep #$20	            REP #$20
.3a4823	a5 00		lda $0800	                LDA BIP             ; preserve BIP for later
.3a4825	85 40		sta $0840	                STA SAVEBIP
.3a4827	a5 02		lda $0802	                LDA BIP+2
.3a4829	85 42		sta $0842	                STA SAVEBIP+2
.3a482b	a5 23		lda $0823	                LDA ARGUMENT1       ; Temporarily point BIP to the string to parse
.3a482d	85 00		sta $0800	                STA BIP
.3a482f	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4831	85 02		sta $0802	                STA BIP+2
.3a4833	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a4836	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.3a4838	85 00		sta $0800	                STA BIP
.3a483a	a5 42		lda $0842	                LDA SAVEBIP+2
.3a483c	85 02		sta $0802	                STA BIP+2
.3a483e	e2 20		sep #$20	            SEP #$20
.3a4840	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4843	60		rts		            RTS
.3a4844					type_mismatch
.3a4844	08		php		            PHP
.3a4845	c2 20		rep #$20	            REP #$20
.3a4847	48		pha		            PHA
.3a4848	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a484b	5b		tcd		            TCD
.3a484c	68		pla		            PLA
.3a484d	28		plp		            PLP
.3a484e	e2 20		sep #$20	            SEP #$20
.3a4850	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4852	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4856	c2 20		rep #$20	            REP #$20
.3a4858	29 ff 00	and #$00ff	            AND #$00FF
.3a485b	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a485e	e2 20		sep #$20	            SEP #$20
.3a4860	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4863					FN_STR
.3a4863	e2 20		sep #$20	            SEP #$20
.3a4865	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4867	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a486a	08		php		                PHP
.3a486b	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a486e	c2 10		rep #$10	            REP #$10
.3a4870	e2 20		sep #$20	            SEP #$20
.3a4872	a5 27		lda $0827	                LDA ARGTYPE1
.3a4874	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4876	d0 1a		bne $3a4892	                BNE type_mismatch
.3a4878	20 46 14	jsr $3a1446	            JSR ITOS
.3a487b	c2 20		rep #$20	            REP #$20
.3a487d	a5 16		lda $0816	                LDA STRPTR          ; Prepare the return result
.3a487f	85 23		sta $0823	                STA ARGUMENT1
.3a4881	a5 18		lda $0818	                LDA STRPTR+2
.3a4883	85 25		sta $0825	                STA ARGUMENT1+2
.3a4885	e2 20		sep #$20	            SEP #$20
.3a4887	a9 02		lda #$02	                LDA #TYPE_STRING
.3a4889	85 27		sta $0827	                STA ARGTYPE1
.3a488b	28		plp		                PLP
.3a488c	e2 20		sep #$20	            SEP #$20
.3a488e	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4891	60		rts		            RTS
.3a4892					type_mismatch
.3a4892	08		php		            PHP
.3a4893	c2 20		rep #$20	            REP #$20
.3a4895	48		pha		            PHA
.3a4896	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4899	5b		tcd		            TCD
.3a489a	68		pla		            PLA
.3a489b	28		plp		            PLP
.3a489c	e2 20		sep #$20	            SEP #$20
.3a489e	a9 04		lda #$04	            LDA #ERR_TYPE
.3a48a0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a48a4	c2 20		rep #$20	            REP #$20
.3a48a6	29 ff 00	and #$00ff	            AND #$00FF
.3a48a9	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a48ac	e2 20		sep #$20	            SEP #$20
.3a48ae	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a48b1					FN_DEC
.3a48b1	e2 20		sep #$20	            SEP #$20
.3a48b3	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a48b5	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a48b8	08		php		                PHP
.3a48b9	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a48bc	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a48bf	c2 20		rep #$20	            REP #$20
.3a48c1	64 0c		stz $080c	                STZ SCRATCH
.3a48c3	64 0e		stz $080e	                STZ SCRATCH+2
.3a48c5	e2 30		sep #$30	            SEP #$30
.3a48c7	a0 00		ldy #$00	                LDY #0
.3a48c9	b7 23		lda [$0823],y	skip_loop       LDA [ARGUMENT1],Y
.3a48cb	c9 20		cmp #$20	                CMP #CHAR_SP
.3a48cd	f0 04		beq $3a48d3	                BEQ skip_char
.3a48cf	c9 24		cmp #$24	                CMP #'$'
.3a48d1	d0 03		bne $3a48d6	                BNE loop
.3a48d3	c8		iny		skip_char       INY
.3a48d4	80 f3		bra $3a48c9	                BRA skip_loop
.3a48d6	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y   ; Check the character
.3a48d8	20 f7 03	jsr $3a03f7	            JSR ISHEX
.3a48db	90 1e		bcc $3a48fb	                BCC ret_result      ; No: return what we have so far
.3a48dd	c2 20		rep #$20	            REP #$20
.3a48df	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a48e1	26 0e		rol $080e	                ROL SCRATCH+2
.3a48e3	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a48e5	26 0e		rol $080e	                ROL SCRATCH+2
.3a48e7	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a48e9	26 0e		rol $080e	                ROL SCRATCH+2
.3a48eb	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a48ed	26 0e		rol $080e	                ROL SCRATCH+2
.3a48ef	e2 20		sep #$20	            SEP #$20
.3a48f1	20 18 04	jsr $3a0418	            JSR HEX2BIN
.3a48f4	05 0c		ora $080c	                ORA SCRATCH
.3a48f6	85 0c		sta $080c	                STA SCRATCH         ; And add it to the result
.3a48f8	c8		iny		                INY
.3a48f9	80 db		bra $3a48d6	                BRA loop            ; And try the next character
.3a48fb					ret_result
.3a48fb	c2 20		rep #$20	            REP #$20
.3a48fd	a5 0c		lda $080c	                LDA SCRATCH         ; Return the result
.3a48ff	85 23		sta $0823	                STA ARGUMENT1
.3a4901	a5 0e		lda $080e	                LDA SCRATCH+2
.3a4903	85 25		sta $0825	                STA ARGUMENT1+2
.3a4905	e2 20		sep #$20	            SEP #$20
.3a4907	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a4909	85 27		sta $0827	                STA ARGTYPE1
.3a490b	28		plp		                PLP
.3a490c	e2 20		sep #$20	            SEP #$20
.3a490e	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4911	60		rts		            RTS
.3a4912					FN_HEX
.3a4912	e2 20		sep #$20	            SEP #$20
.3a4914	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4916	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4919	08		php		                PHP
.3a491a	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a491d	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a4920	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a4923	e2 30		sep #$30	            SEP #$30
.3a4925	a0 ff		ldy #$ff	                LDY #$FF            ; Terminate the string
.3a4927	a9 00		lda #$00	                LDA #0
.3a4929	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a492b	88		dey		                DEY
.3a492c	a5 23		lda $0823	loop            LDA ARGUMENT1       ; Write the low digit
.3a492e	29 0f		and #$0f	                AND #$0F
.3a4930	aa		tax		                TAX
.3a4931	bf 00 d0 3a	lda $3ad000,x	                LDA @lHEXDIGITS,X
.3a4935	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4937	88		dey		                DEY
.3a4938	a5 23		lda $0823	                LDA ARGUMENT1       ; Write the high digit
.3a493a	29 f0		and #$f0	                AND #$F0
.3a493c	4a		lsr a		                LSR A
.3a493d	4a		lsr a		                LSR A
.3a493e	4a		lsr a		                LSR A
.3a493f	4a		lsr a		                LSR A
.3a4940	aa		tax		                TAX
.3a4941	bf 00 d0 3a	lda $3ad000,x	                LDA @lHEXDIGITS,X
.3a4945	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4947	88		dey		                DEY
.3a4948	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Shift value by one byte
.3a494a	85 23		sta $0823	                STA ARGUMENT1
.3a494c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a494e	85 24		sta $0824	                STA ARGUMENT1+1
.3a4950	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a4952	85 25		sta $0825	                STA ARGUMENT1+2
.3a4954	a9 00		lda #$00	                LDA #0
.3a4956	85 26		sta $0826	                STA ARGUMENT1+3
.3a4958	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the argument 0?
.3a495a	d0 d0		bne $3a492c	                BNE loop            ; No: keep converting
.3a495c	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a495e	d0 cc		bne $3a492c	                BNE loop
.3a4960	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4962	d0 c8		bne $3a492c	                BNE loop
.3a4964	98		tya		                TYA                 ; Get the index of the first free char
.3a4965	38		sec		                SEC                 ; Add 1 to get to the first character of the string
.3a4966	65 16		adc $0816	                ADC STRPTR          ; And add the whole thing to the temp string pointer
.3a4968	85 23		sta $0823	                STA ARGUMENT1       ; And return it as the result
.3a496a	a5 17		lda $0817	                LDA STRPTR+1
.3a496c	85 24		sta $0824	                STA ARGUMENT1+1
.3a496e	a5 18		lda $0818	                LDA STRPTR+2
.3a4970	85 25		sta $0825	                STA ARGUMENT1+2
.3a4972	a5 19		lda $0819	                LDA STRPTR+3
.3a4974	85 26		sta $0826	                STA ARGUMENT1+3
.3a4976	a9 02		lda #$02	                LDA #TYPE_STRING    ; And make the type STRING
.3a4978	85 27		sta $0827	                STA ARGTYPE1
.3a497a	28		plp		                PLP
.3a497b	e2 20		sep #$20	            SEP #$20
.3a497d	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4980	60		rts		            RTS
.3a4981					type_mismatch
.3a4981	08		php		            PHP
.3a4982	c2 20		rep #$20	            REP #$20
.3a4984	48		pha		            PHA
.3a4985	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4988	5b		tcd		            TCD
.3a4989	68		pla		            PLA
.3a498a	28		plp		            PLP
.3a498b	e2 20		sep #$20	            SEP #$20
.3a498d	a9 04		lda #$04	            LDA #ERR_TYPE
.3a498f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4993	c2 20		rep #$20	            REP #$20
.3a4995	29 ff 00	and #$00ff	            AND #$00FF
.3a4998	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a499b	e2 20		sep #$20	            SEP #$20
.3a499d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a49a0					FN_LEN
.3a49a0	e2 20		sep #$20	            SEP #$20
.3a49a2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a49a4	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a49a7	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a49aa	e2 20		sep #$20	            SEP #$20
.3a49ac	a5 27		lda $0827	                LDA ARGTYPE1
.3a49ae	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a49b0	d0 1f		bne $3a49d1	                BNE type_mismatch
.3a49b2	8b		phb		                PHB                 ; Set the data bank to the data bank of the string
.3a49b3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a49b5	48		pha		                PHA
.3a49b6	ab		plb		                PLB
.3a49b7	c2 10		rep #$10	            REP #$10
.3a49b9	a6 23		ldx $0823	                LDX ARGUMENT1       ; And point X to the string data
.3a49bb	20 d3 14	jsr $3a14d3	            JSR STRLEN
.3a49be	ab		plb		                PLB                 ; Restore the old data bank
.3a49bf	84 23		sty $0823	                STY ARGUMENT1       ; Save the length to ARGUMENT1
.3a49c1	c2 20		rep #$20	            REP #$20
.3a49c3	64 25		stz $0825	                STZ ARGUMENT1+2
.3a49c5	e2 20		sep #$20	            SEP #$20
.3a49c7	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the type to INTEGER
.3a49c9	85 27		sta $0827	                STA ARGTYPE1
.3a49cb	e2 20		sep #$20	            SEP #$20
.3a49cd	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a49d0	60		rts		            RTS
.3a49d1					type_mismatch
.3a49d1	08		php		            PHP
.3a49d2	c2 20		rep #$20	            REP #$20
.3a49d4	48		pha		            PHA
.3a49d5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a49d8	5b		tcd		            TCD
.3a49d9	68		pla		            PLA
.3a49da	28		plp		            PLP
.3a49db	e2 20		sep #$20	            SEP #$20
.3a49dd	a9 04		lda #$04	            LDA #ERR_TYPE
.3a49df	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a49e3	c2 20		rep #$20	            REP #$20
.3a49e5	29 ff 00	and #$00ff	            AND #$00FF
.3a49e8	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a49eb	e2 20		sep #$20	            SEP #$20
.3a49ed	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a49f0					FN_PEEK
.3a49f0	e2 20		sep #$20	            SEP #$20
.3a49f2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a49f4	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a49f7	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a49fa	e2 20		sep #$20	            SEP #$20
.3a49fc	a5 27		lda $0827	                LDA ARGTYPE1
.3a49fe	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4a00	d0 12		bne $3a4a14	                BNE type_mismatch
.3a4a02	e2 20		sep #$20	            SEP #$20
.3a4a04	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a4a06	85 23		sta $0823	                STA ARGUMENT1
.3a4a08	64 24		stz $0824	                STZ ARGUMENT1+1
.3a4a0a	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4a0c	64 30		stz $0830	                STZ ARGUMENT1+13
.3a4a0e	e2 20		sep #$20	            SEP #$20
.3a4a10	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4a13	60		rts		            RTS
.3a4a14					type_mismatch
.3a4a14	08		php		            PHP
.3a4a15	c2 20		rep #$20	            REP #$20
.3a4a17	48		pha		            PHA
.3a4a18	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4a1b	5b		tcd		            TCD
.3a4a1c	68		pla		            PLA
.3a4a1d	28		plp		            PLP
.3a4a1e	e2 20		sep #$20	            SEP #$20
.3a4a20	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4a22	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4a26	c2 20		rep #$20	            REP #$20
.3a4a28	29 ff 00	and #$00ff	            AND #$00FF
.3a4a2b	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4a2e	e2 20		sep #$20	            SEP #$20
.3a4a30	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4a33					FN_PEEKL
.3a4a33	e2 20		sep #$20	            SEP #$20
.3a4a35	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4a37	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4a3a	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4a3d	e2 20		sep #$20	            SEP #$20
.3a4a3f	a5 27		lda $0827	                LDA ARGTYPE1
.3a4a41	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4a43	d0 1d		bne $3a4a62	                BNE type_mismatch
.3a4a45	c2 20		rep #$20	            REP #$20
.3a4a47	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a4a49	85 0c		sta $080c	                STA SCRATCH
.3a4a4b	e2 20		sep #$20	            SEP #$20
.3a4a4d	a0 02 00	ldy #$0002	                LDY #2
.3a4a50	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y
.3a4a52	85 25		sta $0825	                STA ARGUMENT1+2
.3a4a54	64 26		stz $0826	                STZ ARGUMENT1+3
.3a4a56	c2 20		rep #$20	            REP #$20
.3a4a58	a5 0c		lda $080c	                LDA SCRATCH
.3a4a5a	85 23		sta $0823	                STA ARGUMENT1
.3a4a5c	e2 20		sep #$20	            SEP #$20
.3a4a5e	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4a61	60		rts		            RTS
.3a4a62					type_mismatch
.3a4a62	08		php		            PHP
.3a4a63	c2 20		rep #$20	            REP #$20
.3a4a65	48		pha		            PHA
.3a4a66	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4a69	5b		tcd		            TCD
.3a4a6a	68		pla		            PLA
.3a4a6b	28		plp		            PLP
.3a4a6c	e2 20		sep #$20	            SEP #$20
.3a4a6e	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4a70	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4a74	c2 20		rep #$20	            REP #$20
.3a4a76	29 ff 00	and #$00ff	            AND #$00FF
.3a4a79	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4a7c	e2 20		sep #$20	            SEP #$20
.3a4a7e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4a81					FN_PEEKW
.3a4a81	e2 20		sep #$20	            SEP #$20
.3a4a83	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4a85	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4a88	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4a8b	e2 20		sep #$20	            SEP #$20
.3a4a8d	a5 27		lda $0827	                LDA ARGTYPE1
.3a4a8f	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4a91	d0 0e		bne $3a4aa1	                BNE type_mismatch
.3a4a93	c2 20		rep #$20	            REP #$20
.3a4a95	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a4a97	85 23		sta $0823	                STA ARGUMENT1
.3a4a99	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4a9b	e2 20		sep #$20	            SEP #$20
.3a4a9d	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4aa0	60		rts		            RTS
.3a4aa1					type_mismatch
.3a4aa1	08		php		            PHP
.3a4aa2	c2 20		rep #$20	            REP #$20
.3a4aa4	48		pha		            PHA
.3a4aa5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4aa8	5b		tcd		            TCD
.3a4aa9	68		pla		            PLA
.3a4aaa	28		plp		            PLP
.3a4aab	e2 20		sep #$20	            SEP #$20
.3a4aad	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4aaf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4ab3	c2 20		rep #$20	            REP #$20
.3a4ab5	29 ff 00	and #$00ff	            AND #$00FF
.3a4ab8	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4abb	e2 20		sep #$20	            SEP #$20
.3a4abd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4ac0					FN_CHR
.3a4ac0	e2 20		sep #$20	            SEP #$20
.3a4ac2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4ac4	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4ac7	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4aca	e2 20		sep #$20	            SEP #$20
.3a4acc	a5 27		lda $0827	                LDA ARGTYPE1
.3a4ace	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4ad0	d0 24		bne $3a4af6	                BNE type_mismatch
.3a4ad2	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a4ad5	a5 23		lda $0823	                LDA ARGUMENT1       ; Get the numberic value
.3a4ad7	87 16		sta [$0816]	                STA [STRPTR]        ; And save it as the first character
.3a4ad9	a9 00		lda #$00	                LDA #0              ; Null terminate the string
.3a4adb	a0 01 00	ldy #$0001	                LDY #1
.3a4ade	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4ae0	c2 20		rep #$20	            REP #$20
.3a4ae2	a5 16		lda $0816	                LDA STRPTR
.3a4ae4	85 23		sta $0823	                STA ARGUMENT1
.3a4ae6	a5 18		lda $0818	                LDA STRPTR+2
.3a4ae8	85 25		sta $0825	                STA ARGUMENT1+2
.3a4aea	e2 20		sep #$20	            SEP #$20
.3a4aec	a9 02		lda #$02	                LDA #TYPE_STRING
.3a4aee	85 27		sta $0827	                STA ARGTYPE1
.3a4af0	e2 20		sep #$20	            SEP #$20
.3a4af2	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4af5	60		rts		            RTS
.3a4af6					type_mismatch
.3a4af6	08		php		            PHP
.3a4af7	c2 20		rep #$20	            REP #$20
.3a4af9	48		pha		            PHA
.3a4afa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4afd	5b		tcd		            TCD
.3a4afe	68		pla		            PLA
.3a4aff	28		plp		            PLP
.3a4b00	e2 20		sep #$20	            SEP #$20
.3a4b02	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4b04	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4b08	c2 20		rep #$20	            REP #$20
.3a4b0a	29 ff 00	and #$00ff	            AND #$00FF
.3a4b0d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4b10	e2 20		sep #$20	            SEP #$20
.3a4b12	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4b15					FN_ASC
.3a4b15	e2 20		sep #$20	            SEP #$20
.3a4b17	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4b19	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4b1c	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4b1f	e2 20		sep #$20	            SEP #$20
.3a4b21	a5 27		lda $0827	                LDA ARGTYPE1
.3a4b23	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4b25	d0 14		bne $3a4b3b	                BNE type_mismatch
.3a4b27	a7 23		lda [$0823]	                LDA [ARGUMENT1]     ; Get the character
.3a4b29	85 23		sta $0823	                STA ARGUMENT1       ; Save its code to ARGUMENT1
.3a4b2b	64 24		stz $0824	                STZ ARGUMENT1+1
.3a4b2d	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4b2f	64 26		stz $0826	                STZ ARGUMENT1+3
.3a4b31	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the return type to integer
.3a4b33	85 27		sta $0827	                STA ARGTYPE1
.3a4b35	e2 20		sep #$20	            SEP #$20
.3a4b37	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4b3a	60		rts		            RTS
.3a4b3b					type_mismatch
.3a4b3b	08		php		            PHP
.3a4b3c	c2 20		rep #$20	            REP #$20
.3a4b3e	48		pha		            PHA
.3a4b3f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4b42	5b		tcd		            TCD
.3a4b43	68		pla		            PLA
.3a4b44	28		plp		            PLP
.3a4b45	e2 20		sep #$20	            SEP #$20
.3a4b47	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4b49	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4b4d	c2 20		rep #$20	            REP #$20
.3a4b4f	29 ff 00	and #$00ff	            AND #$00FF
.3a4b52	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4b55	e2 20		sep #$20	            SEP #$20
.3a4b57	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4b5a					FN_SPC
.3a4b5a	e2 20		sep #$20	            SEP #$20
.3a4b5c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4b5e	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4b61	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4b64	e2 20		sep #$20	            SEP #$20
.3a4b66	a5 27		lda $0827	                LDA ARGTYPE1
.3a4b68	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4b6a	d0 39		bne $3a4ba5	                BNE type_mismatch
.3a4b6c	e2 20		sep #$20	            SEP #$20
.3a4b6e	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.3a4b70	d0 52		bne $3a4bc4	                BNE err_limit
.3a4b72	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4b74	d0 4e		bne $3a4bc4	                BNE err_limit
.3a4b76	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a4b78	d0 4a		bne $3a4bc4	                BNE err_limit
.3a4b7a	c2 10		rep #$10	            REP #$10
.3a4b7c	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a4b7f	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.3a4b81	e2 20		sep #$20	            SEP #$20
.3a4b83	a9 00		lda #$00	                LDA #0
.3a4b85	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.3a4b87	88		dey		                DEY
.3a4b88	30 07		bmi $3a4b91	                BMI done
.3a4b8a	a9 20		lda #$20	                LDA #CHAR_SP
.3a4b8c	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.3a4b8e	88		dey		                DEY
.3a4b8f	10 fb		bpl $3a4b8c	                BPL loop            ; And keep writing until we're done
.3a4b91	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.3a4b93	85 27		sta $0827	                STA ARGTYPE1
.3a4b95	c2 20		rep #$20	            REP #$20
.3a4b97	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.3a4b99	85 23		sta $0823	                STA ARGUMENT1
.3a4b9b	a5 18		lda $0818	                LDA STRPTR+2
.3a4b9d	85 25		sta $0825	                STA ARGUMENT1+2
.3a4b9f	e2 20		sep #$20	            SEP #$20
.3a4ba1	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4ba4	60		rts		            RTS
.3a4ba5					type_mismatch
.3a4ba5	08		php		            PHP
.3a4ba6	c2 20		rep #$20	            REP #$20
.3a4ba8	48		pha		            PHA
.3a4ba9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4bac	5b		tcd		            TCD
.3a4bad	68		pla		            PLA
.3a4bae	28		plp		            PLP
.3a4baf	e2 20		sep #$20	            SEP #$20
.3a4bb1	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4bb3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4bb7	c2 20		rep #$20	            REP #$20
.3a4bb9	29 ff 00	and #$00ff	            AND #$00FF
.3a4bbc	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4bbf	e2 20		sep #$20	            SEP #$20
.3a4bc1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4bc4					err_limit
.3a4bc4	08		php		            PHP
.3a4bc5	c2 20		rep #$20	            REP #$20
.3a4bc7	48		pha		            PHA
.3a4bc8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4bcb	5b		tcd		            TCD
.3a4bcc	68		pla		            PLA
.3a4bcd	28		plp		            PLP
.3a4bce	e2 20		sep #$20	            SEP #$20
.3a4bd0	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4bd2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4bd6	c2 20		rep #$20	            REP #$20
.3a4bd8	29 ff 00	and #$00ff	            AND #$00FF
.3a4bdb	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4bde	e2 20		sep #$20	            SEP #$20
.3a4be0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4be3					FN_TAB
.3a4be3	e2 20		sep #$20	            SEP #$20
.3a4be5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4be7	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4bea	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4bed	e2 20		sep #$20	            SEP #$20
.3a4bef	a5 27		lda $0827	                LDA ARGTYPE1
.3a4bf1	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4bf3	d0 39		bne $3a4c2e	                BNE type_mismatch
.3a4bf5	e2 20		sep #$20	            SEP #$20
.3a4bf7	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.3a4bf9	d0 52		bne $3a4c4d	                BNE err_limit
.3a4bfb	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4bfd	d0 4e		bne $3a4c4d	                BNE err_limit
.3a4bff	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a4c01	d0 4a		bne $3a4c4d	                BNE err_limit
.3a4c03	c2 10		rep #$10	            REP #$10
.3a4c05	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a4c08	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.3a4c0a	e2 20		sep #$20	            SEP #$20
.3a4c0c	a9 00		lda #$00	                LDA #0
.3a4c0e	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.3a4c10	88		dey		                DEY
.3a4c11	30 07		bmi $3a4c1a	                BMI done
.3a4c13	a9 09		lda #$09	                LDA #CHAR_TAB
.3a4c15	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.3a4c17	88		dey		                DEY
.3a4c18	10 fb		bpl $3a4c15	                BPL loop            ; And keep writing until we're done
.3a4c1a	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.3a4c1c	85 27		sta $0827	                STA ARGTYPE1
.3a4c1e	c2 20		rep #$20	            REP #$20
.3a4c20	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.3a4c22	85 23		sta $0823	                STA ARGUMENT1
.3a4c24	a5 18		lda $0818	                LDA STRPTR+2
.3a4c26	85 25		sta $0825	                STA ARGUMENT1+2
.3a4c28	e2 20		sep #$20	            SEP #$20
.3a4c2a	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4c2d	60		rts		            RTS
.3a4c2e					type_mismatch
.3a4c2e	08		php		            PHP
.3a4c2f	c2 20		rep #$20	            REP #$20
.3a4c31	48		pha		            PHA
.3a4c32	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4c35	5b		tcd		            TCD
.3a4c36	68		pla		            PLA
.3a4c37	28		plp		            PLP
.3a4c38	e2 20		sep #$20	            SEP #$20
.3a4c3a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4c3c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4c40	c2 20		rep #$20	            REP #$20
.3a4c42	29 ff 00	and #$00ff	            AND #$00FF
.3a4c45	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4c48	e2 20		sep #$20	            SEP #$20
.3a4c4a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4c4d					err_limit
.3a4c4d	08		php		            PHP
.3a4c4e	c2 20		rep #$20	            REP #$20
.3a4c50	48		pha		            PHA
.3a4c51	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4c54	5b		tcd		            TCD
.3a4c55	68		pla		            PLA
.3a4c56	28		plp		            PLP
.3a4c57	e2 20		sep #$20	            SEP #$20
.3a4c59	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4c5b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4c5f	c2 20		rep #$20	            REP #$20
.3a4c61	29 ff 00	and #$00ff	            AND #$00FF
.3a4c64	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4c67	e2 20		sep #$20	            SEP #$20
.3a4c69	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4c6c					FN_ABS
.3a4c6c	e2 20		sep #$20	            SEP #$20
.3a4c6e	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4c70	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4c73	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4c76	e2 20		sep #$20	            SEP #$20
.3a4c78	a5 27		lda $0827	                LDA ARGTYPE1        ; Check the type
.3a4c7a	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4c7c	f0 23		beq $3a4ca1	                BEQ abs_int         ; If integer, get the absolute value of the integer
.3a4c7e	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a4c80	f0 3e		beq $3a4cc0	                BEQ abs_float       ; If float, get the absolute value of the float
.3a4c82					type_err
.3a4c82	08		php		            PHP
.3a4c83	c2 20		rep #$20	            REP #$20
.3a4c85	48		pha		            PHA
.3a4c86	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4c89	5b		tcd		            TCD
.3a4c8a	68		pla		            PLA
.3a4c8b	28		plp		            PLP
.3a4c8c	e2 20		sep #$20	            SEP #$20
.3a4c8e	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4c90	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4c94	c2 20		rep #$20	            REP #$20
.3a4c96	29 ff 00	and #$00ff	            AND #$00FF
.3a4c99	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4c9c	e2 20		sep #$20	            SEP #$20
.3a4c9e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4ca1					abs_int
.3a4ca1	c2 20		rep #$20	            REP #$20
.3a4ca3	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Is it positive already?
.3a4ca5	10 21		bpl $3a4cc8	                BPL done            ; Yes: we don't need to do anythign further
.3a4ca7	49 ff ff	eor #$ffff	                EOR #$FFFF          ; Otherwise, take the two's compliment
.3a4caa	85 25		sta $0825	                STA ARGUMENT1+2     ; Of ARGUMENT1
.3a4cac	a5 23		lda $0823	                LDA ARGUMENT1
.3a4cae	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a4cb1	18		clc		                CLC
.3a4cb2	69 01 00	adc #$0001	                ADC #1
.3a4cb5	85 23		sta $0823	                STA ARGUMENT1       ; And save it back to ARGUMENT1
.3a4cb7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4cb9	69 00 00	adc #$0000	                ADC #0
.3a4cbc	85 25		sta $0825	                STA ARGUMENT1+2
.3a4cbe	80 08		bra $3a4cc8	                BRA done
.3a4cc0					abs_float
.3a4cc0	e2 20		sep #$20	            SEP #$20
.3a4cc2	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Just clear the sign bit
.3a4cc4	29 7f		and #$7f	                AND #$7F
.3a4cc6	85 26		sta $0826	                STA ARGUMENT1+3
.3a4cc8					done
.3a4cc8	e2 20		sep #$20	            SEP #$20
.3a4cca	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4ccd	60		rts		            RTS
.3a4cce					FN_SGN
.3a4cce	e2 20		sep #$20	            SEP #$20
.3a4cd0	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4cd2	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4cd5	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4cd8	e2 20		sep #$20	            SEP #$20
.3a4cda	a5 27		lda $0827	                LDA ARGTYPE1
.3a4cdc	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4cde	d0 25		bne $3a4d05	                BNE type_mismatch
.3a4ce0	c2 20		rep #$20	            REP #$20
.3a4ce2	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4ce4	30 12		bmi $3a4cf8	                BMI is_negative     ; Negative: return -1
.3a4ce6	d0 04		bne $3a4cec	                BNE is_positive     ; Is it not 0? Then return 1
.3a4ce8	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the lower word 0?
.3a4cea	f0 13		beq $3a4cff	                BEQ done            ; Yes: the whole thing is zero: return 0
.3a4cec	a9 00 00	lda #$0000	is_positive     LDA #0              ; It's positive: return 1
.3a4cef	85 25		sta $0825	                STA ARGUMENT1+2
.3a4cf1	a9 01 00	lda #$0001	                LDA #1
.3a4cf4	85 23		sta $0823	                STA ARGUMENT1
.3a4cf6	80 07		bra $3a4cff	                BRA done
.3a4cf8	a9 ff ff	lda #$ffff	is_negative     LDA #$FFFF          ; It's negative: return -1
.3a4cfb	85 25		sta $0825	                STA ARGUMENT1+2
.3a4cfd	85 23		sta $0823	                STA ARGUMENT1
.3a4cff					done
.3a4cff	e2 20		sep #$20	            SEP #$20
.3a4d01	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4d04	60		rts		            RTS
.3a4d05					type_mismatch
.3a4d05	08		php		            PHP
.3a4d06	c2 20		rep #$20	            REP #$20
.3a4d08	48		pha		            PHA
.3a4d09	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4d0c	5b		tcd		            TCD
.3a4d0d	68		pla		            PLA
.3a4d0e	28		plp		            PLP
.3a4d0f	e2 20		sep #$20	            SEP #$20
.3a4d11	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4d13	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4d17	c2 20		rep #$20	            REP #$20
.3a4d19	29 ff 00	and #$00ff	            AND #$00FF
.3a4d1c	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4d1f	e2 20		sep #$20	            SEP #$20
.3a4d21	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4d24					FN_INT
.3a4d24	e2 20		sep #$20	            SEP #$20
.3a4d26	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d28	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4d2b	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4d2e	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a4d31					done
.3a4d31	e2 20		sep #$20	            SEP #$20
.3a4d33	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4d36	60		rts		            RTS
.3a4d37					FN_SIN
.3a4d37	e2 20		sep #$20	            SEP #$20
.3a4d39	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d3b	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4d3e	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4d41	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4d44	20 f5 5f	jsr $3a5ff5	            JSR FP_SIN
.3a4d47					done
.3a4d47	e2 20		sep #$20	            SEP #$20
.3a4d49	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4d4c	60		rts		            RTS
.3a4d4d					FN_COS
.3a4d4d	e2 20		sep #$20	            SEP #$20
.3a4d4f	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d51	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4d54	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4d57	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4d5a	20 24 60	jsr $3a6024	            JSR FP_COS
.3a4d5d					done
.3a4d5d	e2 20		sep #$20	            SEP #$20
.3a4d5f	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4d62	60		rts		            RTS
.3a4d63					FN_TAN
.3a4d63	e2 20		sep #$20	            SEP #$20
.3a4d65	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d67	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4d6a	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4d6d	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4d70	20 53 60	jsr $3a6053	            JSR FP_TAN
.3a4d73					done
.3a4d73	e2 20		sep #$20	            SEP #$20
.3a4d75	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4d78	60		rts		            RTS
.3a4d79					FN_LN
.3a4d79	e2 20		sep #$20	            SEP #$20
.3a4d7b	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d7d	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4d80	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4d83	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4d86	20 81 60	jsr $3a6081	            JSR FP_LN
.3a4d89					done
.3a4d89	e2 20		sep #$20	            SEP #$20
.3a4d8b	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4d8e	60		rts		            RTS
.3a4d8f					FN_ACOS
.3a4d8f	e2 20		sep #$20	            SEP #$20
.3a4d91	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d93	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4d96	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4d99	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4d9c	20 aa 61	jsr $3a61aa	            JSR FP_ACOS
.3a4d9f					done
.3a4d9f	e2 20		sep #$20	            SEP #$20
.3a4da1	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4da4	60		rts		            RTS
.3a4da5					FN_ASIN
.3a4da5	e2 20		sep #$20	            SEP #$20
.3a4da7	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4da9	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4dac	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4daf	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4db2	20 80 61	jsr $3a6180	            JSR FP_ASIN
.3a4db5					done
.3a4db5	e2 20		sep #$20	            SEP #$20
.3a4db7	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4dba	60		rts		            RTS
.3a4dbb					FN_ATAN
.3a4dbb	e2 20		sep #$20	            SEP #$20
.3a4dbd	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4dbf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4dc2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4dc5	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4dc8	20 cc 61	jsr $3a61cc	            JSR FP_ATAN
.3a4dcb					done
.3a4dcb	e2 20		sep #$20	            SEP #$20
.3a4dcd	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4dd0	60		rts		            RTS
.3a4dd1					FN_EXP
.3a4dd1	e2 20		sep #$20	            SEP #$20
.3a4dd3	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4dd5	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4dd8	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4ddb	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4dde	20 60 62	jsr $3a6260	            JSR FP_EXP
.3a4de1					done
.3a4de1	e2 20		sep #$20	            SEP #$20
.3a4de3	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4de6	60		rts		            RTS
.3a4de7					FN_SQR
.3a4de7	e2 20		sep #$20	            SEP #$20
.3a4de9	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4deb	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4dee	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a4df1	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a4df4	20 e2 62	jsr $3a62e2	            JSR FP_SQR
.3a4df7					done
.3a4df7	e2 20		sep #$20	            SEP #$20
.3a4df9	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a4dfc	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\commands.s

.3a4dfd	00		brk #		CMD_MONITOR     BRK
.3a4dfe	ea		nop		                NOP
.3a4dff	60		rts		            RTS
.3a4e00					CMD_NEW
.3a4e00	08		php		                PHP
.3a4e01	0b		phd		                PHD
.3a4e02	08		php		            PHP
.3a4e03	c2 20		rep #$20	            REP #$20
.3a4e05	48		pha		            PHA
.3a4e06	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a4e09	5b		tcd		            TCD
.3a4e0a	68		pla		            PLA
.3a4e0b	28		plp		            PLP
.3a4e0c	c2 30		rep #$30	            REP #$30
.3a4e0e	c2 20		rep #$20	            REP #$20
.3a4e10	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a4e13	85 d9		sta $08d9	            STA LASTLINE
.3a4e15	e2 20		sep #$20	            SEP #$20
.3a4e17	a9 36		lda #$36	            LDA #`BASIC_BOT
.3a4e19	85 db		sta $08db	            STA LASTLINE+2
.3a4e1b	c2 30		rep #$30	            REP #$30
.3a4e1d	a9 00 00	lda #$0000	                LDA #0
.3a4e20	a0 00 00	ldy #$0000	                LDY #LINE_LINK
.3a4e23	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a4e25	a0 02 00	ldy #$0002	                LDY #LINE_NUMBER
.3a4e28	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a4e2a	a0 04 00	ldy #$0004	                LDY #LINE_TOKENS
.3a4e2d	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a4e2f	20 6d 1f	jsr $3a1f6d	            JSR CLRINTERP
.3a4e32	2b		pld		                PLD
.3a4e33	28		plp		                PLP
.3a4e34	60		rts		            RTS
.3a4e35					CMD_RUN
.3a4e35	8b		phb		                PHB
.3a4e36	08		php		                PHP
.3a4e37	c2 20		rep #$20	            REP #$20
.3a4e39	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT            ; Point to the first line of the program
.3a4e3c	85 1a		sta $081a	                STA CURLINE
.3a4e3e	a9 36 00	lda #$0036	                LDA #`BASIC_BOT
.3a4e41	85 1c		sta $081c	                STA CURLINE + 2
.3a4e43	20 6d 1f	jsr $3a1f6d	            JSR CLRINTERP
.3a4e46	20 4c 22	jsr $3a224c	            JSR EXECPROGRAM
.3a4e49	28		plp		                PLP
.3a4e4a	ab		plb		                PLB
.3a4e4b	60		rts		            RTS
.3a4e4c					CMD_LIST
.3a4e4c	08		php		                PHP
.3a4e4d	c2 20		rep #$20	            REP #$20
.3a4e4f	64 55		stz $0855	                STZ MARG1               ; MARG1 is starting line number, default 0
.3a4e51	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.3a4e54	85 59		sta $0859	                STA MARG2               ; MARG2 is ending line number, default MAXINT
.3a4e56	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a4e59	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a4e5c	29 ff 00	and #$00ff	                AND #$00FF
.3a4e5f	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.3a4e62	f0 2c		beq $3a4e90	                BEQ call_list           ; ... just list with the defaults
.3a4e64	c9 81 00	cmp #$0081	                CMP #TOK_MINUS          ; If just "- ###"...
.3a4e67	f0 1a		beq $3a4e83	                BEQ parse_endline       ; ... try to parse the end line number
.3a4e69	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a4e6c	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a4e6f	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG1
.3a4e71	85 55		sta $0855	                STA MARG1
.3a4e73	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a4e76	29 ff 00	and #$00ff	                AND #$00FF
.3a4e79	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.3a4e7c	f0 12		beq $3a4e90	                BEQ call_list           ; ... just list with the defaults
.3a4e7e	c9 81 00	cmp #$0081	                CMP #TOK_MINUS
.3a4e81	d0 2a		bne $3a4ead	                BNE error               ; At this point, if not '-', it's a syntax error
.3a4e83					parse_endline
.3a4e83	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a4e86	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a4e89	20 c3 07	jsr $3a07c3	            JSR PARSEINT
.3a4e8c	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG2
.3a4e8e	85 59		sta $0859	                STA MARG2
.3a4e90	a5 1c		lda $081c	call_list       LDA CURLINE+2           ; Save CURLINE
.3a4e92	48		pha		                PHA
.3a4e93	a5 1a		lda $081a	                LDA CURLINE
.3a4e95	48		pha		                PHA
.3a4e96	a5 02		lda $0802	                LDA BIP+2               ; Save BIP
.3a4e98	48		pha		                PHA
.3a4e99	a5 00		lda $0800	                LDA BIP
.3a4e9b	48		pha		                PHA
.3a4e9c	20 49 17	jsr $3a1749	            JSR LISTPROG
.3a4e9f	68		pla		                PLA
.3a4ea0	85 00		sta $0800	                STA BIP
.3a4ea2	68		pla		                PLA
.3a4ea3	85 02		sta $0802	                STA BIP+2
.3a4ea5	68		pla		                PLA
.3a4ea6	85 1a		sta $081a	                STA CURLINE
.3a4ea8	68		pla		                PLA
.3a4ea9	85 1c		sta $081c	                STA CURLINE+2
.3a4eab	28		plp		                PLP
.3a4eac	60		rts		            RTS
.3a4ead					error
.3a4ead	08		php		            PHP
.3a4eae	c2 20		rep #$20	            REP #$20
.3a4eb0	48		pha		            PHA
.3a4eb1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4eb4	5b		tcd		            TCD
.3a4eb5	68		pla		            PLA
.3a4eb6	28		plp		            PLP
.3a4eb7	e2 20		sep #$20	            SEP #$20
.3a4eb9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4ebb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4ebf	c2 20		rep #$20	            REP #$20
.3a4ec1	29 ff 00	and #$00ff	            AND #$00FF
.3a4ec4	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4ec7	e2 20		sep #$20	            SEP #$20
.3a4ec9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\variables.s

>08e1					NEXTVAR         .long ?         ; Pointer to the the next available byte for variable bindings
>08e4					VARIABLES       .long ?         ; Pointer to the most recently allocated variable
>08e7					TOFIND          .long ?         ; Pointer to the variable name to find
>08ea					TOFINDTYPE      .byte ?         ; The type to find
.0000					BINDING
>0000					TYPE            .fill 1                 ; The type of the data stored in the variable
>0001					NAME            .fill VAR_NAME_SIZE     ; The name of the variable
>0009					VALUE           .fill 4                 ; The data stored in the variable
>000d					NEXT            .fill 3                 ; The pointer to the next allocated variable of this type
.3a4ecc					INITVARS
.3a4ecc	08		php		                PHP
.3a4ecd	08		php		            PHP
.3a4ece	c2 20		rep #$20	            REP #$20
.3a4ed0	48		pha		            PHA
.3a4ed1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4ed4	5b		tcd		            TCD
.3a4ed5	68		pla		            PLA
.3a4ed6	28		plp		            PLP
.3a4ed7	c2 20		rep #$20	            REP #$20
.3a4ed9	64 e4		stz $08e4	                STZ VARIABLES           ; Clear the pointer to the variables
.3a4edb	64 e7		stz $08e7	                STZ TOFIND
.3a4edd	e2 20		sep #$20	            SEP #$20
.3a4edf	64 e6		stz $08e6	                STZ VARIABLES+2
.3a4ee1	64 e9		stz $08e9	                STZ TOFIND+2
.3a4ee3	64 ea		stz $08ea	                STZ TOFINDTYPE
.3a4ee5	c2 20		rep #$20	            REP #$20
.3a4ee7	38		sec		                SEC                     ; Compute the position of the first variable
.3a4ee8	a5 d9		lda $08d9	                LDA LASTLINE
.3a4eea	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.3a4eed	85 e1		sta $08e1	                STA NEXTVAR
.3a4eef	e2 20		sep #$20	            SEP #$20
.3a4ef1	a5 db		lda $08db	                LDA LASTLINE+2
.3a4ef3	69 00		adc #$00	                ADC #0
.3a4ef5	85 e3		sta $08e3	                STA NEXTVAR+2
.3a4ef7	28		plp		                PLP
.3a4ef8	60		rts		            RTS
.3a4ef9					ISVARCHAR
.3a4ef9	c9 5f		cmp #$5f	                CMP #'_'            ; Check if it's an underscore
.3a4efb	f0 1a		beq $3a4f17	                BEQ return_true     ; Yes: return true
.3a4efd	c9 3a		cmp #$3a	                CMP #'9'+1          ; Check if its in [0-9]
.3a4eff	b0 04		bcs $3a4f05	                BGE else1           ; No: check something else
.3a4f01	c9 30		cmp #$30	                CMP #'0'
.3a4f03	b0 12		bcs $3a4f17	                BGE return_true     ; Yes: return true
.3a4f05	c9 5b		cmp #$5b	else1           CMP #'Z'+1          ; Check if its in [A-Z]
.3a4f07	b0 04		bcs $3a4f0d	                BGE not_upper       ; No: check lower case
.3a4f09	c9 41		cmp #$41	                CMP #'A'
.3a4f0b	b0 0a		bcs $3a4f17	                BGE return_true     ; Yes: return true
.3a4f0d	c9 7b		cmp #$7b	not_upper       CMP #'z'+1          ; Check if its in [a-z]
.3a4f0f	b0 04		bcs $3a4f15	                BGE return_false    ; No: return false
.3a4f11	c9 61		cmp #$61	                CMP #'a'
.3a4f13	b0 02		bcs $3a4f17	                BGE return_true     ; Yes: return true
.3a4f15	18		clc		return_false    CLC
.3a4f16	60		rts		            RTS
.3a4f17	38		sec		return_true     SEC
.3a4f18	60		rts		            RTS
.3a4f19					VARNAMECMP
.3a4f19	08		php		                PHP
.3a4f1a	e2 20		sep #$20	            SEP #$20
.3a4f1c	c2 10		rep #$10	            REP #$10
.3a4f1e	a0 00 00	ldy #$0000	                LDY #0
.3a4f21	b7 0c		lda [$080c],y	cmp_loop        LDA [SCRATCH],Y         ; Check the character in the variable name
.3a4f23	f0 0a		beq $3a4f2f	                BEQ is_end
.3a4f25	d7 e7		cmp [$08e7],y	                CMP [TOFIND],Y          ; Compare the character to the one TOFIND
.3a4f27	d0 13		bne $3a4f3c	                BNE return_false        ; Not equal? Then this is not a match
.3a4f29	c8		iny		                INY
.3a4f2a	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a4f2d	d0 f2		bne $3a4f21	                BNE cmp_loop
.3a4f2f	b7 e7		lda [$08e7],y	is_end          LDA [TOFIND],Y          ; Check the character in the name to find
.3a4f31	20 41 04	jsr $3a0441	            JSR TOUPPERA
.3a4f34	20 f9 4e	jsr $3a4ef9	            JSR ISVARCHAR
.3a4f37	b0 03		bcs $3a4f3c	                BCS return_false        ; YES: we do not have a match
.3a4f39					return_true
.3a4f39	28		plp		                PLP
.3a4f3a	38		sec		                SEC
.3a4f3b	60		rts		            RTS
.3a4f3c					return_false
.3a4f3c	28		plp		                PLP
.3a4f3d	18		clc		                CLC
.3a4f3e	60		rts		            RTS
.3a4f3f					VAR_FIND
.3a4f3f	08		php		                PHP
.3a4f40	e2 20		sep #$20	            SEP #$20
.3a4f42	c2 10		rep #$10	            REP #$10
.3a4f44	a0 00 00	ldy #$0000	                LDY #0
.3a4f47	a2 00 00	ldx #$0000	                LDX #0
.3a4f4a	b7 e7		lda [$08e7],y	upper_loop      LDA [TOFIND],Y          ; Get a character
.3a4f4c	f0 0b		beq $3a4f59	                BEQ done_upper
.3a4f4e	20 41 04	jsr $3a0441	            JSR TOUPPERA
.3a4f51	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; And save it to the temp
.3a4f55	c8		iny		                INY
.3a4f56	e8		inx		                INX
.3a4f57	80 f1		bra $3a4f4a	                BRA upper_loop          ; Go back for another
.3a4f59	a9 00		lda #$00	done_upper      LDA #0
.3a4f5b	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; NULL terminate the temporary string
.3a4f5f	c2 20		rep #$20	            REP #$20
.3a4f61	a9 00 4e	lda #$4e00	                LDA #<>TEMPBUF          ; Make the temporary string the string
.3a4f64	85 e7		sta $08e7	                STA TOFIND              ; the variable name to find
.3a4f66	e2 20		sep #$20	            SEP #$20
.3a4f68	a9 00		lda #$00	                LDA #`TEMPBUF
.3a4f6a	85 e9		sta $08e9	                STA TOFIND+2
.3a4f6c	c2 20		rep #$20	            REP #$20
.3a4f6e	a5 e4		lda $08e4	                LDA VARIABLES           ; Point INDEX to the first variable to check
.3a4f70	85 08		sta $0808	                STA INDEX
.3a4f72	d0 06		bne $3a4f7a	                BNE set_index_h         ; If the low word is not 0, copy the high byte
.3a4f74	e2 20		sep #$20	            SEP #$20
.3a4f76	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a4f78	f0 4d		beq $3a4fc7	                BEQ not_found           ; If it is, we have no variables yet.
.3a4f7a					set_index_h
.3a4f7a	e2 20		sep #$20	            SEP #$20
.3a4f7c	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a4f7e	85 0a		sta $080a	                STA INDEX+2
.3a4f80	a5 ea		lda $08ea	check_binding   LDA TOFINDTYPE
.3a4f82	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Get the type of the variable
.3a4f85	d7 08		cmp [$0808],y	                CMP [INDEX],Y
.3a4f87	d0 17		bne $3a4fa0	                BNE check_next          ; If it's not a match, check the next binding
.3a4f89	c2 20		rep #$20	            REP #$20
.3a4f8b	18		clc		                CLC
.3a4f8c	a5 08		lda $0808	                LDA INDEX
.3a4f8e	69 01 00	adc #$0001	                ADC #BINDING.NAME
.3a4f91	85 0c		sta $080c	                STA SCRATCH
.3a4f93	e2 20		sep #$20	            SEP #$20
.3a4f95	a5 0a		lda $080a	                LDA INDEX+2
.3a4f97	69 00		adc #$00	                ADC #0
.3a4f99	85 0e		sta $080e	                STA SCRATCH+2
.3a4f9b	20 19 4f	jsr $3a4f19	            JSR VARNAMECMP
.3a4f9e	b0 2a		bcs $3a4fca	                BCS found               ; If they match, return that we've found the variable
.3a4fa0	a0 0d 00	ldy #$000d	check_next      LDY #BINDING.NEXT       ; SCRATCH := [INDEX].NEXT
.3a4fa3	c2 20		rep #$20	            REP #$20
.3a4fa5	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4fa7	85 0c		sta $080c	                STA SCRATCH
.3a4fa9	c8		iny		                INY
.3a4faa	c8		iny		                INY
.3a4fab	e2 20		sep #$20	            SEP #$20
.3a4fad	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4faf	85 0e		sta $080e	                STA SCRATCH+2
.3a4fb1	d0 06		bne $3a4fb9	                BNE set_index           ; If SCRATCH == 0, the variable wasn't found
.3a4fb3	c2 20		rep #$20	            REP #$20
.3a4fb5	a5 0c		lda $080c	                LDA SCRATCH
.3a4fb7	f0 0e		beq $3a4fc7	                BEQ not_found
.3a4fb9					set_index
.3a4fb9	c2 20		rep #$20	            REP #$20
.3a4fbb	a5 0c		lda $080c	                LDA SCRATCH
.3a4fbd	85 08		sta $0808	                STA INDEX
.3a4fbf	e2 20		sep #$20	            SEP #$20
.3a4fc1	a5 0e		lda $080e	                LDA SCRATCH+2
.3a4fc3	85 0a		sta $080a	                STA INDEX+2
.3a4fc5	80 b9		bra $3a4f80	                BRA check_binding       ; And check this next variable for a match
.3a4fc7					not_found
.3a4fc7	28		plp		                PLP
.3a4fc8	18		clc		                CLC
.3a4fc9	60		rts		            RTS
.3a4fca					found
.3a4fca	28		plp		                PLP
.3a4fcb	38		sec		                SEC
.3a4fcc	60		rts		            RTS
.3a4fcd					VAR_REF
.3a4fcd	08		php		                PHP
.3a4fce	20 3f 4f	jsr $3a4f3f	            JSR VAR_FIND
.3a4fd1	b0 1f		bcs $3a4ff2	                BCS found
.3a4fd3	08		php		            PHP
.3a4fd4	c2 20		rep #$20	            REP #$20
.3a4fd6	48		pha		            PHA
.3a4fd7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4fda	5b		tcd		            TCD
.3a4fdb	68		pla		            PLA
.3a4fdc	28		plp		            PLP
.3a4fdd	e2 20		sep #$20	            SEP #$20
.3a4fdf	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a4fe1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4fe5	c2 20		rep #$20	            REP #$20
.3a4fe7	29 ff 00	and #$00ff	            AND #$00FF
.3a4fea	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a4fed	e2 20		sep #$20	            SEP #$20
.3a4fef	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4ff2					found
.3a4ff2	c2 30		rep #$30	            REP #$30
.3a4ff4	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a4ff7	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4ff9	85 23		sta $0823	                STA ARGUMENT1
.3a4ffb	c8		iny		                INY
.3a4ffc	c8		iny		                INY
.3a4ffd	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4fff	85 25		sta $0825	                STA ARGUMENT1+2
.3a5001	e2 20		sep #$20	            SEP #$20
.3a5003	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE
.3a5006	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a5008	85 27		sta $0827	                STA ARGTYPE1
.3a500a	28		plp		done            PLP
.3a500b	60		rts		            RTS
.3a500c					VAR_ALLOC
.3a500c	08		php		                PHP
.3a500d	c2 20		rep #$20	            REP #$20
.3a500f	18		clc		                CLC                     ; Compute extent of the binding
.3a5010	a5 e1		lda $08e1	                LDA NEXTVAR
.3a5012	69 10 00	adc #$0010	                ADC #size(BINDING)
.3a5015	85 08		sta $0808	                STA INDEX
.3a5017	e2 20		sep #$20	            SEP #$20
.3a5019	a5 e3		lda $08e3	                LDA NEXTVAR+2
.3a501b	69 00		adc #$00	                ADC #0
.3a501d	85 0a		sta $080a	                STA INDEX+2
.3a501f	c5 bc		cmp $08bc	                CMP HEAP+2              ; Check to see if HEAP > INDEX
.3a5021	90 27		bcc $3a504a	                BLT has_room
.3a5023	c2 20		rep #$20	            REP #$20
.3a5025	a5 08		lda $0808	                LDA INDEX
.3a5027	c5 ba		cmp $08ba	                CMP HEAP
.3a5029	90 1f		bcc $3a504a	                BLT has_room
.3a502b	08		php		            PHP
.3a502c	c2 20		rep #$20	            REP #$20
.3a502e	48		pha		            PHA
.3a502f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5032	5b		tcd		            TCD
.3a5033	68		pla		            PLA
.3a5034	28		plp		            PLP
.3a5035	e2 20		sep #$20	            SEP #$20
.3a5037	a9 09		lda #$09	            LDA #ERR_RANGE
.3a5039	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a503d	c2 20		rep #$20	            REP #$20
.3a503f	29 ff 00	and #$00ff	            AND #$00FF
.3a5042	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a5045	e2 20		sep #$20	            SEP #$20
.3a5047	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a504a					has_room
.3a504a	c2 20		rep #$20	            REP #$20
.3a504c	a5 e1		lda $08e1	                LDA NEXTVAR             ; Yes: we can allocate the variable
.3a504e	85 c0		sta $08c0	                STA CURRBLOCK           ; Point CURRBLOCK to it
.3a5050	e2 20		sep #$20	            SEP #$20
.3a5052	a5 e3		lda $08e3	                LDA NEXTVAR+2
.3a5054	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a5056	c2 20		rep #$20	            REP #$20
.3a5058	a5 08		lda $0808	                LDA INDEX               ; And point NEXTVAR to the next possible spot
.3a505a	85 e1		sta $08e1	                STA NEXTVAR
.3a505c	e2 20		sep #$20	            SEP #$20
.3a505e	a5 0a		lda $080a	                LDA INDEX+2
.3a5060	85 e3		sta $08e3	                STA NEXTVAR+2
.3a5062	28		plp		                PLP
.3a5063	60		rts		            RTS
.3a5064					VAR_CREATE
.3a5064	08		php		                PHP
.3a5065	e2 20		sep #$20	            SEP #$20
.3a5067	a5 27		lda $0827	                LDA ARGTYPE1            ; Validate that our types match
.3a5069	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.3a506b	f0 33		beq $3a50a0	                BEQ chk_string          ; If so: check to see if it's a string
.3a506d	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable type
.3a506f	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's INTEGER
.3a5071	d0 05		bne $3a5078	                BNE chk_float
.3a5073	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a5076	80 2f		bra $3a50a7	                BRA alloc_binding       ; And bind the variable
.3a5078	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; If it's FLOAT
.3a507a	d0 05		bne $3a5081	                BNE type_error
.3a507c	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a507f	80 26		bra $3a50a7	                BRA alloc_binding       ; And bind the variable
.3a5081					type_error
.3a5081	08		php		            PHP
.3a5082	c2 20		rep #$20	            REP #$20
.3a5084	48		pha		            PHA
.3a5085	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5088	5b		tcd		            TCD
.3a5089	68		pla		            PLA
.3a508a	28		plp		            PLP
.3a508b	e2 20		sep #$20	            SEP #$20
.3a508d	a9 04		lda #$04	            LDA #ERR_TYPE
.3a508f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5093	c2 20		rep #$20	            REP #$20
.3a5095	29 ff 00	and #$00ff	            AND #$00FF
.3a5098	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a509b	e2 20		sep #$20	            SEP #$20
.3a509d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a50a0	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING        ; Is it a string?
.3a50a2	d0 03		bne $3a50a7	                BNE alloc_binding       ; No: just go ahead and bind it
.3a50a4	20 d9 15	jsr $3a15d9	            JSR STRCPY
.3a50a7					alloc_binding
.3a50a7	c2 10		rep #$10	            REP #$10
.3a50a9	20 0c 50	jsr $3a500c	            JSR VAR_ALLOC
.3a50ac	c2 30		rep #$30	            REP #$30
.3a50ae	18		clc		                CLC
.3a50af	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a50b1	69 01 00	adc #$0001	                ADC #BINDING.NAME
.3a50b4	85 08		sta $0808	                STA INDEX
.3a50b6	e2 20		sep #$20	            SEP #$20
.3a50b8	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a50ba	69 00		adc #$00	                ADC #0
.3a50bc	85 0a		sta $080a	                STA INDEX+2
.3a50be	a0 00 00	ldy #$0000	                LDY #0                  ; Ensure that the name field is blank
.3a50c1	a9 00		lda #$00	                LDA #0
.3a50c3	97 08		sta [$0808],y	blank_loop      STA [INDEX],Y
.3a50c5	c8		iny		                INY
.3a50c6	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a50c9	d0 f8		bne $3a50c3	                BNE blank_loop
.3a50cb	a0 00 00	ldy #$0000	                LDY #0
.3a50ce	b7 e7		lda [$08e7],y	name_loop       LDA [TOFIND],Y          ; Copy TOFIND to the NAME field
.3a50d0	f0 10		beq $3a50e2	                BEQ set_type
.3a50d2	20 41 04	jsr $3a0441	            JSR TOUPPERA
.3a50d5	20 f9 4e	jsr $3a4ef9	            JSR ISVARCHAR
.3a50d8	90 08		bcc $3a50e2	                BCC set_type
.3a50da	97 08		sta [$0808],y	                STA [INDEX],Y
.3a50dc	c8		iny		                INY
.3a50dd	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a50e0	d0 ec		bne $3a50ce	                BNE name_loop
.3a50e2					set_type
.3a50e2	c2 20		rep #$20	            REP #$20
.3a50e4	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE      ; Copy the value to the variable
.3a50e7	a5 23		lda $0823	                LDA ARGUMENT1
.3a50e9	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a50eb	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a50ed	c8		iny		                INY
.3a50ee	c8		iny		                INY
.3a50ef	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a50f1	a5 e4		lda $08e4	                LDA VARIABLES           ; Point NEXT to the current top of variables
.3a50f3	a0 0d 00	ldy #$000d	                LDY #BINDING.NEXT
.3a50f6	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a50f8	c8		iny		                INY
.3a50f9	c8		iny		                INY
.3a50fa	e2 20		sep #$20	            SEP #$20
.3a50fc	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a50fe	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5100	c2 20		rep #$20	            REP #$20
.3a5102	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a5104	85 e4		sta $08e4	                STA VARIABLES
.3a5106	e2 20		sep #$20	            SEP #$20
.3a5108	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a510a	85 e6		sta $08e6	                STA VARIABLES+2
.3a510c	e2 20		sep #$20	            SEP #$20
.3a510e	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Set the type of the variable
.3a5111	a5 27		lda $0827	                LDA ARGTYPE1
.3a5113	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5115	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is it a string?
.3a5117	f0 02		beq $3a511b	                BEQ set_ref             ; Yes: add a reference count to it
.3a5119	28		plp		done            PLP
.3a511a	60		rts		            RTS
.3a511b					set_ref
.3a511b	c2 20		rep #$20	            REP #$20
.3a511d	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the a heap allocated value
.3a511f	85 c0		sta $08c0	                STA CURRBLOCK
.3a5121	e2 20		sep #$20	            SEP #$20
.3a5123	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5125	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a5127	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a512a	20 0a 12	jsr $3a120a	            JSR HEAP_ADDREF
.3a512d	80 ea		bra $3a5119	                BRA done
.3a512f					VAR_SET
.3a512f	08		php		                PHP
.3a5130	c2 30		rep #$30	            REP #$30
.3a5132	a5 e4		lda $08e4	                LDA VARIABLES          ; If VARIABLES = 0, use VAR_CREATE
.3a5134	d0 06		bne $3a513c	                BNE use_find
.3a5136	e2 20		sep #$20	            SEP #$20
.3a5138	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a513a	f0 05		beq $3a5141	                BEQ use_create
.3a513c					use_find
.3a513c	20 3f 4f	jsr $3a4f3f	            JSR VAR_FIND
.3a513f	b0 05		bcs $3a5146	                BCS found
.3a5141					use_create
.3a5141	20 64 50	jsr $3a5064	            JSR VAR_CREATE
.3a5144	80 4e		bra $3a5194	                BRA done
.3a5146					found
.3a5146	e2 20		sep #$20	            SEP #$20
.3a5148	a5 27		lda $0827	                LDA ARGTYPE1            ; Do the types match?
.3a514a	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.3a514c	f0 33		beq $3a5181	                BEQ chk_string          ; Yes: check to see if it's string
.3a514e	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable
.3a5150	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; Is it INTEGER?
.3a5152	d0 05		bne $3a5159	                BNE chk_float
.3a5154	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a5157	80 2c		bra $3a5185	                BRA set_val
.3a5159	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; Is it FLOAT?
.3a515b	d0 05		bne $3a5162	                BNE type_error          ; No: throw an error
.3a515d	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a5160	80 23		bra $3a5185	                BRA set_val
.3a5162					type_error
.3a5162	08		php		            PHP
.3a5163	c2 20		rep #$20	            REP #$20
.3a5165	48		pha		            PHA
.3a5166	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5169	5b		tcd		            TCD
.3a516a	68		pla		            PLA
.3a516b	28		plp		            PLP
.3a516c	e2 20		sep #$20	            SEP #$20
.3a516e	a9 04		lda #$04	            LDA #ERR_TYPE
.3a5170	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5174	c2 20		rep #$20	            REP #$20
.3a5176	29 ff 00	and #$00ff	            AND #$00FF
.3a5179	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a517c	e2 20		sep #$20	            SEP #$20
.3a517e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5181	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING
.3a5183	f0 11		beq $3a5196	                BEQ set_string          ; Yes: set the string value of the variable
.3a5185					set_val
.3a5185	c2 30		rep #$30	            REP #$30
.3a5187	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a518a	a5 23		lda $0823	                LDA ARGUMENT1
.3a518c	97 08		sta [$0808],y	                STA [INDEX],Y
.3a518e	c8		iny		                INY
.3a518f	c8		iny		                INY
.3a5190	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5192	97 08		sta [$0808],y	                STA [INDEX],Y
.3a5194					done
.3a5194	28		plp		                PLP
.3a5195	60		rts		            RTS
.3a5196					set_string
.3a5196	20 d9 15	jsr $3a15d9	            JSR STRCPY
.3a5199	a0 09 00	ldy #$0009	set_ref         LDY #BINDING.VALUE      ; Set CURRBLOCK to the current string value
.3a519c	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a519e	85 c0		sta $08c0	                STA CURRBLOCK
.3a51a0	c8		iny		                INY
.3a51a1	c8		iny		                INY
.3a51a2	e2 20		sep #$20	            SEP #$20
.3a51a4	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a51a6	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a51a8	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a51ab	20 29 12	jsr $3a1229	            JSR HEAP_REMREF
.3a51ae	e2 20		sep #$20	            SEP #$20
.3a51b0	a5 27		lda $0827	                LDA ARGTYPE1
.3a51b2	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is the new value a string?
.3a51b4	f0 02		beq $3a51b8	                BEQ add_ref             ; Yes: add a reference to it
.3a51b6	80 cd		bra $3a5185	                BRA set_val             ; No: go back to set the value... this probably shouldn't happen
.3a51b8					add_ref
.3a51b8	c2 20		rep #$20	            REP #$20
.3a51ba	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the new string value
.3a51bc	85 c0		sta $08c0	                STA CURRBLOCK
.3a51be	e2 20		sep #$20	            SEP #$20
.3a51c0	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a51c2	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a51c4	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a51c7	20 0a 12	jsr $3a120a	            JSR HEAP_ADDREF
.3a51ca	80 b9		bra $3a5185	                BRA set_val
.3a51cc					VAR_FINDNAME
.3a51cc	08		php		                PHP
.3a51cd	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a51d0	e2 20		sep #$20	            SEP #$20
.3a51d2	a7 00		lda [$0800]	                LDA [BIP]           ; Get the first character
.3a51d4	20 cd 03	jsr $3a03cd	            JSR ISALPHA
.3a51d7	90 42		bcc $3a521b	                BCC not_found
.3a51d9	c2 20		rep #$20	            REP #$20
.3a51db	a5 00		lda $0800	                LDA BIP
.3a51dd	85 e7		sta $08e7	                STA TOFIND
.3a51df	e2 20		sep #$20	            SEP #$20
.3a51e1	a5 02		lda $0802	                LDA BIP+2
.3a51e3	85 e9		sta $08e9	                STA TOFIND+2
.3a51e5					loop
.3a51e5	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a51e8	a7 00		lda [$0800]	                LDA [BIP]
.3a51ea	f0 0d		beq $3a51f9	                BEQ is_float        ; If it's EOL, the variable is a float
.3a51ec	c9 24		cmp #$24	                CMP #'$'            ; If it's $, the variable is a string
.3a51ee	f0 14		beq $3a5204	                BEQ is_string
.3a51f0	c9 25		cmp #$25	                CMP #'%'            ; If it's %, the variable is an integer
.3a51f2	f0 09		beq $3a51fd	                BEQ is_integer
.3a51f4	20 f9 4e	jsr $3a4ef9	            JSR ISVARCHAR
.3a51f7	b0 ec		bcs $3a51e5	                BCS loop            ; Check the next one
.3a51f9	a9 01		lda #$01	is_float        LDA #TYPE_FLOAT     ; Otherwise it's a float
.3a51fb	80 0c		bra $3a5209	                BRA set_type
.3a51fd					is_integer
.3a51fd	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a5200	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a5202	80 05		bra $3a5209	                BRA set_type
.3a5204					is_string
.3a5204	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a5207	a9 02		lda #$02	                LDA #TYPE_STRING
.3a5209	85 ea		sta $08ea	set_type        STA TOFINDTYPE
.3a520b	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a520e	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it "("?
.3a5210	d0 06		bne $3a5218	                BNE done            ; No: we're done... it's just a scalar variable
.3a5212	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Yes: this is an array reference
.3a5214	09 80		ora #$80	                ORA #$80            ; ... turn on the "Array of..." bit
.3a5216	85 ea		sta $08ea	                STA TOFINDTYPE
.3a5218					done
.3a5218	28		plp		                PLP
.3a5219	38		sec		                SEC
.3a521a	60		rts		            RTS
.3a521b	28		plp		not_found       PLP
.3a521c	18		clc		                CLC
.3a521d	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\integers.s

.3a521e					OP_INT_ADD
.3a521e	08		php		            PHP
.3a521f	c2 20		rep #$20	            REP #$20
.3a5221	18		clc		            CLC
.3a5222	a5 23		lda $0823	            LDA ARGUMENT1
.3a5224	65 29		adc $0829	            ADC ARGUMENT2
.3a5226	85 23		sta $0823	            STA ARGUMENT1
.3a5228	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a522a	65 2b		adc $082b	            ADC ARGUMENT2+2
.3a522c	85 25		sta $0825	            STA ARGUMENT1+2
.3a522e	28		plp		            PLP
.3a522f	60		rts		            RTS
.3a5230					OP_INT_SUB
.3a5230	08		php		            PHP
.3a5231	c2 20		rep #$20	            REP #$20
.3a5233	38		sec		            SEC
.3a5234	a5 23		lda $0823	            LDA ARGUMENT1
.3a5236	e5 29		sbc $0829	            SBC ARGUMENT2
.3a5238	85 23		sta $0823	            STA ARGUMENT1
.3a523a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a523c	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a523e	85 25		sta $0825	            STA ARGUMENT1+2
.3a5240	28		plp		            PLP
.3a5241	60		rts		            RTS
.3a5242					OP_INT_MUL
.3a5242	08		php		            PHP
.3a5243					locals
>0001					L_SIGN      .word ?
>0003					L_RESULT    .dword ?
>0007					            .dword ?
.3a5243	c2 20		rep #$20	            REP #$20
.3a5245	3b		tsc		            TSC
.3a5246	38		sec		            SEC
.3a5247	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.3a524a	1b		tcs		            TCS
.3a524b	c2 30		rep #$30	            REP #$30
.3a524d	a9 00 00	lda #$0000	            LDA #0                  ; Start by assuming positive numbers
.3a5250	83 01		sta $01,s	            STA L_SIGN
.3a5252	83 03		sta $03,s	            STA L_RESULT            ; Clear result
.3a5254	83 05		sta $05,s	            STA L_RESULT+2
.3a5256	83 07		sta $07,s	            STA L_RESULT+4
.3a5258	83 09		sta $09,s	            STA L_RESULT+6
.3a525a	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Ensure ARGUMENT1 is positive
.3a525c	10 18		bpl $3a5276	            BPL chk_sign2
.3a525e	a9 00 80	lda #$8000	            LDA #$8000              ; Record that ARGUMENT1 is negative
.3a5261	83 01		sta $01,s	            STA L_SIGN
.3a5263	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Take the two's complement of ARGUMENT1
.3a5265	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a5268	85 25		sta $0825	            STA ARGUMENT1+2
.3a526a	a5 23		lda $0823	            LDA ARGUMENT1
.3a526c	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a526f	1a		inc a		            INC A
.3a5270	85 23		sta $0823	            STA ARGUMENT1
.3a5272	d0 02		bne $3a5276	            BNE chk_sign2
.3a5274	e6 25		inc $0825	            INC ARGUMENT1+2
.3a5276	a5 2b		lda $082b	chk_sign2   LDA ARGUMENT2+2         ; Ensure ARGUMENT2 is positive
.3a5278	10 1a		bpl $3a5294	            BPL chk_over
.3a527a	a3 01		lda $01,s	            LDA L_SIGN              ; Flip the sign
.3a527c	49 00 80	eor #$8000	            EOR #$8000
.3a527f	83 01		sta $01,s	            STA L_SIGN
.3a5281	a5 2b		lda $082b	            LDA ARGUMENT2+2         ; Take the two's complement of ARGUMENT2
.3a5283	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a5286	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5288	a5 29		lda $0829	            LDA ARGUMENT2
.3a528a	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a528d	1a		inc a		            INC A
.3a528e	85 29		sta $0829	            STA ARGUMENT2
.3a5290	d0 02		bne $3a5294	            BNE chk_over
.3a5292	e6 2b		inc $082b	            INC ARGUMENT2+2
.3a5294					chk_over
.3a5294	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5296	f0 04		beq $3a529c	            BEQ do_mult
.3a5298	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a529a	d0 5a		bne $3a52f6	            BNE overflow
.3a529c					do_mult
.3a529c	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*D
.3a529e	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a52a2	a5 29		lda $0829	            LDA ARGUMENT2
.3a52a4	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a52a8	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a52ac	83 03		sta $03,s	            STA L_RESULT
.3a52ae	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a52b2	83 05		sta $05,s	            STA L_RESULT+2
.3a52b4	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Calculate A*D << 16 + B*D
.3a52b6	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a52ba	a5 29		lda $0829	            LDA ARGUMENT2
.3a52bc	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a52c0	18		clc		            CLC
.3a52c1	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a52c5	63 05		adc $05,s	            ADC L_RESULT+2
.3a52c7	83 05		sta $05,s	            STA L_RESULT+2
.3a52c9	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a52cd	63 07		adc $07,s	            ADC L_RESULT+4
.3a52cf	83 07		sta $07,s	            STA L_RESULT+4
.3a52d1	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*C << 16 + A*D << 16 + B*D
.3a52d3	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a52d7	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a52d9	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a52dd	18		clc		            CLC
.3a52de	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a52e2	63 05		adc $05,s	            ADC L_RESULT+2
.3a52e4	83 05		sta $05,s	            STA L_RESULT+2
.3a52e6	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a52ea	63 07		adc $07,s	            ADC L_RESULT+4
.3a52ec	83 07		sta $07,s	            STA L_RESULT+4
.3a52ee	a3 07		lda $07,s	            LDA L_RESULT+4
.3a52f0	f0 23		beq $3a5315	            BEQ no_overflow
.3a52f2	a3 09		lda $09,s	            LDA L_RESULT+6
.3a52f4	f0 1f		beq $3a5315	            BEQ no_overflow
.3a52f6					overflow
.3a52f6	08		php		            PHP
.3a52f7	c2 20		rep #$20	            REP #$20
.3a52f9	48		pha		            PHA
.3a52fa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a52fd	5b		tcd		            TCD
.3a52fe	68		pla		            PLA
.3a52ff	28		plp		            PLP
.3a5300	e2 20		sep #$20	            SEP #$20
.3a5302	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a5304	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5308	c2 20		rep #$20	            REP #$20
.3a530a	29 ff 00	and #$00ff	            AND #$00FF
.3a530d	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a5310	e2 20		sep #$20	            SEP #$20
.3a5312	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5315					no_overflow
.3a5315	c2 30		rep #$30	            REP #$30
.3a5317	a3 01		lda $01,s	            LDA L_SIGN              ; Check the sign
.3a5319	10 16		bpl $3a5331	            BPL ret_result          ; If positive: just return the result
.3a531b	a3 05		lda $05,s	            LDA L_RESULT+2          ; Compute the two's complement of the result
.3a531d	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a5320	83 05		sta $05,s	            STA L_RESULT+2
.3a5322	a3 03		lda $03,s	            LDA L_RESULT
.3a5324	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a5327	1a		inc a		            INC A
.3a5328	83 03		sta $03,s	            STA L_RESULT
.3a532a	d0 05		bne $3a5331	            BNE ret_result
.3a532c	a3 05		lda $05,s	            LDA L_RESULT+2
.3a532e	1a		inc a		            INC A
.3a532f	83 05		sta $05,s	            STA L_RESULT+2
.3a5331					ret_result
.3a5331	a3 03		lda $03,s	            LDA L_RESULT
.3a5333	85 23		sta $0823	            STA ARGUMENT1
.3a5335	a3 05		lda $05,s	            LDA L_RESULT+2
.3a5337	85 25		sta $0825	            STA ARGUMENT1+2
.3a5339	c2 20		rep #$20	            REP #$20
.3a533b	3b		tsc		            TSC
.3a533c	18		clc		            CLC
.3a533d	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.3a5340	1b		tcs		            TCS
.3a5341	28		plp		            PLP
.3a5342	60		rts		            RTS
.3a5343					OP_INT_LT
.3a5343	08		php		            PHP
.3a5344	c2 20		rep #$20	            REP #$20
.3a5346	a5 23		lda $0823	            LDA ARGUMENT1
.3a5348	c5 29		cmp $0829	            CMP ARGUMENT2
.3a534a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a534c	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a534e	50 03		bvc $3a5353	            BVC skip_eor
.3a5350	49 00 80	eor #$8000	            EOR #$8000
.3a5353	30 06		bmi $3a535b	skip_eor    BMI ret_true
.3a5355	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5357	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5359	80 07		bra $3a5362	            BRA done
.3a535b	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a535e	85 23		sta $0823	            STA ARGUMENT1
.3a5360	85 25		sta $0825	            STA ARGUMENT1+2
.3a5362	28		plp		done        PLP
.3a5363	60		rts		            RTS
.3a5364					OP_INT_GT
.3a5364	08		php		            PHP
.3a5365	c2 20		rep #$20	            REP #$20
.3a5367	a5 23		lda $0823	            LDA ARGUMENT1
.3a5369	c5 29		cmp $0829	            CMP ARGUMENT2
.3a536b	d0 0c		bne $3a5379	            BNE test_fully
.3a536d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a536f	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a5371	d0 06		bne $3a5379	            BNE test_fully
.3a5373	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5375	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5377	80 16		bra $3a538f	            BRA done
.3a5379	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.3a537b	c5 23		cmp $0823	            CMP ARGUMENT1
.3a537d	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a537f	e5 25		sbc $0825	            SBC ARGUMENT1+2
.3a5381	50 03		bvc $3a5386	            BVC skip_eor
.3a5383	49 00 80	eor #$8000	            EOR #$8000
.3a5386	10 eb		bpl $3a5373	skip_eor    BPL ret_false
.3a5388	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a538b	85 23		sta $0823	            STA ARGUMENT1
.3a538d	85 25		sta $0825	            STA ARGUMENT1+2
.3a538f	28		plp		done        PLP
.3a5390	60		rts		            RTS
.3a5391					OP_INT_EQ
.3a5391	08		php		            PHP
.3a5392	c2 20		rep #$20	            REP #$20
.3a5394	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a5396	c5 25		cmp $0825	            CMP ARGUMENT1+2
.3a5398	d0 0f		bne $3a53a9	            BNE ret_false
.3a539a	a5 29		lda $0829	            LDA ARGUMENT2
.3a539c	c5 23		cmp $0823	            CMP ARGUMENT1
.3a539e	d0 09		bne $3a53a9	            BNE ret_false
.3a53a0	a9 ff ff	lda #$ffff	            LDA #$FFFF
.3a53a3	85 23		sta $0823	            STA ARGUMENT1
.3a53a5	85 25		sta $0825	            STA ARGUMENT1+2
.3a53a7	80 04		bra $3a53ad	            BRA done
.3a53a9	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a53ab	64 25		stz $0825	            STZ ARGUMENT1+2
.3a53ad	28		plp		done        PLP
.3a53ae	60		rts		            RTS
.3a53af					OP_INT_NE
.3a53af	08		php		            PHP
.3a53b0	c2 20		rep #$20	            REP #$20
.3a53b2	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a53b4	c5 25		cmp $0825	            CMP ARGUMENT1+2
.3a53b6	d0 0c		bne $3a53c4	            BNE ret_true
.3a53b8	a5 29		lda $0829	            LDA ARGUMENT2
.3a53ba	c5 23		cmp $0823	            CMP ARGUMENT1
.3a53bc	d0 06		bne $3a53c4	            BNE ret_true
.3a53be	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a53c0	64 25		stz $0825	            STZ ARGUMENT1+2
.3a53c2	80 07		bra $3a53cb	            BRA done
.3a53c4	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a53c7	85 23		sta $0823	            STA ARGUMENT1
.3a53c9	85 25		sta $0825	            STA ARGUMENT1+2
.3a53cb	28		plp		done        PLP
.3a53cc	60		rts		            RTS
.3a53cd					OP_INT_GTE
.3a53cd	08		php		            PHP
.3a53ce	c2 20		rep #$20	            REP #$20
.3a53d0	a5 23		lda $0823	            LDA ARGUMENT1
.3a53d2	c5 29		cmp $0829	            CMP ARGUMENT2
.3a53d4	d0 0f		bne $3a53e5	            BNE test_fully
.3a53d6	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a53d8	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a53da	d0 09		bne $3a53e5	            BNE test_fully
.3a53dc	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a53df	85 23		sta $0823	            STA ARGUMENT1
.3a53e1	85 25		sta $0825	            STA ARGUMENT1+2
.3a53e3	80 13		bra $3a53f8	            BRA done
.3a53e5	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.3a53e7	c5 23		cmp $0823	            CMP ARGUMENT1
.3a53e9	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a53eb	e5 25		sbc $0825	            SBC ARGUMENT1+2
.3a53ed	50 03		bvc $3a53f2	            BVC skip_eor
.3a53ef	49 00 80	eor #$8000	            EOR #$8000
.3a53f2	30 e8		bmi $3a53dc	skip_eor    BMI ret_true
.3a53f4	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a53f6	64 25		stz $0825	            STZ ARGUMENT1+2
.3a53f8	28		plp		done        PLP
.3a53f9	60		rts		            RTS
.3a53fa					OP_INT_LTE
.3a53fa	08		php		            PHP
.3a53fb	c2 20		rep #$20	            REP #$20
.3a53fd	a5 23		lda $0823	            LDA ARGUMENT1
.3a53ff	c5 29		cmp $0829	            CMP ARGUMENT2
.3a5401	d0 0f		bne $3a5412	            BNE test_fully
.3a5403	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5405	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a5407	d0 09		bne $3a5412	            BNE test_fully
.3a5409	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a540c	85 23		sta $0823	            STA ARGUMENT1
.3a540e	85 25		sta $0825	            STA ARGUMENT1+2
.3a5410	80 13		bra $3a5425	            BRA done
.3a5412	a5 23		lda $0823	test_fully  LDA ARGUMENT1
.3a5414	c5 29		cmp $0829	            CMP ARGUMENT2
.3a5416	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5418	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a541a	50 03		bvc $3a541f	            BVC skip_eor
.3a541c	49 00 80	eor #$8000	            EOR #$8000
.3a541f	30 e8		bmi $3a5409	skip_eor    BMI ret_true
.3a5421	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5423	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5425	28		plp		done        PLP
.3a5426	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\floats.s


;******  Processing file: src\C256/floats.s


;******  Processing file: src\C256/fp_math_defs.s

=$afe200				FP_MATH_CTRL0 = $AFE200         ; Read/write
=$08					FP_MATH_CTRL0_ADD = $08         ; 0: Substraction - 1: Addition
=$01					FP_CTRL0_CONV_0 = %00000001     ; Input 0 should be converted from 24.12 fixed point to floating point
=$02					FP_CTRL0_CONV_1 = %00000010     ; Input 1 should be converted from 24.12 fixed point to floating point
=$00					FP_ADD_IN0_MUX0 = %00000000     ; Adder input #0 is the output of MUX0
=$10					FP_ADD_IN0_MUX1 = %00010000     ; Adder input #0 is the output of MUX1
=$20					FP_ADD_IN0_MULT = %00100000     ; Adder input #0 is the output of the multiplier
=$30					FP_ADD_IN0_DIV  = %00110000     ; Adder input #0 is the output of the divider
=$00					FP_ADD_IN1_MUX0 = %00000000     ; Adder input #1 is the output of MUX0
=$40					FP_ADD_IN1_MUX1 = %01000000     ; Adder input #1 is the output of MUX1
=$80					FP_ADD_IN1_MULT = %10000000     ; Adder input #1 is the output of the multiplier
=$c0					FP_ADD_IN1_DIV  = %11000000     ; Adder input #1 is the output of the divider
=$afe201				FP_MATH_CTRL1 = $AFE201
=$00					FP_OUT_MULT = %00000000         ; Output is from the multiplier
=$01					FP_OUT_DIV  = %00000001         ; Output is from the divider
=$02					FP_OUT_ADD  = %00000010         ; Output is from the adder/subtracter
=$03					FP_OUT_ONE  = %00000011         ; Output is the constant '1.0'
=$afe202				FP_MATH_CTRL2 = $AFE202         ; Not Used - Reserved
=$afe203				FP_MATH_CTRL3 = $AFE203         ; Not Used - Reserved
=$afe204				FP_MATH_MULT_STAT = $AFE204     ; Status of the multiplier
=$01					FP_MULT_STAT_NAN  = $01         ; (NAN) Not a Number Status
=$02					FP_MULT_STAT_OVF  = $02         ; Overflow
=$04					FP_MULT_STAT_UDF  = $04         ; Underflow
=$08					FP_MULT_STAT_ZERO = $08         ; Zero
=$afe205				FP_MATH_DIV_STAT  = $AFE205     ; Status of the divider
=$01					FP_DIV_STAT_NAN       = $01     ; Not a number Status
=$02					FP_DIV_STAT_OVF       = $02     ; Overflow
=$04					FP_DIV_STAT_UDF       = $04     ; Underflow
=$08					FP_DIV_STAT_ZERO      = $08     ; Zero
=$10					FP_DIV_STAT_DIVBYZERO = $10     ; Division by Zero
=$afe206				FP_MATH_ADD_STAT  = $AFE206     ; Status of the adder/subtracter
=$01					FP_ADD_STAT_NAN  = $01          ; Not a number Status
=$02					FP_ADD_STAT_OVF  = $02          ; Overflow
=$04					FP_ADD_STAT_UDF  = $04          ; Underflow
=$08					FP_ADD_STAT_ZERO = $08          ; Zero
=$afe207				FP_MATH_CONV_STAT = $AFE207     ; Status of the fixed <=> float converters
=$01					FP_CONV_STAT_NAN  = $01         ; Not a number Status
=$02					FP_CONV_STAT_OVF  = $02         ; Overflow
=$04					FP_CONV_STAT_UDF  = $04         ; Underflow
=$afe208				FP_MATH_INPUT0_LL = $AFE208
=$afe209				FP_MATH_INPUT0_LH = $AFE209
=$afe20a				FP_MATH_INPUT0_HL = $AFE20A
=$afe20b				FP_MATH_INPUT0_HH = $AFE20B
=$afe20c				FP_MATH_INPUT1_LL = $AFE20C
=$afe20d				FP_MATH_INPUT1_LH = $AFE20D
=$afe20e				FP_MATH_INPUT1_HL = $AFE20E
=$afe20f				FP_MATH_INPUT1_HH = $AFE20F
=$afe208				FP_MATH_OUTPUT_FP_LL = $AFE208
=$afe209				FP_MATH_OUTPUT_FP_LH = $AFE209
=$afe20a				FP_MATH_OUTPUT_FP_HL = $AFE20A
=$afe20b				FP_MATH_OUTPUT_FP_HH = $AFE20B
=$afe20c				FP_MATH_OUTPUT_FIXED_LL = $AFE20C
=$afe20d				FP_MATH_OUTPUT_FIXED_LH = $AFE20D
=$afe20e				FP_MATH_OUTPUT_FIXED_HL = $AFE20E
=$afe20f				FP_MATH_OUTPUT_FIXED_HH = $AFE20F

;******  Return to file: src\C256/floats.s


;******  Processing file: src\C256/math_cop.s

.3a5427					UINT_DIV_A_X
.3a5427	08		php		                    PHP
.3a5428	c2 20		rep #$20	            REP #$20
.3a542a	8f 12 01 00	sta $000112	                    STA @l UNSIGNED_DIV_NUM_LO
.3a542e	8a		txa		                    TXA
.3a542f	8f 10 01 00	sta $000110	                    STA @l UNSIGNED_DIV_DEM_LO
.3a5433	af 16 01 00	lda $000116	                    LDA @l UNSIGNED_DIV_REM_LO
.3a5437	aa		tax		                    TAX
.3a5438	af 14 01 00	lda $000114	                    LDA @l UNSIGNED_DIV_QUO_LO
.3a543c	28		plp		                    PLP
.3a543d	60		rts		            RTS

;******  Return to file: src\C256/floats.s

.3a543e					FIXINT_TO_FP
.3a543e	08		php		                    PHP
.3a543f	e2 20		sep #$20	            SEP #$20
.3a5441	a9 03		lda #$03	                    LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a5443	8f 00 e2 af	sta $afe200	                    STA @l FP_MATH_CTRL0
.3a5447	a9 00		lda #$00	                    LDA #FP_OUT_MULT
.3a5449	8f 01 e2 af	sta $afe201	                    STA @l FP_MATH_CTRL1
.3a544d	c2 20		rep #$20	            REP #$20
.3a544f	a5 23		lda $0823	                    LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a5451	8f 08 e2 af	sta $afe208	                    STA @l FP_MATH_INPUT0_LL
.3a5455	a5 25		lda $0825	                    LDA ARGUMENT1+2
.3a5457	8f 0a e2 af	sta $afe20a	                    STA @l FP_MATH_INPUT0_HL
.3a545b	a9 00 00	lda #$0000	                    LDA #0
.3a545e	8f 0c e2 af	sta $afe20c	                    STA @l FP_MATH_INPUT1_LL    ; ARGUMENT2 = 0100 0000 = 4096 in 20:12
.3a5462	a9 00 01	lda #$0100	                    LDA #$0100
.3a5465	8f 0e e2 af	sta $afe20e	                    STA @l FP_MATH_INPUT1_HL
.3a5469	ea		nop		                    NOP
.3a546a	ea		nop		                    NOP
.3a546b	ea		nop		                    NOP
.3a546c	ea		nop		                    NOP
.3a546d	ea		nop		                    NOP
.3a546e	ea		nop		                    NOP
.3a546f	af 08 e2 af	lda $afe208	                    LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a5473	85 23		sta $0823	                    STA ARGUMENT1
.3a5475	af 0a e2 af	lda $afe20a	                    LDA @l FP_MATH_OUTPUT_FP_HL
.3a5479	85 25		sta $0825	                    STA ARGUMENT1+2
.3a547b	a9 01 00	lda #$0001	                    LDA #TYPE_FLOAT
.3a547e	85 27		sta $0827	                    STA ARGTYPE1
.3a5480	28		plp		                    PLP
.3a5481	60		rts		            RTS
.3a5482	08		php		OP_FP_SUB       PHP
.3a5483	e2 20		sep #$20	            SEP #$20
.3a5485	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5487	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a548b	80 09		bra $3a5496	                BRA FP_ADD_SUB
.3a548d	08		php		OP_FP_ADD       PHP
.3a548e	e2 20		sep #$20	            SEP #$20
.3a5490	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5492	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a5496	a9 02		lda #$02	FP_ADD_SUB      LDA #FP_OUT_ADD
.3a5498	8f 01 e2 af	sta $afe201	                STA @lFP_MATH_CTRL1
.3a549c	c2 20		rep #$20	            REP #$20
.3a549e	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a54a0	8f 08 e2 af	sta $afe208	                STA @lFP_MATH_INPUT0_LL
.3a54a4	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a54a6	8f 0a e2 af	sta $afe20a	                STA @lFP_MATH_INPUT0_HL
.3a54aa	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a54ac	8f 0c e2 af	sta $afe20c	                STA @lFP_MATH_INPUT1_LL
.3a54b0	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a54b2	8f 0e e2 af	sta $afe20e	                STA @lFP_MATH_INPUT1_HL
.3a54b6	ea		nop		                NOP
.3a54b7	ea		nop		                NOP
.3a54b8	ea		nop		                NOP
.3a54b9	e2 20		sep #$20	            SEP #$20
.3a54bb	af 06 e2 af	lda $afe206	                LDA @lFP_MATH_ADD_STAT      ; Check the status of the addition
.3a54bf	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.3a54c1	d0 10		bne $3a54d3	                BNE fp_add_error            ; If an issue was raise, process the math error
.3a54c3	c2 20		rep #$20	            REP #$20
.3a54c5	af 08 e2 af	lda $afe208	                LDA @lFP_MATH_OUTPUT_FP_LL  ; Retrieve the results into ARGUMENT1
.3a54c9	85 23		sta $0823	                STA ARGUMENT1
.3a54cb	af 0a e2 af	lda $afe20a	                LDA @lFP_MATH_OUTPUT_FP_HL
.3a54cf	85 25		sta $0825	                STA ARGUMENT1+2
.3a54d1	28		plp		fp_add_done     PLP
.3a54d2	60		rts		            RTS
.3a54d3					fp_add_error
.3a54d3	20 6e 55	jsr $3a556e	            JSR FP_MATH_ERROR
.3a54d6	80 f9		bra $3a54d1	                BRA fp_add_done
.3a54d8	08		php		OP_FP_DIV       PHP
.3a54d9	e2 20		sep #$20	            SEP #$20
.3a54db	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a54dd	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a54e1	a9 00		lda #$00	                LDA #0
.3a54e3	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a54e7	c2 20		rep #$20	            REP #$20
.3a54e9	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a54eb	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a54ef	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a54f1	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a54f5	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a54f7	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a54fb	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a54fd	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5501	ea		nop		                NOP
.3a5502	ea		nop		                NOP
.3a5503	ea		nop		                NOP
.3a5504	e2 20		sep #$20	            SEP #$20
.3a5506	af 05 e2 af	lda $afe205	                LDA @l FP_MATH_DIV_STAT     ; Check the status of the addition
.3a550a	29 17		and #$17	                AND #%00010111              ; Filter out the ZERO status
.3a550c	d0 10		bne $3a551e	                BNE fp_div_error            ; If an issue was raise, process the math error
.3a550e	c2 20		rep #$20	            REP #$20
.3a5510	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a5514	85 23		sta $0823	                STA ARGUMENT1
.3a5516	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a551a	85 25		sta $0825	                STA ARGUMENT1+2
.3a551c	28		plp		fp_div_done     PLP
.3a551d	60		rts		            RTS
.3a551e					fp_div_error
.3a551e	20 6e 55	jsr $3a556e	            JSR FP_MATH_ERROR
.3a5521	80 f9		bra $3a551c	                BRA fp_div_done
.3a5523	08		php		OP_FP_MUL       PHP
.3a5524	e2 20		sep #$20	            SEP #$20
.3a5526	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a5528	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a552c	a9 00		lda #$00	                LDA #0
.3a552e	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a5532	c2 20		rep #$20	            REP #$20
.3a5534	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a5536	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a553a	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a553c	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5540	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a5542	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5546	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a5548	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a554c	ea		nop		                NOP
.3a554d	ea		nop		                NOP
.3a554e	ea		nop		                NOP
.3a554f	e2 20		sep #$20	            SEP #$20
.3a5551	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT    ; Check the status of the addition
.3a5555	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.3a5557	d0 10		bne $3a5569	                BNE fp_mul_error            ; If an issue was raise, process the math error
.3a5559	c2 20		rep #$20	            REP #$20
.3a555b	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a555f	85 23		sta $0823	                STA ARGUMENT1
.3a5561	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5565	85 25		sta $0825	                STA ARGUMENT1+2
.3a5567	28		plp		fp_mul_done     PLP
.3a5568	60		rts		            RTS
.3a5569					fp_mul_error
.3a5569	20 6e 55	jsr $3a556e	            JSR FP_MATH_ERROR
.3a556c	80 f9		bra $3a5567	                BRA fp_mul_done
.3a556e					FP_MATH_ERROR
.3a556e	e2 20		sep #$20	            SEP #$20
.3a5570	89 01		bit #$01	                BIT #FP_ADD_STAT_NAN        ; Is there a NaN condition?
.3a5572	f0 20		beq $3a5594	                BEQ check_over              ; No: check for overflow
.3a5574	00		brk #		                BRK
.3a5575	08		php		            PHP
.3a5576	c2 20		rep #$20	            REP #$20
.3a5578	48		pha		            PHA
.3a5579	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a557c	5b		tcd		            TCD
.3a557d	68		pla		            PLA
.3a557e	28		plp		            PLP
.3a557f	e2 20		sep #$20	            SEP #$20
.3a5581	a9 0c		lda #$0c	            LDA #ERR_NAN
.3a5583	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5587	c2 20		rep #$20	            REP #$20
.3a5589	29 ff 00	and #$00ff	            AND #$00FF
.3a558c	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a558f	e2 20		sep #$20	            SEP #$20
.3a5591	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5594	89 02		bit #$02	check_over      BIT #FP_ADD_STAT_OVF        ; Is ther an overflow condition?
.3a5596	f0 1f		beq $3a55b7	                BEQ check_under             ; No: check for underflow
.3a5598	08		php		            PHP
.3a5599	c2 20		rep #$20	            REP #$20
.3a559b	48		pha		            PHA
.3a559c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a559f	5b		tcd		            TCD
.3a55a0	68		pla		            PLA
.3a55a1	28		plp		            PLP
.3a55a2	e2 20		sep #$20	            SEP #$20
.3a55a4	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a55a6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a55aa	c2 20		rep #$20	            REP #$20
.3a55ac	29 ff 00	and #$00ff	            AND #$00FF
.3a55af	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a55b2	e2 20		sep #$20	            SEP #$20
.3a55b4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a55b7	89 04		bit #$04	check_under     BIT #FP_ADD_STAT_UDF        ; Is there an underflow condition?
.3a55b9	f0 1f		beq $3a55da	                BEQ done                    ; No: we should just return... this probably shouldn't happen
.3a55bb	08		php		            PHP
.3a55bc	c2 20		rep #$20	            REP #$20
.3a55be	48		pha		            PHA
.3a55bf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a55c2	5b		tcd		            TCD
.3a55c3	68		pla		            PLA
.3a55c4	28		plp		            PLP
.3a55c5	e2 20		sep #$20	            SEP #$20
.3a55c7	a9 0e		lda #$0e	            LDA #ERR_UNDERFLOW
.3a55c9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a55cd	c2 20		rep #$20	            REP #$20
.3a55cf	29 ff 00	and #$00ff	            AND #$00FF
.3a55d2	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a55d5	e2 20		sep #$20	            SEP #$20
.3a55d7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a55da					done
.3a55da	60		rts		            RTS
.3a55db					FP_MUL10
.3a55db	08		php		                PHP
.3a55dc	e2 20		sep #$20	            SEP #$20
.3a55de	a9 00		lda #$00	                LDA #FP_OUT_MULT                ; Set for multiplication
.3a55e0	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a55e4	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1            ; Input 1 is fixed point
.3a55e6	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a55ea	c2 20		rep #$20	            REP #$20
.3a55ec	a9 00 a0	lda #$a000	                LDA #$A000                      ; 10 is one factor
.3a55ef	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a55f3	a9 00 00	lda #$0000	                LDA #0
.3a55f6	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a55fa	a5 23		lda $0823	                LDA ARGUMENT1                   ; N is the other
.3a55fc	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5600	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5602	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5606	ea		nop		                NOP
.3a5607	ea		nop		                NOP
.3a5608	ea		nop		                NOP
.3a5609	e2 20		sep #$20	            SEP #$20
.3a560b	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT        ; Check the status
.3a560f	89 07		bit #$07	                BIT #FP_MULT_STAT_NAN | FP_MULT_STAT_OVF | FP_MULT_STAT_UDF
.3a5611	f0 01		beq $3a5614	                BEQ ret_result
.3a5613	00		brk #		                BRK                             ; There was an error...
.3a5614					ret_result
.3a5614	c2 20		rep #$20	            REP #$20
.3a5616	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL     ; Save result back
.3a561a	85 23		sta $0823	                STA ARGUMENT1
.3a561c	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5620	85 25		sta $0825	                STA ARGUMENT1+2
.3a5622	28		plp		                PLP
.3a5623	60		rts		            RTS
.3a5624					FP_DIV10
.3a5624	08		php		                PHP
.3a5625	e2 20		sep #$20	            SEP #$20
.3a5627	a9 01		lda #$01	                LDA #FP_OUT_DIV             ; Set for multiplication
.3a5629	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a562d	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1        ; Input 1 is fixed point
.3a562f	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5633	c2 20		rep #$20	            REP #$20
.3a5635	a9 00 a0	lda #$a000	                LDA #$A000                  ; 10 is one factor
.3a5638	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a563c	a9 00 00	lda #$0000	                LDA #0
.3a563f	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5643	a5 23		lda $0823	                LDA ARGUMENT1               ; N is the other
.3a5645	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5649	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a564b	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a564f	ea		nop		                NOP
.3a5650	ea		nop		                NOP
.3a5651	ea		nop		                NOP
.3a5652	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Save result back
.3a5656	85 23		sta $0823	                STA ARGUMENT1
.3a5658	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a565c	85 25		sta $0825	                STA ARGUMENT1+2
.3a565e	28		plp		                PLP
.3a565f	60		rts		            RTS

;******  Return to file: src\floats.s

.3a5660					FARG1EQ0
.3a5660	08		php		                PHP
.3a5661	c2 20		rep #$20	            REP #$20
.3a5663	a5 23		lda $0823	                LDA ARGUMENT1
.3a5665	d0 0a		bne $3a5671	                BNE return_false
.3a5667	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5669	29 ff 7f	and #$7fff	                AND #$7FFF              ; Mask off the sign bit
.3a566c	d0 03		bne $3a5671	                BNE return_false
.3a566e	28		plp		return_true     PLP
.3a566f	38		sec		                SEC
.3a5670	60		rts		            RTS
.3a5671	28		plp		return_false    PLP
.3a5672	18		clc		                CLC
.3a5673	60		rts		            RTS
.3a5674					SHIFTDEC
.3a5674	08		php		                PHP
.3a5675	e2 20		sep #$20	            SEP #$20
.3a5677	38		sec		                SEC                     ; Convert '0'..'9' to it's number
.3a5678	e9 30		sbc #$30	                SBC #'0'
.3a567a	20 65 04	jsr $3a0465	            JSR MULINT10
.3a567d	c2 20		rep #$20	            REP #$20
.3a567f	29 ff 00	and #$00ff	                AND #$00FF              ; Add the number to ARGUMENT1
.3a5682	18		clc		                CLC
.3a5683	65 23		adc $0823	                ADC ARGUMENT1
.3a5685	85 23		sta $0823	                STA ARGUMENT1
.3a5687	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5689	69 00 00	adc #$0000	                ADC #0
.3a568c	85 25		sta $0825	                STA ARGUMENT1+2
.3a568e	28		plp		                PLP
.3a568f	60		rts		            RTS
.3a5690					SHIFTHEX
.3a5690	08		php		                PHP
.3a5691	e2 20		sep #$20	            SEP #$20
.3a5693	c9 30		cmp #$30	                CMP #'0'                ; Process 0-9
.3a5695	90 04		bcc $3a569b	                BLT not_09
.3a5697	c9 3a		cmp #$3a	                CMP #'9'+1
.3a5699	90 1c		bcc $3a56b7	                BLT is_09
.3a569b	c9 61		cmp #$61	not_09          CMP #'a'                ; Process lowercase A-F
.3a569d	90 04		bcc $3a56a3	                BLT not_lc
.3a569f	c9 67		cmp #$67	                CMP #'f'+1
.3a56a1	90 0a		bcc $3a56ad	                BLT is_lc
.3a56a3	c9 41		cmp #$41	not_lc          CMP #'A'                ; Process uppercase A-F
.3a56a5	90 04		bcc $3a56ab	                BLT not_uc
.3a56a7	c9 47		cmp #$47	                CMP #'F'+1
.3a56a9	90 07		bcc $3a56b2	                BLT is_uc
.3a56ab	80 31		bra $3a56de	not_uc          BRA done                ; Just return if we couldn't convert... this shouldn't happen
.3a56ad	38		sec		is_lc           SEC                     ; Convert 'a'-'f' to the actual number
.3a56ae	e9 57		sbc #$57	                SBC #'a'-10
.3a56b0	80 08		bra $3a56ba	                BRA shift
.3a56b2	38		sec		is_uc           SEC                     ; Convert 'A'-'F' to the actual number
.3a56b3	e9 37		sbc #$37	                SBC #'A'-10
.3a56b5	80 03		bra $3a56ba	                BRA shift
.3a56b7	38		sec		is_09           SEC                     ; Convert '0'-'9' to the actual number
.3a56b8	e9 30		sbc #$30	                SBC #'0'
.3a56ba					shift
.3a56ba	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a56bc	26 24		rol $0824	                ROL ARGUMENT1+1
.3a56be	26 25		rol $0825	                ROL ARGUMENT1+2
.3a56c0	26 26		rol $0826	                ROL ARGUMENT1+3
.3a56c2	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a56c4	26 24		rol $0824	                ROL ARGUMENT1+1
.3a56c6	26 25		rol $0825	                ROL ARGUMENT1+2
.3a56c8	26 26		rol $0826	                ROL ARGUMENT1+3
.3a56ca	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a56cc	26 24		rol $0824	                ROL ARGUMENT1+1
.3a56ce	26 25		rol $0825	                ROL ARGUMENT1+2
.3a56d0	26 26		rol $0826	                ROL ARGUMENT1+3
.3a56d2	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a56d4	26 24		rol $0824	                ROL ARGUMENT1+1
.3a56d6	26 25		rol $0825	                ROL ARGUMENT1+2
.3a56d8	26 26		rol $0826	                ROL ARGUMENT1+3
.3a56da	05 23		ora $0823	                ORA ARGUMENT1           ; Add the number to it
.3a56dc	85 23		sta $0823	                STA ARGUMENT1
.3a56de	28		plp		done            PLP
.3a56df	60		rts		            RTS
.3a56e0					SHIFTBIN
.3a56e0	08		php		                PHP
.3a56e1	e2 20		sep #$20	            SEP #$20
.3a56e3	c9 30		cmp #$30	                CMP #'0'                ; If the character is '0'...
.3a56e5	f0 06		beq $3a56ed	                BEQ shift_0             ; Shift a 0 onto ARGUMENT1
.3a56e7	c9 31		cmp #$31	                CMP #'1'                ; If the character is '1'...
.3a56e9	f0 0a		beq $3a56f5	                BEQ shift_1             ; Shift a 1 onto ARGUMENT1
.3a56eb	80 0f		bra $3a56fc	                BRA done
.3a56ed					shift_0
.3a56ed	c2 20		rep #$20	            REP #$20
.3a56ef	06 23		asl $0823	                ASL ARGUMENT1
.3a56f1	26 25		rol $0825	                ROL ARGUMENT1+2
.3a56f3	80 07		bra $3a56fc	                BRA done
.3a56f5					shift_1
.3a56f5	c2 20		rep #$20	            REP #$20
.3a56f7	38		sec		                SEC
.3a56f8	26 23		rol $0823	                ROL ARGUMENT1
.3a56fa	26 25		rol $0825	                ROL ARGUMENT1+2
.3a56fc	28		plp		done            PLP
.3a56fd	60		rts		            RTS
.3a56fe					FP_POW10
.3a56fe	08		php		                PHP
.3a56ff	e2 30		sep #$30	            SEP #$30
.3a5701	a5 61		lda $0861	                LDA MARG4
.3a5703	f0 0d		beq $3a5712	                BEQ return_1
.3a5705	aa		tax		                TAX
.3a5706	a5 69		lda $0869	                LDA MARG6
.3a5708	d0 15		bne $3a571f	                BNE do_div
.3a570a	a9 00		lda #$00	                LDA #FP_OUT_MULT                    ; We'll multiply
.3a570c	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5710	80 15		bra $3a5727	                BRA start_loop
.3a5712					return_1
.3a5712	e2 20		sep #$20	            SEP #$20
.3a5714	a9 03		lda #$03	                LDA #FP_OUT_ONE                     ; We want to return a 1.0
.3a5716	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a571a	ea		nop		                NOP
.3a571b	ea		nop		                NOP
.3a571c	ea		nop		                NOP
.3a571d	80 62		bra $3a5781	                BRA ret_result                      ; And return the result
.3a571f					do_div
.3a571f	e2 20		sep #$20	            SEP #$20
.3a5721	a9 01		lda #$01	                LDA #FP_OUT_DIV                     ; We'll divide
.3a5723	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5727					start_loop
.3a5727	e2 20		sep #$20	            SEP #$20
.3a5729	a9 43		lda #$43	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a572b	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.3a572f	c2 20		rep #$20	            REP #$20
.3a5731	a9 00 10	lda #$1000	                LDA #$1000                          ; Input 0 = 1.0
.3a5734	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5738	a9 00 00	lda #$0000	                LDA #0
.3a573b	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a573f					loop
.3a573f	c2 20		rep #$20	            REP #$20
.3a5741	a9 00 a0	lda #$a000	                LDA #$A000                          ; Input 1 = 10.0
.3a5744	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5748	a9 00 00	lda #$0000	                LDA #0
.3a574b	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a574f	ea		nop		                NOP                                 ; Wait for the operation to complete
.3a5750	ea		nop		                NOP
.3a5751	ea		nop		                NOP
.3a5752	ca		dex		                DEX                                 ; Count down
.3a5753	f0 2c		beq $3a5781	                BEQ ret_result                      ; If 0, then we're done
.3a5755	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; SCRATCH <-- Result
.3a5759	8f 0c 08 00	sta $00080c	                STA @l SCRATCH
.3a575d	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5761	8f 0e 08 00	sta $00080e	                STA @l SCRATCH+2
.3a5765	e2 20		sep #$20	            SEP #$20
.3a5767	a9 42		lda #$42	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_1
.3a5769	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.3a576d	c2 20		rep #$20	            REP #$20
.3a576f	af 0c 08 00	lda $00080c	                LDA @l SCRATCH                      ; Input 0 <-- SCRATCH
.3a5773	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5777	af 0e 08 00	lda $00080e	                LDA @l SCRATCH+2
.3a577b	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a577f	80 be		bra $3a573f	                BRA loop
.3a5781					ret_result
.3a5781	c2 20		rep #$20	            REP #$20
.3a5783	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; Return the result
.3a5787	85 23		sta $0823	                STA ARGUMENT1
.3a5789	af 0a e2 af	lda $afe20a	                LDA FP_MATH_OUTPUT_FP_HL
.3a578d	85 25		sta $0825	                STA ARGUMENT1+2
.3a578f	e2 20		sep #$20	            SEP #$20
.3a5791	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a5793	85 27		sta $0827	                STA ARGTYPE1
.3a5795	28		plp		done            PLP
.3a5796	60		rts		            RTS
.3a5797					PACKFLOAT
.3a5797	08		php		                PHP
.3a5798	c2 20		rep #$20	            REP #$20
.3a579a	a5 5d		lda $085d	            LDA MARG3
.3a579c	85 23		sta $0823	            STA ARGUMENT1
.3a579e	a5 5f		lda $085f	            LDA MARG3+2
.3a57a0	85 25		sta $0825	            STA ARGUMENT1+2
.3a57a2	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a57a5	c2 20		rep #$20	            REP #$20
.3a57a7	a5 23		lda $0823	            LDA ARGUMENT1
.3a57a9	85 29		sta $0829	            STA ARGUMENT2
.3a57ab	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a57ad	85 2b		sta $082b	            STA ARGUMENT2+2
.3a57af	c2 20		rep #$20	            REP #$20
.3a57b1	a5 59		lda $0859	            LDA MARG2
.3a57b3	85 23		sta $0823	            STA ARGUMENT1
.3a57b5	a5 5b		lda $085b	            LDA MARG2+2
.3a57b7	85 25		sta $0825	            STA ARGUMENT1+2
.3a57b9	20 d8 54	jsr $3a54d8	            JSR OP_FP_DIV
.3a57bc	c2 20		rep #$20	            REP #$20
.3a57be	a5 55		lda $0855	            LDA MARG1
.3a57c0	85 29		sta $0829	            STA ARGUMENT2
.3a57c2	a5 57		lda $0857	            LDA MARG1+2
.3a57c4	85 2b		sta $082b	            STA ARGUMENT2+2
.3a57c6	20 8d 54	jsr $3a548d	            JSR OP_FP_ADD
.3a57c9	c2 20		rep #$20	            REP #$20
.3a57cb	a5 23		lda $0823	            LDA ARGUMENT1
.3a57cd	85 29		sta $0829	            STA ARGUMENT2
.3a57cf	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a57d1	85 2b		sta $082b	            STA ARGUMENT2+2
.3a57d3	20 fe 56	jsr $3a56fe	            JSR FP_POW10
.3a57d6	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a57d9	c2 20		rep #$20	            REP #$20
.3a57db	a5 65		lda $0865	                LDA MARG5                       ; Check to see if the float should be negative
.3a57dd	f0 07		beq $3a57e6	                BEQ set_float_type              ; If not, just set the type
.3a57df	a5 25		lda $0825	                LDA ARGUMENT1+2                 ; If so, set the sign bit
.3a57e1	09 00 80	ora #$8000	                ORA #$8000
.3a57e4	85 25		sta $0825	                STA ARGUMENT1+2
.3a57e6					set_float_type
.3a57e6	e2 20		sep #$20	            SEP #$20
.3a57e8	a9 01		lda #$01	                LDA #TYPE_FLOAT                 ; Set the type to float... ready for returning!
.3a57ea	85 27		sta $0827	                STA ARGTYPE1
.3a57ec	28		plp		                PLP
.3a57ed	60		rts		            RTS
.3a57ee					PARSENUM
.3a57ee	5a		phy		                PHY
.3a57ef	08		php		                PHP
.3a57f0	c2 30		rep #$30	            REP #$30
.3a57f2	64 23		stz $0823	                STZ ARGUMENT1       ; This will be the accumulator for building the number
.3a57f4	64 25		stz $0825	                STZ ARGUMENT1+2
.3a57f6	64 55		stz $0855	                STZ MARG1           ; This will be the integer portion of the mantissa for floats
.3a57f8	64 57		stz $0857	                STZ MARG1+2
.3a57fa	64 65		stz $0865	                STZ MARG5           ; MARG5 will be the negative flag for the number
.3a57fc	64 59		stz $0859	                STZ MARG2           ; This will be the denominator of the fractional part of the mantissa
.3a57fe	64 5b		stz $085b	                STZ MARG2+2
.3a5800	a9 01 00	lda #$0001	                LDA #1
.3a5803	85 5d		sta $085d	                STA MARG3           ; This will be the divisor of the fractional part of the mantissa
.3a5805	64 5f		stz $085f	                STZ MARG3+2
.3a5807	64 61		stz $0861	                STZ MARG4           ; This will be the exponent of a float
.3a5809	64 63		stz $0863	                STZ MARG4+2
.3a580b	64 69		stz $0869	                STZ MARG6           ; MARG6 will be the negative flag for the exponent
.3a580d					s0
.3a580d	e2 20		sep #$20	            SEP #$20
.3a580f	a0 00 00	ldy #$0000	                LDY #0
.3a5812	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the first byte
.3a5814	c9 2b		cmp #$2b	                CMP #'+'
.3a5816	f0 33		beq $3a584b	                BEQ s1_drop         ; '+' --> S1, drop
.3a5818	c9 2d		cmp #$2d	                CMP #'-'
.3a581a	f0 2b		beq $3a5847	                BEQ s1_negative     ; Flag that the number is negative
.3a581c	c9 26		cmp #$26	                CMP #'&'
.3a581e	f0 3a		beq $3a585a	                BEQ s2_drop         ; '&' --> S2, drop
.3a5820	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a5823	90 03		bcc $3a5828	                BCC syntax_err
.3a5825	82 ac 00	brl $3a58d4	                BRL s7_shift        ; '0'-'9' --> S7, emit
.3a5828					syntax_err
.3a5828	08		php		            PHP
.3a5829	c2 20		rep #$20	            REP #$20
.3a582b	48		pha		            PHA
.3a582c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a582f	5b		tcd		            TCD
.3a5830	68		pla		            PLA
.3a5831	28		plp		            PLP
.3a5832	e2 20		sep #$20	            SEP #$20
.3a5834	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a5836	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a583a	c2 20		rep #$20	            REP #$20
.3a583c	29 ff 00	and #$00ff	            AND #$00FF
.3a583f	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a5842	e2 20		sep #$20	            SEP #$20
.3a5844	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5847	a9 01		lda #$01	s1_negative     LDA #1              ; Set the negative flag for the mantissa
.3a5849	85 65		sta $0865	                STA MARG5
.3a584b	c8		iny		s1_drop         INY                 ; Drop the character...
.3a584c	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next
.3a584e	c9 26		cmp #$26	                CMP #'&'
.3a5850	f0 08		beq $3a585a	                BEQ s2_drop         ; '&' --> S2, drop the '&'
.3a5852	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a5855	90 d1		bcc $3a5828	                BCC syntax_err
.3a5857	82 7a 00	brl $3a58d4	                BRL s7_shift        ; '0'-'9' --> S7, shift
.3a585a	c8		iny		s2_drop         INY                 ; Drop the character
.3a585b	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.3a585d	c9 68		cmp #$68	                CMP #'h'
.3a585f	f0 0e		beq $3a586f	                BEQ s3_drop         ; 'h', 'H' --> S3, drop
.3a5861	c9 48		cmp #$48	                CMP #'H'
.3a5863	f0 0a		beq $3a586f	                BEQ s3_drop
.3a5865	c9 62		cmp #$62	                CMP #'b'
.3a5867	f0 4c		beq $3a58b5	                BEQ s5_drop         ; 'b', 'B' --> S5, drop
.3a5869	c9 42		cmp #$42	                CMP #'B'
.3a586b	f0 48		beq $3a58b5	                BEQ s5_drop
.3a586d	80 b9		bra $3a5828	                BRA syntax_err
.3a586f	c8		iny		s3_drop         INY                 ; Drop the character
.3a5870	b7 00		lda [$0800],y	s3              LDA [BIP],Y         ; Get the next character
.3a5872	20 f7 03	jsr $3a03f7	            JSR ISHEX
.3a5875	b0 02		bcs $3a5879	                BCS s4_shift
.3a5877	80 af		bra $3a5828	                BRA syntax_err
.3a5879					s4_shift
.3a5879	20 90 56	jsr $3a5690	            JSR SHIFTHEX
.3a587c	c8		iny		                INY
.3a587d	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.3a587f	20 f7 03	jsr $3a03f7	            JSR ISHEX
.3a5882	b0 f5		bcs $3a5879	                BCS s4_shift        ; '0'-'9','A'-'F' --> S4, shift
.3a5884					ret_integer
.3a5884	e2 20		sep #$20	            SEP #$20
.3a5886	a5 65		lda $0865	                LDA MARG5           ; check if the number should be negative
.3a5888	f0 11		beq $3a589b	                BEQ set_int_type    ; If not, just set the type and return
.3a588a	c2 20		rep #$20	            REP #$20
.3a588c	38		sec		                SEC                 ; If so, negate it
.3a588d	a9 00 00	lda #$0000	                LDA #0
.3a5890	e5 23		sbc $0823	                SBC ARGUMENT1
.3a5892	85 23		sta $0823	                STA ARGUMENT1
.3a5894	a9 00 00	lda #$0000	                LDA #0
.3a5897	e5 25		sbc $0825	                SBC ARGUMENT1+2
.3a5899	85 25		sta $0825	                STA ARGUMENT1+2
.3a589b					set_int_type
.3a589b	e2 20		sep #$20	            SEP #$20
.3a589d	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; Return an integer
.3a589f	85 27		sta $0827	                STA ARGTYPE1
.3a58a1					stop
.3a58a1	c2 20		rep #$20	            REP #$20
.3a58a3	18		clc		                CLC
.3a58a4	98		tya		                TYA
.3a58a5	65 00		adc $0800	                ADC BIP
.3a58a7	85 00		sta $0800	                STA BIP
.3a58a9	a5 02		lda $0802	                LDA BIP+2
.3a58ab	69 00 00	adc #$0000	                ADC #0
.3a58ae	85 02		sta $0802	                STA BIP+2
.3a58b0	e2 20		sep #$20	            SEP #$20
.3a58b2	28		plp		                PLP
.3a58b3	7a		ply		                PLY
.3a58b4	60		rts		            RTS
.3a58b5	c8		iny		s5_drop         INY                     ; Drop the character
.3a58b6	b7 00		lda [$0800],y	s5              LDA [BIP],Y             ; Get the next character
.3a58b8	c9 30		cmp #$30	                CMP #'0'
.3a58ba	f0 07		beq $3a58c3	                BEQ s6_shift            ; '0', '1' --> S6, shift
.3a58bc	c9 31		cmp #$31	                CMP #'1'
.3a58be	f0 03		beq $3a58c3	                BEQ s6_shift
.3a58c0	82 65 ff	brl $3a5828	                BRL syntax_err
.3a58c3					s6_shift
.3a58c3	20 e0 56	jsr $3a56e0	            JSR SHIFTBIN
.3a58c6	c8		iny		                INY
.3a58c7	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a58c9	c9 30		cmp #$30	                CMP #'0'                ; '0', '1' --> S6, shift
.3a58cb	f0 f6		beq $3a58c3	                BEQ s6_shift
.3a58cd	c9 31		cmp #$31	                CMP #'1'
.3a58cf	f0 f2		beq $3a58c3	                BEQ s6_shift
.3a58d1	82 b0 ff	brl $3a5884	                BRL ret_integer         ; Return integer
.3a58d4					s7_shift
.3a58d4	20 74 56	jsr $3a5674	            JSR SHIFTDEC
.3a58d7	c8		iny		                INY
.3a58d8	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a58da	c9 2e		cmp #$2e	                CMP #'.'                ; '.' --> S8, drop and preserve mantissa
.3a58dc	f0 08		beq $3a58e6	                BEQ s8_mantissa
.3a58de	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a58e1	b0 f1		bcs $3a58d4	                BCS s7_shift
.3a58e3	82 9e ff	brl $3a5884	                BRL ret_integer         ; Return integer
.3a58e6					s8_mantissa
.3a58e6	c2 20		rep #$20	            REP #$20
.3a58e8	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a58eb	c2 20		rep #$20	            REP #$20
.3a58ed	a5 23		lda $0823	            LDA ARGUMENT1
.3a58ef	85 55		sta $0855	            STA MARG1
.3a58f1	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a58f3	85 57		sta $0857	            STA MARG1+2
.3a58f5	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the decimal
.3a58f7	64 25		stz $0825	                STZ ARGUMENT1+2
.3a58f9	e2 20		sep #$20	            SEP #$20
.3a58fb	80 36		bra $3a5933	                BRA s8_drop
.3a58fd					s8_shift
.3a58fd	20 74 56	jsr $3a5674	            JSR SHIFTDEC
.3a5900	c2 20		rep #$20	            REP #$20
.3a5902	a5 5f		lda $085f	                LDA MARG3+2             ; high 16 bits
.3a5904	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a5908	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.3a590b	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.3a590f	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to high 16 bits of MARG3
.3a5913	85 5f		sta $085f	                STA MARG3+2
.3a5915	a5 5d		lda $085d	                LDA MARG3
.3a5917	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a591b	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.3a591e	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.3a5922	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to MARG3
.3a5926	85 5d		sta $085d	                STA MARG3
.3a5928	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.3a592c	18		clc		                CLC
.3a592d	65 5f		adc $085f	                ADC MARG3+2
.3a592f	85 5f		sta $085f	                STA MARG3+2
.3a5931	e2 20		sep #$20	            SEP #$20
.3a5933					s8_drop
.3a5933	c8		iny		                INY
.3a5934	b7 00		lda [$0800],y	                LDA [BIP],Y
.3a5936	c9 65		cmp #$65	                CMP #'e'                ; 'E' --> S9, drop
.3a5938	f0 24		beq $3a595e	                BEQ s9_drop
.3a593a	c9 45		cmp #$45	                CMP #'E'
.3a593c	f0 20		beq $3a595e	                BEQ s9_drop
.3a593e	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a5941	b0 ba		bcs $3a58fd	                BCS s8_shift
.3a5943	c2 20		rep #$20	            REP #$20
.3a5945	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a5948	c2 20		rep #$20	            REP #$20
.3a594a	a5 23		lda $0823	            LDA ARGUMENT1
.3a594c	85 59		sta $0859	            STA MARG2
.3a594e	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5950	85 5b		sta $085b	            STA MARG2+2
.3a5952	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.3a5954	64 25		stz $0825	                STZ ARGUMENT1+2
.3a5956	20 97 57	jsr $3a5797	            JSR PACKFLOAT
.3a5959	e2 20		sep #$20	            SEP #$20
.3a595b	82 43 ff	brl $3a58a1	                BRL stop
.3a595e					s9_drop
.3a595e	c2 20		rep #$20	            REP #$20
.3a5960	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a5963	c2 20		rep #$20	            REP #$20
.3a5965	a5 23		lda $0823	            LDA ARGUMENT1
.3a5967	85 59		sta $0859	            STA MARG2
.3a5969	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a596b	85 5b		sta $085b	            STA MARG2+2
.3a596d	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.3a596f	64 25		stz $0825	                STZ ARGUMENT1+2
.3a5971	e2 20		sep #$20	            SEP #$20
.3a5973	c8		iny		                INY
.3a5974	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5976	c9 2b		cmp #$2b	                CMP #'+'
.3a5978	f0 10		beq $3a598a	                BEQ s10_drop            ; '+' --> S10, drop
.3a597a	c9 2d		cmp #$2d	                CMP #'-'
.3a597c	f0 08		beq $3a5986	                BEQ s10_setneg          ; '-' --> S10, set exponent is negative
.3a597e	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a5981	b0 12		bcs $3a5995	                BCS S11_shift           ; '0'-'9' --> S11, shift
.3a5983	82 a2 fe	brl $3a5828	                BRL syntax_err
.3a5986					s10_setneg
.3a5986	a9 01		lda #$01	                LDA #1                  ; Set that the exponent should be negative
.3a5988	85 69		sta $0869	                STA MARG6
.3a598a					s10_drop
.3a598a	c8		iny		                INY
.3a598b	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a598d	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a5990	b0 03		bcs $3a5995	                BCS s11_shift
.3a5992	82 93 fe	brl $3a5828	                BRL syntax_err
.3a5995					s11_shift
.3a5995	20 74 56	jsr $3a5674	            JSR SHIFTDEC
.3a5998	c8		iny		                INY
.3a5999	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a599b	20 e6 03	jsr $3a03e6	            JSR ISNUMERAL
.3a599e	b0 f5		bcs $3a5995	                BCS s11_shift
.3a59a0	c2 20		rep #$20	            REP #$20
.3a59a2	a5 23		lda $0823	            LDA ARGUMENT1
.3a59a4	85 61		sta $0861	            STA MARG4
.3a59a6	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a59a8	85 63		sta $0863	            STA MARG4+2
.3a59aa	20 97 57	jsr $3a5797	            JSR PACKFLOAT
.3a59ad	82 f1 fe	brl $3a58a1	                BRL stop
.3a59b0					ITOF
.3a59b0	08		php		                PHP
.3a59b1	20 3e 54	jsr $3a543e	            JSR FIXINT_TO_FP
.3a59b4	28		plp		done            PLP
.3a59b5	60		rts		            RTS
.3a59b6					FTOI
.3a59b6	08		php		                PHP
.3a59b7					LOCALS
>0001					l_sign          .byte ?
>0002					l_exponent      .byte ?
>0003					l_mantissa      .dword ?
.3a59b7	c2 20		rep #$20	            REP #$20
.3a59b9	a9 ad 5c	lda #$5cad	                LDA #<>FP_1_0
.3a59bc	85 29		sta $0829	                STA ARGUMENT2
.3a59be	a9 3a 00	lda #$003a	                LDA #(FP_1_0 >> 16)
.3a59c1	85 2b		sta $082b	                STA ARGUMENT2+2
.3a59c3	e2 20		sep #$20	            SEP #$20
.3a59c5	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a59c7	85 2d		sta $082d	                STA ARGTYPE2
.3a59c9	c2 20		rep #$20	            REP #$20
.3a59cb	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a59ce	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a59d1	d0 0c		bne $3a59df	                BNE alloc_locals        ; No: get ready to do the full conversion
.3a59d3	a9 00 00	lda #$0000	                LDA #0
.3a59d6	8d 23 08	sta $0823	                STA @w ARGUMENT1        ; Yes: Return 0
.3a59d9	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a59dc	82 a1 00	brl $3a5a80	                BRL done
.3a59df	f4 00 00	pea #$0000	alloc_locals    PEA #0                  ; Reserve space for the locals
.3a59e2	f4 00 00	pea #$0000	                PEA #0
.3a59e5	f4 00 00	pea #$0000	                PEA #0
.3a59e8	e2 20		sep #$20	            SEP #$20
.3a59ea	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3      ; Preserve the sign bit
.3a59ed	29 80		and #$80	                AND #$80
.3a59ef	83 01		sta $01,s	                STA l_sign
.3a59f1	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2      ; Preserve the exponent
.3a59f4	2a		rol a		                ROL A
.3a59f5	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3
.3a59f8	2a		rol a		                ROL A
.3a59f9	83 02		sta $02,s	                STA l_exponent
.3a59fb	a9 00		lda #$00	save_mantissa   LDA #0                  ; Save the mantissa (with the implied 1)
.3a59fd	83 06		sta $06,s	                STA l_mantissa+3
.3a59ff	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2
.3a5a02	09 80		ora #$80	                ORA #$80
.3a5a04	83 05		sta $05,s	                STA l_mantissa+2
.3a5a06	ad 24 08	lda $0824	                LDA @w ARGUMENT1+1
.3a5a09	83 04		sta $04,s	                STA l_mantissa+1
.3a5a0b	ad 23 08	lda $0823	                LDA @w ARGUMENT1
.3a5a0e	83 03		sta $03,s	                STA l_mantissa
.3a5a10	a3 02		lda $02,s	                LDA l_exponent
.3a5a12	c9 96		cmp #$96	loop            CMP #150
.3a5a14	f0 3a		beq $3a5a50	                BEQ adj_sign
.3a5a16	90 1f		bcc $3a5a37	                BLT shift_right
.3a5a18	08		php		            PHP
.3a5a19	c2 20		rep #$20	            REP #$20
.3a5a1b	48		pha		            PHA
.3a5a1c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5a1f	5b		tcd		            TCD
.3a5a20	68		pla		            PLA
.3a5a21	28		plp		            PLP
.3a5a22	e2 20		sep #$20	            SEP #$20
.3a5a24	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a5a26	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5a2a	c2 20		rep #$20	            REP #$20
.3a5a2c	29 ff 00	and #$00ff	            AND #$00FF
.3a5a2f	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a5a32	e2 20		sep #$20	            SEP #$20
.3a5a34	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5a37					shift_right
.3a5a37	c2 20		rep #$20	            REP #$20
.3a5a39	a3 05		lda $05,s	                LDA l_mantissa+2
.3a5a3b	4a		lsr a		                LSR A
.3a5a3c	83 05		sta $05,s	                STA l_mantissa+2
.3a5a3e	a3 03		lda $03,s	                LDA l_mantissa
.3a5a40	6a		ror a		                ROR A
.3a5a41	83 03		sta $03,s	                STA l_mantissa
.3a5a43	e2 20		sep #$20	            SEP #$20
.3a5a45	a3 02		lda $02,s	                LDA l_exponent
.3a5a47	1a		inc a		                INC A
.3a5a48	83 02		sta $02,s	                STA l_exponent
.3a5a4a	c9 96		cmp #$96	                CMP #150
.3a5a4c	f0 02		beq $3a5a50	                BEQ adj_sign
.3a5a4e	80 e7		bra $3a5a37	                BRA shift_right
.3a5a50	a3 01		lda $01,s	adj_sign        LDA l_sign
.3a5a52	f0 1b		beq $3a5a6f	                BEQ ret_positive
.3a5a54	c2 20		rep #$20	            REP #$20
.3a5a56	a3 03		lda $03,s	                LDA l_mantissa
.3a5a58	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a5a5b	18		clc		                CLC
.3a5a5c	69 01 00	adc #$0001	                ADC #1
.3a5a5f	8d 23 08	sta $0823	                STA @w ARGUMENT1
.3a5a62	a3 05		lda $05,s	                LDA l_mantissa+2
.3a5a64	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a5a67	69 00 00	adc #$0000	                ADC #0
.3a5a6a	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a5a6d	80 0c		bra $3a5a7b	                BRA clean
.3a5a6f					ret_positive
.3a5a6f	c2 20		rep #$20	            REP #$20
.3a5a71	a3 03		lda $03,s	                LDA l_mantissa
.3a5a73	8d 23 08	sta $0823	                STA @w ARGUMENT1
.3a5a76	a3 05		lda $05,s	                LDA l_mantissa+2
.3a5a78	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a5a7b					clean
.3a5a7b	c2 20		rep #$20	            REP #$20
.3a5a7d	68		pla		                PLA                     ; Clean up the locals
.3a5a7e	68		pla		                PLA
.3a5a7f	68		pla		                PLA
.3a5a80					done
.3a5a80	e2 20		sep #$20	            SEP #$20
.3a5a82	a9 00		lda #$00	                LDA #TYPE_INTEGER       ; Set the return type to integer
.3a5a84	8d 27 08	sta $0827	                STA @w ARGTYPE1
.3a5a87	28		plp		                PLP
.3a5a88	60		rts		            RTS
.3a5a89					FP_COMPARE
.3a5a89	da		phx		                PHX
.3a5a8a	08		php		                PHP
.3a5a8b	c2 20		rep #$20	            REP #$20
.3a5a8d	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save ARGUMENT1 so we don't destroy it
.3a5a8f	48		pha		                PHA
.3a5a90	a5 23		lda $0823	                LDA ARGUMENT1
.3a5a92	48		pha		                PHA
.3a5a93	20 82 54	jsr $3a5482	            JSR OP_FP_SUB
.3a5a96	20 60 56	jsr $3a5660	            JSR FARG1EQ0
.3a5a99	b0 11		bcs $3a5aac	                BCS are_equal
.3a5a9b	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Check the high word
.3a5a9d	89 00 80	bit #$8000	                BIT #$8000
.3a5aa0	d0 05		bne $3a5aa7	                BNE is_lt                   ; ARGUMENT1 < ARGUMENT2
.3a5aa2	a9 01 00	lda #$0001	is_gt           LDA #1                      ; ARGUMENT1 > ARGUMENT2: return 1
.3a5aa5	80 08		bra $3a5aaf	                BRA ret_result
.3a5aa7	a9 ff ff	lda #$ffff	is_lt           LDA #$FFFF                  ; ARGUMENT1 > ARGUMENT2: return -1
.3a5aaa	80 03		bra $3a5aaf	                BRA ret_result
.3a5aac	a9 00 00	lda #$0000	are_equal       LDA #0                      ; Equal: return 0
.3a5aaf	fa		plx		ret_result      PLX                         ; Restore ARGUMENT1
.3a5ab0	86 23		stx $0823	                STX ARGUMENT1
.3a5ab2	fa		plx		                PLX
.3a5ab3	86 25		stx $0825	                STX ARGUMENT1+2
.3a5ab5	28		plp		                PLP
.3a5ab6	fa		plx		                PLX
.3a5ab7	60		rts		            RTS
.3a5ab8					OP_FP_LT
.3a5ab8	08		php		                PHP
.3a5ab9	c2 30		rep #$30	            REP #$30
.3a5abb	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5abe	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5ac1	d0 05		bne $3a5ac8	                BNE ret_false
.3a5ac3	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a5ac6	80 03		bra $3a5acb	                BRA done
.3a5ac8					ret_false
.3a5ac8	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a5acb	28		plp		done            PLP
.3a5acc	60		rts		            RTS
.3a5acd					OP_FP_GT
.3a5acd	08		php		                PHP
.3a5ace	c2 30		rep #$30	            REP #$30
.3a5ad0	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5ad3	c9 01 00	cmp #$0001	                CMP #1
.3a5ad6	d0 05		bne $3a5add	                BNE ret_false
.3a5ad8	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a5adb	80 03		bra $3a5ae0	                BRA done
.3a5add					ret_false
.3a5add	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a5ae0	28		plp		done            PLP
.3a5ae1	60		rts		            RTS
.3a5ae2					OP_FP_EQ
.3a5ae2	08		php		                PHP
.3a5ae3	c2 30		rep #$30	            REP #$30
.3a5ae5	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5ae8	c9 00 00	cmp #$0000	                CMP #0
.3a5aeb	d0 05		bne $3a5af2	                BNE ret_false
.3a5aed	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a5af0	80 03		bra $3a5af5	                BRA done
.3a5af2					ret_false
.3a5af2	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a5af5	28		plp		done            PLP
.3a5af6	60		rts		            RTS
.3a5af7					OP_FP_LTE
.3a5af7	08		php		                PHP
.3a5af8	c2 30		rep #$30	            REP #$30
.3a5afa	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5afd	c9 01 00	cmp #$0001	                CMP #1
.3a5b00	f0 05		beq $3a5b07	                BEQ ret_false
.3a5b02	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a5b05	80 03		bra $3a5b0a	                BRA done
.3a5b07					ret_false
.3a5b07	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a5b0a	28		plp		done            PLP
.3a5b0b	60		rts		            RTS
.3a5b0c					OP_FP_GTE
.3a5b0c	08		php		                PHP
.3a5b0d	c2 30		rep #$30	            REP #$30
.3a5b0f	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5b12	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5b15	f0 05		beq $3a5b1c	                BEQ ret_false
.3a5b17	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a5b1a	80 03		bra $3a5b1f	                BRA done
.3a5b1c					ret_false
.3a5b1c	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a5b1f	28		plp		done            PLP
.3a5b20	60		rts		            RTS
.3a5b21					OP_FP_NE
.3a5b21	08		php		                PHP
.3a5b22	c2 30		rep #$30	            REP #$30
.3a5b24	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5b27	c9 00 00	cmp #$0000	                CMP #0
.3a5b2a	f0 05		beq $3a5b31	                BEQ ret_false
.3a5b2c	20 18 05	jsr $3a0518	            JSR SET_TRUE
.3a5b2f	80 03		bra $3a5b34	                BRA done
.3a5b31					ret_false
.3a5b31	20 2a 05	jsr $3a052a	            JSR SET_FALSE
.3a5b34	28		plp		done            PLP
.3a5b35	60		rts		            RTS
.3a5b36					STREMIT
.3a5b36	08		php		                PHP
.3a5b37	e2 20		sep #$20	            SEP #$20
.3a5b39	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Append the character
.3a5b3b	c8		iny		                INY                         ; Advance the character pointer in Y
.3a5b3c	a9 00		lda #$00	                LDA #0                      ; And add the NULL
.3a5b3e	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5b40	28		plp		                PLP
.3a5b41	60		rts		            RTS
.3a5b42					STREMITB
.3a5b42	da		phx		                PHX
.3a5b43	08		php		                PHP
.3a5b44	e2 20		sep #$20	            SEP #$20
.3a5b46	c9 80		cmp #$80	                CMP #$80
.3a5b48	90 0a		bcc $3a5b54	                BLT emit_digits
.3a5b4a	48		pha		                PHA
.3a5b4b	a9 2d		lda #$2d	                LDA #'-'                    ; Print a minus sign
.3a5b4d	20 36 5b	jsr $3a5b36	            JSR STREMIT
.3a5b50	68		pla		                PLA
.3a5b51	49 ff		eor #$ff	                EOR #$FF                    ; And negate it
.3a5b53	1a		inc a		                INC A
.3a5b54					emit_digits
.3a5b54	c2 30		rep #$30	            REP #$30
.3a5b56	29 ff 00	and #$00ff	                AND #$00FF
.3a5b59	c9 64 00	cmp #$0064	                CMP #100
.3a5b5c	90 0e		bcc $3a5b6c	                BLT chk_tens
.3a5b5e	a2 64 00	ldx #$0064	                LDX #100
.3a5b61	20 27 54	jsr $3a5427	            JSR UINT_DIV_A_X
.3a5b64	18		clc		                CLC
.3a5b65	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.3a5b68	20 36 5b	jsr $3a5b36	            JSR STREMIT
.3a5b6b	8a		txa		                TXA                         ; Put the remainder in A
.3a5b6c					chk_tens
.3a5b6c	a2 0a 00	ldx #$000a	                LDX #10
.3a5b6f	20 27 54	jsr $3a5427	            JSR UINT_DIV_A_X
.3a5b72	18		clc		                CLC
.3a5b73	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.3a5b76	20 36 5b	jsr $3a5b36	            JSR STREMIT
.3a5b79	8a		txa		                TXA                         ; Put the remainder in A
.3a5b7a					ones_digit
.3a5b7a	18		clc		                CLC
.3a5b7b	69 30 00	adc #$0030	                ADC #'0'                    ; Convert it to ASCII
.3a5b7e	20 36 5b	jsr $3a5b36	            JSR STREMIT
.3a5b81	28		plp		                PLP
.3a5b82	fa		plx		                PLX
.3a5b83	60		rts		            RTS
.3a5b84					STRFINDEND
.3a5b84	08		php		                PHP
.3a5b85	e2 20		sep #$20	            SEP #$20
.3a5b87	c2 10		rep #$10	            REP #$10
.3a5b89	a0 00 00	ldy #$0000	                LDY #0
.3a5b8c	b7 23		lda [$0823],y	find_end        LDA [ARGUMENT1],Y           ; Scan to the end of the string
.3a5b8e	f0 03		beq $3a5b93	                BEQ done
.3a5b90	c8		iny		                INY
.3a5b91	80 f9		bra $3a5b8c	                BRA find_end
.3a5b93	28		plp		done            PLP
.3a5b94	60		rts		            RTS
=6					FP_D = 6        ; Number of mantissa digits
.3a5b95					FTOS
.3a5b95	08		php		                PHP
.3a5b96	e2 20		sep #$20	            SEP #$20
.3a5b98	c2 10		rep #$10	            REP #$10
.3a5b9a	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be the negative flag
.3a5b9d	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be K
.3a5ba0	f4 00 00	pea #$0000	                PEA #0                      ; This spot will be for the exponents
>0001					L_NEGATIVE      .word ?
>0003					L_K             .word ?
>0005					L_X1            .byte ?                     ; The binary exponent
>0006					L_EXP           .byte ?                     ; The decimal exponent
.3a5ba3	20 60 56	jsr $3a5660	            JSR FARG1EQ0
.3a5ba6	90 19		bcc $3a5bc1	                BCC chk_negative
.3a5ba8	20 e7 13	jsr $3a13e7	            JSR TEMPSTRING
.3a5bab	e2 20		sep #$20	            SEP #$20
.3a5bad	a0 00 00	ldy #$0000	                LDY #0
.3a5bb0	a9 20		lda #$20	                LDA #' '
.3a5bb2	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5bb4	c8		iny		                INY
.3a5bb5	a9 30		lda #$30	                LDA #'0'                    ; Return a "0"
.3a5bb7	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5bb9	c8		iny		                INY
.3a5bba	a9 00		lda #$00	                LDA #0
.3a5bbc	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5bbe	82 ce 00	brl $3a5c8f	                BRL ret_result
.3a5bc1					chk_negative
.3a5bc1	e2 20		sep #$20	            SEP #$20
.3a5bc3	a5 26		lda $0826	                LDA ARGUMENT1+3             ; If N is negative, output a minus sign and negate N
.3a5bc5	10 08		bpl $3a5bcf	                BPL not_negative
.3a5bc7	29 7f		and #$7f	                AND #$7F                    ; Negate the number
.3a5bc9	85 26		sta $0826	                STA ARGUMENT1+3
.3a5bcb	a9 01		lda #$01	                LDA #1
.3a5bcd	83 01		sta $01,s	                STA L_NEGATIVE              ; Set IsNegative to a TRUE value
.3a5bcf					not_negative
.3a5bcf	c2 20		rep #$20	            REP #$20
.3a5bd1	a9 00 00	lda #$0000	                LDA #0                      ; Initialize K to 0, K is a 1-byte signed integer. (SCRATCH is K)
.3a5bd4	83 03		sta $03,s	                STA L_K                     ; We're using a word here for convenience
.3a5bd6	c2 20		rep #$20	            REP #$20
.3a5bd8	af a9 5c 3a	lda $3a5ca9	            LDA ten_d_1
.3a5bdc	85 29		sta $0829	            STA ARGUMENT2
.3a5bde	af ab 5c 3a	lda $3a5cab	            LDA ten_d_1+2
.3a5be2	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5be4	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5be7	89 00 80	bit #$8000	                BIT #$8000                  ; Is N < 10^(D-1)?
.3a5bea	d0 12		bne $3a5bfe	                BNE shift_up
.3a5bec					shift_down
.3a5bec	20 24 56	jsr $3a5624	            JSR FP_DIV10
.3a5bef	a3 03		lda $03,s	                LDA L_K
.3a5bf1	1a		inc a		                INC A
.3a5bf2	83 03		sta $03,s	                STA L_K                     ; Increment K
.3a5bf4	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5bf7	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N < 10^(D-1)?
.3a5bfa	f0 12		beq $3a5c0e	                BEQ do_digits               ; Yes: we're ready to process digits
.3a5bfc	80 ee		bra $3a5bec	                BRA shift_down              ; No: keep dividing
.3a5bfe					shift_up
.3a5bfe	20 db 55	jsr $3a55db	            JSR FP_MUL10
.3a5c01	a3 03		lda $03,s	                LDA L_K
.3a5c03	3a		dec a		                DEC A
.3a5c04	83 03		sta $03,s	                STA L_K                     ; Decrement K
.3a5c06	20 89 5a	jsr $3a5a89	            JSR FP_COMPARE
.3a5c09	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N >= 10 ^ (D-1)?
.3a5c0c	f0 f0		beq $3a5bfe	                BEQ shift_up                ; No: keep multiplying
.3a5c0e					do_digits
.3a5c0e	e2 30		sep #$30	            SEP #$30
.3a5c10	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5c12	0a		asl a		                ASL A
.3a5c13	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5c15	2a		rol a		                ROL A
.3a5c16	83 05		sta $05,s	                STA L_X1
.3a5c18	38		sec		                SEC
.3a5c19	a9 96		lda #$96	                LDA #150                    ; X := 150 - X1
.3a5c1b	e3 05		sbc $05,s	                SBC L_X1
.3a5c1d	aa		tax		                TAX
.3a5c1e	f0 0f		beq $3a5c2f	                BEQ emit_digits             ; If X = 0, just emit the digits
.3a5c20	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Set the implied '1' MSB of the mantissa
.3a5c22	09 80		ora #$80	                ORA #$80
.3a5c24	85 25		sta $0825	                STA ARGUMENT1+2
.3a5c26	46 25		lsr $0825	shift_r         LSR ARGUMENT1+2             ; Shift the mantissa right
.3a5c28	66 24		ror $0824	                ROR ARGUMENT1+1
.3a5c2a	66 23		ror $0823	                ROR ARGUMENT1
.3a5c2c	ca		dex		                DEX
.3a5c2d	d0 f7		bne $3a5c26	                BNE shift_r                 ; Until X = 0
.3a5c2f					emit_digits
.3a5c2f	c2 10		rep #$10	            REP #$10
.3a5c31	e2 20		sep #$20	            SEP #$20
.3a5c33	64 26		stz $0826	                STZ ARGUMENT1+3             ; Blank out the MSB
.3a5c35	a9 00		lda #$00	                LDA #TYPE_INTEGER           ; Make it an integer
.3a5c37	85 27		sta $0827	                STA ARGTYPE1
.3a5c39	a3 01		lda $01,s	                LDA L_NEGATIVE              ; Check IsNegative
.3a5c3b	f0 11		beq $3a5c4e	                BEQ get_raw_digits          ; If FALSE, just convert the raw digits
.3a5c3d	c2 20		rep #$20	            REP #$20
.3a5c3f	38		sec		                SEC                         ; Make the raw integer negative
.3a5c40	a9 00 00	lda #$0000	                LDA #0
.3a5c43	e5 23		sbc $0823	                SBC ARGUMENT1
.3a5c45	85 23		sta $0823	                STA ARGUMENT1
.3a5c47	a9 00 00	lda #$0000	                LDA #0
.3a5c4a	e5 25		sbc $0825	                SBC ARGUMENT1+2
.3a5c4c	85 25		sta $0825	                STA ARGUMENT1+2
.3a5c4e					get_raw_digits
.3a5c4e	20 46 14	jsr $3a1446	            JSR ITOS
.3a5c51	c2 20		rep #$20	            REP #$20
.3a5c53	a5 16		lda $0816	            LDA STRPTR
.3a5c55	85 23		sta $0823	            STA ARGUMENT1
.3a5c57	a5 18		lda $0818	            LDA STRPTR+2
.3a5c59	85 25		sta $0825	            STA ARGUMENT1+2
.3a5c5b	20 84 5b	jsr $3a5b84	            JSR STRFINDEND
.3a5c5e	e2 20		sep #$20	            SEP #$20
.3a5c60	c8		iny		                INY                         ; Move the NULL up one byte
.3a5c61	a9 00		lda #$00	                LDA #0
.3a5c63	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5c65	88		dey		insert_loop     DEY                         ; Move to the character before the one we just moved
.3a5c66	88		dey		                DEY
.3a5c67	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y           ; Get the character
.3a5c69	c8		iny		                INY                         ; Move to the next space
.3a5c6a	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Store the character here
.3a5c6c	c0 02 00	cpy #$0002	                CPY #2                      ; Check to see if we just moved the 2nd character
.3a5c6f	d0 f4		bne $3a5c65	                BNE insert_loop             ; If not, keep moving the characters
.3a5c71	a9 2e		lda #$2e	                LDA #'.'                    ; Insert the '.' in the space we openned
.3a5c73	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5c75	e2 20		sep #$20	            SEP #$20
.3a5c77	18		clc		                CLC                         ; Compute the exponent
.3a5c78	a3 03		lda $03,s	                LDA L_K
.3a5c7a	69 05		adc #$05	                ADC #(FP_D - 1)
.3a5c7c	83 06		sta $06,s	                STA L_EXP
.3a5c7e	f0 19		beq $3a5c99	                BEQ done                    ; If it's 0, just return the number
.3a5c80	20 84 5b	jsr $3a5b84	            JSR STRFINDEND
.3a5c83	a9 45		lda #$45	                LDA #'E'                    ; Append the "E"
.3a5c85	20 36 5b	jsr $3a5b36	            JSR STREMIT
.3a5c88	a3 06		lda $06,s	                LDA L_EXP
.3a5c8a	20 42 5b	jsr $3a5b42	            JSR STREMITB
.3a5c8d	80 0a		bra $3a5c99	                BRA done                    ; TODO: reformat integer... add E and exponent...
.3a5c8f					ret_result
.3a5c8f	c2 20		rep #$20	            REP #$20
.3a5c91	a5 16		lda $0816	                LDA STRPTR                  ; Return the temporary string we've assembled
.3a5c93	85 23		sta $0823	                STA ARGUMENT1
.3a5c95	a5 18		lda $0818	                LDA STRPTR+2
.3a5c97	85 25		sta $0825	                STA ARGUMENT1+2
.3a5c99					done
.3a5c99	e2 20		sep #$20	            SEP #$20
.3a5c9b	a9 02		lda #$02	                LDA #TYPE_STRING
.3a5c9d	85 27		sta $0827	                STA ARGTYPE1
.3a5c9f	c2 20		rep #$20	            REP #$20
.3a5ca1	3b		tsc		                TSC                         ; Remove the locals from the stack
.3a5ca2	18		clc		                CLC
.3a5ca3	69 06 00	adc #$0006	                ADC #6
.3a5ca6	1b		tcs		                TCS
.3a5ca7	28		plp		                PLP
.3a5ca8	60		rts		            RTS
>3a5ca9	00 50 c3 47			ten_d_1         .dword $47c35000            ; 10^(FP_D-1), where FP_D=5
>3a5cad	00 00 80 3f			FP_1_0          .dword $3f800000    ; Floating point constant: 1.0
>3a5cb1	f3 04 b5 3f			FP_SQR_2_0      .dword $3fb504f3    ; Floating point constant: sqrt(2.0)
>3a5cb5	f3 04 35 3f			FP_SQR_0_5      .dword $3f3504f3    ; Floating point constant: sqrt(0.2)

;******  Return to file: src\basic816.s


;******  Processing file: src\transcendentals.s

.3a5cb9					Q_POLY_HR
.3a5cb9	e2 20		sep #$20	            SEP #$20
.3a5cbb	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5cbd	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5cc1	c2 20		rep #$20	            REP #$20
.3a5cc3	bd 00 00	lda $0000,x	                LDA 0,X
.3a5cc6	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5cca	bd 02 00	lda $0002,x	                LDA 2,X
.3a5ccd	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5cd1	88		dey		                DEY             ; (Y-1) more coefficients.
.3a5cd2	e8		inx		loop            INX             ; point to the next coefficient
.3a5cd3	e8		inx		                INX
.3a5cd4	e8		inx		                INX
.3a5cd5	e8		inx		                INX
.3a5cd6	e2 20		sep #$20	            SEP #$20
.3a5cd8	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a5cda	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5cde	c2 20		rep #$20	            REP #$20
.3a5ce0	af 23 08 00	lda $000823	                LDA @l ARGUMENT1
.3a5ce4	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5ce8	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5cec	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5cf0	ea		nop		                NOP
.3a5cf1	ea		nop		                NOP
.3a5cf2	ea		nop		                NOP
.3a5cf3	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5cf7	48		pha		                PHA
.3a5cf8	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5cfc	8f 0a e2 af	sta $afe20a	                STA FP_MATH_INPUT0_HL
.3a5d00	68		pla		                PLA
.3a5d01	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5d05	e2 20		sep #$20	            SEP #$20
.3a5d07	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5d09	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5d0d	c2 20		rep #$20	            REP #$20
.3a5d0f	bd 00 00	lda $0000,x	                LDA 0,X
.3a5d12	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5d16	bd 02 00	lda $0002,x	                LDA 2,X
.3a5d19	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5d1d	ea		nop		                NOP
.3a5d1e	ea		nop		                NOP
.3a5d1f	ea		nop		                NOP
.3a5d20	88		dey		                DEY
.3a5d21	f0 14		beq $3a5d37	                BEQ done
.3a5d23	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5d27	48		pha		                PHA
.3a5d28	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5d2c	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5d30	68		pla		                PLA
.3a5d31	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5d35	80 9b		bra $3a5cd2	                BRA loop
.3a5d37	af 08 e2 af	lda $afe208	done            LDA @l FP_MATH_OUTPUT_FP_LL
.3a5d3b	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.3a5d3f	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5d43	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.3a5d47	60		rts		                RTS
.3a5d48					Q_SQ
.3a5d48	e2 20		sep #$20	            SEP #$20
.3a5d4a	a9 00		lda #$00	                LDA #0
.3a5d4c	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5d50	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a5d52	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5d56	c2 20		rep #$20	            REP #$20
.3a5d58	a5 23		lda $0823	                LDA ARGUMENT1
.3a5d5a	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5d5e	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5d62	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5d66	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5d6a	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5d6e	ea		nop		                NOP
.3a5d6f	ea		nop		                NOP
.3a5d70	ea		nop		                NOP
.3a5d71	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5d75	85 23		sta $0823	                STA ARGUMENT1
.3a5d77	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5d7b	85 25		sta $0825	                STA ARGUMENT1+2
.3a5d7d	60		rts		                RTS
.3a5d7e					Q_INV
.3a5d7e	e2 20		sep #$20	            SEP #$20
.3a5d80	a9 00		lda #$00	                LDA #0
.3a5d82	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5d86	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a5d88	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5d8c	c2 20		rep #$20	            REP #$20
.3a5d8e	a5 23		lda $0823	                LDA ARGUMENT1
.3a5d90	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5d94	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5d98	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5d9c	af d2 63 3a	lda $3a63d2	                LDA @l fp_one
.3a5da0	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5da4	af d4 63 3a	lda $3a63d4	                LDA @l fp_one+2
.3a5da8	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5dac	ea		nop		                NOP
.3a5dad	ea		nop		                NOP
.3a5dae	ea		nop		                NOP
.3a5daf	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5db3	85 23		sta $0823	                STA ARGUMENT1
.3a5db5	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5db9	85 25		sta $0825	                STA ARGUMENT1+2
.3a5dbb	60		rts		                RTS
.3a5dbc					Q_FP_SCALE
.3a5dbc	a2 00 00	ldx #$0000	                LDX #0
.3a5dbf	a5 23		lda $0823	loop            LDA ARGUMENT1
.3a5dc1	c5 29		cmp $0829	                CMP ARGUMENT2
.3a5dc3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5dc5	e5 2b		sbc $082b	                SBC ARGUMENT2+2
.3a5dc7	90 1e		bcc $3a5de7	                BCC done
.3a5dc9	a5 23		lda $0823	                LDA ARGUMENT1
.3a5dcb	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5dcf	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5dd1	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5dd5	ea		nop		                NOP
.3a5dd6	ea		nop		                NOP
.3a5dd7	ea		nop		                NOP
.3a5dd8	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5ddc	85 23		sta $0823	                STA ARGUMENT1
.3a5dde	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5de2	85 25		sta $0825	                STA ARGUMENT1+2
.3a5de4	e8		inx		                INX
.3a5de5	80 d8		bra $3a5dbf	                BRA loop
.3a5de7					done
.3a5de7	60		rts		            RTS
.3a5de8					Q_FP_SCALE_TAU
.3a5de8	e2 20		sep #$20	            SEP #$20
.3a5dea	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5dec	10 09		bpl $3a5df7	                BPL notneg
.3a5dee	29 7f		and #$7f	                AND #$7F
.3a5df0	85 26		sta $0826	                STA ARGUMENT1+3
.3a5df2	a9 01		lda #$01	                LDA #1
.3a5df4	48		pha		                PHA
.3a5df5	80 03		bra $3a5dfa	                BRA compute
.3a5df7	a9 00		lda #$00	notneg          LDA #0          ; not negative, so push 0.
.3a5df9	48		pha		                PHA
.3a5dfa	a9 40		lda #$40	compute         LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5dfc	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5e00	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5e02	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5e06	c2 30		rep #$30	            REP #$30
.3a5e08	af 3a 64 3a	lda $3a643a	                LDA @l twopi
.3a5e0c	85 29		sta $0829	                STA ARGUMENT2
.3a5e0e	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5e12	af 3c 64 3a	lda $3a643c	                LDA @l twopi+2
.3a5e16	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5e18	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5e1c	20 bc 5d	jsr $3a5dbc	            JSR Q_FP_SCALE
.3a5e1f	e2 20		sep #$20	            SEP #$20
.3a5e21	68		pla		                PLA
.3a5e22	c2 20		rep #$20	            REP #$20
.3a5e24	f0 1e		beq $3a5e44	                BEQ done
.3a5e26	a5 23		lda $0823	                LDA ARGUMENT1
.3a5e28	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5e2c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5e2e	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5e32	ea		nop		                NOP
.3a5e33	ea		nop		                NOP
.3a5e34	ea		nop		                NOP
.3a5e35	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5e39	85 23		sta $0823	                STA ARGUMENT1
.3a5e3b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5e3f	29 ff 7f	and #$7fff	                AND #$7fff
.3a5e42	85 25		sta $0825	                STA ARGUMENT1+2
.3a5e44					done
.3a5e44	60		rts		            RTS
.3a5e45					Q_FP_NORM_ANGLE
.3a5e45	5a		phy		                PHY
.3a5e46	a2 00 00	ldx #$0000	                LDX #0
.3a5e49	a0 00 00	ldy #$0000	                LDY #0
.3a5e4c	a5 23		lda $0823	loop            LDA ARGUMENT1
.3a5e4e	df 3e 64 3a	cmp $3a643e,x	                CMP @l onepi,x
.3a5e52	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5e54	ff 40 64 3a	sbc $3a6440,x	                SBC @l onepi+2,x
.3a5e58	90 2c		bcc $3a5e86	                BCC less
.3a5e5a	bf 3a 64 3a	lda $3a643a,x	                LDA @l twopi,x
.3a5e5e	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5e62	bf 3c 64 3a	lda $3a643c,x	                LDA @l twopi+2,x
.3a5e66	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5e6a	a5 23		lda $0823	                LDA ARGUMENT1
.3a5e6c	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5e70	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5e72	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5e76	ea		nop		                NOP
.3a5e77	ea		nop		                NOP
.3a5e78	ea		nop		                NOP
.3a5e79	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5e7d	85 23		sta $0823	                STA ARGUMENT1
.3a5e7f	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5e83	85 25		sta $0825	                STA ARGUMENT1+2
.3a5e85	38		sec		                SEC             ; set carry to indicate a reflection
.3a5e86	98		tya		less            TYA             ; carry already cleared if we branched
.3a5e87	2a		rol a		                ROL             ; shift carry into flags...
.3a5e88	a8		tay		                TAY             ; and store back into y
.3a5e89	e8		inx		                INX             ; next set of values
.3a5e8a	e8		inx		                INX
.3a5e8b	e8		inx		                INX
.3a5e8c	e8		inx		                INX
.3a5e8d	e0 0c 00	cpx #$000c	                CPX #12         ; check if we have already looked at 3
.3a5e90	d0 ba		bne $3a5e4c	                BNE loop
.3a5e92	98		tya		                TYA             ; copy Y to X, as that's what we have
.3a5e93	aa		tax		                TAX
.3a5e94	7a		ply		                PLY
.3a5e95	60		rts		            RTS
.3a5e96					Q_FP_COS
.3a5e96	08		php		                PHP
.3a5e97	c2 30		rep #$30	            REP #$30
.3a5e99	48		pha		                PHA
.3a5e9a	da		phx		                PHX
.3a5e9b	20 48 5d	jsr $3a5d48	            JSR Q_SQ
.3a5e9e	8b		phb		                PHB
.3a5e9f	e2 20		sep #$20	            SEP #$20
.3a5ea1	a9 3a		lda #$3a	                LDA #`cos_coeff
.3a5ea3	48		pha		                PHA
.3a5ea4	ab		plb		                PLB
.3a5ea5	c2 20		rep #$20	            REP #$20
.3a5ea7	a2 7a 63	ldx #$637a	                LDX #<>cos_coeff
.3a5eaa	5a		phy		                PHY
.3a5eab	a0 05 00	ldy #$0005	                LDY #5
.3a5eae	20 b9 5c	jsr $3a5cb9	            JSR Q_POLY_HR
.3a5eb1	7a		ply		                PLY
.3a5eb2	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.3a5eb5	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a5eb9	ab		plb		                PLB
.3a5eba	fa		plx		                PLX
.3a5ebb	68		pla		                PLA
.3a5ebc	28		plp		                PLP
.3a5ebd	60		rts		            RTS
.3a5ebe					Q_FP_SIN
.3a5ebe	08		php		                PHP
.3a5ebf	c2 30		rep #$30	            REP #$30
.3a5ec1	48		pha		                PHA
.3a5ec2	da		phx		                PHX
.3a5ec3	a5 23		lda $0823	                LDA ARGUMENT1
.3a5ec5	85 29		sta $0829	                STA ARGUMENT2
.3a5ec7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5ec9	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5ecb	20 48 5d	jsr $3a5d48	            JSR Q_SQ
.3a5ece	8b		phb		                PHB
.3a5ecf	e2 20		sep #$20	            SEP #$20
.3a5ed1	a9 3a		lda #$3a	                LDA #`sin_coeff
.3a5ed3	48		pha		                PHA
.3a5ed4	ab		plb		                PLB
.3a5ed5	c2 20		rep #$20	            REP #$20
.3a5ed7	a2 8e 63	ldx #$638e	                LDX #<>sin_coeff
.3a5eda	5a		phy		                PHY
.3a5edb	a0 05 00	ldy #$0005	                LDY #5
.3a5ede	20 b9 5c	jsr $3a5cb9	            JSR Q_POLY_HR
.3a5ee1	7a		ply		                PLY
.3a5ee2	ab		plb		                PLB
.3a5ee3	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a5ee6	fa		plx		                PLX
.3a5ee7	68		pla		                PLA
.3a5ee8	28		plp		                PLP
.3a5ee9	60		rts		            RTS
.3a5eea					Q_FP_TAN
.3a5eea	08		php		                PHP
.3a5eeb	c2 30		rep #$30	            REP #$30
.3a5eed	48		pha		                PHA
.3a5eee	da		phx		                PHX
.3a5eef	a5 23		lda $0823	                LDA ARGUMENT1
.3a5ef1	85 29		sta $0829	                STA ARGUMENT2
.3a5ef3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5ef5	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5ef7	20 48 5d	jsr $3a5d48	            JSR Q_SQ
.3a5efa	8b		phb		                PHB
.3a5efb	e2 20		sep #$20	            SEP #$20
.3a5efd	a9 3a		lda #$3a	                LDA #`tan_coeff
.3a5eff	48		pha		                PHA
.3a5f00	ab		plb		                PLB
.3a5f01	c2 20		rep #$20	            REP #$20
.3a5f03	a2 a2 63	ldx #$63a2	                LDX #<>tan_coeff
.3a5f06	5a		phy		                PHY
.3a5f07	a0 05 00	ldy #$0005	                LDY #5
.3a5f0a	20 b9 5c	jsr $3a5cb9	            JSR Q_POLY_HR
.3a5f0d	7a		ply		                PLY
.3a5f0e	ab		plb		                PLB
.3a5f0f	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a5f12	fa		plx		                PLX
.3a5f13	68		pla		                PLA
.3a5f14	28		plp		                PLP
.3a5f15	60		rts		            RTS
.3a5f16					Q_FP_LN
.3a5f16	08		php		                PHP
.3a5f17	c2 30		rep #$30	            REP #$30
.3a5f19	48		pha		                PHA
.3a5f1a	da		phx		                PHX
.3a5f1b	e2 20		sep #$20	            SEP #$20
.3a5f1d	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5f1f	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5f23	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5f25	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5f29	c2 20		rep #$20	            REP #$20
.3a5f2b	a5 23		lda $0823	                LDA ARGUMENT1
.3a5f2d	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5f31	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5f33	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5f37	af d2 63 3a	lda $3a63d2	                LDA @l fp_one
.3a5f3b	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5f3f	af d4 63 3a	lda $3a63d4	                LDA @l fp_one+2
.3a5f43	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5f47	ea		nop		                NOP
.3a5f48	ea		nop		                NOP
.3a5f49	ea		nop		                NOP
.3a5f4a	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f4e	85 0c		sta $080c	                STA SCRATCH
.3a5f50	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f54	85 0e		sta $080e	                STA SCRATCH+2
.3a5f56	e2 20		sep #$20	            SEP #$20
.3a5f58	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5f5a	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5f5e	c2 20		rep #$20	            REP #$20
.3a5f60	ea		nop		                NOP
.3a5f61	ea		nop		                NOP
.3a5f62	ea		nop		                NOP
.3a5f63	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f67	85 10		sta $0810	                STA SCRATCH2
.3a5f69	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f6d	85 12		sta $0812	                STA SCRATCH2+2
.3a5f6f	e2 20		sep #$20	            SEP #$20
.3a5f71	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a5f73	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5f77	c2 20		rep #$20	            REP #$20
.3a5f79	a5 0c		lda $080c	                LDA SCRATCH
.3a5f7b	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5f7f	a5 0e		lda $080e	                LDA SCRATCH+2
.3a5f81	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5f85	a5 10		lda $0810	                LDA SCRATCH2
.3a5f87	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5f8b	a5 12		lda $0812	                LDA SCRATCH2+2
.3a5f8d	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5f91	ea		nop		                NOP
.3a5f92	ea		nop		                NOP
.3a5f93	ea		nop		                NOP
.3a5f94	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f98	85 23		sta $0823	                STA ARGUMENT1
.3a5f9a	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f9e	85 25		sta $0825	                STA ARGUMENT1+2
.3a5fa0	e2 20		sep #$20	            SEP #$20
.3a5fa2	a9 08		lda #$08	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX0
.3a5fa4	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5fa8	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5faa	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5fae	c2 20		rep #$20	            REP #$20
.3a5fb0	a5 23		lda $0823	                LDA ARGUMENT1
.3a5fb2	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5fb6	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5fb8	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5fbc	ea		nop		                NOP
.3a5fbd	ea		nop		                NOP
.3a5fbe	ea		nop		                NOP
.3a5fbf	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5fc3	85 29		sta $0829	                STA ARGUMENT2
.3a5fc5	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5fc9	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5fcb	20 48 5d	jsr $3a5d48	            JSR Q_SQ
.3a5fce	8b		phb		                PHB
.3a5fcf	e2 20		sep #$20	            SEP #$20
.3a5fd1	a9 3a		lda #$3a	                LDA #`ln_coeff
.3a5fd3	48		pha		                PHA
.3a5fd4	ab		plb		                PLB
.3a5fd5	c2 20		rep #$20	            REP #$20
.3a5fd7	a2 b6 63	ldx #$63b6	                LDX #<>ln_coeff
.3a5fda	5a		phy		                PHY
.3a5fdb	a0 08 00	ldy #$0008	                LDY #8
.3a5fde	20 b9 5c	jsr $3a5cb9	            JSR Q_POLY_HR
.3a5fe1	7a		ply		                PLY
.3a5fe2	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.3a5fe5	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a5fe9	8f 2d 08 00	sta $00082d	                STA @l ARGTYPE2
.3a5fed	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a5ff0	ab		plb		                PLB
.3a5ff1	fa		plx		                PLX
.3a5ff2	68		pla		                PLA
.3a5ff3	28		plp		                PLP
.3a5ff4	60		rts		            RTS
.3a5ff5					FP_SIN
.3a5ff5	08		php		                PHP
.3a5ff6	c2 30		rep #$30	            REP #$30
.3a5ff8	48		pha		                PHA
.3a5ff9	da		phx		                PHX
.3a5ffa	20 e8 5d	jsr $3a5de8	            JSR Q_FP_SCALE_TAU
.3a5ffd	20 45 5e	jsr $3a5e45	            JSR Q_FP_NORM_ANGLE
.3a6000	da		phx		                PHX
.3a6001	8a		txa		                TXA
.3a6002	29 01 00	and #$0001	                AND #1
.3a6005	d0 05		bne $3a600c	                BNE do_cos
.3a6007	20 be 5e	jsr $3a5ebe	            JSR Q_FP_SIN
.3a600a	80 03		bra $3a600f	                BRA maybe_neg
.3a600c					do_cos
.3a600c	20 96 5e	jsr $3a5e96	            JSR Q_FP_COS
.3a600f	fa		plx		maybe_neg       PLX
.3a6010	8a		txa		                TXA
.3a6011	29 04 00	and #$0004	                AND #4
.3a6014	f0 0a		beq $3a6020	                BEQ done
.3a6016	e2 20		sep #$20	            SEP #$20
.3a6018	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a601a	09 80		ora #$80	                ORA #$80
.3a601c	85 26		sta $0826	                STA ARGUMENT1+3
.3a601e	c2 20		rep #$20	            REP #$20
.3a6020	fa		plx		done            PLX
.3a6021	68		pla		                PLA
.3a6022	28		plp		                PLP
.3a6023	60		rts		            RTS
.3a6024					FP_COS
.3a6024	08		php		                PHP
.3a6025	c2 30		rep #$30	            REP #$30
.3a6027	48		pha		                PHA
.3a6028	da		phx		                PHX
.3a6029	20 e8 5d	jsr $3a5de8	            JSR Q_FP_SCALE_TAU
.3a602c	20 45 5e	jsr $3a5e45	            JSR Q_FP_NORM_ANGLE
.3a602f	da		phx		                PHX
.3a6030	8a		txa		                TXA
.3a6031	29 01 00	and #$0001	                AND #1
.3a6034	d0 05		bne $3a603b	                BNE do_sin
.3a6036	20 96 5e	jsr $3a5e96	            JSR Q_FP_COS
.3a6039	80 03		bra $3a603e	                BRA maybe_neg
.3a603b					do_sin
.3a603b	20 be 5e	jsr $3a5ebe	            JSR Q_FP_SIN
.3a603e	fa		plx		maybe_neg       PLX
.3a603f	8a		txa		                TXA
.3a6040	29 02 00	and #$0002	                AND #2
.3a6043	f0 0a		beq $3a604f	                BEQ done
.3a6045	e2 20		sep #$20	            SEP #$20
.3a6047	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a6049	09 80		ora #$80	                ORA #$80
.3a604b	85 26		sta $0826	                STA ARGUMENT1+3
.3a604d	c2 20		rep #$20	            REP #$20
.3a604f	fa		plx		done            PLX
.3a6050	68		pla		                PLA
.3a6051	28		plp		                PLP
.3a6052	60		rts		            RTS
.3a6053					FP_TAN
.3a6053	08		php		                PHP
.3a6054	c2 30		rep #$30	            REP #$30
.3a6056	48		pha		                PHA
.3a6057	da		phx		                PHX
.3a6058	20 e8 5d	jsr $3a5de8	            JSR Q_FP_SCALE_TAU
.3a605b	20 45 5e	jsr $3a5e45	            JSR Q_FP_NORM_ANGLE
.3a605e	20 ea 5e	jsr $3a5eea	            JSR Q_FP_TAN
.3a6061	8a		txa		                TXA
.3a6062	29 01 00	and #$0001	                AND #1
.3a6065	f0 03		beq $3a606a	                BEQ no_inv
.3a6067	20 7e 5d	jsr $3a5d7e	            JSR Q_INV
.3a606a	8a		txa		no_inv          TXA
.3a606b	e2 20		sep #$20	            SEP #$20
.3a606d	4a		lsr a		                LSR
.3a606e	4a		lsr a		                LSR
.3a606f	69 00		adc #$00	                ADC #0
.3a6071	29 01		and #$01	                AND #1
.3a6073	f0 06		beq $3a607b	                BEQ no_neg
.3a6075	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a6077	09 80		ora #$80	                ORA #$80
.3a6079	85 26		sta $0826	                STA ARGUMENT1+3
.3a607b					no_neg
.3a607b	c2 20		rep #$20	            REP #$20
.3a607d	fa		plx		                PLX
.3a607e	68		pla		                PLA
.3a607f	28		plp		                PLP
.3a6080	60		rts		            RTS
.3a6081					FP_LN
.3a6081	08		php		                PHP
.3a6082	c2 30		rep #$30	            REP #$30
.3a6084	48		pha		                PHA
.3a6085	da		phx		                PHX
.3a6086	5a		phy		                PHY
.3a6087	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6089	10 1f		bpl $3a60aa	                BPL arg_ok
.3a608b	08		php		            PHP
.3a608c	c2 20		rep #$20	            REP #$20
.3a608e	48		pha		            PHA
.3a608f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6092	5b		tcd		            TCD
.3a6093	68		pla		            PLA
.3a6094	28		plp		            PLP
.3a6095	e2 20		sep #$20	            SEP #$20
.3a6097	a9 17		lda #$17	            LDA #ERR_DOMAIN
.3a6099	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a609d	c2 20		rep #$20	            REP #$20
.3a609f	29 ff 00	and #$00ff	            AND #$00FF
.3a60a2	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a60a5	e2 20		sep #$20	            SEP #$20
.3a60a7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a60aa					arg_ok
.3a60aa	c2 30		rep #$30	            REP #$30
.3a60ac	a5 23		lda $0823	                LDA ARGUMENT1
.3a60ae	cf d2 63 3a	cmp $3a63d2	                CMP @l fp_one
.3a60b2	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a60b4	cf d4 63 3a	cmp $3a63d4	                CMP @l fp_one+2
.3a60b8	b0 04		bcs $3a60be	                BCS gtone
.3a60ba	20 7e 5d	jsr $3a5d7e	            JSR Q_INV
.3a60bd	18		clc		                CLC
.3a60be	a9 00 00	lda #$0000	gtone           LDA #0
.3a60c1	a8		tay		                TAY
.3a60c2	2a		rol a		                ROL             ; Rotate Carry into A; 0 means negate
.3a60c3	48		pha		                PHA
.3a60c4	e2 20		sep #$20	            SEP #$20
.3a60c6	a9 00		lda #$00	                LDA #0
.3a60c8	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a60cc	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a60ce	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a60d2	c2 20		rep #$20	            REP #$20
.3a60d4	af 2a 64 3a	lda $3a642a	                LDA @l eexp64
.3a60d8	85 29		sta $0829	                STA ARGUMENT2
.3a60da	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a60de	af 2c 64 3a	lda $3a642c	                LDA @l eexp64+2
.3a60e2	85 2b		sta $082b	                STA ARGUMENT2+2
.3a60e4	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a60e8	20 bc 5d	jsr $3a5dbc	            JSR Q_FP_SCALE
.3a60eb	8a		txa		                TXA
.3a60ec	f0 07		beq $3a60f5	                BEQ chk16
.3a60ee	0a		asl a		                ASL             ; multiply counter by 64
.3a60ef	0a		asl a		                ASL
.3a60f0	0a		asl a		                ASL
.3a60f1	0a		asl a		                ASL
.3a60f2	0a		asl a		                ASL
.3a60f3	0a		asl a		                ASL
.3a60f4	a8		tay		                TAY
.3a60f5	af 2e 64 3a	lda $3a642e	chk16           LDA @l eexp16
.3a60f9	85 29		sta $0829	                STA ARGUMENT2
.3a60fb	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a60ff	af 30 64 3a	lda $3a6430	                LDA @l eexp16+2
.3a6103	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6105	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a6109	20 bc 5d	jsr $3a5dbc	            JSR Q_FP_SCALE
.3a610c	8a		txa		                TXA
.3a610d	f0 0b		beq $3a611a	                BEQ chk04
.3a610f	0a		asl a		                ASL             ; multiply counter by 16
.3a6110	0a		asl a		                ASL
.3a6111	0a		asl a		                ASL
.3a6112	0a		asl a		                ASL
.3a6113	85 29		sta $0829	                STA ARGUMENT2   ; and add into total
.3a6115	18		clc		                CLC
.3a6116	98		tya		                TYA
.3a6117	65 29		adc $0829	                ADC ARGUMENT2
.3a6119	a8		tay		                TAY
.3a611a	af 32 64 3a	lda $3a6432	chk04           LDA @l eexp04
.3a611e	85 29		sta $0829	                STA ARGUMENT2
.3a6120	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6124	af 34 64 3a	lda $3a6434	                LDA @l eexp04+2
.3a6128	85 2b		sta $082b	                STA ARGUMENT2+2
.3a612a	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a612e	20 bc 5d	jsr $3a5dbc	            JSR Q_FP_SCALE
.3a6131	8a		txa		                TXA
.3a6132	f0 09		beq $3a613d	                BEQ chk01
.3a6134	0a		asl a		                ASL             ;multiply counter by 4
.3a6135	0a		asl a		                ASL
.3a6136	85 29		sta $0829	                STA ARGUMENT2   ;and add to total
.3a6138	18		clc		                CLC
.3a6139	98		tya		                TYA
.3a613a	65 29		adc $0829	                ADC ARGUMENT2
.3a613c	a8		tay		                TAY
.3a613d	af 36 64 3a	lda $3a6436	chk01           LDA @l eexp01
.3a6141	85 29		sta $0829	                STA ARGUMENT2
.3a6143	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6147	af 38 64 3a	lda $3a6438	                LDA @l eexp01+2
.3a614b	85 2b		sta $082b	                STA ARGUMENT2+2
.3a614d	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a6151	20 bc 5d	jsr $3a5dbc	            JSR Q_FP_SCALE
.3a6154	86 29		stx $0829	                STX ARGUMENT2   ; add counter to total
.3a6156	18		clc		                CLC
.3a6157	98		tya		                TYA
.3a6158	65 29		adc $0829	                ADC ARGUMENT2
.3a615a	a8		tay		                TAY
.3a615b	20 16 5f	jsr $3a5f16	            JSR Q_FP_LN
.3a615e	a5 23		lda $0823	                LDA ARGUMENT1
.3a6160	85 29		sta $0829	                STA ARGUMENT2
.3a6162	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6164	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6166	98		tya		                TYA
.3a6167	85 23		sta $0823	                STA ARGUMENT1
.3a6169	64 25		stz $0825	                STZ ARGUMENT1+2
.3a616b	20 b0 59	jsr $3a59b0	            JSR ITOF
.3a616e	20 8d 54	jsr $3a548d	            JSR OP_FP_ADD
.3a6171	68		pla		                PLA
.3a6172	d0 07		bne $3a617b	                BNE done
.3a6174	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6176	09 00 80	ora #$8000	                ORA #$8000
.3a6179	85 25		sta $0825	                STA ARGUMENT1+2
.3a617b	7a		ply		done            PLY
.3a617c	fa		plx		                PLX
.3a617d	68		pla		                PLA
.3a617e	28		plp		                PLP
.3a617f	60		rts		            RTS
.3a6180					FP_ASIN
.3a6180	08		php		                PHP
.3a6181	c2 30		rep #$30	            REP #$30
.3a6183	48		pha		                PHA
.3a6184	da		phx		                PHX
.3a6185	a5 23		lda $0823	                LDA ARGUMENT1
.3a6187	85 29		sta $0829	                STA ARGUMENT2
.3a6189	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a618b	85 2b		sta $082b	                STA ARGUMENT2+2
.3a618d	20 48 5d	jsr $3a5d48	            JSR Q_SQ
.3a6190	8b		phb		                PHB
.3a6191	e2 20		sep #$20	            SEP #$20
.3a6193	a9 3a		lda #$3a	                LDA #`asin_coeff
.3a6195	48		pha		                PHA
.3a6196	ab		plb		                PLB
.3a6197	c2 20		rep #$20	            REP #$20
.3a6199	a2 da 63	ldx #$63da	                LDX #<>asin_coeff
.3a619c	a0 05 00	ldy #$0005	                LDY #5
.3a619f	20 b9 5c	jsr $3a5cb9	            JSR Q_POLY_HR
.3a61a2	ab		plb		                PLB
.3a61a3	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a61a6	fa		plx		                PLX
.3a61a7	68		pla		                PLA
.3a61a8	28		plp		                PLP
.3a61a9	60		rts		            RTS
.3a61aa					FP_ACOS
.3a61aa	08		php		                PHP
.3a61ab	c2 30		rep #$30	            REP #$30
.3a61ad	48		pha		                PHA
.3a61ae	da		phx		                PHX
.3a61af	20 80 61	jsr $3a6180	            JSR FP_ASIN
.3a61b2	af 42 64 3a	lda $3a6442	                LDA @l halfpi
.3a61b6	85 29		sta $0829	                STA ARGUMENT2
.3a61b8	af 44 64 3a	lda $3a6444	                LDA @l halfpi+2
.3a61bc	85 2b		sta $082b	                STA ARGUMENT2+2
.3a61be	20 82 54	jsr $3a5482	            JSR OP_FP_SUB
.3a61c1	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a61c3	49 00 80	eor #$8000	                EOR #$8000
.3a61c6	85 25		sta $0825	                STA ARGUMENT1+2
.3a61c8	fa		plx		                PLX
.3a61c9	68		pla		                PLA
.3a61ca	28		plp		                PLP
.3a61cb	60		rts		            RTS
.3a61cc					FP_ATAN
.3a61cc	08		php		                PHP
.3a61cd	c2 30		rep #$30	            REP #$30
.3a61cf	48		pha		                PHA
.3a61d0	da		phx		                PHX
.3a61d1	a5 23		lda $0823	                LDA ARGUMENT1
.3a61d3	85 29		sta $0829	                STA ARGUMENT2
.3a61d5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a61d7	85 2b		sta $082b	                STA ARGUMENT2+2
.3a61d9	20 48 5d	jsr $3a5d48	            JSR Q_SQ
.3a61dc	8b		phb		                PHB
.3a61dd	e2 20		sep #$20	            SEP #$20
.3a61df	a9 3a		lda #$3a	                LDA #`atan_coeff
.3a61e1	48		pha		                PHA
.3a61e2	ab		plb		                PLB
.3a61e3	c2 20		rep #$20	            REP #$20
.3a61e5	a2 ee 63	ldx #$63ee	                LDX #<>atan_coeff
.3a61e8	a0 05 00	ldy #$0005	                LDY #5
.3a61eb	20 b9 5c	jsr $3a5cb9	            JSR Q_POLY_HR
.3a61ee	ab		plb		                PLB
.3a61ef	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a61f2	fa		plx		                PLX
.3a61f3	68		pla		                PLA
.3a61f4	28		plp		                PLP
.3a61f5	60		rts		            RTS
.3a61f6					Q_FP_POW_INT
.3a61f6	c2 20		rep #$20	            REP #$20
.3a61f8	a5 23		lda $0823	            LDA ARGUMENT1
.3a61fa	85 29		sta $0829	            STA ARGUMENT2
.3a61fc	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a61fe	85 2b		sta $082b	            STA ARGUMENT2+2
.3a6200	c2 20		rep #$20	            REP #$20
.3a6202	af d2 63 3a	lda $3a63d2	            LDA @l fp_one
.3a6206	85 23		sta $0823	            STA ARGUMENT1
.3a6208	af d4 63 3a	lda $3a63d4	            LDA @l fp_one+2
.3a620c	85 25		sta $0825	            STA ARGUMENT1+2
.3a620e	8a		txa		loop            TXA
.3a620f	f0 30		beq $3a6241	                BEQ done
.3a6211	4a		lsr a		                LSR
.3a6212	aa		tax		                TAX
.3a6213	90 03		bcc $3a6218	                BCC next
.3a6215	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a6218					next
.3a6218	c2 20		rep #$20	            REP #$20
.3a621a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a621c	48		pha		            PHA
.3a621d	a5 23		lda $0823	            LDA ARGUMENT1
.3a621f	48		pha		            PHA
.3a6220	c2 20		rep #$20	            REP #$20
.3a6222	a5 29		lda $0829	            LDA ARGUMENT2
.3a6224	85 23		sta $0823	            STA ARGUMENT1
.3a6226	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a6228	85 25		sta $0825	            STA ARGUMENT1+2
.3a622a	20 48 5d	jsr $3a5d48	            JSR Q_SQ
.3a622d	c2 20		rep #$20	            REP #$20
.3a622f	a5 23		lda $0823	            LDA ARGUMENT1
.3a6231	85 29		sta $0829	            STA ARGUMENT2
.3a6233	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a6235	85 2b		sta $082b	            STA ARGUMENT2+2
.3a6237	c2 20		rep #$20	            REP #$20
.3a6239	68		pla		            PLA
.3a623a	85 23		sta $0823	            STA ARGUMENT1
.3a623c	68		pla		            PLA
.3a623d	85 25		sta $0825	            STA ARGUMENT1+2
.3a623f	80 cd		bra $3a620e	                BRA loop
.3a6241					done
.3a6241	60		rts		            RTS
.3a6242					Q_FP_EXP
.3a6242	08		php		                PHP
.3a6243	c2 30		rep #$30	            REP #$30
.3a6245	48		pha		                PHA
.3a6246	da		phx		                PHX
.3a6247	8b		phb		                PHB
.3a6248	e2 20		sep #$20	            SEP #$20
.3a624a	a9 3a		lda #$3a	                LDA #`exp_coeff
.3a624c	48		pha		                PHA
.3a624d	ab		plb		                PLB
.3a624e	c2 20		rep #$20	            REP #$20
.3a6250	a2 02 64	ldx #$6402	                LDX #<>exp_coeff
.3a6253	5a		phy		                PHY
.3a6254	a0 0a 00	ldy #$000a	                LDY #10
.3a6257	20 b9 5c	jsr $3a5cb9	            JSR Q_POLY_HR
.3a625a	7a		ply		                PLY
.3a625b	ab		plb		                PLB
.3a625c	fa		plx		                PLX
.3a625d	68		pla		                PLA
.3a625e	28		plp		                PLP
.3a625f	60		rts		            RTS
.3a6260					FP_EXP
.3a6260	08		php		                PHP
.3a6261	c2 30		rep #$30	            REP #$30
.3a6263	48		pha		                PHA
.3a6264	da		phx		                PHX
.3a6265	5a		phy		                PHY
.3a6266	a5 23		lda $0823	                LDA ARGUMENT1   ; special case for x==0
.3a6268	05 25		ora $0825	                ORA ARGUMENT1+2
.3a626a	d0 10		bne $3a627c	                BNE notzero
.3a626c	c2 20		rep #$20	            REP #$20
.3a626e	af d2 63 3a	lda $3a63d2	            LDA @l fp_one
.3a6272	85 23		sta $0823	            STA ARGUMENT1
.3a6274	af d4 63 3a	lda $3a63d4	            LDA @l fp_one+2
.3a6278	85 25		sta $0825	            STA ARGUMENT1+2
.3a627a	80 61		bra $3a62dd	                BRA done
.3a627c	a5 25		lda $0825	notzero         LDA ARGUMENT1+2 ; check if negative
.3a627e	29 00 80	and #$8000	                AND #$8000
.3a6281	a8		tay		                TAY             ; Y != 0 -> arg was negative
.3a6282	f0 07		beq $3a628b	                BEQ notneg
.3a6284	a5 25		lda $0825	                LDA ARGUMENT1+2 ; negate x
.3a6286	29 ff 7f	and #$7fff	                AND #$7FFF
.3a6289	85 25		sta $0825	                STA ARGUMENT1+2
.3a628b					notneg
.3a628b	c2 20		rep #$20	            REP #$20
.3a628d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a628f	48		pha		            PHA
.3a6290	a5 23		lda $0823	            LDA ARGUMENT1
.3a6292	48		pha		            PHA
.3a6293	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a6296	a6 23		ldx $0823	                LDX ARGUMENT1              ; INT(x) now in ARGUMENT1; low 16 bits into X
.3a6298	20 aa 06	jsr $3a06aa	            JSR ASS_ARG1_FLOAT
.3a629b	c2 20		rep #$20	            REP #$20
.3a629d	a5 23		lda $0823	            LDA ARGUMENT1
.3a629f	85 29		sta $0829	            STA ARGUMENT2
.3a62a1	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a62a3	85 2b		sta $082b	            STA ARGUMENT2+2
.3a62a5	c2 20		rep #$20	            REP #$20
.3a62a7	68		pla		            PLA
.3a62a8	85 23		sta $0823	            STA ARGUMENT1
.3a62aa	68		pla		            PLA
.3a62ab	85 25		sta $0825	            STA ARGUMENT1+2
.3a62ad	20 82 54	jsr $3a5482	            JSR OP_FP_SUB
.3a62b0	20 42 62	jsr $3a6242	            JSR Q_FP_EXP
.3a62b3	c2 20		rep #$20	            REP #$20
.3a62b5	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a62b7	48		pha		            PHA
.3a62b8	a5 23		lda $0823	            LDA ARGUMENT1
.3a62ba	48		pha		            PHA
.3a62bb	c2 20		rep #$20	            REP #$20
.3a62bd	af 36 64 3a	lda $3a6436	            LDA @leexp01
.3a62c1	85 23		sta $0823	            STA ARGUMENT1
.3a62c3	af 38 64 3a	lda $3a6438	            LDA @leexp01+2
.3a62c7	85 25		sta $0825	            STA ARGUMENT1+2
.3a62c9	20 f6 61	jsr $3a61f6	            JSR Q_FP_POW_INT
.3a62cc	c2 20		rep #$20	            REP #$20
.3a62ce	68		pla		            PLA
.3a62cf	85 29		sta $0829	            STA ARGUMENT2
.3a62d1	68		pla		            PLA
.3a62d2	85 2b		sta $082b	            STA ARGUMENT2+2
.3a62d4	20 23 55	jsr $3a5523	            JSR OP_FP_MUL
.3a62d7	98		tya		                TYA
.3a62d8	f0 03		beq $3a62dd	                BEQ done
.3a62da	20 7e 5d	jsr $3a5d7e	            JSR Q_INV
.3a62dd	7a		ply		done            PLY
.3a62de	fa		plx		                PLX
.3a62df	68		pla		                PLA
.3a62e0	28		plp		                PLP
.3a62e1	60		rts		            RTS
.3a62e2					FP_SQR
.3a62e2	08		php		                PHP
.3a62e3	c2 30		rep #$30	            REP #$30
.3a62e5	48		pha		                PHA
.3a62e6	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a62e8	10 1f		bpl $3a6309	                BPL arg_ok
.3a62ea	08		php		            PHP
.3a62eb	c2 20		rep #$20	            REP #$20
.3a62ed	48		pha		            PHA
.3a62ee	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a62f1	5b		tcd		            TCD
.3a62f2	68		pla		            PLA
.3a62f3	28		plp		            PLP
.3a62f4	e2 20		sep #$20	            SEP #$20
.3a62f6	a9 17		lda #$17	            LDA #ERR_DOMAIN
.3a62f8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a62fc	c2 20		rep #$20	            REP #$20
.3a62fe	29 ff 00	and #$00ff	            AND #$00FF
.3a6301	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6304	e2 20		sep #$20	            SEP #$20
.3a6306	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6309					arg_ok
.3a6309	c2 30		rep #$30	            REP #$30
.3a630b	05 23		ora $0823	                ORA ARGUMENT1
.3a630d	f0 68		beq $3a6377	                BEQ done
.3a630f	c2 20		rep #$20	            REP #$20
.3a6311	af d6 63 3a	lda $3a63d6	            LDA @l fp_two
.3a6315	85 29		sta $0829	            STA ARGUMENT2
.3a6317	af d8 63 3a	lda $3a63d8	            LDA @l fp_two+2
.3a631b	85 2b		sta $082b	            STA ARGUMENT2+2
.3a631d	e2 20		sep #$20	            SEP #$20
.3a631f	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a6321	85 2d		sta $082d	                STA ARGTYPE2
.3a6323	c2 20		rep #$20	            REP #$20
.3a6325	c2 20		rep #$20	            REP #$20
.3a6327	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a6329	48		pha		            PHA
.3a632a	a5 23		lda $0823	            LDA ARGUMENT1
.3a632c	48		pha		            PHA
.3a632d					loop
.3a632d	20 d8 54	jsr $3a54d8	            JSR OP_FP_DIV
.3a6330	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6332	c5 2b		cmp $082b	                CMP ARGUMENT2+2
.3a6334	d0 09		bne $3a633f	                BNE more
.3a6336	a5 23		lda $0823	                LDA ARGUMENT1
.3a6338	45 29		eor $0829	                EOR ARGUMENT2
.3a633a	29 f8 ff	and #$fff8	                AND #$FFF8
.3a633d	f0 30		beq $3a636f	                BEQ exitloop
.3a633f					more
.3a633f	20 8d 54	jsr $3a548d	            JSR OP_FP_ADD
.3a6342	c2 20		rep #$20	            REP #$20
.3a6344	af d6 63 3a	lda $3a63d6	            LDA @l fp_two
.3a6348	85 29		sta $0829	            STA ARGUMENT2
.3a634a	af d8 63 3a	lda $3a63d8	            LDA @l fp_two+2
.3a634e	85 2b		sta $082b	            STA ARGUMENT2+2
.3a6350	20 d8 54	jsr $3a54d8	            JSR OP_FP_DIV
.3a6353	c2 20		rep #$20	            REP #$20
.3a6355	a5 23		lda $0823	            LDA ARGUMENT1
.3a6357	85 29		sta $0829	            STA ARGUMENT2
.3a6359	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a635b	85 2b		sta $082b	            STA ARGUMENT2+2
.3a635d	c2 20		rep #$20	            REP #$20
.3a635f	68		pla		            PLA
.3a6360	85 23		sta $0823	            STA ARGUMENT1
.3a6362	68		pla		            PLA
.3a6363	85 25		sta $0825	            STA ARGUMENT1+2
.3a6365	c2 20		rep #$20	            REP #$20
.3a6367	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a6369	48		pha		            PHA
.3a636a	a5 23		lda $0823	            LDA ARGUMENT1
.3a636c	48		pha		            PHA
.3a636d	80 be		bra $3a632d	                BRA loop
.3a636f					exitloop
.3a636f	c2 20		rep #$20	            REP #$20
.3a6371	68		pla		            PLA
.3a6372	85 29		sta $0829	            STA ARGUMENT2
.3a6374	68		pla		            PLA
.3a6375	85 2b		sta $082b	            STA ARGUMENT2+2
.3a6377	68		pla		done            PLA
.3a6378	28		plp		                PLP
.3a6379	60		rts		            RTS
.3a637a					cos_coeff
>3a637a	01 0d d0 37			                .dword $37D00D01
>3a637e	61 0b b6 ba			                .dword $BAB60B61
>3a6382	ab aa 2a 3d			                .dword $3D2AAAAB
>3a6386	00 00 00 bf			                .dword $BF000000
>3a638a	00 00 80 3f			                .dword $3F800000
.3a638e					sin_coeff
>3a638e	1d ef 38 36			                .dword $3638EF1D
>3a6392	01 0d 50 b9			                .dword $B9500D01
>3a6396	89 88 08 3c			                .dword $3C088889
>3a639a	ab aa 2a be			                .dword $BE2AAAAB
>3a639e	00 00 80 3f			                .dword $3F800000
.3a63a2					tan_coeff
>3a63a2	a4 27 b3 3c			                .dword $3CB327A4
>3a63a6	d1 0d 5d 3d			                .dword $3D5D0DD1
>3a63aa	89 88 08 3e			                .dword $3E088889
>3a63ae	ab aa aa 3e			                .dword $3EAAAAAB
>3a63b2	00 00 80 3f			                .dword $3F800000
.3a63b6					ln_coeff
>3a63b6	89 88 88 3d			                .dword $3D888889
>3a63ba	d9 89 9d 3d			                .dword $3D9D89D9
>3a63be	8c 2e ba 3d			                .dword $3DBA2E8C
>3a63c2	39 8e e3 3d			                .dword $3DE38E39
>3a63c6	25 49 12 3e			                .dword $3E124925
>3a63ca	cd cc 4c 3e			                .dword $3E4CCCCD
>3a63ce	ab aa aa 3e			                .dword $3EAAAAAB
>3a63d2	00 00 80 3f			fp_one          .dword $3F800000
>3a63d6	00 00 00 40			fp_two          .dword $40000000
.3a63da					asin_coeff
>3a63da	8e e3 f8 3c			                .dword $3CF8E38E
>3a63de	6e db 36 3d			                .dword $3D36DB6E
>3a63e2	9a 99 99 3d			                .dword $3D99999A
>3a63e6	ab aa 2a 3e			                .dword $3E2AAAAB
>3a63ea	00 00 80 3f			                .dword $3F800000
.3a63ee					atan_coeff
>3a63ee	39 8e e3 3d			                .dword $3DE38E39
>3a63f2	25 49 12 be			                .dword $BE124925
>3a63f6	cd cc 4c 3e			                .dword $3E4CCCCD
>3a63fa	ab aa aa be			                .dword $BEAAAAAB
>3a63fe	00 00 80 3f			                .dword $3F800000
.3a6402					exp_coeff
>3a6402	1d ef 38 36			        .dword $3638EF1D
>3a6406	01 0d d0 37			        .dword $37D00D01
>3a640a	01 0d 50 39			        .dword $39500D01
>3a640e	61 0b b6 3a			        .dword $3AB60B61
>3a6412	89 88 08 3c			        .dword $3C088889
>3a6416	ab aa 2a 3d			        .dword $3D2AAAAB
>3a641a	ab aa 2a 3e			        .dword $3E2AAAAB
>3a641e	00 00 00 3f			        .dword $3F000000
>3a6422	00 00 80 3f			        .dword $3F800000
>3a6426	00 00 80 3f			        .dword $3F800000
>3a642a	c1 2c a1 6d			eexp64          .dword $6DA12CC1
>3a642e	5f 97 07 4b			eexp16          .dword $4B07975F
>3a6432	81 64 5a 42			eexp04          .dword $425A6481
>3a6436	54 f8 2d 40			eexp01          .dword $402DF854
>3a643a	db 0f c9 40			twopi           .dword $40C90FDB
>3a643e	db 0f 49 40			onepi           .dword $40490FDB
>3a6442	db 0f c9 3f			halfpi          .dword $3FC90FDB
>3a6446	db 0f 49 3f			quarterpi       .dword $3F490FDB

;******  Return to file: src\basic816.s


;******  Processing file: src\arrays.s

.3a644a					ARR_ALLOC
.3a644a	08		php		                PHP
.3a644b	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a644e	c2 20		rep #$20	            REP #$20
.3a6450	a9 01 00	lda #$0001	                LDA #1                      ; ARGUMENT1 := 1
.3a6453	85 23		sta $0823	                STA ARGUMENT1
.3a6455	a9 00 00	lda #$0000	                LDA #0
.3a6458	85 25		sta $0825	                STA ARGUMENT1+2
.3a645a	e2 20		sep #$20	            SEP #$20
.3a645c	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.3a6460	c2 20		rep #$20	            REP #$20
.3a6462	29 ff 00	and #$00ff	                AND #$00FF
.3a6465	85 8f		sta $088f	                STA MCOUNT                  ; Save it to MCOUNT for later
.3a6467	a8		tay		                TAY                         ; Y := number of dimensions
.3a6468	a2 01 00	ldx #$0001	                LDX #1                      ; X := index to size 0
.3a646b					size_loop
.3a646b	c2 20		rep #$20	            REP #$20
.3a646d	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X           ; ARGUMENT2 := Ith dimension
.3a6471	85 29		sta $0829	                STA ARGUMENT2
.3a6473	a9 00 00	lda #$0000	                LDA #0
.3a6476	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6478	20 cd 26	jsr $3a26cd	            JSR OP_MULTIPLY
.3a647b	e8		inx		                INX
.3a647c	e8		inx		                INX
.3a647d	88		dey		                DEY
.3a647e	d0 eb		bne $3a646b	                BNE size_loop               ; If there are more dimensions, take the next one
.3a6480	c2 20		rep #$20	            REP #$20
.3a6482	a9 04 00	lda #$0004	                LDA #ARGUMENT_SIZE-1        ; Size of a data item (don't include the type code)
.3a6485	85 29		sta $0829	                STA ARGUMENT2
.3a6487	a9 00 00	lda #$0000	                LDA #0
.3a648a	85 2b		sta $082b	                STA ARGUMENT2+2
.3a648c	20 cd 26	jsr $3a26cd	            JSR OP_MULTIPLY
.3a648f	e2 20		sep #$20	            SEP #$20
.3a6491	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF             ; SCRATCH := N * 2
.3a6495	85 0c		sta $080c	                STA SCRATCH
.3a6497	a9 00		lda #$00	                LDA #0
.3a6499	85 0d		sta $080d	                STA SCRATCH+1
.3a649b	c2 20		rep #$20	            REP #$20
.3a649d	06 0c		asl $080c	                ASL SCRATCH
.3a649f	38		sec		                SEC                         ; ARGUMENT1 := size of the complete block
.3a64a0	a5 23		lda $0823	                LDA ARGUMENT1
.3a64a2	65 0c		adc $080c	                ADC SCRATCH                 ; Size of data area + N*2 + 1 (in carry)
.3a64a4	85 23		sta $0823	                STA ARGUMENT1
.3a64a6	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a64a8	69 00 00	adc #$0000	                ADC #0
.3a64ab	85 25		sta $0825	                STA ARGUMENT1+2
.3a64ad	d0 29		bne $3a64d8	                BNE too_big                 ; size > 16-bit? Yes: throw an error
.3a64af	e2 20		sep #$20	            SEP #$20
.3a64b1	a5 ea		lda $08ea	                LDA TOFINDTYPE              ; Get the type
.3a64b3	09 80		ora #$80	                ORA #$80                    ; Flip the flag to make it an array of that type
.3a64b5	a6 23		ldx $0823	                LDX ARGUMENT1               ; Get the computed size
.3a64b7	20 b9 0f	jsr $3a0fb9	            JSR ALLOC
.3a64ba	e2 20		sep #$20	            SEP #$20
.3a64bc	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.3a64c0	87 c0		sta [$08c0]	                STA [CURRBLOCK]             ; Write the number of dimensions to the array's preamble
.3a64c2	a0 01 00	ldy #$0001	                LDY #1
.3a64c5	a2 00 00	ldx #$0000	                LDX #0
.3a64c8					copy_loop
.3a64c8	e2 20		sep #$20	            SEP #$20
.3a64ca	bf 01 4d 00	lda $004d01,x	                LDA @lARRIDXBUF+1,X         ; ARGUMENT2 := Ith dimension
.3a64ce	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y           ; And write the dimension to the array's preamble
.3a64d0	e4 8f		cpx $088f	                CPX MCOUNT                  ; Have we written the last byte?
.3a64d2	f0 23		beq $3a64f7	                BEQ null_array              ; Yes: clear the array
.3a64d4	e8		inx		                INX                         ; No: move to the next byte
.3a64d5	c8		iny		                INY
.3a64d6	80 f0		bra $3a64c8	                BRA copy_loop
.3a64d8					too_big
.3a64d8	08		php		            PHP
.3a64d9	c2 20		rep #$20	            REP #$20
.3a64db	48		pha		            PHA
.3a64dc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a64df	5b		tcd		            TCD
.3a64e0	68		pla		            PLA
.3a64e1	28		plp		            PLP
.3a64e2	e2 20		sep #$20	            SEP #$20
.3a64e4	a9 09		lda #$09	            LDA #ERR_RANGE
.3a64e6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a64ea	c2 20		rep #$20	            REP #$20
.3a64ec	29 ff 00	and #$00ff	            AND #$00FF
.3a64ef	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a64f2	e2 20		sep #$20	            SEP #$20
.3a64f4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a64f7					null_array
.3a64f7	e2 20		sep #$20	            SEP #$20
.3a64f9	38		sec		                SEC                         ; INDEX := pointer to first value
.3a64fa	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a64fc	67 c0		adc [$08c0]	                ADC [CURRBLOCK]
.3a64fe	85 08		sta $0808	                STA INDEX
.3a6500	a5 c1		lda $08c1	                LDA CURRBLOCK+1
.3a6502	69 00		adc #$00	                ADC #0
.3a6504	85 09		sta $0809	                STA INDEX+1
.3a6506	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a6508	69 00		adc #$00	                ADC #0
.3a650a	85 0a		sta $080a	                STA INDEX+2
.3a650c	64 0b		stz $080b	                STZ INDEX+3
.3a650e	c2 20		rep #$20	            REP #$20
.3a6510	a0 05 00	ldy #$0005	                LDY #HEAPOBJ.END            ; SCRATCH := pointer the the first byte after the array
.3a6513	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a6515	85 0c		sta $080c	                STA SCRATCH
.3a6517	e2 20		sep #$20	            SEP #$20
.3a6519	c8		iny		                INY
.3a651a	c8		iny		                INY
.3a651b	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a651d	85 0e		sta $080e	                STA SCRATCH+2
.3a651f	64 0f		stz $080f	                STZ SCRATCH+3
.3a6521					clr_loop
.3a6521	e2 20		sep #$20	            SEP #$20
.3a6523	a9 00		lda #$00	                LDA #0
.3a6525	87 08		sta [$0808]	                STA [INDEX]                 ; Clear the byte
.3a6527	c2 20		rep #$20	            REP #$20
.3a6529	18		clc		                CLC                         ; Increment INDEX
.3a652a	a5 08		lda $0808	                LDA INDEX
.3a652c	69 01 00	adc #$0001	                ADC #1
.3a652f	85 08		sta $0808	                STA INDEX
.3a6531	a5 0a		lda $080a	                LDA INDEX+2
.3a6533	69 00 00	adc #$0000	                ADC #0
.3a6536	85 0a		sta $080a	                STA INDEX+2
.3a6538	c5 0e		cmp $080e	                CMP SCRATCH+2               ; INDEX == SCRATCH?
.3a653a	d0 e5		bne $3a6521	                BNE clr_loop                ; No: write to this next byte
.3a653c	a5 08		lda $0808	                LDA INDEX
.3a653e	c5 0c		cmp $080c	                CMP SCRATCH
.3a6540	d0 df		bne $3a6521	                BNE clr_loop
.3a6542					done
.3a6542	28		plp		                PLP
.3a6543	60		rts		            RTS
.3a6544					ARR_CELL
.3a6544	08		php		                PHP
.3a6545	c2 20		rep #$20	            REP #$20
.3a6547	64 08		stz $0808	                STZ INDEX               ; INDEX := 0
.3a6549	64 0a		stz $080a	                STZ INDEX+2
.3a654b	e2 20		sep #$20	            SEP #$20
.3a654d	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF         ; MCOUNT := N (number of dimensions)
.3a6551	85 8f		sta $088f	                STA MCOUNT
.3a6553	64 90		stz $0890	                STZ MCOUNT+1
.3a6555	a2 01 00	ldx #$0001	                LDX #1                  ; X := index to dimension 0
.3a6558	e2 20		sep #$20	            SEP #$20
.3a655a	a7 c0		lda [$08c0]	                LDA [CURRBLOCK]         ; Make sure the dimensions of the array
.3a655c	c5 8f		cmp $088f	                CMP MCOUNT              ; ... match those requested
.3a655e	f0 1f		beq $3a657f	                BEQ dims_match          ; Yes: the dimensions match
.3a6560					arg_err
.3a6560	08		php		            PHP
.3a6561	c2 20		rep #$20	            REP #$20
.3a6563	48		pha		            PHA
.3a6564	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6567	5b		tcd		            TCD
.3a6568	68		pla		            PLA
.3a6569	28		plp		            PLP
.3a656a	e2 20		sep #$20	            SEP #$20
.3a656c	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a656e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6572	c2 20		rep #$20	            REP #$20
.3a6574	29 ff 00	and #$00ff	            AND #$00FF
.3a6577	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a657a	e2 20		sep #$20	            SEP #$20
.3a657c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a657f	c9 01		cmp #$01	dims_match      CMP #1                  ; Check to see if this array is one dimensional
.3a6581	f0 3a		beq $3a65bd	                BEQ add_last            ; If so, just add the index of the cell to INDEX
.3a6583	a0 01 00	ldy #$0001	                LDY #1
.3a6586					index_loop
.3a6586	e2 20		sep #$20	            SEP #$20
.3a6588	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; ARGUMENT1 := I_j
.3a658c	85 23		sta $0823	                STA ARGUMENT1
.3a658e	64 24		stz $0824	                STZ ARGUMENT1+1
.3a6590	64 25		stz $0825	                STZ ARGUMENT1+2
.3a6592	64 26		stz $0826	                STZ ARGUMENT1+3
.3a6594	b7 c0		lda [$08c0],y	                LDA [CURRBLOCK],Y       ; ARGUMENT2 := D_j
.3a6596	85 29		sta $0829	                STA ARGUMENT2
.3a6598	64 2a		stz $082a	                STZ ARGUMENT2+1
.3a659a	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a659c	64 2c		stz $082c	                STZ ARGUMENT2+3
.3a659e	a5 23		lda $0823	                LDA ARGUMENT1
.3a65a0	c5 29		cmp $0829	                CMP ARGUMENT2           ; Is I_j >= D_j
.3a65a2	b0 68		bcs $3a660c	                BGE range_err           ; Yes: throw an out-of-range error
.3a65a4	20 cd 26	jsr $3a26cd	            JSR OP_MULTIPLY
.3a65a7	c2 20		rep #$20	            REP #$20
.3a65a9	18		clc		                CLC                     ; INDEX := INDEX + ARGUMENT1
.3a65aa	a5 08		lda $0808	                LDA INDEX
.3a65ac	65 23		adc $0823	                ADC ARGUMENT1
.3a65ae	85 08		sta $0808	                STA INDEX
.3a65b0	a5 0a		lda $080a	                LDA INDEX+2
.3a65b2	65 25		adc $0825	                ADC ARGUMENT1+2
.3a65b4	85 0a		sta $080a	                STA INDEX+2
.3a65b6	e8		inx		                INX
.3a65b7	e8		inx		                INX
.3a65b8	c8		iny		                INY
.3a65b9	c4 8f		cpy $088f	                CPY MCOUNT              ; Are we on the last index?
.3a65bb	d0 c9		bne $3a6586	                BNE index_loop          ; No: move to the next index and try again
.3a65bd					add_last
.3a65bd	e2 20		sep #$20	            SEP #$20
.3a65bf	18		clc		                CLC
.3a65c0	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; INDEX := INDEX + I_(n-1)
.3a65c4	85 90		sta $0890	                STA MCOUNT+1
.3a65c6	65 08		adc $0808	                ADC INDEX
.3a65c8	85 08		sta $0808	                STA INDEX
.3a65ca	a5 09		lda $0809	                LDA INDEX+1
.3a65cc	69 00		adc #$00	                ADC #0
.3a65ce	85 09		sta $0809	                STA INDEX+1
.3a65d0	c2 20		rep #$20	            REP #$20
.3a65d2	a5 0a		lda $080a	                LDA INDEX+2
.3a65d4	69 00 00	adc #$0000	                ADC #0
.3a65d7	85 0a		sta $080a	                STA INDEX+2
.3a65d9	c2 20		rep #$20	            REP #$20
.3a65db	06 08		asl $0808	                ASL INDEX               ; INDEX := INDEX * 4 (size of a value)
.3a65dd	26 0a		rol $080a	                ROL INDEX+2
.3a65df	06 08		asl $0808	                ASL INDEX
.3a65e1	26 0a		rol $080a	                ROL INDEX+2
.3a65e3	e2 20		sep #$20	            SEP #$20
.3a65e5	38		sec		                SEC
.3a65e6	a5 08		lda $0808	                LDA INDEX
.3a65e8	65 8f		adc $088f	                ADC MCOUNT
.3a65ea	85 08		sta $0808	                STA INDEX
.3a65ec	a5 09		lda $0809	                LDA INDEX+1
.3a65ee	69 00		adc #$00	                ADC #0
.3a65f0	85 09		sta $0809	                STA INDEX+1
.3a65f2	c2 20		rep #$20	            REP #$20
.3a65f4	a5 0a		lda $080a	                LDA INDEX+2
.3a65f6	69 00 00	adc #$0000	                ADC #0
.3a65f9	85 0a		sta $080a	                STA INDEX+2
.3a65fb	18		clc		                CLC                     ; INDEX := INDEX + CURRBLOCK (point to the address desired)
.3a65fc	a5 08		lda $0808	                LDA INDEX
.3a65fe	65 c0		adc $08c0	                ADC CURRBLOCK
.3a6600	85 08		sta $0808	                STA INDEX
.3a6602	e2 20		sep #$20	            SEP #$20
.3a6604	a5 0a		lda $080a	                LDA INDEX+2
.3a6606	65 c2		adc $08c2	                ADC CURRBLOCK+2
.3a6608	85 0a		sta $080a	                STA INDEX+2
.3a660a	28		plp		                PLP
.3a660b	60		rts		            RTS
.3a660c					range_err
.3a660c	08		php		            PHP
.3a660d	c2 20		rep #$20	            REP #$20
.3a660f	48		pha		            PHA
.3a6610	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6613	5b		tcd		            TCD
.3a6614	68		pla		            PLA
.3a6615	28		plp		            PLP
.3a6616	e2 20		sep #$20	            SEP #$20
.3a6618	a9 09		lda #$09	            LDA #ERR_RANGE
.3a661a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a661e	c2 20		rep #$20	            REP #$20
.3a6620	29 ff 00	and #$00ff	            AND #$00FF
.3a6623	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6626	e2 20		sep #$20	            SEP #$20
.3a6628	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a662b					ARR_SET
.3a662b	08		php		                PHP
.3a662c	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a662f	e2 20		sep #$20	            SEP #$20
.3a6631	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.3a6634	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a6636	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.3a6638	c5 27		cmp $0827	                CMP ARGTYPE1        ; is it the same as the argument?
.3a663a	d0 28		bne $3a6664	                BNE type_mismatch   ; No: throw a type mismatch error
.3a663c	a5 27		lda $0827	                LDA ARGTYPE1        ; Save the type
.3a663e	48		pha		                PHA
.3a663f	c2 20		rep #$20	            REP #$20
.3a6641	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Save ARGUMENT1
.3a6643	48		pha		                PHA
.3a6644	a5 23		lda $0823	                LDA ARGUMENT1
.3a6646	48		pha		                PHA
.3a6647	20 44 65	jsr $3a6544	            JSR ARR_CELL
.3a664a	68		pla		                PLA                 ; Restore ARGUMENT1
.3a664b	85 23		sta $0823	                STA ARGUMENT1
.3a664d	68		pla		                PLA
.3a664e	85 25		sta $0825	                STA ARGUMENT1+2
.3a6650	e2 20		sep #$20	            SEP #$20
.3a6652	68		pla		                PLA
.3a6653	85 27		sta $0827	                STA ARGTYPE1
.3a6655	c2 20		rep #$20	            REP #$20
.3a6657	a5 23		lda $0823	                LDA ARGUMENT1       ; Set the value in the cell
.3a6659	87 08		sta [$0808]	                STA [INDEX]
.3a665b	a0 02 00	ldy #$0002	                LDY #2
.3a665e	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6660	97 08		sta [$0808],y	                STA [INDEX],Y
.3a6662	28		plp		                PLP
.3a6663	60		rts		            RTS
.3a6664					type_mismatch
.3a6664	08		php		            PHP
.3a6665	c2 20		rep #$20	            REP #$20
.3a6667	48		pha		            PHA
.3a6668	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a666b	5b		tcd		            TCD
.3a666c	68		pla		            PLA
.3a666d	28		plp		            PLP
.3a666e	e2 20		sep #$20	            SEP #$20
.3a6670	a9 04		lda #$04	            LDA #ERR_TYPE
.3a6672	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6676	c2 20		rep #$20	            REP #$20
.3a6678	29 ff 00	and #$00ff	            AND #$00FF
.3a667b	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a667e	e2 20		sep #$20	            SEP #$20
.3a6680	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6683					ARR_REF
.3a6683	08		php		                PHP
.3a6684	20 f5 11	jsr $3a11f5	            JSR HEAP_GETHED
.3a6687	f4 00 00	pea #$0000	                PEA #0              ; Make room on the stack that ARR_CELL expects
.3a668a	f4 00 00	pea #$0000	                PEA #0
.3a668d	e2 20		sep #$20	            SEP #$20
.3a668f	48		pha		                PHA
.3a6690	20 44 65	jsr $3a6544	            JSR ARR_CELL
.3a6693	e2 20		sep #$20	            SEP #$20
.3a6695	68		pla		                PLA
.3a6696	c2 20		rep #$20	            REP #$20
.3a6698	68		pla		                PLA
.3a6699	68		pla		                PLA
.3a669a	c2 20		rep #$20	            REP #$20
.3a669c	a7 08		lda [$0808]	                LDA [INDEX]         ; Get the value in the cell
.3a669e	85 23		sta $0823	                STA ARGUMENT1
.3a66a0	a0 02 00	ldy #$0002	                LDY #2
.3a66a3	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a66a5	85 25		sta $0825	                STA ARGUMENT1+2
.3a66a7	e2 20		sep #$20	            SEP #$20
.3a66a9	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.3a66ac	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a66ae	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.3a66b0	85 27		sta $0827	                STA ARGTYPE1        ; Set the type of the return value
.3a66b2	28		plp		                PLP
.3a66b3	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\dos.s

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					FILESIZE            .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
>3af073					CLUSTER_BUFF    .fill 512           ; A buffer for cluster read/write operations
.3af273					FD_IN
>3af273					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>3af274					DEV                 .byte ?             ; The ID of the device holding the file
>3af275					PATH                .dword ?            ; Pointer to a NULL terminated path string
>3af279					CLUSTER             .dword ?            ; The current cluster of the file.
>3af27d					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>3af281					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>3af285					FILESIZE            .dword ?            ; The size of the file
>3af289					CREATE_DATE         .word ?             ; The creation date of the file
>3af28b					CREATE_TIME         .word ?             ; The creation time of the file
>3af28d					MODIFIED_DATE       .word ?             ; The modification date of the file
>3af28f					MODIFIED_TIME       .word ?             ; The modification time of the file
.3a66b4					PR_FILESIZE
.3a66b4	da		phx		                PHX
.3a66b5	0b		phd		                PHD
.3a66b6	08		php		                PHP
.3a66b7	08		php		            PHP
.3a66b8	c2 20		rep #$20	            REP #$20
.3a66ba	48		pha		            PHA
.3a66bb	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a66be	5b		tcd		            TCD
.3a66bf	68		pla		            PLA
.3a66c0	28		plp		            PLP
.3a66c1	c2 30		rep #$30	            REP #$30
.3a66c3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a66c5	89 f0 ff	bit #$fff0	                BIT #$FFF0              ; Check to see if the amount is in MB range
.3a66c8	d0 29		bne $3a66f3	                BNE pr_mb               ; If so, print it in MBs
.3a66ca	89 0f 00	bit #$000f	                BIT #$000F              ; Check to see if the amount is in KB range
.3a66cd	d0 0c		bne $3a66db	                BNE pr_kb
.3a66cf	a5 23		lda $0823	                LDA ARGUMENT1
.3a66d1	89 00 fc	bit #$fc00	                BIT #$FC00
.3a66d4	d0 05		bne $3a66db	                BNE pr_kb               ; If so, print it in KBs
.3a66d6					pr_regular
.3a66d6	20 46 44	jsr $3a4446	            JSR PR_INTEGER
.3a66d9	80 2e		bra $3a6709	                BRA done
.3a66db	a2 0a 00	ldx #$000a	pr_kb           LDX #10                 ; Shift so the amount in KB is in ARGUMENT1
.3a66de	46 25		lsr $0825	kb_shift        LSR ARGUMENT1+2
.3a66e0	66 23		ror $0823	                ROR ARGUMENT1
.3a66e2	ca		dex		                DEX
.3a66e3	d0 f9		bne $3a66de	                BNE kb_shift
.3a66e5	20 46 44	jsr $3a4446	            JSR PR_INTEGER
.3a66e8	e2 20		sep #$20	            SEP #$20
.3a66ea	a9 4b		lda #$4b	                LDA #'K'
.3a66ec	20 18 00	jsr $3a0018	            JSR PRINTC
.3a66ef	c2 20		rep #$20	            REP #$20
.3a66f1	80 16		bra $3a6709	                BRA done
.3a66f3	a2 14 00	ldx #$0014	pr_mb           LDX #20                 ; Shift so the amount in MB is in ARGUMENT1
.3a66f6	46 25		lsr $0825	mb_shift        LSR ARGUMENT1+2
.3a66f8	66 23		ror $0823	                ROR ARGUMENT1
.3a66fa	ca		dex		                DEX
.3a66fb	d0 f9		bne $3a66f6	                BNE mb_shift
.3a66fd	20 46 44	jsr $3a4446	            JSR PR_INTEGER
.3a6700	e2 20		sep #$20	            SEP #$20
.3a6702	a9 4d		lda #$4d	                LDA #'M'
.3a6704	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6707	c2 20		rep #$20	            REP #$20
.3a6709	28		plp		done            PLP
.3a670a	2b		pld		                PLD
.3a670b	fa		plx		                PLX
.3a670c	60		rts		            RTS
.3a670d					CMD_DIR
.3a670d	0b		phd		                PHD
.3a670e	08		php		                PHP
.3a670f	c2 30		rep #$30	            REP #$30
.3a6711	a9 00 00	lda #$0000	                LDA #0                      ; Zero out the pagination line count
.3a6714	8f b6 08 00	sta $0008b6	                STA @l LINECOUNT
.3a6718	8f b8 08 00	sta $0008b8	                STA @l LINECOUNT+2
.3a671c	e2 20		sep #$20	            SEP #$20
.3a671e	20 f8 20	jsr $3a20f8	            JSR PEEK_TOK
.3a6721	c9 00		cmp #$00	                CMP #0
.3a6723	f0 08		beq $3a672d	                BEQ set_null                ; If none provided, set the path to empty
.3a6725	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6728	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a672b	80 11		bra $3a673e	                BRA set_fd
.3a672d					set_null
.3a672d	c2 20		rep #$20	            REP #$20
.3a672f	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT1 to the NULL string
.3a6732	85 23		sta $0823	                STA ARGUMENT1
.3a6734	85 25		sta $0825	                STA ARGUMENT1+2
.3a6736	e2 20		sep #$20	            SEP #$20
.3a6738	a9 02		lda #$02	                LDA #TYPE_STRING
.3a673a	85 27		sta $0827	                STA ARGTYPE1
.3a673c	c2 20		rep #$20	            REP #$20
.3a673e					set_fd
.3a673e	20 6e 68	jsr $3a686e	            JSR SETFILEDESC
.3a6741	22 08 11 00	jsl $001108	                JSL FK_DIROPEN              ; Open up the directory
.3a6745	b0 22		bcs $3a6769	                BCS pr_first
.3a6747	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a674a	08		php		            PHP
.3a674b	c2 20		rep #$20	            REP #$20
.3a674d	48		pha		            PHA
.3a674e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6751	5b		tcd		            TCD
.3a6752	68		pla		            PLA
.3a6753	28		plp		            PLP
.3a6754	e2 20		sep #$20	            SEP #$20
.3a6756	a9 10		lda #$10	            LDA #ERR_DIRECTORY
.3a6758	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a675c	c2 20		rep #$20	            REP #$20
.3a675e	29 ff 00	and #$00ff	            AND #$00FF
.3a6761	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6764	e2 20		sep #$20	            SEP #$20
.3a6766	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6769					pr_first
.3a6769	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a676c					pr_entry
.3a676c	08		php		            PHP
.3a676d	c2 20		rep #$20	            REP #$20
.3a676f	48		pha		            PHA
.3a6770	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a6773	5b		tcd		            TCD
.3a6774	68		pla		            PLA
.3a6775	28		plp		            PLP
.3a6776	e2 20		sep #$20	            SEP #$20
.3a6778	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Start with the file name
.3a677b	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the initial character of the name
.3a677d	d0 03		bne $3a6782	                BNE chk_unused
.3a677f	82 a9 00	brl $3a682b	                BRL done                    ; If it's NULL, we're done
.3a6782	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED     ; Is it the unusued code?
.3a6784	d0 03		bne $3a6789	                BNE chk_attributes
.3a6786	82 96 00	brl $3a681f	                BRL next_entry              ; Yes: go to the next entry
.3a6789	a0 0b 00	ldy #$000b	chk_attributes  LDY #DIRENTRY.ATTRIBUTE
.3a678c	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute byte
.3a678e	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.3a6790	f0 03		beq $3a6795	                BEQ chk_hidden
.3a6792	82 a9 00	brl $3a683e	                BRL pr_volume               ; Print the volume label
.3a6795	89 02		bit #$02	chk_hidden      BIT #DOS_ATTR_HIDDEN        ; Is it a hidden file?
.3a6797	f0 03		beq $3a679c	                BEQ chk_long
.3a6799	82 83 00	brl $3a681f	                BRL next_entry              ; Yes: go to the next entry
.3a679c	29 0f		and #$0f	chk_long        AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.3a679e	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.3a67a0	d0 03		bne $3a67a5	                BNE get_short_name
.3a67a2	82 7a 00	brl $3a681f	                BRL next_entry              ; Yes: go to the next entry
.3a67a5	a0 00 00	ldy #$0000	get_short_name  LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.3a67a8	b7 18		lda [$0338],y	pr_name_loop    LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a67aa	20 18 00	jsr $3a0018	            JSR PRINTC
.3a67ad	c8		iny		                INY                         ; Move to the next character
.3a67ae	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.3a67b1	d0 f5		bne $3a67a8	                BNE pr_name_loop            ; No: print this new character
.3a67b3	a9 20		lda #$20	                LDA #' '                    ; Print the separator
.3a67b5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a67b8	a0 08 00	ldy #$0008	                LDY #DIRENTRY.SHORTNAME+8   ; Move to the first of the extension characters
.3a67bb	b7 18		lda [$0338],y	pr_ext_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a67bd	20 18 00	jsr $3a0018	                JSR PRINTC                  ; Otherwise: print it.
.3a67c0	c8		iny		                INY                         ; Move to the next character
.3a67c1	c0 0b 00	cpy #$000b	                CPY #DIRENTRY.SHORTNAME+11  ; Are we at the end of the extension portion?
.3a67c4	d0 f5		bne $3a67bb	                BNE pr_ext_loop             ; No: print this new character
.3a67c6	a9 09		lda #$09	pr_tab1         LDA #CHAR_TAB               ; Print a TAB
.3a67c8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a67cb	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.3a67ce	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.3a67d0	89 10		bit #$10	                BIT #DOS_ATTR_DIR           ; Is it a directory?
.3a67d2	d0 1e		bne $3a67f2	                BNE pr_attr                 ; Yes: skip printing a file size
.3a67d4	c2 20		rep #$20	            REP #$20
.3a67d6	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.3a67d9	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the file size
.3a67db	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.3a67df	c8		iny		                INY
.3a67e0	c8		iny		                INY
.3a67e1	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3a67e3	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.3a67e7	e2 20		sep #$20	            SEP #$20
.3a67e9	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a67eb	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a67ef	20 b4 66	jsr $3a66b4	            JSR PR_FILESIZE
.3a67f2	a9 09		lda #$09	pr_attr         LDA #CHAR_TAB               ; Print a TAB
.3a67f4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a67f7	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.3a67fa	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.3a67fc	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.3a67fe	d0 1c		bne $3a681c	                BNE end_entry               ; Yes: we're done printing this entry
.3a6800	89 01		bit #$01	chk_read        BIT #DOS_ATTR_RO            ; Is it a read-only file?
.3a6802	f0 05		beq $3a6809	                BEQ chk_system
.3a6804	a9 52		lda #$52	                LDA #'R'                    ; Yes: print an R
.3a6806	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6809	89 04		bit #$04	chk_system      BIT #DOS_ATTR_SYSTEM        ; Is it System file?
.3a680b	f0 05		beq $3a6812	                BEQ chk_directory
.3a680d	a9 53		lda #$53	                LDA #'S'                    ; Yes: print an S
.3a680f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6812	89 10		bit #$10	chk_directory   BIT #DOS_ATTR_DIR           ; Is it a directory?
.3a6814	f0 05		beq $3a681b	                BEQ pr_tab2
.3a6816	a9 44		lda #$44	                LDA #'D'                    ; Yes: print a D
.3a6818	20 18 00	jsr $3a0018	            JSR PRINTC
.3a681b	ea		nop		pr_tab2         NOP
.3a681c					end_entry
.3a681c	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a681f					next_entry
.3a681f	20 d9 02	jsr $3a02d9	            JSR PAGINATE
.3a6822	22 0c 11 00	jsl $00110c	                JSL FK_DIRNEXT
.3a6826	90 03		bcc $3a682b	                BCC done
.3a6828	82 41 ff	brl $3a676c	                BRL pr_entry
.3a682b					done
.3a682b	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a682e	08		php		            PHP
.3a682f	c2 20		rep #$20	            REP #$20
.3a6831	48		pha		            PHA
.3a6832	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6835	5b		tcd		            TCD
.3a6836	68		pla		            PLA
.3a6837	28		plp		            PLP
.3a6838	20 dc 1f	jsr $3a1fdc	            JSR SKIPSTMT
.3a683b	28		plp		                PLP
.3a683c	2b		pld		                PLD
.3a683d	60		rts		            RTS
.3a683e					pr_volume
.3a683e	08		php		            PHP
.3a683f	c2 20		rep #$20	            REP #$20
.3a6841	48		pha		            PHA
.3a6842	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a6845	5b		tcd		            TCD
.3a6846	68		pla		            PLA
.3a6847	28		plp		            PLP
.3a6848	e2 20		sep #$20	            SEP #$20
.3a684a	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.3a684c	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.3a684e	f0 cf		beq $3a681f	                BEQ next_entry              ; Yes: skip it
.3a6850	a9 5b		lda #$5b	pr_lbracket     LDA #'['
.3a6852	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6855	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.3a6858	b7 18		lda [$0338],y	pr_vol_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a685a	c9 20		cmp #$20	                CMP #CHAR_SP                ; Is it a blank?
.3a685c	f0 09		beq $3a6867	                BEQ pr_rbracket             ; Yes: end the name and print the dot
.3a685e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6861	c8		iny		                INY                         ; Move to the next character
.3a6862	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.3a6865	d0 f1		bne $3a6858	                BNE pr_vol_loop             ; No: print this new character
.3a6867	a9 5d		lda #$5d	pr_rbracket     LDA #']'                    ; Print a close bracket
.3a6869	20 18 00	jsr $3a0018	            JSR PRINTC
.3a686c	80 ae		bra $3a681c	                BRA end_entry               ; And try to get the next entry
.3a686e					SETFILEDESC
.3a686e	0b		phd		                PHD
.3a686f	08		php		                PHP
.3a6870	08		php		            PHP
.3a6871	c2 20		rep #$20	            REP #$20
.3a6873	48		pha		            PHA
.3a6874	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a6877	5b		tcd		            TCD
.3a6878	68		pla		            PLA
.3a6879	28		plp		            PLP
.3a687a	c2 30		rep #$30	            REP #$30
.3a687c	a9 73 f2	lda #$f273	                LDA #<>FD_IN            ; Point to the file descriptor
.3a687f	85 20		sta $0340	                STA DOS_FD_PTR
.3a6881	a9 3a 00	lda #$003a	                LDA #`FD_IN
.3a6884	85 22		sta $0342	                STA DOS_FD_PTR+2
.3a6886	a0 00 00	ldy #$0000	                LDY #0                  ; Fille the file descriptor with 0
.3a6889	e2 20		sep #$20	            SEP #$20
.3a688b	a9 00		lda #$00	                LDA #0
.3a688d	97 20		sta [$0340],y	zero_loop       STA [DOS_FD_PTR],Y
.3a688f	c8		iny		                INY
.3a6890	c0 1e 00	cpy #$001e	                CPY #SIZE(FILEDESC)
.3a6893	d0 f8		bne $3a688d	                BNE zero_loop
.3a6895	c2 20		rep #$20	            REP #$20
.3a6897	a9 73 f0	lda #$f073	                LDA #<>CLUSTER_BUFF     ; Point to the cluster buffer
.3a689a	8f 81 f2 3a	sta $3af281	                STA @l FD_IN.BUFFER
.3a689e	a9 3a 00	lda #$003a	                LDA #`CLUSTER_BUFF
.3a68a1	8f 83 f2 3a	sta $3af283	                STA @l FD_IN.BUFFER+2
.3a68a5	af 23 08 00	lda $000823	                LDA @l ARGUMENT1        ; Point the file desriptor to the path
.3a68a9	8f 75 f2 3a	sta $3af275	                STA @l FD_IN.PATH
.3a68ad	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a68b1	8f 77 f2 3a	sta $3af277	                STA @l FD_IN.PATH+2
.3a68b5	28		plp		                PLP
.3a68b6	2b		pld		                PLD
.3a68b7	60		rts		            RTS
.3a68b8					S_BLOAD
.3a68b8	08		php		                PHP
.3a68b9	c2 30		rep #$30	            REP #$30
.3a68bb	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a68be	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a68c1	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a68c4	20 6e 68	jsr $3a686e	            JSR SETFILEDESC
.3a68c7	e2 20		sep #$20	            SEP #$20
.3a68c9	a9 2c		lda #$2c	                LDA #','
.3a68cb	85 37		sta $0837	                STA TARGETTOK
.3a68cd	20 d9 20	jsr $3a20d9	            JSR OPT_TOK
.3a68d0	b0 0f		bcs $3a68e1	                BCS get_dest
.3a68d2	c2 20		rep #$20	            REP #$20
.3a68d4	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set destination address to something "safe"
.3a68d7	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a68db	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a68df	80 17		bra $3a68f8	                BRA do_load
.3a68e1					get_dest
.3a68e1	20 97 1f	jsr $3a1f97	            JSR INCBIP
.3a68e4	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a68e7	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a68ea	c2 20		rep #$20	            REP #$20
.3a68ec	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the destination address
.3a68ee	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a68f2	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a68f4	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a68f8	22 18 11 00	jsl $001118	do_load         JSL FK_LOAD                 ; Attempt to load the file
.3a68fc	b0 1f		bcs $3a691d	                BCS done
.3a68fe	08		php		            PHP
.3a68ff	c2 20		rep #$20	            REP #$20
.3a6901	48		pha		            PHA
.3a6902	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6905	5b		tcd		            TCD
.3a6906	68		pla		            PLA
.3a6907	28		plp		            PLP
.3a6908	e2 20		sep #$20	            SEP #$20
.3a690a	a9 11		lda #$11	            LDA #ERR_LOAD
.3a690c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6910	c2 20		rep #$20	            REP #$20
.3a6912	29 ff 00	and #$00ff	            AND #$00FF
.3a6915	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6918	e2 20		sep #$20	            SEP #$20
.3a691a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a691d	28		plp		done            PLP
.3a691e	60		rts		            RTS
.3a691f					SET_DOSSTAT
.3a691f	8b		phb		                PHB
.3a6920	0b		phd		                PHD
.3a6921	08		php		                PHP
.3a6922	08		php		            PHP
.3a6923	c2 20		rep #$20	            REP #$20
.3a6925	48		pha		            PHA
.3a6926	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6929	5b		tcd		            TCD
.3a692a	68		pla		            PLA
.3a692b	28		plp		            PLP
.3a692c	08		php		            PHP
.3a692d	e2 20		sep #$20	            SEP #$20
.3a692f	48		pha		            PHA
.3a6930	a9 00		lda #$00	            LDA #BASIC_BANK
.3a6932	48		pha		            PHA
.3a6933	ab		plb		            PLB
.3a6934	68		pla		            PLA
.3a6935	28		plp		            PLP
.3a6936	e2 20		sep #$20	            SEP #$20
.3a6938	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS           ; Get the DOS status code
.3a693c	85 23		sta $0823	                STA ARGUMENT1
.3a693e	a9 00		lda #$00	                LDA #0
.3a6940	85 24		sta $0824	                STA ARGUMENT1+1
.3a6942	85 25		sta $0825	                STA ARGUMENT1+2
.3a6944	85 26		sta $0826	                STA ARGUMENT1+3
.3a6946	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a6948	85 27		sta $0827	                STA ARGTYPE1
.3a694a	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (DOSSTAT)
.3a694c	a9 3a		lda #$3a	                LDA #`dosstat_name
.3a694e	85 e9		sta $08e9	                STA TOFIND+2
.3a6950	c2 20		rep #$20	            REP #$20
.3a6952	a9 82 69	lda #$6982	                LDA #<>dosstat_name
.3a6955	85 e7		sta $08e7	                STA TOFIND
.3a6957	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a695a	e2 20		sep #$20	            SEP #$20
.3a695c	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS          ; Get the BIOS status code
.3a6960	85 23		sta $0823	                STA ARGUMENT1
.3a6962	a9 00		lda #$00	                LDA #0
.3a6964	85 24		sta $0824	                STA ARGUMENT1+1
.3a6966	85 25		sta $0825	                STA ARGUMENT1+2
.3a6968	85 26		sta $0826	                STA ARGUMENT1+3
.3a696a	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a696c	85 27		sta $0827	                STA ARGTYPE1
.3a696e	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BIOSSTAT)
.3a6970	a9 3a		lda #$3a	                LDA #`biosstat_name
.3a6972	85 e9		sta $08e9	                STA TOFIND+2
.3a6974	c2 20		rep #$20	            REP #$20
.3a6976	a9 8a 69	lda #$698a	                LDA #<>biosstat_name
.3a6979	85 e7		sta $08e7	                STA TOFIND
.3a697b	20 2f 51	jsr $3a512f	            JSR VAR_SET
.3a697e	28		plp		                PLP
.3a697f	2b		pld		                PLD
.3a6980	ab		plb		                PLB
.3a6981	60		rts		            RTS
>3a6982	44 4f 53 53 54 41 54 00		dosstat_name    .null "DOSSTAT"
>3a698a	42 49 4f 53 53 54 41 54		biosstat_name   .null "BIOSSTAT"
>3a6992	00
.3a6993					CMD_BRUN
.3a6993	08		php		                PHP
.3a6994	c2 30		rep #$30	            REP #$30
.3a6996	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a6999	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a699c	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a699f	a5 23		lda $0823	                LDA ARGUMENT1
.3a69a1	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.3a69a5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a69a7	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.3a69ab	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a69ae	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a69b2	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a69b6	22 24 11 00	jsl $001124	                JSL FK_RUN                  ; Attempt to run the file
.3a69ba	b0 25		bcs $3a69e1	                BCS done                    ; If we got it: try to execute it
.3a69bc	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a69bf	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a69c2	08		php		            PHP
.3a69c3	c2 20		rep #$20	            REP #$20
.3a69c5	48		pha		            PHA
.3a69c6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a69c9	5b		tcd		            TCD
.3a69ca	68		pla		            PLA
.3a69cb	28		plp		            PLP
.3a69cc	e2 20		sep #$20	            SEP #$20
.3a69ce	a9 11		lda #$11	            LDA #ERR_LOAD
.3a69d0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a69d4	c2 20		rep #$20	            REP #$20
.3a69d6	29 ff 00	and #$00ff	            AND #$00FF
.3a69d9	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a69dc	e2 20		sep #$20	            SEP #$20
.3a69de	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a69e1					done
.3a69e1	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a69e4	28		plp		                PLP
.3a69e5	60		rts		            RTS
.3a69e6					CMD_LOAD
.3a69e6	08		php		                PHP
.3a69e7	c2 30		rep #$30	            REP #$30
.3a69e9	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a69ec	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a69ef	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a69f2	20 6e 68	jsr $3a686e	            JSR SETFILEDESC
.3a69f5	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a69f8	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a69fc	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a69ff	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2        ; Set the destination address
.3a6a03	20 00 4e	jsr $3a4e00	            JSR CMD_NEW
.3a6a06	22 18 11 00	jsl $001118	                JSL FK_LOAD                 ; Attempt to load the file
.3a6a0a	b0 22		bcs $3a6a2e	                BCS start_tokenize          ; If we got it: start tokenizing
.3a6a0c	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6a0f	08		php		            PHP
.3a6a10	c2 20		rep #$20	            REP #$20
.3a6a12	48		pha		            PHA
.3a6a13	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6a16	5b		tcd		            TCD
.3a6a17	68		pla		            PLA
.3a6a18	28		plp		            PLP
.3a6a19	e2 20		sep #$20	            SEP #$20
.3a6a1b	a9 11		lda #$11	            LDA #ERR_LOAD
.3a6a1d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6a21	c2 20		rep #$20	            REP #$20
.3a6a23	29 ff 00	and #$00ff	            AND #$00FF
.3a6a26	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6a29	e2 20		sep #$20	            SEP #$20
.3a6a2b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6a2e					start_tokenize
.3a6a2e	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6a31	c2 20		rep #$20	            REP #$20
.3a6a33	a2 12 00	ldx #$0012	                LDX #FILEDESC.FILESIZE
.3a6a36	18		clc		                CLC                         ; Set MTEMP to point to the byte after the file
.3a6a37	bf 73 f2 3a	lda $3af273,x	                LDA FD_IN,X
.3a6a3b	69 00 00	adc #$0000	                ADC #<>LOADBLOCK
.3a6a3e	85 92		sta $0892	                STA MTEMP
.3a6a40	bf 75 f2 3a	lda $3af275,x	                LDA FD_IN+2,X
.3a6a44	69 01 00	adc #$0001	                ADC #`LOADBLOCK
.3a6a47	85 94		sta $0894	                STA MTEMP+2
.3a6a49	e2 20		sep #$20	            SEP #$20
.3a6a4b	a9 00		lda #$00	                LDA #0
.3a6a4d	87 92		sta [$0892]	                STA [MTEMP]                 ; Write a NULL right after the file
.3a6a4f	c2 20		rep #$20	            REP #$20
.3a6a51	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK            ; Set MCURSOR to the begining of the loaded data
.3a6a54	85 7a		sta $087a	                STA MCURSOR
.3a6a56	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a6a59	85 7c		sta $087c	                STA MCURSOR+2
.3a6a5b	a2 00 00	ldx #$0000	copy_line       LDX #0
.3a6a5e					copy_char
.3a6a5e	e2 20		sep #$20	            SEP #$20
.3a6a60	a7 7a		lda [$087a]	                LDA [MCURSOR]
.3a6a62	f0 2a		beq $3a6a8e	                BEQ clean_up                ; If the character is 0, we're done
.3a6a64	c9 0d		cmp #$0d	                CMP #CHAR_CR                ; If it is new line...
.3a6a66	f0 12		beq $3a6a7a	                BEQ do_process              ; ... we want to process the line
.3a6a68	c9 0a		cmp #$0a	                CMP #CHAR_LF                ; If it is a line feed...
.3a6a6a	f0 04		beq $3a6a70	                BEQ next_char               ; ... we want to skip it
.3a6a6c	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X              ; Otherwise, copy the character to the input buffer
.3a6a6f	e8		inx		                INX
.3a6a70					next_char
.3a6a70	c2 20		rep #$20	            REP #$20
.3a6a72	e6 7a		inc $087a	                INC MCURSOR                 ; Advance the input cursor
.3a6a74	d0 e8		bne $3a6a5e	                BNE copy_char
.3a6a76	e6 7c		inc $087c	                INC MCURSOR+2
.3a6a78	80 e4		bra $3a6a5e	                BRA copy_char
.3a6a7a					do_process
.3a6a7a	e2 20		sep #$20	            SEP #$20
.3a6a7c	a9 00		lda #$00	                LDA #0                      ; Put a 0 at the end of the input buffer
.3a6a7e	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a6a81	20 04 26	jsr $3a2604	            JSR PROCESS
.3a6a84	c2 20		rep #$20	            REP #$20
.3a6a86	e6 7a		inc $087a	                INC MCURSOR                 ; Try again with the next line
.3a6a88	d0 d1		bne $3a6a5b	                BNE copy_line
.3a6a8a	e6 7c		inc $087c	                INC MCURSOR+2
.3a6a8c	80 cd		bra $3a6a5b	                BRA copy_line
.3a6a8e	e0 00 00	cpx #$0000	clean_up        CPX #0                      ; Is there data in the INPUTBUF?
.3a6a91	f0 0a		beq $3a6a9d	                BEQ done                    ; No: just return
.3a6a93	e2 20		sep #$20	            SEP #$20
.3a6a95	a9 00		lda #$00	                LDA #0                      ; Make sure there is a trailing NULL
.3a6a97	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a6a9a	20 04 26	jsr $3a2604	            JSR PROCESS
.3a6a9d	28		plp		done            PLP
.3a6a9e	60		rts		            RTS
.3a6a9f					S_BSAVE
.3a6a9f	08		php		                PHP
.3a6aa0	c2 30		rep #$30	            REP #$30
.3a6aa2	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a6aa5	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6aa8	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a6aab	20 6e 68	jsr $3a686e	            JSR SETFILEDESC
.3a6aae	e2 20		sep #$20	            SEP #$20
.3a6ab0	a9 2c		lda #$2c	                LDA #','
.3a6ab2	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a6ab5	c2 20		rep #$20	            REP #$20
.3a6ab7	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6aba	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a6abd	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_SRC_PTR
.3a6abf	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a6ac3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6ac5	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a6ac9	e2 20		sep #$20	            SEP #$20
.3a6acb	a9 2c		lda #$2c	                LDA #','
.3a6acd	c2 20		rep #$20	            REP #$20
.3a6acf	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a6ad2	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6ad5	20 3c 05	jsr $3a053c	            JSR ASS_ARG1_INT
.3a6ad8	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_END_PTR
.3a6ada	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a6ade	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6ae0	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a6ae4	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                 ; Attempt to save the memory to file.
.3a6ae8	b0 22		bcs $3a6b0c	                BCS done
.3a6aea	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6aed	08		php		            PHP
.3a6aee	c2 20		rep #$20	            REP #$20
.3a6af0	48		pha		            PHA
.3a6af1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6af4	5b		tcd		            TCD
.3a6af5	68		pla		            PLA
.3a6af6	28		plp		            PLP
.3a6af7	e2 20		sep #$20	            SEP #$20
.3a6af9	a9 12		lda #$12	            LDA #ERR_SAVE
.3a6afb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6aff	c2 20		rep #$20	            REP #$20
.3a6b01	29 ff 00	and #$00ff	            AND #$00FF
.3a6b04	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6b07	e2 20		sep #$20	            SEP #$20
.3a6b09	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6b0c					done
.3a6b0c	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6b0f	28		plp		                PLP
.3a6b10	60		rts		            RTS
.3a6b11					COPY2PATHBUF
.3a6b11	da		phx		                PHX
.3a6b12	5a		phy		                PHY
.3a6b13	08		php		                PHP
.3a6b14	a2 00 00	ldx #$0000	                LDX #0
.3a6b17	a0 00 00	ldy #$0000	                LDY #0
.3a6b1a	e2 20		sep #$20	            SEP #$20
.3a6b1c	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y           ; Copy the path to the DOS_PATH_BUFF
.3a6b1e	9d 00 04	sta $0400,x	                STA DOS_PATH_BUFF,X
.3a6b21	f0 04		beq $3a6b27	                BEQ done
.3a6b23	e8		inx		                INX
.3a6b24	c8		iny		                INY
.3a6b25	80 f5		bra $3a6b1c	                BRA loop
.3a6b27	28		plp		done            PLP
.3a6b28	7a		ply		                PLY
.3a6b29	fa		plx		                PLX
.3a6b2a	60		rts		            RTS
.3a6b2b					CMD_SAVE
.3a6b2b	08		php		                PHP
.3a6b2c	c2 30		rep #$30	            REP #$30
.3a6b2e	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a6b31	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6b34	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a6b37	20 6e 68	jsr $3a686e	            JSR SETFILEDESC
.3a6b3a	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a6b3d	85 a6		sta $08a6	                STA OBUFFER
.3a6b3f	e2 20		sep #$20	            SEP #$20
.3a6b41	a9 01		lda #$01	                LDA #`LOADBLOCK
.3a6b43	85 a8		sta $08a8	                STA OBUFFER+2
.3a6b45	a9 20		lda #$20	                LDA #DEV_BUFFER             ; Set up output for the buffer
.3a6b47	85 b4		sta $08b4	                STA BCONSOLE
.3a6b49	c2 20		rep #$20	            REP #$20
.3a6b4b	a9 00 00	lda #$0000	                LDA #0
.3a6b4e	85 ab		sta $08ab	                STA OBUFFIDX
.3a6b50	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a6b53	85 a9		sta $08a9	                STA OBUFFSIZE
.3a6b55	c2 20		rep #$20	            REP #$20
.3a6b57	a9 00 00	lda #$0000	                LDA #0                      ; Set start line number to 0
.3a6b5a	85 55		sta $0855	                STA MARG1
.3a6b5c	85 57		sta $0857	                STA MARG1+2
.3a6b5e	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set end line number to MAXINT
.3a6b61	85 59		sta $0859	                STA MARG2
.3a6b63	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.3a6b66	85 5b		sta $085b	                STA MARG2+2
.3a6b68	20 49 17	jsr $3a1749	            JSR LISTPROG
.3a6b6b	e2 20		sep #$20	            SEP #$20
.3a6b6d	a9 80		lda #$80	                LDA #DEV_SCREEN             ; Restore output to the screen
.3a6b6f	85 b4		sta $08b4	                STA BCONSOLE
.3a6b71	c2 20		rep #$20	            REP #$20
.3a6b73	c6 ab		dec $08ab	                DEC OBUFFIDX                ; OBUFFIDX points to the next free byte... so pull it in one
.3a6b75	18		clc		                CLC                         ; Set the range of memory to save
.3a6b76	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a6b79	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a6b7d	65 ab		adc $08ab	                ADC OBUFFIDX
.3a6b7f	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a6b83	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a6b86	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a6b8a	69 00 00	adc #$0000	                ADC #0
.3a6b8d	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a6b91	22 1c 11 00	jsl $00111c	do_save         JSL FK_SAVE                 ; Attempt to save the file
.3a6b95	b0 22		bcs $3a6bb9	                BCS done
.3a6b97	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6b9a	08		php		            PHP
.3a6b9b	c2 20		rep #$20	            REP #$20
.3a6b9d	48		pha		            PHA
.3a6b9e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6ba1	5b		tcd		            TCD
.3a6ba2	68		pla		            PLA
.3a6ba3	28		plp		            PLP
.3a6ba4	e2 20		sep #$20	            SEP #$20
.3a6ba6	a9 12		lda #$12	            LDA #ERR_SAVE
.3a6ba8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6bac	c2 20		rep #$20	            REP #$20
.3a6bae	29 ff 00	and #$00ff	            AND #$00FF
.3a6bb1	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6bb4	e2 20		sep #$20	            SEP #$20
.3a6bb6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6bb9					done
.3a6bb9	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6bbc	28		plp		                PLP
.3a6bbd	60		rts		            RTS
.3a6bbe					S_DEL
.3a6bbe	08		php		                PHP
.3a6bbf	c2 30		rep #$30	            REP #$30
.3a6bc1	20 b8 1f	jsr $3a1fb8	            JSR SKIPWS
.3a6bc4	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6bc7	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a6bca	20 11 6b	jsr $3a6b11	            JSR COPY2PATHBUF
.3a6bcd	22 04 11 00	jsl $001104	path_loaded     JSL FK_DELETE               ; Try to delete the file
.3a6bd1	b0 22		bcs $3a6bf5	                BCS done
.3a6bd3	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6bd6	08		php		            PHP
.3a6bd7	c2 20		rep #$20	            REP #$20
.3a6bd9	48		pha		            PHA
.3a6bda	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6bdd	5b		tcd		            TCD
.3a6bde	68		pla		            PLA
.3a6bdf	28		plp		            PLP
.3a6be0	e2 20		sep #$20	            SEP #$20
.3a6be2	a9 13		lda #$13	            LDA #ERR_DELETE
.3a6be4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6be8	c2 20		rep #$20	            REP #$20
.3a6bea	29 ff 00	and #$00ff	            AND #$00FF
.3a6bed	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6bf0	e2 20		sep #$20	            SEP #$20
.3a6bf2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6bf5					done
.3a6bf5	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6bf8	28		plp		                PLP
.3a6bf9	60		rts		            RTS
.3a6bfa					VALIDFILECHAR
.3a6bfa	da		phx		                PHX
.3a6bfb	08		php		                PHP
.3a6bfc	e2 20		sep #$20	            SEP #$20
.3a6bfe	c9 61		cmp #$61	                CMP #'a'                    ; Is it lower case?
.3a6c00	90 08		bcc $3a6c0a	                BLT chk_space
.3a6c02	c9 7b		cmp #$7b	                CMP #'z'+1
.3a6c04	b0 04		bcs $3a6c0a	                BGE chk_space
.3a6c06	29 df		and #$df	                AND #%11011111              ; Yes: convert to upper case
.3a6c08	80 13		bra $3a6c1d	                BRA ret_valid
.3a6c0a	c9 20		cmp #$20	chk_space       CMP #CHAR_SP            ; Is it a control code?
.3a6c0c	90 13		bcc $3a6c21	                BLT is_invalid          ; Yes: it's invalid
.3a6c0e	a2 00 00	ldx #$0000	                LDX #0                  ; See if it's in the list of invalids
.3a6c11	df 25 6c 3a	cmp $3a6c25,x	loop            CMP invalid_chars,X
.3a6c15	f0 0a		beq $3a6c21	                BEQ is_invalid
.3a6c17	e8		inx		                INX
.3a6c18	e0 0f 00	cpx #$000f	                CPX #15                 ; # of invalid characters
.3a6c1b	d0 f4		bne $3a6c11	                BNE loop
.3a6c1d	28		plp		ret_valid       PLP
.3a6c1e	38		sec		                SEC
.3a6c1f	fa		plx		                PLX
.3a6c20	6b		rtl		                RTL
.3a6c21	28		plp		is_invalid      PLP
.3a6c22	18		clc		                CLC
.3a6c23	fa		plx		                PLX
.3a6c24	6b		rtl		                RTL
>3a6c25	2a 2b 2c 2f 3a 3b 3c 3d		invalid_chars   .text "*+,/:;<=>?\[]|",CHAR_DQUOTE
>3a6c2d	3e 3f 5c 5b 5d 7c 22
.3a6c34					S_RENAME
.3a6c34	08		php		                PHP
.3a6c35	08		php		            PHP
.3a6c36	c2 20		rep #$20	            REP #$20
.3a6c38	48		pha		            PHA
.3a6c39	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6c3c	5b		tcd		            TCD
.3a6c3d	68		pla		            PLA
.3a6c3e	28		plp		            PLP
.3a6c3f	c2 30		rep #$30	            REP #$30
.3a6c41	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6c44	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a6c47	20 11 6b	jsr $3a6b11	            JSR COPY2PATHBUF
.3a6c4a	22 10 11 00	jsl $001110	                JSL FK_DIRREAD              ; Try to read the file
.3a6c4e	b0 22		bcs $3a6c72	                BCS get_new_name            ; If ok: get the new name
.3a6c50	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6c53	08		php		            PHP
.3a6c54	c2 20		rep #$20	            REP #$20
.3a6c56	48		pha		            PHA
.3a6c57	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6c5a	5b		tcd		            TCD
.3a6c5b	68		pla		            PLA
.3a6c5c	28		plp		            PLP
.3a6c5d	e2 20		sep #$20	            SEP #$20
.3a6c5f	a9 14		lda #$14	            LDA #ERR_FILENOTFOUND
.3a6c61	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6c65	c2 20		rep #$20	            REP #$20
.3a6c67	29 ff 00	and #$00ff	            AND #$00FF
.3a6c6a	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6c6d	e2 20		sep #$20	            SEP #$20
.3a6c6f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6c72					get_new_name
.3a6c72	e2 20		sep #$20	            SEP #$20
.3a6c74	a9 2c		lda #$2c	                LDA #','
.3a6c76	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a6c79	c2 20		rep #$20	            REP #$20
.3a6c7b	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6c7e	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a6c81	ad 38 03	lda $0338	                LDA DOS_DIR_PTR
.3a6c84	85 08		sta $0808	                STA INDEX
.3a6c86	ad 3a 03	lda $033a	                LDA DOS_DIR_PTR+2
.3a6c89	85 0a		sta $080a	                STA INDEX+2
.3a6c8b	e2 20		sep #$20	            SEP #$20
.3a6c8d	a2 00 00	ldx #$0000	                LDX #0
.3a6c90	a9 20		lda #$20	                LDA #CHAR_SP                ; We'll use MLINEBUFF as temporary name storage
.3a6c92	95 7e		sta $087e,x	blank_loop      STA MLINEBUF,X              ; Fill it with blanks
.3a6c94	e8		inx		                INX
.3a6c95	e0 0b 00	cpx #$000b	                CPX #11
.3a6c98	d0 f8		bne $3a6c92	                BNE blank_loop
.3a6c9a	a2 00 00	ldx #$0000	                LDX #0
.3a6c9d	a0 00 00	ldy #$0000	                LDY #0
.3a6ca0	b7 23		lda [$0823],y	name_loop       LDA [ARGUMENT1],Y           ; Get the character of the new name
.3a6ca2	f0 76		beq $3a6d1a	                BEQ copy_short_name         ; If end-of-string: copy what we have
.3a6ca4	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.3a6ca6	f0 39		beq $3a6ce1	                BEQ skip_dot                ; Yes: move on to the extension characters
.3a6ca8	22 fa 6b 3a	jsl $3a6bfa	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.3a6cac	b0 1f		bcs $3a6ccd	                BCS save_nm_char
.3a6cae	08		php		            PHP
.3a6caf	c2 20		rep #$20	            REP #$20
.3a6cb1	48		pha		            PHA
.3a6cb2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6cb5	5b		tcd		            TCD
.3a6cb6	68		pla		            PLA
.3a6cb7	28		plp		            PLP
.3a6cb8	e2 20		sep #$20	            SEP #$20
.3a6cba	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a6cbc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6cc0	c2 20		rep #$20	            REP #$20
.3a6cc2	29 ff 00	and #$00ff	            AND #$00FF
.3a6cc5	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6cc8	e2 20		sep #$20	            SEP #$20
.3a6cca	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6ccd	95 7e		sta $087e,x	save_nm_char    STA MLINEBUF,X              ; Otherwise: copy it
.3a6ccf	c8		iny		                INY
.3a6cd0	e8		inx		                INX
.3a6cd1	c0 08 00	cpy #$0008	                CPY #8
.3a6cd4	d0 ca		bne $3a6ca0	                BNE name_loop
.3a6cd6	b7 23		lda [$0823],y	eat_name        LDA [ARGUMENT1],Y           ; Get the character
.3a6cd8	f0 40		beq $3a6d1a	                BEQ copy_short_name         ; If null, we're done with the short name
.3a6cda	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.3a6cdc	f0 03		beq $3a6ce1	                BEQ skip_dot                ; Yes: skip over it
.3a6cde	c8		iny		                INY                         ; No: try again with the the next character
.3a6cdf	80 f5		bra $3a6cd6	                BRA eat_name
.3a6ce1	c8		iny		skip_dot        INY                         ; Character at Y is '.', so skip over it
.3a6ce2	a2 08 00	ldx #$0008	do_ext          LDX #8
.3a6ce5	b7 23		lda [$0823],y	ext_loop        LDA [ARGUMENT1],Y           ; Get the character of the new extension
.3a6ce7	f0 31		beq $3a6d1a	                BEQ copy_short_name         ; If end-of-string: copy what we have
.3a6ce9	22 fa 6b 3a	jsl $3a6bfa	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.3a6ced	b0 22		bcs $3a6d11	                BCS save_ext_char
.3a6cef	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6cf2	08		php		            PHP
.3a6cf3	c2 20		rep #$20	            REP #$20
.3a6cf5	48		pha		            PHA
.3a6cf6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6cf9	5b		tcd		            TCD
.3a6cfa	68		pla		            PLA
.3a6cfb	28		plp		            PLP
.3a6cfc	e2 20		sep #$20	            SEP #$20
.3a6cfe	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a6d00	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6d04	c2 20		rep #$20	            REP #$20
.3a6d06	29 ff 00	and #$00ff	            AND #$00FF
.3a6d09	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6d0c	e2 20		sep #$20	            SEP #$20
.3a6d0e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6d11	95 7e		sta $087e,x	save_ext_char   STA MLINEBUF,X              ; Otherwise: copy it
.3a6d13	c8		iny		                INY
.3a6d14	e8		inx		                INX
.3a6d15	c0 0c 00	cpy #$000c	                CPY #12
.3a6d18	d0 cb		bne $3a6ce5	                BNE ext_loop
.3a6d1a	a2 00 00	ldx #$0000	copy_short_name LDX #0                      ; Copy the short name we built to the directory entry
.3a6d1d	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3a6d20	b5 7e		lda $087e,x	copy_loop       LDA MLINEBUF,X
.3a6d22	97 08		sta [$0808],y	                STA [INDEX],Y
.3a6d24	e8		inx		                INX
.3a6d25	c8		iny		                INY
.3a6d26	c0 0b 00	cpy #$000b	                CPY #11
.3a6d29	d0 f5		bne $3a6d20	                BNE copy_loop
.3a6d2b	22 14 11 00	jsl $001114	                JSL FK_DIRWRITE             ; Write the directory entry back
.3a6d2f	b0 22		bcs $3a6d53	                BCS done
.3a6d31	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6d34	08		php		            PHP
.3a6d35	c2 20		rep #$20	            REP #$20
.3a6d37	48		pha		            PHA
.3a6d38	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6d3b	5b		tcd		            TCD
.3a6d3c	68		pla		            PLA
.3a6d3d	28		plp		            PLP
.3a6d3e	e2 20		sep #$20	            SEP #$20
.3a6d40	a9 15		lda #$15	            LDA #ERR_DIRNOTWRITE
.3a6d42	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6d46	c2 20		rep #$20	            REP #$20
.3a6d48	29 ff 00	and #$00ff	            AND #$00FF
.3a6d4b	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6d4e	e2 20		sep #$20	            SEP #$20
.3a6d50	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6d53					done
.3a6d53	20 1f 69	jsr $3a691f	            JSR SET_DOSSTAT
.3a6d56	28		plp		                PLP
.3a6d57	60		rts		            RTS
.3a6d58					S_COPY
.3a6d58	08		php		                PHP
.3a6d59	08		php		            PHP
.3a6d5a	c2 20		rep #$20	            REP #$20
.3a6d5c	48		pha		            PHA
.3a6d5d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6d60	5b		tcd		            TCD
.3a6d61	68		pla		            PLA
.3a6d62	28		plp		            PLP
.3a6d63	c2 30		rep #$30	            REP #$30
.3a6d65	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6d68	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a6d6b	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.3a6d6d	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.3a6d71	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6d73	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.3a6d77	e2 20		sep #$20	            SEP #$20
.3a6d79	a9 2c		lda #$2c	                LDA #','
.3a6d7b	20 a4 20	jsr $3a20a4	            JSR EXPECT_TOK
.3a6d7e	c2 20		rep #$20	            REP #$20
.3a6d80	20 86 1b	jsr $3a1b86	            JSR EVALEXPR
.3a6d83	20 ce 05	jsr $3a05ce	            JSR ASS_ARG1_STR
.3a6d86	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.3a6d88	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.3a6d8c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6d8e	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.3a6d92	22 30 11 00	jsl $001130	                JSL FK_COPY                 ; Attempt to copy the file
.3a6d96	b0 1f		bcs $3a6db7	                BCS done
.3a6d98	08		php		            PHP
.3a6d99	c2 20		rep #$20	            REP #$20
.3a6d9b	48		pha		            PHA
.3a6d9c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6d9f	5b		tcd		            TCD
.3a6da0	68		pla		            PLA
.3a6da1	28		plp		            PLP
.3a6da2	e2 20		sep #$20	            SEP #$20
.3a6da4	a9 16		lda #$16	            LDA #ERR_NOTCOPIED
.3a6da6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6daa	c2 20		rep #$20	            REP #$20
.3a6dac	29 ff 00	and #$00ff	            AND #$00FF
.3a6daf	20 d8 1c	jsr $3a1cd8	            JSR SET_ERRERL
.3a6db2	e2 20		sep #$20	            SEP #$20
.3a6db4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6db7	28		plp		done            PLP
.3a6db8	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\monitor.s

.3a6db9	5c 79 87 3a	jmp $3a8779	MRETURN         JML IMRETURN
.3a6dbd	5c ca 85 3a	jmp $3a85ca	MPARSE          JML IMPARSE
.3a6dc1	5c 7a 87 3a	jmp $3a877a	MPARSE1         JML IMPARSE1
.3a6dc5	5c f6 76 3a	jmp $3a76f6	MEXECUTE        JML IMEXECUTE
.3a6dc9	5c 53 77 3a	jmp $3a7753	MASSEMBLE       JML IMASSEMBLE
.3a6dcd	5c 86 76 3a	jmp $3a7686	MRMODIFY        JML IMRMODIFY
.3a6dd1	5c 0c 76 3a	jmp $3a760c	MCOMPARE        JML IMCOMPARE
.3a6dd5	5c 89 7b 3a	jmp $3a7b89	MDISASSEMBLE    JML IMDISASSEMBLE
.3a6dd9	5c 77 72 3a	jmp $3a7277	MFILL           JML IMFILL
.3a6ddd	5c a4 75 3a	jmp $3a75a4	MGO             JML IMGO
.3a6de1	5c 5f 75 3a	jmp $3a755f	MJUMP           JML IMJUMP
.3a6de5	5c e9 74 3a	jmp $3a74e9	MHUNT           JML IMHUNT
.3a6de9	5c 88 86 3a	jmp $3a8688	MLOAD           JML IMLOAD
.3a6ded	5c 85 73 3a	jmp $3a7385	MMEMORY         JML IMMEMORY
.3a6df1	5c d8 71 3a	jmp $3a71d8	MREGISTERS      JML IMREGISTERS
.3a6df5	5c 03 87 3a	jmp $3a8703	MSAVE           JML IMSAVE
.3a6df9	5c b3 72 3a	jmp $3a72b3	MTRANSFER       JML IMTRANSFER
.3a6dfd	5c 7c 87 3a	jmp $3a877c	MVERIFY         JML IMVERIFY
.3a6e01	5c 75 87 3a	jmp $3a8775	MEXIT           JML IMEXIT
.3a6e05	5c a2 74 3a	jmp $3a74a2	MMODIFY         JML IMMODIFY
.3a6e09	5c 7d 87 3a	jmp $3a877d	MDOS            JML IMDOS
.3a6e0d	18		clc		IMONITOR        CLC                 ; clear the carry flag
.3a6e0e	fb		xce		                XCE                 ; move carry to emulation flags
.3a6e0f	c2 20		rep #$20	            REP #$20
.3a6e11	a9 ff fe	lda #$feff	                LDA #STACK_END      ; Reset the stack
.3a6e14	1b		tcs		                TAS
.3a6e15	58		cli		                CLI                 ; Re-enable interrupts
.3a6e16	5c 1a 6e 3a	jmp $3a6e1a	                JML IMREADY
.3a6e1a					IMREADY
.3a6e1a	c2 30		rep #$30	            REP #$30
.3a6e1c	22 d8 71 3a	jsl $3a71d8	                JSL IMREGISTERS
.3a6e20					ready_loop
.3a6e20	20 08 00	jsr $3a0008	            JSR READLINE
.3a6e23	20 0c 00	jsr $3a000c	            JSR SCRCOPYLINE
.3a6e26	8b		phb		                PHB
.3a6e27	e2 20		sep #$20	            SEP #$20
.3a6e29	a9 00		lda #$00	                LDA #`INPUTBUF
.3a6e2b	48		pha		                PHA
.3a6e2c	ab		plb		                PLB
.3a6e2d	a2 00 4f	ldx #$4f00	                LDX #<>INPUTBUF
.3a6e30	20 50 04	jsr $3a0450	            JSR TOUPPER
.3a6e33	ab		plb		                PLB
.3a6e34	22 bd 6d 3a	jsl $3a6dbd	                JSL MPARSE          ; Parse the command
.3a6e38	22 c5 6d 3a	jsl $3a6dc5	                JSL MEXECUTE        ; And execute the parsed command
.3a6e3c	80 e2		bra $3a6e20	                BRA ready_loop
.3a6e3e					IMHELP
.3a6e3e	08		php		                PHP
.3a6e3f	8b		phb		                PHB
.3a6e40	e2 20		sep #$20	            SEP #$20
.3a6e42	a9 3a		lda #$3a	                LDA #`help_text
.3a6e44	48		pha		                PHA
.3a6e45	ab		plb		                PLB
.3a6e46	c2 10		rep #$10	            REP #$10
.3a6e48	a2 51 6e	ldx #$6e51	                LDX #<>help_text
.3a6e4b	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a6e4e	ab		plb		                PLB
.3a6e4f	28		plp		                PLP
.3a6e50	6b		rtl		                RTL
>3a6e51	41 20 3c 73 74 61 72 74		help_text       .text "A <start> <assembly>",CHAR_CR
>3a6e59	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d
>3a6e66	20 20 41 73 73 65 6d 62		                .text "  Assemble a program",CHAR_CR,CHAR_CR
>3a6e6e	6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>3a6e7c	43 20 3c 73 74 61 72 74		                .text "C <start1> <start2> [len (1 if blank)]",CHAR_CR
>3a6e84	31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e
>3a6e94	20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d
>3a6ea3	20 20 43 6f 6d 70 61 72		                .text "  Compare to sections of memory",CHAR_CR,CHAR_CR
>3a6eab	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>3a6ebb	20 6d 65 6d 6f 72 79 0d 0d
>3a6ec4	44 20 3c 73 74 61 72 74		                .text "D <start> [end]",CHAR_CR
>3a6ecc	3e 20 5b 65 6e 64 5d 0d
>3a6ed4	20 20 44 69 73 61 73 73		                .text "  Disassemble a program",CHAR_CR,CHAR_CR
>3a6edc	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a6eec	0d
>3a6eed	46 20 3c 73 74 61 72 74		                .text "F <start> <end> <byte>",CHAR_CR
>3a6ef5	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d
>3a6f04	20 20 46 69 6c 6c 20 61		                .text "  Fill a block of memory with a byte",CHAR_CR,CHAR_CR
>3a6f0c	20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>3a6f1c	20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>3a6f2a	47 20 5b 61 64 64 72 65		                .text "G [address]",CHAR_CR
>3a6f32	73 73 5d 0d
>3a6f36	20 20 53 74 61 72 74 20		                .text "  Start execution at a location",CHAR_CR,CHAR_CR
>3a6f3e	65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>3a6f4e	6f 63 61 74 69 6f 6e 0d 0d
>3a6f57	4a 20 5b 61 64 64 72 65		                .text "J [address] - Jump to a location in memory",CHAR_CR
>3a6f5f	73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20
>3a6f6f	6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>3a6f7f	72 79 0d
>3a6f82	20 20 4a 75 6d 70 20 74		                .text "  Jump to a location in memory",CHAR_CR,CHAR_CR
>3a6f8a	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a6f9a	6d 65 6d 6f 72 79 0d 0d
>3a6fa2	48 20 3c 73 74 61 72 74		                .text "H <start> <end> <byte> [byte]..",CHAR_CR
>3a6faa	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>3a6fba	62 79 74 65 5d 2e 2e 0d
>3a6fc2	20 20 48 75 6e 74 20 66		                .text "  Hunt for values in memory",CHAR_CR,CHAR_CR
>3a6fca	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>3a6fda	6f 72 79 0d 0d
>3a6fdf	4c 20 20 20 20 20 4c 4f		                .text "L     LOAD         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," [destination]",CHAR_CR
>3a6fe7	41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a6ff7	22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>3a7007	4d 20 3c 73 74 61 72 74		                .text "M <start> [end]",CHAR_CR
>3a700f	3e 20 5b 65 6e 64 5d 0d
>3a7017	20 20 44 75 6d 70 20 74		                .text "  Dump the value in memory",CHAR_CR,CHAR_CR
>3a701f	68 65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f
>3a702f	72 79 0d 0d
>3a7033	52 20 2d 20 44 69 73 70		                .text "R - Display the values of the registers",CHAR_CR,CHAR_CR
>3a703b	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>3a704b	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a705b	0d
>3a705c	3b 20 3c 50 43 3e 20 3c		                .text "; <PC> <A> <X> <Y> <SP> <DBR> <DP> <NVMXDIZC>",CHAR_CR
>3a7064	41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>3a7074	3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>3a7084	44 49 5a 43 3e 0d
>3a708a	20 20 43 68 61 6e 67 65		                .text "  Change the contents of the registers",CHAR_CR,CHAR_CR
>3a7092	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a70a2	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a70b2	53 20 20 20 20 20 53 41		                .text "S     SAVE         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," <start> <end>",CHAR_CR
>3a70ba	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a70ca	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>3a70da	54 20 3c 73 74 61 72 74		                .text "T <start> <end> <destination>",CHAR_CR
>3a70e2	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a70f2	74 69 6f 6e 3e 0d
>3a70f8	20 20 54 72 61 6e 73 66		                .text "  Transfer (copy) data within memory",CHAR_CR,CHAR_CR
>3a7100	65 72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77
>3a7110	69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a711e	57 20 3c 62 79 74 65 3e		                .text "W <byte>",CHAR_CR
>3a7126	0d
>3a7127	20 20 53 65 74 20 74 68		                .text "  Set the register width flags for the disassembler",CHAR_CR,CHAR_CR
>3a712f	65 20 72 65 67 69 73 74 65 72 20 77 69 64 74 68
>3a713f	20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20 64
>3a714f	69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>3a715c	58 20 2d 20 52 65 74 75		                .text "X - Return to BASIC",CHAR_CR,CHAR_CR
>3a7164	72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>3a7171	3e 20 3c 73 74 61 72 74		                .text "> <start> <byte> [byte]...",CHAR_CR
>3a7179	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>3a7189	2e 2e 0d
>3a718c	20 20 45 64 69 74 20 64		                .text "  Edit data in memory",CHAR_CR,CHAR_CR
>3a7194	61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a71a3	3f 20 2d 20 44 69 73 70		                .null "? - Display a short help screen",CHAR_CR,CHAR_CR
>3a71ab	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>3a71bb	20 73 63 72 65 65 6e 0d 0d 00
.3a71c5					IMWIDTH
.3a71c5	08		php		                PHP
.3a71c6	08		php		            PHP
.3a71c7	c2 20		rep #$20	            REP #$20
.3a71c9	48		pha		            PHA
.3a71ca	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a71cd	5b		tcd		            TCD
.3a71ce	68		pla		            PLA
.3a71cf	28		plp		            PLP
.3a71d0	e2 20		sep #$20	            SEP #$20
.3a71d2	a5 0d		lda $0855	                LDA MARG1
.3a71d4	85 4e		sta $0896	                STA MCPUSTAT
.3a71d6	28		plp		                PLP
.3a71d7	6b		rtl		                RTL
.3a71d8					IMREGISTERS
.3a71d8	20 1d 01	jsr $3a011d	            JSR ENSURETEXT
.3a71db	08		php		            PHP
.3a71dc	e2 20		sep #$20	            SEP #$20
.3a71de	48		pha		            PHA
.3a71df	a9 3a		lda #$3a	            LDA #`mregisters_msg
.3a71e1	48		pha		            PHA
.3a71e2	ab		plb		            PLB
.3a71e3	68		pla		            PLA
.3a71e4	28		plp		            PLP
.3a71e5	a2 ba 87	ldx #$87ba	                LDX #<>mregisters_msg
.3a71e8	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a71eb	e2 20		sep #$20	            SEP #$20
.3a71ed	a9 3b		lda #$3b	                LDA #';'
.3a71ef	20 18 00	jsr $3a0018	            JSR PRINTC
.3a71f2	a9 20		lda #$20	                LDA #' '
.3a71f4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a71f7	c2 30		rep #$30	            REP #$30
.3a71f9	08		php		            PHP
.3a71fa	e2 20		sep #$20	            SEP #$20
.3a71fc	48		pha		            PHA
.3a71fd	a9 00		lda #$00	            LDA #$0
.3a71ff	48		pha		            PHA
.3a7200	ab		plb		            PLB
.3a7201	68		pla		            PLA
.3a7202	28		plp		            PLP
.3a7203	a0 03 00	ldy #$0003	                LDY #3
.3a7206	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.3a7209	20 d2 02	jsr $3a02d2	            JSR PRINTH
.3a720c	c2 20		rep #$20	            REP #$20
.3a720e	a9 20 00	lda #$0020	                LDA #' '
.3a7211	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7214	af 44 02 00	lda $000244	                LDA @lCPUA
.3a7218	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a721b	a9 20 00	lda #$0020	                LDA #' '
.3a721e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7221	af 46 02 00	lda $000246	                LDA @lCPUX
.3a7225	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a7228	a9 20 00	lda #$0020	                LDA #' '
.3a722b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a722e	af 48 02 00	lda $000248	                LDA @lCPUY
.3a7232	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a7235	a9 20 00	lda #$0020	                LDA #' '
.3a7238	20 18 00	jsr $3a0018	            JSR PRINTC
.3a723b	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK
.3a723f	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a7242	a9 20 00	lda #$0020	                LDA #' '
.3a7245	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7248	af 4e 02 00	lda $00024e	                LDA @lCPUDBR
.3a724c	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a724f	a9 20 00	lda #$0020	                LDA #' '
.3a7252	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7255	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7258	af 4c 02 00	lda $00024c	                LDA @lCPUDP
.3a725c	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a725f	a9 20 00	lda #$0020	                LDA #' '
.3a7262	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7265	08		php		                PHP
.3a7266	e2 20		sep #$20	            SEP #$20
.3a7268	ad 4f 02	lda $024f	                LDA CPUFLAGS
.3a726b	22 d3 84 3a	jsl $3a84d3	                JSL MPRINTB
.3a726f	28		plp		                PLP
.3a7270	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a7273	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a7276	6b		rtl		                RTL
.3a7277					IMFILL
.3a7277	08		php		                PHP                 ; Save the caller's context
.3a7278	0b		phd		                PHD
.3a7279	08		php		            PHP
.3a727a	c2 20		rep #$20	            REP #$20
.3a727c	48		pha		            PHA
.3a727d	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7280	5b		tcd		            TCD
.3a7281	68		pla		            PLA
.3a7282	28		plp		            PLP
.3a7283					do_copy
.3a7283	e2 20		sep #$20	            SEP #$20
.3a7285	a5 15		lda $085d	                LDA MARG3
.3a7287	87 0d		sta [$0855]	                STA [MARG1]
.3a7289	e2 20		sep #$20	            SEP #$20
.3a728b	a5 0f		lda $0857	                LDA MARG1+2
.3a728d	c5 13		cmp $085b	                CMP MARG2+2
.3a728f	d0 0e		bne $3a729f	                BNE go_next         ; No: we haven't reached end address yet
.3a7291	c2 20		rep #$20	            REP #$20
.3a7293	a5 0d		lda $0855	                LDA MARG1
.3a7295	c5 11		cmp $0859	                CMP MARG2           ; Are they equal?
.3a7297	d0 06		bne $3a729f	                BNE go_next         ; No: we haven't reached end address yet
.3a7299	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a729c	2b		pld		                PLD                 ; Restore the caller's context
.3a729d	28		plp		                PLP
.3a729e	6b		rtl		                RTL
.3a729f					go_next
.3a729f	c2 20		rep #$20	            REP #$20
.3a72a1	18		clc		                CLC
.3a72a2	a5 0d		lda $0855	                LDA MARG1
.3a72a4	69 01 00	adc #$0001	                ADC #1
.3a72a7	85 0d		sta $0855	                STA MARG1
.3a72a9	e2 20		sep #$20	            SEP #$20
.3a72ab	a5 0e		lda $0856	                LDA MARG1+1
.3a72ad	69 00		adc #$00	                ADC #0
.3a72af	85 0e		sta $0856	                STA MARG1+1
.3a72b1	80 d0		bra $3a7283	                BRA do_copy
.3a72b3					IMTRANSFER
.3a72b3	08		php		                PHP
.3a72b4	0b		phd		                PHD
.3a72b5	08		php		            PHP
.3a72b6	c2 20		rep #$20	            REP #$20
.3a72b8	48		pha		            PHA
.3a72b9	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a72bc	5b		tcd		            TCD
.3a72bd	68		pla		            PLA
.3a72be	28		plp		            PLP
.3a72bf	e2 20		sep #$20	            SEP #$20
.3a72c1	a5 0f		lda $0857	                LDA MARG1+2
.3a72c3	c5 17		cmp $085f	                CMP MARG3+2
.3a72c5	90 45		bcc $3a730c	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.3a72c7	c2 20		rep #$20	            REP #$20
.3a72c9	a5 0d		lda $0855	                LDA MARG1
.3a72cb	c5 15		cmp $085d	                CMP MARG3
.3a72cd	90 3d		bcc $3a730c	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.3a72cf					copy_byte_down
.3a72cf	e2 20		sep #$20	            SEP #$20
.3a72d1	a7 0d		lda [$0855]	                LDA [MARG1]         ; Copy the byte
.3a72d3	87 15		sta [$085d]	                STA [MARG3]
.3a72d5	a5 0f		lda $0857	                LDA MARG1+2         ; Are the source's current and end bank bytes equal?
.3a72d7	c5 13		cmp $085b	                CMP MARG2+2
.3a72d9	d0 0b		bne $3a72e6	                BNE inc_pointers    ; No: we're not done yet
.3a72db	c2 20		rep #$20	            REP #$20
.3a72dd	a5 0d		lda $0855	                LDA MARG1           ; Are the rest of the bits equal?
.3a72df	c5 11		cmp $0859	                CMP MARG2
.3a72e1	d0 03		bne $3a72e6	                BNE inc_pointers    ; No: we're not done yet
.3a72e3	4c 6a 73	jmp $3a736a	                JMP done            ; Yes: we've copied the last byte, exit
.3a72e6					inc_pointers
.3a72e6	c2 20		rep #$20	            REP #$20
.3a72e8	18		clc		                CLC
.3a72e9	a5 0d		lda $0855	                LDA MARG1
.3a72eb	69 01 00	adc #$0001	                ADC #1
.3a72ee	85 0d		sta $0855	                STA MARG1
.3a72f0	e2 20		sep #$20	            SEP #$20
.3a72f2	a5 0e		lda $0856	                LDA MARG1+1
.3a72f4	69 00		adc #$00	                ADC #0
.3a72f6	85 0e		sta $0856	                STA MARG1+1
.3a72f8	c2 20		rep #$20	            REP #$20
.3a72fa	18		clc		                CLC
.3a72fb	a5 15		lda $085d	                LDA MARG3
.3a72fd	69 01 00	adc #$0001	                ADC #1
.3a7300	85 15		sta $085d	                STA MARG3
.3a7302	e2 20		sep #$20	            SEP #$20
.3a7304	a5 16		lda $085e	                LDA MARG3+1
.3a7306	69 00		adc #$00	                ADC #0
.3a7308	85 16		sta $085e	                STA MARG3+1
.3a730a	80 c3		bra $3a72cf	                BRA copy_byte_down  ; And copy that next byte over
.3a730c					copy_up
.3a730c	c2 20		rep #$20	            REP #$20
.3a730e	38		sec		                SEC
.3a730f	a5 11		lda $0859	                LDA MARG2
.3a7311	e5 0d		sbc $0855	                SBC MARG1
.3a7313	85 19		sta $0861	                STA MARG4
.3a7315	e2 20		sep #$20	            SEP #$20
.3a7317	a5 13		lda $085b	                LDA MARG2+2
.3a7319	e5 0f		sbc $0857	                SBC MARG1+2
.3a731b	85 1b		sta $0863	                STA MARG4+2
.3a731d	c2 20		rep #$20	            REP #$20
.3a731f	18		clc		                CLC
.3a7320	a5 19		lda $0861	                LDA MARG4
.3a7322	65 15		adc $085d	                ADC MARG3
.3a7324	85 15		sta $085d	                STA MARG3
.3a7326	e2 20		sep #$20	            SEP #$20
.3a7328	a5 1b		lda $0863	                LDA MARG4+2
.3a732a	65 17		adc $085f	                ADC MARG3+2
.3a732c	85 17		sta $085f	                STA MARG3+2
.3a732e					copy_byte_up
.3a732e	e2 20		sep #$20	            SEP #$20
.3a7330	a7 11		lda [$0859]	                LDA [MARG2]
.3a7332	87 15		sta [$085d]	                STA [MARG3]
.3a7334	a5 13		lda $085b	                LDA MARG2+2         ; Are the source's current and start bank bytes equal?
.3a7336	c5 0f		cmp $0857	                CMP MARG1+2
.3a7338	d0 0a		bne $3a7344	                BNE dec_pointers    ; No: we're not done yet
.3a733a	c2 20		rep #$20	            REP #$20
.3a733c	a5 11		lda $0859	                LDA MARG2           ; Are the rest of the bits equal?
.3a733e	c5 0d		cmp $0855	                CMP MARG1
.3a7340	d0 02		bne $3a7344	                BNE dec_pointers    ; No: we're not done yet
.3a7342	80 26		bra $3a736a	                BRA done            ; Yes: we've copied the last byte, exit
.3a7344					dec_pointers
.3a7344	c2 20		rep #$20	            REP #$20
.3a7346	38		sec		                SEC
.3a7347	a5 11		lda $0859	                LDA MARG2
.3a7349	e9 01 00	sbc #$0001	                SBC #1
.3a734c	85 11		sta $0859	                STA MARG2
.3a734e	e2 20		sep #$20	            SEP #$20
.3a7350	a5 12		lda $085a	                LDA MARG2+1
.3a7352	e9 00		sbc #$00	                SBC #0
.3a7354	85 12		sta $085a	                STA MARG2+1
.3a7356	c2 20		rep #$20	            REP #$20
.3a7358	38		sec		                SEC                 ; Decrement the current destination pointer (MARG3)
.3a7359	a5 15		lda $085d	                LDA MARG3
.3a735b	e9 01 00	sbc #$0001	                SBC #1
.3a735e	85 15		sta $085d	                STA MARG3
.3a7360	e2 20		sep #$20	            SEP #$20
.3a7362	a5 16		lda $085e	                LDA MARG3+1
.3a7364	e9 00		sbc #$00	                SBC #0
.3a7366	85 16		sta $085e	                STA MARG3+1
.3a7368	80 c4		bra $3a732e	                BRA copy_byte_up    ; And copy that next byte
.3a736a					done
.3a736a	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a736d	2b		pld		                PLD
.3a736e	28		plp		                PLP
.3a736f	6b		rtl		                RTL
.3a7370					IS_PRINTABLE
.3a7370	08		php		                PHP
.3a7371	e2 20		sep #$20	            SEP #$20
.3a7373	c9 21		cmp #$21	                CMP #33
.3a7375	90 0b		bcc $3a7382	                BLT not_printable   ; 0 .. 31 are not printable
.3a7377	c9 7f		cmp #$7f	                CMP #127
.3a7379	90 04		bcc $3a737f	                BLT printable       ; 32 .. 126 are printable
.3a737b	c9 a0		cmp #$a0	                CMP #160
.3a737d	90 03		bcc $3a7382	                BLT not_printable   ; 127 .. 159 are not printable (assuming Latin-1)
.3a737f	28		plp		printable       PLP
.3a7380	38		sec		                SEC
.3a7381	6b		rtl		                RTL
.3a7382	28		plp		not_printable   PLP
.3a7383	18		clc		                CLC
.3a7384	6b		rtl		                RTL
=256					MMEMDUMPSIZE = 256  ; Default number of bytes to dump
=8					MMEMROWSIZE = 8    ; Number of bytes to dump per-row
.3a7385					IMMEMORY
.3a7385	08		php		                PHP
.3a7386	8b		phb		                PHB
.3a7387	0b		phd		                PHD
.3a7388	08		php		            PHP
.3a7389	c2 20		rep #$20	            REP #$20
.3a738b	48		pha		            PHA
.3a738c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a738f	5b		tcd		            TCD
.3a7390	68		pla		            PLA
.3a7391	28		plp		            PLP
.3a7392	e2 20		sep #$20	            SEP #$20
.3a7394	a9 00		lda #$00	                LDA #0              ; Clear the pagination line counter
.3a7396	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT
.3a739a	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a739c	c9 02		cmp #$02	                CMP #2
.3a739e	b0 16		bcs $3a73b6	                BGE set_cursor      ; 2>= arguments? Use them as-is
.3a73a0	c9 01		cmp #$01	                CMP #1
.3a73a2	90 20		bcc $3a73c4	                BLT no_args         ; No arguments passed? Use defaults
.3a73a4	c2 20		rep #$20	            REP #$20
.3a73a6	18		clc		                CLC
.3a73a7	a5 0d		lda $0855	                LDA MARG1
.3a73a9	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a73ac	85 11		sta $0859	                STA MARG2
.3a73ae	e2 20		sep #$20	            SEP #$20
.3a73b0	a5 0f		lda $0857	                LDA MARG1+2
.3a73b2	69 00		adc #$00	                ADC #0
.3a73b4	85 13		sta $085b	                STA MARG2+2
.3a73b6					set_cursor
.3a73b6	c2 20		rep #$20	            REP #$20
.3a73b8	a5 0d		lda $0855	                LDA MARG1
.3a73ba	85 32		sta $087a	                STA MCURSOR
.3a73bc	e2 20		sep #$20	            SEP #$20
.3a73be	a5 0f		lda $0857	                LDA MARG1+2
.3a73c0	85 34		sta $087c	                STA MCURSOR+2
.3a73c2	80 12		bra $3a73d6	                BRA dump_line
.3a73c4					no_args
.3a73c4	c2 20		rep #$20	            REP #$20
.3a73c6	18		clc		                CLC
.3a73c7	a5 32		lda $087a	                LDA MCURSOR
.3a73c9	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a73cc	85 11		sta $0859	                STA MARG2
.3a73ce	e2 20		sep #$20	            SEP #$20
.3a73d0	a5 34		lda $087c	                LDA MCURSOR+2
.3a73d2	69 00		adc #$00	                ADC #0
.3a73d4	85 13		sta $085b	                STA MARG2+2
.3a73d6					dump_line
.3a73d6	e2 20		sep #$20	            SEP #$20
.3a73d8	a0 00 00	ldy #$0000	                LDY #0
.3a73db	c2 20		rep #$20	            REP #$20
.3a73dd	a5 32		lda $087a	                LDA MCURSOR             ; NOTE: the use of MARG4 here is a temporary
.3a73df	85 19		sta $0861	                STA MARG4               ; hack. the copy_loop instruction does not
.3a73e1	e2 20		sep #$20	            SEP #$20
.3a73e3	a5 34		lda $087c	                LDA MCURSOR+2
.3a73e5	85 1b		sta $0863	                STA MARG4+2
.3a73e7	e2 20		sep #$20	            SEP #$20
.3a73e9	a7 19		lda [$0861]	copy_loop       LDA [MARG4]             ; TODO: Should be LDA [MCURSOR],Y, which doesn't seem to be working
.3a73eb	22 70 73 3a	jsl $3a7370	                JSL IS_PRINTABLE        ; Is it printable?
.3a73ef	b0 02		bcs $3a73f3	                BCS buffer_char         ; Yes: go ahead and add it to the line buffer
.3a73f1	a9 3f		lda #$3f	                LDA #'?'                ; No: replace it with dot
.3a73f3	99 7e 08	sta $087e,y	buffer_char     STA #MLINEBUF,B,Y
.3a73f6	c2 20		rep #$20	            REP #$20
.3a73f8	18		clc		                CLC
.3a73f9	a5 19		lda $0861	                LDA MARG4
.3a73fb	69 01 00	adc #$0001	                ADC #1
.3a73fe	85 19		sta $0861	                STA MARG4
.3a7400	e2 20		sep #$20	            SEP #$20
.3a7402	a5 1b		lda $0863	                LDA MARG4+2
.3a7404	69 00		adc #$00	                ADC #0
.3a7406	85 1b		sta $0863	                STA MARG4+2
.3a7408	c8		iny		                INY
.3a7409	c0 08 00	cpy #$0008	                CPY #MMEMROWSIZE
.3a740c	90 db		bcc $3a73e9	                BLT copy_loop
.3a740e	a9 00		lda #$00	                LDA #0
.3a7410	99 7e 08	sta $087e,y	                STA #MLINEBUF,B,Y
.3a7413	a9 3e		lda #$3e	                LDA #'>'
.3a7415	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7418	a9 20		lda #$20	                LDA #' '
.3a741a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a741d	e2 20		sep #$20	            SEP #$20
.3a741f	a5 34		lda $087c	                LDA MCURSOR+2
.3a7421	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a7424	a9 3a		lda #$3a	                LDA #':'                ; then a colon
.3a7426	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7429	c2 20		rep #$20	            REP #$20
.3a742b	a5 32		lda $087a	                LDA MCURSOR
.3a742d	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a7430	c2 20		rep #$20	            REP #$20
.3a7432	a9 08 00	lda #$0008	                LDA #MMEMROWSIZE
.3a7435	85 47		sta $088f	                STA MCOUNT
.3a7437					prhex_loop
.3a7437	e2 20		sep #$20	            SEP #$20
.3a7439	a9 20		lda #$20	                LDA #' '
.3a743b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a743e	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a7440	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a7443	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR        ; Point MCURSOR to the next byte
.3a7447					check_line
.3a7447	e2 20		sep #$20	            SEP #$20
.3a7449	c6 47		dec $088f	                DEC MCOUNT              ; Count down the number of bytes on the row
.3a744b	d0 ea		bne $3a7437	                BNE prhex_loop          ; If we're not at zero, keep looping over the bytes
.3a744d	a9 20		lda #$20	                LDA #' '
.3a744f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7452	a9 20		lda #$20	                LDA #' '
.3a7454	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7457	08		php		            PHP
.3a7458	e2 20		sep #$20	            SEP #$20
.3a745a	48		pha		            PHA
.3a745b	a9 00		lda #$00	            LDA #`MLINEBUF
.3a745d	48		pha		            PHA
.3a745e	ab		plb		            PLB
.3a745f	68		pla		            PLA
.3a7460	28		plp		            PLP
.3a7461	a2 7e 08	ldx #$087e	                LDX #MLINEBUF
.3a7464	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a7467	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a746a	20 d9 02	jsr $3a02d9	            JSR PAGINATE
.3a746d	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.3a746f	c5 13		cmp $085b	                CMP MARG2+2
.3a7471	90 0f		bcc $3a7482	                BLT continue            ; No: continue
.3a7473	c2 20		rep #$20	            REP #$20
.3a7475	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.3a7477	c5 11		cmp $0859	                CMP MARG2
.3a7479	90 07		bcc $3a7482	                BLT continue            ; Nope... keep going
.3a747b					done
.3a747b	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a747e	2b		pld		                PLD
.3a747f	ab		plb		                PLB
.3a7480	28		plp		                PLP
.3a7481	6b		rtl		                RTL
.3a7482	4c d6 73	jmp $3a73d6	continue        JMP dump_line
.3a7485					M_COPY_ARGB
.3a7485	08		php		                PHP
.3a7486	8d 92 08	sta $0892	                STA MTEMP
.3a7489	e2 20		sep #$20	            SEP #$20
.3a748b	bd 00 00	lda $0000,x	loop            LDA #0,B,X
.3a748e	99 00 00	sta $0000,y	                STA #0,B,Y      ; Copy the byte
.3a7491	ad 92 08	lda $0892	                LDA MTEMP       ; Check the count of characters remaining
.3a7494	f0 0a		beq $3a74a0	                BEQ done        ; If it's 0, we're done
.3a7496	c8		iny		                INY             ; Point to the next destination byte
.3a7497	e8		inx		                INX             ; Point to the next source byte (skip three bytes)
.3a7498	e8		inx		                INX
.3a7499	e8		inx		                INX
.3a749a	e8		inx		                INX
.3a749b	ce 92 08	dec $0892	                DEC MTEMP       ; Count down and see if we're done
.3a749e	80 eb		bra $3a748b	                BRA loop
.3a74a0	28		plp		done            PLP
.3a74a1	6b		rtl		                RTL
.3a74a2					IMMODIFY
.3a74a2	08		php		                PHP
.3a74a3	0b		phd		                PHD
.3a74a4	8b		phb		                PHB
.3a74a5	08		php		            PHP
.3a74a6	c2 20		rep #$20	            REP #$20
.3a74a8	48		pha		            PHA
.3a74a9	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a74ac	5b		tcd		            TCD
.3a74ad	68		pla		            PLA
.3a74ae	28		plp		            PLP
.3a74af	08		php		            PHP
.3a74b0	e2 20		sep #$20	            SEP #$20
.3a74b2	48		pha		            PHA
.3a74b3	a9 00		lda #$00	            LDA #0
.3a74b5	48		pha		            PHA
.3a74b6	ab		plb		            PLB
.3a74b7	68		pla		            PLA
.3a74b8	28		plp		            PLP
.3a74b9	c2 30		rep #$30	            REP #$30
.3a74bb	a5 0d		lda $0855	                LDA MARG1           ; Set MCURSOR to MARG1
.3a74bd	85 32		sta $087a	                STA MCURSOR
.3a74bf	a5 0f		lda $0857	                LDA MARG1+2
.3a74c1	85 34		sta $087c	                STA MCURSOR+2
.3a74c3	e2 20		sep #$20	            SEP #$20
.3a74c5	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.3a74c7	3a		dec a		                DEC A               ; (MARG_LEN - 1)
.3a74c8	85 47		sta $088f	                STA MCOUNT
.3a74ca	a2 59 08	ldx #$0859	                LDX #<>MARG2        ; Copy MCOUNT bytes from MARG2..MARG9
.3a74cd	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF     ; to MLINEBUF
.3a74d0	22 85 74 3a	jsl $3a7485	                JSL M_COPY_ARGB
.3a74d4	a0 00 00	ldy #$0000	                LDY #0
.3a74d7	b9 7e 08	lda $087e,y	loop            LDA MLINEBUF,Y      ; Copy the byte from the buffer
.3a74da	87 32		sta [$087a]	                STA [MCURSOR]       ; To the address indicated by MCURSOR
.3a74dc	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR    ; Advance the cursor
.3a74e0	c8		iny		                INY                 ; Go to the next buffered byte
.3a74e1	c4 47		cpy $088f	                CPY MCOUNT          ; Did we just write the last one?
.3a74e3	d0 f2		bne $3a74d7	                BNE loop            ; No: continue writing
.3a74e5	ab		plb		                PLB
.3a74e6	2b		pld		                PLD
.3a74e7	28		plp		                PLP
.3a74e8	6b		rtl		                RTL
.3a74e9					IMHUNT
.3a74e9	08		php		                PHP
.3a74ea	0b		phd		                PHD
.3a74eb	8b		phb		                PHB
.3a74ec	08		php		            PHP
.3a74ed	c2 20		rep #$20	            REP #$20
.3a74ef	48		pha		            PHA
.3a74f0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a74f3	5b		tcd		            TCD
.3a74f4	68		pla		            PLA
.3a74f5	28		plp		            PLP
.3a74f6	08		php		            PHP
.3a74f7	e2 20		sep #$20	            SEP #$20
.3a74f9	48		pha		            PHA
.3a74fa	a9 00		lda #$00	            LDA #0
.3a74fc	48		pha		            PHA
.3a74fd	ab		plb		            PLB
.3a74fe	68		pla		            PLA
.3a74ff	28		plp		            PLP
.3a7500	e2 20		sep #$20	            SEP #$20
.3a7502	c2 10		rep #$10	            REP #$10
.3a7504	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.3a7506	3a		dec a		                DEC A               ; (MARG_LEN - 2)
.3a7507	3a		dec a		                DEC A
.3a7508	85 47		sta $088f	                STA MCOUNT
.3a750a	a2 5d 08	ldx #$085d	                LDX #<>MARG3
.3a750d	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF
.3a7510	22 85 74 3a	jsl $3a7485	                JSL M_COPY_ARGB
.3a7514	c2 20		rep #$20	            REP #$20
.3a7516	a5 0d		lda $0855	                LDA MARG1           ; Copy starting address to MCURSOR
.3a7518	85 32		sta $087a	                STA MCURSOR
.3a751a	a5 0f		lda $0857	                LDA MARG1+2
.3a751c	85 34		sta $087c	                STA MCURSOR+2
.3a751e					outer_loop
.3a751e	c2 20		rep #$20	            REP #$20
.3a7520	a5 34		lda $087c	                LDA MCURSOR+2      ; If MCURSOR < MARG2, we're not done yet
.3a7522	c5 13		cmp $085b	                CMP MARG2+2
.3a7524	d0 06		bne $3a752c	                BNE not_done
.3a7526	a5 32		lda $087a	                LDA MCURSOR
.3a7528	c5 11		cmp $0859	                CMP MARG2
.3a752a	f0 2c		beq $3a7558	                BEQ done            ; MCURSOR = MARG2: we're done
.3a752c					not_done
.3a752c	e2 20		sep #$20	            SEP #$20
.3a752e	a0 00 00	ldy #$0000	                LDY #0
.3a7531	b7 32		lda [$087a],y	cmp_loop        LDA [MCURSOR],Y     ; Get the byte from the memory to check
.3a7533	d9 7e 08	cmp $087e,y	                CMP MLINEBUF,Y      ; Compare it against our pattern
.3a7536	d0 1a		bne $3a7552	                BNE advance         ; If not equal, we need to move on
.3a7538	c8		iny		                INY                 ; Otherwise do we have more bytes to check?
.3a7539	c4 47		cpy $088f	                CPY MCOUNT
.3a753b	d0 f4		bne $3a7531	                BNE cmp_loop        ; No: check more
.3a753d	c2 20		rep #$20	            REP #$20
.3a753f	a5 32		lda $087a	                LDA MCURSOR         ; Print the address
.3a7541	85 4a		sta $0892	                STA MTEMP
.3a7543	a5 34		lda $087c	                LDA MCURSOR+2
.3a7545	85 4c		sta $0894	                STA MTEMP+2
.3a7547	22 5c 7f 3a	jsl $3a7f5c	                JSL M_PR_ADDR
.3a754b	e2 20		sep #$20	            SEP #$20
.3a754d	a9 20		lda #$20	                LDA #' '
.3a754f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7552	22 b2 84 3a	jsl $3a84b2	advance         JSL M_INC_CURSOR    ; Move MCURSOR forward by one
.3a7556	80 c6		bra $3a751e	                BRA outer_loop      ; And try to compare that to the pattern
.3a7558					done
.3a7558	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a755b	ab		plb		                PLB
.3a755c	2b		pld		                PLD
.3a755d	28		plp		                PLP
.3a755e	6b		rtl		                RTL
.3a755f					IMJUMP
.3a755f	08		php		            PHP
.3a7560	c2 20		rep #$20	            REP #$20
.3a7562	48		pha		            PHA
.3a7563	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a7566	5b		tcd		            TCD
.3a7567	68		pla		            PLA
.3a7568	28		plp		            PLP
.3a7569	e2 20		sep #$20	            SEP #$20
.3a756b	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.3a756d	f0 0e		beq $3a757d	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.3a756f	c2 30		rep #$30	            REP #$30
.3a7571	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.3a7573	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.3a7577	a5 0f		lda $0857	                LDA MARG1+2
.3a7579	8f 42 02 00	sta $000242	                STA @lCPUPBR
.3a757d	af 46 02 00	lda $000246	MJUMPRESTORE    LDA @lCPUX          ; Restore X and Y
.3a7581	aa		tax		                TAX
.3a7582	af 48 02 00	lda $000248	                LDA @lCPUY
.3a7586	a8		tay		                TAY
.3a7587	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.3a758b	1b		tcs		                TCS
.3a758c	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.3a7590	5b		tcd		                TCD
.3a7591	e2 20		sep #$20	            SEP #$20
.3a7593	a9 3a		lda #$3a	                LDA #`MJUMPSTART
.3a7595	48		pha		                PHA
.3a7596	a9 75		lda #$75	                LDA #>MJUMPSTART
.3a7598	48		pha		                PHA
.3a7599	a9 9f		lda #$9f	                LDA #<MJUMPSTART
.3a759b	48		pha		                PHA
.3a759c	4c d6 75	jmp $3a75d6	                JMP MGOSTACK        ; And push remaining registers and restart execution
.3a759f	ea		nop		MJUMPSTART      NOP                 ; RTL increments PC pulled from stack, NOP leaves space for that
.3a75a0	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3a75a4					IMGO
.3a75a4	08		php		            PHP
.3a75a5	c2 20		rep #$20	            REP #$20
.3a75a7	48		pha		            PHA
.3a75a8	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a75ab	5b		tcd		            TCD
.3a75ac	68		pla		            PLA
.3a75ad	28		plp		            PLP
.3a75ae	e2 20		sep #$20	            SEP #$20
.3a75b0	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.3a75b2	f0 c9		beq $3a757d	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.3a75b4	c2 30		rep #$30	            REP #$30
.3a75b6	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.3a75b8	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.3a75bc	a5 0f		lda $0857	                LDA MARG1+2
.3a75be	8f 42 02 00	sta $000242	                STA @lCPUPBR
.3a75c2	af 46 02 00	lda $000246	MGORESTORE      LDA @lCPUX          ; Restore X and Y
.3a75c6	aa		tax		                TAX
.3a75c7	af 48 02 00	lda $000248	                LDA @lCPUY
.3a75cb	a8		tay		                TAY
.3a75cc	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.3a75d0	1b		tcs		                TCS
.3a75d1	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.3a75d5	5b		tcd		                TCD
.3a75d6					MGOSTACK
.3a75d6	e2 20		sep #$20	            SEP #$20
.3a75d8	af 4e 02 00	lda $00024e	                LDA @lCPUDBR        ; Restore the data bank register
.3a75dc	48		pha		                PHA
.3a75dd	ab		plb		                PLB
.3a75de	a9 5c		lda #$5c	                LDA #$5C            ; Save the JSL opcode
.3a75e0	8f a2 08 00	sta $0008a2	                STA @lMJUMPINST
.3a75e4	af 42 02 00	lda $000242	                LDA @lCPUPBR        ; Write PBR
.3a75e8	8f a5 08 00	sta $0008a5	                STA @lMJUMPADDR+2
.3a75ec	af 41 02 00	lda $000241	                LDA @lCPUPC+1       ; Write PCH
.3a75f0	8f a4 08 00	sta $0008a4	                STA @lMJUMPADDR+1
.3a75f4	af 40 02 00	lda $000240	                LDA @lCPUPC         ; Write PCL
.3a75f8	8f a3 08 00	sta $0008a3	                STA @lMJUMPADDR
.3a75fc	af 4f 02 00	lda $00024f	                LDA @lCPUFLAGS      ; Push processor status
.3a7600	48		pha		                PHA
.3a7601	c2 20		rep #$20	            REP #$20
.3a7603	af 44 02 00	lda $000244	                LDA @lCPUA          ; Restore A
.3a7607	28		plp		                PLP                 ; And the status register
.3a7608	5c a2 08 00	jmp $0008a2	                JML MJUMPINST       ; And jump to the target address
.3a760c					IMCOMPARE
.3a760c	08		php		                PHP
.3a760d	0b		phd		                PHD
.3a760e	8b		phb		                PHB
.3a760f	08		php		            PHP
.3a7610	e2 20		sep #$20	            SEP #$20
.3a7612	48		pha		            PHA
.3a7613	a9 3a		lda #$3a	            LDA #`MERRARGS
.3a7615	48		pha		            PHA
.3a7616	ab		plb		            PLB
.3a7617	68		pla		            PLA
.3a7618	28		plp		            PLP
.3a7619	08		php		            PHP
.3a761a	c2 20		rep #$20	            REP #$20
.3a761c	48		pha		            PHA
.3a761d	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a7620	5b		tcd		            TCD
.3a7621	68		pla		            PLA
.3a7622	28		plp		            PLP
.3a7623	c2 10		rep #$10	            REP #$10
.3a7625	e2 20		sep #$20	            SEP #$20
.3a7627	a5 31		lda $0879	                LDA MARG_LEN                ; Check the number of arguments provided
.3a7629	c9 02		cmp #$02	                CMP #2
.3a762b	f0 0c		beq $3a7639	                BEQ default_len             ; If 2: set MCOUNT to default of 1
.3a762d	c9 03		cmp #$03	                CMP #3
.3a762f	d0 11		bne $3a7642	                BNE bad_arguments           ; Otherwise, if not 3: print an error
.3a7631	c2 20		rep #$20	            REP #$20
.3a7633	a5 15		lda $085d	                LDA MARG3                   ; If 3: set MCOUNT to MARG3
.3a7635	85 47		sta $088f	                STA MCOUNT
.3a7637	80 11		bra $3a764a	                BRA compare
.3a7639					default_len
.3a7639	c2 20		rep #$20	            REP #$20
.3a763b	a9 01 00	lda #$0001	                LDA #1                      ; No length was provided, set MCOUNT to 1
.3a763e	85 47		sta $088f	                STA MCOUNT
.3a7640	80 08		bra $3a764a	                BRA compare
.3a7642	a2 7e 87	ldx #$877e	bad_arguments   LDX #<>MERRARGS             ; The wrong number of arguments was provided
.3a7645	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a7648	80 35		bra $3a767f	                BRA done
.3a764a	a5 0d		lda $0855	compare         LDA MARG1                   ; Set MTEMP to MARG1
.3a764c	85 4a		sta $0892	                STA MTEMP
.3a764e	a5 0f		lda $0857	                LDA MARG1+2
.3a7650	85 4c		sta $0894	                STA MTEMP+2
.3a7652	a0 00 00	ldy #$0000	                LDY #0
.3a7655					loop
.3a7655	e2 20		sep #$20	            SEP #$20
.3a7657	a7 4a		lda [$0892]	                LDA [MTEMP]                 ; Compare the byte at MTEMP
.3a7659	d7 11		cmp [$0859],y	                CMP [MARG2],Y               ; To the Yth byte from MARG2
.3a765b	f0 09		beq $3a7666	                BEQ continue                ; If they're the same, keep going
.3a765d	22 5c 7f 3a	jsl $3a7f5c	mismatch        JSL M_PR_ADDR               ; If they're different, print MTEMP
.3a7661	a9 20		lda #$20	                LDA #' '
.3a7663	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7666					continue
.3a7666	c2 20		rep #$20	            REP #$20
.3a7668	18		clc		                CLC                         ; Either way, increment MTEMP
.3a7669	a5 4a		lda $0892	                LDA MTEMP
.3a766b	69 01 00	adc #$0001	                ADC #1
.3a766e	85 4a		sta $0892	                STA MTEMP
.3a7670	a5 4c		lda $0894	                LDA MTEMP+2
.3a7672	69 00 00	adc #$0000	                ADC #0
.3a7675	85 4c		sta $0894	                STA MTEMP+2
.3a7677	c8		iny		                INY                         ; Increment Y
.3a7678	c4 47		cpy $088f	                CPY MCOUNT                  ; Try again unless we've checked MCOUNT bytes
.3a767a	d0 d9		bne $3a7655	                BNE loop
.3a767c	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a767f					done
.3a767f	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a7682	ab		plb		                PLB
.3a7683	2b		pld		                PLD
.3a7684	28		plp		                PLP
.3a7685	6b		rtl		                RTL
.3a7686					IMRMODIFY
.3a7686	08		php		                PHP
.3a7687	0b		phd		                PHD
.3a7688	8b		phb		                PHB
.3a7689	08		php		            PHP
.3a768a	e2 20		sep #$20	            SEP #$20
.3a768c	48		pha		            PHA
.3a768d	a9 00		lda #$00	            LDA #0
.3a768f	48		pha		            PHA
.3a7690	ab		plb		            PLB
.3a7691	68		pla		            PLA
.3a7692	28		plp		            PLP
.3a7693	08		php		            PHP
.3a7694	c2 20		rep #$20	            REP #$20
.3a7696	48		pha		            PHA
.3a7697	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a769a	5b		tcd		            TCD
.3a769b	68		pla		            PLA
.3a769c	28		plp		            PLP
.3a769d	e2 20		sep #$20	            SEP #$20
.3a769f	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a76a1	f0 4f		beq $3a76f2	                BEQ done            ; 0? Just quit
.3a76a3	a6 0d		ldx $0855	                LDX MARG1           ; Set the PC and PBR
.3a76a5	8e 40 02	stx $0240	                STX #CPUPC,B
.3a76a8	a6 0f		ldx $0857	                LDX MARG1+2
.3a76aa	8e 42 02	stx $0242	                STX #CPUPBR,B
.3a76ad	c9 01		cmp #$01	                CMP #1              ; Check the number of arguments
.3a76af	f0 41		beq $3a76f2	                BEQ done            ; 1? Just quit
.3a76b1	a6 11		ldx $0859	                LDX MARG2           ; Set A
.3a76b3	8e 44 02	stx $0244	                STX #CPUA,B
.3a76b6	c9 02		cmp #$02	                CMP #2              ; Check the number of arguments
.3a76b8	f0 38		beq $3a76f2	                BEQ done            ; 2? Just quit
.3a76ba	a6 15		ldx $085d	                LDX MARG3           ; Set X
.3a76bc	8e 46 02	stx $0246	                STX #CPUX,B
.3a76bf	c9 03		cmp #$03	                CMP #3              ; Check the number of arguments
.3a76c1	f0 2f		beq $3a76f2	                BEQ done            ; 3? Just quit
.3a76c3	a6 19		ldx $0861	                LDX MARG4           ; Set Y
.3a76c5	8e 48 02	stx $0248	                STX #CPUY,B
.3a76c8	c9 04		cmp #$04	                CMP #4              ; Check the number of arguments
.3a76ca	f0 26		beq $3a76f2	                BEQ done            ; 4? Just quit
.3a76cc	a6 1d		ldx $0865	                LDX MARG5           ; Set SP
.3a76ce	8e 4a 02	stx $024a	                STX #CPUSTACK,B
.3a76d1	c9 05		cmp #$05	                CMP #5              ; Check the number of arguments
.3a76d3	f0 1d		beq $3a76f2	                BEQ done            ; 5? Just quit
.3a76d5	e2 10		sep #$10	            SEP #$10
.3a76d7	a6 21		ldx $0869	                LDX MARG6           ; Set DBR
.3a76d9	8e 4e 02	stx $024e	                STX #CPUDBR,B
.3a76dc	c9 06		cmp #$06	                CMP #6              ; Check the number of arguments
.3a76de	f0 12		beq $3a76f2	                BEQ done            ; 6? Just quit
.3a76e0	c2 10		rep #$10	            REP #$10
.3a76e2	a6 25		ldx $086d	                LDX MARG7           ; Set DP
.3a76e4	8e 4c 02	stx $024c	                STX #CPUDP,B
.3a76e7	c9 07		cmp #$07	                CMP #7              ; Check the number of arguments
.3a76e9	f0 07		beq $3a76f2	                BEQ done            ; 7? Just quit
.3a76eb	e2 10		sep #$10	            SEP #$10
.3a76ed	a6 29		ldx $0871	                LDX MARG8           ; Set flags
.3a76ef	8e 4f 02	stx $024f	                STX #CPUFLAGS,B
.3a76f2	ab		plb		done            PLB
.3a76f3	2b		pld		                PLD
.3a76f4	28		plp		                PLP
.3a76f5	6b		rtl		                RTL
.3a76f6					IMEXECUTE
.3a76f6	08		php		                PHP
.3a76f7	0b		phd		                PHD
.3a76f8	8b		phb		                PHB
.3a76f9	08		php		            PHP
.3a76fa	c2 20		rep #$20	            REP #$20
.3a76fc	48		pha		            PHA
.3a76fd	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7700	5b		tcd		            TCD
.3a7701	68		pla		            PLA
.3a7702	28		plp		            PLP
.3a7703	e2 20		sep #$20	            SEP #$20
.3a7705	c2 10		rep #$10	            REP #$10
.3a7707	a2 00 00	ldx #$0000	                LDX #0
.3a770a	bf eb 87 3a	lda $3a87eb,x	loop            LDA @lMCOMMANDS,X
.3a770e	f0 18		beq $3a7728	                BEQ done
.3a7710	c7 08		cmp [$0850]	                CMP [MCMD]
.3a7712	f0 03		beq $3a7717	                BEQ found
.3a7714	e8		inx		                INX
.3a7715	80 f3		bra $3a770a	                BRA loop
.3a7717					found
.3a7717	c2 20		rep #$20	            REP #$20
.3a7719	8a		txa		                TXA
.3a771a	0a		asl a		                ASL A
.3a771b	aa		tax		                TAX
.3a771c	bf 2c 77 3a	lda $3a772c,x	                LDA dispatch,X
.3a7720	8f 2f 08 00	sta $00082f	                STA @lJMP16PTR
.3a7724	22 50 77 3a	jsl $3a7750	                JSL MDOCMD
.3a7728	ab		plb		done            PLB
.3a7729	2b		pld		                PLD
.3a772a	28		plp		                PLP
.3a772b	6b		rtl		                RTL
>3a772c	c9 6d				dispatch        .word <>MASSEMBLE
>3a772e	d1 6d				                .word <>MCOMPARE
>3a7730	d5 6d				                .word <>MDISASSEMBLE
>3a7732	d9 6d				                .word <>MFILL
>3a7734	dd 6d				                .word <>MGO
>3a7736	e1 6d				                .word <>MJUMP
>3a7738	e5 6d				                .word <>MHUNT
>3a773a	e9 6d				                .word <>MLOAD
>3a773c	ed 6d				                .word <>MMEMORY
>3a773e	f1 6d				                .word <>MREGISTERS
>3a7740	cd 6d				                .word <>MRMODIFY
>3a7742	f5 6d				                .word <>MSAVE
>3a7744	f9 6d				                .word <>MTRANSFER
>3a7746	fd 6d				                .word <>MVERIFY
>3a7748	c5 71				                .word <>IMWIDTH
>3a774a	01 6e				                .word <>MEXIT
>3a774c	05 6e				                .word <>MMODIFY
>3a774e	3e 6e				                .word <>IMHELP
.3a7750					MDOCMD
.3a7750	6c 2f 08	jmp ($082f)	                JMP (JMP16PTR)

;******  Processing file: src\assembler.s

=0					ADDR_DP_IND_X = 0       ; (dd,X)
=1					ADDR_DP = 1             ; dd
=2					ADDR_IMM = 2            ; #dd
=3					ADDR_ABS = 3            ; dddd
=4					ADDR_DP_IND_Y = 4       ; (dd),Y
=5					ADDR_DP_X = 5           ; dd,X
=6					ADDR_ABS_Y = 6          ; dddd,Y
=7					ADDR_ABS_X = 7          ; dddd,X
=8					ADDR_ACC = 8            ; A
=9					ADDR_SP_R = 9           ; #d,S
=10					ADDR_DP_LONG = 10       ; [dd]
=11					ADDR_ABS_LONG = 11      ; dddddd
=12					ADDR_SP_R_Y = 12        ; #dd,S,Y
=13					ADDR_DP_Y_LONG = 13     ; [dd],Y
=14					ADDR_ABS_X_LONG = 14    ; dddddd,X
=15					ADDR_DP_IND = 15        ; (dd)
=16					ADDR_ABS_X_ID = 16      ; (dddd,X)
=17					ADDR_DP_Y = 17          ; dd,Y
=18					ADDR_PC_REL = 18        ; PC relative
=19					ADDR_IMPLIED = 19       ; Implied (no operand)
=20					ADDR_XYC = 20           ; #dd, #dd
=21					ADDR_ABS_IND = 21       ; (dddd)
=22					ADDR_PC_REL_LONG = 22   ; PC relative ()
=23					ADDR_ABS_IND_LONG = 23  ; [dddd]
=$80					OP_M_EFFECT = $80       ; Flag to indicate instruction is modified by M
=$40					OP_X_EFFECT = $40       ; Flag to indicate instruction is modified by X
.3a7753					IMASSEMBLE
.3a7753	08		php		                PHP
.3a7754	8b		phb		                PHB
.3a7755	0b		phd		                PHD
.3a7756	08		php		            PHP
.3a7757	c2 20		rep #$20	            REP #$20
.3a7759	48		pha		            PHA
.3a775a	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a775d	5b		tcd		            TCD
.3a775e	68		pla		            PLA
.3a775f	28		plp		            PLP
.3a7760	e2 20		sep #$20	            SEP #$20
.3a7762	a5 31		lda $0879	                LDA MARG_LEN            ; Do we have at least 2 arguments?
.3a7764	c9 02		cmp #$02	                CMP #2
.3a7766	b0 03		bcs $3a776b	                BGE has_args            ; Yes: try to assemble the line
.3a7768	4c f9 78	jmp $3a78f9	                JMP done                ; No: just return
.3a776b					has_args
.3a776b	c2 20		rep #$20	            REP #$20
.3a776d	a5 0d		lda $0855	                LDA MARG1               ; Set the monitor cursor to the address
.3a776f	85 32		sta $087a	                STA MCURSOR
.3a7771	a5 0f		lda $0857	                LDA MARG1+2
.3a7773	85 34		sta $087c	                STA MCURSOR+2
.3a7775	c2 20		rep #$20	            REP #$20
.3a7777	22 fb 7a 3a	jsl $3a7afb	                JSL AS_FIND_MNEMO       ; Find the address of the mnemonic
.3a777b	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a777e	f0 10		beq $3a7790	                BEQ bad_mnemonic        ; If not found, print bad mnemonic error message
.3a7780	85 54		sta $089c	                STA MMNEMONIC
.3a7782	e2 20		sep #$20	            SEP #$20
.3a7784	a5 31		lda $0879	                LDA MARG_LEN            ; Check the number of arguments passed
.3a7786	c9 03		cmp #$03	                CMP #3                  ; Were all three arguments provided?
.3a7788	f0 36		beq $3a77c0	                BEQ get_operand         ; Yes: parse the operand
.3a778a	a9 13		lda #$13	                LDA #ADDR_IMPLIED       ; No: assume address mode is implied
.3a778c	85 4f		sta $0897	                STA MADDR_MODE
.3a778e	80 4c		bra $3a77dc	                BRA get_opcode
.3a7790					bad_mnemonic
.3a7790	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a7793	08		php		            PHP
.3a7794	e2 20		sep #$20	            SEP #$20
.3a7796	48		pha		            PHA
.3a7797	a9 3a		lda #$3a	            LDA #`MERRBADMNEMO
.3a7799	48		pha		            PHA
.3a779a	ab		plb		            PLB
.3a779b	68		pla		            PLA
.3a779c	28		plp		            PLP
.3a779d	c2 10		rep #$10	            REP #$10
.3a779f	a2 30 79	ldx #$7930	                LDX #<>MERRBADMNEMO
.3a77a2	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a77a5	4c f9 78	jmp $3a78f9	                JMP done
.3a77a8					bad_operand
.3a77a8	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a77ab	08		php		            PHP
.3a77ac	e2 20		sep #$20	            SEP #$20
.3a77ae	48		pha		            PHA
.3a77af	a9 3a		lda #$3a	            LDA #`MERRBADOPER
.3a77b1	48		pha		            PHA
.3a77b2	ab		plb		            PLB
.3a77b3	68		pla		            PLA
.3a77b4	28		plp		            PLP
.3a77b5	c2 10		rep #$10	            REP #$10
.3a77b7	a2 3f 79	ldx #$793f	                LDX #<>MERRBADOPER
.3a77ba	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a77bd	4c f9 78	jmp $3a78f9	                JMP done
.3a77c0					get_operand
.3a77c0	e2 20		sep #$20	            SEP #$20
.3a77c2	22 31 7b 3a	jsl $3a7b31	                JSL AS_FIND_MODE        ; Find the addressing mode of the operand
.3a77c6	c9 ff		cmp #$ff	compare         CMP #$FF
.3a77c8	f0 de		beq $3a77a8	                BEQ bad_operand         ; If not found, print bad operand error message
.3a77ca	85 4f		sta $0897	                STA MADDR_MODE
.3a77cc	c9 03		cmp #$03	                CMP #ADDR_ABS           ; If mode is absolute or absolute long...
.3a77ce	f0 62		beq $3a7832	                BEQ check_for_pcrel     ; Check to see if the mnemonic is one of the branches
.3a77d0	c9 0b		cmp #$0b	                CMP #ADDR_ABS_LONG
.3a77d2	f0 5e		beq $3a7832	                BEQ check_for_pcrel
.3a77d4	c9 13		cmp #$13	                CMP #ADDR_IMPLIED       ; If mode is implied or accumulator, get the opcode
.3a77d6	f0 04		beq $3a77dc	                BEQ get_opcode
.3a77d8	c9 08		cmp #$08	                CMP #ADDR_ACC
.3a77da	f0 00		beq $3a77dc	                BEQ get_opcode
.3a77dc	22 29 7a 3a	jsl $3a7a29	get_opcode      JSL AS_FIND_OPCODE      ; Find the opcode matching the two
.3a77e0	b0 03		bcs $3a77e5	                BCS save_opcode
.3a77e2	4c c2 78	jmp $3a78c2	                JMP bad_mode            ; If opcode not found, print bad address mode error message
.3a77e5	87 32		sta [$087a]	save_opcode     STA [MCURSOR]           ; Write the opcode to the address
.3a77e7	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR        ; And point to the next byte
.3a77eb	08		php		            PHP
.3a77ec	e2 20		sep #$20	            SEP #$20
.3a77ee	48		pha		            PHA
.3a77ef	a9 00		lda #$00	            LDA #0
.3a77f1	48		pha		            PHA
.3a77f2	ab		plb		            PLB
.3a77f3	68		pla		            PLA
.3a77f4	28		plp		            PLP
.3a77f5	c2 20		rep #$20	            REP #$20
.3a77f7	a5 32		lda $087a	                LDA MCURSOR             ; Make MTEMPPTR a pointer to the machine code we're assembling
.3a77f9	85 56		sta $089e	                STA MTEMPPTR
.3a77fb	a5 34		lda $087c	                LDA MCURSOR+2
.3a77fd	85 58		sta $08a0	                STA MTEMPPTR+2
.3a77ff	e2 20		sep #$20	            SEP #$20
.3a7801	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check the address mode again
.3a7803	c9 12		cmp #$12	                CMP #ADDR_PC_REL        ; If it's PC relative
.3a7805	f0 6c		beq $3a7873	                BEQ compute_rel         ; Convert the address to an offset
.3a7807	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.3a7809	f0 68		beq $3a7873	                BEQ compute_rel
.3a780b	c9 14		cmp #$14	                CMP #ADDR_XYC           ; MVP/MVN addressing mode?
.3a780d	f0 7c		beq $3a788b	                BEQ emit_2
.3a780f	29 3f		and #$3f	                AND #%00111111          ; Filter out the mode bits
.3a7811	c9 02		cmp #$02	                CMP #ADDR_IMM           ; Is it immediate?
.3a7813	d0 03		bne $3a7818	                BNE fixed_length        ; Yes: emit it as an immediate (variable length)
.3a7815	4c f0 78	jmp $3a78f0	                JMP emit_imm
.3a7818					fixed_length
.3a7818	c2 20		rep #$20	            REP #$20
.3a781a	29 ff 00	and #$00ff	                AND #$00FF
.3a781d	aa		tax		                TAX
.3a781e	e2 20		sep #$20	            SEP #$20
.3a7820	bf f8 83 3a	lda $3a83f8,x	get_length      LDA ADDR_LENGTH,X       ; Get the number of bytes in the addressing mode
.3a7824	c9 03		cmp #$03	                CMP #$03
.3a7826	f0 57		beq $3a787f	                BEQ emit_3
.3a7828	c9 02		cmp #$02	                CMP #$02
.3a782a	f0 5f		beq $3a788b	                BEQ emit_2
.3a782c	c9 01		cmp #$01	                CMP #$01
.3a782e	f0 67		beq $3a7897	                BEQ emit_1
.3a7830	80 71		bra $3a78a3	                BRA next_line
.3a7832					check_for_pcrel
.3a7832	c2 20		rep #$20	            REP #$20
.3a7834	a5 54		lda $089c	                LDA MMNEMONIC
.3a7836	c9 70 80	cmp #$8070	                CMP #<>MN_BRA
.3a7839	f0 26		beq $3a7861	                BEQ is_pcrel
.3a783b	c9 d4 80	cmp #$80d4	                CMP #<>MN_BRL
.3a783e	f0 2a		beq $3a786a	                BEQ is_pcrel_long
.3a7840	c9 54 80	cmp #$8054	                CMP #<>MN_BCC
.3a7843	f0 1c		beq $3a7861	                BEQ is_pcrel
.3a7845	c9 58 80	cmp #$8058	                CMP #<>MN_BCS
.3a7848	f0 17		beq $3a7861	                BEQ is_pcrel
.3a784a	c9 60 80	cmp #$8060	                CMP #<>MN_BEQ
.3a784d	f0 12		beq $3a7861	                BEQ is_pcrel
.3a784f	c9 48 80	cmp #$8048	                CMP #<>MN_BMI
.3a7852	f0 0d		beq $3a7861	                BEQ is_pcrel
.3a7854	c9 5c 80	cmp #$805c	                CMP #<>MN_BNE
.3a7857	f0 08		beq $3a7861	                BEQ is_pcrel
.3a7859	c9 44 80	cmp #$8044	                CMP #<>MN_BPL
.3a785c	f0 03		beq $3a7861	                BEQ is_pcrel
.3a785e	4c dc 77	jmp $3a77dc	                JMP get_opcode
.3a7861					is_pcrel
.3a7861	e2 20		sep #$20	            SEP #$20
.3a7863	a9 12		lda #$12	                LDA #ADDR_PC_REL
.3a7865	85 4f		sta $0897	                STA MADDR_MODE
.3a7867	4c dc 77	jmp $3a77dc	                JMP get_opcode
.3a786a					is_pcrel_long
.3a786a	e2 20		sep #$20	            SEP #$20
.3a786c	a9 16		lda #$16	                LDA #ADDR_PC_REL_LONG
.3a786e	85 4f		sta $0897	                STA MADDR_MODE
.3a7870	4c dc 77	jmp $3a77dc	                JMP get_opcode
.3a7873	22 6c 79 3a	jsl $3a796c	compute_rel     JSL AS_PC_OFFSET        ; Try to compute the offset
.3a7877	90 60		bcc $3a78d9	                BCC bad_offset          ; If failed, it's a bad offset operand
.3a7879	c9 02		cmp #$02	emit_rel        CMP #$02                ; If the offset is two bytes
.3a787b	f0 0e		beq $3a788b	                BEQ emit_2              ; Emit those two bytes
.3a787d	80 18		bra $3a7897	                BRA emit_1              ; Otherwise emit just the one
.3a787f	a0 02 00	ldy #$0002	emit_3          LDY #2                  ; Write bank byte of operand
.3a7882	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a7885	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a7887	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a788b	a0 01 00	ldy #$0001	emit_2          LDY #1                  ; Write high byte of operand
.3a788e	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a7891	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a7893	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a7897	a0 00 00	ldy #$0000	emit_1          LDY #0                  ; Write low byte of operand
.3a789a	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a789d	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a789f	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a78a3					next_line
.3a78a3	e2 20		sep #$20	            SEP #$20
.3a78a5	a9 41		lda #$41	                LDA #'A'
.3a78a7	20 18 00	jsr $3a0018	            JSR PRINTC
.3a78aa	a9 20		lda #$20	                LDA #' '
.3a78ac	20 18 00	jsr $3a0018	            JSR PRINTC
.3a78af	a6 32		ldx $087a	                LDX MCURSOR
.3a78b1	86 4a		stx $0892	                STX MTEMP
.3a78b3	a6 34		ldx $087c	                LDX MCURSOR+2
.3a78b5	86 4c		stx $0894	                STX MTEMP+2
.3a78b7	22 5c 7f 3a	jsl $3a7f5c	                JSL M_PR_ADDR
.3a78bb	a9 20		lda #$20	                LDA #' '
.3a78bd	20 18 00	jsr $3a0018	            JSR PRINTC
.3a78c0	80 37		bra $3a78f9	                BRA done
.3a78c2					bad_mode
.3a78c2	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a78c5	08		php		            PHP
.3a78c6	e2 20		sep #$20	            SEP #$20
.3a78c8	48		pha		            PHA
.3a78c9	a9 3a		lda #$3a	            LDA #`MERRBADMODE
.3a78cb	48		pha		            PHA
.3a78cc	ab		plb		            PLB
.3a78cd	68		pla		            PLA
.3a78ce	28		plp		            PLP
.3a78cf	c2 10		rep #$10	            REP #$10
.3a78d1	a2 fd 78	ldx #$78fd	                LDX #<>MERRBADMODE
.3a78d4	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a78d7	80 20		bra $3a78f9	                BRA done
.3a78d9					bad_offset
.3a78d9	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a78dc	08		php		            PHP
.3a78dd	e2 20		sep #$20	            SEP #$20
.3a78df	48		pha		            PHA
.3a78e0	a9 3a		lda #$3a	            LDA #`MERRBADOFFSET
.3a78e2	48		pha		            PHA
.3a78e3	ab		plb		            PLB
.3a78e4	68		pla		            PLA
.3a78e5	28		plp		            PLP
.3a78e6	c2 10		rep #$10	            REP #$10
.3a78e8	a2 4d 79	ldx #$794d	                LDX #<>MERRBADOFFSET
.3a78eb	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a78ee	80 09		bra $3a78f9	                BRA done
.3a78f0	a5 4f		lda $0897	emit_imm        LDA MADDR_MODE          ; Check to see if long immediate was used
.3a78f2	29 c0		and #$c0	                AND #%11000000
.3a78f4	d0 95		bne $3a788b	                BNE emit_2              ; Yes: emit two bytes
.3a78f6	4c 97 78	jmp $3a7897	                JMP emit_1              ; No: emit one byte
.3a78f9	2b		pld		done            PLD
.3a78fa	ab		plb		                PLB
.3a78fb	28		plp		                PLP
.3a78fc	6b		rtl		                RTL
>3a78fd	41 64 64 72 65 73 73 69		MERRBADMODE     .null "Addressing mode not defined for that instruction.",CHAR_CR
>3a7905	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>3a7915	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>3a7925	74 72 75 63 74 69 6f 6e 2e 0d 00
>3a7930	42 61 64 20 6d 6e 65 6d		MERRBADMNEMO    .null "Bad mnemonic.",CHAR_CR
>3a7938	6f 6e 69 63 2e 0d 00
>3a793f	42 61 64 20 6f 70 65 72		MERRBADOPER     .null "Bad operand.",CHAR_CR
>3a7947	61 6e 64 2e 0d 00
>3a794d	52 65 6c 61 74 69 76 65		MERRBADOFFSET   .null "Relative offset is too large.",CHAR_CR
>3a7955	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>3a7965	61 72 67 65 2e 0d 00
.3a796c					AS_PC_OFFSET
.3a796c	08		php		                PHP
.3a796d	0b		phd		                PHD
.3a796e	08		php		            PHP
.3a796f	c2 20		rep #$20	            REP #$20
.3a7971	48		pha		            PHA
.3a7972	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7975	5b		tcd		            TCD
.3a7976	68		pla		            PLA
.3a7977	28		plp		            PLP
.3a7978	e2 20		sep #$20	            SEP #$20
.3a797a	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check to see if it 1 byte or 2 byte relative
.3a797c	c9 12		cmp #$12	                CMP #ADDR_PC_REL
.3a797e	f0 0a		beq $3a798a	                BEQ is_short
.3a7980	c2 20		rep #$20	            REP #$20
.3a7982	18		clc		                CLC                     ; Branch is long. Compute where MCURSOR will be
.3a7983	a5 32		lda $087a	                LDA MCURSOR             ; with two branch offset bytes
.3a7985	69 02 00	adc #$0002	                ADC #2
.3a7988	80 08		bra $3a7992	                BRA compute_cursor
.3a798a					is_short
.3a798a	c2 20		rep #$20	            REP #$20
.3a798c	18		clc		                CLC                     ; Branch is short. Computer where MCURSOR will be
.3a798d	a5 32		lda $087a	                LDA MCURSOR             ; with one branch offset byte
.3a798f	69 01 00	adc #$0001	                ADC #1
.3a7992	85 4a		sta $0892	compute_cursor  STA MTEMP
.3a7994	a5 34		lda $087c	                LDA MCURSOR+2
.3a7996	69 00 00	adc #$0000	                ADC #0
.3a7999	85 4c		sta $0894	                STA MTEMP+2
.3a799b	38		sec		                SEC                     ; MPARSEDNUM = MPARSEDNUM - MTEMP (MCURSOR after the instruction)
.3a799c	a5 50		lda $0898	                LDA MPARSEDNUM
.3a799e	e5 4a		sbc $0892	                SBC MTEMP
.3a79a0	85 50		sta $0898	                STA MPARSEDNUM
.3a79a2	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a79a4	e5 4c		sbc $0894	                SBC MTEMP+2
.3a79a6	85 52		sta $089a	                STA MPARSEDNUM+2
.3a79a8	e2 20		sep #$20	            SEP #$20
.3a79aa	a5 4f		lda $0897	                LDA MADDR_MODE
.3a79ac	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.3a79ae	f0 1e		beq $3a79ce	                BEQ check_long
.3a79b0	a5 50		lda $0898	                LDA MPARSEDNUM          ; Short offset... check if it's negative
.3a79b2	30 0c		bmi $3a79c0	                BMI check_short_neg
.3a79b4	a5 51		lda $0899	                LDA MPARSEDNUM+1        ; Positive short offset... upper two bytes
.3a79b6	d0 2a		bne $3a79e2	                BNE failure             ; Must be 0 or it's an overflow
.3a79b8	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a79ba	d0 26		bne $3a79e2	                BNE failure
.3a79bc	a9 01		lda #$01	                LDA #1                  ; Short offset is 1 byte
.3a79be	80 26		bra $3a79e6	                BRA success
.3a79c0	a5 51		lda $0899	check_short_neg LDA MPARSEDNUM+1        ; Negative short offset... upper two bytes
.3a79c2	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's an  overflow
.3a79c4	d0 1c		bne $3a79e2	                BNE failure
.3a79c6	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a79c8	c9 ff		cmp #$ff	                CMP #$FF
.3a79ca	d0 16		bne $3a79e2	                BNE failure
.3a79cc	80 18		bra $3a79e6	                BRA success
.3a79ce	a5 51		lda $0899	check_long      LDA MPARSEDNUM+1        ; Long offset... check if it's negative
.3a79d0	30 06		bmi $3a79d8	                BMI check_long_neg
.3a79d2	a5 52		lda $089a	                LDA MPARSEDNUM+2        ; Positive long offset... upper byte
.3a79d4	d0 0c		bne $3a79e2	                BNE failure             ; Must be 0 or it's an overflow
.3a79d6	80 0e		bra $3a79e6	                BRA success
.3a79d8	a5 52		lda $089a	check_long_neg  LDA MPARSEDNUM+2        ; Negative offset... upper two bytes
.3a79da	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's and overflow
.3a79dc	d0 04		bne $3a79e2	                BNE failure
.3a79de	a9 02		lda #$02	                LDA #2                  ; Long offset is 2 bytes
.3a79e0	80 04		bra $3a79e6	                BRA success
.3a79e2	2b		pld		failure         PLD
.3a79e3	28		plp		                PLP
.3a79e4	18		clc		                CLC
.3a79e5	6b		rtl		                RTL
.3a79e6	2b		pld		success         PLD
.3a79e7	28		plp		                PLP
.3a79e8	38		sec		                SEC
.3a79e9	6b		rtl		                RTL
.3a79ea					AS_SHIFT_HEX
.3a79ea	08		php		                PHP
.3a79eb	0b		phd		                PHD
.3a79ec	c2 10		rep #$10	            REP #$10
.3a79ee	da		phx		                PHX
.3a79ef	08		php		            PHP
.3a79f0	c2 20		rep #$20	            REP #$20
.3a79f2	48		pha		            PHA
.3a79f3	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a79f6	5b		tcd		            TCD
.3a79f7	68		pla		            PLA
.3a79f8	28		plp		            PLP
.3a79f9	e2 20		sep #$20	            SEP #$20
.3a79fb	a2 00 00	ldx #$0000	                LDX #0
.3a79fe	df 00 d0 3a	cmp $3ad000,x	seek_loop       CMP @lHEXDIGITS,X   ; Check the passed character against the hex digits
.3a7a02	f0 08		beq $3a7a0c	                BEQ found
.3a7a04	e8		inx		                INX                 ; Go to the next hex digit
.3a7a05	e0 10 00	cpx #$0010	                CPX #$10            ; Are we out of digits?
.3a7a08	f0 1b		beq $3a7a25	                BEQ done            ; Yes... just return
.3a7a0a	80 f2		bra $3a79fe	                BRA seek_loop
.3a7a0c					found
.3a7a0c	c2 20		rep #$20	            REP #$20
.3a7a0e	06 50		asl $0898	                ASL MPARSEDNUM
.3a7a10	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7a12	06 50		asl $0898	                ASL MPARSEDNUM
.3a7a14	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7a16	06 50		asl $0898	                ASL MPARSEDNUM
.3a7a18	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7a1a	06 50		asl $0898	                ASL MPARSEDNUM
.3a7a1c	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7a1e	e2 20		sep #$20	            SEP #$20
.3a7a20	8a		txa		                TXA
.3a7a21	05 50		ora $0898	                ORA MPARSEDNUM
.3a7a23	85 50		sta $0898	                STA MPARSEDNUM
.3a7a25	fa		plx		done            PLX
.3a7a26	2b		pld		                PLD
.3a7a27	28		plp		                PLP
.3a7a28	6b		rtl		                RTL
.3a7a29					AS_FIND_OPCODE
.3a7a29	0b		phd		                PHD
.3a7a2a	8b		phb		                PHB
.3a7a2b	08		php		            PHP
.3a7a2c	c2 20		rep #$20	            REP #$20
.3a7a2e	48		pha		            PHA
.3a7a2f	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7a32	5b		tcd		            TCD
.3a7a33	68		pla		            PLA
.3a7a34	28		plp		            PLP
.3a7a35	08		php		            PHP
.3a7a36	e2 20		sep #$20	            SEP #$20
.3a7a38	48		pha		            PHA
.3a7a39	a9 3a		lda #$3a	            LDA #`MNEMONIC_TAB
.3a7a3b	48		pha		            PHA
.3a7a3c	ab		plb		            PLB
.3a7a3d	68		pla		            PLA
.3a7a3e	28		plp		            PLP
.3a7a3f	e2 20		sep #$20	            SEP #$20
.3a7a41	a5 4f		lda $0897	                LDA MADDR_MODE
.3a7a43	29 3f		and #$3f	                AND #%00111111
.3a7a45	85 4a		sta $0892	                STA MTEMP
.3a7a47	c2 30		rep #$30	            REP #$30
.3a7a49	a2 00 00	ldx #$0000	                LDX #0
.3a7a4c	a0 00 00	ldy #$0000	                LDY #0
.3a7a4f	bd f6 80	lda $3a80f6,x	mnemonic_loop   LDA MNEMONIC_TAB,X      ; Get the mnemonic from the opcode table
.3a7a52	f0 1b		beq $3a7a6f	                BEQ not_found           ; If it's 0, we did not find the mnemonic
.3a7a54	c5 54		cmp $089c	                CMP MMNEMONIC           ; Does it match the passed mnemonic?
.3a7a56	d0 0d		bne $3a7a65	                BNE next_opcode         ; No: go to the next opcode
.3a7a58					check_mode
.3a7a58	e2 20		sep #$20	            SEP #$20
.3a7a5a	b9 f8 82	lda $3a82f8,y	                LDA ADDRESS_TAB,Y       ; Get the corresponding address mode
.3a7a5d	29 3f		and #$3f	                AND #%00111111          ; Filter out effect bits
.3a7a5f	c5 4a		cmp $0892	                CMP MTEMP
.3a7a61	f0 07		beq $3a7a6a	                BEQ found               ; Yes: we found the opcode
.3a7a63	c2 20		rep #$20	            REP #$20
.3a7a65	e8		inx		next_opcode     INX                     ; Point to the next mnemonic in the table
.3a7a66	e8		inx		                INX
.3a7a67	c8		iny		                INY
.3a7a68	80 e5		bra $3a7a4f	                BRA mnemonic_loop       ; And check it
.3a7a6a	98		tya		found           TYA
.3a7a6b	38		sec		                SEC                     ; Set carry to show success
.3a7a6c	ab		plb		                PLB
.3a7a6d	2b		pld		                PLD
.3a7a6e	6b		rtl		                RTL
.3a7a6f	18		clc		not_found       CLC                     ; Clear carry to show failure
.3a7a70	ab		plb		                PLB
.3a7a71	2b		pld		                PLD
.3a7a72	6b		rtl		                RTL
.3a7a73					AS_STR_MATCH
.3a7a73	08		php		                PHP
.3a7a74	0b		phd		                PHD
.3a7a75	08		php		            PHP
.3a7a76	c2 20		rep #$20	            REP #$20
.3a7a78	48		pha		            PHA
.3a7a79	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7a7c	5b		tcd		            TCD
.3a7a7d	68		pla		            PLA
.3a7a7e	28		plp		            PLP
.3a7a7f	e2 20		sep #$20	            SEP #$20
.3a7a81	c2 10		rep #$10	            REP #$10
.3a7a83	a0 00 00	ldy #$0000	                LDY #0
.3a7a86	64 50		stz $0898	                STZ MPARSEDNUM      ; Set parsed number to 0 in anticipation of
.3a7a88	64 52		stz $089a	                STZ MPARSEDNUM+2    ; hex digits in the pattern
.3a7a8a	b7 03		lda [$084b],y	match_loop      LDA [MCMP_TEXT],Y   ; Get the pattern character
.3a7a8c	f0 11		beq $3a7a9f	                BEQ nul_check       ; If at end of pattern, check for end of test string
.3a7a8e	c9 64		cmp #$64	                CMP #'d'            ; Is it a digit?
.3a7a90	f0 19		beq $3a7aab	                BEQ check_digit     ; Yes: do special check for hex digit
.3a7a92	48		pha		compare         PHA
.3a7a93	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.3a7a95	85 4a		sta $0892	                STA MTEMP
.3a7a97	68		pla		                PLA
.3a7a98	c5 4a		cmp $0892	                CMP MTEMP           ; Does it match the character to test?
.3a7a9a	d0 0b		bne $3a7aa7	                BNE return_false    ; No: return fail
.3a7a9c	c8		iny		next_char       INY                 ; Yes: test the next character
.3a7a9d	80 eb		bra $3a7a8a	                BRA match_loop
.3a7a9f	b7 36		lda [$087e],y	nul_check       LDA [MLINEBUF],Y    ; Check to see that we're at the end of the test string
.3a7aa1	d0 04		bne $3a7aa7	                BNE return_false    ; If not: return false
.3a7aa3	2b		pld		return_true     PLD
.3a7aa4	28		plp		                PLP                 ; Return true
.3a7aa5	38		sec		                SEC
.3a7aa6	6b		rtl		                RTL
.3a7aa7	2b		pld		return_false    PLD
.3a7aa8	28		plp		                PLP                 ; Return false
.3a7aa9	18		clc		                CLC
.3a7aaa	6b		rtl		                RTL
.3a7aab					check_digit
.3a7aab	e2 20		sep #$20	            SEP #$20
.3a7aad	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.3a7aaf	c9 3a		cmp #$3a	                CMP #'9'+1
.3a7ab1	b0 04		bcs $3a7ab7	                BCS check_AF
.3a7ab3	c9 30		cmp #$30	                CMP #'0'
.3a7ab5	b0 14		bcs $3a7acb	                BCS shift_digit     ; character is in [0..9]
.3a7ab7	c9 47		cmp #$47	check_AF        CMP #'F'+1
.3a7ab9	b0 04		bcs $3a7abf	                BCS check_lc        ; check lower case
.3a7abb	c9 41		cmp #$41	                CMP #'A'
.3a7abd	b0 0c		bcs $3a7acb	                BCS shift_digit     ; character is in [A..F]
.3a7abf	c9 67		cmp #$67	check_lc        CMP #'f'+1
.3a7ac1	b0 e4		bcs $3a7aa7	                BCS return_false    ; check lower case
.3a7ac3	c9 61		cmp #$61	                CMP #'a'
.3a7ac5	b0 02		bcs $3a7ac9	                BCS to_upcase       ; character is in [A..F]
.3a7ac7	80 de		bra $3a7aa7	                BRA return_false    ; No match found... return false
.3a7ac9	29 df		and #$df	to_upcase       AND #%11011111      ; Convert lower case to upper case
.3a7acb	22 ea 79 3a	jsl $3a79ea	shift_digit     JSL AS_SHIFT_HEX    ; Shift the digit into MPARSEDNUM
.3a7acf	80 cb		bra $3a7a9c	                BRA next_char       ; And check the next character
.3a7ad1					AS_MCMP_NEXT
.3a7ad1	0b		phd		                PHD
.3a7ad2	08		php		            PHP
.3a7ad3	c2 20		rep #$20	            REP #$20
.3a7ad5	48		pha		            PHA
.3a7ad6	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7ad9	5b		tcd		            TCD
.3a7ada	68		pla		            PLA
.3a7adb	28		plp		            PLP
.3a7adc	a0 00 00	ldy #$0000	                LDY #0
.3a7adf	e2 20		sep #$20	            SEP #$20
.3a7ae1	b7 03		lda [$084b],y	loop            LDA [MCMP_TEXT],Y   ; Check to see if we have gotten to the NUL
.3a7ae3	f0 03		beq $3a7ae8	                BEQ found_nul
.3a7ae5	c8		iny		                INY
.3a7ae6	80 f9		bra $3a7ae1	                BRA loop
.3a7ae8					found_nul
.3a7ae8	c2 20		rep #$20	            REP #$20
.3a7aea	c8		iny		                INY                 ; Got to NUL... point to next byte
.3a7aeb	5a		phy		                PHY
.3a7aec	68		pla		                PLA                 ; And add that index to MCMP_TEXT pointer
.3a7aed	18		clc		                CLC
.3a7aee	65 03		adc $084b	                ADC MCMP_TEXT
.3a7af0	85 03		sta $084b	                STA MCMP_TEXT
.3a7af2	a5 05		lda $084d	                LDA MCMP_TEXT+2
.3a7af4	69 00 00	adc #$0000	                ADC #0
.3a7af7	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7af9	2b		pld		                PLD
.3a7afa	6b		rtl		                RTL
.3a7afb					AS_FIND_MNEMO
.3a7afb	0b		phd		                PHD
.3a7afc	08		php		            PHP
.3a7afd	c2 20		rep #$20	            REP #$20
.3a7aff	48		pha		            PHA
.3a7b00	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7b03	5b		tcd		            TCD
.3a7b04	68		pla		            PLA
.3a7b05	28		plp		            PLP
.3a7b06	c2 20		rep #$20	            REP #$20
.3a7b08	a5 11		lda $0859	                LDA MARG2                   ; Point MLINEBUF to the text
.3a7b0a	85 36		sta $087e	                STA MLINEBUF
.3a7b0c	a5 13		lda $085b	                LDA MARG2+2
.3a7b0e	85 38		sta $0880	                STA MLINEBUF+2
.3a7b10	a9 84 7f	lda #$7f84	                LDA #<>MNEMONICS_TAB        ; Point to the first mnemonic
.3a7b13	85 03		sta $084b	                STA MCMP_TEXT
.3a7b15	a9 3a 00	lda #$003a	                LDA #`MNEMONICS_TAB
.3a7b18	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7b1a	22 73 7a 3a	jsl $3a7a73	match_loop      JSL AS_STR_MATCH            ; Check to see if the text matches the mnemonic
.3a7b1e	b0 0d		bcs $3a7b2d	                BCS found_mnemonic          ; If so: return that we found it
.3a7b20	22 d1 7a 3a	jsl $3a7ad1	                JSL AS_MCMP_NEXT            ; Point to the next mnemonic
.3a7b24	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Check to see if it's NUL
.3a7b26	d0 f2		bne $3a7b1a	                BNE match_loop              ; If not, check this next mnemonic
.3a7b28	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Otherwise, return -1
.3a7b2b	80 02		bra $3a7b2f	                BRA done
.3a7b2d	a5 03		lda $084b	found_mnemonic  LDA MCMP_TEXT               ; Found it: return the address
.3a7b2f	2b		pld		done            PLD
.3a7b30	6b		rtl		                RTL
.3a7b31					AS_FIND_MODE
.3a7b31	08		php		                PHP
.3a7b32	0b		phd		                PHD
.3a7b33	08		php		            PHP
.3a7b34	c2 20		rep #$20	            REP #$20
.3a7b36	48		pha		            PHA
.3a7b37	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7b3a	5b		tcd		            TCD
.3a7b3b	68		pla		            PLA
.3a7b3c	28		plp		            PLP
.3a7b3d	c2 30		rep #$30	            REP #$30
.3a7b3f	a5 15		lda $085d	                LDA MARG3                   ; Point MLINEBUF to the operand
.3a7b41	85 36		sta $087e	                STA MLINEBUF
.3a7b43	a5 17		lda $085f	                LDA MARG3+2
.3a7b45	85 38		sta $0880	                STA MLINEBUF+2
.3a7b47	a9 10 84	lda #$8410	                LDA #<>ADDR_PATTERNS        ; Point to the first address mode pattern to check
.3a7b4a	85 03		sta $084b	                STA MCMP_TEXT
.3a7b4c	a9 3a 00	lda #$003a	                LDA #`ADDR_PATTERNS
.3a7b4f	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7b51	22 73 7a 3a	jsl $3a7a73	match_loop      JSL AS_STR_MATCH            ; Check to see if the pattern matches the operand
.3a7b55	b0 22		bcs $3a7b79	                BCS is_match                ; Yes: Find address mode code
.3a7b57	22 d1 7a 3a	jsl $3a7ad1	                JSL AS_MCMP_NEXT            ; Point to the address mode
.3a7b5b	c2 20		rep #$20	            REP #$20
.3a7b5d	18		clc		                CLC                         ; Point to the first byte of the next pattern
.3a7b5e	a5 03		lda $084b	                LDA MCMP_TEXT
.3a7b60	69 01 00	adc #$0001	                ADC #1
.3a7b63	85 03		sta $084b	                STA MCMP_TEXT
.3a7b65	a5 05		lda $084d	                LDA MCMP_TEXT+2
.3a7b67	69 00 00	adc #$0000	                ADC #0
.3a7b6a	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7b6c	e2 20		sep #$20	            SEP #$20
.3a7b6e	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Is the first byte 0?
.3a7b70	d0 df		bne $3a7b51	                BNE match_loop              ; No: check this next pattern
.3a7b72	c2 20		rep #$20	            REP #$20
.3a7b74	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Yes: we didn't find a matching pattern, return -1
.3a7b77	80 0d		bra $3a7b86	                BRA done
.3a7b79	22 d1 7a 3a	jsl $3a7ad1	is_match        JSL AS_MCMP_NEXT            ; Point to the address mode
.3a7b7d	e2 20		sep #$20	            SEP #$20
.3a7b7f	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Get the corresponding address mode code (a byte)
.3a7b81	c2 20		rep #$20	            REP #$20
.3a7b83	29 ff 00	and #$00ff	                AND #$00FF
.3a7b86	2b		pld		done            PLD
.3a7b87	28		plp		                PLP
.3a7b88	6b		rtl		                RTL
.3a7b89					IMDISASSEMBLE
.3a7b89	08		php		                PHP
.3a7b8a	8b		phb		                PHB
.3a7b8b	0b		phd		                PHD
.3a7b8c	08		php		            PHP
.3a7b8d	c2 20		rep #$20	            REP #$20
.3a7b8f	48		pha		            PHA
.3a7b90	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7b93	5b		tcd		            TCD
.3a7b94	68		pla		            PLA
.3a7b95	28		plp		            PLP
.3a7b96	e2 20		sep #$20	            SEP #$20
.3a7b98	a9 00		lda #$00	                LDA #0
.3a7b9a	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT     ; Clear the pagination line counter
.3a7b9e	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a7ba0	c9 02		cmp #$02	                CMP #2
.3a7ba2	b0 16		bcs $3a7bba	                BGE set_cursor      ; 2>= arguments? Use them as-is
.3a7ba4	c9 01		cmp #$01	                CMP #1
.3a7ba6	90 20		bcc $3a7bc8	                BLT no_args         ; No arguments passed? Use defaults
.3a7ba8	c2 20		rep #$20	            REP #$20
.3a7baa	18		clc		                CLC
.3a7bab	a5 0d		lda $0855	                LDA MARG1
.3a7bad	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a7bb0	85 11		sta $0859	                STA MARG2
.3a7bb2	e2 20		sep #$20	            SEP #$20
.3a7bb4	a5 0f		lda $0857	                LDA MARG1+2
.3a7bb6	69 00		adc #$00	                ADC #0
.3a7bb8	85 13		sta $085b	                STA MARG2+2
.3a7bba					set_cursor
.3a7bba	c2 20		rep #$20	            REP #$20
.3a7bbc	a5 0d		lda $0855	                LDA MARG1
.3a7bbe	85 32		sta $087a	                STA MCURSOR
.3a7bc0	e2 20		sep #$20	            SEP #$20
.3a7bc2	a5 0f		lda $0857	                LDA MARG1+2
.3a7bc4	85 34		sta $087c	                STA MCURSOR+2
.3a7bc6	80 12		bra $3a7bda	                BRA dasm_loop
.3a7bc8					no_args
.3a7bc8	c2 20		rep #$20	            REP #$20
.3a7bca	18		clc		                CLC
.3a7bcb	a5 32		lda $087a	                LDA MCURSOR
.3a7bcd	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a7bd0	85 11		sta $0859	                STA MARG2
.3a7bd2	e2 20		sep #$20	            SEP #$20
.3a7bd4	a5 34		lda $087c	                LDA MCURSOR+2
.3a7bd6	69 00		adc #$00	                ADC #0
.3a7bd8	85 13		sta $085b	                STA MARG2+2
.3a7bda	22 f5 7b 3a	jsl $3a7bf5	dasm_loop       JSL DS_PR_LINE
.3a7bde	e2 20		sep #$20	            SEP #$20
.3a7be0	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.3a7be2	c5 13		cmp $085b	                CMP MARG2+2
.3a7be4	90 f4		bcc $3a7bda	                BLT dasm_loop           ; No: continue
.3a7be6	c2 20		rep #$20	            REP #$20
.3a7be8	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.3a7bea	c5 11		cmp $0859	                CMP MARG2
.3a7bec	90 ec		bcc $3a7bda	                BLT dasm_loop           ; Nope... keep going
.3a7bee					done
.3a7bee	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a7bf1	2b		pld		                PLD
.3a7bf2	ab		plb		                PLB
.3a7bf3	28		plp		                PLP
.3a7bf4	6b		rtl		                RTL
.3a7bf5					DS_PR_LINE
.3a7bf5	08		php		                PHP
.3a7bf6	0b		phd		                PHD
.3a7bf7	e2 20		sep #$20	            SEP #$20
.3a7bf9	a9 41		lda #$41	                LDA #'A'
.3a7bfb	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7bfe	a9 20		lda #$20	                LDA #' '
.3a7c00	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7c03	08		php		            PHP
.3a7c04	c2 20		rep #$20	            REP #$20
.3a7c06	48		pha		            PHA
.3a7c07	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a7c0a	5b		tcd		            TCD
.3a7c0b	68		pla		            PLA
.3a7c0c	28		plp		            PLP
.3a7c0d	c2 20		rep #$20	            REP #$20
.3a7c0f	a5 00		lda $087a	                LDA MCURSOR
.3a7c11	85 18		sta $0892	                STA MTEMP
.3a7c13	e2 20		sep #$20	            SEP #$20
.3a7c15	a5 02		lda $087c	                LDA MCURSOR+2
.3a7c17	85 1a		sta $0894	                STA MTEMP+2
.3a7c19	22 5c 7f 3a	jsl $3a7f5c	                JSL M_PR_ADDR
.3a7c1d	a9 20		lda #$20	                LDA #' '
.3a7c1f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7c22	c2 20		rep #$20	            REP #$20
.3a7c24	18		clc		                CLC
.3a7c25	a5 00		lda $087a	                LDA MCURSOR
.3a7c27	69 01 00	adc #$0001	                ADC #1
.3a7c2a	85 18		sta $0892	                STA MTEMP
.3a7c2c	e2 20		sep #$20	            SEP #$20
.3a7c2e	a5 02		lda $087c	                LDA MCURSOR+2
.3a7c30	69 00		adc #$00	                ADC #0
.3a7c32	85 1a		sta $0894	                STA MTEMP+2
.3a7c34	e2 20		sep #$20	            SEP #$20
.3a7c36	c2 10		rep #$10	            REP #$10
.3a7c38	a7 00		lda [$087a]	                LDA [MCURSOR]           ; Get the mnemonic
.3a7c3a	c9 c2		cmp #$c2	                CMP #$C2                ; Is it REP?
.3a7c3c	d0 0b		bne $3a7c49	                BNE check_sep           ; No: check to see if it is SEP
.3a7c3e	48		pha		handle_rep      PHA
.3a7c3f	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.3a7c41	49 ff		eor #$ff	                EOR #$FF                ; Invert the bits
.3a7c43	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Mask off the bits in the CPUSTAT
.3a7c47	80 0b		bra $3a7c54	                BRA save_stat
.3a7c49	c9 e2		cmp #$e2	check_sep       CMP #$E2                ; Is it SEP?
.3a7c4b	d0 0c		bne $3a7c59	                BNE get_op_index        ; No: process the instruction regularly
.3a7c4d	48		pha		handle_sep      PHA
.3a7c4e	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.3a7c50	0f 96 08 00	ora $000896	                ORA @lMCPUSTAT          ; Activate the bits in the CPUSTAT
.3a7c54	8f 96 08 00	sta $000896	save_stat       STA @lMCPUSTAT          ; And save it back
.3a7c58	68		pla		                PLA
.3a7c59					get_op_index
.3a7c59	c2 20		rep #$20	            REP #$20
.3a7c5b	29 ff 00	and #$00ff	                AND #$00FF
.3a7c5e	0a		asl a		                ASL A
.3a7c5f	aa		tax		                TAX                     ; Get the index into the mnemonic lookup table
.3a7c60	bf f6 80 3a	lda $3a80f6,x	                LDA @lMNEMONIC_TAB,X    ; Get the mnemonic
.3a7c64	aa		tax		                TAX
.3a7c65	22 d6 7e 3a	jsl $3a7ed6	                JSL DS_PR_MNEMONIC      ; And print it
.3a7c69	e2 20		sep #$20	            SEP #$20
.3a7c6b	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7c6d	aa		tax		                TAX
.3a7c6e	bf f8 82 3a	lda $3a82f8,x	pr_operand      LDA @lADDRESS_TAB,X     ; Get the addressing mode for the instruction
.3a7c72	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR        ; Advance the cursor to the next byte
.3a7c76	22 83 7c 3a	jsl $3a7c83	                JSL DS_PR_OPERAND       ; And print the correct operand
.3a7c7a	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a7c7d	20 d9 02	jsr $3a02d9	            JSR PAGINATE
.3a7c80	2b		pld		                PLD
.3a7c81	28		plp		                PLP
.3a7c82	6b		rtl		                RTL
.3a7c83					DS_PR_OPERAND
.3a7c83	08		php		                PHP
.3a7c84	e2 20		sep #$20	            SEP #$20
.3a7c86	48		pha		                PHA             ; Save the address mode so we can get to the M and X flags
.3a7c87	29 3f		and #$3f	                AND #%00111111  ; Filter out the mode flags
.3a7c89	0a		asl a		                ASL A           ; Compute the index to the table
.3a7c8a	c2 10		rep #$10	            REP #$10
.3a7c8c	aa		tax		                TAX
.3a7c8d	68		pla		                PLA             ; Restore A
.3a7c8e	7c 91 7c	jmp ($3a7c91,x)	                JMP (dispatch,X)
>3a7c91	c1 7c				dispatch        .word <>is_dp_ind_x
>3a7c93	dc 7c				                .word <>is_dp
>3a7c95	e3 7c				                .word <>is_imm
>3a7c97	08 7d				                .word <>is_abs
>3a7c99	0f 7d				                .word <>is_dp_ind_y
>3a7c9b	2a 7d				                .word <>is_dp_x
>3a7c9d	4c 7d				                .word <>is_abs_y
>3a7c9f	5d 7d				                .word <>is_abs_x
>3a7ca1	9a 7d				                .word <>is_accumulator
>3a7ca3	a2 7d				                .word <>is_stack_r
>3a7ca5	b3 7d				                .word <>is_dp_long
>3a7ca7	c4 7d				                .word <>is_abs_long
>3a7ca9	cb 7d				                .word <>is_stack_r_y
>3a7cab	f0 7d				                .word <>is_dp_y_long
>3a7cad	1d 7e				                .word <>is_abs_x_long
>3a7caf	89 7d				                .word <>is_dp_ind
>3a7cb1	6e 7d				                .word <>is_abs_x_id
>3a7cb3	3b 7d				                .word <>is_dp_y
>3a7cb5	10 7e				                .word <>is_pc_rel
>3a7cb7	1a 7e				                .word <>is_implied
>3a7cb9	2e 7e				                .word <>is_xyc
>3a7cbb	5d 7e				                .word <>is_abs_ind
>3a7cbd	0b 7e				                .word <>is_pc_rel_long
>3a7cbf	6e 7e				                .word <>is_abs_ind_long
.3a7cc1	a9 28		lda #$28	is_dp_ind_x     LDA #'('                ; Print (dd,X)
.3a7cc3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7cc6	22 85 7e 3a	jsl $3a7e85	                JSL DS_PR_OPERAND1      ; Print dd
.3a7cca	a9 2c		lda #$2c	                LDA #','
.3a7ccc	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ccf	a9 58		lda #$58	                LDA #'X'
.3a7cd1	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7cd4	a9 29		lda #$29	                LDA #')'
.3a7cd6	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7cd9	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7cdc	22 85 7e 3a	jsl $3a7e85	is_dp           JSL DS_PR_OPERAND1      ; Print dd
.3a7ce0	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7ce3					is_imm
.3a7ce3	e2 20		sep #$20	            SEP #$20
.3a7ce5	48		pha		                PHA
.3a7ce6	a9 23		lda #$23	                LDA #'#'
.3a7ce8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ceb	68		pla		                PLA
.3a7cec	29 c0		and #$c0	                AND #%11000000          ; Filter so we just look at the mode bits
.3a7cee	c9 00		cmp #$00	                CMP #$00                ; Are any set to check?
.3a7cf0	f0 0f		beq $3a7d01	                BEQ is_imm_short        ; No: treat it as a short always
.3a7cf2	4a		lsr a		                LSR A                   ; Move the flag bits right by 2 to match
.3a7cf3	4a		lsr a		                LSR A                   ; the positions of the bits in the CPU status register
.3a7cf4	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Otherwise, filter the mode bit we care about
.3a7cf8	d0 07		bne $3a7d01	                BNE is_imm_short        ; If it is set, immediate operation is short
.3a7cfa	22 8f 7e 3a	jsl $3a7e8f	                JSL DS_PR_OPERAND2      ; Print dddd
.3a7cfe	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d01	22 85 7e 3a	jsl $3a7e85	is_imm_short    JSL DS_PR_OPERAND1      ; Print dd
.3a7d05	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d08	22 8f 7e 3a	jsl $3a7e8f	is_abs          JSL DS_PR_OPERAND2      ; Print dddd
.3a7d0c	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d0f	a9 28		lda #$28	is_dp_ind_y     LDA #'('                ; Print (dd),Y
.3a7d11	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d14	22 85 7e 3a	jsl $3a7e85	                JSL DS_PR_OPERAND1      ; Print dd
.3a7d18	a9 29		lda #$29	                LDA #')'
.3a7d1a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d1d	a9 2c		lda #$2c	                LDA #','
.3a7d1f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d22	a9 59		lda #$59	                LDA #'Y'
.3a7d24	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d27	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d2a	22 85 7e 3a	jsl $3a7e85	is_dp_x         JSL DS_PR_OPERAND1      ; Print dd,X
.3a7d2e	a9 2c		lda #$2c	                LDA #','
.3a7d30	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d33	a9 58		lda #$58	                LDA #'X'
.3a7d35	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d38	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d3b	22 85 7e 3a	jsl $3a7e85	is_dp_y         JSL DS_PR_OPERAND1      ; Print dd,Y
.3a7d3f	a9 2c		lda #$2c	                LDA #','
.3a7d41	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d44	a9 59		lda #$59	                LDA #'Y'
.3a7d46	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d49	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d4c	22 8f 7e 3a	jsl $3a7e8f	is_abs_y        JSL DS_PR_OPERAND2      ; Print dddd,Y
.3a7d50	a9 2c		lda #$2c	                LDA #','
.3a7d52	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d55	a9 59		lda #$59	                LDA #'Y'
.3a7d57	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d5a	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d5d	22 8f 7e 3a	jsl $3a7e8f	is_abs_x        JSL DS_PR_OPERAND2      ; Print dddd,X
.3a7d61	a9 2c		lda #$2c	                LDA #','
.3a7d63	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d66	a9 58		lda #$58	                LDA #'X'
.3a7d68	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d6b	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d6e	a9 28		lda #$28	is_abs_x_id     LDA #'('
.3a7d70	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d73	22 8f 7e 3a	jsl $3a7e8f	                JSL DS_PR_OPERAND2      ; Print (dddd,X)
.3a7d77	a9 2c		lda #$2c	                LDA #','
.3a7d79	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d7c	a9 58		lda #$58	                LDA #'X'
.3a7d7e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d81	a9 29		lda #$29	                LDA #')'
.3a7d83	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d86	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d89	a9 28		lda #$28	is_dp_ind       LDA #'('
.3a7d8b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d8e	22 85 7e 3a	jsl $3a7e85	                JSL DS_PR_OPERAND1      ; Print (dd)
.3a7d92	a9 29		lda #$29	                LDA #')'
.3a7d94	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d97	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7d9a	a9 41		lda #$41	is_accumulator  LDA #'A'                ; Print A
.3a7d9c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7d9f	4c 83 7e	jmp $3a7e83	                JMP done
.3a7da2	22 85 7e 3a	jsl $3a7e85	is_stack_r      JSL DS_PR_OPERAND1      ; Print dd,S
.3a7da6	a9 2c		lda #$2c	                LDA #','
.3a7da8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7dab	a9 53		lda #$53	                LDA #'S'
.3a7dad	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7db0	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7db3	a9 5b		lda #$5b	is_dp_long      LDA #'['                ; [dd]
.3a7db5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7db8	22 85 7e 3a	jsl $3a7e85	                JSL DS_PR_OPERAND1      ; Print dd
.3a7dbc	a9 5d		lda #$5d	                LDA #']'
.3a7dbe	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7dc1	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7dc4	22 9d 7e 3a	jsl $3a7e9d	is_abs_long     JSL DS_PR_OPERAND3      ; Print dddddd
.3a7dc8	4c 83 7e	jmp $3a7e83	                JMP done
.3a7dcb	a9 28		lda #$28	is_stack_r_y    LDA #'('                ; (dd,S),Y
.3a7dcd	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7dd0	22 85 7e 3a	jsl $3a7e85	                JSL DS_PR_OPERAND1      ; Print dd
.3a7dd4	a9 2c		lda #$2c	                LDA #','
.3a7dd6	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7dd9	a9 53		lda #$53	                LDA #'S'
.3a7ddb	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7dde	a9 29		lda #$29	                LDA #')'
.3a7de0	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7de3	a9 2c		lda #$2c	                LDA #','
.3a7de5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7de8	a9 59		lda #$59	                LDA #'Y'
.3a7dea	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ded	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7df0	a9 5b		lda #$5b	is_dp_y_long    LDA #'['                ; [dd],Y
.3a7df2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7df5	22 85 7e 3a	jsl $3a7e85	                JSL DS_PR_OPERAND1      ; Print dd
.3a7df9	a9 5d		lda #$5d	                LDA #']'
.3a7dfb	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7dfe	a9 2c		lda #$2c	                LDA #','
.3a7e00	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e03	a9 59		lda #$59	                LDA #'Y'
.3a7e05	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e08	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7e0b	a0 02 00	ldy #$0002	is_pc_rel_long  LDY #2
.3a7e0e	80 03		bra $3a7e13	                BRA do_pcrel
.3a7e10	a0 01 00	ldy #$0001	is_pc_rel       LDY #1
.3a7e13	22 03 7f 3a	jsl $3a7f03	do_pcrel        JSL DS_PR_PCREL
.3a7e17	4c 83 7e	jmp $3a7e83	                JMP done
.3a7e1a	4c 83 7e	jmp $3a7e83	is_implied      JMP done
.3a7e1d	22 9d 7e 3a	jsl $3a7e9d	is_abs_x_long   JSL DS_PR_OPERAND3      ; Print dddddd
.3a7e21	a9 2c		lda #$2c	                LDA #','
.3a7e23	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e26	a9 58		lda #$58	                LDA #'X'
.3a7e28	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e2b	4c 83 7e	jmp $3a7e83	                JMP done
.3a7e2e	a9 23		lda #$23	is_xyc          LDA #'#'
.3a7e30	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e33	8b		phb		                PHB                     ; Make sure the databank is pointed to our number
.3a7e34	a5 02		lda $087c	                LDA MCURSOR+2
.3a7e36	48		pha		                PHA
.3a7e37	ab		plb		                PLB
.3a7e38	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.3a7e3a	e8		inx		                INX
.3a7e3b	a0 01 00	ldy #$0001	                LDY #1
.3a7e3e	22 d2 02 3a	jsl $3a02d2	                JSL PRINTH
.3a7e42	a9 2c		lda #$2c	                LDA #','
.3a7e44	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e47	a9 23		lda #$23	                LDA #'#'
.3a7e49	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e4c	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.3a7e4e	a0 01 00	ldy #$0001	                LDY #1
.3a7e51	22 d2 02 3a	jsl $3a02d2	                JSL PRINTH
.3a7e55	ab		plb		                PLB                     ; Get our old data bank back
.3a7e56	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a7e5a	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7e5d	a9 28		lda #$28	is_abs_ind      LDA #'('
.3a7e5f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e62	22 8f 7e 3a	jsl $3a7e8f	                JSL DS_PR_OPERAND2      ; Print (dddd)
.3a7e66	a9 29		lda #$29	                LDA #')'
.3a7e68	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e6b	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7e6e	a9 5b		lda #$5b	is_abs_ind_long LDA #'['
.3a7e70	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e73	22 8f 7e 3a	jsl $3a7e8f	                JSL DS_PR_OPERAND2      ; Print [dddd]
.3a7e77	a9 5d		lda #$5d	                LDA #']'
.3a7e79	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e7c	4c 7f 7e	jmp $3a7e7f	                JMP done_1
.3a7e7f	22 b2 84 3a	jsl $3a84b2	done_1          JSL M_INC_CURSOR    ; Skip over a single byte operand
.3a7e83	28		plp		done            PLP
.3a7e84	6b		rtl		                RTL
.3a7e85					DS_PR_OPERAND1
.3a7e85	08		php		                PHP
.3a7e86	e2 20		sep #$20	            SEP #$20
.3a7e88	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7e8a	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a7e8d	28		plp		                PLP
.3a7e8e	6b		rtl		                RTL
.3a7e8f					DS_PR_OPERAND2
.3a7e8f	08		php		                PHP
.3a7e90	c2 30		rep #$30	            REP #$30
.3a7e92	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7e94	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a7e97	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a7e9b	28		plp		                PLP
.3a7e9c	6b		rtl		                RTL
.3a7e9d					DS_PR_OPERAND3
.3a7e9d	08		php		                PHP
.3a7e9e	8b		phb		                PHB
.3a7e9f	0b		phd		                PHD
.3a7ea0	c2 30		rep #$30	            REP #$30
.3a7ea2	5a		phy		                PHY
.3a7ea3	08		php		            PHP
.3a7ea4	c2 20		rep #$20	            REP #$20
.3a7ea6	48		pha		            PHA
.3a7ea7	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a7eaa	5b		tcd		            TCD
.3a7eab	68		pla		            PLA
.3a7eac	28		plp		            PLP
.3a7ead	08		php		            PHP
.3a7eae	e2 20		sep #$20	            SEP #$20
.3a7eb0	48		pha		            PHA
.3a7eb1	a9 00		lda #$00	            LDA #`MTEMP
.3a7eb3	48		pha		            PHA
.3a7eb4	ab		plb		            PLB
.3a7eb5	68		pla		            PLA
.3a7eb6	28		plp		            PLP
.3a7eb7	e2 20		sep #$20	            SEP #$20
.3a7eb9	a0 00 00	ldy #$0000	                LDY #0
.3a7ebc	a7 00		lda [$087a]	copy_loop       LDA [MCURSOR]       ; Copy the address pointed to by MCURSOR
.3a7ebe	99 92 08	sta $0892,y	                STA MTEMP,Y         ; to MTEMP
.3a7ec1	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a7ec5	c8		iny		                INY
.3a7ec6	c0 03 00	cpy #$0003	                CPY #3
.3a7ec9	d0 f1		bne $3a7ebc	                BNE copy_loop
.3a7ecb	22 5c 7f 3a	jsl $3a7f5c	                JSL M_PR_ADDR       ; Print the address
.3a7ecf	c2 30		rep #$30	            REP #$30
.3a7ed1	7a		ply		                PLY
.3a7ed2	2b		pld		                PLD
.3a7ed3	ab		plb		                PLB
.3a7ed4	28		plp		                PLP
.3a7ed5	6b		rtl		                RTL
.3a7ed6					DS_PR_MNEMONIC
.3a7ed6	08		php		                PHP
.3a7ed7	8b		phb		                PHB
.3a7ed8	e2 20		sep #$20	            SEP #$20
.3a7eda	c2 10		rep #$10	            REP #$10
.3a7edc	08		php		            PHP
.3a7edd	e2 20		sep #$20	            SEP #$20
.3a7edf	48		pha		            PHA
.3a7ee0	a9 3a		lda #$3a	            LDA #`MN_ORA
.3a7ee2	48		pha		            PHA
.3a7ee3	ab		plb		            PLB
.3a7ee4	68		pla		            PLA
.3a7ee5	28		plp		            PLP
.3a7ee6	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a7ee9	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7eec	e8		inx		                INX
.3a7eed	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a7ef0	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ef3	e8		inx		                INX
.3a7ef4	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a7ef7	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7efa	e8		inx		                INX
.3a7efb	a9 20		lda #$20	                LDA #' '            ; Print a space
.3a7efd	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f00	ab		plb		                PLB
.3a7f01	28		plp		                PLP
.3a7f02	6b		rtl		                RTL
.3a7f03					DS_PR_PCREL
.3a7f03	08		php		                PHP
.3a7f04	0b		phd		                PHD
.3a7f05	08		php		            PHP
.3a7f06	c2 20		rep #$20	            REP #$20
.3a7f08	48		pha		            PHA
.3a7f09	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a7f0c	5b		tcd		            TCD
.3a7f0d	68		pla		            PLA
.3a7f0e	28		plp		            PLP
.3a7f0f	e2 20		sep #$20	            SEP #$20
.3a7f11	c0 02 00	cpy #$0002	                CPY #2
.3a7f14	f0 14		beq $3a7f2a	                BEQ offset_2
.3a7f16	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7f18	85 18		sta $0892	                STA MTEMP
.3a7f1a	30 06		bmi $3a7f22	                BMI is_negative
.3a7f1c	64 19		stz $0893	                STZ MTEMP+1
.3a7f1e	64 1a		stz $0894	                STZ MTEMP+2
.3a7f20	80 1e		bra $3a7f40	                BRA add_offset
.3a7f22	a9 ff		lda #$ff	is_negative     LDA #$FF
.3a7f24	85 19		sta $0893	                STA MTEMP+1
.3a7f26	85 1a		sta $0894	                STA MTEMP+2
.3a7f28	80 16		bra $3a7f40	                BRA add_offset
.3a7f2a	a7 00		lda [$087a]	offset_2        LDA [MCURSOR]
.3a7f2c	85 18		sta $0892	                STA MTEMP
.3a7f2e	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a7f32	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7f34	85 19		sta $0893	                STA MTEMP+1
.3a7f36	30 04		bmi $3a7f3c	                BMI is_negative2
.3a7f38	64 1a		stz $0894	                STZ MTEMP+2
.3a7f3a	80 04		bra $3a7f40	                BRA add_offset
.3a7f3c	a9 ff		lda #$ff	is_negative2    LDA #$FF
.3a7f3e	85 1a		sta $0894	                STA MTEMP+2
.3a7f40					add_offset
.3a7f40	c2 20		rep #$20	            REP #$20
.3a7f42	38		sec		                SEC             ; Add 1 to the offset
.3a7f43	a5 00		lda $087a	                LDA MCURSOR
.3a7f45	65 18		adc $0892	                ADC MTEMP
.3a7f47	85 18		sta $0892	                STA MTEMP
.3a7f49	e2 20		sep #$20	            SEP #$20
.3a7f4b	a5 02		lda $087c	                LDA MCURSOR+2
.3a7f4d	65 1a		adc $0894	                ADC MTEMP+2
.3a7f4f	85 1a		sta $0894	                STA MTEMP+2
.3a7f51	22 5c 7f 3a	jsl $3a7f5c	                JSL M_PR_ADDR
.3a7f55	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a7f59	2b		pld		                PLD
.3a7f5a	28		plp		                PLP
.3a7f5b	6b		rtl		                RTL
.3a7f5c					M_PR_ADDR
.3a7f5c	08		php		                PHP
.3a7f5d	0b		phd		                PHD
.3a7f5e	c2 20		rep #$20	            REP #$20
.3a7f60	48		pha		                PHA
.3a7f61	08		php		            PHP
.3a7f62	c2 20		rep #$20	            REP #$20
.3a7f64	48		pha		            PHA
.3a7f65	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7f68	5b		tcd		            TCD
.3a7f69	68		pla		            PLA
.3a7f6a	28		plp		            PLP
.3a7f6b	e2 20		sep #$20	            SEP #$20
.3a7f6d	a5 4c		lda $0894	                LDA MTEMP+2     ; Print the bank byte of the address
.3a7f6f	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a7f72	e2 20		sep #$20	            SEP #$20
.3a7f74	a9 3a		lda #$3a	                LDA #':'
.3a7f76	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f79	c2 20		rep #$20	            REP #$20
.3a7f7b	a5 4a		lda $0892	                LDA MTEMP       ; Print the lower 16-bits of the address
.3a7f7d	20 5f 03	jsr $3a035f	            JSR PRHEXW
.3a7f80	68		pla		                PLA
.3a7f81	2b		pld		                PLD
.3a7f82	28		plp		                PLP
.3a7f83	6b		rtl		                RTL
.3a7f84					MNEMONICS_TAB
.3a7f84					MN_ORA
>3a7f84	4f 52 41 00			            .null "ORA"
.3a7f88					MN_AND
>3a7f88	41 4e 44 00			            .null "AND"
.3a7f8c					MN_EOR
>3a7f8c	45 4f 52 00			            .null "EOR"
.3a7f90					MN_ADC
>3a7f90	41 44 43 00			            .null "ADC"
.3a7f94					MN_STA
>3a7f94	53 54 41 00			            .null "STA"
.3a7f98					MN_LDA
>3a7f98	4c 44 41 00			            .null "LDA"
.3a7f9c					MN_CMP
>3a7f9c	43 4d 50 00			            .null "CMP"
.3a7fa0					MN_SBC
>3a7fa0	53 42 43 00			            .null "SBC"
.3a7fa4					MN_ASL
>3a7fa4	41 53 4c 00			            .null "ASL"
.3a7fa8					MN_ROL
>3a7fa8	52 4f 4c 00			            .null "ROL"
.3a7fac					MN_LSR
>3a7fac	4c 53 52 00			            .null "LSR"
.3a7fb0					MN_ROR
>3a7fb0	52 4f 52 00			            .null "ROR"
.3a7fb4					MN_STX
>3a7fb4	53 54 58 00			            .null "STX"
.3a7fb8					MN_LDX
>3a7fb8	4c 44 58 00			            .null "LDX"
.3a7fbc					MN_DEC
>3a7fbc	44 45 43 00			            .null "DEC"
.3a7fc0					MN_INC
>3a7fc0	49 4e 43 00			            .null "INC"
.3a7fc4					MN_BIT
>3a7fc4	42 49 54 00			            .null "BIT"
.3a7fc8					MN_JMP
>3a7fc8	4a 4d 50 00			            .null "JMP"
.3a7fcc					MN_STY
>3a7fcc	53 54 59 00			            .null "STY"
.3a7fd0					MN_LDY
>3a7fd0	4c 44 59 00			            .null "LDY"
.3a7fd4					MN_CPY
>3a7fd4	43 50 59 00			            .null "CPY"
.3a7fd8					MN_CPX
>3a7fd8	43 50 58 00			            .null "CPX"
.3a7fdc					MN_BRK
>3a7fdc	42 52 4b 00			            .null "BRK"
.3a7fe0					MN_JSR
>3a7fe0	4a 53 52 00			            .null "JSR"
.3a7fe4					MN_RTI
>3a7fe4	52 54 49 00			            .null "RTI"
.3a7fe8					MN_RTS
>3a7fe8	52 54 53 00			            .null "RTS"
.3a7fec					MN_PHP
>3a7fec	50 48 50 00			            .null "PHP"
.3a7ff0					MN_PLP
>3a7ff0	50 4c 50 00			            .null "PLP"
.3a7ff4					MN_PHA
>3a7ff4	50 48 41 00			            .null "PHA"
.3a7ff8					MN_PLA
>3a7ff8	50 4c 41 00			            .null "PLA"
.3a7ffc					MN_DEY
>3a7ffc	44 45 59 00			            .null "DEY"
.3a8000					MN_TAY
>3a8000	54 41 59 00			            .null "TAY"
.3a8004					MN_INY
>3a8004	49 4e 59 00			            .null "INY"
.3a8008					MN_INX
>3a8008	49 4e 58 00			            .null "INX"
.3a800c					MN_CLC
>3a800c	43 4c 43 00			            .null "CLC"
.3a8010					MN_SEC
>3a8010	53 45 43 00			            .null "SEC"
.3a8014					MN_CLI
>3a8014	43 4c 49 00			            .null "CLI"
.3a8018					MN_SEI
>3a8018	53 45 49 00			            .null "SEI"
.3a801c					MN_TYA
>3a801c	54 59 41 00			            .null "TYA"
.3a8020					MN_CLV
>3a8020	43 4c 56 00			            .null "CLV"
.3a8024					MN_CLD
>3a8024	43 4c 44 00			            .null "CLD"
.3a8028					MN_SED
>3a8028	53 45 44 00			            .null "SED"
.3a802c					MN_TXA
>3a802c	54 58 41 00			            .null "TXA"
.3a8030					MN_TXS
>3a8030	54 58 53 00			            .null "TXS"
.3a8034					MN_TAX
>3a8034	54 41 58 00			            .null "TAX"
.3a8038					MN_TSX
>3a8038	54 53 58 00			            .null "TSX"
.3a803c					MN_DEX
>3a803c	44 45 58 00			            .null "DEX"
.3a8040					MN_NOP
>3a8040	4e 4f 50 00			            .null "NOP"
.3a8044					MN_BPL
>3a8044	42 50 4c 00			            .null "BPL"
.3a8048					MN_BMI
>3a8048	42 4d 49 00			            .null "BMI"
.3a804c					MN_BVC
>3a804c	42 56 43 00			            .null "BVC"
.3a8050					MN_BVS
>3a8050	42 56 53 00			            .null "BVS"
.3a8054					MN_BCC
>3a8054	42 43 43 00			            .null "BCC"
.3a8058					MN_BCS
>3a8058	42 43 53 00			            .null "BCS"
.3a805c					MN_BNE
>3a805c	42 4e 45 00			            .null "BNE"
.3a8060					MN_BEQ
>3a8060	42 45 51 00			            .null "BEQ"
.3a8064					MN_TSB
>3a8064	54 53 42 00			            .null "TSB"
.3a8068					MN_TRB
>3a8068	54 52 42 00			            .null "TRB"
.3a806c					MN_STZ
>3a806c	53 54 5a 00			            .null "STZ"
.3a8070					MN_BRA
>3a8070	42 52 41 00			            .null "BRA"
.3a8074					MN_PHY
>3a8074	50 48 59 00			            .null "PHY"
.3a8078					MN_PLY
>3a8078	50 4c 59 00			            .null "PLY"
.3a807c					MN_PHX
>3a807c	50 48 58 00			            .null "PHX"
.3a8080					MN_PLX
>3a8080	50 4c 58 00			            .null "PLX"
.3a8084					MN_PHD
>3a8084	50 48 44 00			            .null "PHD"
.3a8088					MN_PLD
>3a8088	50 4c 44 00			            .null "PLD"
.3a808c					MN_PHK
>3a808c	50 48 4b 00			            .null "PHK"
.3a8090					MN_RTL
>3a8090	52 54 4c 00			            .null "RTL"
.3a8094					MN_PHB
>3a8094	50 48 42 00			            .null "PHB"
.3a8098					MN_PLB
>3a8098	50 4c 42 00			            .null "PLB"
.3a809c					MN_WAI
>3a809c	57 41 49 00			            .null "WAI"
.3a80a0					MN_XBA
>3a80a0	58 42 41 00			            .null "XBA"
.3a80a4					MN_TCS
>3a80a4	54 43 53 00			            .null "TCS"
.3a80a8					MN_TSC
>3a80a8	54 53 43 00			            .null "TSC"
.3a80ac					MN_TCD
>3a80ac	54 43 44 00			            .null "TCD"
.3a80b0					MN_TDC
>3a80b0	54 44 43 00			            .null "TDC"
.3a80b4					MN_TXY
>3a80b4	54 58 59 00			            .null "TXY"
.3a80b8					MN_TYX
>3a80b8	54 59 58 00			            .null "TYX"
.3a80bc					MN_STP
>3a80bc	53 54 50 00			            .null "STP"
.3a80c0					MN_XCE
>3a80c0	58 43 45 00			            .null "XCE"
.3a80c4					MN_COP
>3a80c4	43 4f 50 00			            .null "COP"
.3a80c8					MN_JSL
>3a80c8	4a 53 4c 00			            .null "JSL"
.3a80cc					MN_WDM
>3a80cc	57 44 4d 00			            .null "WDM"
.3a80d0					MN_PER
>3a80d0	50 45 52 00			            .null "PER"
.3a80d4					MN_BRL
>3a80d4	42 52 4c 00			            .null "BRL"
.3a80d8					MN_REP
>3a80d8	52 45 50 00			            .null "REP"
.3a80dc					MN_SEP
>3a80dc	53 45 50 00			            .null "SEP"
.3a80e0					MN_MVP
>3a80e0	4d 56 50 00			            .null "MVP"
.3a80e4					MN_MVN
>3a80e4	4d 56 4e 00			            .null "MVN"
.3a80e8					MN_PEI
>3a80e8	50 45 49 00			            .null "PEI"
.3a80ec					MN_PEA
>3a80ec	50 45 41 00			            .null "PEA"
.3a80f0					MN_JML
>3a80f0	4a 4d 4c 00			            .null "JML"
>3a80f4	00 00				            .byte 0, 0
>3a80f6	dc 7f 84 7f c4 80 84 7f		MNEMONIC_TAB    .word <>MN_BRK, <>MN_ORA, <>MN_COP, <>MN_ORA, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 0x
>3a80fe	64 80 84 7f a4 7f 84 7f
>3a8106	ec 7f 84 7f a4 7f 84 80		                .word <>MN_PHP, <>MN_ORA, <>MN_ASL, <>MN_PHD, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>3a810e	64 80 84 7f a4 7f 84 7f
>3a8116	44 80 84 7f 84 7f 84 7f		                .word <>MN_BPL, <>MN_ORA, <>MN_ORA, <>MN_ORA, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 1x
>3a811e	68 80 84 7f a4 7f 84 7f
>3a8126	0c 80 84 7f c0 7f a4 80		                .word <>MN_CLC, <>MN_ORA, <>MN_INC, <>MN_TCS, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>3a812e	68 80 84 7f a4 7f 84 7f
>3a8136	e0 7f 88 7f c8 80 88 7f		                .word <>MN_JSR, <>MN_AND, <>MN_JSL, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 2x
>3a813e	c4 7f 88 7f a8 7f 88 7f
>3a8146	f0 7f 88 7f a8 7f 88 80		                .word <>MN_PLP, <>MN_AND, <>MN_ROL, <>MN_PLD, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>3a814e	c4 7f 88 7f a8 7f 88 7f
>3a8156	48 80 88 7f 88 7f 88 7f		                .word <>MN_BMI, <>MN_AND, <>MN_AND, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 3x
>3a815e	c4 7f 88 7f a8 7f 88 7f
>3a8166	10 80 88 7f bc 7f a8 80		                .word <>MN_SEC, <>MN_AND, <>MN_DEC, <>MN_TSC, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>3a816e	c4 7f 88 7f a8 7f 88 7f
>3a8176	e4 7f 8c 7f cc 80 8c 7f		                .word <>MN_RTI, <>MN_EOR, <>MN_WDM, <>MN_EOR, <>MN_MVP, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 4x
>3a817e	e0 80 8c 7f ac 7f 8c 7f
>3a8186	f4 7f 8c 7f ac 7f 8c 80		                .word <>MN_PHA, <>MN_EOR, <>MN_LSR, <>MN_PHK, <>MN_JMP, <>MN_EOR, <>MN_LSR, <>MN_EOR
>3a818e	c8 7f 8c 7f ac 7f 8c 7f
>3a8196	4c 80 8c 7f 8c 7f 8c 7f		                .word <>MN_BVC, <>MN_EOR, <>MN_EOR, <>MN_EOR, <>MN_MVN, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 5x
>3a819e	e4 80 8c 7f ac 7f 8c 7f
>3a81a6	14 80 8c 7f 74 80 ac 80		                .word <>MN_CLI, <>MN_EOR, <>MN_PHY, <>MN_TCD, <>MN_JML, <>MN_EOR, <>MN_LSR, <>MN_EOR
>3a81ae	f0 80 8c 7f ac 7f 8c 7f
>3a81b6	e8 7f 90 7f d0 80 90 7f		                .word <>MN_RTS, <>MN_ADC, <>MN_PER, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 6x
>3a81be	6c 80 90 7f b0 7f 90 7f
>3a81c6	f8 7f 90 7f b0 7f 90 80		                .word <>MN_PLA, <>MN_ADC, <>MN_ROR, <>MN_RTL, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>3a81ce	c8 7f 90 7f b0 7f 90 7f
>3a81d6	50 80 90 7f 90 7f 90 7f		                .word <>MN_BVS, <>MN_ADC, <>MN_ADC, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 7x
>3a81de	6c 80 90 7f b0 7f 90 7f
>3a81e6	18 80 90 7f 78 80 b0 80		                .word <>MN_SEI, <>MN_ADC, <>MN_PLY, <>MN_TDC, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>3a81ee	c8 7f 90 7f b0 7f 90 7f
>3a81f6	70 80 94 7f d4 80 94 7f		                .word <>MN_BRA, <>MN_STA, <>MN_BRL, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 8x
>3a81fe	cc 7f 94 7f b4 7f 94 7f
>3a8206	fc 7f c4 7f 2c 80 94 80		                .word <>MN_DEY, <>MN_BIT, <>MN_TXA, <>MN_PHB, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA
>3a820e	cc 7f 94 7f b4 7f 94 7f
>3a8216	54 80 94 7f 94 7f 94 7f		                .word <>MN_BCC, <>MN_STA, <>MN_STA, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 9x
>3a821e	cc 7f 94 7f b4 7f 94 7f
>3a8226	1c 80 94 7f 30 80 b4 80		                .word <>MN_TYA, <>MN_STA, <>MN_TXS, <>MN_TXY, <>MN_STZ, <>MN_STA, <>MN_STZ, <>MN_STA
>3a822e	6c 80 94 7f 6c 80 94 7f
>3a8236	d0 7f 98 7f b8 7f 98 7f		                .word <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Ax
>3a823e	d0 7f 98 7f b8 7f 98 7f
>3a8246	00 80 98 7f 34 80 98 80		                .word <>MN_TAY, <>MN_LDA, <>MN_TAX, <>MN_PLB, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>3a824e	d0 7f 98 7f b8 7f 98 7f
>3a8256	58 80 98 7f 98 7f 98 7f		                .word <>MN_BCS, <>MN_LDA, <>MN_LDA, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Bx
>3a825e	d0 7f 98 7f b8 7f 98 7f
>3a8266	20 80 98 7f 38 80 b8 80		                .word <>MN_CLV, <>MN_LDA, <>MN_TSX, <>MN_TYX, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>3a826e	d0 7f 98 7f b8 7f 98 7f
>3a8276	d4 7f 9c 7f d8 80 9c 7f		                .word <>MN_CPY, <>MN_CMP, <>MN_REP, <>MN_CMP, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Cx
>3a827e	d4 7f 9c 7f bc 7f 9c 7f
>3a8286	04 80 9c 7f 3c 80 9c 80		                .word <>MN_INY, <>MN_CMP, <>MN_DEX, <>MN_WAI, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP
>3a828e	d4 7f 9c 7f bc 7f 9c 7f
>3a8296	5c 80 9c 7f 9c 7f 9c 7f		                .word <>MN_BNE, <>MN_CMP, <>MN_CMP, <>MN_CMP, <>MN_PEI, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Dx
>3a829e	e8 80 9c 7f bc 7f 9c 7f
>3a82a6	24 80 9c 7f 7c 80 bc 80		                .word <>MN_CLD, <>MN_CMP, <>MN_PHX, <>MN_STP, <>MN_JML, <>MN_CMP, <>MN_DEC, <>MN_CMP
>3a82ae	f0 80 9c 7f bc 7f 9c 7f
>3a82b6	d8 7f a0 7f dc 80 a0 7f		                .word <>MN_CPX, <>MN_SBC, <>MN_SEP, <>MN_SBC, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Ex
>3a82be	d8 7f a0 7f c0 7f a0 7f
>3a82c6	08 80 a0 7f 40 80 a0 80		                .word <>MN_INX, <>MN_SBC, <>MN_NOP, <>MN_XBA, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC
>3a82ce	d8 7f a0 7f c0 7f a0 7f
>3a82d6	60 80 a0 7f a0 7f a0 7f		                .word <>MN_BEQ, <>MN_SBC, <>MN_SBC, <>MN_SBC, <>MN_PEA, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Fx
>3a82de	ec 80 a0 7f c0 7f a0 7f
>3a82e6	28 80 a0 7f 80 80 c0 80		                .word <>MN_SED, <>MN_SBC, <>MN_PLX, <>MN_XCE, <>MN_JSR, <>MN_SBC, <>MN_INC, <>MN_SBC
>3a82ee	e0 7f a0 7f c0 7f a0 7f
>3a82f6	00 00				                .word 0
>3a82f8	13 00 02 09			ADDRESS_TAB     .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R                  ; 0x
>3a82fc	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8300	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a8304	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a8308	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 1x
>3a830c	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8310	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>3a8314	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a8318	03 00 0b 09			                .byte ADDR_ABS, ADDR_DP_IND_X, ADDR_ABS_LONG, ADDR_SP_R                 ; 2x
>3a831c	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8320	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a8324	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a8328	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 3x
>3a832c	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8330	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>3a8334	07 07 07 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a8338	13 00 13 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMPLIED, ADDR_SP_R              ; 4x
>3a833c	14 01 01 0a			                .byte ADDR_XYC, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8340	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a8344	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a8348	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 5x
>3a834c	14 05 05 0d			                .byte ADDR_XYC, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8350	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a8354	0b 07 07 0b			                .byte ADDR_ABS_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_LONG
>3a8358	13 00 16 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R          ; 6x
>3a835c	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8360	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a8364	15 03 03 0b			                .byte ADDR_ABS_IND, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a8368	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 7x
>3a836c	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8370	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a8374	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a8378	12 00 16 09			                .byte ADDR_PC_REL, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R           ; 8x
>3a837c	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8380	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a8384	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a8388	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 9x
>3a838c	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>3a8390	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a8394	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a8398	82 00 42 09			                .byte ADDR_IMM | OP_M_EFFECT, ADDR_DP_IND_X, ADDR_IMM | OP_X_EFFECT, ADDR_SP_R  ; Ax
>3a839c	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a83a0	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a83a4	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a83a8	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Bx
>3a83ac	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>3a83b0	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a83b4	07 07 06 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_Y, ADDR_ABS_X_LONG
>3a83b8	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Cx
>3a83bc	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a83c0	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a83c4	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a83c8	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Dx
>3a83cc	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a83d0	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a83d4	17 07 07 0e			                .byte ADDR_ABS_IND_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a83d8	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Ex
>3a83dc	01 01 01 0f			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_IND
>3a83e0	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a83e4	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a83e8	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Fx
>3a83ec	03 05 05 0d			                .byte ADDR_ABS, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a83f0	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a83f4	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a83f8	01 01 01 02 01 01 02 02		ADDR_LENGTH     .byte 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 0, 2, 2, 2, 2
>3a8400	00 01 01 03 01 01 03 01 02 01 01 00 02 02 02 02
.3a8410					ADDR_PATTERNS
>3a8410	41 00				            .null "A"
>3a8412	08				            .byte ADDR_ACC
>3a8413	64 64 3a 64 64 64 64 2c		            .null "dd:dddd,X"
>3a841b	58 00
>3a841d	0e				            .byte ADDR_ABS_X_LONG
>3a841e	64 64 3a 64 64 64 64 00		            .null "dd:dddd"
>3a8426	0b				            .byte ADDR_ABS_LONG
>3a8427	64 64 64 64 2c 58 00		            .null "dddd,X"
>3a842e	07				            .byte ADDR_ABS_X
>3a842f	64 64 64 64 2c 59 00		            .null "dddd,Y"
>3a8436	06				            .byte ADDR_ABS_Y
>3a8437	64 64 64 64 00			            .null "dddd"
>3a843c	03				            .byte ADDR_ABS
>3a843d	64 64 2c 58 00			            .null "dd,X"
>3a8442	05				            .byte ADDR_DP_X
>3a8443	64 64 2c 59 00			            .null "dd,Y"
>3a8448	11				            .byte ADDR_DP_Y
>3a8449	64 64 2c 53 00			            .null "dd,S"
>3a844e	09				            .byte ADDR_SP_R
>3a844f	64 64 00			            .null "dd"
>3a8452	01				            .byte ADDR_DP
>3a8453	23 64 64 64 64 00		            .null "#dddd"
>3a8459	c2				            .byte ADDR_IMM | OP_M_EFFECT | OP_X_EFFECT
>3a845a	23 64 64 2c 23 64 64 00		            .null "#dd,#dd"
>3a8462	14				            .byte ADDR_XYC
>3a8463	23 64 64 00			            .null "#dd"
>3a8467	02				            .byte ADDR_IMM
>3a8468	28 64 64 2c 53 29 2c 59		            .null "(dd,S),Y"
>3a8470	00
>3a8471	0c				            .byte ADDR_SP_R_Y
>3a8472	28 64 64 64 64 2c 58 29		            .null "(dddd,X)"
>3a847a	00
>3a847b	10				            .byte ADDR_ABS_X_ID
>3a847c	28 64 64 64 64 29 00		            .null "(dddd)"
>3a8483	10				            .byte ADDR_ABS_X_ID
>3a8484	28 64 64 2c 58 29 00		            .null "(dd,X)"
>3a848b	00				            .byte ADDR_DP_IND_X
>3a848c	28 64 64 29 2c 59 00		            .null "(dd),Y"
>3a8493	04				            .byte ADDR_DP_IND_Y
>3a8494	28 64 64 29 00			            .null "(dd)"
>3a8499	0f				            .byte ADDR_DP_IND
>3a849a	5b 64 64 64 64 5d 00		            .null "[dddd]"
>3a84a1	17				            .byte ADDR_ABS_IND_LONG
>3a84a2	5b 64 64 5d 2c 59 00		            .null "[dd],Y"
>3a84a9	0d				            .byte ADDR_DP_Y_LONG
>3a84aa	5b 64 64 5d 00			            .null "[dd]"
>3a84af	0a				            .byte ADDR_DP_LONG
>3a84b0	00 00				                .byte 0, 0

;******  Return to file: src\monitor.s

.3a84b2					M_INC_CURSOR
.3a84b2	08		php		                PHP
.3a84b3	c2 20		rep #$20	            REP #$20
.3a84b5	48		pha		                PHA
.3a84b6	18		clc		                CLC
.3a84b7	af 7a 08 00	lda $00087a	                LDA MCURSOR
.3a84bb	69 01 00	adc #$0001	                ADC #1
.3a84be	8f 7a 08 00	sta $00087a	                STA MCURSOR
.3a84c2	e2 20		sep #$20	            SEP #$20
.3a84c4	af 7c 08 00	lda $00087c	                LDA MCURSOR+2
.3a84c8	69 00		adc #$00	                ADC #0
.3a84ca	8f 7c 08 00	sta $00087c	                STA MCURSOR+2
.3a84ce	c2 20		rep #$20	            REP #$20
.3a84d0	68		pla		                PLA
.3a84d1	28		plp		                PLP
.3a84d2	6b		rtl		                RTL
.3a84d3					MPRINTB
.3a84d3	08		php		                PHP
.3a84d4	c2 10		rep #$10	            REP #$10
.3a84d6	e2 20		sep #$20	            SEP #$20
.3a84d8	da		phx		                PHX
.3a84d9	a2 08 00	ldx #$0008	                LDX #8          ; Set number of bits to print to 8
.3a84dc	0a		asl a		loop            ASL A           ; Shift MSB to C
.3a84dd	b0 08		bcs $3a84e7	                BCS is_one
.3a84df	48		pha		                PHA             ; Save value to print
.3a84e0	a9 30		lda #$30	                LDA #'0'        ; Print '0'
.3a84e2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a84e5	80 06		bra $3a84ed	                BRA continue
.3a84e7	48		pha		is_one          PHA             ; Save value to print
.3a84e8	a9 31		lda #$31	                LDA #'1'        ; Print '1'
.3a84ea	20 18 00	jsr $3a0018	            JSR PRINTC
.3a84ed	68		pla		continue        PLA
.3a84ee	ca		dex		                DEX             ; Count down the bits to shift
.3a84ef	d0 eb		bne $3a84dc	                BNE loop        ; And try the next one if there is one
.3a84f1	fa		plx		                PLX             ; Otherwise, return
.3a84f2	28		plp		                PLP
.3a84f3	6b		rtl		                RTL
.3a84f4					MSKIPWS
.3a84f4	08		php		            PHP
.3a84f5	c2 20		rep #$20	            REP #$20
.3a84f7	48		pha		            PHA
.3a84f8	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a84fb	5b		tcd		            TCD
.3a84fc	68		pla		            PLA
.3a84fd	28		plp		            PLP
.3a84fe	e2 20		sep #$20	            SEP #$20
.3a8500	a7 32		lda [$087a]	loop            LDA [MCURSOR]       ; Check the current character
.3a8502	f0 0a		beq $3a850e	                BEQ done            ; If NULL, we're done
.3a8504	c9 20		cmp #$20	                CMP #' '            ; Is it a space?
.3a8506	d0 06		bne $3a850e	                BNE done            ; No: we're done
.3a8508	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR    ; Yes, try the next one
.3a850c	80 f2		bra $3a8500	                BRA loop
.3a850e	6b		rtl		done            RTL
.3a850f					MPARSESTR
.3a850f	08		php		                PHP
.3a8510	08		php		            PHP
.3a8511	c2 20		rep #$20	            REP #$20
.3a8513	48		pha		            PHA
.3a8514	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a8517	5b		tcd		            TCD
.3a8518	68		pla		            PLA
.3a8519	28		plp		            PLP
.3a851a	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR                ; Point to the first character of the name
.3a851e	22 f4 84 3a	jsl $3a84f4	                JSL MSKIPWS                     ; Skip white space
.3a8522	c2 30		rep #$30	            REP #$30
.3a8524	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.3a8526	c2 20		rep #$20	            REP #$20
.3a8528	29 ff 00	and #$00ff	                AND #$00FF
.3a852b	0a		asl a		                ASL A                           ; multiply it by forfour
.3a852c	0a		asl a		                ASL A
.3a852d	aa		tax		                TAX                             ; ... to get the index to the argument
.3a852e	a5 32		lda $087a	                LDA MCURSOR                     ; Set the argument to the address of the first byte
.3a8530	95 0d		sta $0855,x	                STA MARG1,X
.3a8532	a5 34		lda $087c	                LDA MCURSOR+2
.3a8534	95 0f		sta $0857,x	                STA MARG1+2,X
.3a8536	e2 20		sep #$20	            SEP #$20
.3a8538	a7 32		lda [$087a]	loop            LDA [MCURSOR]                   ; Scan to the closing double quote
.3a853a	f0 14		beq $3a8550	                BEQ done                        ; If NULL... treat it as a closed argument
.3a853c	c9 22		cmp #$22	                CMP #CHAR_DQUOTE
.3a853e	f0 06		beq $3a8546	                BEQ close_string
.3a8540	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a8544	80 f2		bra $3a8538	                BRA loop
.3a8546	a9 00		lda #$00	close_string    LDA #0                          ; Write a NULL to close the string
.3a8548	87 32		sta [$087a]	                STA [MCURSOR]
.3a854a	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR                ; And point to the next byte
.3a854e	e6 31		inc $0879	                INC MARG_LEN
.3a8550	28		plp		done            PLP
.3a8551	6b		rtl		                RTL
.3a8552					MPARSEARG
.3a8552	08		php		            PHP
.3a8553	c2 20		rep #$20	            REP #$20
.3a8555	48		pha		            PHA
.3a8556	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a8559	5b		tcd		            TCD
.3a855a	68		pla		            PLA
.3a855b	28		plp		            PLP
.3a855c	e2 20		sep #$20	            SEP #$20
.3a855e	64 4a		stz $0892	                STZ MTEMP                       ; Use MTEMP as a flag for having processed digits
.3a8560	c2 20		rep #$20	            REP #$20
.3a8562	64 50		stz $0898	                STZ MPARSEDNUM                  ; Clear the parsed number
.3a8564	64 52		stz $089a	                STZ MPARSEDNUM+2
.3a8566					pa_loop
.3a8566	e2 20		sep #$20	            SEP #$20
.3a8568	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Get the current character
.3a856a	c9 3a		cmp #$3a	                CMP #":"
.3a856c	f0 0d		beq $3a857b	                BEQ pa_next_char                ; Ignore any colons
.3a856e	20 f7 03	jsr $3a03f7	            JSR ISHEX
.3a8571	90 0e		bcc $3a8581	                BCC finished_arg                ; No? We're done with this argument
.3a8573	22 ea 79 3a	jsl $3a79ea	                JSL AS_SHIFT_HEX                ; Yes: shift it onto MPARSEDNUM
.3a8577	a9 01		lda #$01	                LDA #1                          ; Flag that we've processed a character
.3a8579	85 4a		sta $0892	                STA MTEMP
.3a857b	22 b2 84 3a	jsl $3a84b2	pa_next_char    JSL M_INC_CURSOR                ; And try the next character
.3a857f	80 e5		bra $3a8566	                BRA pa_loop
.3a8581	a5 4a		lda $0892	finished_arg    LDA MTEMP                       ; Check to see if we've processed any characters
.3a8583	f0 16		beq $3a859b	                BEQ done                        ; No: we're done
.3a8585	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.3a8587	c2 20		rep #$20	            REP #$20
.3a8589	29 ff 00	and #$00ff	                AND #$00FF
.3a858c	0a		asl a		                ASL A                           ; multiply it by forfour
.3a858d	0a		asl a		                ASL A
.3a858e	aa		tax		                TAX                             ; ... to get the index to the argument
.3a858f	a5 50		lda $0898	                LDA MPARSEDNUM                  ; Copy the value to the argument slot
.3a8591	95 0d		sta $0855,x	                STA MARG1,X
.3a8593	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a8595	95 0f		sta $0857,x	                STA MARG1+2,X
.3a8597	e2 20		sep #$20	            SEP #$20
.3a8599	e6 31		inc $0879	                INC MARG_LEN                    ; And bump up the argument count
.3a859b	6b		rtl		done            RTL
.3a859c					MPARSEALLARG
.3a859c	e2 20		sep #$20	            SEP #$20
.3a859e	64 31		stz $0879	                STZ MARG_LEN                    ; Set the arg count to 0
.3a85a0	22 f4 84 3a	jsl $3a84f4	parse_arg       JSL MSKIPWS                     ; Otherwise, skip white space
.3a85a4	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Check the current character
.3a85a6	f0 21		beq $3a85c9	                BEQ done                        ; If it is NULL, we're done
.3a85a8	c9 22		cmp #$22	                CMP #CHAR_DQUOTE                ; Is it a double-quote?
.3a85aa	d0 06		bne $3a85b2	                BNE regular_arg
.3a85ac	22 0f 85 3a	jsl $3a850f	                JSL MPARSESTR                   ; Yes: parse it as a string argument
.3a85b0	80 0a		bra $3a85bc	                BRA check_rest
.3a85b2	22 52 85 3a	jsl $3a8552	regular_arg     JSL MPARSEARG                   ; Attempt to parse the argument
.3a85b6	a5 31		lda $0879	                LDA MARG_LEN                    ; Check how many arguments we've processed
.3a85b8	c9 09		cmp #$09	                CMP #9
.3a85ba	b0 0d		bcs $3a85c9	                BGE done                        ; If >=9, then we're done
.3a85bc	a7 32		lda [$087a]	check_rest      LDA [MCURSOR]                   ; Check the current character
.3a85be	f0 09		beq $3a85c9	                BEQ done                        ; If EOL: we're done
.3a85c0	c9 20		cmp #$20	                CMP #' '
.3a85c2	f0 dc		beq $3a85a0	                BEQ parse_arg                   ; If space: try to process another argument
.3a85c4	20 f7 03	jsr $3a03f7	            JSR ISHEX
.3a85c7	b0 d7		bcs $3a85a0	                BCS parse_arg                   ; If hex digit: try to process another argument
.3a85c9	6b		rtl		done            RTL
.3a85ca					IMPARSE
.3a85ca	08		php		                PHP
.3a85cb	0b		phd		                PHD
.3a85cc	08		php		            PHP
.3a85cd	c2 20		rep #$20	            REP #$20
.3a85cf	48		pha		            PHA
.3a85d0	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a85d3	5b		tcd		            TCD
.3a85d4	68		pla		            PLA
.3a85d5	28		plp		            PLP
.3a85d6	c2 10		rep #$10	            REP #$10
.3a85d8	e2 20		sep #$20	            SEP #$20
.3a85da	a2 31 00	ldx #$0031	                LDX #MARG_LEN - MONITOR_VARS    ; Clear the monitor command line parameters
.3a85dd	74 00		stz $0848,x	clear_command   STZ MONITOR_VARS,X
.3a85df	ca		dex		                DEX
.3a85e0	d0 fb		bne $3a85dd	                BNE clear_command
.3a85e2	a9 00		lda #$00	                LDA #`INPUTBUF                  ; Point the command parser to the input buffer
.3a85e4	85 02		sta $084a	                STA MCMDADDR+2
.3a85e6	85 34		sta $087c	                STA MCURSOR+2                   ; And point MCURSOR there too
.3a85e8	c2 20		rep #$20	            REP #$20
.3a85ea	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF
.3a85ed	85 00		sta $0848	                STA MCMDADDR
.3a85ef	85 32		sta $087a	                STA MCURSOR
.3a85f1	e2 20		sep #$20	            SEP #$20
.3a85f3	22 f4 84 3a	jsl $3a84f4	                JSL MSKIPWS                     ; Skip to the first letter of the command
.3a85f7	c9 00		cmp #$00	                CMP #0                          ; Is the current character a NULL?
.3a85f9	f0 38		beq $3a8633	                BEQ done                        ; Yes: there's no command here
.3a85fb	c2 20		rep #$20	            REP #$20
.3a85fd	a5 32		lda $087a	                LDA MCURSOR
.3a85ff	85 08		sta $0850	                STA MCMD
.3a8601	e2 20		sep #$20	            SEP #$20
.3a8603	a5 34		lda $087c	                LDA MCURSOR+2
.3a8605	85 0a		sta $0852	                STA MCMD+2
.3a8607	a2 01 00	ldx #$0001	                LDX #1
.3a860a	22 b2 84 3a	jsl $3a84b2	cmd_loop        JSL M_INC_CURSOR                ; Move to the next character
.3a860e	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; What is that character?
.3a8610	d0 06		bne $3a8618	                BNE cmd_space                   ; If not NULL: check for a space
.3a8612	86 0b		stx $0853	no_arguments    STX MCMD_LEN                    ; If NULL: Save the length of the command
.3a8614	64 31		stz $0879	                STZ MARG_LEN                    ; ... And the fact there are no arguments
.3a8616	80 1b		bra $3a8633	                BRA done                        ; ... And return
.3a8618	c9 20		cmp #$20	cmd_space       CMP #' '                        ; Is it a space?
.3a861a	f0 03		beq $3a861f	                BEQ found_cmd                   ; Yes: save the length
.3a861c	e8		inx		                INX                             ; No: go to the next character
.3a861d	80 eb		bra $3a860a	                BRA cmd_loop
.3a861f	86 0b		stx $0853	found_cmd       STX MCMD_LEN                    ; Save the length of the command
.3a8621	a9 00		lda #$00	                LDA #0
.3a8623	87 32		sta [$087a]	                STA [MCURSOR]                   ; Write a NULL to the end of the command
.3a8625	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR                ; And skip to the next character
.3a8629	a7 08		lda [$0850]	                LDA [MCMD]                      ; Check the command
.3a862b	c9 41		cmp #$41	                CMP #'A'
.3a862d	f0 07		beq $3a8636	                BEQ parse_asm                   ; If 'A', parse the line for the assemble command
.3a862f	22 9c 85 3a	jsl $3a859c	                JSL MPARSEALLARG
.3a8633	2b		pld		done            PLD
.3a8634	28		plp		                PLP
.3a8635	6b		rtl		                RTL
.3a8636	22 f4 84 3a	jsl $3a84f4	parse_asm       JSL MSKIPWS                     ; Skip to the first letter of the address
.3a863a	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a863c	f0 f5		beq $3a8633	                BEQ done                        ; Exit if we got the end-of-line
.3a863e	22 52 85 3a	jsl $3a8552	                JSL MPARSEARG                   ; Parse the first argument as the target address
.3a8642	22 f4 84 3a	jsl $3a84f4	                JSL MSKIPWS                     ; Skip to the first letter of the mnemonic
.3a8646	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a8648	f0 e9		beq $3a8633	                BEQ done                        ; Exit if we got the end-of-line
.3a864a	c2 20		rep #$20	            REP #$20
.3a864c	a5 32		lda $087a	                LDA MCURSOR                     ; Save pointer to the start of the mnemonic
.3a864e	85 11		sta $0859	                STA MARG2
.3a8650	e2 20		sep #$20	            SEP #$20
.3a8652	a5 34		lda $087c	                LDA MCURSOR+2
.3a8654	85 13		sta $085b	                STA MARG2+2
.3a8656	22 b2 84 3a	jsl $3a84b2	asm_find_sp     JSL M_INC_CURSOR                ; Find the space at the end of the mnemonic
.3a865a	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a865c	f0 26		beq $3a8684	                BEQ asm_no_operand              ; If EOL: we have an instruction but no operand
.3a865e	c9 20		cmp #$20	                CMP #' '
.3a8660	d0 f4		bne $3a8656	                BNE asm_find_sp
.3a8662	a9 00		lda #$00	                LDA #0
.3a8664	87 32		sta [$087a]	                STA [MCURSOR]                   ; Null terminate the mnemonic
.3a8666	e6 31		inc $0879	                INC MARG_LEN                    ; Count the mnemonic as an argument
.3a8668	22 b2 84 3a	jsl $3a84b2	                JSL M_INC_CURSOR
.3a866c	22 f4 84 3a	jsl $3a84f4	                JSL MSKIPWS                     ; Skip to the addressing mode
.3a8670	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a8672	f0 bf		beq $3a8633	                BEQ done                        ; If EOL: we're done
.3a8674	c2 20		rep #$20	            REP #$20
.3a8676	a5 32		lda $087a	                LDA MCURSOR                     ; Set the pointer to the addressing mode
.3a8678	85 15		sta $085d	                STA MARG3
.3a867a	e2 20		sep #$20	            SEP #$20
.3a867c	a5 34		lda $087c	                LDA MCURSOR+2
.3a867e	85 17		sta $085f	                STA MARG3+2
.3a8680	e6 31		inc $0879	                INC MARG_LEN                    ; And count it as the second argument
.3a8682	80 af		bra $3a8633	                BRA done                        ; and return
.3a8684	e6 31		inc $0879	asm_no_operand  INC MARG_LEN                    ; Increment the argument count
.3a8686	80 ab		bra $3a8633	                BRA done                        ; And quit
.3a8688					IMLOAD
.3a8688	08		php		                PHP
.3a8689	c2 10		rep #$10	            REP #$10
.3a868b	e2 20		sep #$20	            SEP #$20
.3a868d	a5 31		lda $0879	                LDA MARG_LEN
.3a868f	d0 0f		bne $3a86a0	                BNE get_arguments
.3a8691	a2 7e 87	ldx #$877e	bad_arguments   LDX #<>MERRARGS                 ; Print bad arguments error
.3a8694	a9 3a		lda #$3a	                LDA #`MERRARGS
.3a8696	48		pha		                PHA
.3a8697	ab		plb		                PLB
.3a8698	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a869b	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a869e	80 61		bra $3a8701	                BRA done
.3a86a0					get_arguments
.3a86a0	c2 20		rep #$20	            REP #$20
.3a86a2	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.3a86a4	8f 23 08 00	sta $000823	                STA ARGUMENT1
.3a86a8	a5 0f		lda $0857	                LDA MARG1+2
.3a86aa	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.3a86ae	20 6e 68	jsr $3a686e	            JSR SETFILEDESC
.3a86b1	e2 20		sep #$20	            SEP #$20
.3a86b3	a5 31		lda $0879	                LDA MARG_LEN
.3a86b5	c9 01		cmp #$01	                CMP #1
.3a86b7	d0 0f		bne $3a86c8	                BNE get_dest
.3a86b9	c2 20		rep #$20	            REP #$20
.3a86bb	a9 ff ff	lda #$ffff	                LDA #$FFFF                      ; Destination address not provided...
.3a86be	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR              ; ... set it to something sane
.3a86c2	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a86c6	80 0e		bra $3a86d6	                BRA try_load
.3a86c8					get_dest
.3a86c8	c2 20		rep #$20	            REP #$20
.3a86ca	a5 11		lda $0859	                LDA MARG2                       ; Set the destination address from the arguments
.3a86cc	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a86d0	a5 13		lda $085b	                LDA MARG2+2
.3a86d2	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a86d6	22 18 11 00	jsl $001118	try_load        JSL FK_LOAD                     ; Try to load the file
.3a86da	b0 25		bcs $3a8701	                BCS done
.3a86dc					error
.3a86dc	e2 20		sep #$20	            SEP #$20
.3a86de	a2 a4 87	ldx #$87a4	                LDX #<>MCANTLOAD                ; Print bad arguments error
.3a86e1	a9 3a		lda #$3a	                LDA #`MCANTLOAD
.3a86e3	48		pha		                PHA
.3a86e4	ab		plb		                PLB
.3a86e5	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a86e8	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.3a86ec	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a86ef	a9 20		lda #$20	                LDA #' '
.3a86f1	20 18 00	jsr $3a0018	            JSR PRINTC
.3a86f4	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.3a86f8	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a86fb	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a86fe	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a8701	28		plp		done            PLP
.3a8702	6b		rtl		                RTL
.3a8703					IMSAVE
.3a8703	8b		phb		                PHB
.3a8704	08		php		                PHP
.3a8705	c2 10		rep #$10	            REP #$10
.3a8707	e2 20		sep #$20	            SEP #$20
.3a8709	a5 31		lda $0879	                LDA MARG_LEN
.3a870b	c9 03		cmp #$03	                CMP #3
.3a870d	f0 0f		beq $3a871e	                BEQ get_arguments
.3a870f	a2 7e 87	ldx #$877e	                LDX #<>MERRARGS                 ; Print bad arguments error
.3a8712	a9 3a		lda #$3a	                LDA #`MERRARGS
.3a8714	48		pha		                PHA
.3a8715	ab		plb		                PLB
.3a8716	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a8719	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a871c	80 54		bra $3a8772	                BRA done
.3a871e					get_arguments
.3a871e	c2 20		rep #$20	            REP #$20
.3a8720	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.3a8722	8f 23 08 00	sta $000823	                STA ARGUMENT1
.3a8726	a5 0f		lda $0857	                LDA MARG1+2
.3a8728	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.3a872c	20 6e 68	jsr $3a686e	            JSR SETFILEDESC
.3a872f	a5 11		lda $0859	                LDA MARG2                       ; Set the starting address
.3a8731	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a8735	a5 13		lda $085b	                LDA MARG2+2
.3a8737	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a873b	a5 15		lda $085d	                LDA MARG3                       ; Set the ending address
.3a873d	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a8741	a5 17		lda $085f	                LDA MARG3+2
.3a8743	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a8747	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                     ; Save the data
.3a874b	b0 25		bcs $3a8772	                BCS done
.3a874d					error
.3a874d	e2 20		sep #$20	            SEP #$20
.3a874f	a2 8e 87	ldx #$878e	                LDX #<>MCANTSAVE                ; Print bad arguments error
.3a8752	a9 3a		lda #$3a	                LDA #`MCANTSAVE
.3a8754	48		pha		                PHA
.3a8755	ab		plb		                PLB
.3a8756	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a8759	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.3a875d	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a8760	a9 20		lda #$20	                LDA #' '
.3a8762	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8765	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.3a8769	20 79 03	jsr $3a0379	            JSR PRHEXB
.3a876c	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a876f	20 c2 02	jsr $3a02c2	            JSR PRINTCR
.3a8772	28		plp		done            PLP
.3a8773	ab		plb		                PLB
.3a8774	6b		rtl		                RTL
.3a8775	5c 37 26 3a	jmp $3a2637	IMEXIT          JML INTERACT
.3a8779	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.3a877a	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.3a877b	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.3a877c	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.3a877d	00		brk #		IMDOS           BRK ; Execute DOS command
.3a877e					MMESSAGES
>3a877e	42 61 64 20 61 72 67 75		MERRARGS        .null "Bad arguments",CHAR_CR,CHAR_CR
>3a8786	6d 65 6e 74 73 0d 0d 00
>3a878e	55 6e 61 62 6c 65 20 74		MCANTSAVE       .null "Unable to save file: "
>3a8796	6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a87a4	55 6e 61 62 6c 65 20 74		MCANTLOAD       .null "Unable to load file: "
>3a87ac	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00
>3a87ba	0d 20 20 50 43 20 20 20		mregisters_msg  .null $0D,"  PC     A    X    Y    SP   DBR DP   NVMXDIZC",CHAR_CR
>3a87c2	20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>3a87d2	20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>3a87e2	56 4d 58 44 49 5a 43 0d 00
>3a87eb	41 43 44 46 47 4a 48 4c		MCOMMANDS       .null "ACDFGJHLMR;STVWX>?"
>3a87f3	4d 52 3b 53 54 56 57 58 3e 3f 00

;******  Return to file: src\basic816.s

.3a87fe	18		clc		START       CLC                 ; Go to native mode
.3a87ff	fb		xce		            XCE
.3a8800	08		php		            PHP
.3a8801	c2 20		rep #$20	            REP #$20
.3a8803	48		pha		            PHA
.3a8804	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a8807	5b		tcd		            TCD
.3a8808	68		pla		            PLA
.3a8809	28		plp		            PLP
.3a880a	08		php		            PHP
.3a880b	e2 20		sep #$20	            SEP #$20
.3a880d	48		pha		            PHA
.3a880e	a9 00		lda #$00	            LDA #BASIC_BANK
.3a8810	48		pha		            PHA
.3a8811	ab		plb		            PLB
.3a8812	68		pla		            PLA
.3a8813	28		plp		            PLP
.3a8814	c2 30		rep #$30	            REP #$30
.3a8816	20 3d 88	jsr $3a883d	            JSR INITBASIC
.3a8819	a9 ff fe	lda #$feff	            LDA #STACK_END      ; Set the system stack
.3a881c	1b		tcs		            TCS
.3a881d	08		php		            PHP
.3a881e	e2 20		sep #$20	            SEP #$20
.3a8820	48		pha		            PHA
.3a8821	a9 3a		lda #$3a	            LDA #`GREET
.3a8823	48		pha		            PHA
.3a8824	ab		plb		            PLB
.3a8825	68		pla		            PLA
.3a8826	28		plp		            PLP
.3a8827	a2 71 d2	ldx #$d271	            LDX #<>GREET
.3a882a	20 4f 03	jsr $3a034f	            JSR PRINTS
.3a882d	08		php		            PHP
.3a882e	e2 20		sep #$20	            SEP #$20
.3a8830	48		pha		            PHA
.3a8831	a9 00		lda #$00	            LDA #BASIC_BANK
.3a8833	48		pha		            PHA
.3a8834	ab		plb		            PLB
.3a8835	68		pla		            PLA
.3a8836	28		plp		            PLP
.3a8837	4c 37 26	jmp $3a2637	            JMP INTERACT        ; Start accepting input from the user
.3a883a	4c 3a 88	jmp $3a883a	WAIT        JMP WAIT
.3a883d					INITBASIC
.3a883d	08		php		            PHP
.3a883e	20 09 02	jsr $3a0209	            JSR INITIO
.3a8841	20 00 4e	jsr $3a4e00	            JSR CMD_NEW
.3a8844	28		plp		            PLP
.3a8845	60		rts		            RTS
>3ad271	43 32 35 36 20 46 6f 65		GREET       .text "C256 Foenix BASIC816 "
>3ad279	6e 69 78 20 42 41 53 49 43 38 31 36 20

;******  Processing file: src\version.s

>3ad286	76 30 2e 32 2e 30 2d 61		.text "v0.2.0-alpha+274"
>3ad28e	6c 70 68 61 2b 32 37 34

;******  Return to file: src\basic816.s

>3ad296	0d 00				            .byte 13,0

;******  End of listing
