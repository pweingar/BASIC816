
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D SYSTEM=2 -D C256_SKU=1 -D UARTSUPPORT= -D UNITTEST=0 -D TRACE_LEVEL=0 --long-address --flat -b --m65816 --intel-hex -o basic816_3A0000.hex --list=basic816_3A0000.lst --labels=basic816_3A0000.lbl src\basic816.s
; Mon Aug 02 15:20:50 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					SYSTEM=2
=1					C256_SKU=1
=					UARTSUPPORT=
=0					UNITTEST=0
=0					TRACE_LEVEL=0

;******  Processing input file: src\basic816.s


;******  Processing file: src\constants.s

=2					SYSTEM_C256 = 2         ; C256 Foenix
=1					SYSTEM_C64 = 1          ; Commodore 64 with SuperCPU
=$03					CHAR_CTRL_C = $03       ; CTRL-C: used as a program interrupt key
=$07					CHAR_BELL = $07         ; Ring the console bell
=$08					CHAR_BS = $08           ; Backspace
=$09					CHAR_TAB = $09          ; TAB
=$0a					CHAR_LF = $0A           ; Linefeed
=$0d					CHAR_CR = $0D           ; Carriage Return
=$0f					CHAR_INS = $0F          ; Insert
=$1b					CHAR_ESC = $1B          ; Escape
=$22					CHAR_DQUOTE = $22       ; Double quote
=$20					CHAR_SP = $20           ; Space
=$7f					CHAR_DEL = $7F          ; Delete
=5					ARGUMENT_SIZE = 5       ; Number of bytes in an argument
=8					VAR_NAME_SIZE = 8       ; Maximum number of characters in a variable name
=0					TYPE_INTEGER = 0        ; 32-bit integer
=1					TYPE_FLOAT = 1          ; Single-precision floating point
=2					TYPE_STRING = 2         ; ASCII string
=$80					TYPE_ARR_INTEGER = $80  ; Array of 32-bit integers
=$81					TYPE_ARR_FLOAT = $81    ; Array of 32-bit floats
=$82					TYPE_ARR_STRING = $82   ; Array of strings
=$7f					TYPE_BINDING = $7F      ; A variable name binding
=$ff					TYPE_NAV = $FF          ; Not-A-Value
=0					ERR_OK = 0              ; No error
=1					ERR_BREAK = 1           ; The user pressed an interrupt key
=2					ERR_SYNTAX = 2          ; A syntax error was found on the current line
=3					ERR_MEMORY = 3          ; Out of memory
=4					ERR_TYPE = 4            ; Type mismatch error
=5					ERR_NOTFOUND = 5        ; Variable not found error
=6					ERR_NOLINE = 6          ; Line number not found
=7					ERR_STACKUNDER = 7      ; Stack underflow error
=8					ERR_STACKOVER = 8       ; Stack overflow error
=9					ERR_RANGE = 9           ; Out-of-range error
=10					ERR_ARGUMENT = 10       ; Bad argument error
=11					ERR_NOFILE = 11         ; File not found error
=12					ERR_NAN = 12            ; Floating point math resulted in something that is not a number
=13					ERR_OVERFLOW = 13       ; Math operation overflowed
=14					ERR_UNDERFLOW = 14      ; Math operation underflowed
=15					ERR_DIV0 = 15           ; Math operation involved a division by zero
=16					ERR_DIRECTORY = 16      ; Error reading the directory
=17					ERR_LOAD = 17           ; Could not load file
=18					ERR_SAVE = 18           ; Could not save a file
=19					ERR_DELETE = 19         ; Could not delete a file
=20					ERR_FILENOTFOUND = 20   ; Could not find the file
=21					ERR_DIRNOTWRITE = 21    ; Could not update the directory entry
=22					ERR_NOTCOPIED = 22      ; Could not copy the file
=23					ERR_DOMAIN = 23         ; Mathematical functions domain error

;******  Return to file: src\basic816.s


;******  Processing file: src\memorymap.s


;******  Processing file: src\C256/mmap_c256.s

=1					SYS_C256_FMX = 1        ; System SKU for C256 Foenix FMX
=2					SYS_C256_USER = 2       ; System SKU for C256 Foenix User

;******  Processing file: src\C256/page_00_inc.s

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Unsigned divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 0 Divisor ex B in A/B
=$000114				D0_RESULT        = $000114 ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Signed divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 1 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/int_math_defs.s

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B
=$af1400				SIGNED32_MULT_A     = $AF1400
=$af1404				SIGNED32_MULT_B     = $AF1404
=$af1408				SIGNED32_MULT_OUT   = $AF1408

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/vicky_def.s

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				GAMMA_CTRL_REG          = $AF0002
=$01					GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02					GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08					GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10					HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af0900				VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01					VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02					VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901				VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902				VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903				VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80					VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000

;******  Processing file: src\C256/VKYII_CFP9553_BITMAP_def.s

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_TILEMAP_def.s

=$01					TILE_Enable             = $01
=0					TILEMAP_CONTROL         = 0             ; Offset to a tile map's control register
=1					TILEMAP_START_ADDY      = 1             ; Offset to a tile map's address
=4					TILEMAP_TOTAL_X         = 4             ; Offset to a tile map's width
=6					TILEMAP_TOTAL_Y         = 6             ; Offset to a tile map's height
=8					TILEMAP_WINDOW_X        = 8             ; Offset to a tile map's X position
=10					TILEMAP_WINDOW_Y        = 10            ; Offset to a tile map's Y position
=1					TILEMAP_VISIBLE         = 1             ; Tile map is visible flag
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=2					TILESET_ADDY_H          = 2             ; Offset to high byte of tile set address
=3					TILESET_ADDY_CFG        = 3             ; Offset to the tile set address configuration
=$08					TILESET_SQUARE_256      = $08
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SDMA_def.s

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_VDMA_def.s

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$10					VDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					VDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SPRITE_def.s

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\C256/vicky_def.s


;******  Return to file: src\C256/mmap_c256.s

=$00					BASIC_BANK = $00            ; Memory bank for default purposes
=$004c00				IOBUF = $004C00             ; A buffer for I/O operations
=$004d00				ARRIDXBUF = $004D00         ; The array index buffer used for array references
=$004e00				TEMPBUF = $004E00           ; Temporary buffer for string processing, etc.
=$004f00				INPUTBUF = $004F00          ; Starting address of the line input buffer (one page)
=$005000				RETURN_BOT = $005000        ; Starting address of the return stack
=$005fff				RETURN_TOP = $005FFF        ; Ending address of the return stack
=$006000				ARGUMENT_BOT = $006000      ; Starting address of the argument stack
=$006fff				ARGUMENT_TOP = $006FFF      ; Ending address of the argument stack
=$007000				OPERATOR_BOT = $007000      ; Starting address of the operator stack
=$007fff				OPERATOR_TOP = $007FFF      ; Ending address of the operator stack
=$b00000				VRAM = $B00000              ; Start of video RAM
=$010000				LOADBLOCK = $010000         ; File loading will start here
=$360000				BASIC_BOT := $360000         ; Starting point for BASIC programs
=$37ffff				HEAP_TOP := $37FFFF          ; Starting point of the heap

;******  Return to file: src\memorymap.s

=$00ffe6				VBRK = $00FFE6          ; Vector for the native-mode BRK vector
=$3ad000				DATA_BLOCK = *
=$000800				GLOBAL_VARS = *
>0800					BIP         .dword ?    ; Pointer to the current byte in the current BASIC program
>0804					BIPPREV     .dword ?    ; Pointer to the previous bytein the current BASIC program
>0808					INDEX       .dword ?    ; A temporary pointer
>080c					SCRATCH     .dword ?    ; A temporary scratch variable
>0810					SCRATCH2    .dword ?    ; A temporary scratch variable
>0814					            .word  ?	; Need a few more bits for BCD conversion
>0816					STRPTR      .dword ?    ; A temporary pointer for strings
>081a					CURLINE     .dword ?    ; Pointer to the current input line needing tokenization
>081e					CURTOKLEN   .byte ?     ; Length of the text of the current token
>081f					ARGUMENTSP  .word ?     ; Pointer to the top of the argument stack
>0821					OPERATORSP  .word ?     ; Pointer to the top of the operator stack
>0823					ARGUMENT1   .dword ?    ; Argument 1 for expression calculations
>0827					ARGTYPE1    .byte ?     ; Type code for argument 1 (integer, float, string)
>0828					SIGN1       .byte ?     ; Temporary sign marker for argument 1
>0829					ARGUMENT2   .dword ?    ; Argument 2 for expression calculations
>082d					ARGTYPE2    .byte ?     ; Type code for argument 2 (integer, float, string)
>082e					SIGN2       .byte ?     ; Temporary sign marker for argument 1
>082f					JMP16PTR    .word ?     ; Pointer for 16-bit indirect jumps (within BASIC816's code base)
>0831					GOSUBDEPTH  .word ?     ; Number of GOSUBs on the stack
>0833					RETURNSP    .word ?     ; Pointer to the top of the return stack
>0835					SKIPNEST    .byte ?     ; Flag to indicate if token seeking should respect nesting (MSB set if so)
>0836					NESTING     .byte ?     ; Counter of the depth of lexical nesting for FOR/NEXT, DO/LOOP
>0837					TARGETTOK   .byte ?     ; When searching for a token, TARGETTOK is the token to find
>0838					DATABIP     .dword ?    ; Pointer to the next data element for READ statements
>083c					DATALINE    .dword ?    ; Pointer to the current line for a DATA statement
>0840					SAVEBIP     .dword ?    ; Spot to save BIP temporarily
>0844					SAVELINE    .dword ?    ; Spot to save CURLINE temporarily
=$000848				MONITOR_VARS = *
>0848					MCMDADDR    .long ?     ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
>084b					MCMP_TEXT   .long ?     ;3 Bytes Address of symbol being evaluated for COMPARE routine
>084e					MCMP_LEN    .word ?     ;2 Bytes Length of symbol being evaluated for COMPARE routine
>0850					MCMD        .long ?     ;3 Bytes Address of the current command/function string
>0853					MCMD_LEN    .word ?     ;2 Bytes Length of the current command/function string
>0855					MARG1       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command
>0859					MARG2       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>085d					MARG3       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0861					MARG4       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0865					MARG5       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0869					MARG6       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>086d					MARG7       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0871					MARG8       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0875					MARG9       .dword ?    ;4 Bytes First command argument.
>0879					MARG_LEN    .byte ?     ;1 Byte count of the number of arguments passed
>087a					MCURSOR     .dword ?    ;4 Bytes Pointer to the current memory location for disassembly, memory dump, etc.
>087e					MLINEBUF    .fill 17    ;17 Byte buffer for dumping memory (TODO: could be moved to a general string scratch area)
>088f					MCOUNT      .long ?     ;2 Byte counter
>0892					MTEMP       .dword ?    ;4 Bytes of temporary space
>0896					MCPUSTAT    .byte ?     ;1 Byte to represent what the disassembler thinks the processor MX bits are
>0897					MADDR_MODE  .byte ?     ;1 Byte address mode found by the assembler
>0898					MPARSEDNUM  .dword ?    ;4 Bytes to store a parsed number
>089c					MMNEMONIC   .word ?     ;2 Byte address of mnemonic found by the assembler
>089e					MTEMPPTR    .dword ?    ;4 Byte temporary pointer
>08a2					MJUMPINST   .byte ?     ;1 Byte JSL opcode
>08a3					MJUMPADDR   .long ?     ;3 Byte address for JSL
=$000823				MANTISSA1 = ARGUMENT1
=$000826				EXPONENT1 = ARGUMENT1+3

;******  Return to file: src\basic816.s


;******  Processing file: src\macros.s


;******  Return to file: src\basic816.s

.3a0000	5c 71 8a 3a	jmp $3a8a71	COLDBOOT        JML START               ; Entry point to boot up BASIC from scratch
.3a0004	5c 83 70 3a	jmp $3a7083	MONITOR         JML IMONITOR            ; Entry point to the machine language monitor
.3a0008	5c 75 27 3a	jmp $3a2775	READLINE        JML IREADLINE           ; Wait for the user to enter a line of text (for programming input)
.3a000c	5c ba 02 3a	jmp $3a02ba	SCRCOPYLINE     JML ISCRCPYLINE         ; Copy the line on the screen the user just input to INPUTBUF
.3a0010	5c 58 00 3a	jmp $3a0058	INPUTLINE       JML IINPUTLINE          ; Read a single line of text from the user, and copy it to TEMPBUF (for INPUT statement)
.3a0014	5c b8 00 3a	jmp $3a00b8	GETKEY          JML IGETKEY             ; Wait for a keypress by the user and return the ASCII code in A
.3a0018	5c 0f 04 3a	jmp $3a040f	PRINTC          JML IPRINTC             ; Print the character in A to the console
.3a001c	5c 5e 02 3a	jmp $3a025e	SHOWCURSOR      JML ISHOWCURSOR         ; Set cursor visibility: A=0, hide... A<>0, show.
.3a0020	5c 79 02 3a	jmp $3a0279	CURSORXY        JML ICURSORXY           ; Set the position of the cursor to (X, Y)
.3a0024	5c 80 02 3a	jmp $3a0280	CLSCREEN        JML ICLSCREEN           ; Clear the screen

;******  Processing file: src\bios.s


;******  Processing file: src\membuffers.s

>08a6					OBUFFER     .long ?     ; Pointer to the current text memory buffer for output
>08a9					OBUFFSIZE   .word ?     ; Maximum size of output text memory buffer
>08ab					OBUFFIDX    .word ?     ; Index into the current output buffer
>08ad					IBUFFER     .long ?     ; Pointer to the current text memory buffer for input
>08b0					IBUFFSIZE   .word ?     ; Number of bytes written to the buffer
>08b2					IBUFFIDX    .word ?     ; Index into the current input buffer (next available character)
.3a0028					OBUFF_PUTC
.3a0028	0b		phd		                PHD
.3a0029	08		php		                PHP
.3a002a	08		php		            PHP
.3a002b	c2 20		rep #$20	            REP #$20
.3a002d	48		pha		            PHA
.3a002e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0031	5b		tcd		            TCD
.3a0032	68		pla		            PLA
.3a0033	28		plp		            PLP
.3a0034	e2 20		sep #$20	            SEP #$20
.3a0036	85 b5		sta $08b5	                STA SAVE_A
.3a0038	c2 20		rep #$20	            REP #$20
.3a003a	a5 a6		lda $08a6	                LDA OBUFFER
.3a003c	d0 06		bne $3a0044	                BNE has_buffer
.3a003e	e2 20		sep #$20	            SEP #$20
.3a0040	a5 a8		lda $08a8	                LDA OBUFFER+2
.3a0042	f0 11		beq $3a0055	                BEQ done
.3a0044					has_buffer
.3a0044	c2 10		rep #$10	            REP #$10
.3a0046	a4 ab		ldy $08ab	                LDY OBUFFIDX        ; Check to make sure there is room
.3a0048	c4 a9		cpy $08a9	                CPY OBUFFSIZE
.3a004a	f0 09		beq $3a0055	                BEQ done            ; If not, exit silently
.3a004c	e2 20		sep #$20	            SEP #$20
.3a004e	a5 b5		lda $08b5	                LDA SAVE_A
.3a0050	97 a6		sta [$08a6],y	                STA [OBUFFER],Y     ; Write the character to the buffer
.3a0052	c8		iny		                INY                 ; Increment the index
.3a0053	84 ab		sty $08ab	                STY OBUFFIDX
.3a0055	28		plp		done            PLP
.3a0056	2b		pld		                PLD
.3a0057	60		rts		            RTS

;******  Return to file: src\bios.s


;******  Processing file: src\C256/io_c256.s


;******  Processing file: src\C256/kernel_c256.s

=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001080				FK_PRINTAH          = $001080 ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=$00113c				FK_TESTBREAK        = $00113C ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
=$001028				FK_GETSCANCODE      = $001028 ; Get the next scancode from the keyboard (A = scancode, 0 if none available)
=$001144				FK_READVRAM         = $001144 ; Read a byte from video RAM at B:X
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/RTC_inc.s

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/keyboard.s


;******  Processing file: src\C256/keyboard_def.s

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04
=2					ANSI_IN_INS = 2     ; ANSI input code for INSERT
=3					ANSI_IN_DEL = 3     ; ANSI input code for DELETE
=24					ANSI_IN_F12 = 24    ; ANSI input code for F12
=8					ANSI_IN_CTRL = 8    ; ANSI input modifier flag for CTRL

;******  Return to file: src\C256/keyboard.s

.3a0058					IINPUTLINE
.3a0058	08		php		                PHP
.3a0059	c2 10		rep #$10	            REP #$10
.3a005b	e2 20		sep #$20	            SEP #$20
.3a005d	a9 01		lda #$01	                LDA #1              ; Show the cursor
.3a005f	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a0062	a2 00 00	ldx #$0000	                LDX #0
.3a0065	a9 00		lda #$00	                LDA #0
.3a0067	9f 00 4c 00	sta $004c00,x	zero_loop       STA @lIOBUF,X
.3a006b	e8		inx		                INX
.3a006c	e0 00 01	cpx #$0100	                CPX #$100
.3a006f	d0 f6		bne $3a0067	                BNE zero_loop
.3a0071	a2 00 00	ldx #$0000	                LDX #0
.3a0074					getchar
.3a0074	20 14 00	jsr $3a0014	            JSR GETKEY
.3a0077	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; Got a CR?
.3a0079	d0 03		bne $3a007e	                BNE not_cr
.3a007b	4c b1 00	jmp $3a00b1	                JMP endofline       ; Yes: we're done
.3a007e					not_cr
.3a007e	c9 08		cmp #$08	not_right       CMP #CHAR_BS        ; Is it a backspace?
.3a0080	d0 1a		bne $3a009c	                BNE not_bs
.3a0082	e0 00 00	cpx #$0000	                CPX #0              ; Are we at the beginning of the line?
.3a0085	f0 ed		beq $3a0074	                BEQ getchar         ; yes: ignore the backspace
.3a0087	da		phx		                PHX                 ; Save the cursor position
.3a0088	bf 01 4c 00	lda $004c01,x	clr_loop        LDA @lIOBUF+1,X     ; Get the character above
.3a008c	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the current position
.3a0090	f0 06		beq $3a0098	                BEQ done_clr        ; If we copied a NUL, we're done copying
.3a0092	e8		inx		                INX                 ; Otherwise, keep copying down
.3a0093	e0 ff 00	cpx #$00ff	                CPX #$FF            ; Until we're at the end of the buffer
.3a0096	d0 f0		bne $3a0088	                BNE clr_loop
.3a0098	fa		plx		done_clr        PLX                 ; Restore the cursor position
.3a0099	ca		dex		                DEX                 ; No: move the cursor left
.3a009a	80 0e		bra $3a00aa	                BRA print_bs        ; And print the backspace
.3a009c	c9 20		cmp #$20	not_bs          CMP #$20            ; Is it in range 00 -- 1F?
.3a009e	90 d4		bcc $3a0074	                BLT getchar         ; Yes: ignore it
.3a00a0	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the input buffer
.3a00a4	e8		inx		                INX                 ; Move the cursor forward
.3a00a5					echo
.3a00a5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00a8	80 ca		bra $3a0074	                BRA getchar         ; And get another...
.3a00aa	a9 08		lda #$08	print_bs        LDA #CHAR_BS        ; Backspace character...
.3a00ac	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00af	80 c3		bra $3a0074	                BRA getchar         ; And get another...
.3a00b1	a9 00		lda #$00	endofline       LDA #0              ; Hide the cursor
.3a00b3	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a00b6	28		plp		                PLP
.3a00b7	60		rts		            RTS
.3a00b8					IGETKEY
.3a00b8	da		phx		                PHX
.3a00b9	5a		phy		                PHY
.3a00ba	8b		phb		                PHB
.3a00bb	0b		phd		                PHD
.3a00bc	08		php		                PHP
.3a00bd	22 4c 10 00	jsl $00104c	                JSL FK_GETCHW
.3a00c1	28		plp		                PLP
.3a00c2	2b		pld		                PLD
.3a00c3	ab		plb		                PLB
.3a00c4	7a		ply		                PLY
.3a00c5	fa		plx		                PLX
.3a00c6	60		rts		            RTS
=0					GK_ST_INIT = 0      ; GETKEYE state: initial
=1					GK_ST_ESC = 1       ; GETKEYE state: ESC seen
=2					GK_ST_CSI = 2       ; GETKEYE state: CSI "ESC[" seen
=3					GK_ST_CODE = 3      ; GETKEYE state: We're at the command code in the sequence
=4					GK_ST_MODS = 4      ; GETKEYE state: We're at the modifier code in the sequence
.3a00c7					SEND_ANSI
.3a00c7	08		php		                PHP
.3a00c8	e2 30		sep #$30	            SEP #$30
.3a00ca	48		pha		                PHA
.3a00cb	a9 1b		lda #$1b	                LDA #CHAR_ESC           ; Print ESC
.3a00cd	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00d0	a9 5b		lda #$5b	                LDA #'['                ; Print [
.3a00d2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00d5	68		pla		                PLA                     ; Print the command code
.3a00d6	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00d9	28		plp		                PLP
.3a00da	60		rts		            RTS
.3a00db					GETKEYE
.3a00db	0b		phd		                PHD
.3a00dc	8b		phb		                PHB
.3a00dd	08		php		                PHP
.3a00de	08		php		            PHP
.3a00df	e2 20		sep #$20	            SEP #$20
.3a00e1	48		pha		            PHA
.3a00e2	a9 00		lda #$00	            LDA #0
.3a00e4	48		pha		            PHA
.3a00e5	ab		plb		            PLB
.3a00e6	68		pla		            PLA
.3a00e7	28		plp		            PLP
.3a00e8	08		php		            PHP
.3a00e9	c2 20		rep #$20	            REP #$20
.3a00eb	48		pha		            PHA
.3a00ec	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a00ef	5b		tcd		            TCD
.3a00f0	68		pla		            PLA
.3a00f1	28		plp		            PLP
.3a00f2					locals
>0001					l_character     .byte ?                 ; The character returned by the input stream
>0002					l_state         .byte ?                 ; Current state of the input parser
>0003					l_code          .byte ?                 ; Code number for any escaped input sequence
>0004					l_modifiers     .byte ?                 ; Modifier bit field for any escaped input sequence
.3a00f2	c2 20		rep #$20	            REP #$20
.3a00f4	3b		tsc		            TSC
.3a00f5	38		sec		            SEC
.3a00f6	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.3a00f9	1b		tcs		            TCS
.3a00fa	e2 20		sep #$20	            SEP #$20
.3a00fc	a9 00		lda #$00	get_reset       LDA #0                  ; Initialize state, code, and modifiers
.3a00fe	83 02		sta $02,s	                STA l_state
.3a0100	83 03		sta $03,s	                STA l_code
.3a0102	83 04		sta $04,s	                STA l_modifiers
.3a0104					loop
.3a0104	20 14 00	jsr $3a0014	            JSR GETKEY
.3a0107	c9 00		cmp #$00	                CMP #0                  ; Is it 0?
.3a0109	f0 f9		beq $3a0104	                BEQ loop                ; Yes: keep waiting
.3a010b	83 01		sta $01,s	                STA l_character         ; Save the character
.3a010d	a3 02		lda $02,s	                LDA l_state             ; What is the current state?
.3a010f	d0 35		bne $3a0146	                BNE chk_st_esc
.3a0111	a3 01		lda $01,s	                LDA l_character         ; Get the character back
.3a0113	c9 08		cmp #$08	                CMP #CHAR_BS            ; Is it a backspace?
.3a0115	d0 0a		bne $3a0121	                BNE not_bs
.3a0117	20 18 00	jsr $3a0018	            JSR PRINTC
.3a011a	a9 50		lda #$50	                LDA #'P'
.3a011c	20 c7 00	jsr $3a00c7	            JSR SEND_ANSI
.3a011f	80 e3		bra $3a0104	                BRA loop                ; And keep waiting for a keypress
.3a0121	c9 0d		cmp #$0d	not_bs          CMP #CHAR_CR            ; Is it a carriage return?
.3a0123	f0 0a		beq $3a012f	                BEQ send                ; Yes: print and return it
.3a0125	c9 1b		cmp #$1b	                CMP #CHAR_ESC           ; Is it ESC?
.3a0127	d0 06		bne $3a012f	                BNE send                ; No: just print it out
.3a0129	a9 01		lda #$01	                LDA #GK_ST_ESC          ; Yes: move to the ESC state
.3a012b	83 02		sta $02,s	                STA l_state
.3a012d	80 d5		bra $3a0104	                BRA loop                ; And get the next character in the sequence
.3a012f					send
.3a012f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0132	a3 01		lda $01,s	done            LDA l_character         ; Save the character so we can return it
.3a0134	85 0c		sta $080c	                STA SCRATCH
.3a0136	c2 20		rep #$20	            REP #$20
.3a0138	3b		tsc		            TSC
.3a0139	18		clc		            CLC
.3a013a	69 04 00	adc #$0004	            ADC #SIZE(locals)
.3a013d	1b		tcs		            TCS
.3a013e	e2 20		sep #$20	            SEP #$20
.3a0140	a5 0c		lda $080c	                LDA SCRATCH             ; Restore the character we're returning
.3a0142	28		plp		                PLP
.3a0143	2b		pld		                PLD
.3a0144	ab		plb		                PLB
.3a0145	60		rts		            RTS
.3a0146	c9 01		cmp #$01	chk_st_esc      CMP #GK_ST_ESC          ; Are we in the ESC state?
.3a0148	d0 10		bne $3a015a	                BNE chk_st_csi          ; No: check to see if we're in CSI state
.3a014a	a3 01		lda $01,s	                LDA l_character         ; Get the character
.3a014c	c9 5b		cmp #$5b	                CMP #'['                ; Is it "["?
.3a014e	f0 03		beq $3a0153	                BEQ go_st_csi           ; Yes: go to the CSI state
.3a0150	82 a9 ff	brl $3a00fc	                BRL get_reset           ; Reset the state machine and keep reading characters
.3a0153	a9 02		lda #$02	go_st_csi       LDA #GK_ST_CSI          ; Yes: move to the CSI state
.3a0155	83 02		sta $02,s	                STA l_state
.3a0157	82 aa ff	brl $3a0104	                BRL loop
.3a015a	c9 02		cmp #$02	chk_st_csi      CMP #GK_ST_CSI          ; Are we in the CSI state?
.3a015c	d0 29		bne $3a0187	                BNE chk_st_code         ; No: check to see if we're in the code state
.3a015e	a3 01		lda $01,s	                LDA l_character         ; Check the character
.3a0160	c9 41		cmp #$41	                CMP #'A'                ; Is it in 'A'..'D'?
.3a0162	90 0c		bcc $3a0170	                BLT not_letter
.3a0164	c9 45		cmp #$45	                CMP #'D'+1
.3a0166	b0 08		bcs $3a0170	                BGE not_letter
.3a0168	a3 01		lda $01,s	                LDA l_character         ; Yes: it's a cursor key, send the sequence to the screen
.3a016a	20 c7 00	jsr $3a00c7	            JSR SEND_ANSI
.3a016d	82 8c ff	brl $3a00fc	                BRL get_reset           ; Reset the state machine and keep reading characters
.3a0170	c9 30		cmp #$30	not_letter      CMP #'0'                ; Is it in range '0'..'9'?
.3a0172	90 10		bcc $3a0184	                BLT not_csi_digit
.3a0174	c9 3a		cmp #$3a	                CMP #'9'+1
.3a0176	b0 0c		bcs $3a0184	                BGE not_csi_digit       ; No: handle it being invalid
.3a0178	38		sec		                SEC                     ; Yes: convert to a value
.3a0179	e9 30		sbc #$30	                SBC #'0'
.3a017b	83 03		sta $03,s	                STA l_code              ; And save it to the code variable
.3a017d	a9 03		lda #$03	                LDA #GK_ST_CODE         ; Move to the CODE state
.3a017f	83 02		sta $02,s	                STA l_state
.3a0181	82 80 ff	brl $3a0104	                BRL loop
.3a0184	82 75 ff	brl $3a00fc	not_csi_digit   BRL get_reset           ; Bad sequence: reset and keep reading characters
.3a0187	c9 03		cmp #$03	chk_st_code     CMP #GK_ST_CODE         ; Is it the CODE state?
.3a0189	d0 41		bne $3a01cc	                BNE chk_st_mods         ; No: check to see if it's MODIFIERS
.3a018b	a3 01		lda $01,s	                LDA l_character         ; Check the character
.3a018d	c9 30		cmp #$30	                CMP #'0'                ; Is it in the range '0'..'9'
.3a018f	90 29		bcc $3a01ba	                BLT not_digits_2
.3a0191	c9 3a		cmp #$3a	                CMP #'9'+1
.3a0193	b0 25		bcs $3a01ba	                BGE not_digits_2
.3a0195	a3 03		lda $03,s	                LDA l_code              ; Multiply l_code by 2
.3a0197	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3a019b	a9 00		lda #$00	                LDA #0
.3a019d	8f 01 01 00	sta $000101	                STA @l UNSIGNED_MULT_A_HI
.3a01a1	8f 03 01 00	sta $000103	                STA @l UNSIGNED_MULT_B_HI
.3a01a5	a9 0a		lda #$0a	                LDA #10
.3a01a7	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3a01ab	a3 01		lda $01,s	                LDA l_character         ; Convert the digit to a number
.3a01ad	38		sec		                SEC
.3a01ae	e9 30		sbc #$30	                SBC #'0'
.3a01b0	18		clc		                CLC                     ; And add to l_code
.3a01b1	6f 04 01 00	adc $000104	                ADC @l UNSIGNED_MULT_AL_LO
.3a01b5	83 03		sta $03,s	                STA l_code
.3a01b7	82 4a ff	brl $3a0104	                BRL loop                ; And keep processing the sequence
.3a01ba	c9 3b		cmp #$3b	not_digits_2    CMP #';'                ; Is it the semicolon?
.3a01bc	d0 07		bne $3a01c5	                BNE not_semi
.3a01be	a9 04		lda #$04	                LDA #GK_ST_MODS         ; Yes: Move to the MODIFIERS state
.3a01c0	83 02		sta $02,s	                STA l_state
.3a01c2	82 3f ff	brl $3a0104	                BRL loop
.3a01c5	c9 7e		cmp #$7e	not_semi        CMP #'~'                ; No: Is it the tilda?
.3a01c7	f0 40		beq $3a0209	                BEQ end_sequence        ; Yes: we've gotten the end of the sequence
.3a01c9	82 30 ff	brl $3a00fc	                BRL get_reset           ; No: we've got a bad sequence... for now just reset and keep looping
.3a01cc	c9 04		cmp #$04	chk_st_mods     CMP #GK_ST_MODS         ; Are we in the MODIFIERS state?
.3a01ce	f0 03		beq $3a01d3	                BEQ do_mods
.3a01d0	82 5f ff	brl $3a0132	                BRL done                ; No: we're done
.3a01d3	a3 01		lda $01,s	do_mods         LDA l_character         ; Check the character
.3a01d5	c9 30		cmp #$30	                CMP #'0'                ; Is it in the range '0'..'9'
.3a01d7	90 29		bcc $3a0202	                BLT not_digits_3
.3a01d9	c9 3a		cmp #$3a	                CMP #'9'+1
.3a01db	b0 25		bcs $3a0202	                BGE not_digits_3
.3a01dd	a3 04		lda $04,s	                LDA l_modifiers         ; Multiply l_modifiers by 2
.3a01df	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3a01e3	a9 00		lda #$00	                LDA #0
.3a01e5	8f 01 01 00	sta $000101	                STA @l UNSIGNED_MULT_A_HI
.3a01e9	8f 03 01 00	sta $000103	                STA @l UNSIGNED_MULT_B_HI
.3a01ed	a9 0a		lda #$0a	                LDA #10
.3a01ef	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3a01f3	a3 01		lda $01,s	                LDA l_character         ; Convert the digit to a number
.3a01f5	38		sec		                SEC
.3a01f6	e9 30		sbc #$30	                SBC #'0'
.3a01f8	18		clc		                CLC                     ; And add to l_modifiers
.3a01f9	6f 04 01 00	adc $000104	                ADC @l UNSIGNED_MULT_AL_LO
.3a01fd	83 04		sta $04,s	                STA l_modifiers
.3a01ff	82 02 ff	brl $3a0104	                BRL loop                ; And keep processing the sequence
.3a0202	c9 7e		cmp #$7e	not_digits_3    CMP #'~'                ; No: Is it the tilda?
.3a0204	f0 03		beq $3a0209	                BEQ end_sequence        ; Yes: we've gotten the end of the sequence
.3a0206	82 f3 fe	brl $3a00fc	                BRL get_reset           ; No: we've got a bad sequence... for now just reset and keep looping
.3a0209	a3 03		lda $03,s	end_sequence    LDA l_code              ; Get the code
.3a020b	c9 02		cmp #$02	                CMP #ANSI_IN_INS        ; Is it INSERT?
.3a020d	f0 0b		beq $3a021a	                BEQ do_ins              ; Yes: process the insert
.3a020f	c9 03		cmp #$03	                CMP #ANSI_IN_DEL        ; Is it DELETE?
.3a0211	f0 0b		beq $3a021e	                BEQ do_del              ; Yes: process the delete
.3a0213	c9 18		cmp #$18	                CMP #ANSI_IN_F12        ; Is it F12?
.3a0215	f0 0f		beq $3a0226	                BEQ do_f12              ; Yes: process the F12 key
.3a0217	82 e2 fe	brl $3a00fc	                BRL get_reset           ; Code is not one we handle, just return
.3a021a	a9 40		lda #$40	do_ins          LDA #'@'                ; Send the ANSI ICH command
.3a021c	80 02		bra $3a0220	                BRA snd_ansi
.3a021e	a9 50		lda #$50	do_del          LDA #'P'                ; Send the ANSI DCH command
.3a0220					snd_ansi
.3a0220	20 c7 00	jsr $3a00c7	            JSR SEND_ANSI
.3a0223	82 d6 fe	brl $3a00fc	                BRL get_reset           ; Reset and keep getting characters
.3a0226	a5 d2		lda $08d2	do_f12          LDA STATE               ; Check the state
.3a0228	d0 10		bne $3a023a	                BNE skip_f12            ; If we're running, ignore the F12
.3a022a	a3 04		lda $04,s	                LDA l_modifiers         ; Check to make sure it's CTRL-F12
.3a022c	c9 08		cmp #$08	                CMP #ANSI_IN_CTRL       ; Modifier flag for CTRL
.3a022e	d0 0a		bne $3a023a	                BNE skip_f12
.3a0230	a9 1b		lda #$1b	                LDA #CHAR_ESC           ; Send ESC_ (APC) to show the credits
.3a0232	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0235	a9 5f		lda #$5f	                LDA #'_'
.3a0237	20 18 00	jsr $3a0018	            JSR PRINTC
.3a023a	82 bf fe	brl $3a00fc	skip_f12        BRL get_reset           ; And reset the state machine

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/screen.s

.3a023d					ENSURETEXT
.3a023d	08		php		            PHP
.3a023e	e2 20		sep #$20	            SEP #$20
.3a0240	af 00 00 af	lda $af0000	            LDA @l MASTER_CTRL_REG_L            ; Get the current display mode
.3a0244	89 3c		bit #$3c	            BIT #Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_TileMap_En | Mstr_Ctrl_Sprite_En
.3a0246	f0 08		beq $3a0250	            BEQ textonly                        ; If not, make sure text is enabled
.3a0248					overlay
.3a0248	09 03		ora #$03	            ORA #Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay
.3a024a	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.3a024e	80 0c		bra $3a025c	            BRA done
.3a0250					textonly
.3a0250	09 01		ora #$01	            ORA #Mstr_Ctrl_Text_Mode_En
.3a0252	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.3a0256	a9 00		lda #$00	            LDA #CHAN_CONSOLE                   ; Make sure we're writing to the main screen
.3a0258	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.3a025c	28		plp		done        PLP
.3a025d	60		rts		            RTS
.3a025e					ISHOWCURSOR
.3a025e	08		php		            PHP
.3a025f	e2 20		sep #$20	            SEP #$20
.3a0261	c9 00		cmp #$00	            CMP #0
.3a0263	f0 08		beq $3a026d	            BEQ hide
.3a0265	af 10 00 af	lda $af0010	show        LDA @lVKY_TXT_CURSOR_CTRL_REG
.3a0269	09 01		ora #$01	            ORA #Vky_Cursor_Enable
.3a026b	80 06		bra $3a0273	            BRA setit
.3a026d	af 10 00 af	lda $af0010	hide        LDA @lVKY_TXT_CURSOR_CTRL_REG
.3a0271	29 fe		and #$fe	            AND #~Vky_Cursor_Enable
.3a0273	8f 10 00 af	sta $af0010	setit       STA @lVKY_TXT_CURSOR_CTRL_REG
.3a0277	28		plp		            PLP
.3a0278	60		rts		            RTS
.3a0279					ICURSORXY
.3a0279	08		php		            PHP
.3a027a	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.3a027e	28		plp		            PLP
.3a027f	60		rts		            RTS
.3a0280					ICLSCREEN
.3a0280	48		pha		            PHA
.3a0281	da		phx		            PHX
.3a0282	5a		phy		            PHY
.3a0283	0b		phd		            PHD
.3a0284	08		php		            PHP
.3a0285	e2 20		sep #$20	            SEP #$20
.3a0287	c2 10		rep #$10	            REP #$10
.3a0289	a2 00 00	ldx #$0000	            LDX #0
.3a028c	a9 20		lda #$20	loop        LDA #$20
.3a028e	9f 00 a0 af	sta $afa000,x	            STA @lCS_TEXT_MEM_PTR,X     ; Write a space in the text cell
.3a0292	af 1e 00 00	lda $00001e	            LDA @lCURCOLOR
.3a0296	9f 00 c0 af	sta $afc000,x	            STA @lCS_COLOR_MEM_PTR,X    ; Set the color to green on black
.3a029a	e8		inx		            INX                         ; Move to the next character cell
.3a029b	e0 00 20	cpx #$2000	            CPX #$2000
.3a029e	d0 ec		bne $3a028c	            BNE loop
.3a02a0	08		php		            PHP
.3a02a1	c2 20		rep #$20	            REP #$20
.3a02a3	48		pha		            PHA
.3a02a4	a9 00 00	lda #$0000	            LDA #0
.3a02a7	5b		tcd		            TCD
.3a02a8	68		pla		            PLA
.3a02a9	28		plp		            PLP
.3a02aa	a2 00 00	ldx #$0000	            LDX #0                      ; Set cursor to upper-left corner
.3a02ad	a0 00 00	ldy #$0000	            LDY #0
.3a02b0	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.3a02b4	28		plp		            PLP
.3a02b5	2b		pld		            PLD
.3a02b6	7a		ply		            PLY
.3a02b7	fa		plx		            PLX
.3a02b8	68		pla		            PLA
.3a02b9	60		rts		            RTS
.3a02ba					ISCRCPYLINE
.3a02ba	da		phx		            PHX
.3a02bb	5a		phy		            PHY
.3a02bc	0b		phd		            PHD
.3a02bd	08		php		            PHP
.3a02be	08		php		            PHP
.3a02bf	c2 20		rep #$20	            REP #$20
.3a02c1	48		pha		            PHA
.3a02c2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a02c5	5b		tcd		            TCD
.3a02c6	68		pla		            PLA
.3a02c7	28		plp		            PLP
.3a02c8	c2 30		rep #$30	            REP #$30
.3a02ca	af 0c 00 00	lda $00000c	            LDA @l SCREENBEGIN      ; Set INDEX to the first byte of the text screen
.3a02ce	85 08		sta $0808	            STA INDEX
.3a02d0	e2 20		sep #$20	            SEP #$20
.3a02d2	af 0e 00 00	lda $00000e	            LDA @l SCREENBEGIN+2
.3a02d6	c2 20		rep #$20	            REP #$20
.3a02d8	29 ff 00	and #$00ff	            AND #$00FF
.3a02db	85 0a		sta $080a	            STA INDEX+2
.3a02dd	af 11 00 00	lda $000011	            LDA @l COLS_PER_LINE    ; Calculate the offset to the current line
.3a02e1	8f 08 01 00	sta $000108	            STA @l M1_OPERAND_A
.3a02e5	af 1c 00 00	lda $00001c	            LDA @l CURSORY
.3a02e9	3a		dec a		            DEC A
.3a02ea	8f 0a 01 00	sta $00010a	            STA @l M1_OPERAND_B
.3a02ee	18		clc		            CLC                     ; And add it to INDEX
.3a02ef	a5 08		lda $0808	            LDA INDEX
.3a02f1	6f 0c 01 00	adc $00010c	            ADC @l M1_RESULT
.3a02f5	85 08		sta $0808	            STA INDEX
.3a02f7	a5 0a		lda $080a	            LDA INDEX+2
.3a02f9	69 00 00	adc #$0000	            ADC #0
.3a02fc	85 0a		sta $080a	            STA INDEX+2
.3a02fe	e2 20		sep #$20	            SEP #$20
.3a0300	af 0f 00 00	lda $00000f	            LDA @l COLS_VISIBLE
.3a0304	85 8f		sta $088f	            STA MCOUNT
.3a0306	a0 00 00	ldy #$0000	            LDY #0
.3a0309	a2 00 00	ldx #$0000	            LDX #0
.3a030c	b7 08		lda [$0808],y	copy_loop   LDA [INDEX],Y           ; Copy a byte from the screen to the input buffer
.3a030e	9f 00 4f 00	sta $004f00,x	            STA @l INPUTBUF,X
.3a0312	e8		inx		            INX
.3a0313	c8		iny		            INY
.3a0314	c4 8f		cpy $088f	            CPY MCOUNT
.3a0316	d0 f4		bne $3a030c	            BNE copy_loop
.3a0318	af 0f 00 00	lda $00000f	            LDA @l COLS_VISIBLE     ; Starting from the end of the line...
.3a031c	3a		dec a		            DEC A
.3a031d	aa		tax		            TAX
.3a031e	bf 00 4f 00	lda $004f00,x	trim_loop   LDA @l INPUTBUF,X       ; Replace spaces at the end with NULLs
.3a0322	c9 20		cmp #$20	            CMP #CHAR_SP
.3a0324	d0 09		bne $3a032f	            BNE done
.3a0326	a9 00		lda #$00	            LDA #0
.3a0328	9f 00 4f 00	sta $004f00,x	            STA @l INPUTBUF,X
.3a032c	ca		dex		            DEX
.3a032d	10 ef		bpl $3a031e	            BPL trim_loop
.3a032f	28		plp		done        PLP
.3a0330	2b		pld		            PLD
.3a0331	7a		ply		            PLY
.3a0332	fa		plx		            PLX
.3a0333	60		rts		            RTS

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/gabe_defs.s

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04					GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08					GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01					GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02					GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10					GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20					GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40					GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80					GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04					GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10					GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a				GABE_SUBVERSION_LO  = $AFE88A
=$afe88b				GABE_SUBVERSION_HI  = $AFE88B
=$afe88c				GABE_VERSION_LO     = $AFE88C
=$afe88d				GABE_VERSION_HI     = $AFE88D
=$afe88e				GABE_MODEL_LO       = $AFE88E
=$afe88f				GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\C256/io_c256.s

=32					BORDER_WIDTH = 32               ; The width of the border (when it is on)
=72					TEXT_COLS_WB = 72               ; Number of columns of text with the border enabled
=52					TEXT_ROWS_WB = 52               ; Number of rows of text with the border enabled
=80					TEXT_COLS_WOB = 80              ; Number of columns of text with no border enabled
=60					TEXT_ROWS_WOB = 60              ; Number of rows of text with no border enabled
.3a0334					INITIO
.3a0334	e2 20		sep #$20	            SEP #$20
.3a0336	20 69 03	jsr $3a0369	            JSR INITRNG
.3a0339	a2 00 00	ldx #$0000	            LDX #0              ; Clear all the sprite control shadow registers
.3a033c	a9 00		lda #$00	            LDA #0
.3a033e	9f 18 f0 3a	sta $3af018,x	sp_loop     STA GS_SP_CONTROL,X
.3a0342	e8		inx		            INX
.3a0343	e0 40 00	cpx #$0040	            CPX #SP_MAX
.3a0346	d0 f6		bne $3a033e	            BNE sp_loop
.3a0348	a9 80		lda #$80	            LDA #DEV_SCREEN
.3a034a	8f b4 08 00	sta $0008b4	            STA @lBCONSOLE
.3a034e	e2 20		sep #$20	            SEP #$20
.3a0350	a9 00		lda #$00	            LDA #0                  ; Clear the lock key flags
.3a0352	8f 89 0f 00	sta $000f89	            STA @lKEYBOARD_LOCKS
.3a0356	a9 00		lda #$00	            LDA #0
.3a0358	8f 00 02 af	sta $af0200	            STA @l TL0_CONTROL_REG
.3a035c	8f 0c 02 af	sta $af020c	            STA @l TL1_CONTROL_REG
.3a0360	8f 18 02 af	sta $af0218	            STA @l TL2_CONTROL_REG
.3a0364	8f 24 02 af	sta $af0224	            STA @l TL3_CONTROL_REG
.3a0368					done
.3a0368	60		rts		            RTS
.3a0369					INITRNG
.3a0369	08		php		            PHP
.3a036a	e2 20		sep #$20	            SEP #$20
.3a036c	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Pause updates to the clock registers
.3a0370	09 08		ora #$08	            ORA #%00001000
.3a0372	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.3a0376	af 00 08 af	lda $af0800	            LDA @l RTC_SEC          ; Set the random number generator seed
.3a037a	8f 84 e8 af	sta $afe884	            STA @l GABE_RNG_SEED_LO
.3a037e	af 02 08 af	lda $af0802	            LDA @l RTC_MIN
.3a0382	8f 85 e8 af	sta $afe885	            STA @l GABE_RNG_SEED_HI
.3a0386	a9 03		lda #$03	            LDA #GABE_RNG_CTRL_DV | GABE_RNG_CTRL_EN
.3a0388	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL    ; Load the seed into the RNG
.3a038c	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Re-enable updates to the clock registers
.3a0390	29 f7		and #$f7	            AND #%11110111
.3a0392	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.3a0396	ea		nop		            NOP                     ; Give the RNG some time... not sure if needed, really
.3a0397	ea		nop		            NOP
.3a0398	ea		nop		            NOP
.3a0399	a9 01		lda #$01	            LDA #GABE_RNG_CTRL_EN   ; Turn on the random number genertator
.3a039b	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL
.3a039f	28		plp		            PLP
.3a03a0	60		rts		            RTS
.3a03a1					SCREEN_PUTC
.3a03a1	08		php		            PHP
.3a03a2	e2 20		sep #$20	            SEP #$20
.3a03a4	48		pha		            PHA
.3a03a5	48		pha		            PHA
.3a03a6	a9 00		lda #$00	            LDA #CHAN_CONSOLE       ; Switch to the console device
.3a03a8	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.3a03ac	68		pla		            PLA
.3a03ad	22 18 10 00	jsl $001018	            JSL FK_PUTC
.3a03b1	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.3a03b5	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.3a03b7	d0 f8		bne $3a03b1	            BNE loop                ; Yes: wait until it's released
.3a03b9	68		pla		            PLA
.3a03ba	28		plp		            PLP
.3a03bb	60		rts		            RTS
.3a03bc					UART_PUTC
.3a03bc	08		php		            PHP
.3a03bd	e2 20		sep #$20	            SEP #$20
.3a03bf	48		pha		            PHA
.3a03c0	48		pha		            PHA
.3a03c1	a9 01		lda #$01	            LDA #CHAN_COM1          ; Switch to COM1
.3a03c3	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.3a03c7	68		pla		            PLA
.3a03c8	22 18 10 00	jsl $001018	            JSL FK_PUTC
.3a03cc	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.3a03d0	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.3a03d2	d0 f8		bne $3a03cc	            BNE loop                ; Yes: wait until it's released
.3a03d4	68		pla		            PLA
.3a03d5	28		plp		            PLP
.3a03d6	60		rts		            RTS
.3a03d7					PRINTCR
.3a03d7	08		php		            PHP
.3a03d8	c2 20		rep #$20	            REP #$20
.3a03da	48		pha		            PHA
.3a03db	e2 20		sep #$20	            SEP #$20
.3a03dd	a9 0d		lda #$0d	            LDA #CHAR_CR
.3a03df	20 18 00	jsr $3a0018	            JSR PRINTC
.3a03e2	c2 20		rep #$20	            REP #$20
.3a03e4	68		pla		            PLA
.3a03e5	28		plp		            PLP
.3a03e6	60		rts		            RTS
.3a03e7					PRINTH
.3a03e7	08		php		            PHP
.3a03e8	22 78 10 00	jsl $001078	            JSL FK_IPRINTH
.3a03ec	28		plp		            PLP
.3a03ed	60		rts		            RTS

;******  Return to file: src\bios.s

=10					LINES_PER_PAGE = 10     ; The number of lines to print on a page before pausing
=$80					DEV_SCREEN = $80        ; Use the screen and keyboard for the console device
=$40					DEV_UART = $40          ; Use UART for console device
=$20					DEV_BUFFER = $20        ; Use the current text memory buffer for output or input
>08b4					BCONSOLE    .byte ?     ; Device for BASIC console
>08b5					SAVE_A      .byte ?     ; Save spot for the A register
>08b6					LINECOUNT   .byte ?     ; Counter for new lines to support pagination
.3a03ee					PAGINATE
.3a03ee	08		php		            PHP
.3a03ef	0b		phd		            PHD
.3a03f0	08		php		            PHP
.3a03f1	c2 20		rep #$20	            REP #$20
.3a03f3	48		pha		            PHA
.3a03f4	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a03f7	5b		tcd		            TCD
.3a03f8	68		pla		            PLA
.3a03f9	28		plp		            PLP
.3a03fa	e2 20		sep #$20	            SEP #$20
.3a03fc	a5 b6		lda $08b6	            LDA LINECOUNT           ; Check the line count
.3a03fe	1a		inc a		            INC A
.3a03ff	85 b6		sta $08b6	            STA LINECOUNT
.3a0401	cf 13 00 00	cmp $000013	            CMP @l LINES_VISIBLE
.3a0405	90 05		bcc $3a040c	            BLT done                ; If < limit, just return
.3a0407	20 14 00	jsr $3a0014	            JSR GETKEY
.3a040a	64 b6		stz $08b6	            STZ LINECOUNT           ; And reset the line count
.3a040c	2b		pld		done        PLD
.3a040d	28		plp		            PLP
.3a040e	60		rts		            RTS
.3a040f					IPRINTC
.3a040f	da		phx		            PHX
.3a0410	5a		phy		            PHY
.3a0411	0b		phd		            PHD
.3a0412	08		php		            PHP
.3a0413	08		php		            PHP
.3a0414	c2 20		rep #$20	            REP #$20
.3a0416	48		pha		            PHA
.3a0417	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a041a	5b		tcd		            TCD
.3a041b	68		pla		            PLA
.3a041c	28		plp		            PLP
.3a041d	e2 20		sep #$20	            SEP #$20
.3a041f	c2 10		rep #$10	            REP #$10
.3a0421	8f b5 08 00	sta $0008b5	            STA @lSAVE_A
.3a0425	af b4 08 00	lda $0008b4	chk_out     LDA @lBCONSOLE      ; Check to see if we should send to an output buffer
.3a0429	29 20		and #$20	            AND #DEV_BUFFER
.3a042b	f0 07		beq $3a0434	            BEQ check_scrn      ; No... move on to the hardware screen
.3a042d	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a0431	20 28 00	jsr $3a0028	            JSR OBUFF_PUTC
.3a0434	af b4 08 00	lda $0008b4	check_scrn  LDA @lBCONSOLE
.3a0438	29 80		and #$80	            AND #DEV_SCREEN     ; Check to see if the screen is selected
.3a043a	f0 07		beq $3a0443	            BEQ send_uart
.3a043c	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a0440	20 a1 03	jsr $3a03a1	            JSR SCREEN_PUTC
.3a0443	af b4 08 00	lda $0008b4	send_uart   LDA @lBCONSOLE
.3a0447	29 40		and #$40	            AND #DEV_UART       ; Check to see if the UART is active
.3a0449	f0 14		beq $3a045f	            BEQ done
.3a044b	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a044f	20 bc 03	jsr $3a03bc	            JSR UART_PUTC
.3a0452	af b5 08 00	lda $0008b5	            LDA @lSAVE_A        ; If sending a CR to the serial port
.3a0456	c9 0d		cmp #$0d	            CMP #CHAR_CR
.3a0458	d0 05		bne $3a045f	            BNE done
.3a045a	a9 0a		lda #$0a	            LDA #CHAR_LF        ; Send a linefeed after
.3a045c	20 bc 03	jsr $3a03bc	            JSR UART_PUTC
.3a045f	28		plp		done        PLP
.3a0460	2b		pld		            PLD
.3a0461	7a		ply		            PLY
.3a0462	fa		plx		            PLX
.3a0463	60		rts		            RTS
.3a0464					PRINTS
.3a0464	08		php		            PHP
.3a0465	e2 20		sep #$20	            SEP #$20
.3a0467	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.3a046a	f0 06		beq $3a0472	            BEQ done
.3a046c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a046f	e8		inx		            INX
.3a0470	80 f5		bra $3a0467	            BRA loop
.3a0472	28		plp		done        PLP
.3a0473	60		rts		            RTS
.3a0474					PRHEXW
.3a0474	08		php		            PHP
.3a0475	c2 20		rep #$20	            REP #$20
.3a0477	48		pha		            PHA
.3a0478	48		pha		            PHA
.3a0479	4a		lsr a		            LSR A
.3a047a	4a		lsr a		            LSR A
.3a047b	4a		lsr a		            LSR A
.3a047c	4a		lsr a		            LSR A
.3a047d	4a		lsr a		            LSR A
.3a047e	4a		lsr a		            LSR A
.3a047f	4a		lsr a		            LSR A
.3a0480	4a		lsr a		            LSR A
.3a0481	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a0484	68		pla		            PLA
.3a0485	29 ff 00	and #$00ff	            AND #$00FF
.3a0488	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a048b	68		pla		            PLA
.3a048c	28		plp		            PLP
.3a048d	60		rts		            RTS
.3a048e					PRHEXB
.3a048e	08		php		            PHP
.3a048f	c2 20		rep #$20	            REP #$20
.3a0491	48		pha		            PHA
.3a0492	e2 20		sep #$20	            SEP #$20
.3a0494	48		pha		            PHA
.3a0495	4a		lsr a		            LSR A
.3a0496	4a		lsr a		            LSR A
.3a0497	4a		lsr a		            LSR A
.3a0498	4a		lsr a		            LSR A
.3a0499	20 a5 04	jsr $3a04a5	            JSR PRHEXN
.3a049c	68		pla		            PLA
.3a049d	20 a5 04	jsr $3a04a5	            JSR PRHEXN
.3a04a0	c2 20		rep #$20	            REP #$20
.3a04a2	68		pla		            PLA
.3a04a3	28		plp		            PLP
.3a04a4	60		rts		            RTS
.3a04a5					PRHEXN
.3a04a5	08		php		            PHP
.3a04a6	c2 30		rep #$30	            REP #$30
.3a04a8	da		phx		            PHX
.3a04a9	29 0f 00	and #$000f	            AND #$000F
.3a04ac	aa		tax		            TAX
.3a04ad	bf 00 d0 3a	lda $3ad000,x	            LDA @lHEXDIGITS,X
.3a04b1	20 18 00	jsr $3a0018	            JSR PRINTC
.3a04b4	fa		plx		            PLX
.3a04b5	28		plp		            PLP
.3a04b6	60		rts		            RTS
>3ad000	30 31 32 33 34 35 36 37		HEXDIGITS   .text "0123456789ABCDEF"
>3ad008	38 39 41 42 43 44 45 46

;******  Return to file: src\basic816.s


;******  Processing file: src\utilities.s

.3a04b7					PRTRACE
.3a04b7	08		php		            PHP
.3a04b8	c2 30		rep #$30	            REP #$30
.3a04ba	48		pha		            PHA
.3a04bb	da		phx		            PHX
.3a04bc	5a		phy		            PHY
.3a04bd	8b		phb		            PHB
.3a04be	0b		phd		            PHD
.3a04bf	c2 30		rep #$30	            REP #$30
.3a04c1	a3 0b		lda $0b,s	            LDA 11,S        ; Get the return address
.3a04c3	18		clc		calc_addr   CLC
.3a04c4	69 03 00	adc #$0003	            ADC #3          ; Add 3 to skip over the following branch
.3a04c7	aa		tax		            TAX
.3a04c8	e2 20		sep #$20	            SEP #$20
.3a04ca	a9 3a		lda #$3a	            LDA #`PRTRACE
.3a04cc	48		pha		            PHA
.3a04cd	ab		plb		            PLB
.3a04ce	bd 00 00	lda $0000,x	pr_loop     LDA #0,B,X
.3a04d1	f0 06		beq $3a04d9	            BEQ done
.3a04d3	20 a1 03	jsr $3a03a1	            JSR SCREEN_PUTC
.3a04d6	e8		inx		            INX
.3a04d7	80 f5		bra $3a04ce	            BRA pr_loop
.3a04d9					done
.3a04d9	c2 30		rep #$30	            REP #$30
.3a04db	2b		pld		            PLD
.3a04dc	ab		plb		            PLB
.3a04dd	7a		ply		            PLY
.3a04de	fa		plx		            PLX
.3a04df	68		pla		            PLA
.3a04e0	28		plp		            PLP
.3a04e1	60		rts		            RTS
.3a04e2					ISALPHA
.3a04e2	08		php		            PHP
.3a04e3	e2 20		sep #$20	            SEP #$20
.3a04e5	c9 5b		cmp #$5b	            CMP #'Z'+1
.3a04e7	b0 04		bcs $3a04ed	            BGE not_upper
.3a04e9	c9 41		cmp #$41	            CMP #'A'
.3a04eb	b0 0b		bcs $3a04f8	            BGE is_alpha
.3a04ed	c9 7b		cmp #$7b	not_upper   CMP #'z'+1
.3a04ef	b0 04		bcs $3a04f5	            BGE not_alpha
.3a04f1	c9 61		cmp #$61	            CMP #'a'
.3a04f3	b0 03		bcs $3a04f8	            BGE is_alpha
.3a04f5					not_alpha
.3a04f5	28		plp		            PLP
.3a04f6	18		clc		            CLC
.3a04f7	60		rts		            RTS
.3a04f8					is_alpha
.3a04f8	28		plp		            PLP
.3a04f9	38		sec		            SEC
.3a04fa	60		rts		            RTS
.3a04fb					ISNUMERAL
.3a04fb	08		php		            PHP
.3a04fc	e2 20		sep #$20	            SEP #$20
.3a04fe	c9 3a		cmp #$3a	            CMP #'9'+1
.3a0500	b0 04		bcs $3a0506	            BGE ret_false
.3a0502	c9 30		cmp #$30	            CMP #'0'
.3a0504	b0 03		bcs $3a0509	            BGE ret_true
.3a0506	28		plp		ret_false   PLP
.3a0507	18		clc		            CLC
.3a0508	60		rts		            RTS
.3a0509	28		plp		ret_true    PLP
.3a050a	38		sec		            SEC
.3a050b	60		rts		            RTS
.3a050c					ISHEX
.3a050c	08		php		            PHP
.3a050d	e2 20		sep #$20	            SEP #$20
.3a050f	c9 3a		cmp #$3a	            CMP #'9'+1
.3a0511	b0 04		bcs $3a0517	            BGE chk_lca2f
.3a0513	c9 30		cmp #$30	            CMP #'0'
.3a0515	b0 13		bcs $3a052a	            BGE ret_true
.3a0517	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.3a0519	b0 04		bcs $3a051f	            BGE chk_uca2f
.3a051b	c9 61		cmp #$61	            CMP #'a'
.3a051d	b0 0b		bcs $3a052a	            BGE ret_true
.3a051f	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.3a0521	b0 04		bcs $3a0527	            BGE ret_false
.3a0523	c9 41		cmp #$41	            CMP #'A'
.3a0525	b0 03		bcs $3a052a	            BGE ret_true
.3a0527	28		plp		ret_false   PLP
.3a0528	18		clc		            CLC
.3a0529	60		rts		            RTS
.3a052a	28		plp		ret_true    PLP
.3a052b	38		sec		            SEC
.3a052c	60		rts		            RTS
.3a052d					HEX2BIN
.3a052d	08		php		            PHP
.3a052e	e2 20		sep #$20	            SEP #$20
.3a0530	c9 3a		cmp #$3a	            CMP #'9'+1          ; Check to see if '0'..'9'
.3a0532	b0 04		bcs $3a0538	            BGE chk_lca2f
.3a0534	c9 30		cmp #$30	            CMP #'0'
.3a0536	b0 12		bcs $3a054a	            BGE conv_09         ; Yes: convert it
.3a0538	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.3a053a	b0 04		bcs $3a0540	            BGE chk_uca2f
.3a053c	c9 61		cmp #$61	            CMP #'a'
.3a053e	b0 0f		bcs $3a054f	            BGE conv_lcaf
.3a0540	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.3a0542	b0 04		bcs $3a0548	            BGE done
.3a0544	c9 41		cmp #$41	            CMP #'A'
.3a0546	b0 09		bcs $3a0551	            BGE conv_ucaf
.3a0548	28		plp		done        PLP
.3a0549	60		rts		            RTS
.3a054a	38		sec		conv_09     SEC                 ; Convert digits '0'..'9'
.3a054b	e9 30		sbc #$30	            SBC #'0'
.3a054d	80 f9		bra $3a0548	            BRA done
.3a054f	29 df		and #$df	conv_lcaf   AND #%11011111      ; Convert to upper case
.3a0551	38		sec		conv_ucaf   SEC
.3a0552	e9 37		sbc #$37	            SBC #'A'-10         ; Convert 'A'..'F'
.3a0554	80 f2		bra $3a0548	            BRA done
.3a0556					TOUPPERA
.3a0556	08		php		            PHP
.3a0557	e2 20		sep #$20	            SEP #$20
.3a0559	c9 7b		cmp #$7b	            CMP #'z'+1
.3a055b	b0 06		bcs $3a0563	            BCS done
.3a055d	c9 61		cmp #$61	            CMP #'a'
.3a055f	90 02		bcc $3a0563	            BCC done
.3a0561	29 df		and #$df	            AND #%11011111
.3a0563	28		plp		done        PLP
.3a0564	60		rts		            RTS
.3a0565					TOUPPER
.3a0565	08		php		            PHP
.3a0566	e2 20		sep #$20	            SEP #$20
.3a0568	c2 10		rep #$10	            REP #$10
.3a056a	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.3a056d	f0 09		beq $3a0578	            BEQ done
.3a056f	20 56 05	jsr $3a0556	            JSR TOUPPERA
.3a0572	9d 00 00	sta $0000,x	            STA #0,B,X
.3a0575	e8		inx		continue    INX
.3a0576	80 f2		bra $3a056a	            BRA loop
.3a0578	28		plp		done        PLP
.3a0579	60		rts		            RTS
.3a057a					MULINT10
.3a057a	08		php		                PHP
.3a057b	0b		phd		                PHD
.3a057c	08		php		            PHP
.3a057d	c2 20		rep #$20	            REP #$20
.3a057f	48		pha		            PHA
.3a0580	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0583	5b		tcd		            TCD
.3a0584	68		pla		            PLA
.3a0585	28		plp		            PLP
.3a0586	c2 20		rep #$20	            REP #$20
.3a0588	48		pha		                PHA
.3a0589	06 23		asl $0823	                ASL ARGUMENT1           ; 7 -- 20 -- 74
.3a058b	26 25		rol $0825	                ROL ARGUMENT1+2         ; 7
.3a058d	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.3a058f	85 0c		sta $080c	                STA SCRATCH             ; 4
.3a0591	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.3a0593	85 0e		sta $080e	                STA SCRATCH+2           ; 4
.3a0595	06 0c		asl $080c	                ASL SCRATCH             ; 7 -- 28
.3a0597	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.3a0599	06 0c		asl $080c	                ASL SCRATCH             ; 7
.3a059b	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.3a059d	18		clc		                CLC                     ; 2 -- 26
.3a059e	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.3a05a0	65 0c		adc $080c	                ADC SCRATCH             ; 4
.3a05a2	85 23		sta $0823	                STA ARGUMENT1           ; 4
.3a05a4	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.3a05a6	65 0e		adc $080e	                ADC SCRATCH+2           ; 4
.3a05a8	85 25		sta $0825	                STA ARGUMENT1+2         ; 4
.3a05aa	68		pla		                PLA
.3a05ab	2b		pld		                PLD
.3a05ac	28		plp		                PLP
.3a05ad	60		rts		            RTS
.3a05ae					DIVINT10
.3a05ae	08		php		                PHP
.3a05af	0b		phd		                PHD
.3a05b0	08		php		            PHP
.3a05b1	c2 20		rep #$20	            REP #$20
.3a05b3	48		pha		            PHA
.3a05b4	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a05b7	5b		tcd		            TCD
.3a05b8	68		pla		            PLA
.3a05b9	28		plp		            PLP
.3a05ba	c2 20		rep #$20	            REP #$20
.3a05bc	a5 23		lda $0823	                LDA ARGUMENT1
.3a05be	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.3a05c2	a9 0a 00	lda #$000a	                LDA #10
.3a05c5	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.3a05c9	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.3a05cd	85 23		sta $0823	                STA ARGUMENT1
.3a05cf	64 25		stz $0825	                STZ ARGUMENT1+2
.3a05d1	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.3a05d5	85 29		sta $0829	                STA ARGUMENT2
.3a05d7	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a05d9	e2 20		sep #$20	            SEP #$20
.3a05db	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a05dd	85 27		sta $0827	                STA ARGTYPE1
.3a05df	85 2d		sta $082d	                STA ARGTYPE2
.3a05e1	2b		pld		                PLD
.3a05e2	28		plp		                PLP
.3a05e3	60		rts		            RTS
.3a05e4					DIVINT100
.3a05e4	08		php		                PHP
.3a05e5	0b		phd		                PHD
.3a05e6	08		php		            PHP
.3a05e7	c2 20		rep #$20	            REP #$20
.3a05e9	48		pha		            PHA
.3a05ea	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a05ed	5b		tcd		            TCD
.3a05ee	68		pla		            PLA
.3a05ef	28		plp		            PLP
.3a05f0	c2 20		rep #$20	            REP #$20
.3a05f2	a5 23		lda $0823	                LDA ARGUMENT1
.3a05f4	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.3a05f8	a9 64 00	lda #$0064	                LDA #100
.3a05fb	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.3a05ff	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.3a0603	85 23		sta $0823	                STA ARGUMENT1
.3a0605	64 25		stz $0825	                STZ ARGUMENT1+2
.3a0607	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.3a060b	85 29		sta $0829	                STA ARGUMENT2
.3a060d	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a060f	e2 20		sep #$20	            SEP #$20
.3a0611	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a0613	85 27		sta $0827	                STA ARGTYPE1
.3a0615	85 2d		sta $082d	                STA ARGTYPE2
.3a0617	2b		pld		                PLD
.3a0618	28		plp		                PLP
.3a0619	60		rts		            RTS
.3a061a					IS_ARG1_Z
.3a061a	08		php		                PHP
.3a061b	c2 20		rep #$20	            REP #$20
.3a061d	a5 23		lda $0823	                LDA ARGUMENT1
.3a061f	d0 08		bne $3a0629	                BNE return_false
.3a0621	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a0623	d0 04		bne $3a0629	                BNE return_false
.3a0625	28		plp		return_true     PLP
.3a0626	e2 02		sep #$02	                SEP #$02        ; Set Z
.3a0628	60		rts		            RTS
.3a0629	28		plp		return_false    PLP
.3a062a	c2 02		rep #$02	                REP #$02        ; Clear Z
.3a062c	60		rts		            RTS
.3a062d					SET_TRUE
.3a062d	08		php		                PHP
.3a062e	c2 30		rep #$30	            REP #$30
.3a0630	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a0633	85 23		sta $0823	                STA ARGUMENT1
.3a0635	85 25		sta $0825	                STA ARGUMENT1+2
.3a0637	e2 20		sep #$20	            SEP #$20
.3a0639	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a063b	85 27		sta $0827	                STA ARGTYPE1
.3a063d	28		plp		                PLP
.3a063e	60		rts		            RTS
.3a063f					SET_FALSE
.3a063f	08		php		                PHP
.3a0640	c2 30		rep #$30	            REP #$30
.3a0642	a9 00 00	lda #$0000	                LDA #0
.3a0645	85 23		sta $0823	                STA ARGUMENT1
.3a0647	85 25		sta $0825	                STA ARGUMENT1+2
.3a0649	e2 20		sep #$20	            SEP #$20
.3a064b	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a064d	85 27		sta $0827	                STA ARGTYPE1
.3a064f	28		plp		                PLP
.3a0650	60		rts		            RTS
.3a0651					ASS_ARG1_INT
.3a0651	08		php		                PHP
.3a0652	e2 20		sep #$20	            SEP #$20
.3a0654	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a0656	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a0658	f0 07		beq $3a0661	                BEQ done                ; If so: just return
.3a065a	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a065c	d0 05		bne $3a0663	                BNE TYPE_ERR            ; If not: throw an error
.3a065e	20 09 5c	jsr $3a5c09	            JSR FTOI
.3a0661	28		plp		done            PLP
.3a0662	60		rts		            RTS
.3a0663					TYPE_ERR
.3a0663	08		php		            PHP
.3a0664	c2 20		rep #$20	            REP #$20
.3a0666	48		pha		            PHA
.3a0667	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a066a	5b		tcd		            TCD
.3a066b	68		pla		            PLA
.3a066c	28		plp		            PLP
.3a066d	e2 20		sep #$20	            SEP #$20
.3a066f	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0671	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0675	c2 20		rep #$20	            REP #$20
.3a0677	29 ff 00	and #$00ff	            AND #$00FF
.3a067a	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a067d	e2 20		sep #$20	            SEP #$20
.3a067f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0682					ASS_ARG2_INT
.3a0682	08		php		                PHP
.3a0683	e2 20		sep #$20	            SEP #$20
.3a0685	a5 2d		lda $082d	                LDA ARGTYPE2                ; Verify that the type is INTEGER
.3a0687	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a0689	f0 37		beq $3a06c2	                BEQ done                    ; If so: just return
.3a068b	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; Check if it's a float
.3a068d	d0 35		bne $3a06c4	                BNE TYPE_ERR                ; If not: throw an error
.3a068f	c2 20		rep #$20	            REP #$20
.3a0691	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a0693	48		pha		            PHA
.3a0694	a5 23		lda $0823	            LDA ARGUMENT1
.3a0696	48		pha		            PHA
.3a0697	c2 20		rep #$20	            REP #$20
.3a0699	a5 29		lda $0829	            LDA ARGUMENT2
.3a069b	85 23		sta $0823	            STA ARGUMENT1
.3a069d	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a069f	85 25		sta $0825	            STA ARGUMENT1+2
.3a06a1	e2 20		sep #$20	            SEP #$20
.3a06a3	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.3a06a5	85 27		sta $0827	            STA ARGTYPE1
.3a06a7	20 09 5c	jsr $3a5c09	            JSR FTOI
.3a06aa	c2 20		rep #$20	            REP #$20
.3a06ac	a5 23		lda $0823	            LDA ARGUMENT1
.3a06ae	85 29		sta $0829	            STA ARGUMENT2
.3a06b0	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a06b2	85 2b		sta $082b	            STA ARGUMENT2+2
.3a06b4	e2 20		sep #$20	            SEP #$20
.3a06b6	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a06b8	85 2d		sta $082d	            STA ARGTYPE2
.3a06ba	c2 20		rep #$20	            REP #$20
.3a06bc	68		pla		            PLA
.3a06bd	85 23		sta $0823	            STA ARGUMENT1
.3a06bf	68		pla		            PLA
.3a06c0	85 25		sta $0825	            STA ARGUMENT1+2
.3a06c2	28		plp		done            PLP
.3a06c3	60		rts		            RTS
.3a06c4					TYPE_ERR
.3a06c4	08		php		            PHP
.3a06c5	c2 20		rep #$20	            REP #$20
.3a06c7	48		pha		            PHA
.3a06c8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a06cb	5b		tcd		            TCD
.3a06cc	68		pla		            PLA
.3a06cd	28		plp		            PLP
.3a06ce	e2 20		sep #$20	            SEP #$20
.3a06d0	a9 04		lda #$04	            LDA #ERR_TYPE
.3a06d2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a06d6	c2 20		rep #$20	            REP #$20
.3a06d8	29 ff 00	and #$00ff	            AND #$00FF
.3a06db	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a06de	e2 20		sep #$20	            SEP #$20
.3a06e0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a06e3					ASS_ARG1_STR
.3a06e3	08		php		                PHP
.3a06e4	e2 20		sep #$20	            SEP #$20
.3a06e6	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is STRING
.3a06e8	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a06ea	d0 02		bne $3a06ee	                BNE TYPE_ERR
.3a06ec	28		plp		                PLP
.3a06ed	60		rts		            RTS
.3a06ee					TYPE_ERR
.3a06ee	08		php		            PHP
.3a06ef	c2 20		rep #$20	            REP #$20
.3a06f1	48		pha		            PHA
.3a06f2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a06f5	5b		tcd		            TCD
.3a06f6	68		pla		            PLA
.3a06f7	28		plp		            PLP
.3a06f8	e2 20		sep #$20	            SEP #$20
.3a06fa	a9 04		lda #$04	            LDA #ERR_TYPE
.3a06fc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0700	c2 20		rep #$20	            REP #$20
.3a0702	29 ff 00	and #$00ff	            AND #$00FF
.3a0705	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a0708	e2 20		sep #$20	            SEP #$20
.3a070a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a070d					ASS_ARG1_INT16
.3a070d	08		php		                PHP
.3a070e	e2 20		sep #$20	            SEP #$20
.3a0710	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a0712	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a0714	f0 07		beq $3a071d	                BEQ check_range         ; If so: check the range
.3a0716	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a0718	d0 0b		bne $3a0725	                BNE TYPE_ERR            ; If not: throw an error
.3a071a	20 09 5c	jsr $3a5c09	            JSR FTOI
.3a071d					check_range
.3a071d	c2 20		rep #$20	            REP #$20
.3a071f	a5 25		lda $0825	                LDA ARGUMENT1+2         ; Validate it is 16-bit
.3a0721	d0 21		bne $3a0744	                BNE range_err
.3a0723	28		plp		                PLP
.3a0724	60		rts		            RTS
.3a0725					TYPE_ERR
.3a0725	08		php		            PHP
.3a0726	c2 20		rep #$20	            REP #$20
.3a0728	48		pha		            PHA
.3a0729	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a072c	5b		tcd		            TCD
.3a072d	68		pla		            PLA
.3a072e	28		plp		            PLP
.3a072f	e2 20		sep #$20	            SEP #$20
.3a0731	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0733	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0737	c2 20		rep #$20	            REP #$20
.3a0739	29 ff 00	and #$00ff	            AND #$00FF
.3a073c	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a073f	e2 20		sep #$20	            SEP #$20
.3a0741	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0744					RANGE_ERR
.3a0744	08		php		            PHP
.3a0745	c2 20		rep #$20	            REP #$20
.3a0747	48		pha		            PHA
.3a0748	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a074b	5b		tcd		            TCD
.3a074c	68		pla		            PLA
.3a074d	28		plp		            PLP
.3a074e	e2 20		sep #$20	            SEP #$20
.3a0750	a9 09		lda #$09	            LDA #ERR_RANGE
.3a0752	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0756	c2 20		rep #$20	            REP #$20
.3a0758	29 ff 00	and #$00ff	            AND #$00FF
.3a075b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a075e	e2 20		sep #$20	            SEP #$20
.3a0760	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0763					ASS_ARG1_BYTE
.3a0763	08		php		                PHP
.3a0764	e2 20		sep #$20	            SEP #$20
.3a0766	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a0768	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a076a	f0 07		beq $3a0773	                BEQ check_range         ; If so: check the range
.3a076c	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a076e	d0 11		bne $3a0781	                BNE TYPE_ERR            ; If not: throw an error
.3a0770	20 09 5c	jsr $3a5c09	            JSR FTOI
.3a0773	a5 26		lda $0826	check_range     LDA ARGUMENT1+3         ; Validate that the value is in byte range
.3a0775	d0 29		bne $3a07a0	                BNE RANGE_ERR           ; If not... throw a range error
.3a0777	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a0779	d0 25		bne $3a07a0	                BNE RANGE_ERR
.3a077b	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a077d	d0 21		bne $3a07a0	                BNE RANGE_ERR
.3a077f	28		plp		                PLP
.3a0780	60		rts		            RTS
.3a0781					TYPE_ERR
.3a0781	08		php		            PHP
.3a0782	c2 20		rep #$20	            REP #$20
.3a0784	48		pha		            PHA
.3a0785	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0788	5b		tcd		            TCD
.3a0789	68		pla		            PLA
.3a078a	28		plp		            PLP
.3a078b	e2 20		sep #$20	            SEP #$20
.3a078d	a9 04		lda #$04	            LDA #ERR_TYPE
.3a078f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0793	c2 20		rep #$20	            REP #$20
.3a0795	29 ff 00	and #$00ff	            AND #$00FF
.3a0798	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a079b	e2 20		sep #$20	            SEP #$20
.3a079d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a07a0					RANGE_ERR
.3a07a0	08		php		            PHP
.3a07a1	c2 20		rep #$20	            REP #$20
.3a07a3	48		pha		            PHA
.3a07a4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a07a7	5b		tcd		            TCD
.3a07a8	68		pla		            PLA
.3a07a9	28		plp		            PLP
.3a07aa	e2 20		sep #$20	            SEP #$20
.3a07ac	a9 09		lda #$09	            LDA #ERR_RANGE
.3a07ae	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a07b2	c2 20		rep #$20	            REP #$20
.3a07b4	29 ff 00	and #$00ff	            AND #$00FF
.3a07b7	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a07ba	e2 20		sep #$20	            SEP #$20
.3a07bc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a07bf					ASS_ARG1_FLOAT
.3a07bf	08		php		                PHP
.3a07c0	e2 20		sep #$20	            SEP #$20
.3a07c2	a5 27		lda $0827	                LDA ARGTYPE1            ; Check the type
.3a07c4	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.3a07c6	f0 26		beq $3a07ee	                BEQ done                ; Then we're done
.3a07c8	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.3a07ca	f0 1f		beq $3a07eb	                BEQ cast                ; Then cast it to float
.3a07cc					type_err
.3a07cc	08		php		            PHP
.3a07cd	c2 20		rep #$20	            REP #$20
.3a07cf	48		pha		            PHA
.3a07d0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a07d3	5b		tcd		            TCD
.3a07d4	68		pla		            PLA
.3a07d5	28		plp		            PLP
.3a07d6	e2 20		sep #$20	            SEP #$20
.3a07d8	a9 04		lda #$04	            LDA #ERR_TYPE
.3a07da	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a07de	c2 20		rep #$20	            REP #$20
.3a07e0	29 ff 00	and #$00ff	            AND #$00FF
.3a07e3	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a07e6	e2 20		sep #$20	            SEP #$20
.3a07e8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a07eb					cast
.3a07eb	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a07ee	28		plp		done            PLP
.3a07ef	60		rts		            RTS
.3a07f0					ASS_ARG2_FLOAT
.3a07f0	08		php		                PHP
.3a07f1	e2 20		sep #$20	            SEP #$20
.3a07f3	a5 2d		lda $082d	                LDA ARGTYPE2            ; Check the type
.3a07f5	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.3a07f7	f0 26		beq $3a081f	                BEQ done                ; Then we're done
.3a07f9	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.3a07fb	f0 1f		beq $3a081c	                BEQ cast                ; Then cast it to float
.3a07fd					type_err
.3a07fd	08		php		            PHP
.3a07fe	c2 20		rep #$20	            REP #$20
.3a0800	48		pha		            PHA
.3a0801	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0804	5b		tcd		            TCD
.3a0805	68		pla		            PLA
.3a0806	28		plp		            PLP
.3a0807	e2 20		sep #$20	            SEP #$20
.3a0809	a9 04		lda #$04	            LDA #ERR_TYPE
.3a080b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a080f	c2 20		rep #$20	            REP #$20
.3a0811	29 ff 00	and #$00ff	            AND #$00FF
.3a0814	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a0817	e2 20		sep #$20	            SEP #$20
.3a0819	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a081c					cast
.3a081c	20 21 08	jsr $3a0821	            JSR CAST_ARG2_FLOAT
.3a081f	28		plp		done            PLP
.3a0820	60		rts		            RTS
.3a0821					CAST_ARG2_FLOAT
.3a0821	c2 20		rep #$20	            REP #$20
.3a0823	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a0825	48		pha		            PHA
.3a0826	a5 23		lda $0823	            LDA ARGUMENT1
.3a0828	48		pha		            PHA
.3a0829	c2 20		rep #$20	            REP #$20
.3a082b	a5 29		lda $0829	            LDA ARGUMENT2
.3a082d	85 23		sta $0823	            STA ARGUMENT1
.3a082f	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a0831	85 25		sta $0825	            STA ARGUMENT1+2
.3a0833	e2 20		sep #$20	            SEP #$20
.3a0835	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a0837	85 27		sta $0827	            STA ARGTYPE1
.3a0839	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a083c	c2 20		rep #$20	            REP #$20
.3a083e	a5 23		lda $0823	            LDA ARGUMENT1
.3a0840	85 29		sta $0829	            STA ARGUMENT2
.3a0842	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a0844	85 2b		sta $082b	            STA ARGUMENT2+2
.3a0846	e2 20		sep #$20	            SEP #$20
.3a0848	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.3a084a	85 2d		sta $082d	            STA ARGTYPE2
.3a084c	c2 20		rep #$20	            REP #$20
.3a084e	68		pla		            PLA
.3a084f	85 23		sta $0823	            STA ARGUMENT1
.3a0851	68		pla		            PLA
.3a0852	85 25		sta $0825	            STA ARGUMENT1+2
.3a0854	60		rts		            RTS
.3a0855					ASS_ARGS_NUM
.3a0855	08		php		                PHP
.3a0856	e2 20		sep #$20	            SEP #$20
.3a0858	a5 27		lda $0827	                LDA ARGTYPE1                ; Check ARGUMENT1
.3a085a	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a085c	f0 23		beq $3a0881	                BEQ arg1_int
.3a085e	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a0860	f0 2e		beq $3a0890	                BEQ arg1_float
.3a0862					type_err
.3a0862	08		php		            PHP
.3a0863	c2 20		rep #$20	            REP #$20
.3a0865	48		pha		            PHA
.3a0866	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0869	5b		tcd		            TCD
.3a086a	68		pla		            PLA
.3a086b	28		plp		            PLP
.3a086c	e2 20		sep #$20	            SEP #$20
.3a086e	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0870	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0874	c2 20		rep #$20	            REP #$20
.3a0876	29 ff 00	and #$00ff	            AND #$00FF
.3a0879	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a087c	e2 20		sep #$20	            SEP #$20
.3a087e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0881	a5 2d		lda $082d	arg1_int        LDA ARGTYPE2                ; Check argument 2
.3a0883	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If integer, we're done
.3a0885	f0 16		beq $3a089d	                BEQ done
.3a0887	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If not float, throw an error
.3a0889	d0 d7		bne $3a0862	                BNE type_err
.3a088b	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a088e	80 0d		bra $3a089d	                BRA done
.3a0890	a5 2d		lda $082d	arg1_float      LDA ARGTYPE2                ; Check argument 2
.3a0892	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If it's float
.3a0894	f0 07		beq $3a089d	                BEQ done                    ; Then we're done
.3a0896	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If it's not integer
.3a0898	d0 c8		bne $3a0862	                BNE type_err                ; Thrown an error
.3a089a	20 21 08	jsr $3a0821	            JSR CAST_ARG2_FLOAT
.3a089d					done
.3a089d	e2 20		sep #$20	            SEP #$20
.3a089f	a5 27		lda $0827	                LDA ARGTYPE1                ; Return the type code in A
.3a08a1	28		plp		                PLP
.3a08a2	60		rts		            RTS
.3a08a3					ASS_ARGS_NUMSTR
.3a08a3	08		php		                PHP
.3a08a4	e2 20		sep #$20	            SEP #$20
.3a08a6	a5 27		lda $0827	                LDA ARGTYPE1                ; Check to see if ARGUMENT1 is a string
.3a08a8	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a08aa	d0 25		bne $3a08d1	                BNE numbers
.3a08ac	a5 2d		lda $082d	                LDA ARGTYPE2                ; If ARGUMENT1 is a string, make sure ARGUMENT2 is
.3a08ae	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a08b0	f0 24		beq $3a08d6	                BEQ done
.3a08b2					TYPE_ERR
.3a08b2	08		php		            PHP
.3a08b3	c2 20		rep #$20	            REP #$20
.3a08b5	48		pha		            PHA
.3a08b6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a08b9	5b		tcd		            TCD
.3a08ba	68		pla		            PLA
.3a08bb	28		plp		            PLP
.3a08bc	e2 20		sep #$20	            SEP #$20
.3a08be	a9 04		lda #$04	            LDA #ERR_TYPE
.3a08c0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a08c4	c2 20		rep #$20	            REP #$20
.3a08c6	29 ff 00	and #$00ff	            AND #$00FF
.3a08c9	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a08cc	e2 20		sep #$20	            SEP #$20
.3a08ce	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a08d1					numbers
.3a08d1	20 55 08	jsr $3a0855	            JSR ASS_ARGS_NUM
.3a08d4	a5 27		lda $0827	                LDA ARGTYPE1                ; Make sure A is the type
.3a08d6	28		plp		done            PLP
.3a08d7	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\tokens.s

.0000					TOKEN
>0000					precedence  .byte ?
>0001					length      .byte ?
>0002					name        .word <>?
>0004					eval        .word <>?
>0006					arity       .word <>?
.3a08d8					PARSEINT
.3a08d8	08		php		            PHP
.3a08d9	0b		phd		            PHD
.3a08da	08		php		            PHP
.3a08db	c2 20		rep #$20	            REP #$20
.3a08dd	48		pha		            PHA
.3a08de	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a08e1	5b		tcd		            TCD
.3a08e2	68		pla		            PLA
.3a08e3	28		plp		            PLP
.3a08e4	c2 30		rep #$30	            REP #$30
.3a08e6	64 23		stz $0823	            STZ ARGUMENT1       ; Default to Not-a-value
.3a08e8	64 25		stz $0825	            STZ ARGUMENT1+2
.3a08ea	e2 20		sep #$20	            SEP #$20
.3a08ec	64 27		stz $0827	            STZ ARGTYPE1
.3a08ee	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it starts with '$'
.3a08f0	c9 26		cmp #$26	            CMP #'&'
.3a08f2	f0 44		beq $3a0938	            BEQ check_hex       ; Yes: parse it as a hexadecimal number
.3a08f4					loop
.3a08f4	e2 20		sep #$20	            SEP #$20
.3a08f6	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.3a08f8	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a08fb	90 76		bcc $3a0973	            BCC done            ; No, we're done parsing
.3a08fd	20 7a 05	jsr $3a057a	            JSR MULINT10
.3a0900	38		sec		            SEC                 ; Convert the ASCII code to a number
.3a0901	e9 30		sbc #$30	            SBC #'0'
.3a0903	c2 20		rep #$20	            REP #$20
.3a0905	29 ff 00	and #$00ff	            AND #$00FF
.3a0908	18		clc		            CLC
.3a0909	65 23		adc $0823	            ADC ARGUMENT1
.3a090b	85 23		sta $0823	            STA ARGUMENT1
.3a090d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a090f	69 00 00	adc #$0000	            ADC #0
.3a0912	85 25		sta $0825	            STA ARGUMENT1+2
.3a0914	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a0917	80 db		bra $3a08f4	            BRA loop            ; And try to process it
.3a0919					syntaxerr
.3a0919	08		php		            PHP
.3a091a	c2 20		rep #$20	            REP #$20
.3a091c	48		pha		            PHA
.3a091d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0920	5b		tcd		            TCD
.3a0921	68		pla		            PLA
.3a0922	28		plp		            PLP
.3a0923	e2 20		sep #$20	            SEP #$20
.3a0925	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a0927	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a092b	c2 20		rep #$20	            REP #$20
.3a092d	29 ff 00	and #$00ff	            AND #$00FF
.3a0930	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a0933	e2 20		sep #$20	            SEP #$20
.3a0935	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0938					check_hex
.3a0938	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a093b	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.3a093d	c9 48		cmp #$48	            CMP #'H'            ; Is it 'H'?
.3a093f	f0 04		beq $3a0945	            BEQ parse_hex       ; Yes: skip it and parse hex
.3a0941	c9 68		cmp #$68	            CMP #'h'            ; Is it 'h'?
.3a0943	d0 d4		bne $3a0919	            BNE syntaxerr       ; No: throw an error
.3a0945					parse_hex
.3a0945	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a0948					hexloop
.3a0948	e2 20		sep #$20	            SEP #$20
.3a094a	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.3a094c	20 0c 05	jsr $3a050c	            JSR ISHEX
.3a094f	90 22		bcc $3a0973	            BCC done            ; No, we're done parsing
.3a0951	20 2d 05	jsr $3a052d	            JSR HEX2BIN
.3a0954	c2 20		rep #$20	            REP #$20
.3a0956	06 23		asl $0823	            ASL ARGUMENT1
.3a0958	26 25		rol $0825	            ROL ARGUMENT1+2
.3a095a	06 23		asl $0823	            ASL ARGUMENT1
.3a095c	26 25		rol $0825	            ROL ARGUMENT1+2
.3a095e	06 23		asl $0823	            ASL ARGUMENT1
.3a0960	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0962	06 23		asl $0823	            ASL ARGUMENT1
.3a0964	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0966	29 ff 00	and #$00ff	            AND #$00FF          ; Add binary number to ARGUMENT1
.3a0969	18		clc		            CLC
.3a096a	65 23		adc $0823	            ADC ARGUMENT1
.3a096c	85 23		sta $0823	            STA ARGUMENT1
.3a096e	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a0971	80 d5		bra $3a0948	            BRA hexloop         ; And try to process it
.3a0973	2b		pld		done        PLD
.3a0974	28		plp		            PLP
.3a0975	60		rts		            RTS
.3a0976					PREVCHAR
.3a0976	08		php		            PHP
.3a0977	c2 30		rep #$30	            REP #$30
.3a0979	a5 04		lda $0804	            LDA BIPPREV
.3a097b	f0 1c		beq $3a0999	            BEQ ret_false
.3a097d	38		sec		            SEC
.3a097e	a5 04		lda $0804	            LDA BIPPREV
.3a0980	e5 1a		sbc $081a	            SBC CURLINE
.3a0982	a8		tay		            TAY
.3a0983	e2 20		sep #$20	            SEP #$20
.3a0985	b7 1a		lda [$081a],y	loop        LDA [CURLINE],Y
.3a0987	f0 10		beq $3a0999	            BEQ ret_false
.3a0989	c9 20		cmp #$20	            CMP #CHAR_SP
.3a098b	f0 06		beq $3a0993	            BEQ go_back
.3a098d	c9 09		cmp #$09	            CMP #CHAR_TAB
.3a098f	f0 02		beq $3a0993	            BEQ go_back
.3a0991	28		plp		            PLP
.3a0992	60		rts		            RTS
.3a0993	88		dey		go_back     DEY
.3a0994	c0 ff ff	cpy #$ffff	            CPY #$FFFF
.3a0997	d0 ec		bne $3a0985	            BNE loop
.3a0999					ret_false
.3a0999	a9 00		lda #$00	            LDA #0
.3a099b	60		rts		            RTS
.3a099c					TOKENIZE
.3a099c	08		php		            PHP
.3a099d	0b		phd		            PHD
.3a099e	08		php		            PHP
.3a099f	c2 20		rep #$20	            REP #$20
.3a09a1	48		pha		            PHA
.3a09a2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a09a5	5b		tcd		            TCD
.3a09a6	68		pla		            PLA
.3a09a7	28		plp		            PLP
.3a09a8	c2 30		rep #$30	            REP #$30
.3a09aa	a5 1a		lda $081a	            LDA CURLINE
.3a09ac	85 00		sta $0800	            STA BIP
.3a09ae	e2 20		sep #$20	            SEP #$20
.3a09b0	a5 1c		lda $081c	            LDA CURLINE+2
.3a09b2	85 02		sta $0802	            STA BIP+2
.3a09b4	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a09b7	a7 00		lda [$0800]	            LDA [BIP]               ; Do we have a numeral?
.3a09b9	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a09bc	90 0c		bcc $3a09ca	            BCC mv_curline          ; No: adjust CURLINE and tokenize
.3a09be	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a09c1	c2 20		rep #$20	            REP #$20
.3a09c3	a5 23		lda $0823	            LDA ARGUMENT1
.3a09c5	85 d7		sta $08d7	            STA LINENUM
.3a09c7	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a09ca					mv_curline
.3a09ca	c2 20		rep #$20	            REP #$20
.3a09cc	a5 00		lda $0800	            LDA BIP
.3a09ce	85 1a		sta $081a	            STA CURLINE
.3a09d0	e2 20		sep #$20	            SEP #$20
.3a09d2	a5 02		lda $0802	            LDA BIP+2
.3a09d4	85 1c		sta $081c	            STA CURLINE+2
.3a09d6	20 ea 09	jsr $3a09ea	            JSR FINDREM
.3a09d9	e2 20		sep #$20	            SEP #$20
.3a09db					loop
.3a09db	20 5b 0a	jsr $3a0a5b	            JSR TKFINDTOKEN
.3a09de	c9 00		cmp #$00	            CMP #0                  ; Did we find a token?
.3a09e0	f0 05		beq $3a09e7	            BEQ done                ; No: return
.3a09e2	20 06 0c	jsr $3a0c06	            JSR TKWRITE
.3a09e5	80 f4		bra $3a09db	            BRA loop                ; And try again
.3a09e7	2b		pld		done        PLD
.3a09e8	28		plp		            PLP
.3a09e9	60		rts		            RTS
.3a09ea					FINDREM
.3a09ea	08		php		            PHP
.3a09eb	c2 20		rep #$20	            REP #$20
.3a09ed	a5 1a		lda $081a	            LDA CURLINE             ; Point BIP to the beginning of the line
.3a09ef	85 00		sta $0800	            STA BIP
.3a09f1	a5 1c		lda $081c	            LDA CURLINE+2
.3a09f3	85 02		sta $0802	            STA BIP+2
.3a09f5	a2 00 00	ldx #$0000	            LDX #0                  ; X will be a flag that we're at the beginning
.3a09f8	e2 20		sep #$20	            SEP #$20
.3a09fa	a0 00 00	ldy #$0000	loop        LDY #0
.3a09fd	e0 00 00	cpx #$0000	            CPX #0                  ; If we are at the first space on the line
.3a0a00	f0 0d		beq $3a0a0f	            BEQ skip_delim          ; ... skip looking for a delimiter
.3a0a02	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a0a04	f0 53		beq $3a0a59	            BEQ done                ; Is it null? Then we're done
.3a0a06	c9 3a		cmp #$3a	            CMP #':'                ; Is it ":"
.3a0a08	f0 04		beq $3a0a0e	            BEQ found_delim         ; Yes: we might have a REM... look for E
.3a0a0a	c9 20		cmp #$20	            CMP #CHAR_SP
.3a0a0c	d0 33		bne $3a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a0a0e	c8		iny		found_delim INY
.3a0a0f	b7 00		lda [$0800],y	skip_delim  LDA [BIP],Y             ; Get the first character
.3a0a11	f0 46		beq $3a0a59	            BEQ done                ; Is it null? Then we're done
.3a0a13	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.3a0a15	f0 10		beq $3a0a27	            BEQ found_R             ; Yes: we might have a REM... look for E
.3a0a17	c9 72		cmp #$72	            CMP #'r'
.3a0a19	d0 26		bne $3a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a0a1b	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a0a1d	f0 3a		beq $3a0a59	            BEQ done                ; Is it null? Then we're done
.3a0a1f	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.3a0a21	f0 04		beq $3a0a27	            BEQ found_R             ; Yes: we might have a REM... look for E
.3a0a23	c9 72		cmp #$72	            CMP #'r'
.3a0a25	d0 1a		bne $3a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a0a27	c8		iny		found_R     INY
.3a0a28	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a0a2a	f0 2d		beq $3a0a59	            BEQ done                ; Is it null? Then we're done
.3a0a2c	c9 45		cmp #$45	            CMP #'E'                ; Is it "E"
.3a0a2e	f0 04		beq $3a0a34	            BEQ found_E             ; Yes: we might have a REM... look for M
.3a0a30	c9 65		cmp #$65	            CMP #'e'
.3a0a32	d0 0d		bne $3a0a41	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a0a34	c8		iny		found_E     INY
.3a0a35	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a0a37	f0 20		beq $3a0a59	            BEQ done                ; Is it null? Then we're done
.3a0a39	c9 4d		cmp #$4d	            CMP #'M'                ; Is it "E"
.3a0a3b	f0 0a		beq $3a0a47	            BEQ found_REM           ; Yes: we might have a REM... look for M
.3a0a3d	c9 6d		cmp #$6d	            CMP #'m'
.3a0a3f	f0 06		beq $3a0a47	            BEQ found_REM
.3a0a41	e8		inx		next_pos    INX                     ; Indicate we're no longer at the first position
.3a0a42	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a0a45	80 b3		bra $3a09fa	            BRA loop
.3a0a47	a7 00		lda [$0800]	found_REM   LDA [BIP]               ; Get the current character
.3a0a49	c9 3a		cmp #$3a	            CMP #':'                ; Is it the delimiter?
.3a0a4b	d0 03		bne $3a0a50	            BNE ret_REM             ; No: go ahead and return REM at that location
.3a0a4d	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a0a50	a9 03		lda #$03	ret_REM     LDA #3
.3a0a52	85 1e		sta $081e	            STA CURTOKLEN           ; Set the size
.3a0a54	a9 91		lda #$91	            LDA #TOK_REM            ; And the token to write
.3a0a56	20 06 0c	jsr $3a0c06	            JSR TKWRITE
.3a0a59	28		plp		done        PLP
.3a0a5a	60		rts		            RTS
.3a0a5b					TKFINDTOKEN
.3a0a5b	08		php		            PHP
.3a0a5c	0b		phd		            PHD
.3a0a5d	08		php		            PHP
.3a0a5e	c2 20		rep #$20	            REP #$20
.3a0a60	48		pha		            PHA
.3a0a61	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0a64	5b		tcd		            TCD
.3a0a65	68		pla		            PLA
.3a0a66	28		plp		            PLP
.3a0a67	e2 20		sep #$20	            SEP #$20
.3a0a69	a9 7f		lda #$7f	            LDA #$7F                ; Start off looking for any size token
.3a0a6b	85 1e		sta $081e	            STA CURTOKLEN
.3a0a6d					next_size
.3a0a6d	c2 10		rep #$10	            REP #$10
.3a0a6f	20 bb 0b	jsr $3a0bbb	            JSR TKNEXTBIG
.3a0a72	a5 1e		lda $081e	            LDA CURTOKLEN           ; Are there any keywords left?
.3a0a74	d0 03		bne $3a0a79	            BNE else
.3a0a76	4c fb 0a	jmp $3a0afb	            JMP done                ; No: return to caller
.3a0a79					else
.3a0a79	c2 20		rep #$20	            REP #$20
.3a0a7b	a5 1a		lda $081a	            LDA CURLINE
.3a0a7d	85 00		sta $0800	            STA BIP
.3a0a7f	e2 20		sep #$20	            SEP #$20
.3a0a81	a5 1c		lda $081c	            LDA CURLINE+2
.3a0a83	85 02		sta $0802	            STA BIP+2
.3a0a85	c2 20		rep #$20	            REP #$20
.3a0a87	64 04		stz $0804	            STZ BIPPREV             ; Clear BIPPREV (point to the previous character)
.3a0a89	64 06		stz $0806	            STZ BIPPREV+2
.3a0a8b					check_len
.3a0a8b	e2 30		sep #$30	            SEP #$30
.3a0a8d	a0 00		ldy #$00	            LDY #0
.3a0a8f	b7 00		lda [$0800],y	nul_scan    LDA [BIP],Y
.3a0a91	f0 da		beq $3a0a6d	            BEQ next_size
.3a0a93	c9 91		cmp #$91	            CMP #TOK_REM            ; Tokenization stops at REMarks too
.3a0a95	f0 d6		beq $3a0a6d	            BEQ next_size
.3a0a97	c8		iny		            INY
.3a0a98	c4 1e		cpy $081e	            CPY CURTOKLEN
.3a0a9a	90 f3		bcc $3a0a8f	            BCC nul_scan
.3a0a9c	c2 10		rep #$10	            REP #$10
.3a0a9e	a7 00		lda [$0800]	            LDA [BIP]               ; Check the current character
.3a0aa0	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.3a0aa2	d0 05		bne $3a0aa9	            BNE chk_keyword         ; No: check to see if we are at the start of a possible keyword
.3a0aa4	20 1d 0b	jsr $3a0b1d	            JSR SKIPQUOTED
.3a0aa7	80 28		bra $3a0ad1	            BRA go_next             ; And move on to the next character
.3a0aa9	a5 1e		lda $081e	chk_keyword LDA CURTOKLEN           ; If the token length is <=2
.3a0aab	c9 03		cmp #$03	            CMP #3
.3a0aad	90 19		bcc $3a0ac8	            BLT try_match           ; ... we don't need a delimiter, go ahead and convert it
.3a0aaf	c2 20		rep #$20	            REP #$20
.3a0ab1	a5 00		lda $0800	            LDA BIP                 ; Check to see if we're at the start of the line
.3a0ab3	c5 1a		cmp $081a	            CMP CURLINE
.3a0ab5	d0 08		bne $3a0abf	            BNE chk_delim           ; No: we need to check for a delimiters
.3a0ab7	e2 20		sep #$20	            SEP #$20
.3a0ab9	a5 02		lda $0802	            LDA BIP+2
.3a0abb	c5 1c		cmp $081c	            CMP CURLINE+2
.3a0abd	f0 09		beq $3a0ac8	            BEQ try_match           ; Yes: this can be a keyword
.3a0abf					chk_delim
.3a0abf	e2 20		sep #$20	            SEP #$20
.3a0ac1	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.3a0ac3	20 4c 51	jsr $3a514c	            JSR ISVARCHAR
.3a0ac6	b0 09		bcs $3a0ad1	            BCS go_next             ; Yes: we can't start a keyword here
.3a0ac8					try_match
.3a0ac8	e2 20		sep #$20	            SEP #$20
.3a0aca	20 2d 0b	jsr $3a0b2d	            JSR TKMATCH
.3a0acd	c9 00		cmp #$00	            CMP #0                  ; Did we get one?
.3a0acf	d0 11		bne $3a0ae2	            BNE found               ; Yes: return it
.3a0ad1					go_next
.3a0ad1	c2 20		rep #$20	            REP #$20
.3a0ad3	a5 00		lda $0800	            LDA BIP                 ; Update BIPPREV as the point to the previous character
.3a0ad5	85 04		sta $0804	            STA BIPPREV
.3a0ad7	e2 20		sep #$20	            SEP #$20
.3a0ad9	a5 02		lda $0802	            LDA BIP+2
.3a0adb	85 06		sta $0806	            STA BIPPREV+2
.3a0add	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a0ae0	80 a9		bra $3a0a8b	            BRA check_len           ; And try there
.3a0ae2					found
.3a0ae2	c9 81		cmp #$81	            CMP #TOK_MINUS          ; Found a token... is it minus?
.3a0ae4	d0 15		bne $3a0afb	            BNE done                ; Nope: go ahead and return it
.3a0ae6	20 76 09	jsr $3a0976	            JSR PREVCHAR
.3a0ae9	c9 00		cmp #$00	            CMP #0                  ; Did we get anything?
.3a0aeb	f0 11		beq $3a0afe	            BEQ syntax              ; No: line cannot start with minus... throw error
.3a0aed	89 80		bit #$80	            BIT #$80                ; Is it a token?
.3a0aef	f0 08		beq $3a0af9	            BEQ binaryminus         ; No: leave token unchanged
.3a0af1	c9 90		cmp #$90	            CMP #TOK_RPAREN         ; Is the token a right parenthesis?
.3a0af3	f0 04		beq $3a0af9	            BEQ binaryminus         ; Yes: then this should be a binary minus operator
.3a0af5	a9 af		lda #$af	            LDA #TOK_NEGATIVE       ; Otherwise: this should be a unary minus (negation)
.3a0af7	80 02		bra $3a0afb	            BRA done
.3a0af9	a9 81		lda #$81	binaryminus LDA #TOK_MINUS          ; It's data... so token should be for binary minus
.3a0afb					done
.3a0afb	2b		pld		            PLD
.3a0afc	28		plp		            PLP
.3a0afd	60		rts		            RTS
.3a0afe					syntax
.3a0afe	08		php		            PHP
.3a0aff	c2 20		rep #$20	            REP #$20
.3a0b01	48		pha		            PHA
.3a0b02	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0b05	5b		tcd		            TCD
.3a0b06	68		pla		            PLA
.3a0b07	28		plp		            PLP
.3a0b08	e2 20		sep #$20	            SEP #$20
.3a0b0a	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a0b0c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0b10	c2 20		rep #$20	            REP #$20
.3a0b12	29 ff 00	and #$00ff	            AND #$00FF
.3a0b15	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a0b18	e2 20		sep #$20	            SEP #$20
.3a0b1a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0b1d					SKIPQUOTED
.3a0b1d	08		php		            PHP
.3a0b1e	e2 20		sep #$20	            SEP #$20
.3a0b20					loop
.3a0b20	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a0b23	a7 00		lda [$0800]	            LDA [BIP]
.3a0b25	f0 04		beq $3a0b2b	            BEQ done                ; If EOL, just return
.3a0b27	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.3a0b29	d0 f5		bne $3a0b20	            BNE loop                ; No: keep skipping
.3a0b2b	28		plp		done        PLP
.3a0b2c	60		rts		            RTS
.3a0b2d					TKMATCH
.3a0b2d	da		phx		            PHX
.3a0b2e	5a		phy		            PHY
.3a0b2f	08		php		            PHP
.3a0b30	0b		phd		            PHD
.3a0b31	08		php		            PHP
.3a0b32	c2 20		rep #$20	            REP #$20
.3a0b34	48		pha		            PHA
.3a0b35	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b38	5b		tcd		            TCD
.3a0b39	68		pla		            PLA
.3a0b3a	28		plp		            PLP
.3a0b3b	c2 20		rep #$20	            REP #$20
.3a0b3d	a5 04		lda $0804	            LDA BIPPREV
.3a0b3f	d0 0a		bne $3a0b4b	            BNE check_prev
.3a0b41	e2 20		sep #$20	            SEP #$20
.3a0b43	a5 04		lda $0804	            LDA BIPPREV
.3a0b45	d0 04		bne $3a0b4b	            BNE check_prev
.3a0b47	a9 00		lda #$00	            LDA #0
.3a0b49	80 0a		bra $3a0b55	            BRA save_delim
.3a0b4b					check_prev
.3a0b4b	e2 20		sep #$20	            SEP #$20
.3a0b4d	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.3a0b4f	20 4c 51	jsr $3a514c	            JSR ISVARCHAR
.3a0b52	a9 00		lda #$00	            LDA #0
.3a0b54	2a		rol a		            ROL A
.3a0b55	85 28		sta $0828	save_delim  STA SIGN1               ; SIGN1 := 1 if it is a variable name character
.3a0b57	c2 30		rep #$30	            REP #$30
.3a0b59	a9 fb 0c	lda #$0cfb	            LDA #<>TOKENS           ; Set INDEX to point to the first token record
.3a0b5c	85 08		sta $0808	            STA INDEX
.3a0b5e	e2 20		sep #$20	            SEP #$20
.3a0b60	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0b62	85 0a		sta $080a	            STA INDEX+2
.3a0b64	a2 80 00	ldx #$0080	            LDX #$80                ; Set the initial token ID
.3a0b67					token_loop
.3a0b67	e2 20		sep #$20	            SEP #$20
.3a0b69	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.3a0b6c	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the current token
.3a0b6e	f0 31		beq $3a0ba1	            BEQ no_match            ; Is it 0? We're out of tokens... no match found
.3a0b70	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it the same as the size of the window?
.3a0b72	d0 32		bne $3a0ba6	            BNE next_token          ; No: try the next token
.3a0b74	c2 30		rep #$30	            REP #$30
.3a0b76	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.3a0b79	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the pointer to the token's name
.3a0b7b	85 0c		sta $080c	            STA SCRATCH             ; Set SCRATCH to point to the token's name
.3a0b7d	e2 20		sep #$20	            SEP #$20
.3a0b7f	a9 3a		lda #$3a	            LDA #`DATA_BLOCK
.3a0b81	85 0e		sta $080e	            STA SCRATCH+2
.3a0b83	a5 28		lda $0828	            LDA SIGN1               ; Is previous character a variable name character?
.3a0b85	f0 07		beq $3a0b8e	            BEQ cmp_keyword         ; No: we can check for this token
.3a0b87	a7 0c		lda [$080c]	            LDA [SCRATCH]           ; Get the token's first character
.3a0b89	20 4c 51	jsr $3a514c	            JSR ISVARCHAR
.3a0b8c	b0 18		bcs $3a0ba6	            BCS next_token          ; Yes: skip this token
.3a0b8e					cmp_keyword
.3a0b8e	e2 10		sep #$10	            SEP #$10
.3a0b90	a0 00		ldy #$00	            LDY #0
.3a0b92	b7 00		lda [$0800],y	cmp_loop    LDA [BIP],Y             ; Get the character in the window
.3a0b94	20 56 05	jsr $3a0556	            JSR TOUPPERA
.3a0b97	d7 0c		cmp [$080c],y	            CMP [SCRATCH],Y         ; Compare to the character in the token
.3a0b99	d0 0b		bne $3a0ba6	            BNE next_token          ; If they don't match, try the next token
.3a0b9b	c8		iny		            INY                     ; Move to the next character in the window
.3a0b9c	c4 1e		cpy $081e	            CPY CURTOKLEN           ; Have we checked the whole window?
.3a0b9e	90 f2		bcc $3a0b92	            BCC cmp_loop            ; No: check this next character
.3a0ba0	8a		txa		            TXA                     ; Move the token ID to A
.3a0ba1	2b		pld		no_match    PLD
.3a0ba2	28		plp		            PLP
.3a0ba3	7a		ply		            PLY
.3a0ba4	fa		plx		            PLX
.3a0ba5	60		rts		            RTS
.3a0ba6					next_token
.3a0ba6	c2 30		rep #$30	            REP #$30
.3a0ba8	18		clc		            CLC
.3a0ba9	a5 08		lda $0808	            LDA INDEX
.3a0bab	69 08 00	adc #$0008	            ADC #size(TOKEN)
.3a0bae	85 08		sta $0808	            STA INDEX
.3a0bb0	e2 20		sep #$20	            SEP #$20
.3a0bb2	a5 0a		lda $080a	            LDA INDEX+2
.3a0bb4	69 00		adc #$00	            ADC #0
.3a0bb6	85 0a		sta $080a	            STA INDEX+2
.3a0bb8	e8		inx		            INX                     ; Increment the token ID
.3a0bb9	80 ac		bra $3a0b67	            BRA token_loop          ; And check that token
.3a0bbb					TKNEXTBIG
.3a0bbb	08		php		            PHP
.3a0bbc	0b		phd		            PHD
.3a0bbd	8b		phb		            PHB
.3a0bbe	08		php		            PHP
.3a0bbf	c2 20		rep #$20	            REP #$20
.3a0bc1	48		pha		            PHA
.3a0bc2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0bc5	5b		tcd		            TCD
.3a0bc6	68		pla		            PLA
.3a0bc7	28		plp		            PLP
.3a0bc8	c2 30		rep #$30	            REP #$30
.3a0bca	a9 fb 0c	lda #$0cfb	            LDA #<>TOKENS
.3a0bcd	85 08		sta $0808	            STA INDEX
.3a0bcf	a9 3a 00	lda #$003a	            LDA #`TOKENS
.3a0bd2	85 0a		sta $080a	            STA INDEX+2
.3a0bd4	64 0c		stz $080c	            STZ SCRATCH             ; Clear SCRATCH
.3a0bd6					loop
.3a0bd6	e2 20		sep #$20	            SEP #$20
.3a0bd8	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.3a0bdb	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the token
.3a0bdd	f0 1d		beq $3a0bfc	            BEQ done                ; If length is 0, we're done
.3a0bdf	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it >= CURTOKLEN?
.3a0be1	b0 06		bcs $3a0be9	            BGE skip                ; Yes: skip to the next token
.3a0be3	c5 0c		cmp $080c	            CMP SCRATCH             ; No: is it < SCRATCH?
.3a0be5	90 02		bcc $3a0be9	            BLT skip                ; Yes: skip to the next token
.3a0be7	85 0c		sta $080c	            STA SCRATCH             ; No: it's our new longest token!
.3a0be9					skip
.3a0be9	c2 20		rep #$20	            REP #$20
.3a0beb	18		clc		            CLC
.3a0bec	a5 08		lda $0808	            LDA INDEX
.3a0bee	69 08 00	adc #$0008	            ADC #size(TOKEN)
.3a0bf1	85 08		sta $0808	            STA INDEX
.3a0bf3	a5 0a		lda $080a	            LDA INDEX+2
.3a0bf5	69 00 00	adc #$0000	            ADC #0
.3a0bf8	85 0a		sta $080a	            STA INDEX+2
.3a0bfa	80 da		bra $3a0bd6	            BRA loop                ; And go around for another pass
.3a0bfc					done
.3a0bfc	e2 20		sep #$20	            SEP #$20
.3a0bfe	a5 0c		lda $080c	            LDA SCRATCH
.3a0c00	85 1e		sta $081e	            STA CURTOKLEN
.3a0c02	ab		plb		            PLB
.3a0c03	2b		pld		            PLD
.3a0c04	28		plp		            PLP
.3a0c05	60		rts		            RTS
.3a0c06					TKWRITE
.3a0c06	08		php		            PHP
.3a0c07	0b		phd		            PHD
.3a0c08	08		php		            PHP
.3a0c09	c2 20		rep #$20	            REP #$20
.3a0c0b	48		pha		            PHA
.3a0c0c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0c0f	5b		tcd		            TCD
.3a0c10	68		pla		            PLA
.3a0c11	28		plp		            PLP
.3a0c12	e2 20		sep #$20	            SEP #$20
.3a0c14	87 00		sta [$0800]	            STA [BIP]               ; Write the token to the line
.3a0c16	c2 20		rep #$20	            REP #$20
.3a0c18	18		clc		            CLC
.3a0c19	a5 00		lda $0800	            LDA BIP
.3a0c1b	69 01 00	adc #$0001	            ADC #1
.3a0c1e	85 08		sta $0808	            STA INDEX
.3a0c20	a5 02		lda $0802	            LDA BIP+2
.3a0c22	69 00 00	adc #$0000	            ADC #0
.3a0c25	85 0a		sta $080a	            STA INDEX+2
.3a0c27	e2 10		sep #$10	            SEP #$10
.3a0c29	a4 1e		ldy $081e	            LDY CURTOKLEN           ; Y will be the number of characters to move down
.3a0c2b	88		dey		            DEY
.3a0c2c					copy_down
.3a0c2c	e2 20		sep #$20	            SEP #$20
.3a0c2e	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the byte to move down
.3a0c30	87 08		sta [$0808]	            STA [INDEX]             ; Move it down
.3a0c32	f0 13		beq $3a0c47	            BEQ done                ; We've reached the end of the line
.3a0c34	c2 20		rep #$20	            REP #$20
.3a0c36	18		clc		            CLC
.3a0c37	a5 08		lda $0808	            LDA INDEX
.3a0c39	69 01 00	adc #$0001	            ADC #1
.3a0c3c	85 08		sta $0808	            STA INDEX
.3a0c3e	a5 0a		lda $080a	            LDA INDEX+2
.3a0c40	69 00 00	adc #$0000	            ADC #0
.3a0c43	85 0a		sta $080a	            STA INDEX+2
.3a0c45	80 e5		bra $3a0c2c	            BRA copy_down
.3a0c47	2b		pld		done        PLD
.3a0c48	28		plp		            PLP
.3a0c49	60		rts		            RTS
.3a0c4a					GETTOKREC
.3a0c4a	08		php		            PHP
.3a0c4b	c2 30		rep #$30	            REP #$30
.3a0c4d	29 7f 00	and #$007f	            AND #$007F
.3a0c50	0a		asl a		            ASL A
.3a0c51	0a		asl a		            ASL A
.3a0c52	0a		asl a		            ASL A
.3a0c53	18		clc		            CLC
.3a0c54	69 fb 0c	adc #$0cfb	            ADC #<>TOKENS
.3a0c57	aa		tax		            TAX                         ; X is now the data bank relative address of the token record
.3a0c58	28		plp		            PLP
.3a0c59	60		rts		            RTS
.3a0c5a					TOKPRECED
.3a0c5a	08		php		            PHP
.3a0c5b	8b		phb		            PHB
.3a0c5c	0b		phd		            PHD
.3a0c5d	08		php		            PHP
.3a0c5e	c2 20		rep #$20	            REP #$20
.3a0c60	48		pha		            PHA
.3a0c61	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0c64	5b		tcd		            TCD
.3a0c65	68		pla		            PLA
.3a0c66	28		plp		            PLP
.3a0c67	08		php		            PHP
.3a0c68	e2 20		sep #$20	            SEP #$20
.3a0c6a	48		pha		            PHA
.3a0c6b	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0c6d	48		pha		            PHA
.3a0c6e	ab		plb		            PLB
.3a0c6f	68		pla		            PLA
.3a0c70	28		plp		            PLP
.3a0c71	e2 20		sep #$20	            SEP #$20
.3a0c73	c2 10		rep #$10	            REP #$10
.3a0c75	20 4a 0c	jsr $3a0c4a	            JSR GETTOKREC
.3a0c78	bd 00 00	lda $3a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.3a0c7b	c2 20		rep #$20	            REP #$20
.3a0c7d	29 0f 00	and #$000f	            AND #$000F                  ; Mask off the type code
.3a0c80	2b		pld		            PLD
.3a0c81	ab		plb		            PLB
.3a0c82	28		plp		            PLP
.3a0c83	60		rts		            RTS
.3a0c84					TOKEVAL
.3a0c84	08		php		            PHP
.3a0c85	8b		phb		            PHB
.3a0c86	0b		phd		            PHD
.3a0c87	08		php		            PHP
.3a0c88	c2 20		rep #$20	            REP #$20
.3a0c8a	48		pha		            PHA
.3a0c8b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0c8e	5b		tcd		            TCD
.3a0c8f	68		pla		            PLA
.3a0c90	28		plp		            PLP
.3a0c91	08		php		            PHP
.3a0c92	e2 20		sep #$20	            SEP #$20
.3a0c94	48		pha		            PHA
.3a0c95	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0c97	48		pha		            PHA
.3a0c98	ab		plb		            PLB
.3a0c99	68		pla		            PLA
.3a0c9a	28		plp		            PLP
.3a0c9b	c2 30		rep #$30	            REP #$30
.3a0c9d	20 4a 0c	jsr $3a0c4a	            JSR GETTOKREC
.3a0ca0	bd 04 00	lda $3a0004,x	            LDA #TOKEN.eval,B,X         ; Get the address of the evaluation function
.3a0ca3	2b		pld		            PLD
.3a0ca4	ab		plb		            PLB
.3a0ca5	28		plp		            PLP
.3a0ca6	60		rts		            RTS
.3a0ca7					TOKTYPE
.3a0ca7	08		php		            PHP
.3a0ca8	8b		phb		            PHB
.3a0ca9	0b		phd		            PHD
.3a0caa	08		php		            PHP
.3a0cab	c2 20		rep #$20	            REP #$20
.3a0cad	48		pha		            PHA
.3a0cae	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0cb1	5b		tcd		            TCD
.3a0cb2	68		pla		            PLA
.3a0cb3	28		plp		            PLP
.3a0cb4	08		php		            PHP
.3a0cb5	e2 20		sep #$20	            SEP #$20
.3a0cb7	48		pha		            PHA
.3a0cb8	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0cba	48		pha		            PHA
.3a0cbb	ab		plb		            PLB
.3a0cbc	68		pla		            PLA
.3a0cbd	28		plp		            PLP
.3a0cbe	e2 20		sep #$20	            SEP #$20
.3a0cc0	c2 10		rep #$10	            REP #$10
.3a0cc2	20 4a 0c	jsr $3a0c4a	            JSR GETTOKREC
.3a0cc5	bd 00 00	lda $3a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.3a0cc8	c2 20		rep #$20	            REP #$20
.3a0cca	29 f0 00	and #$00f0	            AND #$00F0                  ; Mask off the type code
.3a0ccd	2b		pld		            PLD
.3a0cce	ab		plb		            PLB
.3a0ccf	28		plp		            PLP
.3a0cd0	60		rts		            RTS
.3a0cd1					TOKARITY
.3a0cd1	08		php		            PHP
.3a0cd2	8b		phb		            PHB
.3a0cd3	0b		phd		            PHD
.3a0cd4	08		php		            PHP
.3a0cd5	c2 20		rep #$20	            REP #$20
.3a0cd7	48		pha		            PHA
.3a0cd8	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0cdb	5b		tcd		            TCD
.3a0cdc	68		pla		            PLA
.3a0cdd	28		plp		            PLP
.3a0cde	08		php		            PHP
.3a0cdf	e2 20		sep #$20	            SEP #$20
.3a0ce1	48		pha		            PHA
.3a0ce2	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0ce4	48		pha		            PHA
.3a0ce5	ab		plb		            PLB
.3a0ce6	68		pla		            PLA
.3a0ce7	28		plp		            PLP
.3a0ce8	e2 20		sep #$20	            SEP #$20
.3a0cea	c2 10		rep #$10	            REP #$10
.3a0cec	20 4a 0c	jsr $3a0c4a	            JSR GETTOKREC
.3a0cef	bd 06 00	lda $3a0006,x	            LDA #TOKEN.arity,B,X        ; Get the arity
.3a0cf2	c2 20		rep #$20	            REP #$20
.3a0cf4	29 ff 00	and #$00ff	            AND #$00FF
.3a0cf7	2b		pld		            PLD
.3a0cf8	ab		plb		            PLB
.3a0cf9	28		plp		            PLP
.3a0cfa	60		rts		            RTS
=$00					TOK_EOL = $00
=$01					TOK_FUNC_OPEN = $01     ; A pseudo-token to push to the operator stack to mark
=$00					TOK_TY_OP = $00         ; The token is an operator
=$10					TOK_TY_CMD = $10        ; The token is a command (e.g. RUN, LIST, etc.)
=$20					TOK_TY_STMNT = $20      ; The token is a statement (e.g. INPUT, PRINT, DIM, etc.)
=$30					TOK_TY_FUNC = $30       ; The token is a function (e.g. SIN, COS, TAB, etc.)
=$40					TOK_TY_PUNCT = $40      ; The token is a punctuation mark (e.g. "(", ")")
=$50					TOK_TY_BYWRD = $50      ; The token is a by-word (e.g. STEP, TO, WEND, etc.)
.3a0cfb					TOKENS
=$80					TOK_PLUS = $80
>3ad010	2b 00				TOKEN_TEXT  .null "+"
>3a0cfb	03				precedence  .byte TOK_TY_OP | 3
>3a0cfc	01				length      .byte len("+")
>3a0cfd	10 d0				name        .word <>TOKEN_TEXT
>3a0cff	e2 27				eval        .word <>OP_PLUS
>3a0d01	02 00				arity       .word <>2
=$81					TOK_MINUS = $81
>3ad012	2d 00				TOKEN_TEXT  .null "-"
>3a0d03	03				precedence  .byte TOK_TY_OP | 3
>3a0d04	01				length      .byte len("-")
>3a0d05	12 d0				name        .word <>TOKEN_TEXT
>3a0d07	22 28				eval        .word <>OP_MINUS
>3a0d09	02 00				arity       .word <>2
=$82					TOK_MULT = $82
>3ad014	2a 00				TOKEN_TEXT  .null "*"
>3a0d0b	02				precedence  .byte TOK_TY_OP | 2
>3a0d0c	01				length      .byte len("*")
>3a0d0d	14 d0				name        .word <>TOKEN_TEXT
>3a0d0f	59 28				eval        .word <>OP_MULTIPLY
>3a0d11	02 00				arity       .word <>2
=$83					TOK_DIVIDE = $83
>3ad016	2f 00				TOKEN_TEXT  .null "/"
>3a0d13	02				precedence  .byte TOK_TY_OP | 2
>3a0d14	01				length      .byte len("/")
>3a0d15	16 d0				name        .word <>TOKEN_TEXT
>3a0d17	90 28				eval        .word <>OP_DIVIDE
>3a0d19	02 00				arity       .word <>2
=$84					TOK_MOD = $84
>3ad018	4d 4f 44 00			TOKEN_TEXT  .null "MOD"
>3a0d1b	02				precedence  .byte TOK_TY_OP | 2
>3a0d1c	03				length      .byte len("MOD")
>3a0d1d	18 d0				name        .word <>TOKEN_TEXT
>3a0d1f	9a 28				eval        .word <>OP_MOD
>3a0d21	02 00				arity       .word <>2
>3ad01c	5e 00				TOKEN_TEXT  .null "^"
>3a0d23	00				precedence  .byte TOK_TY_OP | 0
>3a0d24	01				length      .byte len("^")
>3a0d25	1c d0				name        .word <>TOKEN_TEXT
>3a0d27	ad 28				eval        .word <>OP_POW
>3a0d29	02 00				arity       .word <>2
=$86					TOK_LE = $86
>3ad01e	3c 3d 00			TOKEN_TEXT  .null "<="
>3a0d2b	04				precedence  .byte TOK_TY_OP | 4
>3a0d2c	02				length      .byte len("<=")
>3a0d2d	1e d0				name        .word <>TOKEN_TEXT
>3a0d2f	6b 2a				eval        .word <>OP_LTE
>3a0d31	02 00				arity       .word <>2
=$87					TOK_GE = $87
>3ad021	3e 3d 00			TOKEN_TEXT  .null ">="
>3a0d33	04				precedence  .byte TOK_TY_OP | 4
>3a0d34	02				length      .byte len(">=")
>3a0d35	21 d0				name        .word <>TOKEN_TEXT
>3a0d37	2b 2a				eval        .word <>OP_GTE
>3a0d39	02 00				arity       .word <>2
=$88					TOK_NE = $88
>3ad024	3c 3e 00			TOKEN_TEXT  .null "<>"
>3a0d3b	04				precedence  .byte TOK_TY_OP | 4
>3a0d3c	02				length      .byte len("<>")
>3a0d3d	24 d0				name        .word <>TOKEN_TEXT
>3a0d3f	eb 29				eval        .word <>OP_NE
>3a0d41	02 00				arity       .word <>2
>3ad027	3c 00				TOKEN_TEXT  .null "<"
>3a0d43	04				precedence  .byte TOK_TY_OP | 4
>3a0d44	01				length      .byte len("<")
>3a0d45	27 d0				name        .word <>TOKEN_TEXT
>3a0d47	2b 29				eval        .word <>OP_LT
>3a0d49	02 00				arity       .word <>2
=$8a					TOK_EQ = $8A
>3ad029	3d 00				TOKEN_TEXT  .null "="
>3a0d4b	04				precedence  .byte TOK_TY_OP | 4
>3a0d4c	01				length      .byte len("=")
>3a0d4d	29 d0				name        .word <>TOKEN_TEXT
>3a0d4f	ab 29				eval        .word <>OP_EQ
>3a0d51	02 00				arity       .word <>2
>3ad02b	3e 00				TOKEN_TEXT  .null ">"
>3a0d53	04				precedence  .byte TOK_TY_OP | 4
>3a0d54	01				length      .byte len(">")
>3a0d55	2b d0				name        .word <>TOKEN_TEXT
>3a0d57	6b 29				eval        .word <>OP_GT
>3a0d59	02 00				arity       .word <>2
>3ad02d	4e 4f 54 00			TOKEN_TEXT  .null "NOT"
>3a0d5b	05				precedence  .byte TOK_TY_OP | 5
>3a0d5c	03				length      .byte len("NOT")
>3a0d5d	2d d0				name        .word <>TOKEN_TEXT
>3a0d5f	15 29				eval        .word <>OP_NOT
>3a0d61	01 00				arity       .word <>1
>3ad031	41 4e 44 00			TOKEN_TEXT  .null "AND"
>3a0d63	06				precedence  .byte TOK_TY_OP | 6
>3a0d64	03				length      .byte len("AND")
>3a0d65	31 d0				name        .word <>TOKEN_TEXT
>3a0d67	e7 28				eval        .word <>OP_AND
>3a0d69	02 00				arity       .word <>2
>3ad035	4f 52 00			TOKEN_TEXT  .null "OR"
>3a0d6b	07				precedence  .byte TOK_TY_OP | 7
>3a0d6c	02				length      .byte len("OR")
>3a0d6d	35 d0				name        .word <>TOKEN_TEXT
>3a0d6f	fe 28				eval        .word <>OP_OR
>3a0d71	02 00				arity       .word <>2
=$8f					TOK_LPAREN = $8F
>3ad038	28 00				TOKEN_TEXT  .null "("
>3a0d73	ff				precedence  .byte TOK_TY_PUNCT | $FF
>3a0d74	01				length      .byte len("(")
>3a0d75	38 d0				name        .word <>TOKEN_TEXT
>3a0d77	00 00				eval        .word <>0
>3a0d79	00 00				arity       .word <>0
=$90					TOK_RPAREN = $90
>3ad03a	29 00				TOKEN_TEXT  .null ")"
>3a0d7b	40				precedence  .byte TOK_TY_PUNCT | 0
>3a0d7c	01				length      .byte len(")")
>3a0d7d	3a d0				name        .word <>TOKEN_TEXT
>3a0d7f	00 00				eval        .word <>0
>3a0d81	00 00				arity       .word <>0
=$91					TOK_REM = $91
>3ad03c	52 45 4d 00			TOKEN_TEXT  .null "REM"
>3a0d83	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d84	03				length      .byte len("REM")
>3a0d85	3c d0				name        .word <>TOKEN_TEXT
>3a0d87	7e 41				eval        .word <>S_REM
>3a0d89	00 00				arity       .word <>0
=$92					TOK_PRINT = $92
>3ad040	50 52 49 4e 54 00		TOKEN_TEXT  .null "PRINT"
>3a0d8b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d8c	05				length      .byte len("PRINT")
>3a0d8d	40 d0				name        .word <>TOKEN_TEXT
>3a0d8f	83 45				eval        .word <>S_PRINT
>3a0d91	00 00				arity       .word <>0
=$93					TOK_LET = $93
>3ad046	4c 45 54 00			TOKEN_TEXT  .null "LET"
>3a0d93	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d94	03				length      .byte len("LET")
>3a0d95	46 d0				name        .word <>TOKEN_TEXT
>3a0d97	ce 44				eval        .word <>S_LET
>3a0d99	00 00				arity       .word <>0
>3ad04a	47 4f 54 4f 00			TOKEN_TEXT  .null "GOTO"
>3a0d9b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d9c	04				length      .byte len("GOTO")
>3a0d9d	4a d0				name        .word <>TOKEN_TEXT
>3a0d9f	6e 44				eval        .word <>S_GOTO
>3a0da1	00 00				arity       .word <>0
=$95					TOK_END = $95
>3ad04f	45 4e 44 00			TOKEN_TEXT  .null "END"
>3a0da3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0da4	03				length      .byte len("END")
>3a0da5	4f d0				name        .word <>TOKEN_TEXT
>3a0da7	65 44				eval        .word <>S_END
>3a0da9	00 00				arity       .word <>0
>3ad053	49 46 00			TOKEN_TEXT  .null "IF"
>3a0dab	20				precedence  .byte TOK_TY_STMNT | 0
>3a0dac	02				length      .byte len("IF")
>3a0dad	53 d0				name        .word <>TOKEN_TEXT
>3a0daf	fd 43				eval        .word <>S_IF
>3a0db1	00 00				arity       .word <>0
=$97					TOK_THEN = $97
>3ad056	54 48 45 4e 00			TOKEN_TEXT  .null "THEN"
>3a0db3	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0db4	04				length      .byte len("THEN")
>3a0db5	56 d0				name        .word <>TOKEN_TEXT
>3a0db7	00 00				eval        .word <>0
>3a0db9	00 00				arity       .word <>0
>3ad05b	45 4c 53 45 00			TOKEN_TEXT  .null "ELSE"
>3a0dbb	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0dbc	04				length      .byte len("ELSE")
>3a0dbd	5b d0				name        .word <>TOKEN_TEXT
>3a0dbf	00 00				eval        .word <>0
>3a0dc1	00 00				arity       .word <>0
>3ad060	47 4f 53 55 42 00		TOKEN_TEXT  .null "GOSUB"
>3a0dc3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0dc4	05				length      .byte len("GOSUB")
>3a0dc5	60 d0				name        .word <>TOKEN_TEXT
>3a0dc7	40 43				eval        .word <>S_GOSUB
>3a0dc9	00 00				arity       .word <>0
>3ad066	52 45 54 55 52 4e 00		TOKEN_TEXT  .null "RETURN"
>3a0dcb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0dcc	06				length      .byte len("RETURN")
>3a0dcd	66 d0				name        .word <>TOKEN_TEXT
>3a0dcf	b9 43				eval        .word <>S_RETURN
>3a0dd1	00 00				arity       .word <>0
=$9b					TOK_FOR = $9B
>3ad06d	46 4f 52 00			TOKEN_TEXT  .null "FOR"
>3a0dd3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0dd4	03				length      .byte len("FOR")
>3a0dd5	6d d0				name        .word <>TOKEN_TEXT
>3a0dd7	95 41				eval        .word <>S_FOR
>3a0dd9	00 00				arity       .word <>0
=$9c					TOK_TO = $9C
>3ad071	54 4f 00			TOKEN_TEXT  .null "TO"
>3a0ddb	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0ddc	02				length      .byte len("TO")
>3a0ddd	71 d0				name        .word <>TOKEN_TEXT
>3a0ddf	00 00				eval        .word <>0
>3a0de1	00 00				arity       .word <>0
=$9d					TOK_STEP = $9D
>3ad074	53 54 45 50 00			TOKEN_TEXT  .null "STEP"
>3a0de3	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0de4	04				length      .byte len("STEP")
>3a0de5	74 d0				name        .word <>TOKEN_TEXT
>3a0de7	00 00				eval        .word <>0
>3a0de9	00 00				arity       .word <>0
=$9e					TOK_NEXT = $9E
>3ad079	4e 45 58 54 00			TOKEN_TEXT  .null "NEXT"
>3a0deb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0dec	04				length      .byte len("NEXT")
>3a0ded	79 d0				name        .word <>TOKEN_TEXT
>3a0def	89 42				eval        .word <>S_NEXT
>3a0df1	00 00				arity       .word <>0
=$9f					TOK_DO = $9F
>3ad07e	44 4f 00			TOKEN_TEXT  .null "DO"
>3a0df3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0df4	02				length      .byte len("DO")
>3a0df5	7e d0				name        .word <>TOKEN_TEXT
>3a0df7	8f 41				eval        .word <>S_DO
>3a0df9	00 00				arity       .word <>0
=$a0					TOK_LOOP = $A0
>3ad081	4c 4f 4f 50 00			TOKEN_TEXT  .null "LOOP"
>3a0dfb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0dfc	04				length      .byte len("LOOP")
>3a0dfd	81 d0				name        .word <>TOKEN_TEXT
>3a0dff	92 41				eval        .word <>S_LOOP
>3a0e01	00 00				arity       .word <>0
>3ad086	57 48 49 4c 45 00		TOKEN_TEXT  .null "WHILE"
>3a0e03	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0e04	05				length      .byte len("WHILE")
>3a0e05	86 d0				name        .word <>TOKEN_TEXT
>3a0e07	00 00				eval        .word <>0
>3a0e09	00 00				arity       .word <>0
>3ad08c	55 4e 54 49 4c 00		TOKEN_TEXT  .null "UNTIL"
>3a0e0b	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0e0c	05				length      .byte len("UNTIL")
>3a0e0d	8c d0				name        .word <>TOKEN_TEXT
>3a0e0f	00 00				eval        .word <>0
>3a0e11	00 00				arity       .word <>0
>3ad092	45 58 49 54 00			TOKEN_TEXT  .null "EXIT"
>3a0e13	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e14	04				length      .byte len("EXIT")
>3a0e15	92 d0				name        .word <>TOKEN_TEXT
>3a0e17	8c 41				eval        .word <>S_EXIT
>3a0e19	00 00				arity       .word <>0
>3ad097	43 4c 52 00			TOKEN_TEXT  .null "CLR"
>3a0e1b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e1c	03				length      .byte len("CLR")
>3a0e1d	97 d0				name        .word <>TOKEN_TEXT
>3a0e1f	c4 44				eval        .word <>S_CLR
>3a0e21	00 00				arity       .word <>0
>3ad09b	53 54 4f 50 00			TOKEN_TEXT  .null "STOP"
>3a0e23	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e24	04				length      .byte len("STOP")
>3a0e25	9b d0				name        .word <>TOKEN_TEXT
>3a0e27	5f 41				eval        .word <>S_STOP
>3a0e29	00 00				arity       .word <>0
>3ad0a0	50 4f 4b 45 00			TOKEN_TEXT  .null "POKE"
>3a0e2b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e2c	04				length      .byte len("POKE")
>3a0e2d	a0 d0				name        .word <>TOKEN_TEXT
>3a0e2f	ef 40				eval        .word <>S_POKE
>3a0e31	00 00				arity       .word <>0
>3ad0a5	50 4f 4b 45 57 00		TOKEN_TEXT  .null "POKEW"
>3a0e33	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e34	05				length      .byte len("POKEW")
>3a0e35	a5 d0				name        .word <>TOKEN_TEXT
>3a0e37	85 40				eval        .word <>S_POKEW
>3a0e39	00 00				arity       .word <>0
>3ad0ab	50 4f 4b 45 4c 00		TOKEN_TEXT  .null "POKEL"
>3a0e3b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e3c	05				length      .byte len("POKEL")
>3a0e3d	ab d0				name        .word <>TOKEN_TEXT
>3a0e3f	12 40				eval        .word <>S_POKEL
>3a0e41	00 00				arity       .word <>0
>3ad0b1	43 4c 53 00			TOKEN_TEXT  .null "CLS"
>3a0e43	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e44	03				length      .byte len("CLS")
>3a0e45	b1 d0				name        .word <>TOKEN_TEXT
>3a0e47	0e 40				eval        .word <>S_CLS
>3a0e49	00 00				arity       .word <>0
>3ad0b5	52 45 41 44 00			TOKEN_TEXT  .null "READ"
>3a0e4b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e4c	04				length      .byte len("READ")
>3a0e4d	b5 d0				name        .word <>TOKEN_TEXT
>3a0e4f	ef 3e				eval        .word <>S_READ
>3a0e51	00 00				arity       .word <>0
=$ab					TOK_DATA = $AB
>3ad0ba	44 41 54 41 00			TOKEN_TEXT  .null "DATA"
>3a0e53	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e54	04				length      .byte len("DATA")
>3a0e55	ba d0				name        .word <>TOKEN_TEXT
>3a0e57	01 40				eval        .word <>S_DATA
>3a0e59	00 00				arity       .word <>0
>3ad0bf	52 45 53 54 4f 52 45 00		TOKEN_TEXT  .null "RESTORE"
>3a0e5b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e5c	07				length      .byte len("RESTORE")
>3a0e5d	bf d0				name        .word <>TOKEN_TEXT
>3a0e5f	05 40				eval        .word <>S_RESTORE
>3a0e61	00 00				arity       .word <>0
>3ad0c7	44 49 4d 00			TOKEN_TEXT  .null "DIM"
>3a0e63	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e64	03				length      .byte len("DIM")
>3a0e65	c7 d0				name        .word <>TOKEN_TEXT
>3a0e67	42 3e				eval        .word <>S_DIM
>3a0e69	00 00				arity       .word <>0
>3ad0cb	43 41 4c 4c 00			TOKEN_TEXT  .null "CALL"
>3a0e6b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e6c	04				length      .byte len("CALL")
>3a0e6d	cb d0				name        .word <>TOKEN_TEXT
>3a0e6f	ab 3d				eval        .word <>S_CALL
>3a0e71	00 00				arity       .word <>0
=$af					TOK_NEGATIVE = $AF
>3ad0d0	2d 00				TOKEN_TEXT  .null "-"
>3a0e73	00				precedence  .byte TOK_TY_OP | 0
>3a0e74	01				length      .byte len("-")
>3a0e75	d0 d0				name        .word <>TOKEN_TEXT
>3a0e77	ab 2a				eval        .word <>OP_NEGATIVE
>3a0e79	01 00				arity       .word <>1
>3ad0d2	4c 45 4e 00			TOKEN_TEXT  .null "LEN"
>3a0e7b	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e7c	03				length      .byte len("LEN")
>3a0e7d	d2 d0				name        .word <>TOKEN_TEXT
>3a0e7f	9b 4b				eval        .word <>FN_LEN
>3a0e81	00 00				arity       .word <>0
>3ad0d6	50 45 45 4b 00			TOKEN_TEXT  .null "PEEK"
>3a0e83	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e84	04				length      .byte len("PEEK")
>3a0e85	d6 d0				name        .word <>TOKEN_TEXT
>3a0e87	eb 4b				eval        .word <>FN_PEEK
>3a0e89	00 00				arity       .word <>0
>3ad0db	50 45 45 4b 57 00		TOKEN_TEXT  .null "PEEKW"
>3a0e8b	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e8c	05				length      .byte len("PEEKW")
>3a0e8d	db d0				name        .word <>TOKEN_TEXT
>3a0e8f	b4 4c				eval        .word <>FN_PEEKW
>3a0e91	00 00				arity       .word <>0
>3ad0e1	50 45 45 4b 4c 00		TOKEN_TEXT  .null "PEEKL"
>3a0e93	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e94	05				length      .byte len("PEEKL")
>3a0e95	e1 d0				name        .word <>TOKEN_TEXT
>3a0e97	41 4c				eval        .word <>FN_PEEKL
>3a0e99	00 00				arity       .word <>0
>3ad0e7	43 48 52 24 00			TOKEN_TEXT  .null "CHR$"
>3a0e9b	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e9c	04				length      .byte len("CHR$")
>3a0e9d	e7 d0				name        .word <>TOKEN_TEXT
>3a0e9f	13 4d				eval        .word <>FN_CHR
>3a0ea1	00 00				arity       .word <>0
>3ad0ec	41 53 43 00			TOKEN_TEXT  .null "ASC"
>3a0ea3	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ea4	03				length      .byte len("ASC")
>3a0ea5	ec d0				name        .word <>TOKEN_TEXT
>3a0ea7	68 4d				eval        .word <>FN_ASC
>3a0ea9	00 00				arity       .word <>0
>3ad0f0	53 50 43 00			TOKEN_TEXT  .null "SPC"
>3a0eab	30				precedence  .byte TOK_TY_FUNC | 0
>3a0eac	03				length      .byte len("SPC")
>3a0ead	f0 d0				name        .word <>TOKEN_TEXT
>3a0eaf	ad 4d				eval        .word <>FN_SPC
>3a0eb1	00 00				arity       .word <>0
>3ad0f4	54 41 42 00			TOKEN_TEXT  .null "TAB"
>3a0eb3	30				precedence  .byte TOK_TY_FUNC | 0
>3a0eb4	03				length      .byte len("TAB")
>3a0eb5	f4 d0				name        .word <>TOKEN_TEXT
>3a0eb7	36 4e				eval        .word <>FN_TAB
>3a0eb9	00 00				arity       .word <>0
>3ad0f8	41 42 53 00			TOKEN_TEXT  .null "ABS"
>3a0ebb	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ebc	03				length      .byte len("ABS")
>3a0ebd	f8 d0				name        .word <>TOKEN_TEXT
>3a0ebf	bf 4e				eval        .word <>FN_ABS
>3a0ec1	00 00				arity       .word <>0
>3ad0fc	53 47 4e 00			TOKEN_TEXT  .null "SGN"
>3a0ec3	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ec4	03				length      .byte len("SGN")
>3a0ec5	fc d0				name        .word <>TOKEN_TEXT
>3a0ec7	21 4f				eval        .word <>FN_SGN
>3a0ec9	00 00				arity       .word <>0
>3ad100	48 45 58 24 00			TOKEN_TEXT  .null "HEX$"
>3a0ecb	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ecc	04				length      .byte len("HEX$")
>3a0ecd	00 d1				name        .word <>TOKEN_TEXT
>3a0ecf	0d 4b				eval        .word <>FN_HEX
>3a0ed1	00 00				arity       .word <>0
>3ad105	44 45 43 00			TOKEN_TEXT  .null "DEC"
>3a0ed3	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ed4	03				length      .byte len("DEC")
>3a0ed5	05 d1				name        .word <>TOKEN_TEXT
>3a0ed7	ac 4a				eval        .word <>FN_DEC
>3a0ed9	00 00				arity       .word <>0
>3ad109	53 54 52 24 00			TOKEN_TEXT  .null "STR$"
>3a0edb	30				precedence  .byte TOK_TY_FUNC | 0
>3a0edc	04				length      .byte len("STR$")
>3a0edd	09 d1				name        .word <>TOKEN_TEXT
>3a0edf	5e 4a				eval        .word <>FN_STR
>3a0ee1	00 00				arity       .word <>0
>3ad10e	56 41 4c 00			TOKEN_TEXT  .null "VAL"
>3a0ee3	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ee4	03				length      .byte len("VAL")
>3a0ee5	0e d1				name        .word <>TOKEN_TEXT
>3a0ee7	08 4a				eval        .word <>FN_VAL
>3a0ee9	00 00				arity       .word <>0
>3ad112	4c 45 46 54 24 00		TOKEN_TEXT  .null "LEFT$"
>3a0eeb	30				precedence  .byte TOK_TY_FUNC | 0
>3a0eec	05				length      .byte len("LEFT$")
>3a0eed	12 d1				name        .word <>TOKEN_TEXT
>3a0eef	3f 49				eval        .word <>FN_LEFT
>3a0ef1	00 00				arity       .word <>0
>3ad118	52 49 47 48 54 24 00		TOKEN_TEXT  .null "RIGHT$"
>3a0ef3	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ef4	06				length      .byte len("RIGHT$")
>3a0ef5	18 d1				name        .word <>TOKEN_TEXT
>3a0ef7	5e 48				eval        .word <>FN_RIGHT
>3a0ef9	00 00				arity       .word <>0
>3ad11f	4d 49 44 24 00			TOKEN_TEXT  .null "MID$"
>3a0efb	30				precedence  .byte TOK_TY_FUNC | 0
>3a0efc	04				length      .byte len("MID$")
>3a0efd	1f d1				name        .word <>TOKEN_TEXT
>3a0eff	a9 47				eval        .word <>FN_MID
>3a0f01	00 00				arity       .word <>0
>3ad124	52 55 4e 00			TOKEN_TEXT  .null "RUN"
>3a0f03	10				precedence  .byte TOK_TY_CMD | 0
>3a0f04	03				length      .byte len("RUN")
>3a0f05	24 d1				name        .word <>TOKEN_TEXT
>3a0f07	88 50				eval        .word <>CMD_RUN
>3a0f09	00 00				arity       .word <>0
>3ad128	4e 45 57 00			TOKEN_TEXT  .null "NEW"
>3a0f0b	10				precedence  .byte TOK_TY_CMD | 0
>3a0f0c	03				length      .byte len("NEW")
>3a0f0d	28 d1				name        .word <>TOKEN_TEXT
>3a0f0f	53 50				eval        .word <>CMD_NEW
>3a0f11	00 00				arity       .word <>0
>3ad12c	4c 4f 41 44 00			TOKEN_TEXT  .null "LOAD"
>3a0f13	10				precedence  .byte TOK_TY_CMD | 0
>3a0f14	04				length      .byte len("LOAD")
>3a0f15	2c d1				name        .word <>TOKEN_TEXT
>3a0f17	5c 6c				eval        .word <>CMD_LOAD
>3a0f19	00 00				arity       .word <>0
>3ad131	4c 49 53 54 00			TOKEN_TEXT  .null "LIST"
>3a0f1b	10				precedence  .byte TOK_TY_CMD | 0
>3a0f1c	04				length      .byte len("LIST")
>3a0f1d	31 d1				name        .word <>TOKEN_TEXT
>3a0f1f	9f 50				eval        .word <>CMD_LIST
>3a0f21	00 00				arity       .word <>0
>3ad136	44 49 52 00			TOKEN_TEXT  .null "DIR"
>3a0f23	10				precedence  .byte TOK_TY_CMD | 0
>3a0f24	03				length      .byte len("DIR")
>3a0f25	36 d1				name        .word <>TOKEN_TEXT
>3a0f27	83 69				eval        .word <>CMD_DIR
>3a0f29	00 00				arity       .word <>0
>3ad13a	42 4c 4f 41 44 00		TOKEN_TEXT  .null "BLOAD"
>3a0f2b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f2c	05				length      .byte len("BLOAD")
>3a0f2d	3a d1				name        .word <>TOKEN_TEXT
>3a0f2f	2e 6b				eval        .word <>S_BLOAD
>3a0f31	00 00				arity       .word <>0
>3ad140	42 52 55 4e 00			TOKEN_TEXT  .null "BRUN"
>3a0f33	10				precedence  .byte TOK_TY_CMD | 0
>3a0f34	04				length      .byte len("BRUN")
>3a0f35	40 d1				name        .word <>TOKEN_TEXT
>3a0f37	09 6c				eval        .word <>CMD_BRUN
>3a0f39	00 00				arity       .word <>0
>3ad145	42 53 41 56 45 00		TOKEN_TEXT  .null "BSAVE"
>3a0f3b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f3c	05				length      .byte len("BSAVE")
>3a0f3d	45 d1				name        .word <>TOKEN_TEXT
>3a0f3f	15 6d				eval        .word <>S_BSAVE
>3a0f41	00 00				arity       .word <>0
>3ad14b	44 45 4c 00			TOKEN_TEXT  .null "DEL"
>3a0f43	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f44	03				length      .byte len("DEL")
>3a0f45	4b d1				name        .word <>TOKEN_TEXT
>3a0f47	34 6e				eval        .word <>S_DEL
>3a0f49	00 00				arity       .word <>0
>3ad14f	53 41 56 45 00			TOKEN_TEXT  .null "SAVE"
>3a0f4b	10				precedence  .byte TOK_TY_CMD | 0
>3a0f4c	04				length      .byte len("SAVE")
>3a0f4d	4f d1				name        .word <>TOKEN_TEXT
>3a0f4f	a1 6d				eval        .word <>CMD_SAVE
>3a0f51	00 00				arity       .word <>0
>3ad154	52 45 4e 41 4d 45 00		TOKEN_TEXT  .null "RENAME"
>3a0f53	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f54	06				length      .byte len("RENAME")
>3a0f55	54 d1				name        .word <>TOKEN_TEXT
>3a0f57	aa 6e				eval        .word <>S_RENAME
>3a0f59	00 00				arity       .word <>0
>3ad15b	43 4f 50 59 00			TOKEN_TEXT  .null "COPY"
>3a0f5b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f5c	04				length      .byte len("COPY")
>3a0f5d	5b d1				name        .word <>TOKEN_TEXT
>3a0f5f	ce 6f				eval        .word <>S_COPY
>3a0f61	00 00				arity       .word <>0
>3ad160	4d 4f 4e 49 54 4f 52 00		TOKEN_TEXT  .null "MONITOR"
>3a0f63	10				precedence  .byte TOK_TY_CMD | 0
>3a0f64	07				length      .byte len("MONITOR")
>3a0f65	60 d1				name        .word <>TOKEN_TEXT
>3a0f67	50 50				eval        .word <>CMD_MONITOR
>3a0f69	00 00				arity       .word <>0
>3ad168	47 45 54 00			TOKEN_TEXT  .null "GET"
>3a0f6b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f6c	03				length      .byte len("GET")
>3a0f6d	68 d1				name        .word <>TOKEN_TEXT
>3a0f6f	39 3d				eval        .word <>S_GET
>3a0f71	00 00				arity       .word <>0
>3ad16c	49 4e 50 55 54 00		TOKEN_TEXT  .null "INPUT"
>3a0f73	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f74	05				length      .byte len("INPUT")
>3a0f75	6c d1				name        .word <>TOKEN_TEXT
>3a0f77	49 3c				eval        .word <>S_INPUT
>3a0f79	00 00				arity       .word <>0
>3ad172	53 45 54 42 4f 52 44 45		TOKEN_TEXT  .null "SETBORDER"
>3ad17a	52 00
>3a0f7b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f7c	09				length      .byte len("SETBORDER")
>3a0f7d	72 d1				name        .word <>TOKEN_TEXT
>3a0f7f	6a 2c				eval        .word <>S_SETBORDER
>3a0f81	00 00				arity       .word <>0
>3ad17c	54 45 58 54 43 4f 4c 4f		TOKEN_TEXT  .null "TEXTCOLOR"
>3ad184	52 00
>3a0f83	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f84	09				length      .byte len("TEXTCOLOR")
>3a0f85	7c d1				name        .word <>TOKEN_TEXT
>3a0f87	f7 2b				eval        .word <>S_TEXTCOLOR
>3a0f89	00 00				arity       .word <>0
>3ad186	53 45 54 42 47 43 4f 4c		TOKEN_TEXT  .null "SETBGCOLOR"
>3ad18e	4f 52 00
>3a0f8b	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f8c	0a				length      .byte len("SETBGCOLOR")
>3a0f8d	86 d1				name        .word <>TOKEN_TEXT
>3a0f8f	27 2c				eval        .word <>S_SETBGCOLOR
>3a0f91	00 00				arity       .word <>0
>3ad191	53 45 54 44 41 54 45 00		TOKEN_TEXT  .null "SETDATE"
>3a0f93	20				precedence  .byte TOK_TY_STMNT | 0
>3a0f94	07				length      .byte len("SETDATE")
>3a0f95	91 d1				name        .word <>TOKEN_TEXT
>3a0f97	64 2b				eval        .word <>S_SETDATE
>3a0f99	00 00				arity       .word <>0
>3ad199	47 45 54 44 41 54 45 24		TOKEN_TEXT  .null "GETDATE$"
>3ad1a1	00
>3a0f9b	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f9c	08				length      .byte len("GETDATE$")
>3a0f9d	99 d1				name        .word <>TOKEN_TEXT
>3a0f9f	60 46				eval        .word <>F_GETDATE
>3a0fa1	00 00				arity       .word <>0
>3ad1a2	53 45 54 54 49 4d 45 00		TOKEN_TEXT  .null "SETTIME"
>3a0fa3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fa4	07				length      .byte len("SETTIME")
>3a0fa5	a2 d1				name        .word <>TOKEN_TEXT
>3a0fa7	f9 2a				eval        .word <>S_SETTIME
>3a0fa9	00 00				arity       .word <>0
>3ad1aa	47 45 54 54 49 4d 45 24		TOKEN_TEXT  .null "GETTIME$"
>3ad1b2	00
>3a0fab	30				precedence  .byte TOK_TY_FUNC | 0
>3a0fac	08				length      .byte len("GETTIME$")
>3a0fad	aa d1				name        .word <>TOKEN_TEXT
>3a0faf	ca 46				eval        .word <>F_GETTIME
>3a0fb1	00 00				arity       .word <>0
>3ad1b3	47 52 41 50 48 49 43 53		TOKEN_TEXT  .null "GRAPHICS"
>3ad1bb	00
>3a0fb3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fb4	08				length      .byte len("GRAPHICS")
>3a0fb5	b3 d1				name        .word <>TOKEN_TEXT
>3a0fb7	af 2d				eval        .word <>S_GRAPHICS
>3a0fb9	00 00				arity       .word <>0
>3ad1bc	53 45 54 43 4f 4c 4f 52		TOKEN_TEXT  .null "SETCOLOR"
>3ad1c4	00
>3a0fbb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fbc	08				length      .byte len("SETCOLOR")
>3a0fbd	bc d1				name        .word <>TOKEN_TEXT
>3a0fbf	e3 2c				eval        .word <>S_SETCOLOR
>3a0fc1	00 00				arity       .word <>0
>3ad1c5	42 49 54 4d 41 50 00		TOKEN_TEXT  .null "BITMAP"
>3a0fc3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fc4	06				length      .byte len("BITMAP")
>3a0fc5	c5 d1				name        .word <>TOKEN_TEXT
>3a0fc7	e9 2e				eval        .word <>S_BITMAP
>3a0fc9	00 00				arity       .word <>0
>3ad1cc	43 4c 52 42 49 54 4d 41		TOKEN_TEXT  .null "CLRBITMAP"
>3ad1d4	50 00
>3a0fcb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fcc	09				length      .byte len("CLRBITMAP")
>3a0fcd	cc d1				name        .word <>TOKEN_TEXT
>3a0fcf	f1 2f				eval        .word <>S_CLRBITMAP
>3a0fd1	00 00				arity       .word <>0
>3ad1d6	50 4c 4f 54 00			TOKEN_TEXT  .null "PLOT"
>3a0fd3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fd4	04				length      .byte len("PLOT")
>3a0fd5	d6 d1				name        .word <>TOKEN_TEXT
>3a0fd7	4e 31				eval        .word <>S_PLOT
>3a0fd9	00 00				arity       .word <>0
>3ad1db	4c 49 4e 45 00			TOKEN_TEXT  .null "LINE"
>3a0fdb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fdc	04				length      .byte len("LINE")
>3a0fdd	db d1				name        .word <>TOKEN_TEXT
>3a0fdf	bf 31				eval        .word <>S_LINE
>3a0fe1	00 00				arity       .word <>0
>3ad1e0	46 49 4c 4c 00			TOKEN_TEXT  .null "FILL"
>3a0fe3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fe4	04				length      .byte len("FILL")
>3a0fe5	e0 d1				name        .word <>TOKEN_TEXT
>3a0fe7	58 32				eval        .word <>S_FILL
>3a0fe9	00 00				arity       .word <>0
>3ad1e5	53 50 52 49 54 45 00		TOKEN_TEXT  .null "SPRITE"
>3a0feb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0fec	06				length      .byte len("SPRITE")
>3a0fed	e5 d1				name        .word <>TOKEN_TEXT
>3a0fef	94 33				eval        .word <>S_SPRITE
>3a0ff1	00 00				arity       .word <>0
>3ad1ec	53 50 52 49 54 45 41 54		TOKEN_TEXT  .null "SPRITEAT"
>3ad1f4	00
>3a0ff3	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ff4	08				length      .byte len("SPRITEAT")
>3a0ff5	ec d1				name        .word <>TOKEN_TEXT
>3a0ff7	32 34				eval        .word <>S_SPRITEAT
>3a0ff9	00 00				arity       .word <>0
>3ad1f5	53 50 52 49 54 45 53 48		TOKEN_TEXT  .null "SPRITESHOW"
>3ad1fd	4f 57 00
>3a0ffb	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ffc	0a				length      .byte len("SPRITESHOW")
>3a0ffd	f5 d1				name        .word <>TOKEN_TEXT
>3a0fff	80 34				eval        .word <>S_SPRITESHOW
>3a1001	00 00				arity       .word <>0
>3ad200	54 49 4c 45 53 45 54 00		TOKEN_TEXT  .null "TILESET"
>3a1003	20				precedence  .byte TOK_TY_STMNT | 0
>3a1004	07				length      .byte len("TILESET")
>3a1005	00 d2				name        .word <>TOKEN_TEXT
>3a1007	b7 35				eval        .word <>S_TILESET
>3a1009	00 00				arity       .word <>0
>3ad208	54 49 4c 45 4d 41 50 00		TOKEN_TEXT  .null "TILEMAP"
>3a100b	20				precedence  .byte TOK_TY_STMNT | 0
>3a100c	07				length      .byte len("TILEMAP")
>3a100d	08 d2				name        .word <>TOKEN_TEXT
>3a100f	35 36				eval        .word <>S_TILEMAP
>3a1011	00 00				arity       .word <>0
>3ad210	54 49 4c 45 53 48 4f 57		TOKEN_TEXT  .null "TILESHOW"
>3ad218	00
>3a1013	20				precedence  .byte TOK_TY_STMNT | 0
>3a1014	08				length      .byte len("TILESHOW")
>3a1015	10 d2				name        .word <>TOKEN_TEXT
>3a1017	a7 36				eval        .word <>S_TILESHOW
>3a1019	00 00				arity       .word <>0
>3ad219	54 49 4c 45 41 54 00		TOKEN_TEXT  .null "TILEAT"
>3a101b	20				precedence  .byte TOK_TY_STMNT | 0
>3a101c	06				length      .byte len("TILEAT")
>3a101d	19 d2				name        .word <>TOKEN_TEXT
>3a101f	e4 36				eval        .word <>S_TILEAT
>3a1021	00 00				arity       .word <>0
>3ad220	4d 45 4d 43 4f 50 59 00		TOKEN_TEXT  .null "MEMCOPY"
>3a1023	20				precedence  .byte TOK_TY_STMNT | 0
>3a1024	07				length      .byte len("MEMCOPY")
>3a1025	20 d2				name        .word <>TOKEN_TEXT
>3a1027	14 3a				eval        .word <>S_MEMCOPY
>3a1029	00 00				arity       .word <>0
=$e6					TOK_LINEAR = $E6
>3ad228	4c 49 4e 45 41 52 00		TOKEN_TEXT  .null "LINEAR"
>3a102b	50				precedence  .byte TOK_TY_BYWRD | 0
>3a102c	06				length      .byte len("LINEAR")
>3a102d	28 d2				name        .word <>TOKEN_TEXT
>3a102f	00 00				eval        .word <>0
>3a1031	00 00				arity       .word <>0
=$e7					TOK_RECT = $E7
>3ad22f	52 45 43 54 00			TOKEN_TEXT  .null "RECT"
>3a1033	50				precedence  .byte TOK_TY_BYWRD | 0
>3a1034	04				length      .byte len("RECT")
>3a1035	2f d2				name        .word <>TOKEN_TEXT
>3a1037	00 00				eval        .word <>0
>3a1039	00 00				arity       .word <>0
>3ad234	4c 4f 43 41 54 45 00		TOKEN_TEXT  .null "LOCATE"
>3a103b	20				precedence  .byte TOK_TY_STMNT | 0
>3a103c	06				length      .byte len("LOCATE")
>3a103d	34 d2				name        .word <>TOKEN_TEXT
>3a103f	29 3c				eval        .word <>S_LOCATE
>3a1041	00 00				arity       .word <>0
>3ad23b	49 4e 54 00			TOKEN_TEXT  .null "INT"
>3a1043	30				precedence  .byte TOK_TY_FUNC | 0
>3a1044	03				length      .byte len("INT")
>3a1045	3b d2				name        .word <>TOKEN_TEXT
>3a1047	77 4f				eval        .word <>FN_INT
>3a1049	00 00				arity       .word <>0
>3ad23f	52 4e 44 00			TOKEN_TEXT  .null "RND"
>3a104b	30				precedence  .byte TOK_TY_FUNC | 0
>3a104c	03				length      .byte len("RND")
>3a104d	3f d2				name        .word <>TOKEN_TEXT
>3a104f	2f 47				eval        .word <>FN_RND
>3a1051	00 00				arity       .word <>0
>3ad243	53 49 4e 00			TOKEN_TEXT  .null "SIN"
>3a1053	30				precedence  .byte TOK_TY_FUNC | 0
>3a1054	03				length      .byte len("SIN")
>3a1055	43 d2				name        .word <>TOKEN_TEXT
>3a1057	8a 4f				eval        .word <>FN_SIN
>3a1059	00 00				arity       .word <>0
>3ad247	43 4f 53 00			TOKEN_TEXT  .null "COS"
>3a105b	30				precedence  .byte TOK_TY_FUNC | 0
>3a105c	03				length      .byte len("COS")
>3a105d	47 d2				name        .word <>TOKEN_TEXT
>3a105f	a0 4f				eval        .word <>FN_COS
>3a1061	00 00				arity       .word <>0
>3ad24b	54 41 4e 00			TOKEN_TEXT  .null "TAN"
>3a1063	30				precedence  .byte TOK_TY_FUNC | 0
>3a1064	03				length      .byte len("TAN")
>3a1065	4b d2				name        .word <>TOKEN_TEXT
>3a1067	b6 4f				eval        .word <>FN_TAN
>3a1069	00 00				arity       .word <>0
>3ad24f	4c 4e 00			TOKEN_TEXT  .null "LN"
>3a106b	30				precedence  .byte TOK_TY_FUNC | 0
>3a106c	02				length      .byte len("LN")
>3a106d	4f d2				name        .word <>TOKEN_TEXT
>3a106f	cc 4f				eval        .word <>FN_LN
>3a1071	00 00				arity       .word <>0
>3ad252	41 43 4f 53 00			TOKEN_TEXT  .null "ACOS"
>3a1073	30				precedence  .byte TOK_TY_FUNC | 0
>3a1074	04				length      .byte len("ACOS")
>3a1075	52 d2				name        .word <>TOKEN_TEXT
>3a1077	e2 4f				eval        .word <>FN_ACOS
>3a1079	00 00				arity       .word <>0
>3ad257	41 53 49 4e 00			TOKEN_TEXT  .null "ASIN"
>3a107b	30				precedence  .byte TOK_TY_FUNC | 0
>3a107c	04				length      .byte len("ASIN")
>3a107d	57 d2				name        .word <>TOKEN_TEXT
>3a107f	f8 4f				eval        .word <>FN_ASIN
>3a1081	00 00				arity       .word <>0
>3ad25c	41 54 41 4e 00			TOKEN_TEXT  .null "ATAN"
>3a1083	30				precedence  .byte TOK_TY_FUNC | 0
>3a1084	04				length      .byte len("ATAN")
>3a1085	5c d2				name        .word <>TOKEN_TEXT
>3a1087	0e 50				eval        .word <>FN_ATAN
>3a1089	00 00				arity       .word <>0
>3ad261	45 58 50 00			TOKEN_TEXT  .null "EXP"
>3a108b	30				precedence  .byte TOK_TY_FUNC | 0
>3a108c	03				length      .byte len("EXP")
>3a108d	61 d2				name        .word <>TOKEN_TEXT
>3a108f	24 50				eval        .word <>FN_EXP
>3a1091	00 00				arity       .word <>0
>3ad265	53 51 52 00			TOKEN_TEXT  .null "SQR"
>3a1093	30				precedence  .byte TOK_TY_FUNC | 0
>3a1094	03				length      .byte len("SQR")
>3a1095	65 d2				name        .word <>TOKEN_TEXT
>3a1097	3a 50				eval        .word <>FN_SQR
>3a1099	00 00				arity       .word <>0
>3ad269	49 4e 4b 45 59 00		TOKEN_TEXT  .null "INKEY"
>3a109b	30				precedence  .byte TOK_TY_FUNC | 0
>3a109c	05				length      .byte len("INKEY")
>3a109d	69 d2				name        .word <>TOKEN_TEXT
>3a109f	85 47				eval        .word <>FN_INKEY
>3a10a1	00 00				arity       .word <>0
>3a10a3	00 00 00 00 00 00 00 00		            .word 0, 0, 0, 0

;******  Return to file: src\basic816.s


;******  Processing file: src\heap.s

>08b7					ALLOCATED   .long ?     ; Pointer to the most recently allocated object
>08ba					HEAP        .long ?     ; Pointer to the top of the heap (next empty byte)
>08bd					FREED       .long ?     ; Pointer to a linked list of freed heap objects
>08c0					CURRBLOCK   .long ?     ; Pointer to the current heap allocated block
>08c3					CURRHEADER  .long ?     ; Pointer to the header of the current block
>08c6					CURREND     .long ?     ; Pointer to the byte immediately after the current block
>08c9					CURRFREED   .long ?     ; Pointer to the current freed block
>08cc					FREEDEND    .long ?     ; Pointer to the byte immediately after the current freed block
>08cf					LASTFREED   .long ?     ;
.0000					HEAPOBJ
>0000					TYPE        .byte ?     ; Code for the type of object allocated
>0001					COUNT       .byte ?     ; Number of references to the heap object
>0002					NEXT        .long ?     ; Pointer to the next object in the list (used when freed)
>0005					END         .long ?     ; Pointer to the next byte after the block
.3a10ab					INITHEAP
.3a10ab	08		php		            PHP
.3a10ac	0b		phd		            PHD
.3a10ad	08		php		            PHP
.3a10ae	c2 20		rep #$20	            REP #$20
.3a10b0	48		pha		            PHA
.3a10b1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a10b4	5b		tcd		            TCD
.3a10b5	68		pla		            PLA
.3a10b6	28		plp		            PLP
.3a10b7	c2 30		rep #$30	            REP #$30
.3a10b9	a9 ff ff	lda #$ffff	            LDA #<>HEAP_TOP         ; Set the HEAP to the top
.3a10bc	85 ba		sta $08ba	            STA HEAP
.3a10be	e2 20		sep #$20	            SEP #$20
.3a10c0	a9 37		lda #$37	            LDA #`HEAP_TOP
.3a10c2	85 bc		sta $08bc	            STA HEAP+2
.3a10c4	c2 20		rep #$20	            REP #$20
.3a10c6	64 b7		stz $08b7	            STZ ALLOCATED           ; And clear the pointer to the allocated objects
.3a10c8	64 bd		stz $08bd	            STZ FREED               ; as well as the list of freed objects
.3a10ca	e2 20		sep #$20	            SEP #$20
.3a10cc	64 b9		stz $08b9	            STZ ALLOCATED+2
.3a10ce	64 bf		stz $08bf	            STZ FREED+2
.3a10d0	2b		pld		            PLD
.3a10d1	28		plp		            PLP
.3a10d2	60		rts		            RTS
.3a10d3					ALLOC
.3a10d3	5a		phy		            PHY
.3a10d4	08		php		            PHP
.3a10d5	e2 20		sep #$20	            SEP #$20
.3a10d7	85 ea		sta $08ea	            STA TOFINDTYPE      ; Save the type of the block to TOFINDTYPE
.3a10d9	c2 10		rep #$10	            REP #$10
.3a10db	86 8f		stx $088f	            STX MCOUNT           ; And the length of the block needed to MCOUNT
.3a10dd	c2 20		rep #$20	            REP #$20
.3a10df	a5 0e		lda $080e	            LDA SCRATCH+2
.3a10e1	48		pha		            PHA
.3a10e2	a5 0c		lda $080c	            LDA SCRATCH
.3a10e4	48		pha		            PHA
.3a10e5	a5 12		lda $0812	            LDA SCRATCH2+2
.3a10e7	48		pha		            PHA
.3a10e8	a5 10		lda $0810	            LDA SCRATCH2
.3a10ea	48		pha		            PHA
.3a10eb	20 83 11	jsr $3a1183	            JSR ALLOCFREED
.3a10ee	b0 03		bcs $3a10f3	            BCS done            ; Return, if we got something back
.3a10f0	20 07 11	jsr $3a1107	            JSR ALLOCHEAP
.3a10f3					done
.3a10f3	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a10f6	c2 20		rep #$20	            REP #$20
.3a10f8	68		pla		            PLA
.3a10f9	85 10		sta $0810	            STA SCRATCH2
.3a10fb	68		pla		            PLA
.3a10fc	85 12		sta $0812	            STA SCRATCH2+2
.3a10fe	68		pla		            PLA
.3a10ff	85 0c		sta $080c	            STA SCRATCH
.3a1101	68		pla		            PLA
.3a1102	85 0e		sta $080e	            STA SCRATCH+2
.3a1104	28		plp		            PLP
.3a1105	7a		ply		            PLY
.3a1106	60		rts		            RTS
.3a1107					ALLOCHEAP
.3a1107	08		php		            PHP
.3a1108	0b		phd		            PHD
.3a1109	08		php		            PHP
.3a110a	c2 20		rep #$20	            REP #$20
.3a110c	48		pha		            PHA
.3a110d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1110	5b		tcd		            TCD
.3a1111	68		pla		            PLA
.3a1112	28		plp		            PLP
.3a1113	e2 20		sep #$20	            SEP #$20
.3a1115	a6 8f		ldx $088f	            LDX MCOUNT
.3a1117	ca		dex		            DEX
.3a1118	86 0c		stx $080c	            STX SCRATCH             ; SCRATCH := size - 1
.3a111a	e8		inx		            INX
.3a111b	c2 30		rep #$30	            REP #$30
.3a111d	38		sec		            SEC
.3a111e	a5 ba		lda $08ba	            LDA HEAP
.3a1120	e5 0c		sbc $080c	            SBC SCRATCH
.3a1122	85 c0		sta $08c0	            STA CURRBLOCK
.3a1124	e2 20		sep #$20	            SEP #$20
.3a1126	a5 bc		lda $08bc	            LDA HEAP+2
.3a1128	e9 00		sbc #$00	            SBC #0
.3a112a	85 c2		sta $08c2	            STA CURRBLOCK+2
.3a112c	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a112f	e2 20		sep #$20	            SEP #$20
.3a1131	a5 ea		lda $08ea	            LDA TOFINDTYPE
.3a1133	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE       ; Set the type of the object
.3a1136	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1138	a9 00		lda #$00	            LDA #0                  ; Set the count to zero
.3a113a	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.3a113d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a113f	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1142	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1144	c2 20		rep #$20	            REP #$20
.3a1146	a9 00 00	lda #$0000	            LDA #0
.3a1149	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a114b	c2 20		rep #$20	            REP #$20
.3a114d	18		clc		            CLC
.3a114e	a5 ba		lda $08ba	            LDA HEAP
.3a1150	69 01 00	adc #$0001	            ADC #1
.3a1153	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; To get the address of the next byte
.3a1156	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y      ; after the block
.3a1158	e2 20		sep #$20	            SEP #$20
.3a115a	c8		iny		            INY
.3a115b	c8		iny		            INY
.3a115c	a5 bc		lda $08bc	            LDA HEAP+2
.3a115e	69 00		adc #$00	            ADC #0
.3a1160	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1162	c2 20		rep #$20	            REP #$20
.3a1164	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a1166	85 b7		sta $08b7	            STA ALLOCATED
.3a1168	e2 20		sep #$20	            SEP #$20
.3a116a	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a116c	85 b9		sta $08b9	            STA ALLOCATED+2
.3a116e	c2 20		rep #$20	            REP #$20
.3a1170	38		sec		            SEC                     ; Move the HEAP pointer to the first free byte under the header
.3a1171	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1173	e9 01 00	sbc #$0001	            SBC #1
.3a1176	85 ba		sta $08ba	            STA HEAP
.3a1178	e2 20		sep #$20	            SEP #$20
.3a117a	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a117c	e9 00		sbc #$00	            SBC #0
.3a117e	85 bc		sta $08bc	            STA HEAP+2
.3a1180	2b		pld		            PLD
.3a1181	28		plp		            PLP
.3a1182	60		rts		            RTS
.3a1183					ALLOCFREED
.3a1183	08		php		            PHP
.3a1184	0b		phd		            PHD
.3a1185	08		php		            PHP
.3a1186	c2 20		rep #$20	            REP #$20
.3a1188	48		pha		            PHA
.3a1189	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a118c	5b		tcd		            TCD
.3a118d	68		pla		            PLA
.3a118e	28		plp		            PLP
.3a118f	c2 30		rep #$30	            REP #$30
.3a1191	c2 20		rep #$20	            REP #$20
.3a1193	a5 bd		lda $08bd	            LDA FREED
.3a1195	85 c9		sta $08c9	            STA CURRFREED
.3a1197	e2 20		sep #$20	            SEP #$20
.3a1199	a5 bf		lda $08bf	            LDA FREED+2
.3a119b	85 cb		sta $08cb	            STA CURRFREED+2
.3a119d	a5 c9		lda $08c9	loop        LDA CURRFREED           ; Has anything been freed?
.3a119f	d0 17		bne $3a11b8	            BNE has_block           ; Yes: check to see if there's a big enough block
.3a11a1	e2 20		sep #$20	            SEP #$20
.3a11a3	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a11a5	d0 11		bne $3a11b8	            BNE has_block           ; Yes: check to see if there's a big enough block
.3a11a7	c2 20		rep #$20	            REP #$20
.3a11a9	a9 00 00	lda #$0000	            LDA #<>0
.3a11ac	85 cf		sta $08cf	            STA LASTFREED
.3a11ae	e2 20		sep #$20	            SEP #$20
.3a11b0	a9 00		lda #$00	            LDA #`0
.3a11b2	85 d1		sta $08d1	            STA LASTFREED+2
.3a11b4	2b		pld		ret_false   PLD                     ; Return that we didn't find anything
.3a11b5	28		plp		            PLP
.3a11b6	18		clc		            CLC
.3a11b7	60		rts		            RTS
.3a11b8					has_block
.3a11b8	c2 20		rep #$20	            REP #$20
.3a11ba	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.3a11bd	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a11bf	85 cc		sta $08cc	            STA FREEDEND
.3a11c1	e2 20		sep #$20	            SEP #$20
.3a11c3	c8		iny		            INY
.3a11c4	c8		iny		            INY
.3a11c5	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a11c7	85 ce		sta $08ce	            STA FREEDEND+2
.3a11c9	c2 20		rep #$20	            REP #$20
.3a11cb	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required
.3a11cc	a5 c9		lda $08c9	            LDA CURRFREED
.3a11ce	65 8f		adc $088f	            ADC MCOUNT
.3a11d0	85 0c		sta $080c	            STA SCRATCH
.3a11d2	e2 20		sep #$20	            SEP #$20
.3a11d4	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a11d6	69 00		adc #$00	            ADC #0
.3a11d8	85 0e		sta $080e	            STA SCRATCH+2
.3a11da	c2 20		rep #$20	            REP #$20
.3a11dc	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required + size of header
.3a11dd	a5 0c		lda $080c	            LDA SCRATCH                 ; (that is, it's a pointer to the byte immediately after the block desired)
.3a11df	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)
.3a11e2	85 0c		sta $080c	            STA SCRATCH
.3a11e4	e2 20		sep #$20	            SEP #$20
.3a11e6	a5 0e		lda $080e	            LDA SCRATCH+2
.3a11e8	69 00		adc #$00	            ADC #0
.3a11ea	85 0e		sta $080e	            STA SCRATCH+2
.3a11ec	c2 20		rep #$20	            REP #$20
.3a11ee	a5 0c		lda $080c	            LDA SCRATCH                 ; Is SCRATCH == FREEDEND?
.3a11f0	c5 cc		cmp $08cc	            CMP FREEDEND
.3a11f2	d0 28		bne $3a121c	            BNE not_exact               ; No: check if this block is bigger than needed
.3a11f4	e2 20		sep #$20	            SEP #$20
.3a11f6	a5 0e		lda $080e	            LDA SCRATCH+2
.3a11f8	c5 ce		cmp $08ce	            CMP FREEDEND+2
.3a11fa	d0 20		bne $3a121c	            BNE not_exact
.3a11fc	c2 20		rep #$20	            REP #$20
.3a11fe	a5 cf		lda $08cf	            LDA LASTFREED               ; LASTFREED == 0?
.3a1200	d0 5d		bne $3a125f	            BNE adj_last1               ; No: point LASTFREED->NEXT to skip this block
.3a1202	e2 20		sep #$20	            SEP #$20
.3a1204	a5 d1		lda $08d1	            LDA LASTFREED+2
.3a1206	d0 57		bne $3a125f	            BNE adj_last1
.3a1208	c2 20		rep #$20	            REP #$20
.3a120a	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a120d	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a120f	85 bd		sta $08bd	            STA FREED
.3a1211	e2 20		sep #$20	            SEP #$20
.3a1213	c8		iny		            INY
.3a1214	c8		iny		            INY
.3a1215	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1217	85 bf		sta $08bf	            STA FREED+2
.3a1219	4c c0 12	jmp $3a12c0	            JMP init_block              ; And return CURRFREED as our reallocated memory
.3a121c					not_exact
.3a121c	c2 20		rep #$20	            REP #$20
.3a121e	a5 0c		lda $080c	            LDA SCRATCH                 ; Add a buffer to the room needed
.3a1220	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)          ; So we have room to track the memory still freed
.3a1223	85 10		sta $0810	            STA SCRATCH2
.3a1225	e2 20		sep #$20	            SEP #$20
.3a1227	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1229	69 00		adc #$00	            ADC #0
.3a122b	85 12		sta $0812	            STA SCRATCH2+2
.3a122d	e2 20		sep #$20	            SEP #$20
.3a122f	a5 c6		lda $08c6	            LDA CURREND                 ; Is CURREND > SCRATCH2
.3a1231	c5 10		cmp $0810	            CMP SCRATCH2
.3a1233	b0 3e		bcs $3a1273	            BGE has_room                ; Yes: there is room in this block to allocate some memory
.3a1235	90 08		bcc $3a123f	            BLT try_next
.3a1237	c2 20		rep #$20	            REP #$20
.3a1239	a5 c6		lda $08c6	            LDA CURREND
.3a123b	c5 10		cmp $0810	            CMP SCRATCH2
.3a123d	b0 34		bcs $3a1273	            BGE has_room
.3a123f					try_next
.3a123f	c2 20		rep #$20	            REP #$20
.3a1241	a5 c9		lda $08c9	            LDA CURRFREED
.3a1243	85 cf		sta $08cf	            STA LASTFREED
.3a1245	e2 20		sep #$20	            SEP #$20
.3a1247	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a1249	85 d1		sta $08d1	            STA LASTFREED+2
.3a124b	c2 20		rep #$20	            REP #$20
.3a124d	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1250	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.3a1252	85 c9		sta $08c9	            STA CURRFREED
.3a1254	e2 20		sep #$20	            SEP #$20
.3a1256	c8		iny		            INY
.3a1257	c8		iny		            INY
.3a1258	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.3a125a	85 cb		sta $08cb	            STA CURRFREED+2
.3a125c	4c 9d 11	jmp $3a119d	            JMP loop                                    ; And try the next header
.3a125f					adj_last1
.3a125f	c2 20		rep #$20	            REP #$20
.3a1261	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := CURRFREED->NEXT
.3a1264	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1266	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a1268	e2 20		sep #$20	            SEP #$20
.3a126a	c8		iny		            INY
.3a126b	c8		iny		            INY
.3a126c	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a126e	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a1270	4c c0 12	jmp $3a12c0	            JMP init_block              ; And get CURRFREED ready to return
.3a1273					has_room
.3a1273	c2 20		rep #$20	            REP #$20
.3a1275	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END            ; SCRATCH->END := CURRFREED->END
.3a1278	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a127a	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a127c	e2 20		sep #$20	            SEP #$20
.3a127e	c8		iny		            INY
.3a127f	c8		iny		            INY
.3a1280	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1282	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a1284	c2 20		rep #$20	            REP #$20
.3a1286	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; CURREND->NEXT := CURRFREED->NEXT
.3a1289	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a128b	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a128d	e2 20		sep #$20	            SEP #$20
.3a128f	c8		iny		            INY
.3a1290	c8		iny		            INY
.3a1291	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1293	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a1295	c2 20		rep #$20	            REP #$20
.3a1297	a5 cf		lda $08cf	            LDA LASTFREED               ; Is this the first object we've examined?
.3a1299	d0 14		bne $3a12af	            BNE adj_last2               ; No: we'll need to adjust the previously examined block
.3a129b	e2 20		sep #$20	            SEP #$20
.3a129d	a5 cf		lda $08cf	            LDA LASTFREED
.3a129f	d0 0e		bne $3a12af	            BNE adj_last2
.3a12a1	c2 20		rep #$20	            REP #$20
.3a12a3	a5 0c		lda $080c	            LDA SCRATCH
.3a12a5	85 bd		sta $08bd	            STA FREED
.3a12a7	e2 20		sep #$20	            SEP #$20
.3a12a9	a5 0e		lda $080e	            LDA SCRATCH+2
.3a12ab	85 bf		sta $08bf	            STA FREED+2
.3a12ad	80 11		bra $3a12c0	            BRA init_block              ; ... and return the block we've sliced off
.3a12af					adj_last2
.3a12af	c2 20		rep #$20	            REP #$20
.3a12b1	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := SCRATCH
.3a12b4	a5 0c		lda $080c	            LDA SCRATCH                 ; (point the previous freed block to the newly sliced
.3a12b6	97 cf		sta [$08cf],y	            STA [LASTFREED],Y           ;  off part of the current block)
.3a12b8	e2 20		sep #$20	            SEP #$20
.3a12ba	c8		iny		            INY
.3a12bb	c8		iny		            INY
.3a12bc	a5 0e		lda $080e	            LDA SCRATCH+2
.3a12be	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a12c0					init_block
.3a12c0	c2 20		rep #$20	            REP #$20
.3a12c2	a5 c9		lda $08c9	            LDA CURRFREED
.3a12c4	85 c3		sta $08c3	            STA CURRHEADER
.3a12c6	e2 20		sep #$20	            SEP #$20
.3a12c8	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a12ca	85 c5		sta $08c5	            STA CURRHEADER+2
.3a12cc	c2 20		rep #$20	            REP #$20
.3a12ce	a5 c3		lda $08c3	            LDA CURRHEADER
.3a12d0	85 b7		sta $08b7	            STA ALLOCATED
.3a12d2	e2 20		sep #$20	            SEP #$20
.3a12d4	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a12d6	85 b9		sta $08b9	            STA ALLOCATED+2
.3a12d8	c2 20		rep #$20	            REP #$20
.3a12da	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; Set CURRHEADER->END to the byte after the block
.3a12dd	a5 0c		lda $080c	            LDA SCRATCH
.3a12df	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12e1	e2 20		sep #$20	            SEP #$20
.3a12e3	c8		iny		            INY
.3a12e4	c8		iny		            INY
.3a12e5	a5 0e		lda $080e	            LDA SCRATCH+2
.3a12e7	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12e9	c2 20		rep #$20	            REP #$20
.3a12eb	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Set CURRHEADER->NEXT to NULL
.3a12ee	a9 00 00	lda #$0000	            LDA #0
.3a12f1	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12f3	e2 20		sep #$20	            SEP #$20
.3a12f5	c8		iny		            INY
.3a12f6	c8		iny		            INY
.3a12f7	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12f9	e2 20		sep #$20	            SEP #$20
.3a12fb	a5 ea		lda $08ea	            LDA TOFINDTYPE          ; Get the type code back
.3a12fd	e2 20		sep #$20	            SEP #$20
.3a12ff	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE
.3a1302	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1304	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT      ; Set its reference count to 0
.3a1307	a9 00		lda #$00	            LDA #0
.3a1309	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a130b	2b		pld		done        PLD
.3a130c	28		plp		            PLP
.3a130d	38		sec		            SEC
.3a130e	60		rts		            RTS
.3a130f					HEAP_GETHED
.3a130f	08		php		            PHP
.3a1310	c2 20		rep #$20	            REP #$20
.3a1312	38		sec		            SEC
.3a1313	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a1315	e9 08 00	sbc #$0008	            SBC #size(HEAPOBJ)
.3a1318	85 c3		sta $08c3	            STA CURRHEADER
.3a131a	e2 20		sep #$20	            SEP #$20
.3a131c	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a131e	e9 00		sbc #$00	            SBC #0
.3a1320	85 c5		sta $08c5	            STA CURRHEADER+2
.3a1322	28		plp		            PLP
.3a1323	60		rts		            RTS
.3a1324					HEAP_ADDREF
.3a1324	08		php		            PHP
.3a1325	e2 20		sep #$20	            SEP #$20
.3a1327	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1329	f0 04		beq $3a132f	            BEQ chk_null
.3a132b	c9 38		cmp #$38	            CMP #`(HEAP_TOP + 1)
.3a132d	b0 12		bcs $3a1341	            BGE out_of_bnds
.3a132f					chk_null
.3a132f	c2 20		rep #$20	            REP #$20
.3a1331	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1333	f0 0c		beq $3a1341	            BEQ out_of_bnds
.3a1335					is_ok
.3a1335	e2 20		sep #$20	            SEP #$20
.3a1337	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.3a133a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a133c	1a		inc a		            INC A
.3a133d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a133f	28		plp		            PLP
.3a1340	60		rts		            RTS
.3a1341	00		brk #		out_of_bnds BRK
.3a1342	ea		nop		            NOP
.3a1343					HEAP_REMREF
.3a1343	08		php		            PHP
.3a1344	e2 20		sep #$20	            SEP #$20
.3a1346	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1348	f0 04		beq $3a134e	            BEQ chk_null
.3a134a	c9 38		cmp #$38	            CMP #`(HEAP_TOP + 1)
.3a134c	b0 17		bcs $3a1365	            BGE out_of_bnds
.3a134e					chk_null
.3a134e	c2 20		rep #$20	            REP #$20
.3a1350	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1352	f0 11		beq $3a1365	            BEQ out_of_bnds
.3a1354	e2 20		sep #$20	            SEP #$20
.3a1356	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT  ; Decrement the reference count
.3a1359	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a135b	3a		dec a		            DEC A
.3a135c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a135e	d0 03		bne $3a1363	            BNE done            ; If it's still >0, we are done
.3a1360	20 67 13	jsr $3a1367	            JSR HEAP_FREE
.3a1363	28		plp		done        PLP
.3a1364	60		rts		            RTS
.3a1365	00		brk #		out_of_bnds BRK
.3a1366	ea		nop		            NOP
.3a1367					HEAP_FREE
.3a1367	08		php		            PHP
.3a1368	c2 20		rep #$20	            REP #$20
.3a136a	a5 bd		lda $08bd	            LDA FREED           ; Check to see if blocks are already on the freed list
.3a136c	d0 21		bne $3a138f	            BNE has_objects
.3a136e	e2 20		sep #$20	            SEP #$20
.3a1370	a5 bf		lda $08bf	            LDA FREED+2
.3a1372	d0 1b		bne $3a138f	            BNE has_objects
.3a1374	a5 c5		lda $08c5	            LDA CURRHEADER+2    ; No: this block is the first one
.3a1376	85 bf		sta $08bf	            STA FREED+2         ; Just make it the freed list
.3a1378	c2 20		rep #$20	            REP #$20
.3a137a	a5 c3		lda $08c3	            LDA CURRHEADER
.3a137c	85 bd		sta $08bd	            STA FREED
.3a137e	a9 00 00	lda #$0000	            LDA #0
.3a1381	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT   ; And clear its next link
.3a1384	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1386	c8		iny		            INY
.3a1387	c8		iny		            INY
.3a1388	e2 20		sep #$20	            SEP #$20
.3a138a	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a138c	4c 4e 14	jmp $3a144e	            JMP done
.3a138f					has_objects
.3a138f	e2 20		sep #$20	            SEP #$20
.3a1391	a5 bf		lda $08bf	            LDA FREED+2
.3a1393	c5 c5		cmp $08c5	            CMP CURRHEADER+2
.3a1395	90 28		bcc $3a13bf	            BLT start_scan
.3a1397	c2 20		rep #$20	            REP #$20
.3a1399	a5 bd		lda $08bd	            LDA FREED
.3a139b	c5 c3		cmp $08c3	            CMP CURRHEADER
.3a139d	90 20		bcc $3a13bf	            BLT start_scan
.3a139f					ins_first
.3a139f	c2 20		rep #$20	            REP #$20
.3a13a1	a5 bd		lda $08bd	            LDA FREED               ; CURRHEADER->NEXT := FREED
.3a13a3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a13a6	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13a8	e2 20		sep #$20	            SEP #$20
.3a13aa	c8		iny		            INY
.3a13ab	c8		iny		            INY
.3a13ac	a5 bf		lda $08bf	            LDA FREED+2
.3a13ae	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13b0	c2 20		rep #$20	            REP #$20
.3a13b2	a5 c3		lda $08c3	            LDA CURRHEADER
.3a13b4	85 bd		sta $08bd	            STA FREED
.3a13b6	e2 20		sep #$20	            SEP #$20
.3a13b8	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a13ba	85 bf		sta $08bf	            STA FREED+2
.3a13bc	4c 4e 14	jmp $3a144e	            JMP done
.3a13bf					start_scan
.3a13bf	c2 20		rep #$20	            REP #$20
.3a13c1	a5 bd		lda $08bd	            LDA FREED
.3a13c3	85 08		sta $0808	            STA INDEX
.3a13c5	e2 20		sep #$20	            SEP #$20
.3a13c7	a5 bf		lda $08bf	            LDA FREED+2
.3a13c9	85 0a		sta $080a	            STA INDEX+2
.3a13cb					loop
.3a13cb	e2 20		sep #$20	            SEP #$20
.3a13cd	a0 04 00	ldy #$0004	            LDY #HEAPOBJ.NEXT+2
.3a13d0	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a13d2	c5 c8		cmp $08c8	            CMP CURREND+2
.3a13d4	90 32		bcc $3a1408	            BLT go_next             ; No: check the next spot
.3a13d6	d0 0b		bne $3a13e3	            BNE ins_next
.3a13d8	c2 20		rep #$20	            REP #$20
.3a13da	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a13dd	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a13df	c5 c6		cmp $08c6	            CMP CURREND
.3a13e1	90 25		bcc $3a1408	            BLT go_next             ; No: check the next spot
.3a13e3					ins_next
.3a13e3	c2 20		rep #$20	            REP #$20
.3a13e5	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := INDEX->NEXT
.3a13e8	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a13ea	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13ec	e2 20		sep #$20	            SEP #$20
.3a13ee	c8		iny		            INY
.3a13ef	c8		iny		            INY
.3a13f0	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a13f2	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a13f4	c2 20		rep #$20	            REP #$20
.3a13f6	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.3a13f8	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a13fb	97 08		sta [$0808],y	            STA [INDEX],Y
.3a13fd	e2 20		sep #$20	            SEP #$20
.3a13ff	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1401	c8		iny		            INY
.3a1402	c8		iny		            INY
.3a1403	97 08		sta [$0808],y	            STA [INDEX],Y
.3a1405	4c 4e 14	jmp $3a144e	            JMP done
.3a1408					go_next
.3a1408	c2 20		rep #$20	            REP #$20
.3a140a	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Is INDEX->NEXT = 0
.3a140d	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a140f	d0 08		bne $3a1419	            BNE not_at_end          ; No: load up the next object
.3a1411	e2 20		sep #$20	            SEP #$20
.3a1413	c8		iny		            INY
.3a1414	c8		iny		            INY
.3a1415	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1417	f0 19		beq $3a1432	            BEQ at_end
.3a1419					not_at_end
.3a1419	c2 20		rep #$20	            REP #$20
.3a141b	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; INDEX := INDEX->NEXT
.3a141e	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1420	85 0c		sta $080c	            STA SCRATCH
.3a1422	e2 20		sep #$20	            SEP #$20
.3a1424	c8		iny		            INY
.3a1425	c8		iny		            INY
.3a1426	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1428	85 0a		sta $080a	            STA INDEX+2
.3a142a	c2 20		rep #$20	            REP #$20
.3a142c	a5 0c		lda $080c	            LDA SCRATCH
.3a142e	85 08		sta $0808	            STA INDEX
.3a1430	80 99		bra $3a13cb	            BRA loop
.3a1432					at_end
.3a1432	c2 20		rep #$20	            REP #$20
.3a1434	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.3a1436	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1439	97 08		sta [$0808],y	            STA [INDEX],Y
.3a143b	e2 20		sep #$20	            SEP #$20
.3a143d	c8		iny		            INY
.3a143e	c8		iny		            INY
.3a143f	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1441	97 08		sta [$0808],y	            STA [INDEX],Y
.3a1443	a9 00		lda #$00	            LDA #0                  ; CURRHEADER->NEXT := 0
.3a1445	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1447	c2 20		rep #$20	            REP #$20
.3a1449	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a144c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a144e					done
.3a144e	20 53 14	jsr $3a1453	            JSR COALLESCE
.3a1451	28		plp		            PLP
.3a1452	60		rts		            RTS
.3a1453					COALLESCE
.3a1453	08		php		            PHP
.3a1454	c2 20		rep #$20	            REP #$20
.3a1456	a5 bd		lda $08bd	            LDA FREED
.3a1458	85 c3		sta $08c3	            STA CURRHEADER
.3a145a	e2 20		sep #$20	            SEP #$20
.3a145c	a5 bf		lda $08bf	            LDA FREED+2
.3a145e	85 c5		sta $08c5	            STA CURRHEADER+2
.3a1460					next_head
.3a1460	c2 20		rep #$20	            REP #$20
.3a1462	a5 c3		lda $08c3	            LDA CURRHEADER          ; Is CURRHEADER == 0?
.3a1464	d0 09		bne $3a146f	            BNE check_next          ; No: check if NEXT is contiguous
.3a1466	e2 20		sep #$20	            SEP #$20
.3a1468	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a146a	d0 03		bne $3a146f	            BNE check_next
.3a146c	4c f6 14	jmp $3a14f6	            JMP done                ; Yes: we're done
.3a146f					check_next
.3a146f	c2 20		rep #$20	            REP #$20
.3a1471	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1474	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1476	85 0c		sta $080c	            STA SCRATCH
.3a1478	e2 20		sep #$20	            SEP #$20
.3a147a	c8		iny		            INY
.3a147b	c8		iny		            INY
.3a147c	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a147e	85 0e		sta $080e	            STA SCRATCH+2
.3a1480	c2 20		rep #$20	            REP #$20
.3a1482	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.3a1485	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1487	85 10		sta $0810	            STA SCRATCH2
.3a1489	e2 20		sep #$20	            SEP #$20
.3a148b	c8		iny		            INY
.3a148c	c8		iny		            INY
.3a148d	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a148f	85 12		sta $0812	            STA SCRATCH2+2
.3a1491	c2 20		rep #$20	            REP #$20
.3a1493	a5 0c		lda $080c	            LDA SCRATCH
.3a1495	c5 10		cmp $0810	            CMP SCRATCH2            ; Is CURRHEADER->END = CURRHEADER->NEXT?
.3a1497	d0 08		bne $3a14a1	            BNE go_next             ; No: go to the next block
.3a1499	e2 20		sep #$20	            SEP #$20
.3a149b	a5 0e		lda $080e	            LDA SCRATCH+2
.3a149d	c5 12		cmp $0812	            CMP SCRATCH2+2
.3a149f	f0 1f		beq $3a14c0	            BEQ combine             ; Yes: combine the two blocks
.3a14a1					go_next
.3a14a1	c2 20		rep #$20	            REP #$20
.3a14a3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a14a6	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a14a8	85 0c		sta $080c	            STA SCRATCH
.3a14aa	e2 20		sep #$20	            SEP #$20
.3a14ac	c8		iny		            INY
.3a14ad	c8		iny		            INY
.3a14ae	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a14b0	85 0e		sta $080e	            STA SCRATCH+2
.3a14b2	c2 20		rep #$20	            REP #$20
.3a14b4	a5 0c		lda $080c	            LDA SCRATCH
.3a14b6	85 c3		sta $08c3	            STA CURRHEADER
.3a14b8	e2 20		sep #$20	            SEP #$20
.3a14ba	a5 0e		lda $080e	            LDA SCRATCH+2
.3a14bc	85 c5		sta $08c5	            STA CURRHEADER+2
.3a14be	80 a0		bra $3a1460	            BRA next_head                               ; And loop back to next_head
.3a14c0					combine
.3a14c0	c2 20		rep #$20	            REP #$20
.3a14c2	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a14c5	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a14c7	85 0c		sta $080c	            STA SCRATCH
.3a14c9	e2 20		sep #$20	            SEP #$20
.3a14cb	c8		iny		            INY
.3a14cc	c8		iny		            INY
.3a14cd	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a14cf	85 0e		sta $080e	            STA SCRATCH+2
.3a14d1	c2 20		rep #$20	            REP #$20
.3a14d3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := SCRATCH->NEXT
.3a14d6	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a14d8	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a14da	e2 20		sep #$20	            SEP #$20
.3a14dc	c8		iny		            INY
.3a14dd	c8		iny		            INY
.3a14de	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a14e0	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a14e2	c2 20		rep #$20	            REP #$20
.3a14e4	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END       ; CURRHEADER->END := SCRATCH->END
.3a14e7	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a14e9	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a14eb	e2 20		sep #$20	            SEP #$20
.3a14ed	c8		iny		            INY
.3a14ee	c8		iny		            INY
.3a14ef	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a14f1	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a14f3	4c 6f 14	jmp $3a146f	            JMP check_next          ; And loop back to check_next
.3a14f6	28		plp		done        PLP
.3a14f7	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\strings.s

.3a14f8					CLRTMPSTR
.3a14f8	08		php		            PHP
.3a14f9	c2 20		rep #$20	            REP #$20
.3a14fb	64 16		stz $0816	            STZ STRPTR
.3a14fd	64 18		stz $0818	            STZ STRPTR+2
.3a14ff	28		plp		            PLP
.3a1500	60		rts		            RTS
.3a1501					TEMPSTRING
.3a1501	08		php		            PHP
.3a1502	c2 30		rep #$30	            REP #$30
.3a1504	a5 16		lda $0816	            LDA STRPTR          ; Is STRPTR == 0?
.3a1506	d0 16		bne $3a151e	            BNE add_256         ; No: add 256 to it
.3a1508	a5 18		lda $0818	            LDA STRPTR+2
.3a150a	d0 12		bne $3a151e	            BNE add_256
.3a150c	e2 20		sep #$20	            SEP #$20
.3a150e	64 16		stz $0816	            STZ STRPTR
.3a1510	a5 e2		lda $08e2	            LDA NEXTVAR+1
.3a1512	1a		inc a		            INC A
.3a1513	1a		inc a		            INC A
.3a1514	85 17		sta $0817	            STA STRPTR+1
.3a1516	a5 e3		lda $08e3	            LDA NEXTVAR+2
.3a1518	85 18		sta $0818	            STA STRPTR+2
.3a151a	64 19		stz $0819	            STZ STRPTR+3
.3a151c	80 07		bra $3a1525	            BRA chk_room
.3a151e					add_256
.3a151e	c2 20		rep #$20	            REP #$20
.3a1520	a5 17		lda $0817	            LDA STRPTR+1        ; There was already a temporary string...
.3a1522	1a		inc a		            INC A               ; Leave 256 bytes for it
.3a1523	85 17		sta $0817	            STA STRPTR+1
.3a1525					chk_room
.3a1525	c2 20		rep #$20	            REP #$20
.3a1527	a5 bb		lda $08bb	            LDA HEAP+1          ; Check to make sure that STRPTR and HEAP haven't touched
.3a1529	3a		dec a		            DEC A
.3a152a	c5 17		cmp $0817	            CMP STRPTR+1
.3a152c	f0 02		beq $3a1530	            BEQ no_room         ; If they have, throw an error
.3a152e	b0 1f		bcs $3a154f	            BGE done
.3a1530					no_room
.3a1530	08		php		            PHP
.3a1531	c2 20		rep #$20	            REP #$20
.3a1533	48		pha		            PHA
.3a1534	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1537	5b		tcd		            TCD
.3a1538	68		pla		            PLA
.3a1539	28		plp		            PLP
.3a153a	e2 20		sep #$20	            SEP #$20
.3a153c	a9 03		lda #$03	            LDA #ERR_MEMORY
.3a153e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1542	c2 20		rep #$20	            REP #$20
.3a1544	29 ff 00	and #$00ff	            AND #$00FF
.3a1547	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a154a	e2 20		sep #$20	            SEP #$20
.3a154c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a154f	28		plp		done        PLP
.3a1550	60		rts		            RTS
.3a1551					ITOS_DIGIT
.3a1551	c9 00		cmp #$00	            CMP #0          ; Is it 0?
.3a1553	d0 05		bne $3a155a	            BNE add_digit   ; No: go ahead and add it
.3a1555	c0 01 00	cpy #$0001	            CPY #1          ; Are we on the first digit?
.3a1558	f0 05		beq $3a155f	            BEQ done        ; Yes: ignore this leading 0
.3a155a	09 30		ora #$30	add_digit   ORA #$30        ; Convert it to ASCII
.3a155c	97 16		sta [$0816],y	            STA [STRPTR],Y  ; Save it to the string
.3a155e	c8		iny		            INY             ; And point to the next location
.3a155f					done
.3a155f	60		rts		            RTS
.3a1560					ITOS
.3a1560	08		php		            PHP
.3a1561	c2 30		rep #$30	            REP #$30
.3a1563	64 0c		stz $080c	            STZ SCRATCH         ; Use scratch to store if negative
.3a1565	a5 25		lda $0825	            LDA ARGUMENT1+2     ; Check to see if the number is negative
.3a1567	10 1a		bpl $3a1583	            BPL start_cnvt
.3a1569	18		clc		            CLC                 ; Yes: make ARGUMENT1 positive
.3a156a	a5 23		lda $0823	            LDA ARGUMENT1
.3a156c	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a156f	69 01 00	adc #$0001	            ADC #1
.3a1572	85 23		sta $0823	            STA ARGUMENT1
.3a1574	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1576	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a1579	69 00 00	adc #$0000	            ADC #0
.3a157c	85 25		sta $0825	            STA ARGUMENT1+2
.3a157e	a9 ff ff	lda #$ffff	            LDA #$FFFF          ; Record that the number was negative
.3a1581	85 0c		sta $080c	            STA SCRATCH
.3a1583					start_cnvt
.3a1583	64 10		stz $0810	            STZ SCRATCH2        ; SCRATCH2 will be our BCD version of the number
.3a1585	64 12		stz $0812	            STZ SCRATCH2+2
.3a1587	64 14		stz $0814	            STZ SCRATCH2+4
.3a1589	a2 1f 00	ldx #$001f	            LDX #31
.3a158c	f8		sed		            SED                 ; Yes, we're really using BCD mode
.3a158d	06 23		asl $0823	shift_loop  ASL ARGUMENT1       ; Shift ARGUMENT1 left one bit
.3a158f	26 25		rol $0825	            ROL ARGUMENT1+2
.3a1591	a5 10		lda $0810	            LDA SCRATCH2        ; SCRATCH2 := SCRATCH2 + SCRATCH2 + Carry
.3a1593	65 10		adc $0810	            ADC SCRATCH2
.3a1595	85 10		sta $0810	            STA SCRATCH2
.3a1597	a5 12		lda $0812	            LDA SCRATCH2+2
.3a1599	65 12		adc $0812	            ADC SCRATCH2+2
.3a159b	85 12		sta $0812	            STA SCRATCH2+2
.3a159d	a5 14		lda $0814	            LDA SCRATCH2+4
.3a159f	65 14		adc $0814	            ADC SCRATCH2+4
.3a15a1	85 14		sta $0814	            STA SCRATCH2+4
.3a15a3	ca		dex		            DEX
.3a15a4	10 e7		bpl $3a158d	            BPL shift_loop      ; Loop through all 32 bits of ARGUMENT1
.3a15a6	d8		cld		            CLD                 ; Switch back out of BCD mode
.3a15a7	e2 20		sep #$20	            SEP #$20
.3a15a9	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a15ac	a0 00 00	ldy #$0000	            LDY #0              ; Y will be index into the temporary string
.3a15af	a5 0c		lda $080c	            LDA SCRATCH         ; Check to see if the number was negative
.3a15b1	f0 04		beq $3a15b7	            BEQ is_pos          ; No: write a leading space
.3a15b3	a9 2d		lda #$2d	            LDA #'-'            ; If negative, write the minus sign
.3a15b5	80 02		bra $3a15b9	            BRA wr_lead
.3a15b7	a9 20		lda #$20	is_pos      LDA #CHAR_SP        ; Write a leading space
.3a15b9	97 16		sta [$0816],y	wr_lead     STA [STRPTR],Y
.3a15bb	c8		iny		            INY
.3a15bc	a2 05 00	ldx #$0005	            LDX #5
.3a15bf	b5 10		lda $0810,x	ascii_loop  LDA SCRATCH2,X
.3a15c1	29 f0		and #$f0	            AND #$F0
.3a15c3	4a		lsr a		            LSR A
.3a15c4	4a		lsr a		            LSR A
.3a15c5	4a		lsr a		            LSR A
.3a15c6	4a		lsr a		            LSR A
.3a15c7	20 51 15	jsr $3a1551	            JSR ITOS_DIGIT
.3a15ca	b5 10		lda $0810,x	            LDA SCRATCH2,X
.3a15cc	29 0f		and #$0f	            AND #$0F
.3a15ce	20 51 15	jsr $3a1551	            JSR ITOS_DIGIT
.3a15d1	ca		dex		            DEX
.3a15d2	10 eb		bpl $3a15bf	            BPL ascii_loop
.3a15d4	c0 01 00	cpy #$0001	            CPY #1              ; Did we write anything?
.3a15d7	d0 0c		bne $3a15e5	            BNE null_term       ; Yes: add a NULL to terminate
.3a15d9	a9 20		lda #$20	            LDA #' '            ; No: write a " 0" to the string
.3a15db	87 16		sta [$0816]	            STA [STRPTR]
.3a15dd	a0 01 00	ldy #$0001	            LDY #1
.3a15e0	a9 30		lda #$30	            LDA #'0'
.3a15e2	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a15e4	c8		iny		            INY
.3a15e5	a9 00		lda #$00	null_term   LDA #0
.3a15e7	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And terminate the string
.3a15e9	28		plp		done        PLP
.3a15ea	60		rts		            RTS
.3a15eb	00		brk #		fault       BRK
.3a15ec	ea		nop		            NOP
.3a15ed					STRLEN
.3a15ed	08		php		            PHP
.3a15ee	e2 20		sep #$20	            SEP #$20
.3a15f0	c2 10		rep #$10	            REP #$10
.3a15f2	a0 00 00	ldy #$0000	            LDY #0
.3a15f5	bd 00 00	lda $3a0000,x	loop        LDA #0,B,X
.3a15f8	f0 04		beq $3a15fe	            BEQ done
.3a15fa	e8		inx		            INX
.3a15fb	c8		iny		            INY
.3a15fc	80 f7		bra $3a15f5	            BRA loop
.3a15fe	28		plp		done        PLP
.3a15ff	60		rts		            RTS
.3a1600					STRCMP
.3a1600	08		php		            PHP
.3a1601	0b		phd		            PHD
.3a1602	08		php		            PHP
.3a1603	c2 20		rep #$20	            REP #$20
.3a1605	48		pha		            PHA
.3a1606	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1609	5b		tcd		            TCD
.3a160a	68		pla		            PLA
.3a160b	28		plp		            PLP
.3a160c	e2 20		sep #$20	            SEP #$20
.3a160e	c2 10		rep #$10	            REP #$10
.3a1610	a0 00 00	ldy #$0000	            LDY #0
.3a1613	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Check if the character 1 is 0
.3a1615	d0 04		bne $3a161b	            BNE comp_mag            ; If not, check the magnitudes
.3a1617	b7 29		lda [$0829],y	            LDA [ARGUMENT2],Y       ; If so, check if the character 2 is 0
.3a1619	f0 25		beq $3a1640	            BEQ are_equal           ; If so, the strings are equal
.3a161b	b7 23		lda [$0823],y	comp_mag    LDA [ARGUMENT1],Y       ; Otherwise, get character 1 again
.3a161d	d7 29		cmp [$0829],y	            CMP [ARGUMENT2],Y       ; And compare it to character 2
.3a161f	90 12		bcc $3a1633	            BLT is_less             ; Check if character 1 < character 2
.3a1621	d0 03		bne $3a1626	            BNE is_greater          ; Check if character 1 > character 2
.3a1623	c8		iny		            INY                     ; Equal so far... so go to the next pair of characters
.3a1624	80 ed		bra $3a1613	            BRA loop
.3a1626					is_greater
.3a1626	c2 20		rep #$20	            REP #$20
.3a1628	a9 01 00	lda #$0001	            LDA #1                  ; So return 1
.3a162b	85 23		sta $0823	            STA ARGUMENT1
.3a162d	e2 20		sep #$20	            SEP #$20
.3a162f	64 25		stz $0825	            STZ ARGUMENT1+2
.3a1631	80 15		bra $3a1648	            BRA done
.3a1633					is_less
.3a1633	c2 20		rep #$20	            REP #$20
.3a1635	a9 ff ff	lda #$ffff	            LDA #$FFFF              ; So return -1
.3a1638	85 23		sta $0823	            STA ARGUMENT1
.3a163a	e2 20		sep #$20	            SEP #$20
.3a163c	85 25		sta $0825	            STA ARGUMENT1+2
.3a163e	80 08		bra $3a1648	            BRA done
.3a1640					are_equal
.3a1640	c2 20		rep #$20	            REP #$20
.3a1642	64 23		stz $0823	            STZ ARGUMENT1           ; So return 0
.3a1644	e2 20		sep #$20	            SEP #$20
.3a1646	64 25		stz $0825	            STZ ARGUMENT1+2
.3a1648					done
.3a1648	e2 20		sep #$20	            SEP #$20
.3a164a	a9 00		lda #$00	            LDA #TYPE_INTEGER
.3a164c	85 27		sta $0827	            STA ARGTYPE1
.3a164e	2b		pld		            PLD
.3a164f	28		plp		            PLP
.3a1650	60		rts		            RTS
.3a1651					STRCONCAT
.3a1651	08		php		            PHP
.3a1652	0b		phd		            PHD
.3a1653	8b		phb		            PHB
.3a1654	08		php		            PHP
.3a1655	c2 20		rep #$20	            REP #$20
.3a1657	48		pha		            PHA
.3a1658	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a165b	5b		tcd		            TCD
.3a165c	68		pla		            PLA
.3a165d	28		plp		            PLP
.3a165e	e2 20		sep #$20	            SEP #$20
.3a1660	c2 10		rep #$10	            REP #$10
.3a1662	08		php		            PHP
.3a1663	c2 20		rep #$20	            REP #$20
.3a1665	48		pha		            PHA
.3a1666	e2 20		sep #$20	            SEP #$20
.3a1668	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a166a	48		pha		            PHA
.3a166b	ab		plb		            PLB
.3a166c	c2 20		rep #$20	            REP #$20
.3a166e	68		pla		            PLA
.3a166f	28		plp		            PLP
.3a1670	a6 23		ldx $0823	            LDX ARGUMENT1
.3a1672	20 ed 15	jsr $3a15ed	            JSR STRLEN
.3a1675	84 0c		sty $080c	            STY SCRATCH
.3a1677	08		php		            PHP
.3a1678	c2 20		rep #$20	            REP #$20
.3a167a	48		pha		            PHA
.3a167b	e2 20		sep #$20	            SEP #$20
.3a167d	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a167f	48		pha		            PHA
.3a1680	ab		plb		            PLB
.3a1681	c2 20		rep #$20	            REP #$20
.3a1683	68		pla		            PLA
.3a1684	28		plp		            PLP
.3a1685	a6 29		ldx $0829	            LDX ARGUMENT2
.3a1687	20 ed 15	jsr $3a15ed	            JSR STRLEN
.3a168a	c2 20		rep #$20	            REP #$20
.3a168c	98		tya		            TYA
.3a168d	38		sec		            SEC                     ; X := LEN(ARGUMENT1) + LEN(ARGUMENT2) + 1
.3a168e	65 0c		adc $080c	            ADC SCRATCH
.3a1690	aa		tax		            TAX
.3a1691	e2 20		sep #$20	            SEP #$20
.3a1693	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set type to STRING
.3a1695	20 d3 10	jsr $3a10d3	            JSR ALLOC
.3a1698	c2 20		rep #$20	            REP #$20
.3a169a	a5 b7		lda $08b7	            LDA ALLOCATED           ; INDEX := pointer to the string
.3a169c	85 08		sta $0808	            STA INDEX
.3a169e	e2 20		sep #$20	            SEP #$20
.3a16a0	a5 b9		lda $08b9	            LDA ALLOCATED+2
.3a16a2	85 0a		sta $080a	            STA INDEX+2
.3a16a4	a0 00 00	ldy #$0000	            LDY #0                  ; Set the target index to the beginning
.3a16a7	08		php		            PHP
.3a16a8	c2 20		rep #$20	            REP #$20
.3a16aa	48		pha		            PHA
.3a16ab	e2 20		sep #$20	            SEP #$20
.3a16ad	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a16af	48		pha		            PHA
.3a16b0	ab		plb		            PLB
.3a16b1	c2 20		rep #$20	            REP #$20
.3a16b3	68		pla		            PLA
.3a16b4	28		plp		            PLP
.3a16b5	a6 23		ldx $0823	            LDX ARGUMENT1
.3a16b7	bd 00 00	lda $3a0000,x	loop1       LDA #0,B,X              ; Get the Xth byte of ARGUMENT1
.3a16ba	f0 06		beq $3a16c2	            BEQ copy_2              ; Is it null? Yes: move on to the next string
.3a16bc	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.3a16be	e8		inx		            INX                     ; Point to the next characters
.3a16bf	c8		iny		            INY
.3a16c0	80 f5		bra $3a16b7	            BRA loop1               ; And do again
.3a16c2					copy_2
.3a16c2	e2 20		sep #$20	            SEP #$20
.3a16c4	08		php		            PHP
.3a16c5	c2 20		rep #$20	            REP #$20
.3a16c7	48		pha		            PHA
.3a16c8	e2 20		sep #$20	            SEP #$20
.3a16ca	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a16cc	48		pha		            PHA
.3a16cd	ab		plb		            PLB
.3a16ce	c2 20		rep #$20	            REP #$20
.3a16d0	68		pla		            PLA
.3a16d1	28		plp		            PLP
.3a16d2	a6 29		ldx $0829	            LDX ARGUMENT2
.3a16d4	bd 00 00	lda $3a0000,x	loop2       LDA #0,B,X              ; Get the Xth byte of ARGUMENT2
.3a16d7	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.3a16d9	f0 04		beq $3a16df	            BEQ terminate           ; Is it null? Yes: move on to the next string
.3a16db	e8		inx		            INX                     ; Point to the next characters
.3a16dc	c8		iny		            INY
.3a16dd	80 f5		bra $3a16d4	            BRA loop2               ; And do again
.3a16df					terminate
.3a16df	c2 20		rep #$20	            REP #$20
.3a16e1	a5 08		lda $0808	            LDA INDEX               ; Set ARGUMENT1 to the new string
.3a16e3	85 23		sta $0823	            STA ARGUMENT1
.3a16e5	e2 20		sep #$20	            SEP #$20
.3a16e7	a5 0a		lda $080a	            LDA INDEX+2
.3a16e9	85 25		sta $0825	            STA ARGUMENT1+2
.3a16eb	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set ARGUMENT1's type to STRING
.3a16ed	85 27		sta $0827	            STA ARGTYPE1
.3a16ef	ab		plb		            PLB
.3a16f0	2b		pld		            PLD
.3a16f1	28		plp		            PLP
.3a16f2	60		rts		            RTS
.3a16f3					STRCPY
.3a16f3	da		phx		            PHX
.3a16f4	5a		phy		            PHY
.3a16f5	08		php		            PHP
.3a16f6	0b		phd		            PHD
.3a16f7	8b		phb		            PHB
.3a16f8	08		php		            PHP
.3a16f9	c2 20		rep #$20	            REP #$20
.3a16fb	48		pha		            PHA
.3a16fc	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a16ff	5b		tcd		            TCD
.3a1700	68		pla		            PLA
.3a1701	28		plp		            PLP
.3a1702	c2 20		rep #$20	            REP #$20
.3a1704	a5 0a		lda $080a	            LDA INDEX+2
.3a1706	48		pha		            PHA
.3a1707	a5 08		lda $0808	            LDA INDEX
.3a1709	48		pha		            PHA
.3a170a	c2 30		rep #$30	            REP #$30
.3a170c	08		php		            PHP
.3a170d	c2 20		rep #$20	            REP #$20
.3a170f	48		pha		            PHA
.3a1710	e2 20		sep #$20	            SEP #$20
.3a1712	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1714	48		pha		            PHA
.3a1715	ab		plb		            PLB
.3a1716	c2 20		rep #$20	            REP #$20
.3a1718	68		pla		            PLA
.3a1719	28		plp		            PLP
.3a171a	a6 23		ldx $0823	            LDX ARGUMENT1
.3a171c	20 ed 15	jsr $3a15ed	            JSR STRLEN
.3a171f	98		tya		            TYA
.3a1720	aa		tax		            TAX
.3a1721	e8		inx		            INX                     ; Put length of string (plus NUL) in X
.3a1722	e2 20		sep #$20	            SEP #$20
.3a1724	a9 02		lda #$02	            LDA #TYPE_STRING
.3a1726	20 d3 10	jsr $3a10d3	            JSR ALLOC
.3a1729	c2 20		rep #$20	            REP #$20
.3a172b	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a172d	85 08		sta $0808	            STA INDEX
.3a172f	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a1731	85 0a		sta $080a	            STA INDEX+2
.3a1733	a0 00 00	ldy #$0000	            LDY #0
.3a1736	e2 20		sep #$20	            SEP #$20
.3a1738	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Copy the data to the allocated string
.3a173a	97 08		sta [$0808],y	            STA [INDEX],Y
.3a173c	f0 03		beq $3a1741	            BEQ ret_copy
.3a173e	c8		iny		            INY
.3a173f	80 f7		bra $3a1738	            BRA loop
.3a1741					ret_copy
.3a1741	c2 20		rep #$20	            REP #$20
.3a1743	a5 08		lda $0808	            LDA INDEX
.3a1745	85 23		sta $0823	            STA ARGUMENT1
.3a1747	a5 0a		lda $080a	            LDA INDEX+2
.3a1749	85 25		sta $0825	            STA ARGUMENT1+2
.3a174b	c2 20		rep #$20	            REP #$20
.3a174d	68		pla		            PLA
.3a174e	85 08		sta $0808	            STA INDEX
.3a1750	68		pla		            PLA
.3a1751	85 0a		sta $080a	            STA INDEX+2
.3a1753	ab		plb		            PLB
.3a1754	2b		pld		            PLD
.3a1755	28		plp		            PLP
.3a1756	7a		ply		            PLY
.3a1757	fa		plx		            PLX
.3a1758	60		rts		            RTS
.3a1759					STRSUBSTR
.3a1759	08		php		            PHP
.3a175a	e2 20		sep #$20	            SEP #$20
.3a175c	c2 10		rep #$10	            REP #$10
.3a175e	a0 00 00	ldy #$0000	            LDY #0
.3a1761	b7 23		lda [$0823],y	count_loop  LDA [ARGUMENT1],Y
.3a1763	f0 05		beq $3a176a	            BEQ counted
.3a1765	c8		iny		            INY
.3a1766	80 f9		bra $3a1761	            BRA count_loop
.3a1768	84 92		sty $0892	            STY MTEMP               ; MTEMP := length of the source string
.3a176a					counted
.3a176a	c2 30		rep #$30	            REP #$30
.3a176c	c4 29		cpy $0829	            CPY ARGUMENT2           ; length of string <= index?
.3a176e	90 13		bcc $3a1783	            BLT ret_empty           ; Yes: return empty string
.3a1770	f0 11		beq $3a1783	            BEQ ret_empty
.3a1772	a5 8f		lda $088f	            LDA MCOUNT              ; Is the desired count <= 0?
.3a1774	30 0d		bmi $3a1783	            BMI ret_empty
.3a1776	f0 0b		beq $3a1783	            BEQ ret_empty           ; Yes: return the empty string
.3a1778	c4 8f		cpy $088f	            CPY MCOUNT              ; Is the desired length < the length of the source?
.3a177a	b0 12		bcs $3a178e	            BGE do_slice            ; Yes: go ahead and get the substring
.3a177c	a5 29		lda $0829	            LDA ARGUMENT2           ; Is INDEX == 0?
.3a177e	d0 0e		bne $3a178e	            BNE do_slice            ; No: do a slice
.3a1780	4c d7 17	jmp $3a17d7	            JMP done                ; Yes: just return the source string
.3a1783					ret_empty
.3a1783	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a1786	e2 20		sep #$20	            SEP #$20
.3a1788	a9 00		lda #$00	            LDA #0
.3a178a	87 16		sta [$0816]	            STA [STRPTR]
.3a178c	80 39		bra $3a17c7	            BRA finish_copy
.3a178e					do_slice
.3a178e	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a1791	c2 30		rep #$30	            REP #$30
.3a1793	18		clc		            CLC                     ; ARGUMENT1 := ARGUMENT1 + index
.3a1794	a5 23		lda $0823	            LDA ARGUMENT1
.3a1796	65 29		adc $0829	            ADC ARGUMENT2
.3a1798	85 23		sta $0823	            STA ARGUMENT1
.3a179a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a179c	69 00 00	adc #$0000	            ADC #0
.3a179f	85 25		sta $0825	            STA ARGUMENT1+2
.3a17a1	a0 00 00	ldy #$0000	            LDY #0
.3a17a4					copy_loop
.3a17a4	e2 20		sep #$20	            SEP #$20
.3a17a6	a7 23		lda [$0823]	            LDA [ARGUMENT1]         ; Copy a character from the substring to the temporary string
.3a17a8	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a17aa	f0 1b		beq $3a17c7	            BEQ finish_copy         ; If it is a NULL, we're done
.3a17ac	c2 20		rep #$20	            REP #$20
.3a17ae	18		clc		            CLC                     ; Move to the next character
.3a17af	a5 23		lda $0823	            LDA ARGUMENT1
.3a17b1	69 01 00	adc #$0001	            ADC #1
.3a17b4	85 23		sta $0823	            STA ARGUMENT1
.3a17b6	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a17b8	69 00 00	adc #$0000	            ADC #0
.3a17bb	85 25		sta $0825	            STA ARGUMENT1+2
.3a17bd	c8		iny		            INY
.3a17be	c4 8f		cpy $088f	            CPY MCOUNT              ; Have we reached the limit to copy?
.3a17c0	d0 e2		bne $3a17a4	            BNE copy_loop           ; No: copy the next byte
.3a17c2	a9 00 00	lda #$0000	            LDA #0                  ; Null terminate string
.3a17c5	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a17c7					finish_copy
.3a17c7	c2 20		rep #$20	            REP #$20
.3a17c9	a5 16		lda $0816	            LDA STRPTR
.3a17cb	85 23		sta $0823	            STA ARGUMENT1
.3a17cd	a5 18		lda $0818	            LDA STRPTR+2
.3a17cf	85 25		sta $0825	            STA ARGUMENT1+2
.3a17d1	e2 20		sep #$20	            SEP #$20
.3a17d3	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a17d5	85 27		sta $0827	            STA ARGTYPE1
.3a17d7					done
.3a17d7	28		plp		            PLP
.3a17d8	60		rts		            RTS
.3a17d9					OP_STR_LT
.3a17d9	08		php		            PHP
.3a17da	c2 30		rep #$30	            REP #$30
.3a17dc	20 00 16	jsr $3a1600	            JSR STRCMP
.3a17df	a5 23		lda $0823	            LDA ARGUMENT1
.3a17e1	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.3a17e4	d0 05		bne $3a17eb	            BNE ret_false               ; No: return false
.3a17e6					ret_true
.3a17e6	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a17e9	80 03		bra $3a17ee	            BRA done
.3a17eb					ret_false
.3a17eb	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a17ee	28		plp		done        PLP
.3a17ef	60		rts		            RTS
.3a17f0					OP_STR_GT
.3a17f0	08		php		            PHP
.3a17f1	c2 30		rep #$30	            REP #$30
.3a17f3	20 00 16	jsr $3a1600	            JSR STRCMP
.3a17f6	a5 23		lda $0823	            LDA ARGUMENT1
.3a17f8	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.3a17fb	d0 05		bne $3a1802	            BNE ret_false               ; No: return false
.3a17fd					ret_true
.3a17fd	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a1800	80 03		bra $3a1805	            BRA done
.3a1802					ret_false
.3a1802	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a1805	28		plp		done        PLP
.3a1806	60		rts		            RTS
.3a1807					OP_STR_EQ
.3a1807	08		php		            PHP
.3a1808	c2 30		rep #$30	            REP #$30
.3a180a	20 00 16	jsr $3a1600	            JSR STRCMP
.3a180d	a5 23		lda $0823	            LDA ARGUMENT1
.3a180f	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.3a1812	d0 05		bne $3a1819	            BNE ret_false               ; No: return false
.3a1814					ret_true
.3a1814	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a1817	80 03		bra $3a181c	            BRA done
.3a1819					ret_false
.3a1819	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a181c	28		plp		done        PLP
.3a181d	60		rts		            RTS
.3a181e					OP_STR_NE
.3a181e	08		php		            PHP
.3a181f	c2 30		rep #$30	            REP #$30
.3a1821	20 00 16	jsr $3a1600	            JSR STRCMP
.3a1824	a5 23		lda $0823	            LDA ARGUMENT1
.3a1826	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.3a1829	f0 05		beq $3a1830	            BEQ ret_false               ; Yes: return false
.3a182b					ret_true
.3a182b	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a182e	80 03		bra $3a1833	            BRA done
.3a1830					ret_false
.3a1830	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a1833	28		plp		done        PLP
.3a1834	60		rts		            RTS
.3a1835					OP_STR_GTE
.3a1835	08		php		            PHP
.3a1836	c2 30		rep #$30	            REP #$30
.3a1838	20 00 16	jsr $3a1600	            JSR STRCMP
.3a183b	a5 23		lda $0823	            LDA ARGUMENT1
.3a183d	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.3a1840	f0 05		beq $3a1847	            BEQ ret_false               ; Yes: return false
.3a1842					ret_true
.3a1842	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a1845	80 03		bra $3a184a	            BRA done
.3a1847					ret_false
.3a1847	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a184a	28		plp		done        PLP
.3a184b	60		rts		            RTS
.3a184c					OP_STR_LTE
.3a184c	08		php		            PHP
.3a184d	c2 30		rep #$30	            REP #$30
.3a184f	20 00 16	jsr $3a1600	            JSR STRCMP
.3a1852	a5 23		lda $0823	            LDA ARGUMENT1
.3a1854	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.3a1857	f0 05		beq $3a185e	            BEQ ret_false               ; Yes: return false
.3a1859					ret_true
.3a1859	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a185c	80 03		bra $3a1861	            BRA done
.3a185e					ret_false
.3a185e	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a1861	28		plp		done        PLP
.3a1862	60		rts		            RTS
.3a1863					STR_NORMAL
.3a1863	08		php		            PHP
.3a1864	e2 20		sep #$20	            SEP #$20
.3a1866	a5 27		lda $0827	            LDA ARGTYPE1            ; Is it a string?
.3a1868	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a186a	d0 1d		bne $3a1889	            BNE done                ; No: return it
.3a186c	a5 23		lda $0823	            LDA ARGUMENT1           ; Is it a null pointer?
.3a186e	d0 19		bne $3a1889	            BNE done
.3a1870	a5 24		lda $0824	            LDA ARGUMENT1+1
.3a1872	d0 15		bne $3a1889	            BNE done
.3a1874	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1876	d0 11		bne $3a1889	            BNE done                ; No: return it
.3a1878	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a187b	a9 00		lda #$00	            LDA #0
.3a187d	87 16		sta [$0816]	            STA [STRPTR]            ; Make it empty
.3a187f	c2 20		rep #$20	            REP #$20
.3a1881	a5 16		lda $0816	            LDA STRPTR
.3a1883	85 23		sta $0823	            STA ARGUMENT1
.3a1885	a5 18		lda $0818	            LDA STRPTR+2
.3a1887	85 25		sta $0825	            STA ARGUMENT1+2
.3a1889	28		plp		done        PLP
.3a188a	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\listing.s

.3a188b					LISTPROG
.3a188b	48		pha		            PHA
.3a188c	5a		phy		            PHY
.3a188d	0b		phd		            PHD
.3a188e	08		php		            PHP
.3a188f	08		php		            PHP
.3a1890	c2 20		rep #$20	            REP #$20
.3a1892	48		pha		            PHA
.3a1893	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1896	5b		tcd		            TCD
.3a1897	68		pla		            PLA
.3a1898	28		plp		            PLP
.3a1899	c2 30		rep #$30	            REP #$30
.3a189b	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a189e	85 00		sta $0800	            STA BIP
.3a18a0	85 1a		sta $081a	            STA CURLINE
.3a18a2	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a18a5	85 02		sta $0802	            STA BIP+2
.3a18a7	85 1c		sta $081c	            STA CURLINE+2
.3a18a9	22 3c 11 00	jsl $00113c	list_loop   JSL FK_TESTBREAK
.3a18ad	b0 20		bcs $3a18cf	            BCS throw_break     ; If C: user pressed an interrupt key, stop the listing
.3a18af	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.3a18b2	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.3a18b4	f0 0f		beq $3a18c5	            BEQ done
.3a18b6	c5 55		cmp $0855	            CMP MARG1
.3a18b8	90 10		bcc $3a18ca	            BLT skip_line
.3a18ba	c5 59		cmp $0859	            CMP MARG2
.3a18bc	f0 02		beq $3a18c0	            BEQ print_line
.3a18be	b0 05		bcs $3a18c5	            BGE done
.3a18c0					print_line
.3a18c0	20 ee 18	jsr $3a18ee	            JSR LISTLINE
.3a18c3	80 e4		bra $3a18a9	            BRA list_loop
.3a18c5	28		plp		done        PLP
.3a18c6	2b		pld		            PLD
.3a18c7	7a		ply		            PLY
.3a18c8	68		pla		            PLA
.3a18c9	60		rts		            RTS
.3a18ca					skip_line
.3a18ca	20 fa 21	jsr $3a21fa	            JSR NEXTLINE
.3a18cd	80 da		bra $3a18a9	            BRA list_loop           ; And try again
.3a18cf					throw_break
.3a18cf	08		php		            PHP
.3a18d0	c2 20		rep #$20	            REP #$20
.3a18d2	48		pha		            PHA
.3a18d3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a18d6	5b		tcd		            TCD
.3a18d7	68		pla		            PLA
.3a18d8	28		plp		            PLP
.3a18d9	e2 20		sep #$20	            SEP #$20
.3a18db	a9 01		lda #$01	            LDA #ERR_BREAK
.3a18dd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a18e1	c2 20		rep #$20	            REP #$20
.3a18e3	29 ff 00	and #$00ff	            AND #$00FF
.3a18e6	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a18e9	e2 20		sep #$20	            SEP #$20
.3a18eb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a18ee					LISTLINE
.3a18ee	08		php		            PHP
.3a18ef	c2 30		rep #$30	            REP #$30
.3a18f1	85 23		sta $0823	            STA ARGUMENT1
.3a18f3	64 25		stz $0825	            STZ ARGUMENT1+2
.3a18f5	20 60 15	jsr $3a1560	            JSR ITOS
.3a18f8	a5 16		lda $0816	            LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a18fa	1a		inc a		            INC A
.3a18fb	85 23		sta $0823	            STA ARGUMENT1
.3a18fd	a5 18		lda $0818	            LDA STRPTR+2
.3a18ff	85 25		sta $0825	            STA ARGUMENT1+2
.3a1901	20 ff 45	jsr $3a45ff	            JSR PR_STRING
.3a1904	18		clc		            CLC                 ; Move the BIP to the first byte of the line
.3a1905	a5 1a		lda $081a	            LDA CURLINE
.3a1907	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a190a	85 00		sta $0800	            STA BIP
.3a190c	a5 1c		lda $081c	            LDA CURLINE+2
.3a190e	69 00 00	adc #$0000	            ADC #0
.3a1911	85 02		sta $0802	            STA BIP+2
.3a1913	e2 20		sep #$20	            SEP #$20
.3a1915	a9 20		lda #$20	            LDA #CHAR_SP
.3a1917	20 18 00	jsr $3a0018	            JSR PRINTC
.3a191a	c2 20		rep #$20	            REP #$20
.3a191c					loop
.3a191c	20 2d 19	jsr $3a192d	            JSR LISTBYTE
.3a191f	90 fb		bcc $3a191c	            BCC loop
.3a1921	e2 20		sep #$20	            SEP #$20
.3a1923	a9 0d		lda #$0d	            LDA #CHAR_CR
.3a1925	20 18 00	jsr $3a0018	            JSR PRINTC
.3a1928	20 fa 21	jsr $3a21fa	            JSR NEXTLINE
.3a192b	28		plp		            PLP
.3a192c	60		rts		            RTS
.3a192d					LISTBYTE
.3a192d	08		php		            PHP
.3a192e	0b		phd		            PHD
.3a192f	8b		phb		            PHB
.3a1930	08		php		            PHP
.3a1931	c2 20		rep #$20	            REP #$20
.3a1933	48		pha		            PHA
.3a1934	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1937	5b		tcd		            TCD
.3a1938	68		pla		            PLA
.3a1939	28		plp		            PLP
.3a193a	08		php		            PHP
.3a193b	e2 20		sep #$20	            SEP #$20
.3a193d	48		pha		            PHA
.3a193e	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1940	48		pha		            PHA
.3a1941	ab		plb		            PLB
.3a1942	68		pla		            PLA
.3a1943	28		plp		            PLP
.3a1944	e2 20		sep #$20	            SEP #$20
.3a1946	c2 10		rep #$10	            REP #$10
.3a1948	a7 00		lda [$0800]	            LDA [BIP]           ; Get the current byte
.3a194a	f0 3a		beq $3a1986	            BEQ end_of_line     ; If it's 0, return with C set
.3a194c	30 05		bmi $3a1953	            BMI is_token        ; If it's 0x80 - 0xFF, it's a token
.3a194e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a1951	80 29		bra $3a197c	            BRA done            ; And return
.3a1953					is_token
.3a1953	c2 20		rep #$20	            REP #$20
.3a1955	29 7f 00	and #$007f	            AND #$007F          ; Compute the index of the token
.3a1958	0a		asl a		            ASL A               ; In the token table
.3a1959	0a		asl a		            ASL A
.3a195a	0a		asl a		            ASL A
.3a195b	18		clc		            CLC
.3a195c	69 fb 0c	adc #$0cfb	            ADC #<>TOKENS       ; Set INDEX to the address of the token
.3a195f	85 08		sta $0808	            STA INDEX
.3a1961	a9 3a 00	lda #$003a	            LDA #`TOKENS
.3a1964	69 00 00	adc #$0000	            ADC #0
.3a1967	85 0a		sta $080a	            STA INDEX+2
.3a1969					pr_default
.3a1969	08		php		            PHP
.3a196a	e2 20		sep #$20	            SEP #$20
.3a196c	48		pha		            PHA
.3a196d	a9 3a		lda #$3a	            LDA #`TOKENS
.3a196f	48		pha		            PHA
.3a1970	ab		plb		            PLB
.3a1971	68		pla		            PLA
.3a1972	28		plp		            PLP
.3a1973	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.3a1976	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1978	aa		tax		            TAX
.3a1979	20 64 04	jsr $3a0464	            JSR PRINTS
.3a197c					done
.3a197c	c2 20		rep #$20	            REP #$20
.3a197e	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1981	ab		plb		            PLB
.3a1982	2b		pld		            PLD
.3a1983	28		plp		            PLP
.3a1984	18		clc		            CLC
.3a1985	60		rts		            RTS
.3a1986	ab		plb		end_of_line PLB
.3a1987	2b		pld		            PLD
.3a1988	28		plp		            PLP
.3a1989	38		sec		            SEC
.3a198a	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\eval.s

.3a198b					INITEVALSP
.3a198b	08		php		            PHP
.3a198c	c2 20		rep #$20	            REP #$20
.3a198e	a9 ff 6f	lda #$6fff	            LDA #ARGUMENT_TOP
.3a1991	85 1f		sta $081f	            STA ARGUMENTSP
.3a1993	a9 ff 7f	lda #$7fff	            LDA #OPERATOR_TOP
.3a1996	85 21		sta $0821	            STA OPERATORSP
.3a1998	a9 ff ff	lda #$ffff	            LDA #$FFFF
.3a199b	85 23		sta $0823	            STA ARGUMENT1
.3a199d	85 25		sta $0825	            STA ARGUMENT1+2
.3a199f	85 29		sta $0829	            STA ARGUMENT2
.3a19a1	85 2b		sta $082b	            STA ARGUMENT2+2
.3a19a3	e2 20		sep #$20	            SEP #$20
.3a19a5	85 27		sta $0827	            STA ARGTYPE1
.3a19a7	85 2d		sta $082d	            STA ARGTYPE2
.3a19a9	28		plp		            PLP
.3a19aa	60		rts		            RTS
.3a19ab					PHARGUMENT
.3a19ab	08		php		            PHP
.3a19ac	0b		phd		            PHD
.3a19ad	8b		phb		            PHB
.3a19ae	08		php		            PHP
.3a19af	c2 20		rep #$20	            REP #$20
.3a19b1	48		pha		            PHA
.3a19b2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a19b5	5b		tcd		            TCD
.3a19b6	68		pla		            PLA
.3a19b7	28		plp		            PLP
.3a19b8	08		php		            PHP
.3a19b9	e2 20		sep #$20	            SEP #$20
.3a19bb	48		pha		            PHA
.3a19bc	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a19be	48		pha		            PHA
.3a19bf	ab		plb		            PLB
.3a19c0	68		pla		            PLA
.3a19c1	28		plp		            PLP
.3a19c2	c2 30		rep #$30	            REP #$30
.3a19c4	5a		phy		            PHY
.3a19c5	a4 1f		ldy $081f	            LDY ARGUMENTSP
.3a19c7	bd 00 00	lda $0000,x	            LDA #0,B,X
.3a19ca	99 00 00	sta $0000,y	            STA #0,B,Y
.3a19cd	bd 02 00	lda $0002,x	            LDA #2,B,X
.3a19d0	99 02 00	sta $0002,y	            STA #2,B,Y
.3a19d3	e2 20		sep #$20	            SEP #$20
.3a19d5	bd 04 00	lda $0004,x	            LDA #4,B,X
.3a19d8	99 04 00	sta $0004,y	            STA #4,B,Y
.3a19db	c2 20		rep #$20	            REP #$20
.3a19dd	38		sec		            SEC
.3a19de	98		tya		            TYA
.3a19df	e9 05 00	sbc #$0005	            SBC #ARGUMENT_SIZE
.3a19e2	85 1f		sta $081f	            STA ARGUMENTSP
.3a19e4	7a		ply		            PLY
.3a19e5	ab		plb		            PLB
.3a19e6	2b		pld		            PLD
.3a19e7	28		plp		            PLP
.3a19e8	60		rts		            RTS
.3a19e9					PLARGUMENT
.3a19e9	08		php		            PHP
.3a19ea	0b		phd		            PHD
.3a19eb	8b		phb		            PHB
.3a19ec	08		php		            PHP
.3a19ed	c2 20		rep #$20	            REP #$20
.3a19ef	48		pha		            PHA
.3a19f0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a19f3	5b		tcd		            TCD
.3a19f4	68		pla		            PLA
.3a19f5	28		plp		            PLP
.3a19f6	08		php		            PHP
.3a19f7	e2 20		sep #$20	            SEP #$20
.3a19f9	48		pha		            PHA
.3a19fa	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a19fc	48		pha		            PHA
.3a19fd	ab		plb		            PLB
.3a19fe	68		pla		            PLA
.3a19ff	28		plp		            PLP
.3a1a00	c2 30		rep #$30	            REP #$30
.3a1a02	5a		phy		            PHY
.3a1a03	18		clc		            CLC
.3a1a04	a5 1f		lda $081f	            LDA ARGUMENTSP
.3a1a06	69 05 00	adc #$0005	            ADC #ARGUMENT_SIZE
.3a1a09	85 1f		sta $081f	            STA ARGUMENTSP
.3a1a0b	a8		tay		            TAY
.3a1a0c	b9 00 00	lda $0000,y	            LDA #0,B,Y
.3a1a0f	9d 00 00	sta $0000,x	            STA #0,B,X
.3a1a12	b9 02 00	lda $0002,y	            LDA #2,B,Y
.3a1a15	9d 02 00	sta $0002,x	            STA #2,B,X
.3a1a18	e2 20		sep #$20	            SEP #$20
.3a1a1a	b9 04 00	lda $0004,y	            LDA #4,B,Y
.3a1a1d	9d 04 00	sta $0004,x	            STA #4,B,X
.3a1a20	bd 00 00	lda $0000,x	            LDA #0,B,X
.3a1a23	7a		ply		            PLY
.3a1a24	ab		plb		            PLB
.3a1a25	2b		pld		            PLD
.3a1a26	28		plp		            PLP
.3a1a27	60		rts		            RTS
.3a1a28					PHOPERATOR
.3a1a28	08		php		            PHP
.3a1a29	0b		phd		            PHD
.3a1a2a	8b		phb		            PHB
.3a1a2b	08		php		            PHP
.3a1a2c	c2 20		rep #$20	            REP #$20
.3a1a2e	48		pha		            PHA
.3a1a2f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1a32	5b		tcd		            TCD
.3a1a33	68		pla		            PLA
.3a1a34	28		plp		            PLP
.3a1a35	08		php		            PHP
.3a1a36	e2 20		sep #$20	            SEP #$20
.3a1a38	48		pha		            PHA
.3a1a39	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1a3b	48		pha		            PHA
.3a1a3c	ab		plb		            PLB
.3a1a3d	68		pla		            PLA
.3a1a3e	28		plp		            PLP
.3a1a3f	e2 20		sep #$20	            SEP #$20
.3a1a41	c2 10		rep #$10	            REP #$10
.3a1a43	5a		phy		            PHY
.3a1a44	a4 21		ldy $0821	            LDY OPERATORSP
.3a1a46	99 00 00	sta $0000,y	            STA #0,B,Y
.3a1a49	88		dey		            DEY
.3a1a4a	84 21		sty $0821	            STY OPERATORSP
.3a1a4c	7a		ply		done        PLY
.3a1a4d	ab		plb		            PLB
.3a1a4e	2b		pld		            PLD
.3a1a4f	28		plp		            PLP
.3a1a50	60		rts		            RTS
.3a1a51					PLOPERATOR
.3a1a51	08		php		            PHP
.3a1a52	0b		phd		            PHD
.3a1a53	8b		phb		            PHB
.3a1a54	08		php		            PHP
.3a1a55	c2 20		rep #$20	            REP #$20
.3a1a57	48		pha		            PHA
.3a1a58	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1a5b	5b		tcd		            TCD
.3a1a5c	68		pla		            PLA
.3a1a5d	28		plp		            PLP
.3a1a5e	08		php		            PHP
.3a1a5f	e2 20		sep #$20	            SEP #$20
.3a1a61	48		pha		            PHA
.3a1a62	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1a64	48		pha		            PHA
.3a1a65	ab		plb		            PLB
.3a1a66	68		pla		            PLA
.3a1a67	28		plp		            PLP
.3a1a68	e2 20		sep #$20	            SEP #$20
.3a1a6a	c2 10		rep #$10	            REP #$10
.3a1a6c	5a		phy		            PHY
.3a1a6d	a4 21		ldy $0821	            LDY OPERATORSP
.3a1a6f	c8		iny		            INY
.3a1a70	84 21		sty $0821	            STY OPERATORSP
.3a1a72	b9 00 00	lda $0000,y	            LDA #0,B,Y
.3a1a75	c2 20		rep #$20	            REP #$20
.3a1a77	29 ff 00	and #$00ff	            AND #$00FF
.3a1a7a	7a		ply		            PLY
.3a1a7b	ab		plb		            PLB
.3a1a7c	2b		pld		            PLD
.3a1a7d	28		plp		            PLP
.3a1a7e	60		rts		            RTS
.3a1a7f					OPENPARAMS
.3a1a7f	08		php		            PHP
.3a1a80	e2 20		sep #$20	            SEP #$20
.3a1a82	a9 01		lda #$01	            LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.3a1a84	20 28 1a	jsr $3a1a28	            JSR PHOPERATOR
.3a1a87	28		plp		            PLP
.3a1a88	60		rts		            RTS
.3a1a89					CLOSEPARAMS
.3a1a89	5a		phy		            PHY
.3a1a8a	08		php		            PHP
.3a1a8b	8b		phb		            PHB
.3a1a8c	08		php		            PHP
.3a1a8d	e2 20		sep #$20	            SEP #$20
.3a1a8f	48		pha		            PHA
.3a1a90	a9 00		lda #$00	            LDA #0
.3a1a92	48		pha		            PHA
.3a1a93	ab		plb		            PLB
.3a1a94	68		pla		            PLA
.3a1a95	28		plp		            PLP
.3a1a96	e2 20		sep #$20	            SEP #$20
.3a1a98	a4 21		ldy $0821	            LDY OPERATORSP      ; Peek at the top operator
.3a1a9a	b9 01 00	lda $0001,y	            LDA #1,B,Y
.3a1a9d	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the marker for the start of a parameter list
.3a1a9f	d0 08		bne $3a1aa9	            BNE error           ; No: there's a problem
.3a1aa1	c2 20		rep #$20	            REP #$20
.3a1aa3	e6 21		inc $0821	            INC OPERATORSP      ; Yes: remove it from the operator stack.
.3a1aa5	ab		plb		            PLB
.3a1aa6	28		plp		            PLP
.3a1aa7	7a		ply		            PLY
.3a1aa8	60		rts		            RTS
.3a1aa9					error
.3a1aa9	08		php		            PHP
.3a1aaa	c2 20		rep #$20	            REP #$20
.3a1aac	48		pha		            PHA
.3a1aad	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1ab0	5b		tcd		            TCD
.3a1ab1	68		pla		            PLA
.3a1ab2	28		plp		            PLP
.3a1ab3	e2 20		sep #$20	            SEP #$20
.3a1ab5	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1ab7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1abb	c2 20		rep #$20	            REP #$20
.3a1abd	29 ff 00	and #$00ff	            AND #$00FF
.3a1ac0	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a1ac3	e2 20		sep #$20	            SEP #$20
.3a1ac5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1ac8					OPHIGHPREC
.3a1ac8	48		pha		            PHA
.3a1ac9	08		php		            PHP
.3a1aca	0b		phd		            PHD
.3a1acb	8b		phb		            PHB
.3a1acc	08		php		            PHP
.3a1acd	c2 20		rep #$20	            REP #$20
.3a1acf	48		pha		            PHA
.3a1ad0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1ad3	5b		tcd		            TCD
.3a1ad4	68		pla		            PLA
.3a1ad5	28		plp		            PLP
.3a1ad6	08		php		            PHP
.3a1ad7	e2 20		sep #$20	            SEP #$20
.3a1ad9	48		pha		            PHA
.3a1ada	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1adc	48		pha		            PHA
.3a1add	ab		plb		            PLB
.3a1ade	68		pla		            PLA
.3a1adf	28		plp		            PLP
.3a1ae0	e2 20		sep #$20	            SEP #$20
.3a1ae2	a4 21		ldy $0821	            LDY OPERATORSP
.3a1ae4	c0 ff 7f	cpy #$7fff	            CPY #OPERATOR_TOP       ; Is the stack empty?
.3a1ae7	f0 11		beq $3a1afa	            BEQ is_false            ; Yes: return false
.3a1ae9	20 5a 0c	jsr $3a0c5a	            JSR TOKPRECED
.3a1aec	85 0c		sta $080c	            STA SCRATCH             ; Save it for later comparison
.3a1aee	b9 01 00	lda $0001,y	            LDA #1,B,Y              ; Get the operator at the top of the stack
.3a1af1	20 5a 0c	jsr $3a0c5a	            JSR TOKPRECED
.3a1af4	c5 0c		cmp $080c	            CMP SCRATCH             ; Compare the priorities (0 = highest priority)
.3a1af6	f0 02		beq $3a1afa	            BEQ is_false            ; A = SCRATCH, return false
.3a1af8	90 08		bcc $3a1b02	            BCC is_true             ; A < SCRATCH (A is higher priority), return false
.3a1afa					is_false
.3a1afa	c2 20		rep #$20	            REP #$20
.3a1afc	ab		plb		            PLB
.3a1afd	2b		pld		            PLD
.3a1afe	28		plp		            PLP
.3a1aff	68		pla		            PLA
.3a1b00	18		clc		            CLC
.3a1b01	60		rts		            RTS
.3a1b02					is_true
.3a1b02	c2 20		rep #$20	            REP #$20
.3a1b04	ab		plb		            PLB                     ; A > SCRATCH (A is lower priority), return true
.3a1b05	2b		pld		            PLD
.3a1b06	28		plp		            PLP
.3a1b07	68		pla		            PLA
.3a1b08	38		sec		            SEC
.3a1b09	60		rts		            RTS
.3a1b0a					EVALNUMBER
.3a1b0a	4c d8 08	jmp $3a08d8	            JMP PARSEINT
.3a1b0d					ARR_GETIDX
.3a1b0d	08		php		            PHP
.3a1b0e	e2 20		sep #$20	            SEP #$20
.3a1b10	a9 00		lda #$00	            LDA #0
.3a1b12	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF     ; Set the dimension to 0
.3a1b16	a2 01 00	ldx #$0001	            LDX #1
.3a1b19					eval_index
.3a1b19	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a1b1c	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a1b1f	c2 20		rep #$20	            REP #$20
.3a1b21	a5 23		lda $0823	            LDA ARGUMENT1       ; Save the index to the array index buffer
.3a1b23	9f 00 4d 00	sta $004d00,x	            STA @l ARRIDXBUF,X
.3a1b27	e2 20		sep #$20	            SEP #$20
.3a1b29	af 00 4d 00	lda $004d00	            LDA @l ARRIDXBUF    ; Increment the index count
.3a1b2d	1a		inc a		            INC A
.3a1b2e	30 3e		bmi $3a1b6e	            BMI arg_err         ; If more than 127 dimensions, throw a range error
.3a1b30	8f 00 4d 00	sta $004d00	            STA @l ARRIDXBUF
.3a1b34	e8		inx		            INX
.3a1b35	e8		inx		            INX
.3a1b36	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a1b39	e2 20		sep #$20	            SEP #$20
.3a1b3b	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.3a1b3d	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it ")"
.3a1b3f	f0 09		beq $3a1b4a	            BEQ clean_op        ; Yes: cleanup the argument stack
.3a1b41	c9 2c		cmp #$2c	            CMP #','            ; Is it a comma?
.3a1b43	d0 0a		bne $3a1b4f	            BNE syntax_err      ; No: throw a syntax error
.3a1b45					skip_comma
.3a1b45	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1b48	80 cf		bra $3a1b19	            BRA eval_index      ; And grab the next index
.3a1b4a					clean_op
.3a1b4a	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1b4d	28		plp		            PLP
.3a1b4e	60		rts		            RTS
.3a1b4f					syntax_err
.3a1b4f	08		php		            PHP
.3a1b50	c2 20		rep #$20	            REP #$20
.3a1b52	48		pha		            PHA
.3a1b53	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1b56	5b		tcd		            TCD
.3a1b57	68		pla		            PLA
.3a1b58	28		plp		            PLP
.3a1b59	e2 20		sep #$20	            SEP #$20
.3a1b5b	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1b5d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1b61	c2 20		rep #$20	            REP #$20
.3a1b63	29 ff 00	and #$00ff	            AND #$00FF
.3a1b66	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a1b69	e2 20		sep #$20	            SEP #$20
.3a1b6b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1b6e					arg_err
.3a1b6e	08		php		            PHP
.3a1b6f	c2 20		rep #$20	            REP #$20
.3a1b71	48		pha		            PHA
.3a1b72	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1b75	5b		tcd		            TCD
.3a1b76	68		pla		            PLA
.3a1b77	28		plp		            PLP
.3a1b78	e2 20		sep #$20	            SEP #$20
.3a1b7a	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a1b7c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1b80	c2 20		rep #$20	            REP #$20
.3a1b82	29 ff 00	and #$00ff	            AND #$00FF
.3a1b85	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a1b88	e2 20		sep #$20	            SEP #$20
.3a1b8a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1b8d					EVALREF
.3a1b8d	08		php		            PHP
.3a1b8e					get_name
.3a1b8e	20 1f 54	jsr $3a541f	            JSR VAR_FINDNAME
.3a1b91	90 47		bcc $3a1bda	            BCC syntax_err      ; If we didn't find a name, thrown an error
.3a1b93	e2 20		sep #$20	            SEP #$20
.3a1b95	a5 ea		lda $08ea	            LDA TOFINDTYPE      ; Check the type of the variable
.3a1b97	29 80		and #$80	            AND #$80            ; Is it an array?
.3a1b99	d0 06		bne $3a1ba1	            BNE is_array        ; Yes: look for the indexes
.3a1b9b	20 20 52	jsr $3a5220	            JSR VAR_REF
.3a1b9e	4c d8 1b	jmp $3a1bd8	            JMP done
.3a1ba1					is_array
.3a1ba1	20 92 51	jsr $3a5192	            JSR VAR_FIND
.3a1ba4	90 53		bcc $3a1bf9	            BCC notfound
.3a1ba6	c2 20		rep #$20	            REP #$20
.3a1ba8	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a1baa	48		pha		            PHA
.3a1bab	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a1bad	48		pha		            PHA
.3a1bae	a0 09 00	ldy #$0009	            LDY #BINDING.VALUE
.3a1bb1	b7 08		lda [$0808],y	            LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.3a1bb3	85 c0		sta $08c0	            STA CURRBLOCK
.3a1bb5	e2 20		sep #$20	            SEP #$20
.3a1bb7	c8		iny		            INY
.3a1bb8	c8		iny		            INY
.3a1bb9	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1bbb	85 c2		sta $08c2	            STA CURRBLOCK+2
.3a1bbd	e2 20		sep #$20	            SEP #$20
.3a1bbf	a9 8f		lda #$8f	            LDA #TOK_LPAREN
.3a1bc1	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a1bc4	20 7f 1a	jsr $3a1a7f	            JSR OPENPARAMS
.3a1bc7					            PHARRIDX
.3a1bc7	20 0d 1b	jsr $3a1b0d	            JSR ARR_GETIDX
.3a1bca	20 f6 68	jsr $3a68f6	            JSR ARR_REF
.3a1bcd					            PLARRIDX
.3a1bcd	20 89 1a	jsr $3a1a89	            JSR CLOSEPARAMS
.3a1bd0	c2 20		rep #$20	            REP #$20
.3a1bd2	68		pla		            PLA
.3a1bd3	85 c2		sta $08c2	            STA CURRBLOCK+2
.3a1bd5	68		pla		            PLA
.3a1bd6	85 c0		sta $08c0	            STA CURRBLOCK
.3a1bd8	28		plp		done        PLP
.3a1bd9	60		rts		            RTS
.3a1bda					syntax_err
.3a1bda	08		php		            PHP
.3a1bdb	c2 20		rep #$20	            REP #$20
.3a1bdd	48		pha		            PHA
.3a1bde	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1be1	5b		tcd		            TCD
.3a1be2	68		pla		            PLA
.3a1be3	28		plp		            PLP
.3a1be4	e2 20		sep #$20	            SEP #$20
.3a1be6	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1be8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1bec	c2 20		rep #$20	            REP #$20
.3a1bee	29 ff 00	and #$00ff	            AND #$00FF
.3a1bf1	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a1bf4	e2 20		sep #$20	            SEP #$20
.3a1bf6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1bf9					notfound
.3a1bf9	08		php		            PHP
.3a1bfa	c2 20		rep #$20	            REP #$20
.3a1bfc	48		pha		            PHA
.3a1bfd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1c00	5b		tcd		            TCD
.3a1c01	68		pla		            PLA
.3a1c02	28		plp		            PLP
.3a1c03	e2 20		sep #$20	            SEP #$20
.3a1c05	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a1c07	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1c0b	c2 20		rep #$20	            REP #$20
.3a1c0d	29 ff 00	and #$00ff	            AND #$00FF
.3a1c10	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a1c13	e2 20		sep #$20	            SEP #$20
.3a1c15	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1c18					EVALSTRING
.3a1c18	08		php		            PHP
.3a1c19	0b		phd		            PHD
.3a1c1a	08		php		            PHP
.3a1c1b	c2 20		rep #$20	            REP #$20
.3a1c1d	48		pha		            PHA
.3a1c1e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1c21	5b		tcd		            TCD
.3a1c22	68		pla		            PLA
.3a1c23	28		plp		            PLP
.3a1c24	e2 20		sep #$20	            SEP #$20
.3a1c26	c2 10		rep #$10	            REP #$10
.3a1c28	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1c2b	a0 00 00	ldy #$0000	            LDY #0              ; Ywill be our length counter
.3a1c2e	b7 00		lda [$0800],y	count_loop  LDA [BIP],Y         ; Get the character
.3a1c30	f0 24		beq $3a1c56	            BEQ error           ; If it's end-of-line, throw an error
.3a1c32	c9 22		cmp #$22	            CMP #CHAR_DQUOTE    ; Is it the ending double-quote?
.3a1c34	f0 03		beq $3a1c39	            BEQ found_end       ; Yes: Y should be the length
.3a1c36	c8		iny		            INY
.3a1c37	80 f5		bra $3a1c2e	            BRA count_loop
.3a1c39	84 0c		sty $080c	found_end   STY SCRATCH         ; Save the length to SCRATCH
.3a1c3b	e2 20		sep #$20	            SEP #$20
.3a1c3d	a9 02		lda #$02	            LDA #TYPE_STRING    ; Set the type to allocate to STRING
.3a1c3f	a6 0c		ldx $080c	            LDX SCRATCH         ; And the length to the length of the string literal
.3a1c41	e8		inx		            INX
.3a1c42	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a1c45	a0 00 00	ldy #$0000	            LDY #0
.3a1c48	c4 0c		cpy $080c	copy_loop   CPY SCRATCH         ; Have we copied all the characters?
.3a1c4a	f0 29		beq $3a1c75	            BEQ done            ; Yes: we're done
.3a1c4c	a7 00		lda [$0800]	            LDA [BIP]           ; No: get the next character
.3a1c4e	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And copy it to the allocated string
.3a1c50	c8		iny		            INY
.3a1c51	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1c54	80 f2		bra $3a1c48	            BRA copy_loop       ; And try the next character
.3a1c56					error
.3a1c56	08		php		            PHP
.3a1c57	c2 20		rep #$20	            REP #$20
.3a1c59	48		pha		            PHA
.3a1c5a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1c5d	5b		tcd		            TCD
.3a1c5e	68		pla		            PLA
.3a1c5f	28		plp		            PLP
.3a1c60	e2 20		sep #$20	            SEP #$20
.3a1c62	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1c64	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1c68	c2 20		rep #$20	            REP #$20
.3a1c6a	29 ff 00	and #$00ff	            AND #$00FF
.3a1c6d	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a1c70	e2 20		sep #$20	            SEP #$20
.3a1c72	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1c75	a9 00		lda #$00	done        LDA #0
.3a1c77	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a1c79	c2 20		rep #$20	            REP #$20
.3a1c7b	a5 16		lda $0816	            LDA STRPTR
.3a1c7d	85 23		sta $0823	            STA ARGUMENT1
.3a1c7f	a5 18		lda $0818	            LDA STRPTR+2
.3a1c81	85 25		sta $0825	            STA ARGUMENT1+2
.3a1c83	a9 02 00	lda #$0002	            LDA #TYPE_STRING    ; And set the type of ARGUMENT1 to string
.3a1c86	85 27		sta $0827	            STA ARGTYPE1
.3a1c88	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1c8b	2b		pld		            PLD
.3a1c8c	28		plp		            PLP
.3a1c8d	60		rts		            RTS
.3a1c8e					EVAL_FUNC
.3a1c8e	08		php		            PHP
.3a1c8f	e2 20		sep #$20	            SEP #$20
.3a1c91	a7 00		lda [$0800]	            LDA [BIP]           ; Get the token
.3a1c93	c2 20		rep #$20	            REP #$20
.3a1c95	29 ff 00	and #$00ff	            AND #$00FF
.3a1c98	20 84 0c	jsr $3a0c84	            JSR TOKEVAL
.3a1c9b	85 2f		sta $082f	            STA JMP16PTR
.3a1c9d	20 7f 1a	jsr $3a1a7f	            JSR OPENPARAMS
.3a1ca0	08		php		            PHP
.3a1ca1	e2 20		sep #$20	            SEP #$20
.3a1ca3	48		pha		            PHA
.3a1ca4	a9 00		lda #$00	            LDA #0
.3a1ca6	48		pha		            PHA
.3a1ca7	ab		plb		            PLB
.3a1ca8	68		pla		            PLA
.3a1ca9	28		plp		            PLP
.3a1caa	20 b2 1c	jsr $3a1cb2	            JSR OPSTUB
.3a1cad	20 89 1a	jsr $3a1a89	            JSR CLOSEPARAMS
.3a1cb0	28		plp		            PLP
.3a1cb1	60		rts		            RTS
.3a1cb2					OPSTUB
.3a1cb2	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1cb5	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a1cb8					PROCESSOP
.3a1cb8	48		pha		            PHA
.3a1cb9	08		php		            PHP
.3a1cba	0b		phd		            PHD
.3a1cbb	8b		phb		            PHB
.3a1cbc	08		php		            PHP
.3a1cbd	c2 20		rep #$20	            REP #$20
.3a1cbf	48		pha		            PHA
.3a1cc0	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1cc3	5b		tcd		            TCD
.3a1cc4	68		pla		            PLA
.3a1cc5	28		plp		            PLP
.3a1cc6	c2 30		rep #$30	            REP #$30
.3a1cc8	20 51 1a	jsr $3a1a51	            JSR PLOPERATOR
.3a1ccb	89 80 00	bit #$0080	            BIT #$80            ; Check if it's really a token
.3a1cce	f0 37		beq $3a1d07	            BEQ bad_token       ; No: it's a bad token
.3a1cd0	48		pha		            PHA
.3a1cd1	20 84 0c	jsr $3a0c84	            JSR TOKEVAL
.3a1cd4	85 2f		sta $082f	            STA JMP16PTR
.3a1cd6	68		pla		            PLA
.3a1cd7	20 d1 0c	jsr $3a0cd1	            JSR TOKARITY
.3a1cda	c9 01 00	cmp #$0001	            CMP #1              ; Check the operator's arity
.3a1cdd	f0 08		beq $3a1ce7	            BEQ pull_arg1       ; If it's 1 just pull one argument from the stack
.3a1cdf	c2 30		rep #$30	            REP #$30
.3a1ce1	a2 29 08	ldx #$0829	            LDX #<>ARGUMENT2    ; Pull argument 2 from the stack
.3a1ce4	20 e9 19	jsr $3a19e9	            JSR PLARGUMENT
.3a1ce7					pull_arg1
.3a1ce7	c2 30		rep #$30	            REP #$30
.3a1ce9	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Pull argument 1 from the stack
.3a1cec	20 e9 19	jsr $3a19e9	            JSR PLARGUMENT
.3a1cef	08		php		            PHP
.3a1cf0	e2 20		sep #$20	            SEP #$20
.3a1cf2	48		pha		            PHA
.3a1cf3	a9 00		lda #$00	            LDA #0
.3a1cf5	48		pha		            PHA
.3a1cf6	ab		plb		            PLB
.3a1cf7	68		pla		            PLA
.3a1cf8	28		plp		            PLP
.3a1cf9	20 09 1d	jsr $3a1d09	            JSR OPSTUB
.3a1cfc	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Get return result in argument 1
.3a1cff	20 ab 19	jsr $3a19ab	            JSR PHARGUMENT
.3a1d02	ab		plb		            PLB
.3a1d03	2b		pld		            PLD
.3a1d04	28		plp		            PLP
.3a1d05	68		pla		            PLA
.3a1d06	60		rts		            RTS
.3a1d07	00		brk #		bad_token   BRK
.3a1d08	ea		nop		            NOP
.3a1d09	6c 2f 08	jmp ($082f)	OPSTUB      JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a1d0c					EVALEXPR
.3a1d0c	08		php		            PHP
.3a1d0d	08		php		            PHP
.3a1d0e	c2 20		rep #$20	            REP #$20
.3a1d10	48		pha		            PHA
.3a1d11	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1d14	5b		tcd		            TCD
.3a1d15	68		pla		            PLA
.3a1d16	28		plp		            PLP
.3a1d17	08		php		            PHP
.3a1d18	e2 20		sep #$20	            SEP #$20
.3a1d1a	48		pha		            PHA
.3a1d1b	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1d1d	48		pha		            PHA
.3a1d1e	ab		plb		            PLB
.3a1d1f	68		pla		            PLA
.3a1d20	28		plp		            PLP
.3a1d21	c2 10		rep #$10	            REP #$10
.3a1d23	da		phx		            PHX
.3a1d24					get_char
.3a1d24	e2 20		sep #$20	            SEP #$20
.3a1d26	a7 00		lda [$0800]	            LDA [BIP]           ; Get the character
.3a1d28	d0 03		bne $3a1d2d	            BNE else1
.3a1d2a	4c cf 1d	jmp $3a1dcf	            JMP proc_stack      ; Handle end of line, if we see it
.3a1d2d	30 33		bmi $3a1d62	else1       BMI is_token        ; If MSB is set, it's a token
.3a1d2f	c9 20		cmp #$20	            CMP #' '            ; Is it a space?
.3a1d31	d0 03		bne $3a1d36	            BNE else2
.3a1d33	4c c9 1d	jmp $3a1dc9	            JMP next_char       ; Yes: Skip to the next character
.3a1d36	c9 3a		cmp #$3a	else2       CMP #'9'+1          ; Check to see if we have digits
.3a1d38	b0 04		bcs $3a1d3e	            BCS else3           ; No: treat as the end of the line
.3a1d3a	c9 30		cmp #$30	            CMP #'0'
.3a1d3c	b0 56		bcs $3a1d94	            BCS is_digit
.3a1d3e	c9 26		cmp #$26	else3       CMP #'&'            ; Check for a hexadecimal prefix
.3a1d40	f0 52		beq $3a1d94	            BEQ is_digit
.3a1d42	c9 22		cmp #$22	            CMP #'"'            ; Is it a double-quote?
.3a1d44	d0 03		bne $3a1d49	            BNE else4
.3a1d46	4c e2 1d	jmp $3a1de2	            JMP is_string       ; Yes: process the string
.3a1d49	c9 5b		cmp #$5b	else4       CMP #'Z'+1          ; Check to see if we have upper case alphabetics
.3a1d4b	b0 07		bcs $3a1d54	            BCS check_lc        ; No: check for lower case
.3a1d4d	c9 41		cmp #$41	            CMP #'A'
.3a1d4f	90 03		bcc $3a1d54	            BCC check_lc
.3a1d51	4c ee 1d	jmp $3a1dee	            JMP is_alpha
.3a1d54	c9 7b		cmp #$7b	check_lc    CMP #'z'+1          ; Check to see if we have lower case alphabetics
.3a1d56	b0 07		bcs $3a1d5f	            BCS else5           ; No: treat as the end of the line
.3a1d58	c9 61		cmp #$61	            CMP #'a'
.3a1d5a	90 03		bcc $3a1d5f	            BCC else5
.3a1d5c	4c ee 1d	jmp $3a1dee	            JMP is_alpha
.3a1d5f	4c cf 1d	jmp $3a1dcf	else5       JMP proc_stack
.3a1d62	c9 8f		cmp #$8f	is_token    CMP #TOK_LPAREN     ; Is it an LPAREN
.3a1d64	f0 40		beq $3a1da6	            BEQ is_lparen       ; Yes: handle the LPAREN
.3a1d66	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it an RPAREN?
.3a1d68	f0 41		beq $3a1dab	            BEQ is_rparen       ; Yes: handle the RPAREN
.3a1d6a	20 a7 0c	jsr $3a0ca7	            JSR TOKTYPE
.3a1d6d	c9 30		cmp #$30	            CMP #TOK_TY_FUNC    ; Is it a function?
.3a1d6f	d0 0c		bne $3a1d7d	            BNE chk_op          ; No: check if it's an operator
.3a1d71	20 8e 1c	jsr $3a1c8e	            JSR EVAL_FUNC
.3a1d74	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1d77	20 ab 19	jsr $3a19ab	            JSR PHARGUMENT
.3a1d7a	4c 24 1d	jmp $3a1d24	            JMP get_char
.3a1d7d	c9 00		cmp #$00	chk_op      CMP #TOK_TY_OP      ; Is it an operator?
.3a1d7f	d0 4e		bne $3a1dcf	            BNE proc_stack      ; No: we're finished processing
.3a1d81	a7 00		lda [$0800]	            LDA [BIP]           ; Yes: Get the token back
.3a1d83	a6 21		ldx $0821	chk_prec    LDX OPERATORSP      ; Is the operator stack empty?
.3a1d85	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.3a1d88	f0 05		beq $3a1d8f	            BEQ push_op         ; Yes: push the operator
.3a1d8a	20 c8 1a	jsr $3a1ac8	            JSR OPHIGHPREC
.3a1d8d	b0 12		bcs $3a1da1	            BCS process1        ; No: we should process the top operator
.3a1d8f					push_op
.3a1d8f	20 28 1a	jsr $3a1a28	            JSR PHOPERATOR
.3a1d92	80 35		bra $3a1dc9	            BRA next_char       ; And go to the next character
.3a1d94					is_digit
.3a1d94	c2 20		rep #$20	            REP #$20
.3a1d96	20 41 5a	jsr $3a5a41	            JSR PARSENUM
.3a1d99	a2 23 08	ldx #$0823	got_number  LDX #<>ARGUMENT1
.3a1d9c	20 ab 19	jsr $3a19ab	            JSR PHARGUMENT
.3a1d9f	80 83		bra $3a1d24	            BRA get_char
.3a1da1					process1
.3a1da1	20 b8 1c	jsr $3a1cb8	            JSR PROCESSOP
.3a1da4	80 dd		bra $3a1d83	            BRA chk_prec        ; And check what to do with the current operator
.3a1da6					is_lparen
.3a1da6	20 28 1a	jsr $3a1a28	            JSR PHOPERATOR
.3a1da9	80 1e		bra $3a1dc9	            BRA next_char
.3a1dab					is_rparen
.3a1dab	e2 20		sep #$20	            SEP #$20
.3a1dad	a4 21		ldy $0821	            LDY OPERATORSP      ; Is the operator stack empty?
.3a1daf	c0 ff 7f	cpy #$7fff	            CPY #<>OPERATOR_TOP
.3a1db2	f0 46		beq $3a1dfa	            BEQ done            ; Yes: we're done evaluating things
.3a1db4	a4 21		ldy $0821	paren_loop  LDY OPERATORSP      ; Peek at the top operator
.3a1db6	b9 01 00	lda $0001,y	            LDA #1,B,Y
.3a1db9	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the LPAREN of a function?
.3a1dbb	f0 3d		beq $3a1dfa	            BEQ done            ; Yes: treat it as an empty stack
.3a1dbd	c9 8f		cmp #$8f	            CMP #TOK_LPAREN     ; Is it an LPAREN?
.3a1dbf	f0 05		beq $3a1dc6	            BEQ done_rparen     ; Yes: we're finished processing
.3a1dc1	20 b8 1c	jsr $3a1cb8	            JSR PROCESSOP
.3a1dc4	80 ee		bra $3a1db4	            BRA paren_loop
.3a1dc6					done_rparen
.3a1dc6	20 51 1a	jsr $3a1a51	            JSR PLOPERATOR
.3a1dc9					next_char
.3a1dc9	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a1dcc	4c 24 1d	jmp $3a1d24	            JMP get_char
.3a1dcf					proc_stack
.3a1dcf	a6 21		ldx $0821	            LDX OPERATORSP      ; Is the operator stack empty?
.3a1dd1	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.3a1dd4	b0 24		bcs $3a1dfa	            BGE done            ; Yes: return to the caller
.3a1dd6	bd 01 00	lda $0001,x	            LDA #1,B,X
.3a1dd9	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is top operator a function open?
.3a1ddb	f0 1d		beq $3a1dfa	            BEQ done            ; Yes: treat as end of expression
.3a1ddd	20 b8 1c	jsr $3a1cb8	            JSR PROCESSOP
.3a1de0	80 ed		bra $3a1dcf	            BRA proc_stack
.3a1de2					is_string
.3a1de2	20 18 1c	jsr $3a1c18	            JSR EVALSTRING
.3a1de5	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1de8	20 ab 19	jsr $3a19ab	            JSR PHARGUMENT
.3a1deb	4c 24 1d	jmp $3a1d24	            JMP get_char
.3a1dee					is_alpha
.3a1dee	20 8d 1b	jsr $3a1b8d	            JSR EVALREF
.3a1df1	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1df4	20 ab 19	jsr $3a19ab	            JSR PHARGUMENT
.3a1df7	4c 24 1d	jmp $3a1d24	            JMP get_char
.3a1dfa	a2 23 08	ldx #$0823	done        LDX #<>ARGUMENT1    ; Make sure the result is off the stack
.3a1dfd	20 e9 19	jsr $3a19e9	            JSR PLARGUMENT
.3a1e00					real_done
.3a1e00	fa		plx		            PLX
.3a1e01	28		plp		            PLP
.3a1e02	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\returnstack.s

.3a1e03					INITRETURN
.3a1e03	08		php		                PHP
.3a1e04	0b		phd		                PHD
.3a1e05	8b		phb		                PHB
.3a1e06	08		php		            PHP
.3a1e07	e2 20		sep #$20	            SEP #$20
.3a1e09	48		pha		            PHA
.3a1e0a	a9 00		lda #$00	            LDA #0
.3a1e0c	48		pha		            PHA
.3a1e0d	ab		plb		            PLB
.3a1e0e	68		pla		            PLA
.3a1e0f	28		plp		            PLP
.3a1e10	08		php		            PHP
.3a1e11	c2 20		rep #$20	            REP #$20
.3a1e13	48		pha		            PHA
.3a1e14	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1e17	5b		tcd		            TCD
.3a1e18	68		pla		            PLA
.3a1e19	28		plp		            PLP
.3a1e1a	c2 30		rep #$30	            REP #$30
.3a1e1c	a9 fd 5f	lda #$5ffd	                LDA #RETURN_TOP-2
.3a1e1f	85 33		sta $0833	                STA RETURNSP
.3a1e21	ab		plb		                PLB
.3a1e22	2b		pld		                PLD
.3a1e23	28		plp		                PLP
.3a1e24	60		rts		            RTS
.3a1e25					PHRETURN
.3a1e25	08		php		                PHP
.3a1e26	0b		phd		                PHD
.3a1e27	08		php		            PHP
.3a1e28	c2 20		rep #$20	            REP #$20
.3a1e2a	48		pha		            PHA
.3a1e2b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1e2e	5b		tcd		            TCD
.3a1e2f	68		pla		            PLA
.3a1e30	28		plp		            PLP
.3a1e31	c2 30		rep #$30	            REP #$30
.3a1e33	92 33		sta ($0833)	                STA (RETURNSP)
.3a1e35	c6 33		dec $0833	                DEC RETURNSP
.3a1e37	c6 33		dec $0833	                DEC RETURNSP
.3a1e39	2b		pld		                PLD
.3a1e3a	28		plp		                PLP
.3a1e3b	60		rts		            RTS
.3a1e3c					PHRETURNB
.3a1e3c	08		php		                PHP
.3a1e3d	c2 30		rep #$30	            REP #$30
.3a1e3f	29 ff 00	and #$00ff	                AND #$00FF
.3a1e42	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a1e45	28		plp		                PLP
.3a1e46	60		rts		            RTS
.3a1e47					PLRETURN
.3a1e47	08		php		                PHP
.3a1e48	0b		phd		                PHD
.3a1e49	08		php		            PHP
.3a1e4a	c2 20		rep #$20	            REP #$20
.3a1e4c	48		pha		            PHA
.3a1e4d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1e50	5b		tcd		            TCD
.3a1e51	68		pla		            PLA
.3a1e52	28		plp		            PLP
.3a1e53	c2 30		rep #$30	            REP #$30
.3a1e55	e6 33		inc $0833	                INC RETURNSP
.3a1e57	e6 33		inc $0833	                INC RETURNSP
.3a1e59	b2 33		lda ($0833)	                LDA (RETURNSP)
.3a1e5b	2b		pld		                PLD
.3a1e5c	28		plp		                PLP
.3a1e5d	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\interpreter.s

=$80					ST_RUNNING = $80            ; The interpreter is running a full program
=$00					ST_INTERACT = $00           ; The interpreter is in interactive mode
>08d2					STATE       .byte ?         ; The state of the interpreter ()
>08d3					ERROR_NUM   .byte ?         ; The type of the error
>08d4					HANDLEERR   .long ?         ; Pointer to the error handler
>08d7					LINENUM     .word ?         ; The current line number
>08d9					LASTLINE    .long ?         ; Pointer to the next free space over the BASIC program
>08dc					EXECACTION  .byte ?         ; The action the exection routines should take to get their next statement
=0					LINE_LINK = 0               ; Offset to the link to the next line
=2					LINE_NUMBER = 2             ; Offset to the line number
=4					LINE_TOKENS = 4             ; Offset to the first token
=6					LINE_MINLEN = 6             ; Minimum length of a line
=0					EXEC_CONT = 0               ; Continue advancing the current line
=1					EXEC_STOP = 1               ; Stop execution of the program
=2					EXEC_GOTO = 2               ; Transfer execution to a new CURLINE that is already set
=3					EXEC_RETURN = 3             ; Transfer execution back to a line that was on the stack
.3a1e5e					SET_ERRERL
.3a1e5e	8b		phb		                PHB
.3a1e5f	0b		phd		                PHD
.3a1e60	08		php		                PHP
.3a1e61	08		php		            PHP
.3a1e62	c2 20		rep #$20	            REP #$20
.3a1e64	48		pha		            PHA
.3a1e65	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1e68	5b		tcd		            TCD
.3a1e69	68		pla		            PLA
.3a1e6a	28		plp		            PLP
.3a1e6b	08		php		            PHP
.3a1e6c	e2 20		sep #$20	            SEP #$20
.3a1e6e	48		pha		            PHA
.3a1e6f	a9 00		lda #$00	            LDA #BASIC_BANK
.3a1e71	48		pha		            PHA
.3a1e72	ab		plb		            PLB
.3a1e73	68		pla		            PLA
.3a1e74	28		plp		            PLP
.3a1e75	c2 20		rep #$20	            REP #$20
.3a1e77	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.3a1e79	a9 00 00	lda #$0000	                LDA #0
.3a1e7c	85 25		sta $0825	                STA ARGUMENT1+2
.3a1e7e	e2 20		sep #$20	            SEP #$20
.3a1e80	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a1e82	85 27		sta $0827	                STA ARGTYPE1
.3a1e84	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.3a1e86	a9 3a		lda #$3a	                LDA #`err_name
.3a1e88	85 e9		sta $08e9	                STA TOFIND+2
.3a1e8a	c2 20		rep #$20	            REP #$20
.3a1e8c	a9 b8 1e	lda #$1eb8	                LDA #<>err_name
.3a1e8f	85 e7		sta $08e7	                STA TOFIND
.3a1e91	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a1e94	c2 20		rep #$20	            REP #$20
.3a1e96	a5 d7		lda $08d7	                LDA LINENUM
.3a1e98	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.3a1e9a	a5 d9		lda $08d9	                LDA LINENUM+2
.3a1e9c	85 25		sta $0825	                STA ARGUMENT1+2
.3a1e9e	e2 20		sep #$20	            SEP #$20
.3a1ea0	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a1ea2	85 27		sta $0827	                STA ARGTYPE1
.3a1ea4	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.3a1ea6	a9 3a		lda #$3a	                LDA #`erl_name
.3a1ea8	85 e9		sta $08e9	                STA TOFIND+2
.3a1eaa	c2 20		rep #$20	            REP #$20
.3a1eac	a9 bc 1e	lda #$1ebc	                LDA #<>erl_name
.3a1eaf	85 e7		sta $08e7	                STA TOFIND
.3a1eb1	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a1eb4	28		plp		                PLP
.3a1eb5	2b		pld		                PLD
.3a1eb6	ab		plb		                PLB
.3a1eb7	60		rts		            RTS
>3a1eb8	45 52 52 00			err_name        .null "ERR"
>3a1ebc	45 52 4c 00			erl_name        .null "ERL"
.3a1ec0					ON_ERROR
.3a1ec0	e2 20		sep #$20	            SEP #$20
.3a1ec2	c2 10		rep #$10	            REP #$10
.3a1ec4	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a1ec7	af d3 08 00	lda $0008d3	            LDA @lERROR_NUM         ; Calculate index to the error message pointer
.3a1ecb	0a		asl a		            ASL A
.3a1ecc	c2 20		rep #$20	            REP #$20
.3a1ece	29 ff 00	and #$00ff	            AND #$00FF
.3a1ed1	a8		tay		            TAY
.3a1ed2	08		php		            PHP
.3a1ed3	e2 20		sep #$20	            SEP #$20
.3a1ed5	48		pha		            PHA
.3a1ed6	a9 3a		lda #$3a	            LDA #`ERRORMSG
.3a1ed8	48		pha		            PHA
.3a1ed9	ab		plb		            PLB
.3a1eda	68		pla		            PLA
.3a1edb	28		plp		            PLP
.3a1edc	be 12 1f	ldx $3a1f12,y	            LDX ERRORMSG,Y
.3a1edf	20 64 04	jsr $3a0464	            JSR PRINTS
.3a1ee2	c2 20		rep #$20	            REP #$20
.3a1ee4	a5 d7		lda $08d7	            LDA LINENUM
.3a1ee6	f0 27		beq $3a1f0f	            BEQ skip_at
.3a1ee8	a2 42 1f	ldx #$1f42	            LDX #<>MSG_AT           ; If so... print " AT "
.3a1eeb	20 64 04	jsr $3a0464	            JSR PRINTS
.3a1eee	08		php		            PHP
.3a1eef	e2 20		sep #$20	            SEP #$20
.3a1ef1	48		pha		            PHA
.3a1ef2	a9 00		lda #$00	            LDA #BASIC_BANK
.3a1ef4	48		pha		            PHA
.3a1ef5	ab		plb		            PLB
.3a1ef6	68		pla		            PLA
.3a1ef7	28		plp		            PLP
.3a1ef8	c2 20		rep #$20	            REP #$20
.3a1efa	af d7 08 00	lda $0008d7	            LDA @lLINENUM           ; ... and then the line number
.3a1efe	8f 23 08 00	sta $000823	            STA @lARGUMENT1
.3a1f02	a9 00 00	lda #$0000	            LDA #0
.3a1f05	8f 25 08 00	sta $000825	            STA @lARGUMENT1+2
.3a1f09	20 1d 46	jsr $3a461d	            JSR PR_INTEGER
.3a1f0c	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a1f0f					skip_at
.3a1f0f	4c bf 27	jmp $3a27bf	            JMP INTERACT
>3a1f12	46 1f				ERRORMSG    .word <>MSG_OK
>3a1f14	49 1f				            .word <>MSG_BREAK
>3a1f16	4f 1f				            .word <>MSG_SYNTAX
>3a1f18	5c 1f				            .word <>MSG_MEMORY
>3a1f1a	6a 1f				            .word <>MSG_TYPE
>3a1f1c	78 1f				            .word <>MSG_NOTFND
>3a1f1e	8b 1f				            .word <>MSG_NOLINE
>3a1f20	a1 1f				            .word <>MSG_UNDFLOW
>3a1f22	b1 1f				            .word <>MSG_OVRFLOW
>3a1f24	c0 1f				            .word <>MSG_RANGE
>3a1f26	cd 1f				            .word <>MSG_ARG
>3a1f28	de 1f				            .word <>MSG_NOFILE
>3a1f2a	ed 1f				            .word <>MSG_NAN
>3a1f2c	fa 1f				            .word <>MSG_OVERFLOW
>3a1f2e	08 20				            .word <>MSG_UNDERFLOW
>3a1f30	17 20				            .word <>MSG_DIV0
>3a1f32	28 20				            .word <>MSG_DIRECTORY
>3a1f34	41 20				            .word <>MSG_LOAD
>3a1f36	55 20				            .word <>MSG_SAVE
>3a1f38	69 20				            .word <>MSG_DELETE
>3a1f3a	7f 20				            .word <>MSG_FILENOTFND
>3a1f3c	93 20				            .word <>MSG_DIRNOTWRITE
>3a1f3e	ae 20				            .word <>MSG_NOTCOPIED
>3a1f40	c6 20				            .word <>MSG_DOMAIN
>3a1f42	20 61 74 00			MSG_AT          .null " at"
>3a1f46	4f 4b 00			MSG_OK          .null "OK"
>3a1f49	42 72 65 61 6b 00		MSG_BREAK       .null "Break"
>3a1f4f	53 79 6e 74 61 78 20 65		MSG_SYNTAX      .null "Syntax error"
>3a1f57	72 72 6f 72 00
>3a1f5c	4f 75 74 20 6f 66 20 6d		MSG_MEMORY      .null "Out of memory"
>3a1f64	65 6d 6f 72 79 00
>3a1f6a	54 79 70 65 20 6d 69 73		MSG_TYPE        .null "Type mismatch"
>3a1f72	6d 61 74 63 68 00
>3a1f78	56 61 72 69 61 62 6c 65		MSG_NOTFND      .null "Variable not found"
>3a1f80	20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1f8b	4c 69 6e 65 20 6e 75 6d		MSG_NOLINE      .null "Line number not found"
>3a1f93	62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1fa1	53 74 61 63 6b 20 75 6e		MSG_UNDFLOW     .null "Stack underflow"
>3a1fa9	64 65 72 66 6c 6f 77 00
>3a1fb1	53 74 61 63 6b 20 6f 76		MSG_OVRFLOW     .null "Stack overflow"
>3a1fb9	65 72 66 6c 6f 77 00
>3a1fc0	4f 75 74 20 6f 66 20 72		MSG_RANGE       .null "Out of range"
>3a1fc8	61 6e 67 65 00
>3a1fcd	49 6c 6c 65 67 61 6c 20		MSG_ARG         .null "Illegal argument"
>3a1fd5	61 72 67 75 6d 65 6e 74 00
>3a1fde	46 69 6c 65 20 6e 6f 74		MSG_NOFILE      .null "File not found"
>3a1fe6	20 66 6f 75 6e 64 00
>3a1fed	4e 6f 74 20 61 20 6e 75		MSG_NAN         .null "Not a number"
>3a1ff5	6d 62 65 72 00
>3a1ffa	4d 61 74 68 20 6f 76 65		MSG_OVERFLOW    .null "Math overflow"
>3a2002	72 66 6c 6f 77 00
>3a2008	4d 61 74 68 20 75 6e 64		MSG_UNDERFLOW   .null "Math underflow"
>3a2010	65 72 66 6c 6f 77 00
>3a2017	44 69 76 69 73 69 6f 6e		MSG_DIV0        .null "Division by zero"
>3a201f	20 62 79 20 7a 65 72 6f 00
>3a2028	55 6e 61 62 6c 65 20 74		MSG_DIRECTORY   .null "Unable to read directory"
>3a2030	6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>3a2040	00
>3a2041	55 6e 61 62 6c 65 20 74		MSG_LOAD        .null "Unable to load file"
>3a2049	6f 20 6c 6f 61 64 20 66 69 6c 65 00
>3a2055	55 6e 61 62 6c 65 20 74		MSG_SAVE        .null "Unable to save file"
>3a205d	6f 20 73 61 76 65 20 66 69 6c 65 00
>3a2069	55 6e 61 62 6c 65 20 74		MSG_DELETE      .null "Unable to delete file"
>3a2071	6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00
>3a207f	43 6f 75 6c 64 20 6e 6f		MSG_FILENOTFND  .null "Could not find file"
>3a2087	74 20 66 69 6e 64 20 66 69 6c 65 00
>3a2093	43 6f 75 6c 64 20 6e 6f		MSG_DIRNOTWRITE .null "Could not update directory"
>3a209b	74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>3a20ab	72 79 00
>3a20ae	43 6f 75 6c 64 20 6e 6f		MSG_NOTCOPIED   .null "Could not copy the file"
>3a20b6	74 20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00
>3a20c6	41 72 67 75 6d 65 6e 74		MSG_DOMAIN      .null "Argument outside domain"
>3a20ce	20 6f 75 74 73 69 64 65 20 64 6f 6d 61 69 6e 00
.3a20de					SETINTERACT
.3a20de	08		php		            PHP
.3a20df	0b		phd		            PHD
.3a20e0	08		php		            PHP
.3a20e1	c2 20		rep #$20	            REP #$20
.3a20e3	48		pha		            PHA
.3a20e4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a20e7	5b		tcd		            TCD
.3a20e8	68		pla		            PLA
.3a20e9	28		plp		            PLP
.3a20ea	e2 20		sep #$20	            SEP #$20
.3a20ec	a9 00		lda #$00	            LDA #ST_INTERACT
.3a20ee	85 d2		sta $08d2	            STA STATE
.3a20f0	2b		pld		            PLD
.3a20f1	28		plp		            PLP
.3a20f2	60		rts		            RTS
.3a20f3					CLRINTERP
.3a20f3	0b		phd		            PHD
.3a20f4	08		php		            PHP
.3a20f5	08		php		            PHP
.3a20f6	c2 20		rep #$20	            REP #$20
.3a20f8	48		pha		            PHA
.3a20f9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a20fc	5b		tcd		            TCD
.3a20fd	68		pla		            PLA
.3a20fe	28		plp		            PLP
.3a20ff	08		php		            PHP
.3a2100	c2 20		rep #$20	            REP #$20
.3a2102	a9 c0 1e	lda #$1ec0	            LDA #<>ON_ERROR
.3a2105	8f d4 08 00	sta $0008d4	            STA @lHANDLEERR
.3a2109	e2 20		sep #$20	            SEP #$20
.3a210b	a9 3a		lda #$3a	            LDA #`ON_ERROR
.3a210d	8f d6 08 00	sta $0008d6	            STA @lHANDLEERR+2
.3a2111	28		plp		            PLP
.3a2112	20 c4 44	jsr $3a44c4	            JSR S_CLR
.3a2115	20 05 40	jsr $3a4005	            JSR S_RESTORE
.3a2118	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the depth of the GOSUB stack
.3a211a	28		plp		            PLP
.3a211b	2b		pld		            PLD
.3a211c	60		rts		            RTS
.3a211d					INCBIP
.3a211d	08		php		            PHP
.3a211e	0b		phd		            PHD
.3a211f	08		php		            PHP
.3a2120	c2 20		rep #$20	            REP #$20
.3a2122	48		pha		            PHA
.3a2123	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2126	5b		tcd		            TCD
.3a2127	68		pla		            PLA
.3a2128	28		plp		            PLP
.3a2129	c2 20		rep #$20	            REP #$20
.3a212b	18		clc		            CLC
.3a212c	a5 00		lda $0800	            LDA BIP
.3a212e	69 01 00	adc #$0001	            ADC #1
.3a2131	85 00		sta $0800	            STA BIP
.3a2133	e2 20		sep #$20	            SEP #$20
.3a2135	a5 02		lda $0802	            LDA BIP+2
.3a2137	69 00		adc #$00	            ADC #0
.3a2139	85 02		sta $0802	            STA BIP+2
.3a213b	2b		pld		            PLD
.3a213c	28		plp		            PLP
.3a213d	60		rts		            RTS
.3a213e					SKIPWS
.3a213e	08		php		            PHP
.3a213f	0b		phd		            PHD
.3a2140	08		php		            PHP
.3a2141	c2 20		rep #$20	            REP #$20
.3a2143	48		pha		            PHA
.3a2144	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2147	5b		tcd		            TCD
.3a2148	68		pla		            PLA
.3a2149	28		plp		            PLP
.3a214a	e2 20		sep #$20	            SEP #$20
.3a214c	a7 00		lda [$0800]	loop        LDA [BIP]
.3a214e	f0 0f		beq $3a215f	            BEQ done            ; If character is 0, we've reached the end of the line
.3a2150	c9 20		cmp #$20	            CMP #CHAR_SP        ; Skip if it's a space
.3a2152	f0 06		beq $3a215a	            BEQ skip_char
.3a2154	c9 09		cmp #$09	            CMP #CHAR_TAB       ; Skip if it's a TAB
.3a2156	f0 02		beq $3a215a	            BEQ skip_char
.3a2158	80 05		bra $3a215f	            BRA done            ; Otherwise, we're done and BIP points to a non-whitespace
.3a215a					skip_char
.3a215a	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a215d	80 ed		bra $3a214c	            BRA loop
.3a215f	2b		pld		done        PLD
.3a2160	28		plp		            PLP
.3a2161	60		rts		            RTS
.3a2162					SKIPSTMT
.3a2162	08		php		            PHP
.3a2163	e2 20		sep #$20	            SEP #$20
.3a2165	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the current character
.3a2167	f0 09		beq $3a2172	            BEQ done            ; Is it EOL? Yes, we're done
.3a2169	c9 3a		cmp #$3a	            CMP #':'            ; Is it a colon?
.3a216b	f0 05		beq $3a2172	            BEQ done            ; Yes, we're done
.3a216d	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a2170	80 f3		bra $3a2165	            BRA loop            ; and check it...
.3a2172	28		plp		done        PLP
.3a2173	60		rts		            RTS
.3a2174					SKIPTOTOK
.3a2174	08		php		            PHP
.3a2175	e2 20		sep #$20	            SEP #$20
.3a2177	64 36		stz $0836	            STZ NESTING
.3a2179	a7 00		lda [$0800]	loop        LDA [BIP]           ; Get the character
.3a217b	f0 19		beq $3a2196	            BEQ end_of_line     ; EOL? Yes: move to the next line
.3a217d	c5 37		cmp $0837	            CMP TARGETTOK       ; Is it the one we want?
.3a217f	f0 2c		beq $3a21ad	            BEQ check_depth     ; Yes: check the depth
.3a2181	c9 9b		cmp #$9b	            CMP #TOK_FOR        ; Is it a FOR?
.3a2183	f0 1e		beq $3a21a3	            BEQ inc_nesting     ; Yes: increment NESTING
.3a2185	c9 9f		cmp #$9f	            CMP #TOK_DO         ; Is it a DO?
.3a2187	f0 1a		beq $3a21a3	            BEQ inc_nesting     ; Yes: increment NESTING
.3a2189	c9 9e		cmp #$9e	            CMP #TOK_NEXT       ; Is it a NEXT?
.3a218b	f0 1a		beq $3a21a7	            BEQ dec_nesting     ; Yes: decrement NESTING
.3a218d	c9 a0		cmp #$a0	            CMP #TOK_LOOP       ; Is it a LOOP?
.3a218f	f0 16		beq $3a21a7	            BEQ dec_nesting     ; Yes: decrement NESTING
.3a2191					incloop
.3a2191	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a2194	80 e3		bra $3a2179	            BRA loop            ; and keep scanning
.3a2196					end_of_line
.3a2196	20 fa 21	jsr $3a21fa	            JSR NEXTLINE
.3a2199	c2 20		rep #$20	            REP #$20
.3a219b	a5 d7		lda $08d7	            LDA LINENUM         ; Check the line number
.3a219d	f0 1d		beq $3a21bc	            BEQ syntax_err1     ; If it's zero, we reached the end of the program
.3a219f	e2 20		sep #$20	            SEP #$20
.3a21a1	80 d6		bra $3a2179	            BRA loop            ; And keep scanning
.3a21a3					inc_nesting
.3a21a3	e6 36		inc $0836	            INC NESTING         ; Track that we have entered a lexical scope for a FOR/DO
.3a21a5	80 ea		bra $3a2191	            BRA incloop
.3a21a7					dec_nesting
.3a21a7	c6 36		dec $0836	            DEC NESTING         ; Track that we have left a lexical scope for a FOR/DO
.3a21a9	30 30		bmi $3a21db	            BMI syntax_err2     ; If the depth goes <0, throw a syntax error
.3a21ab	80 e4		bra $3a2191	            BRA incloop
.3a21ad					check_depth
.3a21ad	a5 35		lda $0835	            LDA SKIPNEST        ; Check to see if nesting matters
.3a21af	30 06		bmi $3a21b7	            BMI found           ; No: just return that we found the token
.3a21b1	a5 36		lda $0836	            LDA NESTING         ; Get the nesting depth
.3a21b3	f0 02		beq $3a21b7	            BEQ found           ; If it's zero, we found our token
.3a21b5	80 da		bra $3a2191	            BRA incloop         ; Otherwise: it's a token for an enclosed FOR/DO, keep scanning
.3a21b7					found
.3a21b7	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a21ba	28		plp		            PLP
.3a21bb	60		rts		            RTS
.3a21bc					syntax_err1
.3a21bc	08		php		            PHP
.3a21bd	c2 20		rep #$20	            REP #$20
.3a21bf	48		pha		            PHA
.3a21c0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a21c3	5b		tcd		            TCD
.3a21c4	68		pla		            PLA
.3a21c5	28		plp		            PLP
.3a21c6	e2 20		sep #$20	            SEP #$20
.3a21c8	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a21ca	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a21ce	c2 20		rep #$20	            REP #$20
.3a21d0	29 ff 00	and #$00ff	            AND #$00FF
.3a21d3	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a21d6	e2 20		sep #$20	            SEP #$20
.3a21d8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a21db					syntax_err2
.3a21db	08		php		            PHP
.3a21dc	c2 20		rep #$20	            REP #$20
.3a21de	48		pha		            PHA
.3a21df	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a21e2	5b		tcd		            TCD
.3a21e3	68		pla		            PLA
.3a21e4	28		plp		            PLP
.3a21e5	e2 20		sep #$20	            SEP #$20
.3a21e7	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a21e9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a21ed	c2 20		rep #$20	            REP #$20
.3a21ef	29 ff 00	and #$00ff	            AND #$00FF
.3a21f2	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a21f5	e2 20		sep #$20	            SEP #$20
.3a21f7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a21fa					NEXTLINE
.3a21fa	08		php		            PHP
.3a21fb	c2 30		rep #$30	            REP #$30
.3a21fd	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a2200	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the offset to the next line
.3a2202	85 0c		sta $080c	            STA SCRATCH
.3a2204	18		clc		            CLC                 ; Compute the new CURLINE
.3a2205	a5 1a		lda $081a	            LDA CURLINE         ; CURLINE := [CURLINE].LINE_LINK
.3a2207	65 0c		adc $080c	            ADC SCRATCH
.3a2209	85 1a		sta $081a	            STA CURLINE
.3a220b	a5 1c		lda $081c	            LDA CURLINE+2
.3a220d	69 00 00	adc #$0000	            ADC #0
.3a2210	85 1c		sta $081c	            STA CURLINE+2
.3a2212	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the LINENUM to the new current line's number
.3a2215	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; LINENUM := [CURLINE].LINE_NUMBER
.3a2217	85 d7		sta $08d7	            STA LINENUM
.3a2219	18		clc		            CLC                 ; Point BIP to the first character of the line
.3a221a	a5 1a		lda $081a	            LDA CURLINE         ; BIP := CURLINE + LINE_TOKENS
.3a221c	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a221f	85 00		sta $0800	            STA BIP
.3a2221	a5 1c		lda $081c	            LDA CURLINE+2
.3a2223	69 00 00	adc #$0000	            ADC #0
.3a2226	85 02		sta $0802	            STA BIP+2
.3a2228	28		plp		            PLP
.3a2229	60		rts		            RTS
.3a222a					EXPECT_TOK
.3a222a	08		php		            PHP
.3a222b	e2 20		sep #$20	            SEP #$20
.3a222d	48		pha		            PHA
.3a222e	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a2231	68		pla		            PLA
.3a2232	e2 20		sep #$20	            SEP #$20
.3a2234	c7 00		cmp [$0800]	            CMP [BIP]           ; Check the character at BIP
.3a2236	d0 08		bne $3a2240	            BNE syntax_err      ; Throw a syntax error
.3a2238	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a223b	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a223e	28		plp		            PLP
.3a223f	60		rts		            RTS
.3a2240					syntax_err
.3a2240	08		php		            PHP
.3a2241	c2 20		rep #$20	            REP #$20
.3a2243	48		pha		            PHA
.3a2244	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2247	5b		tcd		            TCD
.3a2248	68		pla		            PLA
.3a2249	28		plp		            PLP
.3a224a	e2 20		sep #$20	            SEP #$20
.3a224c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a224e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2252	c2 20		rep #$20	            REP #$20
.3a2254	29 ff 00	and #$00ff	            AND #$00FF
.3a2257	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a225a	e2 20		sep #$20	            SEP #$20
.3a225c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a225f					OPT_TOK
.3a225f	08		php		            PHP
.3a2260	e2 20		sep #$20	            SEP #$20
.3a2262	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a2265	e2 20		sep #$20	            SEP #$20
.3a2267	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the character at BIP
.3a2269	f0 10		beq $3a227b	            BEQ ret_false       ; If end-of-line, return false
.3a226b	c9 3a		cmp #$3a	            CMP #':'
.3a226d	f0 0c		beq $3a227b	            BEQ ret_false       ; If colon, return false
.3a226f	c5 37		cmp $0837	            CMP TARGETTOK
.3a2271	f0 05		beq $3a2278	            BEQ ret_true        ; If matches, return true
.3a2273	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a2276	80 ef		bra $3a2267	            BRA loop
.3a2278	28		plp		ret_true    PLP
.3a2279	38		sec		            SEC
.3a227a	60		rts		            RTS
.3a227b	28		plp		ret_false   PLP
.3a227c	18		clc		            CLC
.3a227d	60		rts		            RTS
.3a227e					PEEK_TOK
.3a227e	5a		phy		            PHY
.3a227f	08		php		            PHP
.3a2280	e2 20		sep #$20	            SEP #$20
.3a2282	a0 00 00	ldy #$0000	            LDY #0
.3a2285	b7 00		lda [$0800],y	loop        LDA [BIP],Y
.3a2287	f0 0d		beq $3a2296	            BEQ done
.3a2289	c9 3a		cmp #$3a	            CMP #':'
.3a228b	f0 07		beq $3a2294	            BEQ ret_null
.3a228d	c9 20		cmp #$20	            CMP #CHAR_SP
.3a228f	d0 05		bne $3a2296	            BNE done
.3a2291	c8		iny		            INY
.3a2292	80 f1		bra $3a2285	            BRA loop
.3a2294	a9 00		lda #$00	ret_null    LDA #0
.3a2296	28		plp		done        PLP
.3a2297	7a		ply		            PLY
.3a2298	60		rts		            RTS
.3a2299					EXECSTMT
.3a2299	08		php		            PHP
.3a229a	0b		phd		            PHD
.3a229b	8b		phb		            PHB
.3a229c	08		php		            PHP
.3a229d	c2 20		rep #$20	            REP #$20
.3a229f	48		pha		            PHA
.3a22a0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a22a3	5b		tcd		            TCD
.3a22a4	68		pla		            PLA
.3a22a5	28		plp		            PLP
.3a22a6	20 f8 14	jsr $3a14f8	            JSR CLRTMPSTR
.3a22a9	20 8b 19	jsr $3a198b	            JSR INITEVALSP
.3a22ac	e2 20		sep #$20	            SEP #$20
.3a22ae	a9 00		lda #$00	            LDA #EXEC_CONT      ; This will tell EXECLINE and EXECPROG to procede in a
.3a22b0	85 dc		sta $08dc	            STA EXECACTION      ; linear fashion through the program
.3a22b2	22 3c 11 00	jsl $00113c	check_break JSL FK_TESTBREAK
.3a22b6	b0 4b		bcs $3a2303	            BCS throw_break     ; If C: user pressed an interrupt key, stop the program
.3a22b8	a7 00		lda [$0800]	            LDA [BIP]           ; If we happen to have a colon, just skip over it.
.3a22ba	c9 3a		cmp #$3a	            CMP #':'            ; This can happen with FOR/NEXT
.3a22bc	d0 03		bne $3a22c1	            BNE eat_ws
.3a22be	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a22c1					eat_ws
.3a22c1	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a22c4	a7 00		lda [$0800]	            LDA [BIP]
.3a22c6	d0 03		bne $3a22cb	            BNE else
.3a22c8	4c 4d 23	jmp $3a234d	            JMP done            ; If the current byte is 0, we're at the end of the line, just return
.3a22cb					else
.3a22cb	20 e2 04	jsr $3a04e2	            JSR ISALPHA
.3a22ce	b0 52		bcs $3a2322	            BCS is_variable     ; Yes: we may have a LET statement
.3a22d0	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it's any other non-token
.3a22d2	10 10		bpl $3a22e4	            BPL error           ; Yes: it's a syntax error
.3a22d4	20 a7 0c	jsr $3a0ca7	            JSR TOKTYPE
.3a22d7	85 0c		sta $080c	            STA SCRATCH         ; Save the type for later
.3a22d9	c9 20		cmp #$20	            CMP #TOK_TY_STMNT   ; Is it a statement?
.3a22db	d0 03		bne $3a22e0	            BNE else2
.3a22dd	4c 3b 23	jmp $3a233b	            JMP ok_to_exec      ; Yes: it's ok to try to execute it
.3a22e0	a5 d2		lda $08d2	else2       LDA STATE           ; Check to see if we're in interactive mode
.3a22e2	f0 51		beq $3a2335	            BEQ is_interact
.3a22e4					error
.3a22e4	08		php		            PHP
.3a22e5	c2 20		rep #$20	            REP #$20
.3a22e7	48		pha		            PHA
.3a22e8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a22eb	5b		tcd		            TCD
.3a22ec	68		pla		            PLA
.3a22ed	28		plp		            PLP
.3a22ee	e2 20		sep #$20	            SEP #$20
.3a22f0	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a22f2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a22f6	c2 20		rep #$20	            REP #$20
.3a22f8	29 ff 00	and #$00ff	            AND #$00FF
.3a22fb	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a22fe	e2 20		sep #$20	            SEP #$20
.3a2300	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2303					throw_break
.3a2303	08		php		            PHP
.3a2304	c2 20		rep #$20	            REP #$20
.3a2306	48		pha		            PHA
.3a2307	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a230a	5b		tcd		            TCD
.3a230b	68		pla		            PLA
.3a230c	28		plp		            PLP
.3a230d	e2 20		sep #$20	            SEP #$20
.3a230f	a9 01		lda #$01	            LDA #ERR_BREAK
.3a2311	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2315	c2 20		rep #$20	            REP #$20
.3a2317	29 ff 00	and #$00ff	            AND #$00FF
.3a231a	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a231d	e2 20		sep #$20	            SEP #$20
.3a231f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2322					is_variable
.3a2322	20 ce 44	jsr $3a44ce	            JSR S_LET
.3a2325	4c 4d 23	jmp $3a234d	            JMP done
.3a2328					STSTUB
.3a2328	08		php		            PHP
.3a2329	e2 20		sep #$20	            SEP #$20
.3a232b	48		pha		            PHA
.3a232c	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a232e	48		pha		            PHA
.3a232f	ab		plb		            PLB
.3a2330	68		pla		            PLA
.3a2331	28		plp		            PLP
.3a2332	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a2335	a5 0c		lda $080c	is_interact LDA SCRATCH         ; Get the token type
.3a2337	c9 10		cmp #$10	            CMP #TOK_TY_CMD     ; Is it a command?
.3a2339	d0 a9		bne $3a22e4	            BNE error           ; If not, it's an error
.3a233b					ok_to_exec
.3a233b	a7 00		lda [$0800]	            LDA [BIP]           ; Get the original token again
.3a233d	20 84 0c	jsr $3a0c84	            JSR TOKEVAL
.3a2340	c2 20		rep #$20	            REP #$20
.3a2342	85 2f		sta $082f	            STA JMP16PTR        ; Store it in the jump pointer
.3a2344	20 8b 19	jsr $3a198b	            JSR INITEVALSP
.3a2347	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a234a	20 28 23	jsr $3a2328	            JSR STSTUB
.3a234d	ab		plb		done        PLB
.3a234e	2b		pld		            PLD
.3a234f	28		plp		            PLP
.3a2350	60		rts		            RTS
.3a2351					EXECCMD
.3a2351	08		php		            PHP
.3a2352	58		cli		            CLI
.3a2353	20 de 20	jsr $3a20de	            JSR SETINTERACT
.3a2356	20 03 1e	jsr $3a1e03	            JSR INITRETURN
.3a2359	e2 20		sep #$20	            SEP #$20
.3a235b	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.3a235e	c2 20		rep #$20	            REP #$20
.3a2360	a5 1a		lda $081a	            LDA CURLINE         ; Set the BASIC Instruction Pointer to the first byte of the line
.3a2362	85 00		sta $0800	            STA BIP
.3a2364	a5 1c		lda $081c	            LDA CURLINE+2
.3a2366	85 02		sta $0802	            STA BIP+2
.3a2368	4c 8f 23	jmp $3a238f	            JMP exec_loop
.3a236b	08		php		EXECLINE    PHP
.3a236c	c2 20		rep #$20	            REP #$20
.3a236e	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER            ; Set the current line number
.3a2371	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.3a2373	85 d7		sta $08d7	            STA LINENUM
.3a2375	e2 20		sep #$20	            SEP #$20
.3a2377	a5 dc		lda $08dc	            LDA EXECACTION              ; If the last EXEC action was RETURN
.3a2379	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; BIP has already been set, so...
.3a237b	f0 12		beq $3a238f	            BEQ exec_loop               ; Skip over setting the BIP to the beginning of the line
.3a237d	c2 20		rep #$20	            REP #$20
.3a237f	18		clc		            CLC                         ; Set the BASIC Instruction Pointer to the first byte of the line
.3a2380	a5 1a		lda $081a	            LDA CURLINE
.3a2382	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2385	85 00		sta $0800	            STA BIP
.3a2387	e2 20		sep #$20	            SEP #$20
.3a2389	a5 1c		lda $081c	            LDA CURLINE+2
.3a238b	69 00		adc #$00	            ADC #0
.3a238d	85 02		sta $0802	            STA BIP+2
.3a238f					exec_loop
.3a238f	c2 20		rep #$20	            REP #$20
.3a2391	20 99 22	jsr $3a2299	            JSR EXECSTMT
.3a2394	e2 20		sep #$20	            SEP #$20
.3a2396	a5 dc		lda $08dc	            LDA EXECACTION
.3a2398	c9 03		cmp #$03	            CMP #EXEC_RETURN
.3a239a	f0 f3		beq $3a238f	            BEQ exec_loop
.3a239c	c9 00		cmp #$00	            CMP #EXEC_CONT              ; If it's not EXEC_CONT, exit to the caller
.3a239e	d0 31		bne $3a23d1	            BNE exec_done
.3a23a0	e2 20		sep #$20	            SEP #$20
.3a23a2	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a23a5	a7 00		lda [$0800]	            LDA [BIP]                   ; Get the current character in the line
.3a23a7	f0 28		beq $3a23d1	            BEQ exec_done               ; If it's NULL, we're done
.3a23a9	c9 3a		cmp #$3a	            CMP #':'                    ; If it's colon, we have more statements
.3a23ab	f0 1f		beq $3a23cc	            BEQ skip_loop               ; Skip over it and try to execute the next one
.3a23ad	08		php		            PHP
.3a23ae	c2 20		rep #$20	            REP #$20
.3a23b0	48		pha		            PHA
.3a23b1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a23b4	5b		tcd		            TCD
.3a23b5	68		pla		            PLA
.3a23b6	28		plp		            PLP
.3a23b7	e2 20		sep #$20	            SEP #$20
.3a23b9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a23bb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a23bf	c2 20		rep #$20	            REP #$20
.3a23c1	29 ff 00	and #$00ff	            AND #$00FF
.3a23c4	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a23c7	e2 20		sep #$20	            SEP #$20
.3a23c9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a23cc					skip_loop
.3a23cc	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a23cf	80 be		bra $3a238f	            BRA exec_loop               ; And try to execute another statement
.3a23d1					exec_done
.3a23d1	28		plp		            PLP
.3a23d2	60		rts		            RTS
.3a23d3					EXECPROGRAM
.3a23d3	08		php		            PHP
.3a23d4	58		cli		            CLI
.3a23d5	e2 20		sep #$20	            SEP #$20
.3a23d7	a9 80		lda #$80	            LDA #ST_RUNNING
.3a23d9	85 d2		sta $08d2	            STA STATE
.3a23db	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.3a23de	20 03 1e	jsr $3a1e03	            JSR INITRETURN
.3a23e1	c2 30		rep #$30	            REP #$30
.3a23e3	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the count of GOSUBs
.3a23e5	a0 02 00	ldy #$0002	exec_loop   LDY #LINE_NUMBER
.3a23e8	b7 1a		lda [$081a],y	            LDA [CURLINE],Y             ; Get the line number of the current line
.3a23ea	f0 28		beq $3a2414	            BEQ done                    ; If it's 0, we are finished running code (implicit END)
.3a23ec	20 6b 23	jsr $3a236b	            JSR EXECLINE
.3a23ef	e2 20		sep #$20	            SEP #$20
.3a23f1	a5 dc		lda $08dc	            LDA EXECACTION              ; Check the EXECACTION from the last line
.3a23f3	c9 01		cmp #$01	            CMP #EXEC_STOP              ; Stop execution of the program?
.3a23f5	f0 1d		beq $3a2414	            BEQ done
.3a23f7	c9 02		cmp #$02	            CMP #EXEC_GOTO              ; Transfer execution to a new CURLINE that is already set
.3a23f9	f0 ea		beq $3a23e5	            BEQ exec_loop
.3a23fb	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; Transfer execution to the CURLINE and BIP that is already set
.3a23fd	f0 e6		beq $3a23e5	            BEQ exec_loop
.3a23ff	c2 20		rep #$20	            REP #$20
.3a2401	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a2404	18		clc		            CLC
.3a2405	a5 1a		lda $081a	            LDA CURLINE
.3a2407	77 1a		adc [$081a],y	            ADC [CURLINE],Y
.3a2409	85 1a		sta $081a	            STA CURLINE
.3a240b	a5 1c		lda $081c	            LDA CURLINE+2
.3a240d	69 00 00	adc #$0000	            ADC #0
.3a2410	85 1c		sta $081c	            STA CURLINE+2
.3a2412	80 d1		bra $3a23e5	            BRA exec_loop               ; And try to execute that line
.3a2414					done
.3a2414	e2 20		sep #$20	            SEP #$20
.3a2416	a9 00		lda #$00	            LDA #ST_INTERACT            ; Set interpreter state to RUNNING
.3a2418	85 d2		sta $08d2	            STA STATE
.3a241a	28		plp		            PLP
.3a241b	60		rts		            RTS
.3a241c					FINDLINE
.3a241c	08		php		            PHP
.3a241d	c2 30		rep #$30	            REP #$30
.3a241f	c2 20		rep #$20	            REP #$20
.3a2421	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT            ; INDEX points to the first line of the program
.3a2424	85 08		sta $0808	            STA INDEX
.3a2426	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a2429	85 0a		sta $080a	            STA INDEX+2
.3a242b	c2 20		rep #$20	            REP #$20
.3a242d	a0 02 00	ldy #$0002	check_nmbrs LDY #LINE_NUMBER            ; Get the number of the possible target line
.3a2430	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a2432	f0 31		beq $3a2465	            BEQ ret_false               ; If new line number is 0, we got to the
.3a2434	c5 23		cmp $0823	            CMP ARGUMENT1               ; Compare it to the target line number
.3a2436	f0 1e		beq $3a2456	            BEQ found
.3a2438	b0 2b		bcs $3a2465	            BGE ret_false               ; If the line number > target line number, the line is not present
.3a243a					next_line
.3a243a	c2 20		rep #$20	            REP #$20
.3a243c	a0 00 00	ldy #$0000	            LDY #LINE_LINK              ; INDEX := INDEX + [INDEX].LINK
.3a243f	18		clc		            CLC
.3a2440	a5 08		lda $0808	            LDA INDEX
.3a2442	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a2444	85 0c		sta $080c	            STA SCRATCH
.3a2446	e2 20		sep #$20	            SEP #$20
.3a2448	a5 0a		lda $080a	            LDA INDEX+2
.3a244a	69 00		adc #$00	            ADC #0
.3a244c	85 0a		sta $080a	            STA INDEX+2
.3a244e	c2 20		rep #$20	            REP #$20
.3a2450	a5 0c		lda $080c	            LDA SCRATCH
.3a2452	85 08		sta $0808	            STA INDEX
.3a2454	80 d7		bra $3a242d	            BRA check_nmbrs             ; And go back to check the new line INDEX is pointing to
.3a2456					found
.3a2456	c2 20		rep #$20	            REP #$20
.3a2458	a5 08		lda $0808	            LDA INDEX
.3a245a	85 1a		sta $081a	            STA CURLINE
.3a245c	e2 20		sep #$20	            SEP #$20
.3a245e	a5 0a		lda $080a	            LDA INDEX+2
.3a2460	85 1c		sta $081c	            STA CURLINE+2
.3a2462	28		plp		ret_true    PLP                         ; Return true to indicate we've found the line
.3a2463	38		sec		            SEC
.3a2464	60		rts		            RTS
.3a2465	28		plp		ret_false   PLP
.3a2466	18		clc		            CLC
.3a2467	60		rts		            RTS
.3a2468					MVPROGDN
.3a2468	08		php		            PHP
.3a2469					mvd_loop
.3a2469	e2 20		sep #$20	            SEP #$20
.3a246b	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.3a246d	87 08		sta [$0808]	            STA [INDEX]
.3a246f	c2 20		rep #$20	            REP #$20
.3a2471	a5 0c		lda $080c	            LDA SCRATCH
.3a2473	c5 00		cmp $0800	            CMP BIP
.3a2475	d0 08		bne $3a247f	            BNE increment
.3a2477	e2 20		sep #$20	            SEP #$20
.3a2479	a5 0e		lda $080e	            LDA SCRATCH+2
.3a247b	c5 02		cmp $0802	            CMP BIP+2
.3a247d	f0 26		beq $3a24a5	            BEQ done            ; Yes: return
.3a247f					increment
.3a247f	c2 20		rep #$20	            REP #$20
.3a2481	18		clc		            CLC
.3a2482	a5 0c		lda $080c	            LDA SCRATCH
.3a2484	69 01 00	adc #$0001	            ADC #1
.3a2487	85 0c		sta $080c	            STA SCRATCH
.3a2489	e2 20		sep #$20	            SEP #$20
.3a248b	a5 0e		lda $080e	            LDA SCRATCH+2
.3a248d	69 00		adc #$00	            ADC #0
.3a248f	85 0e		sta $080e	            STA SCRATCH+2
.3a2491	c2 20		rep #$20	            REP #$20
.3a2493	18		clc		            CLC
.3a2494	a5 08		lda $0808	            LDA INDEX
.3a2496	69 01 00	adc #$0001	            ADC #1
.3a2499	85 08		sta $0808	            STA INDEX
.3a249b	e2 20		sep #$20	            SEP #$20
.3a249d	a5 0a		lda $080a	            LDA INDEX+2
.3a249f	69 00		adc #$00	            ADC #0
.3a24a1	85 0a		sta $080a	            STA INDEX+2
.3a24a3	80 c4		bra $3a2469	            BRA mvd_loop        ; And try again
.3a24a5	28		plp		done        PLP
.3a24a6	60		rts		            RTS
.3a24a7					MVPROGUP
.3a24a7	08		php		            PHP
.3a24a8					mvu_loop
.3a24a8	e2 20		sep #$20	            SEP #$20
.3a24aa	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.3a24ac	87 08		sta [$0808]	            STA [INDEX]
.3a24ae	c2 20		rep #$20	            REP #$20
.3a24b0	a5 0c		lda $080c	            LDA SCRATCH
.3a24b2	c5 00		cmp $0800	            CMP BIP
.3a24b4	d0 06		bne $3a24bc	            BNE decrement
.3a24b6	a5 0e		lda $080e	            LDA SCRATCH+2
.3a24b8	c5 02		cmp $0802	            CMP BIP+2
.3a24ba	f0 26		beq $3a24e2	            BEQ done            ; Yes: return
.3a24bc					decrement
.3a24bc	c2 20		rep #$20	            REP #$20
.3a24be	38		sec		            SEC
.3a24bf	a5 0c		lda $080c	            LDA SCRATCH
.3a24c1	e9 01 00	sbc #$0001	            SBC #1
.3a24c4	85 0c		sta $080c	            STA SCRATCH
.3a24c6	e2 20		sep #$20	            SEP #$20
.3a24c8	a5 0e		lda $080e	            LDA SCRATCH+2
.3a24ca	e9 00		sbc #$00	            SBC #0
.3a24cc	85 0e		sta $080e	            STA SCRATCH+2
.3a24ce	c2 20		rep #$20	            REP #$20
.3a24d0	38		sec		            SEC
.3a24d1	a5 08		lda $0808	            LDA INDEX
.3a24d3	e9 01 00	sbc #$0001	            SBC #1
.3a24d6	85 08		sta $0808	            STA INDEX
.3a24d8	e2 20		sep #$20	            SEP #$20
.3a24da	a5 0a		lda $080a	            LDA INDEX+2
.3a24dc	e9 00		sbc #$00	            SBC #0
.3a24de	85 0a		sta $080a	            STA INDEX+2
.3a24e0	80 c6		bra $3a24a8	            BRA mvu_loop        ; And try again
.3a24e2	28		plp		done        PLP
.3a24e3	60		rts		            RTS
.3a24e4					DELLINE
.3a24e4	08		php		            PHP
.3a24e5	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; SCRATCH := INDEX + [INDEX].LINK (address of the following line)
.3a24e8	c2 20		rep #$20	            REP #$20
.3a24ea	18		clc		            CLC
.3a24eb	a5 08		lda $0808	            LDA INDEX
.3a24ed	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a24ef	85 0c		sta $080c	            STA SCRATCH
.3a24f1	e2 20		sep #$20	            SEP #$20
.3a24f3	a5 0a		lda $080a	            LDA INDEX+2
.3a24f5	69 00		adc #$00	            ADC #0
.3a24f7	85 0e		sta $080e	            STA SCRATCH+2
.3a24f9	c2 20		rep #$20	            REP #$20
.3a24fb	18		clc		            CLC
.3a24fc	a5 d9		lda $08d9	            LDA LASTLINE
.3a24fe	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2501	85 00		sta $0800	            STA BIP
.3a2503	e2 20		sep #$20	            SEP #$20
.3a2505	a5 db		lda $08db	            LDA LASTLINE+2
.3a2507	69 00		adc #$00	            ADC #0
.3a2509	85 02		sta $0802	            STA BIP+2
.3a250b	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; LASTLINE := LASTLINE - [INDEX].LINK
.3a250e	c2 20		rep #$20	            REP #$20
.3a2510	38		sec		            SEC
.3a2511	a5 d9		lda $08d9	            LDA LASTLINE
.3a2513	f7 08		sbc [$0808],y	            SBC [INDEX],Y
.3a2515	85 d9		sta $08d9	            STA LASTLINE
.3a2517	e2 20		sep #$20	            SEP #$20
.3a2519	a5 db		lda $08db	            LDA LASTLINE+2
.3a251b	e9 00		sbc #$00	            SBC #0
.3a251d	85 db		sta $08db	            STA LASTLINE+2
.3a251f	20 68 24	jsr $3a2468	            JSR MVPROGDN
.3a2522					done
.3a2522	20 c4 44	jsr $3a44c4	            JSR S_CLR
.3a2525	28		plp		            PLP
.3a2526	60		rts		            RTS
.3a2527					APPLINE
.3a2527	08		php		            PHP
.3a2528	08		php		            PHP
.3a2529	c2 20		rep #$20	            REP #$20
.3a252b	48		pha		            PHA
.3a252c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a252f	5b		tcd		            TCD
.3a2530	68		pla		            PLA
.3a2531	28		plp		            PLP
.3a2532	c2 30		rep #$30	            REP #$30
.3a2534	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the line number of the new line
.3a2537	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.3a2539	18		clc		            CLC                 ; Point INDEX to the position to store the tokens
.3a253a	a5 d9		lda $08d9	            LDA LASTLINE
.3a253c	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a253f	85 08		sta $0808	            STA INDEX
.3a2541	e2 20		sep #$20	            SEP #$20
.3a2543	a5 db		lda $08db	            LDA LASTLINE+2
.3a2545	69 00		adc #$00	            ADC #0
.3a2547	85 0a		sta $080a	            STA INDEX+2
.3a2549	e2 20		sep #$20	            SEP #$20
.3a254b	a0 00 00	ldy #$0000	            LDY #0
.3a254e	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Copy the tokenized line to its place in the code
.3a2550	97 08		sta [$0808],y	            STA [INDEX],Y
.3a2552	f0 03		beq $3a2557	            BEQ copy_done
.3a2554	c8		iny		            INY
.3a2555	80 f7		bra $3a254e	            BRA copy_loop
.3a2557					copy_done
.3a2557	c2 20		rep #$20	            REP #$20
.3a2559	98		tya		            TYA
.3a255a	18		clc		            CLC
.3a255b	69 05 00	adc #$0005	            ADC #LINE_TOKENS+1
.3a255e	85 0c		sta $080c	            STA SCRATCH
.3a2560	c2 20		rep #$20	            REP #$20
.3a2562	a0 00 00	ldy #$0000	            LDY #LINE_LINK      ; Set link to the offset to the next line
.3a2565	a5 0c		lda $080c	            LDA SCRATCH
.3a2567	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.3a2569	c2 20		rep #$20	            REP #$20
.3a256b	18		clc		            CLC
.3a256c	a5 d9		lda $08d9	            LDA LASTLINE
.3a256e	65 0c		adc $080c	            ADC SCRATCH
.3a2570	85 0c		sta $080c	            STA SCRATCH
.3a2572	e2 20		sep #$20	            SEP #$20
.3a2574	a5 db		lda $08db	            LDA LASTLINE+2
.3a2576	69 00		adc #$00	            ADC #0
.3a2578	85 db		sta $08db	            STA LASTLINE+2
.3a257a	c2 20		rep #$20	            REP #$20
.3a257c	a5 0c		lda $080c	            LDA SCRATCH
.3a257e	85 d9		sta $08d9	            STA LASTLINE
.3a2580	c2 20		rep #$20	            REP #$20
.3a2582	a0 00 00	ldy #$0000	            LDY #0
.3a2585	a9 00 00	lda #$0000	            LDA #0
.3a2588	97 d9		sta [$08d9],y	blank_loop  STA [LASTLINE],Y    ; Set the "line" after the last line to nulls
.3a258a	c8		iny		            INY
.3a258b	c0 05 00	cpy #$0005	            CPY #LINE_TOKENS+1
.3a258e	d0 f8		bne $3a2588	            BNE blank_loop
.3a2590	20 c4 44	jsr $3a44c4	            JSR S_CLR
.3a2593	28		plp		            PLP
.3a2594	60		rts		            RTS
.3a2595					FINDINSPT
.3a2595	0b		phd		            PHD
.3a2596	08		php		            PHP
.3a2597	08		php		            PHP
.3a2598	c2 20		rep #$20	            REP #$20
.3a259a	48		pha		            PHA
.3a259b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a259e	5b		tcd		            TCD
.3a259f	68		pla		            PLA
.3a25a0	28		plp		            PLP
.3a25a1	c2 30		rep #$30	            REP #$30
.3a25a3	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a25a6	85 08		sta $0808	            STA INDEX
.3a25a8	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a25ab	85 0a		sta $080a	            STA INDEX+2
.3a25ad	a0 02 00	ldy #$0002	loop        LDY #LINE_NUMBER
.3a25b0	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a25b2	f0 1d		beq $3a25d1	            BEQ found_end           ; Got to end without finding it
.3a25b4	c5 d7		cmp $08d7	            CMP LINENUM
.3a25b6	f0 25		beq $3a25dd	            BEQ found_line          ; LINENUM = [INDEX].LINE_NUMBER: return we found the exact line
.3a25b8	b0 1d		bcs $3a25d7	            BGE found_spot          ; LINENUM > [INDEX].LINE_NUMBER: return we found spot to insert
.3a25ba	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a25bd	18		clc		            CLC                     ; Move INDEX to the next line
.3a25be	a5 08		lda $0808	            LDA INDEX
.3a25c0	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a25c2	85 0c		sta $080c	            STA SCRATCH
.3a25c4	a5 0a		lda $080a	            LDA INDEX+2
.3a25c6	69 00 00	adc #$0000	            ADC #0
.3a25c9	85 0a		sta $080a	            STA INDEX+2
.3a25cb	a5 0c		lda $080c	            LDA SCRATCH
.3a25cd	85 08		sta $0808	            STA INDEX
.3a25cf	80 dc		bra $3a25ad	            BRA loop                ; And check that line
.3a25d1	a9 00 00	lda #$0000	found_end   LDA #0                  ; Return that we reached the end of the program
.3a25d4	28		plp		            PLP
.3a25d5	2b		pld		            PLD
.3a25d6	60		rts		            RTS
.3a25d7	a9 01 00	lda #$0001	found_spot  LDA #1                  ; Return that we the found the spot to insert the line
.3a25da	28		plp		            PLP                     ; But that it wasn't already there
.3a25db	2b		pld		            PLD
.3a25dc	60		rts		            RTS
.3a25dd	a9 02 00	lda #$0002	found_line  LDA #2                  ; Return that we found the line
.3a25e0	28		plp		            PLP
.3a25e1	2b		pld		            PLD
.3a25e2	60		rts		            RTS
.3a25e3					INSLINE
.3a25e3	08		php		            PHP
.3a25e4	c2 30		rep #$30	            REP #$30
.3a25e6	a9 05 00	lda #$0005	            LDA #LINE_TOKENS+1  ; Set SCRATCH2 to the size of the line header with the end-of-line
.3a25e9	85 10		sta $0810	            STA SCRATCH2
.3a25eb	a0 00 00	ldy #$0000	            LDY #0
.3a25ee					count_loop
.3a25ee	e2 20		sep #$20	            SEP #$20
.3a25f0	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the byte of the line
.3a25f2	f0 07		beq $3a25fb	            BEQ shift_prog      ; If it's end-of-line, SCRATCH2 is the length
.3a25f4	c2 20		rep #$20	            REP #$20
.3a25f6	e6 10		inc $0810	            INC SCRATCH2
.3a25f8	c8		iny		            INY
.3a25f9	80 f3		bra $3a25ee	            BRA count_loop      ; Count and continue
.3a25fb					shift_prog
.3a25fb	c2 20		rep #$20	            REP #$20
.3a25fd	a5 08		lda $0808	            LDA INDEX           ; BIP = the address of the first byte for the new line
.3a25ff	85 00		sta $0800	            STA BIP
.3a2601	a5 0a		lda $080a	            LDA INDEX+2
.3a2603	85 02		sta $0802	            STA BIP+2
.3a2605	18		clc		            CLC                 ; SCRATCH = address of highest byte to copy
.3a2606	a5 d9		lda $08d9	            LDA LASTLINE
.3a2608	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a260b	85 0c		sta $080c	            STA SCRATCH
.3a260d	a5 db		lda $08db	            LDA LASTLINE+2
.3a260f	69 00 00	adc #$0000	            ADC #0
.3a2612	85 0e		sta $080e	            STA SCRATCH+2
.3a2614	18		clc		            CLC                 ; Adjust LASTLINE to its new position after the insert
.3a2615	a5 d9		lda $08d9	            LDA LASTLINE
.3a2617	65 10		adc $0810	            ADC SCRATCH2
.3a2619	85 d9		sta $08d9	            STA LASTLINE
.3a261b	a5 db		lda $08db	            LDA LASTLINE+2
.3a261d	69 00 00	adc #$0000	            ADC #0
.3a2620	85 db		sta $08db	            STA LASTLINE+2
.3a2622	18		clc		            CLC                 ; INDEX = address of the highest location to copy into
.3a2623	a5 d9		lda $08d9	            LDA LASTLINE
.3a2625	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2628	85 08		sta $0808	            STA INDEX
.3a262a	a5 db		lda $08db	            LDA LASTLINE+2
.3a262c	69 00 00	adc #$0000	            ADC #0
.3a262f	85 0a		sta $080a	            STA INDEX+2
.3a2631	20 a7 24	jsr $3a24a7	            JSR MVPROGUP
.3a2634	c2 20		rep #$20	            REP #$20
.3a2636	a5 10		lda $0810	            LDA SCRATCH2
.3a2638	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a263b	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINK_LINK = length of the new line
.3a263d	a5 d7		lda $08d7	            LDA LINENUM
.3a263f	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.3a2642	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINE_NUMBER = number of the new line
.3a2644	18		clc		            CLC                 ; Point BIP to the first byte of the new line
.3a2645	a5 00		lda $0800	            LDA BIP
.3a2647	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a264a	85 00		sta $0800	            STA BIP
.3a264c	a5 02		lda $0802	            LDA BIP+2
.3a264e	69 00 00	adc #$0000	            ADC #0
.3a2651	85 02		sta $0802	            STA BIP+2
.3a2653	a0 00 00	ldy #$0000	            LDY #0
.3a2656	e2 20		sep #$20	            SEP #$20
.3a2658	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Get the byte of the tokenized line
.3a265a	97 00		sta [$0800],y	            STA [BIP],Y         ; Copy it to its correct location in the program
.3a265c	f0 03		beq $3a2661	            BEQ done            ; If it was end-of-line byte, we're done
.3a265e	c8		iny		            INY
.3a265f	80 f7		bra $3a2658	            BRA copy_loop       ; Otherwise, continue with the next
.3a2661					done
.3a2661	20 c4 44	jsr $3a44c4	            JSR S_CLR
.3a2664	28		plp		            PLP
.3a2665	60		rts		            RTS
.3a2666					ADDLINE
.3a2666	08		php		            PHP
.3a2667	c2 30		rep #$30	            REP #$30
.3a2669	85 d7		sta $08d7	            STA LINENUM
.3a266b	20 95 25	jsr $3a2595	            JSR FINDINSPT
.3a266e	c9 00 00	cmp #$0000	            CMP #0
.3a2671	f0 2c		beq $3a269f	            BEQ do_append       ; End-of-program found, add the line to the end
.3a2673	c9 01 00	cmp #$0001	            CMP #1
.3a2676	f0 22		beq $3a269a	            BEQ do_insert       ; Spot was found: insertion required
.3a2678	c2 20		rep #$20	            REP #$20
.3a267a	a5 08		lda $0808	            LDA INDEX
.3a267c	48		pha		            PHA
.3a267d	a5 0a		lda $080a	            LDA INDEX+2
.3a267f	48		pha		            PHA
.3a2680	20 e4 24	jsr $3a24e4	            JSR DELLINE
.3a2683	68		pla		            PLA
.3a2684	85 0a		sta $080a	            STA INDEX+2
.3a2686	68		pla		            PLA
.3a2687	85 08		sta $0808	            STA INDEX
.3a2689	a5 1a		lda $081a	            LDA CURLINE         ; Check to see if there is any non-whitespace on the line
.3a268b	85 00		sta $0800	            STA BIP
.3a268d	a5 1c		lda $081c	            LDA CURLINE+2
.3a268f	85 02		sta $0802	            STA BIP+2
.3a2691	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a2694	e2 20		sep #$20	            SEP #$20
.3a2696	a7 00		lda [$0800]	            LDA [BIP]
.3a2698	f0 0a		beq $3a26a4	            BEQ done            ; If not, we're done
.3a269a					do_insert
.3a269a	20 e3 25	jsr $3a25e3	            JSR INSLINE
.3a269d	80 05		bra $3a26a4	            BRA done
.3a269f	a5 d7		lda $08d7	do_append   LDA LINENUM
.3a26a1	20 27 25	jsr $3a2527	            JSR APPLINE
.3a26a4	28		plp		done        PLP
.3a26a5	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\repl.s

="#"					CHAR_DIR = '#'
="|"					CHAR_BRUN = '|'
.3a26a6					EXPANDLINE
.3a26a6	0b		phd		                PHD
.3a26a7	08		php		                PHP
.3a26a8	08		php		            PHP
.3a26a9	c2 20		rep #$20	            REP #$20
.3a26ab	48		pha		            PHA
.3a26ac	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a26af	5b		tcd		            TCD
.3a26b0	68		pla		            PLA
.3a26b1	28		plp		            PLP
.3a26b2	e2 20		sep #$20	            SEP #$20
.3a26b4	c2 10		rep #$10	            REP #$10
.3a26b6	a2 00 00	ldx #$0000	                LDX #0
.3a26b9	bd 00 4f	lda $4f00,x	count_loop      LDA INPUTBUF,X              ; Count the number of characters in the input
.3a26bc	f0 03		beq $3a26c1	                BEQ save_size
.3a26be	e8		inx		                INX
.3a26bf	80 f8		bra $3a26b9	                BRA count_loop
.3a26c1	86 0c		stx $080c	save_size       STX SCRATCH                 ; Save the size in SCRATCH
.3a26c3	c2 30		rep #$30	            REP #$30
.3a26c5	8a		txa		                TXA
.3a26c6	c9 02 00	cmp #$0002	                CMP #2                      ; Are there arguments?
.3a26c9	90 12		bcc $3a26dd	                BLT start_copy              ; No: just replace the whole string
.3a26cb	3a		dec a		                DEC A
.3a26cc	18		clc		                CLC
.3a26cd	69 00 4f	adc #$4f00	                ADC #<>INPUTBUF
.3a26d0	aa		tax		                TAX                         ; X <-- INPUTBUF + len(INPUTBUF) - 1
.3a26d1	18		clc		                CLC                         ; Y <-- INPUTBUF + len(INPUTBUF) - 1 + len(substitution)
.3a26d2	65 8f		adc $088f	                ADC MCOUNT
.3a26d4	a8		tay		                TAY
.3a26d5	a5 0c		lda $080c	                LDA SCRATCH
.3a26d7	3a		dec a		                DEC A
.3a26d8	8b		phb		                PHB
.3a26d9	44 00 00	mvp #$00,#$00	                MVP #`INPUTBUF,#`INPUTBUF   ; Make room for the substitition
.3a26dc	ab		plb		                PLB
.3a26dd					start_copy
.3a26dd	c2 20		rep #$20	            REP #$20
.3a26df	a6 55		ldx $0855	                LDX MARG1                   ; Source is data to copy
.3a26e1	a0 00 4f	ldy #$4f00	                LDY #<>INPUTBUF             ; Destination is input buffer
.3a26e4	a5 8f		lda $088f	                LDA MCOUNT                  ; Number of bytes to copy
.3a26e6	8b		phb		                PHB
.3a26e7	54 00 3a	mvn #$3a,#$00	                MVN #`EXPANDLINE,#`INPUTBUF ; Copy the data
.3a26ea	ab		plb		                PLB
.3a26eb	e2 20		sep #$20	            SEP #$20
.3a26ed	a5 0c		lda $080c	                LDA SCRATCH                 ; Check again to see if we need quotes
.3a26ef	c9 02		cmp #$02	                CMP #2
.3a26f1	90 18		bcc $3a270b	                BLT done
.3a26f3	a6 8f		ldx $088f	                LDX MCOUNT                  ; If so, add a quote mark here
.3a26f5	a9 22		lda #$22	                LDA #CHAR_DQUOTE
.3a26f7	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a26fa	e8		inx		skip_to_end     INX                         ; Move to the end of the input string
.3a26fb	bd 00 4f	lda $4f00,x	                LDA INPUTBUF,X
.3a26fe	d0 fa		bne $3a26fa	                BNE skip_to_end
.3a2700	a9 22		lda #$22	                LDA #CHAR_DQUOTE            ; Add the quote to the end of the string
.3a2702	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a2705	a9 00		lda #$00	                LDA #0                      ; And terminate with a NULL
.3a2707	e8		inx		                INX
.3a2708	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a270b	28		plp		done            PLP
.3a270c	2b		pld		                PLD
.3a270d	60		rts		            RTS
.3a270e					PREPROCESS
.3a270e	da		phx		                PHX
.3a270f	5a		phy		                PHY
.3a2710	8b		phb		                PHB
.3a2711	0b		phd		                PHD
.3a2712	08		php		                PHP
.3a2713	08		php		            PHP
.3a2714	c2 20		rep #$20	            REP #$20
.3a2716	48		pha		            PHA
.3a2717	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a271a	5b		tcd		            TCD
.3a271b	68		pla		            PLA
.3a271c	28		plp		            PLP
.3a271d	e2 20		sep #$20	            SEP #$20
.3a271f	c2 10		rep #$10	            REP #$10
.3a2721	ad 00 4f	lda $4f00	                LDA INPUTBUF            ; Check the first character
.3a2724	c9 23		cmp #$23	                CMP #CHAR_DIR           ; Is it the DIR character?
.3a2726	f0 0a		beq $3a2732	                BEQ expand_dir          ; Yes: expand the DIR command into place
.3a2728	c9 7c		cmp #$7c	                CMP #CHAR_BRUN          ; Is it the BRUN character?
.3a272a	f0 17		beq $3a2743	                BEQ expand_brun         ; Yes: expand the BRUN command into place
.3a272c	28		plp		done            PLP
.3a272d	2b		pld		                PLD
.3a272e	ab		plb		                PLB
.3a272f	7a		ply		                PLY
.3a2730	fa		plx		                PLX
.3a2731	60		rts		            RTS
.3a2732					expand_dir
.3a2732	c2 20		rep #$20	            REP #$20
.3a2734	a9 03 00	lda #$0003	                LDA #3                  ; Set size of substitution value
.3a2737	85 8f		sta $088f	                STA MCOUNT
.3a2739	a9 54 27	lda #$2754	                LDA #<>dir_text         ; Set pointer to substitution value
.3a273c	85 55		sta $0855	                STA MARG1
.3a273e	20 a6 26	jsr $3a26a6	            JSR EXPANDLINE
.3a2741	80 e9		bra $3a272c	                BRA done
.3a2743					expand_brun
.3a2743	c2 20		rep #$20	            REP #$20
.3a2745	a9 04 00	lda #$0004	                LDA #4                  ; Set size of substitution value
.3a2748	85 8f		sta $088f	                STA MCOUNT
.3a274a	a9 58 27	lda #$2758	                LDA #<>brun_text        ; Set pointer to substitution value
.3a274d	85 55		sta $0855	                STA MARG1
.3a274f	20 a6 26	jsr $3a26a6	            JSR EXPANDLINE
.3a2752	80 d8		bra $3a272c	                BRA done
>3a2754	44 49 52 00			dir_text        .null "DIR"             ; Expansion of the DIR character
>3a2758	42 52 55 4e 00			brun_text       .null "BRUN"            ; Expansion of the BRUN character
.3a275d					PRREADY
.3a275d	8b		phb		                PHB
.3a275e	08		php		                PHP
.3a275f	20 3d 02	jsr $3a023d	            JSR ENSURETEXT
.3a2762	08		php		            PHP
.3a2763	e2 20		sep #$20	            SEP #$20
.3a2765	48		pha		            PHA
.3a2766	a9 3a		lda #$3a	            LDA #`MPROMPT
.3a2768	48		pha		            PHA
.3a2769	ab		plb		            PLB
.3a276a	68		pla		            PLA
.3a276b	28		plp		            PLP
.3a276c	a2 6f d2	ldx #$d26f	                LDX #<>MPROMPT
.3a276f	20 64 04	jsr $3a0464	            JSR PRINTS
.3a2772	28		plp		                PLP
.3a2773	ab		plb		                PLB
.3a2774	60		rts		            RTS
.3a2775					IREADLINE
.3a2775	08		php		                PHP
.3a2776	e2 30		sep #$30	            SEP #$30
.3a2778	a9 01		lda #$01	                LDA #1
.3a277a	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a277d					read_loop
.3a277d	20 db 00	jsr $3a00db	            JSR GETKEYE
.3a2780	c9 00		cmp #$00	                CMP #0
.3a2782	f0 f9		beq $3a277d	                BEQ read_loop
.3a2784	c9 0d		cmp #$0d	                CMP #CHAR_CR
.3a2786	f0 02		beq $3a278a	                BEQ done
.3a2788	80 f3		bra $3a277d	                BRA read_loop
.3a278a	28		plp		done            PLP
.3a278b	60		rts		            RTS
.3a278c					PROCESS
.3a278c	0b		phd		                PHD
.3a278d	08		php		                PHP
.3a278e	08		php		            PHP
.3a278f	c2 20		rep #$20	            REP #$20
.3a2791	48		pha		            PHA
.3a2792	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a2795	5b		tcd		            TCD
.3a2796	68		pla		            PLA
.3a2797	28		plp		            PLP
.3a2798	c2 30		rep #$30	            REP #$30
.3a279a	64 d7		stz $08d7	                STZ LINENUM
.3a279c	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF         ; Attempt to tokenize the line that was read
.3a279f	85 1a		sta $081a	                STA CURLINE
.3a27a1	a9 00 00	lda #$0000	                LDA #`CURLINE
.3a27a4	85 1c		sta $081c	                STA CURLINE+2
.3a27a6	20 9c 09	jsr $3a099c	            JSR TOKENIZE
.3a27a9	c2 20		rep #$20	            REP #$20
.3a27ab	a5 d7		lda $08d7	                LDA LINENUM             ; Did we get a line number?
.3a27ad	d0 05		bne $3a27b4	                BNE update_line         ; Yes: attempt to add it to the program
.3a27af	20 51 23	jsr $3a2351	            JSR EXECCMD
.3a27b2	80 07		bra $3a27bb	                BRA done
.3a27b4					update_line
.3a27b4	20 66 26	jsr $3a2666	            JSR ADDLINE
.3a27b7	28		plp		no_prompt       PLP
.3a27b8	2b		pld		                PLD
.3a27b9	38		sec		                SEC
.3a27ba	60		rts		            RTS
.3a27bb	28		plp		done            PLP
.3a27bc	2b		pld		                PLD
.3a27bd	18		clc		                CLC
.3a27be	60		rts		            RTS
.3a27bf					INTERACT
.3a27bf	c2 30		rep #$30	            REP #$30
.3a27c1	a2 ff fe	ldx #$feff	                LDX #<>STACK_END
.3a27c4	9a		txs		                TXS
.3a27c5					ready_loop
.3a27c5	20 5d 27	jsr $3a275d	            JSR PRREADY
.3a27c8					no_ready_loop
.3a27c8	20 08 00	jsr $3a0008	            JSR READLINE
.3a27cb	20 0c 00	jsr $3a000c	            JSR SCRCOPYLINE
.3a27ce	22 3c 11 00	jsl $00113c	                JSL FK_TESTBREAK    ; Make sure the BREAK bit is cleared.
.3a27d2	a9 00 00	lda #$0000	                LDA #0              ; Hide the cursor
.3a27d5	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a27d8	20 0e 27	jsr $3a270e	            JSR PREPROCESS
.3a27db	20 8c 27	jsr $3a278c	            JSR PROCESS
.3a27de	b0 e8		bcs $3a27c8	                BCS no_ready_loop
.3a27e0	80 e3		bra $3a27c5	                BRA ready_loop
>3ad26f	0d 52 45 41 44 59 0d 00		MPROMPT         .null 13,"READY",13

;******  Return to file: src\basic816.s


;******  Processing file: src\operators.s

.3a27e2					OP_PLUS
.3a27e2	08		php		            PHP
.3a27e3	e2 20		sep #$20	            SEP #$20
.3a27e5	20 a3 08	jsr $3a08a3	            JSR ASS_ARGS_NUMSTR
.3a27e8	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a27ea	f0 2c		beq $3a2818	            BEQ is_integer
.3a27ec	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a27ee	f0 2d		beq $3a281d	            BEQ is_float
.3a27f0	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a27f2	f0 1f		beq $3a2813	            BEQ is_string
.3a27f4					type_error
.3a27f4	08		php		            PHP
.3a27f5	c2 20		rep #$20	            REP #$20
.3a27f7	48		pha		            PHA
.3a27f8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a27fb	5b		tcd		            TCD
.3a27fc	68		pla		            PLA
.3a27fd	28		plp		            PLP
.3a27fe	e2 20		sep #$20	            SEP #$20
.3a2800	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2802	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2806	c2 20		rep #$20	            REP #$20
.3a2808	29 ff 00	and #$00ff	            AND #$00FF
.3a280b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a280e	e2 20		sep #$20	            SEP #$20
.3a2810	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2813					is_string
.3a2813	20 51 16	jsr $3a1651	            JSR STRCONCAT
.3a2816	80 08		bra $3a2820	            BRA done
.3a2818					is_integer
.3a2818	20 71 54	jsr $3a5471	            JSR OP_INT_ADD
.3a281b	80 03		bra $3a2820	            BRA done
.3a281d					is_float
.3a281d	20 e0 56	jsr $3a56e0	            JSR OP_FP_ADD
.3a2820	28		plp		done        PLP
.3a2821	60		rts		            RTS
.3a2822					OP_MINUS
.3a2822	08		php		            PHP
.3a2823	e2 20		sep #$20	            SEP #$20
.3a2825	20 55 08	jsr $3a0855	            JSR ASS_ARGS_NUM
.3a2828	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a282a	f0 23		beq $3a284f	            BEQ is_integer
.3a282c	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a282e	f0 24		beq $3a2854	            BEQ is_float
.3a2830					type_error
.3a2830	08		php		            PHP
.3a2831	c2 20		rep #$20	            REP #$20
.3a2833	48		pha		            PHA
.3a2834	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2837	5b		tcd		            TCD
.3a2838	68		pla		            PLA
.3a2839	28		plp		            PLP
.3a283a	e2 20		sep #$20	            SEP #$20
.3a283c	a9 04		lda #$04	            LDA #ERR_TYPE
.3a283e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2842	c2 20		rep #$20	            REP #$20
.3a2844	29 ff 00	and #$00ff	            AND #$00FF
.3a2847	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a284a	e2 20		sep #$20	            SEP #$20
.3a284c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a284f					is_integer
.3a284f	20 83 54	jsr $3a5483	            JSR OP_INT_SUB
.3a2852	80 03		bra $3a2857	            BRA done
.3a2854					is_float
.3a2854	20 d5 56	jsr $3a56d5	            JSR OP_FP_SUB
.3a2857	28		plp		done        PLP
.3a2858	60		rts		            RTS
.3a2859					OP_MULTIPLY
.3a2859	08		php		            PHP
.3a285a	e2 20		sep #$20	            SEP #$20
.3a285c	20 55 08	jsr $3a0855	            JSR ASS_ARGS_NUM
.3a285f	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2861	f0 23		beq $3a2886	            BEQ is_integer
.3a2863	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2865	f0 24		beq $3a288b	            BEQ is_float
.3a2867					type_error
.3a2867	08		php		            PHP
.3a2868	c2 20		rep #$20	            REP #$20
.3a286a	48		pha		            PHA
.3a286b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a286e	5b		tcd		            TCD
.3a286f	68		pla		            PLA
.3a2870	28		plp		            PLP
.3a2871	e2 20		sep #$20	            SEP #$20
.3a2873	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2875	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2879	c2 20		rep #$20	            REP #$20
.3a287b	29 ff 00	and #$00ff	            AND #$00FF
.3a287e	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2881	e2 20		sep #$20	            SEP #$20
.3a2883	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2886					is_integer
.3a2886	20 95 54	jsr $3a5495	            JSR OP_INT_MUL
.3a2889	80 03		bra $3a288e	            BRA done
.3a288b					is_float
.3a288b	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a288e	28		plp		done        PLP
.3a288f	60		rts		            RTS
.3a2890					OP_DIVIDE
.3a2890	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a2893	20 f0 07	jsr $3a07f0	            JSR ASS_ARG2_FLOAT
.3a2896	20 2b 57	jsr $3a572b	            JSR OP_FP_DIV
.3a2899	60		rts		            RTS
.3a289a					OP_MOD
.3a289a	a5 23		lda $0823	            LDA ARGUMENT1
.3a289c	8f 1a 01 00	sta $00011a	            STA @lD1_OPERAND_B
.3a28a0	a5 29		lda $0829	            LDA ARGUMENT2
.3a28a2	8f 18 01 00	sta $000118	            STA @lD1_OPERAND_A
.3a28a6	af 1e 01 00	lda $00011e	            LDA @lD1_REMAINDER
.3a28aa	85 23		sta $0823	            STA ARGUMENT1
.3a28ac	60		rts		            RTS
.3a28ad					OP_POW
.3a28ad	08		php		            PHP
.3a28ae	c2 30		rep #$30	            REP #$30
.3a28b0	48		pha		            PHA
.3a28b1	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a28b4	a5 2d		lda $082d	            LDA ARGTYPE2
.3a28b6	c9 00 00	cmp #$0000	            CMP #TYPE_INTEGER
.3a28b9	d0 0d		bne $3a28c8	            BNE flt_exp
.3a28bb	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a28bd	d0 09		bne $3a28c8	            BNE flt_exp
.3a28bf	da		phx		            PHX
.3a28c0	a6 29		ldx $0829	            LDX ARGUMENT2
.3a28c2	20 49 64	jsr $3a6449	            JSR Q_FP_POW_INT
.3a28c5	fa		plx		            PLX
.3a28c6	80 1c		bra $3a28e4	            BRA done
.3a28c8					flt_exp
.3a28c8	20 f0 07	jsr $3a07f0	            JSR ASS_ARG2_FLOAT
.3a28cb	c2 20		rep #$20	            REP #$20
.3a28cd	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a28cf	48		pha		            PHA
.3a28d0	a5 29		lda $0829	            LDA ARGUMENT2
.3a28d2	48		pha		            PHA
.3a28d3	20 d4 62	jsr $3a62d4	            JSR FP_LN
.3a28d6	c2 20		rep #$20	            REP #$20
.3a28d8	68		pla		            PLA
.3a28d9	85 29		sta $0829	            STA ARGUMENT2
.3a28db	68		pla		            PLA
.3a28dc	85 2b		sta $082b	            STA ARGUMENT2+2
.3a28de	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a28e1	20 b3 64	jsr $3a64b3	            JSR FP_EXP
.3a28e4	68		pla		done        PLA
.3a28e5	28		plp		            PLP
.3a28e6	60		rts		            RTS
.3a28e7					OP_AND
.3a28e7	08		php		            PHP
.3a28e8	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a28eb	20 82 06	jsr $3a0682	            JSR ASS_ARG2_INT
.3a28ee	c2 20		rep #$20	            REP #$20
.3a28f0	a5 23		lda $0823	            LDA ARGUMENT1
.3a28f2	25 29		and $0829	            AND ARGUMENT2
.3a28f4	85 23		sta $0823	            STA ARGUMENT1
.3a28f6	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a28f8	25 2b		and $082b	            AND ARGUMENT2+2
.3a28fa	85 25		sta $0825	            STA ARGUMENT1+2
.3a28fc	28		plp		            PLP
.3a28fd	60		rts		            RTS
.3a28fe					OP_OR
.3a28fe	08		php		            PHP
.3a28ff	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a2902	20 82 06	jsr $3a0682	            JSR ASS_ARG2_INT
.3a2905	c2 20		rep #$20	            REP #$20
.3a2907	a5 23		lda $0823	            LDA ARGUMENT1
.3a2909	05 29		ora $0829	            ORA ARGUMENT2
.3a290b	85 23		sta $0823	            STA ARGUMENT1
.3a290d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a290f	05 2b		ora $082b	            ORA ARGUMENT2+2
.3a2911	85 25		sta $0825	            STA ARGUMENT1+2
.3a2913	28		plp		done        PLP
.3a2914	60		rts		            RTS
.3a2915					OP_NOT
.3a2915	08		php		            PHP
.3a2916	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a2919	c2 20		rep #$20	            REP #$20
.3a291b	a5 23		lda $0823	            LDA ARGUMENT1
.3a291d	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a2920	85 23		sta $0823	            STA ARGUMENT1
.3a2922	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a2924	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a2927	85 25		sta $0825	            STA ARGUMENT1+2
.3a2929	28		plp		done        PLP
.3a292a	60		rts		            RTS
.3a292b					OP_LT
.3a292b	08		php		            PHP
.3a292c	e2 20		sep #$20	            SEP #$20
.3a292e	20 a3 08	jsr $3a08a3	            JSR ASS_ARGS_NUMSTR
.3a2931	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2933	f0 2c		beq $3a2961	            BEQ is_integer
.3a2935	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2937	f0 2d		beq $3a2966	            BEQ is_float
.3a2939	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a293b	f0 1f		beq $3a295c	            BEQ is_string
.3a293d					type_error
.3a293d	08		php		            PHP
.3a293e	c2 20		rep #$20	            REP #$20
.3a2940	48		pha		            PHA
.3a2941	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2944	5b		tcd		            TCD
.3a2945	68		pla		            PLA
.3a2946	28		plp		            PLP
.3a2947	e2 20		sep #$20	            SEP #$20
.3a2949	a9 04		lda #$04	            LDA #ERR_TYPE
.3a294b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a294f	c2 20		rep #$20	            REP #$20
.3a2951	29 ff 00	and #$00ff	            AND #$00FF
.3a2954	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2957	e2 20		sep #$20	            SEP #$20
.3a2959	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a295c					is_string
.3a295c	20 d9 17	jsr $3a17d9	            JSR OP_STR_LT
.3a295f	80 08		bra $3a2969	            BRA done
.3a2961					is_integer
.3a2961	20 96 55	jsr $3a5596	            JSR OP_INT_LT
.3a2964	80 03		bra $3a2969	            BRA done
.3a2966					is_float
.3a2966	20 0b 5d	jsr $3a5d0b	            JSR OP_FP_LT
.3a2969	28		plp		done        PLP
.3a296a	60		rts		            RTS
.3a296b					OP_GT
.3a296b	08		php		            PHP
.3a296c	e2 20		sep #$20	            SEP #$20
.3a296e	20 a3 08	jsr $3a08a3	            JSR ASS_ARGS_NUMSTR
.3a2971	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2973	f0 2c		beq $3a29a1	            BEQ is_integer
.3a2975	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2977	f0 2d		beq $3a29a6	            BEQ is_float
.3a2979	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a297b	f0 1f		beq $3a299c	            BEQ is_string
.3a297d					type_error
.3a297d	08		php		            PHP
.3a297e	c2 20		rep #$20	            REP #$20
.3a2980	48		pha		            PHA
.3a2981	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2984	5b		tcd		            TCD
.3a2985	68		pla		            PLA
.3a2986	28		plp		            PLP
.3a2987	e2 20		sep #$20	            SEP #$20
.3a2989	a9 04		lda #$04	            LDA #ERR_TYPE
.3a298b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a298f	c2 20		rep #$20	            REP #$20
.3a2991	29 ff 00	and #$00ff	            AND #$00FF
.3a2994	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2997	e2 20		sep #$20	            SEP #$20
.3a2999	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a299c					is_string
.3a299c	20 f0 17	jsr $3a17f0	            JSR OP_STR_GT
.3a299f	80 08		bra $3a29a9	            BRA done
.3a29a1					is_integer
.3a29a1	20 b7 55	jsr $3a55b7	            JSR OP_INT_GT
.3a29a4	80 03		bra $3a29a9	            BRA done
.3a29a6					is_float
.3a29a6	20 20 5d	jsr $3a5d20	            JSR OP_FP_GT
.3a29a9	28		plp		done        PLP
.3a29aa	60		rts		            RTS
.3a29ab					OP_EQ
.3a29ab	08		php		            PHP
.3a29ac	e2 20		sep #$20	            SEP #$20
.3a29ae	20 a3 08	jsr $3a08a3	            JSR ASS_ARGS_NUMSTR
.3a29b1	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a29b3	f0 2c		beq $3a29e1	            BEQ is_integer
.3a29b5	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a29b7	f0 2d		beq $3a29e6	            BEQ is_float
.3a29b9	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a29bb	f0 1f		beq $3a29dc	            BEQ is_string
.3a29bd					type_error
.3a29bd	08		php		            PHP
.3a29be	c2 20		rep #$20	            REP #$20
.3a29c0	48		pha		            PHA
.3a29c1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a29c4	5b		tcd		            TCD
.3a29c5	68		pla		            PLA
.3a29c6	28		plp		            PLP
.3a29c7	e2 20		sep #$20	            SEP #$20
.3a29c9	a9 04		lda #$04	            LDA #ERR_TYPE
.3a29cb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a29cf	c2 20		rep #$20	            REP #$20
.3a29d1	29 ff 00	and #$00ff	            AND #$00FF
.3a29d4	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a29d7	e2 20		sep #$20	            SEP #$20
.3a29d9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a29dc					is_string
.3a29dc	20 07 18	jsr $3a1807	            JSR OP_STR_EQ
.3a29df	80 08		bra $3a29e9	            BRA done
.3a29e1					is_integer
.3a29e1	20 e4 55	jsr $3a55e4	            JSR OP_INT_EQ
.3a29e4	80 03		bra $3a29e9	            BRA done
.3a29e6					is_float
.3a29e6	20 35 5d	jsr $3a5d35	            JSR OP_FP_EQ
.3a29e9	28		plp		done        PLP
.3a29ea	60		rts		            RTS
.3a29eb					OP_NE
.3a29eb	08		php		            PHP
.3a29ec	e2 20		sep #$20	            SEP #$20
.3a29ee	20 a3 08	jsr $3a08a3	            JSR ASS_ARGS_NUMSTR
.3a29f1	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a29f3	f0 2c		beq $3a2a21	            BEQ is_integer
.3a29f5	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a29f7	f0 2d		beq $3a2a26	            BEQ is_float
.3a29f9	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a29fb	f0 1f		beq $3a2a1c	            BEQ is_string
.3a29fd					type_error
.3a29fd	08		php		            PHP
.3a29fe	c2 20		rep #$20	            REP #$20
.3a2a00	48		pha		            PHA
.3a2a01	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2a04	5b		tcd		            TCD
.3a2a05	68		pla		            PLA
.3a2a06	28		plp		            PLP
.3a2a07	e2 20		sep #$20	            SEP #$20
.3a2a09	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2a0b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2a0f	c2 20		rep #$20	            REP #$20
.3a2a11	29 ff 00	and #$00ff	            AND #$00FF
.3a2a14	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2a17	e2 20		sep #$20	            SEP #$20
.3a2a19	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2a1c					is_string
.3a2a1c	20 1e 18	jsr $3a181e	            JSR OP_STR_NE
.3a2a1f	80 08		bra $3a2a29	            BRA done
.3a2a21					is_integer
.3a2a21	20 02 56	jsr $3a5602	            JSR OP_INT_NE
.3a2a24	80 03		bra $3a2a29	            BRA done
.3a2a26					is_float
.3a2a26	20 74 5d	jsr $3a5d74	            JSR OP_FP_NE
.3a2a29	28		plp		done        PLP
.3a2a2a	60		rts		            RTS
.3a2a2b					OP_GTE
.3a2a2b	08		php		            PHP
.3a2a2c	e2 20		sep #$20	            SEP #$20
.3a2a2e	20 a3 08	jsr $3a08a3	            JSR ASS_ARGS_NUMSTR
.3a2a31	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2a33	f0 2c		beq $3a2a61	            BEQ is_integer
.3a2a35	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2a37	f0 2d		beq $3a2a66	            BEQ is_float
.3a2a39	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a2a3b	f0 1f		beq $3a2a5c	            BEQ is_string
.3a2a3d					type_error
.3a2a3d	08		php		            PHP
.3a2a3e	c2 20		rep #$20	            REP #$20
.3a2a40	48		pha		            PHA
.3a2a41	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2a44	5b		tcd		            TCD
.3a2a45	68		pla		            PLA
.3a2a46	28		plp		            PLP
.3a2a47	e2 20		sep #$20	            SEP #$20
.3a2a49	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2a4b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2a4f	c2 20		rep #$20	            REP #$20
.3a2a51	29 ff 00	and #$00ff	            AND #$00FF
.3a2a54	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2a57	e2 20		sep #$20	            SEP #$20
.3a2a59	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2a5c					is_string
.3a2a5c	20 35 18	jsr $3a1835	            JSR OP_STR_GTE
.3a2a5f	80 08		bra $3a2a69	            BRA done
.3a2a61					is_integer
.3a2a61	20 20 56	jsr $3a5620	            JSR OP_INT_GTE
.3a2a64	80 03		bra $3a2a69	            BRA done
.3a2a66					is_float
.3a2a66	20 5f 5d	jsr $3a5d5f	            JSR OP_FP_GTE
.3a2a69	28		plp		done        PLP
.3a2a6a	60		rts		            RTS
.3a2a6b					OP_LTE
.3a2a6b	08		php		            PHP
.3a2a6c	e2 20		sep #$20	            SEP #$20
.3a2a6e	20 a3 08	jsr $3a08a3	            JSR ASS_ARGS_NUMSTR
.3a2a71	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2a73	f0 2c		beq $3a2aa1	            BEQ is_integer
.3a2a75	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2a77	f0 2d		beq $3a2aa6	            BEQ is_float
.3a2a79	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a2a7b	f0 1f		beq $3a2a9c	            BEQ is_string
.3a2a7d					type_error
.3a2a7d	08		php		            PHP
.3a2a7e	c2 20		rep #$20	            REP #$20
.3a2a80	48		pha		            PHA
.3a2a81	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2a84	5b		tcd		            TCD
.3a2a85	68		pla		            PLA
.3a2a86	28		plp		            PLP
.3a2a87	e2 20		sep #$20	            SEP #$20
.3a2a89	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2a8b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2a8f	c2 20		rep #$20	            REP #$20
.3a2a91	29 ff 00	and #$00ff	            AND #$00FF
.3a2a94	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2a97	e2 20		sep #$20	            SEP #$20
.3a2a99	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2a9c					is_string
.3a2a9c	20 4c 18	jsr $3a184c	            JSR OP_STR_LTE
.3a2a9f	80 08		bra $3a2aa9	            BRA done
.3a2aa1					is_integer
.3a2aa1	20 4d 56	jsr $3a564d	            JSR OP_INT_LTE
.3a2aa4	80 03		bra $3a2aa9	            BRA done
.3a2aa6					is_float
.3a2aa6	20 4a 5d	jsr $3a5d4a	            JSR OP_FP_LTE
.3a2aa9	28		plp		done        PLP
.3a2aaa	60		rts		            RTS
.3a2aab					OP_NEGATIVE
.3a2aab	08		php		                PHP
.3a2aac	e2 20		sep #$20	            SEP #$20
.3a2aae	a5 27		lda $0827	                LDA ARGTYPE1                ; Check the type of the argument
.3a2ab0	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a2ab2	f0 2d		beq $3a2ae1	                BEQ int_negate              ; If integer: negate the integer
.3a2ab4	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a2ab6	f0 1f		beq $3a2ad7	                BEQ float_negate            ; If floating point: negate the floating point
.3a2ab8					type_error
.3a2ab8	08		php		            PHP
.3a2ab9	c2 20		rep #$20	            REP #$20
.3a2abb	48		pha		            PHA
.3a2abc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2abf	5b		tcd		            TCD
.3a2ac0	68		pla		            PLA
.3a2ac1	28		plp		            PLP
.3a2ac2	e2 20		sep #$20	            SEP #$20
.3a2ac4	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2ac6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2aca	c2 20		rep #$20	            REP #$20
.3a2acc	29 ff 00	and #$00ff	            AND #$00FF
.3a2acf	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2ad2	e2 20		sep #$20	            SEP #$20
.3a2ad4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2ad7					float_negate
.3a2ad7	e2 20		sep #$20	            SEP #$20
.3a2ad9	a5 26		lda $0826	                LDA ARGUMENT1+3             ; Flip the sign bit of the floating point number
.3a2adb	49 80		eor #$80	                EOR #$80
.3a2add	85 26		sta $0826	                STA ARGUMENT1+3
.3a2adf	80 16		bra $3a2af7	                BRA done
.3a2ae1					int_negate
.3a2ae1	c2 20		rep #$20	            REP #$20
.3a2ae3	a5 23		lda $0823	                LDA ARGUMENT1               ; Invert ARGUMENT1
.3a2ae5	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a2ae8	85 23		sta $0823	                STA ARGUMENT1
.3a2aea	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a2aec	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a2aef	85 25		sta $0825	                STA ARGUMENT1+2
.3a2af1	e6 23		inc $0823	                INC ARGUMENT1               ; And increment to get two's complement
.3a2af3	d0 02		bne $3a2af7	                BNE done
.3a2af5	e6 25		inc $0825	                INC ARGUMENT1+2
.3a2af7					done
.3a2af7	28		plp		                PLP
.3a2af8	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\statements.s


;******  Processing file: src\C256/statements_c256.s

=0					GR_LUT_BLUE = 0
=1					GR_LUT_GREEN = 1
=2					GR_LUT_RED = 2
=3					GR_LUT_ALPHA = 3
=640					GR_DEFAULT_COLS = 640               ; Default number of columns in the display
=480					GR_DEFAULT_ROWS = 480               ; Default number of rows in the display
=8					GR_MAX_LUT = 8                      ; The number of LUTs Vicky supports
=64					SP_MAX = 64                         ; The number of sprites Vicky supports
=8					SP_REG_SIZE = 8                     ; The number of bytes in a sprite's register block
=0					SP_CONTROL = 0                      ; Offset of the control regsiter for a sprite
=1					SP_ADDR = 1                         ; Offset of the pixmap address for a sprite
=4					SP_X_COORD = 4                      ; Offset of the X coordinate for a sprite
=6					SP_Y_COORD = 6                      ; Offset of the Y coordinate for a sprite
=12					TILEMAP_REG_SIZE = 12               ; The number of bytes in a tile map's register set
=4					TILESET_REG_SIZE = 4                ; The number of bytes in a tile set's register set
=2					BM_MAX = 2                          ; Maximum number of bitmaps we support
=$0040					MAX_VRAM_VICKY = $0040              ; Upper limit (exclusive) bank address for VRAM in Vicky address space
=$00f0					MAX_VRAM_CPU = $00F0                ; Upper limit (exclusive) bank address for VRAM in CPU address space
=$00b0					MIN_VRAM_CPU = $00B0                ; Lower limit (inclusive) bank address for VRAM in CPU address space
>3af000					GR_BM0_ADDR     .dword ?            ; Address of bitmap 0 (from CPU's perspective)
>3af004					GR_BM1_ADDR     .dword ?            ; Address of bitmap 1 (from CPU's perspective)
>3af008					GR_BM0_VRAM     .dword ?            ; Address of bitmap 0 (relative to start of VRAM)
>3af00c					GR_BM1_VRAM     .dword ?            ; Address of bitmap 1 (relative to start of VRAM)
>3af010					GR_MAX_COLS     .word ?             ; Width the display in pixels
>3af012					GR_MAX_ROWS     .word ?             ; Height of the display in pixels
>3af014					GR_TOTAL_PIXELS .word ?             ; Total number of pixels in the display
>3af016					GR_TEMP         .word ?             ; A temporary word for graphics commands
>3af018					GS_SP_CONTROL   .fill SP_MAX        ; Shadow registers for the sprite controls
.3a2af9					S_SETTIME
.3a2af9	08		php		                PHP
.3a2afa	e2 20		sep #$20	            SEP #$20
.3a2afc	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2aff	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2b02	20 ae 05	jsr $3a05ae	            JSR DIVINT10
.3a2b05	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2b07	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2b08	0a		asl a		                ASL A
.3a2b09	0a		asl a		                ASL A
.3a2b0a	0a		asl a		                ASL A
.3a2b0b	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2b0d	48		pha		                PHA
.3a2b0e	a9 2c		lda #$2c	                LDA #','
.3a2b10	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2b13	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2b16	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2b19	20 ae 05	jsr $3a05ae	            JSR DIVINT10
.3a2b1c	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2b1e	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2b1f	0a		asl a		                ASL A
.3a2b20	0a		asl a		                ASL A
.3a2b21	0a		asl a		                ASL A
.3a2b22	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2b24	48		pha		                PHA
.3a2b25	a9 2c		lda #$2c	                LDA #','
.3a2b27	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2b2a	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2b2d	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2b30	20 ae 05	jsr $3a05ae	            JSR DIVINT10
.3a2b33	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2b35	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2b36	0a		asl a		                ASL A
.3a2b37	0a		asl a		                ASL A
.3a2b38	0a		asl a		                ASL A
.3a2b39	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2b3b	48		pha		                PHA
.3a2b3c	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a2b40	09 0c		ora #$0c	                ORA #%00001100
.3a2b42	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2b46	68		pla		                PLA                     ; And seconds to the RTC
.3a2b47	8f 00 08 af	sta $af0800	                STA @lRTC_SEC
.3a2b4b	68		pla		                PLA                     ; Minutes...
.3a2b4c	8f 02 08 af	sta $af0802	                STA @lRTC_MIN
.3a2b50	68		pla		                PLA                     ; Save the hour...
.3a2b51	8f 04 08 af	sta $af0804	                STA @lRTC_HRS
.3a2b55	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a2b59	29 f7		and #$f7	                AND #%11110111
.3a2b5b	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2b5f	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a2b62	28		plp		                PLP
.3a2b63	60		rts		            RTS
.3a2b64					S_SETDATE
.3a2b64	08		php		                PHP
.3a2b65	e2 20		sep #$20	            SEP #$20
.3a2b67	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2b6a	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2b6d	20 ae 05	jsr $3a05ae	            JSR DIVINT10
.3a2b70	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2b72	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2b73	0a		asl a		                ASL A
.3a2b74	0a		asl a		                ASL A
.3a2b75	0a		asl a		                ASL A
.3a2b76	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2b78	48		pha		                PHA
.3a2b79	a9 2c		lda #$2c	                LDA #','
.3a2b7b	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2b7e	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2b81	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2b84	20 ae 05	jsr $3a05ae	            JSR DIVINT10
.3a2b87	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2b89	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2b8a	0a		asl a		                ASL A
.3a2b8b	0a		asl a		                ASL A
.3a2b8c	0a		asl a		                ASL A
.3a2b8d	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2b8f	48		pha		                PHA
.3a2b90	a9 2c		lda #$2c	                LDA #','
.3a2b92	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2b95	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2b98	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a2b9b	20 e4 05	jsr $3a05e4	            JSR DIVINT100
.3a2b9e	c2 20		rep #$20	            REP #$20
.3a2ba0	a5 23		lda $0823	                LDA ARGUMENT1           ; Get the century
.3a2ba2	85 92		sta $0892	                STA MTEMP               ; Save it in MTEMP
.3a2ba4	a5 29		lda $0829	                LDA ARGUMENT2           ; Separate the 10s from the 1s digits
.3a2ba6	85 23		sta $0823	                STA ARGUMENT1
.3a2ba8	20 ae 05	jsr $3a05ae	            JSR DIVINT10
.3a2bab	e2 20		sep #$20	            SEP #$20
.3a2bad	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2baf	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2bb0	0a		asl a		                ASL A
.3a2bb1	0a		asl a		                ASL A
.3a2bb2	0a		asl a		                ASL A
.3a2bb3	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2bb5	48		pha		                PHA                     ; Save the 10s and 1s in BCD
.3a2bb6	c2 20		rep #$20	            REP #$20
.3a2bb8	a5 92		lda $0892	                LDA MTEMP               ; Separate the 100s from the 1000s digits
.3a2bba	85 23		sta $0823	                STA ARGUMENT1
.3a2bbc	20 ae 05	jsr $3a05ae	            JSR DIVINT10
.3a2bbf	e2 20		sep #$20	            SEP #$20
.3a2bc1	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2bc3	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2bc4	0a		asl a		                ASL A
.3a2bc5	0a		asl a		                ASL A
.3a2bc6	0a		asl a		                ASL A
.3a2bc7	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2bc9	48		pha		                PHA                     ; Save the 100s and 1000s in BCD
.3a2bca	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a2bce	09 0c		ora #$0c	                ORA #%00001100
.3a2bd0	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2bd4	68		pla		                PLA                     ; Set the century
.3a2bd5	8f 0f 08 af	sta $af080f	                STA @lRTC_CENTURY
.3a2bd9	68		pla		                PLA                     ; And year to the RTC
.3a2bda	8f 0a 08 af	sta $af080a	                STA @lRTC_YEAR
.3a2bde	68		pla		                PLA                     ; Month...
.3a2bdf	8f 09 08 af	sta $af0809	                STA @lRTC_MONTH
.3a2be3	68		pla		                PLA                     ; Save the day...
.3a2be4	8f 06 08 af	sta $af0806	                STA @lRTC_DAY
.3a2be8	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a2bec	29 f7		and #$f7	                AND #%11110111
.3a2bee	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2bf2	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a2bf5	28		plp		                PLP
.3a2bf6	60		rts		            RTS
.3a2bf7					S_TEXTCOLOR
.3a2bf7	08		php		                PHP
.3a2bf8					locals
>0001					L_FOREGROUND    .byte ?
.3a2bf8	e2 20		sep #$20	            SEP #$20
.3a2bfa	48		pha		            PHA
.3a2bfb	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2bfe	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2c01	e2 20		sep #$20	            SEP #$20
.3a2c03	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the foreground position
.3a2c05	29 0f		and #$0f	                AND #$0F
.3a2c07	0a		asl a		                ASL A
.3a2c08	0a		asl a		                ASL A
.3a2c09	0a		asl a		                ASL A
.3a2c0a	0a		asl a		                ASL A
.3a2c0b	83 01		sta $01,s	                STA L_FOREGROUND    ; Save the foreground color
.3a2c0d	a9 2c		lda #$2c	                LDA #','
.3a2c0f	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2c12	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2c15	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2c18	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the background position
.3a2c1a	29 0f		and #$0f	                AND #$0F
.3a2c1c	03 01		ora $01,s	                ORA L_FOREGROUND    ; Add in the foreground
.3a2c1e	8f 1e 00 00	sta $00001e	                STA @lCURCOLOR      ; And save the new color combination
.3a2c22	e2 20		sep #$20	            SEP #$20
.3a2c24	68		pla		            PLA
.3a2c25	28		plp		                PLP
.3a2c26	60		rts		            RTS
.3a2c27					S_SETBGCOLOR
.3a2c27	08		php		                PHP
.3a2c28					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.3a2c28	c2 20		rep #$20	            REP #$20
.3a2c2a	f4 00 00	pea #$0000	            PEA #0
.3a2c2d	e2 20		sep #$20	            SEP #$20
.3a2c2f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2c32	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2c35	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.3a2c37	83 01		sta $01,s	                STA L_RED
.3a2c39	a9 2c		lda #$2c	                LDA #','
.3a2c3b	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2c3e	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2c41	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2c44	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.3a2c46	83 02		sta $02,s	                STA L_GREEN
.3a2c48	a9 2c		lda #$2c	                LDA #','
.3a2c4a	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2c4d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2c50	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2c53	a5 23		lda $0823	                LDA ARGUMENT1               ; And set the actual color
.3a2c55	8f 0d 00 af	sta $af000d	                STA @lBACKGROUND_COLOR_B
.3a2c59	a3 02		lda $02,s	                LDA L_GREEN
.3a2c5b	8f 0e 00 af	sta $af000e	                STA @lBACKGROUND_COLOR_G
.3a2c5f	a3 01		lda $01,s	                LDA L_RED
.3a2c61	8f 0f 00 af	sta $af000f	                STA @lBACKGROUND_COLOR_R
.3a2c65	c2 20		rep #$20	            REP #$20
.3a2c67	68		pla		            PLA
.3a2c68	28		plp		                PLP
.3a2c69	60		rts		            RTS
.3a2c6a					S_SETBORDER
.3a2c6a	08		php		                PHP
.3a2c6b					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.3a2c6b	c2 20		rep #$20	            REP #$20
.3a2c6d	f4 00 00	pea #$0000	            PEA #0
.3a2c70	e2 20		sep #$20	            SEP #$20
.3a2c72	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2c75	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a2c78	a5 23		lda $0823	                LDA ARGUMENT1
.3a2c7a	f0 16		beq $3a2c92	                BEQ hide_border
.3a2c7c	a9 01		lda #$01	                LDA #Border_Ctrl_Enable     ; Enable the border
.3a2c7e	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.3a2c82	a9 20		lda #$20	                LDA #BORDER_WIDTH           ; Set the border width
.3a2c84	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.3a2c88	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.3a2c8c	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2c90	80 0a		bra $3a2c9c	                BRA get_color
.3a2c92	a9 00		lda #$00	hide_border     LDA #0                      ; Hide the border
.3a2c94	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.3a2c98	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2c9c	a9 2c		lda #$2c	get_color       LDA #','
.3a2c9e	85 37		sta $0837	                STA TARGETTOK
.3a2ca0	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a2ca3	90 39		bcc $3a2cde	                BCC done                    ; No: we're done
.3a2ca5	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a2ca8	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2cab	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2cae	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.3a2cb0	83 01		sta $01,s	                STA L_RED
.3a2cb2	a9 2c		lda #$2c	                LDA #','
.3a2cb4	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2cb7	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2cba	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2cbd	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.3a2cbf	83 02		sta $02,s	                STA L_GREEN
.3a2cc1	a9 2c		lda #$2c	                LDA #','
.3a2cc3	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2cc6	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2cc9	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2ccc	a5 23		lda $0823	                LDA ARGUMENT1
.3a2cce	8f 05 00 af	sta $af0005	                STA @lBORDER_COLOR_B        ; Set the border color
.3a2cd2	a3 02		lda $02,s	                LDA L_GREEN
.3a2cd4	8f 06 00 af	sta $af0006	                STA @lBORDER_COLOR_G
.3a2cd8	a3 01		lda $01,s	                LDA L_RED
.3a2cda	8f 07 00 af	sta $af0007	                STA @lBORDER_COLOR_R
.3a2cde					done
.3a2cde	c2 20		rep #$20	            REP #$20
.3a2ce0	68		pla		            PLA
.3a2ce1	28		plp		                PLP
.3a2ce2	60		rts		            RTS
.3a2ce3					S_SETCOLOR
.3a2ce3	08		php		                PHP
.3a2ce4					locals
>0001					L_LUT           .byte ?
>0002					L_COLOR         .byte ?
>0003					L_RED           .byte ?
>0004					L_GREEN         .byte ?
>0005					L_BLUE          .byte ?
.3a2ce4	c2 20		rep #$20	            REP #$20
.3a2ce6	3b		tsc		            TSC
.3a2ce7	38		sec		            SEC
.3a2ce8	e9 05 00	sbc #$0005	            SBC #SIZE(locals)
.3a2ceb	1b		tcs		            TCS
.3a2cec	e2 20		sep #$20	            SEP #$20
.3a2cee	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2cf1	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2cf4	a5 23		lda $0823	                LDA ARGUMENT1
.3a2cf6	c9 0a		cmp #$0a	                CMP #10             ; And in range
.3a2cf8	90 1f		bcc $3a2d19	                BLT save_lut
.3a2cfa					bad_argument
.3a2cfa	08		php		            PHP
.3a2cfb	c2 20		rep #$20	            REP #$20
.3a2cfd	48		pha		            PHA
.3a2cfe	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2d01	5b		tcd		            TCD
.3a2d02	68		pla		            PLA
.3a2d03	28		plp		            PLP
.3a2d04	e2 20		sep #$20	            SEP #$20
.3a2d06	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a2d08	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2d0c	c2 20		rep #$20	            REP #$20
.3a2d0e	29 ff 00	and #$00ff	            AND #$00FF
.3a2d11	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2d14	e2 20		sep #$20	            SEP #$20
.3a2d16	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2d19	83 01		sta $01,s	save_lut        STA L_LUT           ; Save as LUT
.3a2d1b	a9 2c		lda #$2c	                LDA #','
.3a2d1d	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2d20	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2d23	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2d26	a5 23		lda $0823	                LDA ARGUMENT1
.3a2d28	83 02		sta $02,s	                STA L_COLOR         ; Save as COLOR
.3a2d2a	a9 2c		lda #$2c	                LDA #','
.3a2d2c	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2d2f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2d32	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2d35	a5 23		lda $0823	                LDA ARGUMENT1
.3a2d37	83 03		sta $03,s	                STA L_RED           ; Save as RED
.3a2d39	a9 2c		lda #$2c	                LDA #','
.3a2d3b	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2d3e	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2d41	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2d44	a5 23		lda $0823	                LDA ARGUMENT1
.3a2d46	83 04		sta $04,s	                STA L_GREEN         ; Save it as GREEN
.3a2d48	a9 2c		lda #$2c	                LDA #','
.3a2d4a	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2d4d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2d50	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2d53	a5 23		lda $0823	                LDA ARGUMENT1
.3a2d55	83 05		sta $05,s	                STA L_BLUE          ; Save it as BLUE
.3a2d57	a9 af		lda #$af	                LDA #`GRPH_LUT0_PTR ; Get the bank Vicky is in (should always be $AF)
.3a2d59	85 a0		sta $08a0	                STA MTEMPPTR+2      ; MTEMPPTR will be our pointer to the LUT entry
.3a2d5b	a3 01		lda $01,s	                LDA L_LUT           ; Compute the offset to the LUT address
.3a2d5d	0a		asl a		                ASL A
.3a2d5e	c2 20		rep #$20	            REP #$20
.3a2d60	29 ff 00	and #$00ff	                AND #$00FF
.3a2d63	aa		tax		                TAX                 ; Put it in X
.3a2d64	bf 9b 2d 3a	lda $3a2d9b,x	                LDA @llut_address,X ; Get the address of the LUT
.3a2d68	85 9e		sta $089e	                STA MTEMPPTR        ; Put it in MTEMPPTR
.3a2d6a	e2 20		sep #$20	            SEP #$20
.3a2d6c	a3 02		lda $02,s	                LDA L_COLOR         ; color index *= 4
.3a2d6e	c2 20		rep #$20	            REP #$20
.3a2d70	29 ff 00	and #$00ff	                AND #$00FF
.3a2d73	0a		asl a		                ASL A               ; Since each color has four bytes of data
.3a2d74	0a		asl a		                ASL A
.3a2d75	18		clc		                CLC                 ; Add the color offset to MTEMPPTR
.3a2d76	65 9e		adc $089e	                ADC MTEMPPTR
.3a2d78	85 9e		sta $089e	                STA MTEMPPTR
.3a2d7a	e2 20		sep #$20	            SEP #$20
.3a2d7c	a0 02 00	ldy #$0002	                LDY #GR_LUT_RED
.3a2d7f	a3 03		lda $03,s	                LDA L_RED
.3a2d81	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the red component to the color entry
.3a2d83	a0 01 00	ldy #$0001	                LDY #GR_LUT_GREEN
.3a2d86	a3 04		lda $04,s	                LDA L_GREEN
.3a2d88	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the green component to the color entry
.3a2d8a	a0 00 00	ldy #$0000	                LDY #GR_LUT_BLUE
.3a2d8d	a3 05		lda $05,s	                LDA L_BLUE
.3a2d8f	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the blue component to the color entry
.3a2d91					done
.3a2d91	c2 20		rep #$20	            REP #$20
.3a2d93	3b		tsc		            TSC
.3a2d94	18		clc		            CLC
.3a2d95	69 05 00	adc #$0005	            ADC #SIZE(locals)
.3a2d98	1b		tcs		            TCS
.3a2d99	28		plp		                PLP
.3a2d9a	60		rts		            RTS
>3a2d9b	00 20				lut_address     .word <>GRPH_LUT0_PTR
>3a2d9d	00 24				                .word <>GRPH_LUT1_PTR
>3a2d9f	00 28				                .word <>GRPH_LUT2_PTR
>3a2da1	00 2c				                .word <>GRPH_LUT3_PTR
>3a2da3	00 30				                .word <>GRPH_LUT4_PTR
>3a2da5	00 34				                .word <>GRPH_LUT5_PTR
>3a2da7	00 38				                .word <>GRPH_LUT6_PTR
>3a2da9	00 3c				                .word <>GRPH_LUT7_PTR
>3a2dab	40 1f				                .word <>FG_CHAR_LUT_PTR
>3a2dad	80 1f				                .word <>BG_CHAR_LUT_PTR
.3a2daf					S_GRAPHICS
.3a2daf	da		phx		                PHX
.3a2db0	5a		phy		                PHY
.3a2db1	08		php		                PHP
.3a2db2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2db5	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a2db8	c2 20		rep #$20	            REP #$20
.3a2dba	a5 23		lda $0823	                LDA ARGUMENT1               ; Check to see if we're setting mode to 800x600 or 400x300
.3a2dbc	89 00 01	bit #$0100	                BIT #$0100
.3a2dbf	d0 17		bne $3a2dd8	                BNE set_mode                ; Yes: go ahead and set it
.3a2dc1	af 00 00 af	lda $af0000	                LDA @l MASTER_CTRL_REG_L    ; Otherwise, check to see if we're already in 800x600 or 400x300
.3a2dc5	89 00 01	bit #$0100	                BIT #$0100
.3a2dc8	f0 0e		beq $3a2dd8	                BEQ set_mode                ; No: just go ahead and set the mode
.3a2dca	e2 20		sep #$20	            SEP #$20
.3a2dcc	a9 00		lda #$00	                LDA #0                      ; Yes: toggle back to 640x480...
.3a2dce	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.3a2dd2	a9 01		lda #$01	                LDA #1                      ; And back to 800x600....
.3a2dd4	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.3a2dd8					set_mode
.3a2dd8	c2 20		rep #$20	            REP #$20
.3a2dda	a5 23		lda $0823	                LDA ARGUMENT1
.3a2ddc	8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L    ; Set the graphics mode
.3a2de0	e2 20		sep #$20	            SEP #$20
.3a2de2	a5 24		lda $0824	                LDA ARGUMENT1+1             ; Get the screen size bits
.3a2de4	c2 20		rep #$20	            REP #$20
.3a2de6	29 03 00	and #$0003	                AND #$0003
.3a2de9	0a		asl a		                ASL A                       ; Multiply by two to get the index
.3a2dea	aa		tax		                TAX                         ; X is index into the size tables
.3a2deb	c2 20		rep #$20	            REP #$20
.3a2ded	bf 36 2e 3a	lda $3a2e36,x	                LDA gr_columns,X            ; Set the columns
.3a2df1	8f 10 f0 3a	sta $3af010	                STA @lGR_MAX_COLS
.3a2df5	bf 3e 2e 3a	lda $3a2e3e,x	                LDA gr_rows,X               ; Set the rows
.3a2df9	8f 12 f0 3a	sta $3af012	                STA @lGR_MAX_ROWS
.3a2dfd	af 10 f0 3a	lda $3af010	                LDA @lGR_MAX_COLS           ; Get the current columns
.3a2e01	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.3a2e05	af 12 f0 3a	lda $3af012	                LDA @lGR_MAX_ROWS           ; Get the current rows
.3a2e09	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B
.3a2e0d	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT             ; Multiply them to get the total pixels
.3a2e11	8f 14 f0 3a	sta $3af014	                STA @lGR_TOTAL_PIXELS
.3a2e15	e2 20		sep #$20	            SEP #$20
.3a2e17	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.3a2e1b	8f 16 f0 3a	sta $3af016	                STA @lGR_TOTAL_PIXELS+2
.3a2e1f	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2e23					reset_cursor
.3a2e23	c2 20		rep #$20	            REP #$20
.3a2e25	af 1a 00 00	lda $00001a	                LDA @lCURSORX
.3a2e29	aa		tax		                TAX
.3a2e2a	af 1c 00 00	lda $00001c	                LDA @lCURSORY
.3a2e2e	a8		tay		                TAY
.3a2e2f	20 20 00	jsr $3a0020	            JSR CURSORXY
.3a2e32	28		plp		                PLP
.3a2e33	7a		ply		                PLY
.3a2e34	fa		plx		                PLX
.3a2e35	60		rts		            RTS
>3a2e36	80 02 20 03 40 01 90 01		gr_columns      .word 640,800,320,400
>3a2e3e	e0 01 58 02 f0 00 2c 01		gr_rows         .word 480,600,240,300
>3a2e46	50 00 64 00 28 00 32 00		col_count       .word 80,100,40,50
>3a2e4e	3c 00 4b 00 1e 00 32 00		row_count       .word 60,75,30,50
>3a2e56	48 00 5c 00 20 00 2a 00		colb_count      .word 72,92,32,42
>3a2e5e	34 00 43 00 16 00 34 00		rowb_count      .word 52,67,22,52
.3a2e66					BITMAP_SRAM
.3a2e66	da		phx		                PHX
.3a2e67	08		php		                PHP
.3a2e68	c2 30		rep #$30	            REP #$30
.3a2e6a	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2e6d	b0 1c		bcs $3a2e8b	                BGE range_err           ; Make sure it's within range
.3a2e6f	0a		asl a		                ASL A
.3a2e70	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.3a2e71	aa		tax		                TAX
.3a2e72	bf 00 f0 3a	lda $3af000,x	                LDA @l GR_BM0_ADDR,X    ; Get the low 16-bits of the address
.3a2e76	85 9e		sta $089e	                STA MTEMPPTR
.3a2e78	bf 02 f0 3a	lda $3af002,x	                LDA @l GR_BM0_ADDR+2,X  ; Get the high bits of the address
.3a2e7c	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a2e7e	c9 f0 00	cmp #$00f0	                CMP #MAX_VRAM_CPU       ; Check to make sure address is within VRAM
.3a2e81	b0 08		bcs $3a2e8b	                BGE range_err
.3a2e83	c9 b0 00	cmp #$00b0	                CMP #MIN_VRAM_CPU
.3a2e86	90 03		bcc $3a2e8b	                BLT range_err
.3a2e88	28		plp		                PLP
.3a2e89	fa		plx		                PLX
.3a2e8a	60		rts		            RTS
.3a2e8b					range_err
.3a2e8b	08		php		            PHP
.3a2e8c	c2 20		rep #$20	            REP #$20
.3a2e8e	48		pha		            PHA
.3a2e8f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2e92	5b		tcd		            TCD
.3a2e93	68		pla		            PLA
.3a2e94	28		plp		            PLP
.3a2e95	e2 20		sep #$20	            SEP #$20
.3a2e97	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2e99	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2e9d	c2 20		rep #$20	            REP #$20
.3a2e9f	29 ff 00	and #$00ff	            AND #$00FF
.3a2ea2	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2ea5	e2 20		sep #$20	            SEP #$20
.3a2ea7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2eaa					BITMAP_VRAM
.3a2eaa	da		phx		                PHX
.3a2eab	08		php		                PHP
.3a2eac	c2 30		rep #$30	            REP #$30
.3a2eae	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2eb1	b0 17		bcs $3a2eca	                BGE range_err           ; Make sure it's within range
.3a2eb3	0a		asl a		                ASL A
.3a2eb4	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.3a2eb5	aa		tax		                TAX
.3a2eb6	bf 08 f0 3a	lda $3af008,x	                LDA @l GR_BM0_VRAM,X    ; Get the low 16-bits of the address
.3a2eba	85 9e		sta $089e	                STA MTEMPPTR
.3a2ebc	bf 0a f0 3a	lda $3af00a,x	                LDA @l GR_BM0_VRAM+2,X  ; Get the high bits of the address
.3a2ec0	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a2ec2	c9 40 00	cmp #$0040	                CMP #MAX_VRAM_VICKY     ; Check to make sure the address is from $00:0000 - $3F:FFFF
.3a2ec5	b0 03		bcs $3a2eca	                BGE range_err           ; If not, throw a range error
.3a2ec7	28		plp		                PLP
.3a2ec8	fa		plx		                PLX
.3a2ec9	60		rts		            RTS
.3a2eca					range_err
.3a2eca	08		php		            PHP
.3a2ecb	c2 20		rep #$20	            REP #$20
.3a2ecd	48		pha		            PHA
.3a2ece	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2ed1	5b		tcd		            TCD
.3a2ed2	68		pla		            PLA
.3a2ed3	28		plp		            PLP
.3a2ed4	e2 20		sep #$20	            SEP #$20
.3a2ed6	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2ed8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2edc	c2 20		rep #$20	            REP #$20
.3a2ede	29 ff 00	and #$00ff	            AND #$00FF
.3a2ee1	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2ee4	e2 20		sep #$20	            SEP #$20
.3a2ee6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2ee9					S_BITMAP
.3a2ee9	08		php		                PHP
.3a2eea					locals
>0001					L_PLANE         .word ?
>0003					L_VISIBLE       .byte ?
>0004					L_ADDRESS       .dword ?
.3a2eea	c2 30		rep #$30	            REP #$30
.3a2eec	3b		tsc		                TSC                         ; Allocate space for the locals on the stack
.3a2eed	38		sec		                SEC
.3a2eee	e9 07 00	sbc #$0007	                SBC #SIZE(locals)
.3a2ef1	1b		tcs		                TCS
.3a2ef2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2ef5	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2ef8	c2 20		rep #$20	            REP #$20
.3a2efa	a5 23		lda $0823	                LDA ARGUMENT1               ; Make sure it's in range
.3a2efc	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2eff	b0 59		bcs $3a2f5a	                BGE range_err               ; If not, throw an error
.3a2f01	83 01		sta $01,s	                STA L_PLANE                 ; If so, save it to MARG1
.3a2f03	e2 20		sep #$20	            SEP #$20
.3a2f05	a9 2c		lda #$2c	                LDA #','
.3a2f07	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2f0a	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2f0d	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2f10	a5 23		lda $0823	                LDA ARGUMENT1
.3a2f12	83 03		sta $03,s	                STA L_VISIBLE
.3a2f14	a9 2c		lda #$2c	                LDA #','
.3a2f16	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a2f19	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2f1c	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2f1f	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the number back
.3a2f21	0a		asl a		                ASL A                       ; Multiply by 8 to get the offset to the registers
.3a2f22	0a		asl a		                ASL A
.3a2f23	0a		asl a		                ASL A
.3a2f24	aa		tax		                TAX                         ; And save that offset to X
.3a2f25	a3 03		lda $03,s	                LDA L_VISIBLE               ; Check the visible flag
.3a2f27	d0 05		bne $3a2f2e	                BNE is_visible              ; If <> 0, it's visible
.3a2f29	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the LUT #
.3a2f2b	0a		asl a		                ASL A                       ; Shift it into position for the register
.3a2f2c	80 04		bra $3a2f32	                BRA wr_bm_reg               ; And go to write it
.3a2f2e	a5 23		lda $0823	is_visible      LDA ARGUMENT1               ; Get the LUT #
.3a2f30	38		sec		                SEC
.3a2f31	2a		rol a		                ROL A                       ; And shift it into position, and set enable bit
.3a2f32	9f 00 01 af	sta $af0100,x	wr_bm_reg       STA @l BM0_CONTROL_REG,X    ; Write to the bitmap control register
.3a2f36	c2 20		rep #$20	            REP #$20
.3a2f38	a9 2c 00	lda #$002c	                LDA #','
.3a2f3b	85 37		sta $0837	                STA TARGETTOK
.3a2f3d	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a2f40	b0 37		bcs $3a2f79	                BCS get_address             ; Yes: parse the address
.3a2f42	c2 20		rep #$20	            REP #$20
.3a2f44	08		php		            PHP
.3a2f45	c2 20		rep #$20	            REP #$20
.3a2f47	a9 00 00	lda #$0000	            LDA #<>VRAM
.3a2f4a	85 23		sta $0823	            STA ARGUMENT1
.3a2f4c	a9 b0 00	lda #$00b0	            LDA #(VRAM >> 16)
.3a2f4f	85 25		sta $0825	            STA ARGUMENT1+2
.3a2f51	e2 20		sep #$20	            SEP #$20
.3a2f53	a9 00		lda #$00	            LDA #TYPE_INTEGER
.3a2f55	85 27		sta $0827	            STA ARGUMENT1+4
.3a2f57	28		plp		            PLP
.3a2f58	80 27		bra $3a2f81	                BRA set_address
.3a2f5a					range_err
.3a2f5a	08		php		            PHP
.3a2f5b	c2 20		rep #$20	            REP #$20
.3a2f5d	48		pha		            PHA
.3a2f5e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2f61	5b		tcd		            TCD
.3a2f62	68		pla		            PLA
.3a2f63	28		plp		            PLP
.3a2f64	e2 20		sep #$20	            SEP #$20
.3a2f66	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2f68	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2f6c	c2 20		rep #$20	            REP #$20
.3a2f6e	29 ff 00	and #$00ff	            AND #$00FF
.3a2f71	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2f74	e2 20		sep #$20	            SEP #$20
.3a2f76	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2f79					get_address
.3a2f79	c2 20		rep #$20	            REP #$20
.3a2f7b	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a2f7e	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2f81					set_address
.3a2f81	c2 20		rep #$20	            REP #$20
.3a2f83	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.3a2f85	0a		asl a		                ASL A                       ; Multiply by four to get the offset to the address variable
.3a2f86	0a		asl a		                ASL A
.3a2f87	aa		tax		                TAX                         ; And put it in X
.3a2f88	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the CPU-space address
.3a2f8a	9f 00 f0 3a	sta $3af000,x	                STA @l GR_BM0_ADDR,X        ; And save it to the correct GR_BM?_ADDR variable
.3a2f8e	9f 08 f0 3a	sta $3af008,x	                STA @l GR_BM0_VRAM,X
.3a2f92	83 04		sta $04,s	                STA L_ADDRESS               ; And L_ADDRESS, temporarily
.3a2f94	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a2f96	9f 02 f0 3a	sta $3af002,x	                STA @l GR_BM0_ADDR+2,X
.3a2f9a	38		sec		                SEC
.3a2f9b	e9 b0 00	sbc #$00b0	                SBC #`VRAM                  ; Rebase the upper half of the address to Vicky memory space
.3a2f9e	9f 0a f0 3a	sta $3af00a,x	                STA @l GR_BM0_VRAM+2,X
.3a2fa2	83 06		sta $06,s	                STA L_ADDRESS+2             ; And to L_ADDRESS
.3a2fa4	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.3a2fa6	0a		asl a		                ASL A                       ; Multiply by eight to get the offset to the registers
.3a2fa7	0a		asl a		                ASL A
.3a2fa8	0a		asl a		                ASL A
.3a2fa9	aa		tax		                TAX                         ; And put it in X
.3a2faa	e2 20		sep #$20	            SEP #$20
.3a2fac	a3 04		lda $04,s	                LDA L_ADDRESS               ; Get the address in Vicky space...
.3a2fae	9f 01 01 af	sta $af0101,x	                STA @l BM0_START_ADDY_L,X   ; Save it to the Vicky registers
.3a2fb2	a3 05		lda $05,s	                LDA L_ADDRESS+1
.3a2fb4	9f 02 01 af	sta $af0102,x	                STA @l BM0_START_ADDY_M,X
.3a2fb8	a3 06		lda $06,s	                LDA L_ADDRESS+2
.3a2fba	9f 03 01 af	sta $af0103,x	                STA @l BM0_START_ADDY_H,X
.3a2fbe	a9 00		lda #$00	                LDA #0                      ; Default offset to (0, 0)
.3a2fc0	9f 04 01 af	sta $af0104,x	                STA @l BM0_X_OFFSET,X
.3a2fc4	9f 05 01 af	sta $af0105,x	                STA @l BM0_Y_OFFSET,X
.3a2fc8	c2 30		rep #$30	            REP #$30
.3a2fca	3b		tsc		                TSC                         ; Remove the space for the locals from the stack
.3a2fcb	18		clc		                CLC
.3a2fcc	69 07 00	adc #$0007	                ADC #SIZE(locals)
.3a2fcf	1b		tcs		                TCS
.3a2fd0	28		plp		                PLP
.3a2fd1	60		rts		            RTS
.3a2fd2					bad_address
.3a2fd2	08		php		            PHP
.3a2fd3	c2 20		rep #$20	            REP #$20
.3a2fd5	48		pha		            PHA
.3a2fd6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2fd9	5b		tcd		            TCD
.3a2fda	68		pla		            PLA
.3a2fdb	28		plp		            PLP
.3a2fdc	e2 20		sep #$20	            SEP #$20
.3a2fde	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a2fe0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2fe4	c2 20		rep #$20	            REP #$20
.3a2fe6	29 ff 00	and #$00ff	            AND #$00FF
.3a2fe9	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a2fec	e2 20		sep #$20	            SEP #$20
.3a2fee	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2ff1					S_CLRBITMAP
.3a2ff1	08		php		                PHP
.3a2ff2	c2 20		rep #$20	            REP #$20
.3a2ff4	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a2ff7	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a2ffa	a5 23		lda $0823	                LDA ARGUMENT1
.3a2ffc	20 aa 2e	jsr $3a2eaa	            JSR BITMAP_VRAM
.3a2fff	c2 20		rep #$20	            REP #$20
.3a3001	a5 9e		lda $089e	                LDA MTEMPPTR                ; Set the start address and the # of pixels to write
.3a3003	8f 05 04 af	sta $af0405	                STA @lVDMA_DST_ADDY_L
.3a3007	af 14 f0 3a	lda $3af014	                LDA @lGR_TOTAL_PIXELS       ; Set the size
.3a300b	8f 08 04 af	sta $af0408	                STA @lVDMA_SIZE_L
.3a300f	e2 20		sep #$20	            SEP #$20
.3a3011	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.3a3013	8f 07 04 af	sta $af0407	                STA @lVDMA_DST_ADDY_H
.3a3017	af 16 f0 3a	lda $3af016	                LDA @lGR_TOTAL_PIXELS+2
.3a301b	8f 0a 04 af	sta $af040a	                STA @lVDMA_SIZE_H
.3a301f	a9 00		lda #$00	                LDA #0                      ; Set the color to write
.3a3021	8f 01 04 af	sta $af0401	                STA @lVDMA_BYTE_2_WRITE
.3a3025	a9 85		lda #$85	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_Start_TRF
.3a3027	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.3a302b	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.3a302f	30 fa		bmi $3a302b	                BMI wait
.3a3031	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.3a3033	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.3a3037	28		plp		done            PLP
.3a3038	60		rts		            RTS
=$000855				COLOR = MARG1
=$000859				X0 = MARG2
=$00085d				Y0 = MARG3
=$000861				X1 = MARG4
=$000865				Y1 = MARG5
=$000869				DX = MARG6
=$00086d				DY = MARG7
=$000871				ERR = MARG8
=$000875				ERR2 = MARG9
>08dd					SX      .word ?
>08df					SY      .word ?
.3a3039					PLOT
.3a3039	08		php		                PHP
.3a303a	c2 20		rep #$20	            REP #$20
.3a303c	a5 59		lda $0859	                LDA X0                      ; Get the column
.3a303e	cf 10 f0 3a	cmp $3af010	                CMP @l GR_MAX_COLS          ; Make sure it's in range for this graphics mode
.3a3042	90 1f		bcc $3a3063	                BLT chk_row                 ; If so: check the row
.3a3044					range_err
.3a3044	08		php		            PHP
.3a3045	c2 20		rep #$20	            REP #$20
.3a3047	48		pha		            PHA
.3a3048	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a304b	5b		tcd		            TCD
.3a304c	68		pla		            PLA
.3a304d	28		plp		            PLP
.3a304e	e2 20		sep #$20	            SEP #$20
.3a3050	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3052	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3056	c2 20		rep #$20	            REP #$20
.3a3058	29 ff 00	and #$00ff	            AND #$00FF
.3a305b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a305e	e2 20		sep #$20	            SEP #$20
.3a3060	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3063					chk_row
.3a3063	c2 30		rep #$30	            REP #$30
.3a3065	a5 5d		lda $085d	                LDA Y0                      ; Get the row
.3a3067	cf 12 f0 3a	cmp $3af012	                CMP @l GR_MAX_ROWS          ; Make sure it's in range for this graphics mode
.3a306b	b0 d7		bcs $3a3044	                BGE range_err               ; If not: throw an error
.3a306d	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.3a3071	af 10 f0 3a	lda $3af010	                LDA @lGR_MAX_COLS
.3a3075	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B          ; Multiply by the number of columns in the pixmap
.3a3079	18		clc		                CLC                         ; Add the column
.3a307a	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT
.3a307e	65 59		adc $0859	                ADC X0
.3a3080	85 0c		sta $080c	                STA SCRATCH
.3a3082	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.3a3086	69 00 00	adc #$0000	                ADC #0
.3a3089	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH is offset of pixel in the pixmap
.3a308b	18		clc		                CLC                         ; Add the address of the first pixel
.3a308c	a5 0c		lda $080c	                LDA SCRATCH
.3a308e	65 9e		adc $089e	                ADC MTEMPPTR
.3a3090	85 0c		sta $080c	                STA SCRATCH
.3a3092	a5 0e		lda $080e	                LDA SCRATCH+2
.3a3094	65 a0		adc $08a0	                ADC MTEMPPTR+2
.3a3096	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH := pixmap + pixel offset
.3a3098	e2 20		sep #$20	            SEP #$20
.3a309a	a5 55		lda $0855	                LDA COLOR                   ; Get the color
.3a309c	87 0c		sta [$080c]	                STA [SCRATCH]               ; And write the color to the pixel
.3a309e	28		plp		done            PLP
.3a309f	60		rts		            RTS
.3a30a0					LINE
.3a30a0	c2 20		rep #$20	            REP #$20
.3a30a2	a9 01 00	lda #$0001	                LDA #1                      ; Assume SX = 1
.3a30a5	85 dd		sta $08dd	                STA SX
.3a30a7	38		sec		                SEC                         ; DX := ABS(X1 - X0)
.3a30a8	a5 61		lda $0861	                LDA X1
.3a30aa	e5 59		sbc $0859	                SBC X0
.3a30ac	85 69		sta $0869	                STA DX
.3a30ae	10 0b		bpl $3a30bb	                BPL abs_Y                   ; If DX < 0 {
.3a30b0	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DX := -DX
.3a30b3	1a		inc a		                INC A
.3a30b4	85 69		sta $0869	                STA DX
.3a30b6	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SX := -1
.3a30b9	85 dd		sta $08dd	                STA SX                      ; }
.3a30bb	a9 01 00	lda #$0001	abs_Y           LDA #1                      ; Assume SY = 1
.3a30be	85 df		sta $08df	                STA SY
.3a30c0	38		sec		                SEC                         ; DY := ABS(Y1 - Y0)
.3a30c1	a5 65		lda $0865	                LDA Y1
.3a30c3	e5 5d		sbc $085d	                SBC Y0
.3a30c5	85 6d		sta $086d	                STA DY
.3a30c7	10 0b		bpl $3a30d4	                BPL calc_ERR                ; If DY < 0 {
.3a30c9	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DY := -DY
.3a30cc	1a		inc a		                INC A
.3a30cd	85 6d		sta $086d	                STA DY
.3a30cf	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SY := -1
.3a30d2	85 df		sta $08df	                STA SY                      ; }
.3a30d4	a5 6d		lda $086d	calc_ERR        LDA DY
.3a30d6	c9 01 00	cmp #$0001	                CMP #1                      ; Is DY = 1?
.3a30d9	d0 19		bne $3a30f4	                BNE cmp_dx                  ; No: compare to DX
.3a30db	a5 69		lda $0869	                LDA DX
.3a30dd	c9 01 00	cmp #$0001	                CMP #1                      ; Is DX = 1 too?
.3a30e0	d0 10		bne $3a30f2	                BNE cmp_dy_dx               ; No: treat normally
.3a30e2	20 39 30	jsr $3a3039	            JSR PLOT
.3a30e5	a5 61		lda $0861	                LDA X1
.3a30e7	85 59		sta $0859	                STA X0
.3a30e9	a5 65		lda $0865	                LDA Y1
.3a30eb	85 5d		sta $085d	                STA Y0
.3a30ed	20 39 30	jsr $3a3039	            JSR PLOT
.3a30f0	80 5b		bra $3a314d	                BRA done
.3a30f2	a5 6d		lda $086d	cmp_dy_dx       LDA DY
.3a30f4	c5 69		cmp $0869	cmp_dx          CMP DX                      ; (DY < DX)
.3a30f6	b0 04		bcs $3a30fc	                BGE else
.3a30f8	a5 69		lda $0869	                LDA DX                      ; TRUE CASE: ERR := DX
.3a30fa	80 06		bra $3a3102	                BRA shiftERR
.3a30fc	a5 6d		lda $086d	else            LDA DY                      ; FALSE CASE: ERR := -DY
.3a30fe	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a3101	1a		inc a		                INC A
.3a3102	48		pha		shiftERR        PHA
.3a3103	0a		asl a		                ASL A
.3a3104	68		pla		                PLA
.3a3105	6a		ror a		                ROR A                       ; ERR := ERR / 2
.3a3106	85 71		sta $0871	                STA ERR
.3a3108					loop
.3a3108	20 39 30	jsr $3a3039	            JSR PLOT
.3a310b	a5 59		lda $0859	                LDA X0                      ; break if X0=X1 and Y0=Y1
.3a310d	c5 61		cmp $0861	                CMP X1
.3a310f	d0 06		bne $3a3117	                BNE calc_ERR2
.3a3111	a5 5d		lda $085d	                LDA Y0
.3a3113	c5 65		cmp $0865	                CMP Y1
.3a3115	f0 36		beq $3a314d	                BEQ done
.3a3117	a5 71		lda $0871	calc_ERR2       LDA ERR                     ; ERR2 := ERR
.3a3119	85 75		sta $0875	                STA ERR2
.3a311b	a5 69		lda $0869	                LDA DX                      ; if (ERR2 > -DX) {
.3a311d	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a3120	1a		inc a		                INC A
.3a3121	c5 75		cmp $0875	                CMP ERR2
.3a3123	10 10		bpl $3a3135	                BPL check_DY
.3a3125	f0 0e		beq $3a3135	                BEQ check_DY
.3a3127	38		sec		                SEC                         ; ERR -= DY
.3a3128	a5 71		lda $0871	                LDA ERR
.3a312a	e5 6d		sbc $086d	                SBC DY
.3a312c	85 71		sta $0871	                STA ERR
.3a312e	18		clc		                CLC                         ; X0 += SX
.3a312f	a5 59		lda $0859	                LDA X0
.3a3131	65 dd		adc $08dd	                ADC SX
.3a3133	85 59		sta $0859	                STA X0                      ; }
.3a3135	a5 75		lda $0875	check_DY        LDA ERR2                    ; if (ERR2 < DY) {
.3a3137	c5 6d		cmp $086d	                CMP DY
.3a3139	10 cd		bpl $3a3108	                BPL loop
.3a313b	f0 cb		beq $3a3108	                BEQ loop
.3a313d	18		clc		                CLC                         ; ERR += DX
.3a313e	a5 71		lda $0871	                LDA ERR
.3a3140	65 69		adc $0869	                ADC DX
.3a3142	85 71		sta $0871	                STA ERR
.3a3144	18		clc		                CLC                         ; Y0 += SY
.3a3145	a5 5d		lda $085d	                LDA Y0
.3a3147	65 df		adc $08df	                ADC SY
.3a3149	85 5d		sta $085d	                STA Y0                      ; }
.3a314b	80 bb		bra $3a3108	                BRA loop                    ; }
.3a314d					done
.3a314d	60		rts		            RTS
.3a314e					S_PLOT
.3a314e	08		php		                PHP
.3a314f					locals
>0001					L_PLANE         .word ?
>0003					L_X             .word ?
>0005					L_Y             .word ?
.3a314f	c2 20		rep #$20	            REP #$20
.3a3151	3b		tsc		            TSC
.3a3152	38		sec		            SEC
.3a3153	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a3156	1b		tcs		            TCS
.3a3157	08		php		            PHP
.3a3158	c2 20		rep #$20	            REP #$20
.3a315a	48		pha		            PHA
.3a315b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a315e	5b		tcd		            TCD
.3a315f	68		pla		            PLA
.3a3160	28		plp		            PLP
.3a3161	08		php		            PHP
.3a3162	e2 20		sep #$20	            SEP #$20
.3a3164	48		pha		            PHA
.3a3165	a9 00		lda #$00	            LDA #0
.3a3167	48		pha		            PHA
.3a3168	ab		plb		            PLB
.3a3169	68		pla		            PLA
.3a316a	28		plp		            PLP
.3a316b	c2 30		rep #$30	            REP #$30
.3a316d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3170	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a3173	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a3175	a9 2c 00	lda #$002c	                LDA #','
.3a3178	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a317b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a317e	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3181	a5 23		lda $0823	                LDA ARGUMENT1
.3a3183	83 03		sta $03,s	                STA L_X                     ; Save it to X
.3a3185	a9 2c 00	lda #$002c	                LDA #','
.3a3188	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a318b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a318e	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3191	a5 23		lda $0823	                LDA ARGUMENT1
.3a3193	83 05		sta $05,s	                STA L_Y                     ; Save it to Y
.3a3195	a9 2c 00	lda #$002c	                LDA #','
.3a3198	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a319b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a319e	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a31a1	a5 23		lda $0823	                LDA ARGUMENT1
.3a31a3	85 55		sta $0855	                STA COLOR                   ; Save it to MARG1
.3a31a5	a3 03		lda $03,s	                LDA L_X                     ; Set the (X0, Y0) coordinates
.3a31a7	85 59		sta $0859	                STA X0
.3a31a9	a3 05		lda $05,s	                LDA L_Y
.3a31ab	85 5d		sta $085d	                STA Y0
.3a31ad	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a31af	20 66 2e	jsr $3a2e66	            JSR BITMAP_SRAM
.3a31b2	20 39 30	jsr $3a3039	            JSR PLOT
.3a31b5	c2 20		rep #$20	            REP #$20
.3a31b7	3b		tsc		            TSC
.3a31b8	18		clc		            CLC
.3a31b9	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a31bc	1b		tcs		            TCS
.3a31bd	28		plp		                PLP
.3a31be	60		rts		            RTS
.3a31bf					S_LINE
.3a31bf	08		php		                PHP
.3a31c0					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
.3a31c0	c2 20		rep #$20	            REP #$20
.3a31c2	3b		tsc		            TSC
.3a31c3	38		sec		            SEC
.3a31c4	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.3a31c7	1b		tcs		            TCS
.3a31c8	08		php		            PHP
.3a31c9	c2 20		rep #$20	            REP #$20
.3a31cb	48		pha		            PHA
.3a31cc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a31cf	5b		tcd		            TCD
.3a31d0	68		pla		            PLA
.3a31d1	28		plp		            PLP
.3a31d2	08		php		            PHP
.3a31d3	e2 20		sep #$20	            SEP #$20
.3a31d5	48		pha		            PHA
.3a31d6	a9 00		lda #$00	            LDA #0
.3a31d8	48		pha		            PHA
.3a31d9	ab		plb		            PLB
.3a31da	68		pla		            PLA
.3a31db	28		plp		            PLP
.3a31dc	c2 30		rep #$30	            REP #$30
.3a31de	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a31e1	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a31e4	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a31e6	a9 2c 00	lda #$002c	                LDA #','
.3a31e9	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a31ec	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a31ef	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a31f2	a5 23		lda $0823	                LDA ARGUMENT1
.3a31f4	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.3a31f6	a9 2c 00	lda #$002c	                LDA #','
.3a31f9	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a31fc	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a31ff	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3202	a5 23		lda $0823	                LDA ARGUMENT1
.3a3204	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.3a3206	a9 2c 00	lda #$002c	                LDA #','
.3a3209	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a320c	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a320f	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3212	a5 23		lda $0823	                LDA ARGUMENT1
.3a3214	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.3a3216	a9 2c 00	lda #$002c	                LDA #','
.3a3219	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a321c	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a321f	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3222	a5 23		lda $0823	                LDA ARGUMENT1
.3a3224	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.3a3226	a9 2c 00	lda #$002c	                LDA #','
.3a3229	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a322c	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a322f	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a3232	a5 23		lda $0823	                LDA ARGUMENT1
.3a3234	85 55		sta $0855	                STA COLOR                   ; Save it to COLOR
.3a3236	a3 03		lda $03,s	                LDA L_X0                    ; Set the (X0, Y0) coordinates
.3a3238	85 59		sta $0859	                STA X0
.3a323a	a3 05		lda $05,s	                LDA L_Y0
.3a323c	85 5d		sta $085d	                STA Y0
.3a323e	a3 07		lda $07,s	                LDA L_X1                    ; Set the (X1, Y1) coordinates
.3a3240	85 61		sta $0861	                STA X1
.3a3242	a3 09		lda $09,s	                LDA L_Y1
.3a3244	85 65		sta $0865	                STA Y1
.3a3246	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a3248	20 66 2e	jsr $3a2e66	            JSR BITMAP_SRAM
.3a324b	20 a0 30	jsr $3a30a0	            JSR LINE
.3a324e					done
.3a324e	c2 20		rep #$20	            REP #$20
.3a3250	3b		tsc		            TSC
.3a3251	18		clc		            CLC
.3a3252	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.3a3255	1b		tcs		            TCS
.3a3256	28		plp		                PLP
.3a3257	60		rts		            RTS
.3a3258					S_FILL
.3a3258	08		php		                PHP
.3a3259					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
>000b					L_COLOR         .word ?
.3a3259	c2 20		rep #$20	            REP #$20
.3a325b	3b		tsc		            TSC
.3a325c	38		sec		            SEC
.3a325d	e9 0c 00	sbc #$000c	            SBC #SIZE(locals)
.3a3260	1b		tcs		            TCS
.3a3261	08		php		            PHP
.3a3262	c2 20		rep #$20	            REP #$20
.3a3264	48		pha		            PHA
.3a3265	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3268	5b		tcd		            TCD
.3a3269	68		pla		            PLA
.3a326a	28		plp		            PLP
.3a326b	08		php		            PHP
.3a326c	e2 20		sep #$20	            SEP #$20
.3a326e	48		pha		            PHA
.3a326f	a9 00		lda #$00	            LDA #0
.3a3271	48		pha		            PHA
.3a3272	ab		plb		            PLB
.3a3273	68		pla		            PLA
.3a3274	28		plp		            PLP
.3a3275	c2 30		rep #$30	            REP #$30
.3a3277	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a327a	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a327d	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a327f	a9 2c 00	lda #$002c	                LDA #','
.3a3282	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3285	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3288	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a328b	a5 23		lda $0823	                LDA ARGUMENT1
.3a328d	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.3a328f	a9 2c 00	lda #$002c	                LDA #','
.3a3292	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3295	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3298	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a329b	a5 23		lda $0823	                LDA ARGUMENT1
.3a329d	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.3a329f	a9 2c 00	lda #$002c	                LDA #','
.3a32a2	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a32a5	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a32a8	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a32ab	a5 23		lda $0823	                LDA ARGUMENT1
.3a32ad	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.3a32af	a9 2c 00	lda #$002c	                LDA #','
.3a32b2	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a32b5	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a32b8	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a32bb	a5 23		lda $0823	                LDA ARGUMENT1
.3a32bd	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.3a32bf	a9 2c 00	lda #$002c	                LDA #','
.3a32c2	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a32c5	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a32c8	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a32cb	a5 23		lda $0823	                LDA ARGUMENT1
.3a32cd	83 0b		sta $0b,s	                STA L_COLOR                 ; Save it to COLOR
.3a32cf	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a32d1	20 aa 2e	jsr $3a2eaa	            JSR BITMAP_VRAM
.3a32d4	a9 07 00	lda #$0007	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_1D_2D
.3a32d7	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a32db	c2 20		rep #$20	            REP #$20
.3a32dd	a3 05		lda $05,s	                LDA L_Y0                    ; Get the row
.3a32df	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a32e3	af 10 f0 3a	lda $3af010	                LDA @l GR_MAX_COLS
.3a32e7	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B         ; Multiply by the number of columns in the pixmap
.3a32eb	18		clc		                CLC                         ; Add the column
.3a32ec	af 04 01 00	lda $000104	                LDA @l M0_RESULT
.3a32f0	63 03		adc $03,s	                ADC L_X0
.3a32f2	85 0c		sta $080c	                STA SCRATCH
.3a32f4	e2 20		sep #$20	            SEP #$20
.3a32f6	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.3a32fa	69 00		adc #$00	                ADC #0
.3a32fc	85 0e		sta $080e	                STA SCRATCH+2
.3a32fe	c2 20		rep #$20	            REP #$20
.3a3300	18		clc		                CLC                         ; Set the destination address
.3a3301	a5 9e		lda $089e	                LDA MTEMPPTR
.3a3303	65 0c		adc $080c	                ADC SCRATCH
.3a3305	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.3a3309	e2 20		sep #$20	            SEP #$20
.3a330b	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.3a330d	65 0e		adc $080e	                ADC SCRATCH+2
.3a330f	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H
.3a3313	c2 20		rep #$20	            REP #$20
.3a3315	38		sec		                SEC                         ; Set the width of the FILL operation
.3a3316	a3 07		lda $07,s	                LDA L_X1
.3a3318	e3 03		sbc $03,s	                SBC L_X0
.3a331a	85 0c		sta $080c	                STA SCRATCH
.3a331c	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a3320	38		sec		                SEC
.3a3321	af 10 f0 3a	lda $3af010	                LDA @l GR_MAX_COLS
.3a3325	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L    ; And the destination stride
.3a3329	38		sec		                SEC                         ; Set the height of the FILL operation
.3a332a	a3 09		lda $09,s	                LDA L_Y1
.3a332c	e3 05		sbc $05,s	                SBC L_Y0
.3a332e	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a3332	e2 20		sep #$20	            SEP #$20
.3a3334	a3 0b		lda $0b,s	                LDA L_COLOR                 ; Set the color to write
.3a3336	8f 01 04 af	sta $af0401	                STA @l VDMA_BYTE_2_WRITE
.3a333a	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.3a333e	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF
.3a3340	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3344	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.3a3348	30 fa		bmi $3a3344	                BMI wait
.3a334a	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.3a334c	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3350					done
.3a3350	c2 20		rep #$20	            REP #$20
.3a3352	3b		tsc		            TSC
.3a3353	18		clc		            CLC
.3a3354	69 0c 00	adc #$000c	            ADC #SIZE(locals)
.3a3357	1b		tcs		            TCS
.3a3358	28		plp		                PLP
.3a3359	60		rts		            RTS
.3a335a					SPADDR
.3a335a	08		php		                PHP
.3a335b	c2 20		rep #$20	            REP #$20
.3a335d	c9 40 00	cmp #$0040	                CMP #SP_MAX
.3a3360	b0 13		bcs $3a3375	                BGE error
.3a3362	0a		asl a		                ASL A                       ; Multiply it by 8 (the size of s sprite block)
.3a3363	0a		asl a		                ASL A
.3a3364	0a		asl a		                ASL A
.3a3365	18		clc		                CLC                         ; Add it to the address of the first
.3a3366	69 00 0c	adc #$0c00	                ADC #<>SP00_CONTROL_REG     ; sprite block
.3a3369	85 9e		sta $089e	                STA MTEMPPTR
.3a336b	a9 af 00	lda #$00af	                LDA #`SP00_CONTROL_REG
.3a336e	69 00 00	adc #$0000	                ADC #0
.3a3371	85 a0		sta $08a0	                STA MTEMPPTR+2              ; And save that to MTEMPPTR
.3a3373	28		plp		                PLP
.3a3374	60		rts		            RTS
.3a3375					error
.3a3375	08		php		            PHP
.3a3376	c2 20		rep #$20	            REP #$20
.3a3378	48		pha		            PHA
.3a3379	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a337c	5b		tcd		            TCD
.3a337d	68		pla		            PLA
.3a337e	28		plp		            PLP
.3a337f	e2 20		sep #$20	            SEP #$20
.3a3381	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3383	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3387	c2 20		rep #$20	            REP #$20
.3a3389	29 ff 00	and #$00ff	            AND #$00FF
.3a338c	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a338f	e2 20		sep #$20	            SEP #$20
.3a3391	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3394					S_SPRITE
.3a3394	08		php		                PHP
.3a3395					locals
>0001					L_SPRITE        .word ?
>0003					L_LUT           .byte ?
.3a3395	c2 20		rep #$20	            REP #$20
.3a3397	3b		tsc		            TSC
.3a3398	38		sec		            SEC
.3a3399	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.3a339c	1b		tcs		            TCS
.3a339d	c2 30		rep #$30	            REP #$30
.3a339f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a33a2	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a33a5	a5 23		lda $0823	                LDA ARGUMENT1
.3a33a7	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a33a9	a9 2c 00	lda #$002c	                LDA #','
.3a33ac	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a33af	e2 20		sep #$20	            SEP #$20
.3a33b1	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a33b4	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a33b7	a5 23		lda $0823	                LDA ARGUMENT1
.3a33b9	c9 08		cmp #$08	                CMP #GR_MAX_LUT             ; Check that it's in range
.3a33bb	b0 56		bcs $3a3413	                BGE error                   ; If not: throw an error
.3a33bd	83 03		sta $03,s	                STA L_LUT                   ; Save it as lut
.3a33bf	a9 2c		lda #$2c	                LDA #','
.3a33c1	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a33c4	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a33c7	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a33ca	c2 20		rep #$20	            REP #$20
.3a33cc	38		sec		                SEC                         ; Adjust address to be in Vicky's space
.3a33cd	a5 23		lda $0823	                LDA ARGUMENT1
.3a33cf	e9 00 00	sbc #$0000	                SBC #<>VRAM
.3a33d2	85 23		sta $0823	                STA ARGUMENT1
.3a33d4	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a33d6	e9 b0 00	sbc #$00b0	                SBC #`VRAM
.3a33d9	85 25		sta $0825	                STA ARGUMENT1+2
.3a33db	30 36		bmi $3a3413	                BMI error                   ; If negative, throw an error
.3a33dd	c2 20		rep #$20	            REP #$20
.3a33df	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a33e1	aa		tax		                TAX
.3a33e2	20 5a 33	jsr $3a335a	            JSR SPADDR
.3a33e5	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the lower word of the address
.3a33e7	a0 01 00	ldy #$0001	                LDY #SP_ADDR
.3a33ea	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a33ec	e2 20		sep #$20	            SEP #$20
.3a33ee	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a33f0	c8		iny		                INY
.3a33f1	c8		iny		                INY
.3a33f2	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save the upper byte of the address
.3a33f4	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the sprite control register
.3a33f8	29 f1		and #$f1	                AND #%11110001              ; Filter off the current LUT
.3a33fa	85 0c		sta $080c	                STA SCRATCH
.3a33fc	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT back
.3a33fe	0a		asl a		                ASL A                       ; Sift it into the LUT position
.3a33ff	29 0e		and #$0e	                AND #%00001110              ; Make sure we don't have anything wrong there
.3a3401	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with what's in the sprite's control
.3a3403	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the register's bits
.3a3405	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And the shadow register
.3a3409					done
.3a3409	c2 20		rep #$20	            REP #$20
.3a340b	3b		tsc		            TSC
.3a340c	18		clc		            CLC
.3a340d	69 03 00	adc #$0003	            ADC #SIZE(locals)
.3a3410	1b		tcs		            TCS
.3a3411	28		plp		                PLP
.3a3412	60		rts		            RTS
.3a3413					error
.3a3413	08		php		            PHP
.3a3414	c2 20		rep #$20	            REP #$20
.3a3416	48		pha		            PHA
.3a3417	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a341a	5b		tcd		            TCD
.3a341b	68		pla		            PLA
.3a341c	28		plp		            PLP
.3a341d	e2 20		sep #$20	            SEP #$20
.3a341f	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3421	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3425	c2 20		rep #$20	            REP #$20
.3a3427	29 ff 00	and #$00ff	            AND #$00FF
.3a342a	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a342d	e2 20		sep #$20	            SEP #$20
.3a342f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3432					S_SPRITEAT
.3a3432	08		php		                PHP
.3a3433					locals
>0001					L_SPRITE        .word ?
>0003					L_X             .word ?
.3a3433	c2 20		rep #$20	            REP #$20
.3a3435	3b		tsc		            TSC
.3a3436	38		sec		            SEC
.3a3437	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.3a343a	1b		tcs		            TCS
.3a343b	c2 30		rep #$30	            REP #$30
.3a343d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3440	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a3443	a5 23		lda $0823	                LDA ARGUMENT1
.3a3445	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a3447	a9 2c 00	lda #$002c	                LDA #','
.3a344a	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a344d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3450	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3453	a5 23		lda $0823	                LDA ARGUMENT1
.3a3455	83 03		sta $03,s	                STA L_X                     ; Save it as X
.3a3457	a9 2c 00	lda #$002c	                LDA #','
.3a345a	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a345d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3460	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3463	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a3465	20 5a 33	jsr $3a335a	            JSR SPADDR
.3a3468	a3 03		lda $03,s	                LDA L_X                     ; Get the X coordinate
.3a346a	a0 04 00	ldy #$0004	                LDY #SP_X_COORD             ; Save the X coordinate for the sprite
.3a346d	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a346f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3471	a0 06 00	ldy #$0006	                LDY #SP_Y_COORD             ; Save the Y coordinate for the sprite
.3a3474	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3476					done
.3a3476	c2 20		rep #$20	            REP #$20
.3a3478	3b		tsc		            TSC
.3a3479	18		clc		            CLC
.3a347a	69 04 00	adc #$0004	            ADC #SIZE(locals)
.3a347d	1b		tcs		            TCS
.3a347e	28		plp		                PLP
.3a347f	60		rts		            RTS
.3a3480					S_SPRITESHOW
.3a3480	08		php		                PHP
.3a3481					locals
>0001					L_SPRITE        .word ?
>0003					L_VISIBLE       .byte ?
.3a3481	c2 20		rep #$20	            REP #$20
.3a3483	3b		tsc		            TSC
.3a3484	38		sec		            SEC
.3a3485	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.3a3488	1b		tcs		            TCS
.3a3489	c2 30		rep #$30	            REP #$30
.3a348b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a348e	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a3491	a5 23		lda $0823	                LDA ARGUMENT1
.3a3493	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a3495	a9 2c 00	lda #$002c	                LDA #','
.3a3498	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a349b	e2 20		sep #$20	            SEP #$20
.3a349d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a34a0	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a34a3	a5 23		lda $0823	                LDA ARGUMENT1
.3a34a5	d0 04		bne $3a34ab	                BNE is_visible
.3a34a7	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 0 (not visible)
.3a34a9	80 04		bra $3a34af	                BRA chk_layer
.3a34ab	a9 01		lda #$01	is_visible      LDA #1
.3a34ad	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 1 (visible)
.3a34af	a9 2c		lda #$2c	chk_layer       LDA #','
.3a34b1	85 37		sta $0837	                STA TARGETTOK
.3a34b3	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a34b6	b0 20		bcs $3a34d8	                BCS get_layer               ; Yes: get the layer
.3a34b8					no_layer
.3a34b8	c2 30		rep #$30	            REP #$30
.3a34ba	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a34bc	aa		tax		                TAX
.3a34bd	20 5a 33	jsr $3a335a	            JSR SPADDR
.3a34c0	e2 20		sep #$20	            SEP #$20
.3a34c2	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.3a34c6	29 fe		and #$fe	                AND #$FE                    ; Filter out the enable bit
.3a34c8	85 0c		sta $080c	                STA SCRATCH
.3a34ca	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.3a34cc	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.3a34ce	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.3a34d0	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And save it
.3a34d4	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; ... and to Vicky
.3a34d6	80 36		bra $3a350e	                BRA done
.3a34d8					get_layer
.3a34d8	c2 30		rep #$30	            REP #$30
.3a34da	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a34dd	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a34e0	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a34e3	a5 23		lda $0823	                LDA ARGUMENT1
.3a34e5	c9 08 00	cmp #$0008	                CMP #8                      ; Make sure it's in range
.3a34e8	b0 2e		bcs $3a3518	                BGE error                   ; If not, throw an out of range error
.3a34ea	0a		asl a		                ASL A                       ; If it's ok... shift it into position
.3a34eb	0a		asl a		                ASL A
.3a34ec	0a		asl a		                ASL A
.3a34ed	0a		asl a		                ASL A
.3a34ee	85 0c		sta $080c	                STA SCRATCH                 ; And save it in SCRATCH
.3a34f0	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a34f2	aa		tax		                TAX
.3a34f3	20 5a 33	jsr $3a335a	            JSR SPADDR
.3a34f6	e2 20		sep #$20	            SEP #$20
.3a34f8	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.3a34fa	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.3a34fc	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.3a34fe	85 0c		sta $080c	                STA SCRATCH
.3a3500	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.3a3504	29 8e		and #$8e	                AND #%10001110              ; Filter out the enable and layer bits
.3a3506	05 0c		ora $080c	                ORA SCRATCH                 ; Combine with the provided layer and enable
.3a3508	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the bits in Vicky
.3a350a	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And to the shadow registers
.3a350e					done
.3a350e	c2 20		rep #$20	            REP #$20
.3a3510	3b		tsc		            TSC
.3a3511	18		clc		            CLC
.3a3512	69 03 00	adc #$0003	            ADC #SIZE(locals)
.3a3515	1b		tcs		            TCS
.3a3516	28		plp		                PLP
.3a3517	60		rts		            RTS
.3a3518					error
.3a3518	08		php		            PHP
.3a3519	c2 20		rep #$20	            REP #$20
.3a351b	48		pha		            PHA
.3a351c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a351f	5b		tcd		            TCD
.3a3520	68		pla		            PLA
.3a3521	28		plp		            PLP
.3a3522	e2 20		sep #$20	            SEP #$20
.3a3524	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3526	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a352a	c2 20		rep #$20	            REP #$20
.3a352c	29 ff 00	and #$00ff	            AND #$00FF
.3a352f	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3532	e2 20		sep #$20	            SEP #$20
.3a3534	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3537					TILESET_ADDR
.3a3537	08		php		                PHP
.3a3538	c2 20		rep #$20	            REP #$20
.3a353a	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.3a353d	b0 19		bcs $3a3558	                BGE out_of_range            ; If not, throw a range error
.3a353f	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.3a3542	a9 04 00	lda #$0004	                LDA #TILESET_REG_SIZE       ; Multiply it by the number of bytes in a tile set register set
.3a3545	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.3a3548	18		clc		                CLC                         ; Add to TILESET0_ADDY_L to get the final address
.3a3549	ad 04 01	lda $0104	                LDA @w M0_RESULT
.3a354c	69 80 02	adc #$0280	                ADC #<>TILESET0_ADDY_L
.3a354f	85 9e		sta $089e	                STA MTEMPPTR
.3a3551	a9 af 00	lda #$00af	                LDA #`TILESET0_ADDY_L
.3a3554	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a3556	28		plp		                PLP
.3a3557	60		rts		            RTS
.3a3558					out_of_range
.3a3558	08		php		            PHP
.3a3559	c2 20		rep #$20	            REP #$20
.3a355b	48		pha		            PHA
.3a355c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a355f	5b		tcd		            TCD
.3a3560	68		pla		            PLA
.3a3561	28		plp		            PLP
.3a3562	e2 20		sep #$20	            SEP #$20
.3a3564	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3566	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a356a	c2 20		rep #$20	            REP #$20
.3a356c	29 ff 00	and #$00ff	            AND #$00FF
.3a356f	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3572	e2 20		sep #$20	            SEP #$20
.3a3574	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3577					TILEMAP_ADDR
.3a3577	08		php		                PHP
.3a3578	c2 20		rep #$20	            REP #$20
.3a357a	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.3a357d	b0 19		bcs $3a3598	                BGE out_of_range            ; If not, throw a range error
.3a357f	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.3a3582	a9 0c 00	lda #$000c	                LDA #TILEMAP_REG_SIZE       ; Multiply it by the number of bytes in a tile map register set
.3a3585	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.3a3588	18		clc		                CLC
.3a3589	ad 04 01	lda $0104	                LDA @w M0_RESULT            ; Add to TL0_CONTROL_REG to get the final address
.3a358c	69 00 02	adc #$0200	                ADC #<>TL0_CONTROL_REG
.3a358f	85 9e		sta $089e	                STA MTEMPPTR
.3a3591	a9 af 00	lda #$00af	                LDA #`TL0_CONTROL_REG
.3a3594	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a3596	28		plp		                PLP
.3a3597	60		rts		            RTS
.3a3598					out_of_range
.3a3598	08		php		            PHP
.3a3599	c2 20		rep #$20	            REP #$20
.3a359b	48		pha		            PHA
.3a359c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a359f	5b		tcd		            TCD
.3a35a0	68		pla		            PLA
.3a35a1	28		plp		            PLP
.3a35a2	e2 20		sep #$20	            SEP #$20
.3a35a4	a9 09		lda #$09	            LDA #ERR_RANGE
.3a35a6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a35aa	c2 20		rep #$20	            REP #$20
.3a35ac	29 ff 00	and #$00ff	            AND #$00FF
.3a35af	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a35b2	e2 20		sep #$20	            SEP #$20
.3a35b4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a35b7					S_TILESET
.3a35b7	08		php		                PHP
.3a35b8					locals
>0001					L_TILENUM       .word ?
>0003					L_LUT           .word ?
>0005					L_IS_SQUARE     .word ?
.3a35b8	c2 20		rep #$20	            REP #$20
.3a35ba	3b		tsc		            TSC
.3a35bb	38		sec		            SEC
.3a35bc	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a35bf	1b		tcs		            TCS
.3a35c0	c2 20		rep #$20	            REP #$20
.3a35c2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a35c5	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a35c8	a5 23		lda $0823	                LDA ARGUMENT1
.3a35ca	83 01		sta $01,s	                STA L_TILENUM               ; Save it as the tile set/map number
.3a35cc	a9 2c 00	lda #$002c	                LDA #','
.3a35cf	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a35d2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a35d5	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a35d8	a5 23		lda $0823	                LDA ARGUMENT1
.3a35da	83 03		sta $03,s	                STA L_LUT                   ; Save it as LUT
.3a35dc	a9 2c 00	lda #$002c	                LDA #','
.3a35df	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a35e2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a35e5	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a35e8	a5 23		lda $0823	                LDA ARGUMENT1
.3a35ea	83 05		sta $05,s	                STA L_IS_SQUARE             ; Save it as IS_SQUARE
.3a35ec	a9 2c 00	lda #$002c	                LDA #','
.3a35ef	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a35f2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a35f5	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a35f8	a3 01		lda $01,s	                LDA L_TILENUM
.3a35fa	20 37 35	jsr $3a3537	            JSR TILESET_ADDR
.3a35fd	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the bitmap address - the address of the start of VRAM
.3a35ff	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And save it to the registers
.3a3601	e2 20		sep #$20	            SEP #$20
.3a3603	38		sec		                SEC
.3a3604	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3606	e9 b0		sbc #$b0	                SBC #`VRAM
.3a3608	a0 02 00	ldy #$0002	                LDY #TILESET_ADDY_H
.3a360b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a360d	a3 05		lda $05,s	                LDA L_IS_SQUARE             ; Check if is_square == 0?
.3a360f	d0 0d		bne $3a361e	                BNE is_square
.3a3611					not_square
.3a3611	e2 20		sep #$20	            SEP #$20
.3a3613	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.3a3615	29 07		and #$07	                AND #$07                    ; Force it to be in range
.3a3617	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.3a361a	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.3a361c	80 0d		bra $3a362b	                BRA done
.3a361e					is_square
.3a361e	e2 20		sep #$20	            SEP #$20
.3a3620	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.3a3622	29 07		and #$07	                AND #$07                    ; Force it to be in range
.3a3624	09 08		ora #$08	                ORA #TILESET_SQUARE_256     ; Turn on the 256x256 flag
.3a3626	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.3a3629	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.3a362b					done
.3a362b	c2 20		rep #$20	            REP #$20
.3a362d	3b		tsc		            TSC
.3a362e	18		clc		            CLC
.3a362f	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a3632	1b		tcs		            TCS
.3a3633	28		plp		                PLP
.3a3634	60		rts		            RTS
.3a3635					S_TILEMAP
.3a3635	08		php		                PHP
.3a3636					locals
>0001					L_TILENUM       .word ?
>0003					L_WIDTH         .word ?
>0005					L_HEIGHT        .word ?
.3a3636	c2 20		rep #$20	            REP #$20
.3a3638	3b		tsc		            TSC
.3a3639	38		sec		            SEC
.3a363a	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a363d	1b		tcs		            TCS
.3a363e	c2 20		rep #$20	            REP #$20
.3a3640	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3643	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a3646	a5 23		lda $0823	                LDA ARGUMENT1
.3a3648	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a364a	a9 2c 00	lda #$002c	                LDA #','
.3a364d	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3650	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3653	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3656	a5 23		lda $0823	                LDA ARGUMENT1
.3a3658	83 03		sta $03,s	                STA L_WIDTH                 ; Save it as WIDTH
.3a365a	a9 2c 00	lda #$002c	                LDA #','
.3a365d	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3660	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3663	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3666	a5 23		lda $0823	                LDA ARGUMENT1
.3a3668	83 05		sta $05,s	                STA L_HEIGHT                ; Save it as HEIGHT
.3a366a	a9 2c 00	lda #$002c	                LDA #','
.3a366d	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3670	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3673	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3676	a3 01		lda $01,s	                LDA L_TILENUM
.3a3678	20 77 35	jsr $3a3577	            JSR TILEMAP_ADDR
.3a367b	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the map address - the address of the start of VRAM
.3a367d	a0 01 00	ldy #$0001	                LDY #TILEMAP_START_ADDY
.3a3680	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; And save it to the registers
.3a3682	e2 20		sep #$20	            SEP #$20
.3a3684	38		sec		                SEC
.3a3685	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3687	e9 b0		sbc #$b0	                SBC #`VRAM
.3a3689	c8		iny		                INY
.3a368a	c8		iny		                INY
.3a368b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a368d	c2 20		rep #$20	            REP #$20
.3a368f	a3 03		lda $03,s	                LDA L_WIDTH                 ; Set the width
.3a3691	a0 04 00	ldy #$0004	                LDY #TILEMAP_TOTAL_X
.3a3694	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3696	a3 05		lda $05,s	                LDA L_HEIGHT                ; Set the height
.3a3698	a0 06 00	ldy #$0006	                LDY #TILEMAP_TOTAL_Y
.3a369b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a369d					done
.3a369d	c2 20		rep #$20	            REP #$20
.3a369f	3b		tsc		            TSC
.3a36a0	18		clc		            CLC
.3a36a1	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a36a4	1b		tcs		            TCS
.3a36a5	28		plp		                PLP
.3a36a6	60		rts		            RTS
.3a36a7					S_TILESHOW
.3a36a7	08		php		                PHP
.3a36a8					locals
>0001					L_TILENUM       .word ?
.3a36a8	c2 20		rep #$20	            REP #$20
.3a36aa	f4 00 00	pea #$0000	            PEA #0
.3a36ad	c2 20		rep #$20	            REP #$20
.3a36af	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a36b2	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a36b5	a5 23		lda $0823	                LDA ARGUMENT1
.3a36b7	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a36b9	a9 2c 00	lda #$002c	                LDA #','
.3a36bc	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a36bf	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a36c2	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a36c5	a3 01		lda $01,s	                LDA L_TILENUM
.3a36c7	20 77 35	jsr $3a3577	            JSR TILEMAP_ADDR
.3a36ca	a5 23		lda $0823	                LDA ARGUMENT1               ; CHeck the visible parameter
.3a36cc	d0 06		bne $3a36d4	                BNE is_visible              ; If it's <> 0, make it visible
.3a36ce	e2 20		sep #$20	            SEP #$20
.3a36d0	a9 00		lda #$00	                LDA #0                      ; Control value for invisible
.3a36d2	80 04		bra $3a36d8	                BRA set_control
.3a36d4					is_visible
.3a36d4	e2 20		sep #$20	            SEP #$20
.3a36d6	a9 01		lda #$01	                LDA #TILEMAP_VISIBLE        ; Control value for visible
.3a36d8					set_control
.3a36d8	e2 20		sep #$20	            SEP #$20
.3a36da	a0 00 00	ldy #$0000	                LDY #TILEMAP_CONTROL        ; Set the control register
.3a36dd	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a36df					done
.3a36df	c2 20		rep #$20	            REP #$20
.3a36e1	68		pla		            PLA
.3a36e2	28		plp		                PLP
.3a36e3	60		rts		            RTS
.3a36e4					S_TILEAT
.3a36e4	08		php		                PHP
.3a36e5					locals
>0001					L_TILENUM       .word ?
>0003					L_X             .word ?
.3a36e5	c2 20		rep #$20	            REP #$20
.3a36e7	3b		tsc		            TSC
.3a36e8	38		sec		            SEC
.3a36e9	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.3a36ec	1b		tcs		            TCS
.3a36ed	c2 20		rep #$20	            REP #$20
.3a36ef	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a36f2	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a36f5	a5 23		lda $0823	                LDA ARGUMENT1
.3a36f7	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a36f9	a9 2c 00	lda #$002c	                LDA #','
.3a36fc	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a36ff	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3702	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3705	a5 23		lda $0823	                LDA ARGUMENT1
.3a3707	83 03		sta $03,s	                STA L_X                     ; Save as X
.3a3709	a9 2c 00	lda #$002c	                LDA #','
.3a370c	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a370f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3712	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3715	a3 01		lda $01,s	                LDA L_TILENUM
.3a3717	20 77 35	jsr $3a3577	            JSR TILEMAP_ADDR
.3a371a	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the Y position
.3a371c	a0 0a 00	ldy #$000a	                LDY #TILEMAP_WINDOW_Y
.3a371f	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3721	a3 03		lda $03,s	                LDA L_X                     ; Set the X position
.3a3723	a0 08 00	ldy #$0008	                LDY #TILEMAP_WINDOW_X
.3a3726	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3728					done
.3a3728	c2 20		rep #$20	            REP #$20
.3a372a	3b		tsc		            TSC
.3a372b	18		clc		            CLC
.3a372c	69 04 00	adc #$0004	            ADC #SIZE(locals)
.3a372f	1b		tcs		            TCS
.3a3730	28		plp		                PLP
.3a3731	60		rts		            RTS
=0					DMA_LINEAR = 0                              ; Memory to copy is a continguous, linear range
=1					DMA_RECT = 1                                ; Memory to copy is a rectangular block
.0000					DMA_BLOCK
>0000					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>0001					ADDR            .long ?                     ; The starting address for the data to transfer
>0004					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>0007					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>0009					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>000b					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
=$01					DMA_SRC_2D = $01                            ; Source transfer should be 2D
=$02					DMA_DST_2D = $02                            ; Destination transfer should be 2D
=$10					DMA_SRC_SRAM = $10                          ; Flag indicating that the source is in SRAM ($00:0000 - $3F:FFFF)
=$20					DMA_DST_SRAM = $20                          ; Flag indicating that the destination is in SRAM ($00:0000 - $3F:FFFF)
>3af058					DMA_BLOCKS      .byte ?                     ; What blocks are involved
.3af059					DMA_SRC
>3af059					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>3af05a					ADDR            .long ?                     ; The starting address for the data to transfer
>3af05d					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>3af060					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>3af062					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>3af064					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.3af066					DMA_DEST
>3af066					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>3af067					ADDR            .long ?                     ; The starting address for the data to transfer
>3af06a					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>3af06d					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>3af06f					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>3af071					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.3a3732					DO_DMA
.3a3732	0b		phd		                PHD
.3a3733	08		php		                PHP
.3a3734	08		php		            PHP
.3a3735	c2 20		rep #$20	            REP #$20
.3a3737	48		pha		            PHA
.3a3738	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a373b	5b		tcd		            TCD
.3a373c	68		pla		            PLA
.3a373d	28		plp		            PLP
.3a373e	e2 20		sep #$20	            SEP #$20
.3a3740	a9 00		lda #$00	                LDA #0
.3a3742	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS           ; Set mode to something neutral
.3a3746	af 5c f0 3a	lda $3af05c	                LDA @l DMA_SRC.ADDR+2       ; Check the bank
.3a374a	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.3a374c	b0 1c		bcs $3a376a	                BGE src_vram                ; Yes: leave the DMA_BLOCK bit alone
.3a374e	8f 24 04 af	sta $af0424	src_sram        STA @l SDMA_SRC_ADDY_H      ; Set the SDMA source address
.3a3752	af 5b f0 3a	lda $3af05b	                LDA @l DMA_SRC.ADDR+1
.3a3756	8f 23 04 af	sta $af0423	                STA @l SDMA_SRC_ADDY_M
.3a375a	af 5a f0 3a	lda $3af05a	                LDA @l DMA_SRC.ADDR
.3a375e	8f 22 04 af	sta $af0422	                STA @l SDMA_SRC_ADDY_L
.3a3762	a9 10		lda #$10	                LDA #DMA_SRC_SRAM           ; Set the SRAM source block bit
.3a3764	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a3768	80 17		bra $3a3781	                BRA src_mode
.3a376a	38		sec		src_vram        SEC                         ; Convert to VRAM relative address
.3a376b	e9 b0		sbc #$b0	                SBC #`VRAM
.3a376d	8f 04 04 af	sta $af0404	                STA @l VDMA_SRC_ADDY_H      ; Set the VDMA source address
.3a3771	af 5b f0 3a	lda $3af05b	                LDA @l DMA_SRC.ADDR+1
.3a3775	8f 03 04 af	sta $af0403	                STA @l VDMA_SRC_ADDY_M
.3a3779	af 5a f0 3a	lda $3af05a	                LDA @l DMA_SRC.ADDR
.3a377d	8f 02 04 af	sta $af0402	                STA @l VDMA_SRC_ADDY_L
.3a3781	af 59 f0 3a	lda $3af059	src_mode        LDA @l DMA_SRC.MODE         ; Determine if source is 1D or 2D
.3a3785	d0 3c		bne $3a37c3	                BNE src_2d
.3a3787	af 58 f0 3a	lda $3af058	src_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.3a378b	f0 1b		beq $3a37a8	                BEQ src_1d_vram
.3a378d	af 5d f0 3a	lda $3af05d	src_1d_sram     LDA @l DMA_SRC.SIZE         ; It's SRAM, so set the SDMA size
.3a3791	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.3a3795	af 5e f0 3a	lda $3af05e	                LDA @l DMA_SRC.SIZE+1
.3a3799	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_M
.3a379d	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a37a1	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.3a37a5	82 8b 00	brl $3a3833	                BRL set_dst                 ; Go to set up the destination
.3a37a8	af 5d f0 3a	lda $3af05d	src_1d_vram     LDA @l DMA_SRC.SIZE         ; It's VRAM, so set the VDMA size
.3a37ac	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.3a37b0	af 5e f0 3a	lda $3af05e	                LDA @l DMA_SRC.SIZE+1
.3a37b4	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_M
.3a37b8	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a37bc	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.3a37c0	82 70 00	brl $3a3833	                BRL set_dst                 ; Go to set up the destination
.3a37c3	af 58 f0 3a	lda $3af058	src_2d          LDA @l DMA_BLOCKS
.3a37c7	09 01		ora #$01	                ORA #DMA_SRC_2D             ; Set the bit to make the source a 2D transfer
.3a37c9	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a37cd	89 10		bit #$10	                BIT #DMA_SRC_SRAM           ; Are we writing to SRAM
.3a37cf	f0 32		beq $3a3803	                BEQ src_2d_vram             ; No: set the 2d values in the VRAM source
.3a37d1	af 60 f0 3a	lda $3af060	src_2d_sram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.3a37d5	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.3a37d9	af 61 f0 3a	lda $3af061	                LDA @l DMA_SRC.WIDTH+1
.3a37dd	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.3a37e1	af 62 f0 3a	lda $3af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.3a37e5	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.3a37e9	af 63 f0 3a	lda $3af063	                LDA @l DMA_SRC.HEIGHT+1
.3a37ed	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.3a37f1	af 64 f0 3a	lda $3af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.3a37f5	8f 2c 04 af	sta $af042c	                STA @l SDMA_SRC_STRIDE_L
.3a37f9	af 65 f0 3a	lda $3af065	                LDA @l DMA_SRC.STRIDE+1
.3a37fd	8f 2d 04 af	sta $af042d	                STA @l SDMA_SRC_STRIDE_L+1
.3a3801	80 30		bra $3a3833	                BRA set_dst
.3a3803	af 60 f0 3a	lda $3af060	src_2d_vram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.3a3807	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a380b	af 61 f0 3a	lda $3af061	                LDA @l DMA_SRC.WIDTH+1
.3a380f	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.3a3813	af 62 f0 3a	lda $3af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.3a3817	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a381b	af 63 f0 3a	lda $3af063	                LDA @l DMA_SRC.HEIGHT+1
.3a381f	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.3a3823	af 64 f0 3a	lda $3af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.3a3827	8f 0c 04 af	sta $af040c	                STA @l VDMA_SRC_STRIDE_L
.3a382b	af 65 f0 3a	lda $3af065	                LDA @l DMA_SRC.STRIDE+1
.3a382f	8f 0d 04 af	sta $af040d	                STA @l VDMA_SRC_STRIDE_L+1
.3a3833					set_dst
.3a3833	e2 20		sep #$20	            SEP #$20
.3a3835	af 69 f0 3a	lda $3af069	                LDA @l DMA_DEST.ADDR+2      ; Check the bank
.3a3839	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.3a383b	b0 20		bcs $3a385d	                BGE dst_vram                ; Yes: leave the DMA_BLOCK bit alone
.3a383d	8f 27 04 af	sta $af0427	dst_sram        STA @l SDMA_DST_ADDY_H      ; Set the SDMA destination address
.3a3841	af 68 f0 3a	lda $3af068	                LDA @l DMA_DEST.ADDR+1
.3a3845	8f 26 04 af	sta $af0426	                STA @l SDMA_DST_ADDY_M
.3a3849	af 67 f0 3a	lda $3af067	                LDA @l DMA_DEST.ADDR
.3a384d	8f 25 04 af	sta $af0425	                STA @l SDMA_DST_ADDY_L
.3a3851	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS
.3a3855	09 20		ora #$20	                ORA #DMA_DST_SRAM           ; Set the bit to indicate the destination is SRAM
.3a3857	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a385b	80 17		bra $3a3874	                BRA dst_mode
.3a385d	38		sec		dst_vram        SEC                         ; Convert to VRAM relative address
.3a385e	e9 b0		sbc #$b0	                SBC #`VRAM
.3a3860	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H      ; Set the VDMA destination address
.3a3864	af 68 f0 3a	lda $3af068	                LDA @l DMA_DEST.ADDR+1
.3a3868	8f 06 04 af	sta $af0406	                STA @l VDMA_DST_ADDY_M
.3a386c	af 67 f0 3a	lda $3af067	                LDA @l DMA_DEST.ADDR
.3a3870	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.3a3874	af 66 f0 3a	lda $3af066	dst_mode        LDA @l DMA_DEST.MODE
.3a3878	d0 3e		bne $3a38b8	                BNE dst_2d                  ; If 2D, set up the 2D destination parameters
.3a387a	af 58 f0 3a	lda $3af058	dst_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.3a387e	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Is the destination SRAM?
.3a3880	f0 1b		beq $3a389d	                BEQ dst_1d_vram
.3a3882	af 6a f0 3a	lda $3af06a	dst_1d_sram     LDA @l DMA_DEST.SIZE
.3a3886	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.3a388a	af 6b f0 3a	lda $3af06b	                LDA @l DMA_DEST.SIZE+1
.3a388e	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_L+1
.3a3892	af 6c f0 3a	lda $3af06c	                LDA @l DMA_DEST.SIZE+2
.3a3896	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.3a389a	82 8b 00	brl $3a3928	                BRL start_xfer
.3a389d	af 6a f0 3a	lda $3af06a	dst_1d_vram     LDA @l DMA_DEST.SIZE
.3a38a1	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.3a38a5	af 6b f0 3a	lda $3af06b	                LDA @l DMA_DEST.SIZE+1
.3a38a9	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_L+1
.3a38ad	af 6c f0 3a	lda $3af06c	                LDA @l DMA_DEST.SIZE+2
.3a38b1	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.3a38b5	82 70 00	brl $3a3928	                BRL start_xfer
.3a38b8	af 58 f0 3a	lda $3af058	dst_2d          LDA @l DMA_BLOCKS
.3a38bc	09 02		ora #$02	                ORA #DMA_DST_2D             ; Set the bit to make the source a 2D transfer
.3a38be	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a38c2	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Are we writing to the SRAM?
.3a38c4	f0 32		beq $3a38f8	                BEQ dst_2d_vram             ; No: set the 2D parameters for VRAM
.3a38c6	af 6d f0 3a	lda $3af06d	dst_2d_sram     LDA @l DMA_DEST.WIDTH       ; Set the SRAM width
.3a38ca	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.3a38ce	af 6e f0 3a	lda $3af06e	                LDA @L DMA_DEST.WIDTH+1
.3a38d2	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.3a38d6	af 6f f0 3a	lda $3af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the SRAM height
.3a38da	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.3a38de	af 70 f0 3a	lda $3af070	                LDA @L DMA_DEST.HEIGHT+1
.3a38e2	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.3a38e6	af 71 f0 3a	lda $3af071	                LDA @l DMA_DEST.STRIDE      ; Set the SRAM stride
.3a38ea	8f 2e 04 af	sta $af042e	                STA @l SDMA_DST_STRIDE_L
.3a38ee	af 72 f0 3a	lda $3af072	                LDA @L DMA_DEST.STRIDE+1
.3a38f2	8f 2f 04 af	sta $af042f	                STA @l SDMA_DST_STRIDE_L+1
.3a38f6	80 30		bra $3a3928	                BRA start_xfer
.3a38f8	af 6d f0 3a	lda $3af06d	dst_2d_vram     LDA @l DMA_DEST.WIDTH       ; Set the VRAM width
.3a38fc	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a3900	af 6e f0 3a	lda $3af06e	                LDA @L DMA_DEST.WIDTH+1
.3a3904	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.3a3908	af 6f f0 3a	lda $3af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the VRAM height
.3a390c	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a3910	af 70 f0 3a	lda $3af070	                LDA @L DMA_DEST.HEIGHT+1
.3a3914	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.3a3918	af 71 f0 3a	lda $3af071	                LDA @l DMA_DEST.STRIDE      ; Set the VRAM stride
.3a391c	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L
.3a3920	af 72 f0 3a	lda $3af072	                LDA @L DMA_DEST.STRIDE+1
.3a3924	8f 0f 04 af	sta $af040f	                STA @l VDMA_DST_STRIDE_L+1
.3a3928	af 58 f0 3a	lda $3af058	start_xfer      LDA @l DMA_BLOCKS
.3a392c	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.3a392e	f0 43		beq $3a3973	                BEQ start_vdma_only
.3a3930	c9 10		cmp #$10	                CMP #DMA_SRC_SRAM
.3a3932	f0 76		beq $3a39aa	                BEQ start_s2v
.3a3934	c9 20		cmp #$20	                CMP #DMA_DST_SRAM
.3a3936	d0 03		bne $3a393b	                BNE start_sdma_only
.3a3938	82 8a 00	brl $3a39c5	                BRL start_v2s
.3a393b					start_sdma_only
.3a393b	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.3a393f	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.3a3941	f0 23		beq $3a3966	                BEQ sdma_1d_only            ; Source and Destination 1D...
.3a3943	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.3a3945	f0 23		beq $3a396a	                BEQ sdma_2d_only            ; Source and Destination 2D
.3a3947	08		php		            PHP
.3a3948	c2 20		rep #$20	            REP #$20
.3a394a	48		pha		            PHA
.3a394b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a394e	5b		tcd		            TCD
.3a394f	68		pla		            PLA
.3a3950	28		plp		            PLP
.3a3951	e2 20		sep #$20	            SEP #$20
.3a3953	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a3955	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3959	c2 20		rep #$20	            REP #$20
.3a395b	29 ff 00	and #$00ff	            AND #$00FF
.3a395e	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3961	e2 20		sep #$20	            SEP #$20
.3a3963	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3966	a9 01		lda #$01	sdma_1d_only    LDA #SDMA_CTRL0_Enable      ; Set the bits for 1D, SRAM->SRAM
.3a3968	80 02		bra $3a396c	                BRA sdma_set_ctrl
.3a396a	a9 03		lda #$03	sdma_2d_only    LDA #SDMA_CTRL0_Enable | SDMA_CTRL0_1D_2D
.3a396c	8f 20 04 af	sta $af0420	sdma_set_ctrl   STA @l SDMA_CTRL_REG0
.3a3970	82 7d 00	brl $3a39f0	                BRL trig_sdma               ; And trigger the SDMA
.3a3973					start_vdma_only
.3a3973	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.3a3977	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.3a3979	f0 23		beq $3a399e	                BEQ vdma_1d_only            ; Source and Destination 1D...
.3a397b	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.3a397d	f0 23		beq $3a39a2	                BEQ vdma_2d_only            ; Source and Destination 2D...
.3a397f	08		php		            PHP
.3a3980	c2 20		rep #$20	            REP #$20
.3a3982	48		pha		            PHA
.3a3983	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3986	5b		tcd		            TCD
.3a3987	68		pla		            PLA
.3a3988	28		plp		            PLP
.3a3989	e2 20		sep #$20	            SEP #$20
.3a398b	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a398d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3991	c2 20		rep #$20	            REP #$20
.3a3993	29 ff 00	and #$00ff	            AND #$00FF
.3a3996	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3999	e2 20		sep #$20	            SEP #$20
.3a399b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a399e	a9 01		lda #$01	vdma_1d_only    LDA #VDMA_CTRL_Enable       ; Set the bits for 1D, VRAM->VRAM
.3a39a0	80 02		bra $3a39a4	                BRA vdma_set_ctrl
.3a39a2	a9 03		lda #$03	vdma_2d_only    LDA #VDMA_CTRL_Enable | VDMA_CTRL_1D_2D
.3a39a4	8f 00 04 af	sta $af0400	vdma_set_ctrl   STA @l VDMA_CONTROL_REG
.3a39a8	80 34		bra $3a39de	                BRA trig_vdma               ; And trigger the VDMA
.3a39aa					start_s2v
.3a39aa	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.3a39ae	29 01		and #$01	                AND #DMA_SRC_2D
.3a39b0	0a		asl a		                ASL A
.3a39b1	09 11		ora #$11	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src
.3a39b3	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a39b7	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.3a39bb	29 02		and #$02	                AND #DMA_DST_2D
.3a39bd	09 11		ora #$11	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Src
.3a39bf	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a39c3	80 19		bra $3a39de	                BRA trig_vdma               ; And trigger the VDMA
.3a39c5					start_v2s
.3a39c5	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.3a39c9	29 02		and #$02	                AND #DMA_DST_2D
.3a39cb	09 21		ora #$21	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Dst
.3a39cd	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a39d1	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.3a39d5	29 01		and #$01	                AND #DMA_SRC_2D
.3a39d7	0a		asl a		                ASL A
.3a39d8	09 21		ora #$21	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Dst
.3a39da	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a39de					trig_vdma
.3a39de	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.3a39e2	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF    ; Trigger the VDMA
.3a39e4	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a39e8	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check if we need SDMA
.3a39ec	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.3a39ee	f0 0f		beq $3a39ff	                BEQ wait_vdma               ; No: wait for VDMA to complete
.3a39f0					trig_sdma
.3a39f0	af 20 04 af	lda $af0420	                LDA @l SDMA_CTRL_REG0
.3a39f4	09 80		ora #$80	                ORA #SDMA_CTRL0_Start_TRF   ; Trigger the SDMA
.3a39f6	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a39fa	ea		nop		                NOP                         ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3a39fb	ea		nop		                NOP                         ; Before it actually gets to stop it will execute a couple more instructions
.3a39fc	ea		nop		                NOP                         ; From that point on, the CPU is halted (keep that in mind)
.3a39fd	ea		nop		                NOP                         ; No IRQ will be processed either during that time
.3a39fe	ea		nop		                NOP
.3a39ff	af 01 04 af	lda $af0401	wait_vdma       LDA @l VDMA_STATUS_REG      ; Check the VDMA status
.3a3a03	89 80		bit #$80	                BIT #VDMA_STAT_VDMA_IPS     ; If the transfer is still in process...
.3a3a05	d0 f8		bne $3a39ff	                BNE wait_vdma               ; Wait until it stops.
.3a3a07	a9 00		lda #$00	                LDA #$00                    ; Clear the TRF bits
.3a3a09	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a3a0d	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3a11	28		plp		                PLP
.3a3a12	2b		pld		                PLD
.3a3a13	60		rts		            RTS
.3a3a14					S_MEMCOPY
.3a3a14	0b		phd		                PHD
.3a3a15	08		php		                PHP
.3a3a16	e2 20		sep #$20	            SEP #$20
.3a3a18	c2 10		rep #$10	            REP #$10
.3a3a1a	a9 00		lda #$00	                LDA #0
.3a3a1c	a2 00 00	ldx #$0000	                LDX #0
.3a3a1f	8f 59 f0 3a	sta $3af059	clr_loop        STA @l DMA_SRC
.3a3a23	e8		inx		                INX
.3a3a24	e0 1a 00	cpx #$001a	                CPX #SIZE(DMA_BLOCK) * 2
.3a3a27	d0 f6		bne $3a3a1f	                BNE clr_loop
.3a3a29	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a3a2c	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.3a3a2e	f0 23		beq $3a3a53	                BEQ src_linear                      ; Yes: go to process a linear source
.3a3a30	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.3a3a32	f0 5e		beq $3a3a92	                BEQ src_rect                        ; Yes: go to process a rectangular source
.3a3a34					syntax_err
.3a3a34	08		php		            PHP
.3a3a35	c2 20		rep #$20	            REP #$20
.3a3a37	48		pha		            PHA
.3a3a38	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3a3b	5b		tcd		            TCD
.3a3a3c	68		pla		            PLA
.3a3a3d	28		plp		            PLP
.3a3a3e	e2 20		sep #$20	            SEP #$20
.3a3a40	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3a42	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3a46	c2 20		rep #$20	            REP #$20
.3a3a48	29 ff 00	and #$00ff	            AND #$00FF
.3a3a4b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3a4e	e2 20		sep #$20	            SEP #$20
.3a3a50	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3a53					src_linear
.3a3a53	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3a56	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3a59	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3a5c	c2 20		rep #$20	            REP #$20
.3a3a5e	a5 23		lda $0823	            LDA ARGUMENT1
.3a3a60	8f 5a f0 3a	sta $3af05a	            STA DMA_SRC.ADDR
.3a3a64	e2 20		sep #$20	            SEP #$20
.3a3a66	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3a68	8f 5c f0 3a	sta $3af05c	            STA DMA_SRC.ADDR+2
.3a3a6c	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a3a6e	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3a71	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3a74	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3a77	c2 20		rep #$20	            REP #$20
.3a3a79	a5 23		lda $0823	            LDA ARGUMENT1
.3a3a7b	8f 5d f0 3a	sta $3af05d	            STA DMA_SRC.SIZE
.3a3a7f	e2 20		sep #$20	            SEP #$20
.3a3a81	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3a83	8f 5f f0 3a	sta $3af05f	            STA DMA_SRC.SIZE+2
.3a3a87	e2 20		sep #$20	            SEP #$20
.3a3a89	a9 00		lda #$00	            LDA #<DMA_LINEAR
.3a3a8b	8f 59 f0 3a	sta $3af059	            STA DMA_SRC.MODE
.3a3a8f	82 74 00	brl $3a3b06	                BRL process_to
.3a3a92					src_rect
.3a3a92	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3a95	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3a98	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3a9b	c2 20		rep #$20	            REP #$20
.3a3a9d	a5 23		lda $0823	            LDA ARGUMENT1
.3a3a9f	8f 5a f0 3a	sta $3af05a	            STA DMA_SRC.ADDR
.3a3aa3	e2 20		sep #$20	            SEP #$20
.3a3aa5	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3aa7	8f 5c f0 3a	sta $3af05c	            STA DMA_SRC.ADDR+2
.3a3aab	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a3aad	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3ab0	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3ab3	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3ab6	c2 20		rep #$20	            REP #$20
.3a3ab8	a5 23		lda $0823	            LDA ARGUMENT1
.3a3aba	8f 60 f0 3a	sta $3af060	            STA DMA_SRC.WIDTH
.3a3abe	8d 00 01	sta $0100	            STA M0_OPERAND_A
.3a3ac1	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3ac4	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3ac7	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3aca	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3acd	c2 20		rep #$20	            REP #$20
.3a3acf	a5 23		lda $0823	            LDA ARGUMENT1
.3a3ad1	8f 62 f0 3a	sta $3af062	            STA DMA_SRC.HEIGHT
.3a3ad5	8d 02 01	sta $0102	            STA M0_OPERAND_B
.3a3ad8	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3adb	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3ade	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3ae1	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3ae4	c2 20		rep #$20	            REP #$20
.3a3ae6	a5 23		lda $0823	            LDA ARGUMENT1
.3a3ae8	8f 64 f0 3a	sta $3af064	            STA DMA_SRC.STRIDE
.3a3aec	c2 20		rep #$20	            REP #$20
.3a3aee	ad 04 01	lda $0104	            LDA M0_RESULT
.3a3af1	8f 5d f0 3a	sta $3af05d	            STA DMA_SRC.SIZE
.3a3af5	e2 20		sep #$20	            SEP #$20
.3a3af7	ad 06 01	lda $0106	            LDA M0_RESULT+2
.3a3afa	8f 5f f0 3a	sta $3af05f	            STA DMA_SRC.SIZE+2
.3a3afe	e2 20		sep #$20	            SEP #$20
.3a3b00	a9 01		lda #$01	            LDA #<DMA_RECT
.3a3b02	8f 59 f0 3a	sta $3af059	            STA DMA_SRC.MODE
.3a3b06					process_to
.3a3b06	e2 20		sep #$20	            SEP #$20
.3a3b08	a9 9c		lda #$9c	                LDA #TOK_TO
.3a3b0a	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3b0d	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a3b10	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.3a3b12	f0 23		beq $3a3b37	                BEQ dest_linear                     ; Yes: go to process a linear destination
.3a3b14	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.3a3b16	f0 5e		beq $3a3b76	                BEQ dest_rect                       ; Yes: go to process a rectangular source
.3a3b18					syntax_err2
.3a3b18	08		php		            PHP
.3a3b19	c2 20		rep #$20	            REP #$20
.3a3b1b	48		pha		            PHA
.3a3b1c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3b1f	5b		tcd		            TCD
.3a3b20	68		pla		            PLA
.3a3b21	28		plp		            PLP
.3a3b22	e2 20		sep #$20	            SEP #$20
.3a3b24	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3b26	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3b2a	c2 20		rep #$20	            REP #$20
.3a3b2c	29 ff 00	and #$00ff	            AND #$00FF
.3a3b2f	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3b32	e2 20		sep #$20	            SEP #$20
.3a3b34	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3b37					dest_linear
.3a3b37	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3b3a	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3b3d	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3b40	c2 20		rep #$20	            REP #$20
.3a3b42	a5 23		lda $0823	            LDA ARGUMENT1
.3a3b44	8f 67 f0 3a	sta $3af067	            STA DMA_DEST.ADDR
.3a3b48	e2 20		sep #$20	            SEP #$20
.3a3b4a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3b4c	8f 69 f0 3a	sta $3af069	            STA DMA_DEST.ADDR+2
.3a3b50	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a3b52	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3b55	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3b58	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3b5b	c2 20		rep #$20	            REP #$20
.3a3b5d	a5 23		lda $0823	            LDA ARGUMENT1
.3a3b5f	8f 6a f0 3a	sta $3af06a	            STA DMA_DEST.SIZE
.3a3b63	e2 20		sep #$20	            SEP #$20
.3a3b65	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3b67	8f 6c f0 3a	sta $3af06c	            STA DMA_DEST.SIZE+2
.3a3b6b	e2 20		sep #$20	            SEP #$20
.3a3b6d	a9 00		lda #$00	            LDA #<DMA_LINEAR
.3a3b6f	8f 66 f0 3a	sta $3af066	            STA DMA_DEST.MODE
.3a3b73	82 74 00	brl $3a3bea	                BRL verify
.3a3b76					dest_rect
.3a3b76	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3b79	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3b7c	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3b7f	c2 20		rep #$20	            REP #$20
.3a3b81	a5 23		lda $0823	            LDA ARGUMENT1
.3a3b83	8f 67 f0 3a	sta $3af067	            STA DMA_DEST.ADDR
.3a3b87	e2 20		sep #$20	            SEP #$20
.3a3b89	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3b8b	8f 69 f0 3a	sta $3af069	            STA DMA_DEST.ADDR+2
.3a3b8f	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a3b91	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3b94	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3b97	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3b9a	c2 20		rep #$20	            REP #$20
.3a3b9c	a5 23		lda $0823	            LDA ARGUMENT1
.3a3b9e	8f 6d f0 3a	sta $3af06d	            STA DMA_DEST.WIDTH
.3a3ba2	8d 00 01	sta $0100	            STA M0_OPERAND_A
.3a3ba5	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3ba8	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3bab	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3bae	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3bb1	c2 20		rep #$20	            REP #$20
.3a3bb3	a5 23		lda $0823	            LDA ARGUMENT1
.3a3bb5	8f 6f f0 3a	sta $3af06f	            STA DMA_DEST.HEIGHT
.3a3bb9	8d 02 01	sta $0102	            STA M0_OPERAND_B
.3a3bbc	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3bbf	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3bc2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3bc5	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3bc8	c2 20		rep #$20	            REP #$20
.3a3bca	a5 23		lda $0823	            LDA ARGUMENT1
.3a3bcc	8f 71 f0 3a	sta $3af071	            STA DMA_DEST.STRIDE
.3a3bd0	c2 20		rep #$20	            REP #$20
.3a3bd2	ad 04 01	lda $0104	            LDA M0_RESULT
.3a3bd5	8f 6a f0 3a	sta $3af06a	            STA DMA_DEST.SIZE
.3a3bd9	e2 20		sep #$20	            SEP #$20
.3a3bdb	ad 06 01	lda $0106	            LDA M0_RESULT+2
.3a3bde	8f 6c f0 3a	sta $3af06c	            STA DMA_DEST.SIZE+2
.3a3be2	e2 20		sep #$20	            SEP #$20
.3a3be4	a9 01		lda #$01	            LDA #<DMA_RECT
.3a3be6	8f 66 f0 3a	sta $3af066	            STA DMA_DEST.MODE
.3a3bea					verify
.3a3bea	c2 20		rep #$20	            REP #$20
.3a3bec	af 5d f0 3a	lda $3af05d	                LDA @l DMA_SRC.SIZE
.3a3bf0	cf 6a f0 3a	cmp $3af06a	                CMP @l DMA_DEST.SIZE
.3a3bf4	d0 14		bne $3a3c0a	                BNE size_err
.3a3bf6	e2 20		sep #$20	            SEP #$20
.3a3bf8	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a3bfc	cf 6c f0 3a	cmp $3af06c	                CMP @l DMA_DEST.SIZE+2
.3a3c00	d0 08		bne $3a3c0a	                BNE size_err
.3a3c02	c2 20		rep #$20	            REP #$20
.3a3c04	20 32 37	jsr $3a3732	            JSR DO_DMA
.3a3c07	28		plp		                PLP
.3a3c08	2b		pld		                PLD
.3a3c09	60		rts		            RTS
.3a3c0a					size_err
.3a3c0a	08		php		            PHP
.3a3c0b	c2 20		rep #$20	            REP #$20
.3a3c0d	48		pha		            PHA
.3a3c0e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3c11	5b		tcd		            TCD
.3a3c12	68		pla		            PLA
.3a3c13	28		plp		            PLP
.3a3c14	e2 20		sep #$20	            SEP #$20
.3a3c16	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a3c18	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3c1c	c2 20		rep #$20	            REP #$20
.3a3c1e	29 ff 00	and #$00ff	            AND #$00FF
.3a3c21	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3c24	e2 20		sep #$20	            SEP #$20
.3a3c26	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3c29					S_LOCATE
.3a3c29	08		php		                PHP
.3a3c2a	c2 30		rep #$30	            REP #$30
.3a3c2c	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3c2f	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a3c32	a5 23		lda $0823	                LDA ARGUMENT1
.3a3c34	48		pha		                PHA                         ; Save it for later
.3a3c35	a9 2c 00	lda #$002c	                LDA #','                    ; Check for the comma separator
.3a3c38	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3c3b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3c3e	20 63 07	jsr $3a0763	            JSR ASS_ARG1_BYTE
.3a3c41	a4 23		ldy $0823	                LDY ARGUMENT1               ; Set Y to the row
.3a3c43	fa		plx		                PLX                         ; Set X to the column
.3a3c44	20 20 00	jsr $3a0020	            JSR CURSORXY
.3a3c47	28		plp		                PLP
.3a3c48	60		rts		            RTS

;******  Return to file: src\statements.s

.3a3c49					S_INPUT
.3a3c49	08		php		                PHP
.3a3c4a					varloop
.3a3c4a	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3c4d	e2 20		sep #$20	            SEP #$20
.3a3c4f	a7 00		lda [$0800]	                LDA [BIP]
.3a3c51	d0 03		bne $3a3c56	                BNE check_colon
.3a3c53	4c f1 3c	jmp $3a3cf1	                JMP done            ; If EOL, we're done
.3a3c56	c9 3a		cmp #$3a	check_colon     CMP #':'
.3a3c58	d0 03		bne $3a3c5d	                BNE check_string
.3a3c5a	4c f1 3c	jmp $3a3cf1	                JMP done            ; If colon, we're done
.3a3c5d	c9 22		cmp #$22	check_string    CMP #CHAR_DQUOTE    ; Is it the start of a string?
.3a3c5f	d0 0b		bne $3a3c6c	                BNE check_var       ; No: then it should be a variable name
.3a3c61	20 18 1c	jsr $3a1c18	            JSR EVALSTRING
.3a3c64	20 ff 45	jsr $3a45ff	            JSR PR_STRING
.3a3c67	a9 3b		lda #$3b	                LDA #';'            ; Look for a semicolon
.3a3c69	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3c6c					check_var
.3a3c6c	20 e2 04	jsr $3a04e2	            JSR ISALPHA
.3a3c6f	90 44		bcc $3a3cb5	                BCC syntax_err      ; No: it's a syntax error
.3a3c71	20 1f 54	jsr $3a541f	            JSR VAR_FINDNAME
.3a3c74	90 3f		bcc $3a3cb5	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3c76	a9 3f		lda #$3f	                LDA #"?"            ; Print a "? " to follow
.3a3c78	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3c7b	a9 20		lda #$20	                LDA #CHAR_SP
.3a3c7d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3c80	20 10 00	jsr $3a0010	            JSR INPUTLINE
.3a3c83	e2 20		sep #$20	            SEP #$20
.3a3c85	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Check the type of the variable
.3a3c87	c9 02		cmp #$02	                CMP #TYPE_STRING    ; If it's a string...
.3a3c89	f0 49		beq $3a3cd4	                BEQ in_string       ; ... go to copy the string data
.3a3c8b	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; If it's an integer...
.3a3c8d	d0 03		bne $3a3c92	                BNE chk_float
.3a3c8f	82 84 00	brl $3a3d16	                BRL in_integer      ; ... go to parse the integer
.3a3c92	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT     ; If it's a float...
.3a3c94	f0 5d		beq $3a3cf3	                BEQ in_float        ; ... go to parse the float
.3a3c96	08		php		            PHP
.3a3c97	c2 20		rep #$20	            REP #$20
.3a3c99	48		pha		            PHA
.3a3c9a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3c9d	5b		tcd		            TCD
.3a3c9e	68		pla		            PLA
.3a3c9f	28		plp		            PLP
.3a3ca0	e2 20		sep #$20	            SEP #$20
.3a3ca2	a9 04		lda #$04	            LDA #ERR_TYPE
.3a3ca4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3ca8	c2 20		rep #$20	            REP #$20
.3a3caa	29 ff 00	and #$00ff	            AND #$00FF
.3a3cad	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3cb0	e2 20		sep #$20	            SEP #$20
.3a3cb2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3cb5					syntax_err
.3a3cb5	08		php		            PHP
.3a3cb6	c2 20		rep #$20	            REP #$20
.3a3cb8	48		pha		            PHA
.3a3cb9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3cbc	5b		tcd		            TCD
.3a3cbd	68		pla		            PLA
.3a3cbe	28		plp		            PLP
.3a3cbf	e2 20		sep #$20	            SEP #$20
.3a3cc1	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3cc3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3cc7	c2 20		rep #$20	            REP #$20
.3a3cc9	29 ff 00	and #$00ff	            AND #$00FF
.3a3ccc	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3ccf	e2 20		sep #$20	            SEP #$20
.3a3cd1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3cd4					in_string
.3a3cd4	c2 20		rep #$20	            REP #$20
.3a3cd6	a9 00 4c	lda #$4c00	                LDA #<>IOBUF
.3a3cd9	85 23		sta $0823	                STA ARGUMENT1
.3a3cdb	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3cde	85 25		sta $0825	                STA ARGUMENT1+2
.3a3ce0	e2 20		sep #$20	            SEP #$20
.3a3ce2	a9 02		lda #$02	                LDA #TYPE_STRING
.3a3ce4	85 27		sta $0827	                STA ARGTYPE1
.3a3ce6					save_input
.3a3ce6	c2 20		rep #$20	            REP #$20
.3a3ce8	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a3ceb	a9 0d 00	lda #$000d	                LDA #CHAR_CR        ; Print a newline
.3a3cee	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3cf1	28		plp		done            PLP
.3a3cf2	60		rts		            RTS
.3a3cf3					in_float
.3a3cf3	c2 20		rep #$20	            REP #$20
.3a3cf5	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.3a3cf7	85 40		sta $0840	                STA SAVEBIP
.3a3cf9	a5 02		lda $0802	                LDA BIP+2
.3a3cfb	85 42		sta $0842	                STA SAVEBIP+2
.3a3cfd	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.3a3d00	85 00		sta $0800	                STA BIP
.3a3d02	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3d05	85 02		sta $0802	                STA BIP+2
.3a3d07	20 41 5a	jsr $3a5a41	            JSR PARSENUM
.3a3d0a	c2 20		rep #$20	            REP #$20
.3a3d0c	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.3a3d0e	85 00		sta $0800	                STA BIP
.3a3d10	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3d12	85 02		sta $0802	                STA BIP+2
.3a3d14	80 d0		bra $3a3ce6	                BRA save_input
.3a3d16					in_integer
.3a3d16	c2 20		rep #$20	            REP #$20
.3a3d18	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.3a3d1a	85 40		sta $0840	                STA SAVEBIP
.3a3d1c	a5 02		lda $0802	                LDA BIP+2
.3a3d1e	85 42		sta $0842	                STA SAVEBIP+2
.3a3d20	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.3a3d23	85 00		sta $0800	                STA BIP
.3a3d25	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3d28	85 02		sta $0802	                STA BIP+2
.3a3d2a	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a3d2d	c2 20		rep #$20	            REP #$20
.3a3d2f	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.3a3d31	85 00		sta $0800	                STA BIP
.3a3d33	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3d35	85 02		sta $0802	                STA BIP+2
.3a3d37	80 ad		bra $3a3ce6	                BRA save_input
.3a3d39					S_GET
.3a3d39	08		php		                PHP
.3a3d3a					varloop
.3a3d3a	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3d3d	e2 20		sep #$20	            SEP #$20
.3a3d3f	a7 00		lda [$0800]	                LDA [BIP]
.3a3d41	f0 47		beq $3a3d8a	                BEQ done            ; If EOL, we're done
.3a3d43	c9 3a		cmp #$3a	                CMP #':'
.3a3d45	f0 43		beq $3a3d8a	                BEQ done            ; If colon, we're done
.3a3d47	20 e2 04	jsr $3a04e2	            JSR ISALPHA
.3a3d4a	90 40		bcc $3a3d8c	                BCC syntax_err      ; No: it's a syntax error
.3a3d4c	20 1f 54	jsr $3a541f	            JSR VAR_FINDNAME
.3a3d4f	90 3b		bcc $3a3d8c	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3d51	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a3d54	20 14 00	jsr $3a0014	            JSR GETKEY
.3a3d57	e2 20		sep #$20	            SEP #$20
.3a3d59	a0 00 00	ldy #$0000	                LDY #0
.3a3d5c	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a3d5e	a9 00		lda #$00	                LDA #0
.3a3d60	c8		iny		                INY
.3a3d61	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a3d63	c2 20		rep #$20	            REP #$20
.3a3d65	a5 16		lda $0816	                LDA STRPTR
.3a3d67	85 23		sta $0823	                STA ARGUMENT1
.3a3d69	a5 18		lda $0818	                LDA STRPTR+2
.3a3d6b	85 25		sta $0825	                STA ARGUMENT1+2
.3a3d6d	e2 20		sep #$20	            SEP #$20
.3a3d6f	a9 02		lda #$02	                LDA #TYPE_STRING
.3a3d71	85 27		sta $0827	                STA ARGTYPE1
.3a3d73	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a3d76	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3d79	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.3a3d7b	f0 0d		beq $3a3d8a	                BEQ done            ; EOL? We're done
.3a3d7d	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.3a3d7f	f0 09		beq $3a3d8a	                BEQ done
.3a3d81	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3d83	d0 07		bne $3a3d8c	                BNE syntax_err      ; Nope: syntax error
.3a3d85	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3d88	80 b0		bra $3a3d3a	                BRA varloop
.3a3d8a	28		plp		done            PLP
.3a3d8b	60		rts		            RTS
.3a3d8c					syntax_err
.3a3d8c	08		php		            PHP
.3a3d8d	c2 20		rep #$20	            REP #$20
.3a3d8f	48		pha		            PHA
.3a3d90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3d93	5b		tcd		            TCD
.3a3d94	68		pla		            PLA
.3a3d95	28		plp		            PLP
.3a3d96	e2 20		sep #$20	            SEP #$20
.3a3d98	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3d9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3d9e	c2 20		rep #$20	            REP #$20
.3a3da0	29 ff 00	and #$00ff	            AND #$00FF
.3a3da3	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3da6	e2 20		sep #$20	            SEP #$20
.3a3da8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3dab					S_CALL
.3a3dab	08		php		                PHP
.3a3dac	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3daf	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3db2	e2 20		sep #$20	            SEP #$20
.3a3db4	a9 5c		lda #$5c	                LDA #$5C            ; Set the opcode for JML
.3a3db6	85 a2		sta $08a2	                STA MJUMPINST
.3a3db8	c2 20		rep #$20	            REP #$20
.3a3dba	a5 23		lda $0823	                LDA ARGUMENT1
.3a3dbc	85 a3		sta $08a3	                STA MJUMPADDR
.3a3dbe	e2 20		sep #$20	            SEP #$20
.3a3dc0	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3dc2	85 a5		sta $08a5	                STA MJUMPADDR+2
.3a3dc4	e2 20		sep #$20	            SEP #$20
.3a3dc6	a9 2c		lda #$2c	                LDA #','
.3a3dc8	85 37		sta $0837	                STA TARGETTOK
.3a3dca	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a3dcd	90 41		bcc $3a3e10	                BCC launch          ; Not present... go ahead and launch
.3a3dcf	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3dd2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3dd5	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3dd8	c2 20		rep #$20	            REP #$20
.3a3dda	a5 23		lda $0823	                LDA ARGUMENT1
.3a3ddc	85 55		sta $0855	                STA MARG1           ; Save it to MARG1
.3a3dde	e2 20		sep #$20	            SEP #$20
.3a3de0	a9 2c		lda #$2c	                LDA #','
.3a3de2	85 37		sta $0837	                STA TARGETTOK
.3a3de4	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a3de7	90 27		bcc $3a3e10	                BCC launch          ; Not present... go ahead and launch
.3a3de9	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3dec	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3def	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3df2	c2 20		rep #$20	            REP #$20
.3a3df4	a5 23		lda $0823	                LDA ARGUMENT1
.3a3df6	85 59		sta $0859	                STA MARG2           ; Save it to MARG2
.3a3df8	e2 20		sep #$20	            SEP #$20
.3a3dfa	a9 2c		lda #$2c	                LDA #','
.3a3dfc	85 37		sta $0837	                STA TARGETTOK
.3a3dfe	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a3e01	90 0d		bcc $3a3e10	                BCC launch          ; Not present... go ahead and launch
.3a3e03	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3e06	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3e09	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a3e0c	c2 20		rep #$20	            REP #$20
.3a3e0e	a4 23		ldy $0823	                LDY ARGUMENT1
.3a3e10	a6 59		ldx $0859	launch          LDX MARG2
.3a3e12	a5 55		lda $0855	                LDA MARG1
.3a3e14	0b		phd		                PHD
.3a3e15	8b		phb		                PHB
.3a3e16	08		php		                PHP
.3a3e17	22 a2 08 00	jsl $0008a2	                JSL MJUMPINST       ; Call the subroutine indicated
.3a3e1b	28		plp		                PLP
.3a3e1c	ab		plb		                PLB
.3a3e1d	2b		pld		                PLD
.3a3e1e	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a3e21	28		plp		                PLP
.3a3e22	60		rts		            RTS
.3a3e23					type_err
.3a3e23	08		php		            PHP
.3a3e24	c2 20		rep #$20	            REP #$20
.3a3e26	48		pha		            PHA
.3a3e27	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3e2a	5b		tcd		            TCD
.3a3e2b	68		pla		            PLA
.3a3e2c	28		plp		            PLP
.3a3e2d	e2 20		sep #$20	            SEP #$20
.3a3e2f	a9 04		lda #$04	            LDA #ERR_TYPE
.3a3e31	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3e35	c2 20		rep #$20	            REP #$20
.3a3e37	29 ff 00	and #$00ff	            AND #$00FF
.3a3e3a	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3e3d	e2 20		sep #$20	            SEP #$20
.3a3e3f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3e42					S_DIM
.3a3e42	08		php		                PHP
.3a3e43	e2 20		sep #$20	            SEP #$20
.3a3e45	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3e48	20 1f 54	jsr $3a541f	            JSR VAR_FINDNAME
.3a3e4b	90 64		bcc $3a3eb1	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3e4d	a9 8f		lda #$8f	                LDA #TOK_LPAREN     ; Verify we have a left parenthesis
.3a3e4f	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a3e52	a9 01		lda #$01	                LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.3a3e54	20 28 1a	jsr $3a1a28	            JSR PHOPERATOR
.3a3e57	a2 01 00	ldx #$0001	                LDX #1
.3a3e5a	a9 00		lda #$00	                LDA #0
.3a3e5c	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Set the dimension count to 0
.3a3e60					dim_loop
.3a3e60	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a3e63	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a3e66	c2 20		rep #$20	            REP #$20
.3a3e68	a5 23		lda $0823	                LDA ARGUMENT1
.3a3e6a	9f 00 4d 00	sta $004d00,x	                STA @lARRIDXBUF,X   ; And store it in the buffer
.3a3e6e	e2 20		sep #$20	            SEP #$20
.3a3e70	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF     ; Add to the dimension count
.3a3e74	1a		inc a		                INC A
.3a3e75	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF
.3a3e79	30 55		bmi $3a3ed0	                BMI overflow        ; If > 127 throw an error
.3a3e7b	e8		inx		                INX
.3a3e7c	e8		inx		                INX
.3a3e7d	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3e80	a7 00		lda [$0800]	                LDA [BIP]           ; Check the character
.3a3e82	c9 2c		cmp #$2c	                CMP #','            ; Is it a comma?
.3a3e84	f0 25		beq $3a3eab	                BEQ skip_comma      ; Yes: get the next dimension
.3a3e86	c9 90		cmp #$90	                CMP #TOK_RPAREN     ; No: is it a ")"?
.3a3e88	d0 27		bne $3a3eb1	                BNE syntax_err      ; No: throw a syntax error
.3a3e8a	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3e8d	20 9d 66	jsr $3a669d	            JSR ARR_ALLOC
.3a3e90	c2 20		rep #$20	            REP #$20
.3a3e92	a5 c0		lda $08c0	                LDA CURRBLOCK       ; Set up the pointer to the array
.3a3e94	85 23		sta $0823	                STA ARGUMENT1
.3a3e96	e2 20		sep #$20	            SEP #$20
.3a3e98	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a3e9a	85 25		sta $0825	                STA ARGUMENT1+2
.3a3e9c	64 26		stz $0826	                STZ ARGUMENT1+3
.3a3e9e	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Get the type of the values
.3a3ea0	09 80		ora #$80	                ORA #$80            ; Make sure we change the type to array
.3a3ea2	85 ea		sta $08ea	                STA TOFINDTYPE      ; And save it back for searching
.3a3ea4	85 27		sta $0827	                STA ARGTYPE1        ; And for the value to set
.3a3ea6	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a3ea9	28		plp		                PLP
.3a3eaa	60		rts		            RTS
.3a3eab					skip_comma
.3a3eab	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3eae	4c 60 3e	jmp $3a3e60	                JMP dim_loop
.3a3eb1					syntax_err
.3a3eb1	08		php		            PHP
.3a3eb2	c2 20		rep #$20	            REP #$20
.3a3eb4	48		pha		            PHA
.3a3eb5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3eb8	5b		tcd		            TCD
.3a3eb9	68		pla		            PLA
.3a3eba	28		plp		            PLP
.3a3ebb	e2 20		sep #$20	            SEP #$20
.3a3ebd	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3ebf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3ec3	c2 20		rep #$20	            REP #$20
.3a3ec5	29 ff 00	and #$00ff	            AND #$00FF
.3a3ec8	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3ecb	e2 20		sep #$20	            SEP #$20
.3a3ecd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3ed0					overflow
.3a3ed0	08		php		            PHP
.3a3ed1	c2 20		rep #$20	            REP #$20
.3a3ed3	48		pha		            PHA
.3a3ed4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3ed7	5b		tcd		            TCD
.3a3ed8	68		pla		            PLA
.3a3ed9	28		plp		            PLP
.3a3eda	e2 20		sep #$20	            SEP #$20
.3a3edc	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a3ede	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3ee2	c2 20		rep #$20	            REP #$20
.3a3ee4	29 ff 00	and #$00ff	            AND #$00FF
.3a3ee7	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3eea	e2 20		sep #$20	            SEP #$20
.3a3eec	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3eef					S_READ
.3a3eef	08		php		                PHP
.3a3ef0					varloop
.3a3ef0	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3ef3	e2 20		sep #$20	            SEP #$20
.3a3ef5	a7 00		lda [$0800]	                LDA [BIP]
.3a3ef7	f0 28		beq $3a3f21	                BEQ done            ; If EOL, we're done
.3a3ef9	c9 3a		cmp #$3a	                CMP #':'
.3a3efb	f0 24		beq $3a3f21	                BEQ done            ; If colon, we're done
.3a3efd	20 e2 04	jsr $3a04e2	            JSR ISALPHA
.3a3f00	90 21		bcc $3a3f23	                BCC syntax_err      ; No: it's a syntax error
.3a3f02	20 1f 54	jsr $3a541f	            JSR VAR_FINDNAME
.3a3f05	90 1c		bcc $3a3f23	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3f07	20 42 3f	jsr $3a3f42	            JSR NEXTDATA
.3a3f0a	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a3f0d	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3f10	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.3a3f12	f0 0d		beq $3a3f21	                BEQ done            ; EOL? We're done
.3a3f14	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.3a3f16	f0 09		beq $3a3f21	                BEQ done
.3a3f18	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3f1a	d0 07		bne $3a3f23	                BNE syntax_err      ; Nope: syntax error
.3a3f1c	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3f1f	80 cf		bra $3a3ef0	                BRA varloop
.3a3f21	28		plp		done            PLP
.3a3f22	60		rts		            RTS
.3a3f23					syntax_err
.3a3f23	08		php		            PHP
.3a3f24	c2 20		rep #$20	            REP #$20
.3a3f26	48		pha		            PHA
.3a3f27	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3f2a	5b		tcd		            TCD
.3a3f2b	68		pla		            PLA
.3a3f2c	28		plp		            PLP
.3a3f2d	e2 20		sep #$20	            SEP #$20
.3a3f2f	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3f31	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3f35	c2 20		rep #$20	            REP #$20
.3a3f37	29 ff 00	and #$00ff	            AND #$00FF
.3a3f3a	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3f3d	e2 20		sep #$20	            SEP #$20
.3a3f3f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3f42					NEXTDATA
.3a3f42	08		php		                PHP
.3a3f43	a5 02		lda $0802	                LDA BIP+2           ; Save BIP
.3a3f45	85 42		sta $0842	                STA SAVEBIP+2
.3a3f47	a5 00		lda $0800	                LDA BIP
.3a3f49	85 40		sta $0840	                STA SAVEBIP
.3a3f4b	a5 1c		lda $081c	                LDA CURLINE+2       ; Save CURLINE
.3a3f4d	85 46		sta $0846	                STA SAVELINE+2
.3a3f4f	a5 1a		lda $081a	                LDA CURLINE
.3a3f51	85 44		sta $0844	                STA SAVELINE
.3a3f53	c2 20		rep #$20	            REP #$20
.3a3f55	a5 3a		lda $083a	                LDA DATABIP+2
.3a3f57	d0 04		bne $3a3f5d	                BNE data_set
.3a3f59	a5 38		lda $0838	                LDA DATABIP
.3a3f5b	f0 4e		beq $3a3fab	                BEQ scan_start      ; No: scan for a DATA statement
.3a3f5d	a5 38		lda $0838	data_set        LDA DATABIP         ; Move BIP to the DATA statement
.3a3f5f	85 00		sta $0800	                STA BIP
.3a3f61	a5 3a		lda $083a	                LDA DATABIP+2
.3a3f63	85 02		sta $0802	                STA BIP+2
.3a3f65	a5 3c		lda $083c	                LDA DATALINE        ; Set CURLINE from DATALINE
.3a3f67	85 1a		sta $081a	                STA CURLINE
.3a3f69	a5 3e		lda $083e	                LDA DATALINE+2
.3a3f6b	85 1c		sta $081c	                STA CURLINE+2
.3a3f6d	e2 20		sep #$20	            SEP #$20
.3a3f6f	a7 00		lda [$0800]	                LDA [BIP]           ; Check character at BIP
.3a3f71	f0 53		beq $3a3fc6	                BEQ scan_DATA       ; EOL? scan for a DATA statement
.3a3f73	c9 3a		cmp #$3a	                CMP #':'            ; Colon?
.3a3f75	f0 4f		beq $3a3fc6	                BEQ scan_DATA       ; ... scan for a DATA statement
.3a3f77	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3f79	d0 03		bne $3a3f7e	                BNE skip_parse      ; No: skip leading WS and try to parse
.3a3f7b	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a3f7e					skip_parse
.3a3f7e	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a3f81	a7 00		lda [$0800]	                LDA [BIP]
.3a3f83	c9 22		cmp #$22	                CMP #CHAR_DQUOTE    ; Is it a quote?
.3a3f85	f0 4e		beq $3a3fd5	                BEQ read_string     ; Yes: process the string
.3a3f87	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a3f8a	b0 4e		bcs $3a3fda	                BCS read_number     ; Yes: process the number
.3a3f8c					syntax_err
.3a3f8c	08		php		            PHP
.3a3f8d	c2 20		rep #$20	            REP #$20
.3a3f8f	48		pha		            PHA
.3a3f90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3f93	5b		tcd		            TCD
.3a3f94	68		pla		            PLA
.3a3f95	28		plp		            PLP
.3a3f96	e2 20		sep #$20	            SEP #$20
.3a3f98	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3f9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3f9e	c2 20		rep #$20	            REP #$20
.3a3fa0	29 ff 00	and #$00ff	            AND #$00FF
.3a3fa3	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a3fa6	e2 20		sep #$20	            SEP #$20
.3a3fa8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3fab					scan_start
.3a3fab	c2 20		rep #$20	            REP #$20
.3a3fad	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT    ; Point CURLINE to the first line
.3a3fb0	85 1a		sta $081a	                STA CURLINE
.3a3fb2	a9 36 00	lda #$0036	                LDA #`BASIC_BOT
.3a3fb5	85 1c		sta $081c	                STA CURLINE+2
.3a3fb7	18		clc		                CLC
.3a3fb8	a5 1a		lda $081a	                LDA CURLINE         ; Point BIP to the first possible token
.3a3fba	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.3a3fbd	85 00		sta $0800	                STA BIP
.3a3fbf	a5 1c		lda $081c	                LDA CURLINE+2
.3a3fc1	69 00 00	adc #$0000	                ADC #0
.3a3fc4	85 02		sta $0802	                STA BIP+2
.3a3fc6					scan_data
.3a3fc6	e2 20		sep #$20	            SEP #$20
.3a3fc8	a9 80		lda #$80	                LDA #$80            ; We don't want to process nesting
.3a3fca	85 35		sta $0835	                STA SKIPNEST
.3a3fcc	a9 ab		lda #$ab	                LDA #TOK_DATA       ; We're looking for a DATA token
.3a3fce	85 37		sta $0837	                STA TARGETTOK
.3a3fd0	20 74 21	jsr $3a2174	            JSR SKIPTOTOK
.3a3fd3	80 a9		bra $3a3f7e	                BRA skip_parse
.3a3fd5					read_string
.3a3fd5	20 18 1c	jsr $3a1c18	            JSR EVALSTRING
.3a3fd8	80 03		bra $3a3fdd	                BRA done
.3a3fda					read_number
.3a3fda	20 0a 1b	jsr $3a1b0a	            JSR EVALNUMBER
.3a3fdd					done
.3a3fdd	c2 20		rep #$20	            REP #$20
.3a3fdf	a5 00		lda $0800	                LDA BIP             ; Save BIP to DATABIP
.3a3fe1	85 38		sta $0838	                STA DATABIP
.3a3fe3	a5 02		lda $0802	                LDA BIP+2
.3a3fe5	85 3a		sta $083a	                STA DATABIP+2
.3a3fe7	a5 1a		lda $081a	                LDA CURLINE         ; Save CURLINE to DATALINE
.3a3fe9	85 3c		sta $083c	                STA DATALINE
.3a3feb	a5 1c		lda $081c	                LDA CURLINE+2
.3a3fed	85 3e		sta $083e	                STA DATALINE+2
.3a3fef	a5 44		lda $0844	                LDA SAVELINE        ; Restore CURLINE
.3a3ff1	85 1a		sta $081a	                STA CURLINE
.3a3ff3	a5 46		lda $0846	                LDA SAVELINE+2
.3a3ff5	85 1c		sta $081c	                STA CURLINE+2
.3a3ff7	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.3a3ff9	85 00		sta $0800	                STA BIP
.3a3ffb	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3ffd	85 02		sta $0802	                STA BIP+2
.3a3fff	28		plp		                PLP
.3a4000	60		rts		            RTS
.3a4001					S_DATA
.3a4001	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a4004	60		rts		            RTS
.3a4005					S_RESTORE
.3a4005	64 38		stz $0838	                STZ DATABIP         ; Just set DATABIP to 0
.3a4007	64 3a		stz $083a	                STZ DATABIP+2       ; The next READ will move it to the first DATA
.3a4009	64 3c		stz $083c	                STZ DATALINE        ; Set DATALINE to 0
.3a400b	64 3e		stz $083e	                STZ DATALINE+2
.3a400d	60		rts		            RTS
.3a400e					S_CLS
.3a400e	20 24 00	jsr $3a0024	            JSR CLSCREEN
.3a4011	60		rts		            RTS
.3a4012					S_POKEL
.3a4012	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4015	c2 20		rep #$20	            REP #$20
.3a4017	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a4019	48		pha		                PHA
.3a401a	a5 23		lda $0823	                LDA ARGUMENT1
.3a401c	48		pha		                PHA
.3a401d	e2 20		sep #$20	            SEP #$20
.3a401f	a7 00		lda [$0800]	                LDA [BIP]
.3a4021	c9 2c		cmp #$2c	                CMP #','
.3a4023	d0 22		bne $3a4047	                BNE syntax_err
.3a4025	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4028	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a402b	c2 20		rep #$20	            REP #$20
.3a402d	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a402f	d0 35		bne $3a4066	                BNE range_err
.3a4031	68		pla		                PLA                 ; Pull the target address from the stack
.3a4032	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a4034	68		pla		                PLA
.3a4035	85 0a		sta $080a	                STA INDEX+2
.3a4037	c2 20		rep #$20	            REP #$20
.3a4039	a5 23		lda $0823	                LDA ARGUMENT1
.3a403b	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a403d	e2 20		sep #$20	            SEP #$20
.3a403f	a0 02 00	ldy #$0002	                LDY #2
.3a4042	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4044	97 08		sta [$0808],y	                STA [INDEX],Y
.3a4046	60		rts		            RTS
.3a4047					syntax_err
.3a4047	08		php		            PHP
.3a4048	c2 20		rep #$20	            REP #$20
.3a404a	48		pha		            PHA
.3a404b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a404e	5b		tcd		            TCD
.3a404f	68		pla		            PLA
.3a4050	28		plp		            PLP
.3a4051	e2 20		sep #$20	            SEP #$20
.3a4053	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4055	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4059	c2 20		rep #$20	            REP #$20
.3a405b	29 ff 00	and #$00ff	            AND #$00FF
.3a405e	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4061	e2 20		sep #$20	            SEP #$20
.3a4063	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4066					range_err
.3a4066	08		php		            PHP
.3a4067	c2 20		rep #$20	            REP #$20
.3a4069	48		pha		            PHA
.3a406a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a406d	5b		tcd		            TCD
.3a406e	68		pla		            PLA
.3a406f	28		plp		            PLP
.3a4070	e2 20		sep #$20	            SEP #$20
.3a4072	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4074	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4078	c2 20		rep #$20	            REP #$20
.3a407a	29 ff 00	and #$00ff	            AND #$00FF
.3a407d	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4080	e2 20		sep #$20	            SEP #$20
.3a4082	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4085					S_POKEW
.3a4085	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4088	c2 20		rep #$20	            REP #$20
.3a408a	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a408c	48		pha		                PHA
.3a408d	a5 23		lda $0823	                LDA ARGUMENT1
.3a408f	48		pha		                PHA
.3a4090	e2 20		sep #$20	            SEP #$20
.3a4092	a7 00		lda [$0800]	                LDA [BIP]
.3a4094	c9 2c		cmp #$2c	                CMP #','
.3a4096	d0 19		bne $3a40b1	                BNE syntax_err
.3a4098	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a409b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a409e	c2 20		rep #$20	            REP #$20
.3a40a0	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a40a2	d0 2c		bne $3a40d0	                BNE range_err
.3a40a4	68		pla		                PLA                 ; Pull the target address from the stack
.3a40a5	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a40a7	68		pla		                PLA
.3a40a8	85 0a		sta $080a	                STA INDEX+2
.3a40aa	c2 20		rep #$20	            REP #$20
.3a40ac	a5 23		lda $0823	                LDA ARGUMENT1
.3a40ae	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a40b0	60		rts		            RTS
.3a40b1					syntax_err
.3a40b1	08		php		            PHP
.3a40b2	c2 20		rep #$20	            REP #$20
.3a40b4	48		pha		            PHA
.3a40b5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a40b8	5b		tcd		            TCD
.3a40b9	68		pla		            PLA
.3a40ba	28		plp		            PLP
.3a40bb	e2 20		sep #$20	            SEP #$20
.3a40bd	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a40bf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a40c3	c2 20		rep #$20	            REP #$20
.3a40c5	29 ff 00	and #$00ff	            AND #$00FF
.3a40c8	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a40cb	e2 20		sep #$20	            SEP #$20
.3a40cd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a40d0					range_err
.3a40d0	08		php		            PHP
.3a40d1	c2 20		rep #$20	            REP #$20
.3a40d3	48		pha		            PHA
.3a40d4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a40d7	5b		tcd		            TCD
.3a40d8	68		pla		            PLA
.3a40d9	28		plp		            PLP
.3a40da	e2 20		sep #$20	            SEP #$20
.3a40dc	a9 09		lda #$09	            LDA #ERR_RANGE
.3a40de	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a40e2	c2 20		rep #$20	            REP #$20
.3a40e4	29 ff 00	and #$00ff	            AND #$00FF
.3a40e7	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a40ea	e2 20		sep #$20	            SEP #$20
.3a40ec	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a40ef					S_POKE
.3a40ef	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a40f2	c2 20		rep #$20	            REP #$20
.3a40f4	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a40f6	48		pha		                PHA
.3a40f7	a5 23		lda $0823	                LDA ARGUMENT1
.3a40f9	48		pha		                PHA
.3a40fa	e2 20		sep #$20	            SEP #$20
.3a40fc	a7 00		lda [$0800]	                LDA [BIP]
.3a40fe	c9 2c		cmp #$2c	                CMP #','
.3a4100	d0 1f		bne $3a4121	                BNE syntax_err
.3a4102	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4105	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4108	e2 20		sep #$20	            SEP #$20
.3a410a	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Make sure the value is from 0 - 255
.3a410c	d0 32		bne $3a4140	                BNE range_err
.3a410e	c2 20		rep #$20	            REP #$20
.3a4110	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4112	d0 2c		bne $3a4140	                BNE range_err
.3a4114	68		pla		                PLA                 ; Pull the target address from the stack
.3a4115	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a4117	68		pla		                PLA
.3a4118	85 0a		sta $080a	                STA INDEX+2
.3a411a	e2 20		sep #$20	            SEP #$20
.3a411c	a5 23		lda $0823	                LDA ARGUMENT1
.3a411e	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a4120	60		rts		            RTS
.3a4121					syntax_err
.3a4121	08		php		            PHP
.3a4122	c2 20		rep #$20	            REP #$20
.3a4124	48		pha		            PHA
.3a4125	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4128	5b		tcd		            TCD
.3a4129	68		pla		            PLA
.3a412a	28		plp		            PLP
.3a412b	e2 20		sep #$20	            SEP #$20
.3a412d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a412f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4133	c2 20		rep #$20	            REP #$20
.3a4135	29 ff 00	and #$00ff	            AND #$00FF
.3a4138	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a413b	e2 20		sep #$20	            SEP #$20
.3a413d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4140					range_err
.3a4140	08		php		            PHP
.3a4141	c2 20		rep #$20	            REP #$20
.3a4143	48		pha		            PHA
.3a4144	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4147	5b		tcd		            TCD
.3a4148	68		pla		            PLA
.3a4149	28		plp		            PLP
.3a414a	e2 20		sep #$20	            SEP #$20
.3a414c	a9 09		lda #$09	            LDA #ERR_RANGE
.3a414e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4152	c2 20		rep #$20	            REP #$20
.3a4154	29 ff 00	and #$00ff	            AND #$00FF
.3a4157	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a415a	e2 20		sep #$20	            SEP #$20
.3a415c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a415f					S_STOP
.3a415f	08		php		            PHP
.3a4160	c2 20		rep #$20	            REP #$20
.3a4162	48		pha		            PHA
.3a4163	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4166	5b		tcd		            TCD
.3a4167	68		pla		            PLA
.3a4168	28		plp		            PLP
.3a4169	e2 20		sep #$20	            SEP #$20
.3a416b	a9 01		lda #$01	            LDA #ERR_BREAK
.3a416d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4171	c2 20		rep #$20	            REP #$20
.3a4173	29 ff 00	and #$00ff	            AND #$00FF
.3a4176	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4179	e2 20		sep #$20	            SEP #$20
.3a417b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a417e					S_REM
.3a417e	08		php		                PHP
.3a417f	e2 20		sep #$20	            SEP #$20
.3a4181	a7 00		lda [$0800]	rem_loop        LDA [BIP]
.3a4183	f0 05		beq $3a418a	                BEQ done
.3a4185	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4188	80 f7		bra $3a4181	                BRA rem_loop
.3a418a	28		plp		done            PLP
.3a418b	60		rts		            RTS
.3a418c					S_EXIT
.3a418c	08		php		                PHP
.3a418d	28		plp		                PLP
.3a418e	60		rts		            RTS
.3a418f					S_DO
.3a418f	08		php		                PHP
.3a4190	28		plp		                PLP
.3a4191	60		rts		            RTS
.0000					DO_RECORD
>0000					BIP             .dword  ?
>0004					CURLINE         .dword  ?
.3a4192					S_LOOP
.3a4192	08		php		                PHP
.3a4193	28		plp		                PLP
.3a4194	60		rts		            RTS
.3a4195					S_FOR
.3a4195	08		php		                PHP
.3a4196	c2 20		rep #$20	            REP #$20
.3a4198	a5 1c		lda $081c	                LDA CURLINE+2
.3a419a	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a419d	a5 1a		lda $081a	                LDA CURLINE
.3a419f	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a41a2	a5 02		lda $0802	                LDA BIP+2           ; Save current BIP
.3a41a4	48		pha		                PHA
.3a41a5	a5 00		lda $0800	                LDA BIP
.3a41a7	48		pha		                PHA
.3a41a8	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a41ab	a5 02		lda $0802	                LDA BIP+2           ; Save the BIP for the next statement to the RETURN stack
.3a41ad	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a41b0	a5 00		lda $0800	                LDA BIP
.3a41b2	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a41b5	68		pla		                PLA                 ; Restore the original BIP
.3a41b6	85 00		sta $0800	                STA BIP
.3a41b8	68		pla		                PLA
.3a41b9	85 02		sta $0802	                STA BIP+2
.3a41bb	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a41be					get_name
.3a41be	20 1f 54	jsr $3a541f	            JSR VAR_FINDNAME
.3a41c1	b0 1f		bcs $3a41e2	                BCS push_name       ; If we didn't find a name, thrown an error
.3a41c3	08		php		            PHP
.3a41c4	c2 20		rep #$20	            REP #$20
.3a41c6	48		pha		            PHA
.3a41c7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a41ca	5b		tcd		            TCD
.3a41cb	68		pla		            PLA
.3a41cc	28		plp		            PLP
.3a41cd	e2 20		sep #$20	            SEP #$20
.3a41cf	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a41d1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a41d5	c2 20		rep #$20	            REP #$20
.3a41d7	29 ff 00	and #$00ff	            AND #$00FF
.3a41da	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a41dd	e2 20		sep #$20	            SEP #$20
.3a41df	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a41e2					push_name
.3a41e2	e2 20		sep #$20	            SEP #$20
.3a41e4	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; To the return stack
.3a41e6	20 3c 1e	jsr $3a1e3c	            JSR PHRETURNB
.3a41e9	a5 e9		lda $08e9	                LDA TOFIND+2
.3a41eb	20 3c 1e	jsr $3a1e3c	            JSR PHRETURNB
.3a41ee	c2 20		rep #$20	            REP #$20
.3a41f0	a5 e7		lda $08e7	                LDA TOFIND
.3a41f2	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a41f5					else
.3a41f5	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a41f8	e2 20		sep #$20	            SEP #$20
.3a41fa	a7 00		lda [$0800]	                LDA [BIP]
.3a41fc	c9 8a		cmp #$8a	                CMP #TOK_EQ
.3a41fe	d0 6a		bne $3a426a	                BNE syntax_err      ; If not found: signal an syntax error
.3a4200	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Verify type of variable
.3a4202	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; Is it integer?
.3a4204	f0 04		beq $3a420a	                BEQ process_initial ; Yes: it's ok
.3a4206	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; Is it floating point?
.3a4208	f0 00		beq $3a420a	                BEQ process_initial ; Yes: it's ok
.3a420a					process_initial
.3a420a	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a420d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4210	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a4213	e2 20		sep #$20	            SEP #$20
.3a4215	a9 9c		lda #$9c	                LDA #TOK_TO         ; Expect the next token to be TO
.3a4217	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a421a	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a421d	c2 20		rep #$20	            REP #$20
.3a421f	a5 27		lda $0827	                LDA ARGTYPE1
.3a4221	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4224	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4226	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4229	a5 23		lda $0823	                LDA ARGUMENT1
.3a422b	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a422e	e2 20		sep #$20	            SEP #$20
.3a4230	a9 9d		lda #$9d	                LDA #TOK_STEP
.3a4232	85 37		sta $0837	                STA TARGETTOK
.3a4234	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a4237	90 1b		bcc $3a4254	                BCC default_inc     ; Not found: set a default increment of 1
.3a4239	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a423c	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a423f	e2 20		sep #$20	            SEP #$20
.3a4241	a5 27		lda $0827	                LDA ARGTYPE1        ; Push the result as the increment
.3a4243	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4246	c2 20		rep #$20	            REP #$20
.3a4248	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a424a	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a424d	a5 23		lda $0823	                LDA ARGUMENT1
.3a424f	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4252	80 14		bra $3a4268	                BRA done
.3a4254					default_inc
.3a4254	c2 20		rep #$20	            REP #$20
.3a4256	a9 00 00	lda #$0000	                LDA #TYPE_INTEGER
.3a4259	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a425c	a9 00 00	lda #$0000	                LDA #0
.3a425f	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4262	a9 01 00	lda #$0001	                LDA #1
.3a4265	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4268	28		plp		done            PLP
.3a4269	60		rts		            RTS
.3a426a					syntax_err
.3a426a	08		php		            PHP
.3a426b	c2 20		rep #$20	            REP #$20
.3a426d	48		pha		            PHA
.3a426e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4271	5b		tcd		            TCD
.3a4272	68		pla		            PLA
.3a4273	28		plp		            PLP
.3a4274	e2 20		sep #$20	            SEP #$20
.3a4276	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4278	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a427c	c2 20		rep #$20	            REP #$20
.3a427e	29 ff 00	and #$00ff	            AND #$00FF
.3a4281	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4284	e2 20		sep #$20	            SEP #$20
.3a4286	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.0000					FOR_RECORD
>0000					INCREMENT       .dword  ?
>0004					INCTYPE         .word   ?
>0006					FINAL           .dword  ?
>000a					FINALTYPE       .word   ?
>000c					VARIBLE         .dword  ?
>0010					VARTYPE         .word   ?
>0012					BIP             .dword  ?
>0016					CURLINE         .dword  ?
.3a4289					S_NEXT
.3a4289	08		php		                PHP
.3a428a	8b		phb		                PHB
.3a428b	08		php		            PHP
.3a428c	e2 20		sep #$20	            SEP #$20
.3a428e	48		pha		            PHA
.3a428f	a9 00		lda #$00	            LDA #0
.3a4291	48		pha		            PHA
.3a4292	ab		plb		            PLB
.3a4293	68		pla		            PLA
.3a4294	28		plp		            PLP
.3a4295	08		php		            PHP
.3a4296	c2 20		rep #$20	            REP #$20
.3a4298	48		pha		            PHA
.3a4299	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a429c	5b		tcd		            TCD
.3a429d	68		pla		            PLA
.3a429e	28		plp		            PLP
.3a429f	c2 30		rep #$30	            REP #$30
.3a42a1	a4 33		ldy $0833	                LDY RETURNSP                    ; Y := pointer to first byte of the FOR record
.3a42a3	c8		iny		                INY                             ; RETURNSP points to the first free slot, so move up 2 bytes
.3a42a4	c8		iny		                INY
.3a42a5	c2 20		rep #$20	            REP #$20
.3a42a7	b9 0c 00	lda $000c,y	                LDA #FOR_RECORD.VARIBLE,B,Y     ; TOFIND := FOR_RECORD.VARIABLE
.3a42aa	85 e7		sta $08e7	                STA TOFIND
.3a42ac	b9 0e 00	lda $000e,y	                LDA #FOR_RECORD.VARIBLE+2,B,Y
.3a42af	e2 20		sep #$20	            SEP #$20
.3a42b1	85 e9		sta $08e9	                STA TOFIND+2
.3a42b3	b9 10 00	lda $0010,y	                LDA #FOR_RECORD.VARTYPE,B,Y
.3a42b6	85 ea		sta $08ea	                STA TOFINDTYPE
.3a42b8	c2 20		rep #$20	            REP #$20
.3a42ba	5a		phy		                PHY
.3a42bb	20 20 52	jsr $3a5220	            JSR VAR_REF
.3a42be	7a		ply		                PLY
.3a42bf	c2 20		rep #$20	            REP #$20
.3a42c1	b9 00 00	lda $0000,y	                LDA #FOR_RECORD.INCREMENT,B,Y   ; ARGUMENT2 := FOR_RECORD.INCREMENT
.3a42c4	85 29		sta $0829	                STA ARGUMENT2
.3a42c6	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y
.3a42c9	85 2b		sta $082b	                STA ARGUMENT2+2
.3a42cb	e2 20		sep #$20	            SEP #$20
.3a42cd	b9 04 00	lda $0004,y	                LDA #FOR_RECORD.INCTYPE,B,Y
.3a42d0	85 2d		sta $082d	                STA ARGTYPE2
.3a42d2	c2 20		rep #$20	            REP #$20
.3a42d4	5a		phy		                PHY
.3a42d5	20 e2 27	jsr $3a27e2	            JSR OP_PLUS
.3a42d8	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a42db	7a		ply		                PLY
.3a42dc	c2 20		rep #$20	            REP #$20
.3a42de	b9 06 00	lda $0006,y	                LDA #FOR_RECORD.FINAL,B,Y       ; ARGUMENT2 := FOR_RECORD.FINAL
.3a42e1	85 29		sta $0829	                STA ARGUMENT2
.3a42e3	b9 08 00	lda $0008,y	                LDA #FOR_RECORD.FINAL+2,B,Y
.3a42e6	85 2b		sta $082b	                STA ARGUMENT2+2
.3a42e8	e2 20		sep #$20	            SEP #$20
.3a42ea	b9 0a 00	lda $000a,y	                LDA #FOR_RECORD.FINALTYPE,B,Y
.3a42ed	85 2d		sta $082d	                STA ARGTYPE2
.3a42ef	c2 20		rep #$20	            REP #$20
.3a42f1	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y ; Check the increment's sign
.3a42f4	30 0a		bmi $3a4300	                BMI going_down
.3a42f6					going_up
.3a42f6	20 6b 2a	jsr $3a2a6b	            JSR OP_LTE
.3a42f9	20 1a 06	jsr $3a061a	            JSR IS_ARG1_Z
.3a42fc	f0 28		beq $3a4326	                BEQ end_loop                    ; No: end the loop
.3a42fe	80 08		bra $3a4308	                BRA loop_back                   ; Yes: loop back
.3a4300					going_down
.3a4300	20 2b 2a	jsr $3a2a2b	            JSR OP_GTE
.3a4303	20 1a 06	jsr $3a061a	            JSR IS_ARG1_Z
.3a4306	f0 1e		beq $3a4326	                BEQ end_loop                    ; No: end the loop
.3a4308					loop_back
.3a4308	c2 20		rep #$20	            REP #$20
.3a430a	b9 12 00	lda $0012,y	                LDA #FOR_RECORD.BIP,B,Y
.3a430d	85 00		sta $0800	                STA BIP
.3a430f	b9 14 00	lda $0014,y	                LDA #FOR_RECORD.BIP+2,B,Y
.3a4312	85 02		sta $0802	                STA BIP+2
.3a4314	b9 16 00	lda $0016,y	                LDA #FOR_RECORD.CURLINE,B,Y     ; CURLINE := FOR_RECORD.CURLINE
.3a4317	85 1a		sta $081a	                STA CURLINE
.3a4319	b9 18 00	lda $0018,y	                LDA #FOR_RECORD.CURLINE+2,B,Y
.3a431c	85 1c		sta $081c	                STA CURLINE+2
.3a431e	e2 20		sep #$20	            SEP #$20
.3a4320	a9 03		lda #$03	                LDA #EXEC_RETURN
.3a4322	85 dc		sta $08dc	                STA EXECACTION
.3a4324	80 17		bra $3a433d	                BRA done
.3a4326					end_loop
.3a4326	a2 23 08	ldx #$0823	                LDX #ARGUMENT1
.3a4329	20 e9 19	jsr $3a19e9	            JSR PLARGUMENT
.3a432c	c2 20		rep #$20	            REP #$20
.3a432e	18		clc		                CLC
.3a432f	a5 33		lda $0833	                LDA RETURNSP
.3a4331	69 1a 00	adc #$001a	                ADC #size(FOR_RECORD)           ; Move pointer by number of bytes in a FOR record
.3a4334	85 33		sta $0833	                STA RETURNSP
.3a4336	a5 35		lda $0835	                LDA RETURNSP+2
.3a4338	69 00 00	adc #$0000	                ADC #0
.3a433b	85 35		sta $0835	                STA RETURNSP+2
.3a433d	ab		plb		done            PLB
.3a433e	28		plp		                PLP
.3a433f	60		rts		            RTS
.3a4340					S_GOSUB
.3a4340	08		php		                PHP
.3a4341	a5 1a		lda $081a	                LDA CURLINE                 ; Save the current line for later
.3a4343	48		pha		                PHA
.3a4344	a5 1c		lda $081c	                LDA CURLINE+2
.3a4346	48		pha		                PHA
.3a4347	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a434a	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a434d	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.3a434f	f0 26		beq $3a4377	                BEQ syntax_err              ; If 0, no number was found... syntax error
.3a4351	20 1c 24	jsr $3a241c	            JSR FINDLINE
.3a4354	90 42		bcc $3a4398	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a4356	e2 20		sep #$20	            SEP #$20
.3a4358	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a435a	85 dc		sta $08dc	                STA EXECACTION
.3a435c	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a435f	c2 20		rep #$20	            REP #$20
.3a4361	68		pla		                PLA                         ; Save the old value of CURLINE to the RETURN stack
.3a4362	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4365	68		pla		                PLA
.3a4366	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4369	a5 02		lda $0802	                LDA BIP+2                   ; Save the BASIC Instruction Pointer to the RETURN stack
.3a436b	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a436e	a5 00		lda $0800	                LDA BIP
.3a4370	20 25 1e	jsr $3a1e25	            JSR PHRETURN
.3a4373	e6 31		inc $0831	                INC GOSUBDEPTH              ; Increase the count of GOSUBs on the stack
.3a4375	28		plp		                PLP
.3a4376	60		rts		            RTS
.3a4377	68		pla		syntax_err      PLA
.3a4378	68		pla		                PLA
.3a4379	08		php		            PHP
.3a437a	c2 20		rep #$20	            REP #$20
.3a437c	48		pha		            PHA
.3a437d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4380	5b		tcd		            TCD
.3a4381	68		pla		            PLA
.3a4382	28		plp		            PLP
.3a4383	e2 20		sep #$20	            SEP #$20
.3a4385	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4387	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a438b	c2 20		rep #$20	            REP #$20
.3a438d	29 ff 00	and #$00ff	            AND #$00FF
.3a4390	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4393	e2 20		sep #$20	            SEP #$20
.3a4395	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4398	68		pla		not_found       PLA
.3a4399	68		pla		                PLA
.3a439a	08		php		            PHP
.3a439b	c2 20		rep #$20	            REP #$20
.3a439d	48		pha		            PHA
.3a439e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a43a1	5b		tcd		            TCD
.3a43a2	68		pla		            PLA
.3a43a3	28		plp		            PLP
.3a43a4	e2 20		sep #$20	            SEP #$20
.3a43a6	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a43a8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a43ac	c2 20		rep #$20	            REP #$20
.3a43ae	29 ff 00	and #$00ff	            AND #$00FF
.3a43b1	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a43b4	e2 20		sep #$20	            SEP #$20
.3a43b6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a43b9					S_RETURN
.3a43b9	08		php		                PHP
.3a43ba	c2 30		rep #$30	            REP #$30
.3a43bc	a5 31		lda $0831	                LDA GOSUBDEPTH              ; Check that there is at least on GOSUB on the stack
.3a43be	f0 1e		beq $3a43de	                BEQ underflow               ; No? It's a stack underflow error
.3a43c0	20 47 1e	jsr $3a1e47	            JSR PLRETURN
.3a43c3	85 00		sta $0800	                STA BIP
.3a43c5	20 47 1e	jsr $3a1e47	            JSR PLRETURN
.3a43c8	85 02		sta $0802	                STA BIP+2
.3a43ca	20 47 1e	jsr $3a1e47	            JSR PLRETURN
.3a43cd	85 1a		sta $081a	                STA CURLINE
.3a43cf	20 47 1e	jsr $3a1e47	            JSR PLRETURN
.3a43d2	85 1c		sta $081c	                STA CURLINE+2
.3a43d4	c6 31		dec $0831	                DEC GOSUBDEPTH              ; Indicate we've popped that GOSUB off the stack
.3a43d6	e2 20		sep #$20	            SEP #$20
.3a43d8	a9 03		lda #$03	                LDA #EXEC_RETURN
.3a43da	85 dc		sta $08dc	                STA EXECACTION
.3a43dc	28		plp		                PLP
.3a43dd	60		rts		            RTS
.3a43de					underflow
.3a43de	08		php		            PHP
.3a43df	c2 20		rep #$20	            REP #$20
.3a43e1	48		pha		            PHA
.3a43e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a43e5	5b		tcd		            TCD
.3a43e6	68		pla		            PLA
.3a43e7	28		plp		            PLP
.3a43e8	e2 20		sep #$20	            SEP #$20
.3a43ea	a9 07		lda #$07	            LDA #ERR_STACKUNDER
.3a43ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a43f0	c2 20		rep #$20	            REP #$20
.3a43f2	29 ff 00	and #$00ff	            AND #$00FF
.3a43f5	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a43f8	e2 20		sep #$20	            SEP #$20
.3a43fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a43fd					S_IF
.3a43fd	08		php		                PHP
.3a43fe	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4401	20 1a 06	jsr $3a061a	            JSR IS_ARG1_Z
.3a4404	f0 1c		beq $3a4422	                BEQ is_false                ; If so, handle the FALSE case
.3a4406	e2 20		sep #$20	            SEP #$20
.3a4408	a9 97		lda #$97	                LDA #TOK_THEN               ; Verify that the next token is THEN and eat it
.3a440a	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a440d	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a4410	20 1a 06	jsr $3a061a	            JSR IS_ARG1_Z
.3a4413	f0 12		beq $3a4427	                BEQ syntax_err              ; If not, we have a syntax error
.3a4415	20 1c 24	jsr $3a241c	            JSR FINDLINE
.3a4418	90 2c		bcc $3a4446	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a441a	e2 20		sep #$20	            SEP #$20
.3a441c	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a441e	85 dc		sta $08dc	                STA EXECACTION
.3a4420	80 03		bra $3a4425	                BRA done
.3a4422					is_false
.3a4422	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a4425	28		plp		done            PLP
.3a4426	60		rts		            RTS
.3a4427					syntax_err
.3a4427	08		php		            PHP
.3a4428	c2 20		rep #$20	            REP #$20
.3a442a	48		pha		            PHA
.3a442b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a442e	5b		tcd		            TCD
.3a442f	68		pla		            PLA
.3a4430	28		plp		            PLP
.3a4431	e2 20		sep #$20	            SEP #$20
.3a4433	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4435	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4439	c2 20		rep #$20	            REP #$20
.3a443b	29 ff 00	and #$00ff	            AND #$00FF
.3a443e	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4441	e2 20		sep #$20	            SEP #$20
.3a4443	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4446					not_found
.3a4446	08		php		            PHP
.3a4447	c2 20		rep #$20	            REP #$20
.3a4449	48		pha		            PHA
.3a444a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a444d	5b		tcd		            TCD
.3a444e	68		pla		            PLA
.3a444f	28		plp		            PLP
.3a4450	e2 20		sep #$20	            SEP #$20
.3a4452	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a4454	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4458	c2 20		rep #$20	            REP #$20
.3a445a	29 ff 00	and #$00ff	            AND #$00FF
.3a445d	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4460	e2 20		sep #$20	            SEP #$20
.3a4462	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4465					S_END
.3a4465	08		php		                PHP
.3a4466	e2 20		sep #$20	            SEP #$20
.3a4468	a9 01		lda #$01	                LDA #EXEC_STOP
.3a446a	85 dc		sta $08dc	                STA EXECACTION
.3a446c	28		plp		                PLP
.3a446d	60		rts		            RTS
.3a446e					S_GOTO
.3a446e	08		php		                PHP
.3a446f	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a4472	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a4475	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.3a4477	f0 0d		beq $3a4486	                BEQ syntax_err              ; If 0, no number was found... syntax error
.3a4479	20 1c 24	jsr $3a241c	            JSR FINDLINE
.3a447c	90 27		bcc $3a44a5	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a447e	e2 20		sep #$20	            SEP #$20
.3a4480	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a4482	85 dc		sta $08dc	                STA EXECACTION
.3a4484	28		plp		                PLP
.3a4485	60		rts		            RTS
.3a4486					syntax_err
.3a4486	08		php		            PHP
.3a4487	c2 20		rep #$20	            REP #$20
.3a4489	48		pha		            PHA
.3a448a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a448d	5b		tcd		            TCD
.3a448e	68		pla		            PLA
.3a448f	28		plp		            PLP
.3a4490	e2 20		sep #$20	            SEP #$20
.3a4492	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4494	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4498	c2 20		rep #$20	            REP #$20
.3a449a	29 ff 00	and #$00ff	            AND #$00FF
.3a449d	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a44a0	e2 20		sep #$20	            SEP #$20
.3a44a2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a44a5					not_found
.3a44a5	08		php		            PHP
.3a44a6	c2 20		rep #$20	            REP #$20
.3a44a8	48		pha		            PHA
.3a44a9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a44ac	5b		tcd		            TCD
.3a44ad	68		pla		            PLA
.3a44ae	28		plp		            PLP
.3a44af	e2 20		sep #$20	            SEP #$20
.3a44b1	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a44b3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a44b7	c2 20		rep #$20	            REP #$20
.3a44b9	29 ff 00	and #$00ff	            AND #$00FF
.3a44bc	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a44bf	e2 20		sep #$20	            SEP #$20
.3a44c1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a44c4					S_CLR
.3a44c4	20 8b 19	jsr $3a198b	            JSR INITEVALSP
.3a44c7	20 ab 10	jsr $3a10ab	            JSR INITHEAP
.3a44ca	20 1f 51	jsr $3a511f	            JSR INITVARS
.3a44cd	60		rts		            RTS
.3a44ce					S_LET
.3a44ce	08		php		                PHP
.3a44cf	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.3a44d1	10 03		bpl $3a44d6	                BPL get_name        ; If it's not a token, try to find the variable name
.3a44d3	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a44d6					get_name
.3a44d6	20 1f 54	jsr $3a541f	            JSR VAR_FINDNAME
.3a44d9	b0 03		bcs $3a44de	                BCS check_array     ; If we didn't find a name, thrown an error
.3a44db	4c 45 45	jmp $3a4545	                JMP syntax_err
.3a44de					check_array
.3a44de	e2 20		sep #$20	            SEP #$20
.3a44e0	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Save the variable name for later
.3a44e2	48		pha		                PHA                 ; (it will get over-written by variable references)
.3a44e3	a5 e9		lda $08e9	                LDA TOFIND+2
.3a44e5	48		pha		                PHA
.3a44e6	a5 e8		lda $08e8	                LDA TOFIND+1
.3a44e8	48		pha		                PHA
.3a44e9	a5 e7		lda $08e7	                LDA TOFIND
.3a44eb	48		pha		                PHA
.3a44ec	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a44ef	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it a "("
.3a44f1	d0 0e		bne $3a4501	                BNE get_value       ; No: it's a scalar assignment, look for the "="
.3a44f3	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a44f5	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a44f8	a9 00		lda #$00	                LDA #0
.3a44fa	8f 00 4d 00	sta $004d00	                STA @l ARRIDXBUF    ; Blank out the array index buffer
.3a44fe	20 0d 1b	jsr $3a1b0d	            JSR ARR_GETIDX
.3a4501					get_value
.3a4501	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a4504	e2 20		sep #$20	            SEP #$20
.3a4506	a7 00		lda [$0800]	                LDA [BIP]
.3a4508	c9 8a		cmp #$8a	                CMP #TOK_EQ
.3a450a	f0 03		beq $3a450f	                BEQ found_eq        ; If not found: signal an syntax error
.3a450c	4c 45 45	jmp $3a4545	                JMP syntax_err
.3a450f					found_eq
.3a450f	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4512	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4515	68		pla		                PLA                 ; Restore the variable name
.3a4516	85 e7		sta $08e7	                STA TOFIND
.3a4518	68		pla		                PLA
.3a4519	85 e8		sta $08e8	                STA TOFIND+1
.3a451b	68		pla		                PLA
.3a451c	85 e9		sta $08e9	                STA TOFIND+2
.3a451e	68		pla		                PLA
.3a451f	85 ea		sta $08ea	                STA TOFINDTYPE
.3a4521	29 80		and #$80	                AND #$80            ; Is it an array we're setting?
.3a4523	f0 1b		beq $3a4540	                BEQ set_scalar      ; No: do a scalar variable set
.3a4525	20 92 51	jsr $3a5192	            JSR VAR_FIND
.3a4528	90 3a		bcc $3a4564	                BCC notfound_err
.3a452a	c2 20		rep #$20	            REP #$20
.3a452c	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a452f	b7 08		lda [$0808],y	                LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.3a4531	85 c0		sta $08c0	                STA CURRBLOCK
.3a4533	e2 20		sep #$20	            SEP #$20
.3a4535	c8		iny		                INY
.3a4536	c8		iny		                INY
.3a4537	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4539	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a453b	20 89 68	jsr $3a6889	            JSR ARR_SET
.3a453e	80 03		bra $3a4543	                BRA done            ; and we're finished!
.3a4540					set_scalar
.3a4540	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a4543					done
.3a4543	28		plp		                PLP
.3a4544	60		rts		            RTS
.3a4545					syntax_err
.3a4545	08		php		            PHP
.3a4546	c2 20		rep #$20	            REP #$20
.3a4548	48		pha		            PHA
.3a4549	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a454c	5b		tcd		            TCD
.3a454d	68		pla		            PLA
.3a454e	28		plp		            PLP
.3a454f	e2 20		sep #$20	            SEP #$20
.3a4551	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4553	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4557	c2 20		rep #$20	            REP #$20
.3a4559	29 ff 00	and #$00ff	            AND #$00FF
.3a455c	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a455f	e2 20		sep #$20	            SEP #$20
.3a4561	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4564					notfound_err
.3a4564	08		php		            PHP
.3a4565	c2 20		rep #$20	            REP #$20
.3a4567	48		pha		            PHA
.3a4568	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a456b	5b		tcd		            TCD
.3a456c	68		pla		            PLA
.3a456d	28		plp		            PLP
.3a456e	e2 20		sep #$20	            SEP #$20
.3a4570	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a4572	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4576	c2 20		rep #$20	            REP #$20
.3a4578	29 ff 00	and #$00ff	            AND #$00FF
.3a457b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a457e	e2 20		sep #$20	            SEP #$20
.3a4580	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4583					S_PRINT
.3a4583	08		php		                PHP
.3a4584	e2 20		sep #$20	            SEP #$20
.3a4586	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a4589	c9 00		cmp #$00	                CMP #0              ; Is it EOL or :?
.3a458b	f0 6d		beq $3a45fa	                BEQ pr_nl_exit      ; Yes: just print return
.3a458d					pr_loop
.3a458d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4590	e2 20		sep #$20	            SEP #$20
.3a4592	a5 27		lda $0827	                LDA ARGTYPE1        ; Get the type of the result
.3a4594	c9 ff		cmp #$ff	                CMP #TYPE_NAV       ; Is is NAV?
.3a4596	f0 1b		beq $3a45b3	                BEQ check_nl        ; Yes: we are probably just printing a newline
.3a4598	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string?
.3a459a	d0 05		bne $3a45a1	                BNE check_int       ; No: check to see if it's an integer
.3a459c	20 ff 45	jsr $3a45ff	            JSR PR_STRING
.3a459f	80 12		bra $3a45b3	                BRA check_nl
.3a45a1	c9 00		cmp #$00	check_int       CMP #TYPE_INTEGER   ; Is it an integer?
.3a45a3	d0 05		bne $3a45aa	                BNE check_float     ; No: check to see if it is a float
.3a45a5	20 1d 46	jsr $3a461d	            JSR PR_INTEGER
.3a45a8	80 09		bra $3a45b3	                BRA check_nl
.3a45aa	c9 01		cmp #$01	check_float     CMP #TYPE_FLOAT     ; Is it a float?
.3a45ac	d0 4f		bne $3a45fd	                BNE done            ; No: just quit
.3a45ae	20 30 46	jsr $3a4630	            JSR PR_FLOAT
.3a45b1	80 00		bra $3a45b3	                BRA check_nl
.3a45b3					check_nl
.3a45b3	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a45b6	a7 00		lda [$0800]	                LDA [BIP]
.3a45b8	f0 40		beq $3a45fa	                BEQ pr_nl_exit      ; If it's nul, print a newline and return
.3a45ba	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.3a45bc	f0 3c		beq $3a45fa	                BEQ pr_nl_exit      ; print a newline and return
.3a45be	c9 2c		cmp #$2c	                CMP #','            ; If it's a comma
.3a45c0	f0 23		beq $3a45e5	                BEQ pr_comma        ; Print a TAB and try another expression
.3a45c2	c9 3b		cmp #$3b	                CMP #';'            ; If it's a semicolon...
.3a45c4	f0 24		beq $3a45ea	                BEQ is_more         ; Print nothing, and try another expression
.3a45c6	08		php		            PHP
.3a45c7	c2 20		rep #$20	            REP #$20
.3a45c9	48		pha		            PHA
.3a45ca	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a45cd	5b		tcd		            TCD
.3a45ce	68		pla		            PLA
.3a45cf	28		plp		            PLP
.3a45d0	e2 20		sep #$20	            SEP #$20
.3a45d2	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a45d4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a45d8	c2 20		rep #$20	            REP #$20
.3a45da	29 ff 00	and #$00ff	            AND #$00FF
.3a45dd	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a45e0	e2 20		sep #$20	            SEP #$20
.3a45e2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a45e5	a9 09		lda #$09	pr_comma        LDA #CHAR_TAB       ; Print a TAB
.3a45e7	20 18 00	jsr $3a0018	            JSR PRINTC
.3a45ea					is_more
.3a45ea	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a45ed	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a45f0	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.3a45f2	f0 09		beq $3a45fd	                BEQ done            ; If it's NULL, return without printing a newline
.3a45f4	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.3a45f6	f0 05		beq $3a45fd	                BEQ done            ; ... return without printing a newline
.3a45f8	80 93		bra $3a458d	                BRA pr_loop         ; Otherwise, we should have another expression, try to handle it
.3a45fa					pr_nl_exit
.3a45fa	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a45fd	28		plp		done            PLP
.3a45fe	60		rts		            RTS
.3a45ff					PR_STRING
.3a45ff	08		php		                PHP
.3a4600	8b		phb		                PHB
.3a4601	08		php		            PHP
.3a4602	c2 20		rep #$20	            REP #$20
.3a4604	48		pha		            PHA
.3a4605	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a4608	5b		tcd		            TCD
.3a4609	68		pla		            PLA
.3a460a	28		plp		            PLP
.3a460b	e2 20		sep #$20	            SEP #$20
.3a460d	a0 00 00	ldy #$0000	start_print     LDY #0
.3a4610	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y
.3a4612	f0 06		beq $3a461a	                BEQ done
.3a4614	20 18 00	jsr $3a0018	            JSR PRINTC
.3a4617	c8		iny		                INY
.3a4618	80 f6		bra $3a4610	                BRA loop
.3a461a	ab		plb		done            PLB
.3a461b	28		plp		                PLP
.3a461c	60		rts		            RTS
.3a461d					PR_INTEGER
.3a461d	08		php		                PHP
.3a461e	c2 20		rep #$20	            REP #$20
.3a4620	20 60 15	jsr $3a1560	            JSR ITOS
.3a4623	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a4625	85 23		sta $0823	                STA ARGUMENT1
.3a4627	a5 18		lda $0818	                LDA STRPTR+2
.3a4629	85 25		sta $0825	                STA ARGUMENT1+2
.3a462b	20 ff 45	jsr $3a45ff	            JSR PR_STRING
.3a462e	28		plp		                PLP
.3a462f	60		rts		            RTS
.3a4630					PR_FLOAT
.3a4630	08		php		                PHP
.3a4631	20 e8 5d	jsr $3a5de8	            JSR FTOS
.3a4634	c2 20		rep #$20	            REP #$20
.3a4636	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a4638	85 23		sta $0823	                STA ARGUMENT1
.3a463a	a5 18		lda $0818	                LDA STRPTR+2
.3a463c	85 25		sta $0825	                STA ARGUMENT1+2
.3a463e	20 ff 45	jsr $3a45ff	            JSR PR_STRING
.3a4641	28		plp		                PLP
.3a4642	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\functions.s


;******  Processing file: src\C256/functions_c256.s

.3a4643					BCD2STR
.3a4643	08		php		            PHP
.3a4644	e2 20		sep #$20	            SEP #$20
.3a4646	85 b5		sta $08b5	            STA SAVE_A
.3a4648	4a		lsr a		            LSR A
.3a4649	4a		lsr a		            LSR A
.3a464a	4a		lsr a		            LSR A
.3a464b	4a		lsr a		            LSR A
.3a464c	29 0f		and #$0f	            AND #$0F
.3a464e	18		clc		            CLC
.3a464f	69 30		adc #$30	            ADC #'0'
.3a4651	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4653	c8		iny		            INY
.3a4654	a5 b5		lda $08b5	            LDA SAVE_A
.3a4656	29 0f		and #$0f	            AND #$0F
.3a4658	18		clc		            CLC
.3a4659	69 30		adc #$30	            ADC #'0'
.3a465b	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a465d	c8		iny		            INY
.3a465e	28		plp		            PLP
.3a465f	60		rts		            RTS
.3a4660					F_GETDATE
.3a4660	e2 20		sep #$20	            SEP #$20
.3a4662	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4664	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4667	08		php		            PHP
.3a4668	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a466b	e2 20		sep #$20	            SEP #$20
.3a466d	c2 10		rep #$10	            REP #$10
.3a466f	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a4673	09 08		ora #$08	            ORA #%00001000
.3a4675	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a4679	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a467c	a0 00 00	ldy #$0000	            LDY #0
.3a467f	af 06 08 af	lda $af0806	            LDA @lRTC_DAY           ; Write the day of the month
.3a4683	20 43 46	jsr $3a4643	            JSR BCD2STR
.3a4686	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.3a4688	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a468a	c8		iny		            INY
.3a468b	af 09 08 af	lda $af0809	            LDA @lRTC_MONTH         ; Write the month
.3a468f	20 43 46	jsr $3a4643	            JSR BCD2STR
.3a4692	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.3a4694	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4696	c8		iny		            INY
.3a4697	af 0f 08 af	lda $af080f	            LDA @lRTC_CENTURY       ; Write the year
.3a469b	20 43 46	jsr $3a4643	            JSR BCD2STR
.3a469e	af 0a 08 af	lda $af080a	            LDA @lRTC_YEAR          ; Write the year
.3a46a2	20 43 46	jsr $3a4643	            JSR BCD2STR
.3a46a5	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.3a46a7	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a46a9	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a46ad	29 f7		and #$f7	            AND #%11110111
.3a46af	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a46b3	c2 20		rep #$20	            REP #$20
.3a46b5	a5 16		lda $0816	            LDA STRPTR
.3a46b7	85 23		sta $0823	            STA ARGUMENT1
.3a46b9	a5 18		lda $0818	            LDA STRPTR+2
.3a46bb	85 25		sta $0825	            STA ARGUMENT1+2
.3a46bd	e2 20		sep #$20	            SEP #$20
.3a46bf	a9 02		lda #$02	            LDA #TYPE_STRING
.3a46c1	85 27		sta $0827	            STA ARGTYPE1
.3a46c3	28		plp		            PLP
.3a46c4	e2 20		sep #$20	            SEP #$20
.3a46c6	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a46c9	60		rts		            RTS
.3a46ca					F_GETTIME
.3a46ca	e2 20		sep #$20	            SEP #$20
.3a46cc	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a46ce	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a46d1	08		php		            PHP
.3a46d2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a46d5	e2 20		sep #$20	            SEP #$20
.3a46d7	c2 10		rep #$10	            REP #$10
.3a46d9	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a46dd	09 08		ora #$08	            ORA #%00001000
.3a46df	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a46e3	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a46e6	a0 00 00	ldy #$0000	            LDY #0
.3a46e9	af 04 08 af	lda $af0804	            LDA @lRTC_HRS           ; Write the hour
.3a46ed	29 7f		and #$7f	            AND #$7F                ; Trim out the AM/PM indicator
.3a46ef	20 43 46	jsr $3a4643	            JSR BCD2STR
.3a46f2	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.3a46f4	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a46f6	c8		iny		            INY
.3a46f7	af 02 08 af	lda $af0802	            LDA @lRTC_MIN           ; Write the minute
.3a46fb	20 43 46	jsr $3a4643	            JSR BCD2STR
.3a46fe	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.3a4700	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4702	c8		iny		            INY
.3a4703	af 00 08 af	lda $af0800	            LDA @lRTC_SEC           ; Write the second
.3a4707	20 43 46	jsr $3a4643	            JSR BCD2STR
.3a470a	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.3a470c	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a470e	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a4712	29 f7		and #$f7	            AND #%11110111
.3a4714	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a4718	c2 20		rep #$20	            REP #$20
.3a471a	a5 16		lda $0816	            LDA STRPTR
.3a471c	85 23		sta $0823	            STA ARGUMENT1
.3a471e	a5 18		lda $0818	            LDA STRPTR+2
.3a4720	85 25		sta $0825	            STA ARGUMENT1+2
.3a4722	e2 20		sep #$20	            SEP #$20
.3a4724	a9 02		lda #$02	            LDA #TYPE_STRING
.3a4726	85 27		sta $0827	            STA ARGTYPE1
.3a4728	28		plp		            PLP
.3a4729	e2 20		sep #$20	            SEP #$20
.3a472b	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a472e	60		rts		            RTS
.3a472f					FN_RND
.3a472f	e2 20		sep #$20	            SEP #$20
.3a4731	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4733	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4736	08		php		            PHP
.3a4737	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a473a	e2 20		sep #$20	            SEP #$20
.3a473c	a9 01		lda #$01	            LDA #TYPE_FLOAT             ; We'll return a floating point number
.3a473e	85 27		sta $0827	            STA ARGTYPE1
.3a4740	a9 03		lda #$03	            LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a4742	8f 00 e2 af	sta $afe200	            STA @l FP_MATH_CTRL0        ; Expect fixed point numbers
.3a4746	a9 01		lda #$01	            LDA #FP_OUT_DIV             ; Set us to do a division
.3a4748	8f 01 e2 af	sta $afe201	            STA @l FP_MATH_CTRL1
.3a474c	c2 30		rep #$30	            REP #$30
.3a474e	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get a random 16-bits
.3a4752	8f 08 e2 af	sta $afe208	            STA @l FP_MATH_INPUT0_LL    ; Send them to the FP unit
.3a4756	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get another random 16-bits
.3a475a	29 ff 7f	and #$7fff	            AND #$7FFF                  ; Make sure it's positive
.3a475d	8f 0a e2 af	sta $afe20a	            STA @l FP_MATH_INPUT0_LL+2  ; Send them to the FP unit
.3a4761	a9 ff ff	lda #$ffff	            LDA #$FFFF                  ; Get the maximum value
.3a4764	8f 0c e2 af	sta $afe20c	            STA @l FP_MATH_INPUT1_LL    ; Send it to the FP unit
.3a4768	a9 ff 7f	lda #$7fff	            LDA #$7FFF
.3a476b	8f 0e e2 af	sta $afe20e	            STA @l FP_MATH_INPUT1_LL+2
.3a476f	ea		nop		            NOP
.3a4770	ea		nop		            NOP
.3a4771	ea		nop		            NOP
.3a4772	af 08 e2 af	lda $afe208	            LDA @l FP_MATH_OUTPUT_FP_LL     ; Get the normalized result
.3a4776	85 23		sta $0823	            STA ARGUMENT1
.3a4778	af 0a e2 af	lda $afe20a	            LDA @l FP_MATH_OUTPUT_FP_LL+2
.3a477c	85 25		sta $0825	            STA ARGUMENT1+2
.3a477e	28		plp		            PLP
.3a477f	e2 20		sep #$20	            SEP #$20
.3a4781	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4784	60		rts		            RTS
.3a4785					FN_INKEY
.3a4785	e2 20		sep #$20	            SEP #$20
.3a4787	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4789	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a478c	08		php		            PHP
.3a478d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4790	22 28 10 00	jsl $001028	            JSL FK_GETSCANCODE          ; Get the scan code
.3a4794	e2 20		sep #$20	            SEP #$20
.3a4796	85 23		sta $0823	            STA ARGUMENT1
.3a4798	64 24		stz $0824	            STZ ARGUMENT1+1
.3a479a	64 25		stz $0825	            STZ ARGUMENT1+2
.3a479c	64 26		stz $0826	            STZ ARGUMENT1+3
.3a479e	a9 00		lda #$00	            LDA #TYPE_INTEGER           ; We'll return an integer number
.3a47a0	85 27		sta $0827	            STA ARGTYPE1
.3a47a2	28		plp		            PLP
.3a47a3	e2 20		sep #$20	            SEP #$20
.3a47a5	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a47a8	60		rts		            RTS

;******  Return to file: src\functions.s

.3a47a9					FN_MID
.3a47a9	e2 20		sep #$20	            SEP #$20
.3a47ab	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a47ad	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a47b0	08		php		                PHP
.3a47b1	c2 30		rep #$30	            REP #$30
.3a47b3	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a47b6	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a47b9					save_string
.3a47b9	c2 20		rep #$20	            REP #$20
.3a47bb	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a47bd	48		pha		                PHA
.3a47be	a5 23		lda $0823	                LDA ARGUMENT1
.3a47c0	48		pha		                PHA
.3a47c1	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a47c4	e2 20		sep #$20	            SEP #$20
.3a47c6	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a47c8	c9 2c		cmp #$2c	                CMP #','
.3a47ca	f0 03		beq $3a47cf	                BEQ skip_comma1
.3a47cc	4c 20 48	jmp $3a4820	                JMP syntax_err
.3a47cf					skip_comma1
.3a47cf	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a47d2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a47d5	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a47d8	c2 20		rep #$20	            REP #$20
.3a47da	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the index
.3a47dc	48		pha		                PHA
.3a47dd	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a47e0	e2 20		sep #$20	            SEP #$20
.3a47e2	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a47e4	c9 2c		cmp #$2c	                CMP #','
.3a47e6	f0 03		beq $3a47eb	                BEQ skip_comma2
.3a47e8	4c 20 48	jmp $3a4820	                JMP syntax_err
.3a47eb					skip_comma2
.3a47eb	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a47ee	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a47f1	20 0d 07	jsr $3a070d	            JSR ASS_ARG1_INT16
.3a47f4	c2 20		rep #$20	            REP #$20
.3a47f6	a5 23		lda $0823	            LDA ARGUMENT1
.3a47f8	85 8f		sta $088f	            STA MCOUNT
.3a47fa	e2 20		sep #$20	            SEP #$20
.3a47fc	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a47fe	85 91		sta $0891	            STA MCOUNT+2
.3a4800	c2 20		rep #$20	            REP #$20
.3a4802	68		pla		                PLA                         ; Restore index
.3a4803	85 29		sta $0829	                STA ARGUMENT2               ; ... to ARGUMENT2
.3a4805	a9 00 00	lda #$0000	                LDA #0
.3a4808	85 2b		sta $082b	                STA ARGUMENT2+2
.3a480a	68		pla		                PLA                         ; Restore string
.3a480b	85 23		sta $0823	                STA ARGUMENT1               ; ... to ARGUMENT1
.3a480d	68		pla		                PLA
.3a480e	85 25		sta $0825	                STA ARGUMENT1+2
.3a4810	e2 20		sep #$20	            SEP #$20
.3a4812	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a4814	85 27		sta $0827	            STA ARGTYPE1
.3a4816	20 59 17	jsr $3a1759	            JSR STRSUBSTR
.3a4819					done
.3a4819	e2 20		sep #$20	            SEP #$20
.3a481b	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a481e	28		plp		                PLP
.3a481f	60		rts		            RTS
.3a4820					syntax_err
.3a4820	08		php		            PHP
.3a4821	c2 20		rep #$20	            REP #$20
.3a4823	48		pha		            PHA
.3a4824	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4827	5b		tcd		            TCD
.3a4828	68		pla		            PLA
.3a4829	28		plp		            PLP
.3a482a	e2 20		sep #$20	            SEP #$20
.3a482c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a482e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4832	c2 20		rep #$20	            REP #$20
.3a4834	29 ff 00	and #$00ff	            AND #$00FF
.3a4837	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a483a	e2 20		sep #$20	            SEP #$20
.3a483c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a483f					range_err
.3a483f	08		php		            PHP
.3a4840	c2 20		rep #$20	            REP #$20
.3a4842	48		pha		            PHA
.3a4843	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4846	5b		tcd		            TCD
.3a4847	68		pla		            PLA
.3a4848	28		plp		            PLP
.3a4849	e2 20		sep #$20	            SEP #$20
.3a484b	a9 09		lda #$09	            LDA #ERR_RANGE
.3a484d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4851	c2 20		rep #$20	            REP #$20
.3a4853	29 ff 00	and #$00ff	            AND #$00FF
.3a4856	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4859	e2 20		sep #$20	            SEP #$20
.3a485b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a485e					FN_RIGHT
.3a485e	e2 20		sep #$20	            SEP #$20
.3a4860	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4862	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4865	08		php		                PHP
.3a4866	c2 30		rep #$30	            REP #$30
.3a4868	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a486b	e2 20		sep #$20	            SEP #$20
.3a486d	a5 27		lda $0827	                LDA ARGTYPE1
.3a486f	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4871	f0 03		beq $3a4876	                BEQ save_string
.3a4873	4c e2 48	jmp $3a48e2	                JMP type_mismatch           ; Type mismatch if it's not a string
.3a4876					save_string
.3a4876	c2 20		rep #$20	            REP #$20
.3a4878	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a487a	48		pha		                PHA
.3a487b	a5 23		lda $0823	                LDA ARGUMENT1
.3a487d	48		pha		                PHA
.3a487e	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a4881	e2 20		sep #$20	            SEP #$20
.3a4883	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a4885	c9 2c		cmp #$2c	                CMP #','
.3a4887	f0 03		beq $3a488c	                BEQ skip_comma
.3a4889	4c 01 49	jmp $3a4901	                JMP syntax_err
.3a488c					skip_comma
.3a488c	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a488f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4892	e2 20		sep #$20	            SEP #$20
.3a4894	a5 27		lda $0827	                LDA ARGTYPE1
.3a4896	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4898	d0 48		bne $3a48e2	                BNE type_mismatch           ; Type mismatch if it's not an integer
.3a489a	c2 20		rep #$20	            REP #$20
.3a489c	a5 23		lda $0823	            LDA ARGUMENT1
.3a489e	85 8f		sta $088f	            STA MCOUNT
.3a48a0	c2 20		rep #$20	            REP #$20
.3a48a2	68		pla		                PLA                         ; Recover the string pointer
.3a48a3	85 23		sta $0823	                STA ARGUMENT1
.3a48a5	68		pla		                PLA
.3a48a6	85 25		sta $0825	                STA ARGUMENT1+2
.3a48a8	e2 20		sep #$20	            SEP #$20
.3a48aa	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a48ac	85 27		sta $0827	            STA ARGTYPE1
.3a48ae	e2 20		sep #$20	            SEP #$20
.3a48b0	a0 00 00	ldy #$0000	                LDY #0
.3a48b3	b7 23		lda [$0823],y	count_loop      LDA [ARGUMENT1],Y
.3a48b5	f0 03		beq $3a48ba	                BEQ count_done
.3a48b7	c8		iny		                INY
.3a48b8	80 f9		bra $3a48b3	                BRA count_loop
.3a48ba					count_done
.3a48ba	c2 20		rep #$20	            REP #$20
.3a48bc	98		tya		                TYA                         ; ARGUMENT2 := LENGTH - MCOUNT
.3a48bd	38		sec		                SEC
.3a48be	e5 8f		sbc $088f	                SBC MCOUNT
.3a48c0	30 09		bmi $3a48cb	                BMI index0                  ; if ARGUMENT2 < 0, set ARGUMENT2 := 0
.3a48c2	85 29		sta $0829	                STA ARGUMENT2
.3a48c4	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT2[23..16] := 0
.3a48c7	85 2b		sta $082b	                STA ARGUMENT2+2
.3a48c9	80 07		bra $3a48d2	                BRA slice
.3a48cb	a9 00 00	lda #$0000	index0          LDA #0                      ; 0 is the floor for the index
.3a48ce	85 29		sta $0829	                STA ARGUMENT2
.3a48d0	85 2b		sta $082b	                STA ARGUMENT2+2
.3a48d2					slice
.3a48d2	e2 20		sep #$20	            SEP #$20
.3a48d4	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a48d6	85 2d		sta $082d	            STA ARGTYPE2
.3a48d8	20 59 17	jsr $3a1759	            JSR STRSUBSTR
.3a48db					done
.3a48db	e2 20		sep #$20	            SEP #$20
.3a48dd	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a48e0	28		plp		                PLP
.3a48e1	60		rts		            RTS
.3a48e2					type_mismatch
.3a48e2	08		php		            PHP
.3a48e3	c2 20		rep #$20	            REP #$20
.3a48e5	48		pha		            PHA
.3a48e6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a48e9	5b		tcd		            TCD
.3a48ea	68		pla		            PLA
.3a48eb	28		plp		            PLP
.3a48ec	e2 20		sep #$20	            SEP #$20
.3a48ee	a9 04		lda #$04	            LDA #ERR_TYPE
.3a48f0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a48f4	c2 20		rep #$20	            REP #$20
.3a48f6	29 ff 00	and #$00ff	            AND #$00FF
.3a48f9	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a48fc	e2 20		sep #$20	            SEP #$20
.3a48fe	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4901					syntax_err
.3a4901	08		php		            PHP
.3a4902	c2 20		rep #$20	            REP #$20
.3a4904	48		pha		            PHA
.3a4905	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4908	5b		tcd		            TCD
.3a4909	68		pla		            PLA
.3a490a	28		plp		            PLP
.3a490b	e2 20		sep #$20	            SEP #$20
.3a490d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a490f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4913	c2 20		rep #$20	            REP #$20
.3a4915	29 ff 00	and #$00ff	            AND #$00FF
.3a4918	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a491b	e2 20		sep #$20	            SEP #$20
.3a491d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4920					range_err
.3a4920	08		php		            PHP
.3a4921	c2 20		rep #$20	            REP #$20
.3a4923	48		pha		            PHA
.3a4924	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4927	5b		tcd		            TCD
.3a4928	68		pla		            PLA
.3a4929	28		plp		            PLP
.3a492a	e2 20		sep #$20	            SEP #$20
.3a492c	a9 09		lda #$09	            LDA #ERR_RANGE
.3a492e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4932	c2 20		rep #$20	            REP #$20
.3a4934	29 ff 00	and #$00ff	            AND #$00FF
.3a4937	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a493a	e2 20		sep #$20	            SEP #$20
.3a493c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a493f					FN_LEFT
.3a493f	e2 20		sep #$20	            SEP #$20
.3a4941	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4943	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4946	08		php		                PHP
.3a4947	c2 30		rep #$30	            REP #$30
.3a4949	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a494c	e2 20		sep #$20	            SEP #$20
.3a494e	a5 27		lda $0827	                LDA ARGTYPE1
.3a4950	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4952	f0 03		beq $3a4957	                BEQ save_string
.3a4954	4c ab 49	jmp $3a49ab	                JMP type_mismatch           ; Type mismatch if it's not a string
.3a4957					save_string
.3a4957	c2 20		rep #$20	            REP #$20
.3a4959	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a495b	48		pha		                PHA
.3a495c	a5 23		lda $0823	                LDA ARGUMENT1
.3a495e	48		pha		                PHA
.3a495f	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a4962	e2 20		sep #$20	            SEP #$20
.3a4964	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a4966	c9 2c		cmp #$2c	                CMP #','
.3a4968	f0 03		beq $3a496d	                BEQ skip_comma
.3a496a	4c ca 49	jmp $3a49ca	                JMP syntax_err
.3a496d					skip_comma
.3a496d	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4970	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4973	e2 20		sep #$20	            SEP #$20
.3a4975	a5 27		lda $0827	                LDA ARGTYPE1
.3a4977	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4979	d0 30		bne $3a49ab	                BNE type_mismatch           ; Type mismatch if it's not an integer
.3a497b	c2 20		rep #$20	            REP #$20
.3a497d	a5 23		lda $0823	            LDA ARGUMENT1
.3a497f	85 8f		sta $088f	            STA MCOUNT
.3a4981	c2 20		rep #$20	            REP #$20
.3a4983	a9 00 00	lda #$0000	            LDA #<>0
.3a4986	85 29		sta $0829	            STA ARGUMENT2
.3a4988	a9 00 00	lda #$0000	            LDA #(0 >> 16)
.3a498b	85 2b		sta $082b	            STA ARGUMENT2+2
.3a498d	e2 20		sep #$20	            SEP #$20
.3a498f	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a4991	85 2d		sta $082d	            STA ARGTYPE2
.3a4993	c2 20		rep #$20	            REP #$20
.3a4995	68		pla		                PLA                         ; Recover the string pointer
.3a4996	85 23		sta $0823	                STA ARGUMENT1
.3a4998	68		pla		                PLA
.3a4999	85 25		sta $0825	                STA ARGUMENT1+2
.3a499b	e2 20		sep #$20	            SEP #$20
.3a499d	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a499f	85 27		sta $0827	            STA ARGTYPE1
.3a49a1	20 59 17	jsr $3a1759	            JSR STRSUBSTR
.3a49a4					done
.3a49a4	e2 20		sep #$20	            SEP #$20
.3a49a6	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a49a9	28		plp		                PLP
.3a49aa	60		rts		            RTS
.3a49ab					type_mismatch
.3a49ab	08		php		            PHP
.3a49ac	c2 20		rep #$20	            REP #$20
.3a49ae	48		pha		            PHA
.3a49af	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a49b2	5b		tcd		            TCD
.3a49b3	68		pla		            PLA
.3a49b4	28		plp		            PLP
.3a49b5	e2 20		sep #$20	            SEP #$20
.3a49b7	a9 04		lda #$04	            LDA #ERR_TYPE
.3a49b9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a49bd	c2 20		rep #$20	            REP #$20
.3a49bf	29 ff 00	and #$00ff	            AND #$00FF
.3a49c2	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a49c5	e2 20		sep #$20	            SEP #$20
.3a49c7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a49ca					syntax_err
.3a49ca	08		php		            PHP
.3a49cb	c2 20		rep #$20	            REP #$20
.3a49cd	48		pha		            PHA
.3a49ce	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a49d1	5b		tcd		            TCD
.3a49d2	68		pla		            PLA
.3a49d3	28		plp		            PLP
.3a49d4	e2 20		sep #$20	            SEP #$20
.3a49d6	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a49d8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a49dc	c2 20		rep #$20	            REP #$20
.3a49de	29 ff 00	and #$00ff	            AND #$00FF
.3a49e1	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a49e4	e2 20		sep #$20	            SEP #$20
.3a49e6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a49e9					range_err
.3a49e9	08		php		            PHP
.3a49ea	c2 20		rep #$20	            REP #$20
.3a49ec	48		pha		            PHA
.3a49ed	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a49f0	5b		tcd		            TCD
.3a49f1	68		pla		            PLA
.3a49f2	28		plp		            PLP
.3a49f3	e2 20		sep #$20	            SEP #$20
.3a49f5	a9 09		lda #$09	            LDA #ERR_RANGE
.3a49f7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a49fb	c2 20		rep #$20	            REP #$20
.3a49fd	29 ff 00	and #$00ff	            AND #$00FF
.3a4a00	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4a03	e2 20		sep #$20	            SEP #$20
.3a4a05	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4a08					FN_VAL
.3a4a08	e2 20		sep #$20	            SEP #$20
.3a4a0a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4a0c	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4a0f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4a12	c2 10		rep #$10	            REP #$10
.3a4a14	e2 20		sep #$20	            SEP #$20
.3a4a16	a5 27		lda $0827	                LDA ARGTYPE1
.3a4a18	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4a1a	d0 23		bne $3a4a3f	                BNE type_mismatch
.3a4a1c	c2 20		rep #$20	            REP #$20
.3a4a1e	a5 00		lda $0800	                LDA BIP             ; preserve BIP for later
.3a4a20	85 40		sta $0840	                STA SAVEBIP
.3a4a22	a5 02		lda $0802	                LDA BIP+2
.3a4a24	85 42		sta $0842	                STA SAVEBIP+2
.3a4a26	a5 23		lda $0823	                LDA ARGUMENT1       ; Temporarily point BIP to the string to parse
.3a4a28	85 00		sta $0800	                STA BIP
.3a4a2a	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4a2c	85 02		sta $0802	                STA BIP+2
.3a4a2e	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a4a31	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.3a4a33	85 00		sta $0800	                STA BIP
.3a4a35	a5 42		lda $0842	                LDA SAVEBIP+2
.3a4a37	85 02		sta $0802	                STA BIP+2
.3a4a39	e2 20		sep #$20	            SEP #$20
.3a4a3b	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4a3e	60		rts		            RTS
.3a4a3f					type_mismatch
.3a4a3f	08		php		            PHP
.3a4a40	c2 20		rep #$20	            REP #$20
.3a4a42	48		pha		            PHA
.3a4a43	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4a46	5b		tcd		            TCD
.3a4a47	68		pla		            PLA
.3a4a48	28		plp		            PLP
.3a4a49	e2 20		sep #$20	            SEP #$20
.3a4a4b	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4a4d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4a51	c2 20		rep #$20	            REP #$20
.3a4a53	29 ff 00	and #$00ff	            AND #$00FF
.3a4a56	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4a59	e2 20		sep #$20	            SEP #$20
.3a4a5b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4a5e					FN_STR
.3a4a5e	e2 20		sep #$20	            SEP #$20
.3a4a60	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4a62	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4a65	08		php		                PHP
.3a4a66	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4a69	c2 10		rep #$10	            REP #$10
.3a4a6b	e2 20		sep #$20	            SEP #$20
.3a4a6d	a5 27		lda $0827	                LDA ARGTYPE1
.3a4a6f	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4a71	d0 1a		bne $3a4a8d	                BNE type_mismatch
.3a4a73	20 60 15	jsr $3a1560	            JSR ITOS
.3a4a76	c2 20		rep #$20	            REP #$20
.3a4a78	a5 16		lda $0816	                LDA STRPTR          ; Prepare the return result
.3a4a7a	85 23		sta $0823	                STA ARGUMENT1
.3a4a7c	a5 18		lda $0818	                LDA STRPTR+2
.3a4a7e	85 25		sta $0825	                STA ARGUMENT1+2
.3a4a80	e2 20		sep #$20	            SEP #$20
.3a4a82	a9 02		lda #$02	                LDA #TYPE_STRING
.3a4a84	85 27		sta $0827	                STA ARGTYPE1
.3a4a86	28		plp		                PLP
.3a4a87	e2 20		sep #$20	            SEP #$20
.3a4a89	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4a8c	60		rts		            RTS
.3a4a8d					type_mismatch
.3a4a8d	08		php		            PHP
.3a4a8e	c2 20		rep #$20	            REP #$20
.3a4a90	48		pha		            PHA
.3a4a91	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4a94	5b		tcd		            TCD
.3a4a95	68		pla		            PLA
.3a4a96	28		plp		            PLP
.3a4a97	e2 20		sep #$20	            SEP #$20
.3a4a99	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4a9b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4a9f	c2 20		rep #$20	            REP #$20
.3a4aa1	29 ff 00	and #$00ff	            AND #$00FF
.3a4aa4	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4aa7	e2 20		sep #$20	            SEP #$20
.3a4aa9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4aac					FN_DEC
.3a4aac	e2 20		sep #$20	            SEP #$20
.3a4aae	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4ab0	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4ab3	08		php		                PHP
.3a4ab4	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4ab7	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a4aba	c2 20		rep #$20	            REP #$20
.3a4abc	64 0c		stz $080c	                STZ SCRATCH
.3a4abe	64 0e		stz $080e	                STZ SCRATCH+2
.3a4ac0	e2 30		sep #$30	            SEP #$30
.3a4ac2	a0 00		ldy #$00	                LDY #0
.3a4ac4	b7 23		lda [$0823],y	skip_loop       LDA [ARGUMENT1],Y
.3a4ac6	c9 20		cmp #$20	                CMP #CHAR_SP
.3a4ac8	f0 04		beq $3a4ace	                BEQ skip_char
.3a4aca	c9 24		cmp #$24	                CMP #'$'
.3a4acc	d0 03		bne $3a4ad1	                BNE loop
.3a4ace	c8		iny		skip_char       INY
.3a4acf	80 f3		bra $3a4ac4	                BRA skip_loop
.3a4ad1	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y   ; Check the character
.3a4ad3	20 0c 05	jsr $3a050c	            JSR ISHEX
.3a4ad6	90 1e		bcc $3a4af6	                BCC ret_result      ; No: return what we have so far
.3a4ad8	c2 20		rep #$20	            REP #$20
.3a4ada	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a4adc	26 0e		rol $080e	                ROL SCRATCH+2
.3a4ade	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a4ae0	26 0e		rol $080e	                ROL SCRATCH+2
.3a4ae2	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a4ae4	26 0e		rol $080e	                ROL SCRATCH+2
.3a4ae6	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a4ae8	26 0e		rol $080e	                ROL SCRATCH+2
.3a4aea	e2 20		sep #$20	            SEP #$20
.3a4aec	20 2d 05	jsr $3a052d	            JSR HEX2BIN
.3a4aef	05 0c		ora $080c	                ORA SCRATCH
.3a4af1	85 0c		sta $080c	                STA SCRATCH         ; And add it to the result
.3a4af3	c8		iny		                INY
.3a4af4	80 db		bra $3a4ad1	                BRA loop            ; And try the next character
.3a4af6					ret_result
.3a4af6	c2 20		rep #$20	            REP #$20
.3a4af8	a5 0c		lda $080c	                LDA SCRATCH         ; Return the result
.3a4afa	85 23		sta $0823	                STA ARGUMENT1
.3a4afc	a5 0e		lda $080e	                LDA SCRATCH+2
.3a4afe	85 25		sta $0825	                STA ARGUMENT1+2
.3a4b00	e2 20		sep #$20	            SEP #$20
.3a4b02	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a4b04	85 27		sta $0827	                STA ARGTYPE1
.3a4b06	28		plp		                PLP
.3a4b07	e2 20		sep #$20	            SEP #$20
.3a4b09	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4b0c	60		rts		            RTS
.3a4b0d					FN_HEX
.3a4b0d	e2 20		sep #$20	            SEP #$20
.3a4b0f	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4b11	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4b14	08		php		                PHP
.3a4b15	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4b18	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a4b1b	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a4b1e	e2 30		sep #$30	            SEP #$30
.3a4b20	a0 ff		ldy #$ff	                LDY #$FF            ; Terminate the string
.3a4b22	a9 00		lda #$00	                LDA #0
.3a4b24	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4b26	88		dey		                DEY
.3a4b27	a5 23		lda $0823	loop            LDA ARGUMENT1       ; Write the low digit
.3a4b29	29 0f		and #$0f	                AND #$0F
.3a4b2b	aa		tax		                TAX
.3a4b2c	bf 00 d0 3a	lda $3ad000,x	                LDA @lHEXDIGITS,X
.3a4b30	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4b32	88		dey		                DEY
.3a4b33	a5 23		lda $0823	                LDA ARGUMENT1       ; Write the high digit
.3a4b35	29 f0		and #$f0	                AND #$F0
.3a4b37	4a		lsr a		                LSR A
.3a4b38	4a		lsr a		                LSR A
.3a4b39	4a		lsr a		                LSR A
.3a4b3a	4a		lsr a		                LSR A
.3a4b3b	aa		tax		                TAX
.3a4b3c	bf 00 d0 3a	lda $3ad000,x	                LDA @lHEXDIGITS,X
.3a4b40	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4b42	88		dey		                DEY
.3a4b43	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Shift value by one byte
.3a4b45	85 23		sta $0823	                STA ARGUMENT1
.3a4b47	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4b49	85 24		sta $0824	                STA ARGUMENT1+1
.3a4b4b	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a4b4d	85 25		sta $0825	                STA ARGUMENT1+2
.3a4b4f	a9 00		lda #$00	                LDA #0
.3a4b51	85 26		sta $0826	                STA ARGUMENT1+3
.3a4b53	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the argument 0?
.3a4b55	d0 d0		bne $3a4b27	                BNE loop            ; No: keep converting
.3a4b57	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a4b59	d0 cc		bne $3a4b27	                BNE loop
.3a4b5b	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4b5d	d0 c8		bne $3a4b27	                BNE loop
.3a4b5f	98		tya		                TYA                 ; Get the index of the first free char
.3a4b60	38		sec		                SEC                 ; Add 1 to get to the first character of the string
.3a4b61	65 16		adc $0816	                ADC STRPTR          ; And add the whole thing to the temp string pointer
.3a4b63	85 23		sta $0823	                STA ARGUMENT1       ; And return it as the result
.3a4b65	a5 17		lda $0817	                LDA STRPTR+1
.3a4b67	85 24		sta $0824	                STA ARGUMENT1+1
.3a4b69	a5 18		lda $0818	                LDA STRPTR+2
.3a4b6b	85 25		sta $0825	                STA ARGUMENT1+2
.3a4b6d	a5 19		lda $0819	                LDA STRPTR+3
.3a4b6f	85 26		sta $0826	                STA ARGUMENT1+3
.3a4b71	a9 02		lda #$02	                LDA #TYPE_STRING    ; And make the type STRING
.3a4b73	85 27		sta $0827	                STA ARGTYPE1
.3a4b75	28		plp		                PLP
.3a4b76	e2 20		sep #$20	            SEP #$20
.3a4b78	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4b7b	60		rts		            RTS
.3a4b7c					type_mismatch
.3a4b7c	08		php		            PHP
.3a4b7d	c2 20		rep #$20	            REP #$20
.3a4b7f	48		pha		            PHA
.3a4b80	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4b83	5b		tcd		            TCD
.3a4b84	68		pla		            PLA
.3a4b85	28		plp		            PLP
.3a4b86	e2 20		sep #$20	            SEP #$20
.3a4b88	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4b8a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4b8e	c2 20		rep #$20	            REP #$20
.3a4b90	29 ff 00	and #$00ff	            AND #$00FF
.3a4b93	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4b96	e2 20		sep #$20	            SEP #$20
.3a4b98	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4b9b					FN_LEN
.3a4b9b	e2 20		sep #$20	            SEP #$20
.3a4b9d	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4b9f	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4ba2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4ba5	e2 20		sep #$20	            SEP #$20
.3a4ba7	a5 27		lda $0827	                LDA ARGTYPE1
.3a4ba9	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4bab	d0 1f		bne $3a4bcc	                BNE type_mismatch
.3a4bad	8b		phb		                PHB                 ; Set the data bank to the data bank of the string
.3a4bae	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4bb0	48		pha		                PHA
.3a4bb1	ab		plb		                PLB
.3a4bb2	c2 10		rep #$10	            REP #$10
.3a4bb4	a6 23		ldx $0823	                LDX ARGUMENT1       ; And point X to the string data
.3a4bb6	20 ed 15	jsr $3a15ed	            JSR STRLEN
.3a4bb9	ab		plb		                PLB                 ; Restore the old data bank
.3a4bba	84 23		sty $0823	                STY ARGUMENT1       ; Save the length to ARGUMENT1
.3a4bbc	c2 20		rep #$20	            REP #$20
.3a4bbe	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4bc0	e2 20		sep #$20	            SEP #$20
.3a4bc2	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the type to INTEGER
.3a4bc4	85 27		sta $0827	                STA ARGTYPE1
.3a4bc6	e2 20		sep #$20	            SEP #$20
.3a4bc8	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4bcb	60		rts		            RTS
.3a4bcc					type_mismatch
.3a4bcc	08		php		            PHP
.3a4bcd	c2 20		rep #$20	            REP #$20
.3a4bcf	48		pha		            PHA
.3a4bd0	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4bd3	5b		tcd		            TCD
.3a4bd4	68		pla		            PLA
.3a4bd5	28		plp		            PLP
.3a4bd6	e2 20		sep #$20	            SEP #$20
.3a4bd8	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4bda	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4bde	c2 20		rep #$20	            REP #$20
.3a4be0	29 ff 00	and #$00ff	            AND #$00FF
.3a4be3	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4be6	e2 20		sep #$20	            SEP #$20
.3a4be8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4beb					FN_PEEK
.3a4beb	e2 20		sep #$20	            SEP #$20
.3a4bed	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4bef	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4bf2	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4bf5	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a4bf8	e2 20		sep #$20	            SEP #$20
.3a4bfa	a5 25		lda $0825	                LDA ARGUMENT1+2                     ; Check to see if the request is to video memory
.3a4bfc	c9 b0		cmp #$b0	                CMP #`VRAM
.3a4bfe	90 10		bcc $3a4c10	                BLT simple_peek                     ; No: just do an ordinary PEEK
.3a4c00	c9 f0		cmp #$f0	                CMP #$F0
.3a4c02	b0 0c		bcs $3a4c10	                BGE simple_peek
.3a4c04	8b		phb		                PHB                                 ; DBR := bank
.3a4c05	48		pha		                PHA
.3a4c06	ab		plb		                PLB
.3a4c07	a6 23		ldx $0823	                LDX ARGUMENT1                       ; X := address
.3a4c09	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the low byte
.3a4c0d	ab		plb		                PLB
.3a4c0e	80 04		bra $3a4c14	                BRA save_result
.3a4c10					simple_peek
.3a4c10	e2 20		sep #$20	            SEP #$20
.3a4c12	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a4c14	85 23		sta $0823	save_result     STA ARGUMENT1
.3a4c16	64 24		stz $0824	                STZ ARGUMENT1+1
.3a4c18	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4c1a	64 26		stz $0826	                STZ ARGUMENT1+3
.3a4c1c	e2 20		sep #$20	            SEP #$20
.3a4c1e	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4c21	60		rts		            RTS
.3a4c22					type_mismatch
.3a4c22	08		php		            PHP
.3a4c23	c2 20		rep #$20	            REP #$20
.3a4c25	48		pha		            PHA
.3a4c26	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4c29	5b		tcd		            TCD
.3a4c2a	68		pla		            PLA
.3a4c2b	28		plp		            PLP
.3a4c2c	e2 20		sep #$20	            SEP #$20
.3a4c2e	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4c30	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4c34	c2 20		rep #$20	            REP #$20
.3a4c36	29 ff 00	and #$00ff	            AND #$00FF
.3a4c39	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4c3c	e2 20		sep #$20	            SEP #$20
.3a4c3e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4c41					FN_PEEKL
.3a4c41	e2 20		sep #$20	            SEP #$20
.3a4c43	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4c45	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4c48	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4c4b	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a4c4e	e2 20		sep #$20	            SEP #$20
.3a4c50	a5 25		lda $0825	                LDA ARGUMENT1+2                     ; Check to see if the request is to video memory
.3a4c52	c9 b0		cmp #$b0	                CMP #`VRAM
.3a4c54	90 22		bcc $3a4c78	                BLT simple_peek                     ; No: just do an ordinary PEEK
.3a4c56	c9 f0		cmp #$f0	                CMP #$F0
.3a4c58	b0 1e		bcs $3a4c78	                BGE simple_peek
.3a4c5a	8b		phb		                PHB                                 ; DBR := bank
.3a4c5b	48		pha		                PHA
.3a4c5c	ab		plb		                PLB
.3a4c5d	a6 23		ldx $0823	                LDX ARGUMENT1                       ; X := address
.3a4c5f	da		phx		                PHX
.3a4c60	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the low byte
.3a4c64	85 0c		sta $080c	                STA SCRATCH                         ; Save the low byte
.3a4c66	fa		plx		                PLX
.3a4c67	e8		inx		                INX
.3a4c68	da		phx		                PHX
.3a4c69	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the middle byte
.3a4c6d	85 0d		sta $080d	                STA SCRATCH+1                       ; Save the middle byte
.3a4c6f	fa		plx		                PLX
.3a4c70	e8		inx		                INX
.3a4c71	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the high byte
.3a4c75	ab		plb		                PLB
.3a4c76	80 0d		bra $3a4c85	                BRA save_result
.3a4c78					simple_peek
.3a4c78	c2 20		rep #$20	            REP #$20
.3a4c7a	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a4c7c	85 0c		sta $080c	                STA SCRATCH
.3a4c7e	e2 20		sep #$20	            SEP #$20
.3a4c80	a0 02 00	ldy #$0002	                LDY #2
.3a4c83	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y
.3a4c85	85 25		sta $0825	save_result     STA ARGUMENT1+2
.3a4c87	64 26		stz $0826	                STZ ARGUMENT1+3
.3a4c89	c2 20		rep #$20	            REP #$20
.3a4c8b	a5 0c		lda $080c	                LDA SCRATCH
.3a4c8d	85 23		sta $0823	                STA ARGUMENT1
.3a4c8f	e2 20		sep #$20	            SEP #$20
.3a4c91	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4c94	60		rts		            RTS
.3a4c95					type_mismatch
.3a4c95	08		php		            PHP
.3a4c96	c2 20		rep #$20	            REP #$20
.3a4c98	48		pha		            PHA
.3a4c99	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4c9c	5b		tcd		            TCD
.3a4c9d	68		pla		            PLA
.3a4c9e	28		plp		            PLP
.3a4c9f	e2 20		sep #$20	            SEP #$20
.3a4ca1	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4ca3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4ca7	c2 20		rep #$20	            REP #$20
.3a4ca9	29 ff 00	and #$00ff	            AND #$00FF
.3a4cac	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4caf	e2 20		sep #$20	            SEP #$20
.3a4cb1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4cb4					FN_PEEKW
.3a4cb4	e2 20		sep #$20	            SEP #$20
.3a4cb6	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4cb8	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4cbb	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4cbe	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a4cc1	e2 20		sep #$20	            SEP #$20
.3a4cc3	a5 25		lda $0825	                LDA ARGUMENT1+2                     ; Check to see if the request is to video memory
.3a4cc5	c9 b0		cmp #$b0	                CMP #`VRAM
.3a4cc7	90 1d		bcc $3a4ce6	                BLT simple_peek                     ; No: just do an ordinary PEEK
.3a4cc9	c9 f0		cmp #$f0	                CMP #$F0
.3a4ccb	b0 19		bcs $3a4ce6	                BGE simple_peek
.3a4ccd	8b		phb		                PHB                                 ; DBR := bank
.3a4cce	48		pha		                PHA
.3a4ccf	ab		plb		                PLB
.3a4cd0	a6 23		ldx $0823	                LDX ARGUMENT1                       ; X := address
.3a4cd2	da		phx		                PHX
.3a4cd3	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the low byte
.3a4cd7	85 23		sta $0823	                STA ARGUMENT1                       ; Save the low byte
.3a4cd9	fa		plx		                PLX
.3a4cda	e8		inx		                INX
.3a4cdb	22 44 11 00	jsl $001144	                JSL FK_READVRAM                     ; Fetch the high byte
.3a4cdf	85 24		sta $0824	                STA ARGUMENT1+1
.3a4ce1	ab		plb		                PLB
.3a4ce2	c2 20		rep #$20	            REP #$20
.3a4ce4	80 06		bra $3a4cec	                BRA done
.3a4ce6					simple_peek
.3a4ce6	c2 20		rep #$20	            REP #$20
.3a4ce8	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a4cea	85 23		sta $0823	                STA ARGUMENT1
.3a4cec	64 25		stz $0825	done            STZ ARGUMENT1+2
.3a4cee	e2 20		sep #$20	            SEP #$20
.3a4cf0	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4cf3	60		rts		            RTS
.3a4cf4					type_mismatch
.3a4cf4	08		php		            PHP
.3a4cf5	c2 20		rep #$20	            REP #$20
.3a4cf7	48		pha		            PHA
.3a4cf8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4cfb	5b		tcd		            TCD
.3a4cfc	68		pla		            PLA
.3a4cfd	28		plp		            PLP
.3a4cfe	e2 20		sep #$20	            SEP #$20
.3a4d00	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4d02	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4d06	c2 20		rep #$20	            REP #$20
.3a4d08	29 ff 00	and #$00ff	            AND #$00FF
.3a4d0b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4d0e	e2 20		sep #$20	            SEP #$20
.3a4d10	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4d13					FN_CHR
.3a4d13	e2 20		sep #$20	            SEP #$20
.3a4d15	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d17	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4d1a	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4d1d	e2 20		sep #$20	            SEP #$20
.3a4d1f	a5 27		lda $0827	                LDA ARGTYPE1
.3a4d21	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4d23	d0 24		bne $3a4d49	                BNE type_mismatch
.3a4d25	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a4d28	a5 23		lda $0823	                LDA ARGUMENT1       ; Get the numberic value
.3a4d2a	87 16		sta [$0816]	                STA [STRPTR]        ; And save it as the first character
.3a4d2c	a9 00		lda #$00	                LDA #0              ; Null terminate the string
.3a4d2e	a0 01 00	ldy #$0001	                LDY #1
.3a4d31	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4d33	c2 20		rep #$20	            REP #$20
.3a4d35	a5 16		lda $0816	                LDA STRPTR
.3a4d37	85 23		sta $0823	                STA ARGUMENT1
.3a4d39	a5 18		lda $0818	                LDA STRPTR+2
.3a4d3b	85 25		sta $0825	                STA ARGUMENT1+2
.3a4d3d	e2 20		sep #$20	            SEP #$20
.3a4d3f	a9 02		lda #$02	                LDA #TYPE_STRING
.3a4d41	85 27		sta $0827	                STA ARGTYPE1
.3a4d43	e2 20		sep #$20	            SEP #$20
.3a4d45	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4d48	60		rts		            RTS
.3a4d49					type_mismatch
.3a4d49	08		php		            PHP
.3a4d4a	c2 20		rep #$20	            REP #$20
.3a4d4c	48		pha		            PHA
.3a4d4d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4d50	5b		tcd		            TCD
.3a4d51	68		pla		            PLA
.3a4d52	28		plp		            PLP
.3a4d53	e2 20		sep #$20	            SEP #$20
.3a4d55	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4d57	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4d5b	c2 20		rep #$20	            REP #$20
.3a4d5d	29 ff 00	and #$00ff	            AND #$00FF
.3a4d60	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4d63	e2 20		sep #$20	            SEP #$20
.3a4d65	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4d68					FN_ASC
.3a4d68	e2 20		sep #$20	            SEP #$20
.3a4d6a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d6c	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4d6f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4d72	e2 20		sep #$20	            SEP #$20
.3a4d74	a5 27		lda $0827	                LDA ARGTYPE1
.3a4d76	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4d78	d0 14		bne $3a4d8e	                BNE type_mismatch
.3a4d7a	a7 23		lda [$0823]	                LDA [ARGUMENT1]     ; Get the character
.3a4d7c	85 23		sta $0823	                STA ARGUMENT1       ; Save its code to ARGUMENT1
.3a4d7e	64 24		stz $0824	                STZ ARGUMENT1+1
.3a4d80	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4d82	64 26		stz $0826	                STZ ARGUMENT1+3
.3a4d84	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the return type to integer
.3a4d86	85 27		sta $0827	                STA ARGTYPE1
.3a4d88	e2 20		sep #$20	            SEP #$20
.3a4d8a	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4d8d	60		rts		            RTS
.3a4d8e					type_mismatch
.3a4d8e	08		php		            PHP
.3a4d8f	c2 20		rep #$20	            REP #$20
.3a4d91	48		pha		            PHA
.3a4d92	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4d95	5b		tcd		            TCD
.3a4d96	68		pla		            PLA
.3a4d97	28		plp		            PLP
.3a4d98	e2 20		sep #$20	            SEP #$20
.3a4d9a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4d9c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4da0	c2 20		rep #$20	            REP #$20
.3a4da2	29 ff 00	and #$00ff	            AND #$00FF
.3a4da5	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4da8	e2 20		sep #$20	            SEP #$20
.3a4daa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4dad					FN_SPC
.3a4dad	e2 20		sep #$20	            SEP #$20
.3a4daf	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4db1	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4db4	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4db7	e2 20		sep #$20	            SEP #$20
.3a4db9	a5 27		lda $0827	                LDA ARGTYPE1
.3a4dbb	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4dbd	d0 39		bne $3a4df8	                BNE type_mismatch
.3a4dbf	e2 20		sep #$20	            SEP #$20
.3a4dc1	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.3a4dc3	d0 52		bne $3a4e17	                BNE err_limit
.3a4dc5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4dc7	d0 4e		bne $3a4e17	                BNE err_limit
.3a4dc9	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a4dcb	d0 4a		bne $3a4e17	                BNE err_limit
.3a4dcd	c2 10		rep #$10	            REP #$10
.3a4dcf	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a4dd2	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.3a4dd4	e2 20		sep #$20	            SEP #$20
.3a4dd6	a9 00		lda #$00	                LDA #0
.3a4dd8	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.3a4dda	88		dey		                DEY
.3a4ddb	30 07		bmi $3a4de4	                BMI done
.3a4ddd	a9 20		lda #$20	                LDA #CHAR_SP
.3a4ddf	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.3a4de1	88		dey		                DEY
.3a4de2	10 fb		bpl $3a4ddf	                BPL loop            ; And keep writing until we're done
.3a4de4	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.3a4de6	85 27		sta $0827	                STA ARGTYPE1
.3a4de8	c2 20		rep #$20	            REP #$20
.3a4dea	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.3a4dec	85 23		sta $0823	                STA ARGUMENT1
.3a4dee	a5 18		lda $0818	                LDA STRPTR+2
.3a4df0	85 25		sta $0825	                STA ARGUMENT1+2
.3a4df2	e2 20		sep #$20	            SEP #$20
.3a4df4	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4df7	60		rts		            RTS
.3a4df8					type_mismatch
.3a4df8	08		php		            PHP
.3a4df9	c2 20		rep #$20	            REP #$20
.3a4dfb	48		pha		            PHA
.3a4dfc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4dff	5b		tcd		            TCD
.3a4e00	68		pla		            PLA
.3a4e01	28		plp		            PLP
.3a4e02	e2 20		sep #$20	            SEP #$20
.3a4e04	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4e06	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4e0a	c2 20		rep #$20	            REP #$20
.3a4e0c	29 ff 00	and #$00ff	            AND #$00FF
.3a4e0f	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4e12	e2 20		sep #$20	            SEP #$20
.3a4e14	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4e17					err_limit
.3a4e17	08		php		            PHP
.3a4e18	c2 20		rep #$20	            REP #$20
.3a4e1a	48		pha		            PHA
.3a4e1b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4e1e	5b		tcd		            TCD
.3a4e1f	68		pla		            PLA
.3a4e20	28		plp		            PLP
.3a4e21	e2 20		sep #$20	            SEP #$20
.3a4e23	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4e25	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4e29	c2 20		rep #$20	            REP #$20
.3a4e2b	29 ff 00	and #$00ff	            AND #$00FF
.3a4e2e	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4e31	e2 20		sep #$20	            SEP #$20
.3a4e33	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4e36					FN_TAB
.3a4e36	e2 20		sep #$20	            SEP #$20
.3a4e38	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4e3a	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4e3d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4e40	e2 20		sep #$20	            SEP #$20
.3a4e42	a5 27		lda $0827	                LDA ARGTYPE1
.3a4e44	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4e46	d0 39		bne $3a4e81	                BNE type_mismatch
.3a4e48	e2 20		sep #$20	            SEP #$20
.3a4e4a	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.3a4e4c	d0 52		bne $3a4ea0	                BNE err_limit
.3a4e4e	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4e50	d0 4e		bne $3a4ea0	                BNE err_limit
.3a4e52	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a4e54	d0 4a		bne $3a4ea0	                BNE err_limit
.3a4e56	c2 10		rep #$10	            REP #$10
.3a4e58	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a4e5b	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.3a4e5d	e2 20		sep #$20	            SEP #$20
.3a4e5f	a9 00		lda #$00	                LDA #0
.3a4e61	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.3a4e63	88		dey		                DEY
.3a4e64	30 07		bmi $3a4e6d	                BMI done
.3a4e66	a9 09		lda #$09	                LDA #CHAR_TAB
.3a4e68	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.3a4e6a	88		dey		                DEY
.3a4e6b	10 fb		bpl $3a4e68	                BPL loop            ; And keep writing until we're done
.3a4e6d	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.3a4e6f	85 27		sta $0827	                STA ARGTYPE1
.3a4e71	c2 20		rep #$20	            REP #$20
.3a4e73	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.3a4e75	85 23		sta $0823	                STA ARGUMENT1
.3a4e77	a5 18		lda $0818	                LDA STRPTR+2
.3a4e79	85 25		sta $0825	                STA ARGUMENT1+2
.3a4e7b	e2 20		sep #$20	            SEP #$20
.3a4e7d	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4e80	60		rts		            RTS
.3a4e81					type_mismatch
.3a4e81	08		php		            PHP
.3a4e82	c2 20		rep #$20	            REP #$20
.3a4e84	48		pha		            PHA
.3a4e85	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4e88	5b		tcd		            TCD
.3a4e89	68		pla		            PLA
.3a4e8a	28		plp		            PLP
.3a4e8b	e2 20		sep #$20	            SEP #$20
.3a4e8d	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4e8f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4e93	c2 20		rep #$20	            REP #$20
.3a4e95	29 ff 00	and #$00ff	            AND #$00FF
.3a4e98	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4e9b	e2 20		sep #$20	            SEP #$20
.3a4e9d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4ea0					err_limit
.3a4ea0	08		php		            PHP
.3a4ea1	c2 20		rep #$20	            REP #$20
.3a4ea3	48		pha		            PHA
.3a4ea4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4ea7	5b		tcd		            TCD
.3a4ea8	68		pla		            PLA
.3a4ea9	28		plp		            PLP
.3a4eaa	e2 20		sep #$20	            SEP #$20
.3a4eac	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4eae	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4eb2	c2 20		rep #$20	            REP #$20
.3a4eb4	29 ff 00	and #$00ff	            AND #$00FF
.3a4eb7	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4eba	e2 20		sep #$20	            SEP #$20
.3a4ebc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4ebf					FN_ABS
.3a4ebf	e2 20		sep #$20	            SEP #$20
.3a4ec1	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4ec3	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4ec6	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4ec9	e2 20		sep #$20	            SEP #$20
.3a4ecb	a5 27		lda $0827	                LDA ARGTYPE1        ; Check the type
.3a4ecd	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4ecf	f0 23		beq $3a4ef4	                BEQ abs_int         ; If integer, get the absolute value of the integer
.3a4ed1	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a4ed3	f0 3e		beq $3a4f13	                BEQ abs_float       ; If float, get the absolute value of the float
.3a4ed5					type_err
.3a4ed5	08		php		            PHP
.3a4ed6	c2 20		rep #$20	            REP #$20
.3a4ed8	48		pha		            PHA
.3a4ed9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4edc	5b		tcd		            TCD
.3a4edd	68		pla		            PLA
.3a4ede	28		plp		            PLP
.3a4edf	e2 20		sep #$20	            SEP #$20
.3a4ee1	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4ee3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4ee7	c2 20		rep #$20	            REP #$20
.3a4ee9	29 ff 00	and #$00ff	            AND #$00FF
.3a4eec	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4eef	e2 20		sep #$20	            SEP #$20
.3a4ef1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4ef4					abs_int
.3a4ef4	c2 20		rep #$20	            REP #$20
.3a4ef6	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Is it positive already?
.3a4ef8	10 21		bpl $3a4f1b	                BPL done            ; Yes: we don't need to do anythign further
.3a4efa	49 ff ff	eor #$ffff	                EOR #$FFFF          ; Otherwise, take the two's compliment
.3a4efd	85 25		sta $0825	                STA ARGUMENT1+2     ; Of ARGUMENT1
.3a4eff	a5 23		lda $0823	                LDA ARGUMENT1
.3a4f01	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a4f04	18		clc		                CLC
.3a4f05	69 01 00	adc #$0001	                ADC #1
.3a4f08	85 23		sta $0823	                STA ARGUMENT1       ; And save it back to ARGUMENT1
.3a4f0a	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4f0c	69 00 00	adc #$0000	                ADC #0
.3a4f0f	85 25		sta $0825	                STA ARGUMENT1+2
.3a4f11	80 08		bra $3a4f1b	                BRA done
.3a4f13					abs_float
.3a4f13	e2 20		sep #$20	            SEP #$20
.3a4f15	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Just clear the sign bit
.3a4f17	29 7f		and #$7f	                AND #$7F
.3a4f19	85 26		sta $0826	                STA ARGUMENT1+3
.3a4f1b					done
.3a4f1b	e2 20		sep #$20	            SEP #$20
.3a4f1d	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4f20	60		rts		            RTS
.3a4f21					FN_SGN
.3a4f21	e2 20		sep #$20	            SEP #$20
.3a4f23	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4f25	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4f28	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4f2b	e2 20		sep #$20	            SEP #$20
.3a4f2d	a5 27		lda $0827	                LDA ARGTYPE1
.3a4f2f	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4f31	d0 25		bne $3a4f58	                BNE type_mismatch
.3a4f33	c2 20		rep #$20	            REP #$20
.3a4f35	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4f37	30 12		bmi $3a4f4b	                BMI is_negative     ; Negative: return -1
.3a4f39	d0 04		bne $3a4f3f	                BNE is_positive     ; Is it not 0? Then return 1
.3a4f3b	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the lower word 0?
.3a4f3d	f0 13		beq $3a4f52	                BEQ done            ; Yes: the whole thing is zero: return 0
.3a4f3f	a9 00 00	lda #$0000	is_positive     LDA #0              ; It's positive: return 1
.3a4f42	85 25		sta $0825	                STA ARGUMENT1+2
.3a4f44	a9 01 00	lda #$0001	                LDA #1
.3a4f47	85 23		sta $0823	                STA ARGUMENT1
.3a4f49	80 07		bra $3a4f52	                BRA done
.3a4f4b	a9 ff ff	lda #$ffff	is_negative     LDA #$FFFF          ; It's negative: return -1
.3a4f4e	85 25		sta $0825	                STA ARGUMENT1+2
.3a4f50	85 23		sta $0823	                STA ARGUMENT1
.3a4f52					done
.3a4f52	e2 20		sep #$20	            SEP #$20
.3a4f54	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4f57	60		rts		            RTS
.3a4f58					type_mismatch
.3a4f58	08		php		            PHP
.3a4f59	c2 20		rep #$20	            REP #$20
.3a4f5b	48		pha		            PHA
.3a4f5c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4f5f	5b		tcd		            TCD
.3a4f60	68		pla		            PLA
.3a4f61	28		plp		            PLP
.3a4f62	e2 20		sep #$20	            SEP #$20
.3a4f64	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4f66	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4f6a	c2 20		rep #$20	            REP #$20
.3a4f6c	29 ff 00	and #$00ff	            AND #$00FF
.3a4f6f	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a4f72	e2 20		sep #$20	            SEP #$20
.3a4f74	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4f77					FN_INT
.3a4f77	e2 20		sep #$20	            SEP #$20
.3a4f79	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4f7b	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4f7e	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4f81	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a4f84					done
.3a4f84	e2 20		sep #$20	            SEP #$20
.3a4f86	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4f89	60		rts		            RTS
.3a4f8a					FN_SIN
.3a4f8a	e2 20		sep #$20	            SEP #$20
.3a4f8c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4f8e	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4f91	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4f94	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a4f97	20 48 62	jsr $3a6248	            JSR FP_SIN
.3a4f9a					done
.3a4f9a	e2 20		sep #$20	            SEP #$20
.3a4f9c	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4f9f	60		rts		            RTS
.3a4fa0					FN_COS
.3a4fa0	e2 20		sep #$20	            SEP #$20
.3a4fa2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4fa4	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4fa7	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4faa	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a4fad	20 77 62	jsr $3a6277	            JSR FP_COS
.3a4fb0					done
.3a4fb0	e2 20		sep #$20	            SEP #$20
.3a4fb2	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4fb5	60		rts		            RTS
.3a4fb6					FN_TAN
.3a4fb6	e2 20		sep #$20	            SEP #$20
.3a4fb8	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4fba	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4fbd	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4fc0	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a4fc3	20 a6 62	jsr $3a62a6	            JSR FP_TAN
.3a4fc6					done
.3a4fc6	e2 20		sep #$20	            SEP #$20
.3a4fc8	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4fcb	60		rts		            RTS
.3a4fcc					FN_LN
.3a4fcc	e2 20		sep #$20	            SEP #$20
.3a4fce	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4fd0	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4fd3	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4fd6	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a4fd9	20 d4 62	jsr $3a62d4	            JSR FP_LN
.3a4fdc					done
.3a4fdc	e2 20		sep #$20	            SEP #$20
.3a4fde	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4fe1	60		rts		            RTS
.3a4fe2					FN_ACOS
.3a4fe2	e2 20		sep #$20	            SEP #$20
.3a4fe4	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4fe6	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4fe9	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a4fec	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a4fef	20 fd 63	jsr $3a63fd	            JSR FP_ACOS
.3a4ff2					done
.3a4ff2	e2 20		sep #$20	            SEP #$20
.3a4ff4	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a4ff7	60		rts		            RTS
.3a4ff8					FN_ASIN
.3a4ff8	e2 20		sep #$20	            SEP #$20
.3a4ffa	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4ffc	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a4fff	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a5002	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a5005	20 d3 63	jsr $3a63d3	            JSR FP_ASIN
.3a5008					done
.3a5008	e2 20		sep #$20	            SEP #$20
.3a500a	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a500d	60		rts		            RTS
.3a500e					FN_ATAN
.3a500e	e2 20		sep #$20	            SEP #$20
.3a5010	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a5012	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a5015	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a5018	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a501b	20 1f 64	jsr $3a641f	            JSR FP_ATAN
.3a501e					done
.3a501e	e2 20		sep #$20	            SEP #$20
.3a5020	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a5023	60		rts		            RTS
.3a5024					FN_EXP
.3a5024	e2 20		sep #$20	            SEP #$20
.3a5026	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a5028	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a502b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a502e	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a5031	20 b3 64	jsr $3a64b3	            JSR FP_EXP
.3a5034					done
.3a5034	e2 20		sep #$20	            SEP #$20
.3a5036	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a5039	60		rts		            RTS
.3a503a					FN_SQR
.3a503a	e2 20		sep #$20	            SEP #$20
.3a503c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a503e	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a5041	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a5044	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a5047	20 35 65	jsr $3a6535	            JSR FP_SQR
.3a504a					done
.3a504a	e2 20		sep #$20	            SEP #$20
.3a504c	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a504f	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\commands.s

.3a5050	00		brk #		CMD_MONITOR     BRK
.3a5051	ea		nop		                NOP
.3a5052	60		rts		            RTS
.3a5053					CMD_NEW
.3a5053	08		php		                PHP
.3a5054	0b		phd		                PHD
.3a5055	08		php		            PHP
.3a5056	c2 20		rep #$20	            REP #$20
.3a5058	48		pha		            PHA
.3a5059	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a505c	5b		tcd		            TCD
.3a505d	68		pla		            PLA
.3a505e	28		plp		            PLP
.3a505f	c2 30		rep #$30	            REP #$30
.3a5061	c2 20		rep #$20	            REP #$20
.3a5063	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a5066	85 d9		sta $08d9	            STA LASTLINE
.3a5068	e2 20		sep #$20	            SEP #$20
.3a506a	a9 36		lda #$36	            LDA #`BASIC_BOT
.3a506c	85 db		sta $08db	            STA LASTLINE+2
.3a506e	c2 30		rep #$30	            REP #$30
.3a5070	a9 00 00	lda #$0000	                LDA #0
.3a5073	a0 00 00	ldy #$0000	                LDY #LINE_LINK
.3a5076	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a5078	a0 02 00	ldy #$0002	                LDY #LINE_NUMBER
.3a507b	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a507d	a0 04 00	ldy #$0004	                LDY #LINE_TOKENS
.3a5080	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a5082	20 f3 20	jsr $3a20f3	            JSR CLRINTERP
.3a5085	2b		pld		                PLD
.3a5086	28		plp		                PLP
.3a5087	60		rts		            RTS
.3a5088					CMD_RUN
.3a5088	8b		phb		                PHB
.3a5089	08		php		                PHP
.3a508a	c2 20		rep #$20	            REP #$20
.3a508c	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT            ; Point to the first line of the program
.3a508f	85 1a		sta $081a	                STA CURLINE
.3a5091	a9 36 00	lda #$0036	                LDA #`BASIC_BOT
.3a5094	85 1c		sta $081c	                STA CURLINE + 2
.3a5096	20 f3 20	jsr $3a20f3	            JSR CLRINTERP
.3a5099	20 d3 23	jsr $3a23d3	            JSR EXECPROGRAM
.3a509c	28		plp		                PLP
.3a509d	ab		plb		                PLB
.3a509e	60		rts		            RTS
.3a509f					CMD_LIST
.3a509f	08		php		                PHP
.3a50a0	c2 20		rep #$20	            REP #$20
.3a50a2	64 55		stz $0855	                STZ MARG1               ; MARG1 is starting line number, default 0
.3a50a4	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.3a50a7	85 59		sta $0859	                STA MARG2               ; MARG2 is ending line number, default MAXINT
.3a50a9	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a50ac	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a50af	29 ff 00	and #$00ff	                AND #$00FF
.3a50b2	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.3a50b5	f0 2c		beq $3a50e3	                BEQ call_list           ; ... just list with the defaults
.3a50b7	c9 81 00	cmp #$0081	                CMP #TOK_MINUS          ; If just "- ###"...
.3a50ba	f0 1a		beq $3a50d6	                BEQ parse_endline       ; ... try to parse the end line number
.3a50bc	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a50bf	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a50c2	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG1
.3a50c4	85 55		sta $0855	                STA MARG1
.3a50c6	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a50c9	29 ff 00	and #$00ff	                AND #$00FF
.3a50cc	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.3a50cf	f0 12		beq $3a50e3	                BEQ call_list           ; ... just list with the defaults
.3a50d1	c9 81 00	cmp #$0081	                CMP #TOK_MINUS
.3a50d4	d0 2a		bne $3a5100	                BNE error               ; At this point, if not '-', it's a syntax error
.3a50d6					parse_endline
.3a50d6	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a50d9	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a50dc	20 d8 08	jsr $3a08d8	            JSR PARSEINT
.3a50df	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG2
.3a50e1	85 59		sta $0859	                STA MARG2
.3a50e3	a5 1c		lda $081c	call_list       LDA CURLINE+2           ; Save CURLINE
.3a50e5	48		pha		                PHA
.3a50e6	a5 1a		lda $081a	                LDA CURLINE
.3a50e8	48		pha		                PHA
.3a50e9	a5 02		lda $0802	                LDA BIP+2               ; Save BIP
.3a50eb	48		pha		                PHA
.3a50ec	a5 00		lda $0800	                LDA BIP
.3a50ee	48		pha		                PHA
.3a50ef	20 8b 18	jsr $3a188b	            JSR LISTPROG
.3a50f2	68		pla		                PLA
.3a50f3	85 00		sta $0800	                STA BIP
.3a50f5	68		pla		                PLA
.3a50f6	85 02		sta $0802	                STA BIP+2
.3a50f8	68		pla		                PLA
.3a50f9	85 1a		sta $081a	                STA CURLINE
.3a50fb	68		pla		                PLA
.3a50fc	85 1c		sta $081c	                STA CURLINE+2
.3a50fe	28		plp		                PLP
.3a50ff	60		rts		            RTS
.3a5100					error
.3a5100	08		php		            PHP
.3a5101	c2 20		rep #$20	            REP #$20
.3a5103	48		pha		            PHA
.3a5104	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5107	5b		tcd		            TCD
.3a5108	68		pla		            PLA
.3a5109	28		plp		            PLP
.3a510a	e2 20		sep #$20	            SEP #$20
.3a510c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a510e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5112	c2 20		rep #$20	            REP #$20
.3a5114	29 ff 00	and #$00ff	            AND #$00FF
.3a5117	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a511a	e2 20		sep #$20	            SEP #$20
.3a511c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\variables.s

>08e1					NEXTVAR         .long ?         ; Pointer to the the next available byte for variable bindings
>08e4					VARIABLES       .long ?         ; Pointer to the most recently allocated variable
>08e7					TOFIND          .long ?         ; Pointer to the variable name to find
>08ea					TOFINDTYPE      .byte ?         ; The type to find
.0000					BINDING
>0000					TYPE            .fill 1                 ; The type of the data stored in the variable
>0001					NAME            .fill VAR_NAME_SIZE     ; The name of the variable
>0009					VALUE           .fill 4                 ; The data stored in the variable
>000d					NEXT            .fill 3                 ; The pointer to the next allocated variable of this type
.3a511f					INITVARS
.3a511f	08		php		                PHP
.3a5120	08		php		            PHP
.3a5121	c2 20		rep #$20	            REP #$20
.3a5123	48		pha		            PHA
.3a5124	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5127	5b		tcd		            TCD
.3a5128	68		pla		            PLA
.3a5129	28		plp		            PLP
.3a512a	c2 20		rep #$20	            REP #$20
.3a512c	64 e4		stz $08e4	                STZ VARIABLES           ; Clear the pointer to the variables
.3a512e	64 e7		stz $08e7	                STZ TOFIND
.3a5130	e2 20		sep #$20	            SEP #$20
.3a5132	64 e6		stz $08e6	                STZ VARIABLES+2
.3a5134	64 e9		stz $08e9	                STZ TOFIND+2
.3a5136	64 ea		stz $08ea	                STZ TOFINDTYPE
.3a5138	c2 20		rep #$20	            REP #$20
.3a513a	38		sec		                SEC                     ; Compute the position of the first variable
.3a513b	a5 d9		lda $08d9	                LDA LASTLINE
.3a513d	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.3a5140	85 e1		sta $08e1	                STA NEXTVAR
.3a5142	e2 20		sep #$20	            SEP #$20
.3a5144	a5 db		lda $08db	                LDA LASTLINE+2
.3a5146	69 00		adc #$00	                ADC #0
.3a5148	85 e3		sta $08e3	                STA NEXTVAR+2
.3a514a	28		plp		                PLP
.3a514b	60		rts		            RTS
.3a514c					ISVARCHAR
.3a514c	c9 5f		cmp #$5f	                CMP #'_'            ; Check if it's an underscore
.3a514e	f0 1a		beq $3a516a	                BEQ return_true     ; Yes: return true
.3a5150	c9 3a		cmp #$3a	                CMP #'9'+1          ; Check if its in [0-9]
.3a5152	b0 04		bcs $3a5158	                BGE else1           ; No: check something else
.3a5154	c9 30		cmp #$30	                CMP #'0'
.3a5156	b0 12		bcs $3a516a	                BGE return_true     ; Yes: return true
.3a5158	c9 5b		cmp #$5b	else1           CMP #'Z'+1          ; Check if its in [A-Z]
.3a515a	b0 04		bcs $3a5160	                BGE not_upper       ; No: check lower case
.3a515c	c9 41		cmp #$41	                CMP #'A'
.3a515e	b0 0a		bcs $3a516a	                BGE return_true     ; Yes: return true
.3a5160	c9 7b		cmp #$7b	not_upper       CMP #'z'+1          ; Check if its in [a-z]
.3a5162	b0 04		bcs $3a5168	                BGE return_false    ; No: return false
.3a5164	c9 61		cmp #$61	                CMP #'a'
.3a5166	b0 02		bcs $3a516a	                BGE return_true     ; Yes: return true
.3a5168	18		clc		return_false    CLC
.3a5169	60		rts		            RTS
.3a516a	38		sec		return_true     SEC
.3a516b	60		rts		            RTS
.3a516c					VARNAMECMP
.3a516c	08		php		                PHP
.3a516d	e2 20		sep #$20	            SEP #$20
.3a516f	c2 10		rep #$10	            REP #$10
.3a5171	a0 00 00	ldy #$0000	                LDY #0
.3a5174	b7 0c		lda [$080c],y	cmp_loop        LDA [SCRATCH],Y         ; Check the character in the variable name
.3a5176	f0 0a		beq $3a5182	                BEQ is_end
.3a5178	d7 e7		cmp [$08e7],y	                CMP [TOFIND],Y          ; Compare the character to the one TOFIND
.3a517a	d0 13		bne $3a518f	                BNE return_false        ; Not equal? Then this is not a match
.3a517c	c8		iny		                INY
.3a517d	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a5180	d0 f2		bne $3a5174	                BNE cmp_loop
.3a5182	b7 e7		lda [$08e7],y	is_end          LDA [TOFIND],Y          ; Check the character in the name to find
.3a5184	20 56 05	jsr $3a0556	            JSR TOUPPERA
.3a5187	20 4c 51	jsr $3a514c	            JSR ISVARCHAR
.3a518a	b0 03		bcs $3a518f	                BCS return_false        ; YES: we do not have a match
.3a518c					return_true
.3a518c	28		plp		                PLP
.3a518d	38		sec		                SEC
.3a518e	60		rts		            RTS
.3a518f					return_false
.3a518f	28		plp		                PLP
.3a5190	18		clc		                CLC
.3a5191	60		rts		            RTS
.3a5192					VAR_FIND
.3a5192	08		php		                PHP
.3a5193	e2 20		sep #$20	            SEP #$20
.3a5195	c2 10		rep #$10	            REP #$10
.3a5197	a0 00 00	ldy #$0000	                LDY #0
.3a519a	a2 00 00	ldx #$0000	                LDX #0
.3a519d	b7 e7		lda [$08e7],y	upper_loop      LDA [TOFIND],Y          ; Get a character
.3a519f	f0 0b		beq $3a51ac	                BEQ done_upper
.3a51a1	20 56 05	jsr $3a0556	            JSR TOUPPERA
.3a51a4	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; And save it to the temp
.3a51a8	c8		iny		                INY
.3a51a9	e8		inx		                INX
.3a51aa	80 f1		bra $3a519d	                BRA upper_loop          ; Go back for another
.3a51ac	a9 00		lda #$00	done_upper      LDA #0
.3a51ae	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; NULL terminate the temporary string
.3a51b2	c2 20		rep #$20	            REP #$20
.3a51b4	a9 00 4e	lda #$4e00	                LDA #<>TEMPBUF          ; Make the temporary string the string
.3a51b7	85 e7		sta $08e7	                STA TOFIND              ; the variable name to find
.3a51b9	e2 20		sep #$20	            SEP #$20
.3a51bb	a9 00		lda #$00	                LDA #`TEMPBUF
.3a51bd	85 e9		sta $08e9	                STA TOFIND+2
.3a51bf	c2 20		rep #$20	            REP #$20
.3a51c1	a5 e4		lda $08e4	                LDA VARIABLES           ; Point INDEX to the first variable to check
.3a51c3	85 08		sta $0808	                STA INDEX
.3a51c5	d0 06		bne $3a51cd	                BNE set_index_h         ; If the low word is not 0, copy the high byte
.3a51c7	e2 20		sep #$20	            SEP #$20
.3a51c9	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a51cb	f0 4d		beq $3a521a	                BEQ not_found           ; If it is, we have no variables yet.
.3a51cd					set_index_h
.3a51cd	e2 20		sep #$20	            SEP #$20
.3a51cf	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a51d1	85 0a		sta $080a	                STA INDEX+2
.3a51d3	a5 ea		lda $08ea	check_binding   LDA TOFINDTYPE
.3a51d5	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Get the type of the variable
.3a51d8	d7 08		cmp [$0808],y	                CMP [INDEX],Y
.3a51da	d0 17		bne $3a51f3	                BNE check_next          ; If it's not a match, check the next binding
.3a51dc	c2 20		rep #$20	            REP #$20
.3a51de	18		clc		                CLC
.3a51df	a5 08		lda $0808	                LDA INDEX
.3a51e1	69 01 00	adc #$0001	                ADC #BINDING.NAME
.3a51e4	85 0c		sta $080c	                STA SCRATCH
.3a51e6	e2 20		sep #$20	            SEP #$20
.3a51e8	a5 0a		lda $080a	                LDA INDEX+2
.3a51ea	69 00		adc #$00	                ADC #0
.3a51ec	85 0e		sta $080e	                STA SCRATCH+2
.3a51ee	20 6c 51	jsr $3a516c	            JSR VARNAMECMP
.3a51f1	b0 2a		bcs $3a521d	                BCS found               ; If they match, return that we've found the variable
.3a51f3	a0 0d 00	ldy #$000d	check_next      LDY #BINDING.NEXT       ; SCRATCH := [INDEX].NEXT
.3a51f6	c2 20		rep #$20	            REP #$20
.3a51f8	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a51fa	85 0c		sta $080c	                STA SCRATCH
.3a51fc	c8		iny		                INY
.3a51fd	c8		iny		                INY
.3a51fe	e2 20		sep #$20	            SEP #$20
.3a5200	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a5202	85 0e		sta $080e	                STA SCRATCH+2
.3a5204	d0 06		bne $3a520c	                BNE set_index           ; If SCRATCH == 0, the variable wasn't found
.3a5206	c2 20		rep #$20	            REP #$20
.3a5208	a5 0c		lda $080c	                LDA SCRATCH
.3a520a	f0 0e		beq $3a521a	                BEQ not_found
.3a520c					set_index
.3a520c	c2 20		rep #$20	            REP #$20
.3a520e	a5 0c		lda $080c	                LDA SCRATCH
.3a5210	85 08		sta $0808	                STA INDEX
.3a5212	e2 20		sep #$20	            SEP #$20
.3a5214	a5 0e		lda $080e	                LDA SCRATCH+2
.3a5216	85 0a		sta $080a	                STA INDEX+2
.3a5218	80 b9		bra $3a51d3	                BRA check_binding       ; And check this next variable for a match
.3a521a					not_found
.3a521a	28		plp		                PLP
.3a521b	18		clc		                CLC
.3a521c	60		rts		            RTS
.3a521d					found
.3a521d	28		plp		                PLP
.3a521e	38		sec		                SEC
.3a521f	60		rts		            RTS
.3a5220					VAR_REF
.3a5220	08		php		                PHP
.3a5221	20 92 51	jsr $3a5192	            JSR VAR_FIND
.3a5224	b0 1f		bcs $3a5245	                BCS found
.3a5226	08		php		            PHP
.3a5227	c2 20		rep #$20	            REP #$20
.3a5229	48		pha		            PHA
.3a522a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a522d	5b		tcd		            TCD
.3a522e	68		pla		            PLA
.3a522f	28		plp		            PLP
.3a5230	e2 20		sep #$20	            SEP #$20
.3a5232	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a5234	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5238	c2 20		rep #$20	            REP #$20
.3a523a	29 ff 00	and #$00ff	            AND #$00FF
.3a523d	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a5240	e2 20		sep #$20	            SEP #$20
.3a5242	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5245					found
.3a5245	c2 30		rep #$30	            REP #$30
.3a5247	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a524a	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a524c	85 23		sta $0823	                STA ARGUMENT1
.3a524e	c8		iny		                INY
.3a524f	c8		iny		                INY
.3a5250	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a5252	85 25		sta $0825	                STA ARGUMENT1+2
.3a5254	e2 20		sep #$20	            SEP #$20
.3a5256	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE
.3a5259	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a525b	85 27		sta $0827	                STA ARGTYPE1
.3a525d	28		plp		done            PLP
.3a525e	60		rts		            RTS
.3a525f					VAR_ALLOC
.3a525f	08		php		                PHP
.3a5260	c2 20		rep #$20	            REP #$20
.3a5262	18		clc		                CLC                     ; Compute extent of the binding
.3a5263	a5 e1		lda $08e1	                LDA NEXTVAR
.3a5265	69 10 00	adc #$0010	                ADC #size(BINDING)
.3a5268	85 08		sta $0808	                STA INDEX
.3a526a	e2 20		sep #$20	            SEP #$20
.3a526c	a5 e3		lda $08e3	                LDA NEXTVAR+2
.3a526e	69 00		adc #$00	                ADC #0
.3a5270	85 0a		sta $080a	                STA INDEX+2
.3a5272	c5 bc		cmp $08bc	                CMP HEAP+2              ; Check to see if HEAP > INDEX
.3a5274	90 27		bcc $3a529d	                BLT has_room
.3a5276	c2 20		rep #$20	            REP #$20
.3a5278	a5 08		lda $0808	                LDA INDEX
.3a527a	c5 ba		cmp $08ba	                CMP HEAP
.3a527c	90 1f		bcc $3a529d	                BLT has_room
.3a527e	08		php		            PHP
.3a527f	c2 20		rep #$20	            REP #$20
.3a5281	48		pha		            PHA
.3a5282	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5285	5b		tcd		            TCD
.3a5286	68		pla		            PLA
.3a5287	28		plp		            PLP
.3a5288	e2 20		sep #$20	            SEP #$20
.3a528a	a9 09		lda #$09	            LDA #ERR_RANGE
.3a528c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5290	c2 20		rep #$20	            REP #$20
.3a5292	29 ff 00	and #$00ff	            AND #$00FF
.3a5295	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a5298	e2 20		sep #$20	            SEP #$20
.3a529a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a529d					has_room
.3a529d	c2 20		rep #$20	            REP #$20
.3a529f	a5 e1		lda $08e1	                LDA NEXTVAR             ; Yes: we can allocate the variable
.3a52a1	85 c0		sta $08c0	                STA CURRBLOCK           ; Point CURRBLOCK to it
.3a52a3	e2 20		sep #$20	            SEP #$20
.3a52a5	a5 e3		lda $08e3	                LDA NEXTVAR+2
.3a52a7	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a52a9	c2 20		rep #$20	            REP #$20
.3a52ab	a5 08		lda $0808	                LDA INDEX               ; And point NEXTVAR to the next possible spot
.3a52ad	85 e1		sta $08e1	                STA NEXTVAR
.3a52af	e2 20		sep #$20	            SEP #$20
.3a52b1	a5 0a		lda $080a	                LDA INDEX+2
.3a52b3	85 e3		sta $08e3	                STA NEXTVAR+2
.3a52b5	28		plp		                PLP
.3a52b6	60		rts		            RTS
.3a52b7					VAR_CREATE
.3a52b7	08		php		                PHP
.3a52b8	e2 20		sep #$20	            SEP #$20
.3a52ba	a5 27		lda $0827	                LDA ARGTYPE1            ; Validate that our types match
.3a52bc	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.3a52be	f0 33		beq $3a52f3	                BEQ chk_string          ; If so: check to see if it's a string
.3a52c0	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable type
.3a52c2	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's INTEGER
.3a52c4	d0 05		bne $3a52cb	                BNE chk_float
.3a52c6	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a52c9	80 2f		bra $3a52fa	                BRA alloc_binding       ; And bind the variable
.3a52cb	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; If it's FLOAT
.3a52cd	d0 05		bne $3a52d4	                BNE type_error
.3a52cf	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a52d2	80 26		bra $3a52fa	                BRA alloc_binding       ; And bind the variable
.3a52d4					type_error
.3a52d4	08		php		            PHP
.3a52d5	c2 20		rep #$20	            REP #$20
.3a52d7	48		pha		            PHA
.3a52d8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a52db	5b		tcd		            TCD
.3a52dc	68		pla		            PLA
.3a52dd	28		plp		            PLP
.3a52de	e2 20		sep #$20	            SEP #$20
.3a52e0	a9 04		lda #$04	            LDA #ERR_TYPE
.3a52e2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a52e6	c2 20		rep #$20	            REP #$20
.3a52e8	29 ff 00	and #$00ff	            AND #$00FF
.3a52eb	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a52ee	e2 20		sep #$20	            SEP #$20
.3a52f0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a52f3	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING        ; Is it a string?
.3a52f5	d0 03		bne $3a52fa	                BNE alloc_binding       ; No: just go ahead and bind it
.3a52f7	20 f3 16	jsr $3a16f3	            JSR STRCPY
.3a52fa					alloc_binding
.3a52fa	c2 10		rep #$10	            REP #$10
.3a52fc	20 5f 52	jsr $3a525f	            JSR VAR_ALLOC
.3a52ff	c2 30		rep #$30	            REP #$30
.3a5301	18		clc		                CLC
.3a5302	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a5304	69 01 00	adc #$0001	                ADC #BINDING.NAME
.3a5307	85 08		sta $0808	                STA INDEX
.3a5309	e2 20		sep #$20	            SEP #$20
.3a530b	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a530d	69 00		adc #$00	                ADC #0
.3a530f	85 0a		sta $080a	                STA INDEX+2
.3a5311	a0 00 00	ldy #$0000	                LDY #0                  ; Ensure that the name field is blank
.3a5314	a9 00		lda #$00	                LDA #0
.3a5316	97 08		sta [$0808],y	blank_loop      STA [INDEX],Y
.3a5318	c8		iny		                INY
.3a5319	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a531c	d0 f8		bne $3a5316	                BNE blank_loop
.3a531e	a0 00 00	ldy #$0000	                LDY #0
.3a5321	b7 e7		lda [$08e7],y	name_loop       LDA [TOFIND],Y          ; Copy TOFIND to the NAME field
.3a5323	f0 10		beq $3a5335	                BEQ set_type
.3a5325	20 56 05	jsr $3a0556	            JSR TOUPPERA
.3a5328	20 4c 51	jsr $3a514c	            JSR ISVARCHAR
.3a532b	90 08		bcc $3a5335	                BCC set_type
.3a532d	97 08		sta [$0808],y	                STA [INDEX],Y
.3a532f	c8		iny		                INY
.3a5330	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a5333	d0 ec		bne $3a5321	                BNE name_loop
.3a5335					set_type
.3a5335	c2 20		rep #$20	            REP #$20
.3a5337	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE      ; Copy the value to the variable
.3a533a	a5 23		lda $0823	                LDA ARGUMENT1
.3a533c	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a533e	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5340	c8		iny		                INY
.3a5341	c8		iny		                INY
.3a5342	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5344	a5 e4		lda $08e4	                LDA VARIABLES           ; Point NEXT to the current top of variables
.3a5346	a0 0d 00	ldy #$000d	                LDY #BINDING.NEXT
.3a5349	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a534b	c8		iny		                INY
.3a534c	c8		iny		                INY
.3a534d	e2 20		sep #$20	            SEP #$20
.3a534f	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a5351	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5353	c2 20		rep #$20	            REP #$20
.3a5355	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a5357	85 e4		sta $08e4	                STA VARIABLES
.3a5359	e2 20		sep #$20	            SEP #$20
.3a535b	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a535d	85 e6		sta $08e6	                STA VARIABLES+2
.3a535f	e2 20		sep #$20	            SEP #$20
.3a5361	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Set the type of the variable
.3a5364	a5 27		lda $0827	                LDA ARGTYPE1
.3a5366	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5368	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is it a string?
.3a536a	f0 02		beq $3a536e	                BEQ set_ref             ; Yes: add a reference count to it
.3a536c	28		plp		done            PLP
.3a536d	60		rts		            RTS
.3a536e					set_ref
.3a536e	c2 20		rep #$20	            REP #$20
.3a5370	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the a heap allocated value
.3a5372	85 c0		sta $08c0	                STA CURRBLOCK
.3a5374	e2 20		sep #$20	            SEP #$20
.3a5376	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5378	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a537a	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a537d	20 24 13	jsr $3a1324	            JSR HEAP_ADDREF
.3a5380	80 ea		bra $3a536c	                BRA done
.3a5382					VAR_SET
.3a5382	08		php		                PHP
.3a5383	c2 30		rep #$30	            REP #$30
.3a5385	a5 e4		lda $08e4	                LDA VARIABLES          ; If VARIABLES = 0, use VAR_CREATE
.3a5387	d0 06		bne $3a538f	                BNE use_find
.3a5389	e2 20		sep #$20	            SEP #$20
.3a538b	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a538d	f0 05		beq $3a5394	                BEQ use_create
.3a538f					use_find
.3a538f	20 92 51	jsr $3a5192	            JSR VAR_FIND
.3a5392	b0 05		bcs $3a5399	                BCS found
.3a5394					use_create
.3a5394	20 b7 52	jsr $3a52b7	            JSR VAR_CREATE
.3a5397	80 4e		bra $3a53e7	                BRA done
.3a5399					found
.3a5399	e2 20		sep #$20	            SEP #$20
.3a539b	a5 27		lda $0827	                LDA ARGTYPE1            ; Do the types match?
.3a539d	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.3a539f	f0 33		beq $3a53d4	                BEQ chk_string          ; Yes: check to see if it's string
.3a53a1	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable
.3a53a3	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; Is it INTEGER?
.3a53a5	d0 05		bne $3a53ac	                BNE chk_float
.3a53a7	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a53aa	80 2c		bra $3a53d8	                BRA set_val
.3a53ac	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; Is it FLOAT?
.3a53ae	d0 05		bne $3a53b5	                BNE type_error          ; No: throw an error
.3a53b0	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a53b3	80 23		bra $3a53d8	                BRA set_val
.3a53b5					type_error
.3a53b5	08		php		            PHP
.3a53b6	c2 20		rep #$20	            REP #$20
.3a53b8	48		pha		            PHA
.3a53b9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a53bc	5b		tcd		            TCD
.3a53bd	68		pla		            PLA
.3a53be	28		plp		            PLP
.3a53bf	e2 20		sep #$20	            SEP #$20
.3a53c1	a9 04		lda #$04	            LDA #ERR_TYPE
.3a53c3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a53c7	c2 20		rep #$20	            REP #$20
.3a53c9	29 ff 00	and #$00ff	            AND #$00FF
.3a53cc	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a53cf	e2 20		sep #$20	            SEP #$20
.3a53d1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a53d4	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING
.3a53d6	f0 11		beq $3a53e9	                BEQ set_string          ; Yes: set the string value of the variable
.3a53d8					set_val
.3a53d8	c2 30		rep #$30	            REP #$30
.3a53da	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a53dd	a5 23		lda $0823	                LDA ARGUMENT1
.3a53df	97 08		sta [$0808],y	                STA [INDEX],Y
.3a53e1	c8		iny		                INY
.3a53e2	c8		iny		                INY
.3a53e3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a53e5	97 08		sta [$0808],y	                STA [INDEX],Y
.3a53e7					done
.3a53e7	28		plp		                PLP
.3a53e8	60		rts		            RTS
.3a53e9					set_string
.3a53e9	20 f3 16	jsr $3a16f3	            JSR STRCPY
.3a53ec	a0 09 00	ldy #$0009	set_ref         LDY #BINDING.VALUE      ; Set CURRBLOCK to the current string value
.3a53ef	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a53f1	85 c0		sta $08c0	                STA CURRBLOCK
.3a53f3	c8		iny		                INY
.3a53f4	c8		iny		                INY
.3a53f5	e2 20		sep #$20	            SEP #$20
.3a53f7	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a53f9	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a53fb	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a53fe	20 43 13	jsr $3a1343	            JSR HEAP_REMREF
.3a5401	e2 20		sep #$20	            SEP #$20
.3a5403	a5 27		lda $0827	                LDA ARGTYPE1
.3a5405	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is the new value a string?
.3a5407	f0 02		beq $3a540b	                BEQ add_ref             ; Yes: add a reference to it
.3a5409	80 cd		bra $3a53d8	                BRA set_val             ; No: go back to set the value... this probably shouldn't happen
.3a540b					add_ref
.3a540b	c2 20		rep #$20	            REP #$20
.3a540d	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the new string value
.3a540f	85 c0		sta $08c0	                STA CURRBLOCK
.3a5411	e2 20		sep #$20	            SEP #$20
.3a5413	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5415	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a5417	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a541a	20 24 13	jsr $3a1324	            JSR HEAP_ADDREF
.3a541d	80 b9		bra $3a53d8	                BRA set_val
.3a541f					VAR_FINDNAME
.3a541f	08		php		                PHP
.3a5420	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a5423	e2 20		sep #$20	            SEP #$20
.3a5425	a7 00		lda [$0800]	                LDA [BIP]           ; Get the first character
.3a5427	20 e2 04	jsr $3a04e2	            JSR ISALPHA
.3a542a	90 42		bcc $3a546e	                BCC not_found
.3a542c	c2 20		rep #$20	            REP #$20
.3a542e	a5 00		lda $0800	                LDA BIP
.3a5430	85 e7		sta $08e7	                STA TOFIND
.3a5432	e2 20		sep #$20	            SEP #$20
.3a5434	a5 02		lda $0802	                LDA BIP+2
.3a5436	85 e9		sta $08e9	                STA TOFIND+2
.3a5438					loop
.3a5438	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a543b	a7 00		lda [$0800]	                LDA [BIP]
.3a543d	f0 0d		beq $3a544c	                BEQ is_float        ; If it's EOL, the variable is a float
.3a543f	c9 24		cmp #$24	                CMP #'$'            ; If it's $, the variable is a string
.3a5441	f0 14		beq $3a5457	                BEQ is_string
.3a5443	c9 25		cmp #$25	                CMP #'%'            ; If it's %, the variable is an integer
.3a5445	f0 09		beq $3a5450	                BEQ is_integer
.3a5447	20 4c 51	jsr $3a514c	            JSR ISVARCHAR
.3a544a	b0 ec		bcs $3a5438	                BCS loop            ; Check the next one
.3a544c	a9 01		lda #$01	is_float        LDA #TYPE_FLOAT     ; Otherwise it's a float
.3a544e	80 0c		bra $3a545c	                BRA set_type
.3a5450					is_integer
.3a5450	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a5453	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a5455	80 05		bra $3a545c	                BRA set_type
.3a5457					is_string
.3a5457	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a545a	a9 02		lda #$02	                LDA #TYPE_STRING
.3a545c	85 ea		sta $08ea	set_type        STA TOFINDTYPE
.3a545e	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a5461	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it "("?
.3a5463	d0 06		bne $3a546b	                BNE done            ; No: we're done... it's just a scalar variable
.3a5465	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Yes: this is an array reference
.3a5467	09 80		ora #$80	                ORA #$80            ; ... turn on the "Array of..." bit
.3a5469	85 ea		sta $08ea	                STA TOFINDTYPE
.3a546b					done
.3a546b	28		plp		                PLP
.3a546c	38		sec		                SEC
.3a546d	60		rts		            RTS
.3a546e	28		plp		not_found       PLP
.3a546f	18		clc		                CLC
.3a5470	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\integers.s

.3a5471					OP_INT_ADD
.3a5471	08		php		            PHP
.3a5472	c2 20		rep #$20	            REP #$20
.3a5474	18		clc		            CLC
.3a5475	a5 23		lda $0823	            LDA ARGUMENT1
.3a5477	65 29		adc $0829	            ADC ARGUMENT2
.3a5479	85 23		sta $0823	            STA ARGUMENT1
.3a547b	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a547d	65 2b		adc $082b	            ADC ARGUMENT2+2
.3a547f	85 25		sta $0825	            STA ARGUMENT1+2
.3a5481	28		plp		            PLP
.3a5482	60		rts		            RTS
.3a5483					OP_INT_SUB
.3a5483	08		php		            PHP
.3a5484	c2 20		rep #$20	            REP #$20
.3a5486	38		sec		            SEC
.3a5487	a5 23		lda $0823	            LDA ARGUMENT1
.3a5489	e5 29		sbc $0829	            SBC ARGUMENT2
.3a548b	85 23		sta $0823	            STA ARGUMENT1
.3a548d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a548f	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a5491	85 25		sta $0825	            STA ARGUMENT1+2
.3a5493	28		plp		            PLP
.3a5494	60		rts		            RTS
.3a5495					OP_INT_MUL
.3a5495	08		php		            PHP
.3a5496					locals
>0001					L_SIGN      .word ?
>0003					L_RESULT    .dword ?
>0007					            .dword ?
.3a5496	c2 20		rep #$20	            REP #$20
.3a5498	3b		tsc		            TSC
.3a5499	38		sec		            SEC
.3a549a	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.3a549d	1b		tcs		            TCS
.3a549e	c2 30		rep #$30	            REP #$30
.3a54a0	a9 00 00	lda #$0000	            LDA #0                  ; Start by assuming positive numbers
.3a54a3	83 01		sta $01,s	            STA L_SIGN
.3a54a5	83 03		sta $03,s	            STA L_RESULT            ; Clear result
.3a54a7	83 05		sta $05,s	            STA L_RESULT+2
.3a54a9	83 07		sta $07,s	            STA L_RESULT+4
.3a54ab	83 09		sta $09,s	            STA L_RESULT+6
.3a54ad	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Ensure ARGUMENT1 is positive
.3a54af	10 18		bpl $3a54c9	            BPL chk_sign2
.3a54b1	a9 00 80	lda #$8000	            LDA #$8000              ; Record that ARGUMENT1 is negative
.3a54b4	83 01		sta $01,s	            STA L_SIGN
.3a54b6	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Take the two's complement of ARGUMENT1
.3a54b8	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a54bb	85 25		sta $0825	            STA ARGUMENT1+2
.3a54bd	a5 23		lda $0823	            LDA ARGUMENT1
.3a54bf	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a54c2	1a		inc a		            INC A
.3a54c3	85 23		sta $0823	            STA ARGUMENT1
.3a54c5	d0 02		bne $3a54c9	            BNE chk_sign2
.3a54c7	e6 25		inc $0825	            INC ARGUMENT1+2
.3a54c9	a5 2b		lda $082b	chk_sign2   LDA ARGUMENT2+2         ; Ensure ARGUMENT2 is positive
.3a54cb	10 1a		bpl $3a54e7	            BPL chk_over
.3a54cd	a3 01		lda $01,s	            LDA L_SIGN              ; Flip the sign
.3a54cf	49 00 80	eor #$8000	            EOR #$8000
.3a54d2	83 01		sta $01,s	            STA L_SIGN
.3a54d4	a5 2b		lda $082b	            LDA ARGUMENT2+2         ; Take the two's complement of ARGUMENT2
.3a54d6	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a54d9	85 2b		sta $082b	            STA ARGUMENT2+2
.3a54db	a5 29		lda $0829	            LDA ARGUMENT2
.3a54dd	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a54e0	1a		inc a		            INC A
.3a54e1	85 29		sta $0829	            STA ARGUMENT2
.3a54e3	d0 02		bne $3a54e7	            BNE chk_over
.3a54e5	e6 2b		inc $082b	            INC ARGUMENT2+2
.3a54e7					chk_over
.3a54e7	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a54e9	f0 04		beq $3a54ef	            BEQ do_mult
.3a54eb	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a54ed	d0 5a		bne $3a5549	            BNE overflow
.3a54ef					do_mult
.3a54ef	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*D
.3a54f1	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a54f5	a5 29		lda $0829	            LDA ARGUMENT2
.3a54f7	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a54fb	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a54ff	83 03		sta $03,s	            STA L_RESULT
.3a5501	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a5505	83 05		sta $05,s	            STA L_RESULT+2
.3a5507	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Calculate A*D << 16 + B*D
.3a5509	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a550d	a5 29		lda $0829	            LDA ARGUMENT2
.3a550f	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a5513	18		clc		            CLC
.3a5514	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a5518	63 05		adc $05,s	            ADC L_RESULT+2
.3a551a	83 05		sta $05,s	            STA L_RESULT+2
.3a551c	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a5520	63 07		adc $07,s	            ADC L_RESULT+4
.3a5522	83 07		sta $07,s	            STA L_RESULT+4
.3a5524	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*C << 16 + A*D << 16 + B*D
.3a5526	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a552a	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a552c	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a5530	18		clc		            CLC
.3a5531	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a5535	63 05		adc $05,s	            ADC L_RESULT+2
.3a5537	83 05		sta $05,s	            STA L_RESULT+2
.3a5539	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a553d	63 07		adc $07,s	            ADC L_RESULT+4
.3a553f	83 07		sta $07,s	            STA L_RESULT+4
.3a5541	a3 07		lda $07,s	            LDA L_RESULT+4
.3a5543	f0 23		beq $3a5568	            BEQ no_overflow
.3a5545	a3 09		lda $09,s	            LDA L_RESULT+6
.3a5547	f0 1f		beq $3a5568	            BEQ no_overflow
.3a5549					overflow
.3a5549	08		php		            PHP
.3a554a	c2 20		rep #$20	            REP #$20
.3a554c	48		pha		            PHA
.3a554d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5550	5b		tcd		            TCD
.3a5551	68		pla		            PLA
.3a5552	28		plp		            PLP
.3a5553	e2 20		sep #$20	            SEP #$20
.3a5555	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a5557	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a555b	c2 20		rep #$20	            REP #$20
.3a555d	29 ff 00	and #$00ff	            AND #$00FF
.3a5560	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a5563	e2 20		sep #$20	            SEP #$20
.3a5565	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5568					no_overflow
.3a5568	c2 30		rep #$30	            REP #$30
.3a556a	a3 01		lda $01,s	            LDA L_SIGN              ; Check the sign
.3a556c	10 16		bpl $3a5584	            BPL ret_result          ; If positive: just return the result
.3a556e	a3 05		lda $05,s	            LDA L_RESULT+2          ; Compute the two's complement of the result
.3a5570	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a5573	83 05		sta $05,s	            STA L_RESULT+2
.3a5575	a3 03		lda $03,s	            LDA L_RESULT
.3a5577	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a557a	1a		inc a		            INC A
.3a557b	83 03		sta $03,s	            STA L_RESULT
.3a557d	d0 05		bne $3a5584	            BNE ret_result
.3a557f	a3 05		lda $05,s	            LDA L_RESULT+2
.3a5581	1a		inc a		            INC A
.3a5582	83 05		sta $05,s	            STA L_RESULT+2
.3a5584					ret_result
.3a5584	a3 03		lda $03,s	            LDA L_RESULT
.3a5586	85 23		sta $0823	            STA ARGUMENT1
.3a5588	a3 05		lda $05,s	            LDA L_RESULT+2
.3a558a	85 25		sta $0825	            STA ARGUMENT1+2
.3a558c	c2 20		rep #$20	            REP #$20
.3a558e	3b		tsc		            TSC
.3a558f	18		clc		            CLC
.3a5590	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.3a5593	1b		tcs		            TCS
.3a5594	28		plp		            PLP
.3a5595	60		rts		            RTS
.3a5596					OP_INT_LT
.3a5596	08		php		            PHP
.3a5597	c2 20		rep #$20	            REP #$20
.3a5599	a5 23		lda $0823	            LDA ARGUMENT1
.3a559b	c5 29		cmp $0829	            CMP ARGUMENT2
.3a559d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a559f	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a55a1	50 03		bvc $3a55a6	            BVC skip_eor
.3a55a3	49 00 80	eor #$8000	            EOR #$8000
.3a55a6	30 06		bmi $3a55ae	skip_eor    BMI ret_true
.3a55a8	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a55aa	64 25		stz $0825	            STZ ARGUMENT1+2
.3a55ac	80 07		bra $3a55b5	            BRA done
.3a55ae	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a55b1	85 23		sta $0823	            STA ARGUMENT1
.3a55b3	85 25		sta $0825	            STA ARGUMENT1+2
.3a55b5	28		plp		done        PLP
.3a55b6	60		rts		            RTS
.3a55b7					OP_INT_GT
.3a55b7	08		php		            PHP
.3a55b8	c2 20		rep #$20	            REP #$20
.3a55ba	a5 23		lda $0823	            LDA ARGUMENT1
.3a55bc	c5 29		cmp $0829	            CMP ARGUMENT2
.3a55be	d0 0c		bne $3a55cc	            BNE test_fully
.3a55c0	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a55c2	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a55c4	d0 06		bne $3a55cc	            BNE test_fully
.3a55c6	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a55c8	64 25		stz $0825	            STZ ARGUMENT1+2
.3a55ca	80 16		bra $3a55e2	            BRA done
.3a55cc	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.3a55ce	c5 23		cmp $0823	            CMP ARGUMENT1
.3a55d0	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a55d2	e5 25		sbc $0825	            SBC ARGUMENT1+2
.3a55d4	50 03		bvc $3a55d9	            BVC skip_eor
.3a55d6	49 00 80	eor #$8000	            EOR #$8000
.3a55d9	10 eb		bpl $3a55c6	skip_eor    BPL ret_false
.3a55db	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a55de	85 23		sta $0823	            STA ARGUMENT1
.3a55e0	85 25		sta $0825	            STA ARGUMENT1+2
.3a55e2	28		plp		done        PLP
.3a55e3	60		rts		            RTS
.3a55e4					OP_INT_EQ
.3a55e4	08		php		            PHP
.3a55e5	c2 20		rep #$20	            REP #$20
.3a55e7	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a55e9	c5 25		cmp $0825	            CMP ARGUMENT1+2
.3a55eb	d0 0f		bne $3a55fc	            BNE ret_false
.3a55ed	a5 29		lda $0829	            LDA ARGUMENT2
.3a55ef	c5 23		cmp $0823	            CMP ARGUMENT1
.3a55f1	d0 09		bne $3a55fc	            BNE ret_false
.3a55f3	a9 ff ff	lda #$ffff	            LDA #$FFFF
.3a55f6	85 23		sta $0823	            STA ARGUMENT1
.3a55f8	85 25		sta $0825	            STA ARGUMENT1+2
.3a55fa	80 04		bra $3a5600	            BRA done
.3a55fc	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a55fe	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5600	28		plp		done        PLP
.3a5601	60		rts		            RTS
.3a5602					OP_INT_NE
.3a5602	08		php		            PHP
.3a5603	c2 20		rep #$20	            REP #$20
.3a5605	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a5607	c5 25		cmp $0825	            CMP ARGUMENT1+2
.3a5609	d0 0c		bne $3a5617	            BNE ret_true
.3a560b	a5 29		lda $0829	            LDA ARGUMENT2
.3a560d	c5 23		cmp $0823	            CMP ARGUMENT1
.3a560f	d0 06		bne $3a5617	            BNE ret_true
.3a5611	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5613	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5615	80 07		bra $3a561e	            BRA done
.3a5617	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a561a	85 23		sta $0823	            STA ARGUMENT1
.3a561c	85 25		sta $0825	            STA ARGUMENT1+2
.3a561e	28		plp		done        PLP
.3a561f	60		rts		            RTS
.3a5620					OP_INT_GTE
.3a5620	08		php		            PHP
.3a5621	c2 20		rep #$20	            REP #$20
.3a5623	a5 23		lda $0823	            LDA ARGUMENT1
.3a5625	c5 29		cmp $0829	            CMP ARGUMENT2
.3a5627	d0 0f		bne $3a5638	            BNE test_fully
.3a5629	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a562b	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a562d	d0 09		bne $3a5638	            BNE test_fully
.3a562f	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a5632	85 23		sta $0823	            STA ARGUMENT1
.3a5634	85 25		sta $0825	            STA ARGUMENT1+2
.3a5636	80 13		bra $3a564b	            BRA done
.3a5638	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.3a563a	c5 23		cmp $0823	            CMP ARGUMENT1
.3a563c	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a563e	e5 25		sbc $0825	            SBC ARGUMENT1+2
.3a5640	50 03		bvc $3a5645	            BVC skip_eor
.3a5642	49 00 80	eor #$8000	            EOR #$8000
.3a5645	30 e8		bmi $3a562f	skip_eor    BMI ret_true
.3a5647	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5649	64 25		stz $0825	            STZ ARGUMENT1+2
.3a564b	28		plp		done        PLP
.3a564c	60		rts		            RTS
.3a564d					OP_INT_LTE
.3a564d	08		php		            PHP
.3a564e	c2 20		rep #$20	            REP #$20
.3a5650	a5 23		lda $0823	            LDA ARGUMENT1
.3a5652	c5 29		cmp $0829	            CMP ARGUMENT2
.3a5654	d0 0f		bne $3a5665	            BNE test_fully
.3a5656	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5658	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a565a	d0 09		bne $3a5665	            BNE test_fully
.3a565c	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a565f	85 23		sta $0823	            STA ARGUMENT1
.3a5661	85 25		sta $0825	            STA ARGUMENT1+2
.3a5663	80 13		bra $3a5678	            BRA done
.3a5665	a5 23		lda $0823	test_fully  LDA ARGUMENT1
.3a5667	c5 29		cmp $0829	            CMP ARGUMENT2
.3a5669	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a566b	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a566d	50 03		bvc $3a5672	            BVC skip_eor
.3a566f	49 00 80	eor #$8000	            EOR #$8000
.3a5672	30 e8		bmi $3a565c	skip_eor    BMI ret_true
.3a5674	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5676	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5678	28		plp		done        PLP
.3a5679	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\floats.s


;******  Processing file: src\C256/floats.s


;******  Processing file: src\C256/fp_math_defs.s

=$afe200				FP_MATH_CTRL0 = $AFE200         ; Read/write
=$08					FP_MATH_CTRL0_ADD = $08         ; 0: Substraction - 1: Addition
=$01					FP_CTRL0_CONV_0 = %00000001     ; Input 0 should be converted from 24.12 fixed point to floating point
=$02					FP_CTRL0_CONV_1 = %00000010     ; Input 1 should be converted from 24.12 fixed point to floating point
=$00					FP_ADD_IN0_MUX0 = %00000000     ; Adder input #0 is the output of MUX0
=$10					FP_ADD_IN0_MUX1 = %00010000     ; Adder input #0 is the output of MUX1
=$20					FP_ADD_IN0_MULT = %00100000     ; Adder input #0 is the output of the multiplier
=$30					FP_ADD_IN0_DIV  = %00110000     ; Adder input #0 is the output of the divider
=$00					FP_ADD_IN1_MUX0 = %00000000     ; Adder input #1 is the output of MUX0
=$40					FP_ADD_IN1_MUX1 = %01000000     ; Adder input #1 is the output of MUX1
=$80					FP_ADD_IN1_MULT = %10000000     ; Adder input #1 is the output of the multiplier
=$c0					FP_ADD_IN1_DIV  = %11000000     ; Adder input #1 is the output of the divider
=$afe201				FP_MATH_CTRL1 = $AFE201
=$00					FP_OUT_MULT = %00000000         ; Output is from the multiplier
=$01					FP_OUT_DIV  = %00000001         ; Output is from the divider
=$02					FP_OUT_ADD  = %00000010         ; Output is from the adder/subtracter
=$03					FP_OUT_ONE  = %00000011         ; Output is the constant '1.0'
=$afe202				FP_MATH_CTRL2 = $AFE202         ; Not Used - Reserved
=$afe203				FP_MATH_CTRL3 = $AFE203         ; Not Used - Reserved
=$afe204				FP_MATH_MULT_STAT = $AFE204     ; Status of the multiplier
=$01					FP_MULT_STAT_NAN  = $01         ; (NAN) Not a Number Status
=$02					FP_MULT_STAT_OVF  = $02         ; Overflow
=$04					FP_MULT_STAT_UDF  = $04         ; Underflow
=$08					FP_MULT_STAT_ZERO = $08         ; Zero
=$afe205				FP_MATH_DIV_STAT  = $AFE205     ; Status of the divider
=$01					FP_DIV_STAT_NAN       = $01     ; Not a number Status
=$02					FP_DIV_STAT_OVF       = $02     ; Overflow
=$04					FP_DIV_STAT_UDF       = $04     ; Underflow
=$08					FP_DIV_STAT_ZERO      = $08     ; Zero
=$10					FP_DIV_STAT_DIVBYZERO = $10     ; Division by Zero
=$afe206				FP_MATH_ADD_STAT  = $AFE206     ; Status of the adder/subtracter
=$01					FP_ADD_STAT_NAN  = $01          ; Not a number Status
=$02					FP_ADD_STAT_OVF  = $02          ; Overflow
=$04					FP_ADD_STAT_UDF  = $04          ; Underflow
=$08					FP_ADD_STAT_ZERO = $08          ; Zero
=$afe207				FP_MATH_CONV_STAT = $AFE207     ; Status of the fixed <=> float converters
=$01					FP_CONV_STAT_NAN  = $01         ; Not a number Status
=$02					FP_CONV_STAT_OVF  = $02         ; Overflow
=$04					FP_CONV_STAT_UDF  = $04         ; Underflow
=$afe208				FP_MATH_INPUT0_LL = $AFE208
=$afe209				FP_MATH_INPUT0_LH = $AFE209
=$afe20a				FP_MATH_INPUT0_HL = $AFE20A
=$afe20b				FP_MATH_INPUT0_HH = $AFE20B
=$afe20c				FP_MATH_INPUT1_LL = $AFE20C
=$afe20d				FP_MATH_INPUT1_LH = $AFE20D
=$afe20e				FP_MATH_INPUT1_HL = $AFE20E
=$afe20f				FP_MATH_INPUT1_HH = $AFE20F
=$afe208				FP_MATH_OUTPUT_FP_LL = $AFE208
=$afe209				FP_MATH_OUTPUT_FP_LH = $AFE209
=$afe20a				FP_MATH_OUTPUT_FP_HL = $AFE20A
=$afe20b				FP_MATH_OUTPUT_FP_HH = $AFE20B
=$afe20c				FP_MATH_OUTPUT_FIXED_LL = $AFE20C
=$afe20d				FP_MATH_OUTPUT_FIXED_LH = $AFE20D
=$afe20e				FP_MATH_OUTPUT_FIXED_HL = $AFE20E
=$afe20f				FP_MATH_OUTPUT_FIXED_HH = $AFE20F

;******  Return to file: src\C256/floats.s


;******  Processing file: src\C256/math_cop.s

.3a567a					UINT_DIV_A_X
.3a567a	08		php		                    PHP
.3a567b	c2 20		rep #$20	            REP #$20
.3a567d	8f 12 01 00	sta $000112	                    STA @l UNSIGNED_DIV_NUM_LO
.3a5681	8a		txa		                    TXA
.3a5682	8f 10 01 00	sta $000110	                    STA @l UNSIGNED_DIV_DEM_LO
.3a5686	af 16 01 00	lda $000116	                    LDA @l UNSIGNED_DIV_REM_LO
.3a568a	aa		tax		                    TAX
.3a568b	af 14 01 00	lda $000114	                    LDA @l UNSIGNED_DIV_QUO_LO
.3a568f	28		plp		                    PLP
.3a5690	60		rts		            RTS

;******  Return to file: src\C256/floats.s

.3a5691					FIXINT_TO_FP
.3a5691	08		php		                    PHP
.3a5692	e2 20		sep #$20	            SEP #$20
.3a5694	a9 03		lda #$03	                    LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a5696	8f 00 e2 af	sta $afe200	                    STA @l FP_MATH_CTRL0
.3a569a	a9 00		lda #$00	                    LDA #FP_OUT_MULT
.3a569c	8f 01 e2 af	sta $afe201	                    STA @l FP_MATH_CTRL1
.3a56a0	c2 20		rep #$20	            REP #$20
.3a56a2	a5 23		lda $0823	                    LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a56a4	8f 08 e2 af	sta $afe208	                    STA @l FP_MATH_INPUT0_LL
.3a56a8	a5 25		lda $0825	                    LDA ARGUMENT1+2
.3a56aa	8f 0a e2 af	sta $afe20a	                    STA @l FP_MATH_INPUT0_HL
.3a56ae	a9 00 00	lda #$0000	                    LDA #0
.3a56b1	8f 0c e2 af	sta $afe20c	                    STA @l FP_MATH_INPUT1_LL    ; ARGUMENT2 = 0100 0000 = 4096 in 20:12
.3a56b5	a9 00 01	lda #$0100	                    LDA #$0100
.3a56b8	8f 0e e2 af	sta $afe20e	                    STA @l FP_MATH_INPUT1_HL
.3a56bc	ea		nop		                    NOP
.3a56bd	ea		nop		                    NOP
.3a56be	ea		nop		                    NOP
.3a56bf	ea		nop		                    NOP
.3a56c0	ea		nop		                    NOP
.3a56c1	ea		nop		                    NOP
.3a56c2	af 08 e2 af	lda $afe208	                    LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a56c6	85 23		sta $0823	                    STA ARGUMENT1
.3a56c8	af 0a e2 af	lda $afe20a	                    LDA @l FP_MATH_OUTPUT_FP_HL
.3a56cc	85 25		sta $0825	                    STA ARGUMENT1+2
.3a56ce	a9 01 00	lda #$0001	                    LDA #TYPE_FLOAT
.3a56d1	85 27		sta $0827	                    STA ARGTYPE1
.3a56d3	28		plp		                    PLP
.3a56d4	60		rts		            RTS
.3a56d5	08		php		OP_FP_SUB       PHP
.3a56d6	e2 20		sep #$20	            SEP #$20
.3a56d8	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a56da	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a56de	80 09		bra $3a56e9	                BRA FP_ADD_SUB
.3a56e0	08		php		OP_FP_ADD       PHP
.3a56e1	e2 20		sep #$20	            SEP #$20
.3a56e3	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a56e5	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a56e9	a9 02		lda #$02	FP_ADD_SUB      LDA #FP_OUT_ADD
.3a56eb	8f 01 e2 af	sta $afe201	                STA @lFP_MATH_CTRL1
.3a56ef	c2 20		rep #$20	            REP #$20
.3a56f1	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a56f3	8f 08 e2 af	sta $afe208	                STA @lFP_MATH_INPUT0_LL
.3a56f7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a56f9	8f 0a e2 af	sta $afe20a	                STA @lFP_MATH_INPUT0_HL
.3a56fd	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a56ff	8f 0c e2 af	sta $afe20c	                STA @lFP_MATH_INPUT1_LL
.3a5703	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a5705	8f 0e e2 af	sta $afe20e	                STA @lFP_MATH_INPUT1_HL
.3a5709	ea		nop		                NOP
.3a570a	ea		nop		                NOP
.3a570b	ea		nop		                NOP
.3a570c	e2 20		sep #$20	            SEP #$20
.3a570e	af 06 e2 af	lda $afe206	                LDA @lFP_MATH_ADD_STAT      ; Check the status of the addition
.3a5712	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.3a5714	d0 10		bne $3a5726	                BNE fp_add_error            ; If an issue was raise, process the math error
.3a5716	c2 20		rep #$20	            REP #$20
.3a5718	af 08 e2 af	lda $afe208	                LDA @lFP_MATH_OUTPUT_FP_LL  ; Retrieve the results into ARGUMENT1
.3a571c	85 23		sta $0823	                STA ARGUMENT1
.3a571e	af 0a e2 af	lda $afe20a	                LDA @lFP_MATH_OUTPUT_FP_HL
.3a5722	85 25		sta $0825	                STA ARGUMENT1+2
.3a5724	28		plp		fp_add_done     PLP
.3a5725	60		rts		            RTS
.3a5726					fp_add_error
.3a5726	20 c1 57	jsr $3a57c1	            JSR FP_MATH_ERROR
.3a5729	80 f9		bra $3a5724	                BRA fp_add_done
.3a572b	08		php		OP_FP_DIV       PHP
.3a572c	e2 20		sep #$20	            SEP #$20
.3a572e	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a5730	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5734	a9 00		lda #$00	                LDA #0
.3a5736	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a573a	c2 20		rep #$20	            REP #$20
.3a573c	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a573e	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5742	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5744	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5748	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a574a	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a574e	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a5750	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5754	ea		nop		                NOP
.3a5755	ea		nop		                NOP
.3a5756	ea		nop		                NOP
.3a5757	e2 20		sep #$20	            SEP #$20
.3a5759	af 05 e2 af	lda $afe205	                LDA @l FP_MATH_DIV_STAT     ; Check the status of the addition
.3a575d	29 17		and #$17	                AND #%00010111              ; Filter out the ZERO status
.3a575f	d0 10		bne $3a5771	                BNE fp_div_error            ; If an issue was raise, process the math error
.3a5761	c2 20		rep #$20	            REP #$20
.3a5763	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a5767	85 23		sta $0823	                STA ARGUMENT1
.3a5769	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a576d	85 25		sta $0825	                STA ARGUMENT1+2
.3a576f	28		plp		fp_div_done     PLP
.3a5770	60		rts		            RTS
.3a5771					fp_div_error
.3a5771	20 c1 57	jsr $3a57c1	            JSR FP_MATH_ERROR
.3a5774	80 f9		bra $3a576f	                BRA fp_div_done
.3a5776	08		php		OP_FP_MUL       PHP
.3a5777	e2 20		sep #$20	            SEP #$20
.3a5779	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a577b	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a577f	a9 00		lda #$00	                LDA #0
.3a5781	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a5785	c2 20		rep #$20	            REP #$20
.3a5787	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a5789	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a578d	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a578f	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5793	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a5795	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5799	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a579b	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a579f	ea		nop		                NOP
.3a57a0	ea		nop		                NOP
.3a57a1	ea		nop		                NOP
.3a57a2	e2 20		sep #$20	            SEP #$20
.3a57a4	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT    ; Check the status of the addition
.3a57a8	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.3a57aa	d0 10		bne $3a57bc	                BNE fp_mul_error            ; If an issue was raise, process the math error
.3a57ac	c2 20		rep #$20	            REP #$20
.3a57ae	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a57b2	85 23		sta $0823	                STA ARGUMENT1
.3a57b4	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a57b8	85 25		sta $0825	                STA ARGUMENT1+2
.3a57ba	28		plp		fp_mul_done     PLP
.3a57bb	60		rts		            RTS
.3a57bc					fp_mul_error
.3a57bc	20 c1 57	jsr $3a57c1	            JSR FP_MATH_ERROR
.3a57bf	80 f9		bra $3a57ba	                BRA fp_mul_done
.3a57c1					FP_MATH_ERROR
.3a57c1	e2 20		sep #$20	            SEP #$20
.3a57c3	89 01		bit #$01	                BIT #FP_ADD_STAT_NAN        ; Is there a NaN condition?
.3a57c5	f0 20		beq $3a57e7	                BEQ check_over              ; No: check for overflow
.3a57c7	00		brk #		                BRK
.3a57c8	08		php		            PHP
.3a57c9	c2 20		rep #$20	            REP #$20
.3a57cb	48		pha		            PHA
.3a57cc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a57cf	5b		tcd		            TCD
.3a57d0	68		pla		            PLA
.3a57d1	28		plp		            PLP
.3a57d2	e2 20		sep #$20	            SEP #$20
.3a57d4	a9 0c		lda #$0c	            LDA #ERR_NAN
.3a57d6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a57da	c2 20		rep #$20	            REP #$20
.3a57dc	29 ff 00	and #$00ff	            AND #$00FF
.3a57df	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a57e2	e2 20		sep #$20	            SEP #$20
.3a57e4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a57e7	89 02		bit #$02	check_over      BIT #FP_ADD_STAT_OVF        ; Is ther an overflow condition?
.3a57e9	f0 1f		beq $3a580a	                BEQ check_under             ; No: check for underflow
.3a57eb	08		php		            PHP
.3a57ec	c2 20		rep #$20	            REP #$20
.3a57ee	48		pha		            PHA
.3a57ef	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a57f2	5b		tcd		            TCD
.3a57f3	68		pla		            PLA
.3a57f4	28		plp		            PLP
.3a57f5	e2 20		sep #$20	            SEP #$20
.3a57f7	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a57f9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a57fd	c2 20		rep #$20	            REP #$20
.3a57ff	29 ff 00	and #$00ff	            AND #$00FF
.3a5802	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a5805	e2 20		sep #$20	            SEP #$20
.3a5807	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a580a	89 04		bit #$04	check_under     BIT #FP_ADD_STAT_UDF        ; Is there an underflow condition?
.3a580c	f0 1f		beq $3a582d	                BEQ done                    ; No: we should just return... this probably shouldn't happen
.3a580e	08		php		            PHP
.3a580f	c2 20		rep #$20	            REP #$20
.3a5811	48		pha		            PHA
.3a5812	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5815	5b		tcd		            TCD
.3a5816	68		pla		            PLA
.3a5817	28		plp		            PLP
.3a5818	e2 20		sep #$20	            SEP #$20
.3a581a	a9 0e		lda #$0e	            LDA #ERR_UNDERFLOW
.3a581c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5820	c2 20		rep #$20	            REP #$20
.3a5822	29 ff 00	and #$00ff	            AND #$00FF
.3a5825	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a5828	e2 20		sep #$20	            SEP #$20
.3a582a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a582d					done
.3a582d	60		rts		            RTS
.3a582e					FP_MUL10
.3a582e	08		php		                PHP
.3a582f	e2 20		sep #$20	            SEP #$20
.3a5831	a9 00		lda #$00	                LDA #FP_OUT_MULT                ; Set for multiplication
.3a5833	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5837	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1            ; Input 1 is fixed point
.3a5839	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a583d	c2 20		rep #$20	            REP #$20
.3a583f	a9 00 a0	lda #$a000	                LDA #$A000                      ; 10 is one factor
.3a5842	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5846	a9 00 00	lda #$0000	                LDA #0
.3a5849	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a584d	a5 23		lda $0823	                LDA ARGUMENT1                   ; N is the other
.3a584f	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5853	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5855	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5859	ea		nop		                NOP
.3a585a	ea		nop		                NOP
.3a585b	ea		nop		                NOP
.3a585c	e2 20		sep #$20	            SEP #$20
.3a585e	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT        ; Check the status
.3a5862	89 07		bit #$07	                BIT #FP_MULT_STAT_NAN | FP_MULT_STAT_OVF | FP_MULT_STAT_UDF
.3a5864	f0 01		beq $3a5867	                BEQ ret_result
.3a5866	00		brk #		                BRK                             ; There was an error...
.3a5867					ret_result
.3a5867	c2 20		rep #$20	            REP #$20
.3a5869	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL     ; Save result back
.3a586d	85 23		sta $0823	                STA ARGUMENT1
.3a586f	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5873	85 25		sta $0825	                STA ARGUMENT1+2
.3a5875	28		plp		                PLP
.3a5876	60		rts		            RTS
.3a5877					FP_DIV10
.3a5877	08		php		                PHP
.3a5878	e2 20		sep #$20	            SEP #$20
.3a587a	a9 01		lda #$01	                LDA #FP_OUT_DIV             ; Set for multiplication
.3a587c	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5880	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1        ; Input 1 is fixed point
.3a5882	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5886	c2 20		rep #$20	            REP #$20
.3a5888	a9 00 a0	lda #$a000	                LDA #$A000                  ; 10 is one factor
.3a588b	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a588f	a9 00 00	lda #$0000	                LDA #0
.3a5892	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5896	a5 23		lda $0823	                LDA ARGUMENT1               ; N is the other
.3a5898	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a589c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a589e	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a58a2	ea		nop		                NOP
.3a58a3	ea		nop		                NOP
.3a58a4	ea		nop		                NOP
.3a58a5	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Save result back
.3a58a9	85 23		sta $0823	                STA ARGUMENT1
.3a58ab	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a58af	85 25		sta $0825	                STA ARGUMENT1+2
.3a58b1	28		plp		                PLP
.3a58b2	60		rts		            RTS

;******  Return to file: src\floats.s

.3a58b3					FARG1EQ0
.3a58b3	08		php		                PHP
.3a58b4	c2 20		rep #$20	            REP #$20
.3a58b6	a5 23		lda $0823	                LDA ARGUMENT1
.3a58b8	d0 0a		bne $3a58c4	                BNE return_false
.3a58ba	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a58bc	29 ff 7f	and #$7fff	                AND #$7FFF              ; Mask off the sign bit
.3a58bf	d0 03		bne $3a58c4	                BNE return_false
.3a58c1	28		plp		return_true     PLP
.3a58c2	38		sec		                SEC
.3a58c3	60		rts		            RTS
.3a58c4	28		plp		return_false    PLP
.3a58c5	18		clc		                CLC
.3a58c6	60		rts		            RTS
.3a58c7					SHIFTDEC
.3a58c7	08		php		                PHP
.3a58c8	e2 20		sep #$20	            SEP #$20
.3a58ca	38		sec		                SEC                     ; Convert '0'..'9' to it's number
.3a58cb	e9 30		sbc #$30	                SBC #'0'
.3a58cd	20 7a 05	jsr $3a057a	            JSR MULINT10
.3a58d0	c2 20		rep #$20	            REP #$20
.3a58d2	29 ff 00	and #$00ff	                AND #$00FF              ; Add the number to ARGUMENT1
.3a58d5	18		clc		                CLC
.3a58d6	65 23		adc $0823	                ADC ARGUMENT1
.3a58d8	85 23		sta $0823	                STA ARGUMENT1
.3a58da	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a58dc	69 00 00	adc #$0000	                ADC #0
.3a58df	85 25		sta $0825	                STA ARGUMENT1+2
.3a58e1	28		plp		                PLP
.3a58e2	60		rts		            RTS
.3a58e3					SHIFTHEX
.3a58e3	08		php		                PHP
.3a58e4	e2 20		sep #$20	            SEP #$20
.3a58e6	c9 30		cmp #$30	                CMP #'0'                ; Process 0-9
.3a58e8	90 04		bcc $3a58ee	                BLT not_09
.3a58ea	c9 3a		cmp #$3a	                CMP #'9'+1
.3a58ec	90 1c		bcc $3a590a	                BLT is_09
.3a58ee	c9 61		cmp #$61	not_09          CMP #'a'                ; Process lowercase A-F
.3a58f0	90 04		bcc $3a58f6	                BLT not_lc
.3a58f2	c9 67		cmp #$67	                CMP #'f'+1
.3a58f4	90 0a		bcc $3a5900	                BLT is_lc
.3a58f6	c9 41		cmp #$41	not_lc          CMP #'A'                ; Process uppercase A-F
.3a58f8	90 04		bcc $3a58fe	                BLT not_uc
.3a58fa	c9 47		cmp #$47	                CMP #'F'+1
.3a58fc	90 07		bcc $3a5905	                BLT is_uc
.3a58fe	80 31		bra $3a5931	not_uc          BRA done                ; Just return if we couldn't convert... this shouldn't happen
.3a5900	38		sec		is_lc           SEC                     ; Convert 'a'-'f' to the actual number
.3a5901	e9 57		sbc #$57	                SBC #'a'-10
.3a5903	80 08		bra $3a590d	                BRA shift
.3a5905	38		sec		is_uc           SEC                     ; Convert 'A'-'F' to the actual number
.3a5906	e9 37		sbc #$37	                SBC #'A'-10
.3a5908	80 03		bra $3a590d	                BRA shift
.3a590a	38		sec		is_09           SEC                     ; Convert '0'-'9' to the actual number
.3a590b	e9 30		sbc #$30	                SBC #'0'
.3a590d					shift
.3a590d	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a590f	26 24		rol $0824	                ROL ARGUMENT1+1
.3a5911	26 25		rol $0825	                ROL ARGUMENT1+2
.3a5913	26 26		rol $0826	                ROL ARGUMENT1+3
.3a5915	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a5917	26 24		rol $0824	                ROL ARGUMENT1+1
.3a5919	26 25		rol $0825	                ROL ARGUMENT1+2
.3a591b	26 26		rol $0826	                ROL ARGUMENT1+3
.3a591d	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a591f	26 24		rol $0824	                ROL ARGUMENT1+1
.3a5921	26 25		rol $0825	                ROL ARGUMENT1+2
.3a5923	26 26		rol $0826	                ROL ARGUMENT1+3
.3a5925	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a5927	26 24		rol $0824	                ROL ARGUMENT1+1
.3a5929	26 25		rol $0825	                ROL ARGUMENT1+2
.3a592b	26 26		rol $0826	                ROL ARGUMENT1+3
.3a592d	05 23		ora $0823	                ORA ARGUMENT1           ; Add the number to it
.3a592f	85 23		sta $0823	                STA ARGUMENT1
.3a5931	28		plp		done            PLP
.3a5932	60		rts		            RTS
.3a5933					SHIFTBIN
.3a5933	08		php		                PHP
.3a5934	e2 20		sep #$20	            SEP #$20
.3a5936	c9 30		cmp #$30	                CMP #'0'                ; If the character is '0'...
.3a5938	f0 06		beq $3a5940	                BEQ shift_0             ; Shift a 0 onto ARGUMENT1
.3a593a	c9 31		cmp #$31	                CMP #'1'                ; If the character is '1'...
.3a593c	f0 0a		beq $3a5948	                BEQ shift_1             ; Shift a 1 onto ARGUMENT1
.3a593e	80 0f		bra $3a594f	                BRA done
.3a5940					shift_0
.3a5940	c2 20		rep #$20	            REP #$20
.3a5942	06 23		asl $0823	                ASL ARGUMENT1
.3a5944	26 25		rol $0825	                ROL ARGUMENT1+2
.3a5946	80 07		bra $3a594f	                BRA done
.3a5948					shift_1
.3a5948	c2 20		rep #$20	            REP #$20
.3a594a	38		sec		                SEC
.3a594b	26 23		rol $0823	                ROL ARGUMENT1
.3a594d	26 25		rol $0825	                ROL ARGUMENT1+2
.3a594f	28		plp		done            PLP
.3a5950	60		rts		            RTS
.3a5951					FP_POW10
.3a5951	08		php		                PHP
.3a5952	e2 30		sep #$30	            SEP #$30
.3a5954	a5 61		lda $0861	                LDA MARG4
.3a5956	f0 0d		beq $3a5965	                BEQ return_1
.3a5958	aa		tax		                TAX
.3a5959	a5 69		lda $0869	                LDA MARG6
.3a595b	d0 15		bne $3a5972	                BNE do_div
.3a595d	a9 00		lda #$00	                LDA #FP_OUT_MULT                    ; We'll multiply
.3a595f	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5963	80 15		bra $3a597a	                BRA start_loop
.3a5965					return_1
.3a5965	e2 20		sep #$20	            SEP #$20
.3a5967	a9 03		lda #$03	                LDA #FP_OUT_ONE                     ; We want to return a 1.0
.3a5969	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a596d	ea		nop		                NOP
.3a596e	ea		nop		                NOP
.3a596f	ea		nop		                NOP
.3a5970	80 62		bra $3a59d4	                BRA ret_result                      ; And return the result
.3a5972					do_div
.3a5972	e2 20		sep #$20	            SEP #$20
.3a5974	a9 01		lda #$01	                LDA #FP_OUT_DIV                     ; We'll divide
.3a5976	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a597a					start_loop
.3a597a	e2 20		sep #$20	            SEP #$20
.3a597c	a9 43		lda #$43	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a597e	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.3a5982	c2 20		rep #$20	            REP #$20
.3a5984	a9 00 10	lda #$1000	                LDA #$1000                          ; Input 0 = 1.0
.3a5987	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a598b	a9 00 00	lda #$0000	                LDA #0
.3a598e	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5992					loop
.3a5992	c2 20		rep #$20	            REP #$20
.3a5994	a9 00 a0	lda #$a000	                LDA #$A000                          ; Input 1 = 10.0
.3a5997	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a599b	a9 00 00	lda #$0000	                LDA #0
.3a599e	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a59a2	ea		nop		                NOP                                 ; Wait for the operation to complete
.3a59a3	ea		nop		                NOP
.3a59a4	ea		nop		                NOP
.3a59a5	ca		dex		                DEX                                 ; Count down
.3a59a6	f0 2c		beq $3a59d4	                BEQ ret_result                      ; If 0, then we're done
.3a59a8	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; SCRATCH <-- Result
.3a59ac	8f 0c 08 00	sta $00080c	                STA @l SCRATCH
.3a59b0	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a59b4	8f 0e 08 00	sta $00080e	                STA @l SCRATCH+2
.3a59b8	e2 20		sep #$20	            SEP #$20
.3a59ba	a9 42		lda #$42	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_1
.3a59bc	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.3a59c0	c2 20		rep #$20	            REP #$20
.3a59c2	af 0c 08 00	lda $00080c	                LDA @l SCRATCH                      ; Input 0 <-- SCRATCH
.3a59c6	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a59ca	af 0e 08 00	lda $00080e	                LDA @l SCRATCH+2
.3a59ce	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a59d2	80 be		bra $3a5992	                BRA loop
.3a59d4					ret_result
.3a59d4	c2 20		rep #$20	            REP #$20
.3a59d6	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; Return the result
.3a59da	85 23		sta $0823	                STA ARGUMENT1
.3a59dc	af 0a e2 af	lda $afe20a	                LDA FP_MATH_OUTPUT_FP_HL
.3a59e0	85 25		sta $0825	                STA ARGUMENT1+2
.3a59e2	e2 20		sep #$20	            SEP #$20
.3a59e4	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a59e6	85 27		sta $0827	                STA ARGTYPE1
.3a59e8	28		plp		done            PLP
.3a59e9	60		rts		            RTS
.3a59ea					PACKFLOAT
.3a59ea	08		php		                PHP
.3a59eb	c2 20		rep #$20	            REP #$20
.3a59ed	a5 5d		lda $085d	            LDA MARG3
.3a59ef	85 23		sta $0823	            STA ARGUMENT1
.3a59f1	a5 5f		lda $085f	            LDA MARG3+2
.3a59f3	85 25		sta $0825	            STA ARGUMENT1+2
.3a59f5	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a59f8	c2 20		rep #$20	            REP #$20
.3a59fa	a5 23		lda $0823	            LDA ARGUMENT1
.3a59fc	85 29		sta $0829	            STA ARGUMENT2
.3a59fe	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5a00	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5a02	c2 20		rep #$20	            REP #$20
.3a5a04	a5 59		lda $0859	            LDA MARG2
.3a5a06	85 23		sta $0823	            STA ARGUMENT1
.3a5a08	a5 5b		lda $085b	            LDA MARG2+2
.3a5a0a	85 25		sta $0825	            STA ARGUMENT1+2
.3a5a0c	20 2b 57	jsr $3a572b	            JSR OP_FP_DIV
.3a5a0f	c2 20		rep #$20	            REP #$20
.3a5a11	a5 55		lda $0855	            LDA MARG1
.3a5a13	85 29		sta $0829	            STA ARGUMENT2
.3a5a15	a5 57		lda $0857	            LDA MARG1+2
.3a5a17	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5a19	20 e0 56	jsr $3a56e0	            JSR OP_FP_ADD
.3a5a1c	c2 20		rep #$20	            REP #$20
.3a5a1e	a5 23		lda $0823	            LDA ARGUMENT1
.3a5a20	85 29		sta $0829	            STA ARGUMENT2
.3a5a22	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5a24	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5a26	20 51 59	jsr $3a5951	            JSR FP_POW10
.3a5a29	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a5a2c	c2 20		rep #$20	            REP #$20
.3a5a2e	a5 65		lda $0865	                LDA MARG5                       ; Check to see if the float should be negative
.3a5a30	f0 07		beq $3a5a39	                BEQ set_float_type              ; If not, just set the type
.3a5a32	a5 25		lda $0825	                LDA ARGUMENT1+2                 ; If so, set the sign bit
.3a5a34	09 00 80	ora #$8000	                ORA #$8000
.3a5a37	85 25		sta $0825	                STA ARGUMENT1+2
.3a5a39					set_float_type
.3a5a39	e2 20		sep #$20	            SEP #$20
.3a5a3b	a9 01		lda #$01	                LDA #TYPE_FLOAT                 ; Set the type to float... ready for returning!
.3a5a3d	85 27		sta $0827	                STA ARGTYPE1
.3a5a3f	28		plp		                PLP
.3a5a40	60		rts		            RTS
.3a5a41					PARSENUM
.3a5a41	5a		phy		                PHY
.3a5a42	08		php		                PHP
.3a5a43	c2 30		rep #$30	            REP #$30
.3a5a45	64 23		stz $0823	                STZ ARGUMENT1       ; This will be the accumulator for building the number
.3a5a47	64 25		stz $0825	                STZ ARGUMENT1+2
.3a5a49	64 55		stz $0855	                STZ MARG1           ; This will be the integer portion of the mantissa for floats
.3a5a4b	64 57		stz $0857	                STZ MARG1+2
.3a5a4d	64 65		stz $0865	                STZ MARG5           ; MARG5 will be the negative flag for the number
.3a5a4f	64 59		stz $0859	                STZ MARG2           ; This will be the denominator of the fractional part of the mantissa
.3a5a51	64 5b		stz $085b	                STZ MARG2+2
.3a5a53	a9 01 00	lda #$0001	                LDA #1
.3a5a56	85 5d		sta $085d	                STA MARG3           ; This will be the divisor of the fractional part of the mantissa
.3a5a58	64 5f		stz $085f	                STZ MARG3+2
.3a5a5a	64 61		stz $0861	                STZ MARG4           ; This will be the exponent of a float
.3a5a5c	64 63		stz $0863	                STZ MARG4+2
.3a5a5e	64 69		stz $0869	                STZ MARG6           ; MARG6 will be the negative flag for the exponent
.3a5a60					s0
.3a5a60	e2 20		sep #$20	            SEP #$20
.3a5a62	a0 00 00	ldy #$0000	                LDY #0
.3a5a65	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the first byte
.3a5a67	c9 2b		cmp #$2b	                CMP #'+'
.3a5a69	f0 33		beq $3a5a9e	                BEQ s1_drop         ; '+' --> S1, drop
.3a5a6b	c9 2d		cmp #$2d	                CMP #'-'
.3a5a6d	f0 2b		beq $3a5a9a	                BEQ s1_negative     ; Flag that the number is negative
.3a5a6f	c9 26		cmp #$26	                CMP #'&'
.3a5a71	f0 3a		beq $3a5aad	                BEQ s2_drop         ; '&' --> S2, drop
.3a5a73	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a5a76	90 03		bcc $3a5a7b	                BCC syntax_err
.3a5a78	82 ac 00	brl $3a5b27	                BRL s7_shift        ; '0'-'9' --> S7, emit
.3a5a7b					syntax_err
.3a5a7b	08		php		            PHP
.3a5a7c	c2 20		rep #$20	            REP #$20
.3a5a7e	48		pha		            PHA
.3a5a7f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5a82	5b		tcd		            TCD
.3a5a83	68		pla		            PLA
.3a5a84	28		plp		            PLP
.3a5a85	e2 20		sep #$20	            SEP #$20
.3a5a87	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a5a89	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5a8d	c2 20		rep #$20	            REP #$20
.3a5a8f	29 ff 00	and #$00ff	            AND #$00FF
.3a5a92	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a5a95	e2 20		sep #$20	            SEP #$20
.3a5a97	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5a9a	a9 01		lda #$01	s1_negative     LDA #1              ; Set the negative flag for the mantissa
.3a5a9c	85 65		sta $0865	                STA MARG5
.3a5a9e	c8		iny		s1_drop         INY                 ; Drop the character...
.3a5a9f	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next
.3a5aa1	c9 26		cmp #$26	                CMP #'&'
.3a5aa3	f0 08		beq $3a5aad	                BEQ s2_drop         ; '&' --> S2, drop the '&'
.3a5aa5	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a5aa8	90 d1		bcc $3a5a7b	                BCC syntax_err
.3a5aaa	82 7a 00	brl $3a5b27	                BRL s7_shift        ; '0'-'9' --> S7, shift
.3a5aad	c8		iny		s2_drop         INY                 ; Drop the character
.3a5aae	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.3a5ab0	c9 68		cmp #$68	                CMP #'h'
.3a5ab2	f0 0e		beq $3a5ac2	                BEQ s3_drop         ; 'h', 'H' --> S3, drop
.3a5ab4	c9 48		cmp #$48	                CMP #'H'
.3a5ab6	f0 0a		beq $3a5ac2	                BEQ s3_drop
.3a5ab8	c9 62		cmp #$62	                CMP #'b'
.3a5aba	f0 4c		beq $3a5b08	                BEQ s5_drop         ; 'b', 'B' --> S5, drop
.3a5abc	c9 42		cmp #$42	                CMP #'B'
.3a5abe	f0 48		beq $3a5b08	                BEQ s5_drop
.3a5ac0	80 b9		bra $3a5a7b	                BRA syntax_err
.3a5ac2	c8		iny		s3_drop         INY                 ; Drop the character
.3a5ac3	b7 00		lda [$0800],y	s3              LDA [BIP],Y         ; Get the next character
.3a5ac5	20 0c 05	jsr $3a050c	            JSR ISHEX
.3a5ac8	b0 02		bcs $3a5acc	                BCS s4_shift
.3a5aca	80 af		bra $3a5a7b	                BRA syntax_err
.3a5acc					s4_shift
.3a5acc	20 e3 58	jsr $3a58e3	            JSR SHIFTHEX
.3a5acf	c8		iny		                INY
.3a5ad0	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.3a5ad2	20 0c 05	jsr $3a050c	            JSR ISHEX
.3a5ad5	b0 f5		bcs $3a5acc	                BCS s4_shift        ; '0'-'9','A'-'F' --> S4, shift
.3a5ad7					ret_integer
.3a5ad7	e2 20		sep #$20	            SEP #$20
.3a5ad9	a5 65		lda $0865	                LDA MARG5           ; check if the number should be negative
.3a5adb	f0 11		beq $3a5aee	                BEQ set_int_type    ; If not, just set the type and return
.3a5add	c2 20		rep #$20	            REP #$20
.3a5adf	38		sec		                SEC                 ; If so, negate it
.3a5ae0	a9 00 00	lda #$0000	                LDA #0
.3a5ae3	e5 23		sbc $0823	                SBC ARGUMENT1
.3a5ae5	85 23		sta $0823	                STA ARGUMENT1
.3a5ae7	a9 00 00	lda #$0000	                LDA #0
.3a5aea	e5 25		sbc $0825	                SBC ARGUMENT1+2
.3a5aec	85 25		sta $0825	                STA ARGUMENT1+2
.3a5aee					set_int_type
.3a5aee	e2 20		sep #$20	            SEP #$20
.3a5af0	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; Return an integer
.3a5af2	85 27		sta $0827	                STA ARGTYPE1
.3a5af4					stop
.3a5af4	c2 20		rep #$20	            REP #$20
.3a5af6	18		clc		                CLC
.3a5af7	98		tya		                TYA
.3a5af8	65 00		adc $0800	                ADC BIP
.3a5afa	85 00		sta $0800	                STA BIP
.3a5afc	a5 02		lda $0802	                LDA BIP+2
.3a5afe	69 00 00	adc #$0000	                ADC #0
.3a5b01	85 02		sta $0802	                STA BIP+2
.3a5b03	e2 20		sep #$20	            SEP #$20
.3a5b05	28		plp		                PLP
.3a5b06	7a		ply		                PLY
.3a5b07	60		rts		            RTS
.3a5b08	c8		iny		s5_drop         INY                     ; Drop the character
.3a5b09	b7 00		lda [$0800],y	s5              LDA [BIP],Y             ; Get the next character
.3a5b0b	c9 30		cmp #$30	                CMP #'0'
.3a5b0d	f0 07		beq $3a5b16	                BEQ s6_shift            ; '0', '1' --> S6, shift
.3a5b0f	c9 31		cmp #$31	                CMP #'1'
.3a5b11	f0 03		beq $3a5b16	                BEQ s6_shift
.3a5b13	82 65 ff	brl $3a5a7b	                BRL syntax_err
.3a5b16					s6_shift
.3a5b16	20 33 59	jsr $3a5933	            JSR SHIFTBIN
.3a5b19	c8		iny		                INY
.3a5b1a	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5b1c	c9 30		cmp #$30	                CMP #'0'                ; '0', '1' --> S6, shift
.3a5b1e	f0 f6		beq $3a5b16	                BEQ s6_shift
.3a5b20	c9 31		cmp #$31	                CMP #'1'
.3a5b22	f0 f2		beq $3a5b16	                BEQ s6_shift
.3a5b24	82 b0 ff	brl $3a5ad7	                BRL ret_integer         ; Return integer
.3a5b27					s7_shift
.3a5b27	20 c7 58	jsr $3a58c7	            JSR SHIFTDEC
.3a5b2a	c8		iny		                INY
.3a5b2b	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5b2d	c9 2e		cmp #$2e	                CMP #'.'                ; '.' --> S8, drop and preserve mantissa
.3a5b2f	f0 08		beq $3a5b39	                BEQ s8_mantissa
.3a5b31	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a5b34	b0 f1		bcs $3a5b27	                BCS s7_shift
.3a5b36	82 9e ff	brl $3a5ad7	                BRL ret_integer         ; Return integer
.3a5b39					s8_mantissa
.3a5b39	c2 20		rep #$20	            REP #$20
.3a5b3b	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a5b3e	c2 20		rep #$20	            REP #$20
.3a5b40	a5 23		lda $0823	            LDA ARGUMENT1
.3a5b42	85 55		sta $0855	            STA MARG1
.3a5b44	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5b46	85 57		sta $0857	            STA MARG1+2
.3a5b48	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the decimal
.3a5b4a	64 25		stz $0825	                STZ ARGUMENT1+2
.3a5b4c	e2 20		sep #$20	            SEP #$20
.3a5b4e	80 36		bra $3a5b86	                BRA s8_drop
.3a5b50					s8_shift
.3a5b50	20 c7 58	jsr $3a58c7	            JSR SHIFTDEC
.3a5b53	c2 20		rep #$20	            REP #$20
.3a5b55	a5 5f		lda $085f	                LDA MARG3+2             ; high 16 bits
.3a5b57	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a5b5b	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.3a5b5e	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.3a5b62	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to high 16 bits of MARG3
.3a5b66	85 5f		sta $085f	                STA MARG3+2
.3a5b68	a5 5d		lda $085d	                LDA MARG3
.3a5b6a	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a5b6e	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.3a5b71	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.3a5b75	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to MARG3
.3a5b79	85 5d		sta $085d	                STA MARG3
.3a5b7b	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.3a5b7f	18		clc		                CLC
.3a5b80	65 5f		adc $085f	                ADC MARG3+2
.3a5b82	85 5f		sta $085f	                STA MARG3+2
.3a5b84	e2 20		sep #$20	            SEP #$20
.3a5b86					s8_drop
.3a5b86	c8		iny		                INY
.3a5b87	b7 00		lda [$0800],y	                LDA [BIP],Y
.3a5b89	c9 65		cmp #$65	                CMP #'e'                ; 'E' --> S9, drop
.3a5b8b	f0 24		beq $3a5bb1	                BEQ s9_drop
.3a5b8d	c9 45		cmp #$45	                CMP #'E'
.3a5b8f	f0 20		beq $3a5bb1	                BEQ s9_drop
.3a5b91	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a5b94	b0 ba		bcs $3a5b50	                BCS s8_shift
.3a5b96	c2 20		rep #$20	            REP #$20
.3a5b98	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a5b9b	c2 20		rep #$20	            REP #$20
.3a5b9d	a5 23		lda $0823	            LDA ARGUMENT1
.3a5b9f	85 59		sta $0859	            STA MARG2
.3a5ba1	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5ba3	85 5b		sta $085b	            STA MARG2+2
.3a5ba5	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.3a5ba7	64 25		stz $0825	                STZ ARGUMENT1+2
.3a5ba9	20 ea 59	jsr $3a59ea	            JSR PACKFLOAT
.3a5bac	e2 20		sep #$20	            SEP #$20
.3a5bae	82 43 ff	brl $3a5af4	                BRL stop
.3a5bb1					s9_drop
.3a5bb1	c2 20		rep #$20	            REP #$20
.3a5bb3	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a5bb6	c2 20		rep #$20	            REP #$20
.3a5bb8	a5 23		lda $0823	            LDA ARGUMENT1
.3a5bba	85 59		sta $0859	            STA MARG2
.3a5bbc	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5bbe	85 5b		sta $085b	            STA MARG2+2
.3a5bc0	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.3a5bc2	64 25		stz $0825	                STZ ARGUMENT1+2
.3a5bc4	e2 20		sep #$20	            SEP #$20
.3a5bc6	c8		iny		                INY
.3a5bc7	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5bc9	c9 2b		cmp #$2b	                CMP #'+'
.3a5bcb	f0 10		beq $3a5bdd	                BEQ s10_drop            ; '+' --> S10, drop
.3a5bcd	c9 2d		cmp #$2d	                CMP #'-'
.3a5bcf	f0 08		beq $3a5bd9	                BEQ s10_setneg          ; '-' --> S10, set exponent is negative
.3a5bd1	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a5bd4	b0 12		bcs $3a5be8	                BCS S11_shift           ; '0'-'9' --> S11, shift
.3a5bd6	82 a2 fe	brl $3a5a7b	                BRL syntax_err
.3a5bd9					s10_setneg
.3a5bd9	a9 01		lda #$01	                LDA #1                  ; Set that the exponent should be negative
.3a5bdb	85 69		sta $0869	                STA MARG6
.3a5bdd					s10_drop
.3a5bdd	c8		iny		                INY
.3a5bde	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5be0	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a5be3	b0 03		bcs $3a5be8	                BCS s11_shift
.3a5be5	82 93 fe	brl $3a5a7b	                BRL syntax_err
.3a5be8					s11_shift
.3a5be8	20 c7 58	jsr $3a58c7	            JSR SHIFTDEC
.3a5beb	c8		iny		                INY
.3a5bec	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5bee	20 fb 04	jsr $3a04fb	            JSR ISNUMERAL
.3a5bf1	b0 f5		bcs $3a5be8	                BCS s11_shift
.3a5bf3	c2 20		rep #$20	            REP #$20
.3a5bf5	a5 23		lda $0823	            LDA ARGUMENT1
.3a5bf7	85 61		sta $0861	            STA MARG4
.3a5bf9	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5bfb	85 63		sta $0863	            STA MARG4+2
.3a5bfd	20 ea 59	jsr $3a59ea	            JSR PACKFLOAT
.3a5c00	82 f1 fe	brl $3a5af4	                BRL stop
.3a5c03					ITOF
.3a5c03	08		php		                PHP
.3a5c04	20 91 56	jsr $3a5691	            JSR FIXINT_TO_FP
.3a5c07	28		plp		done            PLP
.3a5c08	60		rts		            RTS
.3a5c09					FTOI
.3a5c09	08		php		                PHP
.3a5c0a					LOCALS
>0001					l_sign          .byte ?
>0002					l_exponent      .byte ?
>0003					l_mantissa      .dword ?
.3a5c0a	c2 20		rep #$20	            REP #$20
.3a5c0c	a9 00 5f	lda #$5f00	                LDA #<>FP_1_0
.3a5c0f	85 29		sta $0829	                STA ARGUMENT2
.3a5c11	a9 3a 00	lda #$003a	                LDA #(FP_1_0 >> 16)
.3a5c14	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5c16	e2 20		sep #$20	            SEP #$20
.3a5c18	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a5c1a	85 2d		sta $082d	                STA ARGTYPE2
.3a5c1c	c2 20		rep #$20	            REP #$20
.3a5c1e	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5c21	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5c24	d0 0c		bne $3a5c32	                BNE alloc_locals        ; No: get ready to do the full conversion
.3a5c26	a9 00 00	lda #$0000	                LDA #0
.3a5c29	8d 23 08	sta $0823	                STA @w ARGUMENT1        ; Yes: Return 0
.3a5c2c	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a5c2f	82 a1 00	brl $3a5cd3	                BRL done
.3a5c32	f4 00 00	pea #$0000	alloc_locals    PEA #0                  ; Reserve space for the locals
.3a5c35	f4 00 00	pea #$0000	                PEA #0
.3a5c38	f4 00 00	pea #$0000	                PEA #0
.3a5c3b	e2 20		sep #$20	            SEP #$20
.3a5c3d	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3      ; Preserve the sign bit
.3a5c40	29 80		and #$80	                AND #$80
.3a5c42	83 01		sta $01,s	                STA l_sign
.3a5c44	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2      ; Preserve the exponent
.3a5c47	2a		rol a		                ROL A
.3a5c48	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3
.3a5c4b	2a		rol a		                ROL A
.3a5c4c	83 02		sta $02,s	                STA l_exponent
.3a5c4e	a9 00		lda #$00	save_mantissa   LDA #0                  ; Save the mantissa (with the implied 1)
.3a5c50	83 06		sta $06,s	                STA l_mantissa+3
.3a5c52	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2
.3a5c55	09 80		ora #$80	                ORA #$80
.3a5c57	83 05		sta $05,s	                STA l_mantissa+2
.3a5c59	ad 24 08	lda $0824	                LDA @w ARGUMENT1+1
.3a5c5c	83 04		sta $04,s	                STA l_mantissa+1
.3a5c5e	ad 23 08	lda $0823	                LDA @w ARGUMENT1
.3a5c61	83 03		sta $03,s	                STA l_mantissa
.3a5c63	a3 02		lda $02,s	                LDA l_exponent
.3a5c65	c9 96		cmp #$96	loop            CMP #150
.3a5c67	f0 3a		beq $3a5ca3	                BEQ adj_sign
.3a5c69	90 1f		bcc $3a5c8a	                BLT shift_right
.3a5c6b	08		php		            PHP
.3a5c6c	c2 20		rep #$20	            REP #$20
.3a5c6e	48		pha		            PHA
.3a5c6f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5c72	5b		tcd		            TCD
.3a5c73	68		pla		            PLA
.3a5c74	28		plp		            PLP
.3a5c75	e2 20		sep #$20	            SEP #$20
.3a5c77	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a5c79	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5c7d	c2 20		rep #$20	            REP #$20
.3a5c7f	29 ff 00	and #$00ff	            AND #$00FF
.3a5c82	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a5c85	e2 20		sep #$20	            SEP #$20
.3a5c87	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5c8a					shift_right
.3a5c8a	c2 20		rep #$20	            REP #$20
.3a5c8c	a3 05		lda $05,s	                LDA l_mantissa+2
.3a5c8e	4a		lsr a		                LSR A
.3a5c8f	83 05		sta $05,s	                STA l_mantissa+2
.3a5c91	a3 03		lda $03,s	                LDA l_mantissa
.3a5c93	6a		ror a		                ROR A
.3a5c94	83 03		sta $03,s	                STA l_mantissa
.3a5c96	e2 20		sep #$20	            SEP #$20
.3a5c98	a3 02		lda $02,s	                LDA l_exponent
.3a5c9a	1a		inc a		                INC A
.3a5c9b	83 02		sta $02,s	                STA l_exponent
.3a5c9d	c9 96		cmp #$96	                CMP #150
.3a5c9f	f0 02		beq $3a5ca3	                BEQ adj_sign
.3a5ca1	80 e7		bra $3a5c8a	                BRA shift_right
.3a5ca3	a3 01		lda $01,s	adj_sign        LDA l_sign
.3a5ca5	f0 1b		beq $3a5cc2	                BEQ ret_positive
.3a5ca7	c2 20		rep #$20	            REP #$20
.3a5ca9	a3 03		lda $03,s	                LDA l_mantissa
.3a5cab	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a5cae	18		clc		                CLC
.3a5caf	69 01 00	adc #$0001	                ADC #1
.3a5cb2	8d 23 08	sta $0823	                STA @w ARGUMENT1
.3a5cb5	a3 05		lda $05,s	                LDA l_mantissa+2
.3a5cb7	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a5cba	69 00 00	adc #$0000	                ADC #0
.3a5cbd	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a5cc0	80 0c		bra $3a5cce	                BRA clean
.3a5cc2					ret_positive
.3a5cc2	c2 20		rep #$20	            REP #$20
.3a5cc4	a3 03		lda $03,s	                LDA l_mantissa
.3a5cc6	8d 23 08	sta $0823	                STA @w ARGUMENT1
.3a5cc9	a3 05		lda $05,s	                LDA l_mantissa+2
.3a5ccb	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a5cce					clean
.3a5cce	c2 20		rep #$20	            REP #$20
.3a5cd0	68		pla		                PLA                     ; Clean up the locals
.3a5cd1	68		pla		                PLA
.3a5cd2	68		pla		                PLA
.3a5cd3					done
.3a5cd3	e2 20		sep #$20	            SEP #$20
.3a5cd5	a9 00		lda #$00	                LDA #TYPE_INTEGER       ; Set the return type to integer
.3a5cd7	8d 27 08	sta $0827	                STA @w ARGTYPE1
.3a5cda	28		plp		                PLP
.3a5cdb	60		rts		            RTS
.3a5cdc					FP_COMPARE
.3a5cdc	da		phx		                PHX
.3a5cdd	08		php		                PHP
.3a5cde	c2 20		rep #$20	            REP #$20
.3a5ce0	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save ARGUMENT1 so we don't destroy it
.3a5ce2	48		pha		                PHA
.3a5ce3	a5 23		lda $0823	                LDA ARGUMENT1
.3a5ce5	48		pha		                PHA
.3a5ce6	20 d5 56	jsr $3a56d5	            JSR OP_FP_SUB
.3a5ce9	20 b3 58	jsr $3a58b3	            JSR FARG1EQ0
.3a5cec	b0 11		bcs $3a5cff	                BCS are_equal
.3a5cee	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Check the high word
.3a5cf0	89 00 80	bit #$8000	                BIT #$8000
.3a5cf3	d0 05		bne $3a5cfa	                BNE is_lt                   ; ARGUMENT1 < ARGUMENT2
.3a5cf5	a9 01 00	lda #$0001	is_gt           LDA #1                      ; ARGUMENT1 > ARGUMENT2: return 1
.3a5cf8	80 08		bra $3a5d02	                BRA ret_result
.3a5cfa	a9 ff ff	lda #$ffff	is_lt           LDA #$FFFF                  ; ARGUMENT1 > ARGUMENT2: return -1
.3a5cfd	80 03		bra $3a5d02	                BRA ret_result
.3a5cff	a9 00 00	lda #$0000	are_equal       LDA #0                      ; Equal: return 0
.3a5d02	fa		plx		ret_result      PLX                         ; Restore ARGUMENT1
.3a5d03	86 23		stx $0823	                STX ARGUMENT1
.3a5d05	fa		plx		                PLX
.3a5d06	86 25		stx $0825	                STX ARGUMENT1+2
.3a5d08	28		plp		                PLP
.3a5d09	fa		plx		                PLX
.3a5d0a	60		rts		            RTS
.3a5d0b					OP_FP_LT
.3a5d0b	08		php		                PHP
.3a5d0c	c2 30		rep #$30	            REP #$30
.3a5d0e	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5d11	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5d14	d0 05		bne $3a5d1b	                BNE ret_false
.3a5d16	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a5d19	80 03		bra $3a5d1e	                BRA done
.3a5d1b					ret_false
.3a5d1b	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a5d1e	28		plp		done            PLP
.3a5d1f	60		rts		            RTS
.3a5d20					OP_FP_GT
.3a5d20	08		php		                PHP
.3a5d21	c2 30		rep #$30	            REP #$30
.3a5d23	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5d26	c9 01 00	cmp #$0001	                CMP #1
.3a5d29	d0 05		bne $3a5d30	                BNE ret_false
.3a5d2b	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a5d2e	80 03		bra $3a5d33	                BRA done
.3a5d30					ret_false
.3a5d30	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a5d33	28		plp		done            PLP
.3a5d34	60		rts		            RTS
.3a5d35					OP_FP_EQ
.3a5d35	08		php		                PHP
.3a5d36	c2 30		rep #$30	            REP #$30
.3a5d38	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5d3b	c9 00 00	cmp #$0000	                CMP #0
.3a5d3e	d0 05		bne $3a5d45	                BNE ret_false
.3a5d40	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a5d43	80 03		bra $3a5d48	                BRA done
.3a5d45					ret_false
.3a5d45	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a5d48	28		plp		done            PLP
.3a5d49	60		rts		            RTS
.3a5d4a					OP_FP_LTE
.3a5d4a	08		php		                PHP
.3a5d4b	c2 30		rep #$30	            REP #$30
.3a5d4d	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5d50	c9 01 00	cmp #$0001	                CMP #1
.3a5d53	f0 05		beq $3a5d5a	                BEQ ret_false
.3a5d55	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a5d58	80 03		bra $3a5d5d	                BRA done
.3a5d5a					ret_false
.3a5d5a	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a5d5d	28		plp		done            PLP
.3a5d5e	60		rts		            RTS
.3a5d5f					OP_FP_GTE
.3a5d5f	08		php		                PHP
.3a5d60	c2 30		rep #$30	            REP #$30
.3a5d62	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5d65	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5d68	f0 05		beq $3a5d6f	                BEQ ret_false
.3a5d6a	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a5d6d	80 03		bra $3a5d72	                BRA done
.3a5d6f					ret_false
.3a5d6f	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a5d72	28		plp		done            PLP
.3a5d73	60		rts		            RTS
.3a5d74					OP_FP_NE
.3a5d74	08		php		                PHP
.3a5d75	c2 30		rep #$30	            REP #$30
.3a5d77	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5d7a	c9 00 00	cmp #$0000	                CMP #0
.3a5d7d	f0 05		beq $3a5d84	                BEQ ret_false
.3a5d7f	20 2d 06	jsr $3a062d	            JSR SET_TRUE
.3a5d82	80 03		bra $3a5d87	                BRA done
.3a5d84					ret_false
.3a5d84	20 3f 06	jsr $3a063f	            JSR SET_FALSE
.3a5d87	28		plp		done            PLP
.3a5d88	60		rts		            RTS
.3a5d89					STREMIT
.3a5d89	08		php		                PHP
.3a5d8a	e2 20		sep #$20	            SEP #$20
.3a5d8c	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Append the character
.3a5d8e	c8		iny		                INY                         ; Advance the character pointer in Y
.3a5d8f	a9 00		lda #$00	                LDA #0                      ; And add the NULL
.3a5d91	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5d93	28		plp		                PLP
.3a5d94	60		rts		            RTS
.3a5d95					STREMITB
.3a5d95	da		phx		                PHX
.3a5d96	08		php		                PHP
.3a5d97	e2 20		sep #$20	            SEP #$20
.3a5d99	c9 80		cmp #$80	                CMP #$80
.3a5d9b	90 0a		bcc $3a5da7	                BLT emit_digits
.3a5d9d	48		pha		                PHA
.3a5d9e	a9 2d		lda #$2d	                LDA #'-'                    ; Print a minus sign
.3a5da0	20 89 5d	jsr $3a5d89	            JSR STREMIT
.3a5da3	68		pla		                PLA
.3a5da4	49 ff		eor #$ff	                EOR #$FF                    ; And negate it
.3a5da6	1a		inc a		                INC A
.3a5da7					emit_digits
.3a5da7	c2 30		rep #$30	            REP #$30
.3a5da9	29 ff 00	and #$00ff	                AND #$00FF
.3a5dac	c9 64 00	cmp #$0064	                CMP #100
.3a5daf	90 0e		bcc $3a5dbf	                BLT chk_tens
.3a5db1	a2 64 00	ldx #$0064	                LDX #100
.3a5db4	20 7a 56	jsr $3a567a	            JSR UINT_DIV_A_X
.3a5db7	18		clc		                CLC
.3a5db8	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.3a5dbb	20 89 5d	jsr $3a5d89	            JSR STREMIT
.3a5dbe	8a		txa		                TXA                         ; Put the remainder in A
.3a5dbf					chk_tens
.3a5dbf	a2 0a 00	ldx #$000a	                LDX #10
.3a5dc2	20 7a 56	jsr $3a567a	            JSR UINT_DIV_A_X
.3a5dc5	18		clc		                CLC
.3a5dc6	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.3a5dc9	20 89 5d	jsr $3a5d89	            JSR STREMIT
.3a5dcc	8a		txa		                TXA                         ; Put the remainder in A
.3a5dcd					ones_digit
.3a5dcd	18		clc		                CLC
.3a5dce	69 30 00	adc #$0030	                ADC #'0'                    ; Convert it to ASCII
.3a5dd1	20 89 5d	jsr $3a5d89	            JSR STREMIT
.3a5dd4	28		plp		                PLP
.3a5dd5	fa		plx		                PLX
.3a5dd6	60		rts		            RTS
.3a5dd7					STRFINDEND
.3a5dd7	08		php		                PHP
.3a5dd8	e2 20		sep #$20	            SEP #$20
.3a5dda	c2 10		rep #$10	            REP #$10
.3a5ddc	a0 00 00	ldy #$0000	                LDY #0
.3a5ddf	b7 23		lda [$0823],y	find_end        LDA [ARGUMENT1],Y           ; Scan to the end of the string
.3a5de1	f0 03		beq $3a5de6	                BEQ done
.3a5de3	c8		iny		                INY
.3a5de4	80 f9		bra $3a5ddf	                BRA find_end
.3a5de6	28		plp		done            PLP
.3a5de7	60		rts		            RTS
=6					FP_D = 6        ; Number of mantissa digits
.3a5de8					FTOS
.3a5de8	08		php		                PHP
.3a5de9	e2 20		sep #$20	            SEP #$20
.3a5deb	c2 10		rep #$10	            REP #$10
.3a5ded	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be the negative flag
.3a5df0	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be K
.3a5df3	f4 00 00	pea #$0000	                PEA #0                      ; This spot will be for the exponents
>0001					L_NEGATIVE      .word ?
>0003					L_K             .word ?
>0005					L_X1            .byte ?                     ; The binary exponent
>0006					L_EXP           .byte ?                     ; The decimal exponent
.3a5df6	20 b3 58	jsr $3a58b3	            JSR FARG1EQ0
.3a5df9	90 19		bcc $3a5e14	                BCC chk_negative
.3a5dfb	20 01 15	jsr $3a1501	            JSR TEMPSTRING
.3a5dfe	e2 20		sep #$20	            SEP #$20
.3a5e00	a0 00 00	ldy #$0000	                LDY #0
.3a5e03	a9 20		lda #$20	                LDA #' '
.3a5e05	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5e07	c8		iny		                INY
.3a5e08	a9 30		lda #$30	                LDA #'0'                    ; Return a "0"
.3a5e0a	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5e0c	c8		iny		                INY
.3a5e0d	a9 00		lda #$00	                LDA #0
.3a5e0f	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5e11	82 ce 00	brl $3a5ee2	                BRL ret_result
.3a5e14					chk_negative
.3a5e14	e2 20		sep #$20	            SEP #$20
.3a5e16	a5 26		lda $0826	                LDA ARGUMENT1+3             ; If N is negative, output a minus sign and negate N
.3a5e18	10 08		bpl $3a5e22	                BPL not_negative
.3a5e1a	29 7f		and #$7f	                AND #$7F                    ; Negate the number
.3a5e1c	85 26		sta $0826	                STA ARGUMENT1+3
.3a5e1e	a9 01		lda #$01	                LDA #1
.3a5e20	83 01		sta $01,s	                STA L_NEGATIVE              ; Set IsNegative to a TRUE value
.3a5e22					not_negative
.3a5e22	c2 20		rep #$20	            REP #$20
.3a5e24	a9 00 00	lda #$0000	                LDA #0                      ; Initialize K to 0, K is a 1-byte signed integer. (SCRATCH is K)
.3a5e27	83 03		sta $03,s	                STA L_K                     ; We're using a word here for convenience
.3a5e29	c2 20		rep #$20	            REP #$20
.3a5e2b	af fc 5e 3a	lda $3a5efc	            LDA ten_d_1
.3a5e2f	85 29		sta $0829	            STA ARGUMENT2
.3a5e31	af fe 5e 3a	lda $3a5efe	            LDA ten_d_1+2
.3a5e35	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5e37	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5e3a	89 00 80	bit #$8000	                BIT #$8000                  ; Is N < 10^(D-1)?
.3a5e3d	d0 12		bne $3a5e51	                BNE shift_up
.3a5e3f					shift_down
.3a5e3f	20 77 58	jsr $3a5877	            JSR FP_DIV10
.3a5e42	a3 03		lda $03,s	                LDA L_K
.3a5e44	1a		inc a		                INC A
.3a5e45	83 03		sta $03,s	                STA L_K                     ; Increment K
.3a5e47	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5e4a	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N < 10^(D-1)?
.3a5e4d	f0 12		beq $3a5e61	                BEQ do_digits               ; Yes: we're ready to process digits
.3a5e4f	80 ee		bra $3a5e3f	                BRA shift_down              ; No: keep dividing
.3a5e51					shift_up
.3a5e51	20 2e 58	jsr $3a582e	            JSR FP_MUL10
.3a5e54	a3 03		lda $03,s	                LDA L_K
.3a5e56	3a		dec a		                DEC A
.3a5e57	83 03		sta $03,s	                STA L_K                     ; Decrement K
.3a5e59	20 dc 5c	jsr $3a5cdc	            JSR FP_COMPARE
.3a5e5c	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N >= 10 ^ (D-1)?
.3a5e5f	f0 f0		beq $3a5e51	                BEQ shift_up                ; No: keep multiplying
.3a5e61					do_digits
.3a5e61	e2 30		sep #$30	            SEP #$30
.3a5e63	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5e65	0a		asl a		                ASL A
.3a5e66	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5e68	2a		rol a		                ROL A
.3a5e69	83 05		sta $05,s	                STA L_X1
.3a5e6b	38		sec		                SEC
.3a5e6c	a9 96		lda #$96	                LDA #150                    ; X := 150 - X1
.3a5e6e	e3 05		sbc $05,s	                SBC L_X1
.3a5e70	aa		tax		                TAX
.3a5e71	f0 0f		beq $3a5e82	                BEQ emit_digits             ; If X = 0, just emit the digits
.3a5e73	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Set the implied '1' MSB of the mantissa
.3a5e75	09 80		ora #$80	                ORA #$80
.3a5e77	85 25		sta $0825	                STA ARGUMENT1+2
.3a5e79	46 25		lsr $0825	shift_r         LSR ARGUMENT1+2             ; Shift the mantissa right
.3a5e7b	66 24		ror $0824	                ROR ARGUMENT1+1
.3a5e7d	66 23		ror $0823	                ROR ARGUMENT1
.3a5e7f	ca		dex		                DEX
.3a5e80	d0 f7		bne $3a5e79	                BNE shift_r                 ; Until X = 0
.3a5e82					emit_digits
.3a5e82	c2 10		rep #$10	            REP #$10
.3a5e84	e2 20		sep #$20	            SEP #$20
.3a5e86	64 26		stz $0826	                STZ ARGUMENT1+3             ; Blank out the MSB
.3a5e88	a9 00		lda #$00	                LDA #TYPE_INTEGER           ; Make it an integer
.3a5e8a	85 27		sta $0827	                STA ARGTYPE1
.3a5e8c	a3 01		lda $01,s	                LDA L_NEGATIVE              ; Check IsNegative
.3a5e8e	f0 11		beq $3a5ea1	                BEQ get_raw_digits          ; If FALSE, just convert the raw digits
.3a5e90	c2 20		rep #$20	            REP #$20
.3a5e92	38		sec		                SEC                         ; Make the raw integer negative
.3a5e93	a9 00 00	lda #$0000	                LDA #0
.3a5e96	e5 23		sbc $0823	                SBC ARGUMENT1
.3a5e98	85 23		sta $0823	                STA ARGUMENT1
.3a5e9a	a9 00 00	lda #$0000	                LDA #0
.3a5e9d	e5 25		sbc $0825	                SBC ARGUMENT1+2
.3a5e9f	85 25		sta $0825	                STA ARGUMENT1+2
.3a5ea1					get_raw_digits
.3a5ea1	20 60 15	jsr $3a1560	            JSR ITOS
.3a5ea4	c2 20		rep #$20	            REP #$20
.3a5ea6	a5 16		lda $0816	            LDA STRPTR
.3a5ea8	85 23		sta $0823	            STA ARGUMENT1
.3a5eaa	a5 18		lda $0818	            LDA STRPTR+2
.3a5eac	85 25		sta $0825	            STA ARGUMENT1+2
.3a5eae	20 d7 5d	jsr $3a5dd7	            JSR STRFINDEND
.3a5eb1	e2 20		sep #$20	            SEP #$20
.3a5eb3	c8		iny		                INY                         ; Move the NULL up one byte
.3a5eb4	a9 00		lda #$00	                LDA #0
.3a5eb6	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5eb8	88		dey		insert_loop     DEY                         ; Move to the character before the one we just moved
.3a5eb9	88		dey		                DEY
.3a5eba	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y           ; Get the character
.3a5ebc	c8		iny		                INY                         ; Move to the next space
.3a5ebd	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Store the character here
.3a5ebf	c0 02 00	cpy #$0002	                CPY #2                      ; Check to see if we just moved the 2nd character
.3a5ec2	d0 f4		bne $3a5eb8	                BNE insert_loop             ; If not, keep moving the characters
.3a5ec4	a9 2e		lda #$2e	                LDA #'.'                    ; Insert the '.' in the space we openned
.3a5ec6	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5ec8	e2 20		sep #$20	            SEP #$20
.3a5eca	18		clc		                CLC                         ; Compute the exponent
.3a5ecb	a3 03		lda $03,s	                LDA L_K
.3a5ecd	69 05		adc #$05	                ADC #(FP_D - 1)
.3a5ecf	83 06		sta $06,s	                STA L_EXP
.3a5ed1	f0 19		beq $3a5eec	                BEQ done                    ; If it's 0, just return the number
.3a5ed3	20 d7 5d	jsr $3a5dd7	            JSR STRFINDEND
.3a5ed6	a9 45		lda #$45	                LDA #'E'                    ; Append the "E"
.3a5ed8	20 89 5d	jsr $3a5d89	            JSR STREMIT
.3a5edb	a3 06		lda $06,s	                LDA L_EXP
.3a5edd	20 95 5d	jsr $3a5d95	            JSR STREMITB
.3a5ee0	80 0a		bra $3a5eec	                BRA done                    ; TODO: reformat integer... add E and exponent...
.3a5ee2					ret_result
.3a5ee2	c2 20		rep #$20	            REP #$20
.3a5ee4	a5 16		lda $0816	                LDA STRPTR                  ; Return the temporary string we've assembled
.3a5ee6	85 23		sta $0823	                STA ARGUMENT1
.3a5ee8	a5 18		lda $0818	                LDA STRPTR+2
.3a5eea	85 25		sta $0825	                STA ARGUMENT1+2
.3a5eec					done
.3a5eec	e2 20		sep #$20	            SEP #$20
.3a5eee	a9 02		lda #$02	                LDA #TYPE_STRING
.3a5ef0	85 27		sta $0827	                STA ARGTYPE1
.3a5ef2	c2 20		rep #$20	            REP #$20
.3a5ef4	3b		tsc		                TSC                         ; Remove the locals from the stack
.3a5ef5	18		clc		                CLC
.3a5ef6	69 06 00	adc #$0006	                ADC #6
.3a5ef9	1b		tcs		                TCS
.3a5efa	28		plp		                PLP
.3a5efb	60		rts		            RTS
>3a5efc	00 50 c3 47			ten_d_1         .dword $47c35000            ; 10^(FP_D-1), where FP_D=5
>3a5f00	00 00 80 3f			FP_1_0          .dword $3f800000    ; Floating point constant: 1.0
>3a5f04	f3 04 b5 3f			FP_SQR_2_0      .dword $3fb504f3    ; Floating point constant: sqrt(2.0)
>3a5f08	f3 04 35 3f			FP_SQR_0_5      .dword $3f3504f3    ; Floating point constant: sqrt(0.2)

;******  Return to file: src\basic816.s


;******  Processing file: src\transcendentals.s

.3a5f0c					Q_POLY_HR
.3a5f0c	e2 20		sep #$20	            SEP #$20
.3a5f0e	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5f10	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5f14	c2 20		rep #$20	            REP #$20
.3a5f16	bd 00 00	lda $0000,x	                LDA 0,X
.3a5f19	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5f1d	bd 02 00	lda $0002,x	                LDA 2,X
.3a5f20	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5f24	88		dey		                DEY             ; (Y-1) more coefficients.
.3a5f25	e8		inx		loop            INX             ; point to the next coefficient
.3a5f26	e8		inx		                INX
.3a5f27	e8		inx		                INX
.3a5f28	e8		inx		                INX
.3a5f29	e2 20		sep #$20	            SEP #$20
.3a5f2b	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a5f2d	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5f31	c2 20		rep #$20	            REP #$20
.3a5f33	af 23 08 00	lda $000823	                LDA @l ARGUMENT1
.3a5f37	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5f3b	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5f3f	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5f43	ea		nop		                NOP
.3a5f44	ea		nop		                NOP
.3a5f45	ea		nop		                NOP
.3a5f46	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f4a	48		pha		                PHA
.3a5f4b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f4f	8f 0a e2 af	sta $afe20a	                STA FP_MATH_INPUT0_HL
.3a5f53	68		pla		                PLA
.3a5f54	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5f58	e2 20		sep #$20	            SEP #$20
.3a5f5a	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5f5c	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5f60	c2 20		rep #$20	            REP #$20
.3a5f62	bd 00 00	lda $0000,x	                LDA 0,X
.3a5f65	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5f69	bd 02 00	lda $0002,x	                LDA 2,X
.3a5f6c	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5f70	ea		nop		                NOP
.3a5f71	ea		nop		                NOP
.3a5f72	ea		nop		                NOP
.3a5f73	88		dey		                DEY
.3a5f74	f0 14		beq $3a5f8a	                BEQ done
.3a5f76	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f7a	48		pha		                PHA
.3a5f7b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f7f	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5f83	68		pla		                PLA
.3a5f84	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5f88	80 9b		bra $3a5f25	                BRA loop
.3a5f8a	af 08 e2 af	lda $afe208	done            LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f8e	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.3a5f92	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f96	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.3a5f9a	60		rts		                RTS
.3a5f9b					Q_SQ
.3a5f9b	e2 20		sep #$20	            SEP #$20
.3a5f9d	a9 00		lda #$00	                LDA #0
.3a5f9f	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5fa3	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a5fa5	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5fa9	c2 20		rep #$20	            REP #$20
.3a5fab	a5 23		lda $0823	                LDA ARGUMENT1
.3a5fad	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5fb1	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5fb5	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5fb9	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5fbd	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5fc1	ea		nop		                NOP
.3a5fc2	ea		nop		                NOP
.3a5fc3	ea		nop		                NOP
.3a5fc4	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5fc8	85 23		sta $0823	                STA ARGUMENT1
.3a5fca	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5fce	85 25		sta $0825	                STA ARGUMENT1+2
.3a5fd0	60		rts		                RTS
.3a5fd1					Q_INV
.3a5fd1	e2 20		sep #$20	            SEP #$20
.3a5fd3	a9 00		lda #$00	                LDA #0
.3a5fd5	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5fd9	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a5fdb	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5fdf	c2 20		rep #$20	            REP #$20
.3a5fe1	a5 23		lda $0823	                LDA ARGUMENT1
.3a5fe3	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5fe7	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5feb	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5fef	af 25 66 3a	lda $3a6625	                LDA @l fp_one
.3a5ff3	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5ff7	af 27 66 3a	lda $3a6627	                LDA @l fp_one+2
.3a5ffb	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5fff	ea		nop		                NOP
.3a6000	ea		nop		                NOP
.3a6001	ea		nop		                NOP
.3a6002	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a6006	85 23		sta $0823	                STA ARGUMENT1
.3a6008	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a600c	85 25		sta $0825	                STA ARGUMENT1+2
.3a600e	60		rts		                RTS
.3a600f					Q_FP_SCALE
.3a600f	a2 00 00	ldx #$0000	                LDX #0
.3a6012	a5 23		lda $0823	loop            LDA ARGUMENT1
.3a6014	c5 29		cmp $0829	                CMP ARGUMENT2
.3a6016	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6018	e5 2b		sbc $082b	                SBC ARGUMENT2+2
.3a601a	90 1e		bcc $3a603a	                BCC done
.3a601c	a5 23		lda $0823	                LDA ARGUMENT1
.3a601e	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a6022	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6024	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a6028	ea		nop		                NOP
.3a6029	ea		nop		                NOP
.3a602a	ea		nop		                NOP
.3a602b	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a602f	85 23		sta $0823	                STA ARGUMENT1
.3a6031	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a6035	85 25		sta $0825	                STA ARGUMENT1+2
.3a6037	e8		inx		                INX
.3a6038	80 d8		bra $3a6012	                BRA loop
.3a603a					done
.3a603a	60		rts		            RTS
.3a603b					Q_FP_SCALE_TAU
.3a603b	e2 20		sep #$20	            SEP #$20
.3a603d	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a603f	10 09		bpl $3a604a	                BPL notneg
.3a6041	29 7f		and #$7f	                AND #$7F
.3a6043	85 26		sta $0826	                STA ARGUMENT1+3
.3a6045	a9 01		lda #$01	                LDA #1
.3a6047	48		pha		                PHA
.3a6048	80 03		bra $3a604d	                BRA compute
.3a604a	a9 00		lda #$00	notneg          LDA #0          ; not negative, so push 0.
.3a604c	48		pha		                PHA
.3a604d	a9 40		lda #$40	compute         LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a604f	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a6053	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a6055	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a6059	c2 30		rep #$30	            REP #$30
.3a605b	af 8d 66 3a	lda $3a668d	                LDA @l twopi
.3a605f	85 29		sta $0829	                STA ARGUMENT2
.3a6061	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6065	af 8f 66 3a	lda $3a668f	                LDA @l twopi+2
.3a6069	85 2b		sta $082b	                STA ARGUMENT2+2
.3a606b	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a606f	20 0f 60	jsr $3a600f	            JSR Q_FP_SCALE
.3a6072	e2 20		sep #$20	            SEP #$20
.3a6074	68		pla		                PLA
.3a6075	c2 20		rep #$20	            REP #$20
.3a6077	f0 1e		beq $3a6097	                BEQ done
.3a6079	a5 23		lda $0823	                LDA ARGUMENT1
.3a607b	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a607f	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6081	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a6085	ea		nop		                NOP
.3a6086	ea		nop		                NOP
.3a6087	ea		nop		                NOP
.3a6088	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a608c	85 23		sta $0823	                STA ARGUMENT1
.3a608e	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a6092	29 ff 7f	and #$7fff	                AND #$7fff
.3a6095	85 25		sta $0825	                STA ARGUMENT1+2
.3a6097					done
.3a6097	60		rts		            RTS
.3a6098					Q_FP_NORM_ANGLE
.3a6098	5a		phy		                PHY
.3a6099	a2 00 00	ldx #$0000	                LDX #0
.3a609c	a0 00 00	ldy #$0000	                LDY #0
.3a609f	a5 23		lda $0823	loop            LDA ARGUMENT1
.3a60a1	df 91 66 3a	cmp $3a6691,x	                CMP @l onepi,x
.3a60a5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a60a7	ff 93 66 3a	sbc $3a6693,x	                SBC @l onepi+2,x
.3a60ab	90 2c		bcc $3a60d9	                BCC less
.3a60ad	bf 8d 66 3a	lda $3a668d,x	                LDA @l twopi,x
.3a60b1	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a60b5	bf 8f 66 3a	lda $3a668f,x	                LDA @l twopi+2,x
.3a60b9	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a60bd	a5 23		lda $0823	                LDA ARGUMENT1
.3a60bf	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a60c3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a60c5	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a60c9	ea		nop		                NOP
.3a60ca	ea		nop		                NOP
.3a60cb	ea		nop		                NOP
.3a60cc	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a60d0	85 23		sta $0823	                STA ARGUMENT1
.3a60d2	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a60d6	85 25		sta $0825	                STA ARGUMENT1+2
.3a60d8	38		sec		                SEC             ; set carry to indicate a reflection
.3a60d9	98		tya		less            TYA             ; carry already cleared if we branched
.3a60da	2a		rol a		                ROL             ; shift carry into flags...
.3a60db	a8		tay		                TAY             ; and store back into y
.3a60dc	e8		inx		                INX             ; next set of values
.3a60dd	e8		inx		                INX
.3a60de	e8		inx		                INX
.3a60df	e8		inx		                INX
.3a60e0	e0 0c 00	cpx #$000c	                CPX #12         ; check if we have already looked at 3
.3a60e3	d0 ba		bne $3a609f	                BNE loop
.3a60e5	98		tya		                TYA             ; copy Y to X, as that's what we have
.3a60e6	aa		tax		                TAX
.3a60e7	7a		ply		                PLY
.3a60e8	60		rts		            RTS
.3a60e9					Q_FP_COS
.3a60e9	08		php		                PHP
.3a60ea	c2 30		rep #$30	            REP #$30
.3a60ec	48		pha		                PHA
.3a60ed	da		phx		                PHX
.3a60ee	20 9b 5f	jsr $3a5f9b	            JSR Q_SQ
.3a60f1	8b		phb		                PHB
.3a60f2	e2 20		sep #$20	            SEP #$20
.3a60f4	a9 3a		lda #$3a	                LDA #`cos_coeff
.3a60f6	48		pha		                PHA
.3a60f7	ab		plb		                PLB
.3a60f8	c2 20		rep #$20	            REP #$20
.3a60fa	a2 cd 65	ldx #$65cd	                LDX #<>cos_coeff
.3a60fd	5a		phy		                PHY
.3a60fe	a0 05 00	ldy #$0005	                LDY #5
.3a6101	20 0c 5f	jsr $3a5f0c	            JSR Q_POLY_HR
.3a6104	7a		ply		                PLY
.3a6105	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.3a6108	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a610c	ab		plb		                PLB
.3a610d	fa		plx		                PLX
.3a610e	68		pla		                PLA
.3a610f	28		plp		                PLP
.3a6110	60		rts		            RTS
.3a6111					Q_FP_SIN
.3a6111	08		php		                PHP
.3a6112	c2 30		rep #$30	            REP #$30
.3a6114	48		pha		                PHA
.3a6115	da		phx		                PHX
.3a6116	a5 23		lda $0823	                LDA ARGUMENT1
.3a6118	85 29		sta $0829	                STA ARGUMENT2
.3a611a	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a611c	85 2b		sta $082b	                STA ARGUMENT2+2
.3a611e	20 9b 5f	jsr $3a5f9b	            JSR Q_SQ
.3a6121	8b		phb		                PHB
.3a6122	e2 20		sep #$20	            SEP #$20
.3a6124	a9 3a		lda #$3a	                LDA #`sin_coeff
.3a6126	48		pha		                PHA
.3a6127	ab		plb		                PLB
.3a6128	c2 20		rep #$20	            REP #$20
.3a612a	a2 e1 65	ldx #$65e1	                LDX #<>sin_coeff
.3a612d	5a		phy		                PHY
.3a612e	a0 05 00	ldy #$0005	                LDY #5
.3a6131	20 0c 5f	jsr $3a5f0c	            JSR Q_POLY_HR
.3a6134	7a		ply		                PLY
.3a6135	ab		plb		                PLB
.3a6136	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a6139	fa		plx		                PLX
.3a613a	68		pla		                PLA
.3a613b	28		plp		                PLP
.3a613c	60		rts		            RTS
.3a613d					Q_FP_TAN
.3a613d	08		php		                PHP
.3a613e	c2 30		rep #$30	            REP #$30
.3a6140	48		pha		                PHA
.3a6141	da		phx		                PHX
.3a6142	a5 23		lda $0823	                LDA ARGUMENT1
.3a6144	85 29		sta $0829	                STA ARGUMENT2
.3a6146	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6148	85 2b		sta $082b	                STA ARGUMENT2+2
.3a614a	20 9b 5f	jsr $3a5f9b	            JSR Q_SQ
.3a614d	8b		phb		                PHB
.3a614e	e2 20		sep #$20	            SEP #$20
.3a6150	a9 3a		lda #$3a	                LDA #`tan_coeff
.3a6152	48		pha		                PHA
.3a6153	ab		plb		                PLB
.3a6154	c2 20		rep #$20	            REP #$20
.3a6156	a2 f5 65	ldx #$65f5	                LDX #<>tan_coeff
.3a6159	5a		phy		                PHY
.3a615a	a0 05 00	ldy #$0005	                LDY #5
.3a615d	20 0c 5f	jsr $3a5f0c	            JSR Q_POLY_HR
.3a6160	7a		ply		                PLY
.3a6161	ab		plb		                PLB
.3a6162	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a6165	fa		plx		                PLX
.3a6166	68		pla		                PLA
.3a6167	28		plp		                PLP
.3a6168	60		rts		            RTS
.3a6169					Q_FP_LN
.3a6169	08		php		                PHP
.3a616a	c2 30		rep #$30	            REP #$30
.3a616c	48		pha		                PHA
.3a616d	da		phx		                PHX
.3a616e	e2 20		sep #$20	            SEP #$20
.3a6170	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a6172	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a6176	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a6178	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a617c	c2 20		rep #$20	            REP #$20
.3a617e	a5 23		lda $0823	                LDA ARGUMENT1
.3a6180	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a6184	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6186	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a618a	af 25 66 3a	lda $3a6625	                LDA @l fp_one
.3a618e	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6192	af 27 66 3a	lda $3a6627	                LDA @l fp_one+2
.3a6196	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a619a	ea		nop		                NOP
.3a619b	ea		nop		                NOP
.3a619c	ea		nop		                NOP
.3a619d	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a61a1	85 0c		sta $080c	                STA SCRATCH
.3a61a3	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a61a7	85 0e		sta $080e	                STA SCRATCH+2
.3a61a9	e2 20		sep #$20	            SEP #$20
.3a61ab	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a61ad	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a61b1	c2 20		rep #$20	            REP #$20
.3a61b3	ea		nop		                NOP
.3a61b4	ea		nop		                NOP
.3a61b5	ea		nop		                NOP
.3a61b6	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a61ba	85 10		sta $0810	                STA SCRATCH2
.3a61bc	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a61c0	85 12		sta $0812	                STA SCRATCH2+2
.3a61c2	e2 20		sep #$20	            SEP #$20
.3a61c4	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a61c6	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a61ca	c2 20		rep #$20	            REP #$20
.3a61cc	a5 0c		lda $080c	                LDA SCRATCH
.3a61ce	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a61d2	a5 0e		lda $080e	                LDA SCRATCH+2
.3a61d4	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a61d8	a5 10		lda $0810	                LDA SCRATCH2
.3a61da	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a61de	a5 12		lda $0812	                LDA SCRATCH2+2
.3a61e0	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a61e4	ea		nop		                NOP
.3a61e5	ea		nop		                NOP
.3a61e6	ea		nop		                NOP
.3a61e7	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a61eb	85 23		sta $0823	                STA ARGUMENT1
.3a61ed	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a61f1	85 25		sta $0825	                STA ARGUMENT1+2
.3a61f3	e2 20		sep #$20	            SEP #$20
.3a61f5	a9 08		lda #$08	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX0
.3a61f7	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a61fb	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a61fd	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a6201	c2 20		rep #$20	            REP #$20
.3a6203	a5 23		lda $0823	                LDA ARGUMENT1
.3a6205	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a6209	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a620b	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a620f	ea		nop		                NOP
.3a6210	ea		nop		                NOP
.3a6211	ea		nop		                NOP
.3a6212	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a6216	85 29		sta $0829	                STA ARGUMENT2
.3a6218	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a621c	85 2b		sta $082b	                STA ARGUMENT2+2
.3a621e	20 9b 5f	jsr $3a5f9b	            JSR Q_SQ
.3a6221	8b		phb		                PHB
.3a6222	e2 20		sep #$20	            SEP #$20
.3a6224	a9 3a		lda #$3a	                LDA #`ln_coeff
.3a6226	48		pha		                PHA
.3a6227	ab		plb		                PLB
.3a6228	c2 20		rep #$20	            REP #$20
.3a622a	a2 09 66	ldx #$6609	                LDX #<>ln_coeff
.3a622d	5a		phy		                PHY
.3a622e	a0 08 00	ldy #$0008	                LDY #8
.3a6231	20 0c 5f	jsr $3a5f0c	            JSR Q_POLY_HR
.3a6234	7a		ply		                PLY
.3a6235	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.3a6238	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a623c	8f 2d 08 00	sta $00082d	                STA @l ARGTYPE2
.3a6240	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a6243	ab		plb		                PLB
.3a6244	fa		plx		                PLX
.3a6245	68		pla		                PLA
.3a6246	28		plp		                PLP
.3a6247	60		rts		            RTS
.3a6248					FP_SIN
.3a6248	08		php		                PHP
.3a6249	c2 30		rep #$30	            REP #$30
.3a624b	48		pha		                PHA
.3a624c	da		phx		                PHX
.3a624d	20 3b 60	jsr $3a603b	            JSR Q_FP_SCALE_TAU
.3a6250	20 98 60	jsr $3a6098	            JSR Q_FP_NORM_ANGLE
.3a6253	da		phx		                PHX
.3a6254	8a		txa		                TXA
.3a6255	29 01 00	and #$0001	                AND #1
.3a6258	d0 05		bne $3a625f	                BNE do_cos
.3a625a	20 11 61	jsr $3a6111	            JSR Q_FP_SIN
.3a625d	80 03		bra $3a6262	                BRA maybe_neg
.3a625f					do_cos
.3a625f	20 e9 60	jsr $3a60e9	            JSR Q_FP_COS
.3a6262	fa		plx		maybe_neg       PLX
.3a6263	8a		txa		                TXA
.3a6264	29 04 00	and #$0004	                AND #4
.3a6267	f0 0a		beq $3a6273	                BEQ done
.3a6269	e2 20		sep #$20	            SEP #$20
.3a626b	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a626d	09 80		ora #$80	                ORA #$80
.3a626f	85 26		sta $0826	                STA ARGUMENT1+3
.3a6271	c2 20		rep #$20	            REP #$20
.3a6273	fa		plx		done            PLX
.3a6274	68		pla		                PLA
.3a6275	28		plp		                PLP
.3a6276	60		rts		            RTS
.3a6277					FP_COS
.3a6277	08		php		                PHP
.3a6278	c2 30		rep #$30	            REP #$30
.3a627a	48		pha		                PHA
.3a627b	da		phx		                PHX
.3a627c	20 3b 60	jsr $3a603b	            JSR Q_FP_SCALE_TAU
.3a627f	20 98 60	jsr $3a6098	            JSR Q_FP_NORM_ANGLE
.3a6282	da		phx		                PHX
.3a6283	8a		txa		                TXA
.3a6284	29 01 00	and #$0001	                AND #1
.3a6287	d0 05		bne $3a628e	                BNE do_sin
.3a6289	20 e9 60	jsr $3a60e9	            JSR Q_FP_COS
.3a628c	80 03		bra $3a6291	                BRA maybe_neg
.3a628e					do_sin
.3a628e	20 11 61	jsr $3a6111	            JSR Q_FP_SIN
.3a6291	fa		plx		maybe_neg       PLX
.3a6292	8a		txa		                TXA
.3a6293	29 02 00	and #$0002	                AND #2
.3a6296	f0 0a		beq $3a62a2	                BEQ done
.3a6298	e2 20		sep #$20	            SEP #$20
.3a629a	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a629c	09 80		ora #$80	                ORA #$80
.3a629e	85 26		sta $0826	                STA ARGUMENT1+3
.3a62a0	c2 20		rep #$20	            REP #$20
.3a62a2	fa		plx		done            PLX
.3a62a3	68		pla		                PLA
.3a62a4	28		plp		                PLP
.3a62a5	60		rts		            RTS
.3a62a6					FP_TAN
.3a62a6	08		php		                PHP
.3a62a7	c2 30		rep #$30	            REP #$30
.3a62a9	48		pha		                PHA
.3a62aa	da		phx		                PHX
.3a62ab	20 3b 60	jsr $3a603b	            JSR Q_FP_SCALE_TAU
.3a62ae	20 98 60	jsr $3a6098	            JSR Q_FP_NORM_ANGLE
.3a62b1	20 3d 61	jsr $3a613d	            JSR Q_FP_TAN
.3a62b4	8a		txa		                TXA
.3a62b5	29 01 00	and #$0001	                AND #1
.3a62b8	f0 03		beq $3a62bd	                BEQ no_inv
.3a62ba	20 d1 5f	jsr $3a5fd1	            JSR Q_INV
.3a62bd	8a		txa		no_inv          TXA
.3a62be	e2 20		sep #$20	            SEP #$20
.3a62c0	4a		lsr a		                LSR
.3a62c1	4a		lsr a		                LSR
.3a62c2	69 00		adc #$00	                ADC #0
.3a62c4	29 01		and #$01	                AND #1
.3a62c6	f0 06		beq $3a62ce	                BEQ no_neg
.3a62c8	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a62ca	09 80		ora #$80	                ORA #$80
.3a62cc	85 26		sta $0826	                STA ARGUMENT1+3
.3a62ce					no_neg
.3a62ce	c2 20		rep #$20	            REP #$20
.3a62d0	fa		plx		                PLX
.3a62d1	68		pla		                PLA
.3a62d2	28		plp		                PLP
.3a62d3	60		rts		            RTS
.3a62d4					FP_LN
.3a62d4	08		php		                PHP
.3a62d5	c2 30		rep #$30	            REP #$30
.3a62d7	48		pha		                PHA
.3a62d8	da		phx		                PHX
.3a62d9	5a		phy		                PHY
.3a62da	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a62dc	10 1f		bpl $3a62fd	                BPL arg_ok
.3a62de	08		php		            PHP
.3a62df	c2 20		rep #$20	            REP #$20
.3a62e1	48		pha		            PHA
.3a62e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a62e5	5b		tcd		            TCD
.3a62e6	68		pla		            PLA
.3a62e7	28		plp		            PLP
.3a62e8	e2 20		sep #$20	            SEP #$20
.3a62ea	a9 17		lda #$17	            LDA #ERR_DOMAIN
.3a62ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a62f0	c2 20		rep #$20	            REP #$20
.3a62f2	29 ff 00	and #$00ff	            AND #$00FF
.3a62f5	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a62f8	e2 20		sep #$20	            SEP #$20
.3a62fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a62fd					arg_ok
.3a62fd	c2 30		rep #$30	            REP #$30
.3a62ff	a5 23		lda $0823	                LDA ARGUMENT1
.3a6301	cf 25 66 3a	cmp $3a6625	                CMP @l fp_one
.3a6305	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6307	cf 27 66 3a	cmp $3a6627	                CMP @l fp_one+2
.3a630b	b0 04		bcs $3a6311	                BCS gtone
.3a630d	20 d1 5f	jsr $3a5fd1	            JSR Q_INV
.3a6310	18		clc		                CLC
.3a6311	a9 00 00	lda #$0000	gtone           LDA #0
.3a6314	a8		tay		                TAY
.3a6315	2a		rol a		                ROL             ; Rotate Carry into A; 0 means negate
.3a6316	48		pha		                PHA
.3a6317	e2 20		sep #$20	            SEP #$20
.3a6319	a9 00		lda #$00	                LDA #0
.3a631b	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a631f	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a6321	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a6325	c2 20		rep #$20	            REP #$20
.3a6327	af 7d 66 3a	lda $3a667d	                LDA @l eexp64
.3a632b	85 29		sta $0829	                STA ARGUMENT2
.3a632d	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6331	af 7f 66 3a	lda $3a667f	                LDA @l eexp64+2
.3a6335	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6337	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a633b	20 0f 60	jsr $3a600f	            JSR Q_FP_SCALE
.3a633e	8a		txa		                TXA
.3a633f	f0 07		beq $3a6348	                BEQ chk16
.3a6341	0a		asl a		                ASL             ; multiply counter by 64
.3a6342	0a		asl a		                ASL
.3a6343	0a		asl a		                ASL
.3a6344	0a		asl a		                ASL
.3a6345	0a		asl a		                ASL
.3a6346	0a		asl a		                ASL
.3a6347	a8		tay		                TAY
.3a6348	af 81 66 3a	lda $3a6681	chk16           LDA @l eexp16
.3a634c	85 29		sta $0829	                STA ARGUMENT2
.3a634e	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6352	af 83 66 3a	lda $3a6683	                LDA @l eexp16+2
.3a6356	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6358	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a635c	20 0f 60	jsr $3a600f	            JSR Q_FP_SCALE
.3a635f	8a		txa		                TXA
.3a6360	f0 0b		beq $3a636d	                BEQ chk04
.3a6362	0a		asl a		                ASL             ; multiply counter by 16
.3a6363	0a		asl a		                ASL
.3a6364	0a		asl a		                ASL
.3a6365	0a		asl a		                ASL
.3a6366	85 29		sta $0829	                STA ARGUMENT2   ; and add into total
.3a6368	18		clc		                CLC
.3a6369	98		tya		                TYA
.3a636a	65 29		adc $0829	                ADC ARGUMENT2
.3a636c	a8		tay		                TAY
.3a636d	af 85 66 3a	lda $3a6685	chk04           LDA @l eexp04
.3a6371	85 29		sta $0829	                STA ARGUMENT2
.3a6373	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6377	af 87 66 3a	lda $3a6687	                LDA @l eexp04+2
.3a637b	85 2b		sta $082b	                STA ARGUMENT2+2
.3a637d	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a6381	20 0f 60	jsr $3a600f	            JSR Q_FP_SCALE
.3a6384	8a		txa		                TXA
.3a6385	f0 09		beq $3a6390	                BEQ chk01
.3a6387	0a		asl a		                ASL             ;multiply counter by 4
.3a6388	0a		asl a		                ASL
.3a6389	85 29		sta $0829	                STA ARGUMENT2   ;and add to total
.3a638b	18		clc		                CLC
.3a638c	98		tya		                TYA
.3a638d	65 29		adc $0829	                ADC ARGUMENT2
.3a638f	a8		tay		                TAY
.3a6390	af 89 66 3a	lda $3a6689	chk01           LDA @l eexp01
.3a6394	85 29		sta $0829	                STA ARGUMENT2
.3a6396	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a639a	af 8b 66 3a	lda $3a668b	                LDA @l eexp01+2
.3a639e	85 2b		sta $082b	                STA ARGUMENT2+2
.3a63a0	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a63a4	20 0f 60	jsr $3a600f	            JSR Q_FP_SCALE
.3a63a7	86 29		stx $0829	                STX ARGUMENT2   ; add counter to total
.3a63a9	18		clc		                CLC
.3a63aa	98		tya		                TYA
.3a63ab	65 29		adc $0829	                ADC ARGUMENT2
.3a63ad	a8		tay		                TAY
.3a63ae	20 69 61	jsr $3a6169	            JSR Q_FP_LN
.3a63b1	a5 23		lda $0823	                LDA ARGUMENT1
.3a63b3	85 29		sta $0829	                STA ARGUMENT2
.3a63b5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a63b7	85 2b		sta $082b	                STA ARGUMENT2+2
.3a63b9	98		tya		                TYA
.3a63ba	85 23		sta $0823	                STA ARGUMENT1
.3a63bc	64 25		stz $0825	                STZ ARGUMENT1+2
.3a63be	20 03 5c	jsr $3a5c03	            JSR ITOF
.3a63c1	20 e0 56	jsr $3a56e0	            JSR OP_FP_ADD
.3a63c4	68		pla		                PLA
.3a63c5	d0 07		bne $3a63ce	                BNE done
.3a63c7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a63c9	09 00 80	ora #$8000	                ORA #$8000
.3a63cc	85 25		sta $0825	                STA ARGUMENT1+2
.3a63ce	7a		ply		done            PLY
.3a63cf	fa		plx		                PLX
.3a63d0	68		pla		                PLA
.3a63d1	28		plp		                PLP
.3a63d2	60		rts		            RTS
.3a63d3					FP_ASIN
.3a63d3	08		php		                PHP
.3a63d4	c2 30		rep #$30	            REP #$30
.3a63d6	48		pha		                PHA
.3a63d7	da		phx		                PHX
.3a63d8	a5 23		lda $0823	                LDA ARGUMENT1
.3a63da	85 29		sta $0829	                STA ARGUMENT2
.3a63dc	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a63de	85 2b		sta $082b	                STA ARGUMENT2+2
.3a63e0	20 9b 5f	jsr $3a5f9b	            JSR Q_SQ
.3a63e3	8b		phb		                PHB
.3a63e4	e2 20		sep #$20	            SEP #$20
.3a63e6	a9 3a		lda #$3a	                LDA #`asin_coeff
.3a63e8	48		pha		                PHA
.3a63e9	ab		plb		                PLB
.3a63ea	c2 20		rep #$20	            REP #$20
.3a63ec	a2 2d 66	ldx #$662d	                LDX #<>asin_coeff
.3a63ef	a0 05 00	ldy #$0005	                LDY #5
.3a63f2	20 0c 5f	jsr $3a5f0c	            JSR Q_POLY_HR
.3a63f5	ab		plb		                PLB
.3a63f6	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a63f9	fa		plx		                PLX
.3a63fa	68		pla		                PLA
.3a63fb	28		plp		                PLP
.3a63fc	60		rts		            RTS
.3a63fd					FP_ACOS
.3a63fd	08		php		                PHP
.3a63fe	c2 30		rep #$30	            REP #$30
.3a6400	48		pha		                PHA
.3a6401	da		phx		                PHX
.3a6402	20 d3 63	jsr $3a63d3	            JSR FP_ASIN
.3a6405	af 95 66 3a	lda $3a6695	                LDA @l halfpi
.3a6409	85 29		sta $0829	                STA ARGUMENT2
.3a640b	af 97 66 3a	lda $3a6697	                LDA @l halfpi+2
.3a640f	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6411	20 d5 56	jsr $3a56d5	            JSR OP_FP_SUB
.3a6414	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6416	49 00 80	eor #$8000	                EOR #$8000
.3a6419	85 25		sta $0825	                STA ARGUMENT1+2
.3a641b	fa		plx		                PLX
.3a641c	68		pla		                PLA
.3a641d	28		plp		                PLP
.3a641e	60		rts		            RTS
.3a641f					FP_ATAN
.3a641f	08		php		                PHP
.3a6420	c2 30		rep #$30	            REP #$30
.3a6422	48		pha		                PHA
.3a6423	da		phx		                PHX
.3a6424	a5 23		lda $0823	                LDA ARGUMENT1
.3a6426	85 29		sta $0829	                STA ARGUMENT2
.3a6428	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a642a	85 2b		sta $082b	                STA ARGUMENT2+2
.3a642c	20 9b 5f	jsr $3a5f9b	            JSR Q_SQ
.3a642f	8b		phb		                PHB
.3a6430	e2 20		sep #$20	            SEP #$20
.3a6432	a9 3a		lda #$3a	                LDA #`atan_coeff
.3a6434	48		pha		                PHA
.3a6435	ab		plb		                PLB
.3a6436	c2 20		rep #$20	            REP #$20
.3a6438	a2 41 66	ldx #$6641	                LDX #<>atan_coeff
.3a643b	a0 05 00	ldy #$0005	                LDY #5
.3a643e	20 0c 5f	jsr $3a5f0c	            JSR Q_POLY_HR
.3a6441	ab		plb		                PLB
.3a6442	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a6445	fa		plx		                PLX
.3a6446	68		pla		                PLA
.3a6447	28		plp		                PLP
.3a6448	60		rts		            RTS
.3a6449					Q_FP_POW_INT
.3a6449	c2 20		rep #$20	            REP #$20
.3a644b	a5 23		lda $0823	            LDA ARGUMENT1
.3a644d	85 29		sta $0829	            STA ARGUMENT2
.3a644f	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a6451	85 2b		sta $082b	            STA ARGUMENT2+2
.3a6453	c2 20		rep #$20	            REP #$20
.3a6455	af 25 66 3a	lda $3a6625	            LDA @l fp_one
.3a6459	85 23		sta $0823	            STA ARGUMENT1
.3a645b	af 27 66 3a	lda $3a6627	            LDA @l fp_one+2
.3a645f	85 25		sta $0825	            STA ARGUMENT1+2
.3a6461	8a		txa		loop            TXA
.3a6462	f0 30		beq $3a6494	                BEQ done
.3a6464	4a		lsr a		                LSR
.3a6465	aa		tax		                TAX
.3a6466	90 03		bcc $3a646b	                BCC next
.3a6468	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a646b					next
.3a646b	c2 20		rep #$20	            REP #$20
.3a646d	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a646f	48		pha		            PHA
.3a6470	a5 23		lda $0823	            LDA ARGUMENT1
.3a6472	48		pha		            PHA
.3a6473	c2 20		rep #$20	            REP #$20
.3a6475	a5 29		lda $0829	            LDA ARGUMENT2
.3a6477	85 23		sta $0823	            STA ARGUMENT1
.3a6479	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a647b	85 25		sta $0825	            STA ARGUMENT1+2
.3a647d	20 9b 5f	jsr $3a5f9b	            JSR Q_SQ
.3a6480	c2 20		rep #$20	            REP #$20
.3a6482	a5 23		lda $0823	            LDA ARGUMENT1
.3a6484	85 29		sta $0829	            STA ARGUMENT2
.3a6486	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a6488	85 2b		sta $082b	            STA ARGUMENT2+2
.3a648a	c2 20		rep #$20	            REP #$20
.3a648c	68		pla		            PLA
.3a648d	85 23		sta $0823	            STA ARGUMENT1
.3a648f	68		pla		            PLA
.3a6490	85 25		sta $0825	            STA ARGUMENT1+2
.3a6492	80 cd		bra $3a6461	                BRA loop
.3a6494					done
.3a6494	60		rts		            RTS
.3a6495					Q_FP_EXP
.3a6495	08		php		                PHP
.3a6496	c2 30		rep #$30	            REP #$30
.3a6498	48		pha		                PHA
.3a6499	da		phx		                PHX
.3a649a	8b		phb		                PHB
.3a649b	e2 20		sep #$20	            SEP #$20
.3a649d	a9 3a		lda #$3a	                LDA #`exp_coeff
.3a649f	48		pha		                PHA
.3a64a0	ab		plb		                PLB
.3a64a1	c2 20		rep #$20	            REP #$20
.3a64a3	a2 55 66	ldx #$6655	                LDX #<>exp_coeff
.3a64a6	5a		phy		                PHY
.3a64a7	a0 0a 00	ldy #$000a	                LDY #10
.3a64aa	20 0c 5f	jsr $3a5f0c	            JSR Q_POLY_HR
.3a64ad	7a		ply		                PLY
.3a64ae	ab		plb		                PLB
.3a64af	fa		plx		                PLX
.3a64b0	68		pla		                PLA
.3a64b1	28		plp		                PLP
.3a64b2	60		rts		            RTS
.3a64b3					FP_EXP
.3a64b3	08		php		                PHP
.3a64b4	c2 30		rep #$30	            REP #$30
.3a64b6	48		pha		                PHA
.3a64b7	da		phx		                PHX
.3a64b8	5a		phy		                PHY
.3a64b9	a5 23		lda $0823	                LDA ARGUMENT1   ; special case for x==0
.3a64bb	05 25		ora $0825	                ORA ARGUMENT1+2
.3a64bd	d0 10		bne $3a64cf	                BNE notzero
.3a64bf	c2 20		rep #$20	            REP #$20
.3a64c1	af 25 66 3a	lda $3a6625	            LDA @l fp_one
.3a64c5	85 23		sta $0823	            STA ARGUMENT1
.3a64c7	af 27 66 3a	lda $3a6627	            LDA @l fp_one+2
.3a64cb	85 25		sta $0825	            STA ARGUMENT1+2
.3a64cd	80 61		bra $3a6530	                BRA done
.3a64cf	a5 25		lda $0825	notzero         LDA ARGUMENT1+2 ; check if negative
.3a64d1	29 00 80	and #$8000	                AND #$8000
.3a64d4	a8		tay		                TAY             ; Y != 0 -> arg was negative
.3a64d5	f0 07		beq $3a64de	                BEQ notneg
.3a64d7	a5 25		lda $0825	                LDA ARGUMENT1+2 ; negate x
.3a64d9	29 ff 7f	and #$7fff	                AND #$7FFF
.3a64dc	85 25		sta $0825	                STA ARGUMENT1+2
.3a64de					notneg
.3a64de	c2 20		rep #$20	            REP #$20
.3a64e0	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a64e2	48		pha		            PHA
.3a64e3	a5 23		lda $0823	            LDA ARGUMENT1
.3a64e5	48		pha		            PHA
.3a64e6	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a64e9	a6 23		ldx $0823	                LDX ARGUMENT1              ; INT(x) now in ARGUMENT1; low 16 bits into X
.3a64eb	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a64ee	c2 20		rep #$20	            REP #$20
.3a64f0	a5 23		lda $0823	            LDA ARGUMENT1
.3a64f2	85 29		sta $0829	            STA ARGUMENT2
.3a64f4	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a64f6	85 2b		sta $082b	            STA ARGUMENT2+2
.3a64f8	c2 20		rep #$20	            REP #$20
.3a64fa	68		pla		            PLA
.3a64fb	85 23		sta $0823	            STA ARGUMENT1
.3a64fd	68		pla		            PLA
.3a64fe	85 25		sta $0825	            STA ARGUMENT1+2
.3a6500	20 d5 56	jsr $3a56d5	            JSR OP_FP_SUB
.3a6503	20 95 64	jsr $3a6495	            JSR Q_FP_EXP
.3a6506	c2 20		rep #$20	            REP #$20
.3a6508	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a650a	48		pha		            PHA
.3a650b	a5 23		lda $0823	            LDA ARGUMENT1
.3a650d	48		pha		            PHA
.3a650e	c2 20		rep #$20	            REP #$20
.3a6510	af 89 66 3a	lda $3a6689	            LDA @leexp01
.3a6514	85 23		sta $0823	            STA ARGUMENT1
.3a6516	af 8b 66 3a	lda $3a668b	            LDA @leexp01+2
.3a651a	85 25		sta $0825	            STA ARGUMENT1+2
.3a651c	20 49 64	jsr $3a6449	            JSR Q_FP_POW_INT
.3a651f	c2 20		rep #$20	            REP #$20
.3a6521	68		pla		            PLA
.3a6522	85 29		sta $0829	            STA ARGUMENT2
.3a6524	68		pla		            PLA
.3a6525	85 2b		sta $082b	            STA ARGUMENT2+2
.3a6527	20 76 57	jsr $3a5776	            JSR OP_FP_MUL
.3a652a	98		tya		                TYA
.3a652b	f0 03		beq $3a6530	                BEQ done
.3a652d	20 d1 5f	jsr $3a5fd1	            JSR Q_INV
.3a6530	7a		ply		done            PLY
.3a6531	fa		plx		                PLX
.3a6532	68		pla		                PLA
.3a6533	28		plp		                PLP
.3a6534	60		rts		            RTS
.3a6535					FP_SQR
.3a6535	08		php		                PHP
.3a6536	c2 30		rep #$30	            REP #$30
.3a6538	48		pha		                PHA
.3a6539	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a653b	10 1f		bpl $3a655c	                BPL arg_ok
.3a653d	08		php		            PHP
.3a653e	c2 20		rep #$20	            REP #$20
.3a6540	48		pha		            PHA
.3a6541	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6544	5b		tcd		            TCD
.3a6545	68		pla		            PLA
.3a6546	28		plp		            PLP
.3a6547	e2 20		sep #$20	            SEP #$20
.3a6549	a9 17		lda #$17	            LDA #ERR_DOMAIN
.3a654b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a654f	c2 20		rep #$20	            REP #$20
.3a6551	29 ff 00	and #$00ff	            AND #$00FF
.3a6554	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6557	e2 20		sep #$20	            SEP #$20
.3a6559	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a655c					arg_ok
.3a655c	c2 30		rep #$30	            REP #$30
.3a655e	05 23		ora $0823	                ORA ARGUMENT1
.3a6560	f0 68		beq $3a65ca	                BEQ done
.3a6562	c2 20		rep #$20	            REP #$20
.3a6564	af 29 66 3a	lda $3a6629	            LDA @l fp_two
.3a6568	85 29		sta $0829	            STA ARGUMENT2
.3a656a	af 2b 66 3a	lda $3a662b	            LDA @l fp_two+2
.3a656e	85 2b		sta $082b	            STA ARGUMENT2+2
.3a6570	e2 20		sep #$20	            SEP #$20
.3a6572	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a6574	85 2d		sta $082d	                STA ARGTYPE2
.3a6576	c2 20		rep #$20	            REP #$20
.3a6578	c2 20		rep #$20	            REP #$20
.3a657a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a657c	48		pha		            PHA
.3a657d	a5 23		lda $0823	            LDA ARGUMENT1
.3a657f	48		pha		            PHA
.3a6580					loop
.3a6580	20 2b 57	jsr $3a572b	            JSR OP_FP_DIV
.3a6583	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6585	c5 2b		cmp $082b	                CMP ARGUMENT2+2
.3a6587	d0 09		bne $3a6592	                BNE more
.3a6589	a5 23		lda $0823	                LDA ARGUMENT1
.3a658b	45 29		eor $0829	                EOR ARGUMENT2
.3a658d	29 f8 ff	and #$fff8	                AND #$FFF8
.3a6590	f0 30		beq $3a65c2	                BEQ exitloop
.3a6592					more
.3a6592	20 e0 56	jsr $3a56e0	            JSR OP_FP_ADD
.3a6595	c2 20		rep #$20	            REP #$20
.3a6597	af 29 66 3a	lda $3a6629	            LDA @l fp_two
.3a659b	85 29		sta $0829	            STA ARGUMENT2
.3a659d	af 2b 66 3a	lda $3a662b	            LDA @l fp_two+2
.3a65a1	85 2b		sta $082b	            STA ARGUMENT2+2
.3a65a3	20 2b 57	jsr $3a572b	            JSR OP_FP_DIV
.3a65a6	c2 20		rep #$20	            REP #$20
.3a65a8	a5 23		lda $0823	            LDA ARGUMENT1
.3a65aa	85 29		sta $0829	            STA ARGUMENT2
.3a65ac	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a65ae	85 2b		sta $082b	            STA ARGUMENT2+2
.3a65b0	c2 20		rep #$20	            REP #$20
.3a65b2	68		pla		            PLA
.3a65b3	85 23		sta $0823	            STA ARGUMENT1
.3a65b5	68		pla		            PLA
.3a65b6	85 25		sta $0825	            STA ARGUMENT1+2
.3a65b8	c2 20		rep #$20	            REP #$20
.3a65ba	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a65bc	48		pha		            PHA
.3a65bd	a5 23		lda $0823	            LDA ARGUMENT1
.3a65bf	48		pha		            PHA
.3a65c0	80 be		bra $3a6580	                BRA loop
.3a65c2					exitloop
.3a65c2	c2 20		rep #$20	            REP #$20
.3a65c4	68		pla		            PLA
.3a65c5	85 29		sta $0829	            STA ARGUMENT2
.3a65c7	68		pla		            PLA
.3a65c8	85 2b		sta $082b	            STA ARGUMENT2+2
.3a65ca	68		pla		done            PLA
.3a65cb	28		plp		                PLP
.3a65cc	60		rts		            RTS
.3a65cd					cos_coeff
>3a65cd	01 0d d0 37			                .dword $37D00D01
>3a65d1	61 0b b6 ba			                .dword $BAB60B61
>3a65d5	ab aa 2a 3d			                .dword $3D2AAAAB
>3a65d9	00 00 00 bf			                .dword $BF000000
>3a65dd	00 00 80 3f			                .dword $3F800000
.3a65e1					sin_coeff
>3a65e1	1d ef 38 36			                .dword $3638EF1D
>3a65e5	01 0d 50 b9			                .dword $B9500D01
>3a65e9	89 88 08 3c			                .dword $3C088889
>3a65ed	ab aa 2a be			                .dword $BE2AAAAB
>3a65f1	00 00 80 3f			                .dword $3F800000
.3a65f5					tan_coeff
>3a65f5	a4 27 b3 3c			                .dword $3CB327A4
>3a65f9	d1 0d 5d 3d			                .dword $3D5D0DD1
>3a65fd	89 88 08 3e			                .dword $3E088889
>3a6601	ab aa aa 3e			                .dword $3EAAAAAB
>3a6605	00 00 80 3f			                .dword $3F800000
.3a6609					ln_coeff
>3a6609	89 88 88 3d			                .dword $3D888889
>3a660d	d9 89 9d 3d			                .dword $3D9D89D9
>3a6611	8c 2e ba 3d			                .dword $3DBA2E8C
>3a6615	39 8e e3 3d			                .dword $3DE38E39
>3a6619	25 49 12 3e			                .dword $3E124925
>3a661d	cd cc 4c 3e			                .dword $3E4CCCCD
>3a6621	ab aa aa 3e			                .dword $3EAAAAAB
>3a6625	00 00 80 3f			fp_one          .dword $3F800000
>3a6629	00 00 00 40			fp_two          .dword $40000000
.3a662d					asin_coeff
>3a662d	8e e3 f8 3c			                .dword $3CF8E38E
>3a6631	6e db 36 3d			                .dword $3D36DB6E
>3a6635	9a 99 99 3d			                .dword $3D99999A
>3a6639	ab aa 2a 3e			                .dword $3E2AAAAB
>3a663d	00 00 80 3f			                .dword $3F800000
.3a6641					atan_coeff
>3a6641	39 8e e3 3d			                .dword $3DE38E39
>3a6645	25 49 12 be			                .dword $BE124925
>3a6649	cd cc 4c 3e			                .dword $3E4CCCCD
>3a664d	ab aa aa be			                .dword $BEAAAAAB
>3a6651	00 00 80 3f			                .dword $3F800000
.3a6655					exp_coeff
>3a6655	1d ef 38 36			        .dword $3638EF1D
>3a6659	01 0d d0 37			        .dword $37D00D01
>3a665d	01 0d 50 39			        .dword $39500D01
>3a6661	61 0b b6 3a			        .dword $3AB60B61
>3a6665	89 88 08 3c			        .dword $3C088889
>3a6669	ab aa 2a 3d			        .dword $3D2AAAAB
>3a666d	ab aa 2a 3e			        .dword $3E2AAAAB
>3a6671	00 00 00 3f			        .dword $3F000000
>3a6675	00 00 80 3f			        .dword $3F800000
>3a6679	00 00 80 3f			        .dword $3F800000
>3a667d	c1 2c a1 6d			eexp64          .dword $6DA12CC1
>3a6681	5f 97 07 4b			eexp16          .dword $4B07975F
>3a6685	81 64 5a 42			eexp04          .dword $425A6481
>3a6689	54 f8 2d 40			eexp01          .dword $402DF854
>3a668d	db 0f c9 40			twopi           .dword $40C90FDB
>3a6691	db 0f 49 40			onepi           .dword $40490FDB
>3a6695	db 0f c9 3f			halfpi          .dword $3FC90FDB
>3a6699	db 0f 49 3f			quarterpi       .dword $3F490FDB

;******  Return to file: src\basic816.s


;******  Processing file: src\arrays.s

.3a669d					ARR_ALLOC
.3a669d	08		php		                PHP
.3a669e	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a66a1	c2 20		rep #$20	            REP #$20
.3a66a3	a9 01 00	lda #$0001	                LDA #1                      ; ARGUMENT1 := 1
.3a66a6	85 23		sta $0823	                STA ARGUMENT1
.3a66a8	a9 00 00	lda #$0000	                LDA #0
.3a66ab	85 25		sta $0825	                STA ARGUMENT1+2
.3a66ad	e2 20		sep #$20	            SEP #$20
.3a66af	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.3a66b3	c2 20		rep #$20	            REP #$20
.3a66b5	29 ff 00	and #$00ff	                AND #$00FF
.3a66b8	85 8f		sta $088f	                STA MCOUNT                  ; Save it to MCOUNT for later
.3a66ba	a8		tay		                TAY                         ; Y := number of dimensions
.3a66bb	a2 01 00	ldx #$0001	                LDX #1                      ; X := index to size 0
.3a66be					size_loop
.3a66be	c2 20		rep #$20	            REP #$20
.3a66c0	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X           ; ARGUMENT2 := Ith dimension
.3a66c4	85 29		sta $0829	                STA ARGUMENT2
.3a66c6	a9 00 00	lda #$0000	                LDA #0
.3a66c9	85 2b		sta $082b	                STA ARGUMENT2+2
.3a66cb	e2 20		sep #$20	            SEP #$20
.3a66cd	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a66cf	85 2d		sta $082d	                STA ARGTYPE2
.3a66d1	c2 20		rep #$20	            REP #$20
.3a66d3	20 59 28	jsr $3a2859	            JSR OP_MULTIPLY
.3a66d6	e8		inx		                INX
.3a66d7	e8		inx		                INX
.3a66d8	88		dey		                DEY
.3a66d9	d0 e3		bne $3a66be	                BNE size_loop               ; If there are more dimensions, take the next one
.3a66db	c2 20		rep #$20	            REP #$20
.3a66dd	a9 04 00	lda #$0004	                LDA #ARGUMENT_SIZE-1        ; Size of a data item (don't include the type code)
.3a66e0	85 29		sta $0829	                STA ARGUMENT2
.3a66e2	a9 00 00	lda #$0000	                LDA #0
.3a66e5	85 2b		sta $082b	                STA ARGUMENT2+2
.3a66e7	20 59 28	jsr $3a2859	            JSR OP_MULTIPLY
.3a66ea	e2 20		sep #$20	            SEP #$20
.3a66ec	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF             ; SCRATCH := N * 2
.3a66f0	85 0c		sta $080c	                STA SCRATCH
.3a66f2	a9 00		lda #$00	                LDA #0
.3a66f4	85 0d		sta $080d	                STA SCRATCH+1
.3a66f6	c2 20		rep #$20	            REP #$20
.3a66f8	06 0c		asl $080c	                ASL SCRATCH
.3a66fa	38		sec		                SEC                         ; ARGUMENT1 := size of the complete block
.3a66fb	a5 23		lda $0823	                LDA ARGUMENT1
.3a66fd	65 0c		adc $080c	                ADC SCRATCH                 ; Size of data area + N*2 + 1 (in carry)
.3a66ff	85 23		sta $0823	                STA ARGUMENT1
.3a6701	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6703	69 00 00	adc #$0000	                ADC #0
.3a6706	85 25		sta $0825	                STA ARGUMENT1+2
.3a6708	d0 29		bne $3a6733	                BNE too_big                 ; size > 16-bit? Yes: throw an error
.3a670a	e2 20		sep #$20	            SEP #$20
.3a670c	a5 ea		lda $08ea	                LDA TOFINDTYPE              ; Get the type
.3a670e	09 80		ora #$80	                ORA #$80                    ; Flip the flag to make it an array of that type
.3a6710	a6 23		ldx $0823	                LDX ARGUMENT1               ; Get the computed size
.3a6712	20 d3 10	jsr $3a10d3	            JSR ALLOC
.3a6715	e2 20		sep #$20	            SEP #$20
.3a6717	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.3a671b	87 c0		sta [$08c0]	                STA [CURRBLOCK]             ; Write the number of dimensions to the array's preamble
.3a671d	a0 01 00	ldy #$0001	                LDY #1
.3a6720	a2 00 00	ldx #$0000	                LDX #0
.3a6723					copy_loop
.3a6723	e2 20		sep #$20	            SEP #$20
.3a6725	bf 01 4d 00	lda $004d01,x	                LDA @lARRIDXBUF+1,X         ; ARGUMENT2 := Ith dimension
.3a6729	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y           ; And write the dimension to the array's preamble
.3a672b	e4 8f		cpx $088f	                CPX MCOUNT                  ; Have we written the last byte?
.3a672d	f0 23		beq $3a6752	                BEQ null_array              ; Yes: clear the array
.3a672f	e8		inx		                INX                         ; No: move to the next byte
.3a6730	c8		iny		                INY
.3a6731	80 f0		bra $3a6723	                BRA copy_loop
.3a6733					too_big
.3a6733	08		php		            PHP
.3a6734	c2 20		rep #$20	            REP #$20
.3a6736	48		pha		            PHA
.3a6737	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a673a	5b		tcd		            TCD
.3a673b	68		pla		            PLA
.3a673c	28		plp		            PLP
.3a673d	e2 20		sep #$20	            SEP #$20
.3a673f	a9 09		lda #$09	            LDA #ERR_RANGE
.3a6741	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6745	c2 20		rep #$20	            REP #$20
.3a6747	29 ff 00	and #$00ff	            AND #$00FF
.3a674a	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a674d	e2 20		sep #$20	            SEP #$20
.3a674f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6752					null_array
.3a6752	e2 20		sep #$20	            SEP #$20
.3a6754	38		sec		                SEC                         ; INDEX := pointer to first value
.3a6755	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a6757	67 c0		adc [$08c0]	                ADC [CURRBLOCK]
.3a6759	85 08		sta $0808	                STA INDEX
.3a675b	a5 c1		lda $08c1	                LDA CURRBLOCK+1
.3a675d	69 00		adc #$00	                ADC #0
.3a675f	85 09		sta $0809	                STA INDEX+1
.3a6761	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a6763	69 00		adc #$00	                ADC #0
.3a6765	85 0a		sta $080a	                STA INDEX+2
.3a6767	64 0b		stz $080b	                STZ INDEX+3
.3a6769	c2 20		rep #$20	            REP #$20
.3a676b	a0 05 00	ldy #$0005	                LDY #HEAPOBJ.END            ; SCRATCH := pointer the the first byte after the array
.3a676e	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a6770	85 0c		sta $080c	                STA SCRATCH
.3a6772	e2 20		sep #$20	            SEP #$20
.3a6774	c8		iny		                INY
.3a6775	c8		iny		                INY
.3a6776	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a6778	85 0e		sta $080e	                STA SCRATCH+2
.3a677a	64 0f		stz $080f	                STZ SCRATCH+3
.3a677c					clr_loop
.3a677c	e2 20		sep #$20	            SEP #$20
.3a677e	a9 00		lda #$00	                LDA #0
.3a6780	87 08		sta [$0808]	                STA [INDEX]                 ; Clear the byte
.3a6782	c2 20		rep #$20	            REP #$20
.3a6784	18		clc		                CLC                         ; Increment INDEX
.3a6785	a5 08		lda $0808	                LDA INDEX
.3a6787	69 01 00	adc #$0001	                ADC #1
.3a678a	85 08		sta $0808	                STA INDEX
.3a678c	a5 0a		lda $080a	                LDA INDEX+2
.3a678e	69 00 00	adc #$0000	                ADC #0
.3a6791	85 0a		sta $080a	                STA INDEX+2
.3a6793	c5 0e		cmp $080e	                CMP SCRATCH+2               ; INDEX == SCRATCH?
.3a6795	d0 e5		bne $3a677c	                BNE clr_loop                ; No: write to this next byte
.3a6797	a5 08		lda $0808	                LDA INDEX
.3a6799	c5 0c		cmp $080c	                CMP SCRATCH
.3a679b	d0 df		bne $3a677c	                BNE clr_loop
.3a679d					done
.3a679d	28		plp		                PLP
.3a679e	60		rts		            RTS
.3a679f					ARR_CELL
.3a679f	08		php		                PHP
.3a67a0	c2 20		rep #$20	            REP #$20
.3a67a2	64 08		stz $0808	                STZ INDEX               ; INDEX := 0
.3a67a4	64 0a		stz $080a	                STZ INDEX+2
.3a67a6	e2 20		sep #$20	            SEP #$20
.3a67a8	af 00 4d 00	lda $004d00	                LDA @l ARRIDXBUF        ; MCOUNT := N (number of dimensions)
.3a67ac	85 8f		sta $088f	                STA MCOUNT
.3a67ae	64 90		stz $0890	                STZ MCOUNT+1
.3a67b0	a2 01 00	ldx #$0001	                LDX #1                  ; X := index to dimension 0
.3a67b3	e2 20		sep #$20	            SEP #$20
.3a67b5	a7 c0		lda [$08c0]	                LDA [CURRBLOCK]         ; Make sure the dimensions of the array
.3a67b7	c5 8f		cmp $088f	                CMP MCOUNT              ; ... match those requested
.3a67b9	f0 22		beq $3a67dd	                BEQ dims_match          ; Yes: the dimensions match
.3a67bb	a6 8f		ldx $088f	                LDX MCOUNT
.3a67bd	00		brk #		                BRK
.3a67be					arg_err
.3a67be	08		php		            PHP
.3a67bf	c2 20		rep #$20	            REP #$20
.3a67c1	48		pha		            PHA
.3a67c2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a67c5	5b		tcd		            TCD
.3a67c6	68		pla		            PLA
.3a67c7	28		plp		            PLP
.3a67c8	e2 20		sep #$20	            SEP #$20
.3a67ca	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a67cc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a67d0	c2 20		rep #$20	            REP #$20
.3a67d2	29 ff 00	and #$00ff	            AND #$00FF
.3a67d5	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a67d8	e2 20		sep #$20	            SEP #$20
.3a67da	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a67dd	c9 01		cmp #$01	dims_match      CMP #1                  ; Check to see if this array is one dimensional
.3a67df	f0 3a		beq $3a681b	                BEQ add_last            ; If so, just add the index of the cell to INDEX
.3a67e1	a0 01 00	ldy #$0001	                LDY #1
.3a67e4					index_loop
.3a67e4	e2 20		sep #$20	            SEP #$20
.3a67e6	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; ARGUMENT1 := I_j
.3a67ea	85 23		sta $0823	                STA ARGUMENT1
.3a67ec	64 24		stz $0824	                STZ ARGUMENT1+1
.3a67ee	64 25		stz $0825	                STZ ARGUMENT1+2
.3a67f0	64 26		stz $0826	                STZ ARGUMENT1+3
.3a67f2	b7 c0		lda [$08c0],y	                LDA [CURRBLOCK],Y       ; ARGUMENT2 := D_j
.3a67f4	85 29		sta $0829	                STA ARGUMENT2
.3a67f6	64 2a		stz $082a	                STZ ARGUMENT2+1
.3a67f8	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a67fa	64 2c		stz $082c	                STZ ARGUMENT2+3
.3a67fc	a5 23		lda $0823	                LDA ARGUMENT1
.3a67fe	c5 29		cmp $0829	                CMP ARGUMENT2           ; Is I_j >= D_j
.3a6800	b0 68		bcs $3a686a	                BGE range_err           ; Yes: throw an out-of-range error
.3a6802	20 59 28	jsr $3a2859	            JSR OP_MULTIPLY
.3a6805	c2 20		rep #$20	            REP #$20
.3a6807	18		clc		                CLC                     ; INDEX := INDEX + ARGUMENT1
.3a6808	a5 08		lda $0808	                LDA INDEX
.3a680a	65 23		adc $0823	                ADC ARGUMENT1
.3a680c	85 08		sta $0808	                STA INDEX
.3a680e	a5 0a		lda $080a	                LDA INDEX+2
.3a6810	65 25		adc $0825	                ADC ARGUMENT1+2
.3a6812	85 0a		sta $080a	                STA INDEX+2
.3a6814	e8		inx		                INX
.3a6815	e8		inx		                INX
.3a6816	c8		iny		                INY
.3a6817	c4 8f		cpy $088f	                CPY MCOUNT              ; Are we on the last index?
.3a6819	d0 c9		bne $3a67e4	                BNE index_loop          ; No: move to the next index and try again
.3a681b					add_last
.3a681b	e2 20		sep #$20	            SEP #$20
.3a681d	18		clc		                CLC
.3a681e	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; INDEX := INDEX + I_(n-1)
.3a6822	85 90		sta $0890	                STA MCOUNT+1
.3a6824	65 08		adc $0808	                ADC INDEX
.3a6826	85 08		sta $0808	                STA INDEX
.3a6828	a5 09		lda $0809	                LDA INDEX+1
.3a682a	69 00		adc #$00	                ADC #0
.3a682c	85 09		sta $0809	                STA INDEX+1
.3a682e	c2 20		rep #$20	            REP #$20
.3a6830	a5 0a		lda $080a	                LDA INDEX+2
.3a6832	69 00 00	adc #$0000	                ADC #0
.3a6835	85 0a		sta $080a	                STA INDEX+2
.3a6837	c2 20		rep #$20	            REP #$20
.3a6839	06 08		asl $0808	                ASL INDEX               ; INDEX := INDEX * 4 (size of a value)
.3a683b	26 0a		rol $080a	                ROL INDEX+2
.3a683d	06 08		asl $0808	                ASL INDEX
.3a683f	26 0a		rol $080a	                ROL INDEX+2
.3a6841	e2 20		sep #$20	            SEP #$20
.3a6843	38		sec		                SEC
.3a6844	a5 08		lda $0808	                LDA INDEX
.3a6846	65 8f		adc $088f	                ADC MCOUNT
.3a6848	85 08		sta $0808	                STA INDEX
.3a684a	a5 09		lda $0809	                LDA INDEX+1
.3a684c	69 00		adc #$00	                ADC #0
.3a684e	85 09		sta $0809	                STA INDEX+1
.3a6850	c2 20		rep #$20	            REP #$20
.3a6852	a5 0a		lda $080a	                LDA INDEX+2
.3a6854	69 00 00	adc #$0000	                ADC #0
.3a6857	85 0a		sta $080a	                STA INDEX+2
.3a6859	18		clc		                CLC                     ; INDEX := INDEX + CURRBLOCK (point to the address desired)
.3a685a	a5 08		lda $0808	                LDA INDEX
.3a685c	65 c0		adc $08c0	                ADC CURRBLOCK
.3a685e	85 08		sta $0808	                STA INDEX
.3a6860	e2 20		sep #$20	            SEP #$20
.3a6862	a5 0a		lda $080a	                LDA INDEX+2
.3a6864	65 c2		adc $08c2	                ADC CURRBLOCK+2
.3a6866	85 0a		sta $080a	                STA INDEX+2
.3a6868	28		plp		                PLP
.3a6869	60		rts		            RTS
.3a686a					range_err
.3a686a	08		php		            PHP
.3a686b	c2 20		rep #$20	            REP #$20
.3a686d	48		pha		            PHA
.3a686e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6871	5b		tcd		            TCD
.3a6872	68		pla		            PLA
.3a6873	28		plp		            PLP
.3a6874	e2 20		sep #$20	            SEP #$20
.3a6876	a9 09		lda #$09	            LDA #ERR_RANGE
.3a6878	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a687c	c2 20		rep #$20	            REP #$20
.3a687e	29 ff 00	and #$00ff	            AND #$00FF
.3a6881	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6884	e2 20		sep #$20	            SEP #$20
.3a6886	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6889					ARR_SET
.3a6889	08		php		                PHP
.3a688a	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a688d	e2 20		sep #$20	            SEP #$20
.3a688f	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.3a6892	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a6894	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.3a6896	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string array?
.3a6898	d0 05		bne $3a689f	                BNE chk_integer
.3a689a	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a689d	80 10		bra $3a68af	                BRA save_type
.3a689f	c9 00		cmp #$00	chk_integer     CMP #TYPE_INTEGER   ; Is it an integer array?
.3a68a1	d0 05		bne $3a68a8	                BNE chk_float
.3a68a3	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a68a6	80 07		bra $3a68af	                BRA save_type
.3a68a8	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT     ; Is it an float array?
.3a68aa	d0 2b		bne $3a68d7	                BNE type_mismatch   ; No: throw a type mismatch error... something strange...
.3a68ac	20 bf 07	jsr $3a07bf	            JSR ASS_ARG1_FLOAT
.3a68af	a5 27		lda $0827	save_type       LDA ARGTYPE1        ; Save the type
.3a68b1	48		pha		                PHA
.3a68b2	c2 20		rep #$20	            REP #$20
.3a68b4	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Save ARGUMENT1
.3a68b6	48		pha		                PHA
.3a68b7	a5 23		lda $0823	                LDA ARGUMENT1
.3a68b9	48		pha		                PHA
.3a68ba	20 9f 67	jsr $3a679f	            JSR ARR_CELL
.3a68bd	68		pla		                PLA                 ; Restore ARGUMENT1
.3a68be	85 23		sta $0823	                STA ARGUMENT1
.3a68c0	68		pla		                PLA
.3a68c1	85 25		sta $0825	                STA ARGUMENT1+2
.3a68c3	e2 20		sep #$20	            SEP #$20
.3a68c5	68		pla		                PLA
.3a68c6	85 27		sta $0827	                STA ARGTYPE1
.3a68c8	c2 20		rep #$20	            REP #$20
.3a68ca	a5 23		lda $0823	                LDA ARGUMENT1       ; Set the value in the cell
.3a68cc	87 08		sta [$0808]	                STA [INDEX]
.3a68ce	a0 02 00	ldy #$0002	                LDY #2
.3a68d1	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a68d3	97 08		sta [$0808],y	                STA [INDEX],Y
.3a68d5	28		plp		                PLP
.3a68d6	60		rts		            RTS
.3a68d7					type_mismatch
.3a68d7	08		php		            PHP
.3a68d8	c2 20		rep #$20	            REP #$20
.3a68da	48		pha		            PHA
.3a68db	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a68de	5b		tcd		            TCD
.3a68df	68		pla		            PLA
.3a68e0	28		plp		            PLP
.3a68e1	e2 20		sep #$20	            SEP #$20
.3a68e3	a9 04		lda #$04	            LDA #ERR_TYPE
.3a68e5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a68e9	c2 20		rep #$20	            REP #$20
.3a68eb	29 ff 00	and #$00ff	            AND #$00FF
.3a68ee	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a68f1	e2 20		sep #$20	            SEP #$20
.3a68f3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a68f6					ARR_REF
.3a68f6	08		php		                PHP
.3a68f7	20 0f 13	jsr $3a130f	            JSR HEAP_GETHED
.3a68fa	f4 00 00	pea #$0000	                PEA #0              ; Make room on the stack that ARR_CELL expects
.3a68fd	f4 00 00	pea #$0000	                PEA #0
.3a6900	e2 20		sep #$20	            SEP #$20
.3a6902	48		pha		                PHA
.3a6903	20 9f 67	jsr $3a679f	            JSR ARR_CELL
.3a6906	e2 20		sep #$20	            SEP #$20
.3a6908	68		pla		                PLA
.3a6909	c2 20		rep #$20	            REP #$20
.3a690b	68		pla		                PLA
.3a690c	68		pla		                PLA
.3a690d	c2 20		rep #$20	            REP #$20
.3a690f	a7 08		lda [$0808]	                LDA [INDEX]         ; Get the value in the cell
.3a6911	85 23		sta $0823	                STA ARGUMENT1
.3a6913	a0 02 00	ldy #$0002	                LDY #2
.3a6916	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a6918	85 25		sta $0825	                STA ARGUMENT1+2
.3a691a	e2 20		sep #$20	            SEP #$20
.3a691c	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.3a691f	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a6921	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.3a6923	85 27		sta $0827	                STA ARGTYPE1        ; Set the type of the return value
.3a6925	20 63 18	jsr $3a1863	            JSR STR_NORMAL
.3a6928	28		plp		                PLP
.3a6929	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\dos.s

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					FILESIZE            .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
>3af073					CLUSTER_BUFF    .fill 512           ; A buffer for cluster read/write operations
.3af273					FD_IN
>3af273					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>3af274					DEV                 .byte ?             ; The ID of the device holding the file
>3af275					PATH                .dword ?            ; Pointer to a NULL terminated path string
>3af279					CLUSTER             .dword ?            ; The current cluster of the file.
>3af27d					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>3af281					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>3af285					FILESIZE            .dword ?            ; The size of the file
>3af289					CREATE_DATE         .word ?             ; The creation date of the file
>3af28b					CREATE_TIME         .word ?             ; The creation time of the file
>3af28d					MODIFIED_DATE       .word ?             ; The modification date of the file
>3af28f					MODIFIED_TIME       .word ?             ; The modification time of the file
.3a692a					PR_FILESIZE
.3a692a	da		phx		                PHX
.3a692b	0b		phd		                PHD
.3a692c	08		php		                PHP
.3a692d	08		php		            PHP
.3a692e	c2 20		rep #$20	            REP #$20
.3a6930	48		pha		            PHA
.3a6931	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6934	5b		tcd		            TCD
.3a6935	68		pla		            PLA
.3a6936	28		plp		            PLP
.3a6937	c2 30		rep #$30	            REP #$30
.3a6939	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a693b	89 f0 ff	bit #$fff0	                BIT #$FFF0              ; Check to see if the amount is in MB range
.3a693e	d0 29		bne $3a6969	                BNE pr_mb               ; If so, print it in MBs
.3a6940	89 0f 00	bit #$000f	                BIT #$000F              ; Check to see if the amount is in KB range
.3a6943	d0 0c		bne $3a6951	                BNE pr_kb
.3a6945	a5 23		lda $0823	                LDA ARGUMENT1
.3a6947	89 00 fc	bit #$fc00	                BIT #$FC00
.3a694a	d0 05		bne $3a6951	                BNE pr_kb               ; If so, print it in KBs
.3a694c					pr_regular
.3a694c	20 1d 46	jsr $3a461d	            JSR PR_INTEGER
.3a694f	80 2e		bra $3a697f	                BRA done
.3a6951	a2 0a 00	ldx #$000a	pr_kb           LDX #10                 ; Shift so the amount in KB is in ARGUMENT1
.3a6954	46 25		lsr $0825	kb_shift        LSR ARGUMENT1+2
.3a6956	66 23		ror $0823	                ROR ARGUMENT1
.3a6958	ca		dex		                DEX
.3a6959	d0 f9		bne $3a6954	                BNE kb_shift
.3a695b	20 1d 46	jsr $3a461d	            JSR PR_INTEGER
.3a695e	e2 20		sep #$20	            SEP #$20
.3a6960	a9 4b		lda #$4b	                LDA #'K'
.3a6962	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6965	c2 20		rep #$20	            REP #$20
.3a6967	80 16		bra $3a697f	                BRA done
.3a6969	a2 14 00	ldx #$0014	pr_mb           LDX #20                 ; Shift so the amount in MB is in ARGUMENT1
.3a696c	46 25		lsr $0825	mb_shift        LSR ARGUMENT1+2
.3a696e	66 23		ror $0823	                ROR ARGUMENT1
.3a6970	ca		dex		                DEX
.3a6971	d0 f9		bne $3a696c	                BNE mb_shift
.3a6973	20 1d 46	jsr $3a461d	            JSR PR_INTEGER
.3a6976	e2 20		sep #$20	            SEP #$20
.3a6978	a9 4d		lda #$4d	                LDA #'M'
.3a697a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a697d	c2 20		rep #$20	            REP #$20
.3a697f	28		plp		done            PLP
.3a6980	2b		pld		                PLD
.3a6981	fa		plx		                PLX
.3a6982	60		rts		            RTS
.3a6983					CMD_DIR
.3a6983	0b		phd		                PHD
.3a6984	08		php		                PHP
.3a6985	c2 30		rep #$30	            REP #$30
.3a6987	a9 00 00	lda #$0000	                LDA #0                      ; Zero out the pagination line count
.3a698a	8f b6 08 00	sta $0008b6	                STA @l LINECOUNT
.3a698e	8f b8 08 00	sta $0008b8	                STA @l LINECOUNT+2
.3a6992	e2 20		sep #$20	            SEP #$20
.3a6994	20 7e 22	jsr $3a227e	            JSR PEEK_TOK
.3a6997	c9 00		cmp #$00	                CMP #0
.3a6999	f0 08		beq $3a69a3	                BEQ set_null                ; If none provided, set the path to empty
.3a699b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a699e	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a69a1	80 11		bra $3a69b4	                BRA set_fd
.3a69a3					set_null
.3a69a3	c2 20		rep #$20	            REP #$20
.3a69a5	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT1 to the NULL string
.3a69a8	85 23		sta $0823	                STA ARGUMENT1
.3a69aa	85 25		sta $0825	                STA ARGUMENT1+2
.3a69ac	e2 20		sep #$20	            SEP #$20
.3a69ae	a9 02		lda #$02	                LDA #TYPE_STRING
.3a69b0	85 27		sta $0827	                STA ARGTYPE1
.3a69b2	c2 20		rep #$20	            REP #$20
.3a69b4					set_fd
.3a69b4	20 e4 6a	jsr $3a6ae4	            JSR SETFILEDESC
.3a69b7	22 08 11 00	jsl $001108	                JSL FK_DIROPEN              ; Open up the directory
.3a69bb	b0 22		bcs $3a69df	                BCS pr_first
.3a69bd	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a69c0	08		php		            PHP
.3a69c1	c2 20		rep #$20	            REP #$20
.3a69c3	48		pha		            PHA
.3a69c4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a69c7	5b		tcd		            TCD
.3a69c8	68		pla		            PLA
.3a69c9	28		plp		            PLP
.3a69ca	e2 20		sep #$20	            SEP #$20
.3a69cc	a9 10		lda #$10	            LDA #ERR_DIRECTORY
.3a69ce	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a69d2	c2 20		rep #$20	            REP #$20
.3a69d4	29 ff 00	and #$00ff	            AND #$00FF
.3a69d7	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a69da	e2 20		sep #$20	            SEP #$20
.3a69dc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a69df					pr_first
.3a69df	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a69e2					pr_entry
.3a69e2	08		php		            PHP
.3a69e3	c2 20		rep #$20	            REP #$20
.3a69e5	48		pha		            PHA
.3a69e6	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a69e9	5b		tcd		            TCD
.3a69ea	68		pla		            PLA
.3a69eb	28		plp		            PLP
.3a69ec	e2 20		sep #$20	            SEP #$20
.3a69ee	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Start with the file name
.3a69f1	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the initial character of the name
.3a69f3	d0 03		bne $3a69f8	                BNE chk_unused
.3a69f5	82 a9 00	brl $3a6aa1	                BRL done                    ; If it's NULL, we're done
.3a69f8	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED     ; Is it the unusued code?
.3a69fa	d0 03		bne $3a69ff	                BNE chk_attributes
.3a69fc	82 96 00	brl $3a6a95	                BRL next_entry              ; Yes: go to the next entry
.3a69ff	a0 0b 00	ldy #$000b	chk_attributes  LDY #DIRENTRY.ATTRIBUTE
.3a6a02	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute byte
.3a6a04	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.3a6a06	f0 03		beq $3a6a0b	                BEQ chk_hidden
.3a6a08	82 a9 00	brl $3a6ab4	                BRL pr_volume               ; Print the volume label
.3a6a0b	89 02		bit #$02	chk_hidden      BIT #DOS_ATTR_HIDDEN        ; Is it a hidden file?
.3a6a0d	f0 03		beq $3a6a12	                BEQ chk_long
.3a6a0f	82 83 00	brl $3a6a95	                BRL next_entry              ; Yes: go to the next entry
.3a6a12	29 0f		and #$0f	chk_long        AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.3a6a14	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.3a6a16	d0 03		bne $3a6a1b	                BNE get_short_name
.3a6a18	82 7a 00	brl $3a6a95	                BRL next_entry              ; Yes: go to the next entry
.3a6a1b	a0 00 00	ldy #$0000	get_short_name  LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.3a6a1e	b7 18		lda [$0338],y	pr_name_loop    LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a6a20	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6a23	c8		iny		                INY                         ; Move to the next character
.3a6a24	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.3a6a27	d0 f5		bne $3a6a1e	                BNE pr_name_loop            ; No: print this new character
.3a6a29	a9 20		lda #$20	                LDA #' '                    ; Print the separator
.3a6a2b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6a2e	a0 08 00	ldy #$0008	                LDY #DIRENTRY.SHORTNAME+8   ; Move to the first of the extension characters
.3a6a31	b7 18		lda [$0338],y	pr_ext_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a6a33	20 18 00	jsr $3a0018	                JSR PRINTC                  ; Otherwise: print it.
.3a6a36	c8		iny		                INY                         ; Move to the next character
.3a6a37	c0 0b 00	cpy #$000b	                CPY #DIRENTRY.SHORTNAME+11  ; Are we at the end of the extension portion?
.3a6a3a	d0 f5		bne $3a6a31	                BNE pr_ext_loop             ; No: print this new character
.3a6a3c	a9 09		lda #$09	pr_tab1         LDA #CHAR_TAB               ; Print a TAB
.3a6a3e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6a41	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.3a6a44	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.3a6a46	89 10		bit #$10	                BIT #DOS_ATTR_DIR           ; Is it a directory?
.3a6a48	d0 1e		bne $3a6a68	                BNE pr_attr                 ; Yes: skip printing a file size
.3a6a4a	c2 20		rep #$20	            REP #$20
.3a6a4c	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.3a6a4f	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the file size
.3a6a51	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.3a6a55	c8		iny		                INY
.3a6a56	c8		iny		                INY
.3a6a57	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3a6a59	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.3a6a5d	e2 20		sep #$20	            SEP #$20
.3a6a5f	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a6a61	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a6a65	20 2a 69	jsr $3a692a	            JSR PR_FILESIZE
.3a6a68	a9 09		lda #$09	pr_attr         LDA #CHAR_TAB               ; Print a TAB
.3a6a6a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6a6d	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.3a6a70	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.3a6a72	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.3a6a74	d0 1c		bne $3a6a92	                BNE end_entry               ; Yes: we're done printing this entry
.3a6a76	89 01		bit #$01	chk_read        BIT #DOS_ATTR_RO            ; Is it a read-only file?
.3a6a78	f0 05		beq $3a6a7f	                BEQ chk_system
.3a6a7a	a9 52		lda #$52	                LDA #'R'                    ; Yes: print an R
.3a6a7c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6a7f	89 04		bit #$04	chk_system      BIT #DOS_ATTR_SYSTEM        ; Is it System file?
.3a6a81	f0 05		beq $3a6a88	                BEQ chk_directory
.3a6a83	a9 53		lda #$53	                LDA #'S'                    ; Yes: print an S
.3a6a85	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6a88	89 10		bit #$10	chk_directory   BIT #DOS_ATTR_DIR           ; Is it a directory?
.3a6a8a	f0 05		beq $3a6a91	                BEQ pr_tab2
.3a6a8c	a9 44		lda #$44	                LDA #'D'                    ; Yes: print a D
.3a6a8e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6a91	ea		nop		pr_tab2         NOP
.3a6a92					end_entry
.3a6a92	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a6a95					next_entry
.3a6a95	20 ee 03	jsr $3a03ee	            JSR PAGINATE
.3a6a98	22 0c 11 00	jsl $00110c	                JSL FK_DIRNEXT
.3a6a9c	90 03		bcc $3a6aa1	                BCC done
.3a6a9e	82 41 ff	brl $3a69e2	                BRL pr_entry
.3a6aa1					done
.3a6aa1	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6aa4	08		php		            PHP
.3a6aa5	c2 20		rep #$20	            REP #$20
.3a6aa7	48		pha		            PHA
.3a6aa8	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6aab	5b		tcd		            TCD
.3a6aac	68		pla		            PLA
.3a6aad	28		plp		            PLP
.3a6aae	20 62 21	jsr $3a2162	            JSR SKIPSTMT
.3a6ab1	28		plp		                PLP
.3a6ab2	2b		pld		                PLD
.3a6ab3	60		rts		            RTS
.3a6ab4					pr_volume
.3a6ab4	08		php		            PHP
.3a6ab5	c2 20		rep #$20	            REP #$20
.3a6ab7	48		pha		            PHA
.3a6ab8	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a6abb	5b		tcd		            TCD
.3a6abc	68		pla		            PLA
.3a6abd	28		plp		            PLP
.3a6abe	e2 20		sep #$20	            SEP #$20
.3a6ac0	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.3a6ac2	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.3a6ac4	f0 cf		beq $3a6a95	                BEQ next_entry              ; Yes: skip it
.3a6ac6	a9 5b		lda #$5b	pr_lbracket     LDA #'['
.3a6ac8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6acb	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.3a6ace	b7 18		lda [$0338],y	pr_vol_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a6ad0	c9 20		cmp #$20	                CMP #CHAR_SP                ; Is it a blank?
.3a6ad2	f0 09		beq $3a6add	                BEQ pr_rbracket             ; Yes: end the name and print the dot
.3a6ad4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6ad7	c8		iny		                INY                         ; Move to the next character
.3a6ad8	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.3a6adb	d0 f1		bne $3a6ace	                BNE pr_vol_loop             ; No: print this new character
.3a6add	a9 5d		lda #$5d	pr_rbracket     LDA #']'                    ; Print a close bracket
.3a6adf	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6ae2	80 ae		bra $3a6a92	                BRA end_entry               ; And try to get the next entry
.3a6ae4					SETFILEDESC
.3a6ae4	0b		phd		                PHD
.3a6ae5	08		php		                PHP
.3a6ae6	08		php		            PHP
.3a6ae7	c2 20		rep #$20	            REP #$20
.3a6ae9	48		pha		            PHA
.3a6aea	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a6aed	5b		tcd		            TCD
.3a6aee	68		pla		            PLA
.3a6aef	28		plp		            PLP
.3a6af0	c2 30		rep #$30	            REP #$30
.3a6af2	a9 73 f2	lda #$f273	                LDA #<>FD_IN            ; Point to the file descriptor
.3a6af5	85 20		sta $0340	                STA DOS_FD_PTR
.3a6af7	a9 3a 00	lda #$003a	                LDA #`FD_IN
.3a6afa	85 22		sta $0342	                STA DOS_FD_PTR+2
.3a6afc	a0 00 00	ldy #$0000	                LDY #0                  ; Fille the file descriptor with 0
.3a6aff	e2 20		sep #$20	            SEP #$20
.3a6b01	a9 00		lda #$00	                LDA #0
.3a6b03	97 20		sta [$0340],y	zero_loop       STA [DOS_FD_PTR],Y
.3a6b05	c8		iny		                INY
.3a6b06	c0 1e 00	cpy #$001e	                CPY #SIZE(FILEDESC)
.3a6b09	d0 f8		bne $3a6b03	                BNE zero_loop
.3a6b0b	c2 20		rep #$20	            REP #$20
.3a6b0d	a9 73 f0	lda #$f073	                LDA #<>CLUSTER_BUFF     ; Point to the cluster buffer
.3a6b10	8f 81 f2 3a	sta $3af281	                STA @l FD_IN.BUFFER
.3a6b14	a9 3a 00	lda #$003a	                LDA #`CLUSTER_BUFF
.3a6b17	8f 83 f2 3a	sta $3af283	                STA @l FD_IN.BUFFER+2
.3a6b1b	af 23 08 00	lda $000823	                LDA @l ARGUMENT1        ; Point the file desriptor to the path
.3a6b1f	8f 75 f2 3a	sta $3af275	                STA @l FD_IN.PATH
.3a6b23	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a6b27	8f 77 f2 3a	sta $3af277	                STA @l FD_IN.PATH+2
.3a6b2b	28		plp		                PLP
.3a6b2c	2b		pld		                PLD
.3a6b2d	60		rts		            RTS
.3a6b2e					S_BLOAD
.3a6b2e	08		php		                PHP
.3a6b2f	c2 30		rep #$30	            REP #$30
.3a6b31	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a6b34	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6b37	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6b3a	20 e4 6a	jsr $3a6ae4	            JSR SETFILEDESC
.3a6b3d	e2 20		sep #$20	            SEP #$20
.3a6b3f	a9 2c		lda #$2c	                LDA #','
.3a6b41	85 37		sta $0837	                STA TARGETTOK
.3a6b43	20 5f 22	jsr $3a225f	            JSR OPT_TOK
.3a6b46	b0 0f		bcs $3a6b57	                BCS get_dest
.3a6b48	c2 20		rep #$20	            REP #$20
.3a6b4a	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set destination address to something "safe"
.3a6b4d	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a6b51	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a6b55	80 17		bra $3a6b6e	                BRA do_load
.3a6b57					get_dest
.3a6b57	20 1d 21	jsr $3a211d	            JSR INCBIP
.3a6b5a	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6b5d	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a6b60	c2 20		rep #$20	            REP #$20
.3a6b62	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the destination address
.3a6b64	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a6b68	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6b6a	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a6b6e	22 18 11 00	jsl $001118	do_load         JSL FK_LOAD                 ; Attempt to load the file
.3a6b72	b0 1f		bcs $3a6b93	                BCS done
.3a6b74	08		php		            PHP
.3a6b75	c2 20		rep #$20	            REP #$20
.3a6b77	48		pha		            PHA
.3a6b78	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6b7b	5b		tcd		            TCD
.3a6b7c	68		pla		            PLA
.3a6b7d	28		plp		            PLP
.3a6b7e	e2 20		sep #$20	            SEP #$20
.3a6b80	a9 11		lda #$11	            LDA #ERR_LOAD
.3a6b82	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6b86	c2 20		rep #$20	            REP #$20
.3a6b88	29 ff 00	and #$00ff	            AND #$00FF
.3a6b8b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6b8e	e2 20		sep #$20	            SEP #$20
.3a6b90	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6b93	28		plp		done            PLP
.3a6b94	60		rts		            RTS
.3a6b95					SET_DOSSTAT
.3a6b95	8b		phb		                PHB
.3a6b96	0b		phd		                PHD
.3a6b97	08		php		                PHP
.3a6b98	08		php		            PHP
.3a6b99	c2 20		rep #$20	            REP #$20
.3a6b9b	48		pha		            PHA
.3a6b9c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6b9f	5b		tcd		            TCD
.3a6ba0	68		pla		            PLA
.3a6ba1	28		plp		            PLP
.3a6ba2	08		php		            PHP
.3a6ba3	e2 20		sep #$20	            SEP #$20
.3a6ba5	48		pha		            PHA
.3a6ba6	a9 00		lda #$00	            LDA #BASIC_BANK
.3a6ba8	48		pha		            PHA
.3a6ba9	ab		plb		            PLB
.3a6baa	68		pla		            PLA
.3a6bab	28		plp		            PLP
.3a6bac	e2 20		sep #$20	            SEP #$20
.3a6bae	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS           ; Get the DOS status code
.3a6bb2	85 23		sta $0823	                STA ARGUMENT1
.3a6bb4	a9 00		lda #$00	                LDA #0
.3a6bb6	85 24		sta $0824	                STA ARGUMENT1+1
.3a6bb8	85 25		sta $0825	                STA ARGUMENT1+2
.3a6bba	85 26		sta $0826	                STA ARGUMENT1+3
.3a6bbc	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a6bbe	85 27		sta $0827	                STA ARGTYPE1
.3a6bc0	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (DOSSTAT)
.3a6bc2	a9 3a		lda #$3a	                LDA #`dosstat_name
.3a6bc4	85 e9		sta $08e9	                STA TOFIND+2
.3a6bc6	c2 20		rep #$20	            REP #$20
.3a6bc8	a9 f8 6b	lda #$6bf8	                LDA #<>dosstat_name
.3a6bcb	85 e7		sta $08e7	                STA TOFIND
.3a6bcd	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a6bd0	e2 20		sep #$20	            SEP #$20
.3a6bd2	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS          ; Get the BIOS status code
.3a6bd6	85 23		sta $0823	                STA ARGUMENT1
.3a6bd8	a9 00		lda #$00	                LDA #0
.3a6bda	85 24		sta $0824	                STA ARGUMENT1+1
.3a6bdc	85 25		sta $0825	                STA ARGUMENT1+2
.3a6bde	85 26		sta $0826	                STA ARGUMENT1+3
.3a6be0	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a6be2	85 27		sta $0827	                STA ARGTYPE1
.3a6be4	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BIOSSTAT)
.3a6be6	a9 3a		lda #$3a	                LDA #`biosstat_name
.3a6be8	85 e9		sta $08e9	                STA TOFIND+2
.3a6bea	c2 20		rep #$20	            REP #$20
.3a6bec	a9 00 6c	lda #$6c00	                LDA #<>biosstat_name
.3a6bef	85 e7		sta $08e7	                STA TOFIND
.3a6bf1	20 82 53	jsr $3a5382	            JSR VAR_SET
.3a6bf4	28		plp		                PLP
.3a6bf5	2b		pld		                PLD
.3a6bf6	ab		plb		                PLB
.3a6bf7	60		rts		            RTS
>3a6bf8	44 4f 53 53 54 41 54 00		dosstat_name    .null "DOSSTAT"
>3a6c00	42 49 4f 53 53 54 41 54		biosstat_name   .null "BIOSSTAT"
>3a6c08	00
.3a6c09					CMD_BRUN
.3a6c09	08		php		                PHP
.3a6c0a	c2 30		rep #$30	            REP #$30
.3a6c0c	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a6c0f	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6c12	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6c15	a5 23		lda $0823	                LDA ARGUMENT1
.3a6c17	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.3a6c1b	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6c1d	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.3a6c21	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a6c24	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a6c28	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a6c2c	22 24 11 00	jsl $001124	                JSL FK_RUN                  ; Attempt to run the file
.3a6c30	b0 25		bcs $3a6c57	                BCS done                    ; If we got it: try to execute it
.3a6c32	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6c35	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6c38	08		php		            PHP
.3a6c39	c2 20		rep #$20	            REP #$20
.3a6c3b	48		pha		            PHA
.3a6c3c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6c3f	5b		tcd		            TCD
.3a6c40	68		pla		            PLA
.3a6c41	28		plp		            PLP
.3a6c42	e2 20		sep #$20	            SEP #$20
.3a6c44	a9 11		lda #$11	            LDA #ERR_LOAD
.3a6c46	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6c4a	c2 20		rep #$20	            REP #$20
.3a6c4c	29 ff 00	and #$00ff	            AND #$00FF
.3a6c4f	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6c52	e2 20		sep #$20	            SEP #$20
.3a6c54	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6c57					done
.3a6c57	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6c5a	28		plp		                PLP
.3a6c5b	60		rts		            RTS
.3a6c5c					CMD_LOAD
.3a6c5c	08		php		                PHP
.3a6c5d	c2 30		rep #$30	            REP #$30
.3a6c5f	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a6c62	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6c65	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6c68	20 e4 6a	jsr $3a6ae4	            JSR SETFILEDESC
.3a6c6b	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a6c6e	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a6c72	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a6c75	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2        ; Set the destination address
.3a6c79	20 53 50	jsr $3a5053	            JSR CMD_NEW
.3a6c7c	22 18 11 00	jsl $001118	                JSL FK_LOAD                 ; Attempt to load the file
.3a6c80	b0 22		bcs $3a6ca4	                BCS start_tokenize          ; If we got it: start tokenizing
.3a6c82	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6c85	08		php		            PHP
.3a6c86	c2 20		rep #$20	            REP #$20
.3a6c88	48		pha		            PHA
.3a6c89	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6c8c	5b		tcd		            TCD
.3a6c8d	68		pla		            PLA
.3a6c8e	28		plp		            PLP
.3a6c8f	e2 20		sep #$20	            SEP #$20
.3a6c91	a9 11		lda #$11	            LDA #ERR_LOAD
.3a6c93	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6c97	c2 20		rep #$20	            REP #$20
.3a6c99	29 ff 00	and #$00ff	            AND #$00FF
.3a6c9c	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6c9f	e2 20		sep #$20	            SEP #$20
.3a6ca1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6ca4					start_tokenize
.3a6ca4	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6ca7	c2 20		rep #$20	            REP #$20
.3a6ca9	a2 12 00	ldx #$0012	                LDX #FILEDESC.FILESIZE
.3a6cac	18		clc		                CLC                         ; Set MTEMP to point to the byte after the file
.3a6cad	bf 73 f2 3a	lda $3af273,x	                LDA FD_IN,X
.3a6cb1	69 00 00	adc #$0000	                ADC #<>LOADBLOCK
.3a6cb4	85 92		sta $0892	                STA MTEMP
.3a6cb6	bf 75 f2 3a	lda $3af275,x	                LDA FD_IN+2,X
.3a6cba	69 01 00	adc #$0001	                ADC #`LOADBLOCK
.3a6cbd	85 94		sta $0894	                STA MTEMP+2
.3a6cbf	e2 20		sep #$20	            SEP #$20
.3a6cc1	a9 00		lda #$00	                LDA #0
.3a6cc3	87 92		sta [$0892]	                STA [MTEMP]                 ; Write a NULL right after the file
.3a6cc5	c2 20		rep #$20	            REP #$20
.3a6cc7	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK            ; Set MCURSOR to the begining of the loaded data
.3a6cca	85 7a		sta $087a	                STA MCURSOR
.3a6ccc	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a6ccf	85 7c		sta $087c	                STA MCURSOR+2
.3a6cd1	a2 00 00	ldx #$0000	copy_line       LDX #0
.3a6cd4					copy_char
.3a6cd4	e2 20		sep #$20	            SEP #$20
.3a6cd6	a7 7a		lda [$087a]	                LDA [MCURSOR]
.3a6cd8	f0 2a		beq $3a6d04	                BEQ clean_up                ; If the character is 0, we're done
.3a6cda	c9 0d		cmp #$0d	                CMP #CHAR_CR                ; If it is new line...
.3a6cdc	f0 12		beq $3a6cf0	                BEQ do_process              ; ... we want to process the line
.3a6cde	c9 0a		cmp #$0a	                CMP #CHAR_LF                ; If it is a line feed...
.3a6ce0	f0 04		beq $3a6ce6	                BEQ next_char               ; ... we want to skip it
.3a6ce2	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X              ; Otherwise, copy the character to the input buffer
.3a6ce5	e8		inx		                INX
.3a6ce6					next_char
.3a6ce6	c2 20		rep #$20	            REP #$20
.3a6ce8	e6 7a		inc $087a	                INC MCURSOR                 ; Advance the input cursor
.3a6cea	d0 e8		bne $3a6cd4	                BNE copy_char
.3a6cec	e6 7c		inc $087c	                INC MCURSOR+2
.3a6cee	80 e4		bra $3a6cd4	                BRA copy_char
.3a6cf0					do_process
.3a6cf0	e2 20		sep #$20	            SEP #$20
.3a6cf2	a9 00		lda #$00	                LDA #0                      ; Put a 0 at the end of the input buffer
.3a6cf4	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a6cf7	20 8c 27	jsr $3a278c	            JSR PROCESS
.3a6cfa	c2 20		rep #$20	            REP #$20
.3a6cfc	e6 7a		inc $087a	                INC MCURSOR                 ; Try again with the next line
.3a6cfe	d0 d1		bne $3a6cd1	                BNE copy_line
.3a6d00	e6 7c		inc $087c	                INC MCURSOR+2
.3a6d02	80 cd		bra $3a6cd1	                BRA copy_line
.3a6d04	e0 00 00	cpx #$0000	clean_up        CPX #0                      ; Is there data in the INPUTBUF?
.3a6d07	f0 0a		beq $3a6d13	                BEQ done                    ; No: just return
.3a6d09	e2 20		sep #$20	            SEP #$20
.3a6d0b	a9 00		lda #$00	                LDA #0                      ; Make sure there is a trailing NULL
.3a6d0d	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a6d10	20 8c 27	jsr $3a278c	            JSR PROCESS
.3a6d13	28		plp		done            PLP
.3a6d14	60		rts		            RTS
.3a6d15					S_BSAVE
.3a6d15	08		php		                PHP
.3a6d16	c2 30		rep #$30	            REP #$30
.3a6d18	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a6d1b	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6d1e	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6d21	20 e4 6a	jsr $3a6ae4	            JSR SETFILEDESC
.3a6d24	e2 20		sep #$20	            SEP #$20
.3a6d26	a9 2c		lda #$2c	                LDA #','
.3a6d28	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a6d2b	c2 20		rep #$20	            REP #$20
.3a6d2d	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6d30	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a6d33	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_SRC_PTR
.3a6d35	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a6d39	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6d3b	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a6d3f	e2 20		sep #$20	            SEP #$20
.3a6d41	a9 2c		lda #$2c	                LDA #','
.3a6d43	c2 20		rep #$20	            REP #$20
.3a6d45	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a6d48	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6d4b	20 51 06	jsr $3a0651	            JSR ASS_ARG1_INT
.3a6d4e	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_END_PTR
.3a6d50	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a6d54	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6d56	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a6d5a	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                 ; Attempt to save the memory to file.
.3a6d5e	b0 22		bcs $3a6d82	                BCS done
.3a6d60	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6d63	08		php		            PHP
.3a6d64	c2 20		rep #$20	            REP #$20
.3a6d66	48		pha		            PHA
.3a6d67	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6d6a	5b		tcd		            TCD
.3a6d6b	68		pla		            PLA
.3a6d6c	28		plp		            PLP
.3a6d6d	e2 20		sep #$20	            SEP #$20
.3a6d6f	a9 12		lda #$12	            LDA #ERR_SAVE
.3a6d71	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6d75	c2 20		rep #$20	            REP #$20
.3a6d77	29 ff 00	and #$00ff	            AND #$00FF
.3a6d7a	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6d7d	e2 20		sep #$20	            SEP #$20
.3a6d7f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6d82					done
.3a6d82	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6d85	28		plp		                PLP
.3a6d86	60		rts		            RTS
.3a6d87					COPY2PATHBUF
.3a6d87	da		phx		                PHX
.3a6d88	5a		phy		                PHY
.3a6d89	08		php		                PHP
.3a6d8a	a2 00 00	ldx #$0000	                LDX #0
.3a6d8d	a0 00 00	ldy #$0000	                LDY #0
.3a6d90	e2 20		sep #$20	            SEP #$20
.3a6d92	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y           ; Copy the path to the DOS_PATH_BUFF
.3a6d94	9d 00 04	sta $0400,x	                STA DOS_PATH_BUFF,X
.3a6d97	f0 04		beq $3a6d9d	                BEQ done
.3a6d99	e8		inx		                INX
.3a6d9a	c8		iny		                INY
.3a6d9b	80 f5		bra $3a6d92	                BRA loop
.3a6d9d	28		plp		done            PLP
.3a6d9e	7a		ply		                PLY
.3a6d9f	fa		plx		                PLX
.3a6da0	60		rts		            RTS
.3a6da1					CMD_SAVE
.3a6da1	08		php		                PHP
.3a6da2	c2 30		rep #$30	            REP #$30
.3a6da4	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a6da7	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6daa	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6dad	20 e4 6a	jsr $3a6ae4	            JSR SETFILEDESC
.3a6db0	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a6db3	85 a6		sta $08a6	                STA OBUFFER
.3a6db5	e2 20		sep #$20	            SEP #$20
.3a6db7	a9 01		lda #$01	                LDA #`LOADBLOCK
.3a6db9	85 a8		sta $08a8	                STA OBUFFER+2
.3a6dbb	a9 20		lda #$20	                LDA #DEV_BUFFER             ; Set up output for the buffer
.3a6dbd	85 b4		sta $08b4	                STA BCONSOLE
.3a6dbf	c2 20		rep #$20	            REP #$20
.3a6dc1	a9 00 00	lda #$0000	                LDA #0
.3a6dc4	85 ab		sta $08ab	                STA OBUFFIDX
.3a6dc6	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a6dc9	85 a9		sta $08a9	                STA OBUFFSIZE
.3a6dcb	c2 20		rep #$20	            REP #$20
.3a6dcd	a9 00 00	lda #$0000	                LDA #0                      ; Set start line number to 0
.3a6dd0	85 55		sta $0855	                STA MARG1
.3a6dd2	85 57		sta $0857	                STA MARG1+2
.3a6dd4	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set end line number to MAXINT
.3a6dd7	85 59		sta $0859	                STA MARG2
.3a6dd9	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.3a6ddc	85 5b		sta $085b	                STA MARG2+2
.3a6dde	20 8b 18	jsr $3a188b	            JSR LISTPROG
.3a6de1	e2 20		sep #$20	            SEP #$20
.3a6de3	a9 80		lda #$80	                LDA #DEV_SCREEN             ; Restore output to the screen
.3a6de5	85 b4		sta $08b4	                STA BCONSOLE
.3a6de7	c2 20		rep #$20	            REP #$20
.3a6de9	c6 ab		dec $08ab	                DEC OBUFFIDX                ; OBUFFIDX points to the next free byte... so pull it in one
.3a6deb	18		clc		                CLC                         ; Set the range of memory to save
.3a6dec	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a6def	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a6df3	65 ab		adc $08ab	                ADC OBUFFIDX
.3a6df5	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a6df9	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a6dfc	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a6e00	69 00 00	adc #$0000	                ADC #0
.3a6e03	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a6e07	22 1c 11 00	jsl $00111c	do_save         JSL FK_SAVE                 ; Attempt to save the file
.3a6e0b	b0 22		bcs $3a6e2f	                BCS done
.3a6e0d	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6e10	08		php		            PHP
.3a6e11	c2 20		rep #$20	            REP #$20
.3a6e13	48		pha		            PHA
.3a6e14	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6e17	5b		tcd		            TCD
.3a6e18	68		pla		            PLA
.3a6e19	28		plp		            PLP
.3a6e1a	e2 20		sep #$20	            SEP #$20
.3a6e1c	a9 12		lda #$12	            LDA #ERR_SAVE
.3a6e1e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6e22	c2 20		rep #$20	            REP #$20
.3a6e24	29 ff 00	and #$00ff	            AND #$00FF
.3a6e27	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6e2a	e2 20		sep #$20	            SEP #$20
.3a6e2c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6e2f					done
.3a6e2f	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6e32	28		plp		                PLP
.3a6e33	60		rts		            RTS
.3a6e34					S_DEL
.3a6e34	08		php		                PHP
.3a6e35	c2 30		rep #$30	            REP #$30
.3a6e37	20 3e 21	jsr $3a213e	            JSR SKIPWS
.3a6e3a	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6e3d	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6e40	20 87 6d	jsr $3a6d87	            JSR COPY2PATHBUF
.3a6e43	22 04 11 00	jsl $001104	path_loaded     JSL FK_DELETE               ; Try to delete the file
.3a6e47	b0 22		bcs $3a6e6b	                BCS done
.3a6e49	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6e4c	08		php		            PHP
.3a6e4d	c2 20		rep #$20	            REP #$20
.3a6e4f	48		pha		            PHA
.3a6e50	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6e53	5b		tcd		            TCD
.3a6e54	68		pla		            PLA
.3a6e55	28		plp		            PLP
.3a6e56	e2 20		sep #$20	            SEP #$20
.3a6e58	a9 13		lda #$13	            LDA #ERR_DELETE
.3a6e5a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6e5e	c2 20		rep #$20	            REP #$20
.3a6e60	29 ff 00	and #$00ff	            AND #$00FF
.3a6e63	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6e66	e2 20		sep #$20	            SEP #$20
.3a6e68	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6e6b					done
.3a6e6b	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6e6e	28		plp		                PLP
.3a6e6f	60		rts		            RTS
.3a6e70					VALIDFILECHAR
.3a6e70	da		phx		                PHX
.3a6e71	08		php		                PHP
.3a6e72	e2 20		sep #$20	            SEP #$20
.3a6e74	c9 61		cmp #$61	                CMP #'a'                    ; Is it lower case?
.3a6e76	90 08		bcc $3a6e80	                BLT chk_space
.3a6e78	c9 7b		cmp #$7b	                CMP #'z'+1
.3a6e7a	b0 04		bcs $3a6e80	                BGE chk_space
.3a6e7c	29 df		and #$df	                AND #%11011111              ; Yes: convert to upper case
.3a6e7e	80 13		bra $3a6e93	                BRA ret_valid
.3a6e80	c9 20		cmp #$20	chk_space       CMP #CHAR_SP            ; Is it a control code?
.3a6e82	90 13		bcc $3a6e97	                BLT is_invalid          ; Yes: it's invalid
.3a6e84	a2 00 00	ldx #$0000	                LDX #0                  ; See if it's in the list of invalids
.3a6e87	df 9b 6e 3a	cmp $3a6e9b,x	loop            CMP invalid_chars,X
.3a6e8b	f0 0a		beq $3a6e97	                BEQ is_invalid
.3a6e8d	e8		inx		                INX
.3a6e8e	e0 0f 00	cpx #$000f	                CPX #15                 ; # of invalid characters
.3a6e91	d0 f4		bne $3a6e87	                BNE loop
.3a6e93	28		plp		ret_valid       PLP
.3a6e94	38		sec		                SEC
.3a6e95	fa		plx		                PLX
.3a6e96	6b		rtl		                RTL
.3a6e97	28		plp		is_invalid      PLP
.3a6e98	18		clc		                CLC
.3a6e99	fa		plx		                PLX
.3a6e9a	6b		rtl		                RTL
>3a6e9b	2a 2b 2c 2f 3a 3b 3c 3d		invalid_chars   .text "*+,/:;<=>?\[]|",CHAR_DQUOTE
>3a6ea3	3e 3f 5c 5b 5d 7c 22
.3a6eaa					S_RENAME
.3a6eaa	08		php		                PHP
.3a6eab	08		php		            PHP
.3a6eac	c2 20		rep #$20	            REP #$20
.3a6eae	48		pha		            PHA
.3a6eaf	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6eb2	5b		tcd		            TCD
.3a6eb3	68		pla		            PLA
.3a6eb4	28		plp		            PLP
.3a6eb5	c2 30		rep #$30	            REP #$30
.3a6eb7	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6eba	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6ebd	20 87 6d	jsr $3a6d87	            JSR COPY2PATHBUF
.3a6ec0	22 10 11 00	jsl $001110	                JSL FK_DIRREAD              ; Try to read the file
.3a6ec4	b0 22		bcs $3a6ee8	                BCS get_new_name            ; If ok: get the new name
.3a6ec6	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6ec9	08		php		            PHP
.3a6eca	c2 20		rep #$20	            REP #$20
.3a6ecc	48		pha		            PHA
.3a6ecd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6ed0	5b		tcd		            TCD
.3a6ed1	68		pla		            PLA
.3a6ed2	28		plp		            PLP
.3a6ed3	e2 20		sep #$20	            SEP #$20
.3a6ed5	a9 14		lda #$14	            LDA #ERR_FILENOTFOUND
.3a6ed7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6edb	c2 20		rep #$20	            REP #$20
.3a6edd	29 ff 00	and #$00ff	            AND #$00FF
.3a6ee0	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6ee3	e2 20		sep #$20	            SEP #$20
.3a6ee5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6ee8					get_new_name
.3a6ee8	e2 20		sep #$20	            SEP #$20
.3a6eea	a9 2c		lda #$2c	                LDA #','
.3a6eec	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a6eef	c2 20		rep #$20	            REP #$20
.3a6ef1	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6ef4	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6ef7	ad 38 03	lda $0338	                LDA DOS_DIR_PTR
.3a6efa	85 08		sta $0808	                STA INDEX
.3a6efc	ad 3a 03	lda $033a	                LDA DOS_DIR_PTR+2
.3a6eff	85 0a		sta $080a	                STA INDEX+2
.3a6f01	e2 20		sep #$20	            SEP #$20
.3a6f03	a2 00 00	ldx #$0000	                LDX #0
.3a6f06	a9 20		lda #$20	                LDA #CHAR_SP                ; We'll use MLINEBUFF as temporary name storage
.3a6f08	95 7e		sta $087e,x	blank_loop      STA MLINEBUF,X              ; Fill it with blanks
.3a6f0a	e8		inx		                INX
.3a6f0b	e0 0b 00	cpx #$000b	                CPX #11
.3a6f0e	d0 f8		bne $3a6f08	                BNE blank_loop
.3a6f10	a2 00 00	ldx #$0000	                LDX #0
.3a6f13	a0 00 00	ldy #$0000	                LDY #0
.3a6f16	b7 23		lda [$0823],y	name_loop       LDA [ARGUMENT1],Y           ; Get the character of the new name
.3a6f18	f0 76		beq $3a6f90	                BEQ copy_short_name         ; If end-of-string: copy what we have
.3a6f1a	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.3a6f1c	f0 39		beq $3a6f57	                BEQ skip_dot                ; Yes: move on to the extension characters
.3a6f1e	22 70 6e 3a	jsl $3a6e70	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.3a6f22	b0 1f		bcs $3a6f43	                BCS save_nm_char
.3a6f24	08		php		            PHP
.3a6f25	c2 20		rep #$20	            REP #$20
.3a6f27	48		pha		            PHA
.3a6f28	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6f2b	5b		tcd		            TCD
.3a6f2c	68		pla		            PLA
.3a6f2d	28		plp		            PLP
.3a6f2e	e2 20		sep #$20	            SEP #$20
.3a6f30	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a6f32	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6f36	c2 20		rep #$20	            REP #$20
.3a6f38	29 ff 00	and #$00ff	            AND #$00FF
.3a6f3b	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6f3e	e2 20		sep #$20	            SEP #$20
.3a6f40	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6f43	95 7e		sta $087e,x	save_nm_char    STA MLINEBUF,X              ; Otherwise: copy it
.3a6f45	c8		iny		                INY
.3a6f46	e8		inx		                INX
.3a6f47	c0 08 00	cpy #$0008	                CPY #8
.3a6f4a	d0 ca		bne $3a6f16	                BNE name_loop
.3a6f4c	b7 23		lda [$0823],y	eat_name        LDA [ARGUMENT1],Y           ; Get the character
.3a6f4e	f0 40		beq $3a6f90	                BEQ copy_short_name         ; If null, we're done with the short name
.3a6f50	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.3a6f52	f0 03		beq $3a6f57	                BEQ skip_dot                ; Yes: skip over it
.3a6f54	c8		iny		                INY                         ; No: try again with the the next character
.3a6f55	80 f5		bra $3a6f4c	                BRA eat_name
.3a6f57	c8		iny		skip_dot        INY                         ; Character at Y is '.', so skip over it
.3a6f58	a2 08 00	ldx #$0008	do_ext          LDX #8
.3a6f5b	b7 23		lda [$0823],y	ext_loop        LDA [ARGUMENT1],Y           ; Get the character of the new extension
.3a6f5d	f0 31		beq $3a6f90	                BEQ copy_short_name         ; If end-of-string: copy what we have
.3a6f5f	22 70 6e 3a	jsl $3a6e70	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.3a6f63	b0 22		bcs $3a6f87	                BCS save_ext_char
.3a6f65	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6f68	08		php		            PHP
.3a6f69	c2 20		rep #$20	            REP #$20
.3a6f6b	48		pha		            PHA
.3a6f6c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6f6f	5b		tcd		            TCD
.3a6f70	68		pla		            PLA
.3a6f71	28		plp		            PLP
.3a6f72	e2 20		sep #$20	            SEP #$20
.3a6f74	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a6f76	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6f7a	c2 20		rep #$20	            REP #$20
.3a6f7c	29 ff 00	and #$00ff	            AND #$00FF
.3a6f7f	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6f82	e2 20		sep #$20	            SEP #$20
.3a6f84	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6f87	95 7e		sta $087e,x	save_ext_char   STA MLINEBUF,X              ; Otherwise: copy it
.3a6f89	c8		iny		                INY
.3a6f8a	e8		inx		                INX
.3a6f8b	c0 0c 00	cpy #$000c	                CPY #12
.3a6f8e	d0 cb		bne $3a6f5b	                BNE ext_loop
.3a6f90	a2 00 00	ldx #$0000	copy_short_name LDX #0                      ; Copy the short name we built to the directory entry
.3a6f93	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3a6f96	b5 7e		lda $087e,x	copy_loop       LDA MLINEBUF,X
.3a6f98	97 08		sta [$0808],y	                STA [INDEX],Y
.3a6f9a	e8		inx		                INX
.3a6f9b	c8		iny		                INY
.3a6f9c	c0 0b 00	cpy #$000b	                CPY #11
.3a6f9f	d0 f5		bne $3a6f96	                BNE copy_loop
.3a6fa1	22 14 11 00	jsl $001114	                JSL FK_DIRWRITE             ; Write the directory entry back
.3a6fa5	b0 22		bcs $3a6fc9	                BCS done
.3a6fa7	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6faa	08		php		            PHP
.3a6fab	c2 20		rep #$20	            REP #$20
.3a6fad	48		pha		            PHA
.3a6fae	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6fb1	5b		tcd		            TCD
.3a6fb2	68		pla		            PLA
.3a6fb3	28		plp		            PLP
.3a6fb4	e2 20		sep #$20	            SEP #$20
.3a6fb6	a9 15		lda #$15	            LDA #ERR_DIRNOTWRITE
.3a6fb8	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6fbc	c2 20		rep #$20	            REP #$20
.3a6fbe	29 ff 00	and #$00ff	            AND #$00FF
.3a6fc1	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a6fc4	e2 20		sep #$20	            SEP #$20
.3a6fc6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6fc9					done
.3a6fc9	20 95 6b	jsr $3a6b95	            JSR SET_DOSSTAT
.3a6fcc	28		plp		                PLP
.3a6fcd	60		rts		            RTS
.3a6fce					S_COPY
.3a6fce	08		php		                PHP
.3a6fcf	08		php		            PHP
.3a6fd0	c2 20		rep #$20	            REP #$20
.3a6fd2	48		pha		            PHA
.3a6fd3	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6fd6	5b		tcd		            TCD
.3a6fd7	68		pla		            PLA
.3a6fd8	28		plp		            PLP
.3a6fd9	c2 30		rep #$30	            REP #$30
.3a6fdb	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6fde	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6fe1	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.3a6fe3	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.3a6fe7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6fe9	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.3a6fed	e2 20		sep #$20	            SEP #$20
.3a6fef	a9 2c		lda #$2c	                LDA #','
.3a6ff1	20 2a 22	jsr $3a222a	            JSR EXPECT_TOK
.3a6ff4	c2 20		rep #$20	            REP #$20
.3a6ff6	20 0c 1d	jsr $3a1d0c	            JSR EVALEXPR
.3a6ff9	20 e3 06	jsr $3a06e3	            JSR ASS_ARG1_STR
.3a6ffc	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.3a6ffe	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.3a7002	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a7004	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.3a7008	22 30 11 00	jsl $001130	                JSL FK_COPY                 ; Attempt to copy the file
.3a700c	b0 1f		bcs $3a702d	                BCS done
.3a700e	08		php		            PHP
.3a700f	c2 20		rep #$20	            REP #$20
.3a7011	48		pha		            PHA
.3a7012	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a7015	5b		tcd		            TCD
.3a7016	68		pla		            PLA
.3a7017	28		plp		            PLP
.3a7018	e2 20		sep #$20	            SEP #$20
.3a701a	a9 16		lda #$16	            LDA #ERR_NOTCOPIED
.3a701c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a7020	c2 20		rep #$20	            REP #$20
.3a7022	29 ff 00	and #$00ff	            AND #$00FF
.3a7025	20 5e 1e	jsr $3a1e5e	            JSR SET_ERRERL
.3a7028	e2 20		sep #$20	            SEP #$20
.3a702a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a702d	28		plp		done            PLP
.3a702e	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\monitor.s

.3a702f	5c ec 89 3a	jmp $3a89ec	MRETURN         JML IMRETURN
.3a7033	5c 3d 88 3a	jmp $3a883d	MPARSE          JML IMPARSE
.3a7037	5c ed 89 3a	jmp $3a89ed	MPARSE1         JML IMPARSE1
.3a703b	5c 69 79 3a	jmp $3a7969	MEXECUTE        JML IMEXECUTE
.3a703f	5c c6 79 3a	jmp $3a79c6	MASSEMBLE       JML IMASSEMBLE
.3a7043	5c f9 78 3a	jmp $3a78f9	MRMODIFY        JML IMRMODIFY
.3a7047	5c 7f 78 3a	jmp $3a787f	MCOMPARE        JML IMCOMPARE
.3a704b	5c fc 7d 3a	jmp $3a7dfc	MDISASSEMBLE    JML IMDISASSEMBLE
.3a704f	5c ea 74 3a	jmp $3a74ea	MFILL           JML IMFILL
.3a7053	5c 17 78 3a	jmp $3a7817	MGO             JML IMGO
.3a7057	5c d2 77 3a	jmp $3a77d2	MJUMP           JML IMJUMP
.3a705b	5c 5c 77 3a	jmp $3a775c	MHUNT           JML IMHUNT
.3a705f	5c fb 88 3a	jmp $3a88fb	MLOAD           JML IMLOAD
.3a7063	5c f8 75 3a	jmp $3a75f8	MMEMORY         JML IMMEMORY
.3a7067	5c 48 74 3a	jmp $3a7448	MREGISTERS      JML IMREGISTERS
.3a706b	5c 76 89 3a	jmp $3a8976	MSAVE           JML IMSAVE
.3a706f	5c 26 75 3a	jmp $3a7526	MTRANSFER       JML IMTRANSFER
.3a7073	5c ef 89 3a	jmp $3a89ef	MVERIFY         JML IMVERIFY
.3a7077	5c e8 89 3a	jmp $3a89e8	MEXIT           JML IMEXIT
.3a707b	5c 15 77 3a	jmp $3a7715	MMODIFY         JML IMMODIFY
.3a707f	5c f0 89 3a	jmp $3a89f0	MDOS            JML IMDOS
.3a7083	18		clc		IMONITOR        CLC                 ; clear the carry flag
.3a7084	fb		xce		                XCE                 ; move carry to emulation flags
.3a7085	58		cli		                CLI                 ; Re-enable interrupts
.3a7086	5c 8a 70 3a	jmp $3a708a	                JML IMREADY
.3a708a					IMREADY
.3a708a	c2 30		rep #$30	            REP #$30
.3a708c	22 48 74 3a	jsl $3a7448	                JSL IMREGISTERS
.3a7090					ready_loop
.3a7090	20 08 00	jsr $3a0008	            JSR READLINE
.3a7093	20 0c 00	jsr $3a000c	            JSR SCRCOPYLINE
.3a7096	8b		phb		                PHB
.3a7097	e2 20		sep #$20	            SEP #$20
.3a7099	a9 00		lda #$00	                LDA #`INPUTBUF
.3a709b	48		pha		                PHA
.3a709c	ab		plb		                PLB
.3a709d	a2 00 4f	ldx #$4f00	                LDX #<>INPUTBUF
.3a70a0	20 65 05	jsr $3a0565	            JSR TOUPPER
.3a70a3	ab		plb		                PLB
.3a70a4	22 33 70 3a	jsl $3a7033	                JSL MPARSE          ; Parse the command
.3a70a8	22 3b 70 3a	jsl $3a703b	                JSL MEXECUTE        ; And execute the parsed command
.3a70ac	80 e2		bra $3a7090	                BRA ready_loop
.3a70ae					IMHELP
.3a70ae	08		php		                PHP
.3a70af	8b		phb		                PHB
.3a70b0	e2 20		sep #$20	            SEP #$20
.3a70b2	a9 3a		lda #$3a	                LDA #`help_text
.3a70b4	48		pha		                PHA
.3a70b5	ab		plb		                PLB
.3a70b6	c2 10		rep #$10	            REP #$10
.3a70b8	a2 c1 70	ldx #$70c1	                LDX #<>help_text
.3a70bb	20 64 04	jsr $3a0464	            JSR PRINTS
.3a70be	ab		plb		                PLB
.3a70bf	28		plp		                PLP
.3a70c0	6b		rtl		                RTL
>3a70c1	41 20 3c 73 74 61 72 74		help_text       .text "A <start> <assembly>",CHAR_CR
>3a70c9	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d
>3a70d6	20 20 41 73 73 65 6d 62		                .text "  Assemble a program",CHAR_CR,CHAR_CR
>3a70de	6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>3a70ec	43 20 3c 73 74 61 72 74		                .text "C <start1> <start2> [len (1 if blank)]",CHAR_CR
>3a70f4	31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e
>3a7104	20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d
>3a7113	20 20 43 6f 6d 70 61 72		                .text "  Compare to sections of memory",CHAR_CR,CHAR_CR
>3a711b	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>3a712b	20 6d 65 6d 6f 72 79 0d 0d
>3a7134	44 20 3c 73 74 61 72 74		                .text "D <start> [end]",CHAR_CR
>3a713c	3e 20 5b 65 6e 64 5d 0d
>3a7144	20 20 44 69 73 61 73 73		                .text "  Disassemble a program",CHAR_CR,CHAR_CR
>3a714c	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a715c	0d
>3a715d	46 20 3c 73 74 61 72 74		                .text "F <start> <end> <byte>",CHAR_CR
>3a7165	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d
>3a7174	20 20 46 69 6c 6c 20 61		                .text "  Fill a block of memory with a byte",CHAR_CR,CHAR_CR
>3a717c	20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>3a718c	20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>3a719a	47 20 5b 61 64 64 72 65		                .text "G [address]",CHAR_CR
>3a71a2	73 73 5d 0d
>3a71a6	20 20 53 74 61 72 74 20		                .text "  Start execution at a location",CHAR_CR,CHAR_CR
>3a71ae	65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>3a71be	6f 63 61 74 69 6f 6e 0d 0d
>3a71c7	4a 20 5b 61 64 64 72 65		                .text "J [address] - Jump to a location in memory",CHAR_CR
>3a71cf	73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20
>3a71df	6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>3a71ef	72 79 0d
>3a71f2	20 20 4a 75 6d 70 20 74		                .text "  Jump to a location in memory",CHAR_CR,CHAR_CR
>3a71fa	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a720a	6d 65 6d 6f 72 79 0d 0d
>3a7212	48 20 3c 73 74 61 72 74		                .text "H <start> <end> <byte> [byte]..",CHAR_CR
>3a721a	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>3a722a	62 79 74 65 5d 2e 2e 0d
>3a7232	20 20 48 75 6e 74 20 66		                .text "  Hunt for values in memory",CHAR_CR,CHAR_CR
>3a723a	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>3a724a	6f 72 79 0d 0d
>3a724f	4c 20 20 20 20 20 4c 4f		                .text "L     LOAD         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," [destination]",CHAR_CR
>3a7257	41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a7267	22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>3a7277	4d 20 3c 73 74 61 72 74		                .text "M <start> [end]",CHAR_CR
>3a727f	3e 20 5b 65 6e 64 5d 0d
>3a7287	20 20 44 75 6d 70 20 74		                .text "  Dump the value in memory",CHAR_CR,CHAR_CR
>3a728f	68 65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f
>3a729f	72 79 0d 0d
>3a72a3	52 20 2d 20 44 69 73 70		                .text "R - Display the values of the registers",CHAR_CR,CHAR_CR
>3a72ab	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>3a72bb	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a72cb	0d
>3a72cc	3b 20 3c 50 43 3e 20 3c		                .text "; <PC> <A> <X> <Y> <SP> <DBR> <DP> <NVMXDIZC>",CHAR_CR
>3a72d4	41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>3a72e4	3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>3a72f4	44 49 5a 43 3e 0d
>3a72fa	20 20 43 68 61 6e 67 65		                .text "  Change the contents of the registers",CHAR_CR,CHAR_CR
>3a7302	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a7312	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a7322	53 20 20 20 20 20 53 41		                .text "S     SAVE         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," <start> <end>",CHAR_CR
>3a732a	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a733a	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>3a734a	54 20 3c 73 74 61 72 74		                .text "T <start> <end> <destination>",CHAR_CR
>3a7352	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a7362	74 69 6f 6e 3e 0d
>3a7368	20 20 54 72 61 6e 73 66		                .text "  Transfer (copy) data within memory",CHAR_CR,CHAR_CR
>3a7370	65 72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77
>3a7380	69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a738e	57 20 3c 62 79 74 65 3e		                .text "W <byte>",CHAR_CR
>3a7396	0d
>3a7397	20 20 53 65 74 20 74 68		                .text "  Set the register width flags for the disassembler",CHAR_CR,CHAR_CR
>3a739f	65 20 72 65 67 69 73 74 65 72 20 77 69 64 74 68
>3a73af	20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20 64
>3a73bf	69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>3a73cc	58 20 2d 20 52 65 74 75		                .text "X - Return to BASIC",CHAR_CR,CHAR_CR
>3a73d4	72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>3a73e1	3e 20 3c 73 74 61 72 74		                .text "> <start> <byte> [byte]...",CHAR_CR
>3a73e9	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>3a73f9	2e 2e 0d
>3a73fc	20 20 45 64 69 74 20 64		                .text "  Edit data in memory",CHAR_CR,CHAR_CR
>3a7404	61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a7413	3f 20 2d 20 44 69 73 70		                .null "? - Display a short help screen",CHAR_CR,CHAR_CR
>3a741b	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>3a742b	20 73 63 72 65 65 6e 0d 0d 00
.3a7435					IMWIDTH
.3a7435	08		php		                PHP
.3a7436	08		php		            PHP
.3a7437	c2 20		rep #$20	            REP #$20
.3a7439	48		pha		            PHA
.3a743a	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a743d	5b		tcd		            TCD
.3a743e	68		pla		            PLA
.3a743f	28		plp		            PLP
.3a7440	e2 20		sep #$20	            SEP #$20
.3a7442	a5 0d		lda $0855	                LDA MARG1
.3a7444	85 4e		sta $0896	                STA MCPUSTAT
.3a7446	28		plp		                PLP
.3a7447	6b		rtl		                RTL
.3a7448					IMREGISTERS
.3a7448	20 3d 02	jsr $3a023d	            JSR ENSURETEXT
.3a744b	08		php		            PHP
.3a744c	e2 20		sep #$20	            SEP #$20
.3a744e	48		pha		            PHA
.3a744f	a9 3a		lda #$3a	            LDA #`mregisters_msg
.3a7451	48		pha		            PHA
.3a7452	ab		plb		            PLB
.3a7453	68		pla		            PLA
.3a7454	28		plp		            PLP
.3a7455	a2 2d 8a	ldx #$8a2d	                LDX #<>mregisters_msg
.3a7458	20 64 04	jsr $3a0464	            JSR PRINTS
.3a745b	e2 20		sep #$20	            SEP #$20
.3a745d	a9 3b		lda #$3b	                LDA #';'
.3a745f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7462	a9 20		lda #$20	                LDA #' '
.3a7464	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7467	c2 30		rep #$30	            REP #$30
.3a7469	08		php		            PHP
.3a746a	e2 20		sep #$20	            SEP #$20
.3a746c	48		pha		            PHA
.3a746d	a9 00		lda #$00	            LDA #$0
.3a746f	48		pha		            PHA
.3a7470	ab		plb		            PLB
.3a7471	68		pla		            PLA
.3a7472	28		plp		            PLP
.3a7473	a0 03 00	ldy #$0003	                LDY #3
.3a7476	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.3a7479	20 e7 03	jsr $3a03e7	            JSR PRINTH
.3a747c	c2 20		rep #$20	            REP #$20
.3a747e	a9 20 00	lda #$0020	                LDA #' '
.3a7481	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7484	af 44 02 00	lda $000244	                LDA @lCPUA
.3a7488	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a748b	a9 20 00	lda #$0020	                LDA #' '
.3a748e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7491	af 46 02 00	lda $000246	                LDA @lCPUX
.3a7495	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a7498	a9 20 00	lda #$0020	                LDA #' '
.3a749b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a749e	af 48 02 00	lda $000248	                LDA @lCPUY
.3a74a2	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a74a5	a9 20 00	lda #$0020	                LDA #' '
.3a74a8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a74ab	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK
.3a74af	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a74b2	a9 20 00	lda #$0020	                LDA #' '
.3a74b5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a74b8	af 4e 02 00	lda $00024e	                LDA @lCPUDBR
.3a74bc	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a74bf	a9 20 00	lda #$0020	                LDA #' '
.3a74c2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a74c5	a9 20 00	lda #$0020	                LDA #' '
.3a74c8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a74cb	af 4c 02 00	lda $00024c	                LDA @lCPUDP
.3a74cf	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a74d2	a9 20 00	lda #$0020	                LDA #' '
.3a74d5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a74d8	08		php		                PHP
.3a74d9	e2 20		sep #$20	            SEP #$20
.3a74db	ad 4f 02	lda $024f	                LDA CPUFLAGS
.3a74de	22 46 87 3a	jsl $3a8746	                JSL MPRINTB
.3a74e2	28		plp		                PLP
.3a74e3	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a74e6	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a74e9	6b		rtl		                RTL
.3a74ea					IMFILL
.3a74ea	08		php		                PHP                 ; Save the caller's context
.3a74eb	0b		phd		                PHD
.3a74ec	08		php		            PHP
.3a74ed	c2 20		rep #$20	            REP #$20
.3a74ef	48		pha		            PHA
.3a74f0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a74f3	5b		tcd		            TCD
.3a74f4	68		pla		            PLA
.3a74f5	28		plp		            PLP
.3a74f6					do_copy
.3a74f6	e2 20		sep #$20	            SEP #$20
.3a74f8	a5 15		lda $085d	                LDA MARG3
.3a74fa	87 0d		sta [$0855]	                STA [MARG1]
.3a74fc	e2 20		sep #$20	            SEP #$20
.3a74fe	a5 0f		lda $0857	                LDA MARG1+2
.3a7500	c5 13		cmp $085b	                CMP MARG2+2
.3a7502	d0 0e		bne $3a7512	                BNE go_next         ; No: we haven't reached end address yet
.3a7504	c2 20		rep #$20	            REP #$20
.3a7506	a5 0d		lda $0855	                LDA MARG1
.3a7508	c5 11		cmp $0859	                CMP MARG2           ; Are they equal?
.3a750a	d0 06		bne $3a7512	                BNE go_next         ; No: we haven't reached end address yet
.3a750c	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a750f	2b		pld		                PLD                 ; Restore the caller's context
.3a7510	28		plp		                PLP
.3a7511	6b		rtl		                RTL
.3a7512					go_next
.3a7512	c2 20		rep #$20	            REP #$20
.3a7514	18		clc		                CLC
.3a7515	a5 0d		lda $0855	                LDA MARG1
.3a7517	69 01 00	adc #$0001	                ADC #1
.3a751a	85 0d		sta $0855	                STA MARG1
.3a751c	e2 20		sep #$20	            SEP #$20
.3a751e	a5 0e		lda $0856	                LDA MARG1+1
.3a7520	69 00		adc #$00	                ADC #0
.3a7522	85 0e		sta $0856	                STA MARG1+1
.3a7524	80 d0		bra $3a74f6	                BRA do_copy
.3a7526					IMTRANSFER
.3a7526	08		php		                PHP
.3a7527	0b		phd		                PHD
.3a7528	08		php		            PHP
.3a7529	c2 20		rep #$20	            REP #$20
.3a752b	48		pha		            PHA
.3a752c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a752f	5b		tcd		            TCD
.3a7530	68		pla		            PLA
.3a7531	28		plp		            PLP
.3a7532	e2 20		sep #$20	            SEP #$20
.3a7534	a5 0f		lda $0857	                LDA MARG1+2
.3a7536	c5 17		cmp $085f	                CMP MARG3+2
.3a7538	90 45		bcc $3a757f	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.3a753a	c2 20		rep #$20	            REP #$20
.3a753c	a5 0d		lda $0855	                LDA MARG1
.3a753e	c5 15		cmp $085d	                CMP MARG3
.3a7540	90 3d		bcc $3a757f	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.3a7542					copy_byte_down
.3a7542	e2 20		sep #$20	            SEP #$20
.3a7544	a7 0d		lda [$0855]	                LDA [MARG1]         ; Copy the byte
.3a7546	87 15		sta [$085d]	                STA [MARG3]
.3a7548	a5 0f		lda $0857	                LDA MARG1+2         ; Are the source's current and end bank bytes equal?
.3a754a	c5 13		cmp $085b	                CMP MARG2+2
.3a754c	d0 0b		bne $3a7559	                BNE inc_pointers    ; No: we're not done yet
.3a754e	c2 20		rep #$20	            REP #$20
.3a7550	a5 0d		lda $0855	                LDA MARG1           ; Are the rest of the bits equal?
.3a7552	c5 11		cmp $0859	                CMP MARG2
.3a7554	d0 03		bne $3a7559	                BNE inc_pointers    ; No: we're not done yet
.3a7556	4c dd 75	jmp $3a75dd	                JMP done            ; Yes: we've copied the last byte, exit
.3a7559					inc_pointers
.3a7559	c2 20		rep #$20	            REP #$20
.3a755b	18		clc		                CLC
.3a755c	a5 0d		lda $0855	                LDA MARG1
.3a755e	69 01 00	adc #$0001	                ADC #1
.3a7561	85 0d		sta $0855	                STA MARG1
.3a7563	e2 20		sep #$20	            SEP #$20
.3a7565	a5 0e		lda $0856	                LDA MARG1+1
.3a7567	69 00		adc #$00	                ADC #0
.3a7569	85 0e		sta $0856	                STA MARG1+1
.3a756b	c2 20		rep #$20	            REP #$20
.3a756d	18		clc		                CLC
.3a756e	a5 15		lda $085d	                LDA MARG3
.3a7570	69 01 00	adc #$0001	                ADC #1
.3a7573	85 15		sta $085d	                STA MARG3
.3a7575	e2 20		sep #$20	            SEP #$20
.3a7577	a5 16		lda $085e	                LDA MARG3+1
.3a7579	69 00		adc #$00	                ADC #0
.3a757b	85 16		sta $085e	                STA MARG3+1
.3a757d	80 c3		bra $3a7542	                BRA copy_byte_down  ; And copy that next byte over
.3a757f					copy_up
.3a757f	c2 20		rep #$20	            REP #$20
.3a7581	38		sec		                SEC
.3a7582	a5 11		lda $0859	                LDA MARG2
.3a7584	e5 0d		sbc $0855	                SBC MARG1
.3a7586	85 19		sta $0861	                STA MARG4
.3a7588	e2 20		sep #$20	            SEP #$20
.3a758a	a5 13		lda $085b	                LDA MARG2+2
.3a758c	e5 0f		sbc $0857	                SBC MARG1+2
.3a758e	85 1b		sta $0863	                STA MARG4+2
.3a7590	c2 20		rep #$20	            REP #$20
.3a7592	18		clc		                CLC
.3a7593	a5 19		lda $0861	                LDA MARG4
.3a7595	65 15		adc $085d	                ADC MARG3
.3a7597	85 15		sta $085d	                STA MARG3
.3a7599	e2 20		sep #$20	            SEP #$20
.3a759b	a5 1b		lda $0863	                LDA MARG4+2
.3a759d	65 17		adc $085f	                ADC MARG3+2
.3a759f	85 17		sta $085f	                STA MARG3+2
.3a75a1					copy_byte_up
.3a75a1	e2 20		sep #$20	            SEP #$20
.3a75a3	a7 11		lda [$0859]	                LDA [MARG2]
.3a75a5	87 15		sta [$085d]	                STA [MARG3]
.3a75a7	a5 13		lda $085b	                LDA MARG2+2         ; Are the source's current and start bank bytes equal?
.3a75a9	c5 0f		cmp $0857	                CMP MARG1+2
.3a75ab	d0 0a		bne $3a75b7	                BNE dec_pointers    ; No: we're not done yet
.3a75ad	c2 20		rep #$20	            REP #$20
.3a75af	a5 11		lda $0859	                LDA MARG2           ; Are the rest of the bits equal?
.3a75b1	c5 0d		cmp $0855	                CMP MARG1
.3a75b3	d0 02		bne $3a75b7	                BNE dec_pointers    ; No: we're not done yet
.3a75b5	80 26		bra $3a75dd	                BRA done            ; Yes: we've copied the last byte, exit
.3a75b7					dec_pointers
.3a75b7	c2 20		rep #$20	            REP #$20
.3a75b9	38		sec		                SEC
.3a75ba	a5 11		lda $0859	                LDA MARG2
.3a75bc	e9 01 00	sbc #$0001	                SBC #1
.3a75bf	85 11		sta $0859	                STA MARG2
.3a75c1	e2 20		sep #$20	            SEP #$20
.3a75c3	a5 12		lda $085a	                LDA MARG2+1
.3a75c5	e9 00		sbc #$00	                SBC #0
.3a75c7	85 12		sta $085a	                STA MARG2+1
.3a75c9	c2 20		rep #$20	            REP #$20
.3a75cb	38		sec		                SEC                 ; Decrement the current destination pointer (MARG3)
.3a75cc	a5 15		lda $085d	                LDA MARG3
.3a75ce	e9 01 00	sbc #$0001	                SBC #1
.3a75d1	85 15		sta $085d	                STA MARG3
.3a75d3	e2 20		sep #$20	            SEP #$20
.3a75d5	a5 16		lda $085e	                LDA MARG3+1
.3a75d7	e9 00		sbc #$00	                SBC #0
.3a75d9	85 16		sta $085e	                STA MARG3+1
.3a75db	80 c4		bra $3a75a1	                BRA copy_byte_up    ; And copy that next byte
.3a75dd					done
.3a75dd	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a75e0	2b		pld		                PLD
.3a75e1	28		plp		                PLP
.3a75e2	6b		rtl		                RTL
.3a75e3					IS_PRINTABLE
.3a75e3	08		php		                PHP
.3a75e4	e2 20		sep #$20	            SEP #$20
.3a75e6	c9 21		cmp #$21	                CMP #33
.3a75e8	90 0b		bcc $3a75f5	                BLT not_printable   ; 0 .. 31 are not printable
.3a75ea	c9 7f		cmp #$7f	                CMP #127
.3a75ec	90 04		bcc $3a75f2	                BLT printable       ; 32 .. 126 are printable
.3a75ee	c9 a0		cmp #$a0	                CMP #160
.3a75f0	90 03		bcc $3a75f5	                BLT not_printable   ; 127 .. 159 are not printable (assuming Latin-1)
.3a75f2	28		plp		printable       PLP
.3a75f3	38		sec		                SEC
.3a75f4	6b		rtl		                RTL
.3a75f5	28		plp		not_printable   PLP
.3a75f6	18		clc		                CLC
.3a75f7	6b		rtl		                RTL
=256					MMEMDUMPSIZE = 256  ; Default number of bytes to dump
=8					MMEMROWSIZE = 8    ; Number of bytes to dump per-row
.3a75f8					IMMEMORY
.3a75f8	08		php		                PHP
.3a75f9	8b		phb		                PHB
.3a75fa	0b		phd		                PHD
.3a75fb	08		php		            PHP
.3a75fc	c2 20		rep #$20	            REP #$20
.3a75fe	48		pha		            PHA
.3a75ff	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7602	5b		tcd		            TCD
.3a7603	68		pla		            PLA
.3a7604	28		plp		            PLP
.3a7605	e2 20		sep #$20	            SEP #$20
.3a7607	a9 00		lda #$00	                LDA #0              ; Clear the pagination line counter
.3a7609	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT
.3a760d	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a760f	c9 02		cmp #$02	                CMP #2
.3a7611	b0 16		bcs $3a7629	                BGE set_cursor      ; 2>= arguments? Use them as-is
.3a7613	c9 01		cmp #$01	                CMP #1
.3a7615	90 20		bcc $3a7637	                BLT no_args         ; No arguments passed? Use defaults
.3a7617	c2 20		rep #$20	            REP #$20
.3a7619	18		clc		                CLC
.3a761a	a5 0d		lda $0855	                LDA MARG1
.3a761c	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a761f	85 11		sta $0859	                STA MARG2
.3a7621	e2 20		sep #$20	            SEP #$20
.3a7623	a5 0f		lda $0857	                LDA MARG1+2
.3a7625	69 00		adc #$00	                ADC #0
.3a7627	85 13		sta $085b	                STA MARG2+2
.3a7629					set_cursor
.3a7629	c2 20		rep #$20	            REP #$20
.3a762b	a5 0d		lda $0855	                LDA MARG1
.3a762d	85 32		sta $087a	                STA MCURSOR
.3a762f	e2 20		sep #$20	            SEP #$20
.3a7631	a5 0f		lda $0857	                LDA MARG1+2
.3a7633	85 34		sta $087c	                STA MCURSOR+2
.3a7635	80 12		bra $3a7649	                BRA dump_line
.3a7637					no_args
.3a7637	c2 20		rep #$20	            REP #$20
.3a7639	18		clc		                CLC
.3a763a	a5 32		lda $087a	                LDA MCURSOR
.3a763c	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a763f	85 11		sta $0859	                STA MARG2
.3a7641	e2 20		sep #$20	            SEP #$20
.3a7643	a5 34		lda $087c	                LDA MCURSOR+2
.3a7645	69 00		adc #$00	                ADC #0
.3a7647	85 13		sta $085b	                STA MARG2+2
.3a7649					dump_line
.3a7649	e2 20		sep #$20	            SEP #$20
.3a764b	a0 00 00	ldy #$0000	                LDY #0
.3a764e	c2 20		rep #$20	            REP #$20
.3a7650	a5 32		lda $087a	                LDA MCURSOR             ; NOTE: the use of MARG4 here is a temporary
.3a7652	85 19		sta $0861	                STA MARG4               ; hack. the copy_loop instruction does not
.3a7654	e2 20		sep #$20	            SEP #$20
.3a7656	a5 34		lda $087c	                LDA MCURSOR+2
.3a7658	85 1b		sta $0863	                STA MARG4+2
.3a765a	e2 20		sep #$20	            SEP #$20
.3a765c	a7 19		lda [$0861]	copy_loop       LDA [MARG4]             ; TODO: Should be LDA [MCURSOR],Y, which doesn't seem to be working
.3a765e	22 e3 75 3a	jsl $3a75e3	                JSL IS_PRINTABLE        ; Is it printable?
.3a7662	b0 02		bcs $3a7666	                BCS buffer_char         ; Yes: go ahead and add it to the line buffer
.3a7664	a9 3f		lda #$3f	                LDA #'?'                ; No: replace it with dot
.3a7666	99 7e 08	sta $087e,y	buffer_char     STA #MLINEBUF,B,Y
.3a7669	c2 20		rep #$20	            REP #$20
.3a766b	18		clc		                CLC
.3a766c	a5 19		lda $0861	                LDA MARG4
.3a766e	69 01 00	adc #$0001	                ADC #1
.3a7671	85 19		sta $0861	                STA MARG4
.3a7673	e2 20		sep #$20	            SEP #$20
.3a7675	a5 1b		lda $0863	                LDA MARG4+2
.3a7677	69 00		adc #$00	                ADC #0
.3a7679	85 1b		sta $0863	                STA MARG4+2
.3a767b	c8		iny		                INY
.3a767c	c0 08 00	cpy #$0008	                CPY #MMEMROWSIZE
.3a767f	90 db		bcc $3a765c	                BLT copy_loop
.3a7681	a9 00		lda #$00	                LDA #0
.3a7683	99 7e 08	sta $087e,y	                STA #MLINEBUF,B,Y
.3a7686	a9 3e		lda #$3e	                LDA #'>'
.3a7688	20 18 00	jsr $3a0018	            JSR PRINTC
.3a768b	a9 20		lda #$20	                LDA #' '
.3a768d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7690	e2 20		sep #$20	            SEP #$20
.3a7692	a5 34		lda $087c	                LDA MCURSOR+2
.3a7694	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a7697	a9 3a		lda #$3a	                LDA #':'                ; then a colon
.3a7699	20 18 00	jsr $3a0018	            JSR PRINTC
.3a769c	c2 20		rep #$20	            REP #$20
.3a769e	a5 32		lda $087a	                LDA MCURSOR
.3a76a0	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a76a3	c2 20		rep #$20	            REP #$20
.3a76a5	a9 08 00	lda #$0008	                LDA #MMEMROWSIZE
.3a76a8	85 47		sta $088f	                STA MCOUNT
.3a76aa					prhex_loop
.3a76aa	e2 20		sep #$20	            SEP #$20
.3a76ac	a9 20		lda #$20	                LDA #' '
.3a76ae	20 18 00	jsr $3a0018	            JSR PRINTC
.3a76b1	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a76b3	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a76b6	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR        ; Point MCURSOR to the next byte
.3a76ba					check_line
.3a76ba	e2 20		sep #$20	            SEP #$20
.3a76bc	c6 47		dec $088f	                DEC MCOUNT              ; Count down the number of bytes on the row
.3a76be	d0 ea		bne $3a76aa	                BNE prhex_loop          ; If we're not at zero, keep looping over the bytes
.3a76c0	a9 20		lda #$20	                LDA #' '
.3a76c2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a76c5	a9 20		lda #$20	                LDA #' '
.3a76c7	20 18 00	jsr $3a0018	            JSR PRINTC
.3a76ca	08		php		            PHP
.3a76cb	e2 20		sep #$20	            SEP #$20
.3a76cd	48		pha		            PHA
.3a76ce	a9 00		lda #$00	            LDA #`MLINEBUF
.3a76d0	48		pha		            PHA
.3a76d1	ab		plb		            PLB
.3a76d2	68		pla		            PLA
.3a76d3	28		plp		            PLP
.3a76d4	a2 7e 08	ldx #$087e	                LDX #MLINEBUF
.3a76d7	20 64 04	jsr $3a0464	            JSR PRINTS
.3a76da	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a76dd	20 ee 03	jsr $3a03ee	            JSR PAGINATE
.3a76e0	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.3a76e2	c5 13		cmp $085b	                CMP MARG2+2
.3a76e4	90 0f		bcc $3a76f5	                BLT continue            ; No: continue
.3a76e6	c2 20		rep #$20	            REP #$20
.3a76e8	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.3a76ea	c5 11		cmp $0859	                CMP MARG2
.3a76ec	90 07		bcc $3a76f5	                BLT continue            ; Nope... keep going
.3a76ee					done
.3a76ee	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a76f1	2b		pld		                PLD
.3a76f2	ab		plb		                PLB
.3a76f3	28		plp		                PLP
.3a76f4	6b		rtl		                RTL
.3a76f5	4c 49 76	jmp $3a7649	continue        JMP dump_line
.3a76f8					M_COPY_ARGB
.3a76f8	08		php		                PHP
.3a76f9	8d 92 08	sta $0892	                STA MTEMP
.3a76fc	e2 20		sep #$20	            SEP #$20
.3a76fe	bd 00 00	lda $0000,x	loop            LDA #0,B,X
.3a7701	99 00 00	sta $0000,y	                STA #0,B,Y      ; Copy the byte
.3a7704	ad 92 08	lda $0892	                LDA MTEMP       ; Check the count of characters remaining
.3a7707	f0 0a		beq $3a7713	                BEQ done        ; If it's 0, we're done
.3a7709	c8		iny		                INY             ; Point to the next destination byte
.3a770a	e8		inx		                INX             ; Point to the next source byte (skip three bytes)
.3a770b	e8		inx		                INX
.3a770c	e8		inx		                INX
.3a770d	e8		inx		                INX
.3a770e	ce 92 08	dec $0892	                DEC MTEMP       ; Count down and see if we're done
.3a7711	80 eb		bra $3a76fe	                BRA loop
.3a7713	28		plp		done            PLP
.3a7714	6b		rtl		                RTL
.3a7715					IMMODIFY
.3a7715	08		php		                PHP
.3a7716	0b		phd		                PHD
.3a7717	8b		phb		                PHB
.3a7718	08		php		            PHP
.3a7719	c2 20		rep #$20	            REP #$20
.3a771b	48		pha		            PHA
.3a771c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a771f	5b		tcd		            TCD
.3a7720	68		pla		            PLA
.3a7721	28		plp		            PLP
.3a7722	08		php		            PHP
.3a7723	e2 20		sep #$20	            SEP #$20
.3a7725	48		pha		            PHA
.3a7726	a9 00		lda #$00	            LDA #0
.3a7728	48		pha		            PHA
.3a7729	ab		plb		            PLB
.3a772a	68		pla		            PLA
.3a772b	28		plp		            PLP
.3a772c	c2 30		rep #$30	            REP #$30
.3a772e	a5 0d		lda $0855	                LDA MARG1           ; Set MCURSOR to MARG1
.3a7730	85 32		sta $087a	                STA MCURSOR
.3a7732	a5 0f		lda $0857	                LDA MARG1+2
.3a7734	85 34		sta $087c	                STA MCURSOR+2
.3a7736	e2 20		sep #$20	            SEP #$20
.3a7738	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.3a773a	3a		dec a		                DEC A               ; (MARG_LEN - 1)
.3a773b	85 47		sta $088f	                STA MCOUNT
.3a773d	a2 59 08	ldx #$0859	                LDX #<>MARG2        ; Copy MCOUNT bytes from MARG2..MARG9
.3a7740	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF     ; to MLINEBUF
.3a7743	22 f8 76 3a	jsl $3a76f8	                JSL M_COPY_ARGB
.3a7747	a0 00 00	ldy #$0000	                LDY #0
.3a774a	b9 7e 08	lda $087e,y	loop            LDA MLINEBUF,Y      ; Copy the byte from the buffer
.3a774d	87 32		sta [$087a]	                STA [MCURSOR]       ; To the address indicated by MCURSOR
.3a774f	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR    ; Advance the cursor
.3a7753	c8		iny		                INY                 ; Go to the next buffered byte
.3a7754	c4 47		cpy $088f	                CPY MCOUNT          ; Did we just write the last one?
.3a7756	d0 f2		bne $3a774a	                BNE loop            ; No: continue writing
.3a7758	ab		plb		                PLB
.3a7759	2b		pld		                PLD
.3a775a	28		plp		                PLP
.3a775b	6b		rtl		                RTL
.3a775c					IMHUNT
.3a775c	08		php		                PHP
.3a775d	0b		phd		                PHD
.3a775e	8b		phb		                PHB
.3a775f	08		php		            PHP
.3a7760	c2 20		rep #$20	            REP #$20
.3a7762	48		pha		            PHA
.3a7763	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7766	5b		tcd		            TCD
.3a7767	68		pla		            PLA
.3a7768	28		plp		            PLP
.3a7769	08		php		            PHP
.3a776a	e2 20		sep #$20	            SEP #$20
.3a776c	48		pha		            PHA
.3a776d	a9 00		lda #$00	            LDA #0
.3a776f	48		pha		            PHA
.3a7770	ab		plb		            PLB
.3a7771	68		pla		            PLA
.3a7772	28		plp		            PLP
.3a7773	e2 20		sep #$20	            SEP #$20
.3a7775	c2 10		rep #$10	            REP #$10
.3a7777	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.3a7779	3a		dec a		                DEC A               ; (MARG_LEN - 2)
.3a777a	3a		dec a		                DEC A
.3a777b	85 47		sta $088f	                STA MCOUNT
.3a777d	a2 5d 08	ldx #$085d	                LDX #<>MARG3
.3a7780	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF
.3a7783	22 f8 76 3a	jsl $3a76f8	                JSL M_COPY_ARGB
.3a7787	c2 20		rep #$20	            REP #$20
.3a7789	a5 0d		lda $0855	                LDA MARG1           ; Copy starting address to MCURSOR
.3a778b	85 32		sta $087a	                STA MCURSOR
.3a778d	a5 0f		lda $0857	                LDA MARG1+2
.3a778f	85 34		sta $087c	                STA MCURSOR+2
.3a7791					outer_loop
.3a7791	c2 20		rep #$20	            REP #$20
.3a7793	a5 34		lda $087c	                LDA MCURSOR+2      ; If MCURSOR < MARG2, we're not done yet
.3a7795	c5 13		cmp $085b	                CMP MARG2+2
.3a7797	d0 06		bne $3a779f	                BNE not_done
.3a7799	a5 32		lda $087a	                LDA MCURSOR
.3a779b	c5 11		cmp $0859	                CMP MARG2
.3a779d	f0 2c		beq $3a77cb	                BEQ done            ; MCURSOR = MARG2: we're done
.3a779f					not_done
.3a779f	e2 20		sep #$20	            SEP #$20
.3a77a1	a0 00 00	ldy #$0000	                LDY #0
.3a77a4	b7 32		lda [$087a],y	cmp_loop        LDA [MCURSOR],Y     ; Get the byte from the memory to check
.3a77a6	d9 7e 08	cmp $087e,y	                CMP MLINEBUF,Y      ; Compare it against our pattern
.3a77a9	d0 1a		bne $3a77c5	                BNE advance         ; If not equal, we need to move on
.3a77ab	c8		iny		                INY                 ; Otherwise do we have more bytes to check?
.3a77ac	c4 47		cpy $088f	                CPY MCOUNT
.3a77ae	d0 f4		bne $3a77a4	                BNE cmp_loop        ; No: check more
.3a77b0	c2 20		rep #$20	            REP #$20
.3a77b2	a5 32		lda $087a	                LDA MCURSOR         ; Print the address
.3a77b4	85 4a		sta $0892	                STA MTEMP
.3a77b6	a5 34		lda $087c	                LDA MCURSOR+2
.3a77b8	85 4c		sta $0894	                STA MTEMP+2
.3a77ba	22 cf 81 3a	jsl $3a81cf	                JSL M_PR_ADDR
.3a77be	e2 20		sep #$20	            SEP #$20
.3a77c0	a9 20		lda #$20	                LDA #' '
.3a77c2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a77c5	22 25 87 3a	jsl $3a8725	advance         JSL M_INC_CURSOR    ; Move MCURSOR forward by one
.3a77c9	80 c6		bra $3a7791	                BRA outer_loop      ; And try to compare that to the pattern
.3a77cb					done
.3a77cb	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a77ce	ab		plb		                PLB
.3a77cf	2b		pld		                PLD
.3a77d0	28		plp		                PLP
.3a77d1	6b		rtl		                RTL
.3a77d2					IMJUMP
.3a77d2	08		php		            PHP
.3a77d3	c2 20		rep #$20	            REP #$20
.3a77d5	48		pha		            PHA
.3a77d6	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a77d9	5b		tcd		            TCD
.3a77da	68		pla		            PLA
.3a77db	28		plp		            PLP
.3a77dc	e2 20		sep #$20	            SEP #$20
.3a77de	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.3a77e0	f0 0e		beq $3a77f0	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.3a77e2	c2 30		rep #$30	            REP #$30
.3a77e4	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.3a77e6	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.3a77ea	a5 0f		lda $0857	                LDA MARG1+2
.3a77ec	8f 42 02 00	sta $000242	                STA @lCPUPBR
.3a77f0	af 46 02 00	lda $000246	MJUMPRESTORE    LDA @lCPUX          ; Restore X and Y
.3a77f4	aa		tax		                TAX
.3a77f5	af 48 02 00	lda $000248	                LDA @lCPUY
.3a77f9	a8		tay		                TAY
.3a77fa	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.3a77fe	1b		tcs		                TCS
.3a77ff	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.3a7803	5b		tcd		                TCD
.3a7804	e2 20		sep #$20	            SEP #$20
.3a7806	a9 3a		lda #$3a	                LDA #`MJUMPSTART
.3a7808	48		pha		                PHA
.3a7809	a9 78		lda #$78	                LDA #>MJUMPSTART
.3a780b	48		pha		                PHA
.3a780c	a9 12		lda #$12	                LDA #<MJUMPSTART
.3a780e	48		pha		                PHA
.3a780f	4c 49 78	jmp $3a7849	                JMP MGOSTACK        ; And push remaining registers and restart execution
.3a7812	ea		nop		MJUMPSTART      NOP                 ; RTL increments PC pulled from stack, NOP leaves space for that
.3a7813	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3a7817					IMGO
.3a7817	08		php		            PHP
.3a7818	c2 20		rep #$20	            REP #$20
.3a781a	48		pha		            PHA
.3a781b	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a781e	5b		tcd		            TCD
.3a781f	68		pla		            PLA
.3a7820	28		plp		            PLP
.3a7821	e2 20		sep #$20	            SEP #$20
.3a7823	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.3a7825	f0 c9		beq $3a77f0	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.3a7827	c2 30		rep #$30	            REP #$30
.3a7829	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.3a782b	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.3a782f	a5 0f		lda $0857	                LDA MARG1+2
.3a7831	8f 42 02 00	sta $000242	                STA @lCPUPBR
.3a7835	af 46 02 00	lda $000246	MGORESTORE      LDA @lCPUX          ; Restore X and Y
.3a7839	aa		tax		                TAX
.3a783a	af 48 02 00	lda $000248	                LDA @lCPUY
.3a783e	a8		tay		                TAY
.3a783f	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.3a7843	1b		tcs		                TCS
.3a7844	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.3a7848	5b		tcd		                TCD
.3a7849					MGOSTACK
.3a7849	e2 20		sep #$20	            SEP #$20
.3a784b	af 4e 02 00	lda $00024e	                LDA @lCPUDBR        ; Restore the data bank register
.3a784f	48		pha		                PHA
.3a7850	ab		plb		                PLB
.3a7851	a9 5c		lda #$5c	                LDA #$5C            ; Save the JSL opcode
.3a7853	8f a2 08 00	sta $0008a2	                STA @lMJUMPINST
.3a7857	af 42 02 00	lda $000242	                LDA @lCPUPBR        ; Write PBR
.3a785b	8f a5 08 00	sta $0008a5	                STA @lMJUMPADDR+2
.3a785f	af 41 02 00	lda $000241	                LDA @lCPUPC+1       ; Write PCH
.3a7863	8f a4 08 00	sta $0008a4	                STA @lMJUMPADDR+1
.3a7867	af 40 02 00	lda $000240	                LDA @lCPUPC         ; Write PCL
.3a786b	8f a3 08 00	sta $0008a3	                STA @lMJUMPADDR
.3a786f	af 4f 02 00	lda $00024f	                LDA @lCPUFLAGS      ; Push processor status
.3a7873	48		pha		                PHA
.3a7874	c2 20		rep #$20	            REP #$20
.3a7876	af 44 02 00	lda $000244	                LDA @lCPUA          ; Restore A
.3a787a	28		plp		                PLP                 ; And the status register
.3a787b	5c a2 08 00	jmp $0008a2	                JML MJUMPINST       ; And jump to the target address
.3a787f					IMCOMPARE
.3a787f	08		php		                PHP
.3a7880	0b		phd		                PHD
.3a7881	8b		phb		                PHB
.3a7882	08		php		            PHP
.3a7883	e2 20		sep #$20	            SEP #$20
.3a7885	48		pha		            PHA
.3a7886	a9 3a		lda #$3a	            LDA #`MERRARGS
.3a7888	48		pha		            PHA
.3a7889	ab		plb		            PLB
.3a788a	68		pla		            PLA
.3a788b	28		plp		            PLP
.3a788c	08		php		            PHP
.3a788d	c2 20		rep #$20	            REP #$20
.3a788f	48		pha		            PHA
.3a7890	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a7893	5b		tcd		            TCD
.3a7894	68		pla		            PLA
.3a7895	28		plp		            PLP
.3a7896	c2 10		rep #$10	            REP #$10
.3a7898	e2 20		sep #$20	            SEP #$20
.3a789a	a5 31		lda $0879	                LDA MARG_LEN                ; Check the number of arguments provided
.3a789c	c9 02		cmp #$02	                CMP #2
.3a789e	f0 0c		beq $3a78ac	                BEQ default_len             ; If 2: set MCOUNT to default of 1
.3a78a0	c9 03		cmp #$03	                CMP #3
.3a78a2	d0 11		bne $3a78b5	                BNE bad_arguments           ; Otherwise, if not 3: print an error
.3a78a4	c2 20		rep #$20	            REP #$20
.3a78a6	a5 15		lda $085d	                LDA MARG3                   ; If 3: set MCOUNT to MARG3
.3a78a8	85 47		sta $088f	                STA MCOUNT
.3a78aa	80 11		bra $3a78bd	                BRA compare
.3a78ac					default_len
.3a78ac	c2 20		rep #$20	            REP #$20
.3a78ae	a9 01 00	lda #$0001	                LDA #1                      ; No length was provided, set MCOUNT to 1
.3a78b1	85 47		sta $088f	                STA MCOUNT
.3a78b3	80 08		bra $3a78bd	                BRA compare
.3a78b5	a2 f1 89	ldx #$89f1	bad_arguments   LDX #<>MERRARGS             ; The wrong number of arguments was provided
.3a78b8	20 64 04	jsr $3a0464	            JSR PRINTS
.3a78bb	80 35		bra $3a78f2	                BRA done
.3a78bd	a5 0d		lda $0855	compare         LDA MARG1                   ; Set MTEMP to MARG1
.3a78bf	85 4a		sta $0892	                STA MTEMP
.3a78c1	a5 0f		lda $0857	                LDA MARG1+2
.3a78c3	85 4c		sta $0894	                STA MTEMP+2
.3a78c5	a0 00 00	ldy #$0000	                LDY #0
.3a78c8					loop
.3a78c8	e2 20		sep #$20	            SEP #$20
.3a78ca	a7 4a		lda [$0892]	                LDA [MTEMP]                 ; Compare the byte at MTEMP
.3a78cc	d7 11		cmp [$0859],y	                CMP [MARG2],Y               ; To the Yth byte from MARG2
.3a78ce	f0 09		beq $3a78d9	                BEQ continue                ; If they're the same, keep going
.3a78d0	22 cf 81 3a	jsl $3a81cf	mismatch        JSL M_PR_ADDR               ; If they're different, print MTEMP
.3a78d4	a9 20		lda #$20	                LDA #' '
.3a78d6	20 18 00	jsr $3a0018	            JSR PRINTC
.3a78d9					continue
.3a78d9	c2 20		rep #$20	            REP #$20
.3a78db	18		clc		                CLC                         ; Either way, increment MTEMP
.3a78dc	a5 4a		lda $0892	                LDA MTEMP
.3a78de	69 01 00	adc #$0001	                ADC #1
.3a78e1	85 4a		sta $0892	                STA MTEMP
.3a78e3	a5 4c		lda $0894	                LDA MTEMP+2
.3a78e5	69 00 00	adc #$0000	                ADC #0
.3a78e8	85 4c		sta $0894	                STA MTEMP+2
.3a78ea	c8		iny		                INY                         ; Increment Y
.3a78eb	c4 47		cpy $088f	                CPY MCOUNT                  ; Try again unless we've checked MCOUNT bytes
.3a78ed	d0 d9		bne $3a78c8	                BNE loop
.3a78ef	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a78f2					done
.3a78f2	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a78f5	ab		plb		                PLB
.3a78f6	2b		pld		                PLD
.3a78f7	28		plp		                PLP
.3a78f8	6b		rtl		                RTL
.3a78f9					IMRMODIFY
.3a78f9	08		php		                PHP
.3a78fa	0b		phd		                PHD
.3a78fb	8b		phb		                PHB
.3a78fc	08		php		            PHP
.3a78fd	e2 20		sep #$20	            SEP #$20
.3a78ff	48		pha		            PHA
.3a7900	a9 00		lda #$00	            LDA #0
.3a7902	48		pha		            PHA
.3a7903	ab		plb		            PLB
.3a7904	68		pla		            PLA
.3a7905	28		plp		            PLP
.3a7906	08		php		            PHP
.3a7907	c2 20		rep #$20	            REP #$20
.3a7909	48		pha		            PHA
.3a790a	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a790d	5b		tcd		            TCD
.3a790e	68		pla		            PLA
.3a790f	28		plp		            PLP
.3a7910	e2 20		sep #$20	            SEP #$20
.3a7912	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a7914	f0 4f		beq $3a7965	                BEQ done            ; 0? Just quit
.3a7916	a6 0d		ldx $0855	                LDX MARG1           ; Set the PC and PBR
.3a7918	8e 40 02	stx $0240	                STX #CPUPC,B
.3a791b	a6 0f		ldx $0857	                LDX MARG1+2
.3a791d	8e 42 02	stx $0242	                STX #CPUPBR,B
.3a7920	c9 01		cmp #$01	                CMP #1              ; Check the number of arguments
.3a7922	f0 41		beq $3a7965	                BEQ done            ; 1? Just quit
.3a7924	a6 11		ldx $0859	                LDX MARG2           ; Set A
.3a7926	8e 44 02	stx $0244	                STX #CPUA,B
.3a7929	c9 02		cmp #$02	                CMP #2              ; Check the number of arguments
.3a792b	f0 38		beq $3a7965	                BEQ done            ; 2? Just quit
.3a792d	a6 15		ldx $085d	                LDX MARG3           ; Set X
.3a792f	8e 46 02	stx $0246	                STX #CPUX,B
.3a7932	c9 03		cmp #$03	                CMP #3              ; Check the number of arguments
.3a7934	f0 2f		beq $3a7965	                BEQ done            ; 3? Just quit
.3a7936	a6 19		ldx $0861	                LDX MARG4           ; Set Y
.3a7938	8e 48 02	stx $0248	                STX #CPUY,B
.3a793b	c9 04		cmp #$04	                CMP #4              ; Check the number of arguments
.3a793d	f0 26		beq $3a7965	                BEQ done            ; 4? Just quit
.3a793f	a6 1d		ldx $0865	                LDX MARG5           ; Set SP
.3a7941	8e 4a 02	stx $024a	                STX #CPUSTACK,B
.3a7944	c9 05		cmp #$05	                CMP #5              ; Check the number of arguments
.3a7946	f0 1d		beq $3a7965	                BEQ done            ; 5? Just quit
.3a7948	e2 10		sep #$10	            SEP #$10
.3a794a	a6 21		ldx $0869	                LDX MARG6           ; Set DBR
.3a794c	8e 4e 02	stx $024e	                STX #CPUDBR,B
.3a794f	c9 06		cmp #$06	                CMP #6              ; Check the number of arguments
.3a7951	f0 12		beq $3a7965	                BEQ done            ; 6? Just quit
.3a7953	c2 10		rep #$10	            REP #$10
.3a7955	a6 25		ldx $086d	                LDX MARG7           ; Set DP
.3a7957	8e 4c 02	stx $024c	                STX #CPUDP,B
.3a795a	c9 07		cmp #$07	                CMP #7              ; Check the number of arguments
.3a795c	f0 07		beq $3a7965	                BEQ done            ; 7? Just quit
.3a795e	e2 10		sep #$10	            SEP #$10
.3a7960	a6 29		ldx $0871	                LDX MARG8           ; Set flags
.3a7962	8e 4f 02	stx $024f	                STX #CPUFLAGS,B
.3a7965	ab		plb		done            PLB
.3a7966	2b		pld		                PLD
.3a7967	28		plp		                PLP
.3a7968	6b		rtl		                RTL
.3a7969					IMEXECUTE
.3a7969	08		php		                PHP
.3a796a	0b		phd		                PHD
.3a796b	8b		phb		                PHB
.3a796c	08		php		            PHP
.3a796d	c2 20		rep #$20	            REP #$20
.3a796f	48		pha		            PHA
.3a7970	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7973	5b		tcd		            TCD
.3a7974	68		pla		            PLA
.3a7975	28		plp		            PLP
.3a7976	e2 20		sep #$20	            SEP #$20
.3a7978	c2 10		rep #$10	            REP #$10
.3a797a	a2 00 00	ldx #$0000	                LDX #0
.3a797d	bf 5e 8a 3a	lda $3a8a5e,x	loop            LDA @lMCOMMANDS,X
.3a7981	f0 18		beq $3a799b	                BEQ done
.3a7983	c7 08		cmp [$0850]	                CMP [MCMD]
.3a7985	f0 03		beq $3a798a	                BEQ found
.3a7987	e8		inx		                INX
.3a7988	80 f3		bra $3a797d	                BRA loop
.3a798a					found
.3a798a	c2 20		rep #$20	            REP #$20
.3a798c	8a		txa		                TXA
.3a798d	0a		asl a		                ASL A
.3a798e	aa		tax		                TAX
.3a798f	bf 9f 79 3a	lda $3a799f,x	                LDA dispatch,X
.3a7993	8f 2f 08 00	sta $00082f	                STA @lJMP16PTR
.3a7997	22 c3 79 3a	jsl $3a79c3	                JSL MDOCMD
.3a799b	ab		plb		done            PLB
.3a799c	2b		pld		                PLD
.3a799d	28		plp		                PLP
.3a799e	6b		rtl		                RTL
>3a799f	3f 70				dispatch        .word <>MASSEMBLE
>3a79a1	47 70				                .word <>MCOMPARE
>3a79a3	4b 70				                .word <>MDISASSEMBLE
>3a79a5	4f 70				                .word <>MFILL
>3a79a7	53 70				                .word <>MGO
>3a79a9	57 70				                .word <>MJUMP
>3a79ab	5b 70				                .word <>MHUNT
>3a79ad	5f 70				                .word <>MLOAD
>3a79af	63 70				                .word <>MMEMORY
>3a79b1	67 70				                .word <>MREGISTERS
>3a79b3	43 70				                .word <>MRMODIFY
>3a79b5	6b 70				                .word <>MSAVE
>3a79b7	6f 70				                .word <>MTRANSFER
>3a79b9	73 70				                .word <>MVERIFY
>3a79bb	35 74				                .word <>IMWIDTH
>3a79bd	77 70				                .word <>MEXIT
>3a79bf	7b 70				                .word <>MMODIFY
>3a79c1	ae 70				                .word <>IMHELP
.3a79c3					MDOCMD
.3a79c3	6c 2f 08	jmp ($082f)	                JMP (JMP16PTR)

;******  Processing file: src\assembler.s

=0					ADDR_DP_IND_X = 0       ; (dd,X)
=1					ADDR_DP = 1             ; dd
=2					ADDR_IMM = 2            ; #dd
=3					ADDR_ABS = 3            ; dddd
=4					ADDR_DP_IND_Y = 4       ; (dd),Y
=5					ADDR_DP_X = 5           ; dd,X
=6					ADDR_ABS_Y = 6          ; dddd,Y
=7					ADDR_ABS_X = 7          ; dddd,X
=8					ADDR_ACC = 8            ; A
=9					ADDR_SP_R = 9           ; #d,S
=10					ADDR_DP_LONG = 10       ; [dd]
=11					ADDR_ABS_LONG = 11      ; dddddd
=12					ADDR_SP_R_Y = 12        ; #dd,S,Y
=13					ADDR_DP_Y_LONG = 13     ; [dd],Y
=14					ADDR_ABS_X_LONG = 14    ; dddddd,X
=15					ADDR_DP_IND = 15        ; (dd)
=16					ADDR_ABS_X_ID = 16      ; (dddd,X)
=17					ADDR_DP_Y = 17          ; dd,Y
=18					ADDR_PC_REL = 18        ; PC relative
=19					ADDR_IMPLIED = 19       ; Implied (no operand)
=20					ADDR_XYC = 20           ; #dd, #dd
=21					ADDR_ABS_IND = 21       ; (dddd)
=22					ADDR_PC_REL_LONG = 22   ; PC relative ()
=23					ADDR_ABS_IND_LONG = 23  ; [dddd]
=$80					OP_M_EFFECT = $80       ; Flag to indicate instruction is modified by M
=$40					OP_X_EFFECT = $40       ; Flag to indicate instruction is modified by X
.3a79c6					IMASSEMBLE
.3a79c6	08		php		                PHP
.3a79c7	8b		phb		                PHB
.3a79c8	0b		phd		                PHD
.3a79c9	08		php		            PHP
.3a79ca	c2 20		rep #$20	            REP #$20
.3a79cc	48		pha		            PHA
.3a79cd	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a79d0	5b		tcd		            TCD
.3a79d1	68		pla		            PLA
.3a79d2	28		plp		            PLP
.3a79d3	e2 20		sep #$20	            SEP #$20
.3a79d5	a5 31		lda $0879	                LDA MARG_LEN            ; Do we have at least 2 arguments?
.3a79d7	c9 02		cmp #$02	                CMP #2
.3a79d9	b0 03		bcs $3a79de	                BGE has_args            ; Yes: try to assemble the line
.3a79db	4c 6c 7b	jmp $3a7b6c	                JMP done                ; No: just return
.3a79de					has_args
.3a79de	c2 20		rep #$20	            REP #$20
.3a79e0	a5 0d		lda $0855	                LDA MARG1               ; Set the monitor cursor to the address
.3a79e2	85 32		sta $087a	                STA MCURSOR
.3a79e4	a5 0f		lda $0857	                LDA MARG1+2
.3a79e6	85 34		sta $087c	                STA MCURSOR+2
.3a79e8	c2 20		rep #$20	            REP #$20
.3a79ea	22 6e 7d 3a	jsl $3a7d6e	                JSL AS_FIND_MNEMO       ; Find the address of the mnemonic
.3a79ee	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a79f1	f0 10		beq $3a7a03	                BEQ bad_mnemonic        ; If not found, print bad mnemonic error message
.3a79f3	85 54		sta $089c	                STA MMNEMONIC
.3a79f5	e2 20		sep #$20	            SEP #$20
.3a79f7	a5 31		lda $0879	                LDA MARG_LEN            ; Check the number of arguments passed
.3a79f9	c9 03		cmp #$03	                CMP #3                  ; Were all three arguments provided?
.3a79fb	f0 36		beq $3a7a33	                BEQ get_operand         ; Yes: parse the operand
.3a79fd	a9 13		lda #$13	                LDA #ADDR_IMPLIED       ; No: assume address mode is implied
.3a79ff	85 4f		sta $0897	                STA MADDR_MODE
.3a7a01	80 4c		bra $3a7a4f	                BRA get_opcode
.3a7a03					bad_mnemonic
.3a7a03	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a7a06	08		php		            PHP
.3a7a07	e2 20		sep #$20	            SEP #$20
.3a7a09	48		pha		            PHA
.3a7a0a	a9 3a		lda #$3a	            LDA #`MERRBADMNEMO
.3a7a0c	48		pha		            PHA
.3a7a0d	ab		plb		            PLB
.3a7a0e	68		pla		            PLA
.3a7a0f	28		plp		            PLP
.3a7a10	c2 10		rep #$10	            REP #$10
.3a7a12	a2 a3 7b	ldx #$7ba3	                LDX #<>MERRBADMNEMO
.3a7a15	20 64 04	jsr $3a0464	            JSR PRINTS
.3a7a18	4c 6c 7b	jmp $3a7b6c	                JMP done
.3a7a1b					bad_operand
.3a7a1b	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a7a1e	08		php		            PHP
.3a7a1f	e2 20		sep #$20	            SEP #$20
.3a7a21	48		pha		            PHA
.3a7a22	a9 3a		lda #$3a	            LDA #`MERRBADOPER
.3a7a24	48		pha		            PHA
.3a7a25	ab		plb		            PLB
.3a7a26	68		pla		            PLA
.3a7a27	28		plp		            PLP
.3a7a28	c2 10		rep #$10	            REP #$10
.3a7a2a	a2 b2 7b	ldx #$7bb2	                LDX #<>MERRBADOPER
.3a7a2d	20 64 04	jsr $3a0464	            JSR PRINTS
.3a7a30	4c 6c 7b	jmp $3a7b6c	                JMP done
.3a7a33					get_operand
.3a7a33	e2 20		sep #$20	            SEP #$20
.3a7a35	22 a4 7d 3a	jsl $3a7da4	                JSL AS_FIND_MODE        ; Find the addressing mode of the operand
.3a7a39	c9 ff		cmp #$ff	compare         CMP #$FF
.3a7a3b	f0 de		beq $3a7a1b	                BEQ bad_operand         ; If not found, print bad operand error message
.3a7a3d	85 4f		sta $0897	                STA MADDR_MODE
.3a7a3f	c9 03		cmp #$03	                CMP #ADDR_ABS           ; If mode is absolute or absolute long...
.3a7a41	f0 62		beq $3a7aa5	                BEQ check_for_pcrel     ; Check to see if the mnemonic is one of the branches
.3a7a43	c9 0b		cmp #$0b	                CMP #ADDR_ABS_LONG
.3a7a45	f0 5e		beq $3a7aa5	                BEQ check_for_pcrel
.3a7a47	c9 13		cmp #$13	                CMP #ADDR_IMPLIED       ; If mode is implied or accumulator, get the opcode
.3a7a49	f0 04		beq $3a7a4f	                BEQ get_opcode
.3a7a4b	c9 08		cmp #$08	                CMP #ADDR_ACC
.3a7a4d	f0 00		beq $3a7a4f	                BEQ get_opcode
.3a7a4f	22 9c 7c 3a	jsl $3a7c9c	get_opcode      JSL AS_FIND_OPCODE      ; Find the opcode matching the two
.3a7a53	b0 03		bcs $3a7a58	                BCS save_opcode
.3a7a55	4c 35 7b	jmp $3a7b35	                JMP bad_mode            ; If opcode not found, print bad address mode error message
.3a7a58	87 32		sta [$087a]	save_opcode     STA [MCURSOR]           ; Write the opcode to the address
.3a7a5a	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR        ; And point to the next byte
.3a7a5e	08		php		            PHP
.3a7a5f	e2 20		sep #$20	            SEP #$20
.3a7a61	48		pha		            PHA
.3a7a62	a9 00		lda #$00	            LDA #0
.3a7a64	48		pha		            PHA
.3a7a65	ab		plb		            PLB
.3a7a66	68		pla		            PLA
.3a7a67	28		plp		            PLP
.3a7a68	c2 20		rep #$20	            REP #$20
.3a7a6a	a5 32		lda $087a	                LDA MCURSOR             ; Make MTEMPPTR a pointer to the machine code we're assembling
.3a7a6c	85 56		sta $089e	                STA MTEMPPTR
.3a7a6e	a5 34		lda $087c	                LDA MCURSOR+2
.3a7a70	85 58		sta $08a0	                STA MTEMPPTR+2
.3a7a72	e2 20		sep #$20	            SEP #$20
.3a7a74	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check the address mode again
.3a7a76	c9 12		cmp #$12	                CMP #ADDR_PC_REL        ; If it's PC relative
.3a7a78	f0 6c		beq $3a7ae6	                BEQ compute_rel         ; Convert the address to an offset
.3a7a7a	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.3a7a7c	f0 68		beq $3a7ae6	                BEQ compute_rel
.3a7a7e	c9 14		cmp #$14	                CMP #ADDR_XYC           ; MVP/MVN addressing mode?
.3a7a80	f0 7c		beq $3a7afe	                BEQ emit_2
.3a7a82	29 3f		and #$3f	                AND #%00111111          ; Filter out the mode bits
.3a7a84	c9 02		cmp #$02	                CMP #ADDR_IMM           ; Is it immediate?
.3a7a86	d0 03		bne $3a7a8b	                BNE fixed_length        ; Yes: emit it as an immediate (variable length)
.3a7a88	4c 63 7b	jmp $3a7b63	                JMP emit_imm
.3a7a8b					fixed_length
.3a7a8b	c2 20		rep #$20	            REP #$20
.3a7a8d	29 ff 00	and #$00ff	                AND #$00FF
.3a7a90	aa		tax		                TAX
.3a7a91	e2 20		sep #$20	            SEP #$20
.3a7a93	bf 6b 86 3a	lda $3a866b,x	get_length      LDA ADDR_LENGTH,X       ; Get the number of bytes in the addressing mode
.3a7a97	c9 03		cmp #$03	                CMP #$03
.3a7a99	f0 57		beq $3a7af2	                BEQ emit_3
.3a7a9b	c9 02		cmp #$02	                CMP #$02
.3a7a9d	f0 5f		beq $3a7afe	                BEQ emit_2
.3a7a9f	c9 01		cmp #$01	                CMP #$01
.3a7aa1	f0 67		beq $3a7b0a	                BEQ emit_1
.3a7aa3	80 71		bra $3a7b16	                BRA next_line
.3a7aa5					check_for_pcrel
.3a7aa5	c2 20		rep #$20	            REP #$20
.3a7aa7	a5 54		lda $089c	                LDA MMNEMONIC
.3a7aa9	c9 e3 82	cmp #$82e3	                CMP #<>MN_BRA
.3a7aac	f0 26		beq $3a7ad4	                BEQ is_pcrel
.3a7aae	c9 47 83	cmp #$8347	                CMP #<>MN_BRL
.3a7ab1	f0 2a		beq $3a7add	                BEQ is_pcrel_long
.3a7ab3	c9 c7 82	cmp #$82c7	                CMP #<>MN_BCC
.3a7ab6	f0 1c		beq $3a7ad4	                BEQ is_pcrel
.3a7ab8	c9 cb 82	cmp #$82cb	                CMP #<>MN_BCS
.3a7abb	f0 17		beq $3a7ad4	                BEQ is_pcrel
.3a7abd	c9 d3 82	cmp #$82d3	                CMP #<>MN_BEQ
.3a7ac0	f0 12		beq $3a7ad4	                BEQ is_pcrel
.3a7ac2	c9 bb 82	cmp #$82bb	                CMP #<>MN_BMI
.3a7ac5	f0 0d		beq $3a7ad4	                BEQ is_pcrel
.3a7ac7	c9 cf 82	cmp #$82cf	                CMP #<>MN_BNE
.3a7aca	f0 08		beq $3a7ad4	                BEQ is_pcrel
.3a7acc	c9 b7 82	cmp #$82b7	                CMP #<>MN_BPL
.3a7acf	f0 03		beq $3a7ad4	                BEQ is_pcrel
.3a7ad1	4c 4f 7a	jmp $3a7a4f	                JMP get_opcode
.3a7ad4					is_pcrel
.3a7ad4	e2 20		sep #$20	            SEP #$20
.3a7ad6	a9 12		lda #$12	                LDA #ADDR_PC_REL
.3a7ad8	85 4f		sta $0897	                STA MADDR_MODE
.3a7ada	4c 4f 7a	jmp $3a7a4f	                JMP get_opcode
.3a7add					is_pcrel_long
.3a7add	e2 20		sep #$20	            SEP #$20
.3a7adf	a9 16		lda #$16	                LDA #ADDR_PC_REL_LONG
.3a7ae1	85 4f		sta $0897	                STA MADDR_MODE
.3a7ae3	4c 4f 7a	jmp $3a7a4f	                JMP get_opcode
.3a7ae6	22 df 7b 3a	jsl $3a7bdf	compute_rel     JSL AS_PC_OFFSET        ; Try to compute the offset
.3a7aea	90 60		bcc $3a7b4c	                BCC bad_offset          ; If failed, it's a bad offset operand
.3a7aec	c9 02		cmp #$02	emit_rel        CMP #$02                ; If the offset is two bytes
.3a7aee	f0 0e		beq $3a7afe	                BEQ emit_2              ; Emit those two bytes
.3a7af0	80 18		bra $3a7b0a	                BRA emit_1              ; Otherwise emit just the one
.3a7af2	a0 02 00	ldy #$0002	emit_3          LDY #2                  ; Write bank byte of operand
.3a7af5	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a7af8	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a7afa	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a7afe	a0 01 00	ldy #$0001	emit_2          LDY #1                  ; Write high byte of operand
.3a7b01	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a7b04	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a7b06	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a7b0a	a0 00 00	ldy #$0000	emit_1          LDY #0                  ; Write low byte of operand
.3a7b0d	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a7b10	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a7b12	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a7b16					next_line
.3a7b16	e2 20		sep #$20	            SEP #$20
.3a7b18	a9 41		lda #$41	                LDA #'A'
.3a7b1a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b1d	a9 20		lda #$20	                LDA #' '
.3a7b1f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b22	a6 32		ldx $087a	                LDX MCURSOR
.3a7b24	86 4a		stx $0892	                STX MTEMP
.3a7b26	a6 34		ldx $087c	                LDX MCURSOR+2
.3a7b28	86 4c		stx $0894	                STX MTEMP+2
.3a7b2a	22 cf 81 3a	jsl $3a81cf	                JSL M_PR_ADDR
.3a7b2e	a9 20		lda #$20	                LDA #' '
.3a7b30	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b33	80 37		bra $3a7b6c	                BRA done
.3a7b35					bad_mode
.3a7b35	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a7b38	08		php		            PHP
.3a7b39	e2 20		sep #$20	            SEP #$20
.3a7b3b	48		pha		            PHA
.3a7b3c	a9 3a		lda #$3a	            LDA #`MERRBADMODE
.3a7b3e	48		pha		            PHA
.3a7b3f	ab		plb		            PLB
.3a7b40	68		pla		            PLA
.3a7b41	28		plp		            PLP
.3a7b42	c2 10		rep #$10	            REP #$10
.3a7b44	a2 70 7b	ldx #$7b70	                LDX #<>MERRBADMODE
.3a7b47	20 64 04	jsr $3a0464	            JSR PRINTS
.3a7b4a	80 20		bra $3a7b6c	                BRA done
.3a7b4c					bad_offset
.3a7b4c	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a7b4f	08		php		            PHP
.3a7b50	e2 20		sep #$20	            SEP #$20
.3a7b52	48		pha		            PHA
.3a7b53	a9 3a		lda #$3a	            LDA #`MERRBADOFFSET
.3a7b55	48		pha		            PHA
.3a7b56	ab		plb		            PLB
.3a7b57	68		pla		            PLA
.3a7b58	28		plp		            PLP
.3a7b59	c2 10		rep #$10	            REP #$10
.3a7b5b	a2 c0 7b	ldx #$7bc0	                LDX #<>MERRBADOFFSET
.3a7b5e	20 64 04	jsr $3a0464	            JSR PRINTS
.3a7b61	80 09		bra $3a7b6c	                BRA done
.3a7b63	a5 4f		lda $0897	emit_imm        LDA MADDR_MODE          ; Check to see if long immediate was used
.3a7b65	29 c0		and #$c0	                AND #%11000000
.3a7b67	d0 95		bne $3a7afe	                BNE emit_2              ; Yes: emit two bytes
.3a7b69	4c 0a 7b	jmp $3a7b0a	                JMP emit_1              ; No: emit one byte
.3a7b6c	2b		pld		done            PLD
.3a7b6d	ab		plb		                PLB
.3a7b6e	28		plp		                PLP
.3a7b6f	6b		rtl		                RTL
>3a7b70	41 64 64 72 65 73 73 69		MERRBADMODE     .null "Addressing mode not defined for that instruction.",CHAR_CR
>3a7b78	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>3a7b88	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>3a7b98	74 72 75 63 74 69 6f 6e 2e 0d 00
>3a7ba3	42 61 64 20 6d 6e 65 6d		MERRBADMNEMO    .null "Bad mnemonic.",CHAR_CR
>3a7bab	6f 6e 69 63 2e 0d 00
>3a7bb2	42 61 64 20 6f 70 65 72		MERRBADOPER     .null "Bad operand.",CHAR_CR
>3a7bba	61 6e 64 2e 0d 00
>3a7bc0	52 65 6c 61 74 69 76 65		MERRBADOFFSET   .null "Relative offset is too large.",CHAR_CR
>3a7bc8	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>3a7bd8	61 72 67 65 2e 0d 00
.3a7bdf					AS_PC_OFFSET
.3a7bdf	08		php		                PHP
.3a7be0	0b		phd		                PHD
.3a7be1	08		php		            PHP
.3a7be2	c2 20		rep #$20	            REP #$20
.3a7be4	48		pha		            PHA
.3a7be5	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7be8	5b		tcd		            TCD
.3a7be9	68		pla		            PLA
.3a7bea	28		plp		            PLP
.3a7beb	e2 20		sep #$20	            SEP #$20
.3a7bed	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check to see if it 1 byte or 2 byte relative
.3a7bef	c9 12		cmp #$12	                CMP #ADDR_PC_REL
.3a7bf1	f0 0a		beq $3a7bfd	                BEQ is_short
.3a7bf3	c2 20		rep #$20	            REP #$20
.3a7bf5	18		clc		                CLC                     ; Branch is long. Compute where MCURSOR will be
.3a7bf6	a5 32		lda $087a	                LDA MCURSOR             ; with two branch offset bytes
.3a7bf8	69 02 00	adc #$0002	                ADC #2
.3a7bfb	80 08		bra $3a7c05	                BRA compute_cursor
.3a7bfd					is_short
.3a7bfd	c2 20		rep #$20	            REP #$20
.3a7bff	18		clc		                CLC                     ; Branch is short. Computer where MCURSOR will be
.3a7c00	a5 32		lda $087a	                LDA MCURSOR             ; with one branch offset byte
.3a7c02	69 01 00	adc #$0001	                ADC #1
.3a7c05	85 4a		sta $0892	compute_cursor  STA MTEMP
.3a7c07	a5 34		lda $087c	                LDA MCURSOR+2
.3a7c09	69 00 00	adc #$0000	                ADC #0
.3a7c0c	85 4c		sta $0894	                STA MTEMP+2
.3a7c0e	38		sec		                SEC                     ; MPARSEDNUM = MPARSEDNUM - MTEMP (MCURSOR after the instruction)
.3a7c0f	a5 50		lda $0898	                LDA MPARSEDNUM
.3a7c11	e5 4a		sbc $0892	                SBC MTEMP
.3a7c13	85 50		sta $0898	                STA MPARSEDNUM
.3a7c15	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a7c17	e5 4c		sbc $0894	                SBC MTEMP+2
.3a7c19	85 52		sta $089a	                STA MPARSEDNUM+2
.3a7c1b	e2 20		sep #$20	            SEP #$20
.3a7c1d	a5 4f		lda $0897	                LDA MADDR_MODE
.3a7c1f	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.3a7c21	f0 1e		beq $3a7c41	                BEQ check_long
.3a7c23	a5 50		lda $0898	                LDA MPARSEDNUM          ; Short offset... check if it's negative
.3a7c25	30 0c		bmi $3a7c33	                BMI check_short_neg
.3a7c27	a5 51		lda $0899	                LDA MPARSEDNUM+1        ; Positive short offset... upper two bytes
.3a7c29	d0 2a		bne $3a7c55	                BNE failure             ; Must be 0 or it's an overflow
.3a7c2b	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a7c2d	d0 26		bne $3a7c55	                BNE failure
.3a7c2f	a9 01		lda #$01	                LDA #1                  ; Short offset is 1 byte
.3a7c31	80 26		bra $3a7c59	                BRA success
.3a7c33	a5 51		lda $0899	check_short_neg LDA MPARSEDNUM+1        ; Negative short offset... upper two bytes
.3a7c35	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's an  overflow
.3a7c37	d0 1c		bne $3a7c55	                BNE failure
.3a7c39	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a7c3b	c9 ff		cmp #$ff	                CMP #$FF
.3a7c3d	d0 16		bne $3a7c55	                BNE failure
.3a7c3f	80 18		bra $3a7c59	                BRA success
.3a7c41	a5 51		lda $0899	check_long      LDA MPARSEDNUM+1        ; Long offset... check if it's negative
.3a7c43	30 06		bmi $3a7c4b	                BMI check_long_neg
.3a7c45	a5 52		lda $089a	                LDA MPARSEDNUM+2        ; Positive long offset... upper byte
.3a7c47	d0 0c		bne $3a7c55	                BNE failure             ; Must be 0 or it's an overflow
.3a7c49	80 0e		bra $3a7c59	                BRA success
.3a7c4b	a5 52		lda $089a	check_long_neg  LDA MPARSEDNUM+2        ; Negative offset... upper two bytes
.3a7c4d	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's and overflow
.3a7c4f	d0 04		bne $3a7c55	                BNE failure
.3a7c51	a9 02		lda #$02	                LDA #2                  ; Long offset is 2 bytes
.3a7c53	80 04		bra $3a7c59	                BRA success
.3a7c55	2b		pld		failure         PLD
.3a7c56	28		plp		                PLP
.3a7c57	18		clc		                CLC
.3a7c58	6b		rtl		                RTL
.3a7c59	2b		pld		success         PLD
.3a7c5a	28		plp		                PLP
.3a7c5b	38		sec		                SEC
.3a7c5c	6b		rtl		                RTL
.3a7c5d					AS_SHIFT_HEX
.3a7c5d	08		php		                PHP
.3a7c5e	0b		phd		                PHD
.3a7c5f	c2 10		rep #$10	            REP #$10
.3a7c61	da		phx		                PHX
.3a7c62	08		php		            PHP
.3a7c63	c2 20		rep #$20	            REP #$20
.3a7c65	48		pha		            PHA
.3a7c66	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7c69	5b		tcd		            TCD
.3a7c6a	68		pla		            PLA
.3a7c6b	28		plp		            PLP
.3a7c6c	e2 20		sep #$20	            SEP #$20
.3a7c6e	a2 00 00	ldx #$0000	                LDX #0
.3a7c71	df 00 d0 3a	cmp $3ad000,x	seek_loop       CMP @lHEXDIGITS,X   ; Check the passed character against the hex digits
.3a7c75	f0 08		beq $3a7c7f	                BEQ found
.3a7c77	e8		inx		                INX                 ; Go to the next hex digit
.3a7c78	e0 10 00	cpx #$0010	                CPX #$10            ; Are we out of digits?
.3a7c7b	f0 1b		beq $3a7c98	                BEQ done            ; Yes... just return
.3a7c7d	80 f2		bra $3a7c71	                BRA seek_loop
.3a7c7f					found
.3a7c7f	c2 20		rep #$20	            REP #$20
.3a7c81	06 50		asl $0898	                ASL MPARSEDNUM
.3a7c83	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7c85	06 50		asl $0898	                ASL MPARSEDNUM
.3a7c87	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7c89	06 50		asl $0898	                ASL MPARSEDNUM
.3a7c8b	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7c8d	06 50		asl $0898	                ASL MPARSEDNUM
.3a7c8f	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7c91	e2 20		sep #$20	            SEP #$20
.3a7c93	8a		txa		                TXA
.3a7c94	05 50		ora $0898	                ORA MPARSEDNUM
.3a7c96	85 50		sta $0898	                STA MPARSEDNUM
.3a7c98	fa		plx		done            PLX
.3a7c99	2b		pld		                PLD
.3a7c9a	28		plp		                PLP
.3a7c9b	6b		rtl		                RTL
.3a7c9c					AS_FIND_OPCODE
.3a7c9c	0b		phd		                PHD
.3a7c9d	8b		phb		                PHB
.3a7c9e	08		php		            PHP
.3a7c9f	c2 20		rep #$20	            REP #$20
.3a7ca1	48		pha		            PHA
.3a7ca2	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7ca5	5b		tcd		            TCD
.3a7ca6	68		pla		            PLA
.3a7ca7	28		plp		            PLP
.3a7ca8	08		php		            PHP
.3a7ca9	e2 20		sep #$20	            SEP #$20
.3a7cab	48		pha		            PHA
.3a7cac	a9 3a		lda #$3a	            LDA #`MNEMONIC_TAB
.3a7cae	48		pha		            PHA
.3a7caf	ab		plb		            PLB
.3a7cb0	68		pla		            PLA
.3a7cb1	28		plp		            PLP
.3a7cb2	e2 20		sep #$20	            SEP #$20
.3a7cb4	a5 4f		lda $0897	                LDA MADDR_MODE
.3a7cb6	29 3f		and #$3f	                AND #%00111111
.3a7cb8	85 4a		sta $0892	                STA MTEMP
.3a7cba	c2 30		rep #$30	            REP #$30
.3a7cbc	a2 00 00	ldx #$0000	                LDX #0
.3a7cbf	a0 00 00	ldy #$0000	                LDY #0
.3a7cc2	bd 69 83	lda $3a8369,x	mnemonic_loop   LDA MNEMONIC_TAB,X      ; Get the mnemonic from the opcode table
.3a7cc5	f0 1b		beq $3a7ce2	                BEQ not_found           ; If it's 0, we did not find the mnemonic
.3a7cc7	c5 54		cmp $089c	                CMP MMNEMONIC           ; Does it match the passed mnemonic?
.3a7cc9	d0 0d		bne $3a7cd8	                BNE next_opcode         ; No: go to the next opcode
.3a7ccb					check_mode
.3a7ccb	e2 20		sep #$20	            SEP #$20
.3a7ccd	b9 6b 85	lda $3a856b,y	                LDA ADDRESS_TAB,Y       ; Get the corresponding address mode
.3a7cd0	29 3f		and #$3f	                AND #%00111111          ; Filter out effect bits
.3a7cd2	c5 4a		cmp $0892	                CMP MTEMP
.3a7cd4	f0 07		beq $3a7cdd	                BEQ found               ; Yes: we found the opcode
.3a7cd6	c2 20		rep #$20	            REP #$20
.3a7cd8	e8		inx		next_opcode     INX                     ; Point to the next mnemonic in the table
.3a7cd9	e8		inx		                INX
.3a7cda	c8		iny		                INY
.3a7cdb	80 e5		bra $3a7cc2	                BRA mnemonic_loop       ; And check it
.3a7cdd	98		tya		found           TYA
.3a7cde	38		sec		                SEC                     ; Set carry to show success
.3a7cdf	ab		plb		                PLB
.3a7ce0	2b		pld		                PLD
.3a7ce1	6b		rtl		                RTL
.3a7ce2	18		clc		not_found       CLC                     ; Clear carry to show failure
.3a7ce3	ab		plb		                PLB
.3a7ce4	2b		pld		                PLD
.3a7ce5	6b		rtl		                RTL
.3a7ce6					AS_STR_MATCH
.3a7ce6	08		php		                PHP
.3a7ce7	0b		phd		                PHD
.3a7ce8	08		php		            PHP
.3a7ce9	c2 20		rep #$20	            REP #$20
.3a7ceb	48		pha		            PHA
.3a7cec	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7cef	5b		tcd		            TCD
.3a7cf0	68		pla		            PLA
.3a7cf1	28		plp		            PLP
.3a7cf2	e2 20		sep #$20	            SEP #$20
.3a7cf4	c2 10		rep #$10	            REP #$10
.3a7cf6	a0 00 00	ldy #$0000	                LDY #0
.3a7cf9	64 50		stz $0898	                STZ MPARSEDNUM      ; Set parsed number to 0 in anticipation of
.3a7cfb	64 52		stz $089a	                STZ MPARSEDNUM+2    ; hex digits in the pattern
.3a7cfd	b7 03		lda [$084b],y	match_loop      LDA [MCMP_TEXT],Y   ; Get the pattern character
.3a7cff	f0 11		beq $3a7d12	                BEQ nul_check       ; If at end of pattern, check for end of test string
.3a7d01	c9 64		cmp #$64	                CMP #'d'            ; Is it a digit?
.3a7d03	f0 19		beq $3a7d1e	                BEQ check_digit     ; Yes: do special check for hex digit
.3a7d05	48		pha		compare         PHA
.3a7d06	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.3a7d08	85 4a		sta $0892	                STA MTEMP
.3a7d0a	68		pla		                PLA
.3a7d0b	c5 4a		cmp $0892	                CMP MTEMP           ; Does it match the character to test?
.3a7d0d	d0 0b		bne $3a7d1a	                BNE return_false    ; No: return fail
.3a7d0f	c8		iny		next_char       INY                 ; Yes: test the next character
.3a7d10	80 eb		bra $3a7cfd	                BRA match_loop
.3a7d12	b7 36		lda [$087e],y	nul_check       LDA [MLINEBUF],Y    ; Check to see that we're at the end of the test string
.3a7d14	d0 04		bne $3a7d1a	                BNE return_false    ; If not: return false
.3a7d16	2b		pld		return_true     PLD
.3a7d17	28		plp		                PLP                 ; Return true
.3a7d18	38		sec		                SEC
.3a7d19	6b		rtl		                RTL
.3a7d1a	2b		pld		return_false    PLD
.3a7d1b	28		plp		                PLP                 ; Return false
.3a7d1c	18		clc		                CLC
.3a7d1d	6b		rtl		                RTL
.3a7d1e					check_digit
.3a7d1e	e2 20		sep #$20	            SEP #$20
.3a7d20	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.3a7d22	c9 3a		cmp #$3a	                CMP #'9'+1
.3a7d24	b0 04		bcs $3a7d2a	                BCS check_AF
.3a7d26	c9 30		cmp #$30	                CMP #'0'
.3a7d28	b0 14		bcs $3a7d3e	                BCS shift_digit     ; character is in [0..9]
.3a7d2a	c9 47		cmp #$47	check_AF        CMP #'F'+1
.3a7d2c	b0 04		bcs $3a7d32	                BCS check_lc        ; check lower case
.3a7d2e	c9 41		cmp #$41	                CMP #'A'
.3a7d30	b0 0c		bcs $3a7d3e	                BCS shift_digit     ; character is in [A..F]
.3a7d32	c9 67		cmp #$67	check_lc        CMP #'f'+1
.3a7d34	b0 e4		bcs $3a7d1a	                BCS return_false    ; check lower case
.3a7d36	c9 61		cmp #$61	                CMP #'a'
.3a7d38	b0 02		bcs $3a7d3c	                BCS to_upcase       ; character is in [A..F]
.3a7d3a	80 de		bra $3a7d1a	                BRA return_false    ; No match found... return false
.3a7d3c	29 df		and #$df	to_upcase       AND #%11011111      ; Convert lower case to upper case
.3a7d3e	22 5d 7c 3a	jsl $3a7c5d	shift_digit     JSL AS_SHIFT_HEX    ; Shift the digit into MPARSEDNUM
.3a7d42	80 cb		bra $3a7d0f	                BRA next_char       ; And check the next character
.3a7d44					AS_MCMP_NEXT
.3a7d44	0b		phd		                PHD
.3a7d45	08		php		            PHP
.3a7d46	c2 20		rep #$20	            REP #$20
.3a7d48	48		pha		            PHA
.3a7d49	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7d4c	5b		tcd		            TCD
.3a7d4d	68		pla		            PLA
.3a7d4e	28		plp		            PLP
.3a7d4f	a0 00 00	ldy #$0000	                LDY #0
.3a7d52	e2 20		sep #$20	            SEP #$20
.3a7d54	b7 03		lda [$084b],y	loop            LDA [MCMP_TEXT],Y   ; Check to see if we have gotten to the NUL
.3a7d56	f0 03		beq $3a7d5b	                BEQ found_nul
.3a7d58	c8		iny		                INY
.3a7d59	80 f9		bra $3a7d54	                BRA loop
.3a7d5b					found_nul
.3a7d5b	c2 20		rep #$20	            REP #$20
.3a7d5d	c8		iny		                INY                 ; Got to NUL... point to next byte
.3a7d5e	5a		phy		                PHY
.3a7d5f	68		pla		                PLA                 ; And add that index to MCMP_TEXT pointer
.3a7d60	18		clc		                CLC
.3a7d61	65 03		adc $084b	                ADC MCMP_TEXT
.3a7d63	85 03		sta $084b	                STA MCMP_TEXT
.3a7d65	a5 05		lda $084d	                LDA MCMP_TEXT+2
.3a7d67	69 00 00	adc #$0000	                ADC #0
.3a7d6a	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7d6c	2b		pld		                PLD
.3a7d6d	6b		rtl		                RTL
.3a7d6e					AS_FIND_MNEMO
.3a7d6e	0b		phd		                PHD
.3a7d6f	08		php		            PHP
.3a7d70	c2 20		rep #$20	            REP #$20
.3a7d72	48		pha		            PHA
.3a7d73	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7d76	5b		tcd		            TCD
.3a7d77	68		pla		            PLA
.3a7d78	28		plp		            PLP
.3a7d79	c2 20		rep #$20	            REP #$20
.3a7d7b	a5 11		lda $0859	                LDA MARG2                   ; Point MLINEBUF to the text
.3a7d7d	85 36		sta $087e	                STA MLINEBUF
.3a7d7f	a5 13		lda $085b	                LDA MARG2+2
.3a7d81	85 38		sta $0880	                STA MLINEBUF+2
.3a7d83	a9 f7 81	lda #$81f7	                LDA #<>MNEMONICS_TAB        ; Point to the first mnemonic
.3a7d86	85 03		sta $084b	                STA MCMP_TEXT
.3a7d88	a9 3a 00	lda #$003a	                LDA #`MNEMONICS_TAB
.3a7d8b	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7d8d	22 e6 7c 3a	jsl $3a7ce6	match_loop      JSL AS_STR_MATCH            ; Check to see if the text matches the mnemonic
.3a7d91	b0 0d		bcs $3a7da0	                BCS found_mnemonic          ; If so: return that we found it
.3a7d93	22 44 7d 3a	jsl $3a7d44	                JSL AS_MCMP_NEXT            ; Point to the next mnemonic
.3a7d97	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Check to see if it's NUL
.3a7d99	d0 f2		bne $3a7d8d	                BNE match_loop              ; If not, check this next mnemonic
.3a7d9b	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Otherwise, return -1
.3a7d9e	80 02		bra $3a7da2	                BRA done
.3a7da0	a5 03		lda $084b	found_mnemonic  LDA MCMP_TEXT               ; Found it: return the address
.3a7da2	2b		pld		done            PLD
.3a7da3	6b		rtl		                RTL
.3a7da4					AS_FIND_MODE
.3a7da4	08		php		                PHP
.3a7da5	0b		phd		                PHD
.3a7da6	08		php		            PHP
.3a7da7	c2 20		rep #$20	            REP #$20
.3a7da9	48		pha		            PHA
.3a7daa	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7dad	5b		tcd		            TCD
.3a7dae	68		pla		            PLA
.3a7daf	28		plp		            PLP
.3a7db0	c2 30		rep #$30	            REP #$30
.3a7db2	a5 15		lda $085d	                LDA MARG3                   ; Point MLINEBUF to the operand
.3a7db4	85 36		sta $087e	                STA MLINEBUF
.3a7db6	a5 17		lda $085f	                LDA MARG3+2
.3a7db8	85 38		sta $0880	                STA MLINEBUF+2
.3a7dba	a9 83 86	lda #$8683	                LDA #<>ADDR_PATTERNS        ; Point to the first address mode pattern to check
.3a7dbd	85 03		sta $084b	                STA MCMP_TEXT
.3a7dbf	a9 3a 00	lda #$003a	                LDA #`ADDR_PATTERNS
.3a7dc2	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7dc4	22 e6 7c 3a	jsl $3a7ce6	match_loop      JSL AS_STR_MATCH            ; Check to see if the pattern matches the operand
.3a7dc8	b0 22		bcs $3a7dec	                BCS is_match                ; Yes: Find address mode code
.3a7dca	22 44 7d 3a	jsl $3a7d44	                JSL AS_MCMP_NEXT            ; Point to the address mode
.3a7dce	c2 20		rep #$20	            REP #$20
.3a7dd0	18		clc		                CLC                         ; Point to the first byte of the next pattern
.3a7dd1	a5 03		lda $084b	                LDA MCMP_TEXT
.3a7dd3	69 01 00	adc #$0001	                ADC #1
.3a7dd6	85 03		sta $084b	                STA MCMP_TEXT
.3a7dd8	a5 05		lda $084d	                LDA MCMP_TEXT+2
.3a7dda	69 00 00	adc #$0000	                ADC #0
.3a7ddd	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7ddf	e2 20		sep #$20	            SEP #$20
.3a7de1	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Is the first byte 0?
.3a7de3	d0 df		bne $3a7dc4	                BNE match_loop              ; No: check this next pattern
.3a7de5	c2 20		rep #$20	            REP #$20
.3a7de7	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Yes: we didn't find a matching pattern, return -1
.3a7dea	80 0d		bra $3a7df9	                BRA done
.3a7dec	22 44 7d 3a	jsl $3a7d44	is_match        JSL AS_MCMP_NEXT            ; Point to the address mode
.3a7df0	e2 20		sep #$20	            SEP #$20
.3a7df2	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Get the corresponding address mode code (a byte)
.3a7df4	c2 20		rep #$20	            REP #$20
.3a7df6	29 ff 00	and #$00ff	                AND #$00FF
.3a7df9	2b		pld		done            PLD
.3a7dfa	28		plp		                PLP
.3a7dfb	6b		rtl		                RTL
.3a7dfc					IMDISASSEMBLE
.3a7dfc	08		php		                PHP
.3a7dfd	8b		phb		                PHB
.3a7dfe	0b		phd		                PHD
.3a7dff	08		php		            PHP
.3a7e00	c2 20		rep #$20	            REP #$20
.3a7e02	48		pha		            PHA
.3a7e03	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7e06	5b		tcd		            TCD
.3a7e07	68		pla		            PLA
.3a7e08	28		plp		            PLP
.3a7e09	e2 20		sep #$20	            SEP #$20
.3a7e0b	a9 00		lda #$00	                LDA #0
.3a7e0d	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT     ; Clear the pagination line counter
.3a7e11	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a7e13	c9 02		cmp #$02	                CMP #2
.3a7e15	b0 16		bcs $3a7e2d	                BGE set_cursor      ; 2>= arguments? Use them as-is
.3a7e17	c9 01		cmp #$01	                CMP #1
.3a7e19	90 20		bcc $3a7e3b	                BLT no_args         ; No arguments passed? Use defaults
.3a7e1b	c2 20		rep #$20	            REP #$20
.3a7e1d	18		clc		                CLC
.3a7e1e	a5 0d		lda $0855	                LDA MARG1
.3a7e20	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a7e23	85 11		sta $0859	                STA MARG2
.3a7e25	e2 20		sep #$20	            SEP #$20
.3a7e27	a5 0f		lda $0857	                LDA MARG1+2
.3a7e29	69 00		adc #$00	                ADC #0
.3a7e2b	85 13		sta $085b	                STA MARG2+2
.3a7e2d					set_cursor
.3a7e2d	c2 20		rep #$20	            REP #$20
.3a7e2f	a5 0d		lda $0855	                LDA MARG1
.3a7e31	85 32		sta $087a	                STA MCURSOR
.3a7e33	e2 20		sep #$20	            SEP #$20
.3a7e35	a5 0f		lda $0857	                LDA MARG1+2
.3a7e37	85 34		sta $087c	                STA MCURSOR+2
.3a7e39	80 12		bra $3a7e4d	                BRA dasm_loop
.3a7e3b					no_args
.3a7e3b	c2 20		rep #$20	            REP #$20
.3a7e3d	18		clc		                CLC
.3a7e3e	a5 32		lda $087a	                LDA MCURSOR
.3a7e40	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a7e43	85 11		sta $0859	                STA MARG2
.3a7e45	e2 20		sep #$20	            SEP #$20
.3a7e47	a5 34		lda $087c	                LDA MCURSOR+2
.3a7e49	69 00		adc #$00	                ADC #0
.3a7e4b	85 13		sta $085b	                STA MARG2+2
.3a7e4d	22 68 7e 3a	jsl $3a7e68	dasm_loop       JSL DS_PR_LINE
.3a7e51	e2 20		sep #$20	            SEP #$20
.3a7e53	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.3a7e55	c5 13		cmp $085b	                CMP MARG2+2
.3a7e57	90 f4		bcc $3a7e4d	                BLT dasm_loop           ; No: continue
.3a7e59	c2 20		rep #$20	            REP #$20
.3a7e5b	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.3a7e5d	c5 11		cmp $0859	                CMP MARG2
.3a7e5f	90 ec		bcc $3a7e4d	                BLT dasm_loop           ; Nope... keep going
.3a7e61					done
.3a7e61	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a7e64	2b		pld		                PLD
.3a7e65	ab		plb		                PLB
.3a7e66	28		plp		                PLP
.3a7e67	6b		rtl		                RTL
.3a7e68					DS_PR_LINE
.3a7e68	08		php		                PHP
.3a7e69	0b		phd		                PHD
.3a7e6a	e2 20		sep #$20	            SEP #$20
.3a7e6c	a9 41		lda #$41	                LDA #'A'
.3a7e6e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e71	a9 20		lda #$20	                LDA #' '
.3a7e73	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e76	08		php		            PHP
.3a7e77	c2 20		rep #$20	            REP #$20
.3a7e79	48		pha		            PHA
.3a7e7a	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a7e7d	5b		tcd		            TCD
.3a7e7e	68		pla		            PLA
.3a7e7f	28		plp		            PLP
.3a7e80	c2 20		rep #$20	            REP #$20
.3a7e82	a5 00		lda $087a	                LDA MCURSOR
.3a7e84	85 18		sta $0892	                STA MTEMP
.3a7e86	e2 20		sep #$20	            SEP #$20
.3a7e88	a5 02		lda $087c	                LDA MCURSOR+2
.3a7e8a	85 1a		sta $0894	                STA MTEMP+2
.3a7e8c	22 cf 81 3a	jsl $3a81cf	                JSL M_PR_ADDR
.3a7e90	a9 20		lda #$20	                LDA #' '
.3a7e92	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7e95	c2 20		rep #$20	            REP #$20
.3a7e97	18		clc		                CLC
.3a7e98	a5 00		lda $087a	                LDA MCURSOR
.3a7e9a	69 01 00	adc #$0001	                ADC #1
.3a7e9d	85 18		sta $0892	                STA MTEMP
.3a7e9f	e2 20		sep #$20	            SEP #$20
.3a7ea1	a5 02		lda $087c	                LDA MCURSOR+2
.3a7ea3	69 00		adc #$00	                ADC #0
.3a7ea5	85 1a		sta $0894	                STA MTEMP+2
.3a7ea7	e2 20		sep #$20	            SEP #$20
.3a7ea9	c2 10		rep #$10	            REP #$10
.3a7eab	a7 00		lda [$087a]	                LDA [MCURSOR]           ; Get the mnemonic
.3a7ead	c9 c2		cmp #$c2	                CMP #$C2                ; Is it REP?
.3a7eaf	d0 0b		bne $3a7ebc	                BNE check_sep           ; No: check to see if it is SEP
.3a7eb1	48		pha		handle_rep      PHA
.3a7eb2	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.3a7eb4	49 ff		eor #$ff	                EOR #$FF                ; Invert the bits
.3a7eb6	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Mask off the bits in the CPUSTAT
.3a7eba	80 0b		bra $3a7ec7	                BRA save_stat
.3a7ebc	c9 e2		cmp #$e2	check_sep       CMP #$E2                ; Is it SEP?
.3a7ebe	d0 0c		bne $3a7ecc	                BNE get_op_index        ; No: process the instruction regularly
.3a7ec0	48		pha		handle_sep      PHA
.3a7ec1	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.3a7ec3	0f 96 08 00	ora $000896	                ORA @lMCPUSTAT          ; Activate the bits in the CPUSTAT
.3a7ec7	8f 96 08 00	sta $000896	save_stat       STA @lMCPUSTAT          ; And save it back
.3a7ecb	68		pla		                PLA
.3a7ecc					get_op_index
.3a7ecc	c2 20		rep #$20	            REP #$20
.3a7ece	29 ff 00	and #$00ff	                AND #$00FF
.3a7ed1	0a		asl a		                ASL A
.3a7ed2	aa		tax		                TAX                     ; Get the index into the mnemonic lookup table
.3a7ed3	bf 69 83 3a	lda $3a8369,x	                LDA @lMNEMONIC_TAB,X    ; Get the mnemonic
.3a7ed7	aa		tax		                TAX
.3a7ed8	22 49 81 3a	jsl $3a8149	                JSL DS_PR_MNEMONIC      ; And print it
.3a7edc	e2 20		sep #$20	            SEP #$20
.3a7ede	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7ee0	aa		tax		                TAX
.3a7ee1	bf 6b 85 3a	lda $3a856b,x	pr_operand      LDA @lADDRESS_TAB,X     ; Get the addressing mode for the instruction
.3a7ee5	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR        ; Advance the cursor to the next byte
.3a7ee9	22 f6 7e 3a	jsl $3a7ef6	                JSL DS_PR_OPERAND       ; And print the correct operand
.3a7eed	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a7ef0	20 ee 03	jsr $3a03ee	            JSR PAGINATE
.3a7ef3	2b		pld		                PLD
.3a7ef4	28		plp		                PLP
.3a7ef5	6b		rtl		                RTL
.3a7ef6					DS_PR_OPERAND
.3a7ef6	08		php		                PHP
.3a7ef7	e2 20		sep #$20	            SEP #$20
.3a7ef9	48		pha		                PHA             ; Save the address mode so we can get to the M and X flags
.3a7efa	29 3f		and #$3f	                AND #%00111111  ; Filter out the mode flags
.3a7efc	0a		asl a		                ASL A           ; Compute the index to the table
.3a7efd	c2 10		rep #$10	            REP #$10
.3a7eff	aa		tax		                TAX
.3a7f00	68		pla		                PLA             ; Restore A
.3a7f01	7c 04 7f	jmp ($3a7f04,x)	                JMP (dispatch,X)
>3a7f04	34 7f				dispatch        .word <>is_dp_ind_x
>3a7f06	4f 7f				                .word <>is_dp
>3a7f08	56 7f				                .word <>is_imm
>3a7f0a	7b 7f				                .word <>is_abs
>3a7f0c	82 7f				                .word <>is_dp_ind_y
>3a7f0e	9d 7f				                .word <>is_dp_x
>3a7f10	bf 7f				                .word <>is_abs_y
>3a7f12	d0 7f				                .word <>is_abs_x
>3a7f14	0d 80				                .word <>is_accumulator
>3a7f16	15 80				                .word <>is_stack_r
>3a7f18	26 80				                .word <>is_dp_long
>3a7f1a	37 80				                .word <>is_abs_long
>3a7f1c	3e 80				                .word <>is_stack_r_y
>3a7f1e	63 80				                .word <>is_dp_y_long
>3a7f20	90 80				                .word <>is_abs_x_long
>3a7f22	fc 7f				                .word <>is_dp_ind
>3a7f24	e1 7f				                .word <>is_abs_x_id
>3a7f26	ae 7f				                .word <>is_dp_y
>3a7f28	83 80				                .word <>is_pc_rel
>3a7f2a	8d 80				                .word <>is_implied
>3a7f2c	a1 80				                .word <>is_xyc
>3a7f2e	d0 80				                .word <>is_abs_ind
>3a7f30	7e 80				                .word <>is_pc_rel_long
>3a7f32	e1 80				                .word <>is_abs_ind_long
.3a7f34	a9 28		lda #$28	is_dp_ind_x     LDA #'('                ; Print (dd,X)
.3a7f36	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f39	22 f8 80 3a	jsl $3a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.3a7f3d	a9 2c		lda #$2c	                LDA #','
.3a7f3f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f42	a9 58		lda #$58	                LDA #'X'
.3a7f44	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f47	a9 29		lda #$29	                LDA #')'
.3a7f49	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f4c	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7f4f	22 f8 80 3a	jsl $3a80f8	is_dp           JSL DS_PR_OPERAND1      ; Print dd
.3a7f53	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7f56					is_imm
.3a7f56	e2 20		sep #$20	            SEP #$20
.3a7f58	48		pha		                PHA
.3a7f59	a9 23		lda #$23	                LDA #'#'
.3a7f5b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f5e	68		pla		                PLA
.3a7f5f	29 c0		and #$c0	                AND #%11000000          ; Filter so we just look at the mode bits
.3a7f61	c9 00		cmp #$00	                CMP #$00                ; Are any set to check?
.3a7f63	f0 0f		beq $3a7f74	                BEQ is_imm_short        ; No: treat it as a short always
.3a7f65	4a		lsr a		                LSR A                   ; Move the flag bits right by 2 to match
.3a7f66	4a		lsr a		                LSR A                   ; the positions of the bits in the CPU status register
.3a7f67	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Otherwise, filter the mode bit we care about
.3a7f6b	d0 07		bne $3a7f74	                BNE is_imm_short        ; If it is set, immediate operation is short
.3a7f6d	22 02 81 3a	jsl $3a8102	                JSL DS_PR_OPERAND2      ; Print dddd
.3a7f71	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7f74	22 f8 80 3a	jsl $3a80f8	is_imm_short    JSL DS_PR_OPERAND1      ; Print dd
.3a7f78	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7f7b	22 02 81 3a	jsl $3a8102	is_abs          JSL DS_PR_OPERAND2      ; Print dddd
.3a7f7f	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7f82	a9 28		lda #$28	is_dp_ind_y     LDA #'('                ; Print (dd),Y
.3a7f84	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f87	22 f8 80 3a	jsl $3a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.3a7f8b	a9 29		lda #$29	                LDA #')'
.3a7f8d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f90	a9 2c		lda #$2c	                LDA #','
.3a7f92	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f95	a9 59		lda #$59	                LDA #'Y'
.3a7f97	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7f9a	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7f9d	22 f8 80 3a	jsl $3a80f8	is_dp_x         JSL DS_PR_OPERAND1      ; Print dd,X
.3a7fa1	a9 2c		lda #$2c	                LDA #','
.3a7fa3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fa6	a9 58		lda #$58	                LDA #'X'
.3a7fa8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fab	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7fae	22 f8 80 3a	jsl $3a80f8	is_dp_y         JSL DS_PR_OPERAND1      ; Print dd,Y
.3a7fb2	a9 2c		lda #$2c	                LDA #','
.3a7fb4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fb7	a9 59		lda #$59	                LDA #'Y'
.3a7fb9	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fbc	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7fbf	22 02 81 3a	jsl $3a8102	is_abs_y        JSL DS_PR_OPERAND2      ; Print dddd,Y
.3a7fc3	a9 2c		lda #$2c	                LDA #','
.3a7fc5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fc8	a9 59		lda #$59	                LDA #'Y'
.3a7fca	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fcd	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7fd0	22 02 81 3a	jsl $3a8102	is_abs_x        JSL DS_PR_OPERAND2      ; Print dddd,X
.3a7fd4	a9 2c		lda #$2c	                LDA #','
.3a7fd6	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fd9	a9 58		lda #$58	                LDA #'X'
.3a7fdb	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fde	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7fe1	a9 28		lda #$28	is_abs_x_id     LDA #'('
.3a7fe3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fe6	22 02 81 3a	jsl $3a8102	                JSL DS_PR_OPERAND2      ; Print (dddd,X)
.3a7fea	a9 2c		lda #$2c	                LDA #','
.3a7fec	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7fef	a9 58		lda #$58	                LDA #'X'
.3a7ff1	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ff4	a9 29		lda #$29	                LDA #')'
.3a7ff6	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ff9	4c f2 80	jmp $3a80f2	                JMP done_1
.3a7ffc	a9 28		lda #$28	is_dp_ind       LDA #'('
.3a7ffe	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8001	22 f8 80 3a	jsl $3a80f8	                JSL DS_PR_OPERAND1      ; Print (dd)
.3a8005	a9 29		lda #$29	                LDA #')'
.3a8007	20 18 00	jsr $3a0018	            JSR PRINTC
.3a800a	4c f2 80	jmp $3a80f2	                JMP done_1
.3a800d	a9 41		lda #$41	is_accumulator  LDA #'A'                ; Print A
.3a800f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8012	4c f6 80	jmp $3a80f6	                JMP done
.3a8015	22 f8 80 3a	jsl $3a80f8	is_stack_r      JSL DS_PR_OPERAND1      ; Print dd,S
.3a8019	a9 2c		lda #$2c	                LDA #','
.3a801b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a801e	a9 53		lda #$53	                LDA #'S'
.3a8020	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8023	4c f2 80	jmp $3a80f2	                JMP done_1
.3a8026	a9 5b		lda #$5b	is_dp_long      LDA #'['                ; [dd]
.3a8028	20 18 00	jsr $3a0018	            JSR PRINTC
.3a802b	22 f8 80 3a	jsl $3a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.3a802f	a9 5d		lda #$5d	                LDA #']'
.3a8031	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8034	4c f2 80	jmp $3a80f2	                JMP done_1
.3a8037	22 10 81 3a	jsl $3a8110	is_abs_long     JSL DS_PR_OPERAND3      ; Print dddddd
.3a803b	4c f6 80	jmp $3a80f6	                JMP done
.3a803e	a9 28		lda #$28	is_stack_r_y    LDA #'('                ; (dd,S),Y
.3a8040	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8043	22 f8 80 3a	jsl $3a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.3a8047	a9 2c		lda #$2c	                LDA #','
.3a8049	20 18 00	jsr $3a0018	            JSR PRINTC
.3a804c	a9 53		lda #$53	                LDA #'S'
.3a804e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8051	a9 29		lda #$29	                LDA #')'
.3a8053	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8056	a9 2c		lda #$2c	                LDA #','
.3a8058	20 18 00	jsr $3a0018	            JSR PRINTC
.3a805b	a9 59		lda #$59	                LDA #'Y'
.3a805d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8060	4c f2 80	jmp $3a80f2	                JMP done_1
.3a8063	a9 5b		lda #$5b	is_dp_y_long    LDA #'['                ; [dd],Y
.3a8065	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8068	22 f8 80 3a	jsl $3a80f8	                JSL DS_PR_OPERAND1      ; Print dd
.3a806c	a9 5d		lda #$5d	                LDA #']'
.3a806e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8071	a9 2c		lda #$2c	                LDA #','
.3a8073	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8076	a9 59		lda #$59	                LDA #'Y'
.3a8078	20 18 00	jsr $3a0018	            JSR PRINTC
.3a807b	4c f2 80	jmp $3a80f2	                JMP done_1
.3a807e	a0 02 00	ldy #$0002	is_pc_rel_long  LDY #2
.3a8081	80 03		bra $3a8086	                BRA do_pcrel
.3a8083	a0 01 00	ldy #$0001	is_pc_rel       LDY #1
.3a8086	22 76 81 3a	jsl $3a8176	do_pcrel        JSL DS_PR_PCREL
.3a808a	4c f6 80	jmp $3a80f6	                JMP done
.3a808d	4c f6 80	jmp $3a80f6	is_implied      JMP done
.3a8090	22 10 81 3a	jsl $3a8110	is_abs_x_long   JSL DS_PR_OPERAND3      ; Print dddddd
.3a8094	a9 2c		lda #$2c	                LDA #','
.3a8096	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8099	a9 58		lda #$58	                LDA #'X'
.3a809b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a809e	4c f6 80	jmp $3a80f6	                JMP done
.3a80a1	a9 23		lda #$23	is_xyc          LDA #'#'
.3a80a3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a80a6	8b		phb		                PHB                     ; Make sure the databank is pointed to our number
.3a80a7	a5 02		lda $087c	                LDA MCURSOR+2
.3a80a9	48		pha		                PHA
.3a80aa	ab		plb		                PLB
.3a80ab	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.3a80ad	e8		inx		                INX
.3a80ae	a0 01 00	ldy #$0001	                LDY #1
.3a80b1	22 e7 03 3a	jsl $3a03e7	                JSL PRINTH
.3a80b5	a9 2c		lda #$2c	                LDA #','
.3a80b7	20 18 00	jsr $3a0018	            JSR PRINTC
.3a80ba	a9 23		lda #$23	                LDA #'#'
.3a80bc	20 18 00	jsr $3a0018	            JSR PRINTC
.3a80bf	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.3a80c1	a0 01 00	ldy #$0001	                LDY #1
.3a80c4	22 e7 03 3a	jsl $3a03e7	                JSL PRINTH
.3a80c8	ab		plb		                PLB                     ; Get our old data bank back
.3a80c9	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a80cd	4c f2 80	jmp $3a80f2	                JMP done_1
.3a80d0	a9 28		lda #$28	is_abs_ind      LDA #'('
.3a80d2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a80d5	22 02 81 3a	jsl $3a8102	                JSL DS_PR_OPERAND2      ; Print (dddd)
.3a80d9	a9 29		lda #$29	                LDA #')'
.3a80db	20 18 00	jsr $3a0018	            JSR PRINTC
.3a80de	4c f2 80	jmp $3a80f2	                JMP done_1
.3a80e1	a9 5b		lda #$5b	is_abs_ind_long LDA #'['
.3a80e3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a80e6	22 02 81 3a	jsl $3a8102	                JSL DS_PR_OPERAND2      ; Print [dddd]
.3a80ea	a9 5d		lda #$5d	                LDA #']'
.3a80ec	20 18 00	jsr $3a0018	            JSR PRINTC
.3a80ef	4c f2 80	jmp $3a80f2	                JMP done_1
.3a80f2	22 25 87 3a	jsl $3a8725	done_1          JSL M_INC_CURSOR    ; Skip over a single byte operand
.3a80f6	28		plp		done            PLP
.3a80f7	6b		rtl		                RTL
.3a80f8					DS_PR_OPERAND1
.3a80f8	08		php		                PHP
.3a80f9	e2 20		sep #$20	            SEP #$20
.3a80fb	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a80fd	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a8100	28		plp		                PLP
.3a8101	6b		rtl		                RTL
.3a8102					DS_PR_OPERAND2
.3a8102	08		php		                PHP
.3a8103	c2 30		rep #$30	            REP #$30
.3a8105	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a8107	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a810a	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a810e	28		plp		                PLP
.3a810f	6b		rtl		                RTL
.3a8110					DS_PR_OPERAND3
.3a8110	08		php		                PHP
.3a8111	8b		phb		                PHB
.3a8112	0b		phd		                PHD
.3a8113	c2 30		rep #$30	            REP #$30
.3a8115	5a		phy		                PHY
.3a8116	08		php		            PHP
.3a8117	c2 20		rep #$20	            REP #$20
.3a8119	48		pha		            PHA
.3a811a	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a811d	5b		tcd		            TCD
.3a811e	68		pla		            PLA
.3a811f	28		plp		            PLP
.3a8120	08		php		            PHP
.3a8121	e2 20		sep #$20	            SEP #$20
.3a8123	48		pha		            PHA
.3a8124	a9 00		lda #$00	            LDA #`MTEMP
.3a8126	48		pha		            PHA
.3a8127	ab		plb		            PLB
.3a8128	68		pla		            PLA
.3a8129	28		plp		            PLP
.3a812a	e2 20		sep #$20	            SEP #$20
.3a812c	a0 00 00	ldy #$0000	                LDY #0
.3a812f	a7 00		lda [$087a]	copy_loop       LDA [MCURSOR]       ; Copy the address pointed to by MCURSOR
.3a8131	99 92 08	sta $0892,y	                STA MTEMP,Y         ; to MTEMP
.3a8134	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a8138	c8		iny		                INY
.3a8139	c0 03 00	cpy #$0003	                CPY #3
.3a813c	d0 f1		bne $3a812f	                BNE copy_loop
.3a813e	22 cf 81 3a	jsl $3a81cf	                JSL M_PR_ADDR       ; Print the address
.3a8142	c2 30		rep #$30	            REP #$30
.3a8144	7a		ply		                PLY
.3a8145	2b		pld		                PLD
.3a8146	ab		plb		                PLB
.3a8147	28		plp		                PLP
.3a8148	6b		rtl		                RTL
.3a8149					DS_PR_MNEMONIC
.3a8149	08		php		                PHP
.3a814a	8b		phb		                PHB
.3a814b	e2 20		sep #$20	            SEP #$20
.3a814d	c2 10		rep #$10	            REP #$10
.3a814f	08		php		            PHP
.3a8150	e2 20		sep #$20	            SEP #$20
.3a8152	48		pha		            PHA
.3a8153	a9 3a		lda #$3a	            LDA #`MN_ORA
.3a8155	48		pha		            PHA
.3a8156	ab		plb		            PLB
.3a8157	68		pla		            PLA
.3a8158	28		plp		            PLP
.3a8159	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a815c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a815f	e8		inx		                INX
.3a8160	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a8163	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8166	e8		inx		                INX
.3a8167	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a816a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a816d	e8		inx		                INX
.3a816e	a9 20		lda #$20	                LDA #' '            ; Print a space
.3a8170	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8173	ab		plb		                PLB
.3a8174	28		plp		                PLP
.3a8175	6b		rtl		                RTL
.3a8176					DS_PR_PCREL
.3a8176	08		php		                PHP
.3a8177	0b		phd		                PHD
.3a8178	08		php		            PHP
.3a8179	c2 20		rep #$20	            REP #$20
.3a817b	48		pha		            PHA
.3a817c	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a817f	5b		tcd		            TCD
.3a8180	68		pla		            PLA
.3a8181	28		plp		            PLP
.3a8182	e2 20		sep #$20	            SEP #$20
.3a8184	c0 02 00	cpy #$0002	                CPY #2
.3a8187	f0 14		beq $3a819d	                BEQ offset_2
.3a8189	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a818b	85 18		sta $0892	                STA MTEMP
.3a818d	30 06		bmi $3a8195	                BMI is_negative
.3a818f	64 19		stz $0893	                STZ MTEMP+1
.3a8191	64 1a		stz $0894	                STZ MTEMP+2
.3a8193	80 1e		bra $3a81b3	                BRA add_offset
.3a8195	a9 ff		lda #$ff	is_negative     LDA #$FF
.3a8197	85 19		sta $0893	                STA MTEMP+1
.3a8199	85 1a		sta $0894	                STA MTEMP+2
.3a819b	80 16		bra $3a81b3	                BRA add_offset
.3a819d	a7 00		lda [$087a]	offset_2        LDA [MCURSOR]
.3a819f	85 18		sta $0892	                STA MTEMP
.3a81a1	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a81a5	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a81a7	85 19		sta $0893	                STA MTEMP+1
.3a81a9	30 04		bmi $3a81af	                BMI is_negative2
.3a81ab	64 1a		stz $0894	                STZ MTEMP+2
.3a81ad	80 04		bra $3a81b3	                BRA add_offset
.3a81af	a9 ff		lda #$ff	is_negative2    LDA #$FF
.3a81b1	85 1a		sta $0894	                STA MTEMP+2
.3a81b3					add_offset
.3a81b3	c2 20		rep #$20	            REP #$20
.3a81b5	38		sec		                SEC             ; Add 1 to the offset
.3a81b6	a5 00		lda $087a	                LDA MCURSOR
.3a81b8	65 18		adc $0892	                ADC MTEMP
.3a81ba	85 18		sta $0892	                STA MTEMP
.3a81bc	e2 20		sep #$20	            SEP #$20
.3a81be	a5 02		lda $087c	                LDA MCURSOR+2
.3a81c0	65 1a		adc $0894	                ADC MTEMP+2
.3a81c2	85 1a		sta $0894	                STA MTEMP+2
.3a81c4	22 cf 81 3a	jsl $3a81cf	                JSL M_PR_ADDR
.3a81c8	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a81cc	2b		pld		                PLD
.3a81cd	28		plp		                PLP
.3a81ce	6b		rtl		                RTL
.3a81cf					M_PR_ADDR
.3a81cf	08		php		                PHP
.3a81d0	0b		phd		                PHD
.3a81d1	c2 20		rep #$20	            REP #$20
.3a81d3	48		pha		                PHA
.3a81d4	08		php		            PHP
.3a81d5	c2 20		rep #$20	            REP #$20
.3a81d7	48		pha		            PHA
.3a81d8	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a81db	5b		tcd		            TCD
.3a81dc	68		pla		            PLA
.3a81dd	28		plp		            PLP
.3a81de	e2 20		sep #$20	            SEP #$20
.3a81e0	a5 4c		lda $0894	                LDA MTEMP+2     ; Print the bank byte of the address
.3a81e2	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a81e5	e2 20		sep #$20	            SEP #$20
.3a81e7	a9 3a		lda #$3a	                LDA #':'
.3a81e9	20 18 00	jsr $3a0018	            JSR PRINTC
.3a81ec	c2 20		rep #$20	            REP #$20
.3a81ee	a5 4a		lda $0892	                LDA MTEMP       ; Print the lower 16-bits of the address
.3a81f0	20 74 04	jsr $3a0474	            JSR PRHEXW
.3a81f3	68		pla		                PLA
.3a81f4	2b		pld		                PLD
.3a81f5	28		plp		                PLP
.3a81f6	6b		rtl		                RTL
.3a81f7					MNEMONICS_TAB
.3a81f7					MN_ORA
>3a81f7	4f 52 41 00			            .null "ORA"
.3a81fb					MN_AND
>3a81fb	41 4e 44 00			            .null "AND"
.3a81ff					MN_EOR
>3a81ff	45 4f 52 00			            .null "EOR"
.3a8203					MN_ADC
>3a8203	41 44 43 00			            .null "ADC"
.3a8207					MN_STA
>3a8207	53 54 41 00			            .null "STA"
.3a820b					MN_LDA
>3a820b	4c 44 41 00			            .null "LDA"
.3a820f					MN_CMP
>3a820f	43 4d 50 00			            .null "CMP"
.3a8213					MN_SBC
>3a8213	53 42 43 00			            .null "SBC"
.3a8217					MN_ASL
>3a8217	41 53 4c 00			            .null "ASL"
.3a821b					MN_ROL
>3a821b	52 4f 4c 00			            .null "ROL"
.3a821f					MN_LSR
>3a821f	4c 53 52 00			            .null "LSR"
.3a8223					MN_ROR
>3a8223	52 4f 52 00			            .null "ROR"
.3a8227					MN_STX
>3a8227	53 54 58 00			            .null "STX"
.3a822b					MN_LDX
>3a822b	4c 44 58 00			            .null "LDX"
.3a822f					MN_DEC
>3a822f	44 45 43 00			            .null "DEC"
.3a8233					MN_INC
>3a8233	49 4e 43 00			            .null "INC"
.3a8237					MN_BIT
>3a8237	42 49 54 00			            .null "BIT"
.3a823b					MN_JMP
>3a823b	4a 4d 50 00			            .null "JMP"
.3a823f					MN_STY
>3a823f	53 54 59 00			            .null "STY"
.3a8243					MN_LDY
>3a8243	4c 44 59 00			            .null "LDY"
.3a8247					MN_CPY
>3a8247	43 50 59 00			            .null "CPY"
.3a824b					MN_CPX
>3a824b	43 50 58 00			            .null "CPX"
.3a824f					MN_BRK
>3a824f	42 52 4b 00			            .null "BRK"
.3a8253					MN_JSR
>3a8253	4a 53 52 00			            .null "JSR"
.3a8257					MN_RTI
>3a8257	52 54 49 00			            .null "RTI"
.3a825b					MN_RTS
>3a825b	52 54 53 00			            .null "RTS"
.3a825f					MN_PHP
>3a825f	50 48 50 00			            .null "PHP"
.3a8263					MN_PLP
>3a8263	50 4c 50 00			            .null "PLP"
.3a8267					MN_PHA
>3a8267	50 48 41 00			            .null "PHA"
.3a826b					MN_PLA
>3a826b	50 4c 41 00			            .null "PLA"
.3a826f					MN_DEY
>3a826f	44 45 59 00			            .null "DEY"
.3a8273					MN_TAY
>3a8273	54 41 59 00			            .null "TAY"
.3a8277					MN_INY
>3a8277	49 4e 59 00			            .null "INY"
.3a827b					MN_INX
>3a827b	49 4e 58 00			            .null "INX"
.3a827f					MN_CLC
>3a827f	43 4c 43 00			            .null "CLC"
.3a8283					MN_SEC
>3a8283	53 45 43 00			            .null "SEC"
.3a8287					MN_CLI
>3a8287	43 4c 49 00			            .null "CLI"
.3a828b					MN_SEI
>3a828b	53 45 49 00			            .null "SEI"
.3a828f					MN_TYA
>3a828f	54 59 41 00			            .null "TYA"
.3a8293					MN_CLV
>3a8293	43 4c 56 00			            .null "CLV"
.3a8297					MN_CLD
>3a8297	43 4c 44 00			            .null "CLD"
.3a829b					MN_SED
>3a829b	53 45 44 00			            .null "SED"
.3a829f					MN_TXA
>3a829f	54 58 41 00			            .null "TXA"
.3a82a3					MN_TXS
>3a82a3	54 58 53 00			            .null "TXS"
.3a82a7					MN_TAX
>3a82a7	54 41 58 00			            .null "TAX"
.3a82ab					MN_TSX
>3a82ab	54 53 58 00			            .null "TSX"
.3a82af					MN_DEX
>3a82af	44 45 58 00			            .null "DEX"
.3a82b3					MN_NOP
>3a82b3	4e 4f 50 00			            .null "NOP"
.3a82b7					MN_BPL
>3a82b7	42 50 4c 00			            .null "BPL"
.3a82bb					MN_BMI
>3a82bb	42 4d 49 00			            .null "BMI"
.3a82bf					MN_BVC
>3a82bf	42 56 43 00			            .null "BVC"
.3a82c3					MN_BVS
>3a82c3	42 56 53 00			            .null "BVS"
.3a82c7					MN_BCC
>3a82c7	42 43 43 00			            .null "BCC"
.3a82cb					MN_BCS
>3a82cb	42 43 53 00			            .null "BCS"
.3a82cf					MN_BNE
>3a82cf	42 4e 45 00			            .null "BNE"
.3a82d3					MN_BEQ
>3a82d3	42 45 51 00			            .null "BEQ"
.3a82d7					MN_TSB
>3a82d7	54 53 42 00			            .null "TSB"
.3a82db					MN_TRB
>3a82db	54 52 42 00			            .null "TRB"
.3a82df					MN_STZ
>3a82df	53 54 5a 00			            .null "STZ"
.3a82e3					MN_BRA
>3a82e3	42 52 41 00			            .null "BRA"
.3a82e7					MN_PHY
>3a82e7	50 48 59 00			            .null "PHY"
.3a82eb					MN_PLY
>3a82eb	50 4c 59 00			            .null "PLY"
.3a82ef					MN_PHX
>3a82ef	50 48 58 00			            .null "PHX"
.3a82f3					MN_PLX
>3a82f3	50 4c 58 00			            .null "PLX"
.3a82f7					MN_PHD
>3a82f7	50 48 44 00			            .null "PHD"
.3a82fb					MN_PLD
>3a82fb	50 4c 44 00			            .null "PLD"
.3a82ff					MN_PHK
>3a82ff	50 48 4b 00			            .null "PHK"
.3a8303					MN_RTL
>3a8303	52 54 4c 00			            .null "RTL"
.3a8307					MN_PHB
>3a8307	50 48 42 00			            .null "PHB"
.3a830b					MN_PLB
>3a830b	50 4c 42 00			            .null "PLB"
.3a830f					MN_WAI
>3a830f	57 41 49 00			            .null "WAI"
.3a8313					MN_XBA
>3a8313	58 42 41 00			            .null "XBA"
.3a8317					MN_TCS
>3a8317	54 43 53 00			            .null "TCS"
.3a831b					MN_TSC
>3a831b	54 53 43 00			            .null "TSC"
.3a831f					MN_TCD
>3a831f	54 43 44 00			            .null "TCD"
.3a8323					MN_TDC
>3a8323	54 44 43 00			            .null "TDC"
.3a8327					MN_TXY
>3a8327	54 58 59 00			            .null "TXY"
.3a832b					MN_TYX
>3a832b	54 59 58 00			            .null "TYX"
.3a832f					MN_STP
>3a832f	53 54 50 00			            .null "STP"
.3a8333					MN_XCE
>3a8333	58 43 45 00			            .null "XCE"
.3a8337					MN_COP
>3a8337	43 4f 50 00			            .null "COP"
.3a833b					MN_JSL
>3a833b	4a 53 4c 00			            .null "JSL"
.3a833f					MN_WDM
>3a833f	57 44 4d 00			            .null "WDM"
.3a8343					MN_PER
>3a8343	50 45 52 00			            .null "PER"
.3a8347					MN_BRL
>3a8347	42 52 4c 00			            .null "BRL"
.3a834b					MN_REP
>3a834b	52 45 50 00			            .null "REP"
.3a834f					MN_SEP
>3a834f	53 45 50 00			            .null "SEP"
.3a8353					MN_MVP
>3a8353	4d 56 50 00			            .null "MVP"
.3a8357					MN_MVN
>3a8357	4d 56 4e 00			            .null "MVN"
.3a835b					MN_PEI
>3a835b	50 45 49 00			            .null "PEI"
.3a835f					MN_PEA
>3a835f	50 45 41 00			            .null "PEA"
.3a8363					MN_JML
>3a8363	4a 4d 4c 00			            .null "JML"
>3a8367	00 00				            .byte 0, 0
>3a8369	4f 82 f7 81 37 83 f7 81		MNEMONIC_TAB    .word <>MN_BRK, <>MN_ORA, <>MN_COP, <>MN_ORA, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 0x
>3a8371	d7 82 f7 81 17 82 f7 81
>3a8379	5f 82 f7 81 17 82 f7 82		                .word <>MN_PHP, <>MN_ORA, <>MN_ASL, <>MN_PHD, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>3a8381	d7 82 f7 81 17 82 f7 81
>3a8389	b7 82 f7 81 f7 81 f7 81		                .word <>MN_BPL, <>MN_ORA, <>MN_ORA, <>MN_ORA, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 1x
>3a8391	db 82 f7 81 17 82 f7 81
>3a8399	7f 82 f7 81 33 82 17 83		                .word <>MN_CLC, <>MN_ORA, <>MN_INC, <>MN_TCS, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>3a83a1	db 82 f7 81 17 82 f7 81
>3a83a9	53 82 fb 81 3b 83 fb 81		                .word <>MN_JSR, <>MN_AND, <>MN_JSL, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 2x
>3a83b1	37 82 fb 81 1b 82 fb 81
>3a83b9	63 82 fb 81 1b 82 fb 82		                .word <>MN_PLP, <>MN_AND, <>MN_ROL, <>MN_PLD, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>3a83c1	37 82 fb 81 1b 82 fb 81
>3a83c9	bb 82 fb 81 fb 81 fb 81		                .word <>MN_BMI, <>MN_AND, <>MN_AND, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 3x
>3a83d1	37 82 fb 81 1b 82 fb 81
>3a83d9	83 82 fb 81 2f 82 1b 83		                .word <>MN_SEC, <>MN_AND, <>MN_DEC, <>MN_TSC, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>3a83e1	37 82 fb 81 1b 82 fb 81
>3a83e9	57 82 ff 81 3f 83 ff 81		                .word <>MN_RTI, <>MN_EOR, <>MN_WDM, <>MN_EOR, <>MN_MVP, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 4x
>3a83f1	53 83 ff 81 1f 82 ff 81
>3a83f9	67 82 ff 81 1f 82 ff 82		                .word <>MN_PHA, <>MN_EOR, <>MN_LSR, <>MN_PHK, <>MN_JMP, <>MN_EOR, <>MN_LSR, <>MN_EOR
>3a8401	3b 82 ff 81 1f 82 ff 81
>3a8409	bf 82 ff 81 ff 81 ff 81		                .word <>MN_BVC, <>MN_EOR, <>MN_EOR, <>MN_EOR, <>MN_MVN, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 5x
>3a8411	57 83 ff 81 1f 82 ff 81
>3a8419	87 82 ff 81 e7 82 1f 83		                .word <>MN_CLI, <>MN_EOR, <>MN_PHY, <>MN_TCD, <>MN_JML, <>MN_EOR, <>MN_LSR, <>MN_EOR
>3a8421	63 83 ff 81 1f 82 ff 81
>3a8429	5b 82 03 82 43 83 03 82		                .word <>MN_RTS, <>MN_ADC, <>MN_PER, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 6x
>3a8431	df 82 03 82 23 82 03 82
>3a8439	6b 82 03 82 23 82 03 83		                .word <>MN_PLA, <>MN_ADC, <>MN_ROR, <>MN_RTL, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>3a8441	3b 82 03 82 23 82 03 82
>3a8449	c3 82 03 82 03 82 03 82		                .word <>MN_BVS, <>MN_ADC, <>MN_ADC, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 7x
>3a8451	df 82 03 82 23 82 03 82
>3a8459	8b 82 03 82 eb 82 23 83		                .word <>MN_SEI, <>MN_ADC, <>MN_PLY, <>MN_TDC, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>3a8461	3b 82 03 82 23 82 03 82
>3a8469	e3 82 07 82 47 83 07 82		                .word <>MN_BRA, <>MN_STA, <>MN_BRL, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 8x
>3a8471	3f 82 07 82 27 82 07 82
>3a8479	6f 82 37 82 9f 82 07 83		                .word <>MN_DEY, <>MN_BIT, <>MN_TXA, <>MN_PHB, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA
>3a8481	3f 82 07 82 27 82 07 82
>3a8489	c7 82 07 82 07 82 07 82		                .word <>MN_BCC, <>MN_STA, <>MN_STA, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 9x
>3a8491	3f 82 07 82 27 82 07 82
>3a8499	8f 82 07 82 a3 82 27 83		                .word <>MN_TYA, <>MN_STA, <>MN_TXS, <>MN_TXY, <>MN_STZ, <>MN_STA, <>MN_STZ, <>MN_STA
>3a84a1	df 82 07 82 df 82 07 82
>3a84a9	43 82 0b 82 2b 82 0b 82		                .word <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Ax
>3a84b1	43 82 0b 82 2b 82 0b 82
>3a84b9	73 82 0b 82 a7 82 0b 83		                .word <>MN_TAY, <>MN_LDA, <>MN_TAX, <>MN_PLB, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>3a84c1	43 82 0b 82 2b 82 0b 82
>3a84c9	cb 82 0b 82 0b 82 0b 82		                .word <>MN_BCS, <>MN_LDA, <>MN_LDA, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Bx
>3a84d1	43 82 0b 82 2b 82 0b 82
>3a84d9	93 82 0b 82 ab 82 2b 83		                .word <>MN_CLV, <>MN_LDA, <>MN_TSX, <>MN_TYX, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>3a84e1	43 82 0b 82 2b 82 0b 82
>3a84e9	47 82 0f 82 4b 83 0f 82		                .word <>MN_CPY, <>MN_CMP, <>MN_REP, <>MN_CMP, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Cx
>3a84f1	47 82 0f 82 2f 82 0f 82
>3a84f9	77 82 0f 82 af 82 0f 83		                .word <>MN_INY, <>MN_CMP, <>MN_DEX, <>MN_WAI, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP
>3a8501	47 82 0f 82 2f 82 0f 82
>3a8509	cf 82 0f 82 0f 82 0f 82		                .word <>MN_BNE, <>MN_CMP, <>MN_CMP, <>MN_CMP, <>MN_PEI, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Dx
>3a8511	5b 83 0f 82 2f 82 0f 82
>3a8519	97 82 0f 82 ef 82 2f 83		                .word <>MN_CLD, <>MN_CMP, <>MN_PHX, <>MN_STP, <>MN_JML, <>MN_CMP, <>MN_DEC, <>MN_CMP
>3a8521	63 83 0f 82 2f 82 0f 82
>3a8529	4b 82 13 82 4f 83 13 82		                .word <>MN_CPX, <>MN_SBC, <>MN_SEP, <>MN_SBC, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Ex
>3a8531	4b 82 13 82 33 82 13 82
>3a8539	7b 82 13 82 b3 82 13 83		                .word <>MN_INX, <>MN_SBC, <>MN_NOP, <>MN_XBA, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC
>3a8541	4b 82 13 82 33 82 13 82
>3a8549	d3 82 13 82 13 82 13 82		                .word <>MN_BEQ, <>MN_SBC, <>MN_SBC, <>MN_SBC, <>MN_PEA, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Fx
>3a8551	5f 83 13 82 33 82 13 82
>3a8559	9b 82 13 82 f3 82 33 83		                .word <>MN_SED, <>MN_SBC, <>MN_PLX, <>MN_XCE, <>MN_JSR, <>MN_SBC, <>MN_INC, <>MN_SBC
>3a8561	53 82 13 82 33 82 13 82
>3a8569	00 00				                .word 0
>3a856b	13 00 02 09			ADDRESS_TAB     .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R                  ; 0x
>3a856f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8573	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a8577	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a857b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 1x
>3a857f	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8583	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>3a8587	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a858b	03 00 0b 09			                .byte ADDR_ABS, ADDR_DP_IND_X, ADDR_ABS_LONG, ADDR_SP_R                 ; 2x
>3a858f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8593	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a8597	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a859b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 3x
>3a859f	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a85a3	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>3a85a7	07 07 07 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a85ab	13 00 13 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMPLIED, ADDR_SP_R              ; 4x
>3a85af	14 01 01 0a			                .byte ADDR_XYC, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a85b3	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a85b7	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a85bb	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 5x
>3a85bf	14 05 05 0d			                .byte ADDR_XYC, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a85c3	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a85c7	0b 07 07 0b			                .byte ADDR_ABS_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_LONG
>3a85cb	13 00 16 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R          ; 6x
>3a85cf	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a85d3	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a85d7	15 03 03 0b			                .byte ADDR_ABS_IND, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a85db	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 7x
>3a85df	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a85e3	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a85e7	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a85eb	12 00 16 09			                .byte ADDR_PC_REL, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R           ; 8x
>3a85ef	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a85f3	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a85f7	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a85fb	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 9x
>3a85ff	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>3a8603	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a8607	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a860b	82 00 42 09			                .byte ADDR_IMM | OP_M_EFFECT, ADDR_DP_IND_X, ADDR_IMM | OP_X_EFFECT, ADDR_SP_R  ; Ax
>3a860f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8613	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a8617	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a861b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Bx
>3a861f	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>3a8623	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a8627	07 07 06 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_Y, ADDR_ABS_X_LONG
>3a862b	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Cx
>3a862f	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8633	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a8637	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a863b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Dx
>3a863f	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8643	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a8647	17 07 07 0e			                .byte ADDR_ABS_IND_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a864b	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Ex
>3a864f	01 01 01 0f			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_IND
>3a8653	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a8657	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a865b	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Fx
>3a865f	03 05 05 0d			                .byte ADDR_ABS, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8663	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a8667	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a866b	01 01 01 02 01 01 02 02		ADDR_LENGTH     .byte 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 0, 2, 2, 2, 2
>3a8673	00 01 01 03 01 01 03 01 02 01 01 00 02 02 02 02
.3a8683					ADDR_PATTERNS
>3a8683	41 00				            .null "A"
>3a8685	08				            .byte ADDR_ACC
>3a8686	64 64 3a 64 64 64 64 2c		            .null "dd:dddd,X"
>3a868e	58 00
>3a8690	0e				            .byte ADDR_ABS_X_LONG
>3a8691	64 64 3a 64 64 64 64 00		            .null "dd:dddd"
>3a8699	0b				            .byte ADDR_ABS_LONG
>3a869a	64 64 64 64 2c 58 00		            .null "dddd,X"
>3a86a1	07				            .byte ADDR_ABS_X
>3a86a2	64 64 64 64 2c 59 00		            .null "dddd,Y"
>3a86a9	06				            .byte ADDR_ABS_Y
>3a86aa	64 64 64 64 00			            .null "dddd"
>3a86af	03				            .byte ADDR_ABS
>3a86b0	64 64 2c 58 00			            .null "dd,X"
>3a86b5	05				            .byte ADDR_DP_X
>3a86b6	64 64 2c 59 00			            .null "dd,Y"
>3a86bb	11				            .byte ADDR_DP_Y
>3a86bc	64 64 2c 53 00			            .null "dd,S"
>3a86c1	09				            .byte ADDR_SP_R
>3a86c2	64 64 00			            .null "dd"
>3a86c5	01				            .byte ADDR_DP
>3a86c6	23 64 64 64 64 00		            .null "#dddd"
>3a86cc	c2				            .byte ADDR_IMM | OP_M_EFFECT | OP_X_EFFECT
>3a86cd	23 64 64 2c 23 64 64 00		            .null "#dd,#dd"
>3a86d5	14				            .byte ADDR_XYC
>3a86d6	23 64 64 00			            .null "#dd"
>3a86da	02				            .byte ADDR_IMM
>3a86db	28 64 64 2c 53 29 2c 59		            .null "(dd,S),Y"
>3a86e3	00
>3a86e4	0c				            .byte ADDR_SP_R_Y
>3a86e5	28 64 64 64 64 2c 58 29		            .null "(dddd,X)"
>3a86ed	00
>3a86ee	10				            .byte ADDR_ABS_X_ID
>3a86ef	28 64 64 64 64 29 00		            .null "(dddd)"
>3a86f6	10				            .byte ADDR_ABS_X_ID
>3a86f7	28 64 64 2c 58 29 00		            .null "(dd,X)"
>3a86fe	00				            .byte ADDR_DP_IND_X
>3a86ff	28 64 64 29 2c 59 00		            .null "(dd),Y"
>3a8706	04				            .byte ADDR_DP_IND_Y
>3a8707	28 64 64 29 00			            .null "(dd)"
>3a870c	0f				            .byte ADDR_DP_IND
>3a870d	5b 64 64 64 64 5d 00		            .null "[dddd]"
>3a8714	17				            .byte ADDR_ABS_IND_LONG
>3a8715	5b 64 64 5d 2c 59 00		            .null "[dd],Y"
>3a871c	0d				            .byte ADDR_DP_Y_LONG
>3a871d	5b 64 64 5d 00			            .null "[dd]"
>3a8722	0a				            .byte ADDR_DP_LONG
>3a8723	00 00				                .byte 0, 0

;******  Return to file: src\monitor.s

.3a8725					M_INC_CURSOR
.3a8725	08		php		                PHP
.3a8726	c2 20		rep #$20	            REP #$20
.3a8728	48		pha		                PHA
.3a8729	18		clc		                CLC
.3a872a	af 7a 08 00	lda $00087a	                LDA MCURSOR
.3a872e	69 01 00	adc #$0001	                ADC #1
.3a8731	8f 7a 08 00	sta $00087a	                STA MCURSOR
.3a8735	e2 20		sep #$20	            SEP #$20
.3a8737	af 7c 08 00	lda $00087c	                LDA MCURSOR+2
.3a873b	69 00		adc #$00	                ADC #0
.3a873d	8f 7c 08 00	sta $00087c	                STA MCURSOR+2
.3a8741	c2 20		rep #$20	            REP #$20
.3a8743	68		pla		                PLA
.3a8744	28		plp		                PLP
.3a8745	6b		rtl		                RTL
.3a8746					MPRINTB
.3a8746	08		php		                PHP
.3a8747	c2 10		rep #$10	            REP #$10
.3a8749	e2 20		sep #$20	            SEP #$20
.3a874b	da		phx		                PHX
.3a874c	a2 08 00	ldx #$0008	                LDX #8          ; Set number of bits to print to 8
.3a874f	0a		asl a		loop            ASL A           ; Shift MSB to C
.3a8750	b0 08		bcs $3a875a	                BCS is_one
.3a8752	48		pha		                PHA             ; Save value to print
.3a8753	a9 30		lda #$30	                LDA #'0'        ; Print '0'
.3a8755	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8758	80 06		bra $3a8760	                BRA continue
.3a875a	48		pha		is_one          PHA             ; Save value to print
.3a875b	a9 31		lda #$31	                LDA #'1'        ; Print '1'
.3a875d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8760	68		pla		continue        PLA
.3a8761	ca		dex		                DEX             ; Count down the bits to shift
.3a8762	d0 eb		bne $3a874f	                BNE loop        ; And try the next one if there is one
.3a8764	fa		plx		                PLX             ; Otherwise, return
.3a8765	28		plp		                PLP
.3a8766	6b		rtl		                RTL
.3a8767					MSKIPWS
.3a8767	08		php		            PHP
.3a8768	c2 20		rep #$20	            REP #$20
.3a876a	48		pha		            PHA
.3a876b	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a876e	5b		tcd		            TCD
.3a876f	68		pla		            PLA
.3a8770	28		plp		            PLP
.3a8771	e2 20		sep #$20	            SEP #$20
.3a8773	a7 32		lda [$087a]	loop            LDA [MCURSOR]       ; Check the current character
.3a8775	f0 0a		beq $3a8781	                BEQ done            ; If NULL, we're done
.3a8777	c9 20		cmp #$20	                CMP #' '            ; Is it a space?
.3a8779	d0 06		bne $3a8781	                BNE done            ; No: we're done
.3a877b	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR    ; Yes, try the next one
.3a877f	80 f2		bra $3a8773	                BRA loop
.3a8781	6b		rtl		done            RTL
.3a8782					MPARSESTR
.3a8782	08		php		                PHP
.3a8783	08		php		            PHP
.3a8784	c2 20		rep #$20	            REP #$20
.3a8786	48		pha		            PHA
.3a8787	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a878a	5b		tcd		            TCD
.3a878b	68		pla		            PLA
.3a878c	28		plp		            PLP
.3a878d	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR                ; Point to the first character of the name
.3a8791	22 67 87 3a	jsl $3a8767	                JSL MSKIPWS                     ; Skip white space
.3a8795	c2 30		rep #$30	            REP #$30
.3a8797	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.3a8799	c2 20		rep #$20	            REP #$20
.3a879b	29 ff 00	and #$00ff	                AND #$00FF
.3a879e	0a		asl a		                ASL A                           ; multiply it by forfour
.3a879f	0a		asl a		                ASL A
.3a87a0	aa		tax		                TAX                             ; ... to get the index to the argument
.3a87a1	a5 32		lda $087a	                LDA MCURSOR                     ; Set the argument to the address of the first byte
.3a87a3	95 0d		sta $0855,x	                STA MARG1,X
.3a87a5	a5 34		lda $087c	                LDA MCURSOR+2
.3a87a7	95 0f		sta $0857,x	                STA MARG1+2,X
.3a87a9	e2 20		sep #$20	            SEP #$20
.3a87ab	a7 32		lda [$087a]	loop            LDA [MCURSOR]                   ; Scan to the closing double quote
.3a87ad	f0 14		beq $3a87c3	                BEQ done                        ; If NULL... treat it as a closed argument
.3a87af	c9 22		cmp #$22	                CMP #CHAR_DQUOTE
.3a87b1	f0 06		beq $3a87b9	                BEQ close_string
.3a87b3	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a87b7	80 f2		bra $3a87ab	                BRA loop
.3a87b9	a9 00		lda #$00	close_string    LDA #0                          ; Write a NULL to close the string
.3a87bb	87 32		sta [$087a]	                STA [MCURSOR]
.3a87bd	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR                ; And point to the next byte
.3a87c1	e6 31		inc $0879	                INC MARG_LEN
.3a87c3	28		plp		done            PLP
.3a87c4	6b		rtl		                RTL
.3a87c5					MPARSEARG
.3a87c5	08		php		            PHP
.3a87c6	c2 20		rep #$20	            REP #$20
.3a87c8	48		pha		            PHA
.3a87c9	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a87cc	5b		tcd		            TCD
.3a87cd	68		pla		            PLA
.3a87ce	28		plp		            PLP
.3a87cf	e2 20		sep #$20	            SEP #$20
.3a87d1	64 4a		stz $0892	                STZ MTEMP                       ; Use MTEMP as a flag for having processed digits
.3a87d3	c2 20		rep #$20	            REP #$20
.3a87d5	64 50		stz $0898	                STZ MPARSEDNUM                  ; Clear the parsed number
.3a87d7	64 52		stz $089a	                STZ MPARSEDNUM+2
.3a87d9					pa_loop
.3a87d9	e2 20		sep #$20	            SEP #$20
.3a87db	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Get the current character
.3a87dd	c9 3a		cmp #$3a	                CMP #":"
.3a87df	f0 0d		beq $3a87ee	                BEQ pa_next_char                ; Ignore any colons
.3a87e1	20 0c 05	jsr $3a050c	            JSR ISHEX
.3a87e4	90 0e		bcc $3a87f4	                BCC finished_arg                ; No? We're done with this argument
.3a87e6	22 5d 7c 3a	jsl $3a7c5d	                JSL AS_SHIFT_HEX                ; Yes: shift it onto MPARSEDNUM
.3a87ea	a9 01		lda #$01	                LDA #1                          ; Flag that we've processed a character
.3a87ec	85 4a		sta $0892	                STA MTEMP
.3a87ee	22 25 87 3a	jsl $3a8725	pa_next_char    JSL M_INC_CURSOR                ; And try the next character
.3a87f2	80 e5		bra $3a87d9	                BRA pa_loop
.3a87f4	a5 4a		lda $0892	finished_arg    LDA MTEMP                       ; Check to see if we've processed any characters
.3a87f6	f0 16		beq $3a880e	                BEQ done                        ; No: we're done
.3a87f8	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.3a87fa	c2 20		rep #$20	            REP #$20
.3a87fc	29 ff 00	and #$00ff	                AND #$00FF
.3a87ff	0a		asl a		                ASL A                           ; multiply it by forfour
.3a8800	0a		asl a		                ASL A
.3a8801	aa		tax		                TAX                             ; ... to get the index to the argument
.3a8802	a5 50		lda $0898	                LDA MPARSEDNUM                  ; Copy the value to the argument slot
.3a8804	95 0d		sta $0855,x	                STA MARG1,X
.3a8806	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a8808	95 0f		sta $0857,x	                STA MARG1+2,X
.3a880a	e2 20		sep #$20	            SEP #$20
.3a880c	e6 31		inc $0879	                INC MARG_LEN                    ; And bump up the argument count
.3a880e	6b		rtl		done            RTL
.3a880f					MPARSEALLARG
.3a880f	e2 20		sep #$20	            SEP #$20
.3a8811	64 31		stz $0879	                STZ MARG_LEN                    ; Set the arg count to 0
.3a8813	22 67 87 3a	jsl $3a8767	parse_arg       JSL MSKIPWS                     ; Otherwise, skip white space
.3a8817	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Check the current character
.3a8819	f0 21		beq $3a883c	                BEQ done                        ; If it is NULL, we're done
.3a881b	c9 22		cmp #$22	                CMP #CHAR_DQUOTE                ; Is it a double-quote?
.3a881d	d0 06		bne $3a8825	                BNE regular_arg
.3a881f	22 82 87 3a	jsl $3a8782	                JSL MPARSESTR                   ; Yes: parse it as a string argument
.3a8823	80 0a		bra $3a882f	                BRA check_rest
.3a8825	22 c5 87 3a	jsl $3a87c5	regular_arg     JSL MPARSEARG                   ; Attempt to parse the argument
.3a8829	a5 31		lda $0879	                LDA MARG_LEN                    ; Check how many arguments we've processed
.3a882b	c9 09		cmp #$09	                CMP #9
.3a882d	b0 0d		bcs $3a883c	                BGE done                        ; If >=9, then we're done
.3a882f	a7 32		lda [$087a]	check_rest      LDA [MCURSOR]                   ; Check the current character
.3a8831	f0 09		beq $3a883c	                BEQ done                        ; If EOL: we're done
.3a8833	c9 20		cmp #$20	                CMP #' '
.3a8835	f0 dc		beq $3a8813	                BEQ parse_arg                   ; If space: try to process another argument
.3a8837	20 0c 05	jsr $3a050c	            JSR ISHEX
.3a883a	b0 d7		bcs $3a8813	                BCS parse_arg                   ; If hex digit: try to process another argument
.3a883c	6b		rtl		done            RTL
.3a883d					IMPARSE
.3a883d	08		php		                PHP
.3a883e	0b		phd		                PHD
.3a883f	08		php		            PHP
.3a8840	c2 20		rep #$20	            REP #$20
.3a8842	48		pha		            PHA
.3a8843	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a8846	5b		tcd		            TCD
.3a8847	68		pla		            PLA
.3a8848	28		plp		            PLP
.3a8849	c2 10		rep #$10	            REP #$10
.3a884b	e2 20		sep #$20	            SEP #$20
.3a884d	a2 31 00	ldx #$0031	                LDX #MARG_LEN - MONITOR_VARS    ; Clear the monitor command line parameters
.3a8850	74 00		stz $0848,x	clear_command   STZ MONITOR_VARS,X
.3a8852	ca		dex		                DEX
.3a8853	d0 fb		bne $3a8850	                BNE clear_command
.3a8855	a9 00		lda #$00	                LDA #`INPUTBUF                  ; Point the command parser to the input buffer
.3a8857	85 02		sta $084a	                STA MCMDADDR+2
.3a8859	85 34		sta $087c	                STA MCURSOR+2                   ; And point MCURSOR there too
.3a885b	c2 20		rep #$20	            REP #$20
.3a885d	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF
.3a8860	85 00		sta $0848	                STA MCMDADDR
.3a8862	85 32		sta $087a	                STA MCURSOR
.3a8864	e2 20		sep #$20	            SEP #$20
.3a8866	22 67 87 3a	jsl $3a8767	                JSL MSKIPWS                     ; Skip to the first letter of the command
.3a886a	c9 00		cmp #$00	                CMP #0                          ; Is the current character a NULL?
.3a886c	f0 38		beq $3a88a6	                BEQ done                        ; Yes: there's no command here
.3a886e	c2 20		rep #$20	            REP #$20
.3a8870	a5 32		lda $087a	                LDA MCURSOR
.3a8872	85 08		sta $0850	                STA MCMD
.3a8874	e2 20		sep #$20	            SEP #$20
.3a8876	a5 34		lda $087c	                LDA MCURSOR+2
.3a8878	85 0a		sta $0852	                STA MCMD+2
.3a887a	a2 01 00	ldx #$0001	                LDX #1
.3a887d	22 25 87 3a	jsl $3a8725	cmd_loop        JSL M_INC_CURSOR                ; Move to the next character
.3a8881	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; What is that character?
.3a8883	d0 06		bne $3a888b	                BNE cmd_space                   ; If not NULL: check for a space
.3a8885	86 0b		stx $0853	no_arguments    STX MCMD_LEN                    ; If NULL: Save the length of the command
.3a8887	64 31		stz $0879	                STZ MARG_LEN                    ; ... And the fact there are no arguments
.3a8889	80 1b		bra $3a88a6	                BRA done                        ; ... And return
.3a888b	c9 20		cmp #$20	cmd_space       CMP #' '                        ; Is it a space?
.3a888d	f0 03		beq $3a8892	                BEQ found_cmd                   ; Yes: save the length
.3a888f	e8		inx		                INX                             ; No: go to the next character
.3a8890	80 eb		bra $3a887d	                BRA cmd_loop
.3a8892	86 0b		stx $0853	found_cmd       STX MCMD_LEN                    ; Save the length of the command
.3a8894	a9 00		lda #$00	                LDA #0
.3a8896	87 32		sta [$087a]	                STA [MCURSOR]                   ; Write a NULL to the end of the command
.3a8898	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR                ; And skip to the next character
.3a889c	a7 08		lda [$0850]	                LDA [MCMD]                      ; Check the command
.3a889e	c9 41		cmp #$41	                CMP #'A'
.3a88a0	f0 07		beq $3a88a9	                BEQ parse_asm                   ; If 'A', parse the line for the assemble command
.3a88a2	22 0f 88 3a	jsl $3a880f	                JSL MPARSEALLARG
.3a88a6	2b		pld		done            PLD
.3a88a7	28		plp		                PLP
.3a88a8	6b		rtl		                RTL
.3a88a9	22 67 87 3a	jsl $3a8767	parse_asm       JSL MSKIPWS                     ; Skip to the first letter of the address
.3a88ad	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a88af	f0 f5		beq $3a88a6	                BEQ done                        ; Exit if we got the end-of-line
.3a88b1	22 c5 87 3a	jsl $3a87c5	                JSL MPARSEARG                   ; Parse the first argument as the target address
.3a88b5	22 67 87 3a	jsl $3a8767	                JSL MSKIPWS                     ; Skip to the first letter of the mnemonic
.3a88b9	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a88bb	f0 e9		beq $3a88a6	                BEQ done                        ; Exit if we got the end-of-line
.3a88bd	c2 20		rep #$20	            REP #$20
.3a88bf	a5 32		lda $087a	                LDA MCURSOR                     ; Save pointer to the start of the mnemonic
.3a88c1	85 11		sta $0859	                STA MARG2
.3a88c3	e2 20		sep #$20	            SEP #$20
.3a88c5	a5 34		lda $087c	                LDA MCURSOR+2
.3a88c7	85 13		sta $085b	                STA MARG2+2
.3a88c9	22 25 87 3a	jsl $3a8725	asm_find_sp     JSL M_INC_CURSOR                ; Find the space at the end of the mnemonic
.3a88cd	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a88cf	f0 26		beq $3a88f7	                BEQ asm_no_operand              ; If EOL: we have an instruction but no operand
.3a88d1	c9 20		cmp #$20	                CMP #' '
.3a88d3	d0 f4		bne $3a88c9	                BNE asm_find_sp
.3a88d5	a9 00		lda #$00	                LDA #0
.3a88d7	87 32		sta [$087a]	                STA [MCURSOR]                   ; Null terminate the mnemonic
.3a88d9	e6 31		inc $0879	                INC MARG_LEN                    ; Count the mnemonic as an argument
.3a88db	22 25 87 3a	jsl $3a8725	                JSL M_INC_CURSOR
.3a88df	22 67 87 3a	jsl $3a8767	                JSL MSKIPWS                     ; Skip to the addressing mode
.3a88e3	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a88e5	f0 bf		beq $3a88a6	                BEQ done                        ; If EOL: we're done
.3a88e7	c2 20		rep #$20	            REP #$20
.3a88e9	a5 32		lda $087a	                LDA MCURSOR                     ; Set the pointer to the addressing mode
.3a88eb	85 15		sta $085d	                STA MARG3
.3a88ed	e2 20		sep #$20	            SEP #$20
.3a88ef	a5 34		lda $087c	                LDA MCURSOR+2
.3a88f1	85 17		sta $085f	                STA MARG3+2
.3a88f3	e6 31		inc $0879	                INC MARG_LEN                    ; And count it as the second argument
.3a88f5	80 af		bra $3a88a6	                BRA done                        ; and return
.3a88f7	e6 31		inc $0879	asm_no_operand  INC MARG_LEN                    ; Increment the argument count
.3a88f9	80 ab		bra $3a88a6	                BRA done                        ; And quit
.3a88fb					IMLOAD
.3a88fb	08		php		                PHP
.3a88fc	c2 10		rep #$10	            REP #$10
.3a88fe	e2 20		sep #$20	            SEP #$20
.3a8900	a5 31		lda $0879	                LDA MARG_LEN
.3a8902	d0 0f		bne $3a8913	                BNE get_arguments
.3a8904	a2 f1 89	ldx #$89f1	bad_arguments   LDX #<>MERRARGS                 ; Print bad arguments error
.3a8907	a9 3a		lda #$3a	                LDA #`MERRARGS
.3a8909	48		pha		                PHA
.3a890a	ab		plb		                PLB
.3a890b	20 64 04	jsr $3a0464	            JSR PRINTS
.3a890e	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a8911	80 61		bra $3a8974	                BRA done
.3a8913					get_arguments
.3a8913	c2 20		rep #$20	            REP #$20
.3a8915	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.3a8917	8f 23 08 00	sta $000823	                STA ARGUMENT1
.3a891b	a5 0f		lda $0857	                LDA MARG1+2
.3a891d	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.3a8921	20 e4 6a	jsr $3a6ae4	            JSR SETFILEDESC
.3a8924	e2 20		sep #$20	            SEP #$20
.3a8926	a5 31		lda $0879	                LDA MARG_LEN
.3a8928	c9 01		cmp #$01	                CMP #1
.3a892a	d0 0f		bne $3a893b	                BNE get_dest
.3a892c	c2 20		rep #$20	            REP #$20
.3a892e	a9 ff ff	lda #$ffff	                LDA #$FFFF                      ; Destination address not provided...
.3a8931	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR              ; ... set it to something sane
.3a8935	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a8939	80 0e		bra $3a8949	                BRA try_load
.3a893b					get_dest
.3a893b	c2 20		rep #$20	            REP #$20
.3a893d	a5 11		lda $0859	                LDA MARG2                       ; Set the destination address from the arguments
.3a893f	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a8943	a5 13		lda $085b	                LDA MARG2+2
.3a8945	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a8949	22 18 11 00	jsl $001118	try_load        JSL FK_LOAD                     ; Try to load the file
.3a894d	b0 25		bcs $3a8974	                BCS done
.3a894f					error
.3a894f	e2 20		sep #$20	            SEP #$20
.3a8951	a2 17 8a	ldx #$8a17	                LDX #<>MCANTLOAD                ; Print bad arguments error
.3a8954	a9 3a		lda #$3a	                LDA #`MCANTLOAD
.3a8956	48		pha		                PHA
.3a8957	ab		plb		                PLB
.3a8958	20 64 04	jsr $3a0464	            JSR PRINTS
.3a895b	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.3a895f	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a8962	a9 20		lda #$20	                LDA #' '
.3a8964	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8967	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.3a896b	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a896e	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a8971	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a8974	28		plp		done            PLP
.3a8975	6b		rtl		                RTL
.3a8976					IMSAVE
.3a8976	8b		phb		                PHB
.3a8977	08		php		                PHP
.3a8978	c2 10		rep #$10	            REP #$10
.3a897a	e2 20		sep #$20	            SEP #$20
.3a897c	a5 31		lda $0879	                LDA MARG_LEN
.3a897e	c9 03		cmp #$03	                CMP #3
.3a8980	f0 0f		beq $3a8991	                BEQ get_arguments
.3a8982	a2 f1 89	ldx #$89f1	                LDX #<>MERRARGS                 ; Print bad arguments error
.3a8985	a9 3a		lda #$3a	                LDA #`MERRARGS
.3a8987	48		pha		                PHA
.3a8988	ab		plb		                PLB
.3a8989	20 64 04	jsr $3a0464	            JSR PRINTS
.3a898c	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a898f	80 54		bra $3a89e5	                BRA done
.3a8991					get_arguments
.3a8991	c2 20		rep #$20	            REP #$20
.3a8993	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.3a8995	8f 23 08 00	sta $000823	                STA ARGUMENT1
.3a8999	a5 0f		lda $0857	                LDA MARG1+2
.3a899b	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.3a899f	20 e4 6a	jsr $3a6ae4	            JSR SETFILEDESC
.3a89a2	a5 11		lda $0859	                LDA MARG2                       ; Set the starting address
.3a89a4	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a89a8	a5 13		lda $085b	                LDA MARG2+2
.3a89aa	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a89ae	a5 15		lda $085d	                LDA MARG3                       ; Set the ending address
.3a89b0	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a89b4	a5 17		lda $085f	                LDA MARG3+2
.3a89b6	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a89ba	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                     ; Save the data
.3a89be	b0 25		bcs $3a89e5	                BCS done
.3a89c0					error
.3a89c0	e2 20		sep #$20	            SEP #$20
.3a89c2	a2 01 8a	ldx #$8a01	                LDX #<>MCANTSAVE                ; Print bad arguments error
.3a89c5	a9 3a		lda #$3a	                LDA #`MCANTSAVE
.3a89c7	48		pha		                PHA
.3a89c8	ab		plb		                PLB
.3a89c9	20 64 04	jsr $3a0464	            JSR PRINTS
.3a89cc	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.3a89d0	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a89d3	a9 20		lda #$20	                LDA #' '
.3a89d5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a89d8	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.3a89dc	20 8e 04	jsr $3a048e	            JSR PRHEXB
.3a89df	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a89e2	20 d7 03	jsr $3a03d7	            JSR PRINTCR
.3a89e5	28		plp		done            PLP
.3a89e6	ab		plb		                PLB
.3a89e7	6b		rtl		                RTL
.3a89e8	5c bf 27 3a	jmp $3a27bf	IMEXIT          JML INTERACT
.3a89ec	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.3a89ed	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.3a89ee	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.3a89ef	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.3a89f0	00		brk #		IMDOS           BRK ; Execute DOS command
.3a89f1					MMESSAGES
>3a89f1	42 61 64 20 61 72 67 75		MERRARGS        .null "Bad arguments",CHAR_CR,CHAR_CR
>3a89f9	6d 65 6e 74 73 0d 0d 00
>3a8a01	55 6e 61 62 6c 65 20 74		MCANTSAVE       .null "Unable to save file: "
>3a8a09	6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a8a17	55 6e 61 62 6c 65 20 74		MCANTLOAD       .null "Unable to load file: "
>3a8a1f	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00
>3a8a2d	0d 20 20 50 43 20 20 20		mregisters_msg  .null $0D,"  PC     A    X    Y    SP   DBR DP   NVMXDIZC",CHAR_CR
>3a8a35	20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>3a8a45	20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>3a8a55	56 4d 58 44 49 5a 43 0d 00
>3a8a5e	41 43 44 46 47 4a 48 4c		MCOMMANDS       .null "ACDFGJHLMR;STVWX>?"
>3a8a66	4d 52 3b 53 54 56 57 58 3e 3f 00

;******  Return to file: src\basic816.s

.3a8a71	18		clc		START       CLC                 ; Go to native mode
.3a8a72	fb		xce		            XCE
.3a8a73	08		php		            PHP
.3a8a74	c2 20		rep #$20	            REP #$20
.3a8a76	48		pha		            PHA
.3a8a77	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a8a7a	5b		tcd		            TCD
.3a8a7b	68		pla		            PLA
.3a8a7c	28		plp		            PLP
.3a8a7d	08		php		            PHP
.3a8a7e	e2 20		sep #$20	            SEP #$20
.3a8a80	48		pha		            PHA
.3a8a81	a9 00		lda #$00	            LDA #BASIC_BANK
.3a8a83	48		pha		            PHA
.3a8a84	ab		plb		            PLB
.3a8a85	68		pla		            PLA
.3a8a86	28		plp		            PLP
.3a8a87	c2 30		rep #$30	            REP #$30
.3a8a89	20 b0 8a	jsr $3a8ab0	            JSR INITBASIC
.3a8a8c	a9 ff fe	lda #$feff	            LDA #STACK_END      ; Set the system stack
.3a8a8f	1b		tcs		            TCS
.3a8a90	08		php		            PHP
.3a8a91	e2 20		sep #$20	            SEP #$20
.3a8a93	48		pha		            PHA
.3a8a94	a9 3a		lda #$3a	            LDA #`GREET
.3a8a96	48		pha		            PHA
.3a8a97	ab		plb		            PLB
.3a8a98	68		pla		            PLA
.3a8a99	28		plp		            PLP
.3a8a9a	a2 77 d2	ldx #$d277	            LDX #<>GREET
.3a8a9d	20 64 04	jsr $3a0464	            JSR PRINTS
.3a8aa0	08		php		            PHP
.3a8aa1	e2 20		sep #$20	            SEP #$20
.3a8aa3	48		pha		            PHA
.3a8aa4	a9 00		lda #$00	            LDA #BASIC_BANK
.3a8aa6	48		pha		            PHA
.3a8aa7	ab		plb		            PLB
.3a8aa8	68		pla		            PLA
.3a8aa9	28		plp		            PLP
.3a8aaa	4c bf 27	jmp $3a27bf	            JMP INTERACT        ; Start accepting input from the user
.3a8aad	4c ad 8a	jmp $3a8aad	WAIT        JMP WAIT
.3a8ab0					INITBASIC
.3a8ab0	08		php		            PHP
.3a8ab1	20 34 03	jsr $3a0334	            JSR INITIO
.3a8ab4	20 53 50	jsr $3a5053	            JSR CMD_NEW
.3a8ab7	28		plp		            PLP
.3a8ab8	60		rts		            RTS
>3ad277	43 32 35 36 20 46 6f 65		GREET       .text "C256 Foenix BASIC816 "
>3ad27f	6e 69 78 20 42 41 53 49 43 38 31 36 20

;******  Processing file: src\version.s

>3ad28c	76 30 2e 32 2e 30 2d 61		.text "v0.2.0-alpha+409"
>3ad294	6c 70 68 61 2b 34 30 39

;******  Return to file: src\basic816.s

>3ad29c	0d 00				            .byte 13,0

;******  End of listing
