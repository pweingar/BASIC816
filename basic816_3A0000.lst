
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D SYSTEM=2 -D C256_SKU=1 -D UARTSUPPORT= -D UNITTEST=0 -D TRACE_LEVEL=0 --long-address --flat -b --m65816 --intel-hex -o basic816_3A0000.hex --list=basic816_3A0000.lst --labels=basic816_3A0000.lbl src\basic816.s
; Tue Apr 06 16:08:38 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					SYSTEM=2
=1					C256_SKU=1
=					UARTSUPPORT=
=0					UNITTEST=0
=0					TRACE_LEVEL=0

;******  Processing input file: src\basic816.s


;******  Processing file: src\constants.s

=2					SYSTEM_C256 = 2         ; C256 Foenix
=1					SYSTEM_C64 = 1          ; Commodore 64 with SuperCPU
=$03					CHAR_CTRL_C = $03       ; CTRL-C: used as a program interrupt key
=$07					CHAR_BELL = $07         ; Ring the console bell
=$08					CHAR_BS = $08           ; Backspace
=$09					CHAR_TAB = $09          ; TAB
=$0a					CHAR_LF = $0A           ; Linefeed
=$0d					CHAR_CR = $0D           ; Carriage Return
=$0f					CHAR_INS = $0F          ; Insert
=$1b					CHAR_ESC = $1B          ; Escape
=$22					CHAR_DQUOTE = $22       ; Double quote
=$20					CHAR_SP = $20           ; Space
=$7f					CHAR_DEL = $7F          ; Delete
=5					ARGUMENT_SIZE = 5       ; Number of bytes in an argument
=8					VAR_NAME_SIZE = 8       ; Maximum number of characters in a variable name
=0					TYPE_INTEGER = 0        ; 32-bit integer
=1					TYPE_FLOAT = 1          ; Single-precision floating point
=2					TYPE_STRING = 2         ; ASCII string
=$80					TYPE_ARR_INTEGER = $80  ; Array of 32-bit integers
=$81					TYPE_ARR_FLOAT = $81    ; Array of 32-bit floats
=$82					TYPE_ARR_STRING = $82   ; Array of strings
=$7f					TYPE_BINDING = $7F      ; A variable name binding
=$ff					TYPE_NAV = $FF          ; Not-A-Value
=0					ERR_OK = 0              ; No error
=1					ERR_BREAK = 1           ; The user pressed an interrupt key
=2					ERR_SYNTAX = 2          ; A syntax error was found on the current line
=3					ERR_MEMORY = 3          ; Out of memory
=4					ERR_TYPE = 4            ; Type mismatch error
=5					ERR_NOTFOUND = 5        ; Variable not found error
=6					ERR_NOLINE = 6          ; Line number not found
=7					ERR_STACKUNDER = 7      ; Stack underflow error
=8					ERR_STACKOVER = 8       ; Stack overflow error
=9					ERR_RANGE = 9           ; Out-of-range error
=10					ERR_ARGUMENT = 10       ; Bad argument error
=11					ERR_NOFILE = 11         ; File not found error
=12					ERR_NAN = 12            ; Floating point math resulted in something that is not a number
=13					ERR_OVERFLOW = 13       ; Math operation overflowed
=14					ERR_UNDERFLOW = 14      ; Math operation underflowed
=15					ERR_DIV0 = 15           ; Math operation involved a division by zero
=16					ERR_DIRECTORY = 16      ; Error reading the directory
=17					ERR_LOAD = 17           ; Could not load file
=18					ERR_SAVE = 18           ; Could not save a file
=19					ERR_DELETE = 19         ; Could not delete a file
=20					ERR_FILENOTFOUND = 20   ; Could not find the file
=21					ERR_DIRNOTWRITE = 21    ; Could not update the directory entry
=22					ERR_NOTCOPIED = 22      ; Could not copy the file
=23					ERR_DOMAIN = 23         ; Mathematical functions domain error

;******  Return to file: src\basic816.s


;******  Processing file: src\memorymap.s


;******  Processing file: src\C256/mmap_c256.s

=1					SYS_C256_FMX = 1        ; System SKU for C256 Foenix FMX
=2					SYS_C256_USER = 2       ; System SKU for C256 Foenix User

;******  Processing file: src\C256/page_00_inc.s

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Unsigned divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 0 Divisor ex B in A/B
=$000114				D0_RESULT        = $000114 ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Signed divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 1 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/int_math_defs.s

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B
=$af1400				SIGNED32_MULT_A     = $AF1400
=$af1404				SIGNED32_MULT_B     = $AF1404
=$af1408				SIGNED32_MULT_OUT   = $AF1408

;******  Return to file: src\C256/mmap_c256.s


;******  Processing file: src\C256/vicky_def.s

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				GAMMA_CTRL_REG          = $AF0002
=$01					GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02					GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08					GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10					HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af0900				VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01					VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02					VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901				VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902				VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903				VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80					VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000

;******  Processing file: src\C256/VKYII_CFP9553_BITMAP_def.s

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_TILEMAP_def.s

=$01					TILE_Enable             = $01
=0					TILEMAP_CONTROL         = 0             ; Offset to a tile map's control register
=1					TILEMAP_START_ADDY      = 1             ; Offset to a tile map's address
=4					TILEMAP_TOTAL_X         = 4             ; Offset to a tile map's width
=6					TILEMAP_TOTAL_Y         = 6             ; Offset to a tile map's height
=8					TILEMAP_WINDOW_X        = 8             ; Offset to a tile map's X position
=10					TILEMAP_WINDOW_Y        = 10            ; Offset to a tile map's Y position
=1					TILEMAP_VISIBLE         = 1             ; Tile map is visible flag
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=2					TILESET_ADDY_H          = 2             ; Offset to high byte of tile set address
=3					TILESET_ADDY_CFG        = 3             ; Offset to the tile set address configuration
=$08					TILESET_SQUARE_256      = $08
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SDMA_def.s

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_VDMA_def.s

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$10					VDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					VDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\C256/vicky_def.s


;******  Processing file: src\C256/VKYII_CFP9553_SPRITE_def.s

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\C256/vicky_def.s


;******  Return to file: src\C256/mmap_c256.s

=$00					BASIC_BANK = $00            ; Memory bank for default purposes
=$004c00				IOBUF = $004C00             ; A buffer for I/O operations
=$004d00				ARRIDXBUF = $004D00         ; The array index buffer used for array references
=$004e00				TEMPBUF = $004E00           ; Temporary buffer for string processing, etc.
=$004f00				INPUTBUF = $004F00          ; Starting address of the line input buffer (one page)
=$005000				RETURN_BOT = $005000        ; Starting address of the return stack
=$005fff				RETURN_TOP = $005FFF        ; Ending address of the return stack
=$006000				ARGUMENT_BOT = $006000      ; Starting address of the argument stack
=$006fff				ARGUMENT_TOP = $006FFF      ; Ending address of the argument stack
=$007000				OPERATOR_BOT = $007000      ; Starting address of the operator stack
=$007fff				OPERATOR_TOP = $007FFF      ; Ending address of the operator stack
=$b00000				VRAM = $B00000              ; Start of video RAM
=$010000				LOADBLOCK = $010000         ; File loading will start here
=$360000				BASIC_BOT := $360000         ; Starting point for BASIC programs
=$37ffff				HEAP_TOP := $37FFFF          ; Starting point of the heap

;******  Return to file: src\memorymap.s

=$00ffe6				VBRK = $00FFE6          ; Vector for the native-mode BRK vector
=$3ad000				DATA_BLOCK = *
=$000800				GLOBAL_VARS = *
>0800					BIP         .dword ?    ; Pointer to the current byte in the current BASIC program
>0804					BIPPREV     .dword ?    ; Pointer to the previous bytein the current BASIC program
>0808					INDEX       .dword ?    ; A temporary pointer
>080c					SCRATCH     .dword ?    ; A temporary scratch variable
>0810					SCRATCH2    .dword ?    ; A temporary scratch variable
>0814					            .word  ?	; Need a few more bits for BCD conversion
>0816					STRPTR      .dword ?    ; A temporary pointer for strings
>081a					CURLINE     .dword ?    ; Pointer to the current input line needing tokenization
>081e					CURTOKLEN   .byte ?     ; Length of the text of the current token
>081f					ARGUMENTSP  .word ?     ; Pointer to the top of the argument stack
>0821					OPERATORSP  .word ?     ; Pointer to the top of the operator stack
>0823					ARGUMENT1   .dword ?    ; Argument 1 for expression calculations
>0827					ARGTYPE1    .byte ?     ; Type code for argument 1 (integer, float, string)
>0828					SIGN1       .byte ?     ; Temporary sign marker for argument 1
>0829					ARGUMENT2   .dword ?    ; Argument 2 for expression calculations
>082d					ARGTYPE2    .byte ?     ; Type code for argument 2 (integer, float, string)
>082e					SIGN2       .byte ?     ; Temporary sign marker for argument 1
>082f					JMP16PTR    .word ?     ; Pointer for 16-bit indirect jumps (within BASIC816's code base)
>0831					GOSUBDEPTH  .word ?     ; Number of GOSUBs on the stack
>0833					RETURNSP    .word ?     ; Pointer to the top of the return stack
>0835					SKIPNEST    .byte ?     ; Flag to indicate if token seeking should respect nesting (MSB set if so)
>0836					NESTING     .byte ?     ; Counter of the depth of lexical nesting for FOR/NEXT, DO/LOOP
>0837					TARGETTOK   .byte ?     ; When searching for a token, TARGETTOK is the token to find
>0838					DATABIP     .dword ?    ; Pointer to the next data element for READ statements
>083c					DATALINE    .dword ?    ; Pointer to the current line for a DATA statement
>0840					SAVEBIP     .dword ?    ; Spot to save BIP temporarily
>0844					SAVELINE    .dword ?    ; Spot to save CURLINE temporarily
=$000848				MONITOR_VARS = *
>0848					MCMDADDR    .long ?     ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
>084b					MCMP_TEXT   .long ?     ;3 Bytes Address of symbol being evaluated for COMPARE routine
>084e					MCMP_LEN    .word ?     ;2 Bytes Length of symbol being evaluated for COMPARE routine
>0850					MCMD        .long ?     ;3 Bytes Address of the current command/function string
>0853					MCMD_LEN    .word ?     ;2 Bytes Length of the current command/function string
>0855					MARG1       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command
>0859					MARG2       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>085d					MARG3       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0861					MARG4       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0865					MARG5       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0869					MARG6       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>086d					MARG7       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0871					MARG8       .dword ?    ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
>0875					MARG9       .dword ?    ;4 Bytes First command argument.
>0879					MARG_LEN    .byte ?     ;1 Byte count of the number of arguments passed
>087a					MCURSOR     .dword ?    ;4 Bytes Pointer to the current memory location for disassembly, memory dump, etc.
>087e					MLINEBUF    .fill 17    ;17 Byte buffer for dumping memory (TODO: could be moved to a general string scratch area)
>088f					MCOUNT      .long ?     ;2 Byte counter
>0892					MTEMP       .dword ?    ;4 Bytes of temporary space
>0896					MCPUSTAT    .byte ?     ;1 Byte to represent what the disassembler thinks the processor MX bits are
>0897					MADDR_MODE  .byte ?     ;1 Byte address mode found by the assembler
>0898					MPARSEDNUM  .dword ?    ;4 Bytes to store a parsed number
>089c					MMNEMONIC   .word ?     ;2 Byte address of mnemonic found by the assembler
>089e					MTEMPPTR    .dword ?    ;4 Byte temporary pointer
>08a2					MJUMPINST   .byte ?     ;1 Byte JSL opcode
>08a3					MJUMPADDR   .long ?     ;3 Byte address for JSL
=$000823				MANTISSA1 = ARGUMENT1
=$000826				EXPONENT1 = ARGUMENT1+3

;******  Return to file: src\basic816.s


;******  Processing file: src\macros.s


;******  Return to file: src\basic816.s

.3a0000	5c 25 85 3a	jmp $3a8525	COLDBOOT        JML START               ; Entry point to boot up BASIC from scratch
.3a0004	5c 34 6b 3a	jmp $3a6b34	MONITOR         JML IMONITOR            ; Entry point to the machine language monitor
.3a0008	5c 96 25 3a	jmp $3a2596	READLINE        JML IREADLINE           ; Wait for the user to enter a line of text (for programming input)
.3a000c	5c 5b 01 3a	jmp $3a015b	SCRCOPYLINE     JML ISCRCPYLINE         ; Copy the line on the screen the user just input to INPUTBUF
.3a0010	5c 58 00 3a	jmp $3a0058	INPUTLINE       JML IINPUTLINE          ; Read a single line of text from the user, and copy it to TEMPBUF (for INPUT statement)
.3a0014	5c d6 00 3a	jmp $3a00d6	GETKEY          JML IGETKEY             ; Wait for a keypress by the user and return the ASCII code in A
.3a0018	5c c1 02 3a	jmp $3a02c1	PRINTC          JML IPRINTC             ; Print the character in A to the console
.3a001c	5c ff 00 3a	jmp $3a00ff	SHOWCURSOR      JML ISHOWCURSOR         ; Set cursor visibility: A=0, hide... A<>0, show.
.3a0020	5c 1a 01 3a	jmp $3a011a	CURSORXY        JML ICURSORXY           ; Set the position of the cursor to (X, Y)
.3a0024	5c 21 01 3a	jmp $3a0121	CLSCREEN        JML ICLSCREEN           ; Clear the screen

;******  Processing file: src\bios.s


;******  Processing file: src\membuffers.s

>08a6					OBUFFER     .long ?     ; Pointer to the current text memory buffer for output
>08a9					OBUFFSIZE   .word ?     ; Maximum size of output text memory buffer
>08ab					OBUFFIDX    .word ?     ; Index into the current output buffer
>08ad					IBUFFER     .long ?     ; Pointer to the current text memory buffer for input
>08b0					IBUFFSIZE   .word ?     ; Number of bytes written to the buffer
>08b2					IBUFFIDX    .word ?     ; Index into the current input buffer (next available character)
.3a0028					OBUFF_PUTC
.3a0028	0b		phd		                PHD
.3a0029	08		php		                PHP
.3a002a	08		php		            PHP
.3a002b	c2 20		rep #$20	            REP #$20
.3a002d	48		pha		            PHA
.3a002e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0031	5b		tcd		            TCD
.3a0032	68		pla		            PLA
.3a0033	28		plp		            PLP
.3a0034	e2 20		sep #$20	            SEP #$20
.3a0036	85 b5		sta $08b5	                STA SAVE_A
.3a0038	c2 20		rep #$20	            REP #$20
.3a003a	a5 a6		lda $08a6	                LDA OBUFFER
.3a003c	d0 06		bne $3a0044	                BNE has_buffer
.3a003e	e2 20		sep #$20	            SEP #$20
.3a0040	a5 a8		lda $08a8	                LDA OBUFFER+2
.3a0042	f0 11		beq $3a0055	                BEQ done
.3a0044					has_buffer
.3a0044	c2 10		rep #$10	            REP #$10
.3a0046	a4 ab		ldy $08ab	                LDY OBUFFIDX        ; Check to make sure there is room
.3a0048	c4 a9		cpy $08a9	                CPY OBUFFSIZE
.3a004a	f0 09		beq $3a0055	                BEQ done            ; If not, exit silently
.3a004c	e2 20		sep #$20	            SEP #$20
.3a004e	a5 b5		lda $08b5	                LDA SAVE_A
.3a0050	97 a6		sta [$08a6],y	                STA [OBUFFER],Y     ; Write the character to the buffer
.3a0052	c8		iny		                INY                 ; Increment the index
.3a0053	84 ab		sty $08ab	                STY OBUFFIDX
.3a0055	28		plp		done            PLP
.3a0056	2b		pld		                PLD
.3a0057	60		rts		            RTS

;******  Return to file: src\bios.s


;******  Processing file: src\C256/io_c256.s


;******  Processing file: src\C256/kernel_c256.s

=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/RTC_inc.s

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/keyboard.s


;******  Processing file: src\C256/keyboard_def.s

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04

;******  Return to file: src\C256/keyboard.s

.3a0058					IINPUTLINE
.3a0058	08		php		                PHP
.3a0059	c2 10		rep #$10	            REP #$10
.3a005b	e2 20		sep #$20	            SEP #$20
.3a005d	a9 01		lda #$01	                LDA #1              ; Show the cursor
.3a005f	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a0062	a2 00 00	ldx #$0000	                LDX #0
.3a0065	a9 00		lda #$00	                LDA #0
.3a0067	9f 00 4c 00	sta $004c00,x	zero_loop       STA @lIOBUF,X
.3a006b	e8		inx		                INX
.3a006c	e0 00 01	cpx #$0100	                CPX #$100
.3a006f	d0 f6		bne $3a0067	                BNE zero_loop
.3a0071	a2 00 00	ldx #$0000	                LDX #0
.3a0074					getchar
.3a0074	20 14 00	jsr $3a0014	            JSR GETKEY
.3a0077	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; Got a CR?
.3a0079	d0 03		bne $3a007e	                BNE not_cr
.3a007b	4c cf 00	jmp $3a00cf	                JMP endofline       ; Yes: we're done
.3a007e	c9 9d		cmp #$9d	not_cr          CMP #K_LEFT         ; Is it the left cursor?
.3a0080	d0 08		bne $3a008a	                BNE not_left
.3a0082	e0 00 00	cpx #$0000	                CPX #0              ; Are we all the way to the left?
.3a0085	f0 ed		beq $3a0074	                BEQ getchar         ; Yes: ignore it
.3a0087	ca		dex		                DEX                 ; Move the cursor back
.3a0088	80 39		bra $3a00c3	                BRA echo            ; And echo it
.3a008a	c9 1d		cmp #$1d	not_left        CMP #K_RIGHT        ; Is it the right arrow?
.3a008c	d0 0e		bne $3a009c	                BNE not_right
.3a008e	bf 00 4c 00	lda $004c00,x	                LDA @lIOBUF,X       ; Check the current character
.3a0092	f0 e0		beq $3a0074	                BEQ getchar         ; If it's already blank, we're as far right as we go
.3a0094	e0 4f 00	cpx #$004f	                CPX #79             ; Are we at the end of the line?
.3a0097	f0 db		beq $3a0074	                BEQ getchar         ; Yes: ignore it
.3a0099	e8		inx		                INX                 ; Otherwise: advance the cursor
.3a009a	80 27		bra $3a00c3	                BRA echo            ; And print the code
.3a009c	c9 08		cmp #$08	not_right       CMP #CHAR_BS        ; Is it a backspace?
.3a009e	d0 1a		bne $3a00ba	                BNE not_bs
.3a00a0	e0 00 00	cpx #$0000	                CPX #0              ; Are we at the beginning of the line?
.3a00a3	f0 cf		beq $3a0074	                BEQ getchar         ; yes: ignore the backspace
.3a00a5	da		phx		                PHX                 ; Save the cursor position
.3a00a6	bf 01 4c 00	lda $004c01,x	clr_loop        LDA @lIOBUF+1,X     ; Get the character above
.3a00aa	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the current position
.3a00ae	f0 06		beq $3a00b6	                BEQ done_clr        ; If we copied a NUL, we're done copying
.3a00b0	e8		inx		                INX                 ; Otherwise, keep copying down
.3a00b1	e0 ff 00	cpx #$00ff	                CPX #$FF            ; Until we're at the end of the buffer
.3a00b4	d0 f0		bne $3a00a6	                BNE clr_loop
.3a00b6	fa		plx		done_clr        PLX                 ; Restore the cursor position
.3a00b7	ca		dex		                DEX                 ; No: move the cursor left
.3a00b8	80 0e		bra $3a00c8	                BRA print_bs        ; And print the backspace
.3a00ba	c9 20		cmp #$20	not_bs          CMP #$20            ; Is it in range 00 -- 1F?
.3a00bc	90 b6		bcc $3a0074	                BLT getchar         ; Yes: ignore it
.3a00be	9f 00 4c 00	sta $004c00,x	                STA @lIOBUF,X       ; Save it to the input buffer
.3a00c2	e8		inx		                INX                 ; Move the cursor forward
.3a00c3					echo
.3a00c3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00c6	80 ac		bra $3a0074	                BRA getchar         ; And get another...
.3a00c8	a9 08		lda #$08	print_bs        LDA #CHAR_BS        ; Backspace character...
.3a00ca	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00cd	80 a5		bra $3a0074	                BRA getchar         ; And get another...
.3a00cf	a9 00		lda #$00	endofline       LDA #0              ; Hide the cursor
.3a00d1	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a00d4	28		plp		                PLP
.3a00d5	60		rts		            RTS
.3a00d6					IGETKEY
.3a00d6	22 4c 10 00	jsl $00104c	                JSL FK_GETCHW
.3a00da	60		rts		            RTS
.3a00db					GETKEYE
.3a00db	20 14 00	jsr $3a0014	            JSR GETKEY
.3a00de	48		pha		                PHA
.3a00df	20 18 00	jsr $3a0018	            JSR PRINTC
.3a00e2	68		pla		                PLA
.3a00e3	60		rts		            RTS
=$11					K_UP = $11      ; Keypad UP
=$1d					K_RIGHT = $1D   ; Keypad Right
=$91					K_DOWN = $91    ; Keypad Down
=$9d					K_LEFT = $9D    ; Keypad Left

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/screen.s

.3a00e4					ENSURETEXT
.3a00e4	08		php		            PHP
.3a00e5	e2 20		sep #$20	            SEP #$20
.3a00e7	af 00 00 af	lda $af0000	            LDA @l MASTER_CTRL_REG_L            ; Get the current display mode
.3a00eb	89 3c		bit #$3c	            BIT #Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_TileMap_En | Mstr_Ctrl_Sprite_En
.3a00ed	f0 08		beq $3a00f7	            BEQ textonly                        ; If not, make sure text is enabled
.3a00ef					overlay
.3a00ef	09 03		ora #$03	            ORA #Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay
.3a00f1	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.3a00f5	80 06		bra $3a00fd	            BRA done
.3a00f7					textonly
.3a00f7	09 01		ora #$01	            ORA #Mstr_Ctrl_Text_Mode_En
.3a00f9	8f 00 00 af	sta $af0000	            STA @l MASTER_CTRL_REG_L
.3a00fd	28		plp		done        PLP
.3a00fe	60		rts		            RTS
.3a00ff					ISHOWCURSOR
.3a00ff	08		php		            PHP
.3a0100	e2 20		sep #$20	            SEP #$20
.3a0102	c9 00		cmp #$00	            CMP #0
.3a0104	f0 08		beq $3a010e	            BEQ hide
.3a0106	af 10 00 af	lda $af0010	show        LDA @lVKY_TXT_CURSOR_CTRL_REG
.3a010a	09 01		ora #$01	            ORA #Vky_Cursor_Enable
.3a010c	80 06		bra $3a0114	            BRA setit
.3a010e	af 10 00 af	lda $af0010	hide        LDA @lVKY_TXT_CURSOR_CTRL_REG
.3a0112	29 fe		and #$fe	            AND #~Vky_Cursor_Enable
.3a0114	8f 10 00 af	sta $af0010	setit       STA @lVKY_TXT_CURSOR_CTRL_REG
.3a0118	28		plp		            PLP
.3a0119	60		rts		            RTS
.3a011a					ICURSORXY
.3a011a	08		php		            PHP
.3a011b	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.3a011f	28		plp		            PLP
.3a0120	60		rts		            RTS
.3a0121					ICLSCREEN
.3a0121	48		pha		            PHA
.3a0122	da		phx		            PHX
.3a0123	5a		phy		            PHY
.3a0124	0b		phd		            PHD
.3a0125	08		php		            PHP
.3a0126	e2 20		sep #$20	            SEP #$20
.3a0128	c2 10		rep #$10	            REP #$10
.3a012a	a2 00 00	ldx #$0000	            LDX #0
.3a012d	a9 20		lda #$20	loop        LDA #$20
.3a012f	9f 00 a0 af	sta $afa000,x	            STA @lCS_TEXT_MEM_PTR,X     ; Write a space in the text cell
.3a0133	af 1e 00 00	lda $00001e	            LDA @lCURCOLOR
.3a0137	9f 00 c0 af	sta $afc000,x	            STA @lCS_COLOR_MEM_PTR,X    ; Set the color to green on black
.3a013b	e8		inx		            INX                         ; Move to the next character cell
.3a013c	e0 00 20	cpx #$2000	            CPX #$2000
.3a013f	d0 ec		bne $3a012d	            BNE loop
.3a0141	08		php		            PHP
.3a0142	c2 20		rep #$20	            REP #$20
.3a0144	48		pha		            PHA
.3a0145	a9 00 00	lda #$0000	            LDA #0
.3a0148	5b		tcd		            TCD
.3a0149	68		pla		            PLA
.3a014a	28		plp		            PLP
.3a014b	a2 00 00	ldx #$0000	            LDX #0                      ; Set cursor to upper-left corner
.3a014e	a0 00 00	ldy #$0000	            LDY #0
.3a0151	22 84 10 00	jsl $001084	            JSL FK_LOCATE
.3a0155	28		plp		            PLP
.3a0156	2b		pld		            PLD
.3a0157	7a		ply		            PLY
.3a0158	fa		plx		            PLX
.3a0159	68		pla		            PLA
.3a015a	60		rts		            RTS
.3a015b					ISCRCPYLINE
.3a015b	da		phx		            PHX
.3a015c	5a		phy		            PHY
.3a015d	0b		phd		            PHD
.3a015e	08		php		            PHP
.3a015f	08		php		            PHP
.3a0160	c2 20		rep #$20	            REP #$20
.3a0162	48		pha		            PHA
.3a0163	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0166	5b		tcd		            TCD
.3a0167	68		pla		            PLA
.3a0168	28		plp		            PLP
.3a0169	c2 30		rep #$30	            REP #$30
.3a016b	af 0c 00 00	lda $00000c	            LDA @lSCREENBEGIN       ; Set INDEX to the first byte of the text screen
.3a016f	85 08		sta $0808	            STA INDEX
.3a0171	e2 20		sep #$20	            SEP #$20
.3a0173	af 0e 00 00	lda $00000e	            LDA @lSCREENBEGIN+2
.3a0177	c2 20		rep #$20	            REP #$20
.3a0179	29 ff 00	and #$00ff	            AND #$00FF
.3a017c	85 0a		sta $080a	            STA INDEX+2
.3a017e	af 11 00 00	lda $000011	            LDA @lCOLS_PER_LINE     ; Calculate the offset to the current line
.3a0182	8f 08 01 00	sta $000108	            STA @lM1_OPERAND_A
.3a0186	af 1c 00 00	lda $00001c	            LDA @lCURSORY
.3a018a	3a		dec a		            DEC A
.3a018b	8f 0a 01 00	sta $00010a	            STA @lM1_OPERAND_B
.3a018f	18		clc		            CLC                     ; And add it to INDEX
.3a0190	a5 08		lda $0808	            LDA INDEX
.3a0192	6f 0c 01 00	adc $00010c	            ADC @lM1_RESULT
.3a0196	85 08		sta $0808	            STA INDEX
.3a0198	a5 0a		lda $080a	            LDA INDEX+2
.3a019a	69 00 00	adc #$0000	            ADC #0
.3a019d	85 0a		sta $080a	            STA INDEX+2
.3a019f	e2 20		sep #$20	            SEP #$20
.3a01a1	af 0f 00 00	lda $00000f	            LDA @lCOLS_VISIBLE
.3a01a5	85 8f		sta $088f	            STA MCOUNT
.3a01a7	a0 00 00	ldy #$0000	            LDY #0
.3a01aa	a2 00 00	ldx #$0000	            LDX #0
.3a01ad	b7 08		lda [$0808],y	copy_loop   LDA [INDEX],Y           ; Copy a byte from the screen to the input buffer
.3a01af	9f 00 4f 00	sta $004f00,x	            STA @lINPUTBUF,X
.3a01b3	e8		inx		            INX
.3a01b4	c8		iny		            INY
.3a01b5	c4 8f		cpy $088f	            CPY MCOUNT
.3a01b7	d0 f4		bne $3a01ad	            BNE copy_loop
.3a01b9	ca		dex		            DEX
.3a01ba	bf 00 4f 00	lda $004f00,x	trim_loop   LDA @lINPUTBUF,X        ; Replace spaces at the end with NULLs
.3a01be	c9 20		cmp #$20	            CMP #CHAR_SP
.3a01c0	d0 09		bne $3a01cb	            BNE done
.3a01c2	a9 00		lda #$00	            LDA #0
.3a01c4	9f 00 4f 00	sta $004f00,x	            STA @lINPUTBUF,X
.3a01c8	ca		dex		            DEX
.3a01c9	10 ef		bpl $3a01ba	            BPL trim_loop
.3a01cb	28		plp		done        PLP
.3a01cc	2b		pld		            PLD
.3a01cd	7a		ply		            PLY
.3a01ce	fa		plx		            PLX
.3a01cf	60		rts		            RTS

;******  Return to file: src\C256/io_c256.s


;******  Processing file: src\C256/gabe_defs.s

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04					GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08					GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01					GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02					GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10					GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20					GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40					GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80					GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04					GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10					GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a				GABE_SUBVERSION_LO  = $AFE88A
=$afe88b				GABE_SUBVERSION_HI  = $AFE88B
=$afe88c				GABE_VERSION_LO     = $AFE88C
=$afe88d				GABE_VERSION_HI     = $AFE88D
=$afe88e				GABE_MODEL_LO       = $AFE88E
=$afe88f				GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\C256/io_c256.s

=32					BORDER_WIDTH = 32               ; The width of the border (when it is on)
=72					TEXT_COLS_WB = 72               ; Number of columns of text with the border enabled
=52					TEXT_ROWS_WB = 52               ; Number of rows of text with the border enabled
=80					TEXT_COLS_WOB = 80              ; Number of columns of text with no border enabled
=60					TEXT_ROWS_WOB = 60              ; Number of rows of text with no border enabled
.3a01d0					INITIO
.3a01d0	e2 20		sep #$20	            SEP #$20
.3a01d2	20 1b 02	jsr $3a021b	            JSR INITRNG
.3a01d5	a9 48		lda #$48	            LDA #TEXT_COLS_WB   ; Make sure the screen size is right
.3a01d7	8f 0f 00 00	sta $00000f	            STA @lCOLS_VISIBLE  ; TODO: remove this when the kernel is correct
.3a01db	a9 34		lda #$34	            LDA #TEXT_ROWS_WB
.3a01dd	8f 13 00 00	sta $000013	            STA @lLINES_VISIBLE
.3a01e1	a9 20		lda #$20	            LDA #BORDER_WIDTH   ; Set the border width
.3a01e3	8f 08 00 af	sta $af0008	            STA BORDER_X_SIZE
.3a01e7	8f 09 00 af	sta $af0009	            STA BORDER_Y_SIZE
.3a01eb	a2 00 00	ldx #$0000	            LDX #0              ; Clear all the sprite control shadow registers
.3a01ee	a9 00		lda #$00	            LDA #0
.3a01f0	9f 18 f0 3a	sta $3af018,x	sp_loop     STA GS_SP_CONTROL,X
.3a01f4	e8		inx		            INX
.3a01f5	e0 40 00	cpx #$0040	            CPX #SP_MAX
.3a01f8	d0 f6		bne $3a01f0	            BNE sp_loop
.3a01fa	a9 80		lda #$80	            LDA #DEV_SCREEN
.3a01fc	8f b4 08 00	sta $0008b4	            STA @lBCONSOLE
.3a0200	e2 20		sep #$20	            SEP #$20
.3a0202	a9 00		lda #$00	            LDA #0                  ; Clear the lock key flags
.3a0204	8f 89 0f 00	sta $000f89	            STA @lKEYBOARD_LOCKS
.3a0208	a9 00		lda #$00	            LDA #0
.3a020a	8f 00 02 af	sta $af0200	            STA @l TL0_CONTROL_REG
.3a020e	8f 0c 02 af	sta $af020c	            STA @l TL1_CONTROL_REG
.3a0212	8f 18 02 af	sta $af0218	            STA @l TL2_CONTROL_REG
.3a0216	8f 24 02 af	sta $af0224	            STA @l TL3_CONTROL_REG
.3a021a					done
.3a021a	60		rts		            RTS
.3a021b					INITRNG
.3a021b	08		php		            PHP
.3a021c	e2 20		sep #$20	            SEP #$20
.3a021e	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Pause updates to the clock registers
.3a0222	09 08		ora #$08	            ORA #%00001000
.3a0224	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.3a0228	af 00 08 af	lda $af0800	            LDA @l RTC_SEC          ; Set the random number generator seed
.3a022c	8f 84 e8 af	sta $afe884	            STA @l GABE_RNG_SEED_LO
.3a0230	af 02 08 af	lda $af0802	            LDA @l RTC_MIN
.3a0234	8f 85 e8 af	sta $afe885	            STA @l GABE_RNG_SEED_HI
.3a0238	a9 03		lda #$03	            LDA #GABE_RNG_CTRL_DV | GABE_RNG_CTRL_EN
.3a023a	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL    ; Load the seed into the RNG
.3a023e	af 0e 08 af	lda $af080e	            LDA @l RTC_CTRL         ; Re-enable updates to the clock registers
.3a0242	29 f7		and #$f7	            AND #%11110111
.3a0244	8f 0e 08 af	sta $af080e	            STA @l RTC_CTRL
.3a0248	ea		nop		            NOP                     ; Give the RNG some time... not sure if needed, really
.3a0249	ea		nop		            NOP
.3a024a	ea		nop		            NOP
.3a024b	a9 01		lda #$01	            LDA #GABE_RNG_CTRL_EN   ; Turn on the random number genertator
.3a024d	8f 86 e8 af	sta $afe886	            STA @l GABE_RNG_CTRL
.3a0251	28		plp		            PLP
.3a0252	60		rts		            RTS
.3a0253					SCREEN_PUTC
.3a0253	08		php		            PHP
.3a0254	e2 20		sep #$20	            SEP #$20
.3a0256	48		pha		            PHA
.3a0257	48		pha		            PHA
.3a0258	a9 00		lda #$00	            LDA #CHAN_CONSOLE       ; Switch to the console device
.3a025a	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.3a025e	68		pla		            PLA
.3a025f	22 18 10 00	jsl $001018	            JSL FK_PUTC
.3a0263	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.3a0267	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.3a0269	d0 f8		bne $3a0263	            BNE loop                ; Yes: wait until it's released
.3a026b	68		pla		            PLA
.3a026c	28		plp		            PLP
.3a026d	60		rts		            RTS
.3a026e					UART_PUTC
.3a026e	08		php		            PHP
.3a026f	e2 20		sep #$20	            SEP #$20
.3a0271	48		pha		            PHA
.3a0272	48		pha		            PHA
.3a0273	a9 01		lda #$01	            LDA #CHAN_COM1          ; Switch to COM1
.3a0275	22 3c 10 00	jsl $00103c	            JSL FK_SETOUT
.3a0279	68		pla		            PLA
.3a027a	22 18 10 00	jsl $001018	            JSL FK_PUTC
.3a027e	af 89 0f 00	lda $000f89	loop        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.3a0282	29 01		and #$01	            AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.3a0284	d0 f8		bne $3a027e	            BNE loop                ; Yes: wait until it's released
.3a0286	68		pla		            PLA
.3a0287	28		plp		            PLP
.3a0288	60		rts		            RTS
.3a0289					PRINTCR
.3a0289	08		php		            PHP
.3a028a	c2 20		rep #$20	            REP #$20
.3a028c	48		pha		            PHA
.3a028d	e2 20		sep #$20	            SEP #$20
.3a028f	a9 0d		lda #$0d	            LDA #CHAR_CR
.3a0291	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0294	c2 20		rep #$20	            REP #$20
.3a0296	68		pla		            PLA
.3a0297	28		plp		            PLP
.3a0298	60		rts		            RTS
.3a0299					PRINTH
.3a0299	08		php		            PHP
.3a029a	22 78 10 00	jsl $001078	            JSL FK_IPRINTH
.3a029e	28		plp		            PLP
.3a029f	60		rts		            RTS

;******  Return to file: src\bios.s

=10					LINES_PER_PAGE = 10     ; The number of lines to print on a page before pausing
=$80					DEV_SCREEN = $80        ; Use the screen and keyboard for the console device
=$40					DEV_UART = $40          ; Use UART for console device
=$20					DEV_BUFFER = $20        ; Use the current text memory buffer for output or input
>08b4					BCONSOLE    .byte ?     ; Device for BASIC console
>08b5					SAVE_A      .byte ?     ; Save spot for the A register
>08b6					LINECOUNT   .byte ?     ; Counter for new lines to support pagination
.3a02a0					PAGINATE
.3a02a0	08		php		            PHP
.3a02a1	0b		phd		            PHD
.3a02a2	08		php		            PHP
.3a02a3	c2 20		rep #$20	            REP #$20
.3a02a5	48		pha		            PHA
.3a02a6	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a02a9	5b		tcd		            TCD
.3a02aa	68		pla		            PLA
.3a02ab	28		plp		            PLP
.3a02ac	e2 20		sep #$20	            SEP #$20
.3a02ae	a5 b6		lda $08b6	            LDA LINECOUNT           ; Check the line count
.3a02b0	1a		inc a		            INC A
.3a02b1	85 b6		sta $08b6	            STA LINECOUNT
.3a02b3	cf 13 00 00	cmp $000013	            CMP @l LINES_VISIBLE
.3a02b7	90 05		bcc $3a02be	            BLT done                ; If < limit, just return
.3a02b9	20 14 00	jsr $3a0014	            JSR GETKEY
.3a02bc	64 b6		stz $08b6	            STZ LINECOUNT           ; And reset the line count
.3a02be	2b		pld		done        PLD
.3a02bf	28		plp		            PLP
.3a02c0	60		rts		            RTS
.3a02c1					IPRINTC
.3a02c1	da		phx		            PHX
.3a02c2	5a		phy		            PHY
.3a02c3	0b		phd		            PHD
.3a02c4	08		php		            PHP
.3a02c5	08		php		            PHP
.3a02c6	c2 20		rep #$20	            REP #$20
.3a02c8	48		pha		            PHA
.3a02c9	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a02cc	5b		tcd		            TCD
.3a02cd	68		pla		            PLA
.3a02ce	28		plp		            PLP
.3a02cf	e2 20		sep #$20	            SEP #$20
.3a02d1	c2 10		rep #$10	            REP #$10
.3a02d3	8f b5 08 00	sta $0008b5	            STA @lSAVE_A
.3a02d7	af b4 08 00	lda $0008b4	chk_out     LDA @lBCONSOLE      ; Check to see if we should send to an output buffer
.3a02db	29 20		and #$20	            AND #DEV_BUFFER
.3a02dd	f0 07		beq $3a02e6	            BEQ check_scrn      ; No... move on to the hardware screen
.3a02df	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a02e3	20 28 00	jsr $3a0028	            JSR OBUFF_PUTC
.3a02e6	af b4 08 00	lda $0008b4	check_scrn  LDA @lBCONSOLE
.3a02ea	29 80		and #$80	            AND #DEV_SCREEN     ; Check to see if the screen is selected
.3a02ec	f0 07		beq $3a02f5	            BEQ send_uart
.3a02ee	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a02f2	20 53 02	jsr $3a0253	            JSR SCREEN_PUTC
.3a02f5	af b4 08 00	lda $0008b4	send_uart   LDA @lBCONSOLE
.3a02f9	29 40		and #$40	            AND #DEV_UART       ; Check to see if the UART is active
.3a02fb	f0 14		beq $3a0311	            BEQ done
.3a02fd	af b5 08 00	lda $0008b5	            LDA @lSAVE_A
.3a0301	20 6e 02	jsr $3a026e	            JSR UART_PUTC
.3a0304	af b5 08 00	lda $0008b5	            LDA @lSAVE_A        ; If sending a CR to the serial port
.3a0308	c9 0d		cmp #$0d	            CMP #CHAR_CR
.3a030a	d0 05		bne $3a0311	            BNE done
.3a030c	a9 0a		lda #$0a	            LDA #CHAR_LF        ; Send a linefeed after
.3a030e	20 6e 02	jsr $3a026e	            JSR UART_PUTC
.3a0311	28		plp		done        PLP
.3a0312	2b		pld		            PLD
.3a0313	7a		ply		            PLY
.3a0314	fa		plx		            PLX
.3a0315	60		rts		            RTS
.3a0316					PRINTS
.3a0316	08		php		            PHP
.3a0317	e2 20		sep #$20	            SEP #$20
.3a0319	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.3a031c	f0 06		beq $3a0324	            BEQ done
.3a031e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0321	e8		inx		            INX
.3a0322	80 f5		bra $3a0319	            BRA loop
.3a0324	28		plp		done        PLP
.3a0325	60		rts		            RTS
.3a0326					PRHEXW
.3a0326	08		php		            PHP
.3a0327	c2 20		rep #$20	            REP #$20
.3a0329	48		pha		            PHA
.3a032a	48		pha		            PHA
.3a032b	4a		lsr a		            LSR A
.3a032c	4a		lsr a		            LSR A
.3a032d	4a		lsr a		            LSR A
.3a032e	4a		lsr a		            LSR A
.3a032f	4a		lsr a		            LSR A
.3a0330	4a		lsr a		            LSR A
.3a0331	4a		lsr a		            LSR A
.3a0332	4a		lsr a		            LSR A
.3a0333	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a0336	68		pla		            PLA
.3a0337	29 ff 00	and #$00ff	            AND #$00FF
.3a033a	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a033d	68		pla		            PLA
.3a033e	28		plp		            PLP
.3a033f	60		rts		            RTS
.3a0340					PRHEXB
.3a0340	08		php		            PHP
.3a0341	c2 20		rep #$20	            REP #$20
.3a0343	48		pha		            PHA
.3a0344	e2 20		sep #$20	            SEP #$20
.3a0346	48		pha		            PHA
.3a0347	4a		lsr a		            LSR A
.3a0348	4a		lsr a		            LSR A
.3a0349	4a		lsr a		            LSR A
.3a034a	4a		lsr a		            LSR A
.3a034b	20 57 03	jsr $3a0357	            JSR PRHEXN
.3a034e	68		pla		            PLA
.3a034f	20 57 03	jsr $3a0357	            JSR PRHEXN
.3a0352	c2 20		rep #$20	            REP #$20
.3a0354	68		pla		            PLA
.3a0355	28		plp		            PLP
.3a0356	60		rts		            RTS
.3a0357					PRHEXN
.3a0357	08		php		            PHP
.3a0358	c2 30		rep #$30	            REP #$30
.3a035a	da		phx		            PHX
.3a035b	29 0f 00	and #$000f	            AND #$000F
.3a035e	aa		tax		            TAX
.3a035f	bf 00 d0 3a	lda $3ad000,x	            LDA @lHEXDIGITS,X
.3a0363	20 18 00	jsr $3a0018	            JSR PRINTC
.3a0366	fa		plx		            PLX
.3a0367	28		plp		            PLP
.3a0368	60		rts		            RTS
>3ad000	30 31 32 33 34 35 36 37		HEXDIGITS   .text "0123456789ABCDEF"
>3ad008	38 39 41 42 43 44 45 46

;******  Return to file: src\basic816.s


;******  Processing file: src\utilities.s

.3a0369					PRTRACE
.3a0369	08		php		            PHP
.3a036a	c2 30		rep #$30	            REP #$30
.3a036c	48		pha		            PHA
.3a036d	da		phx		            PHX
.3a036e	5a		phy		            PHY
.3a036f	8b		phb		            PHB
.3a0370	0b		phd		            PHD
.3a0371	c2 30		rep #$30	            REP #$30
.3a0373	a3 0b		lda $0b,s	            LDA 11,S        ; Get the return address
.3a0375	18		clc		calc_addr   CLC
.3a0376	69 03 00	adc #$0003	            ADC #3          ; Add 3 to skip over the following branch
.3a0379	aa		tax		            TAX
.3a037a	e2 20		sep #$20	            SEP #$20
.3a037c	a9 3a		lda #$3a	            LDA #`PRTRACE
.3a037e	48		pha		            PHA
.3a037f	ab		plb		            PLB
.3a0380	bd 00 00	lda $0000,x	pr_loop     LDA #0,B,X
.3a0383	f0 06		beq $3a038b	            BEQ done
.3a0385	20 53 02	jsr $3a0253	            JSR SCREEN_PUTC
.3a0388	e8		inx		            INX
.3a0389	80 f5		bra $3a0380	            BRA pr_loop
.3a038b					done
.3a038b	c2 30		rep #$30	            REP #$30
.3a038d	2b		pld		            PLD
.3a038e	ab		plb		            PLB
.3a038f	7a		ply		            PLY
.3a0390	fa		plx		            PLX
.3a0391	68		pla		            PLA
.3a0392	28		plp		            PLP
.3a0393	60		rts		            RTS
.3a0394					ISALPHA
.3a0394	08		php		            PHP
.3a0395	e2 20		sep #$20	            SEP #$20
.3a0397	c9 5b		cmp #$5b	            CMP #'Z'+1
.3a0399	b0 04		bcs $3a039f	            BGE not_upper
.3a039b	c9 41		cmp #$41	            CMP #'A'
.3a039d	b0 0b		bcs $3a03aa	            BGE is_alpha
.3a039f	c9 7b		cmp #$7b	not_upper   CMP #'z'+1
.3a03a1	b0 04		bcs $3a03a7	            BGE not_alpha
.3a03a3	c9 61		cmp #$61	            CMP #'a'
.3a03a5	b0 03		bcs $3a03aa	            BGE is_alpha
.3a03a7					not_alpha
.3a03a7	28		plp		            PLP
.3a03a8	18		clc		            CLC
.3a03a9	60		rts		            RTS
.3a03aa					is_alpha
.3a03aa	28		plp		            PLP
.3a03ab	38		sec		            SEC
.3a03ac	60		rts		            RTS
.3a03ad					ISNUMERAL
.3a03ad	08		php		            PHP
.3a03ae	e2 20		sep #$20	            SEP #$20
.3a03b0	c9 3a		cmp #$3a	            CMP #'9'+1
.3a03b2	b0 04		bcs $3a03b8	            BGE ret_false
.3a03b4	c9 30		cmp #$30	            CMP #'0'
.3a03b6	b0 03		bcs $3a03bb	            BGE ret_true
.3a03b8	28		plp		ret_false   PLP
.3a03b9	18		clc		            CLC
.3a03ba	60		rts		            RTS
.3a03bb	28		plp		ret_true    PLP
.3a03bc	38		sec		            SEC
.3a03bd	60		rts		            RTS
.3a03be					ISHEX
.3a03be	08		php		            PHP
.3a03bf	e2 20		sep #$20	            SEP #$20
.3a03c1	c9 3a		cmp #$3a	            CMP #'9'+1
.3a03c3	b0 04		bcs $3a03c9	            BGE chk_lca2f
.3a03c5	c9 30		cmp #$30	            CMP #'0'
.3a03c7	b0 13		bcs $3a03dc	            BGE ret_true
.3a03c9	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.3a03cb	b0 04		bcs $3a03d1	            BGE chk_uca2f
.3a03cd	c9 61		cmp #$61	            CMP #'a'
.3a03cf	b0 0b		bcs $3a03dc	            BGE ret_true
.3a03d1	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.3a03d3	b0 04		bcs $3a03d9	            BGE ret_false
.3a03d5	c9 41		cmp #$41	            CMP #'A'
.3a03d7	b0 03		bcs $3a03dc	            BGE ret_true
.3a03d9	28		plp		ret_false   PLP
.3a03da	18		clc		            CLC
.3a03db	60		rts		            RTS
.3a03dc	28		plp		ret_true    PLP
.3a03dd	38		sec		            SEC
.3a03de	60		rts		            RTS
.3a03df					HEX2BIN
.3a03df	08		php		            PHP
.3a03e0	e2 20		sep #$20	            SEP #$20
.3a03e2	c9 3a		cmp #$3a	            CMP #'9'+1          ; Check to see if '0'..'9'
.3a03e4	b0 04		bcs $3a03ea	            BGE chk_lca2f
.3a03e6	c9 30		cmp #$30	            CMP #'0'
.3a03e8	b0 12		bcs $3a03fc	            BGE conv_09         ; Yes: convert it
.3a03ea	c9 67		cmp #$67	chk_lca2f   CMP #'f'+1
.3a03ec	b0 04		bcs $3a03f2	            BGE chk_uca2f
.3a03ee	c9 61		cmp #$61	            CMP #'a'
.3a03f0	b0 0f		bcs $3a0401	            BGE conv_lcaf
.3a03f2	c9 47		cmp #$47	chk_uca2f   CMP #'F'+1
.3a03f4	b0 04		bcs $3a03fa	            BGE done
.3a03f6	c9 41		cmp #$41	            CMP #'A'
.3a03f8	b0 09		bcs $3a0403	            BGE conv_ucaf
.3a03fa	28		plp		done        PLP
.3a03fb	60		rts		            RTS
.3a03fc	38		sec		conv_09     SEC                 ; Convert digits '0'..'9'
.3a03fd	e9 30		sbc #$30	            SBC #'0'
.3a03ff	80 f9		bra $3a03fa	            BRA done
.3a0401	29 df		and #$df	conv_lcaf   AND #%11011111      ; Convert to upper case
.3a0403	38		sec		conv_ucaf   SEC
.3a0404	e9 37		sbc #$37	            SBC #'A'-10         ; Convert 'A'..'F'
.3a0406	80 f2		bra $3a03fa	            BRA done
.3a0408					TOUPPERA
.3a0408	08		php		            PHP
.3a0409	e2 20		sep #$20	            SEP #$20
.3a040b	c9 7b		cmp #$7b	            CMP #'z'+1
.3a040d	b0 06		bcs $3a0415	            BCS done
.3a040f	c9 61		cmp #$61	            CMP #'a'
.3a0411	90 02		bcc $3a0415	            BCC done
.3a0413	29 df		and #$df	            AND #%11011111
.3a0415	28		plp		done        PLP
.3a0416	60		rts		            RTS
.3a0417					TOUPPER
.3a0417	08		php		            PHP
.3a0418	e2 20		sep #$20	            SEP #$20
.3a041a	c2 10		rep #$10	            REP #$10
.3a041c	bd 00 00	lda $0000,x	loop        LDA #0,B,X
.3a041f	f0 09		beq $3a042a	            BEQ done
.3a0421	20 08 04	jsr $3a0408	            JSR TOUPPERA
.3a0424	9d 00 00	sta $0000,x	            STA #0,B,X
.3a0427	e8		inx		continue    INX
.3a0428	80 f2		bra $3a041c	            BRA loop
.3a042a	28		plp		done        PLP
.3a042b	60		rts		            RTS
.3a042c					MULINT10
.3a042c	08		php		                PHP
.3a042d	0b		phd		                PHD
.3a042e	08		php		            PHP
.3a042f	c2 20		rep #$20	            REP #$20
.3a0431	48		pha		            PHA
.3a0432	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0435	5b		tcd		            TCD
.3a0436	68		pla		            PLA
.3a0437	28		plp		            PLP
.3a0438	c2 20		rep #$20	            REP #$20
.3a043a	48		pha		                PHA
.3a043b	06 23		asl $0823	                ASL ARGUMENT1           ; 7 -- 20 -- 74
.3a043d	26 25		rol $0825	                ROL ARGUMENT1+2         ; 7
.3a043f	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.3a0441	85 0c		sta $080c	                STA SCRATCH             ; 4
.3a0443	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.3a0445	85 0e		sta $080e	                STA SCRATCH+2           ; 4
.3a0447	06 0c		asl $080c	                ASL SCRATCH             ; 7 -- 28
.3a0449	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.3a044b	06 0c		asl $080c	                ASL SCRATCH             ; 7
.3a044d	26 0e		rol $080e	                ROL SCRATCH+2           ; 7
.3a044f	18		clc		                CLC                     ; 2 -- 26
.3a0450	a5 23		lda $0823	                LDA ARGUMENT1           ; 4
.3a0452	65 0c		adc $080c	                ADC SCRATCH             ; 4
.3a0454	85 23		sta $0823	                STA ARGUMENT1           ; 4
.3a0456	a5 25		lda $0825	                LDA ARGUMENT1+2         ; 4
.3a0458	65 0e		adc $080e	                ADC SCRATCH+2           ; 4
.3a045a	85 25		sta $0825	                STA ARGUMENT1+2         ; 4
.3a045c	68		pla		                PLA
.3a045d	2b		pld		                PLD
.3a045e	28		plp		                PLP
.3a045f	60		rts		            RTS
.3a0460					DIVINT10
.3a0460	08		php		                PHP
.3a0461	0b		phd		                PHD
.3a0462	08		php		            PHP
.3a0463	c2 20		rep #$20	            REP #$20
.3a0465	48		pha		            PHA
.3a0466	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0469	5b		tcd		            TCD
.3a046a	68		pla		            PLA
.3a046b	28		plp		            PLP
.3a046c	c2 20		rep #$20	            REP #$20
.3a046e	a5 23		lda $0823	                LDA ARGUMENT1
.3a0470	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.3a0474	a9 0a 00	lda #$000a	                LDA #10
.3a0477	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.3a047b	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.3a047f	85 23		sta $0823	                STA ARGUMENT1
.3a0481	64 25		stz $0825	                STZ ARGUMENT1+2
.3a0483	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.3a0487	85 29		sta $0829	                STA ARGUMENT2
.3a0489	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a048b	e2 20		sep #$20	            SEP #$20
.3a048d	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a048f	85 27		sta $0827	                STA ARGTYPE1
.3a0491	85 2d		sta $082d	                STA ARGTYPE2
.3a0493	2b		pld		                PLD
.3a0494	28		plp		                PLP
.3a0495	60		rts		            RTS
.3a0496					DIVINT100
.3a0496	08		php		                PHP
.3a0497	0b		phd		                PHD
.3a0498	08		php		            PHP
.3a0499	c2 20		rep #$20	            REP #$20
.3a049b	48		pha		            PHA
.3a049c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a049f	5b		tcd		            TCD
.3a04a0	68		pla		            PLA
.3a04a1	28		plp		            PLP
.3a04a2	c2 20		rep #$20	            REP #$20
.3a04a4	a5 23		lda $0823	                LDA ARGUMENT1
.3a04a6	8f 1a 01 00	sta $00011a	                STA @lD1_OPERAND_B
.3a04aa	a9 64 00	lda #$0064	                LDA #100
.3a04ad	8f 18 01 00	sta $000118	                STA @lD1_OPERAND_A
.3a04b1	af 1c 01 00	lda $00011c	                LDA @lD1_RESULT
.3a04b5	85 23		sta $0823	                STA ARGUMENT1
.3a04b7	64 25		stz $0825	                STZ ARGUMENT1+2
.3a04b9	af 1e 01 00	lda $00011e	                LDA @lD1_REMAINDER
.3a04bd	85 29		sta $0829	                STA ARGUMENT2
.3a04bf	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a04c1	e2 20		sep #$20	            SEP #$20
.3a04c3	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a04c5	85 27		sta $0827	                STA ARGTYPE1
.3a04c7	85 2d		sta $082d	                STA ARGTYPE2
.3a04c9	2b		pld		                PLD
.3a04ca	28		plp		                PLP
.3a04cb	60		rts		            RTS
.3a04cc					IS_ARG1_Z
.3a04cc	08		php		                PHP
.3a04cd	c2 20		rep #$20	            REP #$20
.3a04cf	a5 23		lda $0823	                LDA ARGUMENT1
.3a04d1	d0 08		bne $3a04db	                BNE return_false
.3a04d3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a04d5	d0 04		bne $3a04db	                BNE return_false
.3a04d7	28		plp		return_true     PLP
.3a04d8	e2 02		sep #$02	                SEP #$02        ; Set Z
.3a04da	60		rts		            RTS
.3a04db	28		plp		return_false    PLP
.3a04dc	c2 02		rep #$02	                REP #$02        ; Clear Z
.3a04de	60		rts		            RTS
.3a04df					SET_TRUE
.3a04df	08		php		                PHP
.3a04e0	c2 30		rep #$30	            REP #$30
.3a04e2	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a04e5	85 23		sta $0823	                STA ARGUMENT1
.3a04e7	85 25		sta $0825	                STA ARGUMENT1+2
.3a04e9	e2 20		sep #$20	            SEP #$20
.3a04eb	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a04ed	85 27		sta $0827	                STA ARGTYPE1
.3a04ef	28		plp		                PLP
.3a04f0	60		rts		            RTS
.3a04f1					SET_FALSE
.3a04f1	08		php		                PHP
.3a04f2	c2 30		rep #$30	            REP #$30
.3a04f4	a9 00 00	lda #$0000	                LDA #0
.3a04f7	85 23		sta $0823	                STA ARGUMENT1
.3a04f9	85 25		sta $0825	                STA ARGUMENT1+2
.3a04fb	e2 20		sep #$20	            SEP #$20
.3a04fd	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a04ff	85 27		sta $0827	                STA ARGTYPE1
.3a0501	28		plp		                PLP
.3a0502	60		rts		            RTS
.3a0503					ASS_ARG1_INT
.3a0503	08		php		                PHP
.3a0504	e2 20		sep #$20	            SEP #$20
.3a0506	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a0508	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a050a	f0 07		beq $3a0513	                BEQ done                ; If so: just return
.3a050c	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a050e	d0 05		bne $3a0515	                BNE TYPE_ERR            ; If not: throw an error
.3a0510	20 3b 59	jsr $3a593b	            JSR FTOI
.3a0513	28		plp		done            PLP
.3a0514	60		rts		            RTS
.3a0515					TYPE_ERR
.3a0515	08		php		            PHP
.3a0516	c2 20		rep #$20	            REP #$20
.3a0518	48		pha		            PHA
.3a0519	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a051c	5b		tcd		            TCD
.3a051d	68		pla		            PLA
.3a051e	28		plp		            PLP
.3a051f	e2 20		sep #$20	            SEP #$20
.3a0521	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0523	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0527	c2 20		rep #$20	            REP #$20
.3a0529	29 ff 00	and #$00ff	            AND #$00FF
.3a052c	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a052f	e2 20		sep #$20	            SEP #$20
.3a0531	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0534					ASS_ARG2_INT
.3a0534	08		php		                PHP
.3a0535	e2 20		sep #$20	            SEP #$20
.3a0537	a5 2d		lda $082d	                LDA ARGTYPE2                ; Verify that the type is INTEGER
.3a0539	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a053b	f0 37		beq $3a0574	                BEQ done                    ; If so: just return
.3a053d	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; Check if it's a float
.3a053f	d0 35		bne $3a0576	                BNE TYPE_ERR                ; If not: throw an error
.3a0541	c2 20		rep #$20	            REP #$20
.3a0543	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a0545	48		pha		            PHA
.3a0546	a5 23		lda $0823	            LDA ARGUMENT1
.3a0548	48		pha		            PHA
.3a0549	c2 20		rep #$20	            REP #$20
.3a054b	a5 29		lda $0829	            LDA ARGUMENT2
.3a054d	85 23		sta $0823	            STA ARGUMENT1
.3a054f	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a0551	85 25		sta $0825	            STA ARGUMENT1+2
.3a0553	e2 20		sep #$20	            SEP #$20
.3a0555	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.3a0557	85 27		sta $0827	            STA ARGTYPE1
.3a0559	20 3b 59	jsr $3a593b	            JSR FTOI
.3a055c	c2 20		rep #$20	            REP #$20
.3a055e	a5 23		lda $0823	            LDA ARGUMENT1
.3a0560	85 29		sta $0829	            STA ARGUMENT2
.3a0562	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a0564	85 2b		sta $082b	            STA ARGUMENT2+2
.3a0566	e2 20		sep #$20	            SEP #$20
.3a0568	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a056a	85 2d		sta $082d	            STA ARGTYPE2
.3a056c	c2 20		rep #$20	            REP #$20
.3a056e	68		pla		            PLA
.3a056f	85 23		sta $0823	            STA ARGUMENT1
.3a0571	68		pla		            PLA
.3a0572	85 25		sta $0825	            STA ARGUMENT1+2
.3a0574	28		plp		done            PLP
.3a0575	60		rts		            RTS
.3a0576					TYPE_ERR
.3a0576	08		php		            PHP
.3a0577	c2 20		rep #$20	            REP #$20
.3a0579	48		pha		            PHA
.3a057a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a057d	5b		tcd		            TCD
.3a057e	68		pla		            PLA
.3a057f	28		plp		            PLP
.3a0580	e2 20		sep #$20	            SEP #$20
.3a0582	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0584	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0588	c2 20		rep #$20	            REP #$20
.3a058a	29 ff 00	and #$00ff	            AND #$00FF
.3a058d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a0590	e2 20		sep #$20	            SEP #$20
.3a0592	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0595					ASS_ARG1_STR
.3a0595	08		php		                PHP
.3a0596	e2 20		sep #$20	            SEP #$20
.3a0598	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is STRING
.3a059a	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a059c	d0 02		bne $3a05a0	                BNE TYPE_ERR
.3a059e	28		plp		                PLP
.3a059f	60		rts		            RTS
.3a05a0					TYPE_ERR
.3a05a0	08		php		            PHP
.3a05a1	c2 20		rep #$20	            REP #$20
.3a05a3	48		pha		            PHA
.3a05a4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a05a7	5b		tcd		            TCD
.3a05a8	68		pla		            PLA
.3a05a9	28		plp		            PLP
.3a05aa	e2 20		sep #$20	            SEP #$20
.3a05ac	a9 04		lda #$04	            LDA #ERR_TYPE
.3a05ae	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a05b2	c2 20		rep #$20	            REP #$20
.3a05b4	29 ff 00	and #$00ff	            AND #$00FF
.3a05b7	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a05ba	e2 20		sep #$20	            SEP #$20
.3a05bc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a05bf					ASS_ARG1_INT16
.3a05bf	08		php		                PHP
.3a05c0	e2 20		sep #$20	            SEP #$20
.3a05c2	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a05c4	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a05c6	f0 07		beq $3a05cf	                BEQ check_range         ; If so: check the range
.3a05c8	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a05ca	d0 0b		bne $3a05d7	                BNE TYPE_ERR            ; If not: throw an error
.3a05cc	20 3b 59	jsr $3a593b	            JSR FTOI
.3a05cf					check_range
.3a05cf	c2 20		rep #$20	            REP #$20
.3a05d1	a5 25		lda $0825	                LDA ARGUMENT1+2         ; Validate it is 16-bit
.3a05d3	d0 21		bne $3a05f6	                BNE range_err
.3a05d5	28		plp		                PLP
.3a05d6	60		rts		            RTS
.3a05d7					TYPE_ERR
.3a05d7	08		php		            PHP
.3a05d8	c2 20		rep #$20	            REP #$20
.3a05da	48		pha		            PHA
.3a05db	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a05de	5b		tcd		            TCD
.3a05df	68		pla		            PLA
.3a05e0	28		plp		            PLP
.3a05e1	e2 20		sep #$20	            SEP #$20
.3a05e3	a9 04		lda #$04	            LDA #ERR_TYPE
.3a05e5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a05e9	c2 20		rep #$20	            REP #$20
.3a05eb	29 ff 00	and #$00ff	            AND #$00FF
.3a05ee	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a05f1	e2 20		sep #$20	            SEP #$20
.3a05f3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a05f6					RANGE_ERR
.3a05f6	08		php		            PHP
.3a05f7	c2 20		rep #$20	            REP #$20
.3a05f9	48		pha		            PHA
.3a05fa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a05fd	5b		tcd		            TCD
.3a05fe	68		pla		            PLA
.3a05ff	28		plp		            PLP
.3a0600	e2 20		sep #$20	            SEP #$20
.3a0602	a9 09		lda #$09	            LDA #ERR_RANGE
.3a0604	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0608	c2 20		rep #$20	            REP #$20
.3a060a	29 ff 00	and #$00ff	            AND #$00FF
.3a060d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a0610	e2 20		sep #$20	            SEP #$20
.3a0612	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0615					ASS_ARG1_BYTE
.3a0615	08		php		                PHP
.3a0616	e2 20		sep #$20	            SEP #$20
.3a0618	a5 27		lda $0827	                LDA ARGTYPE1            ; Verify that the type is INTEGER
.3a061a	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a061c	f0 07		beq $3a0625	                BEQ check_range         ; If so: check the range
.3a061e	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; Check if it's a float
.3a0620	d0 11		bne $3a0633	                BNE TYPE_ERR            ; If not: throw an error
.3a0622	20 3b 59	jsr $3a593b	            JSR FTOI
.3a0625	a5 26		lda $0826	check_range     LDA ARGUMENT1+3         ; Validate that the value is in byte range
.3a0627	d0 29		bne $3a0652	                BNE RANGE_ERR           ; If not... throw a range error
.3a0629	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a062b	d0 25		bne $3a0652	                BNE RANGE_ERR
.3a062d	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a062f	d0 21		bne $3a0652	                BNE RANGE_ERR
.3a0631	28		plp		                PLP
.3a0632	60		rts		            RTS
.3a0633					TYPE_ERR
.3a0633	08		php		            PHP
.3a0634	c2 20		rep #$20	            REP #$20
.3a0636	48		pha		            PHA
.3a0637	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a063a	5b		tcd		            TCD
.3a063b	68		pla		            PLA
.3a063c	28		plp		            PLP
.3a063d	e2 20		sep #$20	            SEP #$20
.3a063f	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0641	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0645	c2 20		rep #$20	            REP #$20
.3a0647	29 ff 00	and #$00ff	            AND #$00FF
.3a064a	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a064d	e2 20		sep #$20	            SEP #$20
.3a064f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0652					RANGE_ERR
.3a0652	08		php		            PHP
.3a0653	c2 20		rep #$20	            REP #$20
.3a0655	48		pha		            PHA
.3a0656	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0659	5b		tcd		            TCD
.3a065a	68		pla		            PLA
.3a065b	28		plp		            PLP
.3a065c	e2 20		sep #$20	            SEP #$20
.3a065e	a9 09		lda #$09	            LDA #ERR_RANGE
.3a0660	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0664	c2 20		rep #$20	            REP #$20
.3a0666	29 ff 00	and #$00ff	            AND #$00FF
.3a0669	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a066c	e2 20		sep #$20	            SEP #$20
.3a066e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0671					ASS_ARG1_FLOAT
.3a0671	08		php		                PHP
.3a0672	e2 20		sep #$20	            SEP #$20
.3a0674	a5 27		lda $0827	                LDA ARGTYPE1            ; Check the type
.3a0676	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.3a0678	f0 26		beq $3a06a0	                BEQ done                ; Then we're done
.3a067a	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.3a067c	f0 1f		beq $3a069d	                BEQ cast                ; Then cast it to float
.3a067e					type_err
.3a067e	08		php		            PHP
.3a067f	c2 20		rep #$20	            REP #$20
.3a0681	48		pha		            PHA
.3a0682	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a0685	5b		tcd		            TCD
.3a0686	68		pla		            PLA
.3a0687	28		plp		            PLP
.3a0688	e2 20		sep #$20	            SEP #$20
.3a068a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a068c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0690	c2 20		rep #$20	            REP #$20
.3a0692	29 ff 00	and #$00ff	            AND #$00FF
.3a0695	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a0698	e2 20		sep #$20	            SEP #$20
.3a069a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a069d					cast
.3a069d	20 35 59	jsr $3a5935	            JSR ITOF
.3a06a0	28		plp		done            PLP
.3a06a1	60		rts		            RTS
.3a06a2					ASS_ARG2_FLOAT
.3a06a2	08		php		                PHP
.3a06a3	e2 20		sep #$20	            SEP #$20
.3a06a5	a5 2d		lda $082d	                LDA ARGTYPE2            ; Check the type
.3a06a7	c9 01		cmp #$01	                CMP #TYPE_FLOAT         ; If it's float...
.3a06a9	f0 26		beq $3a06d1	                BEQ done                ; Then we're done
.3a06ab	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's integer...
.3a06ad	f0 1f		beq $3a06ce	                BEQ cast                ; Then cast it to float
.3a06af					type_err
.3a06af	08		php		            PHP
.3a06b0	c2 20		rep #$20	            REP #$20
.3a06b2	48		pha		            PHA
.3a06b3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a06b6	5b		tcd		            TCD
.3a06b7	68		pla		            PLA
.3a06b8	28		plp		            PLP
.3a06b9	e2 20		sep #$20	            SEP #$20
.3a06bb	a9 04		lda #$04	            LDA #ERR_TYPE
.3a06bd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a06c1	c2 20		rep #$20	            REP #$20
.3a06c3	29 ff 00	and #$00ff	            AND #$00FF
.3a06c6	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a06c9	e2 20		sep #$20	            SEP #$20
.3a06cb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a06ce					cast
.3a06ce	20 d3 06	jsr $3a06d3	            JSR CAST_ARG2_FLOAT
.3a06d1	28		plp		done            PLP
.3a06d2	60		rts		            RTS
.3a06d3					CAST_ARG2_FLOAT
.3a06d3	c2 20		rep #$20	            REP #$20
.3a06d5	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a06d7	48		pha		            PHA
.3a06d8	a5 23		lda $0823	            LDA ARGUMENT1
.3a06da	48		pha		            PHA
.3a06db	c2 20		rep #$20	            REP #$20
.3a06dd	a5 29		lda $0829	            LDA ARGUMENT2
.3a06df	85 23		sta $0823	            STA ARGUMENT1
.3a06e1	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a06e3	85 25		sta $0825	            STA ARGUMENT1+2
.3a06e5	e2 20		sep #$20	            SEP #$20
.3a06e7	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a06e9	85 27		sta $0827	            STA ARGTYPE1
.3a06eb	20 35 59	jsr $3a5935	            JSR ITOF
.3a06ee	c2 20		rep #$20	            REP #$20
.3a06f0	a5 23		lda $0823	            LDA ARGUMENT1
.3a06f2	85 29		sta $0829	            STA ARGUMENT2
.3a06f4	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a06f6	85 2b		sta $082b	            STA ARGUMENT2+2
.3a06f8	e2 20		sep #$20	            SEP #$20
.3a06fa	a9 01		lda #$01	            LDA #<TYPE_FLOAT
.3a06fc	85 2d		sta $082d	            STA ARGTYPE2
.3a06fe	c2 20		rep #$20	            REP #$20
.3a0700	68		pla		            PLA
.3a0701	85 23		sta $0823	            STA ARGUMENT1
.3a0703	68		pla		            PLA
.3a0704	85 25		sta $0825	            STA ARGUMENT1+2
.3a0706	60		rts		            RTS
.3a0707					ASS_ARGS_NUM
.3a0707	08		php		                PHP
.3a0708	e2 20		sep #$20	            SEP #$20
.3a070a	a5 27		lda $0827	                LDA ARGTYPE1                ; Check ARGUMENT1
.3a070c	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a070e	f0 23		beq $3a0733	                BEQ arg1_int
.3a0710	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a0712	f0 2e		beq $3a0742	                BEQ arg1_float
.3a0714					type_err
.3a0714	08		php		            PHP
.3a0715	c2 20		rep #$20	            REP #$20
.3a0717	48		pha		            PHA
.3a0718	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a071b	5b		tcd		            TCD
.3a071c	68		pla		            PLA
.3a071d	28		plp		            PLP
.3a071e	e2 20		sep #$20	            SEP #$20
.3a0720	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0722	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0726	c2 20		rep #$20	            REP #$20
.3a0728	29 ff 00	and #$00ff	            AND #$00FF
.3a072b	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a072e	e2 20		sep #$20	            SEP #$20
.3a0730	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0733	a5 2d		lda $082d	arg1_int        LDA ARGTYPE2                ; Check argument 2
.3a0735	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If integer, we're done
.3a0737	f0 16		beq $3a074f	                BEQ done
.3a0739	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If not float, throw an error
.3a073b	d0 d7		bne $3a0714	                BNE type_err
.3a073d	20 35 59	jsr $3a5935	            JSR ITOF
.3a0740	80 0d		bra $3a074f	                BRA done
.3a0742	a5 2d		lda $082d	arg1_float      LDA ARGTYPE2                ; Check argument 2
.3a0744	c9 01		cmp #$01	                CMP #TYPE_FLOAT             ; If it's float
.3a0746	f0 07		beq $3a074f	                BEQ done                    ; Then we're done
.3a0748	c9 00		cmp #$00	                CMP #TYPE_INTEGER           ; If it's not integer
.3a074a	d0 c8		bne $3a0714	                BNE type_err                ; Thrown an error
.3a074c	20 d3 06	jsr $3a06d3	            JSR CAST_ARG2_FLOAT
.3a074f					done
.3a074f	e2 20		sep #$20	            SEP #$20
.3a0751	a5 27		lda $0827	                LDA ARGTYPE1                ; Return the type code in A
.3a0753	28		plp		                PLP
.3a0754	60		rts		            RTS
.3a0755					ASS_ARGS_NUMSTR
.3a0755	08		php		                PHP
.3a0756	e2 20		sep #$20	            SEP #$20
.3a0758	a5 27		lda $0827	                LDA ARGTYPE1                ; Check to see if ARGUMENT1 is a string
.3a075a	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a075c	d0 25		bne $3a0783	                BNE numbers
.3a075e	a5 2d		lda $082d	                LDA ARGTYPE2                ; If ARGUMENT1 is a string, make sure ARGUMENT2 is
.3a0760	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a0762	f0 24		beq $3a0788	                BEQ done
.3a0764					TYPE_ERR
.3a0764	08		php		            PHP
.3a0765	c2 20		rep #$20	            REP #$20
.3a0767	48		pha		            PHA
.3a0768	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a076b	5b		tcd		            TCD
.3a076c	68		pla		            PLA
.3a076d	28		plp		            PLP
.3a076e	e2 20		sep #$20	            SEP #$20
.3a0770	a9 04		lda #$04	            LDA #ERR_TYPE
.3a0772	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a0776	c2 20		rep #$20	            REP #$20
.3a0778	29 ff 00	and #$00ff	            AND #$00FF
.3a077b	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a077e	e2 20		sep #$20	            SEP #$20
.3a0780	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a0783					numbers
.3a0783	20 07 07	jsr $3a0707	            JSR ASS_ARGS_NUM
.3a0786	a5 27		lda $0827	                LDA ARGTYPE1                ; Make sure A is the type
.3a0788	28		plp		done            PLP
.3a0789	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\tokens.s

.0000					TOKEN
>0000					precedence  .byte ?
>0001					length      .byte ?
>0002					name        .word <>?
>0004					eval        .word <>?
>0006					arity       .word <>?
.3a078a					PARSEINT
.3a078a	08		php		            PHP
.3a078b	0b		phd		            PHD
.3a078c	08		php		            PHP
.3a078d	c2 20		rep #$20	            REP #$20
.3a078f	48		pha		            PHA
.3a0790	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0793	5b		tcd		            TCD
.3a0794	68		pla		            PLA
.3a0795	28		plp		            PLP
.3a0796	c2 30		rep #$30	            REP #$30
.3a0798	64 23		stz $0823	            STZ ARGUMENT1       ; Default to Not-a-value
.3a079a	64 25		stz $0825	            STZ ARGUMENT1+2
.3a079c	e2 20		sep #$20	            SEP #$20
.3a079e	64 27		stz $0827	            STZ ARGTYPE1
.3a07a0	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it starts with '$'
.3a07a2	c9 26		cmp #$26	            CMP #'&'
.3a07a4	f0 44		beq $3a07ea	            BEQ check_hex       ; Yes: parse it as a hexadecimal number
.3a07a6					loop
.3a07a6	e2 20		sep #$20	            SEP #$20
.3a07a8	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.3a07aa	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a07ad	90 76		bcc $3a0825	            BCC done            ; No, we're done parsing
.3a07af	20 2c 04	jsr $3a042c	            JSR MULINT10
.3a07b2	38		sec		            SEC                 ; Convert the ASCII code to a number
.3a07b3	e9 30		sbc #$30	            SBC #'0'
.3a07b5	c2 20		rep #$20	            REP #$20
.3a07b7	29 ff 00	and #$00ff	            AND #$00FF
.3a07ba	18		clc		            CLC
.3a07bb	65 23		adc $0823	            ADC ARGUMENT1
.3a07bd	85 23		sta $0823	            STA ARGUMENT1
.3a07bf	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a07c1	69 00 00	adc #$0000	            ADC #0
.3a07c4	85 25		sta $0825	            STA ARGUMENT1+2
.3a07c6	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a07c9	80 db		bra $3a07a6	            BRA loop            ; And try to process it
.3a07cb					syntaxerr
.3a07cb	08		php		            PHP
.3a07cc	c2 20		rep #$20	            REP #$20
.3a07ce	48		pha		            PHA
.3a07cf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a07d2	5b		tcd		            TCD
.3a07d3	68		pla		            PLA
.3a07d4	28		plp		            PLP
.3a07d5	e2 20		sep #$20	            SEP #$20
.3a07d7	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a07d9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a07dd	c2 20		rep #$20	            REP #$20
.3a07df	29 ff 00	and #$00ff	            AND #$00FF
.3a07e2	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a07e5	e2 20		sep #$20	            SEP #$20
.3a07e7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a07ea					check_hex
.3a07ea	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a07ed	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.3a07ef	c9 48		cmp #$48	            CMP #'H'            ; Is it 'H'?
.3a07f1	f0 04		beq $3a07f7	            BEQ parse_hex       ; Yes: skip it and parse hex
.3a07f3	c9 68		cmp #$68	            CMP #'h'            ; Is it 'h'?
.3a07f5	d0 d4		bne $3a07cb	            BNE syntaxerr       ; No: throw an error
.3a07f7					parse_hex
.3a07f7	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a07fa					hexloop
.3a07fa	e2 20		sep #$20	            SEP #$20
.3a07fc	a7 00		lda [$0800]	            LDA [BIP]           ; Get the next character
.3a07fe	20 be 03	jsr $3a03be	            JSR ISHEX
.3a0801	90 22		bcc $3a0825	            BCC done            ; No, we're done parsing
.3a0803	20 df 03	jsr $3a03df	            JSR HEX2BIN
.3a0806	c2 20		rep #$20	            REP #$20
.3a0808	06 23		asl $0823	            ASL ARGUMENT1
.3a080a	26 25		rol $0825	            ROL ARGUMENT1+2
.3a080c	06 23		asl $0823	            ASL ARGUMENT1
.3a080e	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0810	06 23		asl $0823	            ASL ARGUMENT1
.3a0812	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0814	06 23		asl $0823	            ASL ARGUMENT1
.3a0816	26 25		rol $0825	            ROL ARGUMENT1+2
.3a0818	29 ff 00	and #$00ff	            AND #$00FF          ; Add binary number to ARGUMENT1
.3a081b	18		clc		            CLC
.3a081c	65 23		adc $0823	            ADC ARGUMENT1
.3a081e	85 23		sta $0823	            STA ARGUMENT1
.3a0820	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a0823	80 d5		bra $3a07fa	            BRA hexloop         ; And try to process it
.3a0825	2b		pld		done        PLD
.3a0826	28		plp		            PLP
.3a0827	60		rts		            RTS
.3a0828					PREVCHAR
.3a0828	08		php		            PHP
.3a0829	c2 30		rep #$30	            REP #$30
.3a082b	a5 04		lda $0804	            LDA BIPPREV
.3a082d	f0 1c		beq $3a084b	            BEQ ret_false
.3a082f	38		sec		            SEC
.3a0830	a5 04		lda $0804	            LDA BIPPREV
.3a0832	e5 1a		sbc $081a	            SBC CURLINE
.3a0834	a8		tay		            TAY
.3a0835	e2 20		sep #$20	            SEP #$20
.3a0837	b7 1a		lda [$081a],y	loop        LDA [CURLINE],Y
.3a0839	f0 10		beq $3a084b	            BEQ ret_false
.3a083b	c9 20		cmp #$20	            CMP #CHAR_SP
.3a083d	f0 06		beq $3a0845	            BEQ go_back
.3a083f	c9 09		cmp #$09	            CMP #CHAR_TAB
.3a0841	f0 02		beq $3a0845	            BEQ go_back
.3a0843	28		plp		            PLP
.3a0844	60		rts		            RTS
.3a0845	88		dey		go_back     DEY
.3a0846	c0 ff ff	cpy #$ffff	            CPY #$FFFF
.3a0849	d0 ec		bne $3a0837	            BNE loop
.3a084b					ret_false
.3a084b	a9 00		lda #$00	            LDA #0
.3a084d	60		rts		            RTS
.3a084e					TOKENIZE
.3a084e	08		php		            PHP
.3a084f	0b		phd		            PHD
.3a0850	08		php		            PHP
.3a0851	c2 20		rep #$20	            REP #$20
.3a0853	48		pha		            PHA
.3a0854	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0857	5b		tcd		            TCD
.3a0858	68		pla		            PLA
.3a0859	28		plp		            PLP
.3a085a	c2 30		rep #$30	            REP #$30
.3a085c	a5 1a		lda $081a	            LDA CURLINE
.3a085e	85 00		sta $0800	            STA BIP
.3a0860	e2 20		sep #$20	            SEP #$20
.3a0862	a5 1c		lda $081c	            LDA CURLINE+2
.3a0864	85 02		sta $0802	            STA BIP+2
.3a0866	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a0869	a7 00		lda [$0800]	            LDA [BIP]               ; Do we have a numeral?
.3a086b	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a086e	90 0c		bcc $3a087c	            BCC mv_curline          ; No: adjust CURLINE and tokenize
.3a0870	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a0873	c2 20		rep #$20	            REP #$20
.3a0875	a5 23		lda $0823	            LDA ARGUMENT1
.3a0877	85 d7		sta $08d7	            STA LINENUM
.3a0879	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a087c					mv_curline
.3a087c	c2 20		rep #$20	            REP #$20
.3a087e	a5 00		lda $0800	            LDA BIP
.3a0880	85 1a		sta $081a	            STA CURLINE
.3a0882	e2 20		sep #$20	            SEP #$20
.3a0884	a5 02		lda $0802	            LDA BIP+2
.3a0886	85 1c		sta $081c	            STA CURLINE+2
.3a0888	20 9c 08	jsr $3a089c	            JSR FINDREM
.3a088b	e2 20		sep #$20	            SEP #$20
.3a088d					loop
.3a088d	20 0d 09	jsr $3a090d	            JSR TKFINDTOKEN
.3a0890	c9 00		cmp #$00	            CMP #0                  ; Did we find a token?
.3a0892	f0 05		beq $3a0899	            BEQ done                ; No: return
.3a0894	20 bb 0a	jsr $3a0abb	            JSR TKWRITE
.3a0897	80 f4		bra $3a088d	            BRA loop                ; And try again
.3a0899	2b		pld		done        PLD
.3a089a	28		plp		            PLP
.3a089b	60		rts		            RTS
.3a089c					FINDREM
.3a089c	08		php		            PHP
.3a089d	c2 20		rep #$20	            REP #$20
.3a089f	a5 1a		lda $081a	            LDA CURLINE             ; Point BIP to the beginning of the line
.3a08a1	85 00		sta $0800	            STA BIP
.3a08a3	a5 1c		lda $081c	            LDA CURLINE+2
.3a08a5	85 02		sta $0802	            STA BIP+2
.3a08a7	a2 00 00	ldx #$0000	            LDX #0                  ; X will be a flag that we're at the beginning
.3a08aa	e2 20		sep #$20	            SEP #$20
.3a08ac	a0 00 00	ldy #$0000	loop        LDY #0
.3a08af	e0 00 00	cpx #$0000	            CPX #0                  ; If we are at the first space on the line
.3a08b2	f0 0d		beq $3a08c1	            BEQ skip_delim          ; ... skip looking for a delimiter
.3a08b4	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a08b6	f0 53		beq $3a090b	            BEQ done                ; Is it null? Then we're done
.3a08b8	c9 3a		cmp #$3a	            CMP #':'                ; Is it ":"
.3a08ba	f0 04		beq $3a08c0	            BEQ found_delim         ; Yes: we might have a REM... look for E
.3a08bc	c9 20		cmp #$20	            CMP #CHAR_SP
.3a08be	d0 33		bne $3a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a08c0	c8		iny		found_delim INY
.3a08c1	b7 00		lda [$0800],y	skip_delim  LDA [BIP],Y             ; Get the first character
.3a08c3	f0 46		beq $3a090b	            BEQ done                ; Is it null? Then we're done
.3a08c5	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.3a08c7	f0 10		beq $3a08d9	            BEQ found_R             ; Yes: we might have a REM... look for E
.3a08c9	c9 72		cmp #$72	            CMP #'r'
.3a08cb	d0 26		bne $3a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a08cd	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a08cf	f0 3a		beq $3a090b	            BEQ done                ; Is it null? Then we're done
.3a08d1	c9 52		cmp #$52	            CMP #'R'                ; Is it "R"
.3a08d3	f0 04		beq $3a08d9	            BEQ found_R             ; Yes: we might have a REM... look for E
.3a08d5	c9 72		cmp #$72	            CMP #'r'
.3a08d7	d0 1a		bne $3a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a08d9	c8		iny		found_R     INY
.3a08da	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a08dc	f0 2d		beq $3a090b	            BEQ done                ; Is it null? Then we're done
.3a08de	c9 45		cmp #$45	            CMP #'E'                ; Is it "E"
.3a08e0	f0 04		beq $3a08e6	            BEQ found_E             ; Yes: we might have a REM... look for M
.3a08e2	c9 65		cmp #$65	            CMP #'e'
.3a08e4	d0 0d		bne $3a08f3	            BNE next_pos            ; No: we didn't find REM here... check next position
.3a08e6	c8		iny		found_E     INY
.3a08e7	b7 00		lda [$0800],y	            LDA [BIP],Y             ; Get the first character
.3a08e9	f0 20		beq $3a090b	            BEQ done                ; Is it null? Then we're done
.3a08eb	c9 4d		cmp #$4d	            CMP #'M'                ; Is it "E"
.3a08ed	f0 0a		beq $3a08f9	            BEQ found_REM           ; Yes: we might have a REM... look for M
.3a08ef	c9 6d		cmp #$6d	            CMP #'m'
.3a08f1	f0 06		beq $3a08f9	            BEQ found_REM
.3a08f3	e8		inx		next_pos    INX                     ; Indicate we're no longer at the first position
.3a08f4	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a08f7	80 b3		bra $3a08ac	            BRA loop
.3a08f9	a7 00		lda [$0800]	found_REM   LDA [BIP]               ; Get the current character
.3a08fb	c9 3a		cmp #$3a	            CMP #':'                ; Is it the delimiter?
.3a08fd	d0 03		bne $3a0902	            BNE ret_REM             ; No: go ahead and return REM at that location
.3a08ff	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a0902	a9 03		lda #$03	ret_REM     LDA #3
.3a0904	85 1e		sta $081e	            STA CURTOKLEN           ; Set the size
.3a0906	a9 91		lda #$91	            LDA #TOK_REM            ; And the token to write
.3a0908	20 bb 0a	jsr $3a0abb	            JSR TKWRITE
.3a090b	28		plp		done        PLP
.3a090c	60		rts		            RTS
.3a090d					TKFINDTOKEN
.3a090d	08		php		            PHP
.3a090e	0b		phd		            PHD
.3a090f	08		php		            PHP
.3a0910	c2 20		rep #$20	            REP #$20
.3a0912	48		pha		            PHA
.3a0913	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0916	5b		tcd		            TCD
.3a0917	68		pla		            PLA
.3a0918	28		plp		            PLP
.3a0919	e2 20		sep #$20	            SEP #$20
.3a091b	a9 7f		lda #$7f	            LDA #$7F                ; Start off looking for any size token
.3a091d	85 1e		sta $081e	            STA CURTOKLEN
.3a091f					next_size
.3a091f	c2 10		rep #$10	            REP #$10
.3a0921	20 70 0a	jsr $3a0a70	            JSR TKNEXTBIG
.3a0924	a5 1e		lda $081e	            LDA CURTOKLEN           ; Are there any keywords left?
.3a0926	d0 03		bne $3a092b	            BNE else
.3a0928	4c b0 09	jmp $3a09b0	            JMP done                ; No: return to caller
.3a092b					else
.3a092b	c2 20		rep #$20	            REP #$20
.3a092d	a5 1a		lda $081a	            LDA CURLINE
.3a092f	85 00		sta $0800	            STA BIP
.3a0931	e2 20		sep #$20	            SEP #$20
.3a0933	a5 1c		lda $081c	            LDA CURLINE+2
.3a0935	85 02		sta $0802	            STA BIP+2
.3a0937	c2 20		rep #$20	            REP #$20
.3a0939	64 04		stz $0804	            STZ BIPPREV             ; Clear BIPPREV (point to the previous character)
.3a093b	64 06		stz $0806	            STZ BIPPREV+2
.3a093d					check_len
.3a093d	e2 30		sep #$30	            SEP #$30
.3a093f	a0 00		ldy #$00	            LDY #0
.3a0941	b7 00		lda [$0800],y	nul_scan    LDA [BIP],Y
.3a0943	f0 da		beq $3a091f	            BEQ next_size
.3a0945	c9 91		cmp #$91	            CMP #TOK_REM            ; Tokenization stops at REMarks too
.3a0947	f0 d6		beq $3a091f	            BEQ next_size
.3a0949	c8		iny		            INY
.3a094a	c4 1e		cpy $081e	            CPY CURTOKLEN
.3a094c	90 f3		bcc $3a0941	            BCC nul_scan
.3a094e	c2 10		rep #$10	            REP #$10
.3a0950	a7 00		lda [$0800]	            LDA [BIP]               ; Check the current character
.3a0952	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.3a0954	d0 05		bne $3a095b	            BNE chk_keyword         ; No: check to see if we are at the start of a possible keyword
.3a0956	20 d2 09	jsr $3a09d2	            JSR SKIPQUOTED
.3a0959	80 28		bra $3a0983	            BRA go_next             ; And move on to the next character
.3a095b	a5 1e		lda $081e	chk_keyword LDA CURTOKLEN           ; If the token length is <=2
.3a095d	c9 03		cmp #$03	            CMP #3
.3a095f	90 19		bcc $3a097a	            BLT try_match           ; ... we don't need a delimiter, go ahead and convert it
.3a0961	c2 20		rep #$20	            REP #$20
.3a0963	a5 00		lda $0800	            LDA BIP                 ; Check to see if we're at the start of the line
.3a0965	c5 1a		cmp $081a	            CMP CURLINE
.3a0967	d0 08		bne $3a0971	            BNE chk_delim           ; No: we need to check for a delimiters
.3a0969	e2 20		sep #$20	            SEP #$20
.3a096b	a5 02		lda $0802	            LDA BIP+2
.3a096d	c5 1c		cmp $081c	            CMP CURLINE+2
.3a096f	f0 09		beq $3a097a	            BEQ try_match           ; Yes: this can be a keyword
.3a0971					chk_delim
.3a0971	e2 20		sep #$20	            SEP #$20
.3a0973	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.3a0975	20 7e 4e	jsr $3a4e7e	            JSR ISVARCHAR
.3a0978	b0 09		bcs $3a0983	            BCS go_next             ; Yes: we can't start a keyword here
.3a097a					try_match
.3a097a	e2 20		sep #$20	            SEP #$20
.3a097c	20 e2 09	jsr $3a09e2	            JSR TKMATCH
.3a097f	c9 00		cmp #$00	            CMP #0                  ; Did we get one?
.3a0981	d0 11		bne $3a0994	            BNE found               ; Yes: return it
.3a0983					go_next
.3a0983	c2 20		rep #$20	            REP #$20
.3a0985	a5 00		lda $0800	            LDA BIP                 ; Update BIPPREV as the point to the previous character
.3a0987	85 04		sta $0804	            STA BIPPREV
.3a0989	e2 20		sep #$20	            SEP #$20
.3a098b	a5 02		lda $0802	            LDA BIP+2
.3a098d	85 06		sta $0806	            STA BIPPREV+2
.3a098f	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a0992	80 a9		bra $3a093d	            BRA check_len           ; And try there
.3a0994					found
.3a0994	c9 81		cmp #$81	            CMP #TOK_MINUS          ; Found a token... is it minus?
.3a0996	d0 18		bne $3a09b0	            BNE done                ; Nope: go ahead and return it
.3a0998	20 28 08	jsr $3a0828	            JSR PREVCHAR
.3a099b	c9 00		cmp #$00	            CMP #0                  ; Did we get anything?
.3a099d	f0 14		beq $3a09b3	            BEQ syntax              ; No: line cannot start with minus... throw error
.3a099f	89 80		bit #$80	            BIT #$80                ; Is it a token?
.3a09a1	10 0b		bpl $3a09ae	            BPL binaryminus         ; No: leave token unchanged
.3a09a3	20 5c 0b	jsr $3a0b5c	            JSR TOKTYPE
.3a09a6	c9 30		cmp #$30	            CMP #TOK_TY_FUNC        ; Is it a function?
.3a09a8	f0 04		beq $3a09ae	            BEQ binaryminus         ; Yes: then this should be a binary minus operator
.3a09aa	a9 af		lda #$af	            LDA #TOK_NEGATIVE       ; Otherwise: this should be a unary minus (negation)
.3a09ac	80 02		bra $3a09b0	            BRA done
.3a09ae	a9 81		lda #$81	binaryminus LDA #TOK_MINUS          ; It's data... so token should be for binary minus
.3a09b0					done
.3a09b0	2b		pld		            PLD
.3a09b1	28		plp		            PLP
.3a09b2	60		rts		            RTS
.3a09b3					syntax
.3a09b3	08		php		            PHP
.3a09b4	c2 20		rep #$20	            REP #$20
.3a09b6	48		pha		            PHA
.3a09b7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a09ba	5b		tcd		            TCD
.3a09bb	68		pla		            PLA
.3a09bc	28		plp		            PLP
.3a09bd	e2 20		sep #$20	            SEP #$20
.3a09bf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a09c1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a09c5	c2 20		rep #$20	            REP #$20
.3a09c7	29 ff 00	and #$00ff	            AND #$00FF
.3a09ca	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a09cd	e2 20		sep #$20	            SEP #$20
.3a09cf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a09d2					SKIPQUOTED
.3a09d2	08		php		            PHP
.3a09d3	e2 20		sep #$20	            SEP #$20
.3a09d5					loop
.3a09d5	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a09d8	a7 00		lda [$0800]	            LDA [BIP]
.3a09da	f0 04		beq $3a09e0	            BEQ done                ; If EOL, just return
.3a09dc	c9 22		cmp #$22	            CMP #CHAR_DQUOTE        ; Is it a double quote?
.3a09de	d0 f5		bne $3a09d5	            BNE loop                ; No: keep skipping
.3a09e0	28		plp		done        PLP
.3a09e1	60		rts		            RTS
.3a09e2					TKMATCH
.3a09e2	da		phx		            PHX
.3a09e3	5a		phy		            PHY
.3a09e4	08		php		            PHP
.3a09e5	0b		phd		            PHD
.3a09e6	08		php		            PHP
.3a09e7	c2 20		rep #$20	            REP #$20
.3a09e9	48		pha		            PHA
.3a09ea	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a09ed	5b		tcd		            TCD
.3a09ee	68		pla		            PLA
.3a09ef	28		plp		            PLP
.3a09f0	c2 20		rep #$20	            REP #$20
.3a09f2	a5 04		lda $0804	            LDA BIPPREV
.3a09f4	d0 0a		bne $3a0a00	            BNE check_prev
.3a09f6	e2 20		sep #$20	            SEP #$20
.3a09f8	a5 04		lda $0804	            LDA BIPPREV
.3a09fa	d0 04		bne $3a0a00	            BNE check_prev
.3a09fc	a9 00		lda #$00	            LDA #0
.3a09fe	80 0a		bra $3a0a0a	            BRA save_delim
.3a0a00					check_prev
.3a0a00	e2 20		sep #$20	            SEP #$20
.3a0a02	a7 04		lda [$0804]	            LDA [BIPPREV]           ; Get the previous character
.3a0a04	20 7e 4e	jsr $3a4e7e	            JSR ISVARCHAR
.3a0a07	a9 00		lda #$00	            LDA #0
.3a0a09	2a		rol a		            ROL A
.3a0a0a	85 28		sta $0828	save_delim  STA SIGN1               ; SIGN1 := 1 if it is a variable name character
.3a0a0c	c2 30		rep #$30	            REP #$30
.3a0a0e	a9 b0 0b	lda #$0bb0	            LDA #<>TOKENS           ; Set INDEX to point to the first token record
.3a0a11	85 08		sta $0808	            STA INDEX
.3a0a13	e2 20		sep #$20	            SEP #$20
.3a0a15	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0a17	85 0a		sta $080a	            STA INDEX+2
.3a0a19	a2 80 00	ldx #$0080	            LDX #$80                ; Set the initial token ID
.3a0a1c					token_loop
.3a0a1c	e2 20		sep #$20	            SEP #$20
.3a0a1e	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.3a0a21	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the current token
.3a0a23	f0 31		beq $3a0a56	            BEQ no_match            ; Is it 0? We're out of tokens... no match found
.3a0a25	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it the same as the size of the window?
.3a0a27	d0 32		bne $3a0a5b	            BNE next_token          ; No: try the next token
.3a0a29	c2 30		rep #$30	            REP #$30
.3a0a2b	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.3a0a2e	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the pointer to the token's name
.3a0a30	85 0c		sta $080c	            STA SCRATCH             ; Set SCRATCH to point to the token's name
.3a0a32	e2 20		sep #$20	            SEP #$20
.3a0a34	a9 3a		lda #$3a	            LDA #`DATA_BLOCK
.3a0a36	85 0e		sta $080e	            STA SCRATCH+2
.3a0a38	a5 28		lda $0828	            LDA SIGN1               ; Is previous character a variable name character?
.3a0a3a	f0 07		beq $3a0a43	            BEQ cmp_keyword         ; No: we can check for this token
.3a0a3c	a7 0c		lda [$080c]	            LDA [SCRATCH]           ; Get the token's first character
.3a0a3e	20 7e 4e	jsr $3a4e7e	            JSR ISVARCHAR
.3a0a41	b0 18		bcs $3a0a5b	            BCS next_token          ; Yes: skip this token
.3a0a43					cmp_keyword
.3a0a43	e2 10		sep #$10	            SEP #$10
.3a0a45	a0 00		ldy #$00	            LDY #0
.3a0a47	b7 00		lda [$0800],y	cmp_loop    LDA [BIP],Y             ; Get the character in the window
.3a0a49	20 08 04	jsr $3a0408	            JSR TOUPPERA
.3a0a4c	d7 0c		cmp [$080c],y	            CMP [SCRATCH],Y         ; Compare to the character in the token
.3a0a4e	d0 0b		bne $3a0a5b	            BNE next_token          ; If they don't match, try the next token
.3a0a50	c8		iny		            INY                     ; Move to the next character in the window
.3a0a51	c4 1e		cpy $081e	            CPY CURTOKLEN           ; Have we checked the whole window?
.3a0a53	90 f2		bcc $3a0a47	            BCC cmp_loop            ; No: check this next character
.3a0a55	8a		txa		            TXA                     ; Move the token ID to A
.3a0a56	2b		pld		no_match    PLD
.3a0a57	28		plp		            PLP
.3a0a58	7a		ply		            PLY
.3a0a59	fa		plx		            PLX
.3a0a5a	60		rts		            RTS
.3a0a5b					next_token
.3a0a5b	c2 30		rep #$30	            REP #$30
.3a0a5d	18		clc		            CLC
.3a0a5e	a5 08		lda $0808	            LDA INDEX
.3a0a60	69 08 00	adc #$0008	            ADC #size(TOKEN)
.3a0a63	85 08		sta $0808	            STA INDEX
.3a0a65	e2 20		sep #$20	            SEP #$20
.3a0a67	a5 0a		lda $080a	            LDA INDEX+2
.3a0a69	69 00		adc #$00	            ADC #0
.3a0a6b	85 0a		sta $080a	            STA INDEX+2
.3a0a6d	e8		inx		            INX                     ; Increment the token ID
.3a0a6e	80 ac		bra $3a0a1c	            BRA token_loop          ; And check that token
.3a0a70					TKNEXTBIG
.3a0a70	08		php		            PHP
.3a0a71	0b		phd		            PHD
.3a0a72	8b		phb		            PHB
.3a0a73	08		php		            PHP
.3a0a74	c2 20		rep #$20	            REP #$20
.3a0a76	48		pha		            PHA
.3a0a77	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0a7a	5b		tcd		            TCD
.3a0a7b	68		pla		            PLA
.3a0a7c	28		plp		            PLP
.3a0a7d	c2 30		rep #$30	            REP #$30
.3a0a7f	a9 b0 0b	lda #$0bb0	            LDA #<>TOKENS
.3a0a82	85 08		sta $0808	            STA INDEX
.3a0a84	a9 3a 00	lda #$003a	            LDA #`TOKENS
.3a0a87	85 0a		sta $080a	            STA INDEX+2
.3a0a89	64 0c		stz $080c	            STZ SCRATCH             ; Clear SCRATCH
.3a0a8b					loop
.3a0a8b	e2 20		sep #$20	            SEP #$20
.3a0a8d	a0 01 00	ldy #$0001	            LDY #TOKEN.length
.3a0a90	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the length of the token
.3a0a92	f0 1d		beq $3a0ab1	            BEQ done                ; If length is 0, we're done
.3a0a94	c5 1e		cmp $081e	            CMP CURTOKLEN           ; Is it >= CURTOKLEN?
.3a0a96	b0 06		bcs $3a0a9e	            BGE skip                ; Yes: skip to the next token
.3a0a98	c5 0c		cmp $080c	            CMP SCRATCH             ; No: is it < SCRATCH?
.3a0a9a	90 02		bcc $3a0a9e	            BLT skip                ; Yes: skip to the next token
.3a0a9c	85 0c		sta $080c	            STA SCRATCH             ; No: it's our new longest token!
.3a0a9e					skip
.3a0a9e	c2 20		rep #$20	            REP #$20
.3a0aa0	18		clc		            CLC
.3a0aa1	a5 08		lda $0808	            LDA INDEX
.3a0aa3	69 08 00	adc #$0008	            ADC #size(TOKEN)
.3a0aa6	85 08		sta $0808	            STA INDEX
.3a0aa8	a5 0a		lda $080a	            LDA INDEX+2
.3a0aaa	69 00 00	adc #$0000	            ADC #0
.3a0aad	85 0a		sta $080a	            STA INDEX+2
.3a0aaf	80 da		bra $3a0a8b	            BRA loop                ; And go around for another pass
.3a0ab1					done
.3a0ab1	e2 20		sep #$20	            SEP #$20
.3a0ab3	a5 0c		lda $080c	            LDA SCRATCH
.3a0ab5	85 1e		sta $081e	            STA CURTOKLEN
.3a0ab7	ab		plb		            PLB
.3a0ab8	2b		pld		            PLD
.3a0ab9	28		plp		            PLP
.3a0aba	60		rts		            RTS
.3a0abb					TKWRITE
.3a0abb	08		php		            PHP
.3a0abc	0b		phd		            PHD
.3a0abd	08		php		            PHP
.3a0abe	c2 20		rep #$20	            REP #$20
.3a0ac0	48		pha		            PHA
.3a0ac1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0ac4	5b		tcd		            TCD
.3a0ac5	68		pla		            PLA
.3a0ac6	28		plp		            PLP
.3a0ac7	e2 20		sep #$20	            SEP #$20
.3a0ac9	87 00		sta [$0800]	            STA [BIP]               ; Write the token to the line
.3a0acb	c2 20		rep #$20	            REP #$20
.3a0acd	18		clc		            CLC
.3a0ace	a5 00		lda $0800	            LDA BIP
.3a0ad0	69 01 00	adc #$0001	            ADC #1
.3a0ad3	85 08		sta $0808	            STA INDEX
.3a0ad5	a5 02		lda $0802	            LDA BIP+2
.3a0ad7	69 00 00	adc #$0000	            ADC #0
.3a0ada	85 0a		sta $080a	            STA INDEX+2
.3a0adc	e2 10		sep #$10	            SEP #$10
.3a0ade	a4 1e		ldy $081e	            LDY CURTOKLEN           ; Y will be the number of characters to move down
.3a0ae0	88		dey		            DEY
.3a0ae1					copy_down
.3a0ae1	e2 20		sep #$20	            SEP #$20
.3a0ae3	b7 08		lda [$0808],y	            LDA [INDEX],Y           ; Get the byte to move down
.3a0ae5	87 08		sta [$0808]	            STA [INDEX]             ; Move it down
.3a0ae7	f0 13		beq $3a0afc	            BEQ done                ; We've reached the end of the line
.3a0ae9	c2 20		rep #$20	            REP #$20
.3a0aeb	18		clc		            CLC
.3a0aec	a5 08		lda $0808	            LDA INDEX
.3a0aee	69 01 00	adc #$0001	            ADC #1
.3a0af1	85 08		sta $0808	            STA INDEX
.3a0af3	a5 0a		lda $080a	            LDA INDEX+2
.3a0af5	69 00 00	adc #$0000	            ADC #0
.3a0af8	85 0a		sta $080a	            STA INDEX+2
.3a0afa	80 e5		bra $3a0ae1	            BRA copy_down
.3a0afc	2b		pld		done        PLD
.3a0afd	28		plp		            PLP
.3a0afe	60		rts		            RTS
.3a0aff					GETTOKREC
.3a0aff	08		php		            PHP
.3a0b00	c2 30		rep #$30	            REP #$30
.3a0b02	29 7f 00	and #$007f	            AND #$007F
.3a0b05	0a		asl a		            ASL A
.3a0b06	0a		asl a		            ASL A
.3a0b07	0a		asl a		            ASL A
.3a0b08	18		clc		            CLC
.3a0b09	69 b0 0b	adc #$0bb0	            ADC #<>TOKENS
.3a0b0c	aa		tax		            TAX                         ; X is now the data bank relative address of the token record
.3a0b0d	28		plp		            PLP
.3a0b0e	60		rts		            RTS
.3a0b0f					TOKPRECED
.3a0b0f	08		php		            PHP
.3a0b10	8b		phb		            PHB
.3a0b11	0b		phd		            PHD
.3a0b12	08		php		            PHP
.3a0b13	c2 20		rep #$20	            REP #$20
.3a0b15	48		pha		            PHA
.3a0b16	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b19	5b		tcd		            TCD
.3a0b1a	68		pla		            PLA
.3a0b1b	28		plp		            PLP
.3a0b1c	08		php		            PHP
.3a0b1d	e2 20		sep #$20	            SEP #$20
.3a0b1f	48		pha		            PHA
.3a0b20	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0b22	48		pha		            PHA
.3a0b23	ab		plb		            PLB
.3a0b24	68		pla		            PLA
.3a0b25	28		plp		            PLP
.3a0b26	e2 20		sep #$20	            SEP #$20
.3a0b28	c2 10		rep #$10	            REP #$10
.3a0b2a	20 ff 0a	jsr $3a0aff	            JSR GETTOKREC
.3a0b2d	bd 00 00	lda $3a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.3a0b30	c2 20		rep #$20	            REP #$20
.3a0b32	29 0f 00	and #$000f	            AND #$000F                  ; Mask off the type code
.3a0b35	2b		pld		            PLD
.3a0b36	ab		plb		            PLB
.3a0b37	28		plp		            PLP
.3a0b38	60		rts		            RTS
.3a0b39					TOKEVAL
.3a0b39	08		php		            PHP
.3a0b3a	8b		phb		            PHB
.3a0b3b	0b		phd		            PHD
.3a0b3c	08		php		            PHP
.3a0b3d	c2 20		rep #$20	            REP #$20
.3a0b3f	48		pha		            PHA
.3a0b40	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b43	5b		tcd		            TCD
.3a0b44	68		pla		            PLA
.3a0b45	28		plp		            PLP
.3a0b46	08		php		            PHP
.3a0b47	e2 20		sep #$20	            SEP #$20
.3a0b49	48		pha		            PHA
.3a0b4a	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0b4c	48		pha		            PHA
.3a0b4d	ab		plb		            PLB
.3a0b4e	68		pla		            PLA
.3a0b4f	28		plp		            PLP
.3a0b50	c2 30		rep #$30	            REP #$30
.3a0b52	20 ff 0a	jsr $3a0aff	            JSR GETTOKREC
.3a0b55	bd 04 00	lda $3a0004,x	            LDA #TOKEN.eval,B,X         ; Get the address of the evaluation function
.3a0b58	2b		pld		            PLD
.3a0b59	ab		plb		            PLB
.3a0b5a	28		plp		            PLP
.3a0b5b	60		rts		            RTS
.3a0b5c					TOKTYPE
.3a0b5c	08		php		            PHP
.3a0b5d	8b		phb		            PHB
.3a0b5e	0b		phd		            PHD
.3a0b5f	08		php		            PHP
.3a0b60	c2 20		rep #$20	            REP #$20
.3a0b62	48		pha		            PHA
.3a0b63	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b66	5b		tcd		            TCD
.3a0b67	68		pla		            PLA
.3a0b68	28		plp		            PLP
.3a0b69	08		php		            PHP
.3a0b6a	e2 20		sep #$20	            SEP #$20
.3a0b6c	48		pha		            PHA
.3a0b6d	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0b6f	48		pha		            PHA
.3a0b70	ab		plb		            PLB
.3a0b71	68		pla		            PLA
.3a0b72	28		plp		            PLP
.3a0b73	e2 20		sep #$20	            SEP #$20
.3a0b75	c2 10		rep #$10	            REP #$10
.3a0b77	20 ff 0a	jsr $3a0aff	            JSR GETTOKREC
.3a0b7a	bd 00 00	lda $3a0000,x	            LDA #TOKEN.precedence,B,X   ; Get the precedence
.3a0b7d	c2 20		rep #$20	            REP #$20
.3a0b7f	29 f0 00	and #$00f0	            AND #$00F0                  ; Mask off the type code
.3a0b82	2b		pld		            PLD
.3a0b83	ab		plb		            PLB
.3a0b84	28		plp		            PLP
.3a0b85	60		rts		            RTS
.3a0b86					TOKARITY
.3a0b86	08		php		            PHP
.3a0b87	8b		phb		            PHB
.3a0b88	0b		phd		            PHD
.3a0b89	08		php		            PHP
.3a0b8a	c2 20		rep #$20	            REP #$20
.3a0b8c	48		pha		            PHA
.3a0b8d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0b90	5b		tcd		            TCD
.3a0b91	68		pla		            PLA
.3a0b92	28		plp		            PLP
.3a0b93	08		php		            PHP
.3a0b94	e2 20		sep #$20	            SEP #$20
.3a0b96	48		pha		            PHA
.3a0b97	a9 3a		lda #$3a	            LDA #`TOKENS
.3a0b99	48		pha		            PHA
.3a0b9a	ab		plb		            PLB
.3a0b9b	68		pla		            PLA
.3a0b9c	28		plp		            PLP
.3a0b9d	e2 20		sep #$20	            SEP #$20
.3a0b9f	c2 10		rep #$10	            REP #$10
.3a0ba1	20 ff 0a	jsr $3a0aff	            JSR GETTOKREC
.3a0ba4	bd 06 00	lda $3a0006,x	            LDA #TOKEN.arity,B,X        ; Get the arity
.3a0ba7	c2 20		rep #$20	            REP #$20
.3a0ba9	29 ff 00	and #$00ff	            AND #$00FF
.3a0bac	2b		pld		            PLD
.3a0bad	ab		plb		            PLB
.3a0bae	28		plp		            PLP
.3a0baf	60		rts		            RTS
=$00					TOK_EOL = $00
=$01					TOK_FUNC_OPEN = $01     ; A pseudo-token to push to the operator stack to mark
=$00					TOK_TY_OP = $00         ; The token is an operator
=$10					TOK_TY_CMD = $10        ; The token is a command (e.g. RUN, LIST, etc.)
=$20					TOK_TY_STMNT = $20      ; The token is a statement (e.g. INPUT, PRINT, DIM, etc.)
=$30					TOK_TY_FUNC = $30       ; The token is a function (e.g. SIN, COS, TAB, etc.)
=$40					TOK_TY_PUNCT = $40      ; The token is a punctuation mark (e.g. "(", ")")
=$50					TOK_TY_BYWRD = $50      ; The token is a by-word (e.g. STEP, TO, WEND, etc.)
.3a0bb0					TOKENS
=$80					TOK_PLUS = $80
>3ad010	2b 00				TOKEN_TEXT  .null "+"
>3a0bb0	03				precedence  .byte TOK_TY_OP | 3
>3a0bb1	01				length      .byte len("+")
>3a0bb2	10 d0				name        .word <>TOKEN_TEXT
>3a0bb4	fd 25				eval        .word <>OP_PLUS
>3a0bb6	02 00				arity       .word <>2
=$81					TOK_MINUS = $81
>3ad012	2d 00				TOKEN_TEXT  .null "-"
>3a0bb8	03				precedence  .byte TOK_TY_OP | 3
>3a0bb9	01				length      .byte len("-")
>3a0bba	12 d0				name        .word <>TOKEN_TEXT
>3a0bbc	3d 26				eval        .word <>OP_MINUS
>3a0bbe	02 00				arity       .word <>2
=$82					TOK_MULT = $82
>3ad014	2a 00				TOKEN_TEXT  .null "*"
>3a0bc0	02				precedence  .byte TOK_TY_OP | 2
>3a0bc1	01				length      .byte len("*")
>3a0bc2	14 d0				name        .word <>TOKEN_TEXT
>3a0bc4	74 26				eval        .word <>OP_MULTIPLY
>3a0bc6	02 00				arity       .word <>2
=$83					TOK_DIVIDE = $83
>3ad016	2f 00				TOKEN_TEXT  .null "/"
>3a0bc8	02				precedence  .byte TOK_TY_OP | 2
>3a0bc9	01				length      .byte len("/")
>3a0bca	16 d0				name        .word <>TOKEN_TEXT
>3a0bcc	ab 26				eval        .word <>OP_DIVIDE
>3a0bce	02 00				arity       .word <>2
=$84					TOK_MOD = $84
>3ad018	4d 4f 44 00			TOKEN_TEXT  .null "MOD"
>3a0bd0	02				precedence  .byte TOK_TY_OP | 2
>3a0bd1	03				length      .byte len("MOD")
>3a0bd2	18 d0				name        .word <>TOKEN_TEXT
>3a0bd4	b5 26				eval        .word <>OP_MOD
>3a0bd6	02 00				arity       .word <>2
>3ad01c	5e 00				TOKEN_TEXT  .null "^"
>3a0bd8	00				precedence  .byte TOK_TY_OP | 0
>3a0bd9	01				length      .byte len("^")
>3a0bda	1c d0				name        .word <>TOKEN_TEXT
>3a0bdc	00 00				eval        .word <>0
>3a0bde	02 00				arity       .word <>2
=$86					TOK_LE = $86
>3ad01e	3c 3d 00			TOKEN_TEXT  .null "<="
>3a0be0	04				precedence  .byte TOK_TY_OP | 4
>3a0be1	02				length      .byte len("<=")
>3a0be2	1e d0				name        .word <>TOKEN_TEXT
>3a0be4	4c 28				eval        .word <>OP_LTE
>3a0be6	02 00				arity       .word <>2
=$87					TOK_GE = $87
>3ad021	3e 3d 00			TOKEN_TEXT  .null ">="
>3a0be8	04				precedence  .byte TOK_TY_OP | 4
>3a0be9	02				length      .byte len(">=")
>3a0bea	21 d0				name        .word <>TOKEN_TEXT
>3a0bec	0c 28				eval        .word <>OP_GTE
>3a0bee	02 00				arity       .word <>2
=$88					TOK_NE = $88
>3ad024	3c 3e 00			TOKEN_TEXT  .null "<>"
>3a0bf0	04				precedence  .byte TOK_TY_OP | 4
>3a0bf1	02				length      .byte len("<>")
>3a0bf2	24 d0				name        .word <>TOKEN_TEXT
>3a0bf4	cc 27				eval        .word <>OP_NE
>3a0bf6	02 00				arity       .word <>2
>3ad027	3c 00				TOKEN_TEXT  .null "<"
>3a0bf8	04				precedence  .byte TOK_TY_OP | 4
>3a0bf9	01				length      .byte len("<")
>3a0bfa	27 d0				name        .word <>TOKEN_TEXT
>3a0bfc	0c 27				eval        .word <>OP_LT
>3a0bfe	02 00				arity       .word <>2
=$8a					TOK_EQ = $8A
>3ad029	3d 00				TOKEN_TEXT  .null "="
>3a0c00	04				precedence  .byte TOK_TY_OP | 4
>3a0c01	01				length      .byte len("=")
>3a0c02	29 d0				name        .word <>TOKEN_TEXT
>3a0c04	8c 27				eval        .word <>OP_EQ
>3a0c06	02 00				arity       .word <>2
>3ad02b	3e 00				TOKEN_TEXT  .null ">"
>3a0c08	04				precedence  .byte TOK_TY_OP | 4
>3a0c09	01				length      .byte len(">")
>3a0c0a	2b d0				name        .word <>TOKEN_TEXT
>3a0c0c	4c 27				eval        .word <>OP_GT
>3a0c0e	02 00				arity       .word <>2
>3ad02d	4e 4f 54 00			TOKEN_TEXT  .null "NOT"
>3a0c10	05				precedence  .byte TOK_TY_OP | 5
>3a0c11	03				length      .byte len("NOT")
>3a0c12	2d d0				name        .word <>TOKEN_TEXT
>3a0c14	f6 26				eval        .word <>OP_NOT
>3a0c16	01 00				arity       .word <>1
>3ad031	41 4e 44 00			TOKEN_TEXT  .null "AND"
>3a0c18	06				precedence  .byte TOK_TY_OP | 6
>3a0c19	03				length      .byte len("AND")
>3a0c1a	31 d0				name        .word <>TOKEN_TEXT
>3a0c1c	c8 26				eval        .word <>OP_AND
>3a0c1e	02 00				arity       .word <>2
>3ad035	4f 52 00			TOKEN_TEXT  .null "OR"
>3a0c20	07				precedence  .byte TOK_TY_OP | 7
>3a0c21	02				length      .byte len("OR")
>3a0c22	35 d0				name        .word <>TOKEN_TEXT
>3a0c24	df 26				eval        .word <>OP_OR
>3a0c26	02 00				arity       .word <>2
=$8f					TOK_LPAREN = $8F
>3ad038	28 00				TOKEN_TEXT  .null "("
>3a0c28	ff				precedence  .byte TOK_TY_PUNCT | $FF
>3a0c29	01				length      .byte len("(")
>3a0c2a	38 d0				name        .word <>TOKEN_TEXT
>3a0c2c	00 00				eval        .word <>0
>3a0c2e	00 00				arity       .word <>0
=$90					TOK_RPAREN = $90
>3ad03a	29 00				TOKEN_TEXT  .null ")"
>3a0c30	40				precedence  .byte TOK_TY_PUNCT | 0
>3a0c31	01				length      .byte len(")")
>3a0c32	3a d0				name        .word <>TOKEN_TEXT
>3a0c34	00 00				eval        .word <>0
>3a0c36	00 00				arity       .word <>0
=$91					TOK_REM = $91
>3ad03c	52 45 4d 00			TOKEN_TEXT  .null "REM"
>3a0c38	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c39	03				length      .byte len("REM")
>3a0c3a	3c d0				name        .word <>TOKEN_TEXT
>3a0c3c	e7 3e				eval        .word <>S_REM
>3a0c3e	00 00				arity       .word <>0
=$92					TOK_PRINT = $92
>3ad040	50 52 49 4e 54 00		TOKEN_TEXT  .null "PRINT"
>3a0c40	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c41	05				length      .byte len("PRINT")
>3a0c42	40 d0				name        .word <>TOKEN_TEXT
>3a0c44	ec 42				eval        .word <>S_PRINT
>3a0c46	00 00				arity       .word <>0
=$93					TOK_LET = $93
>3ad046	4c 45 54 00			TOKEN_TEXT  .null "LET"
>3a0c48	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c49	03				length      .byte len("LET")
>3a0c4a	46 d0				name        .word <>TOKEN_TEXT
>3a0c4c	37 42				eval        .word <>S_LET
>3a0c4e	00 00				arity       .word <>0
>3ad04a	47 4f 54 4f 00			TOKEN_TEXT  .null "GOTO"
>3a0c50	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c51	04				length      .byte len("GOTO")
>3a0c52	4a d0				name        .word <>TOKEN_TEXT
>3a0c54	d7 41				eval        .word <>S_GOTO
>3a0c56	00 00				arity       .word <>0
=$95					TOK_END = $95
>3ad04f	45 4e 44 00			TOKEN_TEXT  .null "END"
>3a0c58	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c59	03				length      .byte len("END")
>3a0c5a	4f d0				name        .word <>TOKEN_TEXT
>3a0c5c	ce 41				eval        .word <>S_END
>3a0c5e	00 00				arity       .word <>0
>3ad053	49 46 00			TOKEN_TEXT  .null "IF"
>3a0c60	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c61	02				length      .byte len("IF")
>3a0c62	53 d0				name        .word <>TOKEN_TEXT
>3a0c64	66 41				eval        .word <>S_IF
>3a0c66	00 00				arity       .word <>0
=$97					TOK_THEN = $97
>3ad056	54 48 45 4e 00			TOKEN_TEXT  .null "THEN"
>3a0c68	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0c69	04				length      .byte len("THEN")
>3a0c6a	56 d0				name        .word <>TOKEN_TEXT
>3a0c6c	00 00				eval        .word <>0
>3a0c6e	00 00				arity       .word <>0
>3ad05b	45 4c 53 45 00			TOKEN_TEXT  .null "ELSE"
>3a0c70	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0c71	04				length      .byte len("ELSE")
>3a0c72	5b d0				name        .word <>TOKEN_TEXT
>3a0c74	00 00				eval        .word <>0
>3a0c76	00 00				arity       .word <>0
>3ad060	47 4f 53 55 42 00		TOKEN_TEXT  .null "GOSUB"
>3a0c78	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c79	05				length      .byte len("GOSUB")
>3a0c7a	60 d0				name        .word <>TOKEN_TEXT
>3a0c7c	a9 40				eval        .word <>S_GOSUB
>3a0c7e	00 00				arity       .word <>0
>3ad066	52 45 54 55 52 4e 00		TOKEN_TEXT  .null "RETURN"
>3a0c80	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c81	06				length      .byte len("RETURN")
>3a0c82	66 d0				name        .word <>TOKEN_TEXT
>3a0c84	22 41				eval        .word <>S_RETURN
>3a0c86	00 00				arity       .word <>0
=$9b					TOK_FOR = $9B
>3ad06d	46 4f 52 00			TOKEN_TEXT  .null "FOR"
>3a0c88	20				precedence  .byte TOK_TY_STMNT | 0
>3a0c89	03				length      .byte len("FOR")
>3a0c8a	6d d0				name        .word <>TOKEN_TEXT
>3a0c8c	fe 3e				eval        .word <>S_FOR
>3a0c8e	00 00				arity       .word <>0
=$9c					TOK_TO = $9C
>3ad071	54 4f 00			TOKEN_TEXT  .null "TO"
>3a0c90	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0c91	02				length      .byte len("TO")
>3a0c92	71 d0				name        .word <>TOKEN_TEXT
>3a0c94	00 00				eval        .word <>0
>3a0c96	00 00				arity       .word <>0
=$9d					TOK_STEP = $9D
>3ad074	53 54 45 50 00			TOKEN_TEXT  .null "STEP"
>3a0c98	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0c99	04				length      .byte len("STEP")
>3a0c9a	74 d0				name        .word <>TOKEN_TEXT
>3a0c9c	00 00				eval        .word <>0
>3a0c9e	00 00				arity       .word <>0
=$9e					TOK_NEXT = $9E
>3ad079	4e 45 58 54 00			TOKEN_TEXT  .null "NEXT"
>3a0ca0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ca1	04				length      .byte len("NEXT")
>3a0ca2	79 d0				name        .word <>TOKEN_TEXT
>3a0ca4	f2 3f				eval        .word <>S_NEXT
>3a0ca6	00 00				arity       .word <>0
=$9f					TOK_DO = $9F
>3ad07e	44 4f 00			TOKEN_TEXT  .null "DO"
>3a0ca8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ca9	02				length      .byte len("DO")
>3a0caa	7e d0				name        .word <>TOKEN_TEXT
>3a0cac	f8 3e				eval        .word <>S_DO
>3a0cae	00 00				arity       .word <>0
=$a0					TOK_LOOP = $A0
>3ad081	4c 4f 4f 50 00			TOKEN_TEXT  .null "LOOP"
>3a0cb0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cb1	04				length      .byte len("LOOP")
>3a0cb2	81 d0				name        .word <>TOKEN_TEXT
>3a0cb4	fb 3e				eval        .word <>S_LOOP
>3a0cb6	00 00				arity       .word <>0
>3ad086	57 48 49 4c 45 00		TOKEN_TEXT  .null "WHILE"
>3a0cb8	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0cb9	05				length      .byte len("WHILE")
>3a0cba	86 d0				name        .word <>TOKEN_TEXT
>3a0cbc	00 00				eval        .word <>0
>3a0cbe	00 00				arity       .word <>0
>3ad08c	55 4e 54 49 4c 00		TOKEN_TEXT  .null "UNTIL"
>3a0cc0	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0cc1	05				length      .byte len("UNTIL")
>3a0cc2	8c d0				name        .word <>TOKEN_TEXT
>3a0cc4	00 00				eval        .word <>0
>3a0cc6	00 00				arity       .word <>0
>3ad092	45 58 49 54 00			TOKEN_TEXT  .null "EXIT"
>3a0cc8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cc9	04				length      .byte len("EXIT")
>3a0cca	92 d0				name        .word <>TOKEN_TEXT
>3a0ccc	f5 3e				eval        .word <>S_EXIT
>3a0cce	00 00				arity       .word <>0
>3ad097	43 4c 52 00			TOKEN_TEXT  .null "CLR"
>3a0cd0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cd1	03				length      .byte len("CLR")
>3a0cd2	97 d0				name        .word <>TOKEN_TEXT
>3a0cd4	2d 42				eval        .word <>S_CLR
>3a0cd6	00 00				arity       .word <>0
>3ad09b	53 54 4f 50 00			TOKEN_TEXT  .null "STOP"
>3a0cd8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cd9	04				length      .byte len("STOP")
>3a0cda	9b d0				name        .word <>TOKEN_TEXT
>3a0cdc	c8 3e				eval        .word <>S_STOP
>3a0cde	00 00				arity       .word <>0
>3ad0a0	50 4f 4b 45 00			TOKEN_TEXT  .null "POKE"
>3a0ce0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ce1	04				length      .byte len("POKE")
>3a0ce2	a0 d0				name        .word <>TOKEN_TEXT
>3a0ce4	58 3e				eval        .word <>S_POKE
>3a0ce6	00 00				arity       .word <>0
>3ad0a5	50 4f 4b 45 57 00		TOKEN_TEXT  .null "POKEW"
>3a0ce8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ce9	05				length      .byte len("POKEW")
>3a0cea	a5 d0				name        .word <>TOKEN_TEXT
>3a0cec	ee 3d				eval        .word <>S_POKEW
>3a0cee	00 00				arity       .word <>0
>3ad0ab	50 4f 4b 45 4c 00		TOKEN_TEXT  .null "POKEL"
>3a0cf0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cf1	05				length      .byte len("POKEL")
>3a0cf2	ab d0				name        .word <>TOKEN_TEXT
>3a0cf4	7b 3d				eval        .word <>S_POKEL
>3a0cf6	00 00				arity       .word <>0
>3ad0b1	43 4c 53 00			TOKEN_TEXT  .null "CLS"
>3a0cf8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0cf9	03				length      .byte len("CLS")
>3a0cfa	b1 d0				name        .word <>TOKEN_TEXT
>3a0cfc	77 3d				eval        .word <>S_CLS
>3a0cfe	00 00				arity       .word <>0
>3ad0b5	52 45 41 44 00			TOKEN_TEXT  .null "READ"
>3a0d00	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d01	04				length      .byte len("READ")
>3a0d02	b5 d0				name        .word <>TOKEN_TEXT
>3a0d04	58 3c				eval        .word <>S_READ
>3a0d06	00 00				arity       .word <>0
=$ab					TOK_DATA = $AB
>3ad0ba	44 41 54 41 00			TOKEN_TEXT  .null "DATA"
>3a0d08	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d09	04				length      .byte len("DATA")
>3a0d0a	ba d0				name        .word <>TOKEN_TEXT
>3a0d0c	6a 3d				eval        .word <>S_DATA
>3a0d0e	00 00				arity       .word <>0
>3ad0bf	52 45 53 54 4f 52 45 00		TOKEN_TEXT  .null "RESTORE"
>3a0d10	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d11	07				length      .byte len("RESTORE")
>3a0d12	bf d0				name        .word <>TOKEN_TEXT
>3a0d14	6e 3d				eval        .word <>S_RESTORE
>3a0d16	00 00				arity       .word <>0
>3ad0c7	44 49 4d 00			TOKEN_TEXT  .null "DIM"
>3a0d18	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d19	03				length      .byte len("DIM")
>3a0d1a	c7 d0				name        .word <>TOKEN_TEXT
>3a0d1c	ab 3b				eval        .word <>S_DIM
>3a0d1e	00 00				arity       .word <>0
>3ad0cb	43 41 4c 4c 00			TOKEN_TEXT  .null "CALL"
>3a0d20	20				precedence  .byte TOK_TY_STMNT | 0
>3a0d21	04				length      .byte len("CALL")
>3a0d22	cb d0				name        .word <>TOKEN_TEXT
>3a0d24	14 3b				eval        .word <>S_CALL
>3a0d26	00 00				arity       .word <>0
=$af					TOK_NEGATIVE = $AF
>3ad0d0	2d 00				TOKEN_TEXT  .null "-"
>3a0d28	00				precedence  .byte TOK_TY_OP | 0
>3a0d29	01				length      .byte len("-")
>3a0d2a	d0 d0				name        .word <>TOKEN_TEXT
>3a0d2c	8c 28				eval        .word <>OP_NEGATIVE
>3a0d2e	01 00				arity       .word <>1
>3ad0d2	4c 45 4e 00			TOKEN_TEXT  .null "LEN"
>3a0d30	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d31	03				length      .byte len("LEN")
>3a0d32	d2 d0				name        .word <>TOKEN_TEXT
>3a0d34	e2 48				eval        .word <>FN_LEN
>3a0d36	00 00				arity       .word <>0
>3ad0d6	50 45 45 4b 00			TOKEN_TEXT  .null "PEEK"
>3a0d38	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d39	04				length      .byte len("PEEK")
>3a0d3a	d6 d0				name        .word <>TOKEN_TEXT
>3a0d3c	32 49				eval        .word <>FN_PEEK
>3a0d3e	00 00				arity       .word <>0
>3ad0db	50 45 45 4b 57 00		TOKEN_TEXT  .null "PEEKW"
>3a0d40	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d41	05				length      .byte len("PEEKW")
>3a0d42	db d0				name        .word <>TOKEN_TEXT
>3a0d44	c3 49				eval        .word <>FN_PEEKW
>3a0d46	00 00				arity       .word <>0
>3ad0e1	50 45 45 4b 4c 00		TOKEN_TEXT  .null "PEEKL"
>3a0d48	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d49	05				length      .byte len("PEEKL")
>3a0d4a	e1 d0				name        .word <>TOKEN_TEXT
>3a0d4c	75 49				eval        .word <>FN_PEEKL
>3a0d4e	00 00				arity       .word <>0
>3ad0e7	43 48 52 24 00			TOKEN_TEXT  .null "CHR$"
>3a0d50	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d51	04				length      .byte len("CHR$")
>3a0d52	e7 d0				name        .word <>TOKEN_TEXT
>3a0d54	02 4a				eval        .word <>FN_CHR
>3a0d56	00 00				arity       .word <>0
>3ad0ec	41 53 43 00			TOKEN_TEXT  .null "ASC"
>3a0d58	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d59	03				length      .byte len("ASC")
>3a0d5a	ec d0				name        .word <>TOKEN_TEXT
>3a0d5c	57 4a				eval        .word <>FN_ASC
>3a0d5e	00 00				arity       .word <>0
>3ad0f0	53 50 43 00			TOKEN_TEXT  .null "SPC"
>3a0d60	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d61	03				length      .byte len("SPC")
>3a0d62	f0 d0				name        .word <>TOKEN_TEXT
>3a0d64	9c 4a				eval        .word <>FN_SPC
>3a0d66	00 00				arity       .word <>0
>3ad0f4	54 41 42 00			TOKEN_TEXT  .null "TAB"
>3a0d68	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d69	03				length      .byte len("TAB")
>3a0d6a	f4 d0				name        .word <>TOKEN_TEXT
>3a0d6c	25 4b				eval        .word <>FN_TAB
>3a0d6e	00 00				arity       .word <>0
>3ad0f8	41 42 53 00			TOKEN_TEXT  .null "ABS"
>3a0d70	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d71	03				length      .byte len("ABS")
>3a0d72	f8 d0				name        .word <>TOKEN_TEXT
>3a0d74	ae 4b				eval        .word <>FN_ABS
>3a0d76	00 00				arity       .word <>0
>3ad0fc	53 47 4e 00			TOKEN_TEXT  .null "SGN"
>3a0d78	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d79	03				length      .byte len("SGN")
>3a0d7a	fc d0				name        .word <>TOKEN_TEXT
>3a0d7c	10 4c				eval        .word <>FN_SGN
>3a0d7e	00 00				arity       .word <>0
>3ad100	48 45 58 24 00			TOKEN_TEXT  .null "HEX$"
>3a0d80	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d81	04				length      .byte len("HEX$")
>3a0d82	00 d1				name        .word <>TOKEN_TEXT
>3a0d84	54 48				eval        .word <>FN_HEX
>3a0d86	00 00				arity       .word <>0
>3ad105	44 45 43 00			TOKEN_TEXT  .null "DEC"
>3a0d88	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d89	03				length      .byte len("DEC")
>3a0d8a	05 d1				name        .word <>TOKEN_TEXT
>3a0d8c	f3 47				eval        .word <>FN_DEC
>3a0d8e	00 00				arity       .word <>0
>3ad109	53 54 52 24 00			TOKEN_TEXT  .null "STR$"
>3a0d90	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d91	04				length      .byte len("STR$")
>3a0d92	09 d1				name        .word <>TOKEN_TEXT
>3a0d94	a5 47				eval        .word <>FN_STR
>3a0d96	00 00				arity       .word <>0
>3ad10e	56 41 4c 00			TOKEN_TEXT  .null "VAL"
>3a0d98	30				precedence  .byte TOK_TY_FUNC | 0
>3a0d99	03				length      .byte len("VAL")
>3a0d9a	0e d1				name        .word <>TOKEN_TEXT
>3a0d9c	4f 47				eval        .word <>FN_VAL
>3a0d9e	00 00				arity       .word <>0
>3ad112	4c 45 46 54 24 00		TOKEN_TEXT  .null "LEFT$"
>3a0da0	30				precedence  .byte TOK_TY_FUNC | 0
>3a0da1	05				length      .byte len("LEFT$")
>3a0da2	12 d1				name        .word <>TOKEN_TEXT
>3a0da4	86 46				eval        .word <>FN_LEFT
>3a0da6	00 00				arity       .word <>0
>3ad118	52 49 47 48 54 24 00		TOKEN_TEXT  .null "RIGHT$"
>3a0da8	30				precedence  .byte TOK_TY_FUNC | 0
>3a0da9	06				length      .byte len("RIGHT$")
>3a0daa	18 d1				name        .word <>TOKEN_TEXT
>3a0dac	a5 45				eval        .word <>FN_RIGHT
>3a0dae	00 00				arity       .word <>0
>3ad11f	4d 49 44 24 00			TOKEN_TEXT  .null "MID$"
>3a0db0	30				precedence  .byte TOK_TY_FUNC | 0
>3a0db1	04				length      .byte len("MID$")
>3a0db2	1f d1				name        .word <>TOKEN_TEXT
>3a0db4	f0 44				eval        .word <>FN_MID
>3a0db6	00 00				arity       .word <>0
>3ad124	52 55 4e 00			TOKEN_TEXT  .null "RUN"
>3a0db8	10				precedence  .byte TOK_TY_CMD | 0
>3a0db9	03				length      .byte len("RUN")
>3a0dba	24 d1				name        .word <>TOKEN_TEXT
>3a0dbc	ba 4d				eval        .word <>CMD_RUN
>3a0dbe	00 00				arity       .word <>0
>3ad128	4e 45 57 00			TOKEN_TEXT  .null "NEW"
>3a0dc0	10				precedence  .byte TOK_TY_CMD | 0
>3a0dc1	03				length      .byte len("NEW")
>3a0dc2	28 d1				name        .word <>TOKEN_TEXT
>3a0dc4	85 4d				eval        .word <>CMD_NEW
>3a0dc6	00 00				arity       .word <>0
>3ad12c	4c 4f 41 44 00			TOKEN_TEXT  .null "LOAD"
>3a0dc8	10				precedence  .byte TOK_TY_CMD | 0
>3a0dc9	04				length      .byte len("LOAD")
>3a0dca	2c d1				name        .word <>TOKEN_TEXT
>3a0dcc	0d 67				eval        .word <>CMD_LOAD
>3a0dce	00 00				arity       .word <>0
>3ad131	4c 49 53 54 00			TOKEN_TEXT  .null "LIST"
>3a0dd0	10				precedence  .byte TOK_TY_CMD | 0
>3a0dd1	04				length      .byte len("LIST")
>3a0dd2	31 d1				name        .word <>TOKEN_TEXT
>3a0dd4	d1 4d				eval        .word <>CMD_LIST
>3a0dd6	00 00				arity       .word <>0
>3ad136	44 49 52 00			TOKEN_TEXT  .null "DIR"
>3a0dd8	10				precedence  .byte TOK_TY_CMD | 0
>3a0dd9	03				length      .byte len("DIR")
>3a0dda	36 d1				name        .word <>TOKEN_TEXT
>3a0ddc	34 64				eval        .word <>CMD_DIR
>3a0dde	00 00				arity       .word <>0
>3ad13a	42 4c 4f 41 44 00		TOKEN_TEXT  .null "BLOAD"
>3a0de0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0de1	05				length      .byte len("BLOAD")
>3a0de2	3a d1				name        .word <>TOKEN_TEXT
>3a0de4	df 65				eval        .word <>S_BLOAD
>3a0de6	00 00				arity       .word <>0
>3ad140	42 52 55 4e 00			TOKEN_TEXT  .null "BRUN"
>3a0de8	10				precedence  .byte TOK_TY_CMD | 0
>3a0de9	04				length      .byte len("BRUN")
>3a0dea	40 d1				name        .word <>TOKEN_TEXT
>3a0dec	ba 66				eval        .word <>CMD_BRUN
>3a0dee	00 00				arity       .word <>0
>3ad145	42 53 41 56 45 00		TOKEN_TEXT  .null "BSAVE"
>3a0df0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0df1	05				length      .byte len("BSAVE")
>3a0df2	45 d1				name        .word <>TOKEN_TEXT
>3a0df4	c6 67				eval        .word <>S_BSAVE
>3a0df6	00 00				arity       .word <>0
>3ad14b	44 45 4c 00			TOKEN_TEXT  .null "DEL"
>3a0df8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0df9	03				length      .byte len("DEL")
>3a0dfa	4b d1				name        .word <>TOKEN_TEXT
>3a0dfc	e5 68				eval        .word <>S_DEL
>3a0dfe	00 00				arity       .word <>0
>3ad14f	53 41 56 45 00			TOKEN_TEXT  .null "SAVE"
>3a0e00	10				precedence  .byte TOK_TY_CMD | 0
>3a0e01	04				length      .byte len("SAVE")
>3a0e02	4f d1				name        .word <>TOKEN_TEXT
>3a0e04	52 68				eval        .word <>CMD_SAVE
>3a0e06	00 00				arity       .word <>0
>3ad154	52 45 4e 41 4d 45 00		TOKEN_TEXT  .null "RENAME"
>3a0e08	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e09	06				length      .byte len("RENAME")
>3a0e0a	54 d1				name        .word <>TOKEN_TEXT
>3a0e0c	5b 69				eval        .word <>S_RENAME
>3a0e0e	00 00				arity       .word <>0
>3ad15b	43 4f 50 59 00			TOKEN_TEXT  .null "COPY"
>3a0e10	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e11	04				length      .byte len("COPY")
>3a0e12	5b d1				name        .word <>TOKEN_TEXT
>3a0e14	7f 6a				eval        .word <>S_COPY
>3a0e16	00 00				arity       .word <>0
>3ad160	4d 4f 4e 49 54 4f 52 00		TOKEN_TEXT  .null "MONITOR"
>3a0e18	10				precedence  .byte TOK_TY_CMD | 0
>3a0e19	07				length      .byte len("MONITOR")
>3a0e1a	60 d1				name        .word <>TOKEN_TEXT
>3a0e1c	82 4d				eval        .word <>CMD_MONITOR
>3a0e1e	00 00				arity       .word <>0
>3ad168	47 45 54 00			TOKEN_TEXT  .null "GET"
>3a0e20	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e21	03				length      .byte len("GET")
>3a0e22	68 d1				name        .word <>TOKEN_TEXT
>3a0e24	a2 3a				eval        .word <>S_GET
>3a0e26	00 00				arity       .word <>0
>3ad16c	49 4e 50 55 54 00		TOKEN_TEXT  .null "INPUT"
>3a0e28	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e29	05				length      .byte len("INPUT")
>3a0e2a	6c d1				name        .word <>TOKEN_TEXT
>3a0e2c	d7 39				eval        .word <>S_INPUT
>3a0e2e	00 00				arity       .word <>0
>3ad172	53 45 54 42 4f 52 44 45		TOKEN_TEXT  .null "SETBORDER"
>3ad17a	52 00
>3a0e30	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e31	09				length      .byte len("SETBORDER")
>3a0e32	72 d1				name        .word <>TOKEN_TEXT
>3a0e34	4b 2a				eval        .word <>S_SETBORDER
>3a0e36	00 00				arity       .word <>0
>3ad17c	54 45 58 54 43 4f 4c 4f		TOKEN_TEXT  .null "TEXTCOLOR"
>3ad184	52 00
>3a0e38	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e39	09				length      .byte len("TEXTCOLOR")
>3a0e3a	7c d1				name        .word <>TOKEN_TEXT
>3a0e3c	d8 29				eval        .word <>S_TEXTCOLOR
>3a0e3e	00 00				arity       .word <>0
>3ad186	53 45 54 42 47 43 4f 4c		TOKEN_TEXT  .null "SETBGCOLOR"
>3ad18e	4f 52 00
>3a0e40	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e41	0a				length      .byte len("SETBGCOLOR")
>3a0e42	86 d1				name        .word <>TOKEN_TEXT
>3a0e44	08 2a				eval        .word <>S_SETBGCOLOR
>3a0e46	00 00				arity       .word <>0
>3ad191	53 45 54 44 41 54 45 00		TOKEN_TEXT  .null "SETDATE"
>3a0e48	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e49	07				length      .byte len("SETDATE")
>3a0e4a	91 d1				name        .word <>TOKEN_TEXT
>3a0e4c	45 29				eval        .word <>S_SETDATE
>3a0e4e	00 00				arity       .word <>0
>3ad199	47 45 54 44 41 54 45 24		TOKEN_TEXT  .null "GETDATE$"
>3ad1a1	00
>3a0e50	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e51	08				length      .byte len("GETDATE$")
>3a0e52	99 d1				name        .word <>TOKEN_TEXT
>3a0e54	cb 43				eval        .word <>F_GETDATE
>3a0e56	00 00				arity       .word <>0
>3ad1a2	53 45 54 54 49 4d 45 00		TOKEN_TEXT  .null "SETTIME"
>3a0e58	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e59	07				length      .byte len("SETTIME")
>3a0e5a	a2 d1				name        .word <>TOKEN_TEXT
>3a0e5c	da 28				eval        .word <>S_SETTIME
>3a0e5e	00 00				arity       .word <>0
>3ad1aa	47 45 54 54 49 4d 45 24		TOKEN_TEXT  .null "GETTIME$"
>3ad1b2	00
>3a0e60	30				precedence  .byte TOK_TY_FUNC | 0
>3a0e61	08				length      .byte len("GETTIME$")
>3a0e62	aa d1				name        .word <>TOKEN_TEXT
>3a0e64	35 44				eval        .word <>F_GETTIME
>3a0e66	00 00				arity       .word <>0
>3ad1b3	47 52 41 50 48 49 43 53		TOKEN_TEXT  .null "GRAPHICS"
>3ad1bb	00
>3a0e68	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e69	08				length      .byte len("GRAPHICS")
>3a0e6a	b3 d1				name        .word <>TOKEN_TEXT
>3a0e6c	90 2b				eval        .word <>S_GRAPHICS
>3a0e6e	00 00				arity       .word <>0
>3ad1bc	53 45 54 43 4f 4c 4f 52		TOKEN_TEXT  .null "SETCOLOR"
>3ad1c4	00
>3a0e70	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e71	08				length      .byte len("SETCOLOR")
>3a0e72	bc d1				name        .word <>TOKEN_TEXT
>3a0e74	c4 2a				eval        .word <>S_SETCOLOR
>3a0e76	00 00				arity       .word <>0
>3ad1c5	42 49 54 4d 41 50 00		TOKEN_TEXT  .null "BITMAP"
>3a0e78	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e79	06				length      .byte len("BITMAP")
>3a0e7a	c5 d1				name        .word <>TOKEN_TEXT
>3a0e7c	ca 2c				eval        .word <>S_BITMAP
>3a0e7e	00 00				arity       .word <>0
>3ad1cc	43 4c 52 42 49 54 4d 41		TOKEN_TEXT  .null "CLRBITMAP"
>3ad1d4	50 00
>3a0e80	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e81	09				length      .byte len("CLRBITMAP")
>3a0e82	cc d1				name        .word <>TOKEN_TEXT
>3a0e84	d2 2d				eval        .word <>S_CLRBITMAP
>3a0e86	00 00				arity       .word <>0
>3ad1d6	50 4c 4f 54 00			TOKEN_TEXT  .null "PLOT"
>3a0e88	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e89	04				length      .byte len("PLOT")
>3a0e8a	d6 d1				name        .word <>TOKEN_TEXT
>3a0e8c	e2 2e				eval        .word <>S_PLOT
>3a0e8e	00 00				arity       .word <>0
>3ad1db	4c 49 4e 45 00			TOKEN_TEXT  .null "LINE"
>3a0e90	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e91	04				length      .byte len("LINE")
>3a0e92	db d1				name        .word <>TOKEN_TEXT
>3a0e94	53 2f				eval        .word <>S_LINE
>3a0e96	00 00				arity       .word <>0
>3ad1e0	46 49 4c 4c 00			TOKEN_TEXT  .null "FILL"
>3a0e98	20				precedence  .byte TOK_TY_STMNT | 0
>3a0e99	04				length      .byte len("FILL")
>3a0e9a	e0 d1				name        .word <>TOKEN_TEXT
>3a0e9c	ec 2f				eval        .word <>S_FILL
>3a0e9e	00 00				arity       .word <>0
>3ad1e5	53 50 52 49 54 45 00		TOKEN_TEXT  .null "SPRITE"
>3a0ea0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ea1	06				length      .byte len("SPRITE")
>3a0ea2	e5 d1				name        .word <>TOKEN_TEXT
>3a0ea4	28 31				eval        .word <>S_SPRITE
>3a0ea6	00 00				arity       .word <>0
>3ad1ec	53 50 52 49 54 45 41 54		TOKEN_TEXT  .null "SPRITEAT"
>3ad1f4	00
>3a0ea8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ea9	08				length      .byte len("SPRITEAT")
>3a0eaa	ec d1				name        .word <>TOKEN_TEXT
>3a0eac	c4 31				eval        .word <>S_SPRITEAT
>3a0eae	00 00				arity       .word <>0
>3ad1f5	53 50 52 49 54 45 53 48		TOKEN_TEXT  .null "SPRITESHOW"
>3ad1fd	4f 57 00
>3a0eb0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eb1	0a				length      .byte len("SPRITESHOW")
>3a0eb2	f5 d1				name        .word <>TOKEN_TEXT
>3a0eb4	10 32				eval        .word <>S_SPRITESHOW
>3a0eb6	00 00				arity       .word <>0
>3ad200	54 49 4c 45 53 45 54 00		TOKEN_TEXT  .null "TILESET"
>3a0eb8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0eb9	07				length      .byte len("TILESET")
>3a0eba	00 d2				name        .word <>TOKEN_TEXT
>3a0ebc	45 33				eval        .word <>S_TILESET
>3a0ebe	00 00				arity       .word <>0
>3ad208	54 49 4c 45 4d 41 50 00		TOKEN_TEXT  .null "TILEMAP"
>3a0ec0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ec1	07				length      .byte len("TILEMAP")
>3a0ec2	08 d2				name        .word <>TOKEN_TEXT
>3a0ec4	c3 33				eval        .word <>S_TILEMAP
>3a0ec6	00 00				arity       .word <>0
>3ad210	54 49 4c 45 53 48 4f 57		TOKEN_TEXT  .null "TILESHOW"
>3ad218	00
>3a0ec8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ec9	08				length      .byte len("TILESHOW")
>3a0eca	10 d2				name        .word <>TOKEN_TEXT
>3a0ecc	35 34				eval        .word <>S_TILESHOW
>3a0ece	00 00				arity       .word <>0
>3ad219	54 49 4c 45 41 54 00		TOKEN_TEXT  .null "TILEAT"
>3a0ed0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ed1	06				length      .byte len("TILEAT")
>3a0ed2	19 d2				name        .word <>TOKEN_TEXT
>3a0ed4	72 34				eval        .word <>S_TILEAT
>3a0ed6	00 00				arity       .word <>0
>3ad220	4d 45 4d 43 4f 50 59 00		TOKEN_TEXT  .null "MEMCOPY"
>3a0ed8	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ed9	07				length      .byte len("MEMCOPY")
>3a0eda	20 d2				name        .word <>TOKEN_TEXT
>3a0edc	a2 37				eval        .word <>S_MEMCOPY
>3a0ede	00 00				arity       .word <>0
=$e6					TOK_LINEAR = $E6
>3ad228	4c 49 4e 45 41 52 00		TOKEN_TEXT  .null "LINEAR"
>3a0ee0	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0ee1	06				length      .byte len("LINEAR")
>3a0ee2	28 d2				name        .word <>TOKEN_TEXT
>3a0ee4	00 00				eval        .word <>0
>3a0ee6	00 00				arity       .word <>0
=$e7					TOK_RECT = $E7
>3ad22f	52 45 43 54 00			TOKEN_TEXT  .null "RECT"
>3a0ee8	50				precedence  .byte TOK_TY_BYWRD | 0
>3a0ee9	04				length      .byte len("RECT")
>3a0eea	2f d2				name        .word <>TOKEN_TEXT
>3a0eec	00 00				eval        .word <>0
>3a0eee	00 00				arity       .word <>0
>3ad234	4c 4f 43 41 54 45 00		TOKEN_TEXT  .null "LOCATE"
>3a0ef0	20				precedence  .byte TOK_TY_STMNT | 0
>3a0ef1	06				length      .byte len("LOCATE")
>3a0ef2	34 d2				name        .word <>TOKEN_TEXT
>3a0ef4	b7 39				eval        .word <>S_LOCATE
>3a0ef6	00 00				arity       .word <>0
>3ad23b	49 4e 54 00			TOKEN_TEXT  .null "INT"
>3a0ef8	30				precedence  .byte TOK_TY_FUNC | 0
>3a0ef9	03				length      .byte len("INT")
>3a0efa	3b d2				name        .word <>TOKEN_TEXT
>3a0efc	66 4c				eval        .word <>FN_INT
>3a0efe	00 00				arity       .word <>0
>3ad23f	52 4e 44 00			TOKEN_TEXT  .null "RND"
>3a0f00	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f01	03				length      .byte len("RND")
>3a0f02	3f d2				name        .word <>TOKEN_TEXT
>3a0f04	9a 44				eval        .word <>FN_RND
>3a0f06	00 00				arity       .word <>0
>3ad243	53 49 4e 00			TOKEN_TEXT  .null "SIN"
>3a0f08	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f09	03				length      .byte len("SIN")
>3a0f0a	43 d2				name        .word <>TOKEN_TEXT
>3a0f0c	79 4c				eval        .word <>FN_SIN
>3a0f0e	00 00				arity       .word <>0
>3ad247	43 4f 53 00			TOKEN_TEXT  .null "COS"
>3a0f10	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f11	03				length      .byte len("COS")
>3a0f12	47 d2				name        .word <>TOKEN_TEXT
>3a0f14	ae 4c				eval        .word <>FN_COS
>3a0f16	00 00				arity       .word <>0
>3ad24b	54 41 4e 00			TOKEN_TEXT  .null "TAN"
>3a0f18	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f19	03				length      .byte len("TAN")
>3a0f1a	4b d2				name        .word <>TOKEN_TEXT
>3a0f1c	e3 4c				eval        .word <>FN_TAN
>3a0f1e	00 00				arity       .word <>0
>3ad24f	4c 4e 00			TOKEN_TEXT  .null "LN"
>3a0f20	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f21	02				length      .byte len("LN")
>3a0f22	4f d2				name        .word <>TOKEN_TEXT
>3a0f24	4d 4d				eval        .word <>FN_LN
>3a0f26	00 00				arity       .word <>0
>3ad252	53 43 41 4c 45 54 41 55		TOKEN_TEXT  .null "SCALETAU"
>3ad25a	00
>3a0f28	30				precedence  .byte TOK_TY_FUNC | 0
>3a0f29	08				length      .byte len("SCALETAU")
>3a0f2a	52 d2				name        .word <>TOKEN_TEXT
>3a0f2c	18 4d				eval        .word <>FN_SCALETAU
>3a0f2e	00 00				arity       .word <>0
>3a0f30	00 00 00 00 00 00 00 00		            .word 0, 0, 0, 0

;******  Return to file: src\basic816.s


;******  Processing file: src\heap.s

>08b7					ALLOCATED   .long ?     ; Pointer to the most recently allocated object
>08ba					HEAP        .long ?     ; Pointer to the top of the heap (next empty byte)
>08bd					FREED       .long ?     ; Pointer to a linked list of freed heap objects
>08c0					CURRBLOCK   .long ?     ; Pointer to the current heap allocated block
>08c3					CURRHEADER  .long ?     ; Pointer to the header of the current block
>08c6					CURREND     .long ?     ; Pointer to the byte immediately after the current block
>08c9					CURRFREED   .long ?     ; Pointer to the current freed block
>08cc					FREEDEND    .long ?     ; Pointer to the byte immediately after the current freed block
>08cf					LASTFREED   .long ?     ;
.0000					HEAPOBJ
>0000					TYPE        .byte ?     ; Code for the type of object allocated
>0001					COUNT       .byte ?     ; Number of references to the heap object
>0002					NEXT        .long ?     ; Pointer to the next object in the list (used when freed)
>0005					END         .long ?     ; Pointer to the next byte after the block
.3a0f38					INITHEAP
.3a0f38	08		php		            PHP
.3a0f39	0b		phd		            PHD
.3a0f3a	08		php		            PHP
.3a0f3b	c2 20		rep #$20	            REP #$20
.3a0f3d	48		pha		            PHA
.3a0f3e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0f41	5b		tcd		            TCD
.3a0f42	68		pla		            PLA
.3a0f43	28		plp		            PLP
.3a0f44	c2 30		rep #$30	            REP #$30
.3a0f46	a9 ff ff	lda #$ffff	            LDA #<>HEAP_TOP         ; Set the HEAP to the top
.3a0f49	85 ba		sta $08ba	            STA HEAP
.3a0f4b	e2 20		sep #$20	            SEP #$20
.3a0f4d	a9 37		lda #$37	            LDA #`HEAP_TOP
.3a0f4f	85 bc		sta $08bc	            STA HEAP+2
.3a0f51	c2 20		rep #$20	            REP #$20
.3a0f53	64 b7		stz $08b7	            STZ ALLOCATED           ; And clear the pointer to the allocated objects
.3a0f55	64 bd		stz $08bd	            STZ FREED               ; as well as the list of freed objects
.3a0f57	e2 20		sep #$20	            SEP #$20
.3a0f59	64 b9		stz $08b9	            STZ ALLOCATED+2
.3a0f5b	64 bf		stz $08bf	            STZ FREED+2
.3a0f5d	2b		pld		            PLD
.3a0f5e	28		plp		            PLP
.3a0f5f	60		rts		            RTS
.3a0f60					ALLOC
.3a0f60	5a		phy		            PHY
.3a0f61	08		php		            PHP
.3a0f62	e2 20		sep #$20	            SEP #$20
.3a0f64	85 ea		sta $08ea	            STA TOFINDTYPE      ; Save the type of the block to TOFINDTYPE
.3a0f66	c2 10		rep #$10	            REP #$10
.3a0f68	86 8f		stx $088f	            STX MCOUNT           ; And the length of the block needed to MCOUNT
.3a0f6a	c2 20		rep #$20	            REP #$20
.3a0f6c	a5 0e		lda $080e	            LDA SCRATCH+2
.3a0f6e	48		pha		            PHA
.3a0f6f	a5 0c		lda $080c	            LDA SCRATCH
.3a0f71	48		pha		            PHA
.3a0f72	a5 12		lda $0812	            LDA SCRATCH2+2
.3a0f74	48		pha		            PHA
.3a0f75	a5 10		lda $0810	            LDA SCRATCH2
.3a0f77	48		pha		            PHA
.3a0f78	20 10 10	jsr $3a1010	            JSR ALLOCFREED
.3a0f7b	b0 03		bcs $3a0f80	            BCS done            ; Return, if we got something back
.3a0f7d	20 94 0f	jsr $3a0f94	            JSR ALLOCHEAP
.3a0f80					done
.3a0f80	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a0f83	c2 20		rep #$20	            REP #$20
.3a0f85	68		pla		            PLA
.3a0f86	85 10		sta $0810	            STA SCRATCH2
.3a0f88	68		pla		            PLA
.3a0f89	85 12		sta $0812	            STA SCRATCH2+2
.3a0f8b	68		pla		            PLA
.3a0f8c	85 0c		sta $080c	            STA SCRATCH
.3a0f8e	68		pla		            PLA
.3a0f8f	85 0e		sta $080e	            STA SCRATCH+2
.3a0f91	28		plp		            PLP
.3a0f92	7a		ply		            PLY
.3a0f93	60		rts		            RTS
.3a0f94					ALLOCHEAP
.3a0f94	08		php		            PHP
.3a0f95	0b		phd		            PHD
.3a0f96	08		php		            PHP
.3a0f97	c2 20		rep #$20	            REP #$20
.3a0f99	48		pha		            PHA
.3a0f9a	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a0f9d	5b		tcd		            TCD
.3a0f9e	68		pla		            PLA
.3a0f9f	28		plp		            PLP
.3a0fa0	e2 20		sep #$20	            SEP #$20
.3a0fa2	a6 8f		ldx $088f	            LDX MCOUNT
.3a0fa4	ca		dex		            DEX
.3a0fa5	86 0c		stx $080c	            STX SCRATCH             ; SCRATCH := size - 1
.3a0fa7	e8		inx		            INX
.3a0fa8	c2 30		rep #$30	            REP #$30
.3a0faa	38		sec		            SEC
.3a0fab	a5 ba		lda $08ba	            LDA HEAP
.3a0fad	e5 0c		sbc $080c	            SBC SCRATCH
.3a0faf	85 c0		sta $08c0	            STA CURRBLOCK
.3a0fb1	e2 20		sep #$20	            SEP #$20
.3a0fb3	a5 bc		lda $08bc	            LDA HEAP+2
.3a0fb5	e9 00		sbc #$00	            SBC #0
.3a0fb7	85 c2		sta $08c2	            STA CURRBLOCK+2
.3a0fb9	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a0fbc	e2 20		sep #$20	            SEP #$20
.3a0fbe	a5 ea		lda $08ea	            LDA TOFINDTYPE
.3a0fc0	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE       ; Set the type of the object
.3a0fc3	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a0fc5	a9 00		lda #$00	            LDA #0                  ; Set the count to zero
.3a0fc7	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.3a0fca	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a0fcc	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a0fcf	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a0fd1	c2 20		rep #$20	            REP #$20
.3a0fd3	a9 00 00	lda #$0000	            LDA #0
.3a0fd6	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a0fd8	c2 20		rep #$20	            REP #$20
.3a0fda	18		clc		            CLC
.3a0fdb	a5 ba		lda $08ba	            LDA HEAP
.3a0fdd	69 01 00	adc #$0001	            ADC #1
.3a0fe0	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; To get the address of the next byte
.3a0fe3	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y      ; after the block
.3a0fe5	e2 20		sep #$20	            SEP #$20
.3a0fe7	c8		iny		            INY
.3a0fe8	c8		iny		            INY
.3a0fe9	a5 bc		lda $08bc	            LDA HEAP+2
.3a0feb	69 00		adc #$00	            ADC #0
.3a0fed	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a0fef	c2 20		rep #$20	            REP #$20
.3a0ff1	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a0ff3	85 b7		sta $08b7	            STA ALLOCATED
.3a0ff5	e2 20		sep #$20	            SEP #$20
.3a0ff7	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a0ff9	85 b9		sta $08b9	            STA ALLOCATED+2
.3a0ffb	c2 20		rep #$20	            REP #$20
.3a0ffd	38		sec		            SEC                     ; Move the HEAP pointer to the first free byte under the header
.3a0ffe	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1000	e9 01 00	sbc #$0001	            SBC #1
.3a1003	85 ba		sta $08ba	            STA HEAP
.3a1005	e2 20		sep #$20	            SEP #$20
.3a1007	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1009	e9 00		sbc #$00	            SBC #0
.3a100b	85 bc		sta $08bc	            STA HEAP+2
.3a100d	2b		pld		            PLD
.3a100e	28		plp		            PLP
.3a100f	60		rts		            RTS
.3a1010					ALLOCFREED
.3a1010	08		php		            PHP
.3a1011	0b		phd		            PHD
.3a1012	08		php		            PHP
.3a1013	c2 20		rep #$20	            REP #$20
.3a1015	48		pha		            PHA
.3a1016	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1019	5b		tcd		            TCD
.3a101a	68		pla		            PLA
.3a101b	28		plp		            PLP
.3a101c	c2 30		rep #$30	            REP #$30
.3a101e	c2 20		rep #$20	            REP #$20
.3a1020	a5 bd		lda $08bd	            LDA FREED
.3a1022	85 c9		sta $08c9	            STA CURRFREED
.3a1024	e2 20		sep #$20	            SEP #$20
.3a1026	a5 bf		lda $08bf	            LDA FREED+2
.3a1028	85 cb		sta $08cb	            STA CURRFREED+2
.3a102a	a5 c9		lda $08c9	loop        LDA CURRFREED           ; Has anything been freed?
.3a102c	d0 17		bne $3a1045	            BNE has_block           ; Yes: check to see if there's a big enough block
.3a102e	e2 20		sep #$20	            SEP #$20
.3a1030	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a1032	d0 11		bne $3a1045	            BNE has_block           ; Yes: check to see if there's a big enough block
.3a1034	c2 20		rep #$20	            REP #$20
.3a1036	a9 00 00	lda #$0000	            LDA #<>0
.3a1039	85 cf		sta $08cf	            STA LASTFREED
.3a103b	e2 20		sep #$20	            SEP #$20
.3a103d	a9 00		lda #$00	            LDA #`0
.3a103f	85 d1		sta $08d1	            STA LASTFREED+2
.3a1041	2b		pld		ret_false   PLD                     ; Return that we didn't find anything
.3a1042	28		plp		            PLP
.3a1043	18		clc		            CLC
.3a1044	60		rts		            RTS
.3a1045					has_block
.3a1045	c2 20		rep #$20	            REP #$20
.3a1047	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.3a104a	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a104c	85 cc		sta $08cc	            STA FREEDEND
.3a104e	e2 20		sep #$20	            SEP #$20
.3a1050	c8		iny		            INY
.3a1051	c8		iny		            INY
.3a1052	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1054	85 ce		sta $08ce	            STA FREEDEND+2
.3a1056	c2 20		rep #$20	            REP #$20
.3a1058	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required
.3a1059	a5 c9		lda $08c9	            LDA CURRFREED
.3a105b	65 8f		adc $088f	            ADC MCOUNT
.3a105d	85 0c		sta $080c	            STA SCRATCH
.3a105f	e2 20		sep #$20	            SEP #$20
.3a1061	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a1063	69 00		adc #$00	            ADC #0
.3a1065	85 0e		sta $080e	            STA SCRATCH+2
.3a1067	c2 20		rep #$20	            REP #$20
.3a1069	18		clc		            CLC                         ; SCRATCH := CURRFREED + size of block required + size of header
.3a106a	a5 0c		lda $080c	            LDA SCRATCH                 ; (that is, it's a pointer to the byte immediately after the block desired)
.3a106c	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)
.3a106f	85 0c		sta $080c	            STA SCRATCH
.3a1071	e2 20		sep #$20	            SEP #$20
.3a1073	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1075	69 00		adc #$00	            ADC #0
.3a1077	85 0e		sta $080e	            STA SCRATCH+2
.3a1079	c2 20		rep #$20	            REP #$20
.3a107b	a5 0c		lda $080c	            LDA SCRATCH                 ; Is SCRATCH == FREEDEND?
.3a107d	c5 cc		cmp $08cc	            CMP FREEDEND
.3a107f	d0 28		bne $3a10a9	            BNE not_exact               ; No: check if this block is bigger than needed
.3a1081	e2 20		sep #$20	            SEP #$20
.3a1083	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1085	c5 ce		cmp $08ce	            CMP FREEDEND+2
.3a1087	d0 20		bne $3a10a9	            BNE not_exact
.3a1089	c2 20		rep #$20	            REP #$20
.3a108b	a5 cf		lda $08cf	            LDA LASTFREED               ; LASTFREED == 0?
.3a108d	d0 5d		bne $3a10ec	            BNE adj_last1               ; No: point LASTFREED->NEXT to skip this block
.3a108f	e2 20		sep #$20	            SEP #$20
.3a1091	a5 d1		lda $08d1	            LDA LASTFREED+2
.3a1093	d0 57		bne $3a10ec	            BNE adj_last1
.3a1095	c2 20		rep #$20	            REP #$20
.3a1097	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a109a	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a109c	85 bd		sta $08bd	            STA FREED
.3a109e	e2 20		sep #$20	            SEP #$20
.3a10a0	c8		iny		            INY
.3a10a1	c8		iny		            INY
.3a10a2	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a10a4	85 bf		sta $08bf	            STA FREED+2
.3a10a6	4c 4d 11	jmp $3a114d	            JMP init_block              ; And return CURRFREED as our reallocated memory
.3a10a9					not_exact
.3a10a9	c2 20		rep #$20	            REP #$20
.3a10ab	a5 0c		lda $080c	            LDA SCRATCH                 ; Add a buffer to the room needed
.3a10ad	69 08 00	adc #$0008	            ADC #size(HEAPOBJ)          ; So we have room to track the memory still freed
.3a10b0	85 10		sta $0810	            STA SCRATCH2
.3a10b2	e2 20		sep #$20	            SEP #$20
.3a10b4	a5 0e		lda $080e	            LDA SCRATCH+2
.3a10b6	69 00		adc #$00	            ADC #0
.3a10b8	85 12		sta $0812	            STA SCRATCH2+2
.3a10ba	e2 20		sep #$20	            SEP #$20
.3a10bc	a5 c6		lda $08c6	            LDA CURREND                 ; Is CURREND > SCRATCH2
.3a10be	c5 10		cmp $0810	            CMP SCRATCH2
.3a10c0	b0 3e		bcs $3a1100	            BGE has_room                ; Yes: there is room in this block to allocate some memory
.3a10c2	90 08		bcc $3a10cc	            BLT try_next
.3a10c4	c2 20		rep #$20	            REP #$20
.3a10c6	a5 c6		lda $08c6	            LDA CURREND
.3a10c8	c5 10		cmp $0810	            CMP SCRATCH2
.3a10ca	b0 34		bcs $3a1100	            BGE has_room
.3a10cc					try_next
.3a10cc	c2 20		rep #$20	            REP #$20
.3a10ce	a5 c9		lda $08c9	            LDA CURRFREED
.3a10d0	85 cf		sta $08cf	            STA LASTFREED
.3a10d2	e2 20		sep #$20	            SEP #$20
.3a10d4	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a10d6	85 d1		sta $08d1	            STA LASTFREED+2
.3a10d8	c2 20		rep #$20	            REP #$20
.3a10da	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a10dd	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.3a10df	85 c9		sta $08c9	            STA CURRFREED
.3a10e1	e2 20		sep #$20	            SEP #$20
.3a10e3	c8		iny		            INY
.3a10e4	c8		iny		            INY
.3a10e5	b7 cf		lda [$08cf],y	            LDA [LASTFREED],Y
.3a10e7	85 cb		sta $08cb	            STA CURRFREED+2
.3a10e9	4c 2a 10	jmp $3a102a	            JMP loop                                    ; And try the next header
.3a10ec					adj_last1
.3a10ec	c2 20		rep #$20	            REP #$20
.3a10ee	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := CURRFREED->NEXT
.3a10f1	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a10f3	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a10f5	e2 20		sep #$20	            SEP #$20
.3a10f7	c8		iny		            INY
.3a10f8	c8		iny		            INY
.3a10f9	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a10fb	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a10fd	4c 4d 11	jmp $3a114d	            JMP init_block              ; And get CURRFREED ready to return
.3a1100					has_room
.3a1100	c2 20		rep #$20	            REP #$20
.3a1102	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END            ; SCRATCH->END := CURRFREED->END
.3a1105	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1107	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a1109	e2 20		sep #$20	            SEP #$20
.3a110b	c8		iny		            INY
.3a110c	c8		iny		            INY
.3a110d	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a110f	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a1111	c2 20		rep #$20	            REP #$20
.3a1113	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; CURREND->NEXT := CURRFREED->NEXT
.3a1116	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1118	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a111a	e2 20		sep #$20	            SEP #$20
.3a111c	c8		iny		            INY
.3a111d	c8		iny		            INY
.3a111e	b7 c9		lda [$08c9],y	            LDA [CURRFREED],Y
.3a1120	97 0c		sta [$080c],y	            STA [SCRATCH],Y
.3a1122	c2 20		rep #$20	            REP #$20
.3a1124	a5 cf		lda $08cf	            LDA LASTFREED               ; Is this the first object we've examined?
.3a1126	d0 14		bne $3a113c	            BNE adj_last2               ; No: we'll need to adjust the previously examined block
.3a1128	e2 20		sep #$20	            SEP #$20
.3a112a	a5 cf		lda $08cf	            LDA LASTFREED
.3a112c	d0 0e		bne $3a113c	            BNE adj_last2
.3a112e	c2 20		rep #$20	            REP #$20
.3a1130	a5 0c		lda $080c	            LDA SCRATCH
.3a1132	85 bd		sta $08bd	            STA FREED
.3a1134	e2 20		sep #$20	            SEP #$20
.3a1136	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1138	85 bf		sta $08bf	            STA FREED+2
.3a113a	80 11		bra $3a114d	            BRA init_block              ; ... and return the block we've sliced off
.3a113c					adj_last2
.3a113c	c2 20		rep #$20	            REP #$20
.3a113e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT           ; LASTFREED->NEXT := SCRATCH
.3a1141	a5 0c		lda $080c	            LDA SCRATCH                 ; (point the previous freed block to the newly sliced
.3a1143	97 cf		sta [$08cf],y	            STA [LASTFREED],Y           ;  off part of the current block)
.3a1145	e2 20		sep #$20	            SEP #$20
.3a1147	c8		iny		            INY
.3a1148	c8		iny		            INY
.3a1149	a5 0e		lda $080e	            LDA SCRATCH+2
.3a114b	97 cf		sta [$08cf],y	            STA [LASTFREED],Y
.3a114d					init_block
.3a114d	c2 20		rep #$20	            REP #$20
.3a114f	a5 c9		lda $08c9	            LDA CURRFREED
.3a1151	85 c3		sta $08c3	            STA CURRHEADER
.3a1153	e2 20		sep #$20	            SEP #$20
.3a1155	a5 cb		lda $08cb	            LDA CURRFREED+2
.3a1157	85 c5		sta $08c5	            STA CURRHEADER+2
.3a1159	c2 20		rep #$20	            REP #$20
.3a115b	a5 c3		lda $08c3	            LDA CURRHEADER
.3a115d	85 b7		sta $08b7	            STA ALLOCATED
.3a115f	e2 20		sep #$20	            SEP #$20
.3a1161	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1163	85 b9		sta $08b9	            STA ALLOCATED+2
.3a1165	c2 20		rep #$20	            REP #$20
.3a1167	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END        ; Set CURRHEADER->END to the byte after the block
.3a116a	a5 0c		lda $080c	            LDA SCRATCH
.3a116c	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a116e	e2 20		sep #$20	            SEP #$20
.3a1170	c8		iny		            INY
.3a1171	c8		iny		            INY
.3a1172	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1174	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1176	c2 20		rep #$20	            REP #$20
.3a1178	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Set CURRHEADER->NEXT to NULL
.3a117b	a9 00 00	lda #$0000	            LDA #0
.3a117e	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1180	e2 20		sep #$20	            SEP #$20
.3a1182	c8		iny		            INY
.3a1183	c8		iny		            INY
.3a1184	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1186	e2 20		sep #$20	            SEP #$20
.3a1188	a5 ea		lda $08ea	            LDA TOFINDTYPE          ; Get the type code back
.3a118a	e2 20		sep #$20	            SEP #$20
.3a118c	a0 00 00	ldy #$0000	            LDY #HEAPOBJ.TYPE
.3a118f	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1191	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT      ; Set its reference count to 0
.3a1194	a9 00		lda #$00	            LDA #0
.3a1196	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1198	2b		pld		done        PLD
.3a1199	28		plp		            PLP
.3a119a	38		sec		            SEC
.3a119b	60		rts		            RTS
.3a119c					HEAP_GETHED
.3a119c	08		php		            PHP
.3a119d	c2 20		rep #$20	            REP #$20
.3a119f	38		sec		            SEC
.3a11a0	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a11a2	e9 08 00	sbc #$0008	            SBC #size(HEAPOBJ)
.3a11a5	85 c3		sta $08c3	            STA CURRHEADER
.3a11a7	e2 20		sep #$20	            SEP #$20
.3a11a9	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a11ab	e9 00		sbc #$00	            SBC #0
.3a11ad	85 c5		sta $08c5	            STA CURRHEADER+2
.3a11af	28		plp		            PLP
.3a11b0	60		rts		            RTS
.3a11b1					HEAP_ADDREF
.3a11b1	08		php		            PHP
.3a11b2	e2 20		sep #$20	            SEP #$20
.3a11b4	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a11b6	f0 04		beq $3a11bc	            BEQ chk_null
.3a11b8	c9 38		cmp #$38	            CMP #`(HEAP_TOP + 1)
.3a11ba	b0 12		bcs $3a11ce	            BGE out_of_bnds
.3a11bc					chk_null
.3a11bc	c2 20		rep #$20	            REP #$20
.3a11be	a5 c3		lda $08c3	            LDA CURRHEADER
.3a11c0	f0 0c		beq $3a11ce	            BEQ out_of_bnds
.3a11c2					is_ok
.3a11c2	e2 20		sep #$20	            SEP #$20
.3a11c4	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT
.3a11c7	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a11c9	1a		inc a		            INC A
.3a11ca	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11cc	28		plp		            PLP
.3a11cd	60		rts		            RTS
.3a11ce	00		brk #		out_of_bnds BRK
.3a11cf	ea		nop		            NOP
.3a11d0					HEAP_REMREF
.3a11d0	08		php		            PHP
.3a11d1	e2 20		sep #$20	            SEP #$20
.3a11d3	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a11d5	f0 04		beq $3a11db	            BEQ chk_null
.3a11d7	c9 38		cmp #$38	            CMP #`(HEAP_TOP + 1)
.3a11d9	b0 17		bcs $3a11f2	            BGE out_of_bnds
.3a11db					chk_null
.3a11db	c2 20		rep #$20	            REP #$20
.3a11dd	a5 c3		lda $08c3	            LDA CURRHEADER
.3a11df	f0 11		beq $3a11f2	            BEQ out_of_bnds
.3a11e1	e2 20		sep #$20	            SEP #$20
.3a11e3	a0 01 00	ldy #$0001	            LDY #HEAPOBJ.COUNT  ; Decrement the reference count
.3a11e6	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a11e8	3a		dec a		            DEC A
.3a11e9	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a11eb	d0 03		bne $3a11f0	            BNE done            ; If it's still >0, we are done
.3a11ed	20 f4 11	jsr $3a11f4	            JSR HEAP_FREE
.3a11f0	28		plp		done        PLP
.3a11f1	60		rts		            RTS
.3a11f2	00		brk #		out_of_bnds BRK
.3a11f3	ea		nop		            NOP
.3a11f4					HEAP_FREE
.3a11f4	08		php		            PHP
.3a11f5	c2 20		rep #$20	            REP #$20
.3a11f7	a5 bd		lda $08bd	            LDA FREED           ; Check to see if blocks are already on the freed list
.3a11f9	d0 21		bne $3a121c	            BNE has_objects
.3a11fb	e2 20		sep #$20	            SEP #$20
.3a11fd	a5 bf		lda $08bf	            LDA FREED+2
.3a11ff	d0 1b		bne $3a121c	            BNE has_objects
.3a1201	a5 c5		lda $08c5	            LDA CURRHEADER+2    ; No: this block is the first one
.3a1203	85 bf		sta $08bf	            STA FREED+2         ; Just make it the freed list
.3a1205	c2 20		rep #$20	            REP #$20
.3a1207	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1209	85 bd		sta $08bd	            STA FREED
.3a120b	a9 00 00	lda #$0000	            LDA #0
.3a120e	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT   ; And clear its next link
.3a1211	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1213	c8		iny		            INY
.3a1214	c8		iny		            INY
.3a1215	e2 20		sep #$20	            SEP #$20
.3a1217	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1219	4c db 12	jmp $3a12db	            JMP done
.3a121c					has_objects
.3a121c	e2 20		sep #$20	            SEP #$20
.3a121e	a5 bf		lda $08bf	            LDA FREED+2
.3a1220	c5 c5		cmp $08c5	            CMP CURRHEADER+2
.3a1222	90 28		bcc $3a124c	            BLT start_scan
.3a1224	c2 20		rep #$20	            REP #$20
.3a1226	a5 bd		lda $08bd	            LDA FREED
.3a1228	c5 c3		cmp $08c3	            CMP CURRHEADER
.3a122a	90 20		bcc $3a124c	            BLT start_scan
.3a122c					ins_first
.3a122c	c2 20		rep #$20	            REP #$20
.3a122e	a5 bd		lda $08bd	            LDA FREED               ; CURRHEADER->NEXT := FREED
.3a1230	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1233	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1235	e2 20		sep #$20	            SEP #$20
.3a1237	c8		iny		            INY
.3a1238	c8		iny		            INY
.3a1239	a5 bf		lda $08bf	            LDA FREED+2
.3a123b	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a123d	c2 20		rep #$20	            REP #$20
.3a123f	a5 c3		lda $08c3	            LDA CURRHEADER
.3a1241	85 bd		sta $08bd	            STA FREED
.3a1243	e2 20		sep #$20	            SEP #$20
.3a1245	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a1247	85 bf		sta $08bf	            STA FREED+2
.3a1249	4c db 12	jmp $3a12db	            JMP done
.3a124c					start_scan
.3a124c	c2 20		rep #$20	            REP #$20
.3a124e	a5 bd		lda $08bd	            LDA FREED
.3a1250	85 08		sta $0808	            STA INDEX
.3a1252	e2 20		sep #$20	            SEP #$20
.3a1254	a5 bf		lda $08bf	            LDA FREED+2
.3a1256	85 0a		sta $080a	            STA INDEX+2
.3a1258					loop
.3a1258	e2 20		sep #$20	            SEP #$20
.3a125a	a0 04 00	ldy #$0004	            LDY #HEAPOBJ.NEXT+2
.3a125d	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a125f	c5 c8		cmp $08c8	            CMP CURREND+2
.3a1261	90 32		bcc $3a1295	            BLT go_next             ; No: check the next spot
.3a1263	d0 0b		bne $3a1270	            BNE ins_next
.3a1265	c2 20		rep #$20	            REP #$20
.3a1267	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a126a	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a126c	c5 c6		cmp $08c6	            CMP CURREND
.3a126e	90 25		bcc $3a1295	            BLT go_next             ; No: check the next spot
.3a1270					ins_next
.3a1270	c2 20		rep #$20	            REP #$20
.3a1272	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := INDEX->NEXT
.3a1275	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a1277	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1279	e2 20		sep #$20	            SEP #$20
.3a127b	c8		iny		            INY
.3a127c	c8		iny		            INY
.3a127d	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a127f	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1281	c2 20		rep #$20	            REP #$20
.3a1283	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.3a1285	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1288	97 08		sta [$0808],y	            STA [INDEX],Y
.3a128a	e2 20		sep #$20	            SEP #$20
.3a128c	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a128e	c8		iny		            INY
.3a128f	c8		iny		            INY
.3a1290	97 08		sta [$0808],y	            STA [INDEX],Y
.3a1292	4c db 12	jmp $3a12db	            JMP done
.3a1295					go_next
.3a1295	c2 20		rep #$20	            REP #$20
.3a1297	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; Is INDEX->NEXT = 0
.3a129a	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a129c	d0 08		bne $3a12a6	            BNE not_at_end          ; No: load up the next object
.3a129e	e2 20		sep #$20	            SEP #$20
.3a12a0	c8		iny		            INY
.3a12a1	c8		iny		            INY
.3a12a2	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12a4	f0 19		beq $3a12bf	            BEQ at_end
.3a12a6					not_at_end
.3a12a6	c2 20		rep #$20	            REP #$20
.3a12a8	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; INDEX := INDEX->NEXT
.3a12ab	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12ad	85 0c		sta $080c	            STA SCRATCH
.3a12af	e2 20		sep #$20	            SEP #$20
.3a12b1	c8		iny		            INY
.3a12b2	c8		iny		            INY
.3a12b3	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a12b5	85 0a		sta $080a	            STA INDEX+2
.3a12b7	c2 20		rep #$20	            REP #$20
.3a12b9	a5 0c		lda $080c	            LDA SCRATCH
.3a12bb	85 08		sta $0808	            STA INDEX
.3a12bd	80 99		bra $3a1258	            BRA loop
.3a12bf					at_end
.3a12bf	c2 20		rep #$20	            REP #$20
.3a12c1	a5 c3		lda $08c3	            LDA CURRHEADER           ; INDEX->NEXT := CURRHEADER
.3a12c3	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a12c6	97 08		sta [$0808],y	            STA [INDEX],Y
.3a12c8	e2 20		sep #$20	            SEP #$20
.3a12ca	c8		iny		            INY
.3a12cb	c8		iny		            INY
.3a12cc	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a12ce	97 08		sta [$0808],y	            STA [INDEX],Y
.3a12d0	a9 00		lda #$00	            LDA #0                  ; CURRHEADER->NEXT := 0
.3a12d2	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12d4	c2 20		rep #$20	            REP #$20
.3a12d6	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a12d9	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a12db					done
.3a12db	20 e0 12	jsr $3a12e0	            JSR COALLESCE
.3a12de	28		plp		            PLP
.3a12df	60		rts		            RTS
.3a12e0					COALLESCE
.3a12e0	08		php		            PHP
.3a12e1	c2 20		rep #$20	            REP #$20
.3a12e3	a5 bd		lda $08bd	            LDA FREED
.3a12e5	85 c3		sta $08c3	            STA CURRHEADER
.3a12e7	e2 20		sep #$20	            SEP #$20
.3a12e9	a5 bf		lda $08bf	            LDA FREED+2
.3a12eb	85 c5		sta $08c5	            STA CURRHEADER+2
.3a12ed					next_head
.3a12ed	c2 20		rep #$20	            REP #$20
.3a12ef	a5 c3		lda $08c3	            LDA CURRHEADER          ; Is CURRHEADER == 0?
.3a12f1	d0 09		bne $3a12fc	            BNE check_next          ; No: check if NEXT is contiguous
.3a12f3	e2 20		sep #$20	            SEP #$20
.3a12f5	a5 c5		lda $08c5	            LDA CURRHEADER+2
.3a12f7	d0 03		bne $3a12fc	            BNE check_next
.3a12f9	4c 83 13	jmp $3a1383	            JMP done                ; Yes: we're done
.3a12fc					check_next
.3a12fc	c2 20		rep #$20	            REP #$20
.3a12fe	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1301	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1303	85 0c		sta $080c	            STA SCRATCH
.3a1305	e2 20		sep #$20	            SEP #$20
.3a1307	c8		iny		            INY
.3a1308	c8		iny		            INY
.3a1309	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a130b	85 0e		sta $080e	            STA SCRATCH+2
.3a130d	c2 20		rep #$20	            REP #$20
.3a130f	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END
.3a1312	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1314	85 10		sta $0810	            STA SCRATCH2
.3a1316	e2 20		sep #$20	            SEP #$20
.3a1318	c8		iny		            INY
.3a1319	c8		iny		            INY
.3a131a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a131c	85 12		sta $0812	            STA SCRATCH2+2
.3a131e	c2 20		rep #$20	            REP #$20
.3a1320	a5 0c		lda $080c	            LDA SCRATCH
.3a1322	c5 10		cmp $0810	            CMP SCRATCH2            ; Is CURRHEADER->END = CURRHEADER->NEXT?
.3a1324	d0 08		bne $3a132e	            BNE go_next             ; No: go to the next block
.3a1326	e2 20		sep #$20	            SEP #$20
.3a1328	a5 0e		lda $080e	            LDA SCRATCH+2
.3a132a	c5 12		cmp $0812	            CMP SCRATCH2+2
.3a132c	f0 1f		beq $3a134d	            BEQ combine             ; Yes: combine the two blocks
.3a132e					go_next
.3a132e	c2 20		rep #$20	            REP #$20
.3a1330	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1333	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1335	85 0c		sta $080c	            STA SCRATCH
.3a1337	e2 20		sep #$20	            SEP #$20
.3a1339	c8		iny		            INY
.3a133a	c8		iny		            INY
.3a133b	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a133d	85 0e		sta $080e	            STA SCRATCH+2
.3a133f	c2 20		rep #$20	            REP #$20
.3a1341	a5 0c		lda $080c	            LDA SCRATCH
.3a1343	85 c3		sta $08c3	            STA CURRHEADER
.3a1345	e2 20		sep #$20	            SEP #$20
.3a1347	a5 0e		lda $080e	            LDA SCRATCH+2
.3a1349	85 c5		sta $08c5	            STA CURRHEADER+2
.3a134b	80 a0		bra $3a12ed	            BRA next_head                               ; And loop back to next_head
.3a134d					combine
.3a134d	c2 20		rep #$20	            REP #$20
.3a134f	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT
.3a1352	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a1354	85 0c		sta $080c	            STA SCRATCH
.3a1356	e2 20		sep #$20	            SEP #$20
.3a1358	c8		iny		            INY
.3a1359	c8		iny		            INY
.3a135a	b7 c3		lda [$08c3],y	            LDA [CURRHEADER],Y
.3a135c	85 0e		sta $080e	            STA SCRATCH+2
.3a135e	c2 20		rep #$20	            REP #$20
.3a1360	a0 02 00	ldy #$0002	            LDY #HEAPOBJ.NEXT       ; CURRHEADER->NEXT := SCRATCH->NEXT
.3a1363	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a1365	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1367	e2 20		sep #$20	            SEP #$20
.3a1369	c8		iny		            INY
.3a136a	c8		iny		            INY
.3a136b	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a136d	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a136f	c2 20		rep #$20	            REP #$20
.3a1371	a0 05 00	ldy #$0005	            LDY #HEAPOBJ.END       ; CURRHEADER->END := SCRATCH->END
.3a1374	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a1376	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1378	e2 20		sep #$20	            SEP #$20
.3a137a	c8		iny		            INY
.3a137b	c8		iny		            INY
.3a137c	b7 0c		lda [$080c],y	            LDA [SCRATCH],Y
.3a137e	97 c3		sta [$08c3],y	            STA [CURRHEADER],Y
.3a1380	4c fc 12	jmp $3a12fc	            JMP check_next          ; And loop back to check_next
.3a1383	28		plp		done        PLP
.3a1384	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\strings.s

.3a1385					CLRTMPSTR
.3a1385	08		php		            PHP
.3a1386	c2 20		rep #$20	            REP #$20
.3a1388	64 16		stz $0816	            STZ STRPTR
.3a138a	64 18		stz $0818	            STZ STRPTR+2
.3a138c	28		plp		            PLP
.3a138d	60		rts		            RTS
.3a138e					TEMPSTRING
.3a138e	08		php		            PHP
.3a138f	c2 30		rep #$30	            REP #$30
.3a1391	a5 16		lda $0816	            LDA STRPTR          ; Is STRPTR == 0?
.3a1393	d0 16		bne $3a13ab	            BNE add_256         ; No: add 256 to it
.3a1395	a5 18		lda $0818	            LDA STRPTR+2
.3a1397	d0 12		bne $3a13ab	            BNE add_256
.3a1399	e2 20		sep #$20	            SEP #$20
.3a139b	64 16		stz $0816	            STZ STRPTR
.3a139d	a5 e2		lda $08e2	            LDA NEXTVAR+1
.3a139f	1a		inc a		            INC A
.3a13a0	1a		inc a		            INC A
.3a13a1	85 17		sta $0817	            STA STRPTR+1
.3a13a3	a5 e3		lda $08e3	            LDA NEXTVAR+2
.3a13a5	85 18		sta $0818	            STA STRPTR+2
.3a13a7	64 19		stz $0819	            STZ STRPTR+3
.3a13a9	80 07		bra $3a13b2	            BRA chk_room
.3a13ab					add_256
.3a13ab	c2 20		rep #$20	            REP #$20
.3a13ad	a5 17		lda $0817	            LDA STRPTR+1        ; There was already a temporary string...
.3a13af	1a		inc a		            INC A               ; Leave 256 bytes for it
.3a13b0	85 17		sta $0817	            STA STRPTR+1
.3a13b2					chk_room
.3a13b2	c2 20		rep #$20	            REP #$20
.3a13b4	a5 bb		lda $08bb	            LDA HEAP+1          ; Check to make sure that STRPTR and HEAP haven't touched
.3a13b6	3a		dec a		            DEC A
.3a13b7	c5 17		cmp $0817	            CMP STRPTR+1
.3a13b9	f0 02		beq $3a13bd	            BEQ no_room         ; If they have, throw an error
.3a13bb	b0 1f		bcs $3a13dc	            BGE done
.3a13bd					no_room
.3a13bd	08		php		            PHP
.3a13be	c2 20		rep #$20	            REP #$20
.3a13c0	48		pha		            PHA
.3a13c1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a13c4	5b		tcd		            TCD
.3a13c5	68		pla		            PLA
.3a13c6	28		plp		            PLP
.3a13c7	e2 20		sep #$20	            SEP #$20
.3a13c9	a9 03		lda #$03	            LDA #ERR_MEMORY
.3a13cb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a13cf	c2 20		rep #$20	            REP #$20
.3a13d1	29 ff 00	and #$00ff	            AND #$00FF
.3a13d4	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a13d7	e2 20		sep #$20	            SEP #$20
.3a13d9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a13dc	28		plp		done        PLP
.3a13dd	60		rts		            RTS
.3a13de					ITOS_DIGIT
.3a13de	c9 00		cmp #$00	            CMP #0          ; Is it 0?
.3a13e0	d0 05		bne $3a13e7	            BNE add_digit   ; No: go ahead and add it
.3a13e2	c0 01 00	cpy #$0001	            CPY #1          ; Are we on the first digit?
.3a13e5	f0 05		beq $3a13ec	            BEQ done        ; Yes: ignore this leading 0
.3a13e7	09 30		ora #$30	add_digit   ORA #$30        ; Convert it to ASCII
.3a13e9	97 16		sta [$0816],y	            STA [STRPTR],Y  ; Save it to the string
.3a13eb	c8		iny		            INY             ; And point to the next location
.3a13ec					done
.3a13ec	60		rts		            RTS
.3a13ed					ITOS
.3a13ed	08		php		            PHP
.3a13ee	c2 30		rep #$30	            REP #$30
.3a13f0	64 0c		stz $080c	            STZ SCRATCH         ; Use scratch to store if negative
.3a13f2	a5 25		lda $0825	            LDA ARGUMENT1+2     ; Check to see if the number is negative
.3a13f4	10 1a		bpl $3a1410	            BPL start_cnvt
.3a13f6	18		clc		            CLC                 ; Yes: make ARGUMENT1 positive
.3a13f7	a5 23		lda $0823	            LDA ARGUMENT1
.3a13f9	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a13fc	69 01 00	adc #$0001	            ADC #1
.3a13ff	85 23		sta $0823	            STA ARGUMENT1
.3a1401	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1403	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a1406	69 00 00	adc #$0000	            ADC #0
.3a1409	85 25		sta $0825	            STA ARGUMENT1+2
.3a140b	a9 ff ff	lda #$ffff	            LDA #$FFFF          ; Record that the number was negative
.3a140e	85 0c		sta $080c	            STA SCRATCH
.3a1410					start_cnvt
.3a1410	64 10		stz $0810	            STZ SCRATCH2        ; SCRATCH2 will be our BCD version of the number
.3a1412	64 12		stz $0812	            STZ SCRATCH2+2
.3a1414	64 14		stz $0814	            STZ SCRATCH2+4
.3a1416	a2 1f 00	ldx #$001f	            LDX #31
.3a1419	f8		sed		            SED                 ; Yes, we're really using BCD mode
.3a141a	06 23		asl $0823	shift_loop  ASL ARGUMENT1       ; Shift ARGUMENT1 left one bit
.3a141c	26 25		rol $0825	            ROL ARGUMENT1+2
.3a141e	a5 10		lda $0810	            LDA SCRATCH2        ; SCRATCH2 := SCRATCH2 + SCRATCH2 + Carry
.3a1420	65 10		adc $0810	            ADC SCRATCH2
.3a1422	85 10		sta $0810	            STA SCRATCH2
.3a1424	a5 12		lda $0812	            LDA SCRATCH2+2
.3a1426	65 12		adc $0812	            ADC SCRATCH2+2
.3a1428	85 12		sta $0812	            STA SCRATCH2+2
.3a142a	a5 14		lda $0814	            LDA SCRATCH2+4
.3a142c	65 14		adc $0814	            ADC SCRATCH2+4
.3a142e	85 14		sta $0814	            STA SCRATCH2+4
.3a1430	ca		dex		            DEX
.3a1431	10 e7		bpl $3a141a	            BPL shift_loop      ; Loop through all 32 bits of ARGUMENT1
.3a1433	d8		cld		            CLD                 ; Switch back out of BCD mode
.3a1434	e2 20		sep #$20	            SEP #$20
.3a1436	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a1439	a0 00 00	ldy #$0000	            LDY #0              ; Y will be index into the temporary string
.3a143c	a5 0c		lda $080c	            LDA SCRATCH         ; Check to see if the number was negative
.3a143e	f0 04		beq $3a1444	            BEQ is_pos          ; No: write a leading space
.3a1440	a9 2d		lda #$2d	            LDA #'-'            ; If negative, write the minus sign
.3a1442	80 02		bra $3a1446	            BRA wr_lead
.3a1444	a9 20		lda #$20	is_pos      LDA #CHAR_SP        ; Write a leading space
.3a1446	97 16		sta [$0816],y	wr_lead     STA [STRPTR],Y
.3a1448	c8		iny		            INY
.3a1449	a2 05 00	ldx #$0005	            LDX #5
.3a144c	b5 10		lda $0810,x	ascii_loop  LDA SCRATCH2,X
.3a144e	29 f0		and #$f0	            AND #$F0
.3a1450	4a		lsr a		            LSR A
.3a1451	4a		lsr a		            LSR A
.3a1452	4a		lsr a		            LSR A
.3a1453	4a		lsr a		            LSR A
.3a1454	20 de 13	jsr $3a13de	            JSR ITOS_DIGIT
.3a1457	b5 10		lda $0810,x	            LDA SCRATCH2,X
.3a1459	29 0f		and #$0f	            AND #$0F
.3a145b	20 de 13	jsr $3a13de	            JSR ITOS_DIGIT
.3a145e	ca		dex		            DEX
.3a145f	10 eb		bpl $3a144c	            BPL ascii_loop
.3a1461	c0 01 00	cpy #$0001	            CPY #1              ; Did we write anything?
.3a1464	d0 0c		bne $3a1472	            BNE null_term       ; Yes: add a NULL to terminate
.3a1466	a9 20		lda #$20	            LDA #' '            ; No: write a " 0" to the string
.3a1468	87 16		sta [$0816]	            STA [STRPTR]
.3a146a	a0 01 00	ldy #$0001	            LDY #1
.3a146d	a9 30		lda #$30	            LDA #'0'
.3a146f	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a1471	c8		iny		            INY
.3a1472	a9 00		lda #$00	null_term   LDA #0
.3a1474	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And terminate the string
.3a1476	28		plp		done        PLP
.3a1477	60		rts		            RTS
.3a1478	00		brk #		fault       BRK
.3a1479	ea		nop		            NOP
.3a147a					STRLEN
.3a147a	08		php		            PHP
.3a147b	e2 20		sep #$20	            SEP #$20
.3a147d	c2 10		rep #$10	            REP #$10
.3a147f	a0 00 00	ldy #$0000	            LDY #0
.3a1482	bd 00 00	lda $3a0000,x	loop        LDA #0,B,X
.3a1485	f0 04		beq $3a148b	            BEQ done
.3a1487	e8		inx		            INX
.3a1488	c8		iny		            INY
.3a1489	80 f7		bra $3a1482	            BRA loop
.3a148b	28		plp		done        PLP
.3a148c	60		rts		            RTS
.3a148d					STRCMP
.3a148d	08		php		            PHP
.3a148e	0b		phd		            PHD
.3a148f	08		php		            PHP
.3a1490	c2 20		rep #$20	            REP #$20
.3a1492	48		pha		            PHA
.3a1493	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1496	5b		tcd		            TCD
.3a1497	68		pla		            PLA
.3a1498	28		plp		            PLP
.3a1499	e2 20		sep #$20	            SEP #$20
.3a149b	c2 10		rep #$10	            REP #$10
.3a149d	a0 00 00	ldy #$0000	            LDY #0
.3a14a0	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Check if the character 1 is 0
.3a14a2	d0 04		bne $3a14a8	            BNE comp_mag            ; If not, check the magnitudes
.3a14a4	b7 29		lda [$0829],y	            LDA [ARGUMENT2],Y       ; If so, check if the character 2 is 0
.3a14a6	f0 25		beq $3a14cd	            BEQ are_equal           ; If so, the strings are equal
.3a14a8	b7 23		lda [$0823],y	comp_mag    LDA [ARGUMENT1],Y       ; Otherwise, get character 1 again
.3a14aa	d7 29		cmp [$0829],y	            CMP [ARGUMENT2],Y       ; And compare it to character 2
.3a14ac	90 12		bcc $3a14c0	            BLT is_less             ; Check if character 1 < character 2
.3a14ae	d0 03		bne $3a14b3	            BNE is_greater          ; Check if character 1 > character 2
.3a14b0	c8		iny		            INY                     ; Equal so far... so go to the next pair of characters
.3a14b1	80 ed		bra $3a14a0	            BRA loop
.3a14b3					is_greater
.3a14b3	c2 20		rep #$20	            REP #$20
.3a14b5	a9 01 00	lda #$0001	            LDA #1                  ; So return 1
.3a14b8	85 23		sta $0823	            STA ARGUMENT1
.3a14ba	e2 20		sep #$20	            SEP #$20
.3a14bc	64 25		stz $0825	            STZ ARGUMENT1+2
.3a14be	80 15		bra $3a14d5	            BRA done
.3a14c0					is_less
.3a14c0	c2 20		rep #$20	            REP #$20
.3a14c2	a9 ff ff	lda #$ffff	            LDA #$FFFF              ; So return -1
.3a14c5	85 23		sta $0823	            STA ARGUMENT1
.3a14c7	e2 20		sep #$20	            SEP #$20
.3a14c9	85 25		sta $0825	            STA ARGUMENT1+2
.3a14cb	80 08		bra $3a14d5	            BRA done
.3a14cd					are_equal
.3a14cd	c2 20		rep #$20	            REP #$20
.3a14cf	64 23		stz $0823	            STZ ARGUMENT1           ; So return 0
.3a14d1	e2 20		sep #$20	            SEP #$20
.3a14d3	64 25		stz $0825	            STZ ARGUMENT1+2
.3a14d5					done
.3a14d5	e2 20		sep #$20	            SEP #$20
.3a14d7	a9 00		lda #$00	            LDA #TYPE_INTEGER
.3a14d9	85 27		sta $0827	            STA ARGTYPE1
.3a14db	2b		pld		            PLD
.3a14dc	28		plp		            PLP
.3a14dd	60		rts		            RTS
.3a14de					STRCONCAT
.3a14de	08		php		            PHP
.3a14df	0b		phd		            PHD
.3a14e0	8b		phb		            PHB
.3a14e1	08		php		            PHP
.3a14e2	c2 20		rep #$20	            REP #$20
.3a14e4	48		pha		            PHA
.3a14e5	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a14e8	5b		tcd		            TCD
.3a14e9	68		pla		            PLA
.3a14ea	28		plp		            PLP
.3a14eb	e2 20		sep #$20	            SEP #$20
.3a14ed	c2 10		rep #$10	            REP #$10
.3a14ef	08		php		            PHP
.3a14f0	c2 20		rep #$20	            REP #$20
.3a14f2	48		pha		            PHA
.3a14f3	e2 20		sep #$20	            SEP #$20
.3a14f5	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a14f7	48		pha		            PHA
.3a14f8	ab		plb		            PLB
.3a14f9	c2 20		rep #$20	            REP #$20
.3a14fb	68		pla		            PLA
.3a14fc	28		plp		            PLP
.3a14fd	a6 23		ldx $0823	            LDX ARGUMENT1
.3a14ff	20 7a 14	jsr $3a147a	            JSR STRLEN
.3a1502	84 0c		sty $080c	            STY SCRATCH
.3a1504	08		php		            PHP
.3a1505	c2 20		rep #$20	            REP #$20
.3a1507	48		pha		            PHA
.3a1508	e2 20		sep #$20	            SEP #$20
.3a150a	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a150c	48		pha		            PHA
.3a150d	ab		plb		            PLB
.3a150e	c2 20		rep #$20	            REP #$20
.3a1510	68		pla		            PLA
.3a1511	28		plp		            PLP
.3a1512	a6 29		ldx $0829	            LDX ARGUMENT2
.3a1514	20 7a 14	jsr $3a147a	            JSR STRLEN
.3a1517	c2 20		rep #$20	            REP #$20
.3a1519	98		tya		            TYA
.3a151a	38		sec		            SEC                     ; X := LEN(ARGUMENT1) + LEN(ARGUMENT2) + 1
.3a151b	65 0c		adc $080c	            ADC SCRATCH
.3a151d	aa		tax		            TAX
.3a151e	e2 20		sep #$20	            SEP #$20
.3a1520	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set type to STRING
.3a1522	20 60 0f	jsr $3a0f60	            JSR ALLOC
.3a1525	c2 20		rep #$20	            REP #$20
.3a1527	a5 b7		lda $08b7	            LDA ALLOCATED           ; INDEX := pointer to the string
.3a1529	85 08		sta $0808	            STA INDEX
.3a152b	e2 20		sep #$20	            SEP #$20
.3a152d	a5 b9		lda $08b9	            LDA ALLOCATED+2
.3a152f	85 0a		sta $080a	            STA INDEX+2
.3a1531	a0 00 00	ldy #$0000	            LDY #0                  ; Set the target index to the beginning
.3a1534	08		php		            PHP
.3a1535	c2 20		rep #$20	            REP #$20
.3a1537	48		pha		            PHA
.3a1538	e2 20		sep #$20	            SEP #$20
.3a153a	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a153c	48		pha		            PHA
.3a153d	ab		plb		            PLB
.3a153e	c2 20		rep #$20	            REP #$20
.3a1540	68		pla		            PLA
.3a1541	28		plp		            PLP
.3a1542	a6 23		ldx $0823	            LDX ARGUMENT1
.3a1544	bd 00 00	lda $3a0000,x	loop1       LDA #0,B,X              ; Get the Xth byte of ARGUMENT1
.3a1547	f0 06		beq $3a154f	            BEQ copy_2              ; Is it null? Yes: move on to the next string
.3a1549	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.3a154b	e8		inx		            INX                     ; Point to the next characters
.3a154c	c8		iny		            INY
.3a154d	80 f5		bra $3a1544	            BRA loop1               ; And do again
.3a154f					copy_2
.3a154f	e2 20		sep #$20	            SEP #$20
.3a1551	08		php		            PHP
.3a1552	c2 20		rep #$20	            REP #$20
.3a1554	48		pha		            PHA
.3a1555	e2 20		sep #$20	            SEP #$20
.3a1557	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a1559	48		pha		            PHA
.3a155a	ab		plb		            PLB
.3a155b	c2 20		rep #$20	            REP #$20
.3a155d	68		pla		            PLA
.3a155e	28		plp		            PLP
.3a155f	a6 29		ldx $0829	            LDX ARGUMENT2
.3a1561	bd 00 00	lda $3a0000,x	loop2       LDA #0,B,X              ; Get the Xth byte of ARGUMENT2
.3a1564	97 08		sta [$0808],y	            STA [INDEX],Y           ; And save it to the Yth position on the new string
.3a1566	f0 04		beq $3a156c	            BEQ terminate           ; Is it null? Yes: move on to the next string
.3a1568	e8		inx		            INX                     ; Point to the next characters
.3a1569	c8		iny		            INY
.3a156a	80 f5		bra $3a1561	            BRA loop2               ; And do again
.3a156c					terminate
.3a156c	c2 20		rep #$20	            REP #$20
.3a156e	a5 08		lda $0808	            LDA INDEX               ; Set ARGUMENT1 to the new string
.3a1570	85 23		sta $0823	            STA ARGUMENT1
.3a1572	e2 20		sep #$20	            SEP #$20
.3a1574	a5 0a		lda $080a	            LDA INDEX+2
.3a1576	85 25		sta $0825	            STA ARGUMENT1+2
.3a1578	a9 02		lda #$02	            LDA #TYPE_STRING        ; Set ARGUMENT1's type to STRING
.3a157a	85 27		sta $0827	            STA ARGTYPE1
.3a157c	ab		plb		            PLB
.3a157d	2b		pld		            PLD
.3a157e	28		plp		            PLP
.3a157f	60		rts		            RTS
.3a1580					STRCPY
.3a1580	da		phx		            PHX
.3a1581	5a		phy		            PHY
.3a1582	08		php		            PHP
.3a1583	0b		phd		            PHD
.3a1584	8b		phb		            PHB
.3a1585	08		php		            PHP
.3a1586	c2 20		rep #$20	            REP #$20
.3a1588	48		pha		            PHA
.3a1589	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a158c	5b		tcd		            TCD
.3a158d	68		pla		            PLA
.3a158e	28		plp		            PLP
.3a158f	c2 20		rep #$20	            REP #$20
.3a1591	a5 0a		lda $080a	            LDA INDEX+2
.3a1593	48		pha		            PHA
.3a1594	a5 08		lda $0808	            LDA INDEX
.3a1596	48		pha		            PHA
.3a1597	c2 30		rep #$30	            REP #$30
.3a1599	08		php		            PHP
.3a159a	c2 20		rep #$20	            REP #$20
.3a159c	48		pha		            PHA
.3a159d	e2 20		sep #$20	            SEP #$20
.3a159f	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a15a1	48		pha		            PHA
.3a15a2	ab		plb		            PLB
.3a15a3	c2 20		rep #$20	            REP #$20
.3a15a5	68		pla		            PLA
.3a15a6	28		plp		            PLP
.3a15a7	a6 23		ldx $0823	            LDX ARGUMENT1
.3a15a9	20 7a 14	jsr $3a147a	            JSR STRLEN
.3a15ac	98		tya		            TYA
.3a15ad	aa		tax		            TAX
.3a15ae	e8		inx		            INX                     ; Put length of string (plus NUL) in X
.3a15af	e2 20		sep #$20	            SEP #$20
.3a15b1	a9 02		lda #$02	            LDA #TYPE_STRING
.3a15b3	20 60 0f	jsr $3a0f60	            JSR ALLOC
.3a15b6	c2 20		rep #$20	            REP #$20
.3a15b8	a5 c0		lda $08c0	            LDA CURRBLOCK
.3a15ba	85 08		sta $0808	            STA INDEX
.3a15bc	a5 c2		lda $08c2	            LDA CURRBLOCK+2
.3a15be	85 0a		sta $080a	            STA INDEX+2
.3a15c0	a0 00 00	ldy #$0000	            LDY #0
.3a15c3	e2 20		sep #$20	            SEP #$20
.3a15c5	b7 23		lda [$0823],y	loop        LDA [ARGUMENT1],Y       ; Copy the data to the allocated string
.3a15c7	97 08		sta [$0808],y	            STA [INDEX],Y
.3a15c9	f0 03		beq $3a15ce	            BEQ ret_copy
.3a15cb	c8		iny		            INY
.3a15cc	80 f7		bra $3a15c5	            BRA loop
.3a15ce					ret_copy
.3a15ce	c2 20		rep #$20	            REP #$20
.3a15d0	a5 08		lda $0808	            LDA INDEX
.3a15d2	85 23		sta $0823	            STA ARGUMENT1
.3a15d4	a5 0a		lda $080a	            LDA INDEX+2
.3a15d6	85 25		sta $0825	            STA ARGUMENT1+2
.3a15d8	c2 20		rep #$20	            REP #$20
.3a15da	68		pla		            PLA
.3a15db	85 08		sta $0808	            STA INDEX
.3a15dd	68		pla		            PLA
.3a15de	85 0a		sta $080a	            STA INDEX+2
.3a15e0	ab		plb		            PLB
.3a15e1	2b		pld		            PLD
.3a15e2	28		plp		            PLP
.3a15e3	7a		ply		            PLY
.3a15e4	fa		plx		            PLX
.3a15e5	60		rts		            RTS
.3a15e6					STRSUBSTR
.3a15e6	08		php		            PHP
.3a15e7	e2 20		sep #$20	            SEP #$20
.3a15e9	c2 10		rep #$10	            REP #$10
.3a15eb	a0 00 00	ldy #$0000	            LDY #0
.3a15ee	b7 23		lda [$0823],y	count_loop  LDA [ARGUMENT1],Y
.3a15f0	f0 05		beq $3a15f7	            BEQ counted
.3a15f2	c8		iny		            INY
.3a15f3	80 f9		bra $3a15ee	            BRA count_loop
.3a15f5	84 92		sty $0892	            STY MTEMP               ; MTEMP := length of the source string
.3a15f7					counted
.3a15f7	c2 30		rep #$30	            REP #$30
.3a15f9	c4 29		cpy $0829	            CPY ARGUMENT2           ; length of string <= index?
.3a15fb	90 13		bcc $3a1610	            BLT ret_empty           ; Yes: return empty string
.3a15fd	f0 11		beq $3a1610	            BEQ ret_empty
.3a15ff	a5 8f		lda $088f	            LDA MCOUNT              ; Is the desired count <= 0?
.3a1601	30 0d		bmi $3a1610	            BMI ret_empty
.3a1603	f0 0b		beq $3a1610	            BEQ ret_empty           ; Yes: return the empty string
.3a1605	c4 8f		cpy $088f	            CPY MCOUNT              ; Is the desired length < the length of the source?
.3a1607	b0 12		bcs $3a161b	            BGE do_slice            ; Yes: go ahead and get the substring
.3a1609	a5 29		lda $0829	            LDA ARGUMENT2           ; Is INDEX == 0?
.3a160b	d0 0e		bne $3a161b	            BNE do_slice            ; No: do a slice
.3a160d	4c 64 16	jmp $3a1664	            JMP done                ; Yes: just return the source string
.3a1610					ret_empty
.3a1610	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a1613	e2 20		sep #$20	            SEP #$20
.3a1615	a9 00		lda #$00	            LDA #0
.3a1617	87 16		sta [$0816]	            STA [STRPTR]
.3a1619	80 39		bra $3a1654	            BRA finish_copy
.3a161b					do_slice
.3a161b	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a161e	c2 30		rep #$30	            REP #$30
.3a1620	18		clc		            CLC                     ; ARGUMENT1 := ARGUMENT1 + index
.3a1621	a5 23		lda $0823	            LDA ARGUMENT1
.3a1623	65 29		adc $0829	            ADC ARGUMENT2
.3a1625	85 23		sta $0823	            STA ARGUMENT1
.3a1627	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1629	69 00 00	adc #$0000	            ADC #0
.3a162c	85 25		sta $0825	            STA ARGUMENT1+2
.3a162e	a0 00 00	ldy #$0000	            LDY #0
.3a1631					copy_loop
.3a1631	e2 20		sep #$20	            SEP #$20
.3a1633	a7 23		lda [$0823]	            LDA [ARGUMENT1]         ; Copy a character from the substring to the temporary string
.3a1635	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a1637	f0 1b		beq $3a1654	            BEQ finish_copy         ; If it is a NULL, we're done
.3a1639	c2 20		rep #$20	            REP #$20
.3a163b	18		clc		            CLC                     ; Move to the next character
.3a163c	a5 23		lda $0823	            LDA ARGUMENT1
.3a163e	69 01 00	adc #$0001	            ADC #1
.3a1641	85 23		sta $0823	            STA ARGUMENT1
.3a1643	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a1645	69 00 00	adc #$0000	            ADC #0
.3a1648	85 25		sta $0825	            STA ARGUMENT1+2
.3a164a	c8		iny		            INY
.3a164b	c4 8f		cpy $088f	            CPY MCOUNT              ; Have we reached the limit to copy?
.3a164d	d0 e2		bne $3a1631	            BNE copy_loop           ; No: copy the next byte
.3a164f	a9 00 00	lda #$0000	            LDA #0                  ; Null terminate string
.3a1652	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a1654					finish_copy
.3a1654	c2 20		rep #$20	            REP #$20
.3a1656	a5 16		lda $0816	            LDA STRPTR
.3a1658	85 23		sta $0823	            STA ARGUMENT1
.3a165a	a5 18		lda $0818	            LDA STRPTR+2
.3a165c	85 25		sta $0825	            STA ARGUMENT1+2
.3a165e	e2 20		sep #$20	            SEP #$20
.3a1660	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a1662	85 27		sta $0827	            STA ARGTYPE1
.3a1664					done
.3a1664	28		plp		            PLP
.3a1665	60		rts		            RTS
.3a1666					OP_STR_LT
.3a1666	08		php		            PHP
.3a1667	c2 30		rep #$30	            REP #$30
.3a1669	20 8d 14	jsr $3a148d	            JSR STRCMP
.3a166c	a5 23		lda $0823	            LDA ARGUMENT1
.3a166e	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.3a1671	d0 05		bne $3a1678	            BNE ret_false               ; No: return false
.3a1673					ret_true
.3a1673	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a1676	80 03		bra $3a167b	            BRA done
.3a1678					ret_false
.3a1678	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a167b	28		plp		done        PLP
.3a167c	60		rts		            RTS
.3a167d					OP_STR_GT
.3a167d	08		php		            PHP
.3a167e	c2 30		rep #$30	            REP #$30
.3a1680	20 8d 14	jsr $3a148d	            JSR STRCMP
.3a1683	a5 23		lda $0823	            LDA ARGUMENT1
.3a1685	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.3a1688	d0 05		bne $3a168f	            BNE ret_false               ; No: return false
.3a168a					ret_true
.3a168a	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a168d	80 03		bra $3a1692	            BRA done
.3a168f					ret_false
.3a168f	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a1692	28		plp		done        PLP
.3a1693	60		rts		            RTS
.3a1694					OP_STR_EQ
.3a1694	08		php		            PHP
.3a1695	c2 30		rep #$30	            REP #$30
.3a1697	20 8d 14	jsr $3a148d	            JSR STRCMP
.3a169a	a5 23		lda $0823	            LDA ARGUMENT1
.3a169c	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.3a169f	d0 05		bne $3a16a6	            BNE ret_false               ; No: return false
.3a16a1					ret_true
.3a16a1	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a16a4	80 03		bra $3a16a9	            BRA done
.3a16a6					ret_false
.3a16a6	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a16a9	28		plp		done        PLP
.3a16aa	60		rts		            RTS
.3a16ab					OP_STR_NE
.3a16ab	08		php		            PHP
.3a16ac	c2 30		rep #$30	            REP #$30
.3a16ae	20 8d 14	jsr $3a148d	            JSR STRCMP
.3a16b1	a5 23		lda $0823	            LDA ARGUMENT1
.3a16b3	c9 00 00	cmp #$0000	            CMP #0                      ; ARGUMENT1 = ARGUMENT2?
.3a16b6	f0 05		beq $3a16bd	            BEQ ret_false               ; Yes: return false
.3a16b8					ret_true
.3a16b8	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a16bb	80 03		bra $3a16c0	            BRA done
.3a16bd					ret_false
.3a16bd	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a16c0	28		plp		done        PLP
.3a16c1	60		rts		            RTS
.3a16c2					OP_STR_GTE
.3a16c2	08		php		            PHP
.3a16c3	c2 30		rep #$30	            REP #$30
.3a16c5	20 8d 14	jsr $3a148d	            JSR STRCMP
.3a16c8	a5 23		lda $0823	            LDA ARGUMENT1
.3a16ca	c9 ff ff	cmp #$ffff	            CMP #$FFFF                  ; ARGUMENT1 < ARGUMENT2?
.3a16cd	f0 05		beq $3a16d4	            BEQ ret_false               ; Yes: return false
.3a16cf					ret_true
.3a16cf	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a16d2	80 03		bra $3a16d7	            BRA done
.3a16d4					ret_false
.3a16d4	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a16d7	28		plp		done        PLP
.3a16d8	60		rts		            RTS
.3a16d9					OP_STR_LTE
.3a16d9	08		php		            PHP
.3a16da	c2 30		rep #$30	            REP #$30
.3a16dc	20 8d 14	jsr $3a148d	            JSR STRCMP
.3a16df	a5 23		lda $0823	            LDA ARGUMENT1
.3a16e1	c9 01 00	cmp #$0001	            CMP #1                      ; ARGUMENT1 > ARGUMENT2?
.3a16e4	f0 05		beq $3a16eb	            BEQ ret_false               ; Yes: return false
.3a16e6					ret_true
.3a16e6	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a16e9	80 03		bra $3a16ee	            BRA done
.3a16eb					ret_false
.3a16eb	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a16ee	28		plp		done        PLP
.3a16ef	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\listing.s

.3a16f0					LISTPROG
.3a16f0	48		pha		            PHA
.3a16f1	5a		phy		            PHY
.3a16f2	0b		phd		            PHD
.3a16f3	08		php		            PHP
.3a16f4	08		php		            PHP
.3a16f5	c2 20		rep #$20	            REP #$20
.3a16f7	48		pha		            PHA
.3a16f8	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a16fb	5b		tcd		            TCD
.3a16fc	68		pla		            PLA
.3a16fd	28		plp		            PLP
.3a16fe	c2 30		rep #$30	            REP #$30
.3a1700	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a1703	85 00		sta $0800	            STA BIP
.3a1705	85 1a		sta $081a	            STA CURLINE
.3a1707	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a170a	85 02		sta $0802	            STA BIP+2
.3a170c	85 1c		sta $081c	            STA CURLINE+2
.3a170e	ad 8a 0f	lda $0f8a	list_loop   LDA KEYFLAG         ; Check the keyboard flags
.3a1711	30 20		bmi $3a1733	            BMI throw_break     ; If MSB: user pressed an interrupt key, stop the listing
.3a1713	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.3a1716	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.3a1718	f0 0f		beq $3a1729	            BEQ done
.3a171a	c5 55		cmp $0855	            CMP MARG1
.3a171c	90 10		bcc $3a172e	            BLT skip_line
.3a171e	c5 59		cmp $0859	            CMP MARG2
.3a1720	f0 02		beq $3a1724	            BEQ print_line
.3a1722	b0 05		bcs $3a1729	            BGE done
.3a1724					print_line
.3a1724	20 52 17	jsr $3a1752	            JSR LISTLINE
.3a1727	80 e5		bra $3a170e	            BRA list_loop
.3a1729	28		plp		done        PLP
.3a172a	2b		pld		            PLD
.3a172b	7a		ply		            PLY
.3a172c	68		pla		            PLA
.3a172d	60		rts		            RTS
.3a172e					skip_line
.3a172e	20 1b 20	jsr $3a201b	            JSR NEXTLINE
.3a1731	80 db		bra $3a170e	            BRA list_loop           ; And try again
.3a1733					throw_break
.3a1733	08		php		            PHP
.3a1734	c2 20		rep #$20	            REP #$20
.3a1736	48		pha		            PHA
.3a1737	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a173a	5b		tcd		            TCD
.3a173b	68		pla		            PLA
.3a173c	28		plp		            PLP
.3a173d	e2 20		sep #$20	            SEP #$20
.3a173f	a9 01		lda #$01	            LDA #ERR_BREAK
.3a1741	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1745	c2 20		rep #$20	            REP #$20
.3a1747	29 ff 00	and #$00ff	            AND #$00FF
.3a174a	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a174d	e2 20		sep #$20	            SEP #$20
.3a174f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1752					LISTLINE
.3a1752	08		php		            PHP
.3a1753	c2 30		rep #$30	            REP #$30
.3a1755	85 23		sta $0823	            STA ARGUMENT1
.3a1757	64 25		stz $0825	            STZ ARGUMENT1+2
.3a1759	20 ed 13	jsr $3a13ed	            JSR ITOS
.3a175c	a5 16		lda $0816	            LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a175e	1a		inc a		            INC A
.3a175f	85 23		sta $0823	            STA ARGUMENT1
.3a1761	a5 18		lda $0818	            LDA STRPTR+2
.3a1763	85 25		sta $0825	            STA ARGUMENT1+2
.3a1765	20 68 43	jsr $3a4368	            JSR PR_STRING
.3a1768	18		clc		            CLC                 ; Move the BIP to the first byte of the line
.3a1769	a5 1a		lda $081a	            LDA CURLINE
.3a176b	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a176e	85 00		sta $0800	            STA BIP
.3a1770	a5 1c		lda $081c	            LDA CURLINE+2
.3a1772	69 00 00	adc #$0000	            ADC #0
.3a1775	85 02		sta $0802	            STA BIP+2
.3a1777	e2 20		sep #$20	            SEP #$20
.3a1779	a9 20		lda #$20	            LDA #CHAR_SP
.3a177b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a177e	c2 20		rep #$20	            REP #$20
.3a1780					loop
.3a1780	20 91 17	jsr $3a1791	            JSR LISTBYTE
.3a1783	90 fb		bcc $3a1780	            BCC loop
.3a1785	e2 20		sep #$20	            SEP #$20
.3a1787	a9 0d		lda #$0d	            LDA #CHAR_CR
.3a1789	20 18 00	jsr $3a0018	            JSR PRINTC
.3a178c	20 1b 20	jsr $3a201b	            JSR NEXTLINE
.3a178f	28		plp		            PLP
.3a1790	60		rts		            RTS
.3a1791					LISTBYTE
.3a1791	08		php		            PHP
.3a1792	0b		phd		            PHD
.3a1793	8b		phb		            PHB
.3a1794	08		php		            PHP
.3a1795	c2 20		rep #$20	            REP #$20
.3a1797	48		pha		            PHA
.3a1798	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a179b	5b		tcd		            TCD
.3a179c	68		pla		            PLA
.3a179d	28		plp		            PLP
.3a179e	08		php		            PHP
.3a179f	e2 20		sep #$20	            SEP #$20
.3a17a1	48		pha		            PHA
.3a17a2	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a17a4	48		pha		            PHA
.3a17a5	ab		plb		            PLB
.3a17a6	68		pla		            PLA
.3a17a7	28		plp		            PLP
.3a17a8	e2 20		sep #$20	            SEP #$20
.3a17aa	c2 10		rep #$10	            REP #$10
.3a17ac	a7 00		lda [$0800]	            LDA [BIP]           ; Get the current byte
.3a17ae	f0 3a		beq $3a17ea	            BEQ end_of_line     ; If it's 0, return with C set
.3a17b0	30 05		bmi $3a17b7	            BMI is_token        ; If it's 0x80 - 0xFF, it's a token
.3a17b2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a17b5	80 29		bra $3a17e0	            BRA done            ; And return
.3a17b7					is_token
.3a17b7	c2 20		rep #$20	            REP #$20
.3a17b9	29 7f 00	and #$007f	            AND #$007F          ; Compute the index of the token
.3a17bc	0a		asl a		            ASL A               ; In the token table
.3a17bd	0a		asl a		            ASL A
.3a17be	0a		asl a		            ASL A
.3a17bf	18		clc		            CLC
.3a17c0	69 b0 0b	adc #$0bb0	            ADC #<>TOKENS       ; Set INDEX to the address of the token
.3a17c3	85 08		sta $0808	            STA INDEX
.3a17c5	a9 3a 00	lda #$003a	            LDA #`TOKENS
.3a17c8	69 00 00	adc #$0000	            ADC #0
.3a17cb	85 0a		sta $080a	            STA INDEX+2
.3a17cd					pr_default
.3a17cd	08		php		            PHP
.3a17ce	e2 20		sep #$20	            SEP #$20
.3a17d0	48		pha		            PHA
.3a17d1	a9 3a		lda #$3a	            LDA #`TOKENS
.3a17d3	48		pha		            PHA
.3a17d4	ab		plb		            PLB
.3a17d5	68		pla		            PLA
.3a17d6	28		plp		            PLP
.3a17d7	a0 02 00	ldy #$0002	            LDY #TOKEN.name
.3a17da	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a17dc	aa		tax		            TAX
.3a17dd	20 16 03	jsr $3a0316	            JSR PRINTS
.3a17e0					done
.3a17e0	c2 20		rep #$20	            REP #$20
.3a17e2	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a17e5	ab		plb		            PLB
.3a17e6	2b		pld		            PLD
.3a17e7	28		plp		            PLP
.3a17e8	18		clc		            CLC
.3a17e9	60		rts		            RTS
.3a17ea	ab		plb		end_of_line PLB
.3a17eb	2b		pld		            PLD
.3a17ec	28		plp		            PLP
.3a17ed	38		sec		            SEC
.3a17ee	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\eval.s

.3a17ef					INITEVALSP
.3a17ef	08		php		            PHP
.3a17f0	c2 20		rep #$20	            REP #$20
.3a17f2	a9 ff 6f	lda #$6fff	            LDA #ARGUMENT_TOP
.3a17f5	85 1f		sta $081f	            STA ARGUMENTSP
.3a17f7	a9 ff 7f	lda #$7fff	            LDA #OPERATOR_TOP
.3a17fa	85 21		sta $0821	            STA OPERATORSP
.3a17fc	a9 ff ff	lda #$ffff	            LDA #$FFFF
.3a17ff	85 23		sta $0823	            STA ARGUMENT1
.3a1801	85 25		sta $0825	            STA ARGUMENT1+2
.3a1803	85 29		sta $0829	            STA ARGUMENT2
.3a1805	85 2b		sta $082b	            STA ARGUMENT2+2
.3a1807	e2 20		sep #$20	            SEP #$20
.3a1809	85 27		sta $0827	            STA ARGTYPE1
.3a180b	85 2d		sta $082d	            STA ARGTYPE2
.3a180d	28		plp		            PLP
.3a180e	60		rts		            RTS
.3a180f					PHARGUMENT
.3a180f	08		php		            PHP
.3a1810	0b		phd		            PHD
.3a1811	8b		phb		            PHB
.3a1812	08		php		            PHP
.3a1813	c2 20		rep #$20	            REP #$20
.3a1815	48		pha		            PHA
.3a1816	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1819	5b		tcd		            TCD
.3a181a	68		pla		            PLA
.3a181b	28		plp		            PLP
.3a181c	08		php		            PHP
.3a181d	e2 20		sep #$20	            SEP #$20
.3a181f	48		pha		            PHA
.3a1820	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1822	48		pha		            PHA
.3a1823	ab		plb		            PLB
.3a1824	68		pla		            PLA
.3a1825	28		plp		            PLP
.3a1826	c2 30		rep #$30	            REP #$30
.3a1828	5a		phy		            PHY
.3a1829	a4 1f		ldy $081f	            LDY ARGUMENTSP
.3a182b	bd 00 00	lda $0000,x	            LDA #0,B,X
.3a182e	99 00 00	sta $0000,y	            STA #0,B,Y
.3a1831	bd 02 00	lda $0002,x	            LDA #2,B,X
.3a1834	99 02 00	sta $0002,y	            STA #2,B,Y
.3a1837	e2 20		sep #$20	            SEP #$20
.3a1839	bd 04 00	lda $0004,x	            LDA #4,B,X
.3a183c	99 04 00	sta $0004,y	            STA #4,B,Y
.3a183f	c2 20		rep #$20	            REP #$20
.3a1841	38		sec		            SEC
.3a1842	98		tya		            TYA
.3a1843	e9 05 00	sbc #$0005	            SBC #ARGUMENT_SIZE
.3a1846	85 1f		sta $081f	            STA ARGUMENTSP
.3a1848	7a		ply		            PLY
.3a1849	ab		plb		            PLB
.3a184a	2b		pld		            PLD
.3a184b	28		plp		            PLP
.3a184c	60		rts		            RTS
.3a184d					PLARGUMENT
.3a184d	08		php		            PHP
.3a184e	0b		phd		            PHD
.3a184f	8b		phb		            PHB
.3a1850	08		php		            PHP
.3a1851	c2 20		rep #$20	            REP #$20
.3a1853	48		pha		            PHA
.3a1854	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1857	5b		tcd		            TCD
.3a1858	68		pla		            PLA
.3a1859	28		plp		            PLP
.3a185a	08		php		            PHP
.3a185b	e2 20		sep #$20	            SEP #$20
.3a185d	48		pha		            PHA
.3a185e	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1860	48		pha		            PHA
.3a1861	ab		plb		            PLB
.3a1862	68		pla		            PLA
.3a1863	28		plp		            PLP
.3a1864	c2 30		rep #$30	            REP #$30
.3a1866	5a		phy		            PHY
.3a1867	18		clc		            CLC
.3a1868	a5 1f		lda $081f	            LDA ARGUMENTSP
.3a186a	69 05 00	adc #$0005	            ADC #ARGUMENT_SIZE
.3a186d	85 1f		sta $081f	            STA ARGUMENTSP
.3a186f	a8		tay		            TAY
.3a1870	b9 00 00	lda $0000,y	            LDA #0,B,Y
.3a1873	9d 00 00	sta $0000,x	            STA #0,B,X
.3a1876	b9 02 00	lda $0002,y	            LDA #2,B,Y
.3a1879	9d 02 00	sta $0002,x	            STA #2,B,X
.3a187c	e2 20		sep #$20	            SEP #$20
.3a187e	b9 04 00	lda $0004,y	            LDA #4,B,Y
.3a1881	9d 04 00	sta $0004,x	            STA #4,B,X
.3a1884	bd 00 00	lda $0000,x	            LDA #0,B,X
.3a1887	7a		ply		            PLY
.3a1888	ab		plb		            PLB
.3a1889	2b		pld		            PLD
.3a188a	28		plp		            PLP
.3a188b	60		rts		            RTS
.3a188c					PHOPERATOR
.3a188c	08		php		            PHP
.3a188d	0b		phd		            PHD
.3a188e	8b		phb		            PHB
.3a188f	08		php		            PHP
.3a1890	c2 20		rep #$20	            REP #$20
.3a1892	48		pha		            PHA
.3a1893	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1896	5b		tcd		            TCD
.3a1897	68		pla		            PLA
.3a1898	28		plp		            PLP
.3a1899	08		php		            PHP
.3a189a	e2 20		sep #$20	            SEP #$20
.3a189c	48		pha		            PHA
.3a189d	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a189f	48		pha		            PHA
.3a18a0	ab		plb		            PLB
.3a18a1	68		pla		            PLA
.3a18a2	28		plp		            PLP
.3a18a3	e2 20		sep #$20	            SEP #$20
.3a18a5	c2 10		rep #$10	            REP #$10
.3a18a7	5a		phy		            PHY
.3a18a8	a4 21		ldy $0821	            LDY OPERATORSP
.3a18aa	99 00 00	sta $0000,y	            STA #0,B,Y
.3a18ad	88		dey		            DEY
.3a18ae	84 21		sty $0821	            STY OPERATORSP
.3a18b0	7a		ply		done        PLY
.3a18b1	ab		plb		            PLB
.3a18b2	2b		pld		            PLD
.3a18b3	28		plp		            PLP
.3a18b4	60		rts		            RTS
.3a18b5					PLOPERATOR
.3a18b5	08		php		            PHP
.3a18b6	0b		phd		            PHD
.3a18b7	8b		phb		            PHB
.3a18b8	08		php		            PHP
.3a18b9	c2 20		rep #$20	            REP #$20
.3a18bb	48		pha		            PHA
.3a18bc	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a18bf	5b		tcd		            TCD
.3a18c0	68		pla		            PLA
.3a18c1	28		plp		            PLP
.3a18c2	08		php		            PHP
.3a18c3	e2 20		sep #$20	            SEP #$20
.3a18c5	48		pha		            PHA
.3a18c6	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a18c8	48		pha		            PHA
.3a18c9	ab		plb		            PLB
.3a18ca	68		pla		            PLA
.3a18cb	28		plp		            PLP
.3a18cc	e2 20		sep #$20	            SEP #$20
.3a18ce	c2 10		rep #$10	            REP #$10
.3a18d0	5a		phy		            PHY
.3a18d1	a4 21		ldy $0821	            LDY OPERATORSP
.3a18d3	c8		iny		            INY
.3a18d4	84 21		sty $0821	            STY OPERATORSP
.3a18d6	b9 00 00	lda $0000,y	            LDA #0,B,Y
.3a18d9	c2 20		rep #$20	            REP #$20
.3a18db	29 ff 00	and #$00ff	            AND #$00FF
.3a18de	7a		ply		            PLY
.3a18df	ab		plb		            PLB
.3a18e0	2b		pld		            PLD
.3a18e1	28		plp		            PLP
.3a18e2	60		rts		            RTS
.3a18e3					OPENPARAMS
.3a18e3	08		php		            PHP
.3a18e4	e2 20		sep #$20	            SEP #$20
.3a18e6	a9 01		lda #$01	            LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.3a18e8	20 8c 18	jsr $3a188c	            JSR PHOPERATOR
.3a18eb	28		plp		            PLP
.3a18ec	60		rts		            RTS
.3a18ed					CLOSEPARAMS
.3a18ed	5a		phy		            PHY
.3a18ee	08		php		            PHP
.3a18ef	8b		phb		            PHB
.3a18f0	08		php		            PHP
.3a18f1	e2 20		sep #$20	            SEP #$20
.3a18f3	48		pha		            PHA
.3a18f4	a9 00		lda #$00	            LDA #0
.3a18f6	48		pha		            PHA
.3a18f7	ab		plb		            PLB
.3a18f8	68		pla		            PLA
.3a18f9	28		plp		            PLP
.3a18fa	e2 20		sep #$20	            SEP #$20
.3a18fc	a4 21		ldy $0821	            LDY OPERATORSP      ; Peek at the top operator
.3a18fe	b9 01 00	lda $0001,y	            LDA #1,B,Y
.3a1901	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the marker for the start of a parameter list
.3a1903	d0 08		bne $3a190d	            BNE error           ; No: there's a problem
.3a1905	c2 20		rep #$20	            REP #$20
.3a1907	e6 21		inc $0821	            INC OPERATORSP      ; Yes: remove it from the operator stack.
.3a1909	ab		plb		            PLB
.3a190a	28		plp		            PLP
.3a190b	7a		ply		            PLY
.3a190c	60		rts		            RTS
.3a190d					error
.3a190d	08		php		            PHP
.3a190e	c2 20		rep #$20	            REP #$20
.3a1910	48		pha		            PHA
.3a1911	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1914	5b		tcd		            TCD
.3a1915	68		pla		            PLA
.3a1916	28		plp		            PLP
.3a1917	e2 20		sep #$20	            SEP #$20
.3a1919	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a191b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a191f	c2 20		rep #$20	            REP #$20
.3a1921	29 ff 00	and #$00ff	            AND #$00FF
.3a1924	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a1927	e2 20		sep #$20	            SEP #$20
.3a1929	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a192c					OPHIGHPREC
.3a192c	48		pha		            PHA
.3a192d	08		php		            PHP
.3a192e	0b		phd		            PHD
.3a192f	8b		phb		            PHB
.3a1930	08		php		            PHP
.3a1931	c2 20		rep #$20	            REP #$20
.3a1933	48		pha		            PHA
.3a1934	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1937	5b		tcd		            TCD
.3a1938	68		pla		            PLA
.3a1939	28		plp		            PLP
.3a193a	08		php		            PHP
.3a193b	e2 20		sep #$20	            SEP #$20
.3a193d	48		pha		            PHA
.3a193e	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1940	48		pha		            PHA
.3a1941	ab		plb		            PLB
.3a1942	68		pla		            PLA
.3a1943	28		plp		            PLP
.3a1944	e2 20		sep #$20	            SEP #$20
.3a1946	a4 21		ldy $0821	            LDY OPERATORSP
.3a1948	c0 ff 7f	cpy #$7fff	            CPY #OPERATOR_TOP       ; Is the stack empty?
.3a194b	f0 11		beq $3a195e	            BEQ is_false            ; Yes: return false
.3a194d	20 0f 0b	jsr $3a0b0f	            JSR TOKPRECED
.3a1950	85 0c		sta $080c	            STA SCRATCH             ; Save it for later comparison
.3a1952	b9 01 00	lda $0001,y	            LDA #1,B,Y              ; Get the operator at the top of the stack
.3a1955	20 0f 0b	jsr $3a0b0f	            JSR TOKPRECED
.3a1958	c5 0c		cmp $080c	            CMP SCRATCH             ; Compare the priorities (0 = highest priority)
.3a195a	f0 02		beq $3a195e	            BEQ is_false            ; A = SCRATCH, return false
.3a195c	90 08		bcc $3a1966	            BCC is_true             ; A < SCRATCH (A is higher priority), return false
.3a195e					is_false
.3a195e	c2 20		rep #$20	            REP #$20
.3a1960	ab		plb		            PLB
.3a1961	2b		pld		            PLD
.3a1962	28		plp		            PLP
.3a1963	68		pla		            PLA
.3a1964	18		clc		            CLC
.3a1965	60		rts		            RTS
.3a1966					is_true
.3a1966	c2 20		rep #$20	            REP #$20
.3a1968	ab		plb		            PLB                     ; A > SCRATCH (A is lower priority), return true
.3a1969	2b		pld		            PLD
.3a196a	28		plp		            PLP
.3a196b	68		pla		            PLA
.3a196c	38		sec		            SEC
.3a196d	60		rts		            RTS
.3a196e					EVALNUMBER
.3a196e	4c 8a 07	jmp $3a078a	            JMP PARSEINT
.3a1971					ARR_GETIDX
.3a1971	08		php		            PHP
.3a1972	e2 20		sep #$20	            SEP #$20
.3a1974	a9 00		lda #$00	            LDA #0
.3a1976	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF     ; Set the dimension to 0
.3a197a	a2 01 00	ldx #$0001	            LDX #1
.3a197d					eval_index
.3a197d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a1980	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a1983	c2 20		rep #$20	            REP #$20
.3a1985	a5 23		lda $0823	            LDA ARGUMENT1       ; Save the index to the array index buffer
.3a1987	9f 00 4d 00	sta $004d00,x	            STA @lARRIDXBUF,X
.3a198b	e2 20		sep #$20	            SEP #$20
.3a198d	af 00 4d 00	lda $004d00	            LDA @lARRIDXBUF     ; Increment the index count
.3a1991	1a		inc a		            INC A
.3a1992	30 3e		bmi $3a19d2	            BMI arg_err         ; If more than 127 dimensions, throw a range error
.3a1994	8f 00 4d 00	sta $004d00	            STA @lARRIDXBUF
.3a1998	e8		inx		            INX
.3a1999	e8		inx		            INX
.3a199a	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a199d	e2 20		sep #$20	            SEP #$20
.3a199f	a7 00		lda [$0800]	            LDA [BIP]           ; Check the next character
.3a19a1	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it ")"
.3a19a3	f0 09		beq $3a19ae	            BEQ clean_op        ; Yes: cleanup the argument stack
.3a19a5	c9 2c		cmp #$2c	            CMP #','            ; Is it a comma?
.3a19a7	d0 0a		bne $3a19b3	            BNE syntax_err      ; No: throw a syntax error
.3a19a9					skip_comma
.3a19a9	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a19ac	80 cf		bra $3a197d	            BRA eval_index      ; And grab the next index
.3a19ae					clean_op
.3a19ae	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a19b1	28		plp		            PLP
.3a19b2	60		rts		            RTS
.3a19b3					syntax_err
.3a19b3	08		php		            PHP
.3a19b4	c2 20		rep #$20	            REP #$20
.3a19b6	48		pha		            PHA
.3a19b7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a19ba	5b		tcd		            TCD
.3a19bb	68		pla		            PLA
.3a19bc	28		plp		            PLP
.3a19bd	e2 20		sep #$20	            SEP #$20
.3a19bf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a19c1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a19c5	c2 20		rep #$20	            REP #$20
.3a19c7	29 ff 00	and #$00ff	            AND #$00FF
.3a19ca	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a19cd	e2 20		sep #$20	            SEP #$20
.3a19cf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a19d2					arg_err
.3a19d2	08		php		            PHP
.3a19d3	c2 20		rep #$20	            REP #$20
.3a19d5	48		pha		            PHA
.3a19d6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a19d9	5b		tcd		            TCD
.3a19da	68		pla		            PLA
.3a19db	28		plp		            PLP
.3a19dc	e2 20		sep #$20	            SEP #$20
.3a19de	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a19e0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a19e4	c2 20		rep #$20	            REP #$20
.3a19e6	29 ff 00	and #$00ff	            AND #$00FF
.3a19e9	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a19ec	e2 20		sep #$20	            SEP #$20
.3a19ee	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a19f1					EVALREF
.3a19f1	08		php		            PHP
.3a19f2					get_name
.3a19f2	20 51 51	jsr $3a5151	            JSR VAR_FINDNAME
.3a19f5	90 23		bcc $3a1a1a	            BCC syntax_err      ; If we didn't find a name, thrown an error
.3a19f7	e2 20		sep #$20	            SEP #$20
.3a19f9	a5 ea		lda $08ea	            LDA TOFINDTYPE      ; Check the type of the variable
.3a19fb	29 80		and #$80	            AND #$80            ; Is it an array?
.3a19fd	d0 06		bne $3a1a05	            BNE is_array        ; Yes: look for the indexes
.3a19ff	20 52 4f	jsr $3a4f52	            JSR VAR_REF
.3a1a02	4c 18 1a	jmp $3a1a18	            JMP done
.3a1a05					is_array
.3a1a05	e2 20		sep #$20	            SEP #$20
.3a1a07	a9 8f		lda #$8f	            LDA #TOK_LPAREN
.3a1a09	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a1a0c	20 e3 18	jsr $3a18e3	            JSR OPENPARAMS
.3a1a0f					            PHARRIDX
.3a1a0f	20 71 19	jsr $3a1971	            JSR ARR_GETIDX
.3a1a12	20 aa 63	jsr $3a63aa	            JSR ARR_REF
.3a1a15					            PLARRIDX
.3a1a15	20 ed 18	jsr $3a18ed	            JSR CLOSEPARAMS
.3a1a18	28		plp		done        PLP
.3a1a19	60		rts		            RTS
.3a1a1a					syntax_err
.3a1a1a	08		php		            PHP
.3a1a1b	c2 20		rep #$20	            REP #$20
.3a1a1d	48		pha		            PHA
.3a1a1e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1a21	5b		tcd		            TCD
.3a1a22	68		pla		            PLA
.3a1a23	28		plp		            PLP
.3a1a24	e2 20		sep #$20	            SEP #$20
.3a1a26	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1a28	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1a2c	c2 20		rep #$20	            REP #$20
.3a1a2e	29 ff 00	and #$00ff	            AND #$00FF
.3a1a31	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a1a34	e2 20		sep #$20	            SEP #$20
.3a1a36	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1a39					EVALSTRING
.3a1a39	08		php		            PHP
.3a1a3a	0b		phd		            PHD
.3a1a3b	08		php		            PHP
.3a1a3c	c2 20		rep #$20	            REP #$20
.3a1a3e	48		pha		            PHA
.3a1a3f	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1a42	5b		tcd		            TCD
.3a1a43	68		pla		            PLA
.3a1a44	28		plp		            PLP
.3a1a45	e2 20		sep #$20	            SEP #$20
.3a1a47	c2 10		rep #$10	            REP #$10
.3a1a49	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1a4c	a0 00 00	ldy #$0000	            LDY #0              ; Ywill be our length counter
.3a1a4f	b7 00		lda [$0800],y	count_loop  LDA [BIP],Y         ; Get the character
.3a1a51	f0 24		beq $3a1a77	            BEQ error           ; If it's end-of-line, throw an error
.3a1a53	c9 22		cmp #$22	            CMP #CHAR_DQUOTE    ; Is it the ending double-quote?
.3a1a55	f0 03		beq $3a1a5a	            BEQ found_end       ; Yes: Y should be the length
.3a1a57	c8		iny		            INY
.3a1a58	80 f5		bra $3a1a4f	            BRA count_loop
.3a1a5a	84 0c		sty $080c	found_end   STY SCRATCH         ; Save the length to SCRATCH
.3a1a5c	e2 20		sep #$20	            SEP #$20
.3a1a5e	a9 02		lda #$02	            LDA #TYPE_STRING    ; Set the type to allocate to STRING
.3a1a60	a6 0c		ldx $080c	            LDX SCRATCH         ; And the length to the length of the string literal
.3a1a62	e8		inx		            INX
.3a1a63	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a1a66	a0 00 00	ldy #$0000	            LDY #0
.3a1a69	c4 0c		cpy $080c	copy_loop   CPY SCRATCH         ; Have we copied all the characters?
.3a1a6b	f0 29		beq $3a1a96	            BEQ done            ; Yes: we're done
.3a1a6d	a7 00		lda [$0800]	            LDA [BIP]           ; No: get the next character
.3a1a6f	97 16		sta [$0816],y	            STA [STRPTR],Y      ; And copy it to the allocated string
.3a1a71	c8		iny		            INY
.3a1a72	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1a75	80 f2		bra $3a1a69	            BRA copy_loop       ; And try the next character
.3a1a77					error
.3a1a77	08		php		            PHP
.3a1a78	c2 20		rep #$20	            REP #$20
.3a1a7a	48		pha		            PHA
.3a1a7b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1a7e	5b		tcd		            TCD
.3a1a7f	68		pla		            PLA
.3a1a80	28		plp		            PLP
.3a1a81	e2 20		sep #$20	            SEP #$20
.3a1a83	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1a85	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1a89	c2 20		rep #$20	            REP #$20
.3a1a8b	29 ff 00	and #$00ff	            AND #$00FF
.3a1a8e	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a1a91	e2 20		sep #$20	            SEP #$20
.3a1a93	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1a96	a9 00		lda #$00	done        LDA #0
.3a1a98	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a1a9a	c2 20		rep #$20	            REP #$20
.3a1a9c	a5 16		lda $0816	            LDA STRPTR
.3a1a9e	85 23		sta $0823	            STA ARGUMENT1
.3a1aa0	a5 18		lda $0818	            LDA STRPTR+2
.3a1aa2	85 25		sta $0825	            STA ARGUMENT1+2
.3a1aa4	a9 02 00	lda #$0002	            LDA #TYPE_STRING    ; And set the type of ARGUMENT1 to string
.3a1aa7	85 27		sta $0827	            STA ARGTYPE1
.3a1aa9	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1aac	2b		pld		            PLD
.3a1aad	28		plp		            PLP
.3a1aae	60		rts		            RTS
.3a1aaf					EVAL_FUNC
.3a1aaf	08		php		            PHP
.3a1ab0	e2 20		sep #$20	            SEP #$20
.3a1ab2	a7 00		lda [$0800]	            LDA [BIP]           ; Get the token
.3a1ab4	c2 20		rep #$20	            REP #$20
.3a1ab6	29 ff 00	and #$00ff	            AND #$00FF
.3a1ab9	20 39 0b	jsr $3a0b39	            JSR TOKEVAL
.3a1abc	85 2f		sta $082f	            STA JMP16PTR
.3a1abe	20 e3 18	jsr $3a18e3	            JSR OPENPARAMS
.3a1ac1	08		php		            PHP
.3a1ac2	e2 20		sep #$20	            SEP #$20
.3a1ac4	48		pha		            PHA
.3a1ac5	a9 00		lda #$00	            LDA #0
.3a1ac7	48		pha		            PHA
.3a1ac8	ab		plb		            PLB
.3a1ac9	68		pla		            PLA
.3a1aca	28		plp		            PLP
.3a1acb	20 d3 1a	jsr $3a1ad3	            JSR OPSTUB
.3a1ace	20 ed 18	jsr $3a18ed	            JSR CLOSEPARAMS
.3a1ad1	28		plp		            PLP
.3a1ad2	60		rts		            RTS
.3a1ad3					OPSTUB
.3a1ad3	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1ad6	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a1ad9					PROCESSOP
.3a1ad9	48		pha		            PHA
.3a1ada	08		php		            PHP
.3a1adb	0b		phd		            PHD
.3a1adc	8b		phb		            PHB
.3a1add	08		php		            PHP
.3a1ade	c2 20		rep #$20	            REP #$20
.3a1ae0	48		pha		            PHA
.3a1ae1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1ae4	5b		tcd		            TCD
.3a1ae5	68		pla		            PLA
.3a1ae6	28		plp		            PLP
.3a1ae7	c2 30		rep #$30	            REP #$30
.3a1ae9	20 b5 18	jsr $3a18b5	            JSR PLOPERATOR
.3a1aec	89 80 00	bit #$0080	            BIT #$80            ; Check if it's really a token
.3a1aef	f0 37		beq $3a1b28	            BEQ bad_token       ; No: it's a bad token
.3a1af1	48		pha		            PHA
.3a1af2	20 39 0b	jsr $3a0b39	            JSR TOKEVAL
.3a1af5	85 2f		sta $082f	            STA JMP16PTR
.3a1af7	68		pla		            PLA
.3a1af8	20 86 0b	jsr $3a0b86	            JSR TOKARITY
.3a1afb	c9 01 00	cmp #$0001	            CMP #1              ; Check the operator's arity
.3a1afe	f0 08		beq $3a1b08	            BEQ pull_arg1       ; If it's 1 just pull one argument from the stack
.3a1b00	c2 30		rep #$30	            REP #$30
.3a1b02	a2 29 08	ldx #$0829	            LDX #<>ARGUMENT2    ; Pull argument 2 from the stack
.3a1b05	20 4d 18	jsr $3a184d	            JSR PLARGUMENT
.3a1b08					pull_arg1
.3a1b08	c2 30		rep #$30	            REP #$30
.3a1b0a	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Pull argument 1 from the stack
.3a1b0d	20 4d 18	jsr $3a184d	            JSR PLARGUMENT
.3a1b10	08		php		            PHP
.3a1b11	e2 20		sep #$20	            SEP #$20
.3a1b13	48		pha		            PHA
.3a1b14	a9 00		lda #$00	            LDA #0
.3a1b16	48		pha		            PHA
.3a1b17	ab		plb		            PLB
.3a1b18	68		pla		            PLA
.3a1b19	28		plp		            PLP
.3a1b1a	20 2a 1b	jsr $3a1b2a	            JSR OPSTUB
.3a1b1d	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1    ; Get return result in argument 1
.3a1b20	20 0f 18	jsr $3a180f	            JSR PHARGUMENT
.3a1b23	ab		plb		            PLB
.3a1b24	2b		pld		            PLD
.3a1b25	28		plp		            PLP
.3a1b26	68		pla		            PLA
.3a1b27	60		rts		            RTS
.3a1b28	00		brk #		bad_token   BRK
.3a1b29	ea		nop		            NOP
.3a1b2a	6c 2f 08	jmp ($082f)	OPSTUB      JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a1b2d					EVALEXPR
.3a1b2d	08		php		            PHP
.3a1b2e	08		php		            PHP
.3a1b2f	c2 20		rep #$20	            REP #$20
.3a1b31	48		pha		            PHA
.3a1b32	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1b35	5b		tcd		            TCD
.3a1b36	68		pla		            PLA
.3a1b37	28		plp		            PLP
.3a1b38	08		php		            PHP
.3a1b39	e2 20		sep #$20	            SEP #$20
.3a1b3b	48		pha		            PHA
.3a1b3c	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a1b3e	48		pha		            PHA
.3a1b3f	ab		plb		            PLB
.3a1b40	68		pla		            PLA
.3a1b41	28		plp		            PLP
.3a1b42	c2 10		rep #$10	            REP #$10
.3a1b44	da		phx		            PHX
.3a1b45					get_char
.3a1b45	e2 20		sep #$20	            SEP #$20
.3a1b47	a7 00		lda [$0800]	            LDA [BIP]           ; Get the character
.3a1b49	d0 03		bne $3a1b4e	            BNE else1
.3a1b4b	4c f0 1b	jmp $3a1bf0	            JMP proc_stack      ; Handle end of line, if we see it
.3a1b4e	30 33		bmi $3a1b83	else1       BMI is_token        ; If MSB is set, it's a token
.3a1b50	c9 20		cmp #$20	            CMP #' '            ; Is it a space?
.3a1b52	d0 03		bne $3a1b57	            BNE else2
.3a1b54	4c ea 1b	jmp $3a1bea	            JMP next_char       ; Yes: Skip to the next character
.3a1b57	c9 3a		cmp #$3a	else2       CMP #'9'+1          ; Check to see if we have digits
.3a1b59	b0 04		bcs $3a1b5f	            BCS else3           ; No: treat as the end of the line
.3a1b5b	c9 30		cmp #$30	            CMP #'0'
.3a1b5d	b0 56		bcs $3a1bb5	            BCS is_digit
.3a1b5f	c9 26		cmp #$26	else3       CMP #'&'            ; Check for a hexadecimal prefix
.3a1b61	f0 52		beq $3a1bb5	            BEQ is_digit
.3a1b63	c9 22		cmp #$22	            CMP #'"'            ; Is it a double-quote?
.3a1b65	d0 03		bne $3a1b6a	            BNE else4
.3a1b67	4c 03 1c	jmp $3a1c03	            JMP is_string       ; Yes: process the string
.3a1b6a	c9 5b		cmp #$5b	else4       CMP #'Z'+1          ; Check to see if we have upper case alphabetics
.3a1b6c	b0 07		bcs $3a1b75	            BCS check_lc        ; No: check for lower case
.3a1b6e	c9 41		cmp #$41	            CMP #'A'
.3a1b70	90 03		bcc $3a1b75	            BCC check_lc
.3a1b72	4c 0f 1c	jmp $3a1c0f	            JMP is_alpha
.3a1b75	c9 7b		cmp #$7b	check_lc    CMP #'z'+1          ; Check to see if we have lower case alphabetics
.3a1b77	b0 07		bcs $3a1b80	            BCS else5           ; No: treat as the end of the line
.3a1b79	c9 61		cmp #$61	            CMP #'a'
.3a1b7b	90 03		bcc $3a1b80	            BCC else5
.3a1b7d	4c 0f 1c	jmp $3a1c0f	            JMP is_alpha
.3a1b80	4c f0 1b	jmp $3a1bf0	else5       JMP proc_stack
.3a1b83	c9 8f		cmp #$8f	is_token    CMP #TOK_LPAREN     ; Is it an LPAREN
.3a1b85	f0 40		beq $3a1bc7	            BEQ is_lparen       ; Yes: handle the LPAREN
.3a1b87	c9 90		cmp #$90	            CMP #TOK_RPAREN     ; Is it an RPAREN?
.3a1b89	f0 41		beq $3a1bcc	            BEQ is_rparen       ; Yes: handle the RPAREN
.3a1b8b	20 5c 0b	jsr $3a0b5c	            JSR TOKTYPE
.3a1b8e	c9 30		cmp #$30	            CMP #TOK_TY_FUNC    ; Is it a function?
.3a1b90	d0 0c		bne $3a1b9e	            BNE chk_op          ; No: check if it's an operator
.3a1b92	20 af 1a	jsr $3a1aaf	            JSR EVAL_FUNC
.3a1b95	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1b98	20 0f 18	jsr $3a180f	            JSR PHARGUMENT
.3a1b9b	4c 45 1b	jmp $3a1b45	            JMP get_char
.3a1b9e	c9 00		cmp #$00	chk_op      CMP #TOK_TY_OP      ; Is it an operator?
.3a1ba0	d0 4e		bne $3a1bf0	            BNE proc_stack      ; No: we're finished processing
.3a1ba2	a7 00		lda [$0800]	            LDA [BIP]           ; Yes: Get the token back
.3a1ba4	a6 21		ldx $0821	chk_prec    LDX OPERATORSP      ; Is the operator stack empty?
.3a1ba6	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.3a1ba9	f0 05		beq $3a1bb0	            BEQ push_op         ; Yes: push the operator
.3a1bab	20 2c 19	jsr $3a192c	            JSR OPHIGHPREC
.3a1bae	b0 12		bcs $3a1bc2	            BCS process1        ; No: we should process the top operator
.3a1bb0					push_op
.3a1bb0	20 8c 18	jsr $3a188c	            JSR PHOPERATOR
.3a1bb3	80 35		bra $3a1bea	            BRA next_char       ; And go to the next character
.3a1bb5					is_digit
.3a1bb5	c2 20		rep #$20	            REP #$20
.3a1bb7	20 73 57	jsr $3a5773	            JSR PARSENUM
.3a1bba	a2 23 08	ldx #$0823	got_number  LDX #<>ARGUMENT1
.3a1bbd	20 0f 18	jsr $3a180f	            JSR PHARGUMENT
.3a1bc0	80 83		bra $3a1b45	            BRA get_char
.3a1bc2					process1
.3a1bc2	20 d9 1a	jsr $3a1ad9	            JSR PROCESSOP
.3a1bc5	80 dd		bra $3a1ba4	            BRA chk_prec        ; And check what to do with the current operator
.3a1bc7					is_lparen
.3a1bc7	20 8c 18	jsr $3a188c	            JSR PHOPERATOR
.3a1bca	80 1e		bra $3a1bea	            BRA next_char
.3a1bcc					is_rparen
.3a1bcc	e2 20		sep #$20	            SEP #$20
.3a1bce	a4 21		ldy $0821	            LDY OPERATORSP      ; Is the operator stack empty?
.3a1bd0	c0 ff 7f	cpy #$7fff	            CPY #<>OPERATOR_TOP
.3a1bd3	f0 46		beq $3a1c1b	            BEQ done            ; Yes: we're done evaluating things
.3a1bd5	a4 21		ldy $0821	paren_loop  LDY OPERATORSP      ; Peek at the top operator
.3a1bd7	b9 01 00	lda $0001,y	            LDA #1,B,Y
.3a1bda	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is it the LPAREN of a function?
.3a1bdc	f0 3d		beq $3a1c1b	            BEQ done            ; Yes: treat it as an empty stack
.3a1bde	c9 8f		cmp #$8f	            CMP #TOK_LPAREN     ; Is it an LPAREN?
.3a1be0	f0 05		beq $3a1be7	            BEQ done_rparen     ; Yes: we're finished processing
.3a1be2	20 d9 1a	jsr $3a1ad9	            JSR PROCESSOP
.3a1be5	80 ee		bra $3a1bd5	            BRA paren_loop
.3a1be7					done_rparen
.3a1be7	20 b5 18	jsr $3a18b5	            JSR PLOPERATOR
.3a1bea					next_char
.3a1bea	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1bed	4c 45 1b	jmp $3a1b45	            JMP get_char
.3a1bf0					proc_stack
.3a1bf0	a6 21		ldx $0821	            LDX OPERATORSP      ; Is the operator stack empty?
.3a1bf2	e0 ff 7f	cpx #$7fff	            CPX #<>OPERATOR_TOP
.3a1bf5	b0 24		bcs $3a1c1b	            BGE done            ; Yes: return to the caller
.3a1bf7	bd 01 00	lda $0001,x	            LDA #1,B,X
.3a1bfa	c9 01		cmp #$01	            CMP #TOK_FUNC_OPEN  ; Is top operator a function open?
.3a1bfc	f0 1d		beq $3a1c1b	            BEQ done            ; Yes: treat as end of expression
.3a1bfe	20 d9 1a	jsr $3a1ad9	            JSR PROCESSOP
.3a1c01	80 ed		bra $3a1bf0	            BRA proc_stack
.3a1c03					is_string
.3a1c03	20 39 1a	jsr $3a1a39	            JSR EVALSTRING
.3a1c06	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1c09	20 0f 18	jsr $3a180f	            JSR PHARGUMENT
.3a1c0c	4c 45 1b	jmp $3a1b45	            JMP get_char
.3a1c0f					is_alpha
.3a1c0f	20 f1 19	jsr $3a19f1	            JSR EVALREF
.3a1c12	a2 23 08	ldx #$0823	            LDX #<>ARGUMENT1
.3a1c15	20 0f 18	jsr $3a180f	            JSR PHARGUMENT
.3a1c18	4c 45 1b	jmp $3a1b45	            JMP get_char
.3a1c1b	a2 23 08	ldx #$0823	done        LDX #<>ARGUMENT1    ; Make sure the result is off the stack
.3a1c1e	20 4d 18	jsr $3a184d	            JSR PLARGUMENT
.3a1c21	fa		plx		            PLX
.3a1c22	28		plp		            PLP
.3a1c23	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\returnstack.s

.3a1c24					INITRETURN
.3a1c24	08		php		                PHP
.3a1c25	0b		phd		                PHD
.3a1c26	8b		phb		                PHB
.3a1c27	08		php		            PHP
.3a1c28	e2 20		sep #$20	            SEP #$20
.3a1c2a	48		pha		            PHA
.3a1c2b	a9 00		lda #$00	            LDA #0
.3a1c2d	48		pha		            PHA
.3a1c2e	ab		plb		            PLB
.3a1c2f	68		pla		            PLA
.3a1c30	28		plp		            PLP
.3a1c31	08		php		            PHP
.3a1c32	c2 20		rep #$20	            REP #$20
.3a1c34	48		pha		            PHA
.3a1c35	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1c38	5b		tcd		            TCD
.3a1c39	68		pla		            PLA
.3a1c3a	28		plp		            PLP
.3a1c3b	c2 30		rep #$30	            REP #$30
.3a1c3d	a9 fd 5f	lda #$5ffd	                LDA #RETURN_TOP-2
.3a1c40	85 33		sta $0833	                STA RETURNSP
.3a1c42	ab		plb		                PLB
.3a1c43	2b		pld		                PLD
.3a1c44	28		plp		                PLP
.3a1c45	60		rts		            RTS
.3a1c46					PHRETURN
.3a1c46	08		php		                PHP
.3a1c47	0b		phd		                PHD
.3a1c48	08		php		            PHP
.3a1c49	c2 20		rep #$20	            REP #$20
.3a1c4b	48		pha		            PHA
.3a1c4c	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1c4f	5b		tcd		            TCD
.3a1c50	68		pla		            PLA
.3a1c51	28		plp		            PLP
.3a1c52	c2 30		rep #$30	            REP #$30
.3a1c54	92 33		sta ($0833)	                STA (RETURNSP)
.3a1c56	c6 33		dec $0833	                DEC RETURNSP
.3a1c58	c6 33		dec $0833	                DEC RETURNSP
.3a1c5a	2b		pld		                PLD
.3a1c5b	28		plp		                PLP
.3a1c5c	60		rts		            RTS
.3a1c5d					PHRETURNB
.3a1c5d	08		php		                PHP
.3a1c5e	c2 30		rep #$30	            REP #$30
.3a1c60	29 ff 00	and #$00ff	                AND #$00FF
.3a1c63	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a1c66	28		plp		                PLP
.3a1c67	60		rts		            RTS
.3a1c68					PLRETURN
.3a1c68	08		php		                PHP
.3a1c69	0b		phd		                PHD
.3a1c6a	08		php		            PHP
.3a1c6b	c2 20		rep #$20	            REP #$20
.3a1c6d	48		pha		            PHA
.3a1c6e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1c71	5b		tcd		            TCD
.3a1c72	68		pla		            PLA
.3a1c73	28		plp		            PLP
.3a1c74	c2 30		rep #$30	            REP #$30
.3a1c76	e6 33		inc $0833	                INC RETURNSP
.3a1c78	e6 33		inc $0833	                INC RETURNSP
.3a1c7a	b2 33		lda ($0833)	                LDA (RETURNSP)
.3a1c7c	2b		pld		                PLD
.3a1c7d	28		plp		                PLP
.3a1c7e	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\interpreter.s

=$80					ST_RUNNING = $80            ; The interpreter is running a full program
=$00					ST_INTERACT = $00           ; The interpreter is in interactive mode
>08d2					STATE       .byte ?         ; The state of the interpreter ()
>08d3					ERROR_NUM   .byte ?         ; The type of the error
>08d4					HANDLEERR   .long ?         ; Pointer to the error handler
>08d7					LINENUM     .word ?         ; The current line number
>08d9					LASTLINE    .long ?         ; Pointer to the next free space over the BASIC program
>08dc					EXECACTION  .byte ?         ; The action the exection routines should take to get their next statement
=0					LINE_LINK = 0               ; Offset to the link to the next line
=2					LINE_NUMBER = 2             ; Offset to the line number
=4					LINE_TOKENS = 4             ; Offset to the first token
=6					LINE_MINLEN = 6             ; Minimum length of a line
=0					EXEC_CONT = 0               ; Continue advancing the current line
=1					EXEC_STOP = 1               ; Stop execution of the program
=2					EXEC_GOTO = 2               ; Transfer execution to a new CURLINE that is already set
=3					EXEC_RETURN = 3             ; Transfer execution back to a line that was on the stack
.3a1c7f					SET_ERRERL
.3a1c7f	8b		phb		                PHB
.3a1c80	0b		phd		                PHD
.3a1c81	08		php		                PHP
.3a1c82	08		php		            PHP
.3a1c83	c2 20		rep #$20	            REP #$20
.3a1c85	48		pha		            PHA
.3a1c86	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a1c89	5b		tcd		            TCD
.3a1c8a	68		pla		            PLA
.3a1c8b	28		plp		            PLP
.3a1c8c	08		php		            PHP
.3a1c8d	e2 20		sep #$20	            SEP #$20
.3a1c8f	48		pha		            PHA
.3a1c90	a9 00		lda #$00	            LDA #BASIC_BANK
.3a1c92	48		pha		            PHA
.3a1c93	ab		plb		            PLB
.3a1c94	68		pla		            PLA
.3a1c95	28		plp		            PLP
.3a1c96	c2 20		rep #$20	            REP #$20
.3a1c98	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.3a1c9a	a9 00 00	lda #$0000	                LDA #0
.3a1c9d	85 25		sta $0825	                STA ARGUMENT1+2
.3a1c9f	e2 20		sep #$20	            SEP #$20
.3a1ca1	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a1ca3	85 27		sta $0827	                STA ARGTYPE1
.3a1ca5	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.3a1ca7	a9 3a		lda #$3a	                LDA #`err_name
.3a1ca9	85 e9		sta $08e9	                STA TOFIND+2
.3a1cab	c2 20		rep #$20	            REP #$20
.3a1cad	a9 d9 1c	lda #$1cd9	                LDA #<>err_name
.3a1cb0	85 e7		sta $08e7	                STA TOFIND
.3a1cb2	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a1cb5	c2 20		rep #$20	            REP #$20
.3a1cb7	a5 d7		lda $08d7	                LDA LINENUM
.3a1cb9	85 23		sta $0823	                STA ARGUMENT1               ; Get any result returned
.3a1cbb	a5 d9		lda $08d9	                LDA LINENUM+2
.3a1cbd	85 25		sta $0825	                STA ARGUMENT1+2
.3a1cbf	e2 20		sep #$20	            SEP #$20
.3a1cc1	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a1cc3	85 27		sta $0827	                STA ARGTYPE1
.3a1cc5	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BRUN_RESULT)
.3a1cc7	a9 3a		lda #$3a	                LDA #`erl_name
.3a1cc9	85 e9		sta $08e9	                STA TOFIND+2
.3a1ccb	c2 20		rep #$20	            REP #$20
.3a1ccd	a9 dd 1c	lda #$1cdd	                LDA #<>erl_name
.3a1cd0	85 e7		sta $08e7	                STA TOFIND
.3a1cd2	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a1cd5	28		plp		                PLP
.3a1cd6	2b		pld		                PLD
.3a1cd7	ab		plb		                PLB
.3a1cd8	60		rts		            RTS
>3a1cd9	45 52 52 00			err_name        .null "ERR"
>3a1cdd	45 52 4c 00			erl_name        .null "ERL"
.3a1ce1					ON_ERROR
.3a1ce1	e2 20		sep #$20	            SEP #$20
.3a1ce3	c2 10		rep #$10	            REP #$10
.3a1ce5	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a1ce8	af d3 08 00	lda $0008d3	            LDA @lERROR_NUM         ; Calculate index to the error message pointer
.3a1cec	0a		asl a		            ASL A
.3a1ced	c2 20		rep #$20	            REP #$20
.3a1cef	29 ff 00	and #$00ff	            AND #$00FF
.3a1cf2	a8		tay		            TAY
.3a1cf3	08		php		            PHP
.3a1cf4	e2 20		sep #$20	            SEP #$20
.3a1cf6	48		pha		            PHA
.3a1cf7	a9 3a		lda #$3a	            LDA #`ERRORMSG
.3a1cf9	48		pha		            PHA
.3a1cfa	ab		plb		            PLB
.3a1cfb	68		pla		            PLA
.3a1cfc	28		plp		            PLP
.3a1cfd	be 33 1d	ldx $3a1d33,y	            LDX ERRORMSG,Y
.3a1d00	20 16 03	jsr $3a0316	            JSR PRINTS
.3a1d03	c2 20		rep #$20	            REP #$20
.3a1d05	a5 d7		lda $08d7	            LDA LINENUM
.3a1d07	f0 27		beq $3a1d30	            BEQ skip_at
.3a1d09	a2 63 1d	ldx #$1d63	            LDX #<>MSG_AT           ; If so... print " AT "
.3a1d0c	20 16 03	jsr $3a0316	            JSR PRINTS
.3a1d0f	08		php		            PHP
.3a1d10	e2 20		sep #$20	            SEP #$20
.3a1d12	48		pha		            PHA
.3a1d13	a9 00		lda #$00	            LDA #BASIC_BANK
.3a1d15	48		pha		            PHA
.3a1d16	ab		plb		            PLB
.3a1d17	68		pla		            PLA
.3a1d18	28		plp		            PLP
.3a1d19	c2 20		rep #$20	            REP #$20
.3a1d1b	af d7 08 00	lda $0008d7	            LDA @lLINENUM           ; ... and then the line number
.3a1d1f	8f 23 08 00	sta $000823	            STA @lARGUMENT1
.3a1d23	a9 00 00	lda #$0000	            LDA #0
.3a1d26	8f 25 08 00	sta $000825	            STA @lARGUMENT1+2
.3a1d2a	20 88 43	jsr $3a4388	            JSR PR_INTEGER
.3a1d2d	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a1d30					skip_at
.3a1d30	4c de 25	jmp $3a25de	            JMP INTERACT
>3a1d33	67 1d				ERRORMSG    .word <>MSG_OK
>3a1d35	6a 1d				            .word <>MSG_BREAK
>3a1d37	70 1d				            .word <>MSG_SYNTAX
>3a1d39	7d 1d				            .word <>MSG_MEMORY
>3a1d3b	8b 1d				            .word <>MSG_TYPE
>3a1d3d	99 1d				            .word <>MSG_NOTFND
>3a1d3f	ac 1d				            .word <>MSG_NOLINE
>3a1d41	c2 1d				            .word <>MSG_UNDFLOW
>3a1d43	d2 1d				            .word <>MSG_OVRFLOW
>3a1d45	e1 1d				            .word <>MSG_RANGE
>3a1d47	ee 1d				            .word <>MSG_ARG
>3a1d49	ff 1d				            .word <>MSG_NOFILE
>3a1d4b	0e 1e				            .word <>MSG_NAN
>3a1d4d	1b 1e				            .word <>MSG_OVERFLOW
>3a1d4f	29 1e				            .word <>MSG_UNDERFLOW
>3a1d51	38 1e				            .word <>MSG_DIV0
>3a1d53	49 1e				            .word <>MSG_DIRECTORY
>3a1d55	62 1e				            .word <>MSG_LOAD
>3a1d57	76 1e				            .word <>MSG_SAVE
>3a1d59	8a 1e				            .word <>MSG_DELETE
>3a1d5b	a0 1e				            .word <>MSG_FILENOTFND
>3a1d5d	b4 1e				            .word <>MSG_DIRNOTWRITE
>3a1d5f	cf 1e				            .word <>MSG_NOTCOPIED
>3a1d61	e7 1e				            .word <>MSG_DOMAIN
>3a1d63	20 61 74 00			MSG_AT          .null " at"
>3a1d67	4f 4b 00			MSG_OK          .null "OK"
>3a1d6a	42 72 65 61 6b 00		MSG_BREAK       .null "Break"
>3a1d70	53 79 6e 74 61 78 20 65		MSG_SYNTAX      .null "Syntax error"
>3a1d78	72 72 6f 72 00
>3a1d7d	4f 75 74 20 6f 66 20 6d		MSG_MEMORY      .null "Out of memory"
>3a1d85	65 6d 6f 72 79 00
>3a1d8b	54 79 70 65 20 6d 69 73		MSG_TYPE        .null "Type mismatch"
>3a1d93	6d 61 74 63 68 00
>3a1d99	56 61 72 69 61 62 6c 65		MSG_NOTFND      .null "Variable not found"
>3a1da1	20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1dac	4c 69 6e 65 20 6e 75 6d		MSG_NOLINE      .null "Line number not found"
>3a1db4	62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1dc2	53 74 61 63 6b 20 75 6e		MSG_UNDFLOW     .null "Stack underflow"
>3a1dca	64 65 72 66 6c 6f 77 00
>3a1dd2	53 74 61 63 6b 20 6f 76		MSG_OVRFLOW     .null "Stack overflow"
>3a1dda	65 72 66 6c 6f 77 00
>3a1de1	4f 75 74 20 6f 66 20 72		MSG_RANGE       .null "Out of range"
>3a1de9	61 6e 67 65 00
>3a1dee	49 6c 6c 65 67 61 6c 20		MSG_ARG         .null "Illegal argument"
>3a1df6	61 72 67 75 6d 65 6e 74 00
>3a1dff	46 69 6c 65 20 6e 6f 74		MSG_NOFILE      .null "File not found"
>3a1e07	20 66 6f 75 6e 64 00
>3a1e0e	4e 6f 74 20 61 20 6e 75		MSG_NAN         .null "Not a number"
>3a1e16	6d 62 65 72 00
>3a1e1b	4d 61 74 68 20 6f 76 65		MSG_OVERFLOW    .null "Math overflow"
>3a1e23	72 66 6c 6f 77 00
>3a1e29	4d 61 74 68 20 75 6e 64		MSG_UNDERFLOW   .null "Math underflow"
>3a1e31	65 72 66 6c 6f 77 00
>3a1e38	44 69 76 69 73 69 6f 6e		MSG_DIV0        .null "Division by zero"
>3a1e40	20 62 79 20 7a 65 72 6f 00
>3a1e49	55 6e 61 62 6c 65 20 74		MSG_DIRECTORY   .null "Unable to read directory"
>3a1e51	6f 20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79
>3a1e61	00
>3a1e62	55 6e 61 62 6c 65 20 74		MSG_LOAD        .null "Unable to load file"
>3a1e6a	6f 20 6c 6f 61 64 20 66 69 6c 65 00
>3a1e76	55 6e 61 62 6c 65 20 74		MSG_SAVE        .null "Unable to save file"
>3a1e7e	6f 20 73 61 76 65 20 66 69 6c 65 00
>3a1e8a	55 6e 61 62 6c 65 20 74		MSG_DELETE      .null "Unable to delete file"
>3a1e92	6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00
>3a1ea0	43 6f 75 6c 64 20 6e 6f		MSG_FILENOTFND  .null "Could not find file"
>3a1ea8	74 20 66 69 6e 64 20 66 69 6c 65 00
>3a1eb4	43 6f 75 6c 64 20 6e 6f		MSG_DIRNOTWRITE .null "Could not update directory"
>3a1ebc	74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>3a1ecc	72 79 00
>3a1ecf	43 6f 75 6c 64 20 6e 6f		MSG_NOTCOPIED   .null "Could not copy the file"
>3a1ed7	74 20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00
>3a1ee7	41 72 67 75 6d 65 6e 74		MSG_DOMAIN      .null "Argument outside domain"
>3a1eef	20 6f 75 74 73 69 64 65 20 64 6f 6d 61 69 6e 00
.3a1eff					SETINTERACT
.3a1eff	08		php		            PHP
.3a1f00	0b		phd		            PHD
.3a1f01	08		php		            PHP
.3a1f02	c2 20		rep #$20	            REP #$20
.3a1f04	48		pha		            PHA
.3a1f05	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1f08	5b		tcd		            TCD
.3a1f09	68		pla		            PLA
.3a1f0a	28		plp		            PLP
.3a1f0b	e2 20		sep #$20	            SEP #$20
.3a1f0d	a9 00		lda #$00	            LDA #ST_INTERACT
.3a1f0f	85 d2		sta $08d2	            STA STATE
.3a1f11	2b		pld		            PLD
.3a1f12	28		plp		            PLP
.3a1f13	60		rts		            RTS
.3a1f14					CLRINTERP
.3a1f14	0b		phd		            PHD
.3a1f15	08		php		            PHP
.3a1f16	08		php		            PHP
.3a1f17	c2 20		rep #$20	            REP #$20
.3a1f19	48		pha		            PHA
.3a1f1a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1f1d	5b		tcd		            TCD
.3a1f1e	68		pla		            PLA
.3a1f1f	28		plp		            PLP
.3a1f20	08		php		            PHP
.3a1f21	c2 20		rep #$20	            REP #$20
.3a1f23	a9 e1 1c	lda #$1ce1	            LDA #<>ON_ERROR
.3a1f26	8f d4 08 00	sta $0008d4	            STA @lHANDLEERR
.3a1f2a	e2 20		sep #$20	            SEP #$20
.3a1f2c	a9 3a		lda #$3a	            LDA #`ON_ERROR
.3a1f2e	8f d6 08 00	sta $0008d6	            STA @lHANDLEERR+2
.3a1f32	28		plp		            PLP
.3a1f33	20 2d 42	jsr $3a422d	            JSR S_CLR
.3a1f36	20 6e 3d	jsr $3a3d6e	            JSR S_RESTORE
.3a1f39	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the depth of the GOSUB stack
.3a1f3b	28		plp		            PLP
.3a1f3c	2b		pld		            PLD
.3a1f3d	60		rts		            RTS
.3a1f3e					INCBIP
.3a1f3e	08		php		            PHP
.3a1f3f	0b		phd		            PHD
.3a1f40	08		php		            PHP
.3a1f41	c2 20		rep #$20	            REP #$20
.3a1f43	48		pha		            PHA
.3a1f44	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1f47	5b		tcd		            TCD
.3a1f48	68		pla		            PLA
.3a1f49	28		plp		            PLP
.3a1f4a	c2 20		rep #$20	            REP #$20
.3a1f4c	18		clc		            CLC
.3a1f4d	a5 00		lda $0800	            LDA BIP
.3a1f4f	69 01 00	adc #$0001	            ADC #1
.3a1f52	85 00		sta $0800	            STA BIP
.3a1f54	e2 20		sep #$20	            SEP #$20
.3a1f56	a5 02		lda $0802	            LDA BIP+2
.3a1f58	69 00		adc #$00	            ADC #0
.3a1f5a	85 02		sta $0802	            STA BIP+2
.3a1f5c	2b		pld		            PLD
.3a1f5d	28		plp		            PLP
.3a1f5e	60		rts		            RTS
.3a1f5f					SKIPWS
.3a1f5f	08		php		            PHP
.3a1f60	0b		phd		            PHD
.3a1f61	08		php		            PHP
.3a1f62	c2 20		rep #$20	            REP #$20
.3a1f64	48		pha		            PHA
.3a1f65	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1f68	5b		tcd		            TCD
.3a1f69	68		pla		            PLA
.3a1f6a	28		plp		            PLP
.3a1f6b	e2 20		sep #$20	            SEP #$20
.3a1f6d	a7 00		lda [$0800]	loop        LDA [BIP]
.3a1f6f	f0 0f		beq $3a1f80	            BEQ done            ; If character is 0, we've reached the end of the line
.3a1f71	c9 20		cmp #$20	            CMP #CHAR_SP        ; Skip if it's a space
.3a1f73	f0 06		beq $3a1f7b	            BEQ skip_char
.3a1f75	c9 09		cmp #$09	            CMP #CHAR_TAB       ; Skip if it's a TAB
.3a1f77	f0 02		beq $3a1f7b	            BEQ skip_char
.3a1f79	80 05		bra $3a1f80	            BRA done            ; Otherwise, we're done and BIP points to a non-whitespace
.3a1f7b					skip_char
.3a1f7b	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1f7e	80 ed		bra $3a1f6d	            BRA loop
.3a1f80	2b		pld		done        PLD
.3a1f81	28		plp		            PLP
.3a1f82	60		rts		            RTS
.3a1f83					SKIPSTMT
.3a1f83	08		php		            PHP
.3a1f84	e2 20		sep #$20	            SEP #$20
.3a1f86	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the current character
.3a1f88	f0 09		beq $3a1f93	            BEQ done            ; Is it EOL? Yes, we're done
.3a1f8a	c9 3a		cmp #$3a	            CMP #':'            ; Is it a colon?
.3a1f8c	f0 05		beq $3a1f93	            BEQ done            ; Yes, we're done
.3a1f8e	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1f91	80 f3		bra $3a1f86	            BRA loop            ; and check it...
.3a1f93	28		plp		done        PLP
.3a1f94	60		rts		            RTS
.3a1f95					SKIPTOTOK
.3a1f95	08		php		            PHP
.3a1f96	e2 20		sep #$20	            SEP #$20
.3a1f98	64 36		stz $0836	            STZ NESTING
.3a1f9a	a7 00		lda [$0800]	loop        LDA [BIP]           ; Get the character
.3a1f9c	f0 19		beq $3a1fb7	            BEQ end_of_line     ; EOL? Yes: move to the next line
.3a1f9e	c5 37		cmp $0837	            CMP TARGETTOK       ; Is it the one we want?
.3a1fa0	f0 2c		beq $3a1fce	            BEQ check_depth     ; Yes: check the depth
.3a1fa2	c9 9b		cmp #$9b	            CMP #TOK_FOR        ; Is it a FOR?
.3a1fa4	f0 1e		beq $3a1fc4	            BEQ inc_nesting     ; Yes: increment NESTING
.3a1fa6	c9 9f		cmp #$9f	            CMP #TOK_DO         ; Is it a DO?
.3a1fa8	f0 1a		beq $3a1fc4	            BEQ inc_nesting     ; Yes: increment NESTING
.3a1faa	c9 9e		cmp #$9e	            CMP #TOK_NEXT       ; Is it a NEXT?
.3a1fac	f0 1a		beq $3a1fc8	            BEQ dec_nesting     ; Yes: decrement NESTING
.3a1fae	c9 a0		cmp #$a0	            CMP #TOK_LOOP       ; Is it a LOOP?
.3a1fb0	f0 16		beq $3a1fc8	            BEQ dec_nesting     ; Yes: decrement NESTING
.3a1fb2					incloop
.3a1fb2	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1fb5	80 e3		bra $3a1f9a	            BRA loop            ; and keep scanning
.3a1fb7					end_of_line
.3a1fb7	20 1b 20	jsr $3a201b	            JSR NEXTLINE
.3a1fba	c2 20		rep #$20	            REP #$20
.3a1fbc	a5 d7		lda $08d7	            LDA LINENUM         ; Check the line number
.3a1fbe	f0 1d		beq $3a1fdd	            BEQ syntax_err1     ; If it's zero, we reached the end of the program
.3a1fc0	e2 20		sep #$20	            SEP #$20
.3a1fc2	80 d6		bra $3a1f9a	            BRA loop            ; And keep scanning
.3a1fc4					inc_nesting
.3a1fc4	e6 36		inc $0836	            INC NESTING         ; Track that we have entered a lexical scope for a FOR/DO
.3a1fc6	80 ea		bra $3a1fb2	            BRA incloop
.3a1fc8					dec_nesting
.3a1fc8	c6 36		dec $0836	            DEC NESTING         ; Track that we have left a lexical scope for a FOR/DO
.3a1fca	30 30		bmi $3a1ffc	            BMI syntax_err2     ; If the depth goes <0, throw a syntax error
.3a1fcc	80 e4		bra $3a1fb2	            BRA incloop
.3a1fce					check_depth
.3a1fce	a5 35		lda $0835	            LDA SKIPNEST        ; Check to see if nesting matters
.3a1fd0	30 06		bmi $3a1fd8	            BMI found           ; No: just return that we found the token
.3a1fd2	a5 36		lda $0836	            LDA NESTING         ; Get the nesting depth
.3a1fd4	f0 02		beq $3a1fd8	            BEQ found           ; If it's zero, we found our token
.3a1fd6	80 da		bra $3a1fb2	            BRA incloop         ; Otherwise: it's a token for an enclosed FOR/DO, keep scanning
.3a1fd8					found
.3a1fd8	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a1fdb	28		plp		            PLP
.3a1fdc	60		rts		            RTS
.3a1fdd					syntax_err1
.3a1fdd	08		php		            PHP
.3a1fde	c2 20		rep #$20	            REP #$20
.3a1fe0	48		pha		            PHA
.3a1fe1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a1fe4	5b		tcd		            TCD
.3a1fe5	68		pla		            PLA
.3a1fe6	28		plp		            PLP
.3a1fe7	e2 20		sep #$20	            SEP #$20
.3a1fe9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a1feb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a1fef	c2 20		rep #$20	            REP #$20
.3a1ff1	29 ff 00	and #$00ff	            AND #$00FF
.3a1ff4	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a1ff7	e2 20		sep #$20	            SEP #$20
.3a1ff9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a1ffc					syntax_err2
.3a1ffc	08		php		            PHP
.3a1ffd	c2 20		rep #$20	            REP #$20
.3a1fff	48		pha		            PHA
.3a2000	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2003	5b		tcd		            TCD
.3a2004	68		pla		            PLA
.3a2005	28		plp		            PLP
.3a2006	e2 20		sep #$20	            SEP #$20
.3a2008	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a200a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a200e	c2 20		rep #$20	            REP #$20
.3a2010	29 ff 00	and #$00ff	            AND #$00FF
.3a2013	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2016	e2 20		sep #$20	            SEP #$20
.3a2018	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a201b					NEXTLINE
.3a201b	08		php		            PHP
.3a201c	c2 30		rep #$30	            REP #$30
.3a201e	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a2021	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the offset to the next line
.3a2023	85 0c		sta $080c	            STA SCRATCH
.3a2025	18		clc		            CLC                 ; Compute the new CURLINE
.3a2026	a5 1a		lda $081a	            LDA CURLINE         ; CURLINE := [CURLINE].LINE_LINK
.3a2028	65 0c		adc $080c	            ADC SCRATCH
.3a202a	85 1a		sta $081a	            STA CURLINE
.3a202c	a5 1c		lda $081c	            LDA CURLINE+2
.3a202e	69 00 00	adc #$0000	            ADC #0
.3a2031	85 1c		sta $081c	            STA CURLINE+2
.3a2033	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the LINENUM to the new current line's number
.3a2036	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; LINENUM := [CURLINE].LINE_NUMBER
.3a2038	85 d7		sta $08d7	            STA LINENUM
.3a203a	18		clc		            CLC                 ; Point BIP to the first character of the line
.3a203b	a5 1a		lda $081a	            LDA CURLINE         ; BIP := CURLINE + LINE_TOKENS
.3a203d	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2040	85 00		sta $0800	            STA BIP
.3a2042	a5 1c		lda $081c	            LDA CURLINE+2
.3a2044	69 00 00	adc #$0000	            ADC #0
.3a2047	85 02		sta $0802	            STA BIP+2
.3a2049	28		plp		            PLP
.3a204a	60		rts		            RTS
.3a204b					EXPECT_TOK
.3a204b	08		php		            PHP
.3a204c	e2 20		sep #$20	            SEP #$20
.3a204e	48		pha		            PHA
.3a204f	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a2052	68		pla		            PLA
.3a2053	e2 20		sep #$20	            SEP #$20
.3a2055	c7 00		cmp [$0800]	            CMP [BIP]           ; Check the character at BIP
.3a2057	d0 08		bne $3a2061	            BNE syntax_err      ; Throw a syntax error
.3a2059	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a205c	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a205f	28		plp		            PLP
.3a2060	60		rts		            RTS
.3a2061					syntax_err
.3a2061	08		php		            PHP
.3a2062	c2 20		rep #$20	            REP #$20
.3a2064	48		pha		            PHA
.3a2065	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2068	5b		tcd		            TCD
.3a2069	68		pla		            PLA
.3a206a	28		plp		            PLP
.3a206b	e2 20		sep #$20	            SEP #$20
.3a206d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a206f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2073	c2 20		rep #$20	            REP #$20
.3a2075	29 ff 00	and #$00ff	            AND #$00FF
.3a2078	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a207b	e2 20		sep #$20	            SEP #$20
.3a207d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2080					OPT_TOK
.3a2080	08		php		            PHP
.3a2081	e2 20		sep #$20	            SEP #$20
.3a2083	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a2086	e2 20		sep #$20	            SEP #$20
.3a2088	a7 00		lda [$0800]	loop        LDA [BIP]           ; Check the character at BIP
.3a208a	f0 10		beq $3a209c	            BEQ ret_false       ; If end-of-line, return false
.3a208c	c9 3a		cmp #$3a	            CMP #':'
.3a208e	f0 0c		beq $3a209c	            BEQ ret_false       ; If colon, return false
.3a2090	c5 37		cmp $0837	            CMP TARGETTOK
.3a2092	f0 05		beq $3a2099	            BEQ ret_true        ; If matches, return true
.3a2094	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a2097	80 ef		bra $3a2088	            BRA loop
.3a2099	28		plp		ret_true    PLP
.3a209a	38		sec		            SEC
.3a209b	60		rts		            RTS
.3a209c	28		plp		ret_false   PLP
.3a209d	18		clc		            CLC
.3a209e	60		rts		            RTS
.3a209f					PEEK_TOK
.3a209f	5a		phy		            PHY
.3a20a0	08		php		            PHP
.3a20a1	e2 20		sep #$20	            SEP #$20
.3a20a3	a0 00 00	ldy #$0000	            LDY #0
.3a20a6	b7 00		lda [$0800],y	loop        LDA [BIP],Y
.3a20a8	f0 0d		beq $3a20b7	            BEQ done
.3a20aa	c9 3a		cmp #$3a	            CMP #':'
.3a20ac	f0 07		beq $3a20b5	            BEQ ret_null
.3a20ae	c9 20		cmp #$20	            CMP #CHAR_SP
.3a20b0	d0 05		bne $3a20b7	            BNE done
.3a20b2	c8		iny		            INY
.3a20b3	80 f1		bra $3a20a6	            BRA loop
.3a20b5	a9 00		lda #$00	ret_null    LDA #0
.3a20b7	28		plp		done        PLP
.3a20b8	7a		ply		            PLY
.3a20b9	60		rts		            RTS
.3a20ba					EXECSTMT
.3a20ba	08		php		            PHP
.3a20bb	0b		phd		            PHD
.3a20bc	8b		phb		            PHB
.3a20bd	08		php		            PHP
.3a20be	c2 20		rep #$20	            REP #$20
.3a20c0	48		pha		            PHA
.3a20c1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a20c4	5b		tcd		            TCD
.3a20c5	68		pla		            PLA
.3a20c6	28		plp		            PLP
.3a20c7	20 ef 17	jsr $3a17ef	            JSR INITEVALSP
.3a20ca	e2 20		sep #$20	            SEP #$20
.3a20cc	a9 00		lda #$00	            LDA #EXEC_CONT      ; This will tell EXECLINE and EXECPROG to procede in a
.3a20ce	85 dc		sta $08dc	            STA EXECACTION      ; linear fashion through the program
.3a20d0	ad 8a 0f	lda $0f8a	check_break LDA KEYFLAG         ; Check the keyboard flags
.3a20d3	30 4b		bmi $3a2120	            BMI throw_break     ; If MSB: user pressed an interrupt key, stop the program
.3a20d5	a7 00		lda [$0800]	            LDA [BIP]           ; If we happen to have a colon, just skip over it.
.3a20d7	c9 3a		cmp #$3a	            CMP #':'            ; This can happen with FOR/NEXT
.3a20d9	d0 03		bne $3a20de	            BNE eat_ws
.3a20db	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a20de					eat_ws
.3a20de	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a20e1	a7 00		lda [$0800]	            LDA [BIP]
.3a20e3	d0 03		bne $3a20e8	            BNE else
.3a20e5	4c 6a 21	jmp $3a216a	            JMP done            ; If the current byte is 0, we're at the end of the line, just return
.3a20e8					else
.3a20e8	20 94 03	jsr $3a0394	            JSR ISALPHA
.3a20eb	b0 52		bcs $3a213f	            BCS is_variable     ; Yes: we may have a LET statement
.3a20ed	a7 00		lda [$0800]	            LDA [BIP]           ; Check to see if it's any other non-token
.3a20ef	10 10		bpl $3a2101	            BPL error           ; Yes: it's a syntax error
.3a20f1	20 5c 0b	jsr $3a0b5c	            JSR TOKTYPE
.3a20f4	85 0c		sta $080c	            STA SCRATCH         ; Save the type for later
.3a20f6	c9 20		cmp #$20	            CMP #TOK_TY_STMNT   ; Is it a statement?
.3a20f8	d0 03		bne $3a20fd	            BNE else2
.3a20fa	4c 58 21	jmp $3a2158	            JMP ok_to_exec      ; Yes: it's ok to try to execute it
.3a20fd	a5 d2		lda $08d2	else2       LDA STATE           ; Check to see if we're in interactive mode
.3a20ff	f0 51		beq $3a2152	            BEQ is_interact
.3a2101					error
.3a2101	08		php		            PHP
.3a2102	c2 20		rep #$20	            REP #$20
.3a2104	48		pha		            PHA
.3a2105	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2108	5b		tcd		            TCD
.3a2109	68		pla		            PLA
.3a210a	28		plp		            PLP
.3a210b	e2 20		sep #$20	            SEP #$20
.3a210d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a210f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2113	c2 20		rep #$20	            REP #$20
.3a2115	29 ff 00	and #$00ff	            AND #$00FF
.3a2118	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a211b	e2 20		sep #$20	            SEP #$20
.3a211d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2120					throw_break
.3a2120	08		php		            PHP
.3a2121	c2 20		rep #$20	            REP #$20
.3a2123	48		pha		            PHA
.3a2124	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2127	5b		tcd		            TCD
.3a2128	68		pla		            PLA
.3a2129	28		plp		            PLP
.3a212a	e2 20		sep #$20	            SEP #$20
.3a212c	a9 01		lda #$01	            LDA #ERR_BREAK
.3a212e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2132	c2 20		rep #$20	            REP #$20
.3a2134	29 ff 00	and #$00ff	            AND #$00FF
.3a2137	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a213a	e2 20		sep #$20	            SEP #$20
.3a213c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a213f					is_variable
.3a213f	20 37 42	jsr $3a4237	            JSR S_LET
.3a2142	4c 6a 21	jmp $3a216a	            JMP done
.3a2145					STSTUB
.3a2145	08		php		            PHP
.3a2146	e2 20		sep #$20	            SEP #$20
.3a2148	48		pha		            PHA
.3a2149	a9 00		lda #$00	            LDA #`GLOBAL_VARS
.3a214b	48		pha		            PHA
.3a214c	ab		plb		            PLB
.3a214d	68		pla		            PLA
.3a214e	28		plp		            PLP
.3a214f	6c 2f 08	jmp ($082f)	            JMP (JMP16PTR)      ; Annoying JMP to get around the fact we don't have an indirect JSR
.3a2152	a5 0c		lda $080c	is_interact LDA SCRATCH         ; Get the token type
.3a2154	c9 10		cmp #$10	            CMP #TOK_TY_CMD     ; Is it a command?
.3a2156	d0 a9		bne $3a2101	            BNE error           ; If not, it's an error
.3a2158					ok_to_exec
.3a2158	a7 00		lda [$0800]	            LDA [BIP]           ; Get the original token again
.3a215a	20 39 0b	jsr $3a0b39	            JSR TOKEVAL
.3a215d	c2 20		rep #$20	            REP #$20
.3a215f	85 2f		sta $082f	            STA JMP16PTR        ; Store it in the jump pointer
.3a2161	20 ef 17	jsr $3a17ef	            JSR INITEVALSP
.3a2164	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a2167	20 45 21	jsr $3a2145	            JSR STSTUB
.3a216a	ab		plb		done        PLB
.3a216b	2b		pld		            PLD
.3a216c	28		plp		            PLP
.3a216d	60		rts		            RTS
.3a216e					EXECCMD
.3a216e	08		php		            PHP
.3a216f	58		cli		            CLI
.3a2170	20 ff 1e	jsr $3a1eff	            JSR SETINTERACT
.3a2173	20 24 1c	jsr $3a1c24	            JSR INITRETURN
.3a2176	e2 20		sep #$20	            SEP #$20
.3a2178	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.3a217b	c2 20		rep #$20	            REP #$20
.3a217d	a5 1a		lda $081a	            LDA CURLINE         ; Set the BASIC Instruction Pointer to the first byte of the line
.3a217f	85 00		sta $0800	            STA BIP
.3a2181	a5 1c		lda $081c	            LDA CURLINE+2
.3a2183	85 02		sta $0802	            STA BIP+2
.3a2185	4c af 21	jmp $3a21af	            JMP exec_loop
.3a2188	08		php		EXECLINE    PHP
.3a2189	c2 20		rep #$20	            REP #$20
.3a218b	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER            ; Set the current line number
.3a218e	b7 1a		lda [$081a],y	            LDA [CURLINE],Y
.3a2190	85 d7		sta $08d7	            STA LINENUM
.3a2192	20 85 13	jsr $3a1385	            JSR CLRTMPSTR
.3a2195	e2 20		sep #$20	            SEP #$20
.3a2197	a5 dc		lda $08dc	            LDA EXECACTION              ; If the last EXEC action was RETURN
.3a2199	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; BIP has already been set, so...
.3a219b	f0 12		beq $3a21af	            BEQ exec_loop               ; Skip over setting the BIP to the beginning of the line
.3a219d	c2 20		rep #$20	            REP #$20
.3a219f	18		clc		            CLC                         ; Set the BASIC Instruction Pointer to the first byte of the line
.3a21a0	a5 1a		lda $081a	            LDA CURLINE
.3a21a2	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a21a5	85 00		sta $0800	            STA BIP
.3a21a7	e2 20		sep #$20	            SEP #$20
.3a21a9	a5 1c		lda $081c	            LDA CURLINE+2
.3a21ab	69 00		adc #$00	            ADC #0
.3a21ad	85 02		sta $0802	            STA BIP+2
.3a21af					exec_loop
.3a21af	c2 20		rep #$20	            REP #$20
.3a21b1	20 ba 20	jsr $3a20ba	            JSR EXECSTMT
.3a21b4	e2 20		sep #$20	            SEP #$20
.3a21b6	a5 dc		lda $08dc	            LDA EXECACTION
.3a21b8	c9 03		cmp #$03	            CMP #EXEC_RETURN
.3a21ba	f0 f3		beq $3a21af	            BEQ exec_loop
.3a21bc	c9 00		cmp #$00	            CMP #EXEC_CONT              ; If it's not EXEC_CONT, exit to the caller
.3a21be	d0 31		bne $3a21f1	            BNE exec_done
.3a21c0	e2 20		sep #$20	            SEP #$20
.3a21c2	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a21c5	a7 00		lda [$0800]	            LDA [BIP]                   ; Get the current character in the line
.3a21c7	f0 28		beq $3a21f1	            BEQ exec_done               ; If it's NULL, we're done
.3a21c9	c9 3a		cmp #$3a	            CMP #':'                    ; If it's colon, we have more statements
.3a21cb	f0 1f		beq $3a21ec	            BEQ skip_loop               ; Skip over it and try to execute the next one
.3a21cd	08		php		            PHP
.3a21ce	c2 20		rep #$20	            REP #$20
.3a21d0	48		pha		            PHA
.3a21d1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a21d4	5b		tcd		            TCD
.3a21d5	68		pla		            PLA
.3a21d6	28		plp		            PLP
.3a21d7	e2 20		sep #$20	            SEP #$20
.3a21d9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a21db	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a21df	c2 20		rep #$20	            REP #$20
.3a21e1	29 ff 00	and #$00ff	            AND #$00FF
.3a21e4	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a21e7	e2 20		sep #$20	            SEP #$20
.3a21e9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a21ec					skip_loop
.3a21ec	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a21ef	80 be		bra $3a21af	            BRA exec_loop               ; And try to execute another statement
.3a21f1					exec_done
.3a21f1	28		plp		            PLP
.3a21f2	60		rts		            RTS
.3a21f3					EXECPROGRAM
.3a21f3	08		php		            PHP
.3a21f4	58		cli		            CLI
.3a21f5	e2 20		sep #$20	            SEP #$20
.3a21f7	a9 80		lda #$80	            LDA #ST_RUNNING
.3a21f9	85 d2		sta $08d2	            STA STATE
.3a21fb	9c 8a 0f	stz $0f8a	            STZ KEYFLAG                 ; Clear the key flag... interrupt handler will raise MSB
.3a21fe	20 24 1c	jsr $3a1c24	            JSR INITRETURN
.3a2201	c2 30		rep #$30	            REP #$30
.3a2203	64 31		stz $0831	            STZ GOSUBDEPTH              ; Clear the count of GOSUBs
.3a2205	a0 02 00	ldy #$0002	exec_loop   LDY #LINE_NUMBER
.3a2208	b7 1a		lda [$081a],y	            LDA [CURLINE],Y             ; Get the line number of the current line
.3a220a	f0 29		beq $3a2235	            BEQ done                    ; If it's 0, we are finished running code (implicit END)
.3a220c	20 88 21	jsr $3a2188	            JSR EXECLINE
.3a220f	e2 20		sep #$20	            SEP #$20
.3a2211	a5 dc		lda $08dc	            LDA EXECACTION              ; Check the EXECACTION from the last line
.3a2213	c9 01		cmp #$01	            CMP #EXEC_STOP              ; Stop execution of the program?
.3a2215	f0 1e		beq $3a2235	            BEQ done
.3a2217	c9 02		cmp #$02	            CMP #EXEC_GOTO              ; Transfer execution to a new CURLINE that is already set
.3a2219	f0 ea		beq $3a2205	            BEQ exec_loop
.3a221b	c9 03		cmp #$03	            CMP #EXEC_RETURN            ; Transfer execution to the CURLINE and BIP that is already set
.3a221d	f0 e6		beq $3a2205	            BEQ exec_loop
.3a221f	c2 20		rep #$20	            REP #$20
.3a2221	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a2224	18		clc		            CLC
.3a2225	a5 1a		lda $081a	            LDA CURLINE
.3a2227	77 1a		adc [$081a],y	            ADC [CURLINE],Y
.3a2229	85 1a		sta $081a	            STA CURLINE
.3a222b	e2 20		sep #$20	            SEP #$20
.3a222d	a5 1c		lda $081c	            LDA CURLINE+2
.3a222f	69 00		adc #$00	            ADC #0
.3a2231	85 1c		sta $081c	            STA CURLINE+2
.3a2233	80 d0		bra $3a2205	            BRA exec_loop               ; And try to execute that line
.3a2235					done
.3a2235	e2 20		sep #$20	            SEP #$20
.3a2237	a9 00		lda #$00	            LDA #ST_INTERACT            ; Set interpreter state to RUNNING
.3a2239	85 d2		sta $08d2	            STA STATE
.3a223b	28		plp		            PLP
.3a223c	60		rts		            RTS
.3a223d					FINDLINE
.3a223d	08		php		            PHP
.3a223e	c2 30		rep #$30	            REP #$30
.3a2240	c2 20		rep #$20	            REP #$20
.3a2242	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT            ; INDEX points to the first line of the program
.3a2245	85 08		sta $0808	            STA INDEX
.3a2247	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a224a	85 0a		sta $080a	            STA INDEX+2
.3a224c	c2 20		rep #$20	            REP #$20
.3a224e	a0 02 00	ldy #$0002	check_nmbrs LDY #LINE_NUMBER            ; Get the number of the possible target line
.3a2251	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a2253	f0 31		beq $3a2286	            BEQ ret_false               ; If new line number is 0, we got to the
.3a2255	c5 23		cmp $0823	            CMP ARGUMENT1               ; Compare it to the target line number
.3a2257	f0 1e		beq $3a2277	            BEQ found
.3a2259	b0 2b		bcs $3a2286	            BGE ret_false               ; If the line number > target line number, the line is not present
.3a225b					next_line
.3a225b	c2 20		rep #$20	            REP #$20
.3a225d	a0 00 00	ldy #$0000	            LDY #LINE_LINK              ; INDEX := INDEX + [INDEX].LINK
.3a2260	18		clc		            CLC
.3a2261	a5 08		lda $0808	            LDA INDEX
.3a2263	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a2265	85 0c		sta $080c	            STA SCRATCH
.3a2267	e2 20		sep #$20	            SEP #$20
.3a2269	a5 0a		lda $080a	            LDA INDEX+2
.3a226b	69 00		adc #$00	            ADC #0
.3a226d	85 0a		sta $080a	            STA INDEX+2
.3a226f	c2 20		rep #$20	            REP #$20
.3a2271	a5 0c		lda $080c	            LDA SCRATCH
.3a2273	85 08		sta $0808	            STA INDEX
.3a2275	80 d7		bra $3a224e	            BRA check_nmbrs             ; And go back to check the new line INDEX is pointing to
.3a2277					found
.3a2277	c2 20		rep #$20	            REP #$20
.3a2279	a5 08		lda $0808	            LDA INDEX
.3a227b	85 1a		sta $081a	            STA CURLINE
.3a227d	e2 20		sep #$20	            SEP #$20
.3a227f	a5 0a		lda $080a	            LDA INDEX+2
.3a2281	85 1c		sta $081c	            STA CURLINE+2
.3a2283	28		plp		ret_true    PLP                         ; Return true to indicate we've found the line
.3a2284	38		sec		            SEC
.3a2285	60		rts		            RTS
.3a2286	28		plp		ret_false   PLP
.3a2287	18		clc		            CLC
.3a2288	60		rts		            RTS
.3a2289					MVPROGDN
.3a2289	08		php		            PHP
.3a228a					mvd_loop
.3a228a	e2 20		sep #$20	            SEP #$20
.3a228c	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.3a228e	87 08		sta [$0808]	            STA [INDEX]
.3a2290	c2 20		rep #$20	            REP #$20
.3a2292	a5 0c		lda $080c	            LDA SCRATCH
.3a2294	c5 00		cmp $0800	            CMP BIP
.3a2296	d0 08		bne $3a22a0	            BNE increment
.3a2298	e2 20		sep #$20	            SEP #$20
.3a229a	a5 0e		lda $080e	            LDA SCRATCH+2
.3a229c	c5 02		cmp $0802	            CMP BIP+2
.3a229e	f0 26		beq $3a22c6	            BEQ done            ; Yes: return
.3a22a0					increment
.3a22a0	c2 20		rep #$20	            REP #$20
.3a22a2	18		clc		            CLC
.3a22a3	a5 0c		lda $080c	            LDA SCRATCH
.3a22a5	69 01 00	adc #$0001	            ADC #1
.3a22a8	85 0c		sta $080c	            STA SCRATCH
.3a22aa	e2 20		sep #$20	            SEP #$20
.3a22ac	a5 0e		lda $080e	            LDA SCRATCH+2
.3a22ae	69 00		adc #$00	            ADC #0
.3a22b0	85 0e		sta $080e	            STA SCRATCH+2
.3a22b2	c2 20		rep #$20	            REP #$20
.3a22b4	18		clc		            CLC
.3a22b5	a5 08		lda $0808	            LDA INDEX
.3a22b7	69 01 00	adc #$0001	            ADC #1
.3a22ba	85 08		sta $0808	            STA INDEX
.3a22bc	e2 20		sep #$20	            SEP #$20
.3a22be	a5 0a		lda $080a	            LDA INDEX+2
.3a22c0	69 00		adc #$00	            ADC #0
.3a22c2	85 0a		sta $080a	            STA INDEX+2
.3a22c4	80 c4		bra $3a228a	            BRA mvd_loop        ; And try again
.3a22c6	28		plp		done        PLP
.3a22c7	60		rts		            RTS
.3a22c8					MVPROGUP
.3a22c8	08		php		            PHP
.3a22c9					mvu_loop
.3a22c9	e2 20		sep #$20	            SEP #$20
.3a22cb	a7 0c		lda [$080c]	            LDA [SCRATCH]       ; Move a byte
.3a22cd	87 08		sta [$0808]	            STA [INDEX]
.3a22cf	c2 20		rep #$20	            REP #$20
.3a22d1	a5 0c		lda $080c	            LDA SCRATCH
.3a22d3	c5 00		cmp $0800	            CMP BIP
.3a22d5	d0 06		bne $3a22dd	            BNE decrement
.3a22d7	a5 0e		lda $080e	            LDA SCRATCH+2
.3a22d9	c5 02		cmp $0802	            CMP BIP+2
.3a22db	f0 26		beq $3a2303	            BEQ done            ; Yes: return
.3a22dd					decrement
.3a22dd	c2 20		rep #$20	            REP #$20
.3a22df	38		sec		            SEC
.3a22e0	a5 0c		lda $080c	            LDA SCRATCH
.3a22e2	e9 01 00	sbc #$0001	            SBC #1
.3a22e5	85 0c		sta $080c	            STA SCRATCH
.3a22e7	e2 20		sep #$20	            SEP #$20
.3a22e9	a5 0e		lda $080e	            LDA SCRATCH+2
.3a22eb	e9 00		sbc #$00	            SBC #0
.3a22ed	85 0e		sta $080e	            STA SCRATCH+2
.3a22ef	c2 20		rep #$20	            REP #$20
.3a22f1	38		sec		            SEC
.3a22f2	a5 08		lda $0808	            LDA INDEX
.3a22f4	e9 01 00	sbc #$0001	            SBC #1
.3a22f7	85 08		sta $0808	            STA INDEX
.3a22f9	e2 20		sep #$20	            SEP #$20
.3a22fb	a5 0a		lda $080a	            LDA INDEX+2
.3a22fd	e9 00		sbc #$00	            SBC #0
.3a22ff	85 0a		sta $080a	            STA INDEX+2
.3a2301	80 c6		bra $3a22c9	            BRA mvu_loop        ; And try again
.3a2303	28		plp		done        PLP
.3a2304	60		rts		            RTS
.3a2305					DELLINE
.3a2305	08		php		            PHP
.3a2306	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; SCRATCH := INDEX + [INDEX].LINK (address of the following line)
.3a2309	c2 20		rep #$20	            REP #$20
.3a230b	18		clc		            CLC
.3a230c	a5 08		lda $0808	            LDA INDEX
.3a230e	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a2310	85 0c		sta $080c	            STA SCRATCH
.3a2312	e2 20		sep #$20	            SEP #$20
.3a2314	a5 0a		lda $080a	            LDA INDEX+2
.3a2316	69 00		adc #$00	            ADC #0
.3a2318	85 0e		sta $080e	            STA SCRATCH+2
.3a231a	c2 20		rep #$20	            REP #$20
.3a231c	18		clc		            CLC
.3a231d	a5 d9		lda $08d9	            LDA LASTLINE
.3a231f	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2322	85 00		sta $0800	            STA BIP
.3a2324	e2 20		sep #$20	            SEP #$20
.3a2326	a5 db		lda $08db	            LDA LASTLINE+2
.3a2328	69 00		adc #$00	            ADC #0
.3a232a	85 02		sta $0802	            STA BIP+2
.3a232c	a0 00 00	ldy #$0000	            LDY #LINE_LINK          ; LASTLINE := LASTLINE - [INDEX].LINK
.3a232f	c2 20		rep #$20	            REP #$20
.3a2331	38		sec		            SEC
.3a2332	a5 d9		lda $08d9	            LDA LASTLINE
.3a2334	f7 08		sbc [$0808],y	            SBC [INDEX],Y
.3a2336	85 d9		sta $08d9	            STA LASTLINE
.3a2338	e2 20		sep #$20	            SEP #$20
.3a233a	a5 db		lda $08db	            LDA LASTLINE+2
.3a233c	e9 00		sbc #$00	            SBC #0
.3a233e	85 db		sta $08db	            STA LASTLINE+2
.3a2340	20 89 22	jsr $3a2289	            JSR MVPROGDN
.3a2343					done
.3a2343	20 2d 42	jsr $3a422d	            JSR S_CLR
.3a2346	28		plp		            PLP
.3a2347	60		rts		            RTS
.3a2348					APPLINE
.3a2348	08		php		            PHP
.3a2349	08		php		            PHP
.3a234a	c2 20		rep #$20	            REP #$20
.3a234c	48		pha		            PHA
.3a234d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a2350	5b		tcd		            TCD
.3a2351	68		pla		            PLA
.3a2352	28		plp		            PLP
.3a2353	c2 30		rep #$30	            REP #$30
.3a2355	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER    ; Set the line number of the new line
.3a2358	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.3a235a	18		clc		            CLC                 ; Point INDEX to the position to store the tokens
.3a235b	a5 d9		lda $08d9	            LDA LASTLINE
.3a235d	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2360	85 08		sta $0808	            STA INDEX
.3a2362	e2 20		sep #$20	            SEP #$20
.3a2364	a5 db		lda $08db	            LDA LASTLINE+2
.3a2366	69 00		adc #$00	            ADC #0
.3a2368	85 0a		sta $080a	            STA INDEX+2
.3a236a	e2 20		sep #$20	            SEP #$20
.3a236c	a0 00 00	ldy #$0000	            LDY #0
.3a236f	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Copy the tokenized line to its place in the code
.3a2371	97 08		sta [$0808],y	            STA [INDEX],Y
.3a2373	f0 03		beq $3a2378	            BEQ copy_done
.3a2375	c8		iny		            INY
.3a2376	80 f7		bra $3a236f	            BRA copy_loop
.3a2378					copy_done
.3a2378	c2 20		rep #$20	            REP #$20
.3a237a	98		tya		            TYA
.3a237b	18		clc		            CLC
.3a237c	69 05 00	adc #$0005	            ADC #LINE_TOKENS+1
.3a237f	85 0c		sta $080c	            STA SCRATCH
.3a2381	c2 20		rep #$20	            REP #$20
.3a2383	a0 00 00	ldy #$0000	            LDY #LINE_LINK      ; Set link to the offset to the next line
.3a2386	a5 0c		lda $080c	            LDA SCRATCH
.3a2388	97 d9		sta [$08d9],y	            STA [LASTLINE],Y
.3a238a	c2 20		rep #$20	            REP #$20
.3a238c	18		clc		            CLC
.3a238d	a5 d9		lda $08d9	            LDA LASTLINE
.3a238f	65 0c		adc $080c	            ADC SCRATCH
.3a2391	85 0c		sta $080c	            STA SCRATCH
.3a2393	e2 20		sep #$20	            SEP #$20
.3a2395	a5 db		lda $08db	            LDA LASTLINE+2
.3a2397	69 00		adc #$00	            ADC #0
.3a2399	85 db		sta $08db	            STA LASTLINE+2
.3a239b	c2 20		rep #$20	            REP #$20
.3a239d	a5 0c		lda $080c	            LDA SCRATCH
.3a239f	85 d9		sta $08d9	            STA LASTLINE
.3a23a1	c2 20		rep #$20	            REP #$20
.3a23a3	a0 00 00	ldy #$0000	            LDY #0
.3a23a6	a9 00 00	lda #$0000	            LDA #0
.3a23a9	97 d9		sta [$08d9],y	blank_loop  STA [LASTLINE],Y    ; Set the "line" after the last line to nulls
.3a23ab	c8		iny		            INY
.3a23ac	c0 05 00	cpy #$0005	            CPY #LINE_TOKENS+1
.3a23af	d0 f8		bne $3a23a9	            BNE blank_loop
.3a23b1	20 2d 42	jsr $3a422d	            JSR S_CLR
.3a23b4	28		plp		            PLP
.3a23b5	60		rts		            RTS
.3a23b6					FINDINSPT
.3a23b6	0b		phd		            PHD
.3a23b7	08		php		            PHP
.3a23b8	08		php		            PHP
.3a23b9	c2 20		rep #$20	            REP #$20
.3a23bb	48		pha		            PHA
.3a23bc	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a23bf	5b		tcd		            TCD
.3a23c0	68		pla		            PLA
.3a23c1	28		plp		            PLP
.3a23c2	c2 30		rep #$30	            REP #$30
.3a23c4	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a23c7	85 08		sta $0808	            STA INDEX
.3a23c9	a9 36 00	lda #$0036	            LDA #`BASIC_BOT
.3a23cc	85 0a		sta $080a	            STA INDEX+2
.3a23ce	a0 02 00	ldy #$0002	loop        LDY #LINE_NUMBER
.3a23d1	b7 08		lda [$0808],y	            LDA [INDEX],Y
.3a23d3	f0 1d		beq $3a23f2	            BEQ found_end           ; Got to end without finding it
.3a23d5	c5 d7		cmp $08d7	            CMP LINENUM
.3a23d7	f0 25		beq $3a23fe	            BEQ found_line          ; LINENUM = [INDEX].LINE_NUMBER: return we found the exact line
.3a23d9	b0 1d		bcs $3a23f8	            BGE found_spot          ; LINENUM > [INDEX].LINE_NUMBER: return we found spot to insert
.3a23db	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a23de	18		clc		            CLC                     ; Move INDEX to the next line
.3a23df	a5 08		lda $0808	            LDA INDEX
.3a23e1	77 08		adc [$0808],y	            ADC [INDEX],Y
.3a23e3	85 0c		sta $080c	            STA SCRATCH
.3a23e5	a5 0a		lda $080a	            LDA INDEX+2
.3a23e7	69 00 00	adc #$0000	            ADC #0
.3a23ea	85 0a		sta $080a	            STA INDEX+2
.3a23ec	a5 0c		lda $080c	            LDA SCRATCH
.3a23ee	85 08		sta $0808	            STA INDEX
.3a23f0	80 dc		bra $3a23ce	            BRA loop                ; And check that line
.3a23f2	a9 00 00	lda #$0000	found_end   LDA #0                  ; Return that we reached the end of the program
.3a23f5	28		plp		            PLP
.3a23f6	2b		pld		            PLD
.3a23f7	60		rts		            RTS
.3a23f8	a9 01 00	lda #$0001	found_spot  LDA #1                  ; Return that we the found the spot to insert the line
.3a23fb	28		plp		            PLP                     ; But that it wasn't already there
.3a23fc	2b		pld		            PLD
.3a23fd	60		rts		            RTS
.3a23fe	a9 02 00	lda #$0002	found_line  LDA #2                  ; Return that we found the line
.3a2401	28		plp		            PLP
.3a2402	2b		pld		            PLD
.3a2403	60		rts		            RTS
.3a2404					INSLINE
.3a2404	08		php		            PHP
.3a2405	c2 30		rep #$30	            REP #$30
.3a2407	a9 05 00	lda #$0005	            LDA #LINE_TOKENS+1  ; Set SCRATCH2 to the size of the line header with the end-of-line
.3a240a	85 10		sta $0810	            STA SCRATCH2
.3a240c	a0 00 00	ldy #$0000	            LDY #0
.3a240f					count_loop
.3a240f	e2 20		sep #$20	            SEP #$20
.3a2411	b7 1a		lda [$081a],y	            LDA [CURLINE],Y     ; Get the byte of the line
.3a2413	f0 07		beq $3a241c	            BEQ shift_prog      ; If it's end-of-line, SCRATCH2 is the length
.3a2415	c2 20		rep #$20	            REP #$20
.3a2417	e6 10		inc $0810	            INC SCRATCH2
.3a2419	c8		iny		            INY
.3a241a	80 f3		bra $3a240f	            BRA count_loop      ; Count and continue
.3a241c					shift_prog
.3a241c	c2 20		rep #$20	            REP #$20
.3a241e	a5 08		lda $0808	            LDA INDEX           ; BIP = the address of the first byte for the new line
.3a2420	85 00		sta $0800	            STA BIP
.3a2422	a5 0a		lda $080a	            LDA INDEX+2
.3a2424	85 02		sta $0802	            STA BIP+2
.3a2426	18		clc		            CLC                 ; SCRATCH = address of highest byte to copy
.3a2427	a5 d9		lda $08d9	            LDA LASTLINE
.3a2429	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a242c	85 0c		sta $080c	            STA SCRATCH
.3a242e	a5 db		lda $08db	            LDA LASTLINE+2
.3a2430	69 00 00	adc #$0000	            ADC #0
.3a2433	85 0e		sta $080e	            STA SCRATCH+2
.3a2435	18		clc		            CLC                 ; Adjust LASTLINE to its new position after the insert
.3a2436	a5 d9		lda $08d9	            LDA LASTLINE
.3a2438	65 10		adc $0810	            ADC SCRATCH2
.3a243a	85 d9		sta $08d9	            STA LASTLINE
.3a243c	a5 db		lda $08db	            LDA LASTLINE+2
.3a243e	69 00 00	adc #$0000	            ADC #0
.3a2441	85 db		sta $08db	            STA LASTLINE+2
.3a2443	18		clc		            CLC                 ; INDEX = address of the highest location to copy into
.3a2444	a5 d9		lda $08d9	            LDA LASTLINE
.3a2446	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a2449	85 08		sta $0808	            STA INDEX
.3a244b	a5 db		lda $08db	            LDA LASTLINE+2
.3a244d	69 00 00	adc #$0000	            ADC #0
.3a2450	85 0a		sta $080a	            STA INDEX+2
.3a2452	20 c8 22	jsr $3a22c8	            JSR MVPROGUP
.3a2455	c2 20		rep #$20	            REP #$20
.3a2457	a5 10		lda $0810	            LDA SCRATCH2
.3a2459	a0 00 00	ldy #$0000	            LDY #LINE_LINK
.3a245c	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINK_LINK = length of the new line
.3a245e	a5 d7		lda $08d7	            LDA LINENUM
.3a2460	a0 02 00	ldy #$0002	            LDY #LINE_NUMBER
.3a2463	97 00		sta [$0800],y	            STA [BIP],Y         ; [BIP].LINE_NUMBER = number of the new line
.3a2465	18		clc		            CLC                 ; Point BIP to the first byte of the new line
.3a2466	a5 00		lda $0800	            LDA BIP
.3a2468	69 04 00	adc #$0004	            ADC #LINE_TOKENS
.3a246b	85 00		sta $0800	            STA BIP
.3a246d	a5 02		lda $0802	            LDA BIP+2
.3a246f	69 00 00	adc #$0000	            ADC #0
.3a2472	85 02		sta $0802	            STA BIP+2
.3a2474	a0 00 00	ldy #$0000	            LDY #0
.3a2477	e2 20		sep #$20	            SEP #$20
.3a2479	b7 1a		lda [$081a],y	copy_loop   LDA [CURLINE],Y     ; Get the byte of the tokenized line
.3a247b	97 00		sta [$0800],y	            STA [BIP],Y         ; Copy it to its correct location in the program
.3a247d	f0 03		beq $3a2482	            BEQ done            ; If it was end-of-line byte, we're done
.3a247f	c8		iny		            INY
.3a2480	80 f7		bra $3a2479	            BRA copy_loop       ; Otherwise, continue with the next
.3a2482					done
.3a2482	20 2d 42	jsr $3a422d	            JSR S_CLR
.3a2485	28		plp		            PLP
.3a2486	60		rts		            RTS
.3a2487					ADDLINE
.3a2487	08		php		            PHP
.3a2488	c2 30		rep #$30	            REP #$30
.3a248a	85 d7		sta $08d7	            STA LINENUM
.3a248c	20 b6 23	jsr $3a23b6	            JSR FINDINSPT
.3a248f	c9 00 00	cmp #$0000	            CMP #0
.3a2492	f0 2c		beq $3a24c0	            BEQ do_append       ; End-of-program found, add the line to the end
.3a2494	c9 01 00	cmp #$0001	            CMP #1
.3a2497	f0 22		beq $3a24bb	            BEQ do_insert       ; Spot was found: insertion required
.3a2499	c2 20		rep #$20	            REP #$20
.3a249b	a5 08		lda $0808	            LDA INDEX
.3a249d	48		pha		            PHA
.3a249e	a5 0a		lda $080a	            LDA INDEX+2
.3a24a0	48		pha		            PHA
.3a24a1	20 05 23	jsr $3a2305	            JSR DELLINE
.3a24a4	68		pla		            PLA
.3a24a5	85 0a		sta $080a	            STA INDEX+2
.3a24a7	68		pla		            PLA
.3a24a8	85 08		sta $0808	            STA INDEX
.3a24aa	a5 1a		lda $081a	            LDA CURLINE         ; Check to see if there is any non-whitespace on the line
.3a24ac	85 00		sta $0800	            STA BIP
.3a24ae	a5 1c		lda $081c	            LDA CURLINE+2
.3a24b0	85 02		sta $0802	            STA BIP+2
.3a24b2	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a24b5	e2 20		sep #$20	            SEP #$20
.3a24b7	a7 00		lda [$0800]	            LDA [BIP]
.3a24b9	f0 0a		beq $3a24c5	            BEQ done            ; If not, we're done
.3a24bb					do_insert
.3a24bb	20 04 24	jsr $3a2404	            JSR INSLINE
.3a24be	80 05		bra $3a24c5	            BRA done
.3a24c0	a5 d7		lda $08d7	do_append   LDA LINENUM
.3a24c2	20 48 23	jsr $3a2348	            JSR APPLINE
.3a24c5	28		plp		done        PLP
.3a24c6	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\repl.s

="#"					CHAR_DIR = '#'
="|"					CHAR_BRUN = '|'
.3a24c7					EXPANDLINE
.3a24c7	0b		phd		                PHD
.3a24c8	08		php		                PHP
.3a24c9	08		php		            PHP
.3a24ca	c2 20		rep #$20	            REP #$20
.3a24cc	48		pha		            PHA
.3a24cd	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a24d0	5b		tcd		            TCD
.3a24d1	68		pla		            PLA
.3a24d2	28		plp		            PLP
.3a24d3	e2 20		sep #$20	            SEP #$20
.3a24d5	c2 10		rep #$10	            REP #$10
.3a24d7	a2 00 00	ldx #$0000	                LDX #0
.3a24da	bd 00 4f	lda $4f00,x	count_loop      LDA INPUTBUF,X              ; Count the number of characters in the input
.3a24dd	f0 03		beq $3a24e2	                BEQ save_size
.3a24df	e8		inx		                INX
.3a24e0	80 f8		bra $3a24da	                BRA count_loop
.3a24e2	86 0c		stx $080c	save_size       STX SCRATCH                 ; Save the size in SCRATCH
.3a24e4	c2 30		rep #$30	            REP #$30
.3a24e6	8a		txa		                TXA
.3a24e7	c9 02 00	cmp #$0002	                CMP #2                      ; Are there arguments?
.3a24ea	90 12		bcc $3a24fe	                BLT start_copy              ; No: just replace the whole string
.3a24ec	3a		dec a		                DEC A
.3a24ed	18		clc		                CLC
.3a24ee	69 00 4f	adc #$4f00	                ADC #<>INPUTBUF
.3a24f1	aa		tax		                TAX                         ; X <-- INPUTBUF + len(INPUTBUF) - 1
.3a24f2	18		clc		                CLC                         ; Y <-- INPUTBUF + len(INPUTBUF) - 1 + len(substitution)
.3a24f3	65 8f		adc $088f	                ADC MCOUNT
.3a24f5	a8		tay		                TAY
.3a24f6	a5 0c		lda $080c	                LDA SCRATCH
.3a24f8	3a		dec a		                DEC A
.3a24f9	8b		phb		                PHB
.3a24fa	44 00 00	mvp #$00,#$00	                MVP #`INPUTBUF,#`INPUTBUF   ; Make room for the substitition
.3a24fd	ab		plb		                PLB
.3a24fe					start_copy
.3a24fe	c2 20		rep #$20	            REP #$20
.3a2500	a6 55		ldx $0855	                LDX MARG1                   ; Source is data to copy
.3a2502	a0 00 4f	ldy #$4f00	                LDY #<>INPUTBUF             ; Destination is input buffer
.3a2505	a5 8f		lda $088f	                LDA MCOUNT                  ; Number of bytes to copy
.3a2507	8b		phb		                PHB
.3a2508	54 00 3a	mvn #$3a,#$00	                MVN #`EXPANDLINE,#`INPUTBUF ; Copy the data
.3a250b	ab		plb		                PLB
.3a250c	e2 20		sep #$20	            SEP #$20
.3a250e	a5 0c		lda $080c	                LDA SCRATCH                 ; Check again to see if we need quotes
.3a2510	c9 02		cmp #$02	                CMP #2
.3a2512	90 18		bcc $3a252c	                BLT done
.3a2514	a6 8f		ldx $088f	                LDX MCOUNT                  ; If so, add a quote mark here
.3a2516	a9 22		lda #$22	                LDA #CHAR_DQUOTE
.3a2518	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a251b	e8		inx		skip_to_end     INX                         ; Move to the end of the input string
.3a251c	bd 00 4f	lda $4f00,x	                LDA INPUTBUF,X
.3a251f	d0 fa		bne $3a251b	                BNE skip_to_end
.3a2521	a9 22		lda #$22	                LDA #CHAR_DQUOTE            ; Add the quote to the end of the string
.3a2523	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a2526	a9 00		lda #$00	                LDA #0                      ; And terminate with a NULL
.3a2528	e8		inx		                INX
.3a2529	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a252c	28		plp		done            PLP
.3a252d	2b		pld		                PLD
.3a252e	60		rts		            RTS
.3a252f					PREPROCESS
.3a252f	da		phx		                PHX
.3a2530	5a		phy		                PHY
.3a2531	8b		phb		                PHB
.3a2532	0b		phd		                PHD
.3a2533	08		php		                PHP
.3a2534	08		php		            PHP
.3a2535	c2 20		rep #$20	            REP #$20
.3a2537	48		pha		            PHA
.3a2538	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a253b	5b		tcd		            TCD
.3a253c	68		pla		            PLA
.3a253d	28		plp		            PLP
.3a253e	e2 20		sep #$20	            SEP #$20
.3a2540	c2 10		rep #$10	            REP #$10
.3a2542	ad 00 4f	lda $4f00	                LDA INPUTBUF            ; Check the first character
.3a2545	c9 23		cmp #$23	                CMP #CHAR_DIR           ; Is it the DIR character?
.3a2547	f0 0a		beq $3a2553	                BEQ expand_dir          ; Yes: expand the DIR command into place
.3a2549	c9 7c		cmp #$7c	                CMP #CHAR_BRUN          ; Is it the BRUN character?
.3a254b	f0 17		beq $3a2564	                BEQ expand_brun         ; Yes: expand the BRUN command into place
.3a254d	28		plp		done            PLP
.3a254e	2b		pld		                PLD
.3a254f	ab		plb		                PLB
.3a2550	7a		ply		                PLY
.3a2551	fa		plx		                PLX
.3a2552	60		rts		            RTS
.3a2553					expand_dir
.3a2553	c2 20		rep #$20	            REP #$20
.3a2555	a9 03 00	lda #$0003	                LDA #3                  ; Set size of substitution value
.3a2558	85 8f		sta $088f	                STA MCOUNT
.3a255a	a9 75 25	lda #$2575	                LDA #<>dir_text         ; Set pointer to substitution value
.3a255d	85 55		sta $0855	                STA MARG1
.3a255f	20 c7 24	jsr $3a24c7	            JSR EXPANDLINE
.3a2562	80 e9		bra $3a254d	                BRA done
.3a2564					expand_brun
.3a2564	c2 20		rep #$20	            REP #$20
.3a2566	a9 04 00	lda #$0004	                LDA #4                  ; Set size of substitution value
.3a2569	85 8f		sta $088f	                STA MCOUNT
.3a256b	a9 79 25	lda #$2579	                LDA #<>brun_text        ; Set pointer to substitution value
.3a256e	85 55		sta $0855	                STA MARG1
.3a2570	20 c7 24	jsr $3a24c7	            JSR EXPANDLINE
.3a2573	80 d8		bra $3a254d	                BRA done
>3a2575	44 49 52 00			dir_text        .null "DIR"             ; Expansion of the DIR character
>3a2579	42 52 55 4e 00			brun_text       .null "BRUN"            ; Expansion of the BRUN character
.3a257e					PRREADY
.3a257e	8b		phb		                PHB
.3a257f	08		php		                PHP
.3a2580	20 e4 00	jsr $3a00e4	            JSR ENSURETEXT
.3a2583	08		php		            PHP
.3a2584	e2 20		sep #$20	            SEP #$20
.3a2586	48		pha		            PHA
.3a2587	a9 3a		lda #$3a	            LDA #`MPROMPT
.3a2589	48		pha		            PHA
.3a258a	ab		plb		            PLB
.3a258b	68		pla		            PLA
.3a258c	28		plp		            PLP
.3a258d	a2 5b d2	ldx #$d25b	                LDX #<>MPROMPT
.3a2590	20 16 03	jsr $3a0316	            JSR PRINTS
.3a2593	28		plp		                PLP
.3a2594	ab		plb		                PLB
.3a2595	60		rts		            RTS
.3a2596					IREADLINE
.3a2596	08		php		                PHP
.3a2597	e2 30		sep #$30	            SEP #$30
.3a2599	a9 01		lda #$01	                LDA #1
.3a259b	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a259e					read_loop
.3a259e	20 db 00	jsr $3a00db	            JSR GETKEYE
.3a25a1	f0 06		beq $3a25a9	                BEQ done
.3a25a3	c9 0d		cmp #$0d	                CMP #CHAR_CR
.3a25a5	f0 02		beq $3a25a9	                BEQ done
.3a25a7	80 f5		bra $3a259e	                BRA read_loop
.3a25a9	28		plp		done            PLP
.3a25aa	60		rts		            RTS
.3a25ab					PROCESS
.3a25ab	0b		phd		                PHD
.3a25ac	08		php		                PHP
.3a25ad	08		php		            PHP
.3a25ae	c2 20		rep #$20	            REP #$20
.3a25b0	48		pha		            PHA
.3a25b1	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a25b4	5b		tcd		            TCD
.3a25b5	68		pla		            PLA
.3a25b6	28		plp		            PLP
.3a25b7	c2 30		rep #$30	            REP #$30
.3a25b9	64 d7		stz $08d7	                STZ LINENUM
.3a25bb	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF         ; Attempt to tokenize the line that was read
.3a25be	85 1a		sta $081a	                STA CURLINE
.3a25c0	a9 00 00	lda #$0000	                LDA #`CURLINE
.3a25c3	85 1c		sta $081c	                STA CURLINE+2
.3a25c5	20 4e 08	jsr $3a084e	            JSR TOKENIZE
.3a25c8	c2 20		rep #$20	            REP #$20
.3a25ca	a5 d7		lda $08d7	                LDA LINENUM             ; Did we get a line number?
.3a25cc	d0 05		bne $3a25d3	                BNE update_line         ; Yes: attempt to add it to the program
.3a25ce	20 6e 21	jsr $3a216e	            JSR EXECCMD
.3a25d1	80 07		bra $3a25da	                BRA done
.3a25d3					update_line
.3a25d3	20 87 24	jsr $3a2487	            JSR ADDLINE
.3a25d6	28		plp		no_prompt       PLP
.3a25d7	2b		pld		                PLD
.3a25d8	38		sec		                SEC
.3a25d9	60		rts		            RTS
.3a25da	28		plp		done            PLP
.3a25db	2b		pld		                PLD
.3a25dc	18		clc		                CLC
.3a25dd	60		rts		            RTS
.3a25de					INTERACT
.3a25de	c2 30		rep #$30	            REP #$30
.3a25e0	a2 ff fe	ldx #$feff	                LDX #<>STACK_END
.3a25e3	9a		txs		                TXS
.3a25e4					ready_loop
.3a25e4	20 7e 25	jsr $3a257e	            JSR PRREADY
.3a25e7					no_ready_loop
.3a25e7	20 08 00	jsr $3a0008	            JSR READLINE
.3a25ea	20 0c 00	jsr $3a000c	            JSR SCRCOPYLINE
.3a25ed	a9 00 00	lda #$0000	                LDA #0              ; Hide the cursor
.3a25f0	20 1c 00	jsr $3a001c	            JSR SHOWCURSOR
.3a25f3	20 2f 25	jsr $3a252f	            JSR PREPROCESS
.3a25f6	20 ab 25	jsr $3a25ab	            JSR PROCESS
.3a25f9	b0 ec		bcs $3a25e7	                BCS no_ready_loop
.3a25fb	80 e7		bra $3a25e4	                BRA ready_loop
>3ad25b	0d 52 45 41 44 59 0d 00		MPROMPT         .null 13,"READY",13

;******  Return to file: src\basic816.s


;******  Processing file: src\operators.s

.3a25fd					OP_PLUS
.3a25fd	08		php		            PHP
.3a25fe	e2 20		sep #$20	            SEP #$20
.3a2600	20 55 07	jsr $3a0755	            JSR ASS_ARGS_NUMSTR
.3a2603	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2605	f0 2c		beq $3a2633	            BEQ is_integer
.3a2607	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2609	f0 2d		beq $3a2638	            BEQ is_float
.3a260b	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a260d	f0 1f		beq $3a262e	            BEQ is_string
.3a260f					type_error
.3a260f	08		php		            PHP
.3a2610	c2 20		rep #$20	            REP #$20
.3a2612	48		pha		            PHA
.3a2613	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2616	5b		tcd		            TCD
.3a2617	68		pla		            PLA
.3a2618	28		plp		            PLP
.3a2619	e2 20		sep #$20	            SEP #$20
.3a261b	a9 04		lda #$04	            LDA #ERR_TYPE
.3a261d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2621	c2 20		rep #$20	            REP #$20
.3a2623	29 ff 00	and #$00ff	            AND #$00FF
.3a2626	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2629	e2 20		sep #$20	            SEP #$20
.3a262b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a262e					is_string
.3a262e	20 de 14	jsr $3a14de	            JSR STRCONCAT
.3a2631	80 08		bra $3a263b	            BRA done
.3a2633					is_integer
.3a2633	20 a3 51	jsr $3a51a3	            JSR OP_INT_ADD
.3a2636	80 03		bra $3a263b	            BRA done
.3a2638					is_float
.3a2638	20 12 54	jsr $3a5412	            JSR OP_FP_ADD
.3a263b	28		plp		done        PLP
.3a263c	60		rts		            RTS
.3a263d					OP_MINUS
.3a263d	08		php		            PHP
.3a263e	e2 20		sep #$20	            SEP #$20
.3a2640	20 07 07	jsr $3a0707	            JSR ASS_ARGS_NUM
.3a2643	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2645	f0 23		beq $3a266a	            BEQ is_integer
.3a2647	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2649	f0 24		beq $3a266f	            BEQ is_float
.3a264b					type_error
.3a264b	08		php		            PHP
.3a264c	c2 20		rep #$20	            REP #$20
.3a264e	48		pha		            PHA
.3a264f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2652	5b		tcd		            TCD
.3a2653	68		pla		            PLA
.3a2654	28		plp		            PLP
.3a2655	e2 20		sep #$20	            SEP #$20
.3a2657	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2659	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a265d	c2 20		rep #$20	            REP #$20
.3a265f	29 ff 00	and #$00ff	            AND #$00FF
.3a2662	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2665	e2 20		sep #$20	            SEP #$20
.3a2667	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a266a					is_integer
.3a266a	20 b5 51	jsr $3a51b5	            JSR OP_INT_SUB
.3a266d	80 03		bra $3a2672	            BRA done
.3a266f					is_float
.3a266f	20 07 54	jsr $3a5407	            JSR OP_FP_SUB
.3a2672	28		plp		done        PLP
.3a2673	60		rts		            RTS
.3a2674					OP_MULTIPLY
.3a2674	08		php		            PHP
.3a2675	e2 20		sep #$20	            SEP #$20
.3a2677	20 07 07	jsr $3a0707	            JSR ASS_ARGS_NUM
.3a267a	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a267c	f0 23		beq $3a26a1	            BEQ is_integer
.3a267e	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2680	f0 24		beq $3a26a6	            BEQ is_float
.3a2682					type_error
.3a2682	08		php		            PHP
.3a2683	c2 20		rep #$20	            REP #$20
.3a2685	48		pha		            PHA
.3a2686	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2689	5b		tcd		            TCD
.3a268a	68		pla		            PLA
.3a268b	28		plp		            PLP
.3a268c	e2 20		sep #$20	            SEP #$20
.3a268e	a9 04		lda #$04	            LDA #ERR_TYPE
.3a2690	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2694	c2 20		rep #$20	            REP #$20
.3a2696	29 ff 00	and #$00ff	            AND #$00FF
.3a2699	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a269c	e2 20		sep #$20	            SEP #$20
.3a269e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a26a1					is_integer
.3a26a1	20 c7 51	jsr $3a51c7	            JSR OP_INT_MUL
.3a26a4	80 03		bra $3a26a9	            BRA done
.3a26a6					is_float
.3a26a6	20 a8 54	jsr $3a54a8	            JSR OP_FP_MUL
.3a26a9	28		plp		done        PLP
.3a26aa	60		rts		            RTS
.3a26ab					OP_DIVIDE
.3a26ab	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a26ae	20 a2 06	jsr $3a06a2	            JSR ASS_ARG2_FLOAT
.3a26b1	20 5d 54	jsr $3a545d	            JSR OP_FP_DIV
.3a26b4	60		rts		            RTS
.3a26b5					OP_MOD
.3a26b5	a5 23		lda $0823	            LDA ARGUMENT1
.3a26b7	8f 1a 01 00	sta $00011a	            STA @lD1_OPERAND_B
.3a26bb	a5 29		lda $0829	            LDA ARGUMENT2
.3a26bd	8f 18 01 00	sta $000118	            STA @lD1_OPERAND_A
.3a26c1	af 1e 01 00	lda $00011e	            LDA @lD1_REMAINDER
.3a26c5	85 23		sta $0823	            STA ARGUMENT1
.3a26c7	60		rts		            RTS
.3a26c8					OP_AND
.3a26c8	08		php		            PHP
.3a26c9	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a26cc	20 34 05	jsr $3a0534	            JSR ASS_ARG2_INT
.3a26cf	c2 20		rep #$20	            REP #$20
.3a26d1	a5 23		lda $0823	            LDA ARGUMENT1
.3a26d3	25 29		and $0829	            AND ARGUMENT2
.3a26d5	85 23		sta $0823	            STA ARGUMENT1
.3a26d7	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a26d9	25 2b		and $082b	            AND ARGUMENT2+2
.3a26db	85 25		sta $0825	            STA ARGUMENT1+2
.3a26dd	28		plp		            PLP
.3a26de	60		rts		            RTS
.3a26df					OP_OR
.3a26df	08		php		            PHP
.3a26e0	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a26e3	20 34 05	jsr $3a0534	            JSR ASS_ARG2_INT
.3a26e6	c2 20		rep #$20	            REP #$20
.3a26e8	a5 23		lda $0823	            LDA ARGUMENT1
.3a26ea	05 29		ora $0829	            ORA ARGUMENT2
.3a26ec	85 23		sta $0823	            STA ARGUMENT1
.3a26ee	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a26f0	05 2b		ora $082b	            ORA ARGUMENT2+2
.3a26f2	85 25		sta $0825	            STA ARGUMENT1+2
.3a26f4	28		plp		done        PLP
.3a26f5	60		rts		            RTS
.3a26f6					OP_NOT
.3a26f6	08		php		            PHP
.3a26f7	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a26fa	c2 20		rep #$20	            REP #$20
.3a26fc	a5 23		lda $0823	            LDA ARGUMENT1
.3a26fe	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a2701	85 23		sta $0823	            STA ARGUMENT1
.3a2703	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a2705	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a2708	85 25		sta $0825	            STA ARGUMENT1+2
.3a270a	28		plp		done        PLP
.3a270b	60		rts		            RTS
.3a270c					OP_LT
.3a270c	08		php		            PHP
.3a270d	e2 20		sep #$20	            SEP #$20
.3a270f	20 55 07	jsr $3a0755	            JSR ASS_ARGS_NUMSTR
.3a2712	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2714	f0 2c		beq $3a2742	            BEQ is_integer
.3a2716	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2718	f0 2d		beq $3a2747	            BEQ is_float
.3a271a	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a271c	f0 1f		beq $3a273d	            BEQ is_string
.3a271e					type_error
.3a271e	08		php		            PHP
.3a271f	c2 20		rep #$20	            REP #$20
.3a2721	48		pha		            PHA
.3a2722	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2725	5b		tcd		            TCD
.3a2726	68		pla		            PLA
.3a2727	28		plp		            PLP
.3a2728	e2 20		sep #$20	            SEP #$20
.3a272a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a272c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2730	c2 20		rep #$20	            REP #$20
.3a2732	29 ff 00	and #$00ff	            AND #$00FF
.3a2735	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2738	e2 20		sep #$20	            SEP #$20
.3a273a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a273d					is_string
.3a273d	20 66 16	jsr $3a1666	            JSR OP_STR_LT
.3a2740	80 08		bra $3a274a	            BRA done
.3a2742					is_integer
.3a2742	20 c8 52	jsr $3a52c8	            JSR OP_INT_LT
.3a2745	80 03		bra $3a274a	            BRA done
.3a2747					is_float
.3a2747	20 3d 5a	jsr $3a5a3d	            JSR OP_FP_LT
.3a274a	28		plp		done        PLP
.3a274b	60		rts		            RTS
.3a274c					OP_GT
.3a274c	08		php		            PHP
.3a274d	e2 20		sep #$20	            SEP #$20
.3a274f	20 55 07	jsr $3a0755	            JSR ASS_ARGS_NUMSTR
.3a2752	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2754	f0 2c		beq $3a2782	            BEQ is_integer
.3a2756	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2758	f0 2d		beq $3a2787	            BEQ is_float
.3a275a	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a275c	f0 1f		beq $3a277d	            BEQ is_string
.3a275e					type_error
.3a275e	08		php		            PHP
.3a275f	c2 20		rep #$20	            REP #$20
.3a2761	48		pha		            PHA
.3a2762	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2765	5b		tcd		            TCD
.3a2766	68		pla		            PLA
.3a2767	28		plp		            PLP
.3a2768	e2 20		sep #$20	            SEP #$20
.3a276a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a276c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2770	c2 20		rep #$20	            REP #$20
.3a2772	29 ff 00	and #$00ff	            AND #$00FF
.3a2775	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2778	e2 20		sep #$20	            SEP #$20
.3a277a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a277d					is_string
.3a277d	20 7d 16	jsr $3a167d	            JSR OP_STR_GT
.3a2780	80 08		bra $3a278a	            BRA done
.3a2782					is_integer
.3a2782	20 e9 52	jsr $3a52e9	            JSR OP_INT_GT
.3a2785	80 03		bra $3a278a	            BRA done
.3a2787					is_float
.3a2787	20 52 5a	jsr $3a5a52	            JSR OP_FP_GT
.3a278a	28		plp		done        PLP
.3a278b	60		rts		            RTS
.3a278c					OP_EQ
.3a278c	08		php		            PHP
.3a278d	e2 20		sep #$20	            SEP #$20
.3a278f	20 55 07	jsr $3a0755	            JSR ASS_ARGS_NUMSTR
.3a2792	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2794	f0 2c		beq $3a27c2	            BEQ is_integer
.3a2796	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2798	f0 2d		beq $3a27c7	            BEQ is_float
.3a279a	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a279c	f0 1f		beq $3a27bd	            BEQ is_string
.3a279e					type_error
.3a279e	08		php		            PHP
.3a279f	c2 20		rep #$20	            REP #$20
.3a27a1	48		pha		            PHA
.3a27a2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a27a5	5b		tcd		            TCD
.3a27a6	68		pla		            PLA
.3a27a7	28		plp		            PLP
.3a27a8	e2 20		sep #$20	            SEP #$20
.3a27aa	a9 04		lda #$04	            LDA #ERR_TYPE
.3a27ac	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a27b0	c2 20		rep #$20	            REP #$20
.3a27b2	29 ff 00	and #$00ff	            AND #$00FF
.3a27b5	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a27b8	e2 20		sep #$20	            SEP #$20
.3a27ba	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a27bd					is_string
.3a27bd	20 94 16	jsr $3a1694	            JSR OP_STR_EQ
.3a27c0	80 08		bra $3a27ca	            BRA done
.3a27c2					is_integer
.3a27c2	20 16 53	jsr $3a5316	            JSR OP_INT_EQ
.3a27c5	80 03		bra $3a27ca	            BRA done
.3a27c7					is_float
.3a27c7	20 67 5a	jsr $3a5a67	            JSR OP_FP_EQ
.3a27ca	28		plp		done        PLP
.3a27cb	60		rts		            RTS
.3a27cc					OP_NE
.3a27cc	08		php		            PHP
.3a27cd	e2 20		sep #$20	            SEP #$20
.3a27cf	20 55 07	jsr $3a0755	            JSR ASS_ARGS_NUMSTR
.3a27d2	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a27d4	f0 2c		beq $3a2802	            BEQ is_integer
.3a27d6	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a27d8	f0 2d		beq $3a2807	            BEQ is_float
.3a27da	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a27dc	f0 1f		beq $3a27fd	            BEQ is_string
.3a27de					type_error
.3a27de	08		php		            PHP
.3a27df	c2 20		rep #$20	            REP #$20
.3a27e1	48		pha		            PHA
.3a27e2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a27e5	5b		tcd		            TCD
.3a27e6	68		pla		            PLA
.3a27e7	28		plp		            PLP
.3a27e8	e2 20		sep #$20	            SEP #$20
.3a27ea	a9 04		lda #$04	            LDA #ERR_TYPE
.3a27ec	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a27f0	c2 20		rep #$20	            REP #$20
.3a27f2	29 ff 00	and #$00ff	            AND #$00FF
.3a27f5	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a27f8	e2 20		sep #$20	            SEP #$20
.3a27fa	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a27fd					is_string
.3a27fd	20 ab 16	jsr $3a16ab	            JSR OP_STR_NE
.3a2800	80 08		bra $3a280a	            BRA done
.3a2802					is_integer
.3a2802	20 34 53	jsr $3a5334	            JSR OP_INT_NE
.3a2805	80 03		bra $3a280a	            BRA done
.3a2807					is_float
.3a2807	20 a6 5a	jsr $3a5aa6	            JSR OP_FP_NE
.3a280a	28		plp		done        PLP
.3a280b	60		rts		            RTS
.3a280c					OP_GTE
.3a280c	08		php		            PHP
.3a280d	e2 20		sep #$20	            SEP #$20
.3a280f	20 55 07	jsr $3a0755	            JSR ASS_ARGS_NUMSTR
.3a2812	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2814	f0 2c		beq $3a2842	            BEQ is_integer
.3a2816	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2818	f0 2d		beq $3a2847	            BEQ is_float
.3a281a	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a281c	f0 1f		beq $3a283d	            BEQ is_string
.3a281e					type_error
.3a281e	08		php		            PHP
.3a281f	c2 20		rep #$20	            REP #$20
.3a2821	48		pha		            PHA
.3a2822	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2825	5b		tcd		            TCD
.3a2826	68		pla		            PLA
.3a2827	28		plp		            PLP
.3a2828	e2 20		sep #$20	            SEP #$20
.3a282a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a282c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2830	c2 20		rep #$20	            REP #$20
.3a2832	29 ff 00	and #$00ff	            AND #$00FF
.3a2835	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2838	e2 20		sep #$20	            SEP #$20
.3a283a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a283d					is_string
.3a283d	20 c2 16	jsr $3a16c2	            JSR OP_STR_GTE
.3a2840	80 08		bra $3a284a	            BRA done
.3a2842					is_integer
.3a2842	20 52 53	jsr $3a5352	            JSR OP_INT_GTE
.3a2845	80 03		bra $3a284a	            BRA done
.3a2847					is_float
.3a2847	20 91 5a	jsr $3a5a91	            JSR OP_FP_GTE
.3a284a	28		plp		done        PLP
.3a284b	60		rts		            RTS
.3a284c					OP_LTE
.3a284c	08		php		            PHP
.3a284d	e2 20		sep #$20	            SEP #$20
.3a284f	20 55 07	jsr $3a0755	            JSR ASS_ARGS_NUMSTR
.3a2852	c9 00		cmp #$00	            CMP #TYPE_INTEGER       ; And dispatch on the type
.3a2854	f0 2c		beq $3a2882	            BEQ is_integer
.3a2856	c9 01		cmp #$01	            CMP #TYPE_FLOAT
.3a2858	f0 2d		beq $3a2887	            BEQ is_float
.3a285a	c9 02		cmp #$02	            CMP #TYPE_STRING
.3a285c	f0 1f		beq $3a287d	            BEQ is_string
.3a285e					type_error
.3a285e	08		php		            PHP
.3a285f	c2 20		rep #$20	            REP #$20
.3a2861	48		pha		            PHA
.3a2862	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2865	5b		tcd		            TCD
.3a2866	68		pla		            PLA
.3a2867	28		plp		            PLP
.3a2868	e2 20		sep #$20	            SEP #$20
.3a286a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a286c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2870	c2 20		rep #$20	            REP #$20
.3a2872	29 ff 00	and #$00ff	            AND #$00FF
.3a2875	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2878	e2 20		sep #$20	            SEP #$20
.3a287a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a287d					is_string
.3a287d	20 d9 16	jsr $3a16d9	            JSR OP_STR_LTE
.3a2880	80 08		bra $3a288a	            BRA done
.3a2882					is_integer
.3a2882	20 7f 53	jsr $3a537f	            JSR OP_INT_LTE
.3a2885	80 03		bra $3a288a	            BRA done
.3a2887					is_float
.3a2887	20 7c 5a	jsr $3a5a7c	            JSR OP_FP_LTE
.3a288a	28		plp		done        PLP
.3a288b	60		rts		            RTS
.3a288c					OP_NEGATIVE
.3a288c	08		php		                PHP
.3a288d	e2 20		sep #$20	            SEP #$20
.3a288f	a5 27		lda $0827	                LDA ARGTYPE1                ; Check the type of the argument
.3a2891	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a2893	f0 2d		beq $3a28c2	                BEQ int_negate              ; If integer: negate the integer
.3a2895	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a2897	f0 1f		beq $3a28b8	                BEQ float_negate            ; If floating point: negate the floating point
.3a2899					type_error
.3a2899	08		php		            PHP
.3a289a	c2 20		rep #$20	            REP #$20
.3a289c	48		pha		            PHA
.3a289d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a28a0	5b		tcd		            TCD
.3a28a1	68		pla		            PLA
.3a28a2	28		plp		            PLP
.3a28a3	e2 20		sep #$20	            SEP #$20
.3a28a5	a9 04		lda #$04	            LDA #ERR_TYPE
.3a28a7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a28ab	c2 20		rep #$20	            REP #$20
.3a28ad	29 ff 00	and #$00ff	            AND #$00FF
.3a28b0	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a28b3	e2 20		sep #$20	            SEP #$20
.3a28b5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a28b8					float_negate
.3a28b8	e2 20		sep #$20	            SEP #$20
.3a28ba	a5 26		lda $0826	                LDA ARGUMENT1+3             ; Flip the sign bit of the floating point number
.3a28bc	49 80		eor #$80	                EOR #$80
.3a28be	85 26		sta $0826	                STA ARGUMENT1+3
.3a28c0	80 16		bra $3a28d8	                BRA done
.3a28c2					int_negate
.3a28c2	c2 20		rep #$20	            REP #$20
.3a28c4	a5 23		lda $0823	                LDA ARGUMENT1               ; Invert ARGUMENT1
.3a28c6	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a28c9	85 23		sta $0823	                STA ARGUMENT1
.3a28cb	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a28cd	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a28d0	85 25		sta $0825	                STA ARGUMENT1+2
.3a28d2	e6 23		inc $0823	                INC ARGUMENT1               ; And increment to get two's complement
.3a28d4	d0 02		bne $3a28d8	                BNE done
.3a28d6	e6 25		inc $0825	                INC ARGUMENT1+2
.3a28d8					done
.3a28d8	28		plp		                PLP
.3a28d9	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\statements.s


;******  Processing file: src\C256/statements_c256.s

=0					GR_LUT_BLUE = 0
=1					GR_LUT_GREEN = 1
=2					GR_LUT_RED = 2
=3					GR_LUT_ALPHA = 3
=640					GR_DEFAULT_COLS = 640               ; Default number of columns in the display
=480					GR_DEFAULT_ROWS = 480               ; Default number of rows in the display
=8					GR_MAX_LUT = 8                      ; The number of LUTs Vicky supports
=64					SP_MAX = 64                         ; The number of sprites Vicky supports
=8					SP_REG_SIZE = 8                     ; The number of bytes in a sprite's register block
=0					SP_CONTROL = 0                      ; Offset of the control regsiter for a sprite
=1					SP_ADDR = 1                         ; Offset of the pixmap address for a sprite
=4					SP_X_COORD = 4                      ; Offset of the X coordinate for a sprite
=6					SP_Y_COORD = 6                      ; Offset of the Y coordinate for a sprite
=12					TILEMAP_REG_SIZE = 12               ; The number of bytes in a tile map's register set
=4					TILESET_REG_SIZE = 4                ; The number of bytes in a tile set's register set
=2					BM_MAX = 2                          ; Maximum number of bitmaps we support
=$0040					MAX_VRAM_VICKY = $0040              ; Upper limit (exclusive) bank address for VRAM in Vicky address space
=$00f0					MAX_VRAM_CPU = $00F0                ; Upper limit (exclusive) bank address for VRAM in CPU address space
=$00b0					MIN_VRAM_CPU = $00B0                ; Lower limit (inclusive) bank address for VRAM in CPU address space
>3af000					GR_BM0_ADDR     .dword ?            ; Address of bitmap 0 (from CPU's perspective)
>3af004					GR_BM1_ADDR     .dword ?            ; Address of bitmap 1 (from CPU's perspective)
>3af008					GR_BM0_VRAM     .dword ?            ; Address of bitmap 0 (relative to start of VRAM)
>3af00c					GR_BM1_VRAM     .dword ?            ; Address of bitmap 1 (relative to start of VRAM)
>3af010					GR_MAX_COLS     .word ?             ; Width the display in pixels
>3af012					GR_MAX_ROWS     .word ?             ; Height of the display in pixels
>3af014					GR_TOTAL_PIXELS .word ?             ; Total number of pixels in the display
>3af016					GR_TEMP         .word ?             ; A temporary word for graphics commands
>3af018					GS_SP_CONTROL   .fill SP_MAX        ; Shadow registers for the sprite controls
.3a28da					S_SETTIME
.3a28da	08		php		                PHP
.3a28db	e2 20		sep #$20	            SEP #$20
.3a28dd	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a28e0	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a28e3	20 60 04	jsr $3a0460	            JSR DIVINT10
.3a28e6	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a28e8	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a28e9	0a		asl a		                ASL A
.3a28ea	0a		asl a		                ASL A
.3a28eb	0a		asl a		                ASL A
.3a28ec	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a28ee	48		pha		                PHA
.3a28ef	a9 2c		lda #$2c	                LDA #','
.3a28f1	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a28f4	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a28f7	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a28fa	20 60 04	jsr $3a0460	            JSR DIVINT10
.3a28fd	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a28ff	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2900	0a		asl a		                ASL A
.3a2901	0a		asl a		                ASL A
.3a2902	0a		asl a		                ASL A
.3a2903	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2905	48		pha		                PHA
.3a2906	a9 2c		lda #$2c	                LDA #','
.3a2908	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a290b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a290e	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2911	20 60 04	jsr $3a0460	            JSR DIVINT10
.3a2914	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2916	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2917	0a		asl a		                ASL A
.3a2918	0a		asl a		                ASL A
.3a2919	0a		asl a		                ASL A
.3a291a	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a291c	48		pha		                PHA
.3a291d	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a2921	09 0c		ora #$0c	                ORA #%00001100
.3a2923	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2927	68		pla		                PLA                     ; And seconds to the RTC
.3a2928	8f 00 08 af	sta $af0800	                STA @lRTC_SEC
.3a292c	68		pla		                PLA                     ; Minutes...
.3a292d	8f 02 08 af	sta $af0802	                STA @lRTC_MIN
.3a2931	68		pla		                PLA                     ; Save the hour...
.3a2932	8f 04 08 af	sta $af0804	                STA @lRTC_HRS
.3a2936	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a293a	29 f7		and #$f7	                AND #%11110111
.3a293c	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a2940	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a2943	28		plp		                PLP
.3a2944	60		rts		            RTS
.3a2945					S_SETDATE
.3a2945	08		php		                PHP
.3a2946	e2 20		sep #$20	            SEP #$20
.3a2948	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a294b	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a294e	20 60 04	jsr $3a0460	            JSR DIVINT10
.3a2951	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2953	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2954	0a		asl a		                ASL A
.3a2955	0a		asl a		                ASL A
.3a2956	0a		asl a		                ASL A
.3a2957	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2959	48		pha		                PHA
.3a295a	a9 2c		lda #$2c	                LDA #','
.3a295c	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a295f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2962	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2965	20 60 04	jsr $3a0460	            JSR DIVINT10
.3a2968	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a296a	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a296b	0a		asl a		                ASL A
.3a296c	0a		asl a		                ASL A
.3a296d	0a		asl a		                ASL A
.3a296e	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2970	48		pha		                PHA
.3a2971	a9 2c		lda #$2c	                LDA #','
.3a2973	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2976	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2979	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a297c	20 96 04	jsr $3a0496	            JSR DIVINT100
.3a297f	c2 20		rep #$20	            REP #$20
.3a2981	a5 23		lda $0823	                LDA ARGUMENT1           ; Get the century
.3a2983	85 92		sta $0892	                STA MTEMP               ; Save it in MTEMP
.3a2985	a5 29		lda $0829	                LDA ARGUMENT2           ; Separate the 10s from the 1s digits
.3a2987	85 23		sta $0823	                STA ARGUMENT1
.3a2989	20 60 04	jsr $3a0460	            JSR DIVINT10
.3a298c	e2 20		sep #$20	            SEP #$20
.3a298e	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a2990	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a2991	0a		asl a		                ASL A
.3a2992	0a		asl a		                ASL A
.3a2993	0a		asl a		                ASL A
.3a2994	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a2996	48		pha		                PHA                     ; Save the 10s and 1s in BCD
.3a2997	c2 20		rep #$20	            REP #$20
.3a2999	a5 92		lda $0892	                LDA MTEMP               ; Separate the 100s from the 1000s digits
.3a299b	85 23		sta $0823	                STA ARGUMENT1
.3a299d	20 60 04	jsr $3a0460	            JSR DIVINT10
.3a29a0	e2 20		sep #$20	            SEP #$20
.3a29a2	a5 23		lda $0823	                LDA ARGUMENT1           ; Take the tens digit
.3a29a4	0a		asl a		                ASL A                   ; Shift it 4 bits
.3a29a5	0a		asl a		                ASL A
.3a29a6	0a		asl a		                ASL A
.3a29a7	0a		asl a		                ASL A
.3a29a8	05 29		ora $0829	                ORA ARGUMENT2           ; And add in the ones digit
.3a29aa	48		pha		                PHA                     ; Save the 100s and 1000s in BCD
.3a29ab	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a29af	09 0c		ora #$0c	                ORA #%00001100
.3a29b1	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a29b5	68		pla		                PLA                     ; Set the century
.3a29b6	8f 0f 08 af	sta $af080f	                STA @lRTC_CENTURY
.3a29ba	68		pla		                PLA                     ; And year to the RTC
.3a29bb	8f 0a 08 af	sta $af080a	                STA @lRTC_YEAR
.3a29bf	68		pla		                PLA                     ; Month...
.3a29c0	8f 09 08 af	sta $af0809	                STA @lRTC_MONTH
.3a29c4	68		pla		                PLA                     ; Save the day...
.3a29c5	8f 06 08 af	sta $af0806	                STA @lRTC_DAY
.3a29c9	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a29cd	29 f7		and #$f7	                AND #%11110111
.3a29cf	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.3a29d3	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a29d6	28		plp		                PLP
.3a29d7	60		rts		            RTS
.3a29d8					S_TEXTCOLOR
.3a29d8	08		php		                PHP
.3a29d9					locals
>0001					L_FOREGROUND    .byte ?
.3a29d9	e2 20		sep #$20	            SEP #$20
.3a29db	48		pha		            PHA
.3a29dc	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a29df	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a29e2	e2 20		sep #$20	            SEP #$20
.3a29e4	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the foreground position
.3a29e6	29 0f		and #$0f	                AND #$0F
.3a29e8	0a		asl a		                ASL A
.3a29e9	0a		asl a		                ASL A
.3a29ea	0a		asl a		                ASL A
.3a29eb	0a		asl a		                ASL A
.3a29ec	83 01		sta $01,s	                STA L_FOREGROUND    ; Save the foreground color
.3a29ee	a9 2c		lda #$2c	                LDA #','
.3a29f0	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a29f3	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a29f6	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a29f9	a5 23		lda $0823	                LDA ARGUMENT1       ; Covert the color number to the background position
.3a29fb	29 0f		and #$0f	                AND #$0F
.3a29fd	03 01		ora $01,s	                ORA L_FOREGROUND    ; Add in the foreground
.3a29ff	8f 1e 00 00	sta $00001e	                STA @lCURCOLOR      ; And save the new color combination
.3a2a03	e2 20		sep #$20	            SEP #$20
.3a2a05	68		pla		            PLA
.3a2a06	28		plp		                PLP
.3a2a07	60		rts		            RTS
.3a2a08					S_SETBGCOLOR
.3a2a08	08		php		                PHP
.3a2a09					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.3a2a09	c2 20		rep #$20	            REP #$20
.3a2a0b	f4 00 00	pea #$0000	            PEA #0
.3a2a0e	e2 20		sep #$20	            SEP #$20
.3a2a10	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2a13	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2a16	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.3a2a18	83 01		sta $01,s	                STA L_RED
.3a2a1a	a9 2c		lda #$2c	                LDA #','
.3a2a1c	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2a1f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2a22	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2a25	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.3a2a27	83 02		sta $02,s	                STA L_GREEN
.3a2a29	a9 2c		lda #$2c	                LDA #','
.3a2a2b	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2a2e	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2a31	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2a34	a5 23		lda $0823	                LDA ARGUMENT1               ; And set the actual color
.3a2a36	8f 0d 00 af	sta $af000d	                STA @lBACKGROUND_COLOR_B
.3a2a3a	a3 02		lda $02,s	                LDA L_GREEN
.3a2a3c	8f 0e 00 af	sta $af000e	                STA @lBACKGROUND_COLOR_G
.3a2a40	a3 01		lda $01,s	                LDA L_RED
.3a2a42	8f 0f 00 af	sta $af000f	                STA @lBACKGROUND_COLOR_R
.3a2a46	c2 20		rep #$20	            REP #$20
.3a2a48	68		pla		            PLA
.3a2a49	28		plp		                PLP
.3a2a4a	60		rts		            RTS
.3a2a4b					S_SETBORDER
.3a2a4b	08		php		                PHP
.3a2a4c					locals
>0001					L_RED           .byte ?
>0002					L_GREEN         .byte ?
.3a2a4c	c2 20		rep #$20	            REP #$20
.3a2a4e	f4 00 00	pea #$0000	            PEA #0
.3a2a51	e2 20		sep #$20	            SEP #$20
.3a2a53	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2a56	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2a59	a5 23		lda $0823	                LDA ARGUMENT1
.3a2a5b	f0 16		beq $3a2a73	                BEQ hide_border
.3a2a5d	a9 01		lda #$01	                LDA #Border_Ctrl_Enable     ; Enable the border
.3a2a5f	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.3a2a63	a9 20		lda #$20	                LDA #BORDER_WIDTH           ; Set the border width
.3a2a65	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.3a2a69	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.3a2a6d	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2a71	80 0a		bra $3a2a7d	                BRA get_color
.3a2a73	a9 00		lda #$00	hide_border     LDA #0                      ; Hide the border
.3a2a75	8f 04 00 af	sta $af0004	                STA @lBORDER_CTRL_REG
.3a2a79	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2a7d	a9 2c		lda #$2c	get_color       LDA #','
.3a2a7f	85 37		sta $0837	                STA TARGETTOK
.3a2a81	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a2a84	90 39		bcc $3a2abf	                BCC done                    ; No: we're done
.3a2a86	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a2a89	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2a8c	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2a8f	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the red component to the stack
.3a2a91	83 01		sta $01,s	                STA L_RED
.3a2a93	a9 2c		lda #$2c	                LDA #','
.3a2a95	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2a98	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2a9b	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2a9e	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the green component to the stack
.3a2aa0	83 02		sta $02,s	                STA L_GREEN
.3a2aa2	a9 2c		lda #$2c	                LDA #','
.3a2aa4	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2aa7	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2aaa	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2aad	a5 23		lda $0823	                LDA ARGUMENT1
.3a2aaf	8f 05 00 af	sta $af0005	                STA @lBORDER_COLOR_B        ; Set the border color
.3a2ab3	a3 02		lda $02,s	                LDA L_GREEN
.3a2ab5	8f 06 00 af	sta $af0006	                STA @lBORDER_COLOR_G
.3a2ab9	a3 01		lda $01,s	                LDA L_RED
.3a2abb	8f 07 00 af	sta $af0007	                STA @lBORDER_COLOR_R
.3a2abf					done
.3a2abf	c2 20		rep #$20	            REP #$20
.3a2ac1	68		pla		            PLA
.3a2ac2	28		plp		                PLP
.3a2ac3	60		rts		            RTS
.3a2ac4					S_SETCOLOR
.3a2ac4	08		php		                PHP
.3a2ac5					locals
>0001					L_LUT           .byte ?
>0002					L_COLOR         .byte ?
>0003					L_RED           .byte ?
>0004					L_GREEN         .byte ?
>0005					L_BLUE          .byte ?
.3a2ac5	c2 20		rep #$20	            REP #$20
.3a2ac7	3b		tsc		            TSC
.3a2ac8	38		sec		            SEC
.3a2ac9	e9 05 00	sbc #$0005	            SBC #SIZE(locals)
.3a2acc	1b		tcs		            TCS
.3a2acd	e2 20		sep #$20	            SEP #$20
.3a2acf	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2ad2	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2ad5	a5 23		lda $0823	                LDA ARGUMENT1
.3a2ad7	c9 0a		cmp #$0a	                CMP #10             ; And in range
.3a2ad9	90 1f		bcc $3a2afa	                BLT save_lut
.3a2adb					bad_argument
.3a2adb	08		php		            PHP
.3a2adc	c2 20		rep #$20	            REP #$20
.3a2ade	48		pha		            PHA
.3a2adf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2ae2	5b		tcd		            TCD
.3a2ae3	68		pla		            PLA
.3a2ae4	28		plp		            PLP
.3a2ae5	e2 20		sep #$20	            SEP #$20
.3a2ae7	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a2ae9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2aed	c2 20		rep #$20	            REP #$20
.3a2aef	29 ff 00	and #$00ff	            AND #$00FF
.3a2af2	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2af5	e2 20		sep #$20	            SEP #$20
.3a2af7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2afa	83 01		sta $01,s	save_lut        STA L_LUT           ; Save as LUT
.3a2afc	a9 2c		lda #$2c	                LDA #','
.3a2afe	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2b01	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2b04	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2b07	a5 23		lda $0823	                LDA ARGUMENT1
.3a2b09	83 02		sta $02,s	                STA L_COLOR         ; Save as COLOR
.3a2b0b	a9 2c		lda #$2c	                LDA #','
.3a2b0d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2b10	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2b13	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2b16	a5 23		lda $0823	                LDA ARGUMENT1
.3a2b18	83 03		sta $03,s	                STA L_RED           ; Save as RED
.3a2b1a	a9 2c		lda #$2c	                LDA #','
.3a2b1c	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2b1f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2b22	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2b25	a5 23		lda $0823	                LDA ARGUMENT1
.3a2b27	83 04		sta $04,s	                STA L_GREEN         ; Save it as GREEN
.3a2b29	a9 2c		lda #$2c	                LDA #','
.3a2b2b	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2b2e	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2b31	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2b34	a5 23		lda $0823	                LDA ARGUMENT1
.3a2b36	83 05		sta $05,s	                STA L_BLUE          ; Save it as BLUE
.3a2b38	a9 af		lda #$af	                LDA #`GRPH_LUT0_PTR ; Get the bank Vicky is in (should always be $AF)
.3a2b3a	85 a0		sta $08a0	                STA MTEMPPTR+2      ; MTEMPPTR will be our pointer to the LUT entry
.3a2b3c	a3 01		lda $01,s	                LDA L_LUT           ; Compute the offset to the LUT address
.3a2b3e	0a		asl a		                ASL A
.3a2b3f	c2 20		rep #$20	            REP #$20
.3a2b41	29 ff 00	and #$00ff	                AND #$00FF
.3a2b44	aa		tax		                TAX                 ; Put it in X
.3a2b45	bf 7c 2b 3a	lda $3a2b7c,x	                LDA @llut_address,X ; Get the address of the LUT
.3a2b49	85 9e		sta $089e	                STA MTEMPPTR        ; Put it in MTEMPPTR
.3a2b4b	e2 20		sep #$20	            SEP #$20
.3a2b4d	a3 02		lda $02,s	                LDA L_COLOR         ; color index *= 4
.3a2b4f	c2 20		rep #$20	            REP #$20
.3a2b51	29 ff 00	and #$00ff	                AND #$00FF
.3a2b54	0a		asl a		                ASL A               ; Since each color has four bytes of data
.3a2b55	0a		asl a		                ASL A
.3a2b56	18		clc		                CLC                 ; Add the color offset to MTEMPPTR
.3a2b57	65 9e		adc $089e	                ADC MTEMPPTR
.3a2b59	85 9e		sta $089e	                STA MTEMPPTR
.3a2b5b	e2 20		sep #$20	            SEP #$20
.3a2b5d	a0 02 00	ldy #$0002	                LDY #GR_LUT_RED
.3a2b60	a3 03		lda $03,s	                LDA L_RED
.3a2b62	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the red component to the color entry
.3a2b64	a0 01 00	ldy #$0001	                LDY #GR_LUT_GREEN
.3a2b67	a3 04		lda $04,s	                LDA L_GREEN
.3a2b69	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the green component to the color entry
.3a2b6b	a0 00 00	ldy #$0000	                LDY #GR_LUT_BLUE
.3a2b6e	a3 05		lda $05,s	                LDA L_BLUE
.3a2b70	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y    ; Save the blue component to the color entry
.3a2b72					done
.3a2b72	c2 20		rep #$20	            REP #$20
.3a2b74	3b		tsc		            TSC
.3a2b75	18		clc		            CLC
.3a2b76	69 05 00	adc #$0005	            ADC #SIZE(locals)
.3a2b79	1b		tcs		            TCS
.3a2b7a	28		plp		                PLP
.3a2b7b	60		rts		            RTS
>3a2b7c	00 20				lut_address     .word <>GRPH_LUT0_PTR
>3a2b7e	00 24				                .word <>GRPH_LUT1_PTR
>3a2b80	00 28				                .word <>GRPH_LUT2_PTR
>3a2b82	00 2c				                .word <>GRPH_LUT3_PTR
>3a2b84	00 30				                .word <>GRPH_LUT4_PTR
>3a2b86	00 34				                .word <>GRPH_LUT5_PTR
>3a2b88	00 38				                .word <>GRPH_LUT6_PTR
>3a2b8a	00 3c				                .word <>GRPH_LUT7_PTR
>3a2b8c	40 1f				                .word <>FG_CHAR_LUT_PTR
>3a2b8e	80 1f				                .word <>BG_CHAR_LUT_PTR
.3a2b90					S_GRAPHICS
.3a2b90	da		phx		                PHX
.3a2b91	5a		phy		                PHY
.3a2b92	08		php		                PHP
.3a2b93	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2b96	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2b99	c2 20		rep #$20	            REP #$20
.3a2b9b	a5 23		lda $0823	                LDA ARGUMENT1               ; Check to see if we're setting mode to 800x600 or 400x300
.3a2b9d	89 00 01	bit #$0100	                BIT #$0100
.3a2ba0	d0 17		bne $3a2bb9	                BNE set_mode                ; Yes: go ahead and set it
.3a2ba2	af 00 00 af	lda $af0000	                LDA @l MASTER_CTRL_REG_L    ; Otherwise, check to see if we're already in 800x600 or 400x300
.3a2ba6	89 00 01	bit #$0100	                BIT #$0100
.3a2ba9	f0 0e		beq $3a2bb9	                BEQ set_mode                ; No: just go ahead and set the mode
.3a2bab	e2 20		sep #$20	            SEP #$20
.3a2bad	a9 00		lda #$00	                LDA #0                      ; Yes: toggle back to 640x480...
.3a2baf	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.3a2bb3	a9 01		lda #$01	                LDA #1                      ; And back to 800x600....
.3a2bb5	8f 01 00 af	sta $af0001	                STA @l MASTER_CTRL_REG_H
.3a2bb9					set_mode
.3a2bb9	c2 20		rep #$20	            REP #$20
.3a2bbb	a5 23		lda $0823	                LDA ARGUMENT1
.3a2bbd	8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L    ; Set the graphics mode
.3a2bc1	e2 20		sep #$20	            SEP #$20
.3a2bc3	a5 24		lda $0824	                LDA ARGUMENT1+1             ; Get the screen size bits
.3a2bc5	c2 20		rep #$20	            REP #$20
.3a2bc7	29 03 00	and #$0003	                AND #$0003
.3a2bca	0a		asl a		                ASL A                       ; Multiply by two to get the index
.3a2bcb	aa		tax		                TAX                         ; X is index into the size tables
.3a2bcc	c2 20		rep #$20	            REP #$20
.3a2bce	bf 17 2c 3a	lda $3a2c17,x	                LDA gr_columns,X            ; Set the columns
.3a2bd2	8f 10 f0 3a	sta $3af010	                STA @lGR_MAX_COLS
.3a2bd6	bf 1f 2c 3a	lda $3a2c1f,x	                LDA gr_rows,X               ; Set the rows
.3a2bda	8f 12 f0 3a	sta $3af012	                STA @lGR_MAX_ROWS
.3a2bde	af 10 f0 3a	lda $3af010	                LDA @lGR_MAX_COLS           ; Get the current columns
.3a2be2	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.3a2be6	af 12 f0 3a	lda $3af012	                LDA @lGR_MAX_ROWS           ; Get the current rows
.3a2bea	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B
.3a2bee	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT             ; Multiply them to get the total pixels
.3a2bf2	8f 14 f0 3a	sta $3af014	                STA @lGR_TOTAL_PIXELS
.3a2bf6	e2 20		sep #$20	            SEP #$20
.3a2bf8	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.3a2bfc	8f 16 f0 3a	sta $3af016	                STA @lGR_TOTAL_PIXELS+2
.3a2c00	22 2c 11 00	jsl $00112c	                JSL FK_SETSIZES
.3a2c04					reset_cursor
.3a2c04	c2 20		rep #$20	            REP #$20
.3a2c06	af 1a 00 00	lda $00001a	                LDA @lCURSORX
.3a2c0a	aa		tax		                TAX
.3a2c0b	af 1c 00 00	lda $00001c	                LDA @lCURSORY
.3a2c0f	a8		tay		                TAY
.3a2c10	20 20 00	jsr $3a0020	            JSR CURSORXY
.3a2c13	28		plp		                PLP
.3a2c14	7a		ply		                PLY
.3a2c15	fa		plx		                PLX
.3a2c16	60		rts		            RTS
>3a2c17	80 02 20 03 40 01 90 01		gr_columns      .word 640,800,320,400
>3a2c1f	e0 01 58 02 f0 00 2c 01		gr_rows         .word 480,600,240,300
>3a2c27	50 00 64 00 28 00 32 00		col_count       .word 80,100,40,50
>3a2c2f	3c 00 4b 00 1e 00 32 00		row_count       .word 60,75,30,50
>3a2c37	48 00 5c 00 20 00 2a 00		colb_count      .word 72,92,32,42
>3a2c3f	34 00 43 00 16 00 34 00		rowb_count      .word 52,67,22,52
.3a2c47					BITMAP_SRAM
.3a2c47	da		phx		                PHX
.3a2c48	08		php		                PHP
.3a2c49	c2 30		rep #$30	            REP #$30
.3a2c4b	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2c4e	b0 1c		bcs $3a2c6c	                BGE range_err           ; Make sure it's within range
.3a2c50	0a		asl a		                ASL A
.3a2c51	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.3a2c52	aa		tax		                TAX
.3a2c53	bf 00 f0 3a	lda $3af000,x	                LDA @l GR_BM0_ADDR,X    ; Get the low 16-bits of the address
.3a2c57	85 9e		sta $089e	                STA MTEMPPTR
.3a2c59	bf 02 f0 3a	lda $3af002,x	                LDA @l GR_BM0_ADDR+2,X  ; Get the high bits of the address
.3a2c5d	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a2c5f	c9 f0 00	cmp #$00f0	                CMP #MAX_VRAM_CPU       ; Check to make sure address is within VRAM
.3a2c62	b0 08		bcs $3a2c6c	                BGE range_err
.3a2c64	c9 b0 00	cmp #$00b0	                CMP #MIN_VRAM_CPU
.3a2c67	90 03		bcc $3a2c6c	                BLT range_err
.3a2c69	28		plp		                PLP
.3a2c6a	fa		plx		                PLX
.3a2c6b	60		rts		            RTS
.3a2c6c					range_err
.3a2c6c	08		php		            PHP
.3a2c6d	c2 20		rep #$20	            REP #$20
.3a2c6f	48		pha		            PHA
.3a2c70	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2c73	5b		tcd		            TCD
.3a2c74	68		pla		            PLA
.3a2c75	28		plp		            PLP
.3a2c76	e2 20		sep #$20	            SEP #$20
.3a2c78	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2c7a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2c7e	c2 20		rep #$20	            REP #$20
.3a2c80	29 ff 00	and #$00ff	            AND #$00FF
.3a2c83	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2c86	e2 20		sep #$20	            SEP #$20
.3a2c88	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2c8b					BITMAP_VRAM
.3a2c8b	da		phx		                PHX
.3a2c8c	08		php		                PHP
.3a2c8d	c2 30		rep #$30	            REP #$30
.3a2c8f	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2c92	b0 17		bcs $3a2cab	                BGE range_err           ; Make sure it's within range
.3a2c94	0a		asl a		                ASL A
.3a2c95	0a		asl a		                ASL A                   ; Multiply by 4 to calculate an address offset
.3a2c96	aa		tax		                TAX
.3a2c97	bf 08 f0 3a	lda $3af008,x	                LDA @l GR_BM0_VRAM,X    ; Get the low 16-bits of the address
.3a2c9b	85 9e		sta $089e	                STA MTEMPPTR
.3a2c9d	bf 0a f0 3a	lda $3af00a,x	                LDA @l GR_BM0_VRAM+2,X  ; Get the high bits of the address
.3a2ca1	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a2ca3	c9 40 00	cmp #$0040	                CMP #MAX_VRAM_VICKY     ; Check to make sure the address is from $00:0000 - $3F:FFFF
.3a2ca6	b0 03		bcs $3a2cab	                BGE range_err           ; If not, throw a range error
.3a2ca8	28		plp		                PLP
.3a2ca9	fa		plx		                PLX
.3a2caa	60		rts		            RTS
.3a2cab					range_err
.3a2cab	08		php		            PHP
.3a2cac	c2 20		rep #$20	            REP #$20
.3a2cae	48		pha		            PHA
.3a2caf	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2cb2	5b		tcd		            TCD
.3a2cb3	68		pla		            PLA
.3a2cb4	28		plp		            PLP
.3a2cb5	e2 20		sep #$20	            SEP #$20
.3a2cb7	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2cb9	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2cbd	c2 20		rep #$20	            REP #$20
.3a2cbf	29 ff 00	and #$00ff	            AND #$00FF
.3a2cc2	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2cc5	e2 20		sep #$20	            SEP #$20
.3a2cc7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2cca					S_BITMAP
.3a2cca	08		php		                PHP
.3a2ccb					locals
>0001					L_PLANE         .word ?
>0003					L_VISIBLE       .byte ?
>0004					L_ADDRESS       .dword ?
.3a2ccb	c2 30		rep #$30	            REP #$30
.3a2ccd	3b		tsc		                TSC                         ; Allocate space for the locals on the stack
.3a2cce	38		sec		                SEC
.3a2ccf	e9 07 00	sbc #$0007	                SBC #SIZE(locals)
.3a2cd2	1b		tcs		                TCS
.3a2cd3	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2cd6	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2cd9	c2 20		rep #$20	            REP #$20
.3a2cdb	a5 23		lda $0823	                LDA ARGUMENT1               ; Make sure it's in range
.3a2cdd	c9 02 00	cmp #$0002	                CMP #BM_MAX
.3a2ce0	b0 59		bcs $3a2d3b	                BGE range_err               ; If not, throw an error
.3a2ce2	83 01		sta $01,s	                STA L_PLANE                 ; If so, save it to MARG1
.3a2ce4	e2 20		sep #$20	            SEP #$20
.3a2ce6	a9 2c		lda #$2c	                LDA #','
.3a2ce8	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2ceb	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2cee	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2cf1	a5 23		lda $0823	                LDA ARGUMENT1
.3a2cf3	83 03		sta $03,s	                STA L_VISIBLE
.3a2cf5	a9 2c		lda #$2c	                LDA #','
.3a2cf7	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2cfa	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2cfd	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2d00	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the number back
.3a2d02	0a		asl a		                ASL A                       ; Multiply by 8 to get the offset to the registers
.3a2d03	0a		asl a		                ASL A
.3a2d04	0a		asl a		                ASL A
.3a2d05	aa		tax		                TAX                         ; And save that offset to X
.3a2d06	a3 03		lda $03,s	                LDA L_VISIBLE               ; Check the visible flag
.3a2d08	d0 05		bne $3a2d0f	                BNE is_visible              ; If <> 0, it's visible
.3a2d0a	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the LUT #
.3a2d0c	0a		asl a		                ASL A                       ; Shift it into position for the register
.3a2d0d	80 04		bra $3a2d13	                BRA wr_bm_reg               ; And go to write it
.3a2d0f	a5 23		lda $0823	is_visible      LDA ARGUMENT1               ; Get the LUT #
.3a2d11	38		sec		                SEC
.3a2d12	2a		rol a		                ROL A                       ; And shift it into position, and set enable bit
.3a2d13	9f 00 01 af	sta $af0100,x	wr_bm_reg       STA @l BM0_CONTROL_REG,X    ; Write to the bitmap control register
.3a2d17	c2 20		rep #$20	            REP #$20
.3a2d19	a9 2c 00	lda #$002c	                LDA #','
.3a2d1c	85 37		sta $0837	                STA TARGETTOK
.3a2d1e	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a2d21	b0 37		bcs $3a2d5a	                BCS get_address             ; Yes: parse the address
.3a2d23	c2 20		rep #$20	            REP #$20
.3a2d25	08		php		            PHP
.3a2d26	c2 20		rep #$20	            REP #$20
.3a2d28	a9 00 00	lda #$0000	            LDA #<>VRAM
.3a2d2b	85 23		sta $0823	            STA ARGUMENT1
.3a2d2d	a9 b0 00	lda #$00b0	            LDA #(VRAM >> 16)
.3a2d30	85 25		sta $0825	            STA ARGUMENT1+2
.3a2d32	e2 20		sep #$20	            SEP #$20
.3a2d34	a9 00		lda #$00	            LDA #TYPE_INTEGER
.3a2d36	85 27		sta $0827	            STA ARGUMENT1+4
.3a2d38	28		plp		            PLP
.3a2d39	80 27		bra $3a2d62	                BRA set_address
.3a2d3b					range_err
.3a2d3b	08		php		            PHP
.3a2d3c	c2 20		rep #$20	            REP #$20
.3a2d3e	48		pha		            PHA
.3a2d3f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2d42	5b		tcd		            TCD
.3a2d43	68		pla		            PLA
.3a2d44	28		plp		            PLP
.3a2d45	e2 20		sep #$20	            SEP #$20
.3a2d47	a9 09		lda #$09	            LDA #ERR_RANGE
.3a2d49	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2d4d	c2 20		rep #$20	            REP #$20
.3a2d4f	29 ff 00	and #$00ff	            AND #$00FF
.3a2d52	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2d55	e2 20		sep #$20	            SEP #$20
.3a2d57	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2d5a					get_address
.3a2d5a	c2 20		rep #$20	            REP #$20
.3a2d5c	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a2d5f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2d62					set_address
.3a2d62	c2 20		rep #$20	            REP #$20
.3a2d64	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.3a2d66	0a		asl a		                ASL A                       ; Multiply by four to get the offset to the address variable
.3a2d67	0a		asl a		                ASL A
.3a2d68	aa		tax		                TAX                         ; And put it in X
.3a2d69	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the CPU-space address
.3a2d6b	9f 00 f0 3a	sta $3af000,x	                STA @l GR_BM0_ADDR,X        ; And save it to the correct GR_BM?_ADDR variable
.3a2d6f	9f 08 f0 3a	sta $3af008,x	                STA @l GR_BM0_VRAM,X
.3a2d73	83 04		sta $04,s	                STA L_ADDRESS               ; And L_ADDRESS, temporarily
.3a2d75	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a2d77	9f 02 f0 3a	sta $3af002,x	                STA @l GR_BM0_ADDR+2,X
.3a2d7b	38		sec		                SEC
.3a2d7c	e9 b0 00	sbc #$00b0	                SBC #`VRAM                  ; Rebase the upper half of the address to Vicky memory space
.3a2d7f	9f 0a f0 3a	sta $3af00a,x	                STA @l GR_BM0_VRAM+2,X
.3a2d83	83 06		sta $06,s	                STA L_ADDRESS+2             ; And to L_ADDRESS
.3a2d85	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap number back
.3a2d87	0a		asl a		                ASL A                       ; Multiply by eight to get the offset to the registers
.3a2d88	0a		asl a		                ASL A
.3a2d89	0a		asl a		                ASL A
.3a2d8a	aa		tax		                TAX                         ; And put it in X
.3a2d8b	e2 20		sep #$20	            SEP #$20
.3a2d8d	a3 04		lda $04,s	                LDA L_ADDRESS               ; Get the address in Vicky space...
.3a2d8f	9f 01 01 af	sta $af0101,x	                STA @l BM0_START_ADDY_L,X   ; Save it to the Vicky registers
.3a2d93	a3 05		lda $05,s	                LDA L_ADDRESS+1
.3a2d95	9f 02 01 af	sta $af0102,x	                STA @l BM0_START_ADDY_M,X
.3a2d99	a3 06		lda $06,s	                LDA L_ADDRESS+2
.3a2d9b	9f 03 01 af	sta $af0103,x	                STA @l BM0_START_ADDY_H,X
.3a2d9f	a9 00		lda #$00	                LDA #0                      ; Default offset to (0, 0)
.3a2da1	9f 04 01 af	sta $af0104,x	                STA @l BM0_X_OFFSET,X
.3a2da5	9f 05 01 af	sta $af0105,x	                STA @l BM0_Y_OFFSET,X
.3a2da9	c2 30		rep #$30	            REP #$30
.3a2dab	3b		tsc		                TSC                         ; Remove the space for the locals from the stack
.3a2dac	18		clc		                CLC
.3a2dad	69 07 00	adc #$0007	                ADC #SIZE(locals)
.3a2db0	1b		tcs		                TCS
.3a2db1	28		plp		                PLP
.3a2db2	60		rts		            RTS
.3a2db3					bad_address
.3a2db3	08		php		            PHP
.3a2db4	c2 20		rep #$20	            REP #$20
.3a2db6	48		pha		            PHA
.3a2db7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2dba	5b		tcd		            TCD
.3a2dbb	68		pla		            PLA
.3a2dbc	28		plp		            PLP
.3a2dbd	e2 20		sep #$20	            SEP #$20
.3a2dbf	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a2dc1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a2dc5	c2 20		rep #$20	            REP #$20
.3a2dc7	29 ff 00	and #$00ff	            AND #$00FF
.3a2dca	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a2dcd	e2 20		sep #$20	            SEP #$20
.3a2dcf	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a2dd2					S_CLRBITMAP
.3a2dd2	08		php		                PHP
.3a2dd3	c2 20		rep #$20	            REP #$20
.3a2dd5	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2dd8	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2ddb	a5 23		lda $0823	                LDA ARGUMENT1
.3a2ddd	20 8b 2c	jsr $3a2c8b	            JSR BITMAP_VRAM
.3a2de0	c2 20		rep #$20	            REP #$20
.3a2de2	a5 9e		lda $089e	                LDA MTEMPPTR                ; Set the start address and the # of pixels to write
.3a2de4	8f 05 04 af	sta $af0405	                STA @lVDMA_DST_ADDY_L
.3a2de8	af 14 f0 3a	lda $3af014	                LDA @lGR_TOTAL_PIXELS       ; Set the size
.3a2dec	8f 08 04 af	sta $af0408	                STA @lVDMA_SIZE_L
.3a2df0	e2 20		sep #$20	            SEP #$20
.3a2df2	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.3a2df4	8f 07 04 af	sta $af0407	                STA @lVDMA_DST_ADDY_H
.3a2df8	af 16 f0 3a	lda $3af016	                LDA @lGR_TOTAL_PIXELS+2
.3a2dfc	8f 0a 04 af	sta $af040a	                STA @lVDMA_SIZE_H
.3a2e00	a9 00		lda #$00	                LDA #0                      ; Set the color to write
.3a2e02	8f 01 04 af	sta $af0401	                STA @lVDMA_BYTE_2_WRITE
.3a2e06	a9 85		lda #$85	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_Start_TRF
.3a2e08	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.3a2e0c	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.3a2e10	30 fa		bmi $3a2e0c	                BMI wait
.3a2e12	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.3a2e14	8f 00 04 af	sta $af0400	                STA @lVDMA_CONTROL_REG
.3a2e18	28		plp		done            PLP
.3a2e19	60		rts		            RTS
=$000855				COLOR = MARG1
=$000859				X0 = MARG2
=$00085d				Y0 = MARG3
=$000861				X1 = MARG4
=$000865				Y1 = MARG5
=$000869				DX = MARG6
=$00086d				DY = MARG7
=$000871				ERR = MARG8
=$000875				ERR2 = MARG9
>08dd					SX      .word ?
>08df					SY      .word ?
.3a2e1a					PLOT
.3a2e1a	08		php		                PHP
.3a2e1b	c2 20		rep #$20	            REP #$20
.3a2e1d	a5 5d		lda $085d	                LDA Y0                      ; Get the row
.3a2e1f	8f 08 01 00	sta $000108	                STA @lM1_OPERAND_A
.3a2e23	af 10 f0 3a	lda $3af010	                LDA @lGR_MAX_COLS
.3a2e27	8f 0a 01 00	sta $00010a	                STA @lM1_OPERAND_B          ; Multiply by the number of columns in the pixmap
.3a2e2b	18		clc		                CLC                         ; Add the column
.3a2e2c	af 0c 01 00	lda $00010c	                LDA @lM1_RESULT
.3a2e30	65 59		adc $0859	                ADC X0
.3a2e32	85 0c		sta $080c	                STA SCRATCH
.3a2e34	af 0e 01 00	lda $00010e	                LDA @lM1_RESULT+2
.3a2e38	69 00 00	adc #$0000	                ADC #0
.3a2e3b	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH is offset of pixel in the pixmap
.3a2e3d	18		clc		                CLC                         ; Add the address of the first pixel
.3a2e3e	a5 0c		lda $080c	                LDA SCRATCH
.3a2e40	65 9e		adc $089e	                ADC MTEMPPTR
.3a2e42	85 0c		sta $080c	                STA SCRATCH
.3a2e44	a5 0e		lda $080e	                LDA SCRATCH+2
.3a2e46	65 a0		adc $08a0	                ADC MTEMPPTR+2
.3a2e48	85 0e		sta $080e	                STA SCRATCH+2               ; SCRATCH := pixmap + pixel offset
.3a2e4a	e2 20		sep #$20	            SEP #$20
.3a2e4c	a5 55		lda $0855	                LDA COLOR                   ; Get the color
.3a2e4e	87 0c		sta [$080c]	                STA [SCRATCH]               ; And write the color to the pixel
.3a2e50	28		plp		                PLP
.3a2e51	60		rts		            RTS
.3a2e52					LINE
.3a2e52	c2 20		rep #$20	            REP #$20
.3a2e54	a9 01 00	lda #$0001	                LDA #1                      ; Assume SX = 1
.3a2e57	85 dd		sta $08dd	                STA SX
.3a2e59	38		sec		                SEC                         ; DX := ABS(X1 - X0)
.3a2e5a	a5 61		lda $0861	                LDA X1
.3a2e5c	e5 59		sbc $0859	                SBC X0
.3a2e5e	85 69		sta $0869	                STA DX
.3a2e60	10 0b		bpl $3a2e6d	                BPL abs_Y                   ; If DX < 0 {
.3a2e62	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DX := -DX
.3a2e65	1a		inc a		                INC A
.3a2e66	85 69		sta $0869	                STA DX
.3a2e68	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SX := -1
.3a2e6b	85 dd		sta $08dd	                STA SX                      ; }
.3a2e6d	a9 01 00	lda #$0001	abs_Y           LDA #1                      ; Assume SY = 1
.3a2e70	85 df		sta $08df	                STA SY
.3a2e72	38		sec		                SEC                         ; DY := ABS(Y1 - Y0)
.3a2e73	a5 65		lda $0865	                LDA Y1
.3a2e75	e5 5d		sbc $085d	                SBC Y0
.3a2e77	85 6d		sta $086d	                STA DY
.3a2e79	10 0b		bpl $3a2e86	                BPL calc_ERR                ; If DY < 0 {
.3a2e7b	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; DY := -DY
.3a2e7e	1a		inc a		                INC A
.3a2e7f	85 6d		sta $086d	                STA DY
.3a2e81	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; SY := -1
.3a2e84	85 df		sta $08df	                STA SY                      ; }
.3a2e86	a5 6d		lda $086d	calc_ERR        LDA DY                      ; (DY < DX)
.3a2e88	c5 69		cmp $0869	                CMP DX
.3a2e8a	b0 04		bcs $3a2e90	                BGE else
.3a2e8c	a5 69		lda $0869	                LDA DX                      ; TRUE CASE: ERR := DX
.3a2e8e	80 06		bra $3a2e96	                BRA shiftERR
.3a2e90	a5 6d		lda $086d	else            LDA DY                      ; FALSE CASE: ERR := -DY
.3a2e92	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a2e95	1a		inc a		                INC A
.3a2e96	48		pha		shiftERR        PHA
.3a2e97	0a		asl a		                ASL A
.3a2e98	68		pla		                PLA
.3a2e99	6a		ror a		                ROR A                       ; ERR := ERR / 2
.3a2e9a	85 71		sta $0871	                STA ERR
.3a2e9c					loop
.3a2e9c	20 1a 2e	jsr $3a2e1a	            JSR PLOT
.3a2e9f	a5 59		lda $0859	                LDA X0                      ; break if X0=X1 and Y0=Y1
.3a2ea1	c5 61		cmp $0861	                CMP X1
.3a2ea3	d0 06		bne $3a2eab	                BNE calc_ERR2
.3a2ea5	a5 5d		lda $085d	                LDA Y0
.3a2ea7	c5 65		cmp $0865	                CMP Y1
.3a2ea9	f0 36		beq $3a2ee1	                BEQ done
.3a2eab	a5 71		lda $0871	calc_ERR2       LDA ERR                     ; ERR2 := ERR
.3a2ead	85 75		sta $0875	                STA ERR2
.3a2eaf	a5 69		lda $0869	                LDA DX                      ; if (ERR2 > -DX) {
.3a2eb1	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a2eb4	1a		inc a		                INC A
.3a2eb5	c5 75		cmp $0875	                CMP ERR2
.3a2eb7	10 10		bpl $3a2ec9	                BPL check_DY
.3a2eb9	f0 0e		beq $3a2ec9	                BEQ check_DY
.3a2ebb	38		sec		                SEC                         ; ERR -= DY
.3a2ebc	a5 71		lda $0871	                LDA ERR
.3a2ebe	e5 6d		sbc $086d	                SBC DY
.3a2ec0	85 71		sta $0871	                STA ERR
.3a2ec2	18		clc		                CLC                         ; X0 += SX
.3a2ec3	a5 59		lda $0859	                LDA X0
.3a2ec5	65 dd		adc $08dd	                ADC SX
.3a2ec7	85 59		sta $0859	                STA X0                      ; }
.3a2ec9	a5 75		lda $0875	check_DY        LDA ERR2                    ; if (ERR2 < DY) {
.3a2ecb	c5 6d		cmp $086d	                CMP DY
.3a2ecd	10 cd		bpl $3a2e9c	                BPL loop
.3a2ecf	f0 cb		beq $3a2e9c	                BEQ loop
.3a2ed1	18		clc		                CLC                         ; ERR += DX
.3a2ed2	a5 71		lda $0871	                LDA ERR
.3a2ed4	65 69		adc $0869	                ADC DX
.3a2ed6	85 71		sta $0871	                STA ERR
.3a2ed8	18		clc		                CLC                         ; Y0 += SY
.3a2ed9	a5 5d		lda $085d	                LDA Y0
.3a2edb	65 df		adc $08df	                ADC SY
.3a2edd	85 5d		sta $085d	                STA Y0                      ; }
.3a2edf	80 bb		bra $3a2e9c	                BRA loop                    ; }
.3a2ee1					done
.3a2ee1	60		rts		            RTS
.3a2ee2					S_PLOT
.3a2ee2	08		php		                PHP
.3a2ee3					locals
>0001					L_PLANE         .word ?
>0003					L_X             .word ?
>0005					L_Y             .word ?
.3a2ee3	c2 20		rep #$20	            REP #$20
.3a2ee5	3b		tsc		            TSC
.3a2ee6	38		sec		            SEC
.3a2ee7	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a2eea	1b		tcs		            TCS
.3a2eeb	08		php		            PHP
.3a2eec	c2 20		rep #$20	            REP #$20
.3a2eee	48		pha		            PHA
.3a2eef	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2ef2	5b		tcd		            TCD
.3a2ef3	68		pla		            PLA
.3a2ef4	28		plp		            PLP
.3a2ef5	08		php		            PHP
.3a2ef6	e2 20		sep #$20	            SEP #$20
.3a2ef8	48		pha		            PHA
.3a2ef9	a9 00		lda #$00	            LDA #0
.3a2efb	48		pha		            PHA
.3a2efc	ab		plb		            PLB
.3a2efd	68		pla		            PLA
.3a2efe	28		plp		            PLP
.3a2eff	c2 30		rep #$30	            REP #$30
.3a2f01	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2f04	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2f07	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a2f09	a9 2c 00	lda #$002c	                LDA #','
.3a2f0c	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2f0f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2f12	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2f15	a5 23		lda $0823	                LDA ARGUMENT1
.3a2f17	83 03		sta $03,s	                STA L_X                     ; Save it to X
.3a2f19	a9 2c 00	lda #$002c	                LDA #','
.3a2f1c	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2f1f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2f22	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2f25	a5 23		lda $0823	                LDA ARGUMENT1
.3a2f27	83 05		sta $05,s	                STA L_Y                     ; Save it to Y
.3a2f29	a9 2c 00	lda #$002c	                LDA #','
.3a2f2c	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2f2f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2f32	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2f35	a5 23		lda $0823	                LDA ARGUMENT1
.3a2f37	85 55		sta $0855	                STA COLOR                   ; Save it to MARG1
.3a2f39	a3 03		lda $03,s	                LDA L_X                     ; Set the (X0, Y0) coordinates
.3a2f3b	85 59		sta $0859	                STA X0
.3a2f3d	a3 05		lda $05,s	                LDA L_Y
.3a2f3f	85 5d		sta $085d	                STA Y0
.3a2f41	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a2f43	20 47 2c	jsr $3a2c47	            JSR BITMAP_SRAM
.3a2f46	20 1a 2e	jsr $3a2e1a	            JSR PLOT
.3a2f49	c2 20		rep #$20	            REP #$20
.3a2f4b	3b		tsc		            TSC
.3a2f4c	18		clc		            CLC
.3a2f4d	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a2f50	1b		tcs		            TCS
.3a2f51	28		plp		                PLP
.3a2f52	60		rts		            RTS
.3a2f53					S_LINE
.3a2f53	08		php		                PHP
.3a2f54					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
.3a2f54	c2 20		rep #$20	            REP #$20
.3a2f56	3b		tsc		            TSC
.3a2f57	38		sec		            SEC
.3a2f58	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.3a2f5b	1b		tcs		            TCS
.3a2f5c	08		php		            PHP
.3a2f5d	c2 20		rep #$20	            REP #$20
.3a2f5f	48		pha		            PHA
.3a2f60	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2f63	5b		tcd		            TCD
.3a2f64	68		pla		            PLA
.3a2f65	28		plp		            PLP
.3a2f66	08		php		            PHP
.3a2f67	e2 20		sep #$20	            SEP #$20
.3a2f69	48		pha		            PHA
.3a2f6a	a9 00		lda #$00	            LDA #0
.3a2f6c	48		pha		            PHA
.3a2f6d	ab		plb		            PLB
.3a2f6e	68		pla		            PLA
.3a2f6f	28		plp		            PLP
.3a2f70	c2 30		rep #$30	            REP #$30
.3a2f72	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2f75	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2f78	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a2f7a	a9 2c 00	lda #$002c	                LDA #','
.3a2f7d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2f80	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2f83	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2f86	a5 23		lda $0823	                LDA ARGUMENT1
.3a2f88	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.3a2f8a	a9 2c 00	lda #$002c	                LDA #','
.3a2f8d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2f90	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2f93	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2f96	a5 23		lda $0823	                LDA ARGUMENT1
.3a2f98	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.3a2f9a	a9 2c 00	lda #$002c	                LDA #','
.3a2f9d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2fa0	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2fa3	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2fa6	a5 23		lda $0823	                LDA ARGUMENT1
.3a2fa8	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.3a2faa	a9 2c 00	lda #$002c	                LDA #','
.3a2fad	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2fb0	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2fb3	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a2fb6	a5 23		lda $0823	                LDA ARGUMENT1
.3a2fb8	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.3a2fba	a9 2c 00	lda #$002c	                LDA #','
.3a2fbd	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a2fc0	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a2fc3	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a2fc6	a5 23		lda $0823	                LDA ARGUMENT1
.3a2fc8	85 55		sta $0855	                STA COLOR                   ; Save it to COLOR
.3a2fca	a3 03		lda $03,s	                LDA L_X0                    ; Set the (X0, Y0) coordinates
.3a2fcc	85 59		sta $0859	                STA X0
.3a2fce	a3 05		lda $05,s	                LDA L_Y0
.3a2fd0	85 5d		sta $085d	                STA Y0
.3a2fd2	a3 07		lda $07,s	                LDA L_X1                    ; Set the (X1, Y1) coordinates
.3a2fd4	85 61		sta $0861	                STA X1
.3a2fd6	a3 09		lda $09,s	                LDA L_Y1
.3a2fd8	85 65		sta $0865	                STA Y1
.3a2fda	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a2fdc	20 47 2c	jsr $3a2c47	            JSR BITMAP_SRAM
.3a2fdf	20 52 2e	jsr $3a2e52	            JSR LINE
.3a2fe2					done
.3a2fe2	c2 20		rep #$20	            REP #$20
.3a2fe4	3b		tsc		            TSC
.3a2fe5	18		clc		            CLC
.3a2fe6	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.3a2fe9	1b		tcs		            TCS
.3a2fea	28		plp		                PLP
.3a2feb	60		rts		            RTS
.3a2fec					S_FILL
.3a2fec	08		php		                PHP
.3a2fed					locals
>0001					L_PLANE         .word ?
>0003					L_X0            .word ?
>0005					L_Y0            .word ?
>0007					L_X1            .word ?
>0009					L_Y1            .word ?
>000b					L_COLOR         .word ?
.3a2fed	c2 20		rep #$20	            REP #$20
.3a2fef	3b		tsc		            TSC
.3a2ff0	38		sec		            SEC
.3a2ff1	e9 0c 00	sbc #$000c	            SBC #SIZE(locals)
.3a2ff4	1b		tcs		            TCS
.3a2ff5	08		php		            PHP
.3a2ff6	c2 20		rep #$20	            REP #$20
.3a2ff8	48		pha		            PHA
.3a2ff9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a2ffc	5b		tcd		            TCD
.3a2ffd	68		pla		            PLA
.3a2ffe	28		plp		            PLP
.3a2fff	08		php		            PHP
.3a3000	e2 20		sep #$20	            SEP #$20
.3a3002	48		pha		            PHA
.3a3003	a9 00		lda #$00	            LDA #0
.3a3005	48		pha		            PHA
.3a3006	ab		plb		            PLB
.3a3007	68		pla		            PLA
.3a3008	28		plp		            PLP
.3a3009	c2 30		rep #$30	            REP #$30
.3a300b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a300e	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3011	83 01		sta $01,s	                STA L_PLANE                 ; Save it as the plane
.3a3013	a9 2c 00	lda #$002c	                LDA #','
.3a3016	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3019	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a301c	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a301f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3021	83 03		sta $03,s	                STA L_X0                    ; Save it to X0
.3a3023	a9 2c 00	lda #$002c	                LDA #','
.3a3026	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3029	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a302c	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a302f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3031	83 05		sta $05,s	                STA L_Y0                    ; Save it to Y0
.3a3033	a9 2c 00	lda #$002c	                LDA #','
.3a3036	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3039	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a303c	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a303f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3041	83 07		sta $07,s	                STA L_X1                    ; Save it to X1
.3a3043	a9 2c 00	lda #$002c	                LDA #','
.3a3046	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3049	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a304c	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a304f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3051	83 09		sta $09,s	                STA L_Y1                    ; Save it to Y1
.3a3053	a9 2c 00	lda #$002c	                LDA #','
.3a3056	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3059	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a305c	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a305f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3061	83 0b		sta $0b,s	                STA L_COLOR                 ; Save it to COLOR
.3a3063	a3 01		lda $01,s	                LDA L_PLANE                 ; Get the bitmap plane back
.3a3065	20 8b 2c	jsr $3a2c8b	            JSR BITMAP_VRAM
.3a3068	a9 07 00	lda #$0007	                LDA #VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill | VDMA_CTRL_1D_2D
.3a306b	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a306f	c2 20		rep #$20	            REP #$20
.3a3071	a3 05		lda $05,s	                LDA L_Y0                    ; Get the row
.3a3073	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a3077	af 10 f0 3a	lda $3af010	                LDA @l GR_MAX_COLS
.3a307b	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B         ; Multiply by the number of columns in the pixmap
.3a307f	18		clc		                CLC                         ; Add the column
.3a3080	af 04 01 00	lda $000104	                LDA @l M0_RESULT
.3a3084	63 03		adc $03,s	                ADC L_X0
.3a3086	85 0c		sta $080c	                STA SCRATCH
.3a3088	e2 20		sep #$20	            SEP #$20
.3a308a	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.3a308e	69 00		adc #$00	                ADC #0
.3a3090	85 0e		sta $080e	                STA SCRATCH+2
.3a3092	c2 20		rep #$20	            REP #$20
.3a3094	18		clc		                CLC                         ; Set the destination address
.3a3095	a5 9e		lda $089e	                LDA MTEMPPTR
.3a3097	65 0c		adc $080c	                ADC SCRATCH
.3a3099	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.3a309d	e2 20		sep #$20	            SEP #$20
.3a309f	a5 a0		lda $08a0	                LDA MTEMPPTR+2
.3a30a1	65 0e		adc $080e	                ADC SCRATCH+2
.3a30a3	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H
.3a30a7	c2 20		rep #$20	            REP #$20
.3a30a9	38		sec		                SEC                         ; Set the width of the FILL operation
.3a30aa	a3 07		lda $07,s	                LDA L_X1
.3a30ac	e3 03		sbc $03,s	                SBC L_X0
.3a30ae	85 0c		sta $080c	                STA SCRATCH
.3a30b0	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a30b4	38		sec		                SEC
.3a30b5	af 10 f0 3a	lda $3af010	                LDA @l GR_MAX_COLS
.3a30b9	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L    ; And the destination stride
.3a30bd	38		sec		                SEC                         ; Set the height of the FILL operation
.3a30be	a3 09		lda $09,s	                LDA L_Y1
.3a30c0	e3 05		sbc $05,s	                SBC L_Y0
.3a30c2	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a30c6	e2 20		sep #$20	            SEP #$20
.3a30c8	a3 0b		lda $0b,s	                LDA L_COLOR                 ; Set the color to write
.3a30ca	8f 01 04 af	sta $af0401	                STA @l VDMA_BYTE_2_WRITE
.3a30ce	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.3a30d2	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF
.3a30d4	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a30d8	af 01 04 af	lda $af0401	wait            LDA @lVDMA_STATUS_REG       ; Wait until Vicky is done
.3a30dc	30 fa		bmi $3a30d8	                BMI wait
.3a30de	a9 00		lda #$00	                LDA #0                      ; Clear the control register so it can be used later
.3a30e0	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a30e4					done
.3a30e4	c2 20		rep #$20	            REP #$20
.3a30e6	3b		tsc		            TSC
.3a30e7	18		clc		            CLC
.3a30e8	69 0c 00	adc #$000c	            ADC #SIZE(locals)
.3a30eb	1b		tcs		            TCS
.3a30ec	28		plp		                PLP
.3a30ed	60		rts		            RTS
.3a30ee					SPADDR
.3a30ee	08		php		                PHP
.3a30ef	c2 20		rep #$20	            REP #$20
.3a30f1	c9 40 00	cmp #$0040	                CMP #SP_MAX
.3a30f4	b0 13		bcs $3a3109	                BGE error
.3a30f6	0a		asl a		                ASL A                       ; Multiply it by 8 (the size of s sprite block)
.3a30f7	0a		asl a		                ASL A
.3a30f8	0a		asl a		                ASL A
.3a30f9	18		clc		                CLC                         ; Add it to the address of the first
.3a30fa	69 00 0c	adc #$0c00	                ADC #<>SP00_CONTROL_REG     ; sprite block
.3a30fd	85 9e		sta $089e	                STA MTEMPPTR
.3a30ff	a9 af 00	lda #$00af	                LDA #`SP00_CONTROL_REG
.3a3102	69 00 00	adc #$0000	                ADC #0
.3a3105	85 a0		sta $08a0	                STA MTEMPPTR+2              ; And save that to MTEMPPTR
.3a3107	28		plp		                PLP
.3a3108	60		rts		            RTS
.3a3109					error
.3a3109	08		php		            PHP
.3a310a	c2 20		rep #$20	            REP #$20
.3a310c	48		pha		            PHA
.3a310d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3110	5b		tcd		            TCD
.3a3111	68		pla		            PLA
.3a3112	28		plp		            PLP
.3a3113	e2 20		sep #$20	            SEP #$20
.3a3115	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3117	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a311b	c2 20		rep #$20	            REP #$20
.3a311d	29 ff 00	and #$00ff	            AND #$00FF
.3a3120	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3123	e2 20		sep #$20	            SEP #$20
.3a3125	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3128					S_SPRITE
.3a3128	08		php		                PHP
.3a3129					locals
>0001					L_SPRITE        .word ?
>0003					L_LUT           .byte ?
.3a3129	c2 20		rep #$20	            REP #$20
.3a312b	3b		tsc		            TSC
.3a312c	38		sec		            SEC
.3a312d	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.3a3130	1b		tcs		            TCS
.3a3131	c2 30		rep #$30	            REP #$30
.3a3133	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3136	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3139	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a313b	a9 2c 00	lda #$002c	                LDA #','
.3a313e	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3141	e2 20		sep #$20	            SEP #$20
.3a3143	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3146	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3149	a5 23		lda $0823	                LDA ARGUMENT1
.3a314b	c9 08		cmp #$08	                CMP #GR_MAX_LUT             ; Check that it's in range
.3a314d	b0 56		bcs $3a31a5	                BGE error                   ; If not: throw an error
.3a314f	83 03		sta $03,s	                STA L_LUT                   ; Save it as lut
.3a3151	a9 2c		lda #$2c	                LDA #','
.3a3153	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3156	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3159	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a315c	c2 20		rep #$20	            REP #$20
.3a315e	38		sec		                SEC                         ; Adjust address to be in Vicky's space
.3a315f	a5 23		lda $0823	                LDA ARGUMENT1
.3a3161	e9 00 00	sbc #$0000	                SBC #<>VRAM
.3a3164	85 23		sta $0823	                STA ARGUMENT1
.3a3166	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3168	e9 b0 00	sbc #$00b0	                SBC #`VRAM
.3a316b	85 25		sta $0825	                STA ARGUMENT1+2
.3a316d	30 36		bmi $3a31a5	                BMI error                   ; If negative, throw an error
.3a316f	c2 20		rep #$20	            REP #$20
.3a3171	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a3173	aa		tax		                TAX
.3a3174	20 ee 30	jsr $3a30ee	            JSR SPADDR
.3a3177	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the lower word of the address
.3a3179	a0 01 00	ldy #$0001	                LDY #SP_ADDR
.3a317c	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a317e	e2 20		sep #$20	            SEP #$20
.3a3180	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3182	c8		iny		                INY
.3a3183	c8		iny		                INY
.3a3184	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save the upper byte of the address
.3a3186	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the sprite control register
.3a318a	29 f1		and #$f1	                AND #%11110001              ; Filter off the current LUT
.3a318c	85 0c		sta $080c	                STA SCRATCH
.3a318e	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT back
.3a3190	0a		asl a		                ASL A                       ; Sift it into the LUT position
.3a3191	29 0e		and #$0e	                AND #%00001110              ; Make sure we don't have anything wrong there
.3a3193	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with what's in the sprite's control
.3a3195	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the register's bits
.3a3197	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And the shadow register
.3a319b					done
.3a319b	c2 20		rep #$20	            REP #$20
.3a319d	3b		tsc		            TSC
.3a319e	18		clc		            CLC
.3a319f	69 03 00	adc #$0003	            ADC #SIZE(locals)
.3a31a2	1b		tcs		            TCS
.3a31a3	28		plp		                PLP
.3a31a4	60		rts		            RTS
.3a31a5					error
.3a31a5	08		php		            PHP
.3a31a6	c2 20		rep #$20	            REP #$20
.3a31a8	48		pha		            PHA
.3a31a9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a31ac	5b		tcd		            TCD
.3a31ad	68		pla		            PLA
.3a31ae	28		plp		            PLP
.3a31af	e2 20		sep #$20	            SEP #$20
.3a31b1	a9 09		lda #$09	            LDA #ERR_RANGE
.3a31b3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a31b7	c2 20		rep #$20	            REP #$20
.3a31b9	29 ff 00	and #$00ff	            AND #$00FF
.3a31bc	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a31bf	e2 20		sep #$20	            SEP #$20
.3a31c1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a31c4					S_SPRITEAT
.3a31c4	08		php		                PHP
.3a31c5					locals
>0001					L_SPRITE        .word ?
>0003					L_X             .word ?
.3a31c5	c2 20		rep #$20	            REP #$20
.3a31c7	3b		tsc		            TSC
.3a31c8	38		sec		            SEC
.3a31c9	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.3a31cc	1b		tcs		            TCS
.3a31cd	c2 30		rep #$30	            REP #$30
.3a31cf	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a31d2	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a31d5	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a31d7	a9 2c 00	lda #$002c	                LDA #','
.3a31da	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a31dd	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a31e0	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a31e3	a5 23		lda $0823	                LDA ARGUMENT1
.3a31e5	83 03		sta $03,s	                STA L_X                     ; Save it as X
.3a31e7	a9 2c 00	lda #$002c	                LDA #','
.3a31ea	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a31ed	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a31f0	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a31f3	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a31f5	20 ee 30	jsr $3a30ee	            JSR SPADDR
.3a31f8	a3 03		lda $03,s	                LDA L_X                     ; Get the X coordinate
.3a31fa	a0 04 00	ldy #$0004	                LDY #SP_X_COORD             ; Save the X coordinate for the sprite
.3a31fd	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a31ff	a5 23		lda $0823	                LDA ARGUMENT1
.3a3201	a0 06 00	ldy #$0006	                LDY #SP_Y_COORD             ; Save the Y coordinate for the sprite
.3a3204	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3206					done
.3a3206	c2 20		rep #$20	            REP #$20
.3a3208	3b		tsc		            TSC
.3a3209	18		clc		            CLC
.3a320a	69 04 00	adc #$0004	            ADC #SIZE(locals)
.3a320d	1b		tcs		            TCS
.3a320e	28		plp		                PLP
.3a320f	60		rts		            RTS
.3a3210					S_SPRITESHOW
.3a3210	08		php		                PHP
.3a3211					locals
>0001					L_SPRITE        .word ?
>0003					L_VISIBLE       .byte ?
.3a3211	c2 20		rep #$20	            REP #$20
.3a3213	3b		tsc		            TSC
.3a3214	38		sec		            SEC
.3a3215	e9 03 00	sbc #$0003	            SBC #SIZE(locals)
.3a3218	1b		tcs		            TCS
.3a3219	c2 30		rep #$30	            REP #$30
.3a321b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a321e	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3221	83 01		sta $01,s	                STA L_SPRITE                ; Save it as sprite
.3a3223	a9 2c 00	lda #$002c	                LDA #','
.3a3226	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3229	e2 20		sep #$20	            SEP #$20
.3a322b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a322e	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3231	a5 23		lda $0823	                LDA ARGUMENT1
.3a3233	d0 04		bne $3a3239	                BNE is_visible
.3a3235	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 0 (not visible)
.3a3237	80 04		bra $3a323d	                BRA chk_layer
.3a3239	a9 01		lda #$01	is_visible      LDA #1
.3a323b	83 03		sta $03,s	                STA L_VISIBLE               ; Set visible := 1 (visible)
.3a323d	a9 2c		lda #$2c	chk_layer       LDA #','
.3a323f	85 37		sta $0837	                STA TARGETTOK
.3a3241	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a3244	b0 20		bcs $3a3266	                BCS get_layer               ; Yes: get the layer
.3a3246					no_layer
.3a3246	c2 30		rep #$30	            REP #$30
.3a3248	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a324a	aa		tax		                TAX
.3a324b	20 ee 30	jsr $3a30ee	            JSR SPADDR
.3a324e	e2 20		sep #$20	            SEP #$20
.3a3250	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.3a3254	29 fe		and #$fe	                AND #$FE                    ; Filter out the enable bit
.3a3256	85 0c		sta $080c	                STA SCRATCH
.3a3258	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.3a325a	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.3a325c	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.3a325e	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And save it
.3a3262	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; ... and to Vicky
.3a3264	80 36		bra $3a329c	                BRA done
.3a3266					get_layer
.3a3266	c2 30		rep #$30	            REP #$30
.3a3268	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a326b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a326e	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3271	a5 23		lda $0823	                LDA ARGUMENT1
.3a3273	c9 08 00	cmp #$0008	                CMP #8                      ; Make sure it's in range
.3a3276	b0 2e		bcs $3a32a6	                BGE error                   ; If not, throw an out of range error
.3a3278	0a		asl a		                ASL A                       ; If it's ok... shift it into position
.3a3279	0a		asl a		                ASL A
.3a327a	0a		asl a		                ASL A
.3a327b	0a		asl a		                ASL A
.3a327c	85 0c		sta $080c	                STA SCRATCH                 ; And save it in SCRATCH
.3a327e	a3 01		lda $01,s	                LDA L_SPRITE                ; Get the sprite number back
.3a3280	aa		tax		                TAX
.3a3281	20 ee 30	jsr $3a30ee	            JSR SPADDR
.3a3284	e2 20		sep #$20	            SEP #$20
.3a3286	a3 03		lda $03,s	                LDA L_VISIBLE               ; Get the visible byte
.3a3288	29 01		and #$01	                AND #$01                    ; Make sure it's just the bit
.3a328a	05 0c		ora $080c	                ORA SCRATCH                 ; Combine it with the current values
.3a328c	85 0c		sta $080c	                STA SCRATCH
.3a328e	bf 18 f0 3a	lda $3af018,x	                LDA @l GS_SP_CONTROL,X      ; Get the current control register value
.3a3292	29 8e		and #$8e	                AND #%10001110              ; Filter out the enable and layer bits
.3a3294	05 0c		ora $080c	                ORA SCRATCH                 ; Combine with the provided layer and enable
.3a3296	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And set the bits in Vicky
.3a3298	9f 18 f0 3a	sta $3af018,x	                STA @l GS_SP_CONTROL,X      ; And to the shadow registers
.3a329c					done
.3a329c	c2 20		rep #$20	            REP #$20
.3a329e	3b		tsc		            TSC
.3a329f	18		clc		            CLC
.3a32a0	69 03 00	adc #$0003	            ADC #SIZE(locals)
.3a32a3	1b		tcs		            TCS
.3a32a4	28		plp		                PLP
.3a32a5	60		rts		            RTS
.3a32a6					error
.3a32a6	08		php		            PHP
.3a32a7	c2 20		rep #$20	            REP #$20
.3a32a9	48		pha		            PHA
.3a32aa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a32ad	5b		tcd		            TCD
.3a32ae	68		pla		            PLA
.3a32af	28		plp		            PLP
.3a32b0	e2 20		sep #$20	            SEP #$20
.3a32b2	a9 09		lda #$09	            LDA #ERR_RANGE
.3a32b4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a32b8	c2 20		rep #$20	            REP #$20
.3a32ba	29 ff 00	and #$00ff	            AND #$00FF
.3a32bd	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a32c0	e2 20		sep #$20	            SEP #$20
.3a32c2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a32c5					TILESET_ADDR
.3a32c5	08		php		                PHP
.3a32c6	c2 20		rep #$20	            REP #$20
.3a32c8	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.3a32cb	b0 19		bcs $3a32e6	                BGE out_of_range            ; If not, throw a range error
.3a32cd	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.3a32d0	a9 04 00	lda #$0004	                LDA #TILESET_REG_SIZE       ; Multiply it by the number of bytes in a tile set register set
.3a32d3	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.3a32d6	18		clc		                CLC                         ; Add to TILESET0_ADDY_L to get the final address
.3a32d7	ad 04 01	lda $0104	                LDA @w M0_RESULT
.3a32da	69 80 02	adc #$0280	                ADC #<>TILESET0_ADDY_L
.3a32dd	85 9e		sta $089e	                STA MTEMPPTR
.3a32df	a9 af 00	lda #$00af	                LDA #`TILESET0_ADDY_L
.3a32e2	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a32e4	28		plp		                PLP
.3a32e5	60		rts		            RTS
.3a32e6					out_of_range
.3a32e6	08		php		            PHP
.3a32e7	c2 20		rep #$20	            REP #$20
.3a32e9	48		pha		            PHA
.3a32ea	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a32ed	5b		tcd		            TCD
.3a32ee	68		pla		            PLA
.3a32ef	28		plp		            PLP
.3a32f0	e2 20		sep #$20	            SEP #$20
.3a32f2	a9 09		lda #$09	            LDA #ERR_RANGE
.3a32f4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a32f8	c2 20		rep #$20	            REP #$20
.3a32fa	29 ff 00	and #$00ff	            AND #$00FF
.3a32fd	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3300	e2 20		sep #$20	            SEP #$20
.3a3302	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3305					TILEMAP_ADDR
.3a3305	08		php		                PHP
.3a3306	c2 20		rep #$20	            REP #$20
.3a3308	c9 04 00	cmp #$0004	                CMP #4                      ; Make sure it's 0 - 4
.3a330b	b0 19		bcs $3a3326	                BGE out_of_range            ; If not, throw a range error
.3a330d	8d 00 01	sta $0100	                STA @w M0_OPERAND_A
.3a3310	a9 0c 00	lda #$000c	                LDA #TILEMAP_REG_SIZE       ; Multiply it by the number of bytes in a tile map register set
.3a3313	8d 02 01	sta $0102	                STA @w M0_OPERAND_B
.3a3316	18		clc		                CLC
.3a3317	ad 04 01	lda $0104	                LDA @w M0_RESULT            ; Add to TL0_CONTROL_REG to get the final address
.3a331a	69 00 02	adc #$0200	                ADC #<>TL0_CONTROL_REG
.3a331d	85 9e		sta $089e	                STA MTEMPPTR
.3a331f	a9 af 00	lda #$00af	                LDA #`TL0_CONTROL_REG
.3a3322	85 a0		sta $08a0	                STA MTEMPPTR+2
.3a3324	28		plp		                PLP
.3a3325	60		rts		            RTS
.3a3326					out_of_range
.3a3326	08		php		            PHP
.3a3327	c2 20		rep #$20	            REP #$20
.3a3329	48		pha		            PHA
.3a332a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a332d	5b		tcd		            TCD
.3a332e	68		pla		            PLA
.3a332f	28		plp		            PLP
.3a3330	e2 20		sep #$20	            SEP #$20
.3a3332	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3334	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3338	c2 20		rep #$20	            REP #$20
.3a333a	29 ff 00	and #$00ff	            AND #$00FF
.3a333d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3340	e2 20		sep #$20	            SEP #$20
.3a3342	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3345					S_TILESET
.3a3345	08		php		                PHP
.3a3346					locals
>0001					L_TILENUM       .word ?
>0003					L_LUT           .word ?
>0005					L_IS_SQUARE     .word ?
.3a3346	c2 20		rep #$20	            REP #$20
.3a3348	3b		tsc		            TSC
.3a3349	38		sec		            SEC
.3a334a	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a334d	1b		tcs		            TCS
.3a334e	c2 20		rep #$20	            REP #$20
.3a3350	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3353	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3356	a5 23		lda $0823	                LDA ARGUMENT1
.3a3358	83 01		sta $01,s	                STA L_TILENUM               ; Save it as the tile set/map number
.3a335a	a9 2c 00	lda #$002c	                LDA #','
.3a335d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3360	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3363	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3366	a5 23		lda $0823	                LDA ARGUMENT1
.3a3368	83 03		sta $03,s	                STA L_LUT                   ; Save it as LUT
.3a336a	a9 2c 00	lda #$002c	                LDA #','
.3a336d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3370	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3373	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3376	a5 23		lda $0823	                LDA ARGUMENT1
.3a3378	83 05		sta $05,s	                STA L_IS_SQUARE             ; Save it as IS_SQUARE
.3a337a	a9 2c 00	lda #$002c	                LDA #','
.3a337d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3380	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3383	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3386	a3 01		lda $01,s	                LDA L_TILENUM
.3a3388	20 c5 32	jsr $3a32c5	            JSR TILESET_ADDR
.3a338b	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the bitmap address - the address of the start of VRAM
.3a338d	87 9e		sta [$089e]	                STA [MTEMPPTR]              ; And save it to the registers
.3a338f	e2 20		sep #$20	            SEP #$20
.3a3391	38		sec		                SEC
.3a3392	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3394	e9 b0		sbc #$b0	                SBC #`VRAM
.3a3396	a0 02 00	ldy #$0002	                LDY #TILESET_ADDY_H
.3a3399	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a339b	a3 05		lda $05,s	                LDA L_IS_SQUARE             ; Check if is_square == 0?
.3a339d	d0 0d		bne $3a33ac	                BNE is_square
.3a339f					not_square
.3a339f	e2 20		sep #$20	            SEP #$20
.3a33a1	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.3a33a3	29 07		and #$07	                AND #$07                    ; Force it to be in range
.3a33a5	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.3a33a8	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.3a33aa	80 0d		bra $3a33b9	                BRA done
.3a33ac					is_square
.3a33ac	e2 20		sep #$20	            SEP #$20
.3a33ae	a3 03		lda $03,s	                LDA L_LUT                   ; Get the LUT
.3a33b0	29 07		and #$07	                AND #$07                    ; Force it to be in range
.3a33b2	09 08		ora #$08	                ORA #TILESET_SQUARE_256     ; Turn on the 256x256 flag
.3a33b4	a0 03 00	ldy #$0003	                LDY #TILESET_ADDY_CFG
.3a33b7	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; Save it to the registers
.3a33b9					done
.3a33b9	c2 20		rep #$20	            REP #$20
.3a33bb	3b		tsc		            TSC
.3a33bc	18		clc		            CLC
.3a33bd	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a33c0	1b		tcs		            TCS
.3a33c1	28		plp		                PLP
.3a33c2	60		rts		            RTS
.3a33c3					S_TILEMAP
.3a33c3	08		php		                PHP
.3a33c4					locals
>0001					L_TILENUM       .word ?
>0003					L_WIDTH         .word ?
>0005					L_HEIGHT        .word ?
.3a33c4	c2 20		rep #$20	            REP #$20
.3a33c6	3b		tsc		            TSC
.3a33c7	38		sec		            SEC
.3a33c8	e9 06 00	sbc #$0006	            SBC #SIZE(locals)
.3a33cb	1b		tcs		            TCS
.3a33cc	c2 20		rep #$20	            REP #$20
.3a33ce	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a33d1	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a33d4	a5 23		lda $0823	                LDA ARGUMENT1
.3a33d6	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a33d8	a9 2c 00	lda #$002c	                LDA #','
.3a33db	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a33de	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a33e1	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a33e4	a5 23		lda $0823	                LDA ARGUMENT1
.3a33e6	83 03		sta $03,s	                STA L_WIDTH                 ; Save it as WIDTH
.3a33e8	a9 2c 00	lda #$002c	                LDA #','
.3a33eb	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a33ee	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a33f1	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a33f4	a5 23		lda $0823	                LDA ARGUMENT1
.3a33f6	83 05		sta $05,s	                STA L_HEIGHT                ; Save it as HEIGHT
.3a33f8	a9 2c 00	lda #$002c	                LDA #','
.3a33fb	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a33fe	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3401	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3404	a3 01		lda $01,s	                LDA L_TILENUM
.3a3406	20 05 33	jsr $3a3305	            JSR TILEMAP_ADDR
.3a3409	a5 23		lda $0823	                LDA ARGUMENT1               ; Get the map address - the address of the start of VRAM
.3a340b	a0 01 00	ldy #$0001	                LDY #TILEMAP_START_ADDY
.3a340e	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y            ; And save it to the registers
.3a3410	e2 20		sep #$20	            SEP #$20
.3a3412	38		sec		                SEC
.3a3413	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3415	e9 b0		sbc #$b0	                SBC #`VRAM
.3a3417	c8		iny		                INY
.3a3418	c8		iny		                INY
.3a3419	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a341b	c2 20		rep #$20	            REP #$20
.3a341d	a3 03		lda $03,s	                LDA L_WIDTH                 ; Set the width
.3a341f	a0 04 00	ldy #$0004	                LDY #TILEMAP_TOTAL_X
.3a3422	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a3424	a3 05		lda $05,s	                LDA L_HEIGHT                ; Set the height
.3a3426	a0 06 00	ldy #$0006	                LDY #TILEMAP_TOTAL_Y
.3a3429	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a342b					done
.3a342b	c2 20		rep #$20	            REP #$20
.3a342d	3b		tsc		            TSC
.3a342e	18		clc		            CLC
.3a342f	69 06 00	adc #$0006	            ADC #SIZE(locals)
.3a3432	1b		tcs		            TCS
.3a3433	28		plp		                PLP
.3a3434	60		rts		            RTS
.3a3435					S_TILESHOW
.3a3435	08		php		                PHP
.3a3436					locals
>0001					L_TILENUM       .word ?
.3a3436	c2 20		rep #$20	            REP #$20
.3a3438	f4 00 00	pea #$0000	            PEA #0
.3a343b	c2 20		rep #$20	            REP #$20
.3a343d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3440	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3443	a5 23		lda $0823	                LDA ARGUMENT1
.3a3445	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a3447	a9 2c 00	lda #$002c	                LDA #','
.3a344a	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a344d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3450	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3453	a3 01		lda $01,s	                LDA L_TILENUM
.3a3455	20 05 33	jsr $3a3305	            JSR TILEMAP_ADDR
.3a3458	a5 23		lda $0823	                LDA ARGUMENT1               ; CHeck the visible parameter
.3a345a	d0 06		bne $3a3462	                BNE is_visible              ; If it's <> 0, make it visible
.3a345c	e2 20		sep #$20	            SEP #$20
.3a345e	a9 00		lda #$00	                LDA #0                      ; Control value for invisible
.3a3460	80 04		bra $3a3466	                BRA set_control
.3a3462					is_visible
.3a3462	e2 20		sep #$20	            SEP #$20
.3a3464	a9 01		lda #$01	                LDA #TILEMAP_VISIBLE        ; Control value for visible
.3a3466					set_control
.3a3466	e2 20		sep #$20	            SEP #$20
.3a3468	a0 00 00	ldy #$0000	                LDY #TILEMAP_CONTROL        ; Set the control register
.3a346b	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a346d					done
.3a346d	c2 20		rep #$20	            REP #$20
.3a346f	68		pla		            PLA
.3a3470	28		plp		                PLP
.3a3471	60		rts		            RTS
.3a3472					S_TILEAT
.3a3472	08		php		                PHP
.3a3473					locals
>0001					L_TILENUM       .word ?
>0003					L_X             .word ?
.3a3473	c2 20		rep #$20	            REP #$20
.3a3475	3b		tsc		            TSC
.3a3476	38		sec		            SEC
.3a3477	e9 04 00	sbc #$0004	            SBC #SIZE(locals)
.3a347a	1b		tcs		            TCS
.3a347b	c2 20		rep #$20	            REP #$20
.3a347d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3480	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a3483	a5 23		lda $0823	                LDA ARGUMENT1
.3a3485	83 01		sta $01,s	                STA L_TILENUM               ; Save as TILENUM
.3a3487	a9 2c 00	lda #$002c	                LDA #','
.3a348a	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a348d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3490	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3493	a5 23		lda $0823	                LDA ARGUMENT1
.3a3495	83 03		sta $03,s	                STA L_X                     ; Save as X
.3a3497	a9 2c 00	lda #$002c	                LDA #','
.3a349a	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a349d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a34a0	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a34a3	a3 01		lda $01,s	                LDA L_TILENUM
.3a34a5	20 05 33	jsr $3a3305	            JSR TILEMAP_ADDR
.3a34a8	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the Y position
.3a34aa	a0 0a 00	ldy #$000a	                LDY #TILEMAP_WINDOW_Y
.3a34ad	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a34af	a3 03		lda $03,s	                LDA L_X                     ; Set the X position
.3a34b1	a0 08 00	ldy #$0008	                LDY #TILEMAP_WINDOW_X
.3a34b4	97 9e		sta [$089e],y	                STA [MTEMPPTR],Y
.3a34b6					done
.3a34b6	c2 20		rep #$20	            REP #$20
.3a34b8	3b		tsc		            TSC
.3a34b9	18		clc		            CLC
.3a34ba	69 04 00	adc #$0004	            ADC #SIZE(locals)
.3a34bd	1b		tcs		            TCS
.3a34be	28		plp		                PLP
.3a34bf	60		rts		            RTS
=0					DMA_LINEAR = 0                              ; Memory to copy is a continguous, linear range
=1					DMA_RECT = 1                                ; Memory to copy is a rectangular block
.0000					DMA_BLOCK
>0000					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>0001					ADDR            .long ?                     ; The starting address for the data to transfer
>0004					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>0007					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>0009					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>000b					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
=$01					DMA_SRC_2D = $01                            ; Source transfer should be 2D
=$02					DMA_DST_2D = $02                            ; Destination transfer should be 2D
=$10					DMA_SRC_SRAM = $10                          ; Flag indicating that the source is in SRAM ($00:0000 - $3F:FFFF)
=$20					DMA_DST_SRAM = $20                          ; Flag indicating that the destination is in SRAM ($00:0000 - $3F:FFFF)
>3af058					DMA_BLOCKS      .byte ?                     ; What blocks are involved
.3af059					DMA_SRC
>3af059					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>3af05a					ADDR            .long ?                     ; The starting address for the data to transfer
>3af05d					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>3af060					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>3af062					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>3af064					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.3af066					DMA_DEST
>3af066					MODE            .byte ?                     ; The type of transfer: 0 = LINEAR, 1 = RECTANGULAR
>3af067					ADDR            .long ?                     ; The starting address for the data to transfer
>3af06a					SIZE            .long ?                     ; The number of bytes to transfer (for LINEAR sources)
>3af06d					WIDTH           .word ?                     ; The width of the rectangle to copy (for RECTANGULAR)
>3af06f					HEIGHT          .word ?                     ; The height of the rectangle to copy (for RECTANGULAR sources)
>3af071					STRIDE          .word ?                     ; The number of bytes to skip to get to the next line (for RECTANGULAR)
.3a34c0					DO_DMA
.3a34c0	0b		phd		                PHD
.3a34c1	08		php		                PHP
.3a34c2	08		php		            PHP
.3a34c3	c2 20		rep #$20	            REP #$20
.3a34c5	48		pha		            PHA
.3a34c6	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a34c9	5b		tcd		            TCD
.3a34ca	68		pla		            PLA
.3a34cb	28		plp		            PLP
.3a34cc	e2 20		sep #$20	            SEP #$20
.3a34ce	a9 00		lda #$00	                LDA #0
.3a34d0	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS           ; Set mode to something neutral
.3a34d4	af 5c f0 3a	lda $3af05c	                LDA @l DMA_SRC.ADDR+2       ; Check the bank
.3a34d8	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.3a34da	b0 1c		bcs $3a34f8	                BGE src_vram                ; Yes: leave the DMA_BLOCK bit alone
.3a34dc	8f 24 04 af	sta $af0424	src_sram        STA @l SDMA_SRC_ADDY_H      ; Set the SDMA source address
.3a34e0	af 5b f0 3a	lda $3af05b	                LDA @l DMA_SRC.ADDR+1
.3a34e4	8f 23 04 af	sta $af0423	                STA @l SDMA_SRC_ADDY_M
.3a34e8	af 5a f0 3a	lda $3af05a	                LDA @l DMA_SRC.ADDR
.3a34ec	8f 22 04 af	sta $af0422	                STA @l SDMA_SRC_ADDY_L
.3a34f0	a9 10		lda #$10	                LDA #DMA_SRC_SRAM           ; Set the SRAM source block bit
.3a34f2	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a34f6	80 17		bra $3a350f	                BRA src_mode
.3a34f8	38		sec		src_vram        SEC                         ; Convert to VRAM relative address
.3a34f9	e9 b0		sbc #$b0	                SBC #`VRAM
.3a34fb	8f 04 04 af	sta $af0404	                STA @l VDMA_SRC_ADDY_H      ; Set the VDMA source address
.3a34ff	af 5b f0 3a	lda $3af05b	                LDA @l DMA_SRC.ADDR+1
.3a3503	8f 03 04 af	sta $af0403	                STA @l VDMA_SRC_ADDY_M
.3a3507	af 5a f0 3a	lda $3af05a	                LDA @l DMA_SRC.ADDR
.3a350b	8f 02 04 af	sta $af0402	                STA @l VDMA_SRC_ADDY_L
.3a350f	af 59 f0 3a	lda $3af059	src_mode        LDA @l DMA_SRC.MODE         ; Determine if source is 1D or 2D
.3a3513	d0 3c		bne $3a3551	                BNE src_2d
.3a3515	af 58 f0 3a	lda $3af058	src_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.3a3519	f0 1b		beq $3a3536	                BEQ src_1d_vram
.3a351b	af 5d f0 3a	lda $3af05d	src_1d_sram     LDA @l DMA_SRC.SIZE         ; It's SRAM, so set the SDMA size
.3a351f	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.3a3523	af 5e f0 3a	lda $3af05e	                LDA @l DMA_SRC.SIZE+1
.3a3527	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_M
.3a352b	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a352f	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.3a3533	82 8b 00	brl $3a35c1	                BRL set_dst                 ; Go to set up the destination
.3a3536	af 5d f0 3a	lda $3af05d	src_1d_vram     LDA @l DMA_SRC.SIZE         ; It's VRAM, so set the VDMA size
.3a353a	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.3a353e	af 5e f0 3a	lda $3af05e	                LDA @l DMA_SRC.SIZE+1
.3a3542	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_M
.3a3546	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a354a	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.3a354e	82 70 00	brl $3a35c1	                BRL set_dst                 ; Go to set up the destination
.3a3551	af 58 f0 3a	lda $3af058	src_2d          LDA @l DMA_BLOCKS
.3a3555	09 01		ora #$01	                ORA #DMA_SRC_2D             ; Set the bit to make the source a 2D transfer
.3a3557	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a355b	89 10		bit #$10	                BIT #DMA_SRC_SRAM           ; Are we writing to SRAM
.3a355d	f0 32		beq $3a3591	                BEQ src_2d_vram             ; No: set the 2d values in the VRAM source
.3a355f	af 60 f0 3a	lda $3af060	src_2d_sram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.3a3563	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.3a3567	af 61 f0 3a	lda $3af061	                LDA @l DMA_SRC.WIDTH+1
.3a356b	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.3a356f	af 62 f0 3a	lda $3af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.3a3573	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.3a3577	af 63 f0 3a	lda $3af063	                LDA @l DMA_SRC.HEIGHT+1
.3a357b	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.3a357f	af 64 f0 3a	lda $3af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.3a3583	8f 2c 04 af	sta $af042c	                STA @l SDMA_SRC_STRIDE_L
.3a3587	af 65 f0 3a	lda $3af065	                LDA @l DMA_SRC.STRIDE+1
.3a358b	8f 2d 04 af	sta $af042d	                STA @l SDMA_SRC_STRIDE_L+1
.3a358f	80 30		bra $3a35c1	                BRA set_dst
.3a3591	af 60 f0 3a	lda $3af060	src_2d_vram     LDA @l DMA_SRC.WIDTH        ; Set the source width
.3a3595	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a3599	af 61 f0 3a	lda $3af061	                LDA @l DMA_SRC.WIDTH+1
.3a359d	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.3a35a1	af 62 f0 3a	lda $3af062	                LDA @l DMA_SRC.HEIGHT       ; Set the source height
.3a35a5	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a35a9	af 63 f0 3a	lda $3af063	                LDA @l DMA_SRC.HEIGHT+1
.3a35ad	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.3a35b1	af 64 f0 3a	lda $3af064	                LDA @l DMA_SRC.STRIDE       ; Set the source stride
.3a35b5	8f 0c 04 af	sta $af040c	                STA @l VDMA_SRC_STRIDE_L
.3a35b9	af 65 f0 3a	lda $3af065	                LDA @l DMA_SRC.STRIDE+1
.3a35bd	8f 0d 04 af	sta $af040d	                STA @l VDMA_SRC_STRIDE_L+1
.3a35c1					set_dst
.3a35c1	e2 20		sep #$20	            SEP #$20
.3a35c3	af 69 f0 3a	lda $3af069	                LDA @l DMA_DEST.ADDR+2      ; Check the bank
.3a35c7	c9 b0		cmp #$b0	                CMP #`VRAM                  ; Is it in VRAM?
.3a35c9	b0 20		bcs $3a35eb	                BGE dst_vram                ; Yes: leave the DMA_BLOCK bit alone
.3a35cb	8f 27 04 af	sta $af0427	dst_sram        STA @l SDMA_DST_ADDY_H      ; Set the SDMA destination address
.3a35cf	af 68 f0 3a	lda $3af068	                LDA @l DMA_DEST.ADDR+1
.3a35d3	8f 26 04 af	sta $af0426	                STA @l SDMA_DST_ADDY_M
.3a35d7	af 67 f0 3a	lda $3af067	                LDA @l DMA_DEST.ADDR
.3a35db	8f 25 04 af	sta $af0425	                STA @l SDMA_DST_ADDY_L
.3a35df	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS
.3a35e3	09 20		ora #$20	                ORA #DMA_DST_SRAM           ; Set the bit to indicate the destination is SRAM
.3a35e5	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a35e9	80 17		bra $3a3602	                BRA dst_mode
.3a35eb	38		sec		dst_vram        SEC                         ; Convert to VRAM relative address
.3a35ec	e9 b0		sbc #$b0	                SBC #`VRAM
.3a35ee	8f 07 04 af	sta $af0407	                STA @l VDMA_DST_ADDY_H      ; Set the VDMA destination address
.3a35f2	af 68 f0 3a	lda $3af068	                LDA @l DMA_DEST.ADDR+1
.3a35f6	8f 06 04 af	sta $af0406	                STA @l VDMA_DST_ADDY_M
.3a35fa	af 67 f0 3a	lda $3af067	                LDA @l DMA_DEST.ADDR
.3a35fe	8f 05 04 af	sta $af0405	                STA @l VDMA_DST_ADDY_L
.3a3602	af 66 f0 3a	lda $3af066	dst_mode        LDA @l DMA_DEST.MODE
.3a3606	d0 3e		bne $3a3646	                BNE dst_2d                  ; If 2D, set up the 2D destination parameters
.3a3608	af 58 f0 3a	lda $3af058	dst_1d          LDA @l DMA_BLOCKS           ; Check if the source is SRAM or VRAM
.3a360c	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Is the destination SRAM?
.3a360e	f0 1b		beq $3a362b	                BEQ dst_1d_vram
.3a3610	af 6a f0 3a	lda $3af06a	dst_1d_sram     LDA @l DMA_DEST.SIZE
.3a3614	8f 28 04 af	sta $af0428	                STA @l SDMA_SIZE_L
.3a3618	af 6b f0 3a	lda $3af06b	                LDA @l DMA_DEST.SIZE+1
.3a361c	8f 29 04 af	sta $af0429	                STA @l SDMA_SIZE_L+1
.3a3620	af 6c f0 3a	lda $3af06c	                LDA @l DMA_DEST.SIZE+2
.3a3624	8f 2a 04 af	sta $af042a	                STA @l SDMA_SIZE_H
.3a3628	82 8b 00	brl $3a36b6	                BRL start_xfer
.3a362b	af 6a f0 3a	lda $3af06a	dst_1d_vram     LDA @l DMA_DEST.SIZE
.3a362f	8f 08 04 af	sta $af0408	                STA @l VDMA_SIZE_L
.3a3633	af 6b f0 3a	lda $3af06b	                LDA @l DMA_DEST.SIZE+1
.3a3637	8f 09 04 af	sta $af0409	                STA @l VDMA_SIZE_L+1
.3a363b	af 6c f0 3a	lda $3af06c	                LDA @l DMA_DEST.SIZE+2
.3a363f	8f 0a 04 af	sta $af040a	                STA @l VDMA_SIZE_H
.3a3643	82 70 00	brl $3a36b6	                BRL start_xfer
.3a3646	af 58 f0 3a	lda $3af058	dst_2d          LDA @l DMA_BLOCKS
.3a364a	09 02		ora #$02	                ORA #DMA_DST_2D             ; Set the bit to make the source a 2D transfer
.3a364c	8f 58 f0 3a	sta $3af058	                STA @l DMA_BLOCKS
.3a3650	89 20		bit #$20	                BIT #DMA_DST_SRAM           ; Are we writing to the SRAM?
.3a3652	f0 32		beq $3a3686	                BEQ dst_2d_vram             ; No: set the 2D parameters for VRAM
.3a3654	af 6d f0 3a	lda $3af06d	dst_2d_sram     LDA @l DMA_DEST.WIDTH       ; Set the SRAM width
.3a3658	8f 28 04 af	sta $af0428	                STA @l SDMA_X_SIZE_L
.3a365c	af 6e f0 3a	lda $3af06e	                LDA @L DMA_DEST.WIDTH+1
.3a3660	8f 29 04 af	sta $af0429	                STA @l SDMA_X_SIZE_L+1
.3a3664	af 6f f0 3a	lda $3af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the SRAM height
.3a3668	8f 2a 04 af	sta $af042a	                STA @l SDMA_Y_SIZE_L
.3a366c	af 70 f0 3a	lda $3af070	                LDA @L DMA_DEST.HEIGHT+1
.3a3670	8f 2b 04 af	sta $af042b	                STA @l SDMA_Y_SIZE_L+1
.3a3674	af 71 f0 3a	lda $3af071	                LDA @l DMA_DEST.STRIDE      ; Set the SRAM stride
.3a3678	8f 2e 04 af	sta $af042e	                STA @l SDMA_DST_STRIDE_L
.3a367c	af 72 f0 3a	lda $3af072	                LDA @L DMA_DEST.STRIDE+1
.3a3680	8f 2f 04 af	sta $af042f	                STA @l SDMA_DST_STRIDE_L+1
.3a3684	80 30		bra $3a36b6	                BRA start_xfer
.3a3686	af 6d f0 3a	lda $3af06d	dst_2d_vram     LDA @l DMA_DEST.WIDTH       ; Set the VRAM width
.3a368a	8f 08 04 af	sta $af0408	                STA @l VDMA_X_SIZE_L
.3a368e	af 6e f0 3a	lda $3af06e	                LDA @L DMA_DEST.WIDTH+1
.3a3692	8f 09 04 af	sta $af0409	                STA @l VDMA_X_SIZE_L+1
.3a3696	af 6f f0 3a	lda $3af06f	                LDA @l DMA_DEST.HEIGHT      ; Set the VRAM height
.3a369a	8f 0a 04 af	sta $af040a	                STA @l VDMA_Y_SIZE_L
.3a369e	af 70 f0 3a	lda $3af070	                LDA @L DMA_DEST.HEIGHT+1
.3a36a2	8f 0b 04 af	sta $af040b	                STA @l VDMA_Y_SIZE_L+1
.3a36a6	af 71 f0 3a	lda $3af071	                LDA @l DMA_DEST.STRIDE      ; Set the VRAM stride
.3a36aa	8f 0e 04 af	sta $af040e	                STA @l VDMA_DST_STRIDE_L
.3a36ae	af 72 f0 3a	lda $3af072	                LDA @L DMA_DEST.STRIDE+1
.3a36b2	8f 0f 04 af	sta $af040f	                STA @l VDMA_DST_STRIDE_L+1
.3a36b6	af 58 f0 3a	lda $3af058	start_xfer      LDA @l DMA_BLOCKS
.3a36ba	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.3a36bc	f0 43		beq $3a3701	                BEQ start_vdma_only
.3a36be	c9 10		cmp #$10	                CMP #DMA_SRC_SRAM
.3a36c0	f0 76		beq $3a3738	                BEQ start_s2v
.3a36c2	c9 20		cmp #$20	                CMP #DMA_DST_SRAM
.3a36c4	d0 03		bne $3a36c9	                BNE start_sdma_only
.3a36c6	82 8a 00	brl $3a3753	                BRL start_v2s
.3a36c9					start_sdma_only
.3a36c9	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.3a36cd	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.3a36cf	f0 23		beq $3a36f4	                BEQ sdma_1d_only            ; Source and Destination 1D...
.3a36d1	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.3a36d3	f0 23		beq $3a36f8	                BEQ sdma_2d_only            ; Source and Destination 2D
.3a36d5	08		php		            PHP
.3a36d6	c2 20		rep #$20	            REP #$20
.3a36d8	48		pha		            PHA
.3a36d9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a36dc	5b		tcd		            TCD
.3a36dd	68		pla		            PLA
.3a36de	28		plp		            PLP
.3a36df	e2 20		sep #$20	            SEP #$20
.3a36e1	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a36e3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a36e7	c2 20		rep #$20	            REP #$20
.3a36e9	29 ff 00	and #$00ff	            AND #$00FF
.3a36ec	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a36ef	e2 20		sep #$20	            SEP #$20
.3a36f1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a36f4	a9 01		lda #$01	sdma_1d_only    LDA #SDMA_CTRL0_Enable      ; Set the bits for 1D, SRAM->SRAM
.3a36f6	80 02		bra $3a36fa	                BRA sdma_set_ctrl
.3a36f8	a9 03		lda #$03	sdma_2d_only    LDA #SDMA_CTRL0_Enable | SDMA_CTRL0_1D_2D
.3a36fa	8f 20 04 af	sta $af0420	sdma_set_ctrl   STA @l SDMA_CTRL_REG0
.3a36fe	82 7d 00	brl $3a377e	                BRL trig_sdma               ; And trigger the SDMA
.3a3701					start_vdma_only
.3a3701	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check the SDMA flags
.3a3705	29 03		and #$03	                AND #DMA_SRC_2D | DMA_DST_2D
.3a3707	f0 23		beq $3a372c	                BEQ vdma_1d_only            ; Source and Destination 1D...
.3a3709	c9 03		cmp #$03	                CMP #DMA_SRC_2D | DMA_DST_2D
.3a370b	f0 23		beq $3a3730	                BEQ vdma_2d_only            ; Source and Destination 2D...
.3a370d	08		php		            PHP
.3a370e	c2 20		rep #$20	            REP #$20
.3a3710	48		pha		            PHA
.3a3711	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3714	5b		tcd		            TCD
.3a3715	68		pla		            PLA
.3a3716	28		plp		            PLP
.3a3717	e2 20		sep #$20	            SEP #$20
.3a3719	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a371b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a371f	c2 20		rep #$20	            REP #$20
.3a3721	29 ff 00	and #$00ff	            AND #$00FF
.3a3724	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3727	e2 20		sep #$20	            SEP #$20
.3a3729	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a372c	a9 01		lda #$01	vdma_1d_only    LDA #VDMA_CTRL_Enable       ; Set the bits for 1D, VRAM->VRAM
.3a372e	80 02		bra $3a3732	                BRA vdma_set_ctrl
.3a3730	a9 03		lda #$03	vdma_2d_only    LDA #VDMA_CTRL_Enable | VDMA_CTRL_1D_2D
.3a3732	8f 00 04 af	sta $af0400	vdma_set_ctrl   STA @l VDMA_CONTROL_REG
.3a3736	80 34		bra $3a376c	                BRA trig_vdma               ; And trigger the VDMA
.3a3738					start_s2v
.3a3738	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.3a373c	29 01		and #$01	                AND #DMA_SRC_2D
.3a373e	0a		asl a		                ASL A
.3a373f	09 11		ora #$11	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src
.3a3741	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a3745	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.3a3749	29 02		and #$02	                AND #DMA_DST_2D
.3a374b	09 11		ora #$11	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Src
.3a374d	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3751	80 19		bra $3a376c	                BRA trig_vdma               ; And trigger the VDMA
.3a3753					start_v2s
.3a3753	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the SDMA flags
.3a3757	29 02		and #$02	                AND #DMA_DST_2D
.3a3759	09 21		ora #$21	                ORA #SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Dst
.3a375b	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a375f	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Set the VDMA flags
.3a3763	29 01		and #$01	                AND #DMA_SRC_2D
.3a3765	0a		asl a		                ASL A
.3a3766	09 21		ora #$21	                ORA #VDMA_CTRL_Enable | VDMA_CTRL_SysRAM_Dst
.3a3768	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a376c					trig_vdma
.3a376c	af 00 04 af	lda $af0400	                LDA @l VDMA_CONTROL_REG
.3a3770	09 80		ora #$80	                ORA #VDMA_CTRL_Start_TRF    ; Trigger the VDMA
.3a3772	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a3776	af 58 f0 3a	lda $3af058	                LDA @l DMA_BLOCKS           ; Check if we need SDMA
.3a377a	29 30		and #$30	                AND #DMA_SRC_SRAM | DMA_DST_SRAM
.3a377c	f0 0f		beq $3a378d	                BEQ wait_vdma               ; No: wait for VDMA to complete
.3a377e					trig_sdma
.3a377e	af 20 04 af	lda $af0420	                LDA @l SDMA_CTRL_REG0
.3a3782	09 80		ora #$80	                ORA #SDMA_CTRL0_Start_TRF   ; Trigger the SDMA
.3a3784	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a3788	ea		nop		                NOP                         ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3a3789	ea		nop		                NOP                         ; Before it actually gets to stop it will execute a couple more instructions
.3a378a	ea		nop		                NOP                         ; From that point on, the CPU is halted (keep that in mind)
.3a378b	ea		nop		                NOP                         ; No IRQ will be processed either during that time
.3a378c	ea		nop		                NOP
.3a378d	af 01 04 af	lda $af0401	wait_vdma       LDA @l VDMA_STATUS_REG      ; Check the VDMA status
.3a3791	89 80		bit #$80	                BIT #VDMA_STAT_VDMA_IPS     ; If the transfer is still in process...
.3a3793	d0 f8		bne $3a378d	                BNE wait_vdma               ; Wait until it stops.
.3a3795	a9 00		lda #$00	                LDA #$00                    ; Clear the TRF bits
.3a3797	8f 20 04 af	sta $af0420	                STA @l SDMA_CTRL_REG0
.3a379b	8f 00 04 af	sta $af0400	                STA @l VDMA_CONTROL_REG
.3a379f	28		plp		                PLP
.3a37a0	2b		pld		                PLD
.3a37a1	60		rts		            RTS
.3a37a2					S_MEMCOPY
.3a37a2	0b		phd		                PHD
.3a37a3	08		php		                PHP
.3a37a4	e2 20		sep #$20	            SEP #$20
.3a37a6	c2 10		rep #$10	            REP #$10
.3a37a8	a9 00		lda #$00	                LDA #0
.3a37aa	a2 00 00	ldx #$0000	                LDX #0
.3a37ad	8f 59 f0 3a	sta $3af059	clr_loop        STA @l DMA_SRC
.3a37b1	e8		inx		                INX
.3a37b2	e0 1a 00	cpx #$001a	                CPX #SIZE(DMA_BLOCK) * 2
.3a37b5	d0 f6		bne $3a37ad	                BNE clr_loop
.3a37b7	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a37ba	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.3a37bc	f0 23		beq $3a37e1	                BEQ src_linear                      ; Yes: go to process a linear source
.3a37be	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.3a37c0	f0 5e		beq $3a3820	                BEQ src_rect                        ; Yes: go to process a rectangular source
.3a37c2					syntax_err
.3a37c2	08		php		            PHP
.3a37c3	c2 20		rep #$20	            REP #$20
.3a37c5	48		pha		            PHA
.3a37c6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a37c9	5b		tcd		            TCD
.3a37ca	68		pla		            PLA
.3a37cb	28		plp		            PLP
.3a37cc	e2 20		sep #$20	            SEP #$20
.3a37ce	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a37d0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a37d4	c2 20		rep #$20	            REP #$20
.3a37d6	29 ff 00	and #$00ff	            AND #$00FF
.3a37d9	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a37dc	e2 20		sep #$20	            SEP #$20
.3a37de	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a37e1					src_linear
.3a37e1	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a37e4	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a37e7	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a37ea	c2 20		rep #$20	            REP #$20
.3a37ec	a5 23		lda $0823	            LDA ARGUMENT1
.3a37ee	8f 5a f0 3a	sta $3af05a	            STA DMA_SRC.ADDR
.3a37f2	e2 20		sep #$20	            SEP #$20
.3a37f4	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a37f6	8f 5c f0 3a	sta $3af05c	            STA DMA_SRC.ADDR+2
.3a37fa	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a37fc	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a37ff	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3802	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3805	c2 20		rep #$20	            REP #$20
.3a3807	a5 23		lda $0823	            LDA ARGUMENT1
.3a3809	8f 5d f0 3a	sta $3af05d	            STA DMA_SRC.SIZE
.3a380d	e2 20		sep #$20	            SEP #$20
.3a380f	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3811	8f 5f f0 3a	sta $3af05f	            STA DMA_SRC.SIZE+2
.3a3815	e2 20		sep #$20	            SEP #$20
.3a3817	a9 00		lda #$00	            LDA #<DMA_LINEAR
.3a3819	8f 59 f0 3a	sta $3af059	            STA DMA_SRC.MODE
.3a381d	82 74 00	brl $3a3894	                BRL process_to
.3a3820					src_rect
.3a3820	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3823	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3826	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3829	c2 20		rep #$20	            REP #$20
.3a382b	a5 23		lda $0823	            LDA ARGUMENT1
.3a382d	8f 5a f0 3a	sta $3af05a	            STA DMA_SRC.ADDR
.3a3831	e2 20		sep #$20	            SEP #$20
.3a3833	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3835	8f 5c f0 3a	sta $3af05c	            STA DMA_SRC.ADDR+2
.3a3839	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a383b	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a383e	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3841	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3844	c2 20		rep #$20	            REP #$20
.3a3846	a5 23		lda $0823	            LDA ARGUMENT1
.3a3848	8f 60 f0 3a	sta $3af060	            STA DMA_SRC.WIDTH
.3a384c	8d 00 01	sta $0100	            STA M0_OPERAND_A
.3a384f	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3852	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3855	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3858	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a385b	c2 20		rep #$20	            REP #$20
.3a385d	a5 23		lda $0823	            LDA ARGUMENT1
.3a385f	8f 62 f0 3a	sta $3af062	            STA DMA_SRC.HEIGHT
.3a3863	8d 02 01	sta $0102	            STA M0_OPERAND_B
.3a3866	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3869	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a386c	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a386f	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3872	c2 20		rep #$20	            REP #$20
.3a3874	a5 23		lda $0823	            LDA ARGUMENT1
.3a3876	8f 64 f0 3a	sta $3af064	            STA DMA_SRC.STRIDE
.3a387a	c2 20		rep #$20	            REP #$20
.3a387c	ad 04 01	lda $0104	            LDA M0_RESULT
.3a387f	8f 5d f0 3a	sta $3af05d	            STA DMA_SRC.SIZE
.3a3883	e2 20		sep #$20	            SEP #$20
.3a3885	ad 06 01	lda $0106	            LDA M0_RESULT+2
.3a3888	8f 5f f0 3a	sta $3af05f	            STA DMA_SRC.SIZE+2
.3a388c	e2 20		sep #$20	            SEP #$20
.3a388e	a9 01		lda #$01	            LDA #<DMA_RECT
.3a3890	8f 59 f0 3a	sta $3af059	            STA DMA_SRC.MODE
.3a3894					process_to
.3a3894	e2 20		sep #$20	            SEP #$20
.3a3896	a9 9c		lda #$9c	                LDA #TOK_TO
.3a3898	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a389b	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a389e	c9 e6		cmp #$e6	                CMP #TOK_LINEAR                     ; Is it LINEAR?
.3a38a0	f0 23		beq $3a38c5	                BEQ dest_linear                     ; Yes: go to process a linear destination
.3a38a2	c9 e7		cmp #$e7	                CMP #TOK_RECT                       ; Is it RECT?
.3a38a4	f0 5e		beq $3a3904	                BEQ dest_rect                       ; Yes: go to process a rectangular source
.3a38a6					syntax_err2
.3a38a6	08		php		            PHP
.3a38a7	c2 20		rep #$20	            REP #$20
.3a38a9	48		pha		            PHA
.3a38aa	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a38ad	5b		tcd		            TCD
.3a38ae	68		pla		            PLA
.3a38af	28		plp		            PLP
.3a38b0	e2 20		sep #$20	            SEP #$20
.3a38b2	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a38b4	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a38b8	c2 20		rep #$20	            REP #$20
.3a38ba	29 ff 00	and #$00ff	            AND #$00FF
.3a38bd	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a38c0	e2 20		sep #$20	            SEP #$20
.3a38c2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a38c5					dest_linear
.3a38c5	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a38c8	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a38cb	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a38ce	c2 20		rep #$20	            REP #$20
.3a38d0	a5 23		lda $0823	            LDA ARGUMENT1
.3a38d2	8f 67 f0 3a	sta $3af067	            STA DMA_DEST.ADDR
.3a38d6	e2 20		sep #$20	            SEP #$20
.3a38d8	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a38da	8f 69 f0 3a	sta $3af069	            STA DMA_DEST.ADDR+2
.3a38de	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a38e0	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a38e3	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a38e6	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a38e9	c2 20		rep #$20	            REP #$20
.3a38eb	a5 23		lda $0823	            LDA ARGUMENT1
.3a38ed	8f 6a f0 3a	sta $3af06a	            STA DMA_DEST.SIZE
.3a38f1	e2 20		sep #$20	            SEP #$20
.3a38f3	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a38f5	8f 6c f0 3a	sta $3af06c	            STA DMA_DEST.SIZE+2
.3a38f9	e2 20		sep #$20	            SEP #$20
.3a38fb	a9 00		lda #$00	            LDA #<DMA_LINEAR
.3a38fd	8f 66 f0 3a	sta $3af066	            STA DMA_DEST.MODE
.3a3901	82 74 00	brl $3a3978	                BRL verify
.3a3904					dest_rect
.3a3904	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3907	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a390a	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a390d	c2 20		rep #$20	            REP #$20
.3a390f	a5 23		lda $0823	            LDA ARGUMENT1
.3a3911	8f 67 f0 3a	sta $3af067	            STA DMA_DEST.ADDR
.3a3915	e2 20		sep #$20	            SEP #$20
.3a3917	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a3919	8f 69 f0 3a	sta $3af069	            STA DMA_DEST.ADDR+2
.3a391d	a9 2c		lda #$2c	                LDA #','                            ; Get a comma
.3a391f	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3922	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3925	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3928	c2 20		rep #$20	            REP #$20
.3a392a	a5 23		lda $0823	            LDA ARGUMENT1
.3a392c	8f 6d f0 3a	sta $3af06d	            STA DMA_DEST.WIDTH
.3a3930	8d 00 01	sta $0100	            STA M0_OPERAND_A
.3a3933	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a3936	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3939	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a393c	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a393f	c2 20		rep #$20	            REP #$20
.3a3941	a5 23		lda $0823	            LDA ARGUMENT1
.3a3943	8f 6f f0 3a	sta $3af06f	            STA DMA_DEST.HEIGHT
.3a3947	8d 02 01	sta $0102	            STA M0_OPERAND_B
.3a394a	a9 2c 00	lda #$002c	                LDA #','                            ; Get a comma
.3a394d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3950	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3953	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3956	c2 20		rep #$20	            REP #$20
.3a3958	a5 23		lda $0823	            LDA ARGUMENT1
.3a395a	8f 71 f0 3a	sta $3af071	            STA DMA_DEST.STRIDE
.3a395e	c2 20		rep #$20	            REP #$20
.3a3960	ad 04 01	lda $0104	            LDA M0_RESULT
.3a3963	8f 6a f0 3a	sta $3af06a	            STA DMA_DEST.SIZE
.3a3967	e2 20		sep #$20	            SEP #$20
.3a3969	ad 06 01	lda $0106	            LDA M0_RESULT+2
.3a396c	8f 6c f0 3a	sta $3af06c	            STA DMA_DEST.SIZE+2
.3a3970	e2 20		sep #$20	            SEP #$20
.3a3972	a9 01		lda #$01	            LDA #<DMA_RECT
.3a3974	8f 66 f0 3a	sta $3af066	            STA DMA_DEST.MODE
.3a3978					verify
.3a3978	c2 20		rep #$20	            REP #$20
.3a397a	af 5d f0 3a	lda $3af05d	                LDA @l DMA_SRC.SIZE
.3a397e	cf 6a f0 3a	cmp $3af06a	                CMP @l DMA_DEST.SIZE
.3a3982	d0 14		bne $3a3998	                BNE size_err
.3a3984	e2 20		sep #$20	            SEP #$20
.3a3986	af 5f f0 3a	lda $3af05f	                LDA @l DMA_SRC.SIZE+2
.3a398a	cf 6c f0 3a	cmp $3af06c	                CMP @l DMA_DEST.SIZE+2
.3a398e	d0 08		bne $3a3998	                BNE size_err
.3a3990	c2 20		rep #$20	            REP #$20
.3a3992	20 c0 34	jsr $3a34c0	            JSR DO_DMA
.3a3995	28		plp		                PLP
.3a3996	2b		pld		                PLD
.3a3997	60		rts		            RTS
.3a3998					size_err
.3a3998	08		php		            PHP
.3a3999	c2 20		rep #$20	            REP #$20
.3a399b	48		pha		            PHA
.3a399c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a399f	5b		tcd		            TCD
.3a39a0	68		pla		            PLA
.3a39a1	28		plp		            PLP
.3a39a2	e2 20		sep #$20	            SEP #$20
.3a39a4	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a39a6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a39aa	c2 20		rep #$20	            REP #$20
.3a39ac	29 ff 00	and #$00ff	            AND #$00FF
.3a39af	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a39b2	e2 20		sep #$20	            SEP #$20
.3a39b4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a39b7					S_LOCATE
.3a39b7	08		php		                PHP
.3a39b8	c2 30		rep #$30	            REP #$30
.3a39ba	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a39bd	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a39c0	a5 23		lda $0823	                LDA ARGUMENT1
.3a39c2	48		pha		                PHA                         ; Save it for later
.3a39c3	a9 2c 00	lda #$002c	                LDA #','                    ; Check for the comma separator
.3a39c6	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a39c9	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a39cc	20 15 06	jsr $3a0615	            JSR ASS_ARG1_BYTE
.3a39cf	a4 23		ldy $0823	                LDY ARGUMENT1               ; Set Y to the row
.3a39d1	fa		plx		                PLX                         ; Set X to the column
.3a39d2	20 20 00	jsr $3a0020	            JSR CURSORXY
.3a39d5	28		plp		                PLP
.3a39d6	60		rts		            RTS

;******  Return to file: src\statements.s

.3a39d7					S_INPUT
.3a39d7	08		php		                PHP
.3a39d8					varloop
.3a39d8	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a39db	e2 20		sep #$20	            SEP #$20
.3a39dd	a7 00		lda [$0800]	                LDA [BIP]
.3a39df	d0 03		bne $3a39e4	                BNE check_colon
.3a39e1	4c 7c 3a	jmp $3a3a7c	                JMP done            ; If EOL, we're done
.3a39e4	c9 3a		cmp #$3a	check_colon     CMP #':'
.3a39e6	d0 03		bne $3a39eb	                BNE check_string
.3a39e8	4c 7c 3a	jmp $3a3a7c	                JMP done            ; If colon, we're done
.3a39eb	c9 22		cmp #$22	check_string    CMP #CHAR_DQUOTE    ; Is it the start of a string?
.3a39ed	d0 0b		bne $3a39fa	                BNE check_var       ; No: then it should be a variable name
.3a39ef	20 39 1a	jsr $3a1a39	            JSR EVALSTRING
.3a39f2	20 68 43	jsr $3a4368	            JSR PR_STRING
.3a39f5	a9 3b		lda #$3b	                LDA #';'            ; Look for a semicolon
.3a39f7	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a39fa					check_var
.3a39fa	20 94 03	jsr $3a0394	            JSR ISALPHA
.3a39fd	90 41		bcc $3a3a40	                BCC syntax_err      ; No: it's a syntax error
.3a39ff	20 51 51	jsr $3a5151	            JSR VAR_FINDNAME
.3a3a02	90 3c		bcc $3a3a40	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3a04	a9 3f		lda #$3f	                LDA #"?"            ; Print a "? " to follow
.3a3a06	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3a09	a9 20		lda #$20	                LDA #CHAR_SP
.3a3a0b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3a0e	20 10 00	jsr $3a0010	            JSR INPUTLINE
.3a3a11	e2 20		sep #$20	            SEP #$20
.3a3a13	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Check the type of the variable
.3a3a15	c9 02		cmp #$02	                CMP #TYPE_STRING    ; If it's a string...
.3a3a17	f0 46		beq $3a3a5f	                BEQ in_string       ; ... go to copy the string data
.3a3a19	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; If it's an integer...
.3a3a1b	f0 62		beq $3a3a7f	                BEQ in_integer      ; ... go to parse the integer
.3a3a1d	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; If it's a float...
.3a3a1f	f0 5d		beq $3a3a7e	                BEQ in_float        ; ... go to parse the float
.3a3a21	08		php		            PHP
.3a3a22	c2 20		rep #$20	            REP #$20
.3a3a24	48		pha		            PHA
.3a3a25	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3a28	5b		tcd		            TCD
.3a3a29	68		pla		            PLA
.3a3a2a	28		plp		            PLP
.3a3a2b	e2 20		sep #$20	            SEP #$20
.3a3a2d	a9 04		lda #$04	            LDA #ERR_TYPE
.3a3a2f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3a33	c2 20		rep #$20	            REP #$20
.3a3a35	29 ff 00	and #$00ff	            AND #$00FF
.3a3a38	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3a3b	e2 20		sep #$20	            SEP #$20
.3a3a3d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3a40					syntax_err
.3a3a40	08		php		            PHP
.3a3a41	c2 20		rep #$20	            REP #$20
.3a3a43	48		pha		            PHA
.3a3a44	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3a47	5b		tcd		            TCD
.3a3a48	68		pla		            PLA
.3a3a49	28		plp		            PLP
.3a3a4a	e2 20		sep #$20	            SEP #$20
.3a3a4c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3a4e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3a52	c2 20		rep #$20	            REP #$20
.3a3a54	29 ff 00	and #$00ff	            AND #$00FF
.3a3a57	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3a5a	e2 20		sep #$20	            SEP #$20
.3a3a5c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3a5f					in_string
.3a3a5f	c2 20		rep #$20	            REP #$20
.3a3a61	a9 00 4c	lda #$4c00	                LDA #<>IOBUF
.3a3a64	85 23		sta $0823	                STA ARGUMENT1
.3a3a66	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3a69	85 25		sta $0825	                STA ARGUMENT1+2
.3a3a6b	e2 20		sep #$20	            SEP #$20
.3a3a6d	a9 02		lda #$02	                LDA #TYPE_STRING
.3a3a6f	85 27		sta $0827	                STA ARGTYPE1
.3a3a71					save_input
.3a3a71	c2 20		rep #$20	            REP #$20
.3a3a73	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a3a76	a9 0d 00	lda #$000d	                LDA #CHAR_CR        ; Print a newline
.3a3a79	20 18 00	jsr $3a0018	            JSR PRINTC
.3a3a7c	28		plp		done            PLP
.3a3a7d	60		rts		            RTS
.3a3a7e	ea		nop		in_float        NOP                 ; TODO: flesh out floating point input
.3a3a7f					in_integer
.3a3a7f	c2 20		rep #$20	            REP #$20
.3a3a81	a5 00		lda $0800	                LDA BIP             ; Save the BIP for later use
.3a3a83	85 40		sta $0840	                STA SAVEBIP
.3a3a85	a5 02		lda $0802	                LDA BIP+2
.3a3a87	85 42		sta $0842	                STA SAVEBIP+2
.3a3a89	a9 00 4c	lda #$4c00	                LDA #<>IOBUF        ; Point to the line that was just input
.3a3a8c	85 00		sta $0800	                STA BIP
.3a3a8e	a9 00 00	lda #$0000	                LDA #`IOBUF
.3a3a91	85 02		sta $0802	                STA BIP+2
.3a3a93	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a3a96	c2 20		rep #$20	            REP #$20
.3a3a98	a5 40		lda $0840	                LDA SAVEBIP         ; Restore the BIP
.3a3a9a	85 00		sta $0800	                STA BIP
.3a3a9c	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3a9e	85 02		sta $0802	                STA BIP+2
.3a3aa0	80 cf		bra $3a3a71	                BRA save_input
.3a3aa2					S_GET
.3a3aa2	08		php		                PHP
.3a3aa3					varloop
.3a3aa3	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3aa6	e2 20		sep #$20	            SEP #$20
.3a3aa8	a7 00		lda [$0800]	                LDA [BIP]
.3a3aaa	f0 47		beq $3a3af3	                BEQ done            ; If EOL, we're done
.3a3aac	c9 3a		cmp #$3a	                CMP #':'
.3a3aae	f0 43		beq $3a3af3	                BEQ done            ; If colon, we're done
.3a3ab0	20 94 03	jsr $3a0394	            JSR ISALPHA
.3a3ab3	90 40		bcc $3a3af5	                BCC syntax_err      ; No: it's a syntax error
.3a3ab5	20 51 51	jsr $3a5151	            JSR VAR_FINDNAME
.3a3ab8	90 3b		bcc $3a3af5	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3aba	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a3abd	20 14 00	jsr $3a0014	            JSR GETKEY
.3a3ac0	e2 20		sep #$20	            SEP #$20
.3a3ac2	a0 00 00	ldy #$0000	                LDY #0
.3a3ac5	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a3ac7	a9 00		lda #$00	                LDA #0
.3a3ac9	c8		iny		                INY
.3a3aca	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a3acc	c2 20		rep #$20	            REP #$20
.3a3ace	a5 16		lda $0816	                LDA STRPTR
.3a3ad0	85 23		sta $0823	                STA ARGUMENT1
.3a3ad2	a5 18		lda $0818	                LDA STRPTR+2
.3a3ad4	85 25		sta $0825	                STA ARGUMENT1+2
.3a3ad6	e2 20		sep #$20	            SEP #$20
.3a3ad8	a9 02		lda #$02	                LDA #TYPE_STRING
.3a3ada	85 27		sta $0827	                STA ARGTYPE1
.3a3adc	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a3adf	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3ae2	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.3a3ae4	f0 0d		beq $3a3af3	                BEQ done            ; EOL? We're done
.3a3ae6	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.3a3ae8	f0 09		beq $3a3af3	                BEQ done
.3a3aea	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3aec	d0 07		bne $3a3af5	                BNE syntax_err      ; Nope: syntax error
.3a3aee	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3af1	80 b0		bra $3a3aa3	                BRA varloop
.3a3af3	28		plp		done            PLP
.3a3af4	60		rts		            RTS
.3a3af5					syntax_err
.3a3af5	08		php		            PHP
.3a3af6	c2 20		rep #$20	            REP #$20
.3a3af8	48		pha		            PHA
.3a3af9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3afc	5b		tcd		            TCD
.3a3afd	68		pla		            PLA
.3a3afe	28		plp		            PLP
.3a3aff	e2 20		sep #$20	            SEP #$20
.3a3b01	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3b03	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3b07	c2 20		rep #$20	            REP #$20
.3a3b09	29 ff 00	and #$00ff	            AND #$00FF
.3a3b0c	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3b0f	e2 20		sep #$20	            SEP #$20
.3a3b11	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3b14					S_CALL
.3a3b14	08		php		                PHP
.3a3b15	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3b18	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a3b1b	e2 20		sep #$20	            SEP #$20
.3a3b1d	a9 5c		lda #$5c	                LDA #$5C            ; Set the opcode for JML
.3a3b1f	85 a2		sta $08a2	                STA MJUMPINST
.3a3b21	c2 20		rep #$20	            REP #$20
.3a3b23	a5 23		lda $0823	                LDA ARGUMENT1
.3a3b25	85 a3		sta $08a3	                STA MJUMPADDR
.3a3b27	e2 20		sep #$20	            SEP #$20
.3a3b29	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3b2b	85 a5		sta $08a5	                STA MJUMPADDR+2
.3a3b2d	e2 20		sep #$20	            SEP #$20
.3a3b2f	a9 2c		lda #$2c	                LDA #','
.3a3b31	85 37		sta $0837	                STA TARGETTOK
.3a3b33	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a3b36	90 41		bcc $3a3b79	                BCC launch          ; Not present... go ahead and launch
.3a3b38	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3b3b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3b3e	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3b41	c2 20		rep #$20	            REP #$20
.3a3b43	a5 23		lda $0823	                LDA ARGUMENT1
.3a3b45	85 55		sta $0855	                STA MARG1           ; Save it to MARG1
.3a3b47	e2 20		sep #$20	            SEP #$20
.3a3b49	a9 2c		lda #$2c	                LDA #','
.3a3b4b	85 37		sta $0837	                STA TARGETTOK
.3a3b4d	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a3b50	90 27		bcc $3a3b79	                BCC launch          ; Not present... go ahead and launch
.3a3b52	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3b55	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3b58	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3b5b	c2 20		rep #$20	            REP #$20
.3a3b5d	a5 23		lda $0823	                LDA ARGUMENT1
.3a3b5f	85 59		sta $0859	                STA MARG2           ; Save it to MARG2
.3a3b61	e2 20		sep #$20	            SEP #$20
.3a3b63	a9 2c		lda #$2c	                LDA #','
.3a3b65	85 37		sta $0837	                STA TARGETTOK
.3a3b67	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a3b6a	90 0d		bcc $3a3b79	                BCC launch          ; Not present... go ahead and launch
.3a3b6c	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3b6f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3b72	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3b75	c2 20		rep #$20	            REP #$20
.3a3b77	a4 23		ldy $0823	                LDY ARGUMENT1
.3a3b79	a6 59		ldx $0859	launch          LDX MARG2
.3a3b7b	a5 55		lda $0855	                LDA MARG1
.3a3b7d	0b		phd		                PHD
.3a3b7e	8b		phb		                PHB
.3a3b7f	08		php		                PHP
.3a3b80	22 a2 08 00	jsl $0008a2	                JSL MJUMPINST       ; Call the subroutine indicated
.3a3b84	28		plp		                PLP
.3a3b85	ab		plb		                PLB
.3a3b86	2b		pld		                PLD
.3a3b87	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a3b8a	28		plp		                PLP
.3a3b8b	60		rts		            RTS
.3a3b8c					type_err
.3a3b8c	08		php		            PHP
.3a3b8d	c2 20		rep #$20	            REP #$20
.3a3b8f	48		pha		            PHA
.3a3b90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3b93	5b		tcd		            TCD
.3a3b94	68		pla		            PLA
.3a3b95	28		plp		            PLP
.3a3b96	e2 20		sep #$20	            SEP #$20
.3a3b98	a9 04		lda #$04	            LDA #ERR_TYPE
.3a3b9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3b9e	c2 20		rep #$20	            REP #$20
.3a3ba0	29 ff 00	and #$00ff	            AND #$00FF
.3a3ba3	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3ba6	e2 20		sep #$20	            SEP #$20
.3a3ba8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3bab					S_DIM
.3a3bab	08		php		                PHP
.3a3bac	e2 20		sep #$20	            SEP #$20
.3a3bae	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3bb1	20 51 51	jsr $3a5151	            JSR VAR_FINDNAME
.3a3bb4	90 64		bcc $3a3c1a	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3bb6	a9 8f		lda #$8f	                LDA #TOK_LPAREN     ; Verify we have a left parenthesis
.3a3bb8	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3bbb	a9 01		lda #$01	                LDA #TOK_FUNC_OPEN  ; Push the "operator" marker for the start of the function
.3a3bbd	20 8c 18	jsr $3a188c	            JSR PHOPERATOR
.3a3bc0	a2 01 00	ldx #$0001	                LDX #1
.3a3bc3	a9 00		lda #$00	                LDA #0
.3a3bc5	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Set the dimension count to 0
.3a3bc9					dim_loop
.3a3bc9	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3bcc	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a3bcf	c2 20		rep #$20	            REP #$20
.3a3bd1	a5 23		lda $0823	                LDA ARGUMENT1
.3a3bd3	9f 00 4d 00	sta $004d00,x	                STA @lARRIDXBUF,X   ; And store it in the buffer
.3a3bd7	e2 20		sep #$20	            SEP #$20
.3a3bd9	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF     ; Add to the dimension count
.3a3bdd	1a		inc a		                INC A
.3a3bde	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF
.3a3be2	30 55		bmi $3a3c39	                BMI overflow        ; If > 127 throw an error
.3a3be4	e8		inx		                INX
.3a3be5	e8		inx		                INX
.3a3be6	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3be9	a7 00		lda [$0800]	                LDA [BIP]           ; Check the character
.3a3beb	c9 2c		cmp #$2c	                CMP #','            ; Is it a comma?
.3a3bed	f0 25		beq $3a3c14	                BEQ skip_comma      ; Yes: get the next dimension
.3a3bef	c9 90		cmp #$90	                CMP #TOK_RPAREN     ; No: is it a ")"?
.3a3bf1	d0 27		bne $3a3c1a	                BNE syntax_err      ; No: throw a syntax error
.3a3bf3	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3bf6	20 71 61	jsr $3a6171	            JSR ARR_ALLOC
.3a3bf9	c2 20		rep #$20	            REP #$20
.3a3bfb	a5 c0		lda $08c0	                LDA CURRBLOCK       ; Set up the pointer to the array
.3a3bfd	85 23		sta $0823	                STA ARGUMENT1
.3a3bff	e2 20		sep #$20	            SEP #$20
.3a3c01	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a3c03	85 25		sta $0825	                STA ARGUMENT1+2
.3a3c05	64 26		stz $0826	                STZ ARGUMENT1+3
.3a3c07	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Get the type of the values
.3a3c09	09 80		ora #$80	                ORA #$80            ; Make sure we change the type to array
.3a3c0b	85 ea		sta $08ea	                STA TOFINDTYPE      ; And save it back for searching
.3a3c0d	85 27		sta $0827	                STA ARGTYPE1        ; And for the value to set
.3a3c0f	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a3c12	28		plp		                PLP
.3a3c13	60		rts		            RTS
.3a3c14					skip_comma
.3a3c14	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3c17	4c c9 3b	jmp $3a3bc9	                JMP dim_loop
.3a3c1a					syntax_err
.3a3c1a	08		php		            PHP
.3a3c1b	c2 20		rep #$20	            REP #$20
.3a3c1d	48		pha		            PHA
.3a3c1e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3c21	5b		tcd		            TCD
.3a3c22	68		pla		            PLA
.3a3c23	28		plp		            PLP
.3a3c24	e2 20		sep #$20	            SEP #$20
.3a3c26	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3c28	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3c2c	c2 20		rep #$20	            REP #$20
.3a3c2e	29 ff 00	and #$00ff	            AND #$00FF
.3a3c31	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3c34	e2 20		sep #$20	            SEP #$20
.3a3c36	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3c39					overflow
.3a3c39	08		php		            PHP
.3a3c3a	c2 20		rep #$20	            REP #$20
.3a3c3c	48		pha		            PHA
.3a3c3d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3c40	5b		tcd		            TCD
.3a3c41	68		pla		            PLA
.3a3c42	28		plp		            PLP
.3a3c43	e2 20		sep #$20	            SEP #$20
.3a3c45	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a3c47	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3c4b	c2 20		rep #$20	            REP #$20
.3a3c4d	29 ff 00	and #$00ff	            AND #$00FF
.3a3c50	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3c53	e2 20		sep #$20	            SEP #$20
.3a3c55	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3c58					S_READ
.3a3c58	08		php		                PHP
.3a3c59					varloop
.3a3c59	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3c5c	e2 20		sep #$20	            SEP #$20
.3a3c5e	a7 00		lda [$0800]	                LDA [BIP]
.3a3c60	f0 28		beq $3a3c8a	                BEQ done            ; If EOL, we're done
.3a3c62	c9 3a		cmp #$3a	                CMP #':'
.3a3c64	f0 24		beq $3a3c8a	                BEQ done            ; If colon, we're done
.3a3c66	20 94 03	jsr $3a0394	            JSR ISALPHA
.3a3c69	90 21		bcc $3a3c8c	                BCC syntax_err      ; No: it's a syntax error
.3a3c6b	20 51 51	jsr $3a5151	            JSR VAR_FINDNAME
.3a3c6e	90 1c		bcc $3a3c8c	                BCC syntax_err      ; If we didn't get a variable, throw a syntax error
.3a3c70	20 ab 3c	jsr $3a3cab	            JSR NEXTDATA
.3a3c73	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a3c76	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3c79	a7 00		lda [$0800]	                LDA [BIP]           ; Get the next non-space
.3a3c7b	f0 0d		beq $3a3c8a	                BEQ done            ; EOL? We're done
.3a3c7d	c9 3a		cmp #$3a	                CMP #':'            ; Colon? We're done
.3a3c7f	f0 09		beq $3a3c8a	                BEQ done
.3a3c81	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3c83	d0 07		bne $3a3c8c	                BNE syntax_err      ; Nope: syntax error
.3a3c85	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3c88	80 cf		bra $3a3c59	                BRA varloop
.3a3c8a	28		plp		done            PLP
.3a3c8b	60		rts		            RTS
.3a3c8c					syntax_err
.3a3c8c	08		php		            PHP
.3a3c8d	c2 20		rep #$20	            REP #$20
.3a3c8f	48		pha		            PHA
.3a3c90	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3c93	5b		tcd		            TCD
.3a3c94	68		pla		            PLA
.3a3c95	28		plp		            PLP
.3a3c96	e2 20		sep #$20	            SEP #$20
.3a3c98	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3c9a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3c9e	c2 20		rep #$20	            REP #$20
.3a3ca0	29 ff 00	and #$00ff	            AND #$00FF
.3a3ca3	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3ca6	e2 20		sep #$20	            SEP #$20
.3a3ca8	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3cab					NEXTDATA
.3a3cab	08		php		                PHP
.3a3cac	a5 02		lda $0802	                LDA BIP+2           ; Save BIP
.3a3cae	85 42		sta $0842	                STA SAVEBIP+2
.3a3cb0	a5 00		lda $0800	                LDA BIP
.3a3cb2	85 40		sta $0840	                STA SAVEBIP
.3a3cb4	a5 1c		lda $081c	                LDA CURLINE+2       ; Save CURLINE
.3a3cb6	85 46		sta $0846	                STA SAVELINE+2
.3a3cb8	a5 1a		lda $081a	                LDA CURLINE
.3a3cba	85 44		sta $0844	                STA SAVELINE
.3a3cbc	c2 20		rep #$20	            REP #$20
.3a3cbe	a5 3a		lda $083a	                LDA DATABIP+2
.3a3cc0	d0 04		bne $3a3cc6	                BNE data_set
.3a3cc2	a5 38		lda $0838	                LDA DATABIP
.3a3cc4	f0 4e		beq $3a3d14	                BEQ scan_start      ; No: scan for a DATA statement
.3a3cc6	a5 38		lda $0838	data_set        LDA DATABIP         ; Move BIP to the DATA statement
.3a3cc8	85 00		sta $0800	                STA BIP
.3a3cca	a5 3a		lda $083a	                LDA DATABIP+2
.3a3ccc	85 02		sta $0802	                STA BIP+2
.3a3cce	a5 3c		lda $083c	                LDA DATALINE        ; Set CURLINE from DATALINE
.3a3cd0	85 1a		sta $081a	                STA CURLINE
.3a3cd2	a5 3e		lda $083e	                LDA DATALINE+2
.3a3cd4	85 1c		sta $081c	                STA CURLINE+2
.3a3cd6	e2 20		sep #$20	            SEP #$20
.3a3cd8	a7 00		lda [$0800]	                LDA [BIP]           ; Check character at BIP
.3a3cda	f0 53		beq $3a3d2f	                BEQ scan_DATA       ; EOL? scan for a DATA statement
.3a3cdc	c9 3a		cmp #$3a	                CMP #':'            ; Colon?
.3a3cde	f0 4f		beq $3a3d2f	                BEQ scan_DATA       ; ... scan for a DATA statement
.3a3ce0	c9 2c		cmp #$2c	                CMP #','            ; Comma?
.3a3ce2	d0 03		bne $3a3ce7	                BNE skip_parse      ; No: skip leading WS and try to parse
.3a3ce4	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3ce7					skip_parse
.3a3ce7	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3cea	a7 00		lda [$0800]	                LDA [BIP]
.3a3cec	c9 22		cmp #$22	                CMP #CHAR_DQUOTE    ; Is it a quote?
.3a3cee	f0 4e		beq $3a3d3e	                BEQ read_string     ; Yes: process the string
.3a3cf0	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a3cf3	b0 4e		bcs $3a3d43	                BCS read_number     ; Yes: process the number
.3a3cf5					syntax_err
.3a3cf5	08		php		            PHP
.3a3cf6	c2 20		rep #$20	            REP #$20
.3a3cf8	48		pha		            PHA
.3a3cf9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3cfc	5b		tcd		            TCD
.3a3cfd	68		pla		            PLA
.3a3cfe	28		plp		            PLP
.3a3cff	e2 20		sep #$20	            SEP #$20
.3a3d01	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3d03	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3d07	c2 20		rep #$20	            REP #$20
.3a3d09	29 ff 00	and #$00ff	            AND #$00FF
.3a3d0c	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3d0f	e2 20		sep #$20	            SEP #$20
.3a3d11	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3d14					scan_start
.3a3d14	c2 20		rep #$20	            REP #$20
.3a3d16	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT    ; Point CURLINE to the first line
.3a3d19	85 1a		sta $081a	                STA CURLINE
.3a3d1b	a9 36 00	lda #$0036	                LDA #`BASIC_BOT
.3a3d1e	85 1c		sta $081c	                STA CURLINE+2
.3a3d20	18		clc		                CLC
.3a3d21	a5 1a		lda $081a	                LDA CURLINE         ; Point BIP to the first possible token
.3a3d23	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.3a3d26	85 00		sta $0800	                STA BIP
.3a3d28	a5 1c		lda $081c	                LDA CURLINE+2
.3a3d2a	69 00 00	adc #$0000	                ADC #0
.3a3d2d	85 02		sta $0802	                STA BIP+2
.3a3d2f					scan_data
.3a3d2f	e2 20		sep #$20	            SEP #$20
.3a3d31	a9 80		lda #$80	                LDA #$80            ; We don't want to process nesting
.3a3d33	85 35		sta $0835	                STA SKIPNEST
.3a3d35	a9 ab		lda #$ab	                LDA #TOK_DATA       ; We're looking for a DATA token
.3a3d37	85 37		sta $0837	                STA TARGETTOK
.3a3d39	20 95 1f	jsr $3a1f95	            JSR SKIPTOTOK
.3a3d3c	80 a9		bra $3a3ce7	                BRA skip_parse
.3a3d3e					read_string
.3a3d3e	20 39 1a	jsr $3a1a39	            JSR EVALSTRING
.3a3d41	80 03		bra $3a3d46	                BRA done
.3a3d43					read_number
.3a3d43	20 6e 19	jsr $3a196e	            JSR EVALNUMBER
.3a3d46					done
.3a3d46	c2 20		rep #$20	            REP #$20
.3a3d48	a5 00		lda $0800	                LDA BIP             ; Save BIP to DATABIP
.3a3d4a	85 38		sta $0838	                STA DATABIP
.3a3d4c	a5 02		lda $0802	                LDA BIP+2
.3a3d4e	85 3a		sta $083a	                STA DATABIP+2
.3a3d50	a5 1a		lda $081a	                LDA CURLINE         ; Save CURLINE to DATALINE
.3a3d52	85 3c		sta $083c	                STA DATALINE
.3a3d54	a5 1c		lda $081c	                LDA CURLINE+2
.3a3d56	85 3e		sta $083e	                STA DATALINE+2
.3a3d58	a5 44		lda $0844	                LDA SAVELINE        ; Restore CURLINE
.3a3d5a	85 1a		sta $081a	                STA CURLINE
.3a3d5c	a5 46		lda $0846	                LDA SAVELINE+2
.3a3d5e	85 1c		sta $081c	                STA CURLINE+2
.3a3d60	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.3a3d62	85 00		sta $0800	                STA BIP
.3a3d64	a5 42		lda $0842	                LDA SAVEBIP+2
.3a3d66	85 02		sta $0802	                STA BIP+2
.3a3d68	28		plp		                PLP
.3a3d69	60		rts		            RTS
.3a3d6a					S_DATA
.3a3d6a	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a3d6d	60		rts		            RTS
.3a3d6e					S_RESTORE
.3a3d6e	64 38		stz $0838	                STZ DATABIP         ; Just set DATABIP to 0
.3a3d70	64 3a		stz $083a	                STZ DATABIP+2       ; The next READ will move it to the first DATA
.3a3d72	64 3c		stz $083c	                STZ DATALINE        ; Set DATALINE to 0
.3a3d74	64 3e		stz $083e	                STZ DATALINE+2
.3a3d76	60		rts		            RTS
.3a3d77					S_CLS
.3a3d77	20 24 00	jsr $3a0024	            JSR CLSCREEN
.3a3d7a	60		rts		            RTS
.3a3d7b					S_POKEL
.3a3d7b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3d7e	c2 20		rep #$20	            REP #$20
.3a3d80	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a3d82	48		pha		                PHA
.3a3d83	a5 23		lda $0823	                LDA ARGUMENT1
.3a3d85	48		pha		                PHA
.3a3d86	e2 20		sep #$20	            SEP #$20
.3a3d88	a7 00		lda [$0800]	                LDA [BIP]
.3a3d8a	c9 2c		cmp #$2c	                CMP #','
.3a3d8c	d0 22		bne $3a3db0	                BNE syntax_err
.3a3d8e	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3d91	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3d94	c2 20		rep #$20	            REP #$20
.3a3d96	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a3d98	d0 35		bne $3a3dcf	                BNE range_err
.3a3d9a	68		pla		                PLA                 ; Pull the target address from the stack
.3a3d9b	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a3d9d	68		pla		                PLA
.3a3d9e	85 0a		sta $080a	                STA INDEX+2
.3a3da0	c2 20		rep #$20	            REP #$20
.3a3da2	a5 23		lda $0823	                LDA ARGUMENT1
.3a3da4	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a3da6	e2 20		sep #$20	            SEP #$20
.3a3da8	a0 02 00	ldy #$0002	                LDY #2
.3a3dab	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3dad	97 08		sta [$0808],y	                STA [INDEX],Y
.3a3daf	60		rts		            RTS
.3a3db0					syntax_err
.3a3db0	08		php		            PHP
.3a3db1	c2 20		rep #$20	            REP #$20
.3a3db3	48		pha		            PHA
.3a3db4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3db7	5b		tcd		            TCD
.3a3db8	68		pla		            PLA
.3a3db9	28		plp		            PLP
.3a3dba	e2 20		sep #$20	            SEP #$20
.3a3dbc	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3dbe	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3dc2	c2 20		rep #$20	            REP #$20
.3a3dc4	29 ff 00	and #$00ff	            AND #$00FF
.3a3dc7	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3dca	e2 20		sep #$20	            SEP #$20
.3a3dcc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3dcf					range_err
.3a3dcf	08		php		            PHP
.3a3dd0	c2 20		rep #$20	            REP #$20
.3a3dd2	48		pha		            PHA
.3a3dd3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3dd6	5b		tcd		            TCD
.3a3dd7	68		pla		            PLA
.3a3dd8	28		plp		            PLP
.3a3dd9	e2 20		sep #$20	            SEP #$20
.3a3ddb	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3ddd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3de1	c2 20		rep #$20	            REP #$20
.3a3de3	29 ff 00	and #$00ff	            AND #$00FF
.3a3de6	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3de9	e2 20		sep #$20	            SEP #$20
.3a3deb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3dee					S_POKEW
.3a3dee	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3df1	c2 20		rep #$20	            REP #$20
.3a3df3	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a3df5	48		pha		                PHA
.3a3df6	a5 23		lda $0823	                LDA ARGUMENT1
.3a3df8	48		pha		                PHA
.3a3df9	e2 20		sep #$20	            SEP #$20
.3a3dfb	a7 00		lda [$0800]	                LDA [BIP]
.3a3dfd	c9 2c		cmp #$2c	                CMP #','
.3a3dff	d0 19		bne $3a3e1a	                BNE syntax_err
.3a3e01	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3e04	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3e07	c2 20		rep #$20	            REP #$20
.3a3e09	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3e0b	d0 2c		bne $3a3e39	                BNE range_err
.3a3e0d	68		pla		                PLA                 ; Pull the target address from the stack
.3a3e0e	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a3e10	68		pla		                PLA
.3a3e11	85 0a		sta $080a	                STA INDEX+2
.3a3e13	c2 20		rep #$20	            REP #$20
.3a3e15	a5 23		lda $0823	                LDA ARGUMENT1
.3a3e17	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a3e19	60		rts		            RTS
.3a3e1a					syntax_err
.3a3e1a	08		php		            PHP
.3a3e1b	c2 20		rep #$20	            REP #$20
.3a3e1d	48		pha		            PHA
.3a3e1e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3e21	5b		tcd		            TCD
.3a3e22	68		pla		            PLA
.3a3e23	28		plp		            PLP
.3a3e24	e2 20		sep #$20	            SEP #$20
.3a3e26	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3e28	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3e2c	c2 20		rep #$20	            REP #$20
.3a3e2e	29 ff 00	and #$00ff	            AND #$00FF
.3a3e31	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3e34	e2 20		sep #$20	            SEP #$20
.3a3e36	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3e39					range_err
.3a3e39	08		php		            PHP
.3a3e3a	c2 20		rep #$20	            REP #$20
.3a3e3c	48		pha		            PHA
.3a3e3d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3e40	5b		tcd		            TCD
.3a3e41	68		pla		            PLA
.3a3e42	28		plp		            PLP
.3a3e43	e2 20		sep #$20	            SEP #$20
.3a3e45	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3e47	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3e4b	c2 20		rep #$20	            REP #$20
.3a3e4d	29 ff 00	and #$00ff	            AND #$00FF
.3a3e50	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3e53	e2 20		sep #$20	            SEP #$20
.3a3e55	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3e58					S_POKE
.3a3e58	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3e5b	c2 20		rep #$20	            REP #$20
.3a3e5d	a5 25		lda $0825	                LDA ARGUMENT1+2     ; And save it to the stack
.3a3e5f	48		pha		                PHA
.3a3e60	a5 23		lda $0823	                LDA ARGUMENT1
.3a3e62	48		pha		                PHA
.3a3e63	e2 20		sep #$20	            SEP #$20
.3a3e65	a7 00		lda [$0800]	                LDA [BIP]
.3a3e67	c9 2c		cmp #$2c	                CMP #','
.3a3e69	d0 1f		bne $3a3e8a	                BNE syntax_err
.3a3e6b	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3e6e	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3e71	e2 20		sep #$20	            SEP #$20
.3a3e73	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Make sure the value is from 0 - 255
.3a3e75	d0 32		bne $3a3ea9	                BNE range_err
.3a3e77	c2 20		rep #$20	            REP #$20
.3a3e79	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3e7b	d0 2c		bne $3a3ea9	                BNE range_err
.3a3e7d	68		pla		                PLA                 ; Pull the target address from the stack
.3a3e7e	85 08		sta $0808	                STA INDEX           ; and into INDEX
.3a3e80	68		pla		                PLA
.3a3e81	85 0a		sta $080a	                STA INDEX+2
.3a3e83	e2 20		sep #$20	            SEP #$20
.3a3e85	a5 23		lda $0823	                LDA ARGUMENT1
.3a3e87	87 08		sta [$0808]	                STA [INDEX]         ; And write it to the address
.3a3e89	60		rts		            RTS
.3a3e8a					syntax_err
.3a3e8a	08		php		            PHP
.3a3e8b	c2 20		rep #$20	            REP #$20
.3a3e8d	48		pha		            PHA
.3a3e8e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3e91	5b		tcd		            TCD
.3a3e92	68		pla		            PLA
.3a3e93	28		plp		            PLP
.3a3e94	e2 20		sep #$20	            SEP #$20
.3a3e96	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3e98	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3e9c	c2 20		rep #$20	            REP #$20
.3a3e9e	29 ff 00	and #$00ff	            AND #$00FF
.3a3ea1	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3ea4	e2 20		sep #$20	            SEP #$20
.3a3ea6	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3ea9					range_err
.3a3ea9	08		php		            PHP
.3a3eaa	c2 20		rep #$20	            REP #$20
.3a3eac	48		pha		            PHA
.3a3ead	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3eb0	5b		tcd		            TCD
.3a3eb1	68		pla		            PLA
.3a3eb2	28		plp		            PLP
.3a3eb3	e2 20		sep #$20	            SEP #$20
.3a3eb5	a9 09		lda #$09	            LDA #ERR_RANGE
.3a3eb7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3ebb	c2 20		rep #$20	            REP #$20
.3a3ebd	29 ff 00	and #$00ff	            AND #$00FF
.3a3ec0	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3ec3	e2 20		sep #$20	            SEP #$20
.3a3ec5	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3ec8					S_STOP
.3a3ec8	08		php		            PHP
.3a3ec9	c2 20		rep #$20	            REP #$20
.3a3ecb	48		pha		            PHA
.3a3ecc	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3ecf	5b		tcd		            TCD
.3a3ed0	68		pla		            PLA
.3a3ed1	28		plp		            PLP
.3a3ed2	e2 20		sep #$20	            SEP #$20
.3a3ed4	a9 01		lda #$01	            LDA #ERR_BREAK
.3a3ed6	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3eda	c2 20		rep #$20	            REP #$20
.3a3edc	29 ff 00	and #$00ff	            AND #$00FF
.3a3edf	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3ee2	e2 20		sep #$20	            SEP #$20
.3a3ee4	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3ee7					S_REM
.3a3ee7	08		php		                PHP
.3a3ee8	e2 20		sep #$20	            SEP #$20
.3a3eea	a7 00		lda [$0800]	rem_loop        LDA [BIP]
.3a3eec	f0 05		beq $3a3ef3	                BEQ done
.3a3eee	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3ef1	80 f7		bra $3a3eea	                BRA rem_loop
.3a3ef3	28		plp		done            PLP
.3a3ef4	60		rts		            RTS
.3a3ef5					S_EXIT
.3a3ef5	08		php		                PHP
.3a3ef6	28		plp		                PLP
.3a3ef7	60		rts		            RTS
.3a3ef8					S_DO
.3a3ef8	08		php		                PHP
.3a3ef9	28		plp		                PLP
.3a3efa	60		rts		            RTS
.0000					DO_RECORD
>0000					BIP             .dword  ?
>0004					CURLINE         .dword  ?
.3a3efb					S_LOOP
.3a3efb	08		php		                PHP
.3a3efc	28		plp		                PLP
.3a3efd	60		rts		            RTS
.3a3efe					S_FOR
.3a3efe	08		php		                PHP
.3a3eff	c2 20		rep #$20	            REP #$20
.3a3f01	a5 1c		lda $081c	                LDA CURLINE+2
.3a3f03	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f06	a5 1a		lda $081a	                LDA CURLINE
.3a3f08	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f0b	a5 02		lda $0802	                LDA BIP+2           ; Save current BIP
.3a3f0d	48		pha		                PHA
.3a3f0e	a5 00		lda $0800	                LDA BIP
.3a3f10	48		pha		                PHA
.3a3f11	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a3f14	a5 02		lda $0802	                LDA BIP+2           ; Save the BIP for the next statement to the RETURN stack
.3a3f16	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f19	a5 00		lda $0800	                LDA BIP
.3a3f1b	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f1e	68		pla		                PLA                 ; Restore the original BIP
.3a3f1f	85 00		sta $0800	                STA BIP
.3a3f21	68		pla		                PLA
.3a3f22	85 02		sta $0802	                STA BIP+2
.3a3f24	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3f27					get_name
.3a3f27	20 51 51	jsr $3a5151	            JSR VAR_FINDNAME
.3a3f2a	b0 1f		bcs $3a3f4b	                BCS push_name       ; If we didn't find a name, thrown an error
.3a3f2c	08		php		            PHP
.3a3f2d	c2 20		rep #$20	            REP #$20
.3a3f2f	48		pha		            PHA
.3a3f30	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3f33	5b		tcd		            TCD
.3a3f34	68		pla		            PLA
.3a3f35	28		plp		            PLP
.3a3f36	e2 20		sep #$20	            SEP #$20
.3a3f38	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a3f3a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3f3e	c2 20		rep #$20	            REP #$20
.3a3f40	29 ff 00	and #$00ff	            AND #$00FF
.3a3f43	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3f46	e2 20		sep #$20	            SEP #$20
.3a3f48	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a3f4b					push_name
.3a3f4b	e2 20		sep #$20	            SEP #$20
.3a3f4d	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; To the return stack
.3a3f4f	20 5d 1c	jsr $3a1c5d	            JSR PHRETURNB
.3a3f52	a5 e9		lda $08e9	                LDA TOFIND+2
.3a3f54	20 5d 1c	jsr $3a1c5d	            JSR PHRETURNB
.3a3f57	c2 20		rep #$20	            REP #$20
.3a3f59	a5 e7		lda $08e7	                LDA TOFIND
.3a3f5b	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f5e					else
.3a3f5e	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a3f61	e2 20		sep #$20	            SEP #$20
.3a3f63	a7 00		lda [$0800]	                LDA [BIP]
.3a3f65	c9 8a		cmp #$8a	                CMP #TOK_EQ
.3a3f67	d0 6a		bne $3a3fd3	                BNE syntax_err      ; If not found: signal an syntax error
.3a3f69	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Verify type of variable
.3a3f6b	c9 00		cmp #$00	                CMP #TYPE_INTEGER   ; Is it integer?
.3a3f6d	f0 04		beq $3a3f73	                BEQ process_initial ; Yes: it's ok
.3a3f6f	c9 01		cmp #$01	                CMP #TYPE_FLOAT     ; Is it floating point?
.3a3f71	f0 00		beq $3a3f73	                BEQ process_initial ; Yes: it's ok
.3a3f73					process_initial
.3a3f73	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3f76	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3f79	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a3f7c	e2 20		sep #$20	            SEP #$20
.3a3f7e	a9 9c		lda #$9c	                LDA #TOK_TO         ; Expect the next token to be TO
.3a3f80	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a3f83	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3f86	c2 20		rep #$20	            REP #$20
.3a3f88	a5 27		lda $0827	                LDA ARGTYPE1
.3a3f8a	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f8d	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3f8f	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f92	a5 23		lda $0823	                LDA ARGUMENT1
.3a3f94	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3f97	e2 20		sep #$20	            SEP #$20
.3a3f99	a9 9d		lda #$9d	                LDA #TOK_STEP
.3a3f9b	85 37		sta $0837	                STA TARGETTOK
.3a3f9d	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a3fa0	90 1b		bcc $3a3fbd	                BCC default_inc     ; Not found: set a default increment of 1
.3a3fa2	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a3fa5	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a3fa8	e2 20		sep #$20	            SEP #$20
.3a3faa	a5 27		lda $0827	                LDA ARGTYPE1        ; Push the result as the increment
.3a3fac	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3faf	c2 20		rep #$20	            REP #$20
.3a3fb1	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a3fb3	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3fb6	a5 23		lda $0823	                LDA ARGUMENT1
.3a3fb8	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3fbb	80 14		bra $3a3fd1	                BRA done
.3a3fbd					default_inc
.3a3fbd	c2 20		rep #$20	            REP #$20
.3a3fbf	a9 00 00	lda #$0000	                LDA #TYPE_INTEGER
.3a3fc2	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3fc5	a9 00 00	lda #$0000	                LDA #0
.3a3fc8	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3fcb	a9 01 00	lda #$0001	                LDA #1
.3a3fce	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a3fd1	28		plp		done            PLP
.3a3fd2	60		rts		            RTS
.3a3fd3					syntax_err
.3a3fd3	08		php		            PHP
.3a3fd4	c2 20		rep #$20	            REP #$20
.3a3fd6	48		pha		            PHA
.3a3fd7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a3fda	5b		tcd		            TCD
.3a3fdb	68		pla		            PLA
.3a3fdc	28		plp		            PLP
.3a3fdd	e2 20		sep #$20	            SEP #$20
.3a3fdf	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a3fe1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a3fe5	c2 20		rep #$20	            REP #$20
.3a3fe7	29 ff 00	and #$00ff	            AND #$00FF
.3a3fea	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a3fed	e2 20		sep #$20	            SEP #$20
.3a3fef	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.0000					FOR_RECORD
>0000					INCREMENT       .dword  ?
>0004					INCTYPE         .word   ?
>0006					FINAL           .dword  ?
>000a					FINALTYPE       .word   ?
>000c					VARIBLE         .dword  ?
>0010					VARTYPE         .word   ?
>0012					BIP             .dword  ?
>0016					CURLINE         .dword  ?
.3a3ff2					S_NEXT
.3a3ff2	08		php		                PHP
.3a3ff3	8b		phb		                PHB
.3a3ff4	08		php		            PHP
.3a3ff5	e2 20		sep #$20	            SEP #$20
.3a3ff7	48		pha		            PHA
.3a3ff8	a9 00		lda #$00	            LDA #0
.3a3ffa	48		pha		            PHA
.3a3ffb	ab		plb		            PLB
.3a3ffc	68		pla		            PLA
.3a3ffd	28		plp		            PLP
.3a3ffe	08		php		            PHP
.3a3fff	c2 20		rep #$20	            REP #$20
.3a4001	48		pha		            PHA
.3a4002	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a4005	5b		tcd		            TCD
.3a4006	68		pla		            PLA
.3a4007	28		plp		            PLP
.3a4008	c2 30		rep #$30	            REP #$30
.3a400a	a4 33		ldy $0833	                LDY RETURNSP                    ; Y := pointer to first byte of the FOR record
.3a400c	c8		iny		                INY                             ; RETURNSP points to the first free slot, so move up 2 bytes
.3a400d	c8		iny		                INY
.3a400e	c2 20		rep #$20	            REP #$20
.3a4010	b9 0c 00	lda $000c,y	                LDA #FOR_RECORD.VARIBLE,B,Y     ; TOFIND := FOR_RECORD.VARIABLE
.3a4013	85 e7		sta $08e7	                STA TOFIND
.3a4015	b9 0e 00	lda $000e,y	                LDA #FOR_RECORD.VARIBLE+2,B,Y
.3a4018	e2 20		sep #$20	            SEP #$20
.3a401a	85 e9		sta $08e9	                STA TOFIND+2
.3a401c	b9 10 00	lda $0010,y	                LDA #FOR_RECORD.VARTYPE,B,Y
.3a401f	85 ea		sta $08ea	                STA TOFINDTYPE
.3a4021	c2 20		rep #$20	            REP #$20
.3a4023	5a		phy		                PHY
.3a4024	20 52 4f	jsr $3a4f52	            JSR VAR_REF
.3a4027	7a		ply		                PLY
.3a4028	c2 20		rep #$20	            REP #$20
.3a402a	b9 00 00	lda $0000,y	                LDA #FOR_RECORD.INCREMENT,B,Y   ; ARGUMENT2 := FOR_RECORD.INCREMENT
.3a402d	85 29		sta $0829	                STA ARGUMENT2
.3a402f	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y
.3a4032	85 2b		sta $082b	                STA ARGUMENT2+2
.3a4034	e2 20		sep #$20	            SEP #$20
.3a4036	b9 04 00	lda $0004,y	                LDA #FOR_RECORD.INCTYPE,B,Y
.3a4039	85 2d		sta $082d	                STA ARGTYPE2
.3a403b	c2 20		rep #$20	            REP #$20
.3a403d	5a		phy		                PHY
.3a403e	20 fd 25	jsr $3a25fd	            JSR OP_PLUS
.3a4041	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a4044	7a		ply		                PLY
.3a4045	c2 20		rep #$20	            REP #$20
.3a4047	b9 06 00	lda $0006,y	                LDA #FOR_RECORD.FINAL,B,Y       ; ARGUMENT2 := FOR_RECORD.FINAL
.3a404a	85 29		sta $0829	                STA ARGUMENT2
.3a404c	b9 08 00	lda $0008,y	                LDA #FOR_RECORD.FINAL+2,B,Y
.3a404f	85 2b		sta $082b	                STA ARGUMENT2+2
.3a4051	e2 20		sep #$20	            SEP #$20
.3a4053	b9 0a 00	lda $000a,y	                LDA #FOR_RECORD.FINALTYPE,B,Y
.3a4056	85 2d		sta $082d	                STA ARGTYPE2
.3a4058	c2 20		rep #$20	            REP #$20
.3a405a	b9 02 00	lda $0002,y	                LDA #FOR_RECORD.INCREMENT+2,B,Y ; Check the increment's sign
.3a405d	30 0a		bmi $3a4069	                BMI going_down
.3a405f					going_up
.3a405f	20 4c 28	jsr $3a284c	            JSR OP_LTE
.3a4062	20 cc 04	jsr $3a04cc	            JSR IS_ARG1_Z
.3a4065	f0 28		beq $3a408f	                BEQ end_loop                    ; No: end the loop
.3a4067	80 08		bra $3a4071	                BRA loop_back                   ; Yes: loop back
.3a4069					going_down
.3a4069	20 0c 28	jsr $3a280c	            JSR OP_GTE
.3a406c	20 cc 04	jsr $3a04cc	            JSR IS_ARG1_Z
.3a406f	f0 1e		beq $3a408f	                BEQ end_loop                    ; No: end the loop
.3a4071					loop_back
.3a4071	c2 20		rep #$20	            REP #$20
.3a4073	b9 12 00	lda $0012,y	                LDA #FOR_RECORD.BIP,B,Y
.3a4076	85 00		sta $0800	                STA BIP
.3a4078	b9 14 00	lda $0014,y	                LDA #FOR_RECORD.BIP+2,B,Y
.3a407b	85 02		sta $0802	                STA BIP+2
.3a407d	b9 16 00	lda $0016,y	                LDA #FOR_RECORD.CURLINE,B,Y     ; CURLINE := FOR_RECORD.CURLINE
.3a4080	85 1a		sta $081a	                STA CURLINE
.3a4082	b9 18 00	lda $0018,y	                LDA #FOR_RECORD.CURLINE+2,B,Y
.3a4085	85 1c		sta $081c	                STA CURLINE+2
.3a4087	e2 20		sep #$20	            SEP #$20
.3a4089	a9 03		lda #$03	                LDA #EXEC_RETURN
.3a408b	85 dc		sta $08dc	                STA EXECACTION
.3a408d	80 17		bra $3a40a6	                BRA done
.3a408f					end_loop
.3a408f	a2 23 08	ldx #$0823	                LDX #ARGUMENT1
.3a4092	20 4d 18	jsr $3a184d	            JSR PLARGUMENT
.3a4095	c2 20		rep #$20	            REP #$20
.3a4097	18		clc		                CLC
.3a4098	a5 33		lda $0833	                LDA RETURNSP
.3a409a	69 1a 00	adc #$001a	                ADC #size(FOR_RECORD)           ; Move pointer by number of bytes in a FOR record
.3a409d	85 33		sta $0833	                STA RETURNSP
.3a409f	a5 35		lda $0835	                LDA RETURNSP+2
.3a40a1	69 00 00	adc #$0000	                ADC #0
.3a40a4	85 35		sta $0835	                STA RETURNSP+2
.3a40a6	ab		plb		done            PLB
.3a40a7	28		plp		                PLP
.3a40a8	60		rts		            RTS
.3a40a9					S_GOSUB
.3a40a9	08		php		                PHP
.3a40aa	a5 1a		lda $081a	                LDA CURLINE                 ; Save the current line for later
.3a40ac	48		pha		                PHA
.3a40ad	a5 1c		lda $081c	                LDA CURLINE+2
.3a40af	48		pha		                PHA
.3a40b0	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a40b3	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a40b6	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.3a40b8	f0 26		beq $3a40e0	                BEQ syntax_err              ; If 0, no number was found... syntax error
.3a40ba	20 3d 22	jsr $3a223d	            JSR FINDLINE
.3a40bd	90 42		bcc $3a4101	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a40bf	e2 20		sep #$20	            SEP #$20
.3a40c1	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a40c3	85 dc		sta $08dc	                STA EXECACTION
.3a40c5	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a40c8	c2 20		rep #$20	            REP #$20
.3a40ca	68		pla		                PLA                         ; Save the old value of CURLINE to the RETURN stack
.3a40cb	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a40ce	68		pla		                PLA
.3a40cf	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a40d2	a5 02		lda $0802	                LDA BIP+2                   ; Save the BASIC Instruction Pointer to the RETURN stack
.3a40d4	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a40d7	a5 00		lda $0800	                LDA BIP
.3a40d9	20 46 1c	jsr $3a1c46	            JSR PHRETURN
.3a40dc	e6 31		inc $0831	                INC GOSUBDEPTH              ; Increase the count of GOSUBs on the stack
.3a40de	28		plp		                PLP
.3a40df	60		rts		            RTS
.3a40e0	68		pla		syntax_err      PLA
.3a40e1	68		pla		                PLA
.3a40e2	08		php		            PHP
.3a40e3	c2 20		rep #$20	            REP #$20
.3a40e5	48		pha		            PHA
.3a40e6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a40e9	5b		tcd		            TCD
.3a40ea	68		pla		            PLA
.3a40eb	28		plp		            PLP
.3a40ec	e2 20		sep #$20	            SEP #$20
.3a40ee	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a40f0	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a40f4	c2 20		rep #$20	            REP #$20
.3a40f6	29 ff 00	and #$00ff	            AND #$00FF
.3a40f9	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a40fc	e2 20		sep #$20	            SEP #$20
.3a40fe	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4101	68		pla		not_found       PLA
.3a4102	68		pla		                PLA
.3a4103	08		php		            PHP
.3a4104	c2 20		rep #$20	            REP #$20
.3a4106	48		pha		            PHA
.3a4107	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a410a	5b		tcd		            TCD
.3a410b	68		pla		            PLA
.3a410c	28		plp		            PLP
.3a410d	e2 20		sep #$20	            SEP #$20
.3a410f	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a4111	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4115	c2 20		rep #$20	            REP #$20
.3a4117	29 ff 00	and #$00ff	            AND #$00FF
.3a411a	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a411d	e2 20		sep #$20	            SEP #$20
.3a411f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4122					S_RETURN
.3a4122	08		php		                PHP
.3a4123	c2 30		rep #$30	            REP #$30
.3a4125	a5 31		lda $0831	                LDA GOSUBDEPTH              ; Check that there is at least on GOSUB on the stack
.3a4127	f0 1e		beq $3a4147	                BEQ underflow               ; No? It's a stack underflow error
.3a4129	20 68 1c	jsr $3a1c68	            JSR PLRETURN
.3a412c	85 00		sta $0800	                STA BIP
.3a412e	20 68 1c	jsr $3a1c68	            JSR PLRETURN
.3a4131	85 02		sta $0802	                STA BIP+2
.3a4133	20 68 1c	jsr $3a1c68	            JSR PLRETURN
.3a4136	85 1a		sta $081a	                STA CURLINE
.3a4138	20 68 1c	jsr $3a1c68	            JSR PLRETURN
.3a413b	85 1c		sta $081c	                STA CURLINE+2
.3a413d	c6 31		dec $0831	                DEC GOSUBDEPTH              ; Indicate we've popped that GOSUB off the stack
.3a413f	e2 20		sep #$20	            SEP #$20
.3a4141	a9 03		lda #$03	                LDA #EXEC_RETURN
.3a4143	85 dc		sta $08dc	                STA EXECACTION
.3a4145	28		plp		                PLP
.3a4146	60		rts		            RTS
.3a4147					underflow
.3a4147	08		php		            PHP
.3a4148	c2 20		rep #$20	            REP #$20
.3a414a	48		pha		            PHA
.3a414b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a414e	5b		tcd		            TCD
.3a414f	68		pla		            PLA
.3a4150	28		plp		            PLP
.3a4151	e2 20		sep #$20	            SEP #$20
.3a4153	a9 07		lda #$07	            LDA #ERR_STACKUNDER
.3a4155	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4159	c2 20		rep #$20	            REP #$20
.3a415b	29 ff 00	and #$00ff	            AND #$00FF
.3a415e	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4161	e2 20		sep #$20	            SEP #$20
.3a4163	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4166					S_IF
.3a4166	08		php		                PHP
.3a4167	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a416a	20 cc 04	jsr $3a04cc	            JSR IS_ARG1_Z
.3a416d	f0 1c		beq $3a418b	                BEQ is_false                ; If so, handle the FALSE case
.3a416f	e2 20		sep #$20	            SEP #$20
.3a4171	a9 97		lda #$97	                LDA #TOK_THEN               ; Verify that the next token is THEN and eat it
.3a4173	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4176	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a4179	20 cc 04	jsr $3a04cc	            JSR IS_ARG1_Z
.3a417c	f0 12		beq $3a4190	                BEQ syntax_err              ; If not, we have a syntax error
.3a417e	20 3d 22	jsr $3a223d	            JSR FINDLINE
.3a4181	90 2c		bcc $3a41af	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a4183	e2 20		sep #$20	            SEP #$20
.3a4185	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a4187	85 dc		sta $08dc	                STA EXECACTION
.3a4189	80 03		bra $3a418e	                BRA done
.3a418b					is_false
.3a418b	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a418e	28		plp		done            PLP
.3a418f	60		rts		            RTS
.3a4190					syntax_err
.3a4190	08		php		            PHP
.3a4191	c2 20		rep #$20	            REP #$20
.3a4193	48		pha		            PHA
.3a4194	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4197	5b		tcd		            TCD
.3a4198	68		pla		            PLA
.3a4199	28		plp		            PLP
.3a419a	e2 20		sep #$20	            SEP #$20
.3a419c	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a419e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a41a2	c2 20		rep #$20	            REP #$20
.3a41a4	29 ff 00	and #$00ff	            AND #$00FF
.3a41a7	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a41aa	e2 20		sep #$20	            SEP #$20
.3a41ac	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a41af					not_found
.3a41af	08		php		            PHP
.3a41b0	c2 20		rep #$20	            REP #$20
.3a41b2	48		pha		            PHA
.3a41b3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a41b6	5b		tcd		            TCD
.3a41b7	68		pla		            PLA
.3a41b8	28		plp		            PLP
.3a41b9	e2 20		sep #$20	            SEP #$20
.3a41bb	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a41bd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a41c1	c2 20		rep #$20	            REP #$20
.3a41c3	29 ff 00	and #$00ff	            AND #$00FF
.3a41c6	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a41c9	e2 20		sep #$20	            SEP #$20
.3a41cb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a41ce					S_END
.3a41ce	08		php		                PHP
.3a41cf	e2 20		sep #$20	            SEP #$20
.3a41d1	a9 01		lda #$01	                LDA #EXEC_STOP
.3a41d3	85 dc		sta $08dc	                STA EXECACTION
.3a41d5	28		plp		                PLP
.3a41d6	60		rts		            RTS
.3a41d7					S_GOTO
.3a41d7	08		php		                PHP
.3a41d8	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a41db	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a41de	a5 23		lda $0823	                LDA ARGUMENT1               ; Check the number
.3a41e0	f0 0d		beq $3a41ef	                BEQ syntax_err              ; If 0, no number was found... syntax error
.3a41e2	20 3d 22	jsr $3a223d	            JSR FINDLINE
.3a41e5	90 27		bcc $3a420e	                BCC not_found               ; If not found... LINE NOT FOUND error
.3a41e7	e2 20		sep #$20	            SEP #$20
.3a41e9	a9 02		lda #$02	                LDA #EXEC_GOTO
.3a41eb	85 dc		sta $08dc	                STA EXECACTION
.3a41ed	28		plp		                PLP
.3a41ee	60		rts		            RTS
.3a41ef					syntax_err
.3a41ef	08		php		            PHP
.3a41f0	c2 20		rep #$20	            REP #$20
.3a41f2	48		pha		            PHA
.3a41f3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a41f6	5b		tcd		            TCD
.3a41f7	68		pla		            PLA
.3a41f8	28		plp		            PLP
.3a41f9	e2 20		sep #$20	            SEP #$20
.3a41fb	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a41fd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4201	c2 20		rep #$20	            REP #$20
.3a4203	29 ff 00	and #$00ff	            AND #$00FF
.3a4206	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4209	e2 20		sep #$20	            SEP #$20
.3a420b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a420e					not_found
.3a420e	08		php		            PHP
.3a420f	c2 20		rep #$20	            REP #$20
.3a4211	48		pha		            PHA
.3a4212	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4215	5b		tcd		            TCD
.3a4216	68		pla		            PLA
.3a4217	28		plp		            PLP
.3a4218	e2 20		sep #$20	            SEP #$20
.3a421a	a9 06		lda #$06	            LDA #ERR_NOLINE
.3a421c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4220	c2 20		rep #$20	            REP #$20
.3a4222	29 ff 00	and #$00ff	            AND #$00FF
.3a4225	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4228	e2 20		sep #$20	            SEP #$20
.3a422a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a422d					S_CLR
.3a422d	20 ef 17	jsr $3a17ef	            JSR INITEVALSP
.3a4230	20 38 0f	jsr $3a0f38	            JSR INITHEAP
.3a4233	20 51 4e	jsr $3a4e51	            JSR INITVARS
.3a4236	60		rts		            RTS
.3a4237					S_LET
.3a4237	08		php		                PHP
.3a4238	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.3a423a	10 03		bpl $3a423f	                BPL get_name        ; If it's not a token, try to find the variable name
.3a423c	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a423f					get_name
.3a423f	20 51 51	jsr $3a5151	            JSR VAR_FINDNAME
.3a4242	b0 03		bcs $3a4247	                BCS check_array     ; If we didn't find a name, thrown an error
.3a4244	4c ae 42	jmp $3a42ae	                JMP syntax_err
.3a4247					check_array
.3a4247	e2 20		sep #$20	            SEP #$20
.3a4249	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a424c	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it a "("
.3a424e	d0 0e		bne $3a425e	                BNE get_value       ; No: it's a scalar assignment, look for the "="
.3a4250	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4252	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4255	a9 00		lda #$00	                LDA #0
.3a4257	8f 00 4d 00	sta $004d00	                STA @lARRIDXBUF     ; Blank out the array index buffer
.3a425b	20 71 19	jsr $3a1971	            JSR ARR_GETIDX
.3a425e					get_value
.3a425e	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a4261	e2 20		sep #$20	            SEP #$20
.3a4263	a7 00		lda [$0800]	                LDA [BIP]
.3a4265	c9 8a		cmp #$8a	                CMP #TOK_EQ
.3a4267	f0 03		beq $3a426c	                BEQ found_eq        ; If not found: signal an syntax error
.3a4269	4c ae 42	jmp $3a42ae	                JMP syntax_err
.3a426c					found_eq
.3a426c	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a426f	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Save the variable name for later
.3a4271	48		pha		                PHA                 ; (it will get over-written by variable references)
.3a4272	a5 e9		lda $08e9	                LDA TOFIND+2
.3a4274	48		pha		                PHA
.3a4275	a5 e8		lda $08e8	                LDA TOFIND+1
.3a4277	48		pha		                PHA
.3a4278	a5 e7		lda $08e7	                LDA TOFIND
.3a427a	48		pha		                PHA
.3a427b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a427e	68		pla		                PLA                 ; Restore the variable name
.3a427f	85 e7		sta $08e7	                STA TOFIND
.3a4281	68		pla		                PLA
.3a4282	85 e8		sta $08e8	                STA TOFIND+1
.3a4284	68		pla		                PLA
.3a4285	85 e9		sta $08e9	                STA TOFIND+2
.3a4287	68		pla		                PLA
.3a4288	85 ea		sta $08ea	                STA TOFINDTYPE
.3a428a	29 80		and #$80	                AND #$80            ; Is it an array we're setting?
.3a428c	f0 1b		beq $3a42a9	                BEQ set_scalar      ; No: do a scalar variable set
.3a428e	20 c4 4e	jsr $3a4ec4	            JSR VAR_FIND
.3a4291	90 3a		bcc $3a42cd	                BCC notfound_err
.3a4293	c2 20		rep #$20	            REP #$20
.3a4295	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a4298	b7 08		lda [$0808],y	                LDA [INDEX],Y       ; Save the pointer to the array to CURRBLOCK
.3a429a	85 c0		sta $08c0	                STA CURRBLOCK
.3a429c	e2 20		sep #$20	            SEP #$20
.3a429e	c8		iny		                INY
.3a429f	c8		iny		                INY
.3a42a0	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a42a2	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a42a4	20 52 63	jsr $3a6352	            JSR ARR_SET
.3a42a7	80 03		bra $3a42ac	                BRA done            ; and we're finished!
.3a42a9					set_scalar
.3a42a9	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a42ac					done
.3a42ac	28		plp		                PLP
.3a42ad	60		rts		            RTS
.3a42ae					syntax_err
.3a42ae	08		php		            PHP
.3a42af	c2 20		rep #$20	            REP #$20
.3a42b1	48		pha		            PHA
.3a42b2	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a42b5	5b		tcd		            TCD
.3a42b6	68		pla		            PLA
.3a42b7	28		plp		            PLP
.3a42b8	e2 20		sep #$20	            SEP #$20
.3a42ba	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a42bc	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a42c0	c2 20		rep #$20	            REP #$20
.3a42c2	29 ff 00	and #$00ff	            AND #$00FF
.3a42c5	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a42c8	e2 20		sep #$20	            SEP #$20
.3a42ca	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a42cd					notfound_err
.3a42cd	08		php		            PHP
.3a42ce	c2 20		rep #$20	            REP #$20
.3a42d0	48		pha		            PHA
.3a42d1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a42d4	5b		tcd		            TCD
.3a42d5	68		pla		            PLA
.3a42d6	28		plp		            PLP
.3a42d7	e2 20		sep #$20	            SEP #$20
.3a42d9	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a42db	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a42df	c2 20		rep #$20	            REP #$20
.3a42e1	29 ff 00	and #$00ff	            AND #$00FF
.3a42e4	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a42e7	e2 20		sep #$20	            SEP #$20
.3a42e9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a42ec					S_PRINT
.3a42ec	08		php		                PHP
.3a42ed	e2 20		sep #$20	            SEP #$20
.3a42ef	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a42f2	c9 00		cmp #$00	                CMP #0              ; Is it EOL or :?
.3a42f4	f0 6d		beq $3a4363	                BEQ pr_nl_exit      ; Yes: just print return
.3a42f6					pr_loop
.3a42f6	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a42f9	e2 20		sep #$20	            SEP #$20
.3a42fb	a5 27		lda $0827	                LDA ARGTYPE1        ; Get the type of the result
.3a42fd	c9 ff		cmp #$ff	                CMP #TYPE_NAV       ; Is is NAV?
.3a42ff	f0 1b		beq $3a431c	                BEQ check_nl        ; Yes: we are probably just printing a newline
.3a4301	c9 02		cmp #$02	                CMP #TYPE_STRING    ; Is it a string?
.3a4303	d0 05		bne $3a430a	                BNE check_int       ; No: check to see if it's an integer
.3a4305	20 68 43	jsr $3a4368	            JSR PR_STRING
.3a4308	80 12		bra $3a431c	                BRA check_nl
.3a430a	c9 00		cmp #$00	check_int       CMP #TYPE_INTEGER   ; Is it an integer?
.3a430c	d0 05		bne $3a4313	                BNE check_float     ; No: check to see if it is a float
.3a430e	20 88 43	jsr $3a4388	            JSR PR_INTEGER
.3a4311	80 09		bra $3a431c	                BRA check_nl
.3a4313	c9 01		cmp #$01	check_float     CMP #TYPE_FLOAT     ; Is it a float?
.3a4315	d0 4f		bne $3a4366	                BNE done            ; No: just quit
.3a4317	20 9b 43	jsr $3a439b	            JSR PR_FLOAT
.3a431a	80 00		bra $3a431c	                BRA check_nl
.3a431c					check_nl
.3a431c	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a431f	a7 00		lda [$0800]	                LDA [BIP]
.3a4321	f0 40		beq $3a4363	                BEQ pr_nl_exit      ; If it's nul, print a newline and return
.3a4323	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.3a4325	f0 3c		beq $3a4363	                BEQ pr_nl_exit      ; print a newline and return
.3a4327	c9 2c		cmp #$2c	                CMP #','            ; If it's a comma
.3a4329	f0 23		beq $3a434e	                BEQ pr_comma        ; Print a TAB and try another expression
.3a432b	c9 3b		cmp #$3b	                CMP #';'            ; If it's a semicolon...
.3a432d	f0 24		beq $3a4353	                BEQ is_more         ; Print nothing, and try another expression
.3a432f	08		php		            PHP
.3a4330	c2 20		rep #$20	            REP #$20
.3a4332	48		pha		            PHA
.3a4333	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4336	5b		tcd		            TCD
.3a4337	68		pla		            PLA
.3a4338	28		plp		            PLP
.3a4339	e2 20		sep #$20	            SEP #$20
.3a433b	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a433d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4341	c2 20		rep #$20	            REP #$20
.3a4343	29 ff 00	and #$00ff	            AND #$00FF
.3a4346	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4349	e2 20		sep #$20	            SEP #$20
.3a434b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a434e	a9 09		lda #$09	pr_comma        LDA #CHAR_TAB       ; Print a TAB
.3a4350	20 18 00	jsr $3a0018	            JSR PRINTC
.3a4353					is_more
.3a4353	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4356	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a4359	a7 00		lda [$0800]	                LDA [BIP]           ; Get the character
.3a435b	f0 09		beq $3a4366	                BEQ done            ; If it's NULL, return without printing a newline
.3a435d	c9 3a		cmp #$3a	                CMP #':'            ; If it's a colon
.3a435f	f0 05		beq $3a4366	                BEQ done            ; ... return without printing a newline
.3a4361	80 93		bra $3a42f6	                BRA pr_loop         ; Otherwise, we should have another expression, try to handle it
.3a4363					pr_nl_exit
.3a4363	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a4366	28		plp		done            PLP
.3a4367	60		rts		            RTS
.3a4368					PR_STRING
.3a4368	08		php		                PHP
.3a4369	8b		phb		                PHB
.3a436a	08		php		            PHP
.3a436b	c2 20		rep #$20	            REP #$20
.3a436d	48		pha		            PHA
.3a436e	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a4371	5b		tcd		            TCD
.3a4372	68		pla		            PLA
.3a4373	28		plp		            PLP
.3a4374	e2 20		sep #$20	            SEP #$20
.3a4376	c2 10		rep #$10	            REP #$10
.3a4378	a0 00 00	ldy #$0000	                LDY #0
.3a437b	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y
.3a437d	f0 06		beq $3a4385	                BEQ done
.3a437f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a4382	c8		iny		                INY
.3a4383	80 f6		bra $3a437b	                BRA loop
.3a4385	ab		plb		done            PLB
.3a4386	28		plp		                PLP
.3a4387	60		rts		            RTS
.3a4388					PR_INTEGER
.3a4388	08		php		                PHP
.3a4389	c2 20		rep #$20	            REP #$20
.3a438b	20 ed 13	jsr $3a13ed	            JSR ITOS
.3a438e	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a4390	85 23		sta $0823	                STA ARGUMENT1
.3a4392	a5 18		lda $0818	                LDA STRPTR+2
.3a4394	85 25		sta $0825	                STA ARGUMENT1+2
.3a4396	20 68 43	jsr $3a4368	            JSR PR_STRING
.3a4399	28		plp		                PLP
.3a439a	60		rts		            RTS
.3a439b					PR_FLOAT
.3a439b	08		php		                PHP
.3a439c	20 1a 5b	jsr $3a5b1a	            JSR FTOS
.3a439f	c2 20		rep #$20	            REP #$20
.3a43a1	a5 16		lda $0816	                LDA STRPTR          ; Copy the pointer to the string to ARGUMENT1
.3a43a3	85 23		sta $0823	                STA ARGUMENT1
.3a43a5	a5 18		lda $0818	                LDA STRPTR+2
.3a43a7	85 25		sta $0825	                STA ARGUMENT1+2
.3a43a9	20 68 43	jsr $3a4368	            JSR PR_STRING
.3a43ac	28		plp		                PLP
.3a43ad	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\functions.s


;******  Processing file: src\C256/functions_c256.s

.3a43ae					BCD2STR
.3a43ae	08		php		            PHP
.3a43af	e2 20		sep #$20	            SEP #$20
.3a43b1	85 b5		sta $08b5	            STA SAVE_A
.3a43b3	4a		lsr a		            LSR A
.3a43b4	4a		lsr a		            LSR A
.3a43b5	4a		lsr a		            LSR A
.3a43b6	4a		lsr a		            LSR A
.3a43b7	29 0f		and #$0f	            AND #$0F
.3a43b9	18		clc		            CLC
.3a43ba	69 30		adc #$30	            ADC #'0'
.3a43bc	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a43be	c8		iny		            INY
.3a43bf	a5 b5		lda $08b5	            LDA SAVE_A
.3a43c1	29 0f		and #$0f	            AND #$0F
.3a43c3	18		clc		            CLC
.3a43c4	69 30		adc #$30	            ADC #'0'
.3a43c6	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a43c8	c8		iny		            INY
.3a43c9	28		plp		            PLP
.3a43ca	60		rts		            RTS
.3a43cb					F_GETDATE
.3a43cb	e2 20		sep #$20	            SEP #$20
.3a43cd	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a43cf	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a43d2	08		php		            PHP
.3a43d3	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a43d6	e2 20		sep #$20	            SEP #$20
.3a43d8	c2 10		rep #$10	            REP #$10
.3a43da	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a43de	09 08		ora #$08	            ORA #%00001000
.3a43e0	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a43e4	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a43e7	a0 00 00	ldy #$0000	            LDY #0
.3a43ea	af 06 08 af	lda $af0806	            LDA @lRTC_DAY           ; Write the day of the month
.3a43ee	20 ae 43	jsr $3a43ae	            JSR BCD2STR
.3a43f1	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.3a43f3	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a43f5	c8		iny		            INY
.3a43f6	af 09 08 af	lda $af0809	            LDA @lRTC_MONTH         ; Write the month
.3a43fa	20 ae 43	jsr $3a43ae	            JSR BCD2STR
.3a43fd	a9 2f		lda #$2f	            LDA #'/'                ; Write the separator
.3a43ff	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4401	c8		iny		            INY
.3a4402	af 0f 08 af	lda $af080f	            LDA @lRTC_CENTURY       ; Write the year
.3a4406	20 ae 43	jsr $3a43ae	            JSR BCD2STR
.3a4409	af 0a 08 af	lda $af080a	            LDA @lRTC_YEAR          ; Write the year
.3a440d	20 ae 43	jsr $3a43ae	            JSR BCD2STR
.3a4410	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.3a4412	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4414	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a4418	29 f7		and #$f7	            AND #%11110111
.3a441a	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a441e	c2 20		rep #$20	            REP #$20
.3a4420	a5 16		lda $0816	            LDA STRPTR
.3a4422	85 23		sta $0823	            STA ARGUMENT1
.3a4424	a5 18		lda $0818	            LDA STRPTR+2
.3a4426	85 25		sta $0825	            STA ARGUMENT1+2
.3a4428	e2 20		sep #$20	            SEP #$20
.3a442a	a9 02		lda #$02	            LDA #TYPE_STRING
.3a442c	85 27		sta $0827	            STA ARGTYPE1
.3a442e	28		plp		            PLP
.3a442f	e2 20		sep #$20	            SEP #$20
.3a4431	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4434	60		rts		            RTS
.3a4435					F_GETTIME
.3a4435	e2 20		sep #$20	            SEP #$20
.3a4437	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4439	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a443c	08		php		            PHP
.3a443d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4440	e2 20		sep #$20	            SEP #$20
.3a4442	c2 10		rep #$10	            REP #$10
.3a4444	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Pause updates to the clock registers
.3a4448	09 08		ora #$08	            ORA #%00001000
.3a444a	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a444e	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a4451	a0 00 00	ldy #$0000	            LDY #0
.3a4454	af 04 08 af	lda $af0804	            LDA @lRTC_HRS           ; Write the hour
.3a4458	29 7f		and #$7f	            AND #$7F                ; Trim out the AM/PM indicator
.3a445a	20 ae 43	jsr $3a43ae	            JSR BCD2STR
.3a445d	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.3a445f	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4461	c8		iny		            INY
.3a4462	af 02 08 af	lda $af0802	            LDA @lRTC_MIN           ; Write the minute
.3a4466	20 ae 43	jsr $3a43ae	            JSR BCD2STR
.3a4469	a9 3a		lda #$3a	            LDA #':'                ; Write the separator
.3a446b	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a446d	c8		iny		            INY
.3a446e	af 00 08 af	lda $af0800	            LDA @lRTC_SEC           ; Write the second
.3a4472	20 ae 43	jsr $3a43ae	            JSR BCD2STR
.3a4475	a9 00		lda #$00	            LDA #0                  ; NULL terminate the string
.3a4477	97 16		sta [$0816],y	            STA [STRPTR],Y
.3a4479	af 0e 08 af	lda $af080e	            LDA @lRTC_CTRL          ; Re-enable updates to the clock registers
.3a447d	29 f7		and #$f7	            AND #%11110111
.3a447f	8f 0e 08 af	sta $af080e	            STA @lRTC_CTRL
.3a4483	c2 20		rep #$20	            REP #$20
.3a4485	a5 16		lda $0816	            LDA STRPTR
.3a4487	85 23		sta $0823	            STA ARGUMENT1
.3a4489	a5 18		lda $0818	            LDA STRPTR+2
.3a448b	85 25		sta $0825	            STA ARGUMENT1+2
.3a448d	e2 20		sep #$20	            SEP #$20
.3a448f	a9 02		lda #$02	            LDA #TYPE_STRING
.3a4491	85 27		sta $0827	            STA ARGTYPE1
.3a4493	28		plp		            PLP
.3a4494	e2 20		sep #$20	            SEP #$20
.3a4496	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4499	60		rts		            RTS
.3a449a					FN_RND
.3a449a	e2 20		sep #$20	            SEP #$20
.3a449c	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a449e	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a44a1	08		php		            PHP
.3a44a2	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a44a5	e2 20		sep #$20	            SEP #$20
.3a44a7	a9 01		lda #$01	            LDA #TYPE_FLOAT             ; We'll return a floating point number
.3a44a9	85 27		sta $0827	            STA ARGTYPE1
.3a44ab	a9 03		lda #$03	            LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a44ad	8f 00 e2 af	sta $afe200	            STA @l FP_MATH_CTRL0        ; Expect fixed point numbers
.3a44b1	a9 01		lda #$01	            LDA #FP_OUT_DIV             ; Set us to do a division
.3a44b3	8f 01 e2 af	sta $afe201	            STA @l FP_MATH_CTRL1
.3a44b7	c2 30		rep #$30	            REP #$30
.3a44b9	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get a random 16-bits
.3a44bd	8f 08 e2 af	sta $afe208	            STA @l FP_MATH_INPUT0_LL    ; Send them to the FP unit
.3a44c1	af 84 e8 af	lda $afe884	            LDA @l GABE_RNG_DAT_LO      ; Get another random 16-bits
.3a44c5	29 ff 7f	and #$7fff	            AND #$7FFF                  ; Make sure it's positive
.3a44c8	8f 0a e2 af	sta $afe20a	            STA @l FP_MATH_INPUT0_LL+2  ; Send them to the FP unit
.3a44cc	a9 ff ff	lda #$ffff	            LDA #$FFFF                  ; Get the maximum value
.3a44cf	8f 0c e2 af	sta $afe20c	            STA @l FP_MATH_INPUT1_LL    ; Send it to the FP unit
.3a44d3	a9 ff 7f	lda #$7fff	            LDA #$7FFF
.3a44d6	8f 0e e2 af	sta $afe20e	            STA @l FP_MATH_INPUT1_LL+2
.3a44da	ea		nop		            NOP
.3a44db	ea		nop		            NOP
.3a44dc	ea		nop		            NOP
.3a44dd	af 08 e2 af	lda $afe208	            LDA @l FP_MATH_OUTPUT_FP_LL     ; Get the normalized result
.3a44e1	85 23		sta $0823	            STA ARGUMENT1
.3a44e3	af 0a e2 af	lda $afe20a	            LDA @l FP_MATH_OUTPUT_FP_LL+2
.3a44e7	85 25		sta $0825	            STA ARGUMENT1+2
.3a44e9	28		plp		            PLP
.3a44ea	e2 20		sep #$20	            SEP #$20
.3a44ec	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a44ef	60		rts		            RTS

;******  Return to file: src\functions.s

.3a44f0					FN_MID
.3a44f0	e2 20		sep #$20	            SEP #$20
.3a44f2	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a44f4	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a44f7	08		php		                PHP
.3a44f8	c2 30		rep #$30	            REP #$30
.3a44fa	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a44fd	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a4500					save_string
.3a4500	c2 20		rep #$20	            REP #$20
.3a4502	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a4504	48		pha		                PHA
.3a4505	a5 23		lda $0823	                LDA ARGUMENT1
.3a4507	48		pha		                PHA
.3a4508	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a450b	e2 20		sep #$20	            SEP #$20
.3a450d	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a450f	c9 2c		cmp #$2c	                CMP #','
.3a4511	f0 03		beq $3a4516	                BEQ skip_comma1
.3a4513	4c 67 45	jmp $3a4567	                JMP syntax_err
.3a4516					skip_comma1
.3a4516	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4519	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a451c	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a451f	c2 20		rep #$20	            REP #$20
.3a4521	a5 23		lda $0823	                LDA ARGUMENT1               ; Save the index
.3a4523	48		pha		                PHA
.3a4524	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a4527	e2 20		sep #$20	            SEP #$20
.3a4529	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a452b	c9 2c		cmp #$2c	                CMP #','
.3a452d	f0 03		beq $3a4532	                BEQ skip_comma2
.3a452f	4c 67 45	jmp $3a4567	                JMP syntax_err
.3a4532					skip_comma2
.3a4532	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4535	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4538	20 bf 05	jsr $3a05bf	            JSR ASS_ARG1_INT16
.3a453b	c2 20		rep #$20	            REP #$20
.3a453d	a5 23		lda $0823	            LDA ARGUMENT1
.3a453f	85 8f		sta $088f	            STA MCOUNT
.3a4541	e2 20		sep #$20	            SEP #$20
.3a4543	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a4545	85 91		sta $0891	            STA MCOUNT+2
.3a4547	c2 20		rep #$20	            REP #$20
.3a4549	68		pla		                PLA                         ; Restore index
.3a454a	85 29		sta $0829	                STA ARGUMENT2               ; ... to ARGUMENT2
.3a454c	a9 00 00	lda #$0000	                LDA #0
.3a454f	85 2b		sta $082b	                STA ARGUMENT2+2
.3a4551	68		pla		                PLA                         ; Restore string
.3a4552	85 23		sta $0823	                STA ARGUMENT1               ; ... to ARGUMENT1
.3a4554	68		pla		                PLA
.3a4555	85 25		sta $0825	                STA ARGUMENT1+2
.3a4557	e2 20		sep #$20	            SEP #$20
.3a4559	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a455b	85 27		sta $0827	            STA ARGTYPE1
.3a455d	20 e6 15	jsr $3a15e6	            JSR STRSUBSTR
.3a4560					done
.3a4560	e2 20		sep #$20	            SEP #$20
.3a4562	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4565	28		plp		                PLP
.3a4566	60		rts		            RTS
.3a4567					syntax_err
.3a4567	08		php		            PHP
.3a4568	c2 20		rep #$20	            REP #$20
.3a456a	48		pha		            PHA
.3a456b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a456e	5b		tcd		            TCD
.3a456f	68		pla		            PLA
.3a4570	28		plp		            PLP
.3a4571	e2 20		sep #$20	            SEP #$20
.3a4573	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4575	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4579	c2 20		rep #$20	            REP #$20
.3a457b	29 ff 00	and #$00ff	            AND #$00FF
.3a457e	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4581	e2 20		sep #$20	            SEP #$20
.3a4583	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4586					range_err
.3a4586	08		php		            PHP
.3a4587	c2 20		rep #$20	            REP #$20
.3a4589	48		pha		            PHA
.3a458a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a458d	5b		tcd		            TCD
.3a458e	68		pla		            PLA
.3a458f	28		plp		            PLP
.3a4590	e2 20		sep #$20	            SEP #$20
.3a4592	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4594	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4598	c2 20		rep #$20	            REP #$20
.3a459a	29 ff 00	and #$00ff	            AND #$00FF
.3a459d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a45a0	e2 20		sep #$20	            SEP #$20
.3a45a2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a45a5					FN_RIGHT
.3a45a5	e2 20		sep #$20	            SEP #$20
.3a45a7	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a45a9	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a45ac	08		php		                PHP
.3a45ad	c2 30		rep #$30	            REP #$30
.3a45af	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a45b2	e2 20		sep #$20	            SEP #$20
.3a45b4	a5 27		lda $0827	                LDA ARGTYPE1
.3a45b6	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a45b8	f0 03		beq $3a45bd	                BEQ save_string
.3a45ba	4c 29 46	jmp $3a4629	                JMP type_mismatch           ; Type mismatch if it's not a string
.3a45bd					save_string
.3a45bd	c2 20		rep #$20	            REP #$20
.3a45bf	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a45c1	48		pha		                PHA
.3a45c2	a5 23		lda $0823	                LDA ARGUMENT1
.3a45c4	48		pha		                PHA
.3a45c5	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a45c8	e2 20		sep #$20	            SEP #$20
.3a45ca	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a45cc	c9 2c		cmp #$2c	                CMP #','
.3a45ce	f0 03		beq $3a45d3	                BEQ skip_comma
.3a45d0	4c 48 46	jmp $3a4648	                JMP syntax_err
.3a45d3					skip_comma
.3a45d3	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a45d6	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a45d9	e2 20		sep #$20	            SEP #$20
.3a45db	a5 27		lda $0827	                LDA ARGTYPE1
.3a45dd	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a45df	d0 48		bne $3a4629	                BNE type_mismatch           ; Type mismatch if it's not an integer
.3a45e1	c2 20		rep #$20	            REP #$20
.3a45e3	a5 23		lda $0823	            LDA ARGUMENT1
.3a45e5	85 8f		sta $088f	            STA MCOUNT
.3a45e7	c2 20		rep #$20	            REP #$20
.3a45e9	68		pla		                PLA                         ; Recover the string pointer
.3a45ea	85 23		sta $0823	                STA ARGUMENT1
.3a45ec	68		pla		                PLA
.3a45ed	85 25		sta $0825	                STA ARGUMENT1+2
.3a45ef	e2 20		sep #$20	            SEP #$20
.3a45f1	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a45f3	85 27		sta $0827	            STA ARGTYPE1
.3a45f5	e2 20		sep #$20	            SEP #$20
.3a45f7	a0 00 00	ldy #$0000	                LDY #0
.3a45fa	b7 23		lda [$0823],y	count_loop      LDA [ARGUMENT1],Y
.3a45fc	f0 03		beq $3a4601	                BEQ count_done
.3a45fe	c8		iny		                INY
.3a45ff	80 f9		bra $3a45fa	                BRA count_loop
.3a4601					count_done
.3a4601	c2 20		rep #$20	            REP #$20
.3a4603	98		tya		                TYA                         ; ARGUMENT2 := LENGTH - MCOUNT
.3a4604	38		sec		                SEC
.3a4605	e5 8f		sbc $088f	                SBC MCOUNT
.3a4607	30 09		bmi $3a4612	                BMI index0                  ; if ARGUMENT2 < 0, set ARGUMENT2 := 0
.3a4609	85 29		sta $0829	                STA ARGUMENT2
.3a460b	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT2[23..16] := 0
.3a460e	85 2b		sta $082b	                STA ARGUMENT2+2
.3a4610	80 07		bra $3a4619	                BRA slice
.3a4612	a9 00 00	lda #$0000	index0          LDA #0                      ; 0 is the floor for the index
.3a4615	85 29		sta $0829	                STA ARGUMENT2
.3a4617	85 2b		sta $082b	                STA ARGUMENT2+2
.3a4619					slice
.3a4619	e2 20		sep #$20	            SEP #$20
.3a461b	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a461d	85 2d		sta $082d	            STA ARGTYPE2
.3a461f	20 e6 15	jsr $3a15e6	            JSR STRSUBSTR
.3a4622					done
.3a4622	e2 20		sep #$20	            SEP #$20
.3a4624	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4627	28		plp		                PLP
.3a4628	60		rts		            RTS
.3a4629					type_mismatch
.3a4629	08		php		            PHP
.3a462a	c2 20		rep #$20	            REP #$20
.3a462c	48		pha		            PHA
.3a462d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4630	5b		tcd		            TCD
.3a4631	68		pla		            PLA
.3a4632	28		plp		            PLP
.3a4633	e2 20		sep #$20	            SEP #$20
.3a4635	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4637	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a463b	c2 20		rep #$20	            REP #$20
.3a463d	29 ff 00	and #$00ff	            AND #$00FF
.3a4640	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4643	e2 20		sep #$20	            SEP #$20
.3a4645	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4648					syntax_err
.3a4648	08		php		            PHP
.3a4649	c2 20		rep #$20	            REP #$20
.3a464b	48		pha		            PHA
.3a464c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a464f	5b		tcd		            TCD
.3a4650	68		pla		            PLA
.3a4651	28		plp		            PLP
.3a4652	e2 20		sep #$20	            SEP #$20
.3a4654	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4656	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a465a	c2 20		rep #$20	            REP #$20
.3a465c	29 ff 00	and #$00ff	            AND #$00FF
.3a465f	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4662	e2 20		sep #$20	            SEP #$20
.3a4664	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4667					range_err
.3a4667	08		php		            PHP
.3a4668	c2 20		rep #$20	            REP #$20
.3a466a	48		pha		            PHA
.3a466b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a466e	5b		tcd		            TCD
.3a466f	68		pla		            PLA
.3a4670	28		plp		            PLP
.3a4671	e2 20		sep #$20	            SEP #$20
.3a4673	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4675	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4679	c2 20		rep #$20	            REP #$20
.3a467b	29 ff 00	and #$00ff	            AND #$00FF
.3a467e	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4681	e2 20		sep #$20	            SEP #$20
.3a4683	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4686					FN_LEFT
.3a4686	e2 20		sep #$20	            SEP #$20
.3a4688	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a468a	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a468d	08		php		                PHP
.3a468e	c2 30		rep #$30	            REP #$30
.3a4690	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4693	e2 20		sep #$20	            SEP #$20
.3a4695	a5 27		lda $0827	                LDA ARGTYPE1
.3a4697	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4699	f0 03		beq $3a469e	                BEQ save_string
.3a469b	4c f2 46	jmp $3a46f2	                JMP type_mismatch           ; Type mismatch if it's not a string
.3a469e					save_string
.3a469e	c2 20		rep #$20	            REP #$20
.3a46a0	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save the pointer for later
.3a46a2	48		pha		                PHA
.3a46a3	a5 23		lda $0823	                LDA ARGUMENT1
.3a46a5	48		pha		                PHA
.3a46a6	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a46a9	e2 20		sep #$20	            SEP #$20
.3a46ab	a7 00		lda [$0800]	                LDA [BIP]                   ; Expect a comma
.3a46ad	c9 2c		cmp #$2c	                CMP #','
.3a46af	f0 03		beq $3a46b4	                BEQ skip_comma
.3a46b1	4c 11 47	jmp $3a4711	                JMP syntax_err
.3a46b4					skip_comma
.3a46b4	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a46b7	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a46ba	e2 20		sep #$20	            SEP #$20
.3a46bc	a5 27		lda $0827	                LDA ARGTYPE1
.3a46be	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a46c0	d0 30		bne $3a46f2	                BNE type_mismatch           ; Type mismatch if it's not an integer
.3a46c2	c2 20		rep #$20	            REP #$20
.3a46c4	a5 23		lda $0823	            LDA ARGUMENT1
.3a46c6	85 8f		sta $088f	            STA MCOUNT
.3a46c8	c2 20		rep #$20	            REP #$20
.3a46ca	a9 00 00	lda #$0000	            LDA #<>0
.3a46cd	85 29		sta $0829	            STA ARGUMENT2
.3a46cf	a9 00 00	lda #$0000	            LDA #(0 >> 16)
.3a46d2	85 2b		sta $082b	            STA ARGUMENT2+2
.3a46d4	e2 20		sep #$20	            SEP #$20
.3a46d6	a9 00		lda #$00	            LDA #<TYPE_INTEGER
.3a46d8	85 2d		sta $082d	            STA ARGTYPE2
.3a46da	c2 20		rep #$20	            REP #$20
.3a46dc	68		pla		                PLA                         ; Recover the string pointer
.3a46dd	85 23		sta $0823	                STA ARGUMENT1
.3a46df	68		pla		                PLA
.3a46e0	85 25		sta $0825	                STA ARGUMENT1+2
.3a46e2	e2 20		sep #$20	            SEP #$20
.3a46e4	a9 02		lda #$02	            LDA #<TYPE_STRING
.3a46e6	85 27		sta $0827	            STA ARGTYPE1
.3a46e8	20 e6 15	jsr $3a15e6	            JSR STRSUBSTR
.3a46eb					done
.3a46eb	e2 20		sep #$20	            SEP #$20
.3a46ed	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a46f0	28		plp		                PLP
.3a46f1	60		rts		            RTS
.3a46f2					type_mismatch
.3a46f2	08		php		            PHP
.3a46f3	c2 20		rep #$20	            REP #$20
.3a46f5	48		pha		            PHA
.3a46f6	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a46f9	5b		tcd		            TCD
.3a46fa	68		pla		            PLA
.3a46fb	28		plp		            PLP
.3a46fc	e2 20		sep #$20	            SEP #$20
.3a46fe	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4700	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4704	c2 20		rep #$20	            REP #$20
.3a4706	29 ff 00	and #$00ff	            AND #$00FF
.3a4709	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a470c	e2 20		sep #$20	            SEP #$20
.3a470e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4711					syntax_err
.3a4711	08		php		            PHP
.3a4712	c2 20		rep #$20	            REP #$20
.3a4714	48		pha		            PHA
.3a4715	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4718	5b		tcd		            TCD
.3a4719	68		pla		            PLA
.3a471a	28		plp		            PLP
.3a471b	e2 20		sep #$20	            SEP #$20
.3a471d	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a471f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4723	c2 20		rep #$20	            REP #$20
.3a4725	29 ff 00	and #$00ff	            AND #$00FF
.3a4728	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a472b	e2 20		sep #$20	            SEP #$20
.3a472d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4730					range_err
.3a4730	08		php		            PHP
.3a4731	c2 20		rep #$20	            REP #$20
.3a4733	48		pha		            PHA
.3a4734	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4737	5b		tcd		            TCD
.3a4738	68		pla		            PLA
.3a4739	28		plp		            PLP
.3a473a	e2 20		sep #$20	            SEP #$20
.3a473c	a9 09		lda #$09	            LDA #ERR_RANGE
.3a473e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4742	c2 20		rep #$20	            REP #$20
.3a4744	29 ff 00	and #$00ff	            AND #$00FF
.3a4747	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a474a	e2 20		sep #$20	            SEP #$20
.3a474c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a474f					FN_VAL
.3a474f	e2 20		sep #$20	            SEP #$20
.3a4751	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4753	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4756	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4759	c2 10		rep #$10	            REP #$10
.3a475b	e2 20		sep #$20	            SEP #$20
.3a475d	a5 27		lda $0827	                LDA ARGTYPE1
.3a475f	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4761	d0 23		bne $3a4786	                BNE type_mismatch
.3a4763	c2 20		rep #$20	            REP #$20
.3a4765	a5 00		lda $0800	                LDA BIP             ; preserve BIP for later
.3a4767	85 40		sta $0840	                STA SAVEBIP
.3a4769	a5 02		lda $0802	                LDA BIP+2
.3a476b	85 42		sta $0842	                STA SAVEBIP+2
.3a476d	a5 23		lda $0823	                LDA ARGUMENT1       ; Temporarily point BIP to the string to parse
.3a476f	85 00		sta $0800	                STA BIP
.3a4771	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4773	85 02		sta $0802	                STA BIP+2
.3a4775	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a4778	a5 40		lda $0840	                LDA SAVEBIP         ; Restore BIP
.3a477a	85 00		sta $0800	                STA BIP
.3a477c	a5 42		lda $0842	                LDA SAVEBIP+2
.3a477e	85 02		sta $0802	                STA BIP+2
.3a4780	e2 20		sep #$20	            SEP #$20
.3a4782	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4785	60		rts		            RTS
.3a4786					type_mismatch
.3a4786	08		php		            PHP
.3a4787	c2 20		rep #$20	            REP #$20
.3a4789	48		pha		            PHA
.3a478a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a478d	5b		tcd		            TCD
.3a478e	68		pla		            PLA
.3a478f	28		plp		            PLP
.3a4790	e2 20		sep #$20	            SEP #$20
.3a4792	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4794	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4798	c2 20		rep #$20	            REP #$20
.3a479a	29 ff 00	and #$00ff	            AND #$00FF
.3a479d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a47a0	e2 20		sep #$20	            SEP #$20
.3a47a2	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a47a5					FN_STR
.3a47a5	e2 20		sep #$20	            SEP #$20
.3a47a7	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a47a9	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a47ac	08		php		                PHP
.3a47ad	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a47b0	c2 10		rep #$10	            REP #$10
.3a47b2	e2 20		sep #$20	            SEP #$20
.3a47b4	a5 27		lda $0827	                LDA ARGTYPE1
.3a47b6	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a47b8	d0 1a		bne $3a47d4	                BNE type_mismatch
.3a47ba	20 ed 13	jsr $3a13ed	            JSR ITOS
.3a47bd	c2 20		rep #$20	            REP #$20
.3a47bf	a5 16		lda $0816	                LDA STRPTR          ; Prepare the return result
.3a47c1	85 23		sta $0823	                STA ARGUMENT1
.3a47c3	a5 18		lda $0818	                LDA STRPTR+2
.3a47c5	85 25		sta $0825	                STA ARGUMENT1+2
.3a47c7	e2 20		sep #$20	            SEP #$20
.3a47c9	a9 02		lda #$02	                LDA #TYPE_STRING
.3a47cb	85 27		sta $0827	                STA ARGTYPE1
.3a47cd	28		plp		                PLP
.3a47ce	e2 20		sep #$20	            SEP #$20
.3a47d0	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a47d3	60		rts		            RTS
.3a47d4					type_mismatch
.3a47d4	08		php		            PHP
.3a47d5	c2 20		rep #$20	            REP #$20
.3a47d7	48		pha		            PHA
.3a47d8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a47db	5b		tcd		            TCD
.3a47dc	68		pla		            PLA
.3a47dd	28		plp		            PLP
.3a47de	e2 20		sep #$20	            SEP #$20
.3a47e0	a9 04		lda #$04	            LDA #ERR_TYPE
.3a47e2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a47e6	c2 20		rep #$20	            REP #$20
.3a47e8	29 ff 00	and #$00ff	            AND #$00FF
.3a47eb	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a47ee	e2 20		sep #$20	            SEP #$20
.3a47f0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a47f3					FN_DEC
.3a47f3	e2 20		sep #$20	            SEP #$20
.3a47f5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a47f7	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a47fa	08		php		                PHP
.3a47fb	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a47fe	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a4801	c2 20		rep #$20	            REP #$20
.3a4803	64 0c		stz $080c	                STZ SCRATCH
.3a4805	64 0e		stz $080e	                STZ SCRATCH+2
.3a4807	e2 30		sep #$30	            SEP #$30
.3a4809	a0 00		ldy #$00	                LDY #0
.3a480b	b7 23		lda [$0823],y	skip_loop       LDA [ARGUMENT1],Y
.3a480d	c9 20		cmp #$20	                CMP #CHAR_SP
.3a480f	f0 04		beq $3a4815	                BEQ skip_char
.3a4811	c9 24		cmp #$24	                CMP #'$'
.3a4813	d0 03		bne $3a4818	                BNE loop
.3a4815	c8		iny		skip_char       INY
.3a4816	80 f3		bra $3a480b	                BRA skip_loop
.3a4818	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y   ; Check the character
.3a481a	20 be 03	jsr $3a03be	            JSR ISHEX
.3a481d	90 1e		bcc $3a483d	                BCC ret_result      ; No: return what we have so far
.3a481f	c2 20		rep #$20	            REP #$20
.3a4821	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a4823	26 0e		rol $080e	                ROL SCRATCH+2
.3a4825	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a4827	26 0e		rol $080e	                ROL SCRATCH+2
.3a4829	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a482b	26 0e		rol $080e	                ROL SCRATCH+2
.3a482d	06 0c		asl $080c	                ASL SCRATCH         ; Shift the result over one digit
.3a482f	26 0e		rol $080e	                ROL SCRATCH+2
.3a4831	e2 20		sep #$20	            SEP #$20
.3a4833	20 df 03	jsr $3a03df	            JSR HEX2BIN
.3a4836	05 0c		ora $080c	                ORA SCRATCH
.3a4838	85 0c		sta $080c	                STA SCRATCH         ; And add it to the result
.3a483a	c8		iny		                INY
.3a483b	80 db		bra $3a4818	                BRA loop            ; And try the next character
.3a483d					ret_result
.3a483d	c2 20		rep #$20	            REP #$20
.3a483f	a5 0c		lda $080c	                LDA SCRATCH         ; Return the result
.3a4841	85 23		sta $0823	                STA ARGUMENT1
.3a4843	a5 0e		lda $080e	                LDA SCRATCH+2
.3a4845	85 25		sta $0825	                STA ARGUMENT1+2
.3a4847	e2 20		sep #$20	            SEP #$20
.3a4849	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a484b	85 27		sta $0827	                STA ARGTYPE1
.3a484d	28		plp		                PLP
.3a484e	e2 20		sep #$20	            SEP #$20
.3a4850	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4853	60		rts		            RTS
.3a4854					FN_HEX
.3a4854	e2 20		sep #$20	            SEP #$20
.3a4856	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4858	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a485b	08		php		                PHP
.3a485c	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a485f	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a4862	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a4865	e2 30		sep #$30	            SEP #$30
.3a4867	a0 ff		ldy #$ff	                LDY #$FF            ; Terminate the string
.3a4869	a9 00		lda #$00	                LDA #0
.3a486b	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a486d	88		dey		                DEY
.3a486e	a5 23		lda $0823	loop            LDA ARGUMENT1       ; Write the low digit
.3a4870	29 0f		and #$0f	                AND #$0F
.3a4872	aa		tax		                TAX
.3a4873	bf 00 d0 3a	lda $3ad000,x	                LDA @lHEXDIGITS,X
.3a4877	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4879	88		dey		                DEY
.3a487a	a5 23		lda $0823	                LDA ARGUMENT1       ; Write the high digit
.3a487c	29 f0		and #$f0	                AND #$F0
.3a487e	4a		lsr a		                LSR A
.3a487f	4a		lsr a		                LSR A
.3a4880	4a		lsr a		                LSR A
.3a4881	4a		lsr a		                LSR A
.3a4882	aa		tax		                TAX
.3a4883	bf 00 d0 3a	lda $3ad000,x	                LDA @lHEXDIGITS,X
.3a4887	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4889	88		dey		                DEY
.3a488a	a5 24		lda $0824	                LDA ARGUMENT1+1     ; Shift value by one byte
.3a488c	85 23		sta $0823	                STA ARGUMENT1
.3a488e	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4890	85 24		sta $0824	                STA ARGUMENT1+1
.3a4892	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a4894	85 25		sta $0825	                STA ARGUMENT1+2
.3a4896	a9 00		lda #$00	                LDA #0
.3a4898	85 26		sta $0826	                STA ARGUMENT1+3
.3a489a	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the argument 0?
.3a489c	d0 d0		bne $3a486e	                BNE loop            ; No: keep converting
.3a489e	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a48a0	d0 cc		bne $3a486e	                BNE loop
.3a48a2	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a48a4	d0 c8		bne $3a486e	                BNE loop
.3a48a6	98		tya		                TYA                 ; Get the index of the first free char
.3a48a7	38		sec		                SEC                 ; Add 1 to get to the first character of the string
.3a48a8	65 16		adc $0816	                ADC STRPTR          ; And add the whole thing to the temp string pointer
.3a48aa	85 23		sta $0823	                STA ARGUMENT1       ; And return it as the result
.3a48ac	a5 17		lda $0817	                LDA STRPTR+1
.3a48ae	85 24		sta $0824	                STA ARGUMENT1+1
.3a48b0	a5 18		lda $0818	                LDA STRPTR+2
.3a48b2	85 25		sta $0825	                STA ARGUMENT1+2
.3a48b4	a5 19		lda $0819	                LDA STRPTR+3
.3a48b6	85 26		sta $0826	                STA ARGUMENT1+3
.3a48b8	a9 02		lda #$02	                LDA #TYPE_STRING    ; And make the type STRING
.3a48ba	85 27		sta $0827	                STA ARGTYPE1
.3a48bc	28		plp		                PLP
.3a48bd	e2 20		sep #$20	            SEP #$20
.3a48bf	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a48c2	60		rts		            RTS
.3a48c3					type_mismatch
.3a48c3	08		php		            PHP
.3a48c4	c2 20		rep #$20	            REP #$20
.3a48c6	48		pha		            PHA
.3a48c7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a48ca	5b		tcd		            TCD
.3a48cb	68		pla		            PLA
.3a48cc	28		plp		            PLP
.3a48cd	e2 20		sep #$20	            SEP #$20
.3a48cf	a9 04		lda #$04	            LDA #ERR_TYPE
.3a48d1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a48d5	c2 20		rep #$20	            REP #$20
.3a48d7	29 ff 00	and #$00ff	            AND #$00FF
.3a48da	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a48dd	e2 20		sep #$20	            SEP #$20
.3a48df	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a48e2					FN_LEN
.3a48e2	e2 20		sep #$20	            SEP #$20
.3a48e4	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a48e6	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a48e9	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a48ec	e2 20		sep #$20	            SEP #$20
.3a48ee	a5 27		lda $0827	                LDA ARGTYPE1
.3a48f0	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a48f2	d0 1f		bne $3a4913	                BNE type_mismatch
.3a48f4	8b		phb		                PHB                 ; Set the data bank to the data bank of the string
.3a48f5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a48f7	48		pha		                PHA
.3a48f8	ab		plb		                PLB
.3a48f9	c2 10		rep #$10	            REP #$10
.3a48fb	a6 23		ldx $0823	                LDX ARGUMENT1       ; And point X to the string data
.3a48fd	20 7a 14	jsr $3a147a	            JSR STRLEN
.3a4900	ab		plb		                PLB                 ; Restore the old data bank
.3a4901	84 23		sty $0823	                STY ARGUMENT1       ; Save the length to ARGUMENT1
.3a4903	c2 20		rep #$20	            REP #$20
.3a4905	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4907	e2 20		sep #$20	            SEP #$20
.3a4909	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the type to INTEGER
.3a490b	85 27		sta $0827	                STA ARGTYPE1
.3a490d	e2 20		sep #$20	            SEP #$20
.3a490f	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4912	60		rts		            RTS
.3a4913					type_mismatch
.3a4913	08		php		            PHP
.3a4914	c2 20		rep #$20	            REP #$20
.3a4916	48		pha		            PHA
.3a4917	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a491a	5b		tcd		            TCD
.3a491b	68		pla		            PLA
.3a491c	28		plp		            PLP
.3a491d	e2 20		sep #$20	            SEP #$20
.3a491f	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4921	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4925	c2 20		rep #$20	            REP #$20
.3a4927	29 ff 00	and #$00ff	            AND #$00FF
.3a492a	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a492d	e2 20		sep #$20	            SEP #$20
.3a492f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4932					FN_PEEK
.3a4932	e2 20		sep #$20	            SEP #$20
.3a4934	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4936	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4939	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a493c	e2 20		sep #$20	            SEP #$20
.3a493e	a5 27		lda $0827	                LDA ARGTYPE1
.3a4940	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4942	d0 12		bne $3a4956	                BNE type_mismatch
.3a4944	e2 20		sep #$20	            SEP #$20
.3a4946	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a4948	85 23		sta $0823	                STA ARGUMENT1
.3a494a	64 24		stz $0824	                STZ ARGUMENT1+1
.3a494c	64 25		stz $0825	                STZ ARGUMENT1+2
.3a494e	64 30		stz $0830	                STZ ARGUMENT1+13
.3a4950	e2 20		sep #$20	            SEP #$20
.3a4952	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4955	60		rts		            RTS
.3a4956					type_mismatch
.3a4956	08		php		            PHP
.3a4957	c2 20		rep #$20	            REP #$20
.3a4959	48		pha		            PHA
.3a495a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a495d	5b		tcd		            TCD
.3a495e	68		pla		            PLA
.3a495f	28		plp		            PLP
.3a4960	e2 20		sep #$20	            SEP #$20
.3a4962	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4964	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4968	c2 20		rep #$20	            REP #$20
.3a496a	29 ff 00	and #$00ff	            AND #$00FF
.3a496d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4970	e2 20		sep #$20	            SEP #$20
.3a4972	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4975					FN_PEEKL
.3a4975	e2 20		sep #$20	            SEP #$20
.3a4977	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4979	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a497c	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a497f	e2 20		sep #$20	            SEP #$20
.3a4981	a5 27		lda $0827	                LDA ARGTYPE1
.3a4983	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4985	d0 1d		bne $3a49a4	                BNE type_mismatch
.3a4987	c2 20		rep #$20	            REP #$20
.3a4989	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a498b	85 0c		sta $080c	                STA SCRATCH
.3a498d	e2 20		sep #$20	            SEP #$20
.3a498f	a0 02 00	ldy #$0002	                LDY #2
.3a4992	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y
.3a4994	85 25		sta $0825	                STA ARGUMENT1+2
.3a4996	64 26		stz $0826	                STZ ARGUMENT1+3
.3a4998	c2 20		rep #$20	            REP #$20
.3a499a	a5 0c		lda $080c	                LDA SCRATCH
.3a499c	85 23		sta $0823	                STA ARGUMENT1
.3a499e	e2 20		sep #$20	            SEP #$20
.3a49a0	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a49a3	60		rts		            RTS
.3a49a4					type_mismatch
.3a49a4	08		php		            PHP
.3a49a5	c2 20		rep #$20	            REP #$20
.3a49a7	48		pha		            PHA
.3a49a8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a49ab	5b		tcd		            TCD
.3a49ac	68		pla		            PLA
.3a49ad	28		plp		            PLP
.3a49ae	e2 20		sep #$20	            SEP #$20
.3a49b0	a9 04		lda #$04	            LDA #ERR_TYPE
.3a49b2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a49b6	c2 20		rep #$20	            REP #$20
.3a49b8	29 ff 00	and #$00ff	            AND #$00FF
.3a49bb	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a49be	e2 20		sep #$20	            SEP #$20
.3a49c0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a49c3					FN_PEEKW
.3a49c3	e2 20		sep #$20	            SEP #$20
.3a49c5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a49c7	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a49ca	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a49cd	e2 20		sep #$20	            SEP #$20
.3a49cf	a5 27		lda $0827	                LDA ARGTYPE1
.3a49d1	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a49d3	d0 0e		bne $3a49e3	                BNE type_mismatch
.3a49d5	c2 20		rep #$20	            REP #$20
.3a49d7	a7 23		lda [$0823]	                LDA [ARGUMENT1]
.3a49d9	85 23		sta $0823	                STA ARGUMENT1
.3a49db	64 25		stz $0825	                STZ ARGUMENT1+2
.3a49dd	e2 20		sep #$20	            SEP #$20
.3a49df	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a49e2	60		rts		            RTS
.3a49e3					type_mismatch
.3a49e3	08		php		            PHP
.3a49e4	c2 20		rep #$20	            REP #$20
.3a49e6	48		pha		            PHA
.3a49e7	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a49ea	5b		tcd		            TCD
.3a49eb	68		pla		            PLA
.3a49ec	28		plp		            PLP
.3a49ed	e2 20		sep #$20	            SEP #$20
.3a49ef	a9 04		lda #$04	            LDA #ERR_TYPE
.3a49f1	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a49f5	c2 20		rep #$20	            REP #$20
.3a49f7	29 ff 00	and #$00ff	            AND #$00FF
.3a49fa	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a49fd	e2 20		sep #$20	            SEP #$20
.3a49ff	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4a02					FN_CHR
.3a4a02	e2 20		sep #$20	            SEP #$20
.3a4a04	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4a06	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4a09	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4a0c	e2 20		sep #$20	            SEP #$20
.3a4a0e	a5 27		lda $0827	                LDA ARGTYPE1
.3a4a10	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4a12	d0 24		bne $3a4a38	                BNE type_mismatch
.3a4a14	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a4a17	a5 23		lda $0823	                LDA ARGUMENT1       ; Get the numberic value
.3a4a19	87 16		sta [$0816]	                STA [STRPTR]        ; And save it as the first character
.3a4a1b	a9 00		lda #$00	                LDA #0              ; Null terminate the string
.3a4a1d	a0 01 00	ldy #$0001	                LDY #1
.3a4a20	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a4a22	c2 20		rep #$20	            REP #$20
.3a4a24	a5 16		lda $0816	                LDA STRPTR
.3a4a26	85 23		sta $0823	                STA ARGUMENT1
.3a4a28	a5 18		lda $0818	                LDA STRPTR+2
.3a4a2a	85 25		sta $0825	                STA ARGUMENT1+2
.3a4a2c	e2 20		sep #$20	            SEP #$20
.3a4a2e	a9 02		lda #$02	                LDA #TYPE_STRING
.3a4a30	85 27		sta $0827	                STA ARGTYPE1
.3a4a32	e2 20		sep #$20	            SEP #$20
.3a4a34	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4a37	60		rts		            RTS
.3a4a38					type_mismatch
.3a4a38	08		php		            PHP
.3a4a39	c2 20		rep #$20	            REP #$20
.3a4a3b	48		pha		            PHA
.3a4a3c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4a3f	5b		tcd		            TCD
.3a4a40	68		pla		            PLA
.3a4a41	28		plp		            PLP
.3a4a42	e2 20		sep #$20	            SEP #$20
.3a4a44	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4a46	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4a4a	c2 20		rep #$20	            REP #$20
.3a4a4c	29 ff 00	and #$00ff	            AND #$00FF
.3a4a4f	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4a52	e2 20		sep #$20	            SEP #$20
.3a4a54	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4a57					FN_ASC
.3a4a57	e2 20		sep #$20	            SEP #$20
.3a4a59	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4a5b	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4a5e	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4a61	e2 20		sep #$20	            SEP #$20
.3a4a63	a5 27		lda $0827	                LDA ARGTYPE1
.3a4a65	c9 02		cmp #$02	                CMP #TYPE_STRING
.3a4a67	d0 14		bne $3a4a7d	                BNE type_mismatch
.3a4a69	a7 23		lda [$0823]	                LDA [ARGUMENT1]     ; Get the character
.3a4a6b	85 23		sta $0823	                STA ARGUMENT1       ; Save its code to ARGUMENT1
.3a4a6d	64 24		stz $0824	                STZ ARGUMENT1+1
.3a4a6f	64 25		stz $0825	                STZ ARGUMENT1+2
.3a4a71	64 26		stz $0826	                STZ ARGUMENT1+3
.3a4a73	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; And set the return type to integer
.3a4a75	85 27		sta $0827	                STA ARGTYPE1
.3a4a77	e2 20		sep #$20	            SEP #$20
.3a4a79	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4a7c	60		rts		            RTS
.3a4a7d					type_mismatch
.3a4a7d	08		php		            PHP
.3a4a7e	c2 20		rep #$20	            REP #$20
.3a4a80	48		pha		            PHA
.3a4a81	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4a84	5b		tcd		            TCD
.3a4a85	68		pla		            PLA
.3a4a86	28		plp		            PLP
.3a4a87	e2 20		sep #$20	            SEP #$20
.3a4a89	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4a8b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4a8f	c2 20		rep #$20	            REP #$20
.3a4a91	29 ff 00	and #$00ff	            AND #$00FF
.3a4a94	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4a97	e2 20		sep #$20	            SEP #$20
.3a4a99	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4a9c					FN_SPC
.3a4a9c	e2 20		sep #$20	            SEP #$20
.3a4a9e	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4aa0	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4aa3	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4aa6	e2 20		sep #$20	            SEP #$20
.3a4aa8	a5 27		lda $0827	                LDA ARGTYPE1
.3a4aaa	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4aac	d0 39		bne $3a4ae7	                BNE type_mismatch
.3a4aae	e2 20		sep #$20	            SEP #$20
.3a4ab0	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.3a4ab2	d0 52		bne $3a4b06	                BNE err_limit
.3a4ab4	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4ab6	d0 4e		bne $3a4b06	                BNE err_limit
.3a4ab8	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a4aba	d0 4a		bne $3a4b06	                BNE err_limit
.3a4abc	c2 10		rep #$10	            REP #$10
.3a4abe	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a4ac1	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.3a4ac3	e2 20		sep #$20	            SEP #$20
.3a4ac5	a9 00		lda #$00	                LDA #0
.3a4ac7	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.3a4ac9	88		dey		                DEY
.3a4aca	30 07		bmi $3a4ad3	                BMI done
.3a4acc	a9 20		lda #$20	                LDA #CHAR_SP
.3a4ace	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.3a4ad0	88		dey		                DEY
.3a4ad1	10 fb		bpl $3a4ace	                BPL loop            ; And keep writing until we're done
.3a4ad3	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.3a4ad5	85 27		sta $0827	                STA ARGTYPE1
.3a4ad7	c2 20		rep #$20	            REP #$20
.3a4ad9	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.3a4adb	85 23		sta $0823	                STA ARGUMENT1
.3a4add	a5 18		lda $0818	                LDA STRPTR+2
.3a4adf	85 25		sta $0825	                STA ARGUMENT1+2
.3a4ae1	e2 20		sep #$20	            SEP #$20
.3a4ae3	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4ae6	60		rts		            RTS
.3a4ae7					type_mismatch
.3a4ae7	08		php		            PHP
.3a4ae8	c2 20		rep #$20	            REP #$20
.3a4aea	48		pha		            PHA
.3a4aeb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4aee	5b		tcd		            TCD
.3a4aef	68		pla		            PLA
.3a4af0	28		plp		            PLP
.3a4af1	e2 20		sep #$20	            SEP #$20
.3a4af3	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4af5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4af9	c2 20		rep #$20	            REP #$20
.3a4afb	29 ff 00	and #$00ff	            AND #$00FF
.3a4afe	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4b01	e2 20		sep #$20	            SEP #$20
.3a4b03	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4b06					err_limit
.3a4b06	08		php		            PHP
.3a4b07	c2 20		rep #$20	            REP #$20
.3a4b09	48		pha		            PHA
.3a4b0a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4b0d	5b		tcd		            TCD
.3a4b0e	68		pla		            PLA
.3a4b0f	28		plp		            PLP
.3a4b10	e2 20		sep #$20	            SEP #$20
.3a4b12	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4b14	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4b18	c2 20		rep #$20	            REP #$20
.3a4b1a	29 ff 00	and #$00ff	            AND #$00FF
.3a4b1d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4b20	e2 20		sep #$20	            SEP #$20
.3a4b22	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4b25					FN_TAB
.3a4b25	e2 20		sep #$20	            SEP #$20
.3a4b27	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4b29	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4b2c	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4b2f	e2 20		sep #$20	            SEP #$20
.3a4b31	a5 27		lda $0827	                LDA ARGTYPE1
.3a4b33	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4b35	d0 39		bne $3a4b70	                BNE type_mismatch
.3a4b37	e2 20		sep #$20	            SEP #$20
.3a4b39	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Throw an error if ARGUMENT1 is negative or > 255
.3a4b3b	d0 52		bne $3a4b8f	                BNE err_limit
.3a4b3d	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4b3f	d0 4e		bne $3a4b8f	                BNE err_limit
.3a4b41	a5 24		lda $0824	                LDA ARGUMENT1+1
.3a4b43	d0 4a		bne $3a4b8f	                BNE err_limit
.3a4b45	c2 10		rep #$10	            REP #$10
.3a4b47	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a4b4a	a4 23		ldy $0823	                LDY ARGUMENT1       ; Get the length
.3a4b4c	e2 20		sep #$20	            SEP #$20
.3a4b4e	a9 00		lda #$00	                LDA #0
.3a4b50	97 16		sta [$0816],y	                STA [STRPTR],Y      ; Write the NULL at the end of the string
.3a4b52	88		dey		                DEY
.3a4b53	30 07		bmi $3a4b5c	                BMI done
.3a4b55	a9 09		lda #$09	                LDA #CHAR_TAB
.3a4b57	97 16		sta [$0816],y	loop            STA [STRPTR],Y      ; Write a space
.3a4b59	88		dey		                DEY
.3a4b5a	10 fb		bpl $3a4b57	                BPL loop            ; And keep writing until we're done
.3a4b5c	a9 02		lda #$02	done            LDA #TYPE_STRING    ; And set the return type to STRING
.3a4b5e	85 27		sta $0827	                STA ARGTYPE1
.3a4b60	c2 20		rep #$20	            REP #$20
.3a4b62	a5 16		lda $0816	                LDA STRPTR          ; Write the pointer to the return results
.3a4b64	85 23		sta $0823	                STA ARGUMENT1
.3a4b66	a5 18		lda $0818	                LDA STRPTR+2
.3a4b68	85 25		sta $0825	                STA ARGUMENT1+2
.3a4b6a	e2 20		sep #$20	            SEP #$20
.3a4b6c	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4b6f	60		rts		            RTS
.3a4b70					type_mismatch
.3a4b70	08		php		            PHP
.3a4b71	c2 20		rep #$20	            REP #$20
.3a4b73	48		pha		            PHA
.3a4b74	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4b77	5b		tcd		            TCD
.3a4b78	68		pla		            PLA
.3a4b79	28		plp		            PLP
.3a4b7a	e2 20		sep #$20	            SEP #$20
.3a4b7c	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4b7e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4b82	c2 20		rep #$20	            REP #$20
.3a4b84	29 ff 00	and #$00ff	            AND #$00FF
.3a4b87	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4b8a	e2 20		sep #$20	            SEP #$20
.3a4b8c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4b8f					err_limit
.3a4b8f	08		php		            PHP
.3a4b90	c2 20		rep #$20	            REP #$20
.3a4b92	48		pha		            PHA
.3a4b93	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4b96	5b		tcd		            TCD
.3a4b97	68		pla		            PLA
.3a4b98	28		plp		            PLP
.3a4b99	e2 20		sep #$20	            SEP #$20
.3a4b9b	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4b9d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4ba1	c2 20		rep #$20	            REP #$20
.3a4ba3	29 ff 00	and #$00ff	            AND #$00FF
.3a4ba6	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4ba9	e2 20		sep #$20	            SEP #$20
.3a4bab	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4bae					FN_ABS
.3a4bae	e2 20		sep #$20	            SEP #$20
.3a4bb0	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4bb2	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4bb5	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4bb8	e2 20		sep #$20	            SEP #$20
.3a4bba	a5 27		lda $0827	                LDA ARGTYPE1        ; Check the type
.3a4bbc	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4bbe	f0 23		beq $3a4be3	                BEQ abs_int         ; If integer, get the absolute value of the integer
.3a4bc0	c9 01		cmp #$01	                CMP #TYPE_FLOAT
.3a4bc2	f0 3e		beq $3a4c02	                BEQ abs_float       ; If float, get the absolute value of the float
.3a4bc4					type_err
.3a4bc4	08		php		            PHP
.3a4bc5	c2 20		rep #$20	            REP #$20
.3a4bc7	48		pha		            PHA
.3a4bc8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4bcb	5b		tcd		            TCD
.3a4bcc	68		pla		            PLA
.3a4bcd	28		plp		            PLP
.3a4bce	e2 20		sep #$20	            SEP #$20
.3a4bd0	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4bd2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4bd6	c2 20		rep #$20	            REP #$20
.3a4bd8	29 ff 00	and #$00ff	            AND #$00FF
.3a4bdb	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4bde	e2 20		sep #$20	            SEP #$20
.3a4be0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4be3					abs_int
.3a4be3	c2 20		rep #$20	            REP #$20
.3a4be5	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Is it positive already?
.3a4be7	10 21		bpl $3a4c0a	                BPL done            ; Yes: we don't need to do anythign further
.3a4be9	49 ff ff	eor #$ffff	                EOR #$FFFF          ; Otherwise, take the two's compliment
.3a4bec	85 25		sta $0825	                STA ARGUMENT1+2     ; Of ARGUMENT1
.3a4bee	a5 23		lda $0823	                LDA ARGUMENT1
.3a4bf0	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a4bf3	18		clc		                CLC
.3a4bf4	69 01 00	adc #$0001	                ADC #1
.3a4bf7	85 23		sta $0823	                STA ARGUMENT1       ; And save it back to ARGUMENT1
.3a4bf9	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4bfb	69 00 00	adc #$0000	                ADC #0
.3a4bfe	85 25		sta $0825	                STA ARGUMENT1+2
.3a4c00	80 08		bra $3a4c0a	                BRA done
.3a4c02					abs_float
.3a4c02	e2 20		sep #$20	            SEP #$20
.3a4c04	a5 26		lda $0826	                LDA ARGUMENT1+3     ; Just clear the sign bit
.3a4c06	29 7f		and #$7f	                AND #$7F
.3a4c08	85 26		sta $0826	                STA ARGUMENT1+3
.3a4c0a					done
.3a4c0a	e2 20		sep #$20	            SEP #$20
.3a4c0c	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4c0f	60		rts		            RTS
.3a4c10					FN_SGN
.3a4c10	e2 20		sep #$20	            SEP #$20
.3a4c12	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4c14	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4c17	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4c1a	e2 20		sep #$20	            SEP #$20
.3a4c1c	a5 27		lda $0827	                LDA ARGTYPE1
.3a4c1e	c9 00		cmp #$00	                CMP #TYPE_INTEGER
.3a4c20	d0 25		bne $3a4c47	                BNE type_mismatch
.3a4c22	c2 20		rep #$20	            REP #$20
.3a4c24	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a4c26	30 12		bmi $3a4c3a	                BMI is_negative     ; Negative: return -1
.3a4c28	d0 04		bne $3a4c2e	                BNE is_positive     ; Is it not 0? Then return 1
.3a4c2a	a5 23		lda $0823	                LDA ARGUMENT1       ; Is the lower word 0?
.3a4c2c	f0 13		beq $3a4c41	                BEQ done            ; Yes: the whole thing is zero: return 0
.3a4c2e	a9 00 00	lda #$0000	is_positive     LDA #0              ; It's positive: return 1
.3a4c31	85 25		sta $0825	                STA ARGUMENT1+2
.3a4c33	a9 01 00	lda #$0001	                LDA #1
.3a4c36	85 23		sta $0823	                STA ARGUMENT1
.3a4c38	80 07		bra $3a4c41	                BRA done
.3a4c3a	a9 ff ff	lda #$ffff	is_negative     LDA #$FFFF          ; It's negative: return -1
.3a4c3d	85 25		sta $0825	                STA ARGUMENT1+2
.3a4c3f	85 23		sta $0823	                STA ARGUMENT1
.3a4c41					done
.3a4c41	e2 20		sep #$20	            SEP #$20
.3a4c43	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4c46	60		rts		            RTS
.3a4c47					type_mismatch
.3a4c47	08		php		            PHP
.3a4c48	c2 20		rep #$20	            REP #$20
.3a4c4a	48		pha		            PHA
.3a4c4b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4c4e	5b		tcd		            TCD
.3a4c4f	68		pla		            PLA
.3a4c50	28		plp		            PLP
.3a4c51	e2 20		sep #$20	            SEP #$20
.3a4c53	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4c55	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4c59	c2 20		rep #$20	            REP #$20
.3a4c5b	29 ff 00	and #$00ff	            AND #$00FF
.3a4c5e	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4c61	e2 20		sep #$20	            SEP #$20
.3a4c63	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4c66					FN_INT
.3a4c66	e2 20		sep #$20	            SEP #$20
.3a4c68	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4c6a	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4c6d	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4c70	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a4c73					done
.3a4c73	e2 20		sep #$20	            SEP #$20
.3a4c75	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4c78	60		rts		            RTS
.3a4c79					FN_SIN
.3a4c79	e2 20		sep #$20	            SEP #$20
.3a4c7b	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4c7d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4c80	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4c83	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a4c86	20 76 5f	jsr $3a5f76	            JSR FP_SIN
.3a4c89					done
.3a4c89	e2 20		sep #$20	            SEP #$20
.3a4c8b	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4c8e	60		rts		            RTS
.3a4c8f					type_mismatch
.3a4c8f	08		php		            PHP
.3a4c90	c2 20		rep #$20	            REP #$20
.3a4c92	48		pha		            PHA
.3a4c93	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4c96	5b		tcd		            TCD
.3a4c97	68		pla		            PLA
.3a4c98	28		plp		            PLP
.3a4c99	e2 20		sep #$20	            SEP #$20
.3a4c9b	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4c9d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4ca1	c2 20		rep #$20	            REP #$20
.3a4ca3	29 ff 00	and #$00ff	            AND #$00FF
.3a4ca6	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4ca9	e2 20		sep #$20	            SEP #$20
.3a4cab	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4cae					FN_COS
.3a4cae	e2 20		sep #$20	            SEP #$20
.3a4cb0	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4cb2	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4cb5	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4cb8	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a4cbb	20 a5 5f	jsr $3a5fa5	            JSR FP_COS
.3a4cbe					done
.3a4cbe	e2 20		sep #$20	            SEP #$20
.3a4cc0	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4cc3	60		rts		            RTS
.3a4cc4					type_mismatch
.3a4cc4	08		php		            PHP
.3a4cc5	c2 20		rep #$20	            REP #$20
.3a4cc7	48		pha		            PHA
.3a4cc8	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4ccb	5b		tcd		            TCD
.3a4ccc	68		pla		            PLA
.3a4ccd	28		plp		            PLP
.3a4cce	e2 20		sep #$20	            SEP #$20
.3a4cd0	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4cd2	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4cd6	c2 20		rep #$20	            REP #$20
.3a4cd8	29 ff 00	and #$00ff	            AND #$00FF
.3a4cdb	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4cde	e2 20		sep #$20	            SEP #$20
.3a4ce0	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4ce3					FN_TAN
.3a4ce3	e2 20		sep #$20	            SEP #$20
.3a4ce5	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4ce7	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4cea	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4ced	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a4cf0	20 d4 5f	jsr $3a5fd4	            JSR FP_TAN
.3a4cf3					done
.3a4cf3	e2 20		sep #$20	            SEP #$20
.3a4cf5	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4cf8	60		rts		            RTS
.3a4cf9					type_mismatch
.3a4cf9	08		php		            PHP
.3a4cfa	c2 20		rep #$20	            REP #$20
.3a4cfc	48		pha		            PHA
.3a4cfd	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4d00	5b		tcd		            TCD
.3a4d01	68		pla		            PLA
.3a4d02	28		plp		            PLP
.3a4d03	e2 20		sep #$20	            SEP #$20
.3a4d05	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4d07	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4d0b	c2 20		rep #$20	            REP #$20
.3a4d0d	29 ff 00	and #$00ff	            AND #$00FF
.3a4d10	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4d13	e2 20		sep #$20	            SEP #$20
.3a4d15	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4d18					FN_SCALETAU
.3a4d18	e2 20		sep #$20	            SEP #$20
.3a4d1a	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d1c	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4d1f	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4d22	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a4d25	20 1f 5e	jsr $3a5e1f	            JSR FP_SCALE
.3a4d28					done
.3a4d28	e2 20		sep #$20	            SEP #$20
.3a4d2a	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4d2d	60		rts		            RTS
.3a4d2e					type_mismatch
.3a4d2e	08		php		            PHP
.3a4d2f	c2 20		rep #$20	            REP #$20
.3a4d31	48		pha		            PHA
.3a4d32	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4d35	5b		tcd		            TCD
.3a4d36	68		pla		            PLA
.3a4d37	28		plp		            PLP
.3a4d38	e2 20		sep #$20	            SEP #$20
.3a4d3a	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4d3c	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4d40	c2 20		rep #$20	            REP #$20
.3a4d42	29 ff 00	and #$00ff	            AND #$00FF
.3a4d45	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4d48	e2 20		sep #$20	            SEP #$20
.3a4d4a	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4d4d					FN_LN
.3a4d4d	e2 20		sep #$20	            SEP #$20
.3a4d4f	a9 8f		lda #$8f	                LDA #TOK_LPAREN
.3a4d51	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4d54	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a4d57	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a4d5a	20 02 60	jsr $3a6002	            JSR FP_LN
.3a4d5d					done
.3a4d5d	e2 20		sep #$20	            SEP #$20
.3a4d5f	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a4d62	60		rts		            RTS
.3a4d63					type_mismatch
.3a4d63	08		php		            PHP
.3a4d64	c2 20		rep #$20	            REP #$20
.3a4d66	48		pha		            PHA
.3a4d67	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4d6a	5b		tcd		            TCD
.3a4d6b	68		pla		            PLA
.3a4d6c	28		plp		            PLP
.3a4d6d	e2 20		sep #$20	            SEP #$20
.3a4d6f	a9 04		lda #$04	            LDA #ERR_TYPE
.3a4d71	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4d75	c2 20		rep #$20	            REP #$20
.3a4d77	29 ff 00	and #$00ff	            AND #$00FF
.3a4d7a	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4d7d	e2 20		sep #$20	            SEP #$20
.3a4d7f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\commands.s

.3a4d82	00		brk #		CMD_MONITOR     BRK
.3a4d83	ea		nop		                NOP
.3a4d84	60		rts		            RTS
.3a4d85					CMD_NEW
.3a4d85	08		php		                PHP
.3a4d86	0b		phd		                PHD
.3a4d87	08		php		            PHP
.3a4d88	c2 20		rep #$20	            REP #$20
.3a4d8a	48		pha		            PHA
.3a4d8b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a4d8e	5b		tcd		            TCD
.3a4d8f	68		pla		            PLA
.3a4d90	28		plp		            PLP
.3a4d91	c2 30		rep #$30	            REP #$30
.3a4d93	c2 20		rep #$20	            REP #$20
.3a4d95	a9 00 00	lda #$0000	            LDA #<>BASIC_BOT
.3a4d98	85 d9		sta $08d9	            STA LASTLINE
.3a4d9a	e2 20		sep #$20	            SEP #$20
.3a4d9c	a9 36		lda #$36	            LDA #`BASIC_BOT
.3a4d9e	85 db		sta $08db	            STA LASTLINE+2
.3a4da0	c2 30		rep #$30	            REP #$30
.3a4da2	a9 00 00	lda #$0000	                LDA #0
.3a4da5	a0 00 00	ldy #$0000	                LDY #LINE_LINK
.3a4da8	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a4daa	a0 02 00	ldy #$0002	                LDY #LINE_NUMBER
.3a4dad	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a4daf	a0 04 00	ldy #$0004	                LDY #LINE_TOKENS
.3a4db2	97 d9		sta [$08d9],y	                STA [LASTLINE],Y
.3a4db4	20 14 1f	jsr $3a1f14	            JSR CLRINTERP
.3a4db7	2b		pld		                PLD
.3a4db8	28		plp		                PLP
.3a4db9	60		rts		            RTS
.3a4dba					CMD_RUN
.3a4dba	8b		phb		                PHB
.3a4dbb	08		php		                PHP
.3a4dbc	c2 20		rep #$20	            REP #$20
.3a4dbe	a9 00 00	lda #$0000	                LDA #<>BASIC_BOT            ; Point to the first line of the program
.3a4dc1	85 1a		sta $081a	                STA CURLINE
.3a4dc3	a9 36 00	lda #$0036	                LDA #`BASIC_BOT
.3a4dc6	85 1c		sta $081c	                STA CURLINE + 2
.3a4dc8	20 14 1f	jsr $3a1f14	            JSR CLRINTERP
.3a4dcb	20 f3 21	jsr $3a21f3	            JSR EXECPROGRAM
.3a4dce	28		plp		                PLP
.3a4dcf	ab		plb		                PLB
.3a4dd0	60		rts		            RTS
.3a4dd1					CMD_LIST
.3a4dd1	08		php		                PHP
.3a4dd2	c2 20		rep #$20	            REP #$20
.3a4dd4	64 55		stz $0855	                STZ MARG1               ; MARG1 is starting line number, default 0
.3a4dd6	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.3a4dd9	85 59		sta $0859	                STA MARG2               ; MARG2 is ending line number, default MAXINT
.3a4ddb	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a4dde	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a4de1	29 ff 00	and #$00ff	                AND #$00FF
.3a4de4	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.3a4de7	f0 2c		beq $3a4e15	                BEQ call_list           ; ... just list with the defaults
.3a4de9	c9 81 00	cmp #$0081	                CMP #TOK_MINUS          ; If just "- ###"...
.3a4dec	f0 1a		beq $3a4e08	                BEQ parse_endline       ; ... try to parse the end line number
.3a4dee	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a4df1	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a4df4	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG1
.3a4df6	85 55		sta $0855	                STA MARG1
.3a4df8	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a4dfb	29 ff 00	and #$00ff	                AND #$00FF
.3a4dfe	c9 00 00	cmp #$0000	                CMP #0                  ; If no arguments...
.3a4e01	f0 12		beq $3a4e15	                BEQ call_list           ; ... just list with the defaults
.3a4e03	c9 81 00	cmp #$0081	                CMP #TOK_MINUS
.3a4e06	d0 2a		bne $3a4e32	                BNE error               ; At this point, if not '-', it's a syntax error
.3a4e08					parse_endline
.3a4e08	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a4e0b	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a4e0e	20 8a 07	jsr $3a078a	            JSR PARSEINT
.3a4e11	a5 23		lda $0823	                LDA ARGUMENT1           ; And save it to MARG2
.3a4e13	85 59		sta $0859	                STA MARG2
.3a4e15	a5 1c		lda $081c	call_list       LDA CURLINE+2           ; Save CURLINE
.3a4e17	48		pha		                PHA
.3a4e18	a5 1a		lda $081a	                LDA CURLINE
.3a4e1a	48		pha		                PHA
.3a4e1b	a5 02		lda $0802	                LDA BIP+2               ; Save BIP
.3a4e1d	48		pha		                PHA
.3a4e1e	a5 00		lda $0800	                LDA BIP
.3a4e20	48		pha		                PHA
.3a4e21	20 f0 16	jsr $3a16f0	            JSR LISTPROG
.3a4e24	68		pla		                PLA
.3a4e25	85 00		sta $0800	                STA BIP
.3a4e27	68		pla		                PLA
.3a4e28	85 02		sta $0802	                STA BIP+2
.3a4e2a	68		pla		                PLA
.3a4e2b	85 1a		sta $081a	                STA CURLINE
.3a4e2d	68		pla		                PLA
.3a4e2e	85 1c		sta $081c	                STA CURLINE+2
.3a4e30	28		plp		                PLP
.3a4e31	60		rts		            RTS
.3a4e32					error
.3a4e32	08		php		            PHP
.3a4e33	c2 20		rep #$20	            REP #$20
.3a4e35	48		pha		            PHA
.3a4e36	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4e39	5b		tcd		            TCD
.3a4e3a	68		pla		            PLA
.3a4e3b	28		plp		            PLP
.3a4e3c	e2 20		sep #$20	            SEP #$20
.3a4e3e	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a4e40	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4e44	c2 20		rep #$20	            REP #$20
.3a4e46	29 ff 00	and #$00ff	            AND #$00FF
.3a4e49	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4e4c	e2 20		sep #$20	            SEP #$20
.3a4e4e	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]

;******  Return to file: src\basic816.s


;******  Processing file: src\variables.s

>08e1					NEXTVAR         .long ?         ; Pointer to the the next available byte for variable bindings
>08e4					VARIABLES       .long ?         ; Pointer to the most recently allocated variable
>08e7					TOFIND          .long ?         ; Pointer to the variable name to find
>08ea					TOFINDTYPE      .byte ?         ; The type to find
.0000					BINDING
>0000					TYPE            .fill 1                 ; The type of the data stored in the variable
>0001					NAME            .fill VAR_NAME_SIZE     ; The name of the variable
>0009					VALUE           .fill 4                 ; The data stored in the variable
>000d					NEXT            .fill 3                 ; The pointer to the next allocated variable of this type
.3a4e51					INITVARS
.3a4e51	08		php		                PHP
.3a4e52	08		php		            PHP
.3a4e53	c2 20		rep #$20	            REP #$20
.3a4e55	48		pha		            PHA
.3a4e56	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4e59	5b		tcd		            TCD
.3a4e5a	68		pla		            PLA
.3a4e5b	28		plp		            PLP
.3a4e5c	c2 20		rep #$20	            REP #$20
.3a4e5e	64 e4		stz $08e4	                STZ VARIABLES           ; Clear the pointer to the variables
.3a4e60	64 e7		stz $08e7	                STZ TOFIND
.3a4e62	e2 20		sep #$20	            SEP #$20
.3a4e64	64 e6		stz $08e6	                STZ VARIABLES+2
.3a4e66	64 e9		stz $08e9	                STZ TOFIND+2
.3a4e68	64 ea		stz $08ea	                STZ TOFINDTYPE
.3a4e6a	c2 20		rep #$20	            REP #$20
.3a4e6c	38		sec		                SEC                     ; Compute the position of the first variable
.3a4e6d	a5 d9		lda $08d9	                LDA LASTLINE
.3a4e6f	69 04 00	adc #$0004	                ADC #LINE_TOKENS
.3a4e72	85 e1		sta $08e1	                STA NEXTVAR
.3a4e74	e2 20		sep #$20	            SEP #$20
.3a4e76	a5 db		lda $08db	                LDA LASTLINE+2
.3a4e78	69 00		adc #$00	                ADC #0
.3a4e7a	85 e3		sta $08e3	                STA NEXTVAR+2
.3a4e7c	28		plp		                PLP
.3a4e7d	60		rts		            RTS
.3a4e7e					ISVARCHAR
.3a4e7e	c9 5f		cmp #$5f	                CMP #'_'            ; Check if it's an underscore
.3a4e80	f0 1a		beq $3a4e9c	                BEQ return_true     ; Yes: return true
.3a4e82	c9 3a		cmp #$3a	                CMP #'9'+1          ; Check if its in [0-9]
.3a4e84	b0 04		bcs $3a4e8a	                BGE else1           ; No: check something else
.3a4e86	c9 30		cmp #$30	                CMP #'0'
.3a4e88	b0 12		bcs $3a4e9c	                BGE return_true     ; Yes: return true
.3a4e8a	c9 5b		cmp #$5b	else1           CMP #'Z'+1          ; Check if its in [A-Z]
.3a4e8c	b0 04		bcs $3a4e92	                BGE not_upper       ; No: check lower case
.3a4e8e	c9 41		cmp #$41	                CMP #'A'
.3a4e90	b0 0a		bcs $3a4e9c	                BGE return_true     ; Yes: return true
.3a4e92	c9 7b		cmp #$7b	not_upper       CMP #'z'+1          ; Check if its in [a-z]
.3a4e94	b0 04		bcs $3a4e9a	                BGE return_false    ; No: return false
.3a4e96	c9 61		cmp #$61	                CMP #'a'
.3a4e98	b0 02		bcs $3a4e9c	                BGE return_true     ; Yes: return true
.3a4e9a	18		clc		return_false    CLC
.3a4e9b	60		rts		            RTS
.3a4e9c	38		sec		return_true     SEC
.3a4e9d	60		rts		            RTS
.3a4e9e					VARNAMECMP
.3a4e9e	08		php		                PHP
.3a4e9f	e2 20		sep #$20	            SEP #$20
.3a4ea1	c2 10		rep #$10	            REP #$10
.3a4ea3	a0 00 00	ldy #$0000	                LDY #0
.3a4ea6	b7 0c		lda [$080c],y	cmp_loop        LDA [SCRATCH],Y         ; Check the character in the variable name
.3a4ea8	f0 0a		beq $3a4eb4	                BEQ is_end
.3a4eaa	d7 e7		cmp [$08e7],y	                CMP [TOFIND],Y          ; Compare the character to the one TOFIND
.3a4eac	d0 13		bne $3a4ec1	                BNE return_false        ; Not equal? Then this is not a match
.3a4eae	c8		iny		                INY
.3a4eaf	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a4eb2	d0 f2		bne $3a4ea6	                BNE cmp_loop
.3a4eb4	b7 e7		lda [$08e7],y	is_end          LDA [TOFIND],Y          ; Check the character in the name to find
.3a4eb6	20 08 04	jsr $3a0408	            JSR TOUPPERA
.3a4eb9	20 7e 4e	jsr $3a4e7e	            JSR ISVARCHAR
.3a4ebc	b0 03		bcs $3a4ec1	                BCS return_false        ; YES: we do not have a match
.3a4ebe					return_true
.3a4ebe	28		plp		                PLP
.3a4ebf	38		sec		                SEC
.3a4ec0	60		rts		            RTS
.3a4ec1					return_false
.3a4ec1	28		plp		                PLP
.3a4ec2	18		clc		                CLC
.3a4ec3	60		rts		            RTS
.3a4ec4					VAR_FIND
.3a4ec4	08		php		                PHP
.3a4ec5	e2 20		sep #$20	            SEP #$20
.3a4ec7	c2 10		rep #$10	            REP #$10
.3a4ec9	a0 00 00	ldy #$0000	                LDY #0
.3a4ecc	a2 00 00	ldx #$0000	                LDX #0
.3a4ecf	b7 e7		lda [$08e7],y	upper_loop      LDA [TOFIND],Y          ; Get a character
.3a4ed1	f0 0b		beq $3a4ede	                BEQ done_upper
.3a4ed3	20 08 04	jsr $3a0408	            JSR TOUPPERA
.3a4ed6	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; And save it to the temp
.3a4eda	c8		iny		                INY
.3a4edb	e8		inx		                INX
.3a4edc	80 f1		bra $3a4ecf	                BRA upper_loop          ; Go back for another
.3a4ede	a9 00		lda #$00	done_upper      LDA #0
.3a4ee0	9f 00 4e 00	sta $004e00,x	                STA @lTEMPBUF,X         ; NULL terminate the temporary string
.3a4ee4	c2 20		rep #$20	            REP #$20
.3a4ee6	a9 00 4e	lda #$4e00	                LDA #<>TEMPBUF          ; Make the temporary string the string
.3a4ee9	85 e7		sta $08e7	                STA TOFIND              ; the variable name to find
.3a4eeb	e2 20		sep #$20	            SEP #$20
.3a4eed	a9 00		lda #$00	                LDA #`TEMPBUF
.3a4eef	85 e9		sta $08e9	                STA TOFIND+2
.3a4ef1	c2 20		rep #$20	            REP #$20
.3a4ef3	a5 e4		lda $08e4	                LDA VARIABLES           ; Point INDEX to the first variable to check
.3a4ef5	85 08		sta $0808	                STA INDEX
.3a4ef7	d0 06		bne $3a4eff	                BNE set_index_h         ; If the low word is not 0, copy the high byte
.3a4ef9	e2 20		sep #$20	            SEP #$20
.3a4efb	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a4efd	f0 4d		beq $3a4f4c	                BEQ not_found           ; If it is, we have no variables yet.
.3a4eff					set_index_h
.3a4eff	e2 20		sep #$20	            SEP #$20
.3a4f01	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a4f03	85 0a		sta $080a	                STA INDEX+2
.3a4f05	a5 ea		lda $08ea	check_binding   LDA TOFINDTYPE
.3a4f07	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Get the type of the variable
.3a4f0a	d7 08		cmp [$0808],y	                CMP [INDEX],Y
.3a4f0c	d0 17		bne $3a4f25	                BNE check_next          ; If it's not a match, check the next binding
.3a4f0e	c2 20		rep #$20	            REP #$20
.3a4f10	18		clc		                CLC
.3a4f11	a5 08		lda $0808	                LDA INDEX
.3a4f13	69 01 00	adc #$0001	                ADC #BINDING.NAME
.3a4f16	85 0c		sta $080c	                STA SCRATCH
.3a4f18	e2 20		sep #$20	            SEP #$20
.3a4f1a	a5 0a		lda $080a	                LDA INDEX+2
.3a4f1c	69 00		adc #$00	                ADC #0
.3a4f1e	85 0e		sta $080e	                STA SCRATCH+2
.3a4f20	20 9e 4e	jsr $3a4e9e	            JSR VARNAMECMP
.3a4f23	b0 2a		bcs $3a4f4f	                BCS found               ; If they match, return that we've found the variable
.3a4f25	a0 0d 00	ldy #$000d	check_next      LDY #BINDING.NEXT       ; SCRATCH := [INDEX].NEXT
.3a4f28	c2 20		rep #$20	            REP #$20
.3a4f2a	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4f2c	85 0c		sta $080c	                STA SCRATCH
.3a4f2e	c8		iny		                INY
.3a4f2f	c8		iny		                INY
.3a4f30	e2 20		sep #$20	            SEP #$20
.3a4f32	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4f34	85 0e		sta $080e	                STA SCRATCH+2
.3a4f36	d0 06		bne $3a4f3e	                BNE set_index           ; If SCRATCH == 0, the variable wasn't found
.3a4f38	c2 20		rep #$20	            REP #$20
.3a4f3a	a5 0c		lda $080c	                LDA SCRATCH
.3a4f3c	f0 0e		beq $3a4f4c	                BEQ not_found
.3a4f3e					set_index
.3a4f3e	c2 20		rep #$20	            REP #$20
.3a4f40	a5 0c		lda $080c	                LDA SCRATCH
.3a4f42	85 08		sta $0808	                STA INDEX
.3a4f44	e2 20		sep #$20	            SEP #$20
.3a4f46	a5 0e		lda $080e	                LDA SCRATCH+2
.3a4f48	85 0a		sta $080a	                STA INDEX+2
.3a4f4a	80 b9		bra $3a4f05	                BRA check_binding       ; And check this next variable for a match
.3a4f4c					not_found
.3a4f4c	28		plp		                PLP
.3a4f4d	18		clc		                CLC
.3a4f4e	60		rts		            RTS
.3a4f4f					found
.3a4f4f	28		plp		                PLP
.3a4f50	38		sec		                SEC
.3a4f51	60		rts		            RTS
.3a4f52					VAR_REF
.3a4f52	08		php		                PHP
.3a4f53	20 c4 4e	jsr $3a4ec4	            JSR VAR_FIND
.3a4f56	b0 1f		bcs $3a4f77	                BCS found
.3a4f58	08		php		            PHP
.3a4f59	c2 20		rep #$20	            REP #$20
.3a4f5b	48		pha		            PHA
.3a4f5c	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4f5f	5b		tcd		            TCD
.3a4f60	68		pla		            PLA
.3a4f61	28		plp		            PLP
.3a4f62	e2 20		sep #$20	            SEP #$20
.3a4f64	a9 05		lda #$05	            LDA #ERR_NOTFOUND
.3a4f66	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4f6a	c2 20		rep #$20	            REP #$20
.3a4f6c	29 ff 00	and #$00ff	            AND #$00FF
.3a4f6f	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4f72	e2 20		sep #$20	            SEP #$20
.3a4f74	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4f77					found
.3a4f77	c2 30		rep #$30	            REP #$30
.3a4f79	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a4f7c	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4f7e	85 23		sta $0823	                STA ARGUMENT1
.3a4f80	c8		iny		                INY
.3a4f81	c8		iny		                INY
.3a4f82	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4f84	85 25		sta $0825	                STA ARGUMENT1+2
.3a4f86	e2 20		sep #$20	            SEP #$20
.3a4f88	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE
.3a4f8b	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a4f8d	85 27		sta $0827	                STA ARGTYPE1
.3a4f8f	28		plp		done            PLP
.3a4f90	60		rts		            RTS
.3a4f91					VAR_ALLOC
.3a4f91	08		php		                PHP
.3a4f92	c2 20		rep #$20	            REP #$20
.3a4f94	18		clc		                CLC                     ; Compute extent of the binding
.3a4f95	a5 e1		lda $08e1	                LDA NEXTVAR
.3a4f97	69 10 00	adc #$0010	                ADC #size(BINDING)
.3a4f9a	85 08		sta $0808	                STA INDEX
.3a4f9c	e2 20		sep #$20	            SEP #$20
.3a4f9e	a5 e3		lda $08e3	                LDA NEXTVAR+2
.3a4fa0	69 00		adc #$00	                ADC #0
.3a4fa2	85 0a		sta $080a	                STA INDEX+2
.3a4fa4	c5 bc		cmp $08bc	                CMP HEAP+2              ; Check to see if HEAP > INDEX
.3a4fa6	90 27		bcc $3a4fcf	                BLT has_room
.3a4fa8	c2 20		rep #$20	            REP #$20
.3a4faa	a5 08		lda $0808	                LDA INDEX
.3a4fac	c5 ba		cmp $08ba	                CMP HEAP
.3a4fae	90 1f		bcc $3a4fcf	                BLT has_room
.3a4fb0	08		php		            PHP
.3a4fb1	c2 20		rep #$20	            REP #$20
.3a4fb3	48		pha		            PHA
.3a4fb4	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a4fb7	5b		tcd		            TCD
.3a4fb8	68		pla		            PLA
.3a4fb9	28		plp		            PLP
.3a4fba	e2 20		sep #$20	            SEP #$20
.3a4fbc	a9 09		lda #$09	            LDA #ERR_RANGE
.3a4fbe	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a4fc2	c2 20		rep #$20	            REP #$20
.3a4fc4	29 ff 00	and #$00ff	            AND #$00FF
.3a4fc7	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a4fca	e2 20		sep #$20	            SEP #$20
.3a4fcc	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a4fcf					has_room
.3a4fcf	c2 20		rep #$20	            REP #$20
.3a4fd1	a5 e1		lda $08e1	                LDA NEXTVAR             ; Yes: we can allocate the variable
.3a4fd3	85 c0		sta $08c0	                STA CURRBLOCK           ; Point CURRBLOCK to it
.3a4fd5	e2 20		sep #$20	            SEP #$20
.3a4fd7	a5 e3		lda $08e3	                LDA NEXTVAR+2
.3a4fd9	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a4fdb	c2 20		rep #$20	            REP #$20
.3a4fdd	a5 08		lda $0808	                LDA INDEX               ; And point NEXTVAR to the next possible spot
.3a4fdf	85 e1		sta $08e1	                STA NEXTVAR
.3a4fe1	e2 20		sep #$20	            SEP #$20
.3a4fe3	a5 0a		lda $080a	                LDA INDEX+2
.3a4fe5	85 e3		sta $08e3	                STA NEXTVAR+2
.3a4fe7	28		plp		                PLP
.3a4fe8	60		rts		            RTS
.3a4fe9					VAR_CREATE
.3a4fe9	08		php		                PHP
.3a4fea	e2 20		sep #$20	            SEP #$20
.3a4fec	a5 27		lda $0827	                LDA ARGTYPE1            ; Validate that our types match
.3a4fee	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.3a4ff0	f0 33		beq $3a5025	                BEQ chk_string          ; If so: check to see if it's a string
.3a4ff2	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable type
.3a4ff4	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; If it's INTEGER
.3a4ff6	d0 05		bne $3a4ffd	                BNE chk_float
.3a4ff8	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a4ffb	80 2f		bra $3a502c	                BRA alloc_binding       ; And bind the variable
.3a4ffd	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; If it's FLOAT
.3a4fff	d0 05		bne $3a5006	                BNE type_error
.3a5001	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a5004	80 26		bra $3a502c	                BRA alloc_binding       ; And bind the variable
.3a5006					type_error
.3a5006	08		php		            PHP
.3a5007	c2 20		rep #$20	            REP #$20
.3a5009	48		pha		            PHA
.3a500a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a500d	5b		tcd		            TCD
.3a500e	68		pla		            PLA
.3a500f	28		plp		            PLP
.3a5010	e2 20		sep #$20	            SEP #$20
.3a5012	a9 04		lda #$04	            LDA #ERR_TYPE
.3a5014	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5018	c2 20		rep #$20	            REP #$20
.3a501a	29 ff 00	and #$00ff	            AND #$00FF
.3a501d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a5020	e2 20		sep #$20	            SEP #$20
.3a5022	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5025	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING        ; Is it a string?
.3a5027	d0 03		bne $3a502c	                BNE alloc_binding       ; No: just go ahead and bind it
.3a5029	20 80 15	jsr $3a1580	            JSR STRCPY
.3a502c					alloc_binding
.3a502c	c2 10		rep #$10	            REP #$10
.3a502e	20 91 4f	jsr $3a4f91	            JSR VAR_ALLOC
.3a5031	c2 30		rep #$30	            REP #$30
.3a5033	18		clc		                CLC
.3a5034	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a5036	69 01 00	adc #$0001	                ADC #BINDING.NAME
.3a5039	85 08		sta $0808	                STA INDEX
.3a503b	e2 20		sep #$20	            SEP #$20
.3a503d	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a503f	69 00		adc #$00	                ADC #0
.3a5041	85 0a		sta $080a	                STA INDEX+2
.3a5043	a0 00 00	ldy #$0000	                LDY #0                  ; Ensure that the name field is blank
.3a5046	a9 00		lda #$00	                LDA #0
.3a5048	97 08		sta [$0808],y	blank_loop      STA [INDEX],Y
.3a504a	c8		iny		                INY
.3a504b	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a504e	d0 f8		bne $3a5048	                BNE blank_loop
.3a5050	a0 00 00	ldy #$0000	                LDY #0
.3a5053	b7 e7		lda [$08e7],y	name_loop       LDA [TOFIND],Y          ; Copy TOFIND to the NAME field
.3a5055	f0 10		beq $3a5067	                BEQ set_type
.3a5057	20 08 04	jsr $3a0408	            JSR TOUPPERA
.3a505a	20 7e 4e	jsr $3a4e7e	            JSR ISVARCHAR
.3a505d	90 08		bcc $3a5067	                BCC set_type
.3a505f	97 08		sta [$0808],y	                STA [INDEX],Y
.3a5061	c8		iny		                INY
.3a5062	c0 08 00	cpy #$0008	                CPY #VAR_NAME_SIZE
.3a5065	d0 ec		bne $3a5053	                BNE name_loop
.3a5067					set_type
.3a5067	c2 20		rep #$20	            REP #$20
.3a5069	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE      ; Copy the value to the variable
.3a506c	a5 23		lda $0823	                LDA ARGUMENT1
.3a506e	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5070	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5072	c8		iny		                INY
.3a5073	c8		iny		                INY
.3a5074	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5076	a5 e4		lda $08e4	                LDA VARIABLES           ; Point NEXT to the current top of variables
.3a5078	a0 0d 00	ldy #$000d	                LDY #BINDING.NEXT
.3a507b	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a507d	c8		iny		                INY
.3a507e	c8		iny		                INY
.3a507f	e2 20		sep #$20	            SEP #$20
.3a5081	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a5083	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a5085	c2 20		rep #$20	            REP #$20
.3a5087	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a5089	85 e4		sta $08e4	                STA VARIABLES
.3a508b	e2 20		sep #$20	            SEP #$20
.3a508d	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a508f	85 e6		sta $08e6	                STA VARIABLES+2
.3a5091	e2 20		sep #$20	            SEP #$20
.3a5093	a0 00 00	ldy #$0000	                LDY #BINDING.TYPE       ; Set the type of the variable
.3a5096	a5 27		lda $0827	                LDA ARGTYPE1
.3a5098	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y
.3a509a	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is it a string?
.3a509c	f0 02		beq $3a50a0	                BEQ set_ref             ; Yes: add a reference count to it
.3a509e	28		plp		done            PLP
.3a509f	60		rts		            RTS
.3a50a0					set_ref
.3a50a0	c2 20		rep #$20	            REP #$20
.3a50a2	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the a heap allocated value
.3a50a4	85 c0		sta $08c0	                STA CURRBLOCK
.3a50a6	e2 20		sep #$20	            SEP #$20
.3a50a8	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a50aa	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a50ac	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a50af	20 b1 11	jsr $3a11b1	            JSR HEAP_ADDREF
.3a50b2	80 ea		bra $3a509e	                BRA done
.3a50b4					VAR_SET
.3a50b4	08		php		                PHP
.3a50b5	c2 30		rep #$30	            REP #$30
.3a50b7	a5 e4		lda $08e4	                LDA VARIABLES          ; If VARIABLES = 0, use VAR_CREATE
.3a50b9	d0 06		bne $3a50c1	                BNE use_find
.3a50bb	e2 20		sep #$20	            SEP #$20
.3a50bd	a5 e6		lda $08e6	                LDA VARIABLES+2
.3a50bf	f0 05		beq $3a50c6	                BEQ use_create
.3a50c1					use_find
.3a50c1	20 c4 4e	jsr $3a4ec4	            JSR VAR_FIND
.3a50c4	b0 05		bcs $3a50cb	                BCS found
.3a50c6					use_create
.3a50c6	20 e9 4f	jsr $3a4fe9	            JSR VAR_CREATE
.3a50c9	80 4e		bra $3a5119	                BRA done
.3a50cb					found
.3a50cb	e2 20		sep #$20	            SEP #$20
.3a50cd	a5 27		lda $0827	                LDA ARGTYPE1            ; Do the types match?
.3a50cf	c5 ea		cmp $08ea	                CMP TOFINDTYPE
.3a50d1	f0 33		beq $3a5106	                BEQ chk_string          ; Yes: check to see if it's string
.3a50d3	a5 ea		lda $08ea	                LDA TOFINDTYPE          ; Check the variable
.3a50d5	c9 00		cmp #$00	                CMP #TYPE_INTEGER       ; Is it INTEGER?
.3a50d7	d0 05		bne $3a50de	                BNE chk_float
.3a50d9	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a50dc	80 2c		bra $3a510a	                BRA set_val
.3a50de	c9 01		cmp #$01	chk_float       CMP #TYPE_FLOAT         ; Is it FLOAT?
.3a50e0	d0 05		bne $3a50e7	                BNE type_error          ; No: throw an error
.3a50e2	20 71 06	jsr $3a0671	            JSR ASS_ARG1_FLOAT
.3a50e5	80 23		bra $3a510a	                BRA set_val
.3a50e7					type_error
.3a50e7	08		php		            PHP
.3a50e8	c2 20		rep #$20	            REP #$20
.3a50ea	48		pha		            PHA
.3a50eb	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a50ee	5b		tcd		            TCD
.3a50ef	68		pla		            PLA
.3a50f0	28		plp		            PLP
.3a50f1	e2 20		sep #$20	            SEP #$20
.3a50f3	a9 04		lda #$04	            LDA #ERR_TYPE
.3a50f5	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a50f9	c2 20		rep #$20	            REP #$20
.3a50fb	29 ff 00	and #$00ff	            AND #$00FF
.3a50fe	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a5101	e2 20		sep #$20	            SEP #$20
.3a5103	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5106	c9 02		cmp #$02	chk_string      CMP #TYPE_STRING
.3a5108	f0 11		beq $3a511b	                BEQ set_string          ; Yes: set the string value of the variable
.3a510a					set_val
.3a510a	c2 30		rep #$30	            REP #$30
.3a510c	a0 09 00	ldy #$0009	                LDY #BINDING.VALUE
.3a510f	a5 23		lda $0823	                LDA ARGUMENT1
.3a5111	97 08		sta [$0808],y	                STA [INDEX],Y
.3a5113	c8		iny		                INY
.3a5114	c8		iny		                INY
.3a5115	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5117	97 08		sta [$0808],y	                STA [INDEX],Y
.3a5119					done
.3a5119	28		plp		                PLP
.3a511a	60		rts		            RTS
.3a511b					set_string
.3a511b	20 80 15	jsr $3a1580	            JSR STRCPY
.3a511e	a0 09 00	ldy #$0009	set_ref         LDY #BINDING.VALUE      ; Set CURRBLOCK to the current string value
.3a5121	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a5123	85 c0		sta $08c0	                STA CURRBLOCK
.3a5125	c8		iny		                INY
.3a5126	c8		iny		                INY
.3a5127	e2 20		sep #$20	            SEP #$20
.3a5129	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a512b	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a512d	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a5130	20 d0 11	jsr $3a11d0	            JSR HEAP_REMREF
.3a5133	e2 20		sep #$20	            SEP #$20
.3a5135	a5 27		lda $0827	                LDA ARGTYPE1
.3a5137	c9 02		cmp #$02	                CMP #TYPE_STRING        ; Is the new value a string?
.3a5139	f0 02		beq $3a513d	                BEQ add_ref             ; Yes: add a reference to it
.3a513b	80 cd		bra $3a510a	                BRA set_val             ; No: go back to set the value... this probably shouldn't happen
.3a513d					add_ref
.3a513d	c2 20		rep #$20	            REP #$20
.3a513f	a5 23		lda $0823	                LDA ARGUMENT1           ; Flag that we have a new reference to the new string value
.3a5141	85 c0		sta $08c0	                STA CURRBLOCK
.3a5143	e2 20		sep #$20	            SEP #$20
.3a5145	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5147	85 c2		sta $08c2	                STA CURRBLOCK+2
.3a5149	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a514c	20 b1 11	jsr $3a11b1	            JSR HEAP_ADDREF
.3a514f	80 b9		bra $3a510a	                BRA set_val
.3a5151					VAR_FINDNAME
.3a5151	08		php		                PHP
.3a5152	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a5155	e2 20		sep #$20	            SEP #$20
.3a5157	a7 00		lda [$0800]	                LDA [BIP]           ; Get the first character
.3a5159	20 94 03	jsr $3a0394	            JSR ISALPHA
.3a515c	90 42		bcc $3a51a0	                BCC not_found
.3a515e	c2 20		rep #$20	            REP #$20
.3a5160	a5 00		lda $0800	                LDA BIP
.3a5162	85 e7		sta $08e7	                STA TOFIND
.3a5164	e2 20		sep #$20	            SEP #$20
.3a5166	a5 02		lda $0802	                LDA BIP+2
.3a5168	85 e9		sta $08e9	                STA TOFIND+2
.3a516a					loop
.3a516a	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a516d	a7 00		lda [$0800]	                LDA [BIP]
.3a516f	f0 0d		beq $3a517e	                BEQ is_float        ; If it's EOL, the variable is a float
.3a5171	c9 24		cmp #$24	                CMP #'$'            ; If it's $, the variable is a string
.3a5173	f0 14		beq $3a5189	                BEQ is_string
.3a5175	c9 25		cmp #$25	                CMP #'%'            ; If it's %, the variable is an integer
.3a5177	f0 09		beq $3a5182	                BEQ is_integer
.3a5179	20 7e 4e	jsr $3a4e7e	            JSR ISVARCHAR
.3a517c	b0 ec		bcs $3a516a	                BCS loop            ; Check the next one
.3a517e	a9 01		lda #$01	is_float        LDA #TYPE_FLOAT     ; Otherwise it's a float
.3a5180	80 0c		bra $3a518e	                BRA set_type
.3a5182					is_integer
.3a5182	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a5185	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a5187	80 05		bra $3a518e	                BRA set_type
.3a5189					is_string
.3a5189	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a518c	a9 02		lda #$02	                LDA #TYPE_STRING
.3a518e	85 ea		sta $08ea	set_type        STA TOFINDTYPE
.3a5190	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a5193	c9 8f		cmp #$8f	                CMP #TOK_LPAREN     ; Is it "("?
.3a5195	d0 06		bne $3a519d	                BNE done            ; No: we're done... it's just a scalar variable
.3a5197	a5 ea		lda $08ea	                LDA TOFINDTYPE      ; Yes: this is an array reference
.3a5199	09 80		ora #$80	                ORA #$80            ; ... turn on the "Array of..." bit
.3a519b	85 ea		sta $08ea	                STA TOFINDTYPE
.3a519d					done
.3a519d	28		plp		                PLP
.3a519e	38		sec		                SEC
.3a519f	60		rts		            RTS
.3a51a0	28		plp		not_found       PLP
.3a51a1	18		clc		                CLC
.3a51a2	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\integers.s

.3a51a3					OP_INT_ADD
.3a51a3	08		php		            PHP
.3a51a4	c2 20		rep #$20	            REP #$20
.3a51a6	18		clc		            CLC
.3a51a7	a5 23		lda $0823	            LDA ARGUMENT1
.3a51a9	65 29		adc $0829	            ADC ARGUMENT2
.3a51ab	85 23		sta $0823	            STA ARGUMENT1
.3a51ad	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a51af	65 2b		adc $082b	            ADC ARGUMENT2+2
.3a51b1	85 25		sta $0825	            STA ARGUMENT1+2
.3a51b3	28		plp		            PLP
.3a51b4	60		rts		            RTS
.3a51b5					OP_INT_SUB
.3a51b5	08		php		            PHP
.3a51b6	c2 20		rep #$20	            REP #$20
.3a51b8	38		sec		            SEC
.3a51b9	a5 23		lda $0823	            LDA ARGUMENT1
.3a51bb	e5 29		sbc $0829	            SBC ARGUMENT2
.3a51bd	85 23		sta $0823	            STA ARGUMENT1
.3a51bf	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a51c1	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a51c3	85 25		sta $0825	            STA ARGUMENT1+2
.3a51c5	28		plp		            PLP
.3a51c6	60		rts		            RTS
.3a51c7					OP_INT_MUL
.3a51c7	08		php		            PHP
.3a51c8					locals
>0001					L_SIGN      .word ?
>0003					L_RESULT    .dword ?
>0007					            .dword ?
.3a51c8	c2 20		rep #$20	            REP #$20
.3a51ca	3b		tsc		            TSC
.3a51cb	38		sec		            SEC
.3a51cc	e9 0a 00	sbc #$000a	            SBC #SIZE(locals)
.3a51cf	1b		tcs		            TCS
.3a51d0	c2 30		rep #$30	            REP #$30
.3a51d2	a9 00 00	lda #$0000	            LDA #0                  ; Start by assuming positive numbers
.3a51d5	83 01		sta $01,s	            STA L_SIGN
.3a51d7	83 03		sta $03,s	            STA L_RESULT            ; Clear result
.3a51d9	83 05		sta $05,s	            STA L_RESULT+2
.3a51db	83 07		sta $07,s	            STA L_RESULT+4
.3a51dd	83 09		sta $09,s	            STA L_RESULT+6
.3a51df	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Ensure ARGUMENT1 is positive
.3a51e1	10 18		bpl $3a51fb	            BPL chk_sign2
.3a51e3	a9 00 80	lda #$8000	            LDA #$8000              ; Record that ARGUMENT1 is negative
.3a51e6	83 01		sta $01,s	            STA L_SIGN
.3a51e8	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Take the two's complement of ARGUMENT1
.3a51ea	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a51ed	85 25		sta $0825	            STA ARGUMENT1+2
.3a51ef	a5 23		lda $0823	            LDA ARGUMENT1
.3a51f1	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a51f4	1a		inc a		            INC A
.3a51f5	85 23		sta $0823	            STA ARGUMENT1
.3a51f7	d0 02		bne $3a51fb	            BNE chk_sign2
.3a51f9	e6 25		inc $0825	            INC ARGUMENT1+2
.3a51fb	a5 2b		lda $082b	chk_sign2   LDA ARGUMENT2+2         ; Ensure ARGUMENT2 is positive
.3a51fd	10 1a		bpl $3a5219	            BPL chk_over
.3a51ff	a3 01		lda $01,s	            LDA L_SIGN              ; Flip the sign
.3a5201	49 00 80	eor #$8000	            EOR #$8000
.3a5204	83 01		sta $01,s	            STA L_SIGN
.3a5206	a5 2b		lda $082b	            LDA ARGUMENT2+2         ; Take the two's complement of ARGUMENT2
.3a5208	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a520b	85 2b		sta $082b	            STA ARGUMENT2+2
.3a520d	a5 29		lda $0829	            LDA ARGUMENT2
.3a520f	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a5212	1a		inc a		            INC A
.3a5213	85 29		sta $0829	            STA ARGUMENT2
.3a5215	d0 02		bne $3a5219	            BNE chk_over
.3a5217	e6 2b		inc $082b	            INC ARGUMENT2+2
.3a5219					chk_over
.3a5219	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a521b	f0 04		beq $3a5221	            BEQ do_mult
.3a521d	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a521f	d0 5a		bne $3a527b	            BNE overflow
.3a5221					do_mult
.3a5221	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*D
.3a5223	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a5227	a5 29		lda $0829	            LDA ARGUMENT2
.3a5229	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a522d	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a5231	83 03		sta $03,s	            STA L_RESULT
.3a5233	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a5237	83 05		sta $05,s	            STA L_RESULT+2
.3a5239	a5 25		lda $0825	            LDA ARGUMENT1+2         ; Calculate A*D << 16 + B*D
.3a523b	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a523f	a5 29		lda $0829	            LDA ARGUMENT2
.3a5241	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a5245	18		clc		            CLC
.3a5246	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a524a	63 05		adc $05,s	            ADC L_RESULT+2
.3a524c	83 05		sta $05,s	            STA L_RESULT+2
.3a524e	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a5252	63 07		adc $07,s	            ADC L_RESULT+4
.3a5254	83 07		sta $07,s	            STA L_RESULT+4
.3a5256	a5 23		lda $0823	            LDA ARGUMENT1           ; Calculate B*C << 16 + A*D << 16 + B*D
.3a5258	8f 00 01 00	sta $000100	            STA @l M0_OPERAND_A
.3a525c	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a525e	8f 02 01 00	sta $000102	            STA @l M0_OPERAND_B
.3a5262	18		clc		            CLC
.3a5263	af 04 01 00	lda $000104	            LDA @l M0_RESULT
.3a5267	63 05		adc $05,s	            ADC L_RESULT+2
.3a5269	83 05		sta $05,s	            STA L_RESULT+2
.3a526b	af 06 01 00	lda $000106	            LDA @l M0_RESULT+2
.3a526f	63 07		adc $07,s	            ADC L_RESULT+4
.3a5271	83 07		sta $07,s	            STA L_RESULT+4
.3a5273	a3 07		lda $07,s	            LDA L_RESULT+4
.3a5275	f0 23		beq $3a529a	            BEQ no_overflow
.3a5277	a3 09		lda $09,s	            LDA L_RESULT+6
.3a5279	f0 1f		beq $3a529a	            BEQ no_overflow
.3a527b					overflow
.3a527b	08		php		            PHP
.3a527c	c2 20		rep #$20	            REP #$20
.3a527e	48		pha		            PHA
.3a527f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5282	5b		tcd		            TCD
.3a5283	68		pla		            PLA
.3a5284	28		plp		            PLP
.3a5285	e2 20		sep #$20	            SEP #$20
.3a5287	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a5289	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a528d	c2 20		rep #$20	            REP #$20
.3a528f	29 ff 00	and #$00ff	            AND #$00FF
.3a5292	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a5295	e2 20		sep #$20	            SEP #$20
.3a5297	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a529a					no_overflow
.3a529a	c2 30		rep #$30	            REP #$30
.3a529c	a3 01		lda $01,s	            LDA L_SIGN              ; Check the sign
.3a529e	10 16		bpl $3a52b6	            BPL ret_result          ; If positive: just return the result
.3a52a0	a3 05		lda $05,s	            LDA L_RESULT+2          ; Compute the two's complement of the result
.3a52a2	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a52a5	83 05		sta $05,s	            STA L_RESULT+2
.3a52a7	a3 03		lda $03,s	            LDA L_RESULT
.3a52a9	49 ff ff	eor #$ffff	            EOR #$FFFF
.3a52ac	1a		inc a		            INC A
.3a52ad	83 03		sta $03,s	            STA L_RESULT
.3a52af	d0 05		bne $3a52b6	            BNE ret_result
.3a52b1	a3 05		lda $05,s	            LDA L_RESULT+2
.3a52b3	1a		inc a		            INC A
.3a52b4	83 05		sta $05,s	            STA L_RESULT+2
.3a52b6					ret_result
.3a52b6	a3 03		lda $03,s	            LDA L_RESULT
.3a52b8	85 23		sta $0823	            STA ARGUMENT1
.3a52ba	a3 05		lda $05,s	            LDA L_RESULT+2
.3a52bc	85 25		sta $0825	            STA ARGUMENT1+2
.3a52be	c2 20		rep #$20	            REP #$20
.3a52c0	3b		tsc		            TSC
.3a52c1	18		clc		            CLC
.3a52c2	69 0a 00	adc #$000a	            ADC #SIZE(locals)
.3a52c5	1b		tcs		            TCS
.3a52c6	28		plp		            PLP
.3a52c7	60		rts		            RTS
.3a52c8					OP_INT_LT
.3a52c8	08		php		            PHP
.3a52c9	c2 20		rep #$20	            REP #$20
.3a52cb	a5 23		lda $0823	            LDA ARGUMENT1
.3a52cd	c5 29		cmp $0829	            CMP ARGUMENT2
.3a52cf	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a52d1	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a52d3	50 03		bvc $3a52d8	            BVC skip_eor
.3a52d5	49 00 80	eor #$8000	            EOR #$8000
.3a52d8	30 06		bmi $3a52e0	skip_eor    BMI ret_true
.3a52da	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a52dc	64 25		stz $0825	            STZ ARGUMENT1+2
.3a52de	80 07		bra $3a52e7	            BRA done
.3a52e0	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a52e3	85 23		sta $0823	            STA ARGUMENT1
.3a52e5	85 25		sta $0825	            STA ARGUMENT1+2
.3a52e7	28		plp		done        PLP
.3a52e8	60		rts		            RTS
.3a52e9					OP_INT_GT
.3a52e9	08		php		            PHP
.3a52ea	c2 20		rep #$20	            REP #$20
.3a52ec	a5 23		lda $0823	            LDA ARGUMENT1
.3a52ee	c5 29		cmp $0829	            CMP ARGUMENT2
.3a52f0	d0 0c		bne $3a52fe	            BNE test_fully
.3a52f2	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a52f4	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a52f6	d0 06		bne $3a52fe	            BNE test_fully
.3a52f8	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a52fa	64 25		stz $0825	            STZ ARGUMENT1+2
.3a52fc	80 16		bra $3a5314	            BRA done
.3a52fe	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.3a5300	c5 23		cmp $0823	            CMP ARGUMENT1
.3a5302	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a5304	e5 25		sbc $0825	            SBC ARGUMENT1+2
.3a5306	50 03		bvc $3a530b	            BVC skip_eor
.3a5308	49 00 80	eor #$8000	            EOR #$8000
.3a530b	10 eb		bpl $3a52f8	skip_eor    BPL ret_false
.3a530d	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a5310	85 23		sta $0823	            STA ARGUMENT1
.3a5312	85 25		sta $0825	            STA ARGUMENT1+2
.3a5314	28		plp		done        PLP
.3a5315	60		rts		            RTS
.3a5316					OP_INT_EQ
.3a5316	08		php		            PHP
.3a5317	c2 20		rep #$20	            REP #$20
.3a5319	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a531b	c5 25		cmp $0825	            CMP ARGUMENT1+2
.3a531d	d0 0f		bne $3a532e	            BNE ret_false
.3a531f	a5 29		lda $0829	            LDA ARGUMENT2
.3a5321	c5 23		cmp $0823	            CMP ARGUMENT1
.3a5323	d0 09		bne $3a532e	            BNE ret_false
.3a5325	a9 ff ff	lda #$ffff	            LDA #$FFFF
.3a5328	85 23		sta $0823	            STA ARGUMENT1
.3a532a	85 25		sta $0825	            STA ARGUMENT1+2
.3a532c	80 04		bra $3a5332	            BRA done
.3a532e	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5330	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5332	28		plp		done        PLP
.3a5333	60		rts		            RTS
.3a5334					OP_INT_NE
.3a5334	08		php		            PHP
.3a5335	c2 20		rep #$20	            REP #$20
.3a5337	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a5339	c5 25		cmp $0825	            CMP ARGUMENT1+2
.3a533b	d0 0c		bne $3a5349	            BNE ret_true
.3a533d	a5 29		lda $0829	            LDA ARGUMENT2
.3a533f	c5 23		cmp $0823	            CMP ARGUMENT1
.3a5341	d0 06		bne $3a5349	            BNE ret_true
.3a5343	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a5345	64 25		stz $0825	            STZ ARGUMENT1+2
.3a5347	80 07		bra $3a5350	            BRA done
.3a5349	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a534c	85 23		sta $0823	            STA ARGUMENT1
.3a534e	85 25		sta $0825	            STA ARGUMENT1+2
.3a5350	28		plp		done        PLP
.3a5351	60		rts		            RTS
.3a5352					OP_INT_GTE
.3a5352	08		php		            PHP
.3a5353	c2 20		rep #$20	            REP #$20
.3a5355	a5 23		lda $0823	            LDA ARGUMENT1
.3a5357	c5 29		cmp $0829	            CMP ARGUMENT2
.3a5359	d0 0f		bne $3a536a	            BNE test_fully
.3a535b	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a535d	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a535f	d0 09		bne $3a536a	            BNE test_fully
.3a5361	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a5364	85 23		sta $0823	            STA ARGUMENT1
.3a5366	85 25		sta $0825	            STA ARGUMENT1+2
.3a5368	80 13		bra $3a537d	            BRA done
.3a536a	a5 29		lda $0829	test_fully  LDA ARGUMENT2
.3a536c	c5 23		cmp $0823	            CMP ARGUMENT1
.3a536e	a5 2b		lda $082b	            LDA ARGUMENT2+2
.3a5370	e5 25		sbc $0825	            SBC ARGUMENT1+2
.3a5372	50 03		bvc $3a5377	            BVC skip_eor
.3a5374	49 00 80	eor #$8000	            EOR #$8000
.3a5377	30 e8		bmi $3a5361	skip_eor    BMI ret_true
.3a5379	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a537b	64 25		stz $0825	            STZ ARGUMENT1+2
.3a537d	28		plp		done        PLP
.3a537e	60		rts		            RTS
.3a537f					OP_INT_LTE
.3a537f	08		php		            PHP
.3a5380	c2 20		rep #$20	            REP #$20
.3a5382	a5 23		lda $0823	            LDA ARGUMENT1
.3a5384	c5 29		cmp $0829	            CMP ARGUMENT2
.3a5386	d0 0f		bne $3a5397	            BNE test_fully
.3a5388	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a538a	c5 2b		cmp $082b	            CMP ARGUMENT2+2
.3a538c	d0 09		bne $3a5397	            BNE test_fully
.3a538e	a9 ff ff	lda #$ffff	ret_true    LDA #$FFFF
.3a5391	85 23		sta $0823	            STA ARGUMENT1
.3a5393	85 25		sta $0825	            STA ARGUMENT1+2
.3a5395	80 13		bra $3a53aa	            BRA done
.3a5397	a5 23		lda $0823	test_fully  LDA ARGUMENT1
.3a5399	c5 29		cmp $0829	            CMP ARGUMENT2
.3a539b	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a539d	e5 2b		sbc $082b	            SBC ARGUMENT2+2
.3a539f	50 03		bvc $3a53a4	            BVC skip_eor
.3a53a1	49 00 80	eor #$8000	            EOR #$8000
.3a53a4	30 e8		bmi $3a538e	skip_eor    BMI ret_true
.3a53a6	64 23		stz $0823	ret_false   STZ ARGUMENT1
.3a53a8	64 25		stz $0825	            STZ ARGUMENT1+2
.3a53aa	28		plp		done        PLP
.3a53ab	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\floats.s


;******  Processing file: src\C256/floats.s


;******  Processing file: src\C256/fp_math_defs.s

=$afe200				FP_MATH_CTRL0 = $AFE200         ; Read/write
=$08					FP_MATH_CTRL0_ADD = $08         ; 0: Substraction - 1: Addition
=$01					FP_CTRL0_CONV_0 = %00000001     ; Input 0 should be converted from 24.12 fixed point to floating point
=$02					FP_CTRL0_CONV_1 = %00000010     ; Input 1 should be converted from 24.12 fixed point to floating point
=$00					FP_ADD_IN0_MUX0 = %00000000     ; Adder input #0 is the output of MUX0
=$10					FP_ADD_IN0_MUX1 = %00010000     ; Adder input #0 is the output of MUX1
=$20					FP_ADD_IN0_MULT = %00100000     ; Adder input #0 is the output of the multiplier
=$30					FP_ADD_IN0_DIV  = %00110000     ; Adder input #0 is the output of the divider
=$00					FP_ADD_IN1_MUX0 = %00000000     ; Adder input #1 is the output of MUX0
=$40					FP_ADD_IN1_MUX1 = %01000000     ; Adder input #1 is the output of MUX1
=$80					FP_ADD_IN1_MULT = %10000000     ; Adder input #1 is the output of the multiplier
=$c0					FP_ADD_IN1_DIV  = %11000000     ; Adder input #1 is the output of the divider
=$afe201				FP_MATH_CTRL1 = $AFE201
=$00					FP_OUT_MULT = %00000000         ; Output is from the multiplier
=$01					FP_OUT_DIV  = %00000001         ; Output is from the divider
=$02					FP_OUT_ADD  = %00000010         ; Output is from the adder/subtracter
=$03					FP_OUT_ONE  = %00000011         ; Output is the constant '1.0'
=$afe202				FP_MATH_CTRL2 = $AFE202         ; Not Used - Reserved
=$afe203				FP_MATH_CTRL3 = $AFE203         ; Not Used - Reserved
=$afe204				FP_MATH_MULT_STAT = $AFE204     ; Status of the multiplier
=$01					FP_MULT_STAT_NAN  = $01         ; (NAN) Not a Number Status
=$02					FP_MULT_STAT_OVF  = $02         ; Overflow
=$04					FP_MULT_STAT_UDF  = $04         ; Underflow
=$08					FP_MULT_STAT_ZERO = $08         ; Zero
=$afe205				FP_MATH_DIV_STAT  = $AFE205     ; Status of the divider
=$01					FP_DIV_STAT_NAN       = $01     ; Not a number Status
=$02					FP_DIV_STAT_OVF       = $02     ; Overflow
=$04					FP_DIV_STAT_UDF       = $04     ; Underflow
=$08					FP_DIV_STAT_ZERO      = $08     ; Zero
=$10					FP_DIV_STAT_DIVBYZERO = $10     ; Division by Zero
=$afe206				FP_MATH_ADD_STAT  = $AFE206     ; Status of the adder/subtracter
=$01					FP_ADD_STAT_NAN  = $01          ; Not a number Status
=$02					FP_ADD_STAT_OVF  = $02          ; Overflow
=$04					FP_ADD_STAT_UDF  = $04          ; Underflow
=$08					FP_ADD_STAT_ZERO = $08          ; Zero
=$afe207				FP_MATH_CONV_STAT = $AFE207     ; Status of the fixed <=> float converters
=$01					FP_CONV_STAT_NAN  = $01         ; Not a number Status
=$02					FP_CONV_STAT_OVF  = $02         ; Overflow
=$04					FP_CONV_STAT_UDF  = $04         ; Underflow
=$afe208				FP_MATH_INPUT0_LL = $AFE208
=$afe209				FP_MATH_INPUT0_LH = $AFE209
=$afe20a				FP_MATH_INPUT0_HL = $AFE20A
=$afe20b				FP_MATH_INPUT0_HH = $AFE20B
=$afe20c				FP_MATH_INPUT1_LL = $AFE20C
=$afe20d				FP_MATH_INPUT1_LH = $AFE20D
=$afe20e				FP_MATH_INPUT1_HL = $AFE20E
=$afe20f				FP_MATH_INPUT1_HH = $AFE20F
=$afe208				FP_MATH_OUTPUT_FP_LL = $AFE208
=$afe209				FP_MATH_OUTPUT_FP_LH = $AFE209
=$afe20a				FP_MATH_OUTPUT_FP_HL = $AFE20A
=$afe20b				FP_MATH_OUTPUT_FP_HH = $AFE20B
=$afe20c				FP_MATH_OUTPUT_FIXED_LL = $AFE20C
=$afe20d				FP_MATH_OUTPUT_FIXED_LH = $AFE20D
=$afe20e				FP_MATH_OUTPUT_FIXED_HL = $AFE20E
=$afe20f				FP_MATH_OUTPUT_FIXED_HH = $AFE20F

;******  Return to file: src\C256/floats.s


;******  Processing file: src\C256/math_cop.s

.3a53ac					UINT_DIV_A_X
.3a53ac	08		php		                    PHP
.3a53ad	c2 20		rep #$20	            REP #$20
.3a53af	8f 12 01 00	sta $000112	                    STA @l UNSIGNED_DIV_NUM_LO
.3a53b3	8a		txa		                    TXA
.3a53b4	8f 10 01 00	sta $000110	                    STA @l UNSIGNED_DIV_DEM_LO
.3a53b8	af 16 01 00	lda $000116	                    LDA @l UNSIGNED_DIV_REM_LO
.3a53bc	aa		tax		                    TAX
.3a53bd	af 14 01 00	lda $000114	                    LDA @l UNSIGNED_DIV_QUO_LO
.3a53c1	28		plp		                    PLP
.3a53c2	60		rts		            RTS

;******  Return to file: src\C256/floats.s

.3a53c3					FIXINT_TO_FP
.3a53c3	08		php		                    PHP
.3a53c4	e2 20		sep #$20	            SEP #$20
.3a53c6	a9 03		lda #$03	                    LDA #FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a53c8	8f 00 e2 af	sta $afe200	                    STA @l FP_MATH_CTRL0
.3a53cc	a9 00		lda #$00	                    LDA #FP_OUT_MULT
.3a53ce	8f 01 e2 af	sta $afe201	                    STA @l FP_MATH_CTRL1
.3a53d2	c2 20		rep #$20	            REP #$20
.3a53d4	a5 23		lda $0823	                    LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a53d6	8f 08 e2 af	sta $afe208	                    STA @l FP_MATH_INPUT0_LL
.3a53da	a5 25		lda $0825	                    LDA ARGUMENT1+2
.3a53dc	8f 0a e2 af	sta $afe20a	                    STA @l FP_MATH_INPUT0_HL
.3a53e0	a9 00 00	lda #$0000	                    LDA #0
.3a53e3	8f 0c e2 af	sta $afe20c	                    STA @l FP_MATH_INPUT1_LL    ; ARGUMENT2 = 0100 0000 = 4096 in 20:12
.3a53e7	a9 00 01	lda #$0100	                    LDA #$0100
.3a53ea	8f 0e e2 af	sta $afe20e	                    STA @l FP_MATH_INPUT1_HL
.3a53ee	ea		nop		                    NOP
.3a53ef	ea		nop		                    NOP
.3a53f0	ea		nop		                    NOP
.3a53f1	ea		nop		                    NOP
.3a53f2	ea		nop		                    NOP
.3a53f3	ea		nop		                    NOP
.3a53f4	af 08 e2 af	lda $afe208	                    LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a53f8	85 23		sta $0823	                    STA ARGUMENT1
.3a53fa	af 0a e2 af	lda $afe20a	                    LDA @l FP_MATH_OUTPUT_FP_HL
.3a53fe	85 25		sta $0825	                    STA ARGUMENT1+2
.3a5400	a9 01 00	lda #$0001	                    LDA #TYPE_FLOAT
.3a5403	85 27		sta $0827	                    STA ARGTYPE1
.3a5405	28		plp		                    PLP
.3a5406	60		rts		            RTS
.3a5407	08		php		OP_FP_SUB       PHP
.3a5408	e2 20		sep #$20	            SEP #$20
.3a540a	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a540c	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a5410	80 09		bra $3a541b	                BRA FP_ADD_SUB
.3a5412	08		php		OP_FP_ADD       PHP
.3a5413	e2 20		sep #$20	            SEP #$20
.3a5415	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5417	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a541b	a9 02		lda #$02	FP_ADD_SUB      LDA #FP_OUT_ADD
.3a541d	8f 01 e2 af	sta $afe201	                STA @lFP_MATH_CTRL1
.3a5421	c2 20		rep #$20	            REP #$20
.3a5423	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a5425	8f 08 e2 af	sta $afe208	                STA @lFP_MATH_INPUT0_LL
.3a5429	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a542b	8f 0a e2 af	sta $afe20a	                STA @lFP_MATH_INPUT0_HL
.3a542f	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a5431	8f 0c e2 af	sta $afe20c	                STA @lFP_MATH_INPUT1_LL
.3a5435	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a5437	8f 0e e2 af	sta $afe20e	                STA @lFP_MATH_INPUT1_HL
.3a543b	ea		nop		                NOP
.3a543c	ea		nop		                NOP
.3a543d	ea		nop		                NOP
.3a543e	e2 20		sep #$20	            SEP #$20
.3a5440	af 06 e2 af	lda $afe206	                LDA @lFP_MATH_ADD_STAT      ; Check the status of the addition
.3a5444	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.3a5446	d0 10		bne $3a5458	                BNE fp_add_error            ; If an issue was raise, process the math error
.3a5448	c2 20		rep #$20	            REP #$20
.3a544a	af 08 e2 af	lda $afe208	                LDA @lFP_MATH_OUTPUT_FP_LL  ; Retrieve the results into ARGUMENT1
.3a544e	85 23		sta $0823	                STA ARGUMENT1
.3a5450	af 0a e2 af	lda $afe20a	                LDA @lFP_MATH_OUTPUT_FP_HL
.3a5454	85 25		sta $0825	                STA ARGUMENT1+2
.3a5456	28		plp		fp_add_done     PLP
.3a5457	60		rts		            RTS
.3a5458					fp_add_error
.3a5458	20 f3 54	jsr $3a54f3	            JSR FP_MATH_ERROR
.3a545b	80 f9		bra $3a5456	                BRA fp_add_done
.3a545d	08		php		OP_FP_DIV       PHP
.3a545e	e2 20		sep #$20	            SEP #$20
.3a5460	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a5462	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5466	a9 00		lda #$00	                LDA #0
.3a5468	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a546c	c2 20		rep #$20	            REP #$20
.3a546e	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a5470	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5474	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5476	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a547a	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a547c	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5480	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a5482	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5486	ea		nop		                NOP
.3a5487	ea		nop		                NOP
.3a5488	ea		nop		                NOP
.3a5489	e2 20		sep #$20	            SEP #$20
.3a548b	af 05 e2 af	lda $afe205	                LDA @l FP_MATH_DIV_STAT     ; Check the status of the addition
.3a548f	29 17		and #$17	                AND #%00010111              ; Filter out the ZERO status
.3a5491	d0 10		bne $3a54a3	                BNE fp_div_error            ; If an issue was raise, process the math error
.3a5493	c2 20		rep #$20	            REP #$20
.3a5495	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a5499	85 23		sta $0823	                STA ARGUMENT1
.3a549b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a549f	85 25		sta $0825	                STA ARGUMENT1+2
.3a54a1	28		plp		fp_div_done     PLP
.3a54a2	60		rts		            RTS
.3a54a3					fp_div_error
.3a54a3	20 f3 54	jsr $3a54f3	            JSR FP_MATH_ERROR
.3a54a6	80 f9		bra $3a54a1	                BRA fp_div_done
.3a54a8	08		php		OP_FP_MUL       PHP
.3a54a9	e2 20		sep #$20	            SEP #$20
.3a54ab	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a54ad	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a54b1	a9 00		lda #$00	                LDA #0
.3a54b3	8f 00 e2 af	sta $afe200	                STA @lFP_MATH_CTRL0
.3a54b7	c2 20		rep #$20	            REP #$20
.3a54b9	a5 23		lda $0823	                LDA ARGUMENT1               ; Send ARGUMENT1 to the math coprocessor
.3a54bb	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a54bf	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a54c1	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a54c5	a5 29		lda $0829	                LDA ARGUMENT2               ; Send ARGUMENT2 to the math coprocessor
.3a54c7	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a54cb	a5 2b		lda $082b	                LDA ARGUMENT2+2
.3a54cd	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a54d1	ea		nop		                NOP
.3a54d2	ea		nop		                NOP
.3a54d3	ea		nop		                NOP
.3a54d4	e2 20		sep #$20	            SEP #$20
.3a54d6	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT    ; Check the status of the addition
.3a54da	29 07		and #$07	                AND #%00000111              ; Filter out the ZERO status
.3a54dc	d0 10		bne $3a54ee	                BNE fp_mul_error            ; If an issue was raise, process the math error
.3a54de	c2 20		rep #$20	            REP #$20
.3a54e0	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Retrieve the results into ARGUMENT1
.3a54e4	85 23		sta $0823	                STA ARGUMENT1
.3a54e6	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a54ea	85 25		sta $0825	                STA ARGUMENT1+2
.3a54ec	28		plp		fp_mul_done     PLP
.3a54ed	60		rts		            RTS
.3a54ee					fp_mul_error
.3a54ee	20 f3 54	jsr $3a54f3	            JSR FP_MATH_ERROR
.3a54f1	80 f9		bra $3a54ec	                BRA fp_mul_done
.3a54f3					FP_MATH_ERROR
.3a54f3	e2 20		sep #$20	            SEP #$20
.3a54f5	89 01		bit #$01	                BIT #FP_ADD_STAT_NAN        ; Is there a NaN condition?
.3a54f7	f0 20		beq $3a5519	                BEQ check_over              ; No: check for overflow
.3a54f9	00		brk #		                BRK
.3a54fa	08		php		            PHP
.3a54fb	c2 20		rep #$20	            REP #$20
.3a54fd	48		pha		            PHA
.3a54fe	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5501	5b		tcd		            TCD
.3a5502	68		pla		            PLA
.3a5503	28		plp		            PLP
.3a5504	e2 20		sep #$20	            SEP #$20
.3a5506	a9 0c		lda #$0c	            LDA #ERR_NAN
.3a5508	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a550c	c2 20		rep #$20	            REP #$20
.3a550e	29 ff 00	and #$00ff	            AND #$00FF
.3a5511	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a5514	e2 20		sep #$20	            SEP #$20
.3a5516	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a5519	89 02		bit #$02	check_over      BIT #FP_ADD_STAT_OVF        ; Is ther an overflow condition?
.3a551b	f0 1f		beq $3a553c	                BEQ check_under             ; No: check for underflow
.3a551d	08		php		            PHP
.3a551e	c2 20		rep #$20	            REP #$20
.3a5520	48		pha		            PHA
.3a5521	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5524	5b		tcd		            TCD
.3a5525	68		pla		            PLA
.3a5526	28		plp		            PLP
.3a5527	e2 20		sep #$20	            SEP #$20
.3a5529	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a552b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a552f	c2 20		rep #$20	            REP #$20
.3a5531	29 ff 00	and #$00ff	            AND #$00FF
.3a5534	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a5537	e2 20		sep #$20	            SEP #$20
.3a5539	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a553c	89 04		bit #$04	check_under     BIT #FP_ADD_STAT_UDF        ; Is there an underflow condition?
.3a553e	f0 1f		beq $3a555f	                BEQ done                    ; No: we should just return... this probably shouldn't happen
.3a5540	08		php		            PHP
.3a5541	c2 20		rep #$20	            REP #$20
.3a5543	48		pha		            PHA
.3a5544	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a5547	5b		tcd		            TCD
.3a5548	68		pla		            PLA
.3a5549	28		plp		            PLP
.3a554a	e2 20		sep #$20	            SEP #$20
.3a554c	a9 0e		lda #$0e	            LDA #ERR_UNDERFLOW
.3a554e	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a5552	c2 20		rep #$20	            REP #$20
.3a5554	29 ff 00	and #$00ff	            AND #$00FF
.3a5557	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a555a	e2 20		sep #$20	            SEP #$20
.3a555c	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a555f					done
.3a555f	60		rts		            RTS
.3a5560					FP_MUL10
.3a5560	08		php		                PHP
.3a5561	e2 20		sep #$20	            SEP #$20
.3a5563	a9 00		lda #$00	                LDA #FP_OUT_MULT                ; Set for multiplication
.3a5565	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5569	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1            ; Input 1 is fixed point
.3a556b	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a556f	c2 20		rep #$20	            REP #$20
.3a5571	a9 00 a0	lda #$a000	                LDA #$A000                      ; 10 is one factor
.3a5574	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5578	a9 00 00	lda #$0000	                LDA #0
.3a557b	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a557f	a5 23		lda $0823	                LDA ARGUMENT1                   ; N is the other
.3a5581	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5585	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5587	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a558b	ea		nop		                NOP
.3a558c	ea		nop		                NOP
.3a558d	ea		nop		                NOP
.3a558e	e2 20		sep #$20	            SEP #$20
.3a5590	af 04 e2 af	lda $afe204	                LDA @l FP_MATH_MULT_STAT        ; Check the status
.3a5594	89 07		bit #$07	                BIT #FP_MULT_STAT_NAN | FP_MULT_STAT_OVF | FP_MULT_STAT_UDF
.3a5596	f0 01		beq $3a5599	                BEQ ret_result
.3a5598	00		brk #		                BRK                             ; There was an error...
.3a5599					ret_result
.3a5599	c2 20		rep #$20	            REP #$20
.3a559b	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL     ; Save result back
.3a559f	85 23		sta $0823	                STA ARGUMENT1
.3a55a1	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a55a5	85 25		sta $0825	                STA ARGUMENT1+2
.3a55a7	28		plp		                PLP
.3a55a8	60		rts		            RTS
.3a55a9					FP_DIV10
.3a55a9	08		php		                PHP
.3a55aa	e2 20		sep #$20	            SEP #$20
.3a55ac	a9 01		lda #$01	                LDA #FP_OUT_DIV             ; Set for multiplication
.3a55ae	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a55b2	a9 02		lda #$02	                LDA #FP_CTRL0_CONV_1        ; Input 1 is fixed point
.3a55b4	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a55b8	c2 20		rep #$20	            REP #$20
.3a55ba	a9 00 a0	lda #$a000	                LDA #$A000                  ; 10 is one factor
.3a55bd	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a55c1	a9 00 00	lda #$0000	                LDA #0
.3a55c4	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a55c8	a5 23		lda $0823	                LDA ARGUMENT1               ; N is the other
.3a55ca	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a55ce	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a55d0	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a55d4	ea		nop		                NOP
.3a55d5	ea		nop		                NOP
.3a55d6	ea		nop		                NOP
.3a55d7	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL ; Save result back
.3a55db	85 23		sta $0823	                STA ARGUMENT1
.3a55dd	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a55e1	85 25		sta $0825	                STA ARGUMENT1+2
.3a55e3	28		plp		                PLP
.3a55e4	60		rts		            RTS

;******  Return to file: src\floats.s

.3a55e5					FARG1EQ0
.3a55e5	08		php		                PHP
.3a55e6	c2 20		rep #$20	            REP #$20
.3a55e8	a5 23		lda $0823	                LDA ARGUMENT1
.3a55ea	d0 0a		bne $3a55f6	                BNE return_false
.3a55ec	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a55ee	29 ff 7f	and #$7fff	                AND #$7FFF              ; Mask off the sign bit
.3a55f1	d0 03		bne $3a55f6	                BNE return_false
.3a55f3	28		plp		return_true     PLP
.3a55f4	38		sec		                SEC
.3a55f5	60		rts		            RTS
.3a55f6	28		plp		return_false    PLP
.3a55f7	18		clc		                CLC
.3a55f8	60		rts		            RTS
.3a55f9					SHIFTDEC
.3a55f9	08		php		                PHP
.3a55fa	e2 20		sep #$20	            SEP #$20
.3a55fc	38		sec		                SEC                     ; Convert '0'..'9' to it's number
.3a55fd	e9 30		sbc #$30	                SBC #'0'
.3a55ff	20 2c 04	jsr $3a042c	            JSR MULINT10
.3a5602	c2 20		rep #$20	            REP #$20
.3a5604	29 ff 00	and #$00ff	                AND #$00FF              ; Add the number to ARGUMENT1
.3a5607	18		clc		                CLC
.3a5608	65 23		adc $0823	                ADC ARGUMENT1
.3a560a	85 23		sta $0823	                STA ARGUMENT1
.3a560c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a560e	69 00 00	adc #$0000	                ADC #0
.3a5611	85 25		sta $0825	                STA ARGUMENT1+2
.3a5613	28		plp		                PLP
.3a5614	60		rts		            RTS
.3a5615					SHIFTHEX
.3a5615	08		php		                PHP
.3a5616	e2 20		sep #$20	            SEP #$20
.3a5618	c9 30		cmp #$30	                CMP #'0'                ; Process 0-9
.3a561a	90 04		bcc $3a5620	                BLT not_09
.3a561c	c9 3a		cmp #$3a	                CMP #'9'+1
.3a561e	90 1c		bcc $3a563c	                BLT is_09
.3a5620	c9 61		cmp #$61	not_09          CMP #'a'                ; Process lowercase A-F
.3a5622	90 04		bcc $3a5628	                BLT not_lc
.3a5624	c9 67		cmp #$67	                CMP #'f'+1
.3a5626	90 0a		bcc $3a5632	                BLT is_lc
.3a5628	c9 41		cmp #$41	not_lc          CMP #'A'                ; Process uppercase A-F
.3a562a	90 04		bcc $3a5630	                BLT not_uc
.3a562c	c9 47		cmp #$47	                CMP #'F'+1
.3a562e	90 07		bcc $3a5637	                BLT is_uc
.3a5630	80 31		bra $3a5663	not_uc          BRA done                ; Just return if we couldn't convert... this shouldn't happen
.3a5632	38		sec		is_lc           SEC                     ; Convert 'a'-'f' to the actual number
.3a5633	e9 57		sbc #$57	                SBC #'a'-10
.3a5635	80 08		bra $3a563f	                BRA shift
.3a5637	38		sec		is_uc           SEC                     ; Convert 'A'-'F' to the actual number
.3a5638	e9 37		sbc #$37	                SBC #'A'-10
.3a563a	80 03		bra $3a563f	                BRA shift
.3a563c	38		sec		is_09           SEC                     ; Convert '0'-'9' to the actual number
.3a563d	e9 30		sbc #$30	                SBC #'0'
.3a563f					shift
.3a563f	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a5641	26 24		rol $0824	                ROL ARGUMENT1+1
.3a5643	26 25		rol $0825	                ROL ARGUMENT1+2
.3a5645	26 26		rol $0826	                ROL ARGUMENT1+3
.3a5647	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a5649	26 24		rol $0824	                ROL ARGUMENT1+1
.3a564b	26 25		rol $0825	                ROL ARGUMENT1+2
.3a564d	26 26		rol $0826	                ROL ARGUMENT1+3
.3a564f	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a5651	26 24		rol $0824	                ROL ARGUMENT1+1
.3a5653	26 25		rol $0825	                ROL ARGUMENT1+2
.3a5655	26 26		rol $0826	                ROL ARGUMENT1+3
.3a5657	06 23		asl $0823	                ASL ARGUMENT1           ; ARGUMENT1 *= 16
.3a5659	26 24		rol $0824	                ROL ARGUMENT1+1
.3a565b	26 25		rol $0825	                ROL ARGUMENT1+2
.3a565d	26 26		rol $0826	                ROL ARGUMENT1+3
.3a565f	05 23		ora $0823	                ORA ARGUMENT1           ; Add the number to it
.3a5661	85 23		sta $0823	                STA ARGUMENT1
.3a5663	28		plp		done            PLP
.3a5664	60		rts		            RTS
.3a5665					SHIFTBIN
.3a5665	08		php		                PHP
.3a5666	e2 20		sep #$20	            SEP #$20
.3a5668	c9 30		cmp #$30	                CMP #'0'                ; If the character is '0'...
.3a566a	f0 06		beq $3a5672	                BEQ shift_0             ; Shift a 0 onto ARGUMENT1
.3a566c	c9 31		cmp #$31	                CMP #'1'                ; If the character is '1'...
.3a566e	f0 0a		beq $3a567a	                BEQ shift_1             ; Shift a 1 onto ARGUMENT1
.3a5670	80 0f		bra $3a5681	                BRA done
.3a5672					shift_0
.3a5672	c2 20		rep #$20	            REP #$20
.3a5674	06 23		asl $0823	                ASL ARGUMENT1
.3a5676	26 25		rol $0825	                ROL ARGUMENT1+2
.3a5678	80 07		bra $3a5681	                BRA done
.3a567a					shift_1
.3a567a	c2 20		rep #$20	            REP #$20
.3a567c	38		sec		                SEC
.3a567d	26 23		rol $0823	                ROL ARGUMENT1
.3a567f	26 25		rol $0825	                ROL ARGUMENT1+2
.3a5681	28		plp		done            PLP
.3a5682	60		rts		            RTS
.3a5683					FP_POW10
.3a5683	08		php		                PHP
.3a5684	e2 30		sep #$30	            SEP #$30
.3a5686	a5 61		lda $0861	                LDA MARG4
.3a5688	f0 0d		beq $3a5697	                BEQ return_1
.3a568a	aa		tax		                TAX
.3a568b	a5 69		lda $0869	                LDA MARG6
.3a568d	d0 15		bne $3a56a4	                BNE do_div
.3a568f	a9 00		lda #$00	                LDA #FP_OUT_MULT                    ; We'll multiply
.3a5691	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5695	80 15		bra $3a56ac	                BRA start_loop
.3a5697					return_1
.3a5697	e2 20		sep #$20	            SEP #$20
.3a5699	a9 03		lda #$03	                LDA #FP_OUT_ONE                     ; We want to return a 1.0
.3a569b	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a569f	ea		nop		                NOP
.3a56a0	ea		nop		                NOP
.3a56a1	ea		nop		                NOP
.3a56a2	80 62		bra $3a5706	                BRA ret_result                      ; And return the result
.3a56a4					do_div
.3a56a4	e2 20		sep #$20	            SEP #$20
.3a56a6	a9 01		lda #$01	                LDA #FP_OUT_DIV                     ; We'll divide
.3a56a8	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a56ac					start_loop
.3a56ac	e2 20		sep #$20	            SEP #$20
.3a56ae	a9 43		lda #$43	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_0 | FP_CTRL0_CONV_1
.3a56b0	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.3a56b4	c2 20		rep #$20	            REP #$20
.3a56b6	a9 00 10	lda #$1000	                LDA #$1000                          ; Input 0 = 1.0
.3a56b9	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a56bd	a9 00 00	lda #$0000	                LDA #0
.3a56c0	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a56c4					loop
.3a56c4	c2 20		rep #$20	            REP #$20
.3a56c6	a9 00 a0	lda #$a000	                LDA #$A000                          ; Input 1 = 10.0
.3a56c9	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a56cd	a9 00 00	lda #$0000	                LDA #0
.3a56d0	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a56d4	ea		nop		                NOP                                 ; Wait for the operation to complete
.3a56d5	ea		nop		                NOP
.3a56d6	ea		nop		                NOP
.3a56d7	ca		dex		                DEX                                 ; Count down
.3a56d8	f0 2c		beq $3a5706	                BEQ ret_result                      ; If 0, then we're done
.3a56da	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; SCRATCH <-- Result
.3a56de	8f 0c 08 00	sta $00080c	                STA @l SCRATCH
.3a56e2	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a56e6	8f 0e 08 00	sta $00080e	                STA @l SCRATCH+2
.3a56ea	e2 20		sep #$20	            SEP #$20
.3a56ec	a9 42		lda #$42	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1 | FP_CTRL0_CONV_1
.3a56ee	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0                ; Used fixed point inputs
.3a56f2	c2 20		rep #$20	            REP #$20
.3a56f4	af 0c 08 00	lda $00080c	                LDA @l SCRATCH                      ; Input 0 <-- SCRATCH
.3a56f8	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a56fc	af 0e 08 00	lda $00080e	                LDA @l SCRATCH+2
.3a5700	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5704	80 be		bra $3a56c4	                BRA loop
.3a5706					ret_result
.3a5706	c2 20		rep #$20	            REP #$20
.3a5708	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL         ; Return the result
.3a570c	85 23		sta $0823	                STA ARGUMENT1
.3a570e	af 0a e2 af	lda $afe20a	                LDA FP_MATH_OUTPUT_FP_HL
.3a5712	85 25		sta $0825	                STA ARGUMENT1+2
.3a5714	e2 20		sep #$20	            SEP #$20
.3a5716	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a5718	85 27		sta $0827	                STA ARGTYPE1
.3a571a	28		plp		done            PLP
.3a571b	60		rts		            RTS
.3a571c					PACKFLOAT
.3a571c	08		php		                PHP
.3a571d	c2 20		rep #$20	            REP #$20
.3a571f	a5 5d		lda $085d	            LDA MARG3
.3a5721	85 23		sta $0823	            STA ARGUMENT1
.3a5723	a5 5f		lda $085f	            LDA MARG3+2
.3a5725	85 25		sta $0825	            STA ARGUMENT1+2
.3a5727	20 35 59	jsr $3a5935	            JSR ITOF
.3a572a	c2 20		rep #$20	            REP #$20
.3a572c	a5 23		lda $0823	            LDA ARGUMENT1
.3a572e	85 29		sta $0829	            STA ARGUMENT2
.3a5730	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5732	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5734	c2 20		rep #$20	            REP #$20
.3a5736	a5 59		lda $0859	            LDA MARG2
.3a5738	85 23		sta $0823	            STA ARGUMENT1
.3a573a	a5 5b		lda $085b	            LDA MARG2+2
.3a573c	85 25		sta $0825	            STA ARGUMENT1+2
.3a573e	20 5d 54	jsr $3a545d	            JSR OP_FP_DIV
.3a5741	c2 20		rep #$20	            REP #$20
.3a5743	a5 55		lda $0855	            LDA MARG1
.3a5745	85 29		sta $0829	            STA ARGUMENT2
.3a5747	a5 57		lda $0857	            LDA MARG1+2
.3a5749	85 2b		sta $082b	            STA ARGUMENT2+2
.3a574b	20 12 54	jsr $3a5412	            JSR OP_FP_ADD
.3a574e	c2 20		rep #$20	            REP #$20
.3a5750	a5 23		lda $0823	            LDA ARGUMENT1
.3a5752	85 29		sta $0829	            STA ARGUMENT2
.3a5754	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5756	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5758	20 83 56	jsr $3a5683	            JSR FP_POW10
.3a575b	20 a8 54	jsr $3a54a8	            JSR OP_FP_MUL
.3a575e	c2 20		rep #$20	            REP #$20
.3a5760	a5 65		lda $0865	                LDA MARG5                       ; Check to see if the float should be negative
.3a5762	f0 07		beq $3a576b	                BEQ set_float_type              ; If not, just set the type
.3a5764	a5 25		lda $0825	                LDA ARGUMENT1+2                 ; If so, set the sign bit
.3a5766	09 00 80	ora #$8000	                ORA #$8000
.3a5769	85 25		sta $0825	                STA ARGUMENT1+2
.3a576b					set_float_type
.3a576b	e2 20		sep #$20	            SEP #$20
.3a576d	a9 01		lda #$01	                LDA #TYPE_FLOAT                 ; Set the type to float... ready for returning!
.3a576f	85 27		sta $0827	                STA ARGTYPE1
.3a5771	28		plp		                PLP
.3a5772	60		rts		            RTS
.3a5773					PARSENUM
.3a5773	5a		phy		                PHY
.3a5774	08		php		                PHP
.3a5775	c2 30		rep #$30	            REP #$30
.3a5777	64 23		stz $0823	                STZ ARGUMENT1       ; This will be the accumulator for building the number
.3a5779	64 25		stz $0825	                STZ ARGUMENT1+2
.3a577b	64 55		stz $0855	                STZ MARG1           ; This will be the integer portion of the mantissa for floats
.3a577d	64 57		stz $0857	                STZ MARG1+2
.3a577f	64 65		stz $0865	                STZ MARG5           ; MARG5 will be the negative flag for the number
.3a5781	64 59		stz $0859	                STZ MARG2           ; This will be the denominator of the fractional part of the mantissa
.3a5783	64 5b		stz $085b	                STZ MARG2+2
.3a5785	a9 01 00	lda #$0001	                LDA #1
.3a5788	85 5d		sta $085d	                STA MARG3           ; This will be the divisor of the fractional part of the mantissa
.3a578a	64 5f		stz $085f	                STZ MARG3+2
.3a578c	64 61		stz $0861	                STZ MARG4           ; This will be the exponent of a float
.3a578e	64 63		stz $0863	                STZ MARG4+2
.3a5790	64 69		stz $0869	                STZ MARG6           ; MARG6 will be the negative flag for the exponent
.3a5792					s0
.3a5792	e2 20		sep #$20	            SEP #$20
.3a5794	a0 00 00	ldy #$0000	                LDY #0
.3a5797	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the first byte
.3a5799	c9 2b		cmp #$2b	                CMP #'+'
.3a579b	f0 33		beq $3a57d0	                BEQ s1_drop         ; '+' --> S1, drop
.3a579d	c9 2d		cmp #$2d	                CMP #'-'
.3a579f	f0 2b		beq $3a57cc	                BEQ s1_negative     ; Flag that the number is negative
.3a57a1	c9 26		cmp #$26	                CMP #'&'
.3a57a3	f0 3a		beq $3a57df	                BEQ s2_drop         ; '&' --> S2, drop
.3a57a5	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a57a8	90 03		bcc $3a57ad	                BCC syntax_err
.3a57aa	82 ac 00	brl $3a5859	                BRL s7_shift        ; '0'-'9' --> S7, emit
.3a57ad					syntax_err
.3a57ad	08		php		            PHP
.3a57ae	c2 20		rep #$20	            REP #$20
.3a57b0	48		pha		            PHA
.3a57b1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a57b4	5b		tcd		            TCD
.3a57b5	68		pla		            PLA
.3a57b6	28		plp		            PLP
.3a57b7	e2 20		sep #$20	            SEP #$20
.3a57b9	a9 02		lda #$02	            LDA #ERR_SYNTAX
.3a57bb	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a57bf	c2 20		rep #$20	            REP #$20
.3a57c1	29 ff 00	and #$00ff	            AND #$00FF
.3a57c4	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a57c7	e2 20		sep #$20	            SEP #$20
.3a57c9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a57cc	a9 01		lda #$01	s1_negative     LDA #1              ; Set the negative flag for the mantissa
.3a57ce	85 65		sta $0865	                STA MARG5
.3a57d0	c8		iny		s1_drop         INY                 ; Drop the character...
.3a57d1	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next
.3a57d3	c9 26		cmp #$26	                CMP #'&'
.3a57d5	f0 08		beq $3a57df	                BEQ s2_drop         ; '&' --> S2, drop the '&'
.3a57d7	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a57da	90 d1		bcc $3a57ad	                BCC syntax_err
.3a57dc	82 7a 00	brl $3a5859	                BRL s7_shift        ; '0'-'9' --> S7, shift
.3a57df	c8		iny		s2_drop         INY                 ; Drop the character
.3a57e0	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.3a57e2	c9 68		cmp #$68	                CMP #'h'
.3a57e4	f0 0e		beq $3a57f4	                BEQ s3_drop         ; 'h', 'H' --> S3, drop
.3a57e6	c9 48		cmp #$48	                CMP #'H'
.3a57e8	f0 0a		beq $3a57f4	                BEQ s3_drop
.3a57ea	c9 62		cmp #$62	                CMP #'b'
.3a57ec	f0 4c		beq $3a583a	                BEQ s5_drop         ; 'b', 'B' --> S5, drop
.3a57ee	c9 42		cmp #$42	                CMP #'B'
.3a57f0	f0 48		beq $3a583a	                BEQ s5_drop
.3a57f2	80 b9		bra $3a57ad	                BRA syntax_err
.3a57f4	c8		iny		s3_drop         INY                 ; Drop the character
.3a57f5	b7 00		lda [$0800],y	s3              LDA [BIP],Y         ; Get the next character
.3a57f7	20 be 03	jsr $3a03be	            JSR ISHEX
.3a57fa	b0 02		bcs $3a57fe	                BCS s4_shift
.3a57fc	80 af		bra $3a57ad	                BRA syntax_err
.3a57fe					s4_shift
.3a57fe	20 15 56	jsr $3a5615	            JSR SHIFTHEX
.3a5801	c8		iny		                INY
.3a5802	b7 00		lda [$0800],y	                LDA [BIP],Y         ; Get the next character
.3a5804	20 be 03	jsr $3a03be	            JSR ISHEX
.3a5807	b0 f5		bcs $3a57fe	                BCS s4_shift        ; '0'-'9','A'-'F' --> S4, shift
.3a5809					ret_integer
.3a5809	e2 20		sep #$20	            SEP #$20
.3a580b	a5 65		lda $0865	                LDA MARG5           ; check if the number should be negative
.3a580d	f0 11		beq $3a5820	                BEQ set_int_type    ; If not, just set the type and return
.3a580f	c2 20		rep #$20	            REP #$20
.3a5811	38		sec		                SEC                 ; If so, negate it
.3a5812	a9 00 00	lda #$0000	                LDA #0
.3a5815	e5 23		sbc $0823	                SBC ARGUMENT1
.3a5817	85 23		sta $0823	                STA ARGUMENT1
.3a5819	a9 00 00	lda #$0000	                LDA #0
.3a581c	e5 25		sbc $0825	                SBC ARGUMENT1+2
.3a581e	85 25		sta $0825	                STA ARGUMENT1+2
.3a5820					set_int_type
.3a5820	e2 20		sep #$20	            SEP #$20
.3a5822	a9 00		lda #$00	                LDA #TYPE_INTEGER   ; Return an integer
.3a5824	85 27		sta $0827	                STA ARGTYPE1
.3a5826					stop
.3a5826	c2 20		rep #$20	            REP #$20
.3a5828	18		clc		                CLC
.3a5829	98		tya		                TYA
.3a582a	65 00		adc $0800	                ADC BIP
.3a582c	85 00		sta $0800	                STA BIP
.3a582e	a5 02		lda $0802	                LDA BIP+2
.3a5830	69 00 00	adc #$0000	                ADC #0
.3a5833	85 02		sta $0802	                STA BIP+2
.3a5835	e2 20		sep #$20	            SEP #$20
.3a5837	28		plp		                PLP
.3a5838	7a		ply		                PLY
.3a5839	60		rts		            RTS
.3a583a	c8		iny		s5_drop         INY                     ; Drop the character
.3a583b	b7 00		lda [$0800],y	s5              LDA [BIP],Y             ; Get the next character
.3a583d	c9 30		cmp #$30	                CMP #'0'
.3a583f	f0 07		beq $3a5848	                BEQ s6_shift            ; '0', '1' --> S6, shift
.3a5841	c9 31		cmp #$31	                CMP #'1'
.3a5843	f0 03		beq $3a5848	                BEQ s6_shift
.3a5845	82 65 ff	brl $3a57ad	                BRL syntax_err
.3a5848					s6_shift
.3a5848	20 65 56	jsr $3a5665	            JSR SHIFTBIN
.3a584b	c8		iny		                INY
.3a584c	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a584e	c9 30		cmp #$30	                CMP #'0'                ; '0', '1' --> S6, shift
.3a5850	f0 f6		beq $3a5848	                BEQ s6_shift
.3a5852	c9 31		cmp #$31	                CMP #'1'
.3a5854	f0 f2		beq $3a5848	                BEQ s6_shift
.3a5856	82 b0 ff	brl $3a5809	                BRL ret_integer         ; Return integer
.3a5859					s7_shift
.3a5859	20 f9 55	jsr $3a55f9	            JSR SHIFTDEC
.3a585c	c8		iny		                INY
.3a585d	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a585f	c9 2e		cmp #$2e	                CMP #'.'                ; '.' --> S8, drop and preserve mantissa
.3a5861	f0 08		beq $3a586b	                BEQ s8_mantissa
.3a5863	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a5866	b0 f1		bcs $3a5859	                BCS s7_shift
.3a5868	82 9e ff	brl $3a5809	                BRL ret_integer         ; Return integer
.3a586b					s8_mantissa
.3a586b	c2 20		rep #$20	            REP #$20
.3a586d	20 35 59	jsr $3a5935	            JSR ITOF
.3a5870	c2 20		rep #$20	            REP #$20
.3a5872	a5 23		lda $0823	            LDA ARGUMENT1
.3a5874	85 55		sta $0855	            STA MARG1
.3a5876	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a5878	85 57		sta $0857	            STA MARG1+2
.3a587a	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the decimal
.3a587c	64 25		stz $0825	                STZ ARGUMENT1+2
.3a587e	e2 20		sep #$20	            SEP #$20
.3a5880	80 36		bra $3a58b8	                BRA s8_drop
.3a5882					s8_shift
.3a5882	20 f9 55	jsr $3a55f9	            JSR SHIFTDEC
.3a5885	c2 20		rep #$20	            REP #$20
.3a5887	a5 5f		lda $085f	                LDA MARG3+2             ; high 16 bits
.3a5889	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a588d	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.3a5890	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.3a5894	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to high 16 bits of MARG3
.3a5898	85 5f		sta $085f	                STA MARG3+2
.3a589a	a5 5d		lda $085d	                LDA MARG3
.3a589c	8f 00 01 00	sta $000100	                STA @l M0_OPERAND_A
.3a58a0	a9 0a 00	lda #$000a	                LDA #10                 ; Multiply it by 10
.3a58a3	8f 02 01 00	sta $000102	                STA @l M0_OPERAND_B
.3a58a7	af 04 01 00	lda $000104	                LDA @l M0_RESULT        ; And save it back to MARG3
.3a58ab	85 5d		sta $085d	                STA MARG3
.3a58ad	af 06 01 00	lda $000106	                LDA @l M0_RESULT+2
.3a58b1	18		clc		                CLC
.3a58b2	65 5f		adc $085f	                ADC MARG3+2
.3a58b4	85 5f		sta $085f	                STA MARG3+2
.3a58b6	e2 20		sep #$20	            SEP #$20
.3a58b8					s8_drop
.3a58b8	c8		iny		                INY
.3a58b9	b7 00		lda [$0800],y	                LDA [BIP],Y
.3a58bb	c9 65		cmp #$65	                CMP #'e'                ; 'E' --> S9, drop
.3a58bd	f0 24		beq $3a58e3	                BEQ s9_drop
.3a58bf	c9 45		cmp #$45	                CMP #'E'
.3a58c1	f0 20		beq $3a58e3	                BEQ s9_drop
.3a58c3	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a58c6	b0 ba		bcs $3a5882	                BCS s8_shift
.3a58c8	c2 20		rep #$20	            REP #$20
.3a58ca	20 35 59	jsr $3a5935	            JSR ITOF
.3a58cd	c2 20		rep #$20	            REP #$20
.3a58cf	a5 23		lda $0823	            LDA ARGUMENT1
.3a58d1	85 59		sta $0859	            STA MARG2
.3a58d3	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a58d5	85 5b		sta $085b	            STA MARG2+2
.3a58d7	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.3a58d9	64 25		stz $0825	                STZ ARGUMENT1+2
.3a58db	20 1c 57	jsr $3a571c	            JSR PACKFLOAT
.3a58de	e2 20		sep #$20	            SEP #$20
.3a58e0	82 43 ff	brl $3a5826	                BRL stop
.3a58e3					s9_drop
.3a58e3	c2 20		rep #$20	            REP #$20
.3a58e5	20 35 59	jsr $3a5935	            JSR ITOF
.3a58e8	c2 20		rep #$20	            REP #$20
.3a58ea	a5 23		lda $0823	            LDA ARGUMENT1
.3a58ec	85 59		sta $0859	            STA MARG2
.3a58ee	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a58f0	85 5b		sta $085b	            STA MARG2+2
.3a58f2	64 23		stz $0823	                STZ ARGUMENT1           ; ARGUMENT1 <-- 0, will be the exponent
.3a58f4	64 25		stz $0825	                STZ ARGUMENT1+2
.3a58f6	e2 20		sep #$20	            SEP #$20
.3a58f8	c8		iny		                INY
.3a58f9	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a58fb	c9 2b		cmp #$2b	                CMP #'+'
.3a58fd	f0 10		beq $3a590f	                BEQ s10_drop            ; '+' --> S10, drop
.3a58ff	c9 2d		cmp #$2d	                CMP #'-'
.3a5901	f0 08		beq $3a590b	                BEQ s10_setneg          ; '-' --> S10, set exponent is negative
.3a5903	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a5906	b0 12		bcs $3a591a	                BCS S11_shift           ; '0'-'9' --> S11, shift
.3a5908	82 a2 fe	brl $3a57ad	                BRL syntax_err
.3a590b					s10_setneg
.3a590b	a9 01		lda #$01	                LDA #1                  ; Set that the exponent should be negative
.3a590d	85 69		sta $0869	                STA MARG6
.3a590f					s10_drop
.3a590f	c8		iny		                INY
.3a5910	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5912	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a5915	b0 03		bcs $3a591a	                BCS s11_shift
.3a5917	82 93 fe	brl $3a57ad	                BRL syntax_err
.3a591a					s11_shift
.3a591a	20 f9 55	jsr $3a55f9	            JSR SHIFTDEC
.3a591d	c8		iny		                INY
.3a591e	b7 00		lda [$0800],y	                LDA [BIP],Y             ; Get the next character
.3a5920	20 ad 03	jsr $3a03ad	            JSR ISNUMERAL
.3a5923	b0 f5		bcs $3a591a	                BCS s11_shift
.3a5925	c2 20		rep #$20	            REP #$20
.3a5927	a5 23		lda $0823	            LDA ARGUMENT1
.3a5929	85 61		sta $0861	            STA MARG4
.3a592b	a5 25		lda $0825	            LDA ARGUMENT1+2
.3a592d	85 63		sta $0863	            STA MARG4+2
.3a592f	20 1c 57	jsr $3a571c	            JSR PACKFLOAT
.3a5932	82 f1 fe	brl $3a5826	                BRL stop
.3a5935					ITOF
.3a5935	08		php		                PHP
.3a5936	20 c3 53	jsr $3a53c3	            JSR FIXINT_TO_FP
.3a5939	28		plp		done            PLP
.3a593a	60		rts		            RTS
.3a593b					FTOI
.3a593b	08		php		                PHP
.3a593c					LOCALS
>0001					l_sign          .byte ?
>0002					l_exponent      .byte ?
>0003					l_mantissa      .dword ?
.3a593c	c2 20		rep #$20	            REP #$20
.3a593e	a9 32 5c	lda #$5c32	                LDA #<>FP_1_0
.3a5941	85 29		sta $0829	                STA ARGUMENT2
.3a5943	a9 3a 00	lda #$003a	                LDA #(FP_1_0 >> 16)
.3a5946	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5948	e2 20		sep #$20	            SEP #$20
.3a594a	a9 01		lda #$01	                LDA #TYPE_FLOAT
.3a594c	85 2d		sta $082d	                STA ARGTYPE2
.3a594e	c2 20		rep #$20	            REP #$20
.3a5950	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5953	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5956	d0 0c		bne $3a5964	                BNE alloc_locals        ; No: get ready to do the full conversion
.3a5958	a9 00 00	lda #$0000	                LDA #0
.3a595b	8d 23 08	sta $0823	                STA @w ARGUMENT1        ; Yes: Return 0
.3a595e	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a5961	82 a1 00	brl $3a5a05	                BRL done
.3a5964	f4 00 00	pea #$0000	alloc_locals    PEA #0                  ; Reserve space for the locals
.3a5967	f4 00 00	pea #$0000	                PEA #0
.3a596a	f4 00 00	pea #$0000	                PEA #0
.3a596d	e2 20		sep #$20	            SEP #$20
.3a596f	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3      ; Preserve the sign bit
.3a5972	29 80		and #$80	                AND #$80
.3a5974	83 01		sta $01,s	                STA l_sign
.3a5976	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2      ; Preserve the exponent
.3a5979	2a		rol a		                ROL A
.3a597a	ad 26 08	lda $0826	                LDA @w ARGUMENT1+3
.3a597d	2a		rol a		                ROL A
.3a597e	83 02		sta $02,s	                STA l_exponent
.3a5980	a9 00		lda #$00	save_mantissa   LDA #0                  ; Save the mantissa (with the implied 1)
.3a5982	83 06		sta $06,s	                STA l_mantissa+3
.3a5984	ad 25 08	lda $0825	                LDA @w ARGUMENT1+2
.3a5987	09 80		ora #$80	                ORA #$80
.3a5989	83 05		sta $05,s	                STA l_mantissa+2
.3a598b	ad 24 08	lda $0824	                LDA @w ARGUMENT1+1
.3a598e	83 04		sta $04,s	                STA l_mantissa+1
.3a5990	ad 23 08	lda $0823	                LDA @w ARGUMENT1
.3a5993	83 03		sta $03,s	                STA l_mantissa
.3a5995	a3 02		lda $02,s	                LDA l_exponent
.3a5997	c9 96		cmp #$96	loop            CMP #150
.3a5999	f0 3a		beq $3a59d5	                BEQ adj_sign
.3a599b	90 1f		bcc $3a59bc	                BLT shift_right
.3a599d	08		php		            PHP
.3a599e	c2 20		rep #$20	            REP #$20
.3a59a0	48		pha		            PHA
.3a59a1	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a59a4	5b		tcd		            TCD
.3a59a5	68		pla		            PLA
.3a59a6	28		plp		            PLP
.3a59a7	e2 20		sep #$20	            SEP #$20
.3a59a9	a9 0d		lda #$0d	            LDA #ERR_OVERFLOW
.3a59ab	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a59af	c2 20		rep #$20	            REP #$20
.3a59b1	29 ff 00	and #$00ff	            AND #$00FF
.3a59b4	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a59b7	e2 20		sep #$20	            SEP #$20
.3a59b9	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a59bc					shift_right
.3a59bc	c2 20		rep #$20	            REP #$20
.3a59be	a3 05		lda $05,s	                LDA l_mantissa+2
.3a59c0	4a		lsr a		                LSR A
.3a59c1	83 05		sta $05,s	                STA l_mantissa+2
.3a59c3	a3 03		lda $03,s	                LDA l_mantissa
.3a59c5	6a		ror a		                ROR A
.3a59c6	83 03		sta $03,s	                STA l_mantissa
.3a59c8	e2 20		sep #$20	            SEP #$20
.3a59ca	a3 02		lda $02,s	                LDA l_exponent
.3a59cc	1a		inc a		                INC A
.3a59cd	83 02		sta $02,s	                STA l_exponent
.3a59cf	c9 96		cmp #$96	                CMP #150
.3a59d1	f0 02		beq $3a59d5	                BEQ adj_sign
.3a59d3	80 e7		bra $3a59bc	                BRA shift_right
.3a59d5	a3 01		lda $01,s	adj_sign        LDA l_sign
.3a59d7	f0 1b		beq $3a59f4	                BEQ ret_positive
.3a59d9	c2 20		rep #$20	            REP #$20
.3a59db	a3 03		lda $03,s	                LDA l_mantissa
.3a59dd	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a59e0	18		clc		                CLC
.3a59e1	69 01 00	adc #$0001	                ADC #1
.3a59e4	8d 23 08	sta $0823	                STA @w ARGUMENT1
.3a59e7	a3 05		lda $05,s	                LDA l_mantissa+2
.3a59e9	49 ff ff	eor #$ffff	                EOR #$FFFF
.3a59ec	69 00 00	adc #$0000	                ADC #0
.3a59ef	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a59f2	80 0c		bra $3a5a00	                BRA clean
.3a59f4					ret_positive
.3a59f4	c2 20		rep #$20	            REP #$20
.3a59f6	a3 03		lda $03,s	                LDA l_mantissa
.3a59f8	8d 23 08	sta $0823	                STA @w ARGUMENT1
.3a59fb	a3 05		lda $05,s	                LDA l_mantissa+2
.3a59fd	8d 25 08	sta $0825	                STA @w ARGUMENT1+2
.3a5a00					clean
.3a5a00	c2 20		rep #$20	            REP #$20
.3a5a02	68		pla		                PLA                     ; Clean up the locals
.3a5a03	68		pla		                PLA
.3a5a04	68		pla		                PLA
.3a5a05					done
.3a5a05	e2 20		sep #$20	            SEP #$20
.3a5a07	a9 00		lda #$00	                LDA #TYPE_INTEGER       ; Set the return type to integer
.3a5a09	8d 27 08	sta $0827	                STA @w ARGTYPE1
.3a5a0c	28		plp		                PLP
.3a5a0d	60		rts		            RTS
.3a5a0e					FP_COMPARE
.3a5a0e	da		phx		                PHX
.3a5a0f	08		php		                PHP
.3a5a10	c2 20		rep #$20	            REP #$20
.3a5a12	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Save ARGUMENT1 so we don't destroy it
.3a5a14	48		pha		                PHA
.3a5a15	a5 23		lda $0823	                LDA ARGUMENT1
.3a5a17	48		pha		                PHA
.3a5a18	20 07 54	jsr $3a5407	            JSR OP_FP_SUB
.3a5a1b	20 e5 55	jsr $3a55e5	            JSR FARG1EQ0
.3a5a1e	b0 11		bcs $3a5a31	                BCS are_equal
.3a5a20	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Check the high word
.3a5a22	89 00 80	bit #$8000	                BIT #$8000
.3a5a25	d0 05		bne $3a5a2c	                BNE is_lt                   ; ARGUMENT1 < ARGUMENT2
.3a5a27	a9 01 00	lda #$0001	is_gt           LDA #1                      ; ARGUMENT1 > ARGUMENT2: return 1
.3a5a2a	80 08		bra $3a5a34	                BRA ret_result
.3a5a2c	a9 ff ff	lda #$ffff	is_lt           LDA #$FFFF                  ; ARGUMENT1 > ARGUMENT2: return -1
.3a5a2f	80 03		bra $3a5a34	                BRA ret_result
.3a5a31	a9 00 00	lda #$0000	are_equal       LDA #0                      ; Equal: return 0
.3a5a34	fa		plx		ret_result      PLX                         ; Restore ARGUMENT1
.3a5a35	86 23		stx $0823	                STX ARGUMENT1
.3a5a37	fa		plx		                PLX
.3a5a38	86 25		stx $0825	                STX ARGUMENT1+2
.3a5a3a	28		plp		                PLP
.3a5a3b	fa		plx		                PLX
.3a5a3c	60		rts		            RTS
.3a5a3d					OP_FP_LT
.3a5a3d	08		php		                PHP
.3a5a3e	c2 30		rep #$30	            REP #$30
.3a5a40	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5a43	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5a46	d0 05		bne $3a5a4d	                BNE ret_false
.3a5a48	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a5a4b	80 03		bra $3a5a50	                BRA done
.3a5a4d					ret_false
.3a5a4d	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a5a50	28		plp		done            PLP
.3a5a51	60		rts		            RTS
.3a5a52					OP_FP_GT
.3a5a52	08		php		                PHP
.3a5a53	c2 30		rep #$30	            REP #$30
.3a5a55	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5a58	c9 01 00	cmp #$0001	                CMP #1
.3a5a5b	d0 05		bne $3a5a62	                BNE ret_false
.3a5a5d	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a5a60	80 03		bra $3a5a65	                BRA done
.3a5a62					ret_false
.3a5a62	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a5a65	28		plp		done            PLP
.3a5a66	60		rts		            RTS
.3a5a67					OP_FP_EQ
.3a5a67	08		php		                PHP
.3a5a68	c2 30		rep #$30	            REP #$30
.3a5a6a	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5a6d	c9 00 00	cmp #$0000	                CMP #0
.3a5a70	d0 05		bne $3a5a77	                BNE ret_false
.3a5a72	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a5a75	80 03		bra $3a5a7a	                BRA done
.3a5a77					ret_false
.3a5a77	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a5a7a	28		plp		done            PLP
.3a5a7b	60		rts		            RTS
.3a5a7c					OP_FP_LTE
.3a5a7c	08		php		                PHP
.3a5a7d	c2 30		rep #$30	            REP #$30
.3a5a7f	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5a82	c9 01 00	cmp #$0001	                CMP #1
.3a5a85	f0 05		beq $3a5a8c	                BEQ ret_false
.3a5a87	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a5a8a	80 03		bra $3a5a8f	                BRA done
.3a5a8c					ret_false
.3a5a8c	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a5a8f	28		plp		done            PLP
.3a5a90	60		rts		            RTS
.3a5a91					OP_FP_GTE
.3a5a91	08		php		                PHP
.3a5a92	c2 30		rep #$30	            REP #$30
.3a5a94	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5a97	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a5a9a	f0 05		beq $3a5aa1	                BEQ ret_false
.3a5a9c	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a5a9f	80 03		bra $3a5aa4	                BRA done
.3a5aa1					ret_false
.3a5aa1	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a5aa4	28		plp		done            PLP
.3a5aa5	60		rts		            RTS
.3a5aa6					OP_FP_NE
.3a5aa6	08		php		                PHP
.3a5aa7	c2 30		rep #$30	            REP #$30
.3a5aa9	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5aac	c9 00 00	cmp #$0000	                CMP #0
.3a5aaf	f0 05		beq $3a5ab6	                BEQ ret_false
.3a5ab1	20 df 04	jsr $3a04df	            JSR SET_TRUE
.3a5ab4	80 03		bra $3a5ab9	                BRA done
.3a5ab6					ret_false
.3a5ab6	20 f1 04	jsr $3a04f1	            JSR SET_FALSE
.3a5ab9	28		plp		done            PLP
.3a5aba	60		rts		            RTS
.3a5abb					STREMIT
.3a5abb	08		php		                PHP
.3a5abc	e2 20		sep #$20	            SEP #$20
.3a5abe	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Append the character
.3a5ac0	c8		iny		                INY                         ; Advance the character pointer in Y
.3a5ac1	a9 00		lda #$00	                LDA #0                      ; And add the NULL
.3a5ac3	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5ac5	28		plp		                PLP
.3a5ac6	60		rts		            RTS
.3a5ac7					STREMITB
.3a5ac7	da		phx		                PHX
.3a5ac8	08		php		                PHP
.3a5ac9	e2 20		sep #$20	            SEP #$20
.3a5acb	c9 80		cmp #$80	                CMP #$80
.3a5acd	90 0a		bcc $3a5ad9	                BLT emit_digits
.3a5acf	48		pha		                PHA
.3a5ad0	a9 2d		lda #$2d	                LDA #'-'                    ; Print a minus sign
.3a5ad2	20 bb 5a	jsr $3a5abb	            JSR STREMIT
.3a5ad5	68		pla		                PLA
.3a5ad6	49 ff		eor #$ff	                EOR #$FF                    ; And negate it
.3a5ad8	1a		inc a		                INC A
.3a5ad9					emit_digits
.3a5ad9	c2 30		rep #$30	            REP #$30
.3a5adb	29 ff 00	and #$00ff	                AND #$00FF
.3a5ade	c9 64 00	cmp #$0064	                CMP #100
.3a5ae1	90 0e		bcc $3a5af1	                BLT chk_tens
.3a5ae3	a2 64 00	ldx #$0064	                LDX #100
.3a5ae6	20 ac 53	jsr $3a53ac	            JSR UINT_DIV_A_X
.3a5ae9	18		clc		                CLC
.3a5aea	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.3a5aed	20 bb 5a	jsr $3a5abb	            JSR STREMIT
.3a5af0	8a		txa		                TXA                         ; Put the remainder in A
.3a5af1					chk_tens
.3a5af1	a2 0a 00	ldx #$000a	                LDX #10
.3a5af4	20 ac 53	jsr $3a53ac	            JSR UINT_DIV_A_X
.3a5af7	18		clc		                CLC
.3a5af8	69 30 00	adc #$0030	                ADC #'0'                    ; Convert to ASCII
.3a5afb	20 bb 5a	jsr $3a5abb	            JSR STREMIT
.3a5afe	8a		txa		                TXA                         ; Put the remainder in A
.3a5aff					ones_digit
.3a5aff	18		clc		                CLC
.3a5b00	69 30 00	adc #$0030	                ADC #'0'                    ; Convert it to ASCII
.3a5b03	20 bb 5a	jsr $3a5abb	            JSR STREMIT
.3a5b06	28		plp		                PLP
.3a5b07	fa		plx		                PLX
.3a5b08	60		rts		            RTS
.3a5b09					STRFINDEND
.3a5b09	08		php		                PHP
.3a5b0a	e2 20		sep #$20	            SEP #$20
.3a5b0c	c2 10		rep #$10	            REP #$10
.3a5b0e	a0 00 00	ldy #$0000	                LDY #0
.3a5b11	b7 23		lda [$0823],y	find_end        LDA [ARGUMENT1],Y           ; Scan to the end of the string
.3a5b13	f0 03		beq $3a5b18	                BEQ done
.3a5b15	c8		iny		                INY
.3a5b16	80 f9		bra $3a5b11	                BRA find_end
.3a5b18	28		plp		done            PLP
.3a5b19	60		rts		            RTS
=6					FP_D = 6        ; Number of mantissa digits
.3a5b1a					FTOS
.3a5b1a	08		php		                PHP
.3a5b1b	e2 20		sep #$20	            SEP #$20
.3a5b1d	c2 10		rep #$10	            REP #$10
.3a5b1f	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be the negative flag
.3a5b22	f4 00 00	pea #$0000	                PEA #0                      ; This spot on the stack will be K
.3a5b25	f4 00 00	pea #$0000	                PEA #0                      ; This spot will be for the exponents
>0001					L_NEGATIVE      .word ?
>0003					L_K             .word ?
>0005					L_X1            .byte ?                     ; The binary exponent
>0006					L_EXP           .byte ?                     ; The decimal exponent
.3a5b28	20 e5 55	jsr $3a55e5	            JSR FARG1EQ0
.3a5b2b	90 19		bcc $3a5b46	                BCC chk_negative
.3a5b2d	20 8e 13	jsr $3a138e	            JSR TEMPSTRING
.3a5b30	e2 20		sep #$20	            SEP #$20
.3a5b32	a0 00 00	ldy #$0000	                LDY #0
.3a5b35	a9 20		lda #$20	                LDA #' '
.3a5b37	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5b39	c8		iny		                INY
.3a5b3a	a9 30		lda #$30	                LDA #'0'                    ; Return a "0"
.3a5b3c	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5b3e	c8		iny		                INY
.3a5b3f	a9 00		lda #$00	                LDA #0
.3a5b41	97 16		sta [$0816],y	                STA [STRPTR],Y
.3a5b43	82 ce 00	brl $3a5c14	                BRL ret_result
.3a5b46					chk_negative
.3a5b46	e2 20		sep #$20	            SEP #$20
.3a5b48	a5 26		lda $0826	                LDA ARGUMENT1+3             ; If N is negative, output a minus sign and negate N
.3a5b4a	10 08		bpl $3a5b54	                BPL not_negative
.3a5b4c	29 7f		and #$7f	                AND #$7F                    ; Negate the number
.3a5b4e	85 26		sta $0826	                STA ARGUMENT1+3
.3a5b50	a9 01		lda #$01	                LDA #1
.3a5b52	83 01		sta $01,s	                STA L_NEGATIVE              ; Set IsNegative to a TRUE value
.3a5b54					not_negative
.3a5b54	c2 20		rep #$20	            REP #$20
.3a5b56	a9 00 00	lda #$0000	                LDA #0                      ; Initialize K to 0, K is a 1-byte signed integer. (SCRATCH is K)
.3a5b59	83 03		sta $03,s	                STA L_K                     ; We're using a word here for convenience
.3a5b5b	c2 20		rep #$20	            REP #$20
.3a5b5d	af 2e 5c 3a	lda $3a5c2e	            LDA ten_d_1
.3a5b61	85 29		sta $0829	            STA ARGUMENT2
.3a5b63	af 30 5c 3a	lda $3a5c30	            LDA ten_d_1+2
.3a5b67	85 2b		sta $082b	            STA ARGUMENT2+2
.3a5b69	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5b6c	89 00 80	bit #$8000	                BIT #$8000                  ; Is N < 10^(D-1)?
.3a5b6f	d0 12		bne $3a5b83	                BNE shift_up
.3a5b71					shift_down
.3a5b71	20 a9 55	jsr $3a55a9	            JSR FP_DIV10
.3a5b74	a3 03		lda $03,s	                LDA L_K
.3a5b76	1a		inc a		                INC A
.3a5b77	83 03		sta $03,s	                STA L_K                     ; Increment K
.3a5b79	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5b7c	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N < 10^(D-1)?
.3a5b7f	f0 12		beq $3a5b93	                BEQ do_digits               ; Yes: we're ready to process digits
.3a5b81	80 ee		bra $3a5b71	                BRA shift_down              ; No: keep dividing
.3a5b83					shift_up
.3a5b83	20 60 55	jsr $3a5560	            JSR FP_MUL10
.3a5b86	a3 03		lda $03,s	                LDA L_K
.3a5b88	3a		dec a		                DEC A
.3a5b89	83 03		sta $03,s	                STA L_K                     ; Decrement K
.3a5b8b	20 0e 5a	jsr $3a5a0e	            JSR FP_COMPARE
.3a5b8e	c9 ff ff	cmp #$ffff	                CMP #$FFFF                  ; Is N >= 10 ^ (D-1)?
.3a5b91	f0 f0		beq $3a5b83	                BEQ shift_up                ; No: keep multiplying
.3a5b93					do_digits
.3a5b93	e2 30		sep #$30	            SEP #$30
.3a5b95	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5b97	0a		asl a		                ASL A
.3a5b98	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5b9a	2a		rol a		                ROL A
.3a5b9b	83 05		sta $05,s	                STA L_X1
.3a5b9d	38		sec		                SEC
.3a5b9e	a9 96		lda #$96	                LDA #150                    ; X := 150 - X1
.3a5ba0	e3 05		sbc $05,s	                SBC L_X1
.3a5ba2	aa		tax		                TAX
.3a5ba3	f0 0f		beq $3a5bb4	                BEQ emit_digits             ; If X = 0, just emit the digits
.3a5ba5	a5 25		lda $0825	                LDA ARGUMENT1+2             ; Set the implied '1' MSB of the mantissa
.3a5ba7	09 80		ora #$80	                ORA #$80
.3a5ba9	85 25		sta $0825	                STA ARGUMENT1+2
.3a5bab	46 25		lsr $0825	shift_r         LSR ARGUMENT1+2             ; Shift the mantissa right
.3a5bad	66 24		ror $0824	                ROR ARGUMENT1+1
.3a5baf	66 23		ror $0823	                ROR ARGUMENT1
.3a5bb1	ca		dex		                DEX
.3a5bb2	d0 f7		bne $3a5bab	                BNE shift_r                 ; Until X = 0
.3a5bb4					emit_digits
.3a5bb4	c2 10		rep #$10	            REP #$10
.3a5bb6	e2 20		sep #$20	            SEP #$20
.3a5bb8	64 26		stz $0826	                STZ ARGUMENT1+3             ; Blank out the MSB
.3a5bba	a9 00		lda #$00	                LDA #TYPE_INTEGER           ; Make it an integer
.3a5bbc	85 27		sta $0827	                STA ARGTYPE1
.3a5bbe	a3 01		lda $01,s	                LDA L_NEGATIVE              ; Check IsNegative
.3a5bc0	f0 11		beq $3a5bd3	                BEQ get_raw_digits          ; If FALSE, just convert the raw digits
.3a5bc2	c2 20		rep #$20	            REP #$20
.3a5bc4	38		sec		                SEC                         ; Make the raw integer negative
.3a5bc5	a9 00 00	lda #$0000	                LDA #0
.3a5bc8	e5 23		sbc $0823	                SBC ARGUMENT1
.3a5bca	85 23		sta $0823	                STA ARGUMENT1
.3a5bcc	a9 00 00	lda #$0000	                LDA #0
.3a5bcf	e5 25		sbc $0825	                SBC ARGUMENT1+2
.3a5bd1	85 25		sta $0825	                STA ARGUMENT1+2
.3a5bd3					get_raw_digits
.3a5bd3	20 ed 13	jsr $3a13ed	            JSR ITOS
.3a5bd6	c2 20		rep #$20	            REP #$20
.3a5bd8	a5 16		lda $0816	            LDA STRPTR
.3a5bda	85 23		sta $0823	            STA ARGUMENT1
.3a5bdc	a5 18		lda $0818	            LDA STRPTR+2
.3a5bde	85 25		sta $0825	            STA ARGUMENT1+2
.3a5be0	20 09 5b	jsr $3a5b09	            JSR STRFINDEND
.3a5be3	e2 20		sep #$20	            SEP #$20
.3a5be5	c8		iny		                INY                         ; Move the NULL up one byte
.3a5be6	a9 00		lda #$00	                LDA #0
.3a5be8	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5bea	88		dey		insert_loop     DEY                         ; Move to the character before the one we just moved
.3a5beb	88		dey		                DEY
.3a5bec	b7 23		lda [$0823],y	                LDA [ARGUMENT1],Y           ; Get the character
.3a5bee	c8		iny		                INY                         ; Move to the next space
.3a5bef	97 23		sta [$0823],y	                STA [ARGUMENT1],Y           ; Store the character here
.3a5bf1	c0 02 00	cpy #$0002	                CPY #2                      ; Check to see if we just moved the 2nd character
.3a5bf4	d0 f4		bne $3a5bea	                BNE insert_loop             ; If not, keep moving the characters
.3a5bf6	a9 2e		lda #$2e	                LDA #'.'                    ; Insert the '.' in the space we openned
.3a5bf8	97 23		sta [$0823],y	                STA [ARGUMENT1],Y
.3a5bfa	e2 20		sep #$20	            SEP #$20
.3a5bfc	18		clc		                CLC                         ; Compute the exponent
.3a5bfd	a3 03		lda $03,s	                LDA L_K
.3a5bff	69 05		adc #$05	                ADC #(FP_D - 1)
.3a5c01	83 06		sta $06,s	                STA L_EXP
.3a5c03	f0 19		beq $3a5c1e	                BEQ done                    ; If it's 0, just return the number
.3a5c05	20 09 5b	jsr $3a5b09	            JSR STRFINDEND
.3a5c08	a9 45		lda #$45	                LDA #'E'                    ; Append the "E"
.3a5c0a	20 bb 5a	jsr $3a5abb	            JSR STREMIT
.3a5c0d	a3 06		lda $06,s	                LDA L_EXP
.3a5c0f	20 c7 5a	jsr $3a5ac7	            JSR STREMITB
.3a5c12	80 0a		bra $3a5c1e	                BRA done                    ; TODO: reformat integer... add E and exponent...
.3a5c14					ret_result
.3a5c14	c2 20		rep #$20	            REP #$20
.3a5c16	a5 16		lda $0816	                LDA STRPTR                  ; Return the temporary string we've assembled
.3a5c18	85 23		sta $0823	                STA ARGUMENT1
.3a5c1a	a5 18		lda $0818	                LDA STRPTR+2
.3a5c1c	85 25		sta $0825	                STA ARGUMENT1+2
.3a5c1e					done
.3a5c1e	e2 20		sep #$20	            SEP #$20
.3a5c20	a9 02		lda #$02	                LDA #TYPE_STRING
.3a5c22	85 27		sta $0827	                STA ARGTYPE1
.3a5c24	c2 20		rep #$20	            REP #$20
.3a5c26	3b		tsc		                TSC                         ; Remove the locals from the stack
.3a5c27	18		clc		                CLC
.3a5c28	69 06 00	adc #$0006	                ADC #6
.3a5c2b	1b		tcs		                TCS
.3a5c2c	28		plp		                PLP
.3a5c2d	60		rts		            RTS
>3a5c2e	00 50 c3 47			ten_d_1         .dword $47c35000            ; 10^(FP_D-1), where FP_D=5
>3a5c32	00 00 80 3f			FP_1_0          .dword $3f800000    ; Floating point constant: 1.0
>3a5c36	f3 04 b5 3f			FP_SQR_2_0      .dword $3fb504f3    ; Floating point constant: sqrt(2.0)
>3a5c3a	f3 04 35 3f			FP_SQR_0_5      .dword $3f3504f3    ; Floating point constant: sqrt(0.2)

;******  Return to file: src\basic816.s


;******  Processing file: src\transcendentals.s

.3a5c3e					Q_POLY_HR
.3a5c3e	5a		phy		                PHY
.3a5c3f	e2 20		sep #$20	            SEP #$20
.3a5c41	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5c43	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5c47	c2 20		rep #$20	            REP #$20
.3a5c49	bd 00 00	lda $0000,x	                LDA 0,X
.3a5c4c	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5c50	bd 02 00	lda $0002,x	                LDA 2,X
.3a5c53	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5c57	a0 04 00	ldy #$0004	                LDY #4          ; 4 more coefficients.
.3a5c5a	e8		inx		loop            INX             ; point to the next coefficient
.3a5c5b	e8		inx		                INX
.3a5c5c	e8		inx		                INX
.3a5c5d	e8		inx		                INX
.3a5c5e	e2 20		sep #$20	            SEP #$20
.3a5c60	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a5c62	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5c66	c2 20		rep #$20	            REP #$20
.3a5c68	af 23 08 00	lda $000823	                LDA @l ARGUMENT1
.3a5c6c	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5c70	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5c74	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5c78	ea		nop		                NOP
.3a5c79	ea		nop		                NOP
.3a5c7a	ea		nop		                NOP
.3a5c7b	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5c7f	48		pha		                PHA
.3a5c80	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5c84	8f 0a e2 af	sta $afe20a	                STA FP_MATH_INPUT0_HL
.3a5c88	68		pla		                PLA
.3a5c89	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5c8d	e2 20		sep #$20	            SEP #$20
.3a5c8f	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5c91	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5c95	c2 20		rep #$20	            REP #$20
.3a5c97	bd 00 00	lda $0000,x	                LDA 0,X
.3a5c9a	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5c9e	bd 02 00	lda $0002,x	                LDA 2,X
.3a5ca1	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5ca5	ea		nop		                NOP
.3a5ca6	ea		nop		                NOP
.3a5ca7	ea		nop		                NOP
.3a5ca8	88		dey		                DEY
.3a5ca9	f0 14		beq $3a5cbf	                BEQ done
.3a5cab	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5caf	48		pha		                PHA
.3a5cb0	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5cb4	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5cb8	68		pla		                PLA
.3a5cb9	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5cbd	80 9b		bra $3a5c5a	                BRA loop
.3a5cbf	af 08 e2 af	lda $afe208	done            LDA @l FP_MATH_OUTPUT_FP_LL
.3a5cc3	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.3a5cc7	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5ccb	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.3a5ccf	7a		ply		                PLY
.3a5cd0	60		rts		                RTS
.3a5cd1					Q_SQ
.3a5cd1	e2 20		sep #$20	            SEP #$20
.3a5cd3	a9 00		lda #$00	                LDA #0
.3a5cd5	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5cd9	a9 00		lda #$00	                LDA #FP_OUT_MULT
.3a5cdb	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5cdf	c2 20		rep #$20	            REP #$20
.3a5ce1	a5 23		lda $0823	                LDA ARGUMENT1
.3a5ce3	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5ce7	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5ceb	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5cef	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5cf3	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5cf7	ea		nop		                NOP
.3a5cf8	ea		nop		                NOP
.3a5cf9	ea		nop		                NOP
.3a5cfa	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5cfe	85 23		sta $0823	                STA ARGUMENT1
.3a5d00	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5d04	85 25		sta $0825	                STA ARGUMENT1+2
.3a5d06	60		rts		                RTS
.3a5d07					Q_INV
.3a5d07	e2 20		sep #$20	            SEP #$20
.3a5d09	a9 00		lda #$00	                LDA #0
.3a5d0b	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5d0f	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a5d11	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5d15	c2 20		rep #$20	            REP #$20
.3a5d17	a5 23		lda $0823	                LDA ARGUMENT1
.3a5d19	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5d1d	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a5d21	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5d25	af 4d 61 3a	lda $3a614d	                LDA @l fp_one
.3a5d29	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5d2d	af 4f 61 3a	lda $3a614f	                LDA @l fp_one+2
.3a5d31	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5d35	ea		nop		                NOP
.3a5d36	ea		nop		                NOP
.3a5d37	ea		nop		                NOP
.3a5d38	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5d3c	85 23		sta $0823	                STA ARGUMENT1
.3a5d3e	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5d42	85 25		sta $0825	                STA ARGUMENT1+2
.3a5d44	60		rts		                RTS
.3a5d45					Q_FP_SCALE
.3a5d45	a2 00 00	ldx #$0000	                LDX #0
.3a5d48	a5 23		lda $0823	loop            LDA ARGUMENT1
.3a5d4a	c5 29		cmp $0829	                CMP ARGUMENT2
.3a5d4c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5d4e	e5 2b		sbc $082b	                SBC ARGUMENT2+2
.3a5d50	90 1e		bcc $3a5d70	                BCC done
.3a5d52	a5 23		lda $0823	                LDA ARGUMENT1
.3a5d54	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5d58	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5d5a	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5d5e	ea		nop		                NOP
.3a5d5f	ea		nop		                NOP
.3a5d60	ea		nop		                NOP
.3a5d61	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5d65	85 23		sta $0823	                STA ARGUMENT1
.3a5d67	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5d6b	85 25		sta $0825	                STA ARGUMENT1+2
.3a5d6d	e8		inx		                INX
.3a5d6e	80 d8		bra $3a5d48	                BRA loop
.3a5d70					done
.3a5d70	60		rts		            RTS
.3a5d71					Q_FP_SCALE_TAU
.3a5d71	e2 20		sep #$20	            SEP #$20
.3a5d73	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5d75	10 09		bpl $3a5d80	                BPL notneg
.3a5d77	29 7f		and #$7f	                AND #$7F
.3a5d79	85 26		sta $0826	                STA ARGUMENT1+3
.3a5d7b	a9 01		lda #$01	                LDA #1
.3a5d7d	48		pha		                PHA
.3a5d7e	80 03		bra $3a5d83	                BRA compute
.3a5d80	a9 00		lda #$00	notneg          LDA #0          ; not negative, so push 0.
.3a5d82	48		pha		                PHA
.3a5d83	a9 40		lda #$40	compute         LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5d85	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5d89	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5d8b	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5d8f	c2 30		rep #$30	            REP #$30
.3a5d91	af 61 61 3a	lda $3a6161	                LDA @l twopi
.3a5d95	85 29		sta $0829	                STA ARGUMENT2
.3a5d97	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5d9b	af 63 61 3a	lda $3a6163	                LDA @l twopi+2
.3a5d9f	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5da1	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5da5	20 45 5d	jsr $3a5d45	            JSR Q_FP_SCALE
.3a5da8	e2 20		sep #$20	            SEP #$20
.3a5daa	68		pla		                PLA
.3a5dab	c2 20		rep #$20	            REP #$20
.3a5dad	f0 1e		beq $3a5dcd	                BEQ done
.3a5daf	a5 23		lda $0823	                LDA ARGUMENT1
.3a5db1	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5db5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5db7	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5dbb	ea		nop		                NOP
.3a5dbc	ea		nop		                NOP
.3a5dbd	ea		nop		                NOP
.3a5dbe	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5dc2	85 23		sta $0823	                STA ARGUMENT1
.3a5dc4	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5dc8	29 ff 7f	and #$7fff	                AND #$7fff
.3a5dcb	85 25		sta $0825	                STA ARGUMENT1+2
.3a5dcd					done
.3a5dcd	60		rts		            RTS
.3a5dce					Q_FP_NORM_ANGLE
.3a5dce	5a		phy		                PHY
.3a5dcf	a2 00 00	ldx #$0000	                LDX #0
.3a5dd2	a0 00 00	ldy #$0000	                LDY #0
.3a5dd5	a5 23		lda $0823	loop            LDA ARGUMENT1
.3a5dd7	df 65 61 3a	cmp $3a6165,x	                CMP @l onepi,x
.3a5ddb	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5ddd	ff 67 61 3a	sbc $3a6167,x	                SBC @l onepi+2,x
.3a5de1	90 2c		bcc $3a5e0f	                BCC less
.3a5de3	bf 61 61 3a	lda $3a6161,x	                LDA @l twopi,x
.3a5de7	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5deb	bf 63 61 3a	lda $3a6163,x	                LDA @l twopi+2,x
.3a5def	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5df3	a5 23		lda $0823	                LDA ARGUMENT1
.3a5df5	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5df9	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5dfb	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5dff	ea		nop		                NOP
.3a5e00	ea		nop		                NOP
.3a5e01	ea		nop		                NOP
.3a5e02	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5e06	85 23		sta $0823	                STA ARGUMENT1
.3a5e08	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5e0c	85 25		sta $0825	                STA ARGUMENT1+2
.3a5e0e	38		sec		                SEC             ; set carry to indicate a reflection
.3a5e0f	98		tya		less            TYA             ; carry already cleared if we branched
.3a5e10	2a		rol a		                ROL             ; shift carry into flags...
.3a5e11	a8		tay		                TAY             ; and store back into y
.3a5e12	e8		inx		                INX             ; next set of values
.3a5e13	e8		inx		                INX
.3a5e14	e8		inx		                INX
.3a5e15	e8		inx		                INX
.3a5e16	e0 0c 00	cpx #$000c	                CPX #12         ; check if we have already looked at 3
.3a5e19	d0 ba		bne $3a5dd5	                BNE loop
.3a5e1b	98		tya		                TYA             ; copy Y to X, as that's what we have
.3a5e1c	aa		tax		                TAX
.3a5e1d	7a		ply		                PLY
.3a5e1e	60		rts		            RTS
.3a5e1f					FP_SCALE
.3a5e1f	08		php		                PHP
.3a5e20	c2 30		rep #$30	            REP #$30
.3a5e22	48		pha		                PHA
.3a5e23	da		phx		                PHX
.3a5e24	20 71 5d	jsr $3a5d71	            JSR Q_FP_SCALE_TAU
.3a5e27	fa		plx		                PLX
.3a5e28	7a		ply		                PLY
.3a5e29	28		plp		                PLP
.3a5e2a	60		rts		            RTS
.3a5e2b					Q_FP_COS
.3a5e2b	08		php		                PHP
.3a5e2c	c2 30		rep #$30	            REP #$30
.3a5e2e	48		pha		                PHA
.3a5e2f	da		phx		                PHX
.3a5e30	20 d1 5c	jsr $3a5cd1	            JSR Q_SQ
.3a5e33	8b		phb		                PHB
.3a5e34	e2 20		sep #$20	            SEP #$20
.3a5e36	a9 3a		lda #$3a	                LDA #`cos_coeff
.3a5e38	48		pha		                PHA
.3a5e39	ab		plb		                PLB
.3a5e3a	c2 20		rep #$20	            REP #$20
.3a5e3c	a2 01 61	ldx #$6101	                LDX #<>cos_coeff
.3a5e3f	20 3e 5c	jsr $3a5c3e	            JSR Q_POLY_HR
.3a5e42	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.3a5e45	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a5e49	ab		plb		                PLB
.3a5e4a	fa		plx		                PLX
.3a5e4b	68		pla		                PLA
.3a5e4c	28		plp		                PLP
.3a5e4d	60		rts		            RTS
.3a5e4e					Q_FP_SIN
.3a5e4e	08		php		                PHP
.3a5e4f	c2 30		rep #$30	            REP #$30
.3a5e51	48		pha		                PHA
.3a5e52	da		phx		                PHX
.3a5e53	a5 23		lda $0823	                LDA ARGUMENT1
.3a5e55	85 29		sta $0829	                STA ARGUMENT2
.3a5e57	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5e59	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5e5b	20 d1 5c	jsr $3a5cd1	            JSR Q_SQ
.3a5e5e	8b		phb		                PHB
.3a5e5f	e2 20		sep #$20	            SEP #$20
.3a5e61	a9 3a		lda #$3a	                LDA #`sin_coeff
.3a5e63	48		pha		                PHA
.3a5e64	ab		plb		                PLB
.3a5e65	c2 20		rep #$20	            REP #$20
.3a5e67	a2 15 61	ldx #$6115	                LDX #<>sin_coeff
.3a5e6a	20 3e 5c	jsr $3a5c3e	            JSR Q_POLY_HR
.3a5e6d	ab		plb		                PLB
.3a5e6e	20 a8 54	jsr $3a54a8	            JSR OP_FP_MUL
.3a5e71	fa		plx		                PLX
.3a5e72	68		pla		                PLA
.3a5e73	28		plp		                PLP
.3a5e74	60		rts		            RTS
.3a5e75					Q_FP_TAN
.3a5e75	08		php		                PHP
.3a5e76	c2 30		rep #$30	            REP #$30
.3a5e78	48		pha		                PHA
.3a5e79	da		phx		                PHX
.3a5e7a	a5 23		lda $0823	                LDA ARGUMENT1
.3a5e7c	85 29		sta $0829	                STA ARGUMENT2
.3a5e7e	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5e80	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5e82	20 d1 5c	jsr $3a5cd1	            JSR Q_SQ
.3a5e85	8b		phb		                PHB
.3a5e86	e2 20		sep #$20	            SEP #$20
.3a5e88	a9 3a		lda #$3a	                LDA #`tan_coeff
.3a5e8a	48		pha		                PHA
.3a5e8b	ab		plb		                PLB
.3a5e8c	c2 20		rep #$20	            REP #$20
.3a5e8e	a2 29 61	ldx #$6129	                LDX #<>tan_coeff
.3a5e91	20 3e 5c	jsr $3a5c3e	            JSR Q_POLY_HR
.3a5e94	ab		plb		                PLB
.3a5e95	20 a8 54	jsr $3a54a8	            JSR OP_FP_MUL
.3a5e98	fa		plx		                PLX
.3a5e99	68		pla		                PLA
.3a5e9a	28		plp		                PLP
.3a5e9b	60		rts		            RTS
.3a5e9c					Q_FP_LN
.3a5e9c	08		php		                PHP
.3a5e9d	c2 30		rep #$30	            REP #$30
.3a5e9f	48		pha		                PHA
.3a5ea0	da		phx		                PHX
.3a5ea1	e2 20		sep #$20	            SEP #$20
.3a5ea3	a9 40		lda #$40	                LDA #FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5ea5	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5ea9	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5eab	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5eaf	c2 20		rep #$20	            REP #$20
.3a5eb1	a5 23		lda $0823	                LDA ARGUMENT1
.3a5eb3	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5eb7	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5eb9	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5ebd	af 4d 61 3a	lda $3a614d	                LDA @l fp_one
.3a5ec1	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5ec5	af 4f 61 3a	lda $3a614f	                LDA @l fp_one+2
.3a5ec9	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5ecd	ea		nop		                NOP
.3a5ece	ea		nop		                NOP
.3a5ecf	ea		nop		                NOP
.3a5ed0	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5ed4	85 0c		sta $080c	                STA SCRATCH
.3a5ed6	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5eda	85 0e		sta $080e	                STA SCRATCH+2
.3a5edc	e2 20		sep #$20	            SEP #$20
.3a5ede	a9 48		lda #$48	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX1
.3a5ee0	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5ee4	c2 20		rep #$20	            REP #$20
.3a5ee6	ea		nop		                NOP
.3a5ee7	ea		nop		                NOP
.3a5ee8	ea		nop		                NOP
.3a5ee9	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5eed	85 10		sta $0810	                STA SCRATCH2
.3a5eef	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5ef3	85 12		sta $0812	                STA SCRATCH2+2
.3a5ef5	e2 20		sep #$20	            SEP #$20
.3a5ef7	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a5ef9	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5efd	c2 20		rep #$20	            REP #$20
.3a5eff	a5 0c		lda $080c	                LDA SCRATCH
.3a5f01	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5f05	a5 0e		lda $080e	                LDA SCRATCH+2
.3a5f07	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5f0b	a5 10		lda $0810	                LDA SCRATCH2
.3a5f0d	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a5f11	a5 12		lda $0812	                LDA SCRATCH2+2
.3a5f13	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a5f17	ea		nop		                NOP
.3a5f18	ea		nop		                NOP
.3a5f19	ea		nop		                NOP
.3a5f1a	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f1e	85 23		sta $0823	                STA ARGUMENT1
.3a5f20	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f24	85 25		sta $0825	                STA ARGUMENT1+2
.3a5f26	e2 20		sep #$20	            SEP #$20
.3a5f28	a9 08		lda #$08	                LDA #FP_MATH_CTRL0_ADD | FP_ADD_IN0_MUX0 | FP_ADD_IN1_MUX0
.3a5f2a	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a5f2e	a9 02		lda #$02	                LDA #FP_OUT_ADD
.3a5f30	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a5f34	c2 20		rep #$20	            REP #$20
.3a5f36	a5 23		lda $0823	                LDA ARGUMENT1
.3a5f38	8f 08 e2 af	sta $afe208	                STA @l FP_MATH_INPUT0_LL
.3a5f3c	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a5f3e	8f 0a e2 af	sta $afe20a	                STA @l FP_MATH_INPUT0_HL
.3a5f42	ea		nop		                NOP
.3a5f43	ea		nop		                NOP
.3a5f44	ea		nop		                NOP
.3a5f45	af 08 e2 af	lda $afe208	                LDA @l FP_MATH_OUTPUT_FP_LL
.3a5f49	85 29		sta $0829	                STA ARGUMENT2
.3a5f4b	af 0a e2 af	lda $afe20a	                LDA @l FP_MATH_OUTPUT_FP_HL
.3a5f4f	85 2b		sta $082b	                STA ARGUMENT2+2
.3a5f51	20 d1 5c	jsr $3a5cd1	            JSR Q_SQ
.3a5f54	8b		phb		                PHB
.3a5f55	e2 20		sep #$20	            SEP #$20
.3a5f57	a9 3a		lda #$3a	                LDA #`ln_coeff
.3a5f59	48		pha		                PHA
.3a5f5a	ab		plb		                PLB
.3a5f5b	c2 20		rep #$20	            REP #$20
.3a5f5d	a2 3d 61	ldx #$613d	                LDX #<>ln_coeff
.3a5f60	20 3e 5c	jsr $3a5c3e	            JSR Q_POLY_HR
.3a5f63	a9 01 00	lda #$0001	                LDA #TYPE_FLOAT
.3a5f66	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a5f6a	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a5f6e	20 a8 54	jsr $3a54a8	            JSR OP_FP_MUL
.3a5f71	ab		plb		                PLB
.3a5f72	fa		plx		                PLX
.3a5f73	68		pla		                PLA
.3a5f74	28		plp		                PLP
.3a5f75	60		rts		            RTS
.3a5f76					FP_SIN
.3a5f76	08		php		                PHP
.3a5f77	c2 30		rep #$30	            REP #$30
.3a5f79	48		pha		                PHA
.3a5f7a	da		phx		                PHX
.3a5f7b	20 71 5d	jsr $3a5d71	            JSR Q_FP_SCALE_TAU
.3a5f7e	20 ce 5d	jsr $3a5dce	            JSR Q_FP_NORM_ANGLE
.3a5f81	da		phx		                PHX
.3a5f82	8a		txa		                TXA
.3a5f83	29 01 00	and #$0001	                AND #1
.3a5f86	d0 05		bne $3a5f8d	                BNE do_cos
.3a5f88	20 4e 5e	jsr $3a5e4e	            JSR Q_FP_SIN
.3a5f8b	80 03		bra $3a5f90	                BRA maybe_neg
.3a5f8d					do_cos
.3a5f8d	20 2b 5e	jsr $3a5e2b	            JSR Q_FP_COS
.3a5f90	fa		plx		maybe_neg       PLX
.3a5f91	8a		txa		                TXA
.3a5f92	29 04 00	and #$0004	                AND #4
.3a5f95	f0 0a		beq $3a5fa1	                BEQ done
.3a5f97	e2 20		sep #$20	            SEP #$20
.3a5f99	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5f9b	09 80		ora #$80	                ORA #$80
.3a5f9d	85 26		sta $0826	                STA ARGUMENT1+3
.3a5f9f	c2 20		rep #$20	            REP #$20
.3a5fa1	fa		plx		done            PLX
.3a5fa2	68		pla		                PLA
.3a5fa3	28		plp		                PLP
.3a5fa4	60		rts		            RTS
.3a5fa5					FP_COS
.3a5fa5	08		php		                PHP
.3a5fa6	c2 30		rep #$30	            REP #$30
.3a5fa8	48		pha		                PHA
.3a5fa9	da		phx		                PHX
.3a5faa	20 71 5d	jsr $3a5d71	            JSR Q_FP_SCALE_TAU
.3a5fad	20 ce 5d	jsr $3a5dce	            JSR Q_FP_NORM_ANGLE
.3a5fb0	da		phx		                PHX
.3a5fb1	8a		txa		                TXA
.3a5fb2	29 01 00	and #$0001	                AND #1
.3a5fb5	d0 05		bne $3a5fbc	                BNE do_sin
.3a5fb7	20 2b 5e	jsr $3a5e2b	            JSR Q_FP_COS
.3a5fba	80 03		bra $3a5fbf	                BRA maybe_neg
.3a5fbc					do_sin
.3a5fbc	20 4e 5e	jsr $3a5e4e	            JSR Q_FP_SIN
.3a5fbf	fa		plx		maybe_neg       PLX
.3a5fc0	8a		txa		                TXA
.3a5fc1	29 02 00	and #$0002	                AND #2
.3a5fc4	f0 0a		beq $3a5fd0	                BEQ done
.3a5fc6	e2 20		sep #$20	            SEP #$20
.3a5fc8	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5fca	09 80		ora #$80	                ORA #$80
.3a5fcc	85 26		sta $0826	                STA ARGUMENT1+3
.3a5fce	c2 20		rep #$20	            REP #$20
.3a5fd0	fa		plx		done            PLX
.3a5fd1	68		pla		                PLA
.3a5fd2	28		plp		                PLP
.3a5fd3	60		rts		            RTS
.3a5fd4					FP_TAN
.3a5fd4	08		php		                PHP
.3a5fd5	c2 30		rep #$30	            REP #$30
.3a5fd7	48		pha		                PHA
.3a5fd8	da		phx		                PHX
.3a5fd9	20 71 5d	jsr $3a5d71	            JSR Q_FP_SCALE_TAU
.3a5fdc	20 ce 5d	jsr $3a5dce	            JSR Q_FP_NORM_ANGLE
.3a5fdf	20 75 5e	jsr $3a5e75	            JSR Q_FP_TAN
.3a5fe2	8a		txa		                TXA
.3a5fe3	29 01 00	and #$0001	                AND #1
.3a5fe6	f0 03		beq $3a5feb	                BEQ no_inv
.3a5fe8	20 07 5d	jsr $3a5d07	            JSR Q_INV
.3a5feb	8a		txa		no_inv          TXA
.3a5fec	e2 20		sep #$20	            SEP #$20
.3a5fee	4a		lsr a		                LSR
.3a5fef	4a		lsr a		                LSR
.3a5ff0	69 00		adc #$00	                ADC #0
.3a5ff2	29 01		and #$01	                AND #1
.3a5ff4	f0 06		beq $3a5ffc	                BEQ no_neg
.3a5ff6	a5 26		lda $0826	                LDA ARGUMENT1+3
.3a5ff8	09 80		ora #$80	                ORA #$80
.3a5ffa	85 26		sta $0826	                STA ARGUMENT1+3
.3a5ffc					no_neg
.3a5ffc	c2 20		rep #$20	            REP #$20
.3a5ffe	fa		plx		                PLX
.3a5fff	68		pla		                PLA
.3a6000	28		plp		                PLP
.3a6001	60		rts		            RTS
.3a6002					FP_LN
.3a6002	08		php		                PHP
.3a6003	c2 30		rep #$30	            REP #$30
.3a6005	48		pha		                PHA
.3a6006	da		phx		                PHX
.3a6007	5a		phy		                PHY
.3a6008	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a600a	10 1f		bpl $3a602b	                BPL arg_ok
.3a600c	08		php		            PHP
.3a600d	c2 20		rep #$20	            REP #$20
.3a600f	48		pha		            PHA
.3a6010	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6013	5b		tcd		            TCD
.3a6014	68		pla		            PLA
.3a6015	28		plp		            PLP
.3a6016	e2 20		sep #$20	            SEP #$20
.3a6018	a9 17		lda #$17	            LDA #ERR_DOMAIN
.3a601a	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a601e	c2 20		rep #$20	            REP #$20
.3a6020	29 ff 00	and #$00ff	            AND #$00FF
.3a6023	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6026	e2 20		sep #$20	            SEP #$20
.3a6028	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a602b					arg_ok
.3a602b	c2 30		rep #$30	            REP #$30
.3a602d	a5 23		lda $0823	                LDA ARGUMENT1
.3a602f	cf 4d 61 3a	cmp $3a614d	                CMP @l fp_one
.3a6033	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6035	cf 4f 61 3a	cmp $3a614f	                CMP @l fp_one+2
.3a6039	b0 04		bcs $3a603f	                BCS gtone
.3a603b	20 07 5d	jsr $3a5d07	            JSR Q_INV
.3a603e	18		clc		                CLC
.3a603f	a9 00 00	lda #$0000	gtone           LDA #0
.3a6042	a8		tay		                TAY
.3a6043	2a		rol a		                ROL             ; Rotate Carry into A; 0 means negate
.3a6044	48		pha		                PHA
.3a6045	e2 20		sep #$20	            SEP #$20
.3a6047	a9 00		lda #$00	                LDA #0
.3a6049	8f 00 e2 af	sta $afe200	                STA @l FP_MATH_CTRL0
.3a604d	a9 01		lda #$01	                LDA #FP_OUT_DIV
.3a604f	8f 01 e2 af	sta $afe201	                STA @l FP_MATH_CTRL1
.3a6053	c2 20		rep #$20	            REP #$20
.3a6055	af 51 61 3a	lda $3a6151	                LDA @l eexp64
.3a6059	85 29		sta $0829	                STA ARGUMENT2
.3a605b	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a605f	af 53 61 3a	lda $3a6153	                LDA @l eexp64+2
.3a6063	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6065	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a6069	20 45 5d	jsr $3a5d45	            JSR Q_FP_SCALE
.3a606c	8a		txa		                TXA
.3a606d	f0 07		beq $3a6076	                BEQ chk16
.3a606f	0a		asl a		                ASL             ; multiply counter by 64
.3a6070	0a		asl a		                ASL
.3a6071	0a		asl a		                ASL
.3a6072	0a		asl a		                ASL
.3a6073	0a		asl a		                ASL
.3a6074	0a		asl a		                ASL
.3a6075	a8		tay		                TAY
.3a6076	af 55 61 3a	lda $3a6155	chk16           LDA @l eexp16
.3a607a	85 29		sta $0829	                STA ARGUMENT2
.3a607c	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a6080	af 57 61 3a	lda $3a6157	                LDA @l eexp16+2
.3a6084	85 2b		sta $082b	                STA ARGUMENT2+2
.3a6086	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a608a	20 45 5d	jsr $3a5d45	            JSR Q_FP_SCALE
.3a608d	8a		txa		                TXA
.3a608e	f0 0b		beq $3a609b	                BEQ chk04
.3a6090	0a		asl a		                ASL             ; multiply counter by 16
.3a6091	0a		asl a		                ASL
.3a6092	0a		asl a		                ASL
.3a6093	0a		asl a		                ASL
.3a6094	85 29		sta $0829	                STA ARGUMENT2   ; and add into total
.3a6096	18		clc		                CLC
.3a6097	98		tya		                TYA
.3a6098	65 29		adc $0829	                ADC ARGUMENT2
.3a609a	a8		tay		                TAY
.3a609b	af 59 61 3a	lda $3a6159	chk04           LDA @l eexp04
.3a609f	85 29		sta $0829	                STA ARGUMENT2
.3a60a1	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a60a5	af 5b 61 3a	lda $3a615b	                LDA @l eexp04+2
.3a60a9	85 2b		sta $082b	                STA ARGUMENT2+2
.3a60ab	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a60af	20 45 5d	jsr $3a5d45	            JSR Q_FP_SCALE
.3a60b2	8a		txa		                TXA
.3a60b3	f0 09		beq $3a60be	                BEQ chk01
.3a60b5	0a		asl a		                ASL             ;multiply counter by 4
.3a60b6	0a		asl a		                ASL
.3a60b7	85 29		sta $0829	                STA ARGUMENT2   ;and add to total
.3a60b9	18		clc		                CLC
.3a60ba	98		tya		                TYA
.3a60bb	65 29		adc $0829	                ADC ARGUMENT2
.3a60bd	a8		tay		                TAY
.3a60be	af 5d 61 3a	lda $3a615d	chk01           LDA @l eexp01
.3a60c2	85 29		sta $0829	                STA ARGUMENT2
.3a60c4	8f 0c e2 af	sta $afe20c	                STA @l FP_MATH_INPUT1_LL
.3a60c8	af 5f 61 3a	lda $3a615f	                LDA @l eexp01+2
.3a60cc	85 2b		sta $082b	                STA ARGUMENT2+2
.3a60ce	8f 0e e2 af	sta $afe20e	                STA @l FP_MATH_INPUT1_HL
.3a60d2	20 45 5d	jsr $3a5d45	            JSR Q_FP_SCALE
.3a60d5	86 29		stx $0829	                STX ARGUMENT2   ; add counter to total
.3a60d7	18		clc		                CLC
.3a60d8	98		tya		                TYA
.3a60d9	65 29		adc $0829	                ADC ARGUMENT2
.3a60db	a8		tay		                TAY
.3a60dc	20 9c 5e	jsr $3a5e9c	            JSR Q_FP_LN
.3a60df	a5 23		lda $0823	                LDA ARGUMENT1
.3a60e1	85 29		sta $0829	                STA ARGUMENT2
.3a60e3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a60e5	85 2b		sta $082b	                STA ARGUMENT2+2
.3a60e7	98		tya		                TYA
.3a60e8	85 23		sta $0823	                STA ARGUMENT1
.3a60ea	64 25		stz $0825	                STZ ARGUMENT1+2
.3a60ec	20 35 59	jsr $3a5935	            JSR ITOF
.3a60ef	20 12 54	jsr $3a5412	            JSR OP_FP_ADD
.3a60f2	68		pla		                PLA
.3a60f3	d0 07		bne $3a60fc	                BNE done
.3a60f5	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a60f7	09 00 80	ora #$8000	                ORA #$8000
.3a60fa	85 25		sta $0825	                STA ARGUMENT1+2
.3a60fc	7a		ply		done            PLY
.3a60fd	fa		plx		                PLX
.3a60fe	68		pla		                PLA
.3a60ff	28		plp		                PLP
.3a6100	60		rts		            RTS
.3a6101					cos_coeff
>3a6101	01 0d d0 37			                .dword $37D00D01
>3a6105	61 0b b6 ba			                .dword $BAB60B61
>3a6109	ab aa 2a 3d			                .dword $3D2AAAAB
>3a610d	00 00 00 bf			                .dword $BF000000
>3a6111	00 00 80 3f			                .dword $3F800000
.3a6115					sin_coeff
>3a6115	1d ef 38 36			                .dword $3638EF1D
>3a6119	01 0d 50 b9			                .dword $B9500D01
>3a611d	89 88 08 3c			                .dword $3C088889
>3a6121	ab aa 2a be			                .dword $BE2AAAAB
>3a6125	00 00 80 3f			                .dword $3F800000
.3a6129					tan_coeff
>3a6129	a4 27 b3 3c			                .dword $3CB327A4
>3a612d	d1 0d 5d 3d			                .dword $3D5D0DD1
>3a6131	89 88 08 3e			                .dword $3E088889
>3a6135	ab aa aa 3e			                .dword $3EAAAAAB
>3a6139	00 00 80 3f			                .dword $3F800000
>3a613d	39 8e e3 3d			ln_coeff        .dword $3DE38E39
>3a6141	25 49 12 3e			                .dword $3E124925
>3a6145	cd cc 4c 3e			                .dword $3E4CCCCD
>3a6149	ab aa aa 3e			                .dword $3EAAAAAB
>3a614d	00 00 80 3f			fp_one          .dword $3F800000
>3a6151	c1 2c a1 6d			eexp64          .dword $6DA12CC1
>3a6155	5f 97 07 4b			eexp16          .dword $4B07975F
>3a6159	81 64 5a 42			eexp04          .dword $425A6481
>3a615d	54 f8 2d 40			eexp01          .dword $402DF854
>3a6161	db 0f c9 40			twopi           .dword $40C90FDB
>3a6165	db 0f 49 40			onepi           .dword $40490FDB
>3a6169	db 0f c9 3f			halfpi          .dword $3FC90FDB
>3a616d	db 0f 49 3f			quarterpi       .dword $3F490FDB

;******  Return to file: src\basic816.s


;******  Processing file: src\arrays.s

.3a6171					ARR_ALLOC
.3a6171	08		php		                PHP
.3a6172	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a6175	c2 20		rep #$20	            REP #$20
.3a6177	a9 01 00	lda #$0001	                LDA #1                      ; ARGUMENT1 := 1
.3a617a	85 23		sta $0823	                STA ARGUMENT1
.3a617c	a9 00 00	lda #$0000	                LDA #0
.3a617f	85 25		sta $0825	                STA ARGUMENT1+2
.3a6181	e2 20		sep #$20	            SEP #$20
.3a6183	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.3a6187	c2 20		rep #$20	            REP #$20
.3a6189	29 ff 00	and #$00ff	                AND #$00FF
.3a618c	85 8f		sta $088f	                STA MCOUNT                  ; Save it to MCOUNT for later
.3a618e	a8		tay		                TAY                         ; Y := number of dimensions
.3a618f	a2 01 00	ldx #$0001	                LDX #1                      ; X := index to size 0
.3a6192					size_loop
.3a6192	c2 20		rep #$20	            REP #$20
.3a6194	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X           ; ARGUMENT2 := Ith dimension
.3a6198	85 29		sta $0829	                STA ARGUMENT2
.3a619a	a9 00 00	lda #$0000	                LDA #0
.3a619d	85 2b		sta $082b	                STA ARGUMENT2+2
.3a619f	20 74 26	jsr $3a2674	            JSR OP_MULTIPLY
.3a61a2	e8		inx		                INX
.3a61a3	e8		inx		                INX
.3a61a4	88		dey		                DEY
.3a61a5	d0 eb		bne $3a6192	                BNE size_loop               ; If there are more dimensions, take the next one
.3a61a7	c2 20		rep #$20	            REP #$20
.3a61a9	a9 04 00	lda #$0004	                LDA #ARGUMENT_SIZE-1        ; Size of a data item (don't include the type code)
.3a61ac	85 29		sta $0829	                STA ARGUMENT2
.3a61ae	a9 00 00	lda #$0000	                LDA #0
.3a61b1	85 2b		sta $082b	                STA ARGUMENT2+2
.3a61b3	20 74 26	jsr $3a2674	            JSR OP_MULTIPLY
.3a61b6	e2 20		sep #$20	            SEP #$20
.3a61b8	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF             ; SCRATCH := N * 2
.3a61bc	85 0c		sta $080c	                STA SCRATCH
.3a61be	a9 00		lda #$00	                LDA #0
.3a61c0	85 0d		sta $080d	                STA SCRATCH+1
.3a61c2	c2 20		rep #$20	            REP #$20
.3a61c4	06 0c		asl $080c	                ASL SCRATCH
.3a61c6	38		sec		                SEC                         ; ARGUMENT1 := size of the complete block
.3a61c7	a5 23		lda $0823	                LDA ARGUMENT1
.3a61c9	65 0c		adc $080c	                ADC SCRATCH                 ; Size of data area + N*2 + 1 (in carry)
.3a61cb	85 23		sta $0823	                STA ARGUMENT1
.3a61cd	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a61cf	69 00 00	adc #$0000	                ADC #0
.3a61d2	85 25		sta $0825	                STA ARGUMENT1+2
.3a61d4	d0 29		bne $3a61ff	                BNE too_big                 ; size > 16-bit? Yes: throw an error
.3a61d6	e2 20		sep #$20	            SEP #$20
.3a61d8	a5 ea		lda $08ea	                LDA TOFINDTYPE              ; Get the type
.3a61da	09 80		ora #$80	                ORA #$80                    ; Flip the flag to make it an array of that type
.3a61dc	a6 23		ldx $0823	                LDX ARGUMENT1               ; Get the computed size
.3a61de	20 60 0f	jsr $3a0f60	            JSR ALLOC
.3a61e1	e2 20		sep #$20	            SEP #$20
.3a61e3	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF
.3a61e7	87 c0		sta [$08c0]	                STA [CURRBLOCK]             ; Write the number of dimensions to the array's preamble
.3a61e9	a0 01 00	ldy #$0001	                LDY #1
.3a61ec	a2 00 00	ldx #$0000	                LDX #0
.3a61ef					copy_loop
.3a61ef	e2 20		sep #$20	            SEP #$20
.3a61f1	bf 01 4d 00	lda $004d01,x	                LDA @lARRIDXBUF+1,X         ; ARGUMENT2 := Ith dimension
.3a61f5	97 c0		sta [$08c0],y	                STA [CURRBLOCK],Y           ; And write the dimension to the array's preamble
.3a61f7	e4 8f		cpx $088f	                CPX MCOUNT                  ; Have we written the last byte?
.3a61f9	f0 23		beq $3a621e	                BEQ null_array              ; Yes: clear the array
.3a61fb	e8		inx		                INX                         ; No: move to the next byte
.3a61fc	c8		iny		                INY
.3a61fd	80 f0		bra $3a61ef	                BRA copy_loop
.3a61ff					too_big
.3a61ff	08		php		            PHP
.3a6200	c2 20		rep #$20	            REP #$20
.3a6202	48		pha		            PHA
.3a6203	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6206	5b		tcd		            TCD
.3a6207	68		pla		            PLA
.3a6208	28		plp		            PLP
.3a6209	e2 20		sep #$20	            SEP #$20
.3a620b	a9 09		lda #$09	            LDA #ERR_RANGE
.3a620d	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6211	c2 20		rep #$20	            REP #$20
.3a6213	29 ff 00	and #$00ff	            AND #$00FF
.3a6216	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6219	e2 20		sep #$20	            SEP #$20
.3a621b	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a621e					null_array
.3a621e	e2 20		sep #$20	            SEP #$20
.3a6220	38		sec		                SEC                         ; INDEX := pointer to first value
.3a6221	a5 c0		lda $08c0	                LDA CURRBLOCK
.3a6223	67 c0		adc [$08c0]	                ADC [CURRBLOCK]
.3a6225	85 08		sta $0808	                STA INDEX
.3a6227	a5 c1		lda $08c1	                LDA CURRBLOCK+1
.3a6229	69 00		adc #$00	                ADC #0
.3a622b	85 09		sta $0809	                STA INDEX+1
.3a622d	a5 c2		lda $08c2	                LDA CURRBLOCK+2
.3a622f	69 00		adc #$00	                ADC #0
.3a6231	85 0a		sta $080a	                STA INDEX+2
.3a6233	64 0b		stz $080b	                STZ INDEX+3
.3a6235	c2 20		rep #$20	            REP #$20
.3a6237	a0 05 00	ldy #$0005	                LDY #HEAPOBJ.END            ; SCRATCH := pointer the the first byte after the array
.3a623a	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a623c	85 0c		sta $080c	                STA SCRATCH
.3a623e	e2 20		sep #$20	            SEP #$20
.3a6240	c8		iny		                INY
.3a6241	c8		iny		                INY
.3a6242	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a6244	85 0e		sta $080e	                STA SCRATCH+2
.3a6246	64 0f		stz $080f	                STZ SCRATCH+3
.3a6248					clr_loop
.3a6248	e2 20		sep #$20	            SEP #$20
.3a624a	a9 00		lda #$00	                LDA #0
.3a624c	87 08		sta [$0808]	                STA [INDEX]                 ; Clear the byte
.3a624e	c2 20		rep #$20	            REP #$20
.3a6250	18		clc		                CLC                         ; Increment INDEX
.3a6251	a5 08		lda $0808	                LDA INDEX
.3a6253	69 01 00	adc #$0001	                ADC #1
.3a6256	85 08		sta $0808	                STA INDEX
.3a6258	a5 0a		lda $080a	                LDA INDEX+2
.3a625a	69 00 00	adc #$0000	                ADC #0
.3a625d	85 0a		sta $080a	                STA INDEX+2
.3a625f	c5 0e		cmp $080e	                CMP SCRATCH+2               ; INDEX == SCRATCH?
.3a6261	d0 e5		bne $3a6248	                BNE clr_loop                ; No: write to this next byte
.3a6263	a5 08		lda $0808	                LDA INDEX
.3a6265	c5 0c		cmp $080c	                CMP SCRATCH
.3a6267	d0 df		bne $3a6248	                BNE clr_loop
.3a6269					done
.3a6269	28		plp		                PLP
.3a626a	60		rts		            RTS
.3a626b					ARR_CELL
.3a626b	08		php		                PHP
.3a626c	c2 20		rep #$20	            REP #$20
.3a626e	64 08		stz $0808	                STZ INDEX               ; INDEX := 0
.3a6270	64 0a		stz $080a	                STZ INDEX+2
.3a6272	e2 20		sep #$20	            SEP #$20
.3a6274	af 00 4d 00	lda $004d00	                LDA @lARRIDXBUF         ; MCOUNT := N (number of dimensions)
.3a6278	85 8f		sta $088f	                STA MCOUNT
.3a627a	64 90		stz $0890	                STZ MCOUNT+1
.3a627c	a2 01 00	ldx #$0001	                LDX #1                  ; X := index to dimension 0
.3a627f	e2 20		sep #$20	            SEP #$20
.3a6281	a7 c0		lda [$08c0]	                LDA [CURRBLOCK]         ; Make sure the dimensions of the array
.3a6283	c5 8f		cmp $088f	                CMP MCOUNT              ; ... match those requested
.3a6285	f0 1f		beq $3a62a6	                BEQ dims_match          ; Yes: the dimensions match
.3a6287					arg_err
.3a6287	08		php		            PHP
.3a6288	c2 20		rep #$20	            REP #$20
.3a628a	48		pha		            PHA
.3a628b	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a628e	5b		tcd		            TCD
.3a628f	68		pla		            PLA
.3a6290	28		plp		            PLP
.3a6291	e2 20		sep #$20	            SEP #$20
.3a6293	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a6295	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6299	c2 20		rep #$20	            REP #$20
.3a629b	29 ff 00	and #$00ff	            AND #$00FF
.3a629e	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a62a1	e2 20		sep #$20	            SEP #$20
.3a62a3	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a62a6	c9 01		cmp #$01	dims_match      CMP #1                  ; Check to see if this array is one dimensional
.3a62a8	f0 3a		beq $3a62e4	                BEQ add_last            ; If so, just add the index of the cell to INDEX
.3a62aa	a0 01 00	ldy #$0001	                LDY #1
.3a62ad					index_loop
.3a62ad	e2 20		sep #$20	            SEP #$20
.3a62af	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; ARGUMENT1 := I_j
.3a62b3	85 23		sta $0823	                STA ARGUMENT1
.3a62b5	64 24		stz $0824	                STZ ARGUMENT1+1
.3a62b7	64 25		stz $0825	                STZ ARGUMENT1+2
.3a62b9	64 26		stz $0826	                STZ ARGUMENT1+3
.3a62bb	b7 c0		lda [$08c0],y	                LDA [CURRBLOCK],Y       ; ARGUMENT2 := D_j
.3a62bd	85 29		sta $0829	                STA ARGUMENT2
.3a62bf	64 2a		stz $082a	                STZ ARGUMENT2+1
.3a62c1	64 2b		stz $082b	                STZ ARGUMENT2+2
.3a62c3	64 2c		stz $082c	                STZ ARGUMENT2+3
.3a62c5	a5 23		lda $0823	                LDA ARGUMENT1
.3a62c7	c5 29		cmp $0829	                CMP ARGUMENT2           ; Is I_j >= D_j
.3a62c9	b0 68		bcs $3a6333	                BGE range_err           ; Yes: throw an out-of-range error
.3a62cb	20 74 26	jsr $3a2674	            JSR OP_MULTIPLY
.3a62ce	c2 20		rep #$20	            REP #$20
.3a62d0	18		clc		                CLC                     ; INDEX := INDEX + ARGUMENT1
.3a62d1	a5 08		lda $0808	                LDA INDEX
.3a62d3	65 23		adc $0823	                ADC ARGUMENT1
.3a62d5	85 08		sta $0808	                STA INDEX
.3a62d7	a5 0a		lda $080a	                LDA INDEX+2
.3a62d9	65 25		adc $0825	                ADC ARGUMENT1+2
.3a62db	85 0a		sta $080a	                STA INDEX+2
.3a62dd	e8		inx		                INX
.3a62de	e8		inx		                INX
.3a62df	c8		iny		                INY
.3a62e0	c4 8f		cpy $088f	                CPY MCOUNT              ; Are we on the last index?
.3a62e2	d0 c9		bne $3a62ad	                BNE index_loop          ; No: move to the next index and try again
.3a62e4					add_last
.3a62e4	e2 20		sep #$20	            SEP #$20
.3a62e6	18		clc		                CLC
.3a62e7	bf 00 4d 00	lda $004d00,x	                LDA @lARRIDXBUF,X       ; INDEX := INDEX + I_(n-1)
.3a62eb	85 90		sta $0890	                STA MCOUNT+1
.3a62ed	65 08		adc $0808	                ADC INDEX
.3a62ef	85 08		sta $0808	                STA INDEX
.3a62f1	a5 09		lda $0809	                LDA INDEX+1
.3a62f3	69 00		adc #$00	                ADC #0
.3a62f5	85 09		sta $0809	                STA INDEX+1
.3a62f7	c2 20		rep #$20	            REP #$20
.3a62f9	a5 0a		lda $080a	                LDA INDEX+2
.3a62fb	69 00 00	adc #$0000	                ADC #0
.3a62fe	85 0a		sta $080a	                STA INDEX+2
.3a6300	c2 20		rep #$20	            REP #$20
.3a6302	06 08		asl $0808	                ASL INDEX               ; INDEX := INDEX * 4 (size of a value)
.3a6304	26 0a		rol $080a	                ROL INDEX+2
.3a6306	06 08		asl $0808	                ASL INDEX
.3a6308	26 0a		rol $080a	                ROL INDEX+2
.3a630a	e2 20		sep #$20	            SEP #$20
.3a630c	38		sec		                SEC
.3a630d	a5 08		lda $0808	                LDA INDEX
.3a630f	65 8f		adc $088f	                ADC MCOUNT
.3a6311	85 08		sta $0808	                STA INDEX
.3a6313	a5 09		lda $0809	                LDA INDEX+1
.3a6315	69 00		adc #$00	                ADC #0
.3a6317	85 09		sta $0809	                STA INDEX+1
.3a6319	c2 20		rep #$20	            REP #$20
.3a631b	a5 0a		lda $080a	                LDA INDEX+2
.3a631d	69 00 00	adc #$0000	                ADC #0
.3a6320	85 0a		sta $080a	                STA INDEX+2
.3a6322	18		clc		                CLC                     ; INDEX := INDEX + CURRBLOCK (point to the address desired)
.3a6323	a5 08		lda $0808	                LDA INDEX
.3a6325	65 c0		adc $08c0	                ADC CURRBLOCK
.3a6327	85 08		sta $0808	                STA INDEX
.3a6329	e2 20		sep #$20	            SEP #$20
.3a632b	a5 0a		lda $080a	                LDA INDEX+2
.3a632d	65 c2		adc $08c2	                ADC CURRBLOCK+2
.3a632f	85 0a		sta $080a	                STA INDEX+2
.3a6331	28		plp		                PLP
.3a6332	60		rts		            RTS
.3a6333					range_err
.3a6333	08		php		            PHP
.3a6334	c2 20		rep #$20	            REP #$20
.3a6336	48		pha		            PHA
.3a6337	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a633a	5b		tcd		            TCD
.3a633b	68		pla		            PLA
.3a633c	28		plp		            PLP
.3a633d	e2 20		sep #$20	            SEP #$20
.3a633f	a9 09		lda #$09	            LDA #ERR_RANGE
.3a6341	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6345	c2 20		rep #$20	            REP #$20
.3a6347	29 ff 00	and #$00ff	            AND #$00FF
.3a634a	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a634d	e2 20		sep #$20	            SEP #$20
.3a634f	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6352					ARR_SET
.3a6352	08		php		                PHP
.3a6353	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a6356	e2 20		sep #$20	            SEP #$20
.3a6358	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.3a635b	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a635d	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.3a635f	c5 27		cmp $0827	                CMP ARGTYPE1        ; is it the same as the argument?
.3a6361	d0 28		bne $3a638b	                BNE type_mismatch   ; No: throw a type mismatch error
.3a6363	a5 27		lda $0827	                LDA ARGTYPE1        ; Save the type
.3a6365	48		pha		                PHA
.3a6366	c2 20		rep #$20	            REP #$20
.3a6368	a5 25		lda $0825	                LDA ARGUMENT1+2     ; Save ARGUMENT1
.3a636a	48		pha		                PHA
.3a636b	a5 23		lda $0823	                LDA ARGUMENT1
.3a636d	48		pha		                PHA
.3a636e	20 6b 62	jsr $3a626b	            JSR ARR_CELL
.3a6371	68		pla		                PLA                 ; Restore ARGUMENT1
.3a6372	85 23		sta $0823	                STA ARGUMENT1
.3a6374	68		pla		                PLA
.3a6375	85 25		sta $0825	                STA ARGUMENT1+2
.3a6377	e2 20		sep #$20	            SEP #$20
.3a6379	68		pla		                PLA
.3a637a	85 27		sta $0827	                STA ARGTYPE1
.3a637c	c2 20		rep #$20	            REP #$20
.3a637e	a5 23		lda $0823	                LDA ARGUMENT1       ; Set the value in the cell
.3a6380	87 08		sta [$0808]	                STA [INDEX]
.3a6382	a0 02 00	ldy #$0002	                LDY #2
.3a6385	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6387	97 08		sta [$0808],y	                STA [INDEX],Y
.3a6389	28		plp		                PLP
.3a638a	60		rts		            RTS
.3a638b					type_mismatch
.3a638b	08		php		            PHP
.3a638c	c2 20		rep #$20	            REP #$20
.3a638e	48		pha		            PHA
.3a638f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6392	5b		tcd		            TCD
.3a6393	68		pla		            PLA
.3a6394	28		plp		            PLP
.3a6395	e2 20		sep #$20	            SEP #$20
.3a6397	a9 04		lda #$04	            LDA #ERR_TYPE
.3a6399	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a639d	c2 20		rep #$20	            REP #$20
.3a639f	29 ff 00	and #$00ff	            AND #$00FF
.3a63a2	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a63a5	e2 20		sep #$20	            SEP #$20
.3a63a7	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a63aa					ARR_REF
.3a63aa	08		php		                PHP
.3a63ab	20 9c 11	jsr $3a119c	            JSR HEAP_GETHED
.3a63ae	f4 00 00	pea #$0000	                PEA #0              ; Make room on the stack that ARR_CELL expects
.3a63b1	f4 00 00	pea #$0000	                PEA #0
.3a63b4	e2 20		sep #$20	            SEP #$20
.3a63b6	48		pha		                PHA
.3a63b7	20 6b 62	jsr $3a626b	            JSR ARR_CELL
.3a63ba	e2 20		sep #$20	            SEP #$20
.3a63bc	68		pla		                PLA
.3a63bd	c2 20		rep #$20	            REP #$20
.3a63bf	68		pla		                PLA
.3a63c0	68		pla		                PLA
.3a63c1	c2 20		rep #$20	            REP #$20
.3a63c3	a7 08		lda [$0808]	                LDA [INDEX]         ; Get the value in the cell
.3a63c5	85 23		sta $0823	                STA ARGUMENT1
.3a63c7	a0 02 00	ldy #$0002	                LDY #2
.3a63ca	b7 08		lda [$0808],y	                LDA [INDEX],Y
.3a63cc	85 25		sta $0825	                STA ARGUMENT1+2
.3a63ce	e2 20		sep #$20	            SEP #$20
.3a63d0	a0 00 00	ldy #$0000	                LDY #HEAPOBJ.TYPE   ; Get the type of the array
.3a63d3	b7 c3		lda [$08c3],y	                LDA [CURRHEADER],Y
.3a63d5	29 7f		and #$7f	                AND #$7F            ; Mask off the ARRAY OF bit
.3a63d7	85 27		sta $0827	                STA ARGTYPE1        ; Set the type of the return value
.3a63d9	28		plp		                PLP
.3a63da	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\dos.s

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					FILESIZE            .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
>3af073					CLUSTER_BUFF    .fill 512           ; A buffer for cluster read/write operations
.3af273					FD_IN
>3af273					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>3af274					DEV                 .byte ?             ; The ID of the device holding the file
>3af275					PATH                .dword ?            ; Pointer to a NULL terminated path string
>3af279					CLUSTER             .dword ?            ; The current cluster of the file.
>3af27d					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>3af281					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>3af285					FILESIZE            .dword ?            ; The size of the file
>3af289					CREATE_DATE         .word ?             ; The creation date of the file
>3af28b					CREATE_TIME         .word ?             ; The creation time of the file
>3af28d					MODIFIED_DATE       .word ?             ; The modification date of the file
>3af28f					MODIFIED_TIME       .word ?             ; The modification time of the file
.3a63db					PR_FILESIZE
.3a63db	da		phx		                PHX
.3a63dc	0b		phd		                PHD
.3a63dd	08		php		                PHP
.3a63de	08		php		            PHP
.3a63df	c2 20		rep #$20	            REP #$20
.3a63e1	48		pha		            PHA
.3a63e2	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a63e5	5b		tcd		            TCD
.3a63e6	68		pla		            PLA
.3a63e7	28		plp		            PLP
.3a63e8	c2 30		rep #$30	            REP #$30
.3a63ea	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a63ec	89 f0 ff	bit #$fff0	                BIT #$FFF0              ; Check to see if the amount is in MB range
.3a63ef	d0 29		bne $3a641a	                BNE pr_mb               ; If so, print it in MBs
.3a63f1	89 0f 00	bit #$000f	                BIT #$000F              ; Check to see if the amount is in KB range
.3a63f4	d0 0c		bne $3a6402	                BNE pr_kb
.3a63f6	a5 23		lda $0823	                LDA ARGUMENT1
.3a63f8	89 00 fc	bit #$fc00	                BIT #$FC00
.3a63fb	d0 05		bne $3a6402	                BNE pr_kb               ; If so, print it in KBs
.3a63fd					pr_regular
.3a63fd	20 88 43	jsr $3a4388	            JSR PR_INTEGER
.3a6400	80 2e		bra $3a6430	                BRA done
.3a6402	a2 0a 00	ldx #$000a	pr_kb           LDX #10                 ; Shift so the amount in KB is in ARGUMENT1
.3a6405	46 25		lsr $0825	kb_shift        LSR ARGUMENT1+2
.3a6407	66 23		ror $0823	                ROR ARGUMENT1
.3a6409	ca		dex		                DEX
.3a640a	d0 f9		bne $3a6405	                BNE kb_shift
.3a640c	20 88 43	jsr $3a4388	            JSR PR_INTEGER
.3a640f	e2 20		sep #$20	            SEP #$20
.3a6411	a9 4b		lda #$4b	                LDA #'K'
.3a6413	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6416	c2 20		rep #$20	            REP #$20
.3a6418	80 16		bra $3a6430	                BRA done
.3a641a	a2 14 00	ldx #$0014	pr_mb           LDX #20                 ; Shift so the amount in MB is in ARGUMENT1
.3a641d	46 25		lsr $0825	mb_shift        LSR ARGUMENT1+2
.3a641f	66 23		ror $0823	                ROR ARGUMENT1
.3a6421	ca		dex		                DEX
.3a6422	d0 f9		bne $3a641d	                BNE mb_shift
.3a6424	20 88 43	jsr $3a4388	            JSR PR_INTEGER
.3a6427	e2 20		sep #$20	            SEP #$20
.3a6429	a9 4d		lda #$4d	                LDA #'M'
.3a642b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a642e	c2 20		rep #$20	            REP #$20
.3a6430	28		plp		done            PLP
.3a6431	2b		pld		                PLD
.3a6432	fa		plx		                PLX
.3a6433	60		rts		            RTS
.3a6434					CMD_DIR
.3a6434	0b		phd		                PHD
.3a6435	08		php		                PHP
.3a6436	c2 30		rep #$30	            REP #$30
.3a6438	a9 00 00	lda #$0000	                LDA #0                      ; Zero out the pagination line count
.3a643b	8f b6 08 00	sta $0008b6	                STA @l LINECOUNT
.3a643f	8f b8 08 00	sta $0008b8	                STA @l LINECOUNT+2
.3a6443	e2 20		sep #$20	            SEP #$20
.3a6445	20 9f 20	jsr $3a209f	            JSR PEEK_TOK
.3a6448	c9 00		cmp #$00	                CMP #0
.3a644a	f0 08		beq $3a6454	                BEQ set_null                ; If none provided, set the path to empty
.3a644c	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a644f	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a6452	80 11		bra $3a6465	                BRA set_fd
.3a6454					set_null
.3a6454	c2 20		rep #$20	            REP #$20
.3a6456	a9 00 00	lda #$0000	                LDA #0                      ; Set ARGUMENT1 to the NULL string
.3a6459	85 23		sta $0823	                STA ARGUMENT1
.3a645b	85 25		sta $0825	                STA ARGUMENT1+2
.3a645d	e2 20		sep #$20	            SEP #$20
.3a645f	a9 02		lda #$02	                LDA #TYPE_STRING
.3a6461	85 27		sta $0827	                STA ARGTYPE1
.3a6463	c2 20		rep #$20	            REP #$20
.3a6465					set_fd
.3a6465	20 95 65	jsr $3a6595	            JSR SETFILEDESC
.3a6468	22 08 11 00	jsl $001108	                JSL FK_DIROPEN              ; Open up the directory
.3a646c	b0 22		bcs $3a6490	                BCS pr_first
.3a646e	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6471	08		php		            PHP
.3a6472	c2 20		rep #$20	            REP #$20
.3a6474	48		pha		            PHA
.3a6475	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6478	5b		tcd		            TCD
.3a6479	68		pla		            PLA
.3a647a	28		plp		            PLP
.3a647b	e2 20		sep #$20	            SEP #$20
.3a647d	a9 10		lda #$10	            LDA #ERR_DIRECTORY
.3a647f	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6483	c2 20		rep #$20	            REP #$20
.3a6485	29 ff 00	and #$00ff	            AND #$00FF
.3a6488	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a648b	e2 20		sep #$20	            SEP #$20
.3a648d	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6490					pr_first
.3a6490	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a6493					pr_entry
.3a6493	08		php		            PHP
.3a6494	c2 20		rep #$20	            REP #$20
.3a6496	48		pha		            PHA
.3a6497	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a649a	5b		tcd		            TCD
.3a649b	68		pla		            PLA
.3a649c	28		plp		            PLP
.3a649d	e2 20		sep #$20	            SEP #$20
.3a649f	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Start with the file name
.3a64a2	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the initial character of the name
.3a64a4	d0 03		bne $3a64a9	                BNE chk_unused
.3a64a6	82 a9 00	brl $3a6552	                BRL done                    ; If it's NULL, we're done
.3a64a9	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED     ; Is it the unusued code?
.3a64ab	d0 03		bne $3a64b0	                BNE chk_attributes
.3a64ad	82 96 00	brl $3a6546	                BRL next_entry              ; Yes: go to the next entry
.3a64b0	a0 0b 00	ldy #$000b	chk_attributes  LDY #DIRENTRY.ATTRIBUTE
.3a64b3	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute byte
.3a64b5	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.3a64b7	f0 03		beq $3a64bc	                BEQ chk_hidden
.3a64b9	82 a9 00	brl $3a6565	                BRL pr_volume               ; Print the volume label
.3a64bc	89 02		bit #$02	chk_hidden      BIT #DOS_ATTR_HIDDEN        ; Is it a hidden file?
.3a64be	f0 03		beq $3a64c3	                BEQ chk_long
.3a64c0	82 83 00	brl $3a6546	                BRL next_entry              ; Yes: go to the next entry
.3a64c3	29 0f		and #$0f	chk_long        AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.3a64c5	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.3a64c7	d0 03		bne $3a64cc	                BNE get_short_name
.3a64c9	82 7a 00	brl $3a6546	                BRL next_entry              ; Yes: go to the next entry
.3a64cc	a0 00 00	ldy #$0000	get_short_name  LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.3a64cf	b7 18		lda [$0338],y	pr_name_loop    LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a64d1	20 18 00	jsr $3a0018	            JSR PRINTC
.3a64d4	c8		iny		                INY                         ; Move to the next character
.3a64d5	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.3a64d8	d0 f5		bne $3a64cf	                BNE pr_name_loop            ; No: print this new character
.3a64da	a9 20		lda #$20	                LDA #' '                    ; Print the separator
.3a64dc	20 18 00	jsr $3a0018	            JSR PRINTC
.3a64df	a0 08 00	ldy #$0008	                LDY #DIRENTRY.SHORTNAME+8   ; Move to the first of the extension characters
.3a64e2	b7 18		lda [$0338],y	pr_ext_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a64e4	20 18 00	jsr $3a0018	                JSR PRINTC                  ; Otherwise: print it.
.3a64e7	c8		iny		                INY                         ; Move to the next character
.3a64e8	c0 0b 00	cpy #$000b	                CPY #DIRENTRY.SHORTNAME+11  ; Are we at the end of the extension portion?
.3a64eb	d0 f5		bne $3a64e2	                BNE pr_ext_loop             ; No: print this new character
.3a64ed	a9 09		lda #$09	pr_tab1         LDA #CHAR_TAB               ; Print a TAB
.3a64ef	20 18 00	jsr $3a0018	            JSR PRINTC
.3a64f2	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.3a64f5	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.3a64f7	89 10		bit #$10	                BIT #DOS_ATTR_DIR           ; Is it a directory?
.3a64f9	d0 1e		bne $3a6519	                BNE pr_attr                 ; Yes: skip printing a file size
.3a64fb	c2 20		rep #$20	            REP #$20
.3a64fd	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.3a6500	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the file size
.3a6502	8f 23 08 00	sta $000823	                STA @l ARGUMENT1
.3a6506	c8		iny		                INY
.3a6507	c8		iny		                INY
.3a6508	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3a650a	8f 25 08 00	sta $000825	                STA @l ARGUMENT1+2
.3a650e	e2 20		sep #$20	            SEP #$20
.3a6510	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a6512	8f 27 08 00	sta $000827	                STA @l ARGTYPE1
.3a6516	20 db 63	jsr $3a63db	            JSR PR_FILESIZE
.3a6519	a9 09		lda #$09	pr_attr         LDA #CHAR_TAB               ; Print a TAB
.3a651b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a651e	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE
.3a6521	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the attribute
.3a6523	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME        ; Is it a volume?
.3a6525	d0 1c		bne $3a6543	                BNE end_entry               ; Yes: we're done printing this entry
.3a6527	89 01		bit #$01	chk_read        BIT #DOS_ATTR_RO            ; Is it a read-only file?
.3a6529	f0 05		beq $3a6530	                BEQ chk_system
.3a652b	a9 52		lda #$52	                LDA #'R'                    ; Yes: print an R
.3a652d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6530	89 04		bit #$04	chk_system      BIT #DOS_ATTR_SYSTEM        ; Is it System file?
.3a6532	f0 05		beq $3a6539	                BEQ chk_directory
.3a6534	a9 53		lda #$53	                LDA #'S'                    ; Yes: print an S
.3a6536	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6539	89 10		bit #$10	chk_directory   BIT #DOS_ATTR_DIR           ; Is it a directory?
.3a653b	f0 05		beq $3a6542	                BEQ pr_tab2
.3a653d	a9 44		lda #$44	                LDA #'D'                    ; Yes: print a D
.3a653f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6542	ea		nop		pr_tab2         NOP
.3a6543					end_entry
.3a6543	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a6546					next_entry
.3a6546	20 a0 02	jsr $3a02a0	            JSR PAGINATE
.3a6549	22 0c 11 00	jsl $00110c	                JSL FK_DIRNEXT
.3a654d	90 03		bcc $3a6552	                BCC done
.3a654f	82 41 ff	brl $3a6493	                BRL pr_entry
.3a6552					done
.3a6552	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6555	08		php		            PHP
.3a6556	c2 20		rep #$20	            REP #$20
.3a6558	48		pha		            PHA
.3a6559	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a655c	5b		tcd		            TCD
.3a655d	68		pla		            PLA
.3a655e	28		plp		            PLP
.3a655f	20 83 1f	jsr $3a1f83	            JSR SKIPSTMT
.3a6562	28		plp		                PLP
.3a6563	2b		pld		                PLD
.3a6564	60		rts		            RTS
.3a6565					pr_volume
.3a6565	08		php		            PHP
.3a6566	c2 20		rep #$20	            REP #$20
.3a6568	48		pha		            PHA
.3a6569	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a656c	5b		tcd		            TCD
.3a656d	68		pla		            PLA
.3a656e	28		plp		            PLP
.3a656f	e2 20		sep #$20	            SEP #$20
.3a6571	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME      ; Is it a long file name entry?
.3a6573	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.3a6575	f0 cf		beq $3a6546	                BEQ next_entry              ; Yes: skip it
.3a6577	a9 5b		lda #$5b	pr_lbracket     LDA #'['
.3a6579	20 18 00	jsr $3a0018	            JSR PRINTC
.3a657c	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME     ; Starting with the first character of the file...
.3a657f	b7 18		lda [$0338],y	pr_vol_loop     LDA [DOS_DIR_PTR],Y         ; Get a character of the name
.3a6581	c9 20		cmp #$20	                CMP #CHAR_SP                ; Is it a blank?
.3a6583	f0 09		beq $3a658e	                BEQ pr_rbracket             ; Yes: end the name and print the dot
.3a6585	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6588	c8		iny		                INY                         ; Move to the next character
.3a6589	c0 08 00	cpy #$0008	                CPY #DIRENTRY.SHORTNAME+8   ; Are we at the end of the name portion?
.3a658c	d0 f1		bne $3a657f	                BNE pr_vol_loop             ; No: print this new character
.3a658e	a9 5d		lda #$5d	pr_rbracket     LDA #']'                    ; Print a close bracket
.3a6590	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6593	80 ae		bra $3a6543	                BRA end_entry               ; And try to get the next entry
.3a6595					SETFILEDESC
.3a6595	0b		phd		                PHD
.3a6596	08		php		                PHP
.3a6597	08		php		            PHP
.3a6598	c2 20		rep #$20	            REP #$20
.3a659a	48		pha		            PHA
.3a659b	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.3a659e	5b		tcd		            TCD
.3a659f	68		pla		            PLA
.3a65a0	28		plp		            PLP
.3a65a1	c2 30		rep #$30	            REP #$30
.3a65a3	a9 73 f2	lda #$f273	                LDA #<>FD_IN            ; Point to the file descriptor
.3a65a6	85 20		sta $0340	                STA DOS_FD_PTR
.3a65a8	a9 3a 00	lda #$003a	                LDA #`FD_IN
.3a65ab	85 22		sta $0342	                STA DOS_FD_PTR+2
.3a65ad	a0 00 00	ldy #$0000	                LDY #0                  ; Fille the file descriptor with 0
.3a65b0	e2 20		sep #$20	            SEP #$20
.3a65b2	a9 00		lda #$00	                LDA #0
.3a65b4	97 20		sta [$0340],y	zero_loop       STA [DOS_FD_PTR],Y
.3a65b6	c8		iny		                INY
.3a65b7	c0 1e 00	cpy #$001e	                CPY #SIZE(FILEDESC)
.3a65ba	d0 f8		bne $3a65b4	                BNE zero_loop
.3a65bc	c2 20		rep #$20	            REP #$20
.3a65be	a9 73 f0	lda #$f073	                LDA #<>CLUSTER_BUFF     ; Point to the cluster buffer
.3a65c1	8f 81 f2 3a	sta $3af281	                STA @l FD_IN.BUFFER
.3a65c5	a9 3a 00	lda #$003a	                LDA #`CLUSTER_BUFF
.3a65c8	8f 83 f2 3a	sta $3af283	                STA @l FD_IN.BUFFER+2
.3a65cc	af 23 08 00	lda $000823	                LDA @l ARGUMENT1        ; Point the file desriptor to the path
.3a65d0	8f 75 f2 3a	sta $3af275	                STA @l FD_IN.PATH
.3a65d4	af 25 08 00	lda $000825	                LDA @l ARGUMENT1+2
.3a65d8	8f 77 f2 3a	sta $3af277	                STA @l FD_IN.PATH+2
.3a65dc	28		plp		                PLP
.3a65dd	2b		pld		                PLD
.3a65de	60		rts		            RTS
.3a65df					S_BLOAD
.3a65df	08		php		                PHP
.3a65e0	c2 30		rep #$30	            REP #$30
.3a65e2	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a65e5	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a65e8	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a65eb	20 95 65	jsr $3a6595	            JSR SETFILEDESC
.3a65ee	e2 20		sep #$20	            SEP #$20
.3a65f0	a9 2c		lda #$2c	                LDA #','
.3a65f2	85 37		sta $0837	                STA TARGETTOK
.3a65f4	20 80 20	jsr $3a2080	            JSR OPT_TOK
.3a65f7	b0 0f		bcs $3a6608	                BCS get_dest
.3a65f9	c2 20		rep #$20	            REP #$20
.3a65fb	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set destination address to something "safe"
.3a65fe	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a6602	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a6606	80 17		bra $3a661f	                BRA do_load
.3a6608					get_dest
.3a6608	20 3e 1f	jsr $3a1f3e	            JSR INCBIP
.3a660b	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a660e	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a6611	c2 20		rep #$20	            REP #$20
.3a6613	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the destination address
.3a6615	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a6619	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a661b	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a661f	22 18 11 00	jsl $001118	do_load         JSL FK_LOAD                 ; Attempt to load the file
.3a6623	b0 1f		bcs $3a6644	                BCS done
.3a6625	08		php		            PHP
.3a6626	c2 20		rep #$20	            REP #$20
.3a6628	48		pha		            PHA
.3a6629	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a662c	5b		tcd		            TCD
.3a662d	68		pla		            PLA
.3a662e	28		plp		            PLP
.3a662f	e2 20		sep #$20	            SEP #$20
.3a6631	a9 11		lda #$11	            LDA #ERR_LOAD
.3a6633	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6637	c2 20		rep #$20	            REP #$20
.3a6639	29 ff 00	and #$00ff	            AND #$00FF
.3a663c	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a663f	e2 20		sep #$20	            SEP #$20
.3a6641	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6644	28		plp		done            PLP
.3a6645	60		rts		            RTS
.3a6646					SET_DOSSTAT
.3a6646	8b		phb		                PHB
.3a6647	0b		phd		                PHD
.3a6648	08		php		                PHP
.3a6649	08		php		            PHP
.3a664a	c2 20		rep #$20	            REP #$20
.3a664c	48		pha		            PHA
.3a664d	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6650	5b		tcd		            TCD
.3a6651	68		pla		            PLA
.3a6652	28		plp		            PLP
.3a6653	08		php		            PHP
.3a6654	e2 20		sep #$20	            SEP #$20
.3a6656	48		pha		            PHA
.3a6657	a9 00		lda #$00	            LDA #BASIC_BANK
.3a6659	48		pha		            PHA
.3a665a	ab		plb		            PLB
.3a665b	68		pla		            PLA
.3a665c	28		plp		            PLP
.3a665d	e2 20		sep #$20	            SEP #$20
.3a665f	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS           ; Get the DOS status code
.3a6663	85 23		sta $0823	                STA ARGUMENT1
.3a6665	a9 00		lda #$00	                LDA #0
.3a6667	85 24		sta $0824	                STA ARGUMENT1+1
.3a6669	85 25		sta $0825	                STA ARGUMENT1+2
.3a666b	85 26		sta $0826	                STA ARGUMENT1+3
.3a666d	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a666f	85 27		sta $0827	                STA ARGTYPE1
.3a6671	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (DOSSTAT)
.3a6673	a9 3a		lda #$3a	                LDA #`dosstat_name
.3a6675	85 e9		sta $08e9	                STA TOFIND+2
.3a6677	c2 20		rep #$20	            REP #$20
.3a6679	a9 a9 66	lda #$66a9	                LDA #<>dosstat_name
.3a667c	85 e7		sta $08e7	                STA TOFIND
.3a667e	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a6681	e2 20		sep #$20	            SEP #$20
.3a6683	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS          ; Get the BIOS status code
.3a6687	85 23		sta $0823	                STA ARGUMENT1
.3a6689	a9 00		lda #$00	                LDA #0
.3a668b	85 24		sta $0824	                STA ARGUMENT1+1
.3a668d	85 25		sta $0825	                STA ARGUMENT1+2
.3a668f	85 26		sta $0826	                STA ARGUMENT1+3
.3a6691	a9 00		lda #$00	                LDA #TYPE_INTEGER
.3a6693	85 27		sta $0827	                STA ARGTYPE1
.3a6695	85 ea		sta $08ea	                STA TOFINDTYPE              ; Indicate what variable to set (BIOSSTAT)
.3a6697	a9 3a		lda #$3a	                LDA #`biosstat_name
.3a6699	85 e9		sta $08e9	                STA TOFIND+2
.3a669b	c2 20		rep #$20	            REP #$20
.3a669d	a9 b1 66	lda #$66b1	                LDA #<>biosstat_name
.3a66a0	85 e7		sta $08e7	                STA TOFIND
.3a66a2	20 b4 50	jsr $3a50b4	            JSR VAR_SET
.3a66a5	28		plp		                PLP
.3a66a6	2b		pld		                PLD
.3a66a7	ab		plb		                PLB
.3a66a8	60		rts		            RTS
>3a66a9	44 4f 53 53 54 41 54 00		dosstat_name    .null "DOSSTAT"
>3a66b1	42 49 4f 53 53 54 41 54		biosstat_name   .null "BIOSSTAT"
>3a66b9	00
.3a66ba					CMD_BRUN
.3a66ba	08		php		                PHP
.3a66bb	c2 30		rep #$30	            REP #$30
.3a66bd	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a66c0	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a66c3	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a66c6	a5 23		lda $0823	                LDA ARGUMENT1
.3a66c8	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.3a66cc	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a66ce	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.3a66d2	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a66d5	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a66d9	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a66dd	22 24 11 00	jsl $001124	                JSL FK_RUN                  ; Attempt to run the file
.3a66e1	b0 25		bcs $3a6708	                BCS done                    ; If we got it: try to execute it
.3a66e3	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a66e6	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a66e9	08		php		            PHP
.3a66ea	c2 20		rep #$20	            REP #$20
.3a66ec	48		pha		            PHA
.3a66ed	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a66f0	5b		tcd		            TCD
.3a66f1	68		pla		            PLA
.3a66f2	28		plp		            PLP
.3a66f3	e2 20		sep #$20	            SEP #$20
.3a66f5	a9 11		lda #$11	            LDA #ERR_LOAD
.3a66f7	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a66fb	c2 20		rep #$20	            REP #$20
.3a66fd	29 ff 00	and #$00ff	            AND #$00FF
.3a6700	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6703	e2 20		sep #$20	            SEP #$20
.3a6705	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6708					done
.3a6708	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a670b	28		plp		                PLP
.3a670c	60		rts		            RTS
.3a670d					CMD_LOAD
.3a670d	08		php		                PHP
.3a670e	c2 30		rep #$30	            REP #$30
.3a6710	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a6713	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a6716	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a6719	20 95 65	jsr $3a6595	            JSR SETFILEDESC
.3a671c	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a671f	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a6723	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a6726	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2        ; Set the destination address
.3a672a	20 85 4d	jsr $3a4d85	            JSR CMD_NEW
.3a672d	22 18 11 00	jsl $001118	                JSL FK_LOAD                 ; Attempt to load the file
.3a6731	b0 22		bcs $3a6755	                BCS start_tokenize          ; If we got it: start tokenizing
.3a6733	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6736	08		php		            PHP
.3a6737	c2 20		rep #$20	            REP #$20
.3a6739	48		pha		            PHA
.3a673a	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a673d	5b		tcd		            TCD
.3a673e	68		pla		            PLA
.3a673f	28		plp		            PLP
.3a6740	e2 20		sep #$20	            SEP #$20
.3a6742	a9 11		lda #$11	            LDA #ERR_LOAD
.3a6744	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6748	c2 20		rep #$20	            REP #$20
.3a674a	29 ff 00	and #$00ff	            AND #$00FF
.3a674d	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6750	e2 20		sep #$20	            SEP #$20
.3a6752	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6755					start_tokenize
.3a6755	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6758	c2 20		rep #$20	            REP #$20
.3a675a	a2 12 00	ldx #$0012	                LDX #FILEDESC.FILESIZE
.3a675d	18		clc		                CLC                         ; Set MTEMP to point to the byte after the file
.3a675e	bf 73 f2 3a	lda $3af273,x	                LDA FD_IN,X
.3a6762	69 00 00	adc #$0000	                ADC #<>LOADBLOCK
.3a6765	85 92		sta $0892	                STA MTEMP
.3a6767	bf 75 f2 3a	lda $3af275,x	                LDA FD_IN+2,X
.3a676b	69 01 00	adc #$0001	                ADC #`LOADBLOCK
.3a676e	85 94		sta $0894	                STA MTEMP+2
.3a6770	e2 20		sep #$20	            SEP #$20
.3a6772	a9 00		lda #$00	                LDA #0
.3a6774	87 92		sta [$0892]	                STA [MTEMP]                 ; Write a NULL right after the file
.3a6776	c2 20		rep #$20	            REP #$20
.3a6778	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK            ; Set MCURSOR to the begining of the loaded data
.3a677b	85 7a		sta $087a	                STA MCURSOR
.3a677d	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a6780	85 7c		sta $087c	                STA MCURSOR+2
.3a6782	a2 00 00	ldx #$0000	copy_line       LDX #0
.3a6785					copy_char
.3a6785	e2 20		sep #$20	            SEP #$20
.3a6787	a7 7a		lda [$087a]	                LDA [MCURSOR]
.3a6789	f0 2a		beq $3a67b5	                BEQ clean_up                ; If the character is 0, we're done
.3a678b	c9 0d		cmp #$0d	                CMP #CHAR_CR                ; If it is new line...
.3a678d	f0 12		beq $3a67a1	                BEQ do_process              ; ... we want to process the line
.3a678f	c9 0a		cmp #$0a	                CMP #CHAR_LF                ; If it is a line feed...
.3a6791	f0 04		beq $3a6797	                BEQ next_char               ; ... we want to skip it
.3a6793	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X              ; Otherwise, copy the character to the input buffer
.3a6796	e8		inx		                INX
.3a6797					next_char
.3a6797	c2 20		rep #$20	            REP #$20
.3a6799	e6 7a		inc $087a	                INC MCURSOR                 ; Advance the input cursor
.3a679b	d0 e8		bne $3a6785	                BNE copy_char
.3a679d	e6 7c		inc $087c	                INC MCURSOR+2
.3a679f	80 e4		bra $3a6785	                BRA copy_char
.3a67a1					do_process
.3a67a1	e2 20		sep #$20	            SEP #$20
.3a67a3	a9 00		lda #$00	                LDA #0                      ; Put a 0 at the end of the input buffer
.3a67a5	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a67a8	20 ab 25	jsr $3a25ab	            JSR PROCESS
.3a67ab	c2 20		rep #$20	            REP #$20
.3a67ad	e6 7a		inc $087a	                INC MCURSOR                 ; Try again with the next line
.3a67af	d0 d1		bne $3a6782	                BNE copy_line
.3a67b1	e6 7c		inc $087c	                INC MCURSOR+2
.3a67b3	80 cd		bra $3a6782	                BRA copy_line
.3a67b5	e0 00 00	cpx #$0000	clean_up        CPX #0                      ; Is there data in the INPUTBUF?
.3a67b8	f0 0a		beq $3a67c4	                BEQ done                    ; No: just return
.3a67ba	e2 20		sep #$20	            SEP #$20
.3a67bc	a9 00		lda #$00	                LDA #0                      ; Make sure there is a trailing NULL
.3a67be	9d 00 4f	sta $4f00,x	                STA INPUTBUF,X
.3a67c1	20 ab 25	jsr $3a25ab	            JSR PROCESS
.3a67c4	28		plp		done            PLP
.3a67c5	60		rts		            RTS
.3a67c6					S_BSAVE
.3a67c6	08		php		                PHP
.3a67c7	c2 30		rep #$30	            REP #$30
.3a67c9	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a67cc	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a67cf	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a67d2	20 95 65	jsr $3a6595	            JSR SETFILEDESC
.3a67d5	e2 20		sep #$20	            SEP #$20
.3a67d7	a9 2c		lda #$2c	                LDA #','
.3a67d9	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a67dc	c2 20		rep #$20	            REP #$20
.3a67de	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a67e1	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a67e4	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_SRC_PTR
.3a67e6	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a67ea	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a67ec	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a67f0	e2 20		sep #$20	            SEP #$20
.3a67f2	a9 2c		lda #$2c	                LDA #','
.3a67f4	c2 20		rep #$20	            REP #$20
.3a67f6	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a67f9	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a67fc	20 03 05	jsr $3a0503	            JSR ASS_ARG1_INT
.3a67ff	a5 23		lda $0823	                LDA ARGUMENT1               ; Put that address in DOS_END_PTR
.3a6801	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a6805	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6807	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a680b	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                 ; Attempt to save the memory to file.
.3a680f	b0 22		bcs $3a6833	                BCS done
.3a6811	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6814	08		php		            PHP
.3a6815	c2 20		rep #$20	            REP #$20
.3a6817	48		pha		            PHA
.3a6818	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a681b	5b		tcd		            TCD
.3a681c	68		pla		            PLA
.3a681d	28		plp		            PLP
.3a681e	e2 20		sep #$20	            SEP #$20
.3a6820	a9 12		lda #$12	            LDA #ERR_SAVE
.3a6822	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6826	c2 20		rep #$20	            REP #$20
.3a6828	29 ff 00	and #$00ff	            AND #$00FF
.3a682b	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a682e	e2 20		sep #$20	            SEP #$20
.3a6830	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6833					done
.3a6833	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6836	28		plp		                PLP
.3a6837	60		rts		            RTS
.3a6838					COPY2PATHBUF
.3a6838	da		phx		                PHX
.3a6839	5a		phy		                PHY
.3a683a	08		php		                PHP
.3a683b	a2 00 00	ldx #$0000	                LDX #0
.3a683e	a0 00 00	ldy #$0000	                LDY #0
.3a6841	e2 20		sep #$20	            SEP #$20
.3a6843	b7 23		lda [$0823],y	loop            LDA [ARGUMENT1],Y           ; Copy the path to the DOS_PATH_BUFF
.3a6845	9d 00 04	sta $0400,x	                STA DOS_PATH_BUFF,X
.3a6848	f0 04		beq $3a684e	                BEQ done
.3a684a	e8		inx		                INX
.3a684b	c8		iny		                INY
.3a684c	80 f5		bra $3a6843	                BRA loop
.3a684e	28		plp		done            PLP
.3a684f	7a		ply		                PLY
.3a6850	fa		plx		                PLX
.3a6851	60		rts		            RTS
.3a6852					CMD_SAVE
.3a6852	08		php		                PHP
.3a6853	c2 30		rep #$30	            REP #$30
.3a6855	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a6858	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a685b	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a685e	20 95 65	jsr $3a6595	            JSR SETFILEDESC
.3a6861	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a6864	85 a6		sta $08a6	                STA OBUFFER
.3a6866	e2 20		sep #$20	            SEP #$20
.3a6868	a9 01		lda #$01	                LDA #`LOADBLOCK
.3a686a	85 a8		sta $08a8	                STA OBUFFER+2
.3a686c	a9 20		lda #$20	                LDA #DEV_BUFFER             ; Set up output for the buffer
.3a686e	85 b4		sta $08b4	                STA BCONSOLE
.3a6870	c2 20		rep #$20	            REP #$20
.3a6872	a9 00 00	lda #$0000	                LDA #0
.3a6875	85 ab		sta $08ab	                STA OBUFFIDX
.3a6877	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3a687a	85 a9		sta $08a9	                STA OBUFFSIZE
.3a687c	c2 20		rep #$20	            REP #$20
.3a687e	a9 00 00	lda #$0000	                LDA #0                      ; Set start line number to 0
.3a6881	85 55		sta $0855	                STA MARG1
.3a6883	85 57		sta $0857	                STA MARG1+2
.3a6885	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Set end line number to MAXINT
.3a6888	85 59		sta $0859	                STA MARG2
.3a688a	a9 ff 7f	lda #$7fff	                LDA #$7FFF
.3a688d	85 5b		sta $085b	                STA MARG2+2
.3a688f	20 f0 16	jsr $3a16f0	            JSR LISTPROG
.3a6892	e2 20		sep #$20	            SEP #$20
.3a6894	a9 80		lda #$80	                LDA #DEV_SCREEN             ; Restore output to the screen
.3a6896	85 b4		sta $08b4	                STA BCONSOLE
.3a6898	c2 20		rep #$20	            REP #$20
.3a689a	c6 ab		dec $08ab	                DEC OBUFFIDX                ; OBUFFIDX points to the next free byte... so pull it in one
.3a689c	18		clc		                CLC                         ; Set the range of memory to save
.3a689d	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.3a68a0	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a68a4	65 ab		adc $08ab	                ADC OBUFFIDX
.3a68a6	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a68aa	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.3a68ad	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a68b1	69 00 00	adc #$0000	                ADC #0
.3a68b4	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a68b8	22 1c 11 00	jsl $00111c	do_save         JSL FK_SAVE                 ; Attempt to save the file
.3a68bc	b0 22		bcs $3a68e0	                BCS done
.3a68be	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a68c1	08		php		            PHP
.3a68c2	c2 20		rep #$20	            REP #$20
.3a68c4	48		pha		            PHA
.3a68c5	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a68c8	5b		tcd		            TCD
.3a68c9	68		pla		            PLA
.3a68ca	28		plp		            PLP
.3a68cb	e2 20		sep #$20	            SEP #$20
.3a68cd	a9 12		lda #$12	            LDA #ERR_SAVE
.3a68cf	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a68d3	c2 20		rep #$20	            REP #$20
.3a68d5	29 ff 00	and #$00ff	            AND #$00FF
.3a68d8	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a68db	e2 20		sep #$20	            SEP #$20
.3a68dd	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a68e0					done
.3a68e0	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a68e3	28		plp		                PLP
.3a68e4	60		rts		            RTS
.3a68e5					S_DEL
.3a68e5	08		php		                PHP
.3a68e6	c2 30		rep #$30	            REP #$30
.3a68e8	20 5f 1f	jsr $3a1f5f	            JSR SKIPWS
.3a68eb	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a68ee	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a68f1	20 38 68	jsr $3a6838	            JSR COPY2PATHBUF
.3a68f4	22 04 11 00	jsl $001104	path_loaded     JSL FK_DELETE               ; Try to delete the file
.3a68f8	b0 22		bcs $3a691c	                BCS done
.3a68fa	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a68fd	08		php		            PHP
.3a68fe	c2 20		rep #$20	            REP #$20
.3a6900	48		pha		            PHA
.3a6901	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6904	5b		tcd		            TCD
.3a6905	68		pla		            PLA
.3a6906	28		plp		            PLP
.3a6907	e2 20		sep #$20	            SEP #$20
.3a6909	a9 13		lda #$13	            LDA #ERR_DELETE
.3a690b	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a690f	c2 20		rep #$20	            REP #$20
.3a6911	29 ff 00	and #$00ff	            AND #$00FF
.3a6914	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6917	e2 20		sep #$20	            SEP #$20
.3a6919	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a691c					done
.3a691c	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a691f	28		plp		                PLP
.3a6920	60		rts		            RTS
.3a6921					VALIDFILECHAR
.3a6921	da		phx		                PHX
.3a6922	08		php		                PHP
.3a6923	e2 20		sep #$20	            SEP #$20
.3a6925	c9 61		cmp #$61	                CMP #'a'                    ; Is it lower case?
.3a6927	90 08		bcc $3a6931	                BLT chk_space
.3a6929	c9 7b		cmp #$7b	                CMP #'z'+1
.3a692b	b0 04		bcs $3a6931	                BGE chk_space
.3a692d	29 df		and #$df	                AND #%11011111              ; Yes: convert to upper case
.3a692f	80 13		bra $3a6944	                BRA ret_valid
.3a6931	c9 20		cmp #$20	chk_space       CMP #CHAR_SP            ; Is it a control code?
.3a6933	90 13		bcc $3a6948	                BLT is_invalid          ; Yes: it's invalid
.3a6935	a2 00 00	ldx #$0000	                LDX #0                  ; See if it's in the list of invalids
.3a6938	df 4c 69 3a	cmp $3a694c,x	loop            CMP invalid_chars,X
.3a693c	f0 0a		beq $3a6948	                BEQ is_invalid
.3a693e	e8		inx		                INX
.3a693f	e0 0f 00	cpx #$000f	                CPX #15                 ; # of invalid characters
.3a6942	d0 f4		bne $3a6938	                BNE loop
.3a6944	28		plp		ret_valid       PLP
.3a6945	38		sec		                SEC
.3a6946	fa		plx		                PLX
.3a6947	6b		rtl		                RTL
.3a6948	28		plp		is_invalid      PLP
.3a6949	18		clc		                CLC
.3a694a	fa		plx		                PLX
.3a694b	6b		rtl		                RTL
>3a694c	2a 2b 2c 2f 3a 3b 3c 3d		invalid_chars   .text "*+,/:;<=>?\[]|",CHAR_DQUOTE
>3a6954	3e 3f 5c 5b 5d 7c 22
.3a695b					S_RENAME
.3a695b	08		php		                PHP
.3a695c	08		php		            PHP
.3a695d	c2 20		rep #$20	            REP #$20
.3a695f	48		pha		            PHA
.3a6960	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6963	5b		tcd		            TCD
.3a6964	68		pla		            PLA
.3a6965	28		plp		            PLP
.3a6966	c2 30		rep #$30	            REP #$30
.3a6968	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a696b	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a696e	20 38 68	jsr $3a6838	            JSR COPY2PATHBUF
.3a6971	22 10 11 00	jsl $001110	                JSL FK_DIRREAD              ; Try to read the file
.3a6975	b0 22		bcs $3a6999	                BCS get_new_name            ; If ok: get the new name
.3a6977	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a697a	08		php		            PHP
.3a697b	c2 20		rep #$20	            REP #$20
.3a697d	48		pha		            PHA
.3a697e	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6981	5b		tcd		            TCD
.3a6982	68		pla		            PLA
.3a6983	28		plp		            PLP
.3a6984	e2 20		sep #$20	            SEP #$20
.3a6986	a9 14		lda #$14	            LDA #ERR_FILENOTFOUND
.3a6988	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a698c	c2 20		rep #$20	            REP #$20
.3a698e	29 ff 00	and #$00ff	            AND #$00FF
.3a6991	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6994	e2 20		sep #$20	            SEP #$20
.3a6996	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6999					get_new_name
.3a6999	e2 20		sep #$20	            SEP #$20
.3a699b	a9 2c		lda #$2c	                LDA #','
.3a699d	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a69a0	c2 20		rep #$20	            REP #$20
.3a69a2	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a69a5	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a69a8	ad 38 03	lda $0338	                LDA DOS_DIR_PTR
.3a69ab	85 08		sta $0808	                STA INDEX
.3a69ad	ad 3a 03	lda $033a	                LDA DOS_DIR_PTR+2
.3a69b0	85 0a		sta $080a	                STA INDEX+2
.3a69b2	e2 20		sep #$20	            SEP #$20
.3a69b4	a2 00 00	ldx #$0000	                LDX #0
.3a69b7	a9 20		lda #$20	                LDA #CHAR_SP                ; We'll use MLINEBUFF as temporary name storage
.3a69b9	95 7e		sta $087e,x	blank_loop      STA MLINEBUF,X              ; Fill it with blanks
.3a69bb	e8		inx		                INX
.3a69bc	e0 0b 00	cpx #$000b	                CPX #11
.3a69bf	d0 f8		bne $3a69b9	                BNE blank_loop
.3a69c1	a2 00 00	ldx #$0000	                LDX #0
.3a69c4	a0 00 00	ldy #$0000	                LDY #0
.3a69c7	b7 23		lda [$0823],y	name_loop       LDA [ARGUMENT1],Y           ; Get the character of the new name
.3a69c9	f0 76		beq $3a6a41	                BEQ copy_short_name         ; If end-of-string: copy what we have
.3a69cb	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.3a69cd	f0 39		beq $3a6a08	                BEQ skip_dot                ; Yes: move on to the extension characters
.3a69cf	22 21 69 3a	jsl $3a6921	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.3a69d3	b0 1f		bcs $3a69f4	                BCS save_nm_char
.3a69d5	08		php		            PHP
.3a69d6	c2 20		rep #$20	            REP #$20
.3a69d8	48		pha		            PHA
.3a69d9	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a69dc	5b		tcd		            TCD
.3a69dd	68		pla		            PLA
.3a69de	28		plp		            PLP
.3a69df	e2 20		sep #$20	            SEP #$20
.3a69e1	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a69e3	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a69e7	c2 20		rep #$20	            REP #$20
.3a69e9	29 ff 00	and #$00ff	            AND #$00FF
.3a69ec	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a69ef	e2 20		sep #$20	            SEP #$20
.3a69f1	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a69f4	95 7e		sta $087e,x	save_nm_char    STA MLINEBUF,X              ; Otherwise: copy it
.3a69f6	c8		iny		                INY
.3a69f7	e8		inx		                INX
.3a69f8	c0 08 00	cpy #$0008	                CPY #8
.3a69fb	d0 ca		bne $3a69c7	                BNE name_loop
.3a69fd	b7 23		lda [$0823],y	eat_name        LDA [ARGUMENT1],Y           ; Get the character
.3a69ff	f0 40		beq $3a6a41	                BEQ copy_short_name         ; If null, we're done with the short name
.3a6a01	c9 2e		cmp #$2e	                CMP #'.'                    ; Is it a dot?
.3a6a03	f0 03		beq $3a6a08	                BEQ skip_dot                ; Yes: skip over it
.3a6a05	c8		iny		                INY                         ; No: try again with the the next character
.3a6a06	80 f5		bra $3a69fd	                BRA eat_name
.3a6a08	c8		iny		skip_dot        INY                         ; Character at Y is '.', so skip over it
.3a6a09	a2 08 00	ldx #$0008	do_ext          LDX #8
.3a6a0c	b7 23		lda [$0823],y	ext_loop        LDA [ARGUMENT1],Y           ; Get the character of the new extension
.3a6a0e	f0 31		beq $3a6a41	                BEQ copy_short_name         ; If end-of-string: copy what we have
.3a6a10	22 21 69 3a	jsl $3a6921	                JSL VALIDFILECHAR           ; Make sure the character is valid and uppercase
.3a6a14	b0 22		bcs $3a6a38	                BCS save_ext_char
.3a6a16	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6a19	08		php		            PHP
.3a6a1a	c2 20		rep #$20	            REP #$20
.3a6a1c	48		pha		            PHA
.3a6a1d	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6a20	5b		tcd		            TCD
.3a6a21	68		pla		            PLA
.3a6a22	28		plp		            PLP
.3a6a23	e2 20		sep #$20	            SEP #$20
.3a6a25	a9 0a		lda #$0a	            LDA #ERR_ARGUMENT
.3a6a27	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6a2b	c2 20		rep #$20	            REP #$20
.3a6a2d	29 ff 00	and #$00ff	            AND #$00FF
.3a6a30	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6a33	e2 20		sep #$20	            SEP #$20
.3a6a35	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6a38	95 7e		sta $087e,x	save_ext_char   STA MLINEBUF,X              ; Otherwise: copy it
.3a6a3a	c8		iny		                INY
.3a6a3b	e8		inx		                INX
.3a6a3c	c0 0c 00	cpy #$000c	                CPY #12
.3a6a3f	d0 cb		bne $3a6a0c	                BNE ext_loop
.3a6a41	a2 00 00	ldx #$0000	copy_short_name LDX #0                      ; Copy the short name we built to the directory entry
.3a6a44	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3a6a47	b5 7e		lda $087e,x	copy_loop       LDA MLINEBUF,X
.3a6a49	97 08		sta [$0808],y	                STA [INDEX],Y
.3a6a4b	e8		inx		                INX
.3a6a4c	c8		iny		                INY
.3a6a4d	c0 0b 00	cpy #$000b	                CPY #11
.3a6a50	d0 f5		bne $3a6a47	                BNE copy_loop
.3a6a52	22 14 11 00	jsl $001114	                JSL FK_DIRWRITE             ; Write the directory entry back
.3a6a56	b0 22		bcs $3a6a7a	                BCS done
.3a6a58	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6a5b	08		php		            PHP
.3a6a5c	c2 20		rep #$20	            REP #$20
.3a6a5e	48		pha		            PHA
.3a6a5f	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6a62	5b		tcd		            TCD
.3a6a63	68		pla		            PLA
.3a6a64	28		plp		            PLP
.3a6a65	e2 20		sep #$20	            SEP #$20
.3a6a67	a9 15		lda #$15	            LDA #ERR_DIRNOTWRITE
.3a6a69	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6a6d	c2 20		rep #$20	            REP #$20
.3a6a6f	29 ff 00	and #$00ff	            AND #$00FF
.3a6a72	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6a75	e2 20		sep #$20	            SEP #$20
.3a6a77	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6a7a					done
.3a6a7a	20 46 66	jsr $3a6646	            JSR SET_DOSSTAT
.3a6a7d	28		plp		                PLP
.3a6a7e	60		rts		            RTS
.3a6a7f					S_COPY
.3a6a7f	08		php		                PHP
.3a6a80	08		php		            PHP
.3a6a81	c2 20		rep #$20	            REP #$20
.3a6a83	48		pha		            PHA
.3a6a84	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a6a87	5b		tcd		            TCD
.3a6a88	68		pla		            PLA
.3a6a89	28		plp		            PLP
.3a6a8a	c2 30		rep #$30	            REP #$30
.3a6a8c	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a6a8f	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a6a92	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.3a6a94	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.3a6a98	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6a9a	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.3a6a9e	e2 20		sep #$20	            SEP #$20
.3a6aa0	a9 2c		lda #$2c	                LDA #','
.3a6aa2	20 4b 20	jsr $3a204b	            JSR EXPECT_TOK
.3a6aa5	c2 20		rep #$20	            REP #$20
.3a6aa7	20 2d 1b	jsr $3a1b2d	            JSR EVALEXPR
.3a6aaa	20 95 05	jsr $3a0595	            JSR ASS_ARG1_STR
.3a6aad	a5 23		lda $0823	                LDA ARGUMENT1               ; Set the source path
.3a6aaf	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.3a6ab3	a5 25		lda $0825	                LDA ARGUMENT1+2
.3a6ab5	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.3a6ab9	22 30 11 00	jsl $001130	                JSL FK_COPY                 ; Attempt to copy the file
.3a6abd	b0 1f		bcs $3a6ade	                BCS done
.3a6abf	08		php		            PHP
.3a6ac0	c2 20		rep #$20	            REP #$20
.3a6ac2	48		pha		            PHA
.3a6ac3	a9 00 08	lda #$0800	            LDA #<>GLOBAL_VARS
.3a6ac6	5b		tcd		            TCD
.3a6ac7	68		pla		            PLA
.3a6ac8	28		plp		            PLP
.3a6ac9	e2 20		sep #$20	            SEP #$20
.3a6acb	a9 16		lda #$16	            LDA #ERR_NOTCOPIED
.3a6acd	8f d3 08 00	sta $0008d3	            STA @lERROR_NUM
.3a6ad1	c2 20		rep #$20	            REP #$20
.3a6ad3	29 ff 00	and #$00ff	            AND #$00FF
.3a6ad6	20 7f 1c	jsr $3a1c7f	            JSR SET_ERRERL
.3a6ad9	e2 20		sep #$20	            SEP #$20
.3a6adb	dc d4 08	jmp [$08d4]	            JMP [HANDLEERR]
.3a6ade	28		plp		done            PLP
.3a6adf	60		rts		            RTS

;******  Return to file: src\basic816.s


;******  Processing file: src\monitor.s

.3a6ae0	5c a0 84 3a	jmp $3a84a0	MRETURN         JML IMRETURN
.3a6ae4	5c f1 82 3a	jmp $3a82f1	MPARSE          JML IMPARSE
.3a6ae8	5c a1 84 3a	jmp $3a84a1	MPARSE1         JML IMPARSE1
.3a6aec	5c 1d 74 3a	jmp $3a741d	MEXECUTE        JML IMEXECUTE
.3a6af0	5c 7a 74 3a	jmp $3a747a	MASSEMBLE       JML IMASSEMBLE
.3a6af4	5c ad 73 3a	jmp $3a73ad	MRMODIFY        JML IMRMODIFY
.3a6af8	5c 33 73 3a	jmp $3a7333	MCOMPARE        JML IMCOMPARE
.3a6afc	5c b0 78 3a	jmp $3a78b0	MDISASSEMBLE    JML IMDISASSEMBLE
.3a6b00	5c 9e 6f 3a	jmp $3a6f9e	MFILL           JML IMFILL
.3a6b04	5c cb 72 3a	jmp $3a72cb	MGO             JML IMGO
.3a6b08	5c 86 72 3a	jmp $3a7286	MJUMP           JML IMJUMP
.3a6b0c	5c 10 72 3a	jmp $3a7210	MHUNT           JML IMHUNT
.3a6b10	5c af 83 3a	jmp $3a83af	MLOAD           JML IMLOAD
.3a6b14	5c ac 70 3a	jmp $3a70ac	MMEMORY         JML IMMEMORY
.3a6b18	5c ff 6e 3a	jmp $3a6eff	MREGISTERS      JML IMREGISTERS
.3a6b1c	5c 2a 84 3a	jmp $3a842a	MSAVE           JML IMSAVE
.3a6b20	5c da 6f 3a	jmp $3a6fda	MTRANSFER       JML IMTRANSFER
.3a6b24	5c a3 84 3a	jmp $3a84a3	MVERIFY         JML IMVERIFY
.3a6b28	5c 9c 84 3a	jmp $3a849c	MEXIT           JML IMEXIT
.3a6b2c	5c c9 71 3a	jmp $3a71c9	MMODIFY         JML IMMODIFY
.3a6b30	5c a4 84 3a	jmp $3a84a4	MDOS            JML IMDOS
.3a6b34	18		clc		IMONITOR        CLC                 ; clear the carry flag
.3a6b35	fb		xce		                XCE                 ; move carry to emulation flags
.3a6b36	c2 20		rep #$20	            REP #$20
.3a6b38	a9 ff fe	lda #$feff	                LDA #STACK_END      ; Reset the stack
.3a6b3b	1b		tcs		                TAS
.3a6b3c	58		cli		                CLI                 ; Re-enable interrupts
.3a6b3d	5c 41 6b 3a	jmp $3a6b41	                JML IMREADY
.3a6b41					IMREADY
.3a6b41	c2 30		rep #$30	            REP #$30
.3a6b43	22 ff 6e 3a	jsl $3a6eff	                JSL IMREGISTERS
.3a6b47					ready_loop
.3a6b47	20 08 00	jsr $3a0008	            JSR READLINE
.3a6b4a	20 0c 00	jsr $3a000c	            JSR SCRCOPYLINE
.3a6b4d	8b		phb		                PHB
.3a6b4e	e2 20		sep #$20	            SEP #$20
.3a6b50	a9 00		lda #$00	                LDA #`INPUTBUF
.3a6b52	48		pha		                PHA
.3a6b53	ab		plb		                PLB
.3a6b54	a2 00 4f	ldx #$4f00	                LDX #<>INPUTBUF
.3a6b57	20 17 04	jsr $3a0417	            JSR TOUPPER
.3a6b5a	ab		plb		                PLB
.3a6b5b	22 e4 6a 3a	jsl $3a6ae4	                JSL MPARSE          ; Parse the command
.3a6b5f	22 ec 6a 3a	jsl $3a6aec	                JSL MEXECUTE        ; And execute the parsed command
.3a6b63	80 e2		bra $3a6b47	                BRA ready_loop
.3a6b65					IMHELP
.3a6b65	08		php		                PHP
.3a6b66	8b		phb		                PHB
.3a6b67	e2 20		sep #$20	            SEP #$20
.3a6b69	a9 3a		lda #$3a	                LDA #`help_text
.3a6b6b	48		pha		                PHA
.3a6b6c	ab		plb		                PLB
.3a6b6d	c2 10		rep #$10	            REP #$10
.3a6b6f	a2 78 6b	ldx #$6b78	                LDX #<>help_text
.3a6b72	20 16 03	jsr $3a0316	            JSR PRINTS
.3a6b75	ab		plb		                PLB
.3a6b76	28		plp		                PLP
.3a6b77	6b		rtl		                RTL
>3a6b78	41 20 3c 73 74 61 72 74		help_text       .text "A <start> <assembly>",CHAR_CR
>3a6b80	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d
>3a6b8d	20 20 41 73 73 65 6d 62		                .text "  Assemble a program",CHAR_CR,CHAR_CR
>3a6b95	6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>3a6ba3	43 20 3c 73 74 61 72 74		                .text "C <start1> <start2> [len (1 if blank)]",CHAR_CR
>3a6bab	31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e
>3a6bbb	20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d
>3a6bca	20 20 43 6f 6d 70 61 72		                .text "  Compare to sections of memory",CHAR_CR,CHAR_CR
>3a6bd2	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>3a6be2	20 6d 65 6d 6f 72 79 0d 0d
>3a6beb	44 20 3c 73 74 61 72 74		                .text "D <start> [end]",CHAR_CR
>3a6bf3	3e 20 5b 65 6e 64 5d 0d
>3a6bfb	20 20 44 69 73 61 73 73		                .text "  Disassemble a program",CHAR_CR,CHAR_CR
>3a6c03	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a6c13	0d
>3a6c14	46 20 3c 73 74 61 72 74		                .text "F <start> <end> <byte>",CHAR_CR
>3a6c1c	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d
>3a6c2b	20 20 46 69 6c 6c 20 61		                .text "  Fill a block of memory with a byte",CHAR_CR,CHAR_CR
>3a6c33	20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>3a6c43	20 77 69 74 68 20 61 20 62 79 74 65 0d 0d
>3a6c51	47 20 5b 61 64 64 72 65		                .text "G [address]",CHAR_CR
>3a6c59	73 73 5d 0d
>3a6c5d	20 20 53 74 61 72 74 20		                .text "  Start execution at a location",CHAR_CR,CHAR_CR
>3a6c65	65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>3a6c75	6f 63 61 74 69 6f 6e 0d 0d
>3a6c7e	4a 20 5b 61 64 64 72 65		                .text "J [address] - Jump to a location in memory",CHAR_CR
>3a6c86	73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20
>3a6c96	6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>3a6ca6	72 79 0d
>3a6ca9	20 20 4a 75 6d 70 20 74		                .text "  Jump to a location in memory",CHAR_CR,CHAR_CR
>3a6cb1	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a6cc1	6d 65 6d 6f 72 79 0d 0d
>3a6cc9	48 20 3c 73 74 61 72 74		                .text "H <start> <end> <byte> [byte]..",CHAR_CR
>3a6cd1	3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b
>3a6ce1	62 79 74 65 5d 2e 2e 0d
>3a6ce9	20 20 48 75 6e 74 20 66		                .text "  Hunt for values in memory",CHAR_CR,CHAR_CR
>3a6cf1	6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d
>3a6d01	6f 72 79 0d 0d
>3a6d06	4c 20 20 20 20 20 4c 4f		                .text "L     LOAD         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," [destination]",CHAR_CR
>3a6d0e	41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a6d1e	22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>3a6d2e	4d 20 3c 73 74 61 72 74		                .text "M <start> [end]",CHAR_CR
>3a6d36	3e 20 5b 65 6e 64 5d 0d
>3a6d3e	20 20 44 75 6d 70 20 74		                .text "  Dump the value in memory",CHAR_CR,CHAR_CR
>3a6d46	68 65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f
>3a6d56	72 79 0d 0d
>3a6d5a	52 20 2d 20 44 69 73 70		                .text "R - Display the values of the registers",CHAR_CR,CHAR_CR
>3a6d62	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>3a6d72	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a6d82	0d
>3a6d83	3b 20 3c 50 43 3e 20 3c		                .text "; <PC> <A> <X> <Y> <SP> <DBR> <DP> <NVMXDIZC>",CHAR_CR
>3a6d8b	41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>3a6d9b	3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>3a6dab	44 49 5a 43 3e 0d
>3a6db1	20 20 43 68 61 6e 67 65		                .text "  Change the contents of the registers",CHAR_CR,CHAR_CR
>3a6db9	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a6dc9	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a6dd9	53 20 20 20 20 20 53 41		                .text "S     SAVE         ",CHAR_DQUOTE,"File",CHAR_DQUOTE," <start> <end>",CHAR_CR
>3a6de1	56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a6df1	22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d
>3a6e01	54 20 3c 73 74 61 72 74		                .text "T <start> <end> <destination>",CHAR_CR
>3a6e09	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a6e19	74 69 6f 6e 3e 0d
>3a6e1f	20 20 54 72 61 6e 73 66		                .text "  Transfer (copy) data within memory",CHAR_CR,CHAR_CR
>3a6e27	65 72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77
>3a6e37	69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a6e45	57 20 3c 62 79 74 65 3e		                .text "W <byte>",CHAR_CR
>3a6e4d	0d
>3a6e4e	20 20 53 65 74 20 74 68		                .text "  Set the register width flags for the disassembler",CHAR_CR,CHAR_CR
>3a6e56	65 20 72 65 67 69 73 74 65 72 20 77 69 64 74 68
>3a6e66	20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20 64
>3a6e76	69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>3a6e83	58 20 2d 20 52 65 74 75		                .text "X - Return to BASIC",CHAR_CR,CHAR_CR
>3a6e8b	72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>3a6e98	3e 20 3c 73 74 61 72 74		                .text "> <start> <byte> [byte]...",CHAR_CR
>3a6ea0	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>3a6eb0	2e 2e 0d
>3a6eb3	20 20 45 64 69 74 20 64		                .text "  Edit data in memory",CHAR_CR,CHAR_CR
>3a6ebb	61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a6eca	3f 20 2d 20 44 69 73 70		                .null "? - Display a short help screen",CHAR_CR,CHAR_CR
>3a6ed2	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>3a6ee2	20 73 63 72 65 65 6e 0d 0d 00
.3a6eec					IMWIDTH
.3a6eec	08		php		                PHP
.3a6eed	08		php		            PHP
.3a6eee	c2 20		rep #$20	            REP #$20
.3a6ef0	48		pha		            PHA
.3a6ef1	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a6ef4	5b		tcd		            TCD
.3a6ef5	68		pla		            PLA
.3a6ef6	28		plp		            PLP
.3a6ef7	e2 20		sep #$20	            SEP #$20
.3a6ef9	a5 0d		lda $0855	                LDA MARG1
.3a6efb	85 4e		sta $0896	                STA MCPUSTAT
.3a6efd	28		plp		                PLP
.3a6efe	6b		rtl		                RTL
.3a6eff					IMREGISTERS
.3a6eff	20 e4 00	jsr $3a00e4	            JSR ENSURETEXT
.3a6f02	08		php		            PHP
.3a6f03	e2 20		sep #$20	            SEP #$20
.3a6f05	48		pha		            PHA
.3a6f06	a9 3a		lda #$3a	            LDA #`mregisters_msg
.3a6f08	48		pha		            PHA
.3a6f09	ab		plb		            PLB
.3a6f0a	68		pla		            PLA
.3a6f0b	28		plp		            PLP
.3a6f0c	a2 e1 84	ldx #$84e1	                LDX #<>mregisters_msg
.3a6f0f	20 16 03	jsr $3a0316	            JSR PRINTS
.3a6f12	e2 20		sep #$20	            SEP #$20
.3a6f14	a9 3b		lda #$3b	                LDA #';'
.3a6f16	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f19	a9 20		lda #$20	                LDA #' '
.3a6f1b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f1e	c2 30		rep #$30	            REP #$30
.3a6f20	08		php		            PHP
.3a6f21	e2 20		sep #$20	            SEP #$20
.3a6f23	48		pha		            PHA
.3a6f24	a9 00		lda #$00	            LDA #$0
.3a6f26	48		pha		            PHA
.3a6f27	ab		plb		            PLB
.3a6f28	68		pla		            PLA
.3a6f29	28		plp		            PLP
.3a6f2a	a0 03 00	ldy #$0003	                LDY #3
.3a6f2d	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.3a6f30	20 99 02	jsr $3a0299	            JSR PRINTH
.3a6f33	c2 20		rep #$20	            REP #$20
.3a6f35	a9 20 00	lda #$0020	                LDA #' '
.3a6f38	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f3b	af 44 02 00	lda $000244	                LDA @lCPUA
.3a6f3f	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a6f42	a9 20 00	lda #$0020	                LDA #' '
.3a6f45	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f48	af 46 02 00	lda $000246	                LDA @lCPUX
.3a6f4c	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a6f4f	a9 20 00	lda #$0020	                LDA #' '
.3a6f52	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f55	af 48 02 00	lda $000248	                LDA @lCPUY
.3a6f59	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a6f5c	a9 20 00	lda #$0020	                LDA #' '
.3a6f5f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f62	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK
.3a6f66	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a6f69	a9 20 00	lda #$0020	                LDA #' '
.3a6f6c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f6f	af 4e 02 00	lda $00024e	                LDA @lCPUDBR
.3a6f73	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a6f76	a9 20 00	lda #$0020	                LDA #' '
.3a6f79	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f7c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f7f	af 4c 02 00	lda $00024c	                LDA @lCPUDP
.3a6f83	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a6f86	a9 20 00	lda #$0020	                LDA #' '
.3a6f89	20 18 00	jsr $3a0018	            JSR PRINTC
.3a6f8c	08		php		                PHP
.3a6f8d	e2 20		sep #$20	            SEP #$20
.3a6f8f	ad 4f 02	lda $024f	                LDA CPUFLAGS
.3a6f92	22 fa 81 3a	jsl $3a81fa	                JSL MPRINTB
.3a6f96	28		plp		                PLP
.3a6f97	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a6f9a	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a6f9d	6b		rtl		                RTL
.3a6f9e					IMFILL
.3a6f9e	08		php		                PHP                 ; Save the caller's context
.3a6f9f	0b		phd		                PHD
.3a6fa0	08		php		            PHP
.3a6fa1	c2 20		rep #$20	            REP #$20
.3a6fa3	48		pha		            PHA
.3a6fa4	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a6fa7	5b		tcd		            TCD
.3a6fa8	68		pla		            PLA
.3a6fa9	28		plp		            PLP
.3a6faa					do_copy
.3a6faa	e2 20		sep #$20	            SEP #$20
.3a6fac	a5 15		lda $085d	                LDA MARG3
.3a6fae	87 0d		sta [$0855]	                STA [MARG1]
.3a6fb0	e2 20		sep #$20	            SEP #$20
.3a6fb2	a5 0f		lda $0857	                LDA MARG1+2
.3a6fb4	c5 13		cmp $085b	                CMP MARG2+2
.3a6fb6	d0 0e		bne $3a6fc6	                BNE go_next         ; No: we haven't reached end address yet
.3a6fb8	c2 20		rep #$20	            REP #$20
.3a6fba	a5 0d		lda $0855	                LDA MARG1
.3a6fbc	c5 11		cmp $0859	                CMP MARG2           ; Are they equal?
.3a6fbe	d0 06		bne $3a6fc6	                BNE go_next         ; No: we haven't reached end address yet
.3a6fc0	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a6fc3	2b		pld		                PLD                 ; Restore the caller's context
.3a6fc4	28		plp		                PLP
.3a6fc5	6b		rtl		                RTL
.3a6fc6					go_next
.3a6fc6	c2 20		rep #$20	            REP #$20
.3a6fc8	18		clc		                CLC
.3a6fc9	a5 0d		lda $0855	                LDA MARG1
.3a6fcb	69 01 00	adc #$0001	                ADC #1
.3a6fce	85 0d		sta $0855	                STA MARG1
.3a6fd0	e2 20		sep #$20	            SEP #$20
.3a6fd2	a5 0e		lda $0856	                LDA MARG1+1
.3a6fd4	69 00		adc #$00	                ADC #0
.3a6fd6	85 0e		sta $0856	                STA MARG1+1
.3a6fd8	80 d0		bra $3a6faa	                BRA do_copy
.3a6fda					IMTRANSFER
.3a6fda	08		php		                PHP
.3a6fdb	0b		phd		                PHD
.3a6fdc	08		php		            PHP
.3a6fdd	c2 20		rep #$20	            REP #$20
.3a6fdf	48		pha		            PHA
.3a6fe0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a6fe3	5b		tcd		            TCD
.3a6fe4	68		pla		            PLA
.3a6fe5	28		plp		            PLP
.3a6fe6	e2 20		sep #$20	            SEP #$20
.3a6fe8	a5 0f		lda $0857	                LDA MARG1+2
.3a6fea	c5 17		cmp $085f	                CMP MARG3+2
.3a6fec	90 45		bcc $3a7033	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.3a6fee	c2 20		rep #$20	            REP #$20
.3a6ff0	a5 0d		lda $0855	                LDA MARG1
.3a6ff2	c5 15		cmp $085d	                CMP MARG3
.3a6ff4	90 3d		bcc $3a7033	                BLT copy_up         ; If MARG1 < MARG3, we are copying up
.3a6ff6					copy_byte_down
.3a6ff6	e2 20		sep #$20	            SEP #$20
.3a6ff8	a7 0d		lda [$0855]	                LDA [MARG1]         ; Copy the byte
.3a6ffa	87 15		sta [$085d]	                STA [MARG3]
.3a6ffc	a5 0f		lda $0857	                LDA MARG1+2         ; Are the source's current and end bank bytes equal?
.3a6ffe	c5 13		cmp $085b	                CMP MARG2+2
.3a7000	d0 0b		bne $3a700d	                BNE inc_pointers    ; No: we're not done yet
.3a7002	c2 20		rep #$20	            REP #$20
.3a7004	a5 0d		lda $0855	                LDA MARG1           ; Are the rest of the bits equal?
.3a7006	c5 11		cmp $0859	                CMP MARG2
.3a7008	d0 03		bne $3a700d	                BNE inc_pointers    ; No: we're not done yet
.3a700a	4c 91 70	jmp $3a7091	                JMP done            ; Yes: we've copied the last byte, exit
.3a700d					inc_pointers
.3a700d	c2 20		rep #$20	            REP #$20
.3a700f	18		clc		                CLC
.3a7010	a5 0d		lda $0855	                LDA MARG1
.3a7012	69 01 00	adc #$0001	                ADC #1
.3a7015	85 0d		sta $0855	                STA MARG1
.3a7017	e2 20		sep #$20	            SEP #$20
.3a7019	a5 0e		lda $0856	                LDA MARG1+1
.3a701b	69 00		adc #$00	                ADC #0
.3a701d	85 0e		sta $0856	                STA MARG1+1
.3a701f	c2 20		rep #$20	            REP #$20
.3a7021	18		clc		                CLC
.3a7022	a5 15		lda $085d	                LDA MARG3
.3a7024	69 01 00	adc #$0001	                ADC #1
.3a7027	85 15		sta $085d	                STA MARG3
.3a7029	e2 20		sep #$20	            SEP #$20
.3a702b	a5 16		lda $085e	                LDA MARG3+1
.3a702d	69 00		adc #$00	                ADC #0
.3a702f	85 16		sta $085e	                STA MARG3+1
.3a7031	80 c3		bra $3a6ff6	                BRA copy_byte_down  ; And copy that next byte over
.3a7033					copy_up
.3a7033	c2 20		rep #$20	            REP #$20
.3a7035	38		sec		                SEC
.3a7036	a5 11		lda $0859	                LDA MARG2
.3a7038	e5 0d		sbc $0855	                SBC MARG1
.3a703a	85 19		sta $0861	                STA MARG4
.3a703c	e2 20		sep #$20	            SEP #$20
.3a703e	a5 13		lda $085b	                LDA MARG2+2
.3a7040	e5 0f		sbc $0857	                SBC MARG1+2
.3a7042	85 1b		sta $0863	                STA MARG4+2
.3a7044	c2 20		rep #$20	            REP #$20
.3a7046	18		clc		                CLC
.3a7047	a5 19		lda $0861	                LDA MARG4
.3a7049	65 15		adc $085d	                ADC MARG3
.3a704b	85 15		sta $085d	                STA MARG3
.3a704d	e2 20		sep #$20	            SEP #$20
.3a704f	a5 1b		lda $0863	                LDA MARG4+2
.3a7051	65 17		adc $085f	                ADC MARG3+2
.3a7053	85 17		sta $085f	                STA MARG3+2
.3a7055					copy_byte_up
.3a7055	e2 20		sep #$20	            SEP #$20
.3a7057	a7 11		lda [$0859]	                LDA [MARG2]
.3a7059	87 15		sta [$085d]	                STA [MARG3]
.3a705b	a5 13		lda $085b	                LDA MARG2+2         ; Are the source's current and start bank bytes equal?
.3a705d	c5 0f		cmp $0857	                CMP MARG1+2
.3a705f	d0 0a		bne $3a706b	                BNE dec_pointers    ; No: we're not done yet
.3a7061	c2 20		rep #$20	            REP #$20
.3a7063	a5 11		lda $0859	                LDA MARG2           ; Are the rest of the bits equal?
.3a7065	c5 0d		cmp $0855	                CMP MARG1
.3a7067	d0 02		bne $3a706b	                BNE dec_pointers    ; No: we're not done yet
.3a7069	80 26		bra $3a7091	                BRA done            ; Yes: we've copied the last byte, exit
.3a706b					dec_pointers
.3a706b	c2 20		rep #$20	            REP #$20
.3a706d	38		sec		                SEC
.3a706e	a5 11		lda $0859	                LDA MARG2
.3a7070	e9 01 00	sbc #$0001	                SBC #1
.3a7073	85 11		sta $0859	                STA MARG2
.3a7075	e2 20		sep #$20	            SEP #$20
.3a7077	a5 12		lda $085a	                LDA MARG2+1
.3a7079	e9 00		sbc #$00	                SBC #0
.3a707b	85 12		sta $085a	                STA MARG2+1
.3a707d	c2 20		rep #$20	            REP #$20
.3a707f	38		sec		                SEC                 ; Decrement the current destination pointer (MARG3)
.3a7080	a5 15		lda $085d	                LDA MARG3
.3a7082	e9 01 00	sbc #$0001	                SBC #1
.3a7085	85 15		sta $085d	                STA MARG3
.3a7087	e2 20		sep #$20	            SEP #$20
.3a7089	a5 16		lda $085e	                LDA MARG3+1
.3a708b	e9 00		sbc #$00	                SBC #0
.3a708d	85 16		sta $085e	                STA MARG3+1
.3a708f	80 c4		bra $3a7055	                BRA copy_byte_up    ; And copy that next byte
.3a7091					done
.3a7091	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a7094	2b		pld		                PLD
.3a7095	28		plp		                PLP
.3a7096	6b		rtl		                RTL
.3a7097					IS_PRINTABLE
.3a7097	08		php		                PHP
.3a7098	e2 20		sep #$20	            SEP #$20
.3a709a	c9 21		cmp #$21	                CMP #33
.3a709c	90 0b		bcc $3a70a9	                BLT not_printable   ; 0 .. 31 are not printable
.3a709e	c9 7f		cmp #$7f	                CMP #127
.3a70a0	90 04		bcc $3a70a6	                BLT printable       ; 32 .. 126 are printable
.3a70a2	c9 a0		cmp #$a0	                CMP #160
.3a70a4	90 03		bcc $3a70a9	                BLT not_printable   ; 127 .. 159 are not printable (assuming Latin-1)
.3a70a6	28		plp		printable       PLP
.3a70a7	38		sec		                SEC
.3a70a8	6b		rtl		                RTL
.3a70a9	28		plp		not_printable   PLP
.3a70aa	18		clc		                CLC
.3a70ab	6b		rtl		                RTL
=256					MMEMDUMPSIZE = 256  ; Default number of bytes to dump
=8					MMEMROWSIZE = 8    ; Number of bytes to dump per-row
.3a70ac					IMMEMORY
.3a70ac	08		php		                PHP
.3a70ad	8b		phb		                PHB
.3a70ae	0b		phd		                PHD
.3a70af	08		php		            PHP
.3a70b0	c2 20		rep #$20	            REP #$20
.3a70b2	48		pha		            PHA
.3a70b3	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a70b6	5b		tcd		            TCD
.3a70b7	68		pla		            PLA
.3a70b8	28		plp		            PLP
.3a70b9	e2 20		sep #$20	            SEP #$20
.3a70bb	a9 00		lda #$00	                LDA #0              ; Clear the pagination line counter
.3a70bd	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT
.3a70c1	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a70c3	c9 02		cmp #$02	                CMP #2
.3a70c5	b0 16		bcs $3a70dd	                BGE set_cursor      ; 2>= arguments? Use them as-is
.3a70c7	c9 01		cmp #$01	                CMP #1
.3a70c9	90 20		bcc $3a70eb	                BLT no_args         ; No arguments passed? Use defaults
.3a70cb	c2 20		rep #$20	            REP #$20
.3a70cd	18		clc		                CLC
.3a70ce	a5 0d		lda $0855	                LDA MARG1
.3a70d0	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a70d3	85 11		sta $0859	                STA MARG2
.3a70d5	e2 20		sep #$20	            SEP #$20
.3a70d7	a5 0f		lda $0857	                LDA MARG1+2
.3a70d9	69 00		adc #$00	                ADC #0
.3a70db	85 13		sta $085b	                STA MARG2+2
.3a70dd					set_cursor
.3a70dd	c2 20		rep #$20	            REP #$20
.3a70df	a5 0d		lda $0855	                LDA MARG1
.3a70e1	85 32		sta $087a	                STA MCURSOR
.3a70e3	e2 20		sep #$20	            SEP #$20
.3a70e5	a5 0f		lda $0857	                LDA MARG1+2
.3a70e7	85 34		sta $087c	                STA MCURSOR+2
.3a70e9	80 12		bra $3a70fd	                BRA dump_line
.3a70eb					no_args
.3a70eb	c2 20		rep #$20	            REP #$20
.3a70ed	18		clc		                CLC
.3a70ee	a5 32		lda $087a	                LDA MCURSOR
.3a70f0	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a70f3	85 11		sta $0859	                STA MARG2
.3a70f5	e2 20		sep #$20	            SEP #$20
.3a70f7	a5 34		lda $087c	                LDA MCURSOR+2
.3a70f9	69 00		adc #$00	                ADC #0
.3a70fb	85 13		sta $085b	                STA MARG2+2
.3a70fd					dump_line
.3a70fd	e2 20		sep #$20	            SEP #$20
.3a70ff	a0 00 00	ldy #$0000	                LDY #0
.3a7102	c2 20		rep #$20	            REP #$20
.3a7104	a5 32		lda $087a	                LDA MCURSOR             ; NOTE: the use of MARG4 here is a temporary
.3a7106	85 19		sta $0861	                STA MARG4               ; hack. the copy_loop instruction does not
.3a7108	e2 20		sep #$20	            SEP #$20
.3a710a	a5 34		lda $087c	                LDA MCURSOR+2
.3a710c	85 1b		sta $0863	                STA MARG4+2
.3a710e	e2 20		sep #$20	            SEP #$20
.3a7110	a7 19		lda [$0861]	copy_loop       LDA [MARG4]             ; TODO: Should be LDA [MCURSOR],Y, which doesn't seem to be working
.3a7112	22 97 70 3a	jsl $3a7097	                JSL IS_PRINTABLE        ; Is it printable?
.3a7116	b0 02		bcs $3a711a	                BCS buffer_char         ; Yes: go ahead and add it to the line buffer
.3a7118	a9 3f		lda #$3f	                LDA #'?'                ; No: replace it with dot
.3a711a	99 7e 08	sta $087e,y	buffer_char     STA #MLINEBUF,B,Y
.3a711d	c2 20		rep #$20	            REP #$20
.3a711f	18		clc		                CLC
.3a7120	a5 19		lda $0861	                LDA MARG4
.3a7122	69 01 00	adc #$0001	                ADC #1
.3a7125	85 19		sta $0861	                STA MARG4
.3a7127	e2 20		sep #$20	            SEP #$20
.3a7129	a5 1b		lda $0863	                LDA MARG4+2
.3a712b	69 00		adc #$00	                ADC #0
.3a712d	85 1b		sta $0863	                STA MARG4+2
.3a712f	c8		iny		                INY
.3a7130	c0 08 00	cpy #$0008	                CPY #MMEMROWSIZE
.3a7133	90 db		bcc $3a7110	                BLT copy_loop
.3a7135	a9 00		lda #$00	                LDA #0
.3a7137	99 7e 08	sta $087e,y	                STA #MLINEBUF,B,Y
.3a713a	a9 3e		lda #$3e	                LDA #'>'
.3a713c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a713f	a9 20		lda #$20	                LDA #' '
.3a7141	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7144	e2 20		sep #$20	            SEP #$20
.3a7146	a5 34		lda $087c	                LDA MCURSOR+2
.3a7148	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a714b	a9 3a		lda #$3a	                LDA #':'                ; then a colon
.3a714d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7150	c2 20		rep #$20	            REP #$20
.3a7152	a5 32		lda $087a	                LDA MCURSOR
.3a7154	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a7157	c2 20		rep #$20	            REP #$20
.3a7159	a9 08 00	lda #$0008	                LDA #MMEMROWSIZE
.3a715c	85 47		sta $088f	                STA MCOUNT
.3a715e					prhex_loop
.3a715e	e2 20		sep #$20	            SEP #$20
.3a7160	a9 20		lda #$20	                LDA #' '
.3a7162	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7165	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a7167	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a716a	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR        ; Point MCURSOR to the next byte
.3a716e					check_line
.3a716e	e2 20		sep #$20	            SEP #$20
.3a7170	c6 47		dec $088f	                DEC MCOUNT              ; Count down the number of bytes on the row
.3a7172	d0 ea		bne $3a715e	                BNE prhex_loop          ; If we're not at zero, keep looping over the bytes
.3a7174	a9 20		lda #$20	                LDA #' '
.3a7176	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7179	a9 20		lda #$20	                LDA #' '
.3a717b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a717e	08		php		            PHP
.3a717f	e2 20		sep #$20	            SEP #$20
.3a7181	48		pha		            PHA
.3a7182	a9 00		lda #$00	            LDA #`MLINEBUF
.3a7184	48		pha		            PHA
.3a7185	ab		plb		            PLB
.3a7186	68		pla		            PLA
.3a7187	28		plp		            PLP
.3a7188	a2 7e 08	ldx #$087e	                LDX #MLINEBUF
.3a718b	20 16 03	jsr $3a0316	            JSR PRINTS
.3a718e	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a7191	20 a0 02	jsr $3a02a0	            JSR PAGINATE
.3a7194	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.3a7196	c5 13		cmp $085b	                CMP MARG2+2
.3a7198	90 0f		bcc $3a71a9	                BLT continue            ; No: continue
.3a719a	c2 20		rep #$20	            REP #$20
.3a719c	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.3a719e	c5 11		cmp $0859	                CMP MARG2
.3a71a0	90 07		bcc $3a71a9	                BLT continue            ; Nope... keep going
.3a71a2					done
.3a71a2	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a71a5	2b		pld		                PLD
.3a71a6	ab		plb		                PLB
.3a71a7	28		plp		                PLP
.3a71a8	6b		rtl		                RTL
.3a71a9	4c fd 70	jmp $3a70fd	continue        JMP dump_line
.3a71ac					M_COPY_ARGB
.3a71ac	08		php		                PHP
.3a71ad	8d 92 08	sta $0892	                STA MTEMP
.3a71b0	e2 20		sep #$20	            SEP #$20
.3a71b2	bd 00 00	lda $0000,x	loop            LDA #0,B,X
.3a71b5	99 00 00	sta $0000,y	                STA #0,B,Y      ; Copy the byte
.3a71b8	ad 92 08	lda $0892	                LDA MTEMP       ; Check the count of characters remaining
.3a71bb	f0 0a		beq $3a71c7	                BEQ done        ; If it's 0, we're done
.3a71bd	c8		iny		                INY             ; Point to the next destination byte
.3a71be	e8		inx		                INX             ; Point to the next source byte (skip three bytes)
.3a71bf	e8		inx		                INX
.3a71c0	e8		inx		                INX
.3a71c1	e8		inx		                INX
.3a71c2	ce 92 08	dec $0892	                DEC MTEMP       ; Count down and see if we're done
.3a71c5	80 eb		bra $3a71b2	                BRA loop
.3a71c7	28		plp		done            PLP
.3a71c8	6b		rtl		                RTL
.3a71c9					IMMODIFY
.3a71c9	08		php		                PHP
.3a71ca	0b		phd		                PHD
.3a71cb	8b		phb		                PHB
.3a71cc	08		php		            PHP
.3a71cd	c2 20		rep #$20	            REP #$20
.3a71cf	48		pha		            PHA
.3a71d0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a71d3	5b		tcd		            TCD
.3a71d4	68		pla		            PLA
.3a71d5	28		plp		            PLP
.3a71d6	08		php		            PHP
.3a71d7	e2 20		sep #$20	            SEP #$20
.3a71d9	48		pha		            PHA
.3a71da	a9 00		lda #$00	            LDA #0
.3a71dc	48		pha		            PHA
.3a71dd	ab		plb		            PLB
.3a71de	68		pla		            PLA
.3a71df	28		plp		            PLP
.3a71e0	c2 30		rep #$30	            REP #$30
.3a71e2	a5 0d		lda $0855	                LDA MARG1           ; Set MCURSOR to MARG1
.3a71e4	85 32		sta $087a	                STA MCURSOR
.3a71e6	a5 0f		lda $0857	                LDA MARG1+2
.3a71e8	85 34		sta $087c	                STA MCURSOR+2
.3a71ea	e2 20		sep #$20	            SEP #$20
.3a71ec	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.3a71ee	3a		dec a		                DEC A               ; (MARG_LEN - 1)
.3a71ef	85 47		sta $088f	                STA MCOUNT
.3a71f1	a2 59 08	ldx #$0859	                LDX #<>MARG2        ; Copy MCOUNT bytes from MARG2..MARG9
.3a71f4	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF     ; to MLINEBUF
.3a71f7	22 ac 71 3a	jsl $3a71ac	                JSL M_COPY_ARGB
.3a71fb	a0 00 00	ldy #$0000	                LDY #0
.3a71fe	b9 7e 08	lda $087e,y	loop            LDA MLINEBUF,Y      ; Copy the byte from the buffer
.3a7201	87 32		sta [$087a]	                STA [MCURSOR]       ; To the address indicated by MCURSOR
.3a7203	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR    ; Advance the cursor
.3a7207	c8		iny		                INY                 ; Go to the next buffered byte
.3a7208	c4 47		cpy $088f	                CPY MCOUNT          ; Did we just write the last one?
.3a720a	d0 f2		bne $3a71fe	                BNE loop            ; No: continue writing
.3a720c	ab		plb		                PLB
.3a720d	2b		pld		                PLD
.3a720e	28		plp		                PLP
.3a720f	6b		rtl		                RTL
.3a7210					IMHUNT
.3a7210	08		php		                PHP
.3a7211	0b		phd		                PHD
.3a7212	8b		phb		                PHB
.3a7213	08		php		            PHP
.3a7214	c2 20		rep #$20	            REP #$20
.3a7216	48		pha		            PHA
.3a7217	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a721a	5b		tcd		            TCD
.3a721b	68		pla		            PLA
.3a721c	28		plp		            PLP
.3a721d	08		php		            PHP
.3a721e	e2 20		sep #$20	            SEP #$20
.3a7220	48		pha		            PHA
.3a7221	a9 00		lda #$00	            LDA #0
.3a7223	48		pha		            PHA
.3a7224	ab		plb		            PLB
.3a7225	68		pla		            PLA
.3a7226	28		plp		            PLP
.3a7227	e2 20		sep #$20	            SEP #$20
.3a7229	c2 10		rep #$10	            REP #$10
.3a722b	a5 31		lda $0879	                LDA MARG_LEN        ; Set MCOUNT to the number of bytes in the pattern
.3a722d	3a		dec a		                DEC A               ; (MARG_LEN - 2)
.3a722e	3a		dec a		                DEC A
.3a722f	85 47		sta $088f	                STA MCOUNT
.3a7231	a2 5d 08	ldx #$085d	                LDX #<>MARG3
.3a7234	a0 7e 08	ldy #$087e	                LDY #<>MLINEBUF
.3a7237	22 ac 71 3a	jsl $3a71ac	                JSL M_COPY_ARGB
.3a723b	c2 20		rep #$20	            REP #$20
.3a723d	a5 0d		lda $0855	                LDA MARG1           ; Copy starting address to MCURSOR
.3a723f	85 32		sta $087a	                STA MCURSOR
.3a7241	a5 0f		lda $0857	                LDA MARG1+2
.3a7243	85 34		sta $087c	                STA MCURSOR+2
.3a7245					outer_loop
.3a7245	c2 20		rep #$20	            REP #$20
.3a7247	a5 34		lda $087c	                LDA MCURSOR+2      ; If MCURSOR < MARG2, we're not done yet
.3a7249	c5 13		cmp $085b	                CMP MARG2+2
.3a724b	d0 06		bne $3a7253	                BNE not_done
.3a724d	a5 32		lda $087a	                LDA MCURSOR
.3a724f	c5 11		cmp $0859	                CMP MARG2
.3a7251	f0 2c		beq $3a727f	                BEQ done            ; MCURSOR = MARG2: we're done
.3a7253					not_done
.3a7253	e2 20		sep #$20	            SEP #$20
.3a7255	a0 00 00	ldy #$0000	                LDY #0
.3a7258	b7 32		lda [$087a],y	cmp_loop        LDA [MCURSOR],Y     ; Get the byte from the memory to check
.3a725a	d9 7e 08	cmp $087e,y	                CMP MLINEBUF,Y      ; Compare it against our pattern
.3a725d	d0 1a		bne $3a7279	                BNE advance         ; If not equal, we need to move on
.3a725f	c8		iny		                INY                 ; Otherwise do we have more bytes to check?
.3a7260	c4 47		cpy $088f	                CPY MCOUNT
.3a7262	d0 f4		bne $3a7258	                BNE cmp_loop        ; No: check more
.3a7264	c2 20		rep #$20	            REP #$20
.3a7266	a5 32		lda $087a	                LDA MCURSOR         ; Print the address
.3a7268	85 4a		sta $0892	                STA MTEMP
.3a726a	a5 34		lda $087c	                LDA MCURSOR+2
.3a726c	85 4c		sta $0894	                STA MTEMP+2
.3a726e	22 83 7c 3a	jsl $3a7c83	                JSL M_PR_ADDR
.3a7272	e2 20		sep #$20	            SEP #$20
.3a7274	a9 20		lda #$20	                LDA #' '
.3a7276	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7279	22 d9 81 3a	jsl $3a81d9	advance         JSL M_INC_CURSOR    ; Move MCURSOR forward by one
.3a727d	80 c6		bra $3a7245	                BRA outer_loop      ; And try to compare that to the pattern
.3a727f					done
.3a727f	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a7282	ab		plb		                PLB
.3a7283	2b		pld		                PLD
.3a7284	28		plp		                PLP
.3a7285	6b		rtl		                RTL
.3a7286					IMJUMP
.3a7286	08		php		            PHP
.3a7287	c2 20		rep #$20	            REP #$20
.3a7289	48		pha		            PHA
.3a728a	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a728d	5b		tcd		            TCD
.3a728e	68		pla		            PLA
.3a728f	28		plp		            PLP
.3a7290	e2 20		sep #$20	            SEP #$20
.3a7292	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.3a7294	f0 0e		beq $3a72a4	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.3a7296	c2 30		rep #$30	            REP #$30
.3a7298	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.3a729a	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.3a729e	a5 0f		lda $0857	                LDA MARG1+2
.3a72a0	8f 42 02 00	sta $000242	                STA @lCPUPBR
.3a72a4	af 46 02 00	lda $000246	MJUMPRESTORE    LDA @lCPUX          ; Restore X and Y
.3a72a8	aa		tax		                TAX
.3a72a9	af 48 02 00	lda $000248	                LDA @lCPUY
.3a72ad	a8		tay		                TAY
.3a72ae	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.3a72b2	1b		tcs		                TCS
.3a72b3	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.3a72b7	5b		tcd		                TCD
.3a72b8	e2 20		sep #$20	            SEP #$20
.3a72ba	a9 3a		lda #$3a	                LDA #`MJUMPSTART
.3a72bc	48		pha		                PHA
.3a72bd	a9 72		lda #$72	                LDA #>MJUMPSTART
.3a72bf	48		pha		                PHA
.3a72c0	a9 c6		lda #$c6	                LDA #<MJUMPSTART
.3a72c2	48		pha		                PHA
.3a72c3	4c fd 72	jmp $3a72fd	                JMP MGOSTACK        ; And push remaining registers and restart execution
.3a72c6	ea		nop		MJUMPSTART      NOP                 ; RTL increments PC pulled from stack, NOP leaves space for that
.3a72c7	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3a72cb					IMGO
.3a72cb	08		php		            PHP
.3a72cc	c2 20		rep #$20	            REP #$20
.3a72ce	48		pha		            PHA
.3a72cf	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a72d2	5b		tcd		            TCD
.3a72d3	68		pla		            PLA
.3a72d4	28		plp		            PLP
.3a72d5	e2 20		sep #$20	            SEP #$20
.3a72d7	a5 31		lda $0879	                LDA MARG_LEN        ; Check to see if an argument was provided
.3a72d9	f0 c9		beq $3a72a4	                BEQ MJUMPRESTORE    ; If not, just restore the registers
.3a72db	c2 30		rep #$30	            REP #$30
.3a72dd	a5 0d		lda $0855	                LDA MARG1           ; Otherwise, replace PC and K
.3a72df	8f 40 02 00	sta $000240	                STA @lCPUPC         ; With the value of the first argument
.3a72e3	a5 0f		lda $0857	                LDA MARG1+2
.3a72e5	8f 42 02 00	sta $000242	                STA @lCPUPBR
.3a72e9	af 46 02 00	lda $000246	MGORESTORE      LDA @lCPUX          ; Restore X and Y
.3a72ed	aa		tax		                TAX
.3a72ee	af 48 02 00	lda $000248	                LDA @lCPUY
.3a72f2	a8		tay		                TAY
.3a72f3	af 4a 02 00	lda $00024a	                LDA @lCPUSTACK      ; Restore the stack pointer
.3a72f7	1b		tcs		                TCS
.3a72f8	af 4c 02 00	lda $00024c	                LDA @lCPUDP         ; Restore the direct page register
.3a72fc	5b		tcd		                TCD
.3a72fd					MGOSTACK
.3a72fd	e2 20		sep #$20	            SEP #$20
.3a72ff	af 4e 02 00	lda $00024e	                LDA @lCPUDBR        ; Restore the data bank register
.3a7303	48		pha		                PHA
.3a7304	ab		plb		                PLB
.3a7305	a9 5c		lda #$5c	                LDA #$5C            ; Save the JSL opcode
.3a7307	8f a2 08 00	sta $0008a2	                STA @lMJUMPINST
.3a730b	af 42 02 00	lda $000242	                LDA @lCPUPBR        ; Write PBR
.3a730f	8f a5 08 00	sta $0008a5	                STA @lMJUMPADDR+2
.3a7313	af 41 02 00	lda $000241	                LDA @lCPUPC+1       ; Write PCH
.3a7317	8f a4 08 00	sta $0008a4	                STA @lMJUMPADDR+1
.3a731b	af 40 02 00	lda $000240	                LDA @lCPUPC         ; Write PCL
.3a731f	8f a3 08 00	sta $0008a3	                STA @lMJUMPADDR
.3a7323	af 4f 02 00	lda $00024f	                LDA @lCPUFLAGS      ; Push processor status
.3a7327	48		pha		                PHA
.3a7328	c2 20		rep #$20	            REP #$20
.3a732a	af 44 02 00	lda $000244	                LDA @lCPUA          ; Restore A
.3a732e	28		plp		                PLP                 ; And the status register
.3a732f	5c a2 08 00	jmp $0008a2	                JML MJUMPINST       ; And jump to the target address
.3a7333					IMCOMPARE
.3a7333	08		php		                PHP
.3a7334	0b		phd		                PHD
.3a7335	8b		phb		                PHB
.3a7336	08		php		            PHP
.3a7337	e2 20		sep #$20	            SEP #$20
.3a7339	48		pha		            PHA
.3a733a	a9 3a		lda #$3a	            LDA #`MERRARGS
.3a733c	48		pha		            PHA
.3a733d	ab		plb		            PLB
.3a733e	68		pla		            PLA
.3a733f	28		plp		            PLP
.3a7340	08		php		            PHP
.3a7341	c2 20		rep #$20	            REP #$20
.3a7343	48		pha		            PHA
.3a7344	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a7347	5b		tcd		            TCD
.3a7348	68		pla		            PLA
.3a7349	28		plp		            PLP
.3a734a	c2 10		rep #$10	            REP #$10
.3a734c	e2 20		sep #$20	            SEP #$20
.3a734e	a5 31		lda $0879	                LDA MARG_LEN                ; Check the number of arguments provided
.3a7350	c9 02		cmp #$02	                CMP #2
.3a7352	f0 0c		beq $3a7360	                BEQ default_len             ; If 2: set MCOUNT to default of 1
.3a7354	c9 03		cmp #$03	                CMP #3
.3a7356	d0 11		bne $3a7369	                BNE bad_arguments           ; Otherwise, if not 3: print an error
.3a7358	c2 20		rep #$20	            REP #$20
.3a735a	a5 15		lda $085d	                LDA MARG3                   ; If 3: set MCOUNT to MARG3
.3a735c	85 47		sta $088f	                STA MCOUNT
.3a735e	80 11		bra $3a7371	                BRA compare
.3a7360					default_len
.3a7360	c2 20		rep #$20	            REP #$20
.3a7362	a9 01 00	lda #$0001	                LDA #1                      ; No length was provided, set MCOUNT to 1
.3a7365	85 47		sta $088f	                STA MCOUNT
.3a7367	80 08		bra $3a7371	                BRA compare
.3a7369	a2 a5 84	ldx #$84a5	bad_arguments   LDX #<>MERRARGS             ; The wrong number of arguments was provided
.3a736c	20 16 03	jsr $3a0316	            JSR PRINTS
.3a736f	80 35		bra $3a73a6	                BRA done
.3a7371	a5 0d		lda $0855	compare         LDA MARG1                   ; Set MTEMP to MARG1
.3a7373	85 4a		sta $0892	                STA MTEMP
.3a7375	a5 0f		lda $0857	                LDA MARG1+2
.3a7377	85 4c		sta $0894	                STA MTEMP+2
.3a7379	a0 00 00	ldy #$0000	                LDY #0
.3a737c					loop
.3a737c	e2 20		sep #$20	            SEP #$20
.3a737e	a7 4a		lda [$0892]	                LDA [MTEMP]                 ; Compare the byte at MTEMP
.3a7380	d7 11		cmp [$0859],y	                CMP [MARG2],Y               ; To the Yth byte from MARG2
.3a7382	f0 09		beq $3a738d	                BEQ continue                ; If they're the same, keep going
.3a7384	22 83 7c 3a	jsl $3a7c83	mismatch        JSL M_PR_ADDR               ; If they're different, print MTEMP
.3a7388	a9 20		lda #$20	                LDA #' '
.3a738a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a738d					continue
.3a738d	c2 20		rep #$20	            REP #$20
.3a738f	18		clc		                CLC                         ; Either way, increment MTEMP
.3a7390	a5 4a		lda $0892	                LDA MTEMP
.3a7392	69 01 00	adc #$0001	                ADC #1
.3a7395	85 4a		sta $0892	                STA MTEMP
.3a7397	a5 4c		lda $0894	                LDA MTEMP+2
.3a7399	69 00 00	adc #$0000	                ADC #0
.3a739c	85 4c		sta $0894	                STA MTEMP+2
.3a739e	c8		iny		                INY                         ; Increment Y
.3a739f	c4 47		cpy $088f	                CPY MCOUNT                  ; Try again unless we've checked MCOUNT bytes
.3a73a1	d0 d9		bne $3a737c	                BNE loop
.3a73a3	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a73a6					done
.3a73a6	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a73a9	ab		plb		                PLB
.3a73aa	2b		pld		                PLD
.3a73ab	28		plp		                PLP
.3a73ac	6b		rtl		                RTL
.3a73ad					IMRMODIFY
.3a73ad	08		php		                PHP
.3a73ae	0b		phd		                PHD
.3a73af	8b		phb		                PHB
.3a73b0	08		php		            PHP
.3a73b1	e2 20		sep #$20	            SEP #$20
.3a73b3	48		pha		            PHA
.3a73b4	a9 00		lda #$00	            LDA #0
.3a73b6	48		pha		            PHA
.3a73b7	ab		plb		            PLB
.3a73b8	68		pla		            PLA
.3a73b9	28		plp		            PLP
.3a73ba	08		php		            PHP
.3a73bb	c2 20		rep #$20	            REP #$20
.3a73bd	48		pha		            PHA
.3a73be	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a73c1	5b		tcd		            TCD
.3a73c2	68		pla		            PLA
.3a73c3	28		plp		            PLP
.3a73c4	e2 20		sep #$20	            SEP #$20
.3a73c6	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a73c8	f0 4f		beq $3a7419	                BEQ done            ; 0? Just quit
.3a73ca	a6 0d		ldx $0855	                LDX MARG1           ; Set the PC and PBR
.3a73cc	8e 40 02	stx $0240	                STX #CPUPC,B
.3a73cf	a6 0f		ldx $0857	                LDX MARG1+2
.3a73d1	8e 42 02	stx $0242	                STX #CPUPBR,B
.3a73d4	c9 01		cmp #$01	                CMP #1              ; Check the number of arguments
.3a73d6	f0 41		beq $3a7419	                BEQ done            ; 1? Just quit
.3a73d8	a6 11		ldx $0859	                LDX MARG2           ; Set A
.3a73da	8e 44 02	stx $0244	                STX #CPUA,B
.3a73dd	c9 02		cmp #$02	                CMP #2              ; Check the number of arguments
.3a73df	f0 38		beq $3a7419	                BEQ done            ; 2? Just quit
.3a73e1	a6 15		ldx $085d	                LDX MARG3           ; Set X
.3a73e3	8e 46 02	stx $0246	                STX #CPUX,B
.3a73e6	c9 03		cmp #$03	                CMP #3              ; Check the number of arguments
.3a73e8	f0 2f		beq $3a7419	                BEQ done            ; 3? Just quit
.3a73ea	a6 19		ldx $0861	                LDX MARG4           ; Set Y
.3a73ec	8e 48 02	stx $0248	                STX #CPUY,B
.3a73ef	c9 04		cmp #$04	                CMP #4              ; Check the number of arguments
.3a73f1	f0 26		beq $3a7419	                BEQ done            ; 4? Just quit
.3a73f3	a6 1d		ldx $0865	                LDX MARG5           ; Set SP
.3a73f5	8e 4a 02	stx $024a	                STX #CPUSTACK,B
.3a73f8	c9 05		cmp #$05	                CMP #5              ; Check the number of arguments
.3a73fa	f0 1d		beq $3a7419	                BEQ done            ; 5? Just quit
.3a73fc	e2 10		sep #$10	            SEP #$10
.3a73fe	a6 21		ldx $0869	                LDX MARG6           ; Set DBR
.3a7400	8e 4e 02	stx $024e	                STX #CPUDBR,B
.3a7403	c9 06		cmp #$06	                CMP #6              ; Check the number of arguments
.3a7405	f0 12		beq $3a7419	                BEQ done            ; 6? Just quit
.3a7407	c2 10		rep #$10	            REP #$10
.3a7409	a6 25		ldx $086d	                LDX MARG7           ; Set DP
.3a740b	8e 4c 02	stx $024c	                STX #CPUDP,B
.3a740e	c9 07		cmp #$07	                CMP #7              ; Check the number of arguments
.3a7410	f0 07		beq $3a7419	                BEQ done            ; 7? Just quit
.3a7412	e2 10		sep #$10	            SEP #$10
.3a7414	a6 29		ldx $0871	                LDX MARG8           ; Set flags
.3a7416	8e 4f 02	stx $024f	                STX #CPUFLAGS,B
.3a7419	ab		plb		done            PLB
.3a741a	2b		pld		                PLD
.3a741b	28		plp		                PLP
.3a741c	6b		rtl		                RTL
.3a741d					IMEXECUTE
.3a741d	08		php		                PHP
.3a741e	0b		phd		                PHD
.3a741f	8b		phb		                PHB
.3a7420	08		php		            PHP
.3a7421	c2 20		rep #$20	            REP #$20
.3a7423	48		pha		            PHA
.3a7424	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7427	5b		tcd		            TCD
.3a7428	68		pla		            PLA
.3a7429	28		plp		            PLP
.3a742a	e2 20		sep #$20	            SEP #$20
.3a742c	c2 10		rep #$10	            REP #$10
.3a742e	a2 00 00	ldx #$0000	                LDX #0
.3a7431	bf 12 85 3a	lda $3a8512,x	loop            LDA @lMCOMMANDS,X
.3a7435	f0 18		beq $3a744f	                BEQ done
.3a7437	c7 08		cmp [$0850]	                CMP [MCMD]
.3a7439	f0 03		beq $3a743e	                BEQ found
.3a743b	e8		inx		                INX
.3a743c	80 f3		bra $3a7431	                BRA loop
.3a743e					found
.3a743e	c2 20		rep #$20	            REP #$20
.3a7440	8a		txa		                TXA
.3a7441	0a		asl a		                ASL A
.3a7442	aa		tax		                TAX
.3a7443	bf 53 74 3a	lda $3a7453,x	                LDA dispatch,X
.3a7447	8f 2f 08 00	sta $00082f	                STA @lJMP16PTR
.3a744b	22 77 74 3a	jsl $3a7477	                JSL MDOCMD
.3a744f	ab		plb		done            PLB
.3a7450	2b		pld		                PLD
.3a7451	28		plp		                PLP
.3a7452	6b		rtl		                RTL
>3a7453	f0 6a				dispatch        .word <>MASSEMBLE
>3a7455	f8 6a				                .word <>MCOMPARE
>3a7457	fc 6a				                .word <>MDISASSEMBLE
>3a7459	00 6b				                .word <>MFILL
>3a745b	04 6b				                .word <>MGO
>3a745d	08 6b				                .word <>MJUMP
>3a745f	0c 6b				                .word <>MHUNT
>3a7461	10 6b				                .word <>MLOAD
>3a7463	14 6b				                .word <>MMEMORY
>3a7465	18 6b				                .word <>MREGISTERS
>3a7467	f4 6a				                .word <>MRMODIFY
>3a7469	1c 6b				                .word <>MSAVE
>3a746b	20 6b				                .word <>MTRANSFER
>3a746d	24 6b				                .word <>MVERIFY
>3a746f	ec 6e				                .word <>IMWIDTH
>3a7471	28 6b				                .word <>MEXIT
>3a7473	2c 6b				                .word <>MMODIFY
>3a7475	65 6b				                .word <>IMHELP
.3a7477					MDOCMD
.3a7477	6c 2f 08	jmp ($082f)	                JMP (JMP16PTR)

;******  Processing file: src\assembler.s

=0					ADDR_DP_IND_X = 0       ; (dd,X)
=1					ADDR_DP = 1             ; dd
=2					ADDR_IMM = 2            ; #dd
=3					ADDR_ABS = 3            ; dddd
=4					ADDR_DP_IND_Y = 4       ; (dd),Y
=5					ADDR_DP_X = 5           ; dd,X
=6					ADDR_ABS_Y = 6          ; dddd,Y
=7					ADDR_ABS_X = 7          ; dddd,X
=8					ADDR_ACC = 8            ; A
=9					ADDR_SP_R = 9           ; #d,S
=10					ADDR_DP_LONG = 10       ; [dd]
=11					ADDR_ABS_LONG = 11      ; dddddd
=12					ADDR_SP_R_Y = 12        ; #dd,S,Y
=13					ADDR_DP_Y_LONG = 13     ; [dd],Y
=14					ADDR_ABS_X_LONG = 14    ; dddddd,X
=15					ADDR_DP_IND = 15        ; (dd)
=16					ADDR_ABS_X_ID = 16      ; (dddd,X)
=17					ADDR_DP_Y = 17          ; dd,Y
=18					ADDR_PC_REL = 18        ; PC relative
=19					ADDR_IMPLIED = 19       ; Implied (no operand)
=20					ADDR_XYC = 20           ; #dd, #dd
=21					ADDR_ABS_IND = 21       ; (dddd)
=22					ADDR_PC_REL_LONG = 22   ; PC relative ()
=23					ADDR_ABS_IND_LONG = 23  ; [dddd]
=$80					OP_M_EFFECT = $80       ; Flag to indicate instruction is modified by M
=$40					OP_X_EFFECT = $40       ; Flag to indicate instruction is modified by X
.3a747a					IMASSEMBLE
.3a747a	08		php		                PHP
.3a747b	8b		phb		                PHB
.3a747c	0b		phd		                PHD
.3a747d	08		php		            PHP
.3a747e	c2 20		rep #$20	            REP #$20
.3a7480	48		pha		            PHA
.3a7481	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7484	5b		tcd		            TCD
.3a7485	68		pla		            PLA
.3a7486	28		plp		            PLP
.3a7487	e2 20		sep #$20	            SEP #$20
.3a7489	a5 31		lda $0879	                LDA MARG_LEN            ; Do we have at least 2 arguments?
.3a748b	c9 02		cmp #$02	                CMP #2
.3a748d	b0 03		bcs $3a7492	                BGE has_args            ; Yes: try to assemble the line
.3a748f	4c 20 76	jmp $3a7620	                JMP done                ; No: just return
.3a7492					has_args
.3a7492	c2 20		rep #$20	            REP #$20
.3a7494	a5 0d		lda $0855	                LDA MARG1               ; Set the monitor cursor to the address
.3a7496	85 32		sta $087a	                STA MCURSOR
.3a7498	a5 0f		lda $0857	                LDA MARG1+2
.3a749a	85 34		sta $087c	                STA MCURSOR+2
.3a749c	c2 20		rep #$20	            REP #$20
.3a749e	22 22 78 3a	jsl $3a7822	                JSL AS_FIND_MNEMO       ; Find the address of the mnemonic
.3a74a2	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3a74a5	f0 10		beq $3a74b7	                BEQ bad_mnemonic        ; If not found, print bad mnemonic error message
.3a74a7	85 54		sta $089c	                STA MMNEMONIC
.3a74a9	e2 20		sep #$20	            SEP #$20
.3a74ab	a5 31		lda $0879	                LDA MARG_LEN            ; Check the number of arguments passed
.3a74ad	c9 03		cmp #$03	                CMP #3                  ; Were all three arguments provided?
.3a74af	f0 36		beq $3a74e7	                BEQ get_operand         ; Yes: parse the operand
.3a74b1	a9 13		lda #$13	                LDA #ADDR_IMPLIED       ; No: assume address mode is implied
.3a74b3	85 4f		sta $0897	                STA MADDR_MODE
.3a74b5	80 4c		bra $3a7503	                BRA get_opcode
.3a74b7					bad_mnemonic
.3a74b7	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a74ba	08		php		            PHP
.3a74bb	e2 20		sep #$20	            SEP #$20
.3a74bd	48		pha		            PHA
.3a74be	a9 3a		lda #$3a	            LDA #`MERRBADMNEMO
.3a74c0	48		pha		            PHA
.3a74c1	ab		plb		            PLB
.3a74c2	68		pla		            PLA
.3a74c3	28		plp		            PLP
.3a74c4	c2 10		rep #$10	            REP #$10
.3a74c6	a2 57 76	ldx #$7657	                LDX #<>MERRBADMNEMO
.3a74c9	20 16 03	jsr $3a0316	            JSR PRINTS
.3a74cc	4c 20 76	jmp $3a7620	                JMP done
.3a74cf					bad_operand
.3a74cf	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a74d2	08		php		            PHP
.3a74d3	e2 20		sep #$20	            SEP #$20
.3a74d5	48		pha		            PHA
.3a74d6	a9 3a		lda #$3a	            LDA #`MERRBADOPER
.3a74d8	48		pha		            PHA
.3a74d9	ab		plb		            PLB
.3a74da	68		pla		            PLA
.3a74db	28		plp		            PLP
.3a74dc	c2 10		rep #$10	            REP #$10
.3a74de	a2 66 76	ldx #$7666	                LDX #<>MERRBADOPER
.3a74e1	20 16 03	jsr $3a0316	            JSR PRINTS
.3a74e4	4c 20 76	jmp $3a7620	                JMP done
.3a74e7					get_operand
.3a74e7	e2 20		sep #$20	            SEP #$20
.3a74e9	22 58 78 3a	jsl $3a7858	                JSL AS_FIND_MODE        ; Find the addressing mode of the operand
.3a74ed	c9 ff		cmp #$ff	compare         CMP #$FF
.3a74ef	f0 de		beq $3a74cf	                BEQ bad_operand         ; If not found, print bad operand error message
.3a74f1	85 4f		sta $0897	                STA MADDR_MODE
.3a74f3	c9 03		cmp #$03	                CMP #ADDR_ABS           ; If mode is absolute or absolute long...
.3a74f5	f0 62		beq $3a7559	                BEQ check_for_pcrel     ; Check to see if the mnemonic is one of the branches
.3a74f7	c9 0b		cmp #$0b	                CMP #ADDR_ABS_LONG
.3a74f9	f0 5e		beq $3a7559	                BEQ check_for_pcrel
.3a74fb	c9 13		cmp #$13	                CMP #ADDR_IMPLIED       ; If mode is implied or accumulator, get the opcode
.3a74fd	f0 04		beq $3a7503	                BEQ get_opcode
.3a74ff	c9 08		cmp #$08	                CMP #ADDR_ACC
.3a7501	f0 00		beq $3a7503	                BEQ get_opcode
.3a7503	22 50 77 3a	jsl $3a7750	get_opcode      JSL AS_FIND_OPCODE      ; Find the opcode matching the two
.3a7507	b0 03		bcs $3a750c	                BCS save_opcode
.3a7509	4c e9 75	jmp $3a75e9	                JMP bad_mode            ; If opcode not found, print bad address mode error message
.3a750c	87 32		sta [$087a]	save_opcode     STA [MCURSOR]           ; Write the opcode to the address
.3a750e	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR        ; And point to the next byte
.3a7512	08		php		            PHP
.3a7513	e2 20		sep #$20	            SEP #$20
.3a7515	48		pha		            PHA
.3a7516	a9 00		lda #$00	            LDA #0
.3a7518	48		pha		            PHA
.3a7519	ab		plb		            PLB
.3a751a	68		pla		            PLA
.3a751b	28		plp		            PLP
.3a751c	c2 20		rep #$20	            REP #$20
.3a751e	a5 32		lda $087a	                LDA MCURSOR             ; Make MTEMPPTR a pointer to the machine code we're assembling
.3a7520	85 56		sta $089e	                STA MTEMPPTR
.3a7522	a5 34		lda $087c	                LDA MCURSOR+2
.3a7524	85 58		sta $08a0	                STA MTEMPPTR+2
.3a7526	e2 20		sep #$20	            SEP #$20
.3a7528	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check the address mode again
.3a752a	c9 12		cmp #$12	                CMP #ADDR_PC_REL        ; If it's PC relative
.3a752c	f0 6c		beq $3a759a	                BEQ compute_rel         ; Convert the address to an offset
.3a752e	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.3a7530	f0 68		beq $3a759a	                BEQ compute_rel
.3a7532	c9 14		cmp #$14	                CMP #ADDR_XYC           ; MVP/MVN addressing mode?
.3a7534	f0 7c		beq $3a75b2	                BEQ emit_2
.3a7536	29 3f		and #$3f	                AND #%00111111          ; Filter out the mode bits
.3a7538	c9 02		cmp #$02	                CMP #ADDR_IMM           ; Is it immediate?
.3a753a	d0 03		bne $3a753f	                BNE fixed_length        ; Yes: emit it as an immediate (variable length)
.3a753c	4c 17 76	jmp $3a7617	                JMP emit_imm
.3a753f					fixed_length
.3a753f	c2 20		rep #$20	            REP #$20
.3a7541	29 ff 00	and #$00ff	                AND #$00FF
.3a7544	aa		tax		                TAX
.3a7545	e2 20		sep #$20	            SEP #$20
.3a7547	bf 1f 81 3a	lda $3a811f,x	get_length      LDA ADDR_LENGTH,X       ; Get the number of bytes in the addressing mode
.3a754b	c9 03		cmp #$03	                CMP #$03
.3a754d	f0 57		beq $3a75a6	                BEQ emit_3
.3a754f	c9 02		cmp #$02	                CMP #$02
.3a7551	f0 5f		beq $3a75b2	                BEQ emit_2
.3a7553	c9 01		cmp #$01	                CMP #$01
.3a7555	f0 67		beq $3a75be	                BEQ emit_1
.3a7557	80 71		bra $3a75ca	                BRA next_line
.3a7559					check_for_pcrel
.3a7559	c2 20		rep #$20	            REP #$20
.3a755b	a5 54		lda $089c	                LDA MMNEMONIC
.3a755d	c9 97 7d	cmp #$7d97	                CMP #<>MN_BRA
.3a7560	f0 26		beq $3a7588	                BEQ is_pcrel
.3a7562	c9 fb 7d	cmp #$7dfb	                CMP #<>MN_BRL
.3a7565	f0 2a		beq $3a7591	                BEQ is_pcrel_long
.3a7567	c9 7b 7d	cmp #$7d7b	                CMP #<>MN_BCC
.3a756a	f0 1c		beq $3a7588	                BEQ is_pcrel
.3a756c	c9 7f 7d	cmp #$7d7f	                CMP #<>MN_BCS
.3a756f	f0 17		beq $3a7588	                BEQ is_pcrel
.3a7571	c9 87 7d	cmp #$7d87	                CMP #<>MN_BEQ
.3a7574	f0 12		beq $3a7588	                BEQ is_pcrel
.3a7576	c9 6f 7d	cmp #$7d6f	                CMP #<>MN_BMI
.3a7579	f0 0d		beq $3a7588	                BEQ is_pcrel
.3a757b	c9 83 7d	cmp #$7d83	                CMP #<>MN_BNE
.3a757e	f0 08		beq $3a7588	                BEQ is_pcrel
.3a7580	c9 6b 7d	cmp #$7d6b	                CMP #<>MN_BPL
.3a7583	f0 03		beq $3a7588	                BEQ is_pcrel
.3a7585	4c 03 75	jmp $3a7503	                JMP get_opcode
.3a7588					is_pcrel
.3a7588	e2 20		sep #$20	            SEP #$20
.3a758a	a9 12		lda #$12	                LDA #ADDR_PC_REL
.3a758c	85 4f		sta $0897	                STA MADDR_MODE
.3a758e	4c 03 75	jmp $3a7503	                JMP get_opcode
.3a7591					is_pcrel_long
.3a7591	e2 20		sep #$20	            SEP #$20
.3a7593	a9 16		lda #$16	                LDA #ADDR_PC_REL_LONG
.3a7595	85 4f		sta $0897	                STA MADDR_MODE
.3a7597	4c 03 75	jmp $3a7503	                JMP get_opcode
.3a759a	22 93 76 3a	jsl $3a7693	compute_rel     JSL AS_PC_OFFSET        ; Try to compute the offset
.3a759e	90 60		bcc $3a7600	                BCC bad_offset          ; If failed, it's a bad offset operand
.3a75a0	c9 02		cmp #$02	emit_rel        CMP #$02                ; If the offset is two bytes
.3a75a2	f0 0e		beq $3a75b2	                BEQ emit_2              ; Emit those two bytes
.3a75a4	80 18		bra $3a75be	                BRA emit_1              ; Otherwise emit just the one
.3a75a6	a0 02 00	ldy #$0002	emit_3          LDY #2                  ; Write bank byte of operand
.3a75a9	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a75ac	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a75ae	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a75b2	a0 01 00	ldy #$0001	emit_2          LDY #1                  ; Write high byte of operand
.3a75b5	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a75b8	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a75ba	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a75be	a0 00 00	ldy #$0000	emit_1          LDY #0                  ; Write low byte of operand
.3a75c1	b9 98 08	lda $0898,y	                LDA MPARSEDNUM,Y
.3a75c4	97 56		sta [$089e],y	                STA [MTEMPPTR],Y
.3a75c6	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a75ca					next_line
.3a75ca	e2 20		sep #$20	            SEP #$20
.3a75cc	a9 41		lda #$41	                LDA #'A'
.3a75ce	20 18 00	jsr $3a0018	            JSR PRINTC
.3a75d1	a9 20		lda #$20	                LDA #' '
.3a75d3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a75d6	a6 32		ldx $087a	                LDX MCURSOR
.3a75d8	86 4a		stx $0892	                STX MTEMP
.3a75da	a6 34		ldx $087c	                LDX MCURSOR+2
.3a75dc	86 4c		stx $0894	                STX MTEMP+2
.3a75de	22 83 7c 3a	jsl $3a7c83	                JSL M_PR_ADDR
.3a75e2	a9 20		lda #$20	                LDA #' '
.3a75e4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a75e7	80 37		bra $3a7620	                BRA done
.3a75e9					bad_mode
.3a75e9	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a75ec	08		php		            PHP
.3a75ed	e2 20		sep #$20	            SEP #$20
.3a75ef	48		pha		            PHA
.3a75f0	a9 3a		lda #$3a	            LDA #`MERRBADMODE
.3a75f2	48		pha		            PHA
.3a75f3	ab		plb		            PLB
.3a75f4	68		pla		            PLA
.3a75f5	28		plp		            PLP
.3a75f6	c2 10		rep #$10	            REP #$10
.3a75f8	a2 24 76	ldx #$7624	                LDX #<>MERRBADMODE
.3a75fb	20 16 03	jsr $3a0316	            JSR PRINTS
.3a75fe	80 20		bra $3a7620	                BRA done
.3a7600					bad_offset
.3a7600	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a7603	08		php		            PHP
.3a7604	e2 20		sep #$20	            SEP #$20
.3a7606	48		pha		            PHA
.3a7607	a9 3a		lda #$3a	            LDA #`MERRBADOFFSET
.3a7609	48		pha		            PHA
.3a760a	ab		plb		            PLB
.3a760b	68		pla		            PLA
.3a760c	28		plp		            PLP
.3a760d	c2 10		rep #$10	            REP #$10
.3a760f	a2 74 76	ldx #$7674	                LDX #<>MERRBADOFFSET
.3a7612	20 16 03	jsr $3a0316	            JSR PRINTS
.3a7615	80 09		bra $3a7620	                BRA done
.3a7617	a5 4f		lda $0897	emit_imm        LDA MADDR_MODE          ; Check to see if long immediate was used
.3a7619	29 c0		and #$c0	                AND #%11000000
.3a761b	d0 95		bne $3a75b2	                BNE emit_2              ; Yes: emit two bytes
.3a761d	4c be 75	jmp $3a75be	                JMP emit_1              ; No: emit one byte
.3a7620	2b		pld		done            PLD
.3a7621	ab		plb		                PLB
.3a7622	28		plp		                PLP
.3a7623	6b		rtl		                RTL
>3a7624	41 64 64 72 65 73 73 69		MERRBADMODE     .null "Addressing mode not defined for that instruction.",CHAR_CR
>3a762c	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>3a763c	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>3a764c	74 72 75 63 74 69 6f 6e 2e 0d 00
>3a7657	42 61 64 20 6d 6e 65 6d		MERRBADMNEMO    .null "Bad mnemonic.",CHAR_CR
>3a765f	6f 6e 69 63 2e 0d 00
>3a7666	42 61 64 20 6f 70 65 72		MERRBADOPER     .null "Bad operand.",CHAR_CR
>3a766e	61 6e 64 2e 0d 00
>3a7674	52 65 6c 61 74 69 76 65		MERRBADOFFSET   .null "Relative offset is too large.",CHAR_CR
>3a767c	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>3a768c	61 72 67 65 2e 0d 00
.3a7693					AS_PC_OFFSET
.3a7693	08		php		                PHP
.3a7694	0b		phd		                PHD
.3a7695	08		php		            PHP
.3a7696	c2 20		rep #$20	            REP #$20
.3a7698	48		pha		            PHA
.3a7699	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a769c	5b		tcd		            TCD
.3a769d	68		pla		            PLA
.3a769e	28		plp		            PLP
.3a769f	e2 20		sep #$20	            SEP #$20
.3a76a1	a5 4f		lda $0897	                LDA MADDR_MODE          ; Check to see if it 1 byte or 2 byte relative
.3a76a3	c9 12		cmp #$12	                CMP #ADDR_PC_REL
.3a76a5	f0 0a		beq $3a76b1	                BEQ is_short
.3a76a7	c2 20		rep #$20	            REP #$20
.3a76a9	18		clc		                CLC                     ; Branch is long. Compute where MCURSOR will be
.3a76aa	a5 32		lda $087a	                LDA MCURSOR             ; with two branch offset bytes
.3a76ac	69 02 00	adc #$0002	                ADC #2
.3a76af	80 08		bra $3a76b9	                BRA compute_cursor
.3a76b1					is_short
.3a76b1	c2 20		rep #$20	            REP #$20
.3a76b3	18		clc		                CLC                     ; Branch is short. Computer where MCURSOR will be
.3a76b4	a5 32		lda $087a	                LDA MCURSOR             ; with one branch offset byte
.3a76b6	69 01 00	adc #$0001	                ADC #1
.3a76b9	85 4a		sta $0892	compute_cursor  STA MTEMP
.3a76bb	a5 34		lda $087c	                LDA MCURSOR+2
.3a76bd	69 00 00	adc #$0000	                ADC #0
.3a76c0	85 4c		sta $0894	                STA MTEMP+2
.3a76c2	38		sec		                SEC                     ; MPARSEDNUM = MPARSEDNUM - MTEMP (MCURSOR after the instruction)
.3a76c3	a5 50		lda $0898	                LDA MPARSEDNUM
.3a76c5	e5 4a		sbc $0892	                SBC MTEMP
.3a76c7	85 50		sta $0898	                STA MPARSEDNUM
.3a76c9	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a76cb	e5 4c		sbc $0894	                SBC MTEMP+2
.3a76cd	85 52		sta $089a	                STA MPARSEDNUM+2
.3a76cf	e2 20		sep #$20	            SEP #$20
.3a76d1	a5 4f		lda $0897	                LDA MADDR_MODE
.3a76d3	c9 16		cmp #$16	                CMP #ADDR_PC_REL_LONG
.3a76d5	f0 1e		beq $3a76f5	                BEQ check_long
.3a76d7	a5 50		lda $0898	                LDA MPARSEDNUM          ; Short offset... check if it's negative
.3a76d9	30 0c		bmi $3a76e7	                BMI check_short_neg
.3a76db	a5 51		lda $0899	                LDA MPARSEDNUM+1        ; Positive short offset... upper two bytes
.3a76dd	d0 2a		bne $3a7709	                BNE failure             ; Must be 0 or it's an overflow
.3a76df	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a76e1	d0 26		bne $3a7709	                BNE failure
.3a76e3	a9 01		lda #$01	                LDA #1                  ; Short offset is 1 byte
.3a76e5	80 26		bra $3a770d	                BRA success
.3a76e7	a5 51		lda $0899	check_short_neg LDA MPARSEDNUM+1        ; Negative short offset... upper two bytes
.3a76e9	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's an  overflow
.3a76eb	d0 1c		bne $3a7709	                BNE failure
.3a76ed	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a76ef	c9 ff		cmp #$ff	                CMP #$FF
.3a76f1	d0 16		bne $3a7709	                BNE failure
.3a76f3	80 18		bra $3a770d	                BRA success
.3a76f5	a5 51		lda $0899	check_long      LDA MPARSEDNUM+1        ; Long offset... check if it's negative
.3a76f7	30 06		bmi $3a76ff	                BMI check_long_neg
.3a76f9	a5 52		lda $089a	                LDA MPARSEDNUM+2        ; Positive long offset... upper byte
.3a76fb	d0 0c		bne $3a7709	                BNE failure             ; Must be 0 or it's an overflow
.3a76fd	80 0e		bra $3a770d	                BRA success
.3a76ff	a5 52		lda $089a	check_long_neg  LDA MPARSEDNUM+2        ; Negative offset... upper two bytes
.3a7701	c9 ff		cmp #$ff	                CMP #$FF                ; Must be $FF or it's and overflow
.3a7703	d0 04		bne $3a7709	                BNE failure
.3a7705	a9 02		lda #$02	                LDA #2                  ; Long offset is 2 bytes
.3a7707	80 04		bra $3a770d	                BRA success
.3a7709	2b		pld		failure         PLD
.3a770a	28		plp		                PLP
.3a770b	18		clc		                CLC
.3a770c	6b		rtl		                RTL
.3a770d	2b		pld		success         PLD
.3a770e	28		plp		                PLP
.3a770f	38		sec		                SEC
.3a7710	6b		rtl		                RTL
.3a7711					AS_SHIFT_HEX
.3a7711	08		php		                PHP
.3a7712	0b		phd		                PHD
.3a7713	c2 10		rep #$10	            REP #$10
.3a7715	da		phx		                PHX
.3a7716	08		php		            PHP
.3a7717	c2 20		rep #$20	            REP #$20
.3a7719	48		pha		            PHA
.3a771a	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a771d	5b		tcd		            TCD
.3a771e	68		pla		            PLA
.3a771f	28		plp		            PLP
.3a7720	e2 20		sep #$20	            SEP #$20
.3a7722	a2 00 00	ldx #$0000	                LDX #0
.3a7725	df 00 d0 3a	cmp $3ad000,x	seek_loop       CMP @lHEXDIGITS,X   ; Check the passed character against the hex digits
.3a7729	f0 08		beq $3a7733	                BEQ found
.3a772b	e8		inx		                INX                 ; Go to the next hex digit
.3a772c	e0 10 00	cpx #$0010	                CPX #$10            ; Are we out of digits?
.3a772f	f0 1b		beq $3a774c	                BEQ done            ; Yes... just return
.3a7731	80 f2		bra $3a7725	                BRA seek_loop
.3a7733					found
.3a7733	c2 20		rep #$20	            REP #$20
.3a7735	06 50		asl $0898	                ASL MPARSEDNUM
.3a7737	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7739	06 50		asl $0898	                ASL MPARSEDNUM
.3a773b	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a773d	06 50		asl $0898	                ASL MPARSEDNUM
.3a773f	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7741	06 50		asl $0898	                ASL MPARSEDNUM
.3a7743	26 52		rol $089a	                ROL MPARSEDNUM+2
.3a7745	e2 20		sep #$20	            SEP #$20
.3a7747	8a		txa		                TXA
.3a7748	05 50		ora $0898	                ORA MPARSEDNUM
.3a774a	85 50		sta $0898	                STA MPARSEDNUM
.3a774c	fa		plx		done            PLX
.3a774d	2b		pld		                PLD
.3a774e	28		plp		                PLP
.3a774f	6b		rtl		                RTL
.3a7750					AS_FIND_OPCODE
.3a7750	0b		phd		                PHD
.3a7751	8b		phb		                PHB
.3a7752	08		php		            PHP
.3a7753	c2 20		rep #$20	            REP #$20
.3a7755	48		pha		            PHA
.3a7756	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7759	5b		tcd		            TCD
.3a775a	68		pla		            PLA
.3a775b	28		plp		            PLP
.3a775c	08		php		            PHP
.3a775d	e2 20		sep #$20	            SEP #$20
.3a775f	48		pha		            PHA
.3a7760	a9 3a		lda #$3a	            LDA #`MNEMONIC_TAB
.3a7762	48		pha		            PHA
.3a7763	ab		plb		            PLB
.3a7764	68		pla		            PLA
.3a7765	28		plp		            PLP
.3a7766	e2 20		sep #$20	            SEP #$20
.3a7768	a5 4f		lda $0897	                LDA MADDR_MODE
.3a776a	29 3f		and #$3f	                AND #%00111111
.3a776c	85 4a		sta $0892	                STA MTEMP
.3a776e	c2 30		rep #$30	            REP #$30
.3a7770	a2 00 00	ldx #$0000	                LDX #0
.3a7773	a0 00 00	ldy #$0000	                LDY #0
.3a7776	bd 1d 7e	lda $3a7e1d,x	mnemonic_loop   LDA MNEMONIC_TAB,X      ; Get the mnemonic from the opcode table
.3a7779	f0 1b		beq $3a7796	                BEQ not_found           ; If it's 0, we did not find the mnemonic
.3a777b	c5 54		cmp $089c	                CMP MMNEMONIC           ; Does it match the passed mnemonic?
.3a777d	d0 0d		bne $3a778c	                BNE next_opcode         ; No: go to the next opcode
.3a777f					check_mode
.3a777f	e2 20		sep #$20	            SEP #$20
.3a7781	b9 1f 80	lda $3a801f,y	                LDA ADDRESS_TAB,Y       ; Get the corresponding address mode
.3a7784	29 3f		and #$3f	                AND #%00111111          ; Filter out effect bits
.3a7786	c5 4a		cmp $0892	                CMP MTEMP
.3a7788	f0 07		beq $3a7791	                BEQ found               ; Yes: we found the opcode
.3a778a	c2 20		rep #$20	            REP #$20
.3a778c	e8		inx		next_opcode     INX                     ; Point to the next mnemonic in the table
.3a778d	e8		inx		                INX
.3a778e	c8		iny		                INY
.3a778f	80 e5		bra $3a7776	                BRA mnemonic_loop       ; And check it
.3a7791	98		tya		found           TYA
.3a7792	38		sec		                SEC                     ; Set carry to show success
.3a7793	ab		plb		                PLB
.3a7794	2b		pld		                PLD
.3a7795	6b		rtl		                RTL
.3a7796	18		clc		not_found       CLC                     ; Clear carry to show failure
.3a7797	ab		plb		                PLB
.3a7798	2b		pld		                PLD
.3a7799	6b		rtl		                RTL
.3a779a					AS_STR_MATCH
.3a779a	08		php		                PHP
.3a779b	0b		phd		                PHD
.3a779c	08		php		            PHP
.3a779d	c2 20		rep #$20	            REP #$20
.3a779f	48		pha		            PHA
.3a77a0	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a77a3	5b		tcd		            TCD
.3a77a4	68		pla		            PLA
.3a77a5	28		plp		            PLP
.3a77a6	e2 20		sep #$20	            SEP #$20
.3a77a8	c2 10		rep #$10	            REP #$10
.3a77aa	a0 00 00	ldy #$0000	                LDY #0
.3a77ad	64 50		stz $0898	                STZ MPARSEDNUM      ; Set parsed number to 0 in anticipation of
.3a77af	64 52		stz $089a	                STZ MPARSEDNUM+2    ; hex digits in the pattern
.3a77b1	b7 03		lda [$084b],y	match_loop      LDA [MCMP_TEXT],Y   ; Get the pattern character
.3a77b3	f0 11		beq $3a77c6	                BEQ nul_check       ; If at end of pattern, check for end of test string
.3a77b5	c9 64		cmp #$64	                CMP #'d'            ; Is it a digit?
.3a77b7	f0 19		beq $3a77d2	                BEQ check_digit     ; Yes: do special check for hex digit
.3a77b9	48		pha		compare         PHA
.3a77ba	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.3a77bc	85 4a		sta $0892	                STA MTEMP
.3a77be	68		pla		                PLA
.3a77bf	c5 4a		cmp $0892	                CMP MTEMP           ; Does it match the character to test?
.3a77c1	d0 0b		bne $3a77ce	                BNE return_false    ; No: return fail
.3a77c3	c8		iny		next_char       INY                 ; Yes: test the next character
.3a77c4	80 eb		bra $3a77b1	                BRA match_loop
.3a77c6	b7 36		lda [$087e],y	nul_check       LDA [MLINEBUF],Y    ; Check to see that we're at the end of the test string
.3a77c8	d0 04		bne $3a77ce	                BNE return_false    ; If not: return false
.3a77ca	2b		pld		return_true     PLD
.3a77cb	28		plp		                PLP                 ; Return true
.3a77cc	38		sec		                SEC
.3a77cd	6b		rtl		                RTL
.3a77ce	2b		pld		return_false    PLD
.3a77cf	28		plp		                PLP                 ; Return false
.3a77d0	18		clc		                CLC
.3a77d1	6b		rtl		                RTL
.3a77d2					check_digit
.3a77d2	e2 20		sep #$20	            SEP #$20
.3a77d4	b7 36		lda [$087e],y	                LDA [MLINEBUF],Y
.3a77d6	c9 3a		cmp #$3a	                CMP #'9'+1
.3a77d8	b0 04		bcs $3a77de	                BCS check_AF
.3a77da	c9 30		cmp #$30	                CMP #'0'
.3a77dc	b0 14		bcs $3a77f2	                BCS shift_digit     ; character is in [0..9]
.3a77de	c9 47		cmp #$47	check_AF        CMP #'F'+1
.3a77e0	b0 04		bcs $3a77e6	                BCS check_lc        ; check lower case
.3a77e2	c9 41		cmp #$41	                CMP #'A'
.3a77e4	b0 0c		bcs $3a77f2	                BCS shift_digit     ; character is in [A..F]
.3a77e6	c9 67		cmp #$67	check_lc        CMP #'f'+1
.3a77e8	b0 e4		bcs $3a77ce	                BCS return_false    ; check lower case
.3a77ea	c9 61		cmp #$61	                CMP #'a'
.3a77ec	b0 02		bcs $3a77f0	                BCS to_upcase       ; character is in [A..F]
.3a77ee	80 de		bra $3a77ce	                BRA return_false    ; No match found... return false
.3a77f0	29 df		and #$df	to_upcase       AND #%11011111      ; Convert lower case to upper case
.3a77f2	22 11 77 3a	jsl $3a7711	shift_digit     JSL AS_SHIFT_HEX    ; Shift the digit into MPARSEDNUM
.3a77f6	80 cb		bra $3a77c3	                BRA next_char       ; And check the next character
.3a77f8					AS_MCMP_NEXT
.3a77f8	0b		phd		                PHD
.3a77f9	08		php		            PHP
.3a77fa	c2 20		rep #$20	            REP #$20
.3a77fc	48		pha		            PHA
.3a77fd	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7800	5b		tcd		            TCD
.3a7801	68		pla		            PLA
.3a7802	28		plp		            PLP
.3a7803	a0 00 00	ldy #$0000	                LDY #0
.3a7806	e2 20		sep #$20	            SEP #$20
.3a7808	b7 03		lda [$084b],y	loop            LDA [MCMP_TEXT],Y   ; Check to see if we have gotten to the NUL
.3a780a	f0 03		beq $3a780f	                BEQ found_nul
.3a780c	c8		iny		                INY
.3a780d	80 f9		bra $3a7808	                BRA loop
.3a780f					found_nul
.3a780f	c2 20		rep #$20	            REP #$20
.3a7811	c8		iny		                INY                 ; Got to NUL... point to next byte
.3a7812	5a		phy		                PHY
.3a7813	68		pla		                PLA                 ; And add that index to MCMP_TEXT pointer
.3a7814	18		clc		                CLC
.3a7815	65 03		adc $084b	                ADC MCMP_TEXT
.3a7817	85 03		sta $084b	                STA MCMP_TEXT
.3a7819	a5 05		lda $084d	                LDA MCMP_TEXT+2
.3a781b	69 00 00	adc #$0000	                ADC #0
.3a781e	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7820	2b		pld		                PLD
.3a7821	6b		rtl		                RTL
.3a7822					AS_FIND_MNEMO
.3a7822	0b		phd		                PHD
.3a7823	08		php		            PHP
.3a7824	c2 20		rep #$20	            REP #$20
.3a7826	48		pha		            PHA
.3a7827	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a782a	5b		tcd		            TCD
.3a782b	68		pla		            PLA
.3a782c	28		plp		            PLP
.3a782d	c2 20		rep #$20	            REP #$20
.3a782f	a5 11		lda $0859	                LDA MARG2                   ; Point MLINEBUF to the text
.3a7831	85 36		sta $087e	                STA MLINEBUF
.3a7833	a5 13		lda $085b	                LDA MARG2+2
.3a7835	85 38		sta $0880	                STA MLINEBUF+2
.3a7837	a9 ab 7c	lda #$7cab	                LDA #<>MNEMONICS_TAB        ; Point to the first mnemonic
.3a783a	85 03		sta $084b	                STA MCMP_TEXT
.3a783c	a9 3a 00	lda #$003a	                LDA #`MNEMONICS_TAB
.3a783f	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7841	22 9a 77 3a	jsl $3a779a	match_loop      JSL AS_STR_MATCH            ; Check to see if the text matches the mnemonic
.3a7845	b0 0d		bcs $3a7854	                BCS found_mnemonic          ; If so: return that we found it
.3a7847	22 f8 77 3a	jsl $3a77f8	                JSL AS_MCMP_NEXT            ; Point to the next mnemonic
.3a784b	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Check to see if it's NUL
.3a784d	d0 f2		bne $3a7841	                BNE match_loop              ; If not, check this next mnemonic
.3a784f	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Otherwise, return -1
.3a7852	80 02		bra $3a7856	                BRA done
.3a7854	a5 03		lda $084b	found_mnemonic  LDA MCMP_TEXT               ; Found it: return the address
.3a7856	2b		pld		done            PLD
.3a7857	6b		rtl		                RTL
.3a7858					AS_FIND_MODE
.3a7858	08		php		                PHP
.3a7859	0b		phd		                PHD
.3a785a	08		php		            PHP
.3a785b	c2 20		rep #$20	            REP #$20
.3a785d	48		pha		            PHA
.3a785e	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7861	5b		tcd		            TCD
.3a7862	68		pla		            PLA
.3a7863	28		plp		            PLP
.3a7864	c2 30		rep #$30	            REP #$30
.3a7866	a5 15		lda $085d	                LDA MARG3                   ; Point MLINEBUF to the operand
.3a7868	85 36		sta $087e	                STA MLINEBUF
.3a786a	a5 17		lda $085f	                LDA MARG3+2
.3a786c	85 38		sta $0880	                STA MLINEBUF+2
.3a786e	a9 37 81	lda #$8137	                LDA #<>ADDR_PATTERNS        ; Point to the first address mode pattern to check
.3a7871	85 03		sta $084b	                STA MCMP_TEXT
.3a7873	a9 3a 00	lda #$003a	                LDA #`ADDR_PATTERNS
.3a7876	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7878	22 9a 77 3a	jsl $3a779a	match_loop      JSL AS_STR_MATCH            ; Check to see if the pattern matches the operand
.3a787c	b0 22		bcs $3a78a0	                BCS is_match                ; Yes: Find address mode code
.3a787e	22 f8 77 3a	jsl $3a77f8	                JSL AS_MCMP_NEXT            ; Point to the address mode
.3a7882	c2 20		rep #$20	            REP #$20
.3a7884	18		clc		                CLC                         ; Point to the first byte of the next pattern
.3a7885	a5 03		lda $084b	                LDA MCMP_TEXT
.3a7887	69 01 00	adc #$0001	                ADC #1
.3a788a	85 03		sta $084b	                STA MCMP_TEXT
.3a788c	a5 05		lda $084d	                LDA MCMP_TEXT+2
.3a788e	69 00 00	adc #$0000	                ADC #0
.3a7891	85 05		sta $084d	                STA MCMP_TEXT+2
.3a7893	e2 20		sep #$20	            SEP #$20
.3a7895	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Is the first byte 0?
.3a7897	d0 df		bne $3a7878	                BNE match_loop              ; No: check this next pattern
.3a7899	c2 20		rep #$20	            REP #$20
.3a789b	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Yes: we didn't find a matching pattern, return -1
.3a789e	80 0d		bra $3a78ad	                BRA done
.3a78a0	22 f8 77 3a	jsl $3a77f8	is_match        JSL AS_MCMP_NEXT            ; Point to the address mode
.3a78a4	e2 20		sep #$20	            SEP #$20
.3a78a6	a7 03		lda [$084b]	                LDA [MCMP_TEXT]             ; Get the corresponding address mode code (a byte)
.3a78a8	c2 20		rep #$20	            REP #$20
.3a78aa	29 ff 00	and #$00ff	                AND #$00FF
.3a78ad	2b		pld		done            PLD
.3a78ae	28		plp		                PLP
.3a78af	6b		rtl		                RTL
.3a78b0					IMDISASSEMBLE
.3a78b0	08		php		                PHP
.3a78b1	8b		phb		                PHB
.3a78b2	0b		phd		                PHD
.3a78b3	08		php		            PHP
.3a78b4	c2 20		rep #$20	            REP #$20
.3a78b6	48		pha		            PHA
.3a78b7	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a78ba	5b		tcd		            TCD
.3a78bb	68		pla		            PLA
.3a78bc	28		plp		            PLP
.3a78bd	e2 20		sep #$20	            SEP #$20
.3a78bf	a9 00		lda #$00	                LDA #0
.3a78c1	8f b6 08 00	sta $0008b6	                STA @lLINECOUNT     ; Clear the pagination line counter
.3a78c5	a5 31		lda $0879	                LDA MARG_LEN        ; Check the number of arguments
.3a78c7	c9 02		cmp #$02	                CMP #2
.3a78c9	b0 16		bcs $3a78e1	                BGE set_cursor      ; 2>= arguments? Use them as-is
.3a78cb	c9 01		cmp #$01	                CMP #1
.3a78cd	90 20		bcc $3a78ef	                BLT no_args         ; No arguments passed? Use defaults
.3a78cf	c2 20		rep #$20	            REP #$20
.3a78d1	18		clc		                CLC
.3a78d2	a5 0d		lda $0855	                LDA MARG1
.3a78d4	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a78d7	85 11		sta $0859	                STA MARG2
.3a78d9	e2 20		sep #$20	            SEP #$20
.3a78db	a5 0f		lda $0857	                LDA MARG1+2
.3a78dd	69 00		adc #$00	                ADC #0
.3a78df	85 13		sta $085b	                STA MARG2+2
.3a78e1					set_cursor
.3a78e1	c2 20		rep #$20	            REP #$20
.3a78e3	a5 0d		lda $0855	                LDA MARG1
.3a78e5	85 32		sta $087a	                STA MCURSOR
.3a78e7	e2 20		sep #$20	            SEP #$20
.3a78e9	a5 0f		lda $0857	                LDA MARG1+2
.3a78eb	85 34		sta $087c	                STA MCURSOR+2
.3a78ed	80 12		bra $3a7901	                BRA dasm_loop
.3a78ef					no_args
.3a78ef	c2 20		rep #$20	            REP #$20
.3a78f1	18		clc		                CLC
.3a78f2	a5 32		lda $087a	                LDA MCURSOR
.3a78f4	69 00 01	adc #$0100	                ADC #MMEMDUMPSIZE
.3a78f7	85 11		sta $0859	                STA MARG2
.3a78f9	e2 20		sep #$20	            SEP #$20
.3a78fb	a5 34		lda $087c	                LDA MCURSOR+2
.3a78fd	69 00		adc #$00	                ADC #0
.3a78ff	85 13		sta $085b	                STA MARG2+2
.3a7901	22 1c 79 3a	jsl $3a791c	dasm_loop       JSL DS_PR_LINE
.3a7905	e2 20		sep #$20	            SEP #$20
.3a7907	a5 34		lda $087c	                LDA MCURSOR+2           ; Are the banks the same?
.3a7909	c5 13		cmp $085b	                CMP MARG2+2
.3a790b	90 f4		bcc $3a7901	                BLT dasm_loop           ; No: continue
.3a790d	c2 20		rep #$20	            REP #$20
.3a790f	a5 32		lda $087a	                LDA MCURSOR             ; Are the lower bits the same?
.3a7911	c5 11		cmp $0859	                CMP MARG2
.3a7913	90 ec		bcc $3a7901	                BLT dasm_loop           ; Nope... keep going
.3a7915					done
.3a7915	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a7918	2b		pld		                PLD
.3a7919	ab		plb		                PLB
.3a791a	28		plp		                PLP
.3a791b	6b		rtl		                RTL
.3a791c					DS_PR_LINE
.3a791c	08		php		                PHP
.3a791d	0b		phd		                PHD
.3a791e	e2 20		sep #$20	            SEP #$20
.3a7920	a9 41		lda #$41	                LDA #'A'
.3a7922	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7925	a9 20		lda #$20	                LDA #' '
.3a7927	20 18 00	jsr $3a0018	            JSR PRINTC
.3a792a	08		php		            PHP
.3a792b	c2 20		rep #$20	            REP #$20
.3a792d	48		pha		            PHA
.3a792e	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a7931	5b		tcd		            TCD
.3a7932	68		pla		            PLA
.3a7933	28		plp		            PLP
.3a7934	c2 20		rep #$20	            REP #$20
.3a7936	a5 00		lda $087a	                LDA MCURSOR
.3a7938	85 18		sta $0892	                STA MTEMP
.3a793a	e2 20		sep #$20	            SEP #$20
.3a793c	a5 02		lda $087c	                LDA MCURSOR+2
.3a793e	85 1a		sta $0894	                STA MTEMP+2
.3a7940	22 83 7c 3a	jsl $3a7c83	                JSL M_PR_ADDR
.3a7944	a9 20		lda #$20	                LDA #' '
.3a7946	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7949	c2 20		rep #$20	            REP #$20
.3a794b	18		clc		                CLC
.3a794c	a5 00		lda $087a	                LDA MCURSOR
.3a794e	69 01 00	adc #$0001	                ADC #1
.3a7951	85 18		sta $0892	                STA MTEMP
.3a7953	e2 20		sep #$20	            SEP #$20
.3a7955	a5 02		lda $087c	                LDA MCURSOR+2
.3a7957	69 00		adc #$00	                ADC #0
.3a7959	85 1a		sta $0894	                STA MTEMP+2
.3a795b	e2 20		sep #$20	            SEP #$20
.3a795d	c2 10		rep #$10	            REP #$10
.3a795f	a7 00		lda [$087a]	                LDA [MCURSOR]           ; Get the mnemonic
.3a7961	c9 c2		cmp #$c2	                CMP #$C2                ; Is it REP?
.3a7963	d0 0b		bne $3a7970	                BNE check_sep           ; No: check to see if it is SEP
.3a7965	48		pha		handle_rep      PHA
.3a7966	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.3a7968	49 ff		eor #$ff	                EOR #$FF                ; Invert the bits
.3a796a	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Mask off the bits in the CPUSTAT
.3a796e	80 0b		bra $3a797b	                BRA save_stat
.3a7970	c9 e2		cmp #$e2	check_sep       CMP #$E2                ; Is it SEP?
.3a7972	d0 0c		bne $3a7980	                BNE get_op_index        ; No: process the instruction regularly
.3a7974	48		pha		handle_sep      PHA
.3a7975	a7 18		lda [$0892]	                LDA [MTEMP]             ; Get the operand
.3a7977	0f 96 08 00	ora $000896	                ORA @lMCPUSTAT          ; Activate the bits in the CPUSTAT
.3a797b	8f 96 08 00	sta $000896	save_stat       STA @lMCPUSTAT          ; And save it back
.3a797f	68		pla		                PLA
.3a7980					get_op_index
.3a7980	c2 20		rep #$20	            REP #$20
.3a7982	29 ff 00	and #$00ff	                AND #$00FF
.3a7985	0a		asl a		                ASL A
.3a7986	aa		tax		                TAX                     ; Get the index into the mnemonic lookup table
.3a7987	bf 1d 7e 3a	lda $3a7e1d,x	                LDA @lMNEMONIC_TAB,X    ; Get the mnemonic
.3a798b	aa		tax		                TAX
.3a798c	22 fd 7b 3a	jsl $3a7bfd	                JSL DS_PR_MNEMONIC      ; And print it
.3a7990	e2 20		sep #$20	            SEP #$20
.3a7992	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7994	aa		tax		                TAX
.3a7995	bf 1f 80 3a	lda $3a801f,x	pr_operand      LDA @lADDRESS_TAB,X     ; Get the addressing mode for the instruction
.3a7999	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR        ; Advance the cursor to the next byte
.3a799d	22 aa 79 3a	jsl $3a79aa	                JSL DS_PR_OPERAND       ; And print the correct operand
.3a79a1	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a79a4	20 a0 02	jsr $3a02a0	            JSR PAGINATE
.3a79a7	2b		pld		                PLD
.3a79a8	28		plp		                PLP
.3a79a9	6b		rtl		                RTL
.3a79aa					DS_PR_OPERAND
.3a79aa	08		php		                PHP
.3a79ab	e2 20		sep #$20	            SEP #$20
.3a79ad	48		pha		                PHA             ; Save the address mode so we can get to the M and X flags
.3a79ae	29 3f		and #$3f	                AND #%00111111  ; Filter out the mode flags
.3a79b0	0a		asl a		                ASL A           ; Compute the index to the table
.3a79b1	c2 10		rep #$10	            REP #$10
.3a79b3	aa		tax		                TAX
.3a79b4	68		pla		                PLA             ; Restore A
.3a79b5	7c b8 79	jmp ($3a79b8,x)	                JMP (dispatch,X)
>3a79b8	e8 79				dispatch        .word <>is_dp_ind_x
>3a79ba	03 7a				                .word <>is_dp
>3a79bc	0a 7a				                .word <>is_imm
>3a79be	2f 7a				                .word <>is_abs
>3a79c0	36 7a				                .word <>is_dp_ind_y
>3a79c2	51 7a				                .word <>is_dp_x
>3a79c4	73 7a				                .word <>is_abs_y
>3a79c6	84 7a				                .word <>is_abs_x
>3a79c8	c1 7a				                .word <>is_accumulator
>3a79ca	c9 7a				                .word <>is_stack_r
>3a79cc	da 7a				                .word <>is_dp_long
>3a79ce	eb 7a				                .word <>is_abs_long
>3a79d0	f2 7a				                .word <>is_stack_r_y
>3a79d2	17 7b				                .word <>is_dp_y_long
>3a79d4	44 7b				                .word <>is_abs_x_long
>3a79d6	b0 7a				                .word <>is_dp_ind
>3a79d8	95 7a				                .word <>is_abs_x_id
>3a79da	62 7a				                .word <>is_dp_y
>3a79dc	37 7b				                .word <>is_pc_rel
>3a79de	41 7b				                .word <>is_implied
>3a79e0	55 7b				                .word <>is_xyc
>3a79e2	84 7b				                .word <>is_abs_ind
>3a79e4	32 7b				                .word <>is_pc_rel_long
>3a79e6	95 7b				                .word <>is_abs_ind_long
.3a79e8	a9 28		lda #$28	is_dp_ind_x     LDA #'('                ; Print (dd,X)
.3a79ea	20 18 00	jsr $3a0018	            JSR PRINTC
.3a79ed	22 ac 7b 3a	jsl $3a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.3a79f1	a9 2c		lda #$2c	                LDA #','
.3a79f3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a79f6	a9 58		lda #$58	                LDA #'X'
.3a79f8	20 18 00	jsr $3a0018	            JSR PRINTC
.3a79fb	a9 29		lda #$29	                LDA #')'
.3a79fd	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a00	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a03	22 ac 7b 3a	jsl $3a7bac	is_dp           JSL DS_PR_OPERAND1      ; Print dd
.3a7a07	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a0a					is_imm
.3a7a0a	e2 20		sep #$20	            SEP #$20
.3a7a0c	48		pha		                PHA
.3a7a0d	a9 23		lda #$23	                LDA #'#'
.3a7a0f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a12	68		pla		                PLA
.3a7a13	29 c0		and #$c0	                AND #%11000000          ; Filter so we just look at the mode bits
.3a7a15	c9 00		cmp #$00	                CMP #$00                ; Are any set to check?
.3a7a17	f0 0f		beq $3a7a28	                BEQ is_imm_short        ; No: treat it as a short always
.3a7a19	4a		lsr a		                LSR A                   ; Move the flag bits right by 2 to match
.3a7a1a	4a		lsr a		                LSR A                   ; the positions of the bits in the CPU status register
.3a7a1b	2f 96 08 00	and $000896	                AND @lMCPUSTAT          ; Otherwise, filter the mode bit we care about
.3a7a1f	d0 07		bne $3a7a28	                BNE is_imm_short        ; If it is set, immediate operation is short
.3a7a21	22 b6 7b 3a	jsl $3a7bb6	                JSL DS_PR_OPERAND2      ; Print dddd
.3a7a25	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a28	22 ac 7b 3a	jsl $3a7bac	is_imm_short    JSL DS_PR_OPERAND1      ; Print dd
.3a7a2c	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a2f	22 b6 7b 3a	jsl $3a7bb6	is_abs          JSL DS_PR_OPERAND2      ; Print dddd
.3a7a33	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a36	a9 28		lda #$28	is_dp_ind_y     LDA #'('                ; Print (dd),Y
.3a7a38	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a3b	22 ac 7b 3a	jsl $3a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.3a7a3f	a9 29		lda #$29	                LDA #')'
.3a7a41	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a44	a9 2c		lda #$2c	                LDA #','
.3a7a46	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a49	a9 59		lda #$59	                LDA #'Y'
.3a7a4b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a4e	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a51	22 ac 7b 3a	jsl $3a7bac	is_dp_x         JSL DS_PR_OPERAND1      ; Print dd,X
.3a7a55	a9 2c		lda #$2c	                LDA #','
.3a7a57	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a5a	a9 58		lda #$58	                LDA #'X'
.3a7a5c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a5f	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a62	22 ac 7b 3a	jsl $3a7bac	is_dp_y         JSL DS_PR_OPERAND1      ; Print dd,Y
.3a7a66	a9 2c		lda #$2c	                LDA #','
.3a7a68	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a6b	a9 59		lda #$59	                LDA #'Y'
.3a7a6d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a70	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a73	22 b6 7b 3a	jsl $3a7bb6	is_abs_y        JSL DS_PR_OPERAND2      ; Print dddd,Y
.3a7a77	a9 2c		lda #$2c	                LDA #','
.3a7a79	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a7c	a9 59		lda #$59	                LDA #'Y'
.3a7a7e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a81	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a84	22 b6 7b 3a	jsl $3a7bb6	is_abs_x        JSL DS_PR_OPERAND2      ; Print dddd,X
.3a7a88	a9 2c		lda #$2c	                LDA #','
.3a7a8a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a8d	a9 58		lda #$58	                LDA #'X'
.3a7a8f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a92	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7a95	a9 28		lda #$28	is_abs_x_id     LDA #'('
.3a7a97	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7a9a	22 b6 7b 3a	jsl $3a7bb6	                JSL DS_PR_OPERAND2      ; Print (dddd,X)
.3a7a9e	a9 2c		lda #$2c	                LDA #','
.3a7aa0	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7aa3	a9 58		lda #$58	                LDA #'X'
.3a7aa5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7aa8	a9 29		lda #$29	                LDA #')'
.3a7aaa	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7aad	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7ab0	a9 28		lda #$28	is_dp_ind       LDA #'('
.3a7ab2	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ab5	22 ac 7b 3a	jsl $3a7bac	                JSL DS_PR_OPERAND1      ; Print (dd)
.3a7ab9	a9 29		lda #$29	                LDA #')'
.3a7abb	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7abe	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7ac1	a9 41		lda #$41	is_accumulator  LDA #'A'                ; Print A
.3a7ac3	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ac6	4c aa 7b	jmp $3a7baa	                JMP done
.3a7ac9	22 ac 7b 3a	jsl $3a7bac	is_stack_r      JSL DS_PR_OPERAND1      ; Print dd,S
.3a7acd	a9 2c		lda #$2c	                LDA #','
.3a7acf	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ad2	a9 53		lda #$53	                LDA #'S'
.3a7ad4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ad7	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7ada	a9 5b		lda #$5b	is_dp_long      LDA #'['                ; [dd]
.3a7adc	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7adf	22 ac 7b 3a	jsl $3a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.3a7ae3	a9 5d		lda #$5d	                LDA #']'
.3a7ae5	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ae8	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7aeb	22 c4 7b 3a	jsl $3a7bc4	is_abs_long     JSL DS_PR_OPERAND3      ; Print dddddd
.3a7aef	4c aa 7b	jmp $3a7baa	                JMP done
.3a7af2	a9 28		lda #$28	is_stack_r_y    LDA #'('                ; (dd,S),Y
.3a7af4	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7af7	22 ac 7b 3a	jsl $3a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.3a7afb	a9 2c		lda #$2c	                LDA #','
.3a7afd	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b00	a9 53		lda #$53	                LDA #'S'
.3a7b02	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b05	a9 29		lda #$29	                LDA #')'
.3a7b07	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b0a	a9 2c		lda #$2c	                LDA #','
.3a7b0c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b0f	a9 59		lda #$59	                LDA #'Y'
.3a7b11	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b14	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7b17	a9 5b		lda #$5b	is_dp_y_long    LDA #'['                ; [dd],Y
.3a7b19	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b1c	22 ac 7b 3a	jsl $3a7bac	                JSL DS_PR_OPERAND1      ; Print dd
.3a7b20	a9 5d		lda #$5d	                LDA #']'
.3a7b22	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b25	a9 2c		lda #$2c	                LDA #','
.3a7b27	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b2a	a9 59		lda #$59	                LDA #'Y'
.3a7b2c	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b2f	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7b32	a0 02 00	ldy #$0002	is_pc_rel_long  LDY #2
.3a7b35	80 03		bra $3a7b3a	                BRA do_pcrel
.3a7b37	a0 01 00	ldy #$0001	is_pc_rel       LDY #1
.3a7b3a	22 2a 7c 3a	jsl $3a7c2a	do_pcrel        JSL DS_PR_PCREL
.3a7b3e	4c aa 7b	jmp $3a7baa	                JMP done
.3a7b41	4c aa 7b	jmp $3a7baa	is_implied      JMP done
.3a7b44	22 c4 7b 3a	jsl $3a7bc4	is_abs_x_long   JSL DS_PR_OPERAND3      ; Print dddddd
.3a7b48	a9 2c		lda #$2c	                LDA #','
.3a7b4a	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b4d	a9 58		lda #$58	                LDA #'X'
.3a7b4f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b52	4c aa 7b	jmp $3a7baa	                JMP done
.3a7b55	a9 23		lda #$23	is_xyc          LDA #'#'
.3a7b57	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b5a	8b		phb		                PHB                     ; Make sure the databank is pointed to our number
.3a7b5b	a5 02		lda $087c	                LDA MCURSOR+2
.3a7b5d	48		pha		                PHA
.3a7b5e	ab		plb		                PLB
.3a7b5f	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.3a7b61	e8		inx		                INX
.3a7b62	a0 01 00	ldy #$0001	                LDY #1
.3a7b65	22 99 02 3a	jsl $3a0299	                JSL PRINTH
.3a7b69	a9 2c		lda #$2c	                LDA #','
.3a7b6b	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b6e	a9 23		lda #$23	                LDA #'#'
.3a7b70	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b73	a6 00		ldx $087a	                LDX MCURSOR             ; Print dd
.3a7b75	a0 01 00	ldy #$0001	                LDY #1
.3a7b78	22 99 02 3a	jsl $3a0299	                JSL PRINTH
.3a7b7c	ab		plb		                PLB                     ; Get our old data bank back
.3a7b7d	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a7b81	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7b84	a9 28		lda #$28	is_abs_ind      LDA #'('
.3a7b86	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b89	22 b6 7b 3a	jsl $3a7bb6	                JSL DS_PR_OPERAND2      ; Print (dddd)
.3a7b8d	a9 29		lda #$29	                LDA #')'
.3a7b8f	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b92	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7b95	a9 5b		lda #$5b	is_abs_ind_long LDA #'['
.3a7b97	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7b9a	22 b6 7b 3a	jsl $3a7bb6	                JSL DS_PR_OPERAND2      ; Print [dddd]
.3a7b9e	a9 5d		lda #$5d	                LDA #']'
.3a7ba0	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ba3	4c a6 7b	jmp $3a7ba6	                JMP done_1
.3a7ba6	22 d9 81 3a	jsl $3a81d9	done_1          JSL M_INC_CURSOR    ; Skip over a single byte operand
.3a7baa	28		plp		done            PLP
.3a7bab	6b		rtl		                RTL
.3a7bac					DS_PR_OPERAND1
.3a7bac	08		php		                PHP
.3a7bad	e2 20		sep #$20	            SEP #$20
.3a7baf	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7bb1	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a7bb4	28		plp		                PLP
.3a7bb5	6b		rtl		                RTL
.3a7bb6					DS_PR_OPERAND2
.3a7bb6	08		php		                PHP
.3a7bb7	c2 30		rep #$30	            REP #$30
.3a7bb9	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7bbb	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a7bbe	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a7bc2	28		plp		                PLP
.3a7bc3	6b		rtl		                RTL
.3a7bc4					DS_PR_OPERAND3
.3a7bc4	08		php		                PHP
.3a7bc5	8b		phb		                PHB
.3a7bc6	0b		phd		                PHD
.3a7bc7	c2 30		rep #$30	            REP #$30
.3a7bc9	5a		phy		                PHY
.3a7bca	08		php		            PHP
.3a7bcb	c2 20		rep #$20	            REP #$20
.3a7bcd	48		pha		            PHA
.3a7bce	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a7bd1	5b		tcd		            TCD
.3a7bd2	68		pla		            PLA
.3a7bd3	28		plp		            PLP
.3a7bd4	08		php		            PHP
.3a7bd5	e2 20		sep #$20	            SEP #$20
.3a7bd7	48		pha		            PHA
.3a7bd8	a9 00		lda #$00	            LDA #`MTEMP
.3a7bda	48		pha		            PHA
.3a7bdb	ab		plb		            PLB
.3a7bdc	68		pla		            PLA
.3a7bdd	28		plp		            PLP
.3a7bde	e2 20		sep #$20	            SEP #$20
.3a7be0	a0 00 00	ldy #$0000	                LDY #0
.3a7be3	a7 00		lda [$087a]	copy_loop       LDA [MCURSOR]       ; Copy the address pointed to by MCURSOR
.3a7be5	99 92 08	sta $0892,y	                STA MTEMP,Y         ; to MTEMP
.3a7be8	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a7bec	c8		iny		                INY
.3a7bed	c0 03 00	cpy #$0003	                CPY #3
.3a7bf0	d0 f1		bne $3a7be3	                BNE copy_loop
.3a7bf2	22 83 7c 3a	jsl $3a7c83	                JSL M_PR_ADDR       ; Print the address
.3a7bf6	c2 30		rep #$30	            REP #$30
.3a7bf8	7a		ply		                PLY
.3a7bf9	2b		pld		                PLD
.3a7bfa	ab		plb		                PLB
.3a7bfb	28		plp		                PLP
.3a7bfc	6b		rtl		                RTL
.3a7bfd					DS_PR_MNEMONIC
.3a7bfd	08		php		                PHP
.3a7bfe	8b		phb		                PHB
.3a7bff	e2 20		sep #$20	            SEP #$20
.3a7c01	c2 10		rep #$10	            REP #$10
.3a7c03	08		php		            PHP
.3a7c04	e2 20		sep #$20	            SEP #$20
.3a7c06	48		pha		            PHA
.3a7c07	a9 3a		lda #$3a	            LDA #`MN_ORA
.3a7c09	48		pha		            PHA
.3a7c0a	ab		plb		            PLB
.3a7c0b	68		pla		            PLA
.3a7c0c	28		plp		            PLP
.3a7c0d	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a7c10	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7c13	e8		inx		                INX
.3a7c14	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a7c17	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7c1a	e8		inx		                INX
.3a7c1b	bd 00 00	lda $3a0000,x	                LDA #0,B,X
.3a7c1e	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7c21	e8		inx		                INX
.3a7c22	a9 20		lda #$20	                LDA #' '            ; Print a space
.3a7c24	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7c27	ab		plb		                PLB
.3a7c28	28		plp		                PLP
.3a7c29	6b		rtl		                RTL
.3a7c2a					DS_PR_PCREL
.3a7c2a	08		php		                PHP
.3a7c2b	0b		phd		                PHD
.3a7c2c	08		php		            PHP
.3a7c2d	c2 20		rep #$20	            REP #$20
.3a7c2f	48		pha		            PHA
.3a7c30	a9 7a 08	lda #$087a	            LDA #MCURSOR
.3a7c33	5b		tcd		            TCD
.3a7c34	68		pla		            PLA
.3a7c35	28		plp		            PLP
.3a7c36	e2 20		sep #$20	            SEP #$20
.3a7c38	c0 02 00	cpy #$0002	                CPY #2
.3a7c3b	f0 14		beq $3a7c51	                BEQ offset_2
.3a7c3d	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7c3f	85 18		sta $0892	                STA MTEMP
.3a7c41	30 06		bmi $3a7c49	                BMI is_negative
.3a7c43	64 19		stz $0893	                STZ MTEMP+1
.3a7c45	64 1a		stz $0894	                STZ MTEMP+2
.3a7c47	80 1e		bra $3a7c67	                BRA add_offset
.3a7c49	a9 ff		lda #$ff	is_negative     LDA #$FF
.3a7c4b	85 19		sta $0893	                STA MTEMP+1
.3a7c4d	85 1a		sta $0894	                STA MTEMP+2
.3a7c4f	80 16		bra $3a7c67	                BRA add_offset
.3a7c51	a7 00		lda [$087a]	offset_2        LDA [MCURSOR]
.3a7c53	85 18		sta $0892	                STA MTEMP
.3a7c55	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a7c59	a7 00		lda [$087a]	                LDA [MCURSOR]
.3a7c5b	85 19		sta $0893	                STA MTEMP+1
.3a7c5d	30 04		bmi $3a7c63	                BMI is_negative2
.3a7c5f	64 1a		stz $0894	                STZ MTEMP+2
.3a7c61	80 04		bra $3a7c67	                BRA add_offset
.3a7c63	a9 ff		lda #$ff	is_negative2    LDA #$FF
.3a7c65	85 1a		sta $0894	                STA MTEMP+2
.3a7c67					add_offset
.3a7c67	c2 20		rep #$20	            REP #$20
.3a7c69	38		sec		                SEC             ; Add 1 to the offset
.3a7c6a	a5 00		lda $087a	                LDA MCURSOR
.3a7c6c	65 18		adc $0892	                ADC MTEMP
.3a7c6e	85 18		sta $0892	                STA MTEMP
.3a7c70	e2 20		sep #$20	            SEP #$20
.3a7c72	a5 02		lda $087c	                LDA MCURSOR+2
.3a7c74	65 1a		adc $0894	                ADC MTEMP+2
.3a7c76	85 1a		sta $0894	                STA MTEMP+2
.3a7c78	22 83 7c 3a	jsl $3a7c83	                JSL M_PR_ADDR
.3a7c7c	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a7c80	2b		pld		                PLD
.3a7c81	28		plp		                PLP
.3a7c82	6b		rtl		                RTL
.3a7c83					M_PR_ADDR
.3a7c83	08		php		                PHP
.3a7c84	0b		phd		                PHD
.3a7c85	c2 20		rep #$20	            REP #$20
.3a7c87	48		pha		                PHA
.3a7c88	08		php		            PHP
.3a7c89	c2 20		rep #$20	            REP #$20
.3a7c8b	48		pha		            PHA
.3a7c8c	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a7c8f	5b		tcd		            TCD
.3a7c90	68		pla		            PLA
.3a7c91	28		plp		            PLP
.3a7c92	e2 20		sep #$20	            SEP #$20
.3a7c94	a5 4c		lda $0894	                LDA MTEMP+2     ; Print the bank byte of the address
.3a7c96	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a7c99	e2 20		sep #$20	            SEP #$20
.3a7c9b	a9 3a		lda #$3a	                LDA #':'
.3a7c9d	20 18 00	jsr $3a0018	            JSR PRINTC
.3a7ca0	c2 20		rep #$20	            REP #$20
.3a7ca2	a5 4a		lda $0892	                LDA MTEMP       ; Print the lower 16-bits of the address
.3a7ca4	20 26 03	jsr $3a0326	            JSR PRHEXW
.3a7ca7	68		pla		                PLA
.3a7ca8	2b		pld		                PLD
.3a7ca9	28		plp		                PLP
.3a7caa	6b		rtl		                RTL
.3a7cab					MNEMONICS_TAB
.3a7cab					MN_ORA
>3a7cab	4f 52 41 00			            .null "ORA"
.3a7caf					MN_AND
>3a7caf	41 4e 44 00			            .null "AND"
.3a7cb3					MN_EOR
>3a7cb3	45 4f 52 00			            .null "EOR"
.3a7cb7					MN_ADC
>3a7cb7	41 44 43 00			            .null "ADC"
.3a7cbb					MN_STA
>3a7cbb	53 54 41 00			            .null "STA"
.3a7cbf					MN_LDA
>3a7cbf	4c 44 41 00			            .null "LDA"
.3a7cc3					MN_CMP
>3a7cc3	43 4d 50 00			            .null "CMP"
.3a7cc7					MN_SBC
>3a7cc7	53 42 43 00			            .null "SBC"
.3a7ccb					MN_ASL
>3a7ccb	41 53 4c 00			            .null "ASL"
.3a7ccf					MN_ROL
>3a7ccf	52 4f 4c 00			            .null "ROL"
.3a7cd3					MN_LSR
>3a7cd3	4c 53 52 00			            .null "LSR"
.3a7cd7					MN_ROR
>3a7cd7	52 4f 52 00			            .null "ROR"
.3a7cdb					MN_STX
>3a7cdb	53 54 58 00			            .null "STX"
.3a7cdf					MN_LDX
>3a7cdf	4c 44 58 00			            .null "LDX"
.3a7ce3					MN_DEC
>3a7ce3	44 45 43 00			            .null "DEC"
.3a7ce7					MN_INC
>3a7ce7	49 4e 43 00			            .null "INC"
.3a7ceb					MN_BIT
>3a7ceb	42 49 54 00			            .null "BIT"
.3a7cef					MN_JMP
>3a7cef	4a 4d 50 00			            .null "JMP"
.3a7cf3					MN_STY
>3a7cf3	53 54 59 00			            .null "STY"
.3a7cf7					MN_LDY
>3a7cf7	4c 44 59 00			            .null "LDY"
.3a7cfb					MN_CPY
>3a7cfb	43 50 59 00			            .null "CPY"
.3a7cff					MN_CPX
>3a7cff	43 50 58 00			            .null "CPX"
.3a7d03					MN_BRK
>3a7d03	42 52 4b 00			            .null "BRK"
.3a7d07					MN_JSR
>3a7d07	4a 53 52 00			            .null "JSR"
.3a7d0b					MN_RTI
>3a7d0b	52 54 49 00			            .null "RTI"
.3a7d0f					MN_RTS
>3a7d0f	52 54 53 00			            .null "RTS"
.3a7d13					MN_PHP
>3a7d13	50 48 50 00			            .null "PHP"
.3a7d17					MN_PLP
>3a7d17	50 4c 50 00			            .null "PLP"
.3a7d1b					MN_PHA
>3a7d1b	50 48 41 00			            .null "PHA"
.3a7d1f					MN_PLA
>3a7d1f	50 4c 41 00			            .null "PLA"
.3a7d23					MN_DEY
>3a7d23	44 45 59 00			            .null "DEY"
.3a7d27					MN_TAY
>3a7d27	54 41 59 00			            .null "TAY"
.3a7d2b					MN_INY
>3a7d2b	49 4e 59 00			            .null "INY"
.3a7d2f					MN_INX
>3a7d2f	49 4e 58 00			            .null "INX"
.3a7d33					MN_CLC
>3a7d33	43 4c 43 00			            .null "CLC"
.3a7d37					MN_SEC
>3a7d37	53 45 43 00			            .null "SEC"
.3a7d3b					MN_CLI
>3a7d3b	43 4c 49 00			            .null "CLI"
.3a7d3f					MN_SEI
>3a7d3f	53 45 49 00			            .null "SEI"
.3a7d43					MN_TYA
>3a7d43	54 59 41 00			            .null "TYA"
.3a7d47					MN_CLV
>3a7d47	43 4c 56 00			            .null "CLV"
.3a7d4b					MN_CLD
>3a7d4b	43 4c 44 00			            .null "CLD"
.3a7d4f					MN_SED
>3a7d4f	53 45 44 00			            .null "SED"
.3a7d53					MN_TXA
>3a7d53	54 58 41 00			            .null "TXA"
.3a7d57					MN_TXS
>3a7d57	54 58 53 00			            .null "TXS"
.3a7d5b					MN_TAX
>3a7d5b	54 41 58 00			            .null "TAX"
.3a7d5f					MN_TSX
>3a7d5f	54 53 58 00			            .null "TSX"
.3a7d63					MN_DEX
>3a7d63	44 45 58 00			            .null "DEX"
.3a7d67					MN_NOP
>3a7d67	4e 4f 50 00			            .null "NOP"
.3a7d6b					MN_BPL
>3a7d6b	42 50 4c 00			            .null "BPL"
.3a7d6f					MN_BMI
>3a7d6f	42 4d 49 00			            .null "BMI"
.3a7d73					MN_BVC
>3a7d73	42 56 43 00			            .null "BVC"
.3a7d77					MN_BVS
>3a7d77	42 56 53 00			            .null "BVS"
.3a7d7b					MN_BCC
>3a7d7b	42 43 43 00			            .null "BCC"
.3a7d7f					MN_BCS
>3a7d7f	42 43 53 00			            .null "BCS"
.3a7d83					MN_BNE
>3a7d83	42 4e 45 00			            .null "BNE"
.3a7d87					MN_BEQ
>3a7d87	42 45 51 00			            .null "BEQ"
.3a7d8b					MN_TSB
>3a7d8b	54 53 42 00			            .null "TSB"
.3a7d8f					MN_TRB
>3a7d8f	54 52 42 00			            .null "TRB"
.3a7d93					MN_STZ
>3a7d93	53 54 5a 00			            .null "STZ"
.3a7d97					MN_BRA
>3a7d97	42 52 41 00			            .null "BRA"
.3a7d9b					MN_PHY
>3a7d9b	50 48 59 00			            .null "PHY"
.3a7d9f					MN_PLY
>3a7d9f	50 4c 59 00			            .null "PLY"
.3a7da3					MN_PHX
>3a7da3	50 48 58 00			            .null "PHX"
.3a7da7					MN_PLX
>3a7da7	50 4c 58 00			            .null "PLX"
.3a7dab					MN_PHD
>3a7dab	50 48 44 00			            .null "PHD"
.3a7daf					MN_PLD
>3a7daf	50 4c 44 00			            .null "PLD"
.3a7db3					MN_PHK
>3a7db3	50 48 4b 00			            .null "PHK"
.3a7db7					MN_RTL
>3a7db7	52 54 4c 00			            .null "RTL"
.3a7dbb					MN_PHB
>3a7dbb	50 48 42 00			            .null "PHB"
.3a7dbf					MN_PLB
>3a7dbf	50 4c 42 00			            .null "PLB"
.3a7dc3					MN_WAI
>3a7dc3	57 41 49 00			            .null "WAI"
.3a7dc7					MN_XBA
>3a7dc7	58 42 41 00			            .null "XBA"
.3a7dcb					MN_TCS
>3a7dcb	54 43 53 00			            .null "TCS"
.3a7dcf					MN_TSC
>3a7dcf	54 53 43 00			            .null "TSC"
.3a7dd3					MN_TCD
>3a7dd3	54 43 44 00			            .null "TCD"
.3a7dd7					MN_TDC
>3a7dd7	54 44 43 00			            .null "TDC"
.3a7ddb					MN_TXY
>3a7ddb	54 58 59 00			            .null "TXY"
.3a7ddf					MN_TYX
>3a7ddf	54 59 58 00			            .null "TYX"
.3a7de3					MN_STP
>3a7de3	53 54 50 00			            .null "STP"
.3a7de7					MN_XCE
>3a7de7	58 43 45 00			            .null "XCE"
.3a7deb					MN_COP
>3a7deb	43 4f 50 00			            .null "COP"
.3a7def					MN_JSL
>3a7def	4a 53 4c 00			            .null "JSL"
.3a7df3					MN_WDM
>3a7df3	57 44 4d 00			            .null "WDM"
.3a7df7					MN_PER
>3a7df7	50 45 52 00			            .null "PER"
.3a7dfb					MN_BRL
>3a7dfb	42 52 4c 00			            .null "BRL"
.3a7dff					MN_REP
>3a7dff	52 45 50 00			            .null "REP"
.3a7e03					MN_SEP
>3a7e03	53 45 50 00			            .null "SEP"
.3a7e07					MN_MVP
>3a7e07	4d 56 50 00			            .null "MVP"
.3a7e0b					MN_MVN
>3a7e0b	4d 56 4e 00			            .null "MVN"
.3a7e0f					MN_PEI
>3a7e0f	50 45 49 00			            .null "PEI"
.3a7e13					MN_PEA
>3a7e13	50 45 41 00			            .null "PEA"
.3a7e17					MN_JML
>3a7e17	4a 4d 4c 00			            .null "JML"
>3a7e1b	00 00				            .byte 0, 0
>3a7e1d	03 7d ab 7c eb 7d ab 7c		MNEMONIC_TAB    .word <>MN_BRK, <>MN_ORA, <>MN_COP, <>MN_ORA, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 0x
>3a7e25	8b 7d ab 7c cb 7c ab 7c
>3a7e2d	13 7d ab 7c cb 7c ab 7d		                .word <>MN_PHP, <>MN_ORA, <>MN_ASL, <>MN_PHD, <>MN_TSB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>3a7e35	8b 7d ab 7c cb 7c ab 7c
>3a7e3d	6b 7d ab 7c ab 7c ab 7c		                .word <>MN_BPL, <>MN_ORA, <>MN_ORA, <>MN_ORA, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA    ; 1x
>3a7e45	8f 7d ab 7c cb 7c ab 7c
>3a7e4d	33 7d ab 7c e7 7c cb 7d		                .word <>MN_CLC, <>MN_ORA, <>MN_INC, <>MN_TCS, <>MN_TRB, <>MN_ORA, <>MN_ASL, <>MN_ORA
>3a7e55	8f 7d ab 7c cb 7c ab 7c
>3a7e5d	07 7d af 7c ef 7d af 7c		                .word <>MN_JSR, <>MN_AND, <>MN_JSL, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 2x
>3a7e65	eb 7c af 7c cf 7c af 7c
>3a7e6d	17 7d af 7c cf 7c af 7d		                .word <>MN_PLP, <>MN_AND, <>MN_ROL, <>MN_PLD, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>3a7e75	eb 7c af 7c cf 7c af 7c
>3a7e7d	6f 7d af 7c af 7c af 7c		                .word <>MN_BMI, <>MN_AND, <>MN_AND, <>MN_AND, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND    ; 3x
>3a7e85	eb 7c af 7c cf 7c af 7c
>3a7e8d	37 7d af 7c e3 7c cf 7d		                .word <>MN_SEC, <>MN_AND, <>MN_DEC, <>MN_TSC, <>MN_BIT, <>MN_AND, <>MN_ROL, <>MN_AND
>3a7e95	eb 7c af 7c cf 7c af 7c
>3a7e9d	0b 7d b3 7c f3 7d b3 7c		                .word <>MN_RTI, <>MN_EOR, <>MN_WDM, <>MN_EOR, <>MN_MVP, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 4x
>3a7ea5	07 7e b3 7c d3 7c b3 7c
>3a7ead	1b 7d b3 7c d3 7c b3 7d		                .word <>MN_PHA, <>MN_EOR, <>MN_LSR, <>MN_PHK, <>MN_JMP, <>MN_EOR, <>MN_LSR, <>MN_EOR
>3a7eb5	ef 7c b3 7c d3 7c b3 7c
>3a7ebd	73 7d b3 7c b3 7c b3 7c		                .word <>MN_BVC, <>MN_EOR, <>MN_EOR, <>MN_EOR, <>MN_MVN, <>MN_EOR, <>MN_LSR, <>MN_EOR    ; 5x
>3a7ec5	0b 7e b3 7c d3 7c b3 7c
>3a7ecd	3b 7d b3 7c 9b 7d d3 7d		                .word <>MN_CLI, <>MN_EOR, <>MN_PHY, <>MN_TCD, <>MN_JML, <>MN_EOR, <>MN_LSR, <>MN_EOR
>3a7ed5	17 7e b3 7c d3 7c b3 7c
>3a7edd	0f 7d b7 7c f7 7d b7 7c		                .word <>MN_RTS, <>MN_ADC, <>MN_PER, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 6x
>3a7ee5	93 7d b7 7c d7 7c b7 7c
>3a7eed	1f 7d b7 7c d7 7c b7 7d		                .word <>MN_PLA, <>MN_ADC, <>MN_ROR, <>MN_RTL, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>3a7ef5	ef 7c b7 7c d7 7c b7 7c
>3a7efd	77 7d b7 7c b7 7c b7 7c		                .word <>MN_BVS, <>MN_ADC, <>MN_ADC, <>MN_ADC, <>MN_STZ, <>MN_ADC, <>MN_ROR, <>MN_ADC    ; 7x
>3a7f05	93 7d b7 7c d7 7c b7 7c
>3a7f0d	3f 7d b7 7c 9f 7d d7 7d		                .word <>MN_SEI, <>MN_ADC, <>MN_PLY, <>MN_TDC, <>MN_JMP, <>MN_ADC, <>MN_ROR, <>MN_ADC
>3a7f15	ef 7c b7 7c d7 7c b7 7c
>3a7f1d	97 7d bb 7c fb 7d bb 7c		                .word <>MN_BRA, <>MN_STA, <>MN_BRL, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 8x
>3a7f25	f3 7c bb 7c db 7c bb 7c
>3a7f2d	23 7d eb 7c 53 7d bb 7d		                .word <>MN_DEY, <>MN_BIT, <>MN_TXA, <>MN_PHB, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA
>3a7f35	f3 7c bb 7c db 7c bb 7c
>3a7f3d	7b 7d bb 7c bb 7c bb 7c		                .word <>MN_BCC, <>MN_STA, <>MN_STA, <>MN_STA, <>MN_STY, <>MN_STA, <>MN_STX, <>MN_STA    ; 9x
>3a7f45	f3 7c bb 7c db 7c bb 7c
>3a7f4d	43 7d bb 7c 57 7d db 7d		                .word <>MN_TYA, <>MN_STA, <>MN_TXS, <>MN_TXY, <>MN_STZ, <>MN_STA, <>MN_STZ, <>MN_STA
>3a7f55	93 7d bb 7c 93 7d bb 7c
>3a7f5d	f7 7c bf 7c df 7c bf 7c		                .word <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Ax
>3a7f65	f7 7c bf 7c df 7c bf 7c
>3a7f6d	27 7d bf 7c 5b 7d bf 7d		                .word <>MN_TAY, <>MN_LDA, <>MN_TAX, <>MN_PLB, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>3a7f75	f7 7c bf 7c df 7c bf 7c
>3a7f7d	7f 7d bf 7c bf 7c bf 7c		                .word <>MN_BCS, <>MN_LDA, <>MN_LDA, <>MN_LDA, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA    ; Bx
>3a7f85	f7 7c bf 7c df 7c bf 7c
>3a7f8d	47 7d bf 7c 5f 7d df 7d		                .word <>MN_CLV, <>MN_LDA, <>MN_TSX, <>MN_TYX, <>MN_LDY, <>MN_LDA, <>MN_LDX, <>MN_LDA
>3a7f95	f7 7c bf 7c df 7c bf 7c
>3a7f9d	fb 7c c3 7c ff 7d c3 7c		                .word <>MN_CPY, <>MN_CMP, <>MN_REP, <>MN_CMP, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Cx
>3a7fa5	fb 7c c3 7c e3 7c c3 7c
>3a7fad	2b 7d c3 7c 63 7d c3 7d		                .word <>MN_INY, <>MN_CMP, <>MN_DEX, <>MN_WAI, <>MN_CPY, <>MN_CMP, <>MN_DEC, <>MN_CMP
>3a7fb5	fb 7c c3 7c e3 7c c3 7c
>3a7fbd	83 7d c3 7c c3 7c c3 7c		                .word <>MN_BNE, <>MN_CMP, <>MN_CMP, <>MN_CMP, <>MN_PEI, <>MN_CMP, <>MN_DEC, <>MN_CMP    ; Dx
>3a7fc5	0f 7e c3 7c e3 7c c3 7c
>3a7fcd	4b 7d c3 7c a3 7d e3 7d		                .word <>MN_CLD, <>MN_CMP, <>MN_PHX, <>MN_STP, <>MN_JML, <>MN_CMP, <>MN_DEC, <>MN_CMP
>3a7fd5	17 7e c3 7c e3 7c c3 7c
>3a7fdd	ff 7c c7 7c 03 7e c7 7c		                .word <>MN_CPX, <>MN_SBC, <>MN_SEP, <>MN_SBC, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Ex
>3a7fe5	ff 7c c7 7c e7 7c c7 7c
>3a7fed	2f 7d c7 7c 67 7d c7 7d		                .word <>MN_INX, <>MN_SBC, <>MN_NOP, <>MN_XBA, <>MN_CPX, <>MN_SBC, <>MN_INC, <>MN_SBC
>3a7ff5	ff 7c c7 7c e7 7c c7 7c
>3a7ffd	87 7d c7 7c c7 7c c7 7c		                .word <>MN_BEQ, <>MN_SBC, <>MN_SBC, <>MN_SBC, <>MN_PEA, <>MN_SBC, <>MN_INC, <>MN_SBC    ; Fx
>3a8005	13 7e c7 7c e7 7c c7 7c
>3a800d	4f 7d c7 7c a7 7d e7 7d		                .word <>MN_SED, <>MN_SBC, <>MN_PLX, <>MN_XCE, <>MN_JSR, <>MN_SBC, <>MN_INC, <>MN_SBC
>3a8015	07 7d c7 7c e7 7c c7 7c
>3a801d	00 00				                .word 0
>3a801f	13 00 02 09			ADDRESS_TAB     .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R                  ; 0x
>3a8023	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8027	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a802b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a802f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 1x
>3a8033	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8037	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>3a803b	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a803f	03 00 0b 09			                .byte ADDR_ABS, ADDR_DP_IND_X, ADDR_ABS_LONG, ADDR_SP_R                 ; 2x
>3a8043	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8047	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a804b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a804f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 3x
>3a8053	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8057	13 06 08 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_ACC, ADDR_IMPLIED
>3a805b	07 07 07 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a805f	13 00 13 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_IMPLIED, ADDR_SP_R              ; 4x
>3a8063	14 01 01 0a			                .byte ADDR_XYC, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8067	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a806b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a806f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 5x
>3a8073	14 05 05 0d			                .byte ADDR_XYC, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8077	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a807b	0b 07 07 0b			                .byte ADDR_ABS_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_LONG
>3a807f	13 00 16 09			                .byte ADDR_IMPLIED, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R          ; 6x
>3a8083	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a8087	13 82 08 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_ACC, ADDR_IMPLIED
>3a808b	15 03 03 0b			                .byte ADDR_ABS_IND, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a808f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 7x
>3a8093	05 05 05 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8097	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a809b	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a809f	12 00 16 09			                .byte ADDR_PC_REL, ADDR_DP_IND_X, ADDR_PC_REL_LONG, ADDR_SP_R           ; 8x
>3a80a3	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a80a7	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a80ab	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a80af	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; 9x
>3a80b3	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>3a80b7	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a80bb	03 07 07 0e			                .byte ADDR_ABS, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a80bf	82 00 42 09			                .byte ADDR_IMM | OP_M_EFFECT, ADDR_DP_IND_X, ADDR_IMM | OP_X_EFFECT, ADDR_SP_R  ; Ax
>3a80c3	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a80c7	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a80cb	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a80cf	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Bx
>3a80d3	05 05 11 0d			                .byte ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y, ADDR_DP_Y_LONG
>3a80d7	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a80db	07 07 06 0e			                .byte ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_Y, ADDR_ABS_X_LONG
>3a80df	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Cx
>3a80e3	01 01 01 0a			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_LONG
>3a80e7	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a80eb	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a80ef	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Dx
>3a80f3	01 05 05 0d			                .byte ADDR_DP, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a80f7	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a80fb	17 07 07 0e			                .byte ADDR_ABS_IND_LONG, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a80ff	42 00 02 09			                .byte ADDR_IMM | OP_X_EFFECT, ADDR_DP_IND_X, ADDR_IMM, ADDR_SP_R        ; Ex
>3a8103	01 01 01 0f			                .byte ADDR_DP, ADDR_DP, ADDR_DP, ADDR_DP_IND
>3a8107	13 82 13 13			                .byte ADDR_IMPLIED, ADDR_IMM | OP_M_EFFECT, ADDR_IMPLIED, ADDR_IMPLIED
>3a810b	03 03 03 0b			                .byte ADDR_ABS, ADDR_ABS, ADDR_ABS, ADDR_ABS_LONG
>3a810f	12 04 0f 0c			                .byte ADDR_PC_REL, ADDR_DP_IND_Y, ADDR_DP_IND, ADDR_SP_R_Y              ; Fx
>3a8113	03 05 05 0d			                .byte ADDR_ABS, ADDR_DP_X, ADDR_DP_X, ADDR_DP_Y_LONG
>3a8117	13 06 13 13			                .byte ADDR_IMPLIED, ADDR_ABS_Y, ADDR_IMPLIED, ADDR_IMPLIED
>3a811b	10 07 07 0e			                .byte ADDR_ABS_X_ID, ADDR_ABS_X, ADDR_ABS_X, ADDR_ABS_X_LONG
>3a811f	01 01 01 02 01 01 02 02		ADDR_LENGTH     .byte 1, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 0, 2, 2, 2, 2
>3a8127	00 01 01 03 01 01 03 01 02 01 01 00 02 02 02 02
.3a8137					ADDR_PATTERNS
>3a8137	41 00				            .null "A"
>3a8139	08				            .byte ADDR_ACC
>3a813a	64 64 3a 64 64 64 64 2c		            .null "dd:dddd,X"
>3a8142	58 00
>3a8144	0e				            .byte ADDR_ABS_X_LONG
>3a8145	64 64 3a 64 64 64 64 00		            .null "dd:dddd"
>3a814d	0b				            .byte ADDR_ABS_LONG
>3a814e	64 64 64 64 2c 58 00		            .null "dddd,X"
>3a8155	07				            .byte ADDR_ABS_X
>3a8156	64 64 64 64 2c 59 00		            .null "dddd,Y"
>3a815d	06				            .byte ADDR_ABS_Y
>3a815e	64 64 64 64 00			            .null "dddd"
>3a8163	03				            .byte ADDR_ABS
>3a8164	64 64 2c 58 00			            .null "dd,X"
>3a8169	05				            .byte ADDR_DP_X
>3a816a	64 64 2c 59 00			            .null "dd,Y"
>3a816f	11				            .byte ADDR_DP_Y
>3a8170	64 64 2c 53 00			            .null "dd,S"
>3a8175	09				            .byte ADDR_SP_R
>3a8176	64 64 00			            .null "dd"
>3a8179	01				            .byte ADDR_DP
>3a817a	23 64 64 64 64 00		            .null "#dddd"
>3a8180	c2				            .byte ADDR_IMM | OP_M_EFFECT | OP_X_EFFECT
>3a8181	23 64 64 2c 23 64 64 00		            .null "#dd,#dd"
>3a8189	14				            .byte ADDR_XYC
>3a818a	23 64 64 00			            .null "#dd"
>3a818e	02				            .byte ADDR_IMM
>3a818f	28 64 64 2c 53 29 2c 59		            .null "(dd,S),Y"
>3a8197	00
>3a8198	0c				            .byte ADDR_SP_R_Y
>3a8199	28 64 64 64 64 2c 58 29		            .null "(dddd,X)"
>3a81a1	00
>3a81a2	10				            .byte ADDR_ABS_X_ID
>3a81a3	28 64 64 64 64 29 00		            .null "(dddd)"
>3a81aa	10				            .byte ADDR_ABS_X_ID
>3a81ab	28 64 64 2c 58 29 00		            .null "(dd,X)"
>3a81b2	00				            .byte ADDR_DP_IND_X
>3a81b3	28 64 64 29 2c 59 00		            .null "(dd),Y"
>3a81ba	04				            .byte ADDR_DP_IND_Y
>3a81bb	28 64 64 29 00			            .null "(dd)"
>3a81c0	0f				            .byte ADDR_DP_IND
>3a81c1	5b 64 64 64 64 5d 00		            .null "[dddd]"
>3a81c8	17				            .byte ADDR_ABS_IND_LONG
>3a81c9	5b 64 64 5d 2c 59 00		            .null "[dd],Y"
>3a81d0	0d				            .byte ADDR_DP_Y_LONG
>3a81d1	5b 64 64 5d 00			            .null "[dd]"
>3a81d6	0a				            .byte ADDR_DP_LONG
>3a81d7	00 00				                .byte 0, 0

;******  Return to file: src\monitor.s

.3a81d9					M_INC_CURSOR
.3a81d9	08		php		                PHP
.3a81da	c2 20		rep #$20	            REP #$20
.3a81dc	48		pha		                PHA
.3a81dd	18		clc		                CLC
.3a81de	af 7a 08 00	lda $00087a	                LDA MCURSOR
.3a81e2	69 01 00	adc #$0001	                ADC #1
.3a81e5	8f 7a 08 00	sta $00087a	                STA MCURSOR
.3a81e9	e2 20		sep #$20	            SEP #$20
.3a81eb	af 7c 08 00	lda $00087c	                LDA MCURSOR+2
.3a81ef	69 00		adc #$00	                ADC #0
.3a81f1	8f 7c 08 00	sta $00087c	                STA MCURSOR+2
.3a81f5	c2 20		rep #$20	            REP #$20
.3a81f7	68		pla		                PLA
.3a81f8	28		plp		                PLP
.3a81f9	6b		rtl		                RTL
.3a81fa					MPRINTB
.3a81fa	08		php		                PHP
.3a81fb	c2 10		rep #$10	            REP #$10
.3a81fd	e2 20		sep #$20	            SEP #$20
.3a81ff	da		phx		                PHX
.3a8200	a2 08 00	ldx #$0008	                LDX #8          ; Set number of bits to print to 8
.3a8203	0a		asl a		loop            ASL A           ; Shift MSB to C
.3a8204	b0 08		bcs $3a820e	                BCS is_one
.3a8206	48		pha		                PHA             ; Save value to print
.3a8207	a9 30		lda #$30	                LDA #'0'        ; Print '0'
.3a8209	20 18 00	jsr $3a0018	            JSR PRINTC
.3a820c	80 06		bra $3a8214	                BRA continue
.3a820e	48		pha		is_one          PHA             ; Save value to print
.3a820f	a9 31		lda #$31	                LDA #'1'        ; Print '1'
.3a8211	20 18 00	jsr $3a0018	            JSR PRINTC
.3a8214	68		pla		continue        PLA
.3a8215	ca		dex		                DEX             ; Count down the bits to shift
.3a8216	d0 eb		bne $3a8203	                BNE loop        ; And try the next one if there is one
.3a8218	fa		plx		                PLX             ; Otherwise, return
.3a8219	28		plp		                PLP
.3a821a	6b		rtl		                RTL
.3a821b					MSKIPWS
.3a821b	08		php		            PHP
.3a821c	c2 20		rep #$20	            REP #$20
.3a821e	48		pha		            PHA
.3a821f	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a8222	5b		tcd		            TCD
.3a8223	68		pla		            PLA
.3a8224	28		plp		            PLP
.3a8225	e2 20		sep #$20	            SEP #$20
.3a8227	a7 32		lda [$087a]	loop            LDA [MCURSOR]       ; Check the current character
.3a8229	f0 0a		beq $3a8235	                BEQ done            ; If NULL, we're done
.3a822b	c9 20		cmp #$20	                CMP #' '            ; Is it a space?
.3a822d	d0 06		bne $3a8235	                BNE done            ; No: we're done
.3a822f	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR    ; Yes, try the next one
.3a8233	80 f2		bra $3a8227	                BRA loop
.3a8235	6b		rtl		done            RTL
.3a8236					MPARSESTR
.3a8236	08		php		                PHP
.3a8237	08		php		            PHP
.3a8238	c2 20		rep #$20	            REP #$20
.3a823a	48		pha		            PHA
.3a823b	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a823e	5b		tcd		            TCD
.3a823f	68		pla		            PLA
.3a8240	28		plp		            PLP
.3a8241	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR                ; Point to the first character of the name
.3a8245	22 1b 82 3a	jsl $3a821b	                JSL MSKIPWS                     ; Skip white space
.3a8249	c2 30		rep #$30	            REP #$30
.3a824b	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.3a824d	c2 20		rep #$20	            REP #$20
.3a824f	29 ff 00	and #$00ff	                AND #$00FF
.3a8252	0a		asl a		                ASL A                           ; multiply it by forfour
.3a8253	0a		asl a		                ASL A
.3a8254	aa		tax		                TAX                             ; ... to get the index to the argument
.3a8255	a5 32		lda $087a	                LDA MCURSOR                     ; Set the argument to the address of the first byte
.3a8257	95 0d		sta $0855,x	                STA MARG1,X
.3a8259	a5 34		lda $087c	                LDA MCURSOR+2
.3a825b	95 0f		sta $0857,x	                STA MARG1+2,X
.3a825d	e2 20		sep #$20	            SEP #$20
.3a825f	a7 32		lda [$087a]	loop            LDA [MCURSOR]                   ; Scan to the closing double quote
.3a8261	f0 14		beq $3a8277	                BEQ done                        ; If NULL... treat it as a closed argument
.3a8263	c9 22		cmp #$22	                CMP #CHAR_DQUOTE
.3a8265	f0 06		beq $3a826d	                BEQ close_string
.3a8267	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a826b	80 f2		bra $3a825f	                BRA loop
.3a826d	a9 00		lda #$00	close_string    LDA #0                          ; Write a NULL to close the string
.3a826f	87 32		sta [$087a]	                STA [MCURSOR]
.3a8271	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR                ; And point to the next byte
.3a8275	e6 31		inc $0879	                INC MARG_LEN
.3a8277	28		plp		done            PLP
.3a8278	6b		rtl		                RTL
.3a8279					MPARSEARG
.3a8279	08		php		            PHP
.3a827a	c2 20		rep #$20	            REP #$20
.3a827c	48		pha		            PHA
.3a827d	a9 48 08	lda #$0848	            LDA #<>MONITOR_VARS
.3a8280	5b		tcd		            TCD
.3a8281	68		pla		            PLA
.3a8282	28		plp		            PLP
.3a8283	e2 20		sep #$20	            SEP #$20
.3a8285	64 4a		stz $0892	                STZ MTEMP                       ; Use MTEMP as a flag for having processed digits
.3a8287	c2 20		rep #$20	            REP #$20
.3a8289	64 50		stz $0898	                STZ MPARSEDNUM                  ; Clear the parsed number
.3a828b	64 52		stz $089a	                STZ MPARSEDNUM+2
.3a828d					pa_loop
.3a828d	e2 20		sep #$20	            SEP #$20
.3a828f	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Get the current character
.3a8291	c9 3a		cmp #$3a	                CMP #":"
.3a8293	f0 0d		beq $3a82a2	                BEQ pa_next_char                ; Ignore any colons
.3a8295	20 be 03	jsr $3a03be	            JSR ISHEX
.3a8298	90 0e		bcc $3a82a8	                BCC finished_arg                ; No? We're done with this argument
.3a829a	22 11 77 3a	jsl $3a7711	                JSL AS_SHIFT_HEX                ; Yes: shift it onto MPARSEDNUM
.3a829e	a9 01		lda #$01	                LDA #1                          ; Flag that we've processed a character
.3a82a0	85 4a		sta $0892	                STA MTEMP
.3a82a2	22 d9 81 3a	jsl $3a81d9	pa_next_char    JSL M_INC_CURSOR                ; And try the next character
.3a82a6	80 e5		bra $3a828d	                BRA pa_loop
.3a82a8	a5 4a		lda $0892	finished_arg    LDA MTEMP                       ; Check to see if we've processed any characters
.3a82aa	f0 16		beq $3a82c2	                BEQ done                        ; No: we're done
.3a82ac	a5 31		lda $0879	                LDA MARG_LEN                    ; Get the argument count
.3a82ae	c2 20		rep #$20	            REP #$20
.3a82b0	29 ff 00	and #$00ff	                AND #$00FF
.3a82b3	0a		asl a		                ASL A                           ; multiply it by forfour
.3a82b4	0a		asl a		                ASL A
.3a82b5	aa		tax		                TAX                             ; ... to get the index to the argument
.3a82b6	a5 50		lda $0898	                LDA MPARSEDNUM                  ; Copy the value to the argument slot
.3a82b8	95 0d		sta $0855,x	                STA MARG1,X
.3a82ba	a5 52		lda $089a	                LDA MPARSEDNUM+2
.3a82bc	95 0f		sta $0857,x	                STA MARG1+2,X
.3a82be	e2 20		sep #$20	            SEP #$20
.3a82c0	e6 31		inc $0879	                INC MARG_LEN                    ; And bump up the argument count
.3a82c2	6b		rtl		done            RTL
.3a82c3					MPARSEALLARG
.3a82c3	e2 20		sep #$20	            SEP #$20
.3a82c5	64 31		stz $0879	                STZ MARG_LEN                    ; Set the arg count to 0
.3a82c7	22 1b 82 3a	jsl $3a821b	parse_arg       JSL MSKIPWS                     ; Otherwise, skip white space
.3a82cb	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; Check the current character
.3a82cd	f0 21		beq $3a82f0	                BEQ done                        ; If it is NULL, we're done
.3a82cf	c9 22		cmp #$22	                CMP #CHAR_DQUOTE                ; Is it a double-quote?
.3a82d1	d0 06		bne $3a82d9	                BNE regular_arg
.3a82d3	22 36 82 3a	jsl $3a8236	                JSL MPARSESTR                   ; Yes: parse it as a string argument
.3a82d7	80 0a		bra $3a82e3	                BRA check_rest
.3a82d9	22 79 82 3a	jsl $3a8279	regular_arg     JSL MPARSEARG                   ; Attempt to parse the argument
.3a82dd	a5 31		lda $0879	                LDA MARG_LEN                    ; Check how many arguments we've processed
.3a82df	c9 09		cmp #$09	                CMP #9
.3a82e1	b0 0d		bcs $3a82f0	                BGE done                        ; If >=9, then we're done
.3a82e3	a7 32		lda [$087a]	check_rest      LDA [MCURSOR]                   ; Check the current character
.3a82e5	f0 09		beq $3a82f0	                BEQ done                        ; If EOL: we're done
.3a82e7	c9 20		cmp #$20	                CMP #' '
.3a82e9	f0 dc		beq $3a82c7	                BEQ parse_arg                   ; If space: try to process another argument
.3a82eb	20 be 03	jsr $3a03be	            JSR ISHEX
.3a82ee	b0 d7		bcs $3a82c7	                BCS parse_arg                   ; If hex digit: try to process another argument
.3a82f0	6b		rtl		done            RTL
.3a82f1					IMPARSE
.3a82f1	08		php		                PHP
.3a82f2	0b		phd		                PHD
.3a82f3	08		php		            PHP
.3a82f4	c2 20		rep #$20	            REP #$20
.3a82f6	48		pha		            PHA
.3a82f7	a9 48 08	lda #$0848	            LDA #MONITOR_VARS
.3a82fa	5b		tcd		            TCD
.3a82fb	68		pla		            PLA
.3a82fc	28		plp		            PLP
.3a82fd	c2 10		rep #$10	            REP #$10
.3a82ff	e2 20		sep #$20	            SEP #$20
.3a8301	a2 31 00	ldx #$0031	                LDX #MARG_LEN - MONITOR_VARS    ; Clear the monitor command line parameters
.3a8304	74 00		stz $0848,x	clear_command   STZ MONITOR_VARS,X
.3a8306	ca		dex		                DEX
.3a8307	d0 fb		bne $3a8304	                BNE clear_command
.3a8309	a9 00		lda #$00	                LDA #`INPUTBUF                  ; Point the command parser to the input buffer
.3a830b	85 02		sta $084a	                STA MCMDADDR+2
.3a830d	85 34		sta $087c	                STA MCURSOR+2                   ; And point MCURSOR there too
.3a830f	c2 20		rep #$20	            REP #$20
.3a8311	a9 00 4f	lda #$4f00	                LDA #<>INPUTBUF
.3a8314	85 00		sta $0848	                STA MCMDADDR
.3a8316	85 32		sta $087a	                STA MCURSOR
.3a8318	e2 20		sep #$20	            SEP #$20
.3a831a	22 1b 82 3a	jsl $3a821b	                JSL MSKIPWS                     ; Skip to the first letter of the command
.3a831e	c9 00		cmp #$00	                CMP #0                          ; Is the current character a NULL?
.3a8320	f0 38		beq $3a835a	                BEQ done                        ; Yes: there's no command here
.3a8322	c2 20		rep #$20	            REP #$20
.3a8324	a5 32		lda $087a	                LDA MCURSOR
.3a8326	85 08		sta $0850	                STA MCMD
.3a8328	e2 20		sep #$20	            SEP #$20
.3a832a	a5 34		lda $087c	                LDA MCURSOR+2
.3a832c	85 0a		sta $0852	                STA MCMD+2
.3a832e	a2 01 00	ldx #$0001	                LDX #1
.3a8331	22 d9 81 3a	jsl $3a81d9	cmd_loop        JSL M_INC_CURSOR                ; Move to the next character
.3a8335	a7 32		lda [$087a]	                LDA [MCURSOR]                   ; What is that character?
.3a8337	d0 06		bne $3a833f	                BNE cmd_space                   ; If not NULL: check for a space
.3a8339	86 0b		stx $0853	no_arguments    STX MCMD_LEN                    ; If NULL: Save the length of the command
.3a833b	64 31		stz $0879	                STZ MARG_LEN                    ; ... And the fact there are no arguments
.3a833d	80 1b		bra $3a835a	                BRA done                        ; ... And return
.3a833f	c9 20		cmp #$20	cmd_space       CMP #' '                        ; Is it a space?
.3a8341	f0 03		beq $3a8346	                BEQ found_cmd                   ; Yes: save the length
.3a8343	e8		inx		                INX                             ; No: go to the next character
.3a8344	80 eb		bra $3a8331	                BRA cmd_loop
.3a8346	86 0b		stx $0853	found_cmd       STX MCMD_LEN                    ; Save the length of the command
.3a8348	a9 00		lda #$00	                LDA #0
.3a834a	87 32		sta [$087a]	                STA [MCURSOR]                   ; Write a NULL to the end of the command
.3a834c	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR                ; And skip to the next character
.3a8350	a7 08		lda [$0850]	                LDA [MCMD]                      ; Check the command
.3a8352	c9 41		cmp #$41	                CMP #'A'
.3a8354	f0 07		beq $3a835d	                BEQ parse_asm                   ; If 'A', parse the line for the assemble command
.3a8356	22 c3 82 3a	jsl $3a82c3	                JSL MPARSEALLARG
.3a835a	2b		pld		done            PLD
.3a835b	28		plp		                PLP
.3a835c	6b		rtl		                RTL
.3a835d	22 1b 82 3a	jsl $3a821b	parse_asm       JSL MSKIPWS                     ; Skip to the first letter of the address
.3a8361	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a8363	f0 f5		beq $3a835a	                BEQ done                        ; Exit if we got the end-of-line
.3a8365	22 79 82 3a	jsl $3a8279	                JSL MPARSEARG                   ; Parse the first argument as the target address
.3a8369	22 1b 82 3a	jsl $3a821b	                JSL MSKIPWS                     ; Skip to the first letter of the mnemonic
.3a836d	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a836f	f0 e9		beq $3a835a	                BEQ done                        ; Exit if we got the end-of-line
.3a8371	c2 20		rep #$20	            REP #$20
.3a8373	a5 32		lda $087a	                LDA MCURSOR                     ; Save pointer to the start of the mnemonic
.3a8375	85 11		sta $0859	                STA MARG2
.3a8377	e2 20		sep #$20	            SEP #$20
.3a8379	a5 34		lda $087c	                LDA MCURSOR+2
.3a837b	85 13		sta $085b	                STA MARG2+2
.3a837d	22 d9 81 3a	jsl $3a81d9	asm_find_sp     JSL M_INC_CURSOR                ; Find the space at the end of the mnemonic
.3a8381	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a8383	f0 26		beq $3a83ab	                BEQ asm_no_operand              ; If EOL: we have an instruction but no operand
.3a8385	c9 20		cmp #$20	                CMP #' '
.3a8387	d0 f4		bne $3a837d	                BNE asm_find_sp
.3a8389	a9 00		lda #$00	                LDA #0
.3a838b	87 32		sta [$087a]	                STA [MCURSOR]                   ; Null terminate the mnemonic
.3a838d	e6 31		inc $0879	                INC MARG_LEN                    ; Count the mnemonic as an argument
.3a838f	22 d9 81 3a	jsl $3a81d9	                JSL M_INC_CURSOR
.3a8393	22 1b 82 3a	jsl $3a821b	                JSL MSKIPWS                     ; Skip to the addressing mode
.3a8397	a7 32		lda [$087a]	                LDA [MCURSOR]
.3a8399	f0 bf		beq $3a835a	                BEQ done                        ; If EOL: we're done
.3a839b	c2 20		rep #$20	            REP #$20
.3a839d	a5 32		lda $087a	                LDA MCURSOR                     ; Set the pointer to the addressing mode
.3a839f	85 15		sta $085d	                STA MARG3
.3a83a1	e2 20		sep #$20	            SEP #$20
.3a83a3	a5 34		lda $087c	                LDA MCURSOR+2
.3a83a5	85 17		sta $085f	                STA MARG3+2
.3a83a7	e6 31		inc $0879	                INC MARG_LEN                    ; And count it as the second argument
.3a83a9	80 af		bra $3a835a	                BRA done                        ; and return
.3a83ab	e6 31		inc $0879	asm_no_operand  INC MARG_LEN                    ; Increment the argument count
.3a83ad	80 ab		bra $3a835a	                BRA done                        ; And quit
.3a83af					IMLOAD
.3a83af	08		php		                PHP
.3a83b0	c2 10		rep #$10	            REP #$10
.3a83b2	e2 20		sep #$20	            SEP #$20
.3a83b4	a5 31		lda $0879	                LDA MARG_LEN
.3a83b6	d0 0f		bne $3a83c7	                BNE get_arguments
.3a83b8	a2 a5 84	ldx #$84a5	bad_arguments   LDX #<>MERRARGS                 ; Print bad arguments error
.3a83bb	a9 3a		lda #$3a	                LDA #`MERRARGS
.3a83bd	48		pha		                PHA
.3a83be	ab		plb		                PLB
.3a83bf	20 16 03	jsr $3a0316	            JSR PRINTS
.3a83c2	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a83c5	80 61		bra $3a8428	                BRA done
.3a83c7					get_arguments
.3a83c7	c2 20		rep #$20	            REP #$20
.3a83c9	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.3a83cb	8f 23 08 00	sta $000823	                STA ARGUMENT1
.3a83cf	a5 0f		lda $0857	                LDA MARG1+2
.3a83d1	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.3a83d5	20 95 65	jsr $3a6595	            JSR SETFILEDESC
.3a83d8	e2 20		sep #$20	            SEP #$20
.3a83da	a5 31		lda $0879	                LDA MARG_LEN
.3a83dc	c9 01		cmp #$01	                CMP #1
.3a83de	d0 0f		bne $3a83ef	                BNE get_dest
.3a83e0	c2 20		rep #$20	            REP #$20
.3a83e2	a9 ff ff	lda #$ffff	                LDA #$FFFF                      ; Destination address not provided...
.3a83e5	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR              ; ... set it to something sane
.3a83e9	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a83ed	80 0e		bra $3a83fd	                BRA try_load
.3a83ef					get_dest
.3a83ef	c2 20		rep #$20	            REP #$20
.3a83f1	a5 11		lda $0859	                LDA MARG2                       ; Set the destination address from the arguments
.3a83f3	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3a83f7	a5 13		lda $085b	                LDA MARG2+2
.3a83f9	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3a83fd	22 18 11 00	jsl $001118	try_load        JSL FK_LOAD                     ; Try to load the file
.3a8401	b0 25		bcs $3a8428	                BCS done
.3a8403					error
.3a8403	e2 20		sep #$20	            SEP #$20
.3a8405	a2 cb 84	ldx #$84cb	                LDX #<>MCANTLOAD                ; Print bad arguments error
.3a8408	a9 3a		lda #$3a	                LDA #`MCANTLOAD
.3a840a	48		pha		                PHA
.3a840b	ab		plb		                PLB
.3a840c	20 16 03	jsr $3a0316	            JSR PRINTS
.3a840f	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.3a8413	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a8416	a9 20		lda #$20	                LDA #' '
.3a8418	20 18 00	jsr $3a0018	            JSR PRINTC
.3a841b	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.3a841f	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a8422	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a8425	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a8428	28		plp		done            PLP
.3a8429	6b		rtl		                RTL
.3a842a					IMSAVE
.3a842a	8b		phb		                PHB
.3a842b	08		php		                PHP
.3a842c	c2 10		rep #$10	            REP #$10
.3a842e	e2 20		sep #$20	            SEP #$20
.3a8430	a5 31		lda $0879	                LDA MARG_LEN
.3a8432	c9 03		cmp #$03	                CMP #3
.3a8434	f0 0f		beq $3a8445	                BEQ get_arguments
.3a8436	a2 a5 84	ldx #$84a5	                LDX #<>MERRARGS                 ; Print bad arguments error
.3a8439	a9 3a		lda #$3a	                LDA #`MERRARGS
.3a843b	48		pha		                PHA
.3a843c	ab		plb		                PLB
.3a843d	20 16 03	jsr $3a0316	            JSR PRINTS
.3a8440	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a8443	80 54		bra $3a8499	                BRA done
.3a8445					get_arguments
.3a8445	c2 20		rep #$20	            REP #$20
.3a8447	a5 0d		lda $0855	                LDA MARG1                       ; Set up the file descriptor with out path
.3a8449	8f 23 08 00	sta $000823	                STA ARGUMENT1
.3a844d	a5 0f		lda $0857	                LDA MARG1+2
.3a844f	8f 25 08 00	sta $000825	                STA ARGUMENT1+2
.3a8453	20 95 65	jsr $3a6595	            JSR SETFILEDESC
.3a8456	a5 11		lda $0859	                LDA MARG2                       ; Set the starting address
.3a8458	8f 50 03 00	sta $000350	                STA @l DOS_SRC_PTR
.3a845c	a5 13		lda $085b	                LDA MARG2+2
.3a845e	8f 52 03 00	sta $000352	                STA @l DOS_SRC_PTR+2
.3a8462	a5 15		lda $085d	                LDA MARG3                       ; Set the ending address
.3a8464	8f 58 03 00	sta $000358	                STA @l DOS_END_PTR
.3a8468	a5 17		lda $085f	                LDA MARG3+2
.3a846a	8f 5a 03 00	sta $00035a	                STA @l DOS_END_PTR+2
.3a846e	22 1c 11 00	jsl $00111c	                JSL FK_SAVE                     ; Save the data
.3a8472	b0 25		bcs $3a8499	                BCS done
.3a8474					error
.3a8474	e2 20		sep #$20	            SEP #$20
.3a8476	a2 b5 84	ldx #$84b5	                LDX #<>MCANTSAVE                ; Print bad arguments error
.3a8479	a9 3a		lda #$3a	                LDA #`MCANTSAVE
.3a847b	48		pha		                PHA
.3a847c	ab		plb		                PLB
.3a847d	20 16 03	jsr $3a0316	            JSR PRINTS
.3a8480	af 2e 03 00	lda $00032e	                LDA @l DOS_STATUS               ; Print the DOS status code
.3a8484	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a8487	a9 20		lda #$20	                LDA #' '
.3a8489	20 18 00	jsr $3a0018	            JSR PRINTC
.3a848c	af 20 03 00	lda $000320	                LDA @l BIOS_STATUS              ; Print the BIOS status code
.3a8490	20 40 03	jsr $3a0340	            JSR PRHEXB
.3a8493	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a8496	20 89 02	jsr $3a0289	            JSR PRINTCR
.3a8499	28		plp		done            PLP
.3a849a	ab		plb		                PLB
.3a849b	6b		rtl		                RTL
.3a849c	5c de 25 3a	jmp $3a25de	IMEXIT          JML INTERACT
.3a84a0	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.3a84a1	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.3a84a2	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.3a84a3	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.3a84a4	00		brk #		IMDOS           BRK ; Execute DOS command
.3a84a5					MMESSAGES
>3a84a5	42 61 64 20 61 72 67 75		MERRARGS        .null "Bad arguments",CHAR_CR,CHAR_CR
>3a84ad	6d 65 6e 74 73 0d 0d 00
>3a84b5	55 6e 61 62 6c 65 20 74		MCANTSAVE       .null "Unable to save file: "
>3a84bd	6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a84cb	55 6e 61 62 6c 65 20 74		MCANTLOAD       .null "Unable to load file: "
>3a84d3	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00
>3a84e1	0d 20 20 50 43 20 20 20		mregisters_msg  .null $0D,"  PC     A    X    Y    SP   DBR DP   NVMXDIZC",CHAR_CR
>3a84e9	20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>3a84f9	20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>3a8509	56 4d 58 44 49 5a 43 0d 00
>3a8512	41 43 44 46 47 4a 48 4c		MCOMMANDS       .null "ACDFGJHLMR;STVWX>?"
>3a851a	4d 52 3b 53 54 56 57 58 3e 3f 00

;******  Return to file: src\basic816.s

.3a8525	18		clc		START       CLC                 ; Go to native mode
.3a8526	fb		xce		            XCE
.3a8527	08		php		            PHP
.3a8528	c2 20		rep #$20	            REP #$20
.3a852a	48		pha		            PHA
.3a852b	a9 00 08	lda #$0800	            LDA #GLOBAL_VARS
.3a852e	5b		tcd		            TCD
.3a852f	68		pla		            PLA
.3a8530	28		plp		            PLP
.3a8531	08		php		            PHP
.3a8532	e2 20		sep #$20	            SEP #$20
.3a8534	48		pha		            PHA
.3a8535	a9 00		lda #$00	            LDA #BASIC_BANK
.3a8537	48		pha		            PHA
.3a8538	ab		plb		            PLB
.3a8539	68		pla		            PLA
.3a853a	28		plp		            PLP
.3a853b	c2 30		rep #$30	            REP #$30
.3a853d	20 64 85	jsr $3a8564	            JSR INITBASIC
.3a8540	a9 ff fe	lda #$feff	            LDA #STACK_END      ; Set the system stack
.3a8543	1b		tcs		            TCS
.3a8544	08		php		            PHP
.3a8545	e2 20		sep #$20	            SEP #$20
.3a8547	48		pha		            PHA
.3a8548	a9 3a		lda #$3a	            LDA #`GREET
.3a854a	48		pha		            PHA
.3a854b	ab		plb		            PLB
.3a854c	68		pla		            PLA
.3a854d	28		plp		            PLP
.3a854e	a2 63 d2	ldx #$d263	            LDX #<>GREET
.3a8551	20 16 03	jsr $3a0316	            JSR PRINTS
.3a8554	08		php		            PHP
.3a8555	e2 20		sep #$20	            SEP #$20
.3a8557	48		pha		            PHA
.3a8558	a9 00		lda #$00	            LDA #BASIC_BANK
.3a855a	48		pha		            PHA
.3a855b	ab		plb		            PLB
.3a855c	68		pla		            PLA
.3a855d	28		plp		            PLP
.3a855e	4c de 25	jmp $3a25de	            JMP INTERACT        ; Start accepting input from the user
.3a8561	4c 61 85	jmp $3a8561	WAIT        JMP WAIT
.3a8564					INITBASIC
.3a8564	08		php		            PHP
.3a8565	20 d0 01	jsr $3a01d0	            JSR INITIO
.3a8568	20 85 4d	jsr $3a4d85	            JSR CMD_NEW
.3a856b	28		plp		            PLP
.3a856c	60		rts		            RTS
>3ad263	43 32 35 36 20 46 6f 65		GREET       .text "C256 Foenix BASIC816 "
>3ad26b	6e 69 78 20 42 41 53 49 43 38 31 36 20

;******  Processing file: src\version.s

>3ad278	76 30 2e 32 2e 30 2d 61		.text "v0.2.0-alpha+251"
>3ad280	6c 70 68 61 2b 32 35 31

;******  Return to file: src\basic816.s

>3ad288	0d 00				            .byte 13,0

;******  End of listing
